// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function() { console.log('receive', Date.now()); },
 function() { return Date.now(); },
 function() { return Math.random() * 0x8000000 | 0; },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function() { console.log('rx_frame', Date.now()); },
 function($0) { window.MbedJSHal.lora.init($0); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1) { window.MbedJSHal.timers.ticker_setup($0, $1); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 24704;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan-abp.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 

  function _sleep_manager_lock_deep_sleep_internal() {
  Module['printErr']('missing function: sleep_manager_lock_deep_sleep_internal'); abort(-1);
  }

  function _sleep_manager_unlock_deep_sleep_internal() {
  Module['printErr']('missing function: sleep_manager_unlock_deep_sleep_internal'); abort(-1);
  }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "__ZN16LoRaWANInterface14cancel_sendingEv", "___stdio_close", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN16LoRaWANInterface16set_device_classE14device_class_t", "__ZN16LoRaWANInterface15get_tx_metadataER19lorawan_tx_metadata", "__ZN16LoRaWANInterface15get_rx_metadataER19lorawan_rx_metadata", "__ZN16LoRaWANInterface20get_backoff_metadataERi", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t", "__ZN7LoRaPHY25accept_tx_param_setup_reqEhh", "__ZN7LoRaPHY18dl_channel_requestEhj", "__ZN7LoRaPHY11add_channelEPK16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "__ZNK7LoRaPHY25verify_frequency_for_bandEjh", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "_memset", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN16LoRaWANInterface7receiveEPhtRhRi", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_iiiiiiii = ["0", "_aes_crypt_ctr_wrap"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "_mbed_trace_default_print", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv", "__ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_246", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_247", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_248", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_249", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_250", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_372", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_368", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_369", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_371", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_370", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_367", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_210", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_328", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_322", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_327", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_323", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_326", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_324", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_325", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_334", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_333", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_332", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_331", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_330", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_329", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_41", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_42", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_43", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_44", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb", "__ZN16SX1276_LoRaRadio11tx_done_irqEv", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_154", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_155", "__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_245", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_244", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_243", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_264", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_252", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_240", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_393", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_385", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed7Timeout7handlerEv__async_cb_291", "__ZN4mbed7Timeout7handlerEv__async_cb_289", "__ZN4mbed7Timeout7handlerEv__async_cb_290", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_alloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_93", "_mbed_vtracef__async_cb_83", "_mbed_vtracef__async_cb_84", "_mbed_vtracef__async_cb_85", "_mbed_vtracef__async_cb_92", "_mbed_vtracef__async_cb_86", "_mbed_vtracef__async_cb_91", "_mbed_vtracef__async_cb_87", "_mbed_vtracef__async_cb_88", "_mbed_vtracef__async_cb_89", "_mbed_vtracef__async_cb_90", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb", "__ZN16LoRaWANInterface10disconnectEv__async_cb", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb", "__ZN16LoRaWANInterface19remove_channel_planEv__async_cb", "__ZN16LoRaWANInterface14remove_channelEh__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterface7receiveEhPhti__async_cb", "__ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb", "__ZN16LoRaWANInterface14cancel_sendingEv__async_cb", "__ZN16LoRaWANInterfaceD2Ev__async_cb", "__ZN16LoRaWANInterfaceD0Ev__async_cb", "__ZN12LoRaWANStackD2Ev__async_cb", "__ZN12LoRaWANStackD2Ev__async_cb_375", "__ZN12LoRaWANStackD2Ev__async_cb_376", "__ZN12LoRaWANStackD2Ev__async_cb_378", "__ZN12LoRaWANStackD2Ev__async_cb_377", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_361", "__ZN12radio_eventsD2Ev__async_cb_362", "__ZN12radio_eventsD2Ev__async_cb_363", "__ZN12radio_eventsD2Ev__async_cb_364", "__ZN12radio_eventsD2Ev__async_cb_365", "__ZN12radio_eventsD2Ev__async_cb_366", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20tx_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_293", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_294", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_295", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_296", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_297", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_298", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_299", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_300", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_301", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_302", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_303", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_304", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_305", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_306", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_307", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_308", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_309", "__ZN12LoRaWANStack20process_transmissionEv", "__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_288", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_273", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_274", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_145", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_146", "__ZN12LoRaWANStack28process_transmission_timeoutEv", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_153", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_161", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_162", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_184", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_183", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_185", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_190", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_186", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_189", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_187", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_188", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_208", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_53", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_52", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_54", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_51", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_55", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_67", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_66", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_75", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_68", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_78", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_69", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_74", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_70", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_77", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_71", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_73", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_72", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_76", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_101", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_94", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_104", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_95", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_100", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_96", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_103", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_97", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_99", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_98", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_102", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_122", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_127", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_123", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_126", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_124", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_125", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_292", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb", "__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_321", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_341", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_340", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_339", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_380", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_212", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_216", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_215", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_214", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_213", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_211", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_223", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_228", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_224", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_227", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_225", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_226", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_253", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_259", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_255", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_263", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_258", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_256", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_260", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_257", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_262", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_261", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_151", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_150", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_152", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_139", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_144", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_140", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_143", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_141", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_142", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_167", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_166", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_168", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_195", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb", "__ZN12LoRaWANStack20process_transmissionEv__async_cb", "__ZN12LoRaWANStack20process_transmissionEv__async_cb_29", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_61", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_60", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_47", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_46", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_48", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_45", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_49", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_105", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_106", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_107", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_108", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_109", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_110", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_112", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_111", "__ZN12LoRaWANStack7connectEv__async_cb", "__ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack12stop_sendingEv__async_cb", "__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_392", "__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb", "__ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv", "__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb_222", "__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb", "__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv__async_cb", "__ZN7LoRaMacD2Ev__async_cb", "__ZN7LoRaMacD2Ev__async_cb_178", "__ZN7LoRaMacD2Ev__async_cb_179", "__ZN7LoRaMacD2Ev__async_cb_180", "__ZN7LoRaMacD2Ev__async_cb_181", "__ZN7LoRaMacD2Ev__async_cb_182", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_59", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_58", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_57", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_56", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb", "__ZN7LoRaMac15open_rx2_windowEv__async_cb_2", "__ZN7LoRaMac15open_rx2_windowEv__async_cb_1", "__ZN7LoRaMac15open_rx2_windowEv__async_cb", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_11", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_13", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_10", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_12", "__ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_135", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_137", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_136", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_62", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_65", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_63", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_64", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_82", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_81", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_320", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_319", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_317", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_318", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_316", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_286", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_285", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_284", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_283", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_281", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_282", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb", "__ZN7LoRaMac24continue_joining_processEv__async_cb", "__ZN7LoRaMac21handle_retransmissionEv__async_cb", "__ZN7LoRaMac21handle_retransmissionEv__async_cb_390", "__ZN7LoRaMac21handle_retransmissionEv__async_cb_389", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_400", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_398", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_399", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_397", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_343", "__ZN7LoRaMac11schedule_txEv__async_cb_342", "__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb", "__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_230", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_236", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_234", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_235", "__ZN7LoRaMac15open_rx1_windowEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_221", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_219", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_218", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_217", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_220", "__ZN7LoRaMac13clear_tx_pipeEv__async_cb_254", "__ZN7LoRaMac13clear_tx_pipeEv__async_cb", "__ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb", "__ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb", "__ZN7LoRaMac15send_ongoing_txEv__async_cb", "__ZN7LoRaMac15send_ongoing_txEv__async_cb_209", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_203", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_206", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_205", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_204", "__ZN7LoRaMac4joinEb__async_cb", "__ZN7LoRaMac4joinEb__async_cb_50", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_37", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_39", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_40", "__ZN7LoRaMac23on_backoff_timer_expiryEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_36", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb", "__ZN7LoRaMac15open_rx1_windowEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_35", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_30", "__ZN7LoRaMac15open_rx2_windowEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_34", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_31", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_33", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_32", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_38", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac10disconnectEv__async_cb_131", "__ZN7LoRaMac10disconnectEv__async_cb_130", "__ZN7LoRaMac10disconnectEv__async_cb_129", "__ZN7LoRaMac10disconnectEv__async_cb_128", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_241", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_231", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_156", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_157", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_158", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_159", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_160", "__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb", "__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_163", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_118", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_117", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_116", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_115", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_119", "__ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh__async_cb", "__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh__async_cb", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_8", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_7", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_6", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_9", "__ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh__async_cb", "__ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2___async_cb", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_373", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_374", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_279", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_280", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_265", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_266", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_267", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_268", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_269", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_270", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_271", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_272", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_310", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_311", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_312", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_313", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_314", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_315", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY18dl_channel_requestEhj__async_cb", "__ZN7LoRaPHY18dl_channel_requestEhj__async_cb_251", "__ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_237", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_238", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_164", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_165", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_113", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_114", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_79", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_80", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_132", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_133", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_134", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_120", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_121", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_14", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_15", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_191", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_199", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_196", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_198", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_197", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_200", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_aes_free__async_cb", "_mbedtls_aes_setkey_dec__async_cb", "_mbedtls_ccm_setkey__async_cb_4", "_mbedtls_ccm_setkey__async_cb_3", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb_5", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb_360", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_free__async_cb_359", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_335", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_278", "_mbedtls_cipher_update__async_cb_275", "_mbedtls_cipher_update__async_cb_276", "_mbedtls_cipher_update__async_cb_277", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_aes_setkey_dec_wrap__async_cb", "_aes_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb_202", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_193", "_mbedtls_cipher_cmac_update__async_cb_192", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_175", "_mbedtls_cipher_cmac_finish__async_cb_174", "_mbedtls_cipher_cmac_finish__async_cb_173", "_mbedtls_cipher_cmac_finish__async_cb_177", "_mbedtls_cipher_cmac_finish__async_cb_172", "_mbedtls_cipher_cmac_finish__async_cb_176", "_mbedtls_cipher_cmac_finish__async_cb_171", "_mbedtls_cipher_cmac_finish__async_cb_170", "_mbedtls_cipher_cmac_finish__async_cb_169", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_149", "_mbedtls_gcm_setkey__async_cb_148", "_mbedtls_gcm_setkey__async_cb_147", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb_138", "_mbedtls_gcm_free__async_cb", "_mbedtls_platform_zeroize__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_17", "_initialize__async_cb_22", "_initialize__async_cb_21", "_initialize__async_cb_18", "_initialize__async_cb_19", "_initialize__async_cb_20", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_23", "_schedule_interrupt__async_cb_24", "_schedule_interrupt__async_cb_25", "_schedule_interrupt__async_cb_26", "_schedule_interrupt__async_cb_27", "_schedule_interrupt__async_cb_28", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_394", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_358", "_mbed_die__async_cb_357", "_mbed_die__async_cb_356", "_mbed_die__async_cb_355", "_mbed_die__async_cb_354", "_mbed_die__async_cb_353", "_mbed_die__async_cb_352", "_mbed_die__async_cb_351", "_mbed_die__async_cb_350", "_mbed_die__async_cb_349", "_mbed_die__async_cb_348", "_mbed_die__async_cb_347", "_mbed_die__async_cb_346", "_mbed_die__async_cb_345", "_mbed_die__async_cb_344", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_338", "_mbed_error_vfprintf__async_cb_337", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_239", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_229", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_233", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_242", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "_main__async_cb", "_putc__async_cb_232", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_387", "_fflush__async_cb_386", "_fflush__async_cb_388", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_391", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_fputc__async_cb_287", "_fputc__async_cb", "_puts__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_395", "_abort_message__async_cb", "_abort_message__async_cb_194", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_16", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_207", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_201", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_396", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_384", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_383", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_382", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_381", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_379", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv", "__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb", "__ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack25process_reception_timeoutEb", "0", "0", "0"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY13apply_cf_listEPKhh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZN7LoRaPHY16set_last_tx_doneEhbj", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa", "__ZN12LoRaWANStack17process_receptionEPKhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_sleep_manager_lock_deep_sleep_internal": _sleep_manager_lock_deep_sleep_internal, "_sleep_manager_unlock_deep_sleep_internal": _sleep_manager_unlock_deep_sleep_internal, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var _sleep_manager_lock_deep_sleep_internal=env._sleep_manager_lock_deep_sleep_internal;
  var _sleep_manager_unlock_deep_sleep_internal=env._sleep_manager_unlock_deep_sleep_internal;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_160($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $481 = 0, $485 = 0, $489 = 0, $494 = 0, $495 = 0, $499 = 0, $50 = 0, $503 = 0, $505 = 0, $507 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $578 = 0, $58 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $665 = 0, $666 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10002
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 10004
 $4 = HEAP8[$0 + 5 >> 0] | 0; //@line 10006
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 10008
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 10010
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 10012
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 10014
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 10016
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 10018
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 10020
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 10022
 $22 = HEAP8[$0 + 40 >> 0] | 0; //@line 10024
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 10026
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 10028
 $28 = HEAP8[$0 + 52 >> 0] | 0; //@line 10030
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 10032
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 10034
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 10036
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 10038
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 10040
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 10042
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 10044
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 10046
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 10048
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 10050
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 10052
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 10054
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 10056
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 10058
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 10060
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 10062
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 10064
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 10066
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 10068
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 10070
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 10072
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 10074
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 10076
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 10078
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 10080
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 10082
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 10084
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 10086
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 10088
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 10090
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 10092
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 10094
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 10096
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 10098
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 10100
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 10102
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 10104
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 10106
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 10108
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 10110
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 10112
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 10114
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 10116
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 10118
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 10120
 $665 = HEAP8[$52 >> 0] | 0; //@line 10124
 $666 = $665 & 255; //@line 10125
 if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) > ($666 | 0)) {
  HEAP8[$14 + 4 + $666 >> 0] = 10; //@line 10130
  HEAP8[$52 >> 0] = $665 + 2 << 24 >> 24; //@line 10132
  HEAP8[($665 + 1 & 255) + ($14 + 4) >> 0] = $AsyncRetVal; //@line 10135
  HEAP8[$32 >> 0] = 1; //@line 10136
  HEAP8[$58 >> 0] = 1; //@line 10137
  $$0$be = $28; //@line 10138
  $$0107$be = 0; //@line 10138
 } else {
  $$0$be = $28; //@line 10140
  $$0107$be = -1010; //@line 10140
 }
 L4 : while (1) {
  if (($$0$be & 255) >= ($2 & 255)) {
   label = 32; //@line 10145
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 10149
  switch (HEAP8[$18 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 10154
    break L4;
    break;
   }
  case 5:
   {
    label = 9; //@line 10159
    break L4;
    break;
   }
  case 7:
   {
    label = 18; //@line 10164
    break L4;
    break;
   }
  case 9:
   {
    label = 24; //@line 10169
    break L4;
    break;
   }
  case 10:
   {
    label = 27; //@line 10174
    break L4;
    break;
   }
  case 2:
   {
    HEAP32[$26 >> 2] = 0; //@line 10179
    HEAP8[$6 >> 0] = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 10184
    HEAP8[$10 >> 0] = HEAP8[$18 + ($$0$be + 2 & 255) >> 0] | 0; //@line 10189
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 10190
    continue L4;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 10195
    $207 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 10198
    HEAP8[$36 >> 0] = $207; //@line 10199
    HEAP16[$44 >> 1] = 1 << ($207 & 255); //@line 10203
    $214 = HEAP8[$52 >> 0] | 0; //@line 10207
    $215 = $214 & 255; //@line 10208
    if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 10211
     $$0107$be = -1010; //@line 10211
     continue L4;
    }
    HEAP8[$52 >> 0] = $214 + 1 << 24 >> 24; //@line 10216
    HEAP8[$14 + 4 + $215 >> 0] = 4; //@line 10217
    HEAP8[$58 >> 0] = 1; //@line 10218
    $$0$be = $204; //@line 10219
    $$0107$be = 0; //@line 10219
    continue L4;
    break;
   }
  case 6:
   {
    $311 = HEAP32[$16 >> 2] | 0; //@line 10224
    if ($311 | 0) {
     label = 13; //@line 10227
     break L4;
    }
    $377 = HEAP8[$52 >> 0] | 0; //@line 10233
    $378 = $377 & 255; //@line 10234
    if ((128 - (HEAPU8[$20 >> 0] | 0) - $378 | 0) <= 2) {
     $$0$be = $119; //@line 10238
     $$0107$be = -1010; //@line 10238
     continue L4;
    }
    HEAP8[$14 + 4 + $378 >> 0] = 6; //@line 10243
    HEAP8[($377 + 1 & 255) + ($14 + 4) >> 0] = -1; //@line 10247
    HEAP8[$52 >> 0] = $377 + 3 << 24 >> 24; //@line 10249
    HEAP8[($377 + 2 & 255) + ($14 + 4) >> 0] = $4; //@line 10252
    HEAP8[$58 >> 0] = 1; //@line 10253
    $$0$be = $119; //@line 10254
    $$0107$be = 0; //@line 10254
    continue L4;
    break;
   }
  case 8:
   {
    $481 = $$0$be + 2 << 24 >> 24; //@line 10259
    $485 = HEAP8[$18 + ($119 & 255) >> 0] & 15; //@line 10263
    $489 = ($485 + ($485 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 10268
    HEAP32[$72 >> 2] = $489; //@line 10269
    HEAP32[$66 >> 2] = $489 + 1e3; //@line 10271
    $494 = HEAP8[$52 >> 0] | 0; //@line 10275
    $495 = $494 & 255; //@line 10276
    if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) <= ($495 | 0)) {
     $$0$be = $481; //@line 10279
     $$0107$be = -1010; //@line 10279
     continue L4;
    }
    HEAP8[$52 >> 0] = $494 + 1 << 24 >> 24; //@line 10284
    HEAP8[$14 + 4 + $495 >> 0] = 8; //@line 10285
    HEAP8[$32 >> 0] = 1; //@line 10286
    HEAP8[$58 >> 0] = 1; //@line 10287
    $$0$be = $481; //@line 10288
    $$0107$be = 0; //@line 10288
    continue L4;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 10293
    $$0107$be = -1013; //@line 10293
    continue L4;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$12 >> 0] = 0; //@line 10299
  HEAP8[$80 >> 0] = 0; //@line 10300
  HEAP8[$76 >> 0] = 0; //@line 10301
  HEAP8[$68 >> 0] = 0; //@line 10302
  $130 = $119 & 255; //@line 10303
  $131 = $130 + -1 | 0; //@line 10304
  HEAP32[$56 >> 2] = $18 + $131; //@line 10306
  HEAP8[$34 >> 0] = $114 - $131; //@line 10309
  HEAP8[$82 >> 0] = HEAP8[$42 >> 0] | 0; //@line 10311
  HEAP8[$64 >> 0] = HEAP8[$84 >> 0] | 0; //@line 10313
  HEAP8[$106 >> 0] = HEAP8[$74 >> 0] | 0; //@line 10315
  HEAP8[$102 >> 0] = HEAP8[$92 >> 0] | 0; //@line 10317
  HEAP8[$30 >> 0] = HEAP8[$24 >> 0] | 0; //@line 10319
  $142 = HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] | 0; //@line 10322
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 10323
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($54, $48, $12, $80, $76, $68) | 0; //@line 10324
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 474; //@line 10327
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 10328
   HEAP8[$144 >> 0] = $2; //@line 10329
   $145 = $ReallocAsyncCtx + 5 | 0; //@line 10330
   HEAP8[$145 >> 0] = $4; //@line 10331
   $146 = $ReallocAsyncCtx + 8 | 0; //@line 10332
   HEAP32[$146 >> 2] = $6; //@line 10333
   $147 = $ReallocAsyncCtx + 12 | 0; //@line 10334
   HEAP32[$147 >> 2] = $8; //@line 10335
   $148 = $ReallocAsyncCtx + 16 | 0; //@line 10336
   HEAP32[$148 >> 2] = $10; //@line 10337
   $149 = $ReallocAsyncCtx + 20 | 0; //@line 10338
   HEAP32[$149 >> 2] = $12; //@line 10339
   $150 = $ReallocAsyncCtx + 24 | 0; //@line 10340
   HEAP32[$150 >> 2] = $14; //@line 10341
   $151 = $ReallocAsyncCtx + 28 | 0; //@line 10342
   HEAP32[$151 >> 2] = $16; //@line 10343
   $152 = $ReallocAsyncCtx + 32 | 0; //@line 10344
   HEAP32[$152 >> 2] = $18; //@line 10345
   $153 = $ReallocAsyncCtx + 36 | 0; //@line 10346
   HEAP32[$153 >> 2] = $20; //@line 10347
   $154 = $ReallocAsyncCtx + 40 | 0; //@line 10348
   HEAP32[$154 >> 2] = $$0107$be; //@line 10349
   $155 = $ReallocAsyncCtx + 44 | 0; //@line 10350
   HEAP8[$155 >> 0] = $22; //@line 10351
   $156 = $ReallocAsyncCtx + 48 | 0; //@line 10352
   HEAP32[$156 >> 2] = $24; //@line 10353
   $157 = $ReallocAsyncCtx + 52 | 0; //@line 10354
   HEAP32[$157 >> 2] = $130; //@line 10355
   $158 = $ReallocAsyncCtx + 56 | 0; //@line 10356
   HEAP32[$158 >> 2] = $26; //@line 10357
   $159 = $ReallocAsyncCtx + 60 | 0; //@line 10358
   HEAP32[$159 >> 2] = $30; //@line 10359
   $160 = $ReallocAsyncCtx + 64 | 0; //@line 10360
   HEAP32[$160 >> 2] = $32; //@line 10361
   $161 = $ReallocAsyncCtx + 68 | 0; //@line 10362
   HEAP32[$161 >> 2] = $34; //@line 10363
   $162 = $ReallocAsyncCtx + 72 | 0; //@line 10364
   HEAP32[$162 >> 2] = $36; //@line 10365
   $163 = $ReallocAsyncCtx + 76 | 0; //@line 10366
   HEAP32[$163 >> 2] = $38; //@line 10367
   $164 = $ReallocAsyncCtx + 80 | 0; //@line 10368
   HEAP32[$164 >> 2] = $40; //@line 10369
   $165 = $ReallocAsyncCtx + 84 | 0; //@line 10370
   HEAP32[$165 >> 2] = $42; //@line 10371
   $166 = $ReallocAsyncCtx + 88 | 0; //@line 10372
   HEAP32[$166 >> 2] = $44; //@line 10373
   $167 = $ReallocAsyncCtx + 92 | 0; //@line 10374
   HEAP32[$167 >> 2] = $46; //@line 10375
   $168 = $ReallocAsyncCtx + 96 | 0; //@line 10376
   HEAP32[$168 >> 2] = $48; //@line 10377
   $169 = $ReallocAsyncCtx + 100 | 0; //@line 10378
   HEAP32[$169 >> 2] = $50; //@line 10379
   $170 = $ReallocAsyncCtx + 104 | 0; //@line 10380
   HEAP32[$170 >> 2] = $52; //@line 10381
   $171 = $ReallocAsyncCtx + 108 | 0; //@line 10382
   HEAP32[$171 >> 2] = $54; //@line 10383
   $172 = $ReallocAsyncCtx + 112 | 0; //@line 10384
   HEAP32[$172 >> 2] = $56; //@line 10385
   $173 = $ReallocAsyncCtx + 116 | 0; //@line 10386
   HEAP32[$173 >> 2] = $58; //@line 10387
   $174 = $ReallocAsyncCtx + 120 | 0; //@line 10388
   HEAP32[$174 >> 2] = $60; //@line 10389
   $175 = $ReallocAsyncCtx + 124 | 0; //@line 10390
   HEAP32[$175 >> 2] = $62; //@line 10391
   $176 = $ReallocAsyncCtx + 128 | 0; //@line 10392
   HEAP32[$176 >> 2] = $64; //@line 10393
   $177 = $ReallocAsyncCtx + 132 | 0; //@line 10394
   HEAP32[$177 >> 2] = $66; //@line 10395
   $178 = $ReallocAsyncCtx + 136 | 0; //@line 10396
   HEAP32[$178 >> 2] = $68; //@line 10397
   $179 = $ReallocAsyncCtx + 140 | 0; //@line 10398
   HEAP32[$179 >> 2] = $70; //@line 10399
   $180 = $ReallocAsyncCtx + 144 | 0; //@line 10400
   HEAP32[$180 >> 2] = $72; //@line 10401
   $181 = $ReallocAsyncCtx + 148 | 0; //@line 10402
   HEAP32[$181 >> 2] = $74; //@line 10403
   $182 = $ReallocAsyncCtx + 152 | 0; //@line 10404
   HEAP32[$182 >> 2] = $76; //@line 10405
   $183 = $ReallocAsyncCtx + 156 | 0; //@line 10406
   HEAP32[$183 >> 2] = $78; //@line 10407
   $184 = $ReallocAsyncCtx + 160 | 0; //@line 10408
   HEAP32[$184 >> 2] = $80; //@line 10409
   $185 = $ReallocAsyncCtx + 164 | 0; //@line 10410
   HEAP32[$185 >> 2] = $82; //@line 10411
   $186 = $ReallocAsyncCtx + 168 | 0; //@line 10412
   HEAP32[$186 >> 2] = $84; //@line 10413
   $187 = $ReallocAsyncCtx + 172 | 0; //@line 10414
   HEAP32[$187 >> 2] = $86; //@line 10415
   $188 = $ReallocAsyncCtx + 176 | 0; //@line 10416
   HEAP32[$188 >> 2] = $88; //@line 10417
   $189 = $ReallocAsyncCtx + 180 | 0; //@line 10418
   HEAP32[$189 >> 2] = $90; //@line 10419
   $190 = $ReallocAsyncCtx + 184 | 0; //@line 10420
   HEAP32[$190 >> 2] = $92; //@line 10421
   $191 = $ReallocAsyncCtx + 188 | 0; //@line 10422
   HEAP32[$191 >> 2] = $94; //@line 10423
   $192 = $ReallocAsyncCtx + 192 | 0; //@line 10424
   HEAP32[$192 >> 2] = $96; //@line 10425
   $193 = $ReallocAsyncCtx + 196 | 0; //@line 10426
   HEAP32[$193 >> 2] = $98; //@line 10427
   $194 = $ReallocAsyncCtx + 200 | 0; //@line 10428
   HEAP32[$194 >> 2] = $100; //@line 10429
   $195 = $ReallocAsyncCtx + 204 | 0; //@line 10430
   HEAP32[$195 >> 2] = $102; //@line 10431
   $196 = $ReallocAsyncCtx + 208 | 0; //@line 10432
   HEAP32[$196 >> 2] = $104; //@line 10433
   $197 = $ReallocAsyncCtx + 212 | 0; //@line 10434
   HEAP32[$197 >> 2] = $106; //@line 10435
   $198 = $ReallocAsyncCtx + 216 | 0; //@line 10436
   HEAP32[$198 >> 2] = $108; //@line 10437
   $199 = $ReallocAsyncCtx + 220 | 0; //@line 10438
   HEAP32[$199 >> 2] = $110; //@line 10439
   $200 = $ReallocAsyncCtx + 224 | 0; //@line 10440
   HEAP32[$200 >> 2] = $112; //@line 10441
   $201 = $ReallocAsyncCtx + 228 | 0; //@line 10442
   HEAP32[$201 >> 2] = $114; //@line 10443
   $202 = $ReallocAsyncCtx + 232 | 0; //@line 10444
   HEAP32[$202 >> 2] = $116; //@line 10445
   sp = STACKTOP; //@line 10446
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 10450
  ___async_unwind = 0; //@line 10451
  HEAP32[$ReallocAsyncCtx >> 2] = 474; //@line 10452
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 10453
  HEAP8[$144 >> 0] = $2; //@line 10454
  $145 = $ReallocAsyncCtx + 5 | 0; //@line 10455
  HEAP8[$145 >> 0] = $4; //@line 10456
  $146 = $ReallocAsyncCtx + 8 | 0; //@line 10457
  HEAP32[$146 >> 2] = $6; //@line 10458
  $147 = $ReallocAsyncCtx + 12 | 0; //@line 10459
  HEAP32[$147 >> 2] = $8; //@line 10460
  $148 = $ReallocAsyncCtx + 16 | 0; //@line 10461
  HEAP32[$148 >> 2] = $10; //@line 10462
  $149 = $ReallocAsyncCtx + 20 | 0; //@line 10463
  HEAP32[$149 >> 2] = $12; //@line 10464
  $150 = $ReallocAsyncCtx + 24 | 0; //@line 10465
  HEAP32[$150 >> 2] = $14; //@line 10466
  $151 = $ReallocAsyncCtx + 28 | 0; //@line 10467
  HEAP32[$151 >> 2] = $16; //@line 10468
  $152 = $ReallocAsyncCtx + 32 | 0; //@line 10469
  HEAP32[$152 >> 2] = $18; //@line 10470
  $153 = $ReallocAsyncCtx + 36 | 0; //@line 10471
  HEAP32[$153 >> 2] = $20; //@line 10472
  $154 = $ReallocAsyncCtx + 40 | 0; //@line 10473
  HEAP32[$154 >> 2] = $$0107$be; //@line 10474
  $155 = $ReallocAsyncCtx + 44 | 0; //@line 10475
  HEAP8[$155 >> 0] = $22; //@line 10476
  $156 = $ReallocAsyncCtx + 48 | 0; //@line 10477
  HEAP32[$156 >> 2] = $24; //@line 10478
  $157 = $ReallocAsyncCtx + 52 | 0; //@line 10479
  HEAP32[$157 >> 2] = $130; //@line 10480
  $158 = $ReallocAsyncCtx + 56 | 0; //@line 10481
  HEAP32[$158 >> 2] = $26; //@line 10482
  $159 = $ReallocAsyncCtx + 60 | 0; //@line 10483
  HEAP32[$159 >> 2] = $30; //@line 10484
  $160 = $ReallocAsyncCtx + 64 | 0; //@line 10485
  HEAP32[$160 >> 2] = $32; //@line 10486
  $161 = $ReallocAsyncCtx + 68 | 0; //@line 10487
  HEAP32[$161 >> 2] = $34; //@line 10488
  $162 = $ReallocAsyncCtx + 72 | 0; //@line 10489
  HEAP32[$162 >> 2] = $36; //@line 10490
  $163 = $ReallocAsyncCtx + 76 | 0; //@line 10491
  HEAP32[$163 >> 2] = $38; //@line 10492
  $164 = $ReallocAsyncCtx + 80 | 0; //@line 10493
  HEAP32[$164 >> 2] = $40; //@line 10494
  $165 = $ReallocAsyncCtx + 84 | 0; //@line 10495
  HEAP32[$165 >> 2] = $42; //@line 10496
  $166 = $ReallocAsyncCtx + 88 | 0; //@line 10497
  HEAP32[$166 >> 2] = $44; //@line 10498
  $167 = $ReallocAsyncCtx + 92 | 0; //@line 10499
  HEAP32[$167 >> 2] = $46; //@line 10500
  $168 = $ReallocAsyncCtx + 96 | 0; //@line 10501
  HEAP32[$168 >> 2] = $48; //@line 10502
  $169 = $ReallocAsyncCtx + 100 | 0; //@line 10503
  HEAP32[$169 >> 2] = $50; //@line 10504
  $170 = $ReallocAsyncCtx + 104 | 0; //@line 10505
  HEAP32[$170 >> 2] = $52; //@line 10506
  $171 = $ReallocAsyncCtx + 108 | 0; //@line 10507
  HEAP32[$171 >> 2] = $54; //@line 10508
  $172 = $ReallocAsyncCtx + 112 | 0; //@line 10509
  HEAP32[$172 >> 2] = $56; //@line 10510
  $173 = $ReallocAsyncCtx + 116 | 0; //@line 10511
  HEAP32[$173 >> 2] = $58; //@line 10512
  $174 = $ReallocAsyncCtx + 120 | 0; //@line 10513
  HEAP32[$174 >> 2] = $60; //@line 10514
  $175 = $ReallocAsyncCtx + 124 | 0; //@line 10515
  HEAP32[$175 >> 2] = $62; //@line 10516
  $176 = $ReallocAsyncCtx + 128 | 0; //@line 10517
  HEAP32[$176 >> 2] = $64; //@line 10518
  $177 = $ReallocAsyncCtx + 132 | 0; //@line 10519
  HEAP32[$177 >> 2] = $66; //@line 10520
  $178 = $ReallocAsyncCtx + 136 | 0; //@line 10521
  HEAP32[$178 >> 2] = $68; //@line 10522
  $179 = $ReallocAsyncCtx + 140 | 0; //@line 10523
  HEAP32[$179 >> 2] = $70; //@line 10524
  $180 = $ReallocAsyncCtx + 144 | 0; //@line 10525
  HEAP32[$180 >> 2] = $72; //@line 10526
  $181 = $ReallocAsyncCtx + 148 | 0; //@line 10527
  HEAP32[$181 >> 2] = $74; //@line 10528
  $182 = $ReallocAsyncCtx + 152 | 0; //@line 10529
  HEAP32[$182 >> 2] = $76; //@line 10530
  $183 = $ReallocAsyncCtx + 156 | 0; //@line 10531
  HEAP32[$183 >> 2] = $78; //@line 10532
  $184 = $ReallocAsyncCtx + 160 | 0; //@line 10533
  HEAP32[$184 >> 2] = $80; //@line 10534
  $185 = $ReallocAsyncCtx + 164 | 0; //@line 10535
  HEAP32[$185 >> 2] = $82; //@line 10536
  $186 = $ReallocAsyncCtx + 168 | 0; //@line 10537
  HEAP32[$186 >> 2] = $84; //@line 10538
  $187 = $ReallocAsyncCtx + 172 | 0; //@line 10539
  HEAP32[$187 >> 2] = $86; //@line 10540
  $188 = $ReallocAsyncCtx + 176 | 0; //@line 10541
  HEAP32[$188 >> 2] = $88; //@line 10542
  $189 = $ReallocAsyncCtx + 180 | 0; //@line 10543
  HEAP32[$189 >> 2] = $90; //@line 10544
  $190 = $ReallocAsyncCtx + 184 | 0; //@line 10545
  HEAP32[$190 >> 2] = $92; //@line 10546
  $191 = $ReallocAsyncCtx + 188 | 0; //@line 10547
  HEAP32[$191 >> 2] = $94; //@line 10548
  $192 = $ReallocAsyncCtx + 192 | 0; //@line 10549
  HEAP32[$192 >> 2] = $96; //@line 10550
  $193 = $ReallocAsyncCtx + 196 | 0; //@line 10551
  HEAP32[$193 >> 2] = $98; //@line 10552
  $194 = $ReallocAsyncCtx + 200 | 0; //@line 10553
  HEAP32[$194 >> 2] = $100; //@line 10554
  $195 = $ReallocAsyncCtx + 204 | 0; //@line 10555
  HEAP32[$195 >> 2] = $102; //@line 10556
  $196 = $ReallocAsyncCtx + 208 | 0; //@line 10557
  HEAP32[$196 >> 2] = $104; //@line 10558
  $197 = $ReallocAsyncCtx + 212 | 0; //@line 10559
  HEAP32[$197 >> 2] = $106; //@line 10560
  $198 = $ReallocAsyncCtx + 216 | 0; //@line 10561
  HEAP32[$198 >> 2] = $108; //@line 10562
  $199 = $ReallocAsyncCtx + 220 | 0; //@line 10563
  HEAP32[$199 >> 2] = $110; //@line 10564
  $200 = $ReallocAsyncCtx + 224 | 0; //@line 10565
  HEAP32[$200 >> 2] = $112; //@line 10566
  $201 = $ReallocAsyncCtx + 228 | 0; //@line 10567
  HEAP32[$201 >> 2] = $114; //@line 10568
  $202 = $ReallocAsyncCtx + 232 | 0; //@line 10569
  HEAP32[$202 >> 2] = $116; //@line 10570
  sp = STACKTOP; //@line 10571
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 10577
  HEAP8[$86 >> 0] = ($221 & 255) >>> 4 & 7; //@line 10582
  HEAP8[$90 >> 0] = $221 & 15; //@line 10584
  $240 = $$0$be + 5 << 24 >> 24; //@line 10598
  HEAP32[$62 >> 2] = (HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 10606
  $250 = HEAP32[(HEAP32[$70 >> 2] | 0) + 40 >> 2] | 0; //@line 10609
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 10610
  $251 = FUNCTION_TABLE_iii[$250 & 31]($54, $116) | 0; //@line 10611
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 475; //@line 10614
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 10615
   HEAP8[$252 >> 0] = $2; //@line 10616
   $253 = $ReallocAsyncCtx2 + 5 | 0; //@line 10617
   HEAP8[$253 >> 0] = $4; //@line 10618
   $254 = $ReallocAsyncCtx2 + 8 | 0; //@line 10619
   HEAP32[$254 >> 2] = $6; //@line 10620
   $255 = $ReallocAsyncCtx2 + 12 | 0; //@line 10621
   HEAP32[$255 >> 2] = $8; //@line 10622
   $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 10623
   HEAP32[$256 >> 2] = $10; //@line 10624
   $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 10625
   HEAP32[$257 >> 2] = $12; //@line 10626
   $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 10627
   HEAP32[$258 >> 2] = $14; //@line 10628
   $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 10629
   HEAP32[$259 >> 2] = $16; //@line 10630
   $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 10631
   HEAP32[$260 >> 2] = $18; //@line 10632
   $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 10633
   HEAP32[$261 >> 2] = $20; //@line 10634
   $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 10635
   HEAP8[$262 >> 0] = $22; //@line 10636
   $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 10637
   HEAP32[$263 >> 2] = $24; //@line 10638
   $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 10639
   HEAP32[$264 >> 2] = $26; //@line 10640
   $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 10641
   HEAP32[$265 >> 2] = $30; //@line 10642
   $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 10643
   HEAP32[$266 >> 2] = $32; //@line 10644
   $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 10645
   HEAP8[$267 >> 0] = $240; //@line 10646
   $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 10647
   HEAP32[$268 >> 2] = $34; //@line 10648
   $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 10649
   HEAP32[$269 >> 2] = $36; //@line 10650
   $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 10651
   HEAP32[$270 >> 2] = $38; //@line 10652
   $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 10653
   HEAP32[$271 >> 2] = $40; //@line 10654
   $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 10655
   HEAP32[$272 >> 2] = $42; //@line 10656
   $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 10657
   HEAP32[$273 >> 2] = $44; //@line 10658
   $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 10659
   HEAP32[$274 >> 2] = $46; //@line 10660
   $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 10661
   HEAP32[$275 >> 2] = $48; //@line 10662
   $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 10663
   HEAP32[$276 >> 2] = $50; //@line 10664
   $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 10665
   HEAP32[$277 >> 2] = $52; //@line 10666
   $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 10667
   HEAP32[$278 >> 2] = $54; //@line 10668
   $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 10669
   HEAP32[$279 >> 2] = $56; //@line 10670
   $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 10671
   HEAP32[$280 >> 2] = $58; //@line 10672
   $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 10673
   HEAP32[$281 >> 2] = $60; //@line 10674
   $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 10675
   HEAP32[$282 >> 2] = $62; //@line 10676
   $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 10677
   HEAP32[$283 >> 2] = $64; //@line 10678
   $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 10679
   HEAP32[$284 >> 2] = $66; //@line 10680
   $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 10681
   HEAP32[$285 >> 2] = $68; //@line 10682
   $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 10683
   HEAP32[$286 >> 2] = $70; //@line 10684
   $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 10685
   HEAP32[$287 >> 2] = $72; //@line 10686
   $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 10687
   HEAP32[$288 >> 2] = $74; //@line 10688
   $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 10689
   HEAP32[$289 >> 2] = $76; //@line 10690
   $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 10691
   HEAP32[$290 >> 2] = $78; //@line 10692
   $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 10693
   HEAP32[$291 >> 2] = $80; //@line 10694
   $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 10695
   HEAP32[$292 >> 2] = $82; //@line 10696
   $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 10697
   HEAP32[$293 >> 2] = $84; //@line 10698
   $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 10699
   HEAP32[$294 >> 2] = $86; //@line 10700
   $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 10701
   HEAP32[$295 >> 2] = $88; //@line 10702
   $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 10703
   HEAP32[$296 >> 2] = $90; //@line 10704
   $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 10705
   HEAP32[$297 >> 2] = $92; //@line 10706
   $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 10707
   HEAP32[$298 >> 2] = $94; //@line 10708
   $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 10709
   HEAP32[$299 >> 2] = $96; //@line 10710
   $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 10711
   HEAP32[$300 >> 2] = $98; //@line 10712
   $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 10713
   HEAP32[$301 >> 2] = $100; //@line 10714
   $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 10715
   HEAP32[$302 >> 2] = $102; //@line 10716
   $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 10717
   HEAP32[$303 >> 2] = $104; //@line 10718
   $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 10719
   HEAP32[$304 >> 2] = $106; //@line 10720
   $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 10721
   HEAP32[$305 >> 2] = $108; //@line 10722
   $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 10723
   HEAP32[$306 >> 2] = $110; //@line 10724
   $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 10725
   HEAP32[$307 >> 2] = $112; //@line 10726
   $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 10727
   HEAP32[$308 >> 2] = $114; //@line 10728
   $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 10729
   HEAP32[$309 >> 2] = $116; //@line 10730
   sp = STACKTOP; //@line 10731
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 10735
  ___async_unwind = 0; //@line 10736
  HEAP32[$ReallocAsyncCtx2 >> 2] = 475; //@line 10737
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 10738
  HEAP8[$252 >> 0] = $2; //@line 10739
  $253 = $ReallocAsyncCtx2 + 5 | 0; //@line 10740
  HEAP8[$253 >> 0] = $4; //@line 10741
  $254 = $ReallocAsyncCtx2 + 8 | 0; //@line 10742
  HEAP32[$254 >> 2] = $6; //@line 10743
  $255 = $ReallocAsyncCtx2 + 12 | 0; //@line 10744
  HEAP32[$255 >> 2] = $8; //@line 10745
  $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 10746
  HEAP32[$256 >> 2] = $10; //@line 10747
  $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 10748
  HEAP32[$257 >> 2] = $12; //@line 10749
  $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 10750
  HEAP32[$258 >> 2] = $14; //@line 10751
  $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 10752
  HEAP32[$259 >> 2] = $16; //@line 10753
  $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 10754
  HEAP32[$260 >> 2] = $18; //@line 10755
  $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 10756
  HEAP32[$261 >> 2] = $20; //@line 10757
  $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 10758
  HEAP8[$262 >> 0] = $22; //@line 10759
  $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 10760
  HEAP32[$263 >> 2] = $24; //@line 10761
  $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 10762
  HEAP32[$264 >> 2] = $26; //@line 10763
  $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 10764
  HEAP32[$265 >> 2] = $30; //@line 10765
  $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 10766
  HEAP32[$266 >> 2] = $32; //@line 10767
  $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 10768
  HEAP8[$267 >> 0] = $240; //@line 10769
  $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 10770
  HEAP32[$268 >> 2] = $34; //@line 10771
  $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 10772
  HEAP32[$269 >> 2] = $36; //@line 10773
  $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 10774
  HEAP32[$270 >> 2] = $38; //@line 10775
  $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 10776
  HEAP32[$271 >> 2] = $40; //@line 10777
  $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 10778
  HEAP32[$272 >> 2] = $42; //@line 10779
  $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 10780
  HEAP32[$273 >> 2] = $44; //@line 10781
  $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 10782
  HEAP32[$274 >> 2] = $46; //@line 10783
  $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 10784
  HEAP32[$275 >> 2] = $48; //@line 10785
  $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 10786
  HEAP32[$276 >> 2] = $50; //@line 10787
  $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 10788
  HEAP32[$277 >> 2] = $52; //@line 10789
  $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 10790
  HEAP32[$278 >> 2] = $54; //@line 10791
  $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 10792
  HEAP32[$279 >> 2] = $56; //@line 10793
  $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 10794
  HEAP32[$280 >> 2] = $58; //@line 10795
  $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 10796
  HEAP32[$281 >> 2] = $60; //@line 10797
  $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 10798
  HEAP32[$282 >> 2] = $62; //@line 10799
  $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 10800
  HEAP32[$283 >> 2] = $64; //@line 10801
  $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 10802
  HEAP32[$284 >> 2] = $66; //@line 10803
  $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 10804
  HEAP32[$285 >> 2] = $68; //@line 10805
  $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 10806
  HEAP32[$286 >> 2] = $70; //@line 10807
  $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 10808
  HEAP32[$287 >> 2] = $72; //@line 10809
  $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 10810
  HEAP32[$288 >> 2] = $74; //@line 10811
  $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 10812
  HEAP32[$289 >> 2] = $76; //@line 10813
  $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 10814
  HEAP32[$290 >> 2] = $78; //@line 10815
  $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 10816
  HEAP32[$291 >> 2] = $80; //@line 10817
  $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 10818
  HEAP32[$292 >> 2] = $82; //@line 10819
  $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 10820
  HEAP32[$293 >> 2] = $84; //@line 10821
  $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 10822
  HEAP32[$294 >> 2] = $86; //@line 10823
  $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 10824
  HEAP32[$295 >> 2] = $88; //@line 10825
  $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 10826
  HEAP32[$296 >> 2] = $90; //@line 10827
  $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 10828
  HEAP32[$297 >> 2] = $92; //@line 10829
  $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 10830
  HEAP32[$298 >> 2] = $94; //@line 10831
  $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 10832
  HEAP32[$299 >> 2] = $96; //@line 10833
  $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 10834
  HEAP32[$300 >> 2] = $98; //@line 10835
  $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 10836
  HEAP32[$301 >> 2] = $100; //@line 10837
  $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 10838
  HEAP32[$302 >> 2] = $102; //@line 10839
  $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 10840
  HEAP32[$303 >> 2] = $104; //@line 10841
  $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 10842
  HEAP32[$304 >> 2] = $106; //@line 10843
  $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 10844
  HEAP32[$305 >> 2] = $108; //@line 10845
  $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 10846
  HEAP32[$306 >> 2] = $110; //@line 10847
  $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 10848
  HEAP32[$307 >> 2] = $112; //@line 10849
  $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 10850
  HEAP32[$308 >> 2] = $114; //@line 10851
  $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 10852
  HEAP32[$309 >> 2] = $116; //@line 10853
  sp = STACKTOP; //@line 10854
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 10858
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 10859
  $314 = FUNCTION_TABLE_ii[$313 & 15]($60) | 0; //@line 10860
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 476; //@line 10863
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 10864
   HEAP8[$315 >> 0] = $2; //@line 10865
   $316 = $ReallocAsyncCtx3 + 5 | 0; //@line 10866
   HEAP8[$316 >> 0] = $4; //@line 10867
   $317 = $ReallocAsyncCtx3 + 8 | 0; //@line 10868
   HEAP32[$317 >> 2] = $6; //@line 10869
   $318 = $ReallocAsyncCtx3 + 12 | 0; //@line 10870
   HEAP32[$318 >> 2] = $8; //@line 10871
   $319 = $ReallocAsyncCtx3 + 16 | 0; //@line 10872
   HEAP32[$319 >> 2] = $10; //@line 10873
   $320 = $ReallocAsyncCtx3 + 20 | 0; //@line 10874
   HEAP32[$320 >> 2] = $12; //@line 10875
   $321 = $ReallocAsyncCtx3 + 24 | 0; //@line 10876
   HEAP32[$321 >> 2] = $14; //@line 10877
   $322 = $ReallocAsyncCtx3 + 28 | 0; //@line 10878
   HEAP32[$322 >> 2] = $16; //@line 10879
   $323 = $ReallocAsyncCtx3 + 32 | 0; //@line 10880
   HEAP32[$323 >> 2] = $18; //@line 10881
   $324 = $ReallocAsyncCtx3 + 36 | 0; //@line 10882
   HEAP32[$324 >> 2] = $20; //@line 10883
   $325 = $ReallocAsyncCtx3 + 40 | 0; //@line 10884
   HEAP8[$325 >> 0] = $22; //@line 10885
   $326 = $ReallocAsyncCtx3 + 44 | 0; //@line 10886
   HEAP32[$326 >> 2] = $24; //@line 10887
   $327 = $ReallocAsyncCtx3 + 48 | 0; //@line 10888
   HEAP32[$327 >> 2] = $26; //@line 10889
   $328 = $ReallocAsyncCtx3 + 52 | 0; //@line 10890
   HEAP32[$328 >> 2] = $30; //@line 10891
   $329 = $ReallocAsyncCtx3 + 56 | 0; //@line 10892
   HEAP32[$329 >> 2] = $32; //@line 10893
   $330 = $ReallocAsyncCtx3 + 60 | 0; //@line 10894
   HEAP32[$330 >> 2] = $34; //@line 10895
   $331 = $ReallocAsyncCtx3 + 64 | 0; //@line 10896
   HEAP32[$331 >> 2] = $36; //@line 10897
   $332 = $ReallocAsyncCtx3 + 68 | 0; //@line 10898
   HEAP32[$332 >> 2] = $38; //@line 10899
   $333 = $ReallocAsyncCtx3 + 72 | 0; //@line 10900
   HEAP32[$333 >> 2] = $40; //@line 10901
   $334 = $ReallocAsyncCtx3 + 76 | 0; //@line 10902
   HEAP32[$334 >> 2] = $42; //@line 10903
   $335 = $ReallocAsyncCtx3 + 80 | 0; //@line 10904
   HEAP32[$335 >> 2] = $44; //@line 10905
   $336 = $ReallocAsyncCtx3 + 84 | 0; //@line 10906
   HEAP8[$336 >> 0] = $119; //@line 10907
   $337 = $ReallocAsyncCtx3 + 88 | 0; //@line 10908
   HEAP32[$337 >> 2] = $46; //@line 10909
   $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 10910
   HEAP32[$338 >> 2] = $48; //@line 10911
   $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 10912
   HEAP32[$339 >> 2] = $50; //@line 10913
   $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 10914
   HEAP32[$340 >> 2] = $52; //@line 10915
   $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 10916
   HEAP32[$341 >> 2] = $54; //@line 10917
   $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 10918
   HEAP32[$342 >> 2] = $56; //@line 10919
   $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 10920
   HEAP32[$343 >> 2] = $58; //@line 10921
   $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 10922
   HEAP32[$344 >> 2] = $60; //@line 10923
   $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 10924
   HEAP32[$345 >> 2] = $62; //@line 10925
   $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 10926
   HEAP32[$346 >> 2] = $64; //@line 10927
   $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 10928
   HEAP32[$347 >> 2] = $66; //@line 10929
   $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 10930
   HEAP32[$348 >> 2] = $68; //@line 10931
   $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 10932
   HEAP32[$349 >> 2] = $70; //@line 10933
   $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 10934
   HEAP32[$350 >> 2] = $72; //@line 10935
   $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 10936
   HEAP32[$351 >> 2] = $74; //@line 10937
   $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 10938
   HEAP32[$352 >> 2] = $76; //@line 10939
   $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 10940
   HEAP32[$353 >> 2] = $78; //@line 10941
   $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 10942
   HEAP32[$354 >> 2] = $80; //@line 10943
   $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 10944
   HEAP32[$355 >> 2] = $82; //@line 10945
   $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 10946
   HEAP32[$356 >> 2] = $84; //@line 10947
   $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 10948
   HEAP32[$357 >> 2] = $86; //@line 10949
   $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 10950
   HEAP32[$358 >> 2] = $88; //@line 10951
   $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 10952
   HEAP32[$359 >> 2] = $90; //@line 10953
   $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 10954
   HEAP32[$360 >> 2] = $92; //@line 10955
   $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 10956
   HEAP32[$361 >> 2] = $94; //@line 10957
   $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 10958
   HEAP32[$362 >> 2] = $96; //@line 10959
   $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 10960
   HEAP32[$363 >> 2] = $98; //@line 10961
   $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 10962
   HEAP32[$364 >> 2] = $100; //@line 10963
   $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 10964
   HEAP32[$365 >> 2] = $102; //@line 10965
   $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 10966
   HEAP32[$366 >> 2] = $104; //@line 10967
   $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 10968
   HEAP32[$367 >> 2] = $106; //@line 10969
   $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 10970
   HEAP32[$368 >> 2] = $108; //@line 10971
   $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 10972
   HEAP32[$369 >> 2] = $110; //@line 10973
   $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 10974
   HEAP32[$370 >> 2] = $112; //@line 10975
   $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 10976
   HEAP32[$371 >> 2] = $114; //@line 10977
   $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 10978
   HEAP32[$372 >> 2] = $116; //@line 10979
   sp = STACKTOP; //@line 10980
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 10984
  ___async_unwind = 0; //@line 10985
  HEAP32[$ReallocAsyncCtx3 >> 2] = 476; //@line 10986
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 10987
  HEAP8[$315 >> 0] = $2; //@line 10988
  $316 = $ReallocAsyncCtx3 + 5 | 0; //@line 10989
  HEAP8[$316 >> 0] = $4; //@line 10990
  $317 = $ReallocAsyncCtx3 + 8 | 0; //@line 10991
  HEAP32[$317 >> 2] = $6; //@line 10992
  $318 = $ReallocAsyncCtx3 + 12 | 0; //@line 10993
  HEAP32[$318 >> 2] = $8; //@line 10994
  $319 = $ReallocAsyncCtx3 + 16 | 0; //@line 10995
  HEAP32[$319 >> 2] = $10; //@line 10996
  $320 = $ReallocAsyncCtx3 + 20 | 0; //@line 10997
  HEAP32[$320 >> 2] = $12; //@line 10998
  $321 = $ReallocAsyncCtx3 + 24 | 0; //@line 10999
  HEAP32[$321 >> 2] = $14; //@line 11000
  $322 = $ReallocAsyncCtx3 + 28 | 0; //@line 11001
  HEAP32[$322 >> 2] = $16; //@line 11002
  $323 = $ReallocAsyncCtx3 + 32 | 0; //@line 11003
  HEAP32[$323 >> 2] = $18; //@line 11004
  $324 = $ReallocAsyncCtx3 + 36 | 0; //@line 11005
  HEAP32[$324 >> 2] = $20; //@line 11006
  $325 = $ReallocAsyncCtx3 + 40 | 0; //@line 11007
  HEAP8[$325 >> 0] = $22; //@line 11008
  $326 = $ReallocAsyncCtx3 + 44 | 0; //@line 11009
  HEAP32[$326 >> 2] = $24; //@line 11010
  $327 = $ReallocAsyncCtx3 + 48 | 0; //@line 11011
  HEAP32[$327 >> 2] = $26; //@line 11012
  $328 = $ReallocAsyncCtx3 + 52 | 0; //@line 11013
  HEAP32[$328 >> 2] = $30; //@line 11014
  $329 = $ReallocAsyncCtx3 + 56 | 0; //@line 11015
  HEAP32[$329 >> 2] = $32; //@line 11016
  $330 = $ReallocAsyncCtx3 + 60 | 0; //@line 11017
  HEAP32[$330 >> 2] = $34; //@line 11018
  $331 = $ReallocAsyncCtx3 + 64 | 0; //@line 11019
  HEAP32[$331 >> 2] = $36; //@line 11020
  $332 = $ReallocAsyncCtx3 + 68 | 0; //@line 11021
  HEAP32[$332 >> 2] = $38; //@line 11022
  $333 = $ReallocAsyncCtx3 + 72 | 0; //@line 11023
  HEAP32[$333 >> 2] = $40; //@line 11024
  $334 = $ReallocAsyncCtx3 + 76 | 0; //@line 11025
  HEAP32[$334 >> 2] = $42; //@line 11026
  $335 = $ReallocAsyncCtx3 + 80 | 0; //@line 11027
  HEAP32[$335 >> 2] = $44; //@line 11028
  $336 = $ReallocAsyncCtx3 + 84 | 0; //@line 11029
  HEAP8[$336 >> 0] = $119; //@line 11030
  $337 = $ReallocAsyncCtx3 + 88 | 0; //@line 11031
  HEAP32[$337 >> 2] = $46; //@line 11032
  $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 11033
  HEAP32[$338 >> 2] = $48; //@line 11034
  $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 11035
  HEAP32[$339 >> 2] = $50; //@line 11036
  $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 11037
  HEAP32[$340 >> 2] = $52; //@line 11038
  $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 11039
  HEAP32[$341 >> 2] = $54; //@line 11040
  $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 11041
  HEAP32[$342 >> 2] = $56; //@line 11042
  $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 11043
  HEAP32[$343 >> 2] = $58; //@line 11044
  $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 11045
  HEAP32[$344 >> 2] = $60; //@line 11046
  $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 11047
  HEAP32[$345 >> 2] = $62; //@line 11048
  $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 11049
  HEAP32[$346 >> 2] = $64; //@line 11050
  $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 11051
  HEAP32[$347 >> 2] = $66; //@line 11052
  $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 11053
  HEAP32[$348 >> 2] = $68; //@line 11054
  $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 11055
  HEAP32[$349 >> 2] = $70; //@line 11056
  $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 11057
  HEAP32[$350 >> 2] = $72; //@line 11058
  $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 11059
  HEAP32[$351 >> 2] = $74; //@line 11060
  $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 11061
  HEAP32[$352 >> 2] = $76; //@line 11062
  $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 11063
  HEAP32[$353 >> 2] = $78; //@line 11064
  $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 11065
  HEAP32[$354 >> 2] = $80; //@line 11066
  $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 11067
  HEAP32[$355 >> 2] = $82; //@line 11068
  $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 11069
  HEAP32[$356 >> 2] = $84; //@line 11070
  $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 11071
  HEAP32[$357 >> 2] = $86; //@line 11072
  $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 11073
  HEAP32[$358 >> 2] = $88; //@line 11074
  $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 11075
  HEAP32[$359 >> 2] = $90; //@line 11076
  $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 11077
  HEAP32[$360 >> 2] = $92; //@line 11078
  $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 11079
  HEAP32[$361 >> 2] = $94; //@line 11080
  $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 11081
  HEAP32[$362 >> 2] = $96; //@line 11082
  $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 11083
  HEAP32[$363 >> 2] = $98; //@line 11084
  $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 11085
  HEAP32[$364 >> 2] = $100; //@line 11086
  $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 11087
  HEAP32[$365 >> 2] = $102; //@line 11088
  $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 11089
  HEAP32[$366 >> 2] = $104; //@line 11090
  $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 11091
  HEAP32[$367 >> 2] = $106; //@line 11092
  $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 11093
  HEAP32[$368 >> 2] = $108; //@line 11094
  $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 11095
  HEAP32[$369 >> 2] = $110; //@line 11096
  $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 11097
  HEAP32[$370 >> 2] = $112; //@line 11098
  $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 11099
  HEAP32[$371 >> 2] = $114; //@line 11100
  $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 11101
  HEAP32[$372 >> 2] = $116; //@line 11102
  sp = STACKTOP; //@line 11103
  return;
 } else if ((label | 0) == 18) {
  $392 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 11110
  HEAP32[$40 >> 2] = (HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 11131
  HEAP32[$38 >> 2] = 0; //@line 11132
  $413 = $$0$be + 6 << 24 >> 24; //@line 11133
  HEAP8[$88 >> 0] = HEAP8[$18 + ($$0$be + 5 & 255) >> 0] | 0; //@line 11137
  $419 = HEAP32[(HEAP32[$78 >> 2] | 0) + 8 >> 2] | 0; //@line 11140
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 11141
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($54, $392, $110) | 0; //@line 11142
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 11145
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 11146
   HEAP8[$421 >> 0] = $2; //@line 11147
   $422 = $ReallocAsyncCtx4 + 5 | 0; //@line 11148
   HEAP8[$422 >> 0] = $4; //@line 11149
   $423 = $ReallocAsyncCtx4 + 8 | 0; //@line 11150
   HEAP32[$423 >> 2] = $6; //@line 11151
   $424 = $ReallocAsyncCtx4 + 12 | 0; //@line 11152
   HEAP32[$424 >> 2] = $8; //@line 11153
   $425 = $ReallocAsyncCtx4 + 16 | 0; //@line 11154
   HEAP32[$425 >> 2] = $10; //@line 11155
   $426 = $ReallocAsyncCtx4 + 20 | 0; //@line 11156
   HEAP32[$426 >> 2] = $12; //@line 11157
   $427 = $ReallocAsyncCtx4 + 24 | 0; //@line 11158
   HEAP32[$427 >> 2] = $14; //@line 11159
   $428 = $ReallocAsyncCtx4 + 28 | 0; //@line 11160
   HEAP32[$428 >> 2] = $16; //@line 11161
   $429 = $ReallocAsyncCtx4 + 32 | 0; //@line 11162
   HEAP32[$429 >> 2] = $18; //@line 11163
   $430 = $ReallocAsyncCtx4 + 36 | 0; //@line 11164
   HEAP32[$430 >> 2] = $20; //@line 11165
   $431 = $ReallocAsyncCtx4 + 40 | 0; //@line 11166
   HEAP8[$431 >> 0] = $22; //@line 11167
   $432 = $ReallocAsyncCtx4 + 44 | 0; //@line 11168
   HEAP32[$432 >> 2] = $24; //@line 11169
   $433 = $ReallocAsyncCtx4 + 48 | 0; //@line 11170
   HEAP32[$433 >> 2] = $26; //@line 11171
   $434 = $ReallocAsyncCtx4 + 52 | 0; //@line 11172
   HEAP32[$434 >> 2] = $30; //@line 11173
   $435 = $ReallocAsyncCtx4 + 56 | 0; //@line 11174
   HEAP32[$435 >> 2] = $32; //@line 11175
   $436 = $ReallocAsyncCtx4 + 60 | 0; //@line 11176
   HEAP32[$436 >> 2] = $34; //@line 11177
   $437 = $ReallocAsyncCtx4 + 64 | 0; //@line 11178
   HEAP32[$437 >> 2] = $36; //@line 11179
   $438 = $ReallocAsyncCtx4 + 68 | 0; //@line 11180
   HEAP32[$438 >> 2] = $38; //@line 11181
   $439 = $ReallocAsyncCtx4 + 72 | 0; //@line 11182
   HEAP32[$439 >> 2] = $40; //@line 11183
   $440 = $ReallocAsyncCtx4 + 76 | 0; //@line 11184
   HEAP32[$440 >> 2] = $42; //@line 11185
   $441 = $ReallocAsyncCtx4 + 80 | 0; //@line 11186
   HEAP32[$441 >> 2] = $44; //@line 11187
   $442 = $ReallocAsyncCtx4 + 84 | 0; //@line 11188
   HEAP32[$442 >> 2] = $46; //@line 11189
   $443 = $ReallocAsyncCtx4 + 88 | 0; //@line 11190
   HEAP32[$443 >> 2] = $48; //@line 11191
   $444 = $ReallocAsyncCtx4 + 92 | 0; //@line 11192
   HEAP32[$444 >> 2] = $50; //@line 11193
   $445 = $ReallocAsyncCtx4 + 96 | 0; //@line 11194
   HEAP32[$445 >> 2] = $52; //@line 11195
   $446 = $ReallocAsyncCtx4 + 100 | 0; //@line 11196
   HEAP32[$446 >> 2] = $54; //@line 11197
   $447 = $ReallocAsyncCtx4 + 104 | 0; //@line 11198
   HEAP32[$447 >> 2] = $56; //@line 11199
   $448 = $ReallocAsyncCtx4 + 108 | 0; //@line 11200
   HEAP32[$448 >> 2] = $58; //@line 11201
   $449 = $ReallocAsyncCtx4 + 112 | 0; //@line 11202
   HEAP32[$449 >> 2] = $60; //@line 11203
   $450 = $ReallocAsyncCtx4 + 116 | 0; //@line 11204
   HEAP32[$450 >> 2] = $62; //@line 11205
   $451 = $ReallocAsyncCtx4 + 120 | 0; //@line 11206
   HEAP32[$451 >> 2] = $64; //@line 11207
   $452 = $ReallocAsyncCtx4 + 124 | 0; //@line 11208
   HEAP32[$452 >> 2] = $66; //@line 11209
   $453 = $ReallocAsyncCtx4 + 128 | 0; //@line 11210
   HEAP32[$453 >> 2] = $68; //@line 11211
   $454 = $ReallocAsyncCtx4 + 132 | 0; //@line 11212
   HEAP32[$454 >> 2] = $70; //@line 11213
   $455 = $ReallocAsyncCtx4 + 136 | 0; //@line 11214
   HEAP32[$455 >> 2] = $72; //@line 11215
   $456 = $ReallocAsyncCtx4 + 140 | 0; //@line 11216
   HEAP32[$456 >> 2] = $74; //@line 11217
   $457 = $ReallocAsyncCtx4 + 144 | 0; //@line 11218
   HEAP32[$457 >> 2] = $76; //@line 11219
   $458 = $ReallocAsyncCtx4 + 148 | 0; //@line 11220
   HEAP32[$458 >> 2] = $78; //@line 11221
   $459 = $ReallocAsyncCtx4 + 152 | 0; //@line 11222
   HEAP32[$459 >> 2] = $80; //@line 11223
   $460 = $ReallocAsyncCtx4 + 156 | 0; //@line 11224
   HEAP32[$460 >> 2] = $82; //@line 11225
   $461 = $ReallocAsyncCtx4 + 160 | 0; //@line 11226
   HEAP32[$461 >> 2] = $84; //@line 11227
   $462 = $ReallocAsyncCtx4 + 164 | 0; //@line 11228
   HEAP32[$462 >> 2] = $86; //@line 11229
   $463 = $ReallocAsyncCtx4 + 168 | 0; //@line 11230
   HEAP32[$463 >> 2] = $88; //@line 11231
   $464 = $ReallocAsyncCtx4 + 172 | 0; //@line 11232
   HEAP32[$464 >> 2] = $90; //@line 11233
   $465 = $ReallocAsyncCtx4 + 176 | 0; //@line 11234
   HEAP8[$465 >> 0] = $413; //@line 11235
   $466 = $ReallocAsyncCtx4 + 180 | 0; //@line 11236
   HEAP32[$466 >> 2] = $92; //@line 11237
   $467 = $ReallocAsyncCtx4 + 184 | 0; //@line 11238
   HEAP32[$467 >> 2] = $94; //@line 11239
   $468 = $ReallocAsyncCtx4 + 188 | 0; //@line 11240
   HEAP32[$468 >> 2] = $96; //@line 11241
   $469 = $ReallocAsyncCtx4 + 192 | 0; //@line 11242
   HEAP32[$469 >> 2] = $98; //@line 11243
   $470 = $ReallocAsyncCtx4 + 196 | 0; //@line 11244
   HEAP32[$470 >> 2] = $100; //@line 11245
   $471 = $ReallocAsyncCtx4 + 200 | 0; //@line 11246
   HEAP32[$471 >> 2] = $102; //@line 11247
   $472 = $ReallocAsyncCtx4 + 204 | 0; //@line 11248
   HEAP32[$472 >> 2] = $104; //@line 11249
   $473 = $ReallocAsyncCtx4 + 208 | 0; //@line 11250
   HEAP32[$473 >> 2] = $106; //@line 11251
   $474 = $ReallocAsyncCtx4 + 212 | 0; //@line 11252
   HEAP32[$474 >> 2] = $108; //@line 11253
   $475 = $ReallocAsyncCtx4 + 216 | 0; //@line 11254
   HEAP32[$475 >> 2] = $110; //@line 11255
   $476 = $ReallocAsyncCtx4 + 220 | 0; //@line 11256
   HEAP32[$476 >> 2] = $112; //@line 11257
   $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 11258
   HEAP32[$477 >> 2] = $114; //@line 11259
   $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 11260
   HEAP32[$478 >> 2] = $116; //@line 11261
   sp = STACKTOP; //@line 11262
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 11266
  ___async_unwind = 0; //@line 11267
  HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 11268
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 11269
  HEAP8[$421 >> 0] = $2; //@line 11270
  $422 = $ReallocAsyncCtx4 + 5 | 0; //@line 11271
  HEAP8[$422 >> 0] = $4; //@line 11272
  $423 = $ReallocAsyncCtx4 + 8 | 0; //@line 11273
  HEAP32[$423 >> 2] = $6; //@line 11274
  $424 = $ReallocAsyncCtx4 + 12 | 0; //@line 11275
  HEAP32[$424 >> 2] = $8; //@line 11276
  $425 = $ReallocAsyncCtx4 + 16 | 0; //@line 11277
  HEAP32[$425 >> 2] = $10; //@line 11278
  $426 = $ReallocAsyncCtx4 + 20 | 0; //@line 11279
  HEAP32[$426 >> 2] = $12; //@line 11280
  $427 = $ReallocAsyncCtx4 + 24 | 0; //@line 11281
  HEAP32[$427 >> 2] = $14; //@line 11282
  $428 = $ReallocAsyncCtx4 + 28 | 0; //@line 11283
  HEAP32[$428 >> 2] = $16; //@line 11284
  $429 = $ReallocAsyncCtx4 + 32 | 0; //@line 11285
  HEAP32[$429 >> 2] = $18; //@line 11286
  $430 = $ReallocAsyncCtx4 + 36 | 0; //@line 11287
  HEAP32[$430 >> 2] = $20; //@line 11288
  $431 = $ReallocAsyncCtx4 + 40 | 0; //@line 11289
  HEAP8[$431 >> 0] = $22; //@line 11290
  $432 = $ReallocAsyncCtx4 + 44 | 0; //@line 11291
  HEAP32[$432 >> 2] = $24; //@line 11292
  $433 = $ReallocAsyncCtx4 + 48 | 0; //@line 11293
  HEAP32[$433 >> 2] = $26; //@line 11294
  $434 = $ReallocAsyncCtx4 + 52 | 0; //@line 11295
  HEAP32[$434 >> 2] = $30; //@line 11296
  $435 = $ReallocAsyncCtx4 + 56 | 0; //@line 11297
  HEAP32[$435 >> 2] = $32; //@line 11298
  $436 = $ReallocAsyncCtx4 + 60 | 0; //@line 11299
  HEAP32[$436 >> 2] = $34; //@line 11300
  $437 = $ReallocAsyncCtx4 + 64 | 0; //@line 11301
  HEAP32[$437 >> 2] = $36; //@line 11302
  $438 = $ReallocAsyncCtx4 + 68 | 0; //@line 11303
  HEAP32[$438 >> 2] = $38; //@line 11304
  $439 = $ReallocAsyncCtx4 + 72 | 0; //@line 11305
  HEAP32[$439 >> 2] = $40; //@line 11306
  $440 = $ReallocAsyncCtx4 + 76 | 0; //@line 11307
  HEAP32[$440 >> 2] = $42; //@line 11308
  $441 = $ReallocAsyncCtx4 + 80 | 0; //@line 11309
  HEAP32[$441 >> 2] = $44; //@line 11310
  $442 = $ReallocAsyncCtx4 + 84 | 0; //@line 11311
  HEAP32[$442 >> 2] = $46; //@line 11312
  $443 = $ReallocAsyncCtx4 + 88 | 0; //@line 11313
  HEAP32[$443 >> 2] = $48; //@line 11314
  $444 = $ReallocAsyncCtx4 + 92 | 0; //@line 11315
  HEAP32[$444 >> 2] = $50; //@line 11316
  $445 = $ReallocAsyncCtx4 + 96 | 0; //@line 11317
  HEAP32[$445 >> 2] = $52; //@line 11318
  $446 = $ReallocAsyncCtx4 + 100 | 0; //@line 11319
  HEAP32[$446 >> 2] = $54; //@line 11320
  $447 = $ReallocAsyncCtx4 + 104 | 0; //@line 11321
  HEAP32[$447 >> 2] = $56; //@line 11322
  $448 = $ReallocAsyncCtx4 + 108 | 0; //@line 11323
  HEAP32[$448 >> 2] = $58; //@line 11324
  $449 = $ReallocAsyncCtx4 + 112 | 0; //@line 11325
  HEAP32[$449 >> 2] = $60; //@line 11326
  $450 = $ReallocAsyncCtx4 + 116 | 0; //@line 11327
  HEAP32[$450 >> 2] = $62; //@line 11328
  $451 = $ReallocAsyncCtx4 + 120 | 0; //@line 11329
  HEAP32[$451 >> 2] = $64; //@line 11330
  $452 = $ReallocAsyncCtx4 + 124 | 0; //@line 11331
  HEAP32[$452 >> 2] = $66; //@line 11332
  $453 = $ReallocAsyncCtx4 + 128 | 0; //@line 11333
  HEAP32[$453 >> 2] = $68; //@line 11334
  $454 = $ReallocAsyncCtx4 + 132 | 0; //@line 11335
  HEAP32[$454 >> 2] = $70; //@line 11336
  $455 = $ReallocAsyncCtx4 + 136 | 0; //@line 11337
  HEAP32[$455 >> 2] = $72; //@line 11338
  $456 = $ReallocAsyncCtx4 + 140 | 0; //@line 11339
  HEAP32[$456 >> 2] = $74; //@line 11340
  $457 = $ReallocAsyncCtx4 + 144 | 0; //@line 11341
  HEAP32[$457 >> 2] = $76; //@line 11342
  $458 = $ReallocAsyncCtx4 + 148 | 0; //@line 11343
  HEAP32[$458 >> 2] = $78; //@line 11344
  $459 = $ReallocAsyncCtx4 + 152 | 0; //@line 11345
  HEAP32[$459 >> 2] = $80; //@line 11346
  $460 = $ReallocAsyncCtx4 + 156 | 0; //@line 11347
  HEAP32[$460 >> 2] = $82; //@line 11348
  $461 = $ReallocAsyncCtx4 + 160 | 0; //@line 11349
  HEAP32[$461 >> 2] = $84; //@line 11350
  $462 = $ReallocAsyncCtx4 + 164 | 0; //@line 11351
  HEAP32[$462 >> 2] = $86; //@line 11352
  $463 = $ReallocAsyncCtx4 + 168 | 0; //@line 11353
  HEAP32[$463 >> 2] = $88; //@line 11354
  $464 = $ReallocAsyncCtx4 + 172 | 0; //@line 11355
  HEAP32[$464 >> 2] = $90; //@line 11356
  $465 = $ReallocAsyncCtx4 + 176 | 0; //@line 11357
  HEAP8[$465 >> 0] = $413; //@line 11358
  $466 = $ReallocAsyncCtx4 + 180 | 0; //@line 11359
  HEAP32[$466 >> 2] = $92; //@line 11360
  $467 = $ReallocAsyncCtx4 + 184 | 0; //@line 11361
  HEAP32[$467 >> 2] = $94; //@line 11362
  $468 = $ReallocAsyncCtx4 + 188 | 0; //@line 11363
  HEAP32[$468 >> 2] = $96; //@line 11364
  $469 = $ReallocAsyncCtx4 + 192 | 0; //@line 11365
  HEAP32[$469 >> 2] = $98; //@line 11366
  $470 = $ReallocAsyncCtx4 + 196 | 0; //@line 11367
  HEAP32[$470 >> 2] = $100; //@line 11368
  $471 = $ReallocAsyncCtx4 + 200 | 0; //@line 11369
  HEAP32[$471 >> 2] = $102; //@line 11370
  $472 = $ReallocAsyncCtx4 + 204 | 0; //@line 11371
  HEAP32[$472 >> 2] = $104; //@line 11372
  $473 = $ReallocAsyncCtx4 + 208 | 0; //@line 11373
  HEAP32[$473 >> 2] = $106; //@line 11374
  $474 = $ReallocAsyncCtx4 + 212 | 0; //@line 11375
  HEAP32[$474 >> 2] = $108; //@line 11376
  $475 = $ReallocAsyncCtx4 + 216 | 0; //@line 11377
  HEAP32[$475 >> 2] = $110; //@line 11378
  $476 = $ReallocAsyncCtx4 + 220 | 0; //@line 11379
  HEAP32[$476 >> 2] = $112; //@line 11380
  $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 11381
  HEAP32[$477 >> 2] = $114; //@line 11382
  $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 11383
  HEAP32[$478 >> 2] = $116; //@line 11384
  sp = STACKTOP; //@line 11385
  return;
 } else if ((label | 0) == 24) {
  $499 = $$0$be + 2 << 24 >> 24; //@line 11389
  $503 = HEAPU8[$18 + ($119 & 255) >> 0] | 0; //@line 11393
  $505 = $503 >>> 5 & 1; //@line 11396
  $507 = $503 >>> 4 & 1; //@line 11399
  $510 = HEAP32[(HEAP32[$112 >> 2] | 0) + 44 >> 2] | 0; //@line 11402
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 11403
  $511 = FUNCTION_TABLE_iiii[$510 & 31]($54, $507, $505) | 0; //@line 11404
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 478; //@line 11407
   $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 11408
   HEAP8[$512 >> 0] = $2; //@line 11409
   $513 = $ReallocAsyncCtx5 + 5 | 0; //@line 11410
   HEAP8[$513 >> 0] = $4; //@line 11411
   $514 = $ReallocAsyncCtx5 + 8 | 0; //@line 11412
   HEAP32[$514 >> 2] = $6; //@line 11413
   $515 = $ReallocAsyncCtx5 + 12 | 0; //@line 11414
   HEAP32[$515 >> 2] = $8; //@line 11415
   $516 = $ReallocAsyncCtx5 + 16 | 0; //@line 11416
   HEAP32[$516 >> 2] = $10; //@line 11417
   $517 = $ReallocAsyncCtx5 + 20 | 0; //@line 11418
   HEAP32[$517 >> 2] = $12; //@line 11419
   $518 = $ReallocAsyncCtx5 + 24 | 0; //@line 11420
   HEAP32[$518 >> 2] = $14; //@line 11421
   $519 = $ReallocAsyncCtx5 + 28 | 0; //@line 11422
   HEAP32[$519 >> 2] = $16; //@line 11423
   $520 = $ReallocAsyncCtx5 + 32 | 0; //@line 11424
   HEAP32[$520 >> 2] = $18; //@line 11425
   $521 = $ReallocAsyncCtx5 + 36 | 0; //@line 11426
   HEAP32[$521 >> 2] = $20; //@line 11427
   $522 = $ReallocAsyncCtx5 + 40 | 0; //@line 11428
   HEAP8[$522 >> 0] = $22; //@line 11429
   $523 = $ReallocAsyncCtx5 + 44 | 0; //@line 11430
   HEAP32[$523 >> 2] = $$0107$be; //@line 11431
   $524 = $ReallocAsyncCtx5 + 48 | 0; //@line 11432
   HEAP32[$524 >> 2] = $24; //@line 11433
   $525 = $ReallocAsyncCtx5 + 52 | 0; //@line 11434
   HEAP32[$525 >> 2] = $503; //@line 11435
   $526 = $ReallocAsyncCtx5 + 56 | 0; //@line 11436
   HEAP32[$526 >> 2] = $26; //@line 11437
   $527 = $ReallocAsyncCtx5 + 60 | 0; //@line 11438
   HEAP32[$527 >> 2] = $30; //@line 11439
   $528 = $ReallocAsyncCtx5 + 64 | 0; //@line 11440
   HEAP32[$528 >> 2] = $32; //@line 11441
   $529 = $ReallocAsyncCtx5 + 68 | 0; //@line 11442
   HEAP32[$529 >> 2] = $34; //@line 11443
   $530 = $ReallocAsyncCtx5 + 72 | 0; //@line 11444
   HEAP32[$530 >> 2] = $36; //@line 11445
   $531 = $ReallocAsyncCtx5 + 76 | 0; //@line 11446
   HEAP32[$531 >> 2] = $38; //@line 11447
   $532 = $ReallocAsyncCtx5 + 80 | 0; //@line 11448
   HEAP32[$532 >> 2] = $40; //@line 11449
   $533 = $ReallocAsyncCtx5 + 84 | 0; //@line 11450
   HEAP32[$533 >> 2] = $42; //@line 11451
   $534 = $ReallocAsyncCtx5 + 88 | 0; //@line 11452
   HEAP32[$534 >> 2] = $44; //@line 11453
   $535 = $ReallocAsyncCtx5 + 92 | 0; //@line 11454
   HEAP8[$535 >> 0] = $499; //@line 11455
   $536 = $ReallocAsyncCtx5 + 96 | 0; //@line 11456
   HEAP32[$536 >> 2] = $46; //@line 11457
   $537 = $ReallocAsyncCtx5 + 100 | 0; //@line 11458
   HEAP32[$537 >> 2] = $48; //@line 11459
   $538 = $ReallocAsyncCtx5 + 104 | 0; //@line 11460
   HEAP32[$538 >> 2] = $50; //@line 11461
   $539 = $ReallocAsyncCtx5 + 108 | 0; //@line 11462
   HEAP32[$539 >> 2] = $52; //@line 11463
   $540 = $ReallocAsyncCtx5 + 112 | 0; //@line 11464
   HEAP32[$540 >> 2] = $54; //@line 11465
   $541 = $ReallocAsyncCtx5 + 116 | 0; //@line 11466
   HEAP32[$541 >> 2] = $56; //@line 11467
   $542 = $ReallocAsyncCtx5 + 120 | 0; //@line 11468
   HEAP32[$542 >> 2] = $58; //@line 11469
   $543 = $ReallocAsyncCtx5 + 124 | 0; //@line 11470
   HEAP32[$543 >> 2] = $60; //@line 11471
   $544 = $ReallocAsyncCtx5 + 128 | 0; //@line 11472
   HEAP8[$544 >> 0] = $505; //@line 11473
   $545 = $ReallocAsyncCtx5 + 132 | 0; //@line 11474
   HEAP32[$545 >> 2] = $62; //@line 11475
   $546 = $ReallocAsyncCtx5 + 136 | 0; //@line 11476
   HEAP32[$546 >> 2] = $64; //@line 11477
   $547 = $ReallocAsyncCtx5 + 140 | 0; //@line 11478
   HEAP32[$547 >> 2] = $66; //@line 11479
   $548 = $ReallocAsyncCtx5 + 144 | 0; //@line 11480
   HEAP32[$548 >> 2] = $68; //@line 11481
   $549 = $ReallocAsyncCtx5 + 148 | 0; //@line 11482
   HEAP32[$549 >> 2] = $70; //@line 11483
   $550 = $ReallocAsyncCtx5 + 152 | 0; //@line 11484
   HEAP32[$550 >> 2] = $72; //@line 11485
   $551 = $ReallocAsyncCtx5 + 156 | 0; //@line 11486
   HEAP32[$551 >> 2] = $74; //@line 11487
   $552 = $ReallocAsyncCtx5 + 160 | 0; //@line 11488
   HEAP32[$552 >> 2] = $76; //@line 11489
   $553 = $ReallocAsyncCtx5 + 164 | 0; //@line 11490
   HEAP32[$553 >> 2] = $78; //@line 11491
   $554 = $ReallocAsyncCtx5 + 168 | 0; //@line 11492
   HEAP32[$554 >> 2] = $80; //@line 11493
   $555 = $ReallocAsyncCtx5 + 172 | 0; //@line 11494
   HEAP32[$555 >> 2] = $82; //@line 11495
   $556 = $ReallocAsyncCtx5 + 176 | 0; //@line 11496
   HEAP32[$556 >> 2] = $84; //@line 11497
   $557 = $ReallocAsyncCtx5 + 180 | 0; //@line 11498
   HEAP32[$557 >> 2] = $86; //@line 11499
   $558 = $ReallocAsyncCtx5 + 184 | 0; //@line 11500
   HEAP32[$558 >> 2] = $88; //@line 11501
   $559 = $ReallocAsyncCtx5 + 188 | 0; //@line 11502
   HEAP32[$559 >> 2] = $90; //@line 11503
   $560 = $ReallocAsyncCtx5 + 192 | 0; //@line 11504
   HEAP32[$560 >> 2] = $92; //@line 11505
   $561 = $ReallocAsyncCtx5 + 196 | 0; //@line 11506
   HEAP32[$561 >> 2] = $94; //@line 11507
   $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 11508
   HEAP32[$562 >> 2] = $96; //@line 11509
   $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 11510
   HEAP32[$563 >> 2] = $98; //@line 11511
   $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 11512
   HEAP32[$564 >> 2] = $100; //@line 11513
   $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 11514
   HEAP32[$565 >> 2] = $102; //@line 11515
   $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 11516
   HEAP8[$566 >> 0] = $507; //@line 11517
   $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 11518
   HEAP32[$567 >> 2] = $104; //@line 11519
   $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 11520
   HEAP32[$568 >> 2] = $106; //@line 11521
   $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 11522
   HEAP32[$569 >> 2] = $108; //@line 11523
   $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 11524
   HEAP32[$570 >> 2] = $110; //@line 11525
   $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 11526
   HEAP32[$571 >> 2] = $112; //@line 11527
   $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 11528
   HEAP32[$572 >> 2] = $114; //@line 11529
   $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 11530
   HEAP32[$573 >> 2] = $116; //@line 11531
   sp = STACKTOP; //@line 11532
   return;
  }
  HEAP8[___async_retval >> 0] = $511 & 1; //@line 11537
  ___async_unwind = 0; //@line 11538
  HEAP32[$ReallocAsyncCtx5 >> 2] = 478; //@line 11539
  $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 11540
  HEAP8[$512 >> 0] = $2; //@line 11541
  $513 = $ReallocAsyncCtx5 + 5 | 0; //@line 11542
  HEAP8[$513 >> 0] = $4; //@line 11543
  $514 = $ReallocAsyncCtx5 + 8 | 0; //@line 11544
  HEAP32[$514 >> 2] = $6; //@line 11545
  $515 = $ReallocAsyncCtx5 + 12 | 0; //@line 11546
  HEAP32[$515 >> 2] = $8; //@line 11547
  $516 = $ReallocAsyncCtx5 + 16 | 0; //@line 11548
  HEAP32[$516 >> 2] = $10; //@line 11549
  $517 = $ReallocAsyncCtx5 + 20 | 0; //@line 11550
  HEAP32[$517 >> 2] = $12; //@line 11551
  $518 = $ReallocAsyncCtx5 + 24 | 0; //@line 11552
  HEAP32[$518 >> 2] = $14; //@line 11553
  $519 = $ReallocAsyncCtx5 + 28 | 0; //@line 11554
  HEAP32[$519 >> 2] = $16; //@line 11555
  $520 = $ReallocAsyncCtx5 + 32 | 0; //@line 11556
  HEAP32[$520 >> 2] = $18; //@line 11557
  $521 = $ReallocAsyncCtx5 + 36 | 0; //@line 11558
  HEAP32[$521 >> 2] = $20; //@line 11559
  $522 = $ReallocAsyncCtx5 + 40 | 0; //@line 11560
  HEAP8[$522 >> 0] = $22; //@line 11561
  $523 = $ReallocAsyncCtx5 + 44 | 0; //@line 11562
  HEAP32[$523 >> 2] = $$0107$be; //@line 11563
  $524 = $ReallocAsyncCtx5 + 48 | 0; //@line 11564
  HEAP32[$524 >> 2] = $24; //@line 11565
  $525 = $ReallocAsyncCtx5 + 52 | 0; //@line 11566
  HEAP32[$525 >> 2] = $503; //@line 11567
  $526 = $ReallocAsyncCtx5 + 56 | 0; //@line 11568
  HEAP32[$526 >> 2] = $26; //@line 11569
  $527 = $ReallocAsyncCtx5 + 60 | 0; //@line 11570
  HEAP32[$527 >> 2] = $30; //@line 11571
  $528 = $ReallocAsyncCtx5 + 64 | 0; //@line 11572
  HEAP32[$528 >> 2] = $32; //@line 11573
  $529 = $ReallocAsyncCtx5 + 68 | 0; //@line 11574
  HEAP32[$529 >> 2] = $34; //@line 11575
  $530 = $ReallocAsyncCtx5 + 72 | 0; //@line 11576
  HEAP32[$530 >> 2] = $36; //@line 11577
  $531 = $ReallocAsyncCtx5 + 76 | 0; //@line 11578
  HEAP32[$531 >> 2] = $38; //@line 11579
  $532 = $ReallocAsyncCtx5 + 80 | 0; //@line 11580
  HEAP32[$532 >> 2] = $40; //@line 11581
  $533 = $ReallocAsyncCtx5 + 84 | 0; //@line 11582
  HEAP32[$533 >> 2] = $42; //@line 11583
  $534 = $ReallocAsyncCtx5 + 88 | 0; //@line 11584
  HEAP32[$534 >> 2] = $44; //@line 11585
  $535 = $ReallocAsyncCtx5 + 92 | 0; //@line 11586
  HEAP8[$535 >> 0] = $499; //@line 11587
  $536 = $ReallocAsyncCtx5 + 96 | 0; //@line 11588
  HEAP32[$536 >> 2] = $46; //@line 11589
  $537 = $ReallocAsyncCtx5 + 100 | 0; //@line 11590
  HEAP32[$537 >> 2] = $48; //@line 11591
  $538 = $ReallocAsyncCtx5 + 104 | 0; //@line 11592
  HEAP32[$538 >> 2] = $50; //@line 11593
  $539 = $ReallocAsyncCtx5 + 108 | 0; //@line 11594
  HEAP32[$539 >> 2] = $52; //@line 11595
  $540 = $ReallocAsyncCtx5 + 112 | 0; //@line 11596
  HEAP32[$540 >> 2] = $54; //@line 11597
  $541 = $ReallocAsyncCtx5 + 116 | 0; //@line 11598
  HEAP32[$541 >> 2] = $56; //@line 11599
  $542 = $ReallocAsyncCtx5 + 120 | 0; //@line 11600
  HEAP32[$542 >> 2] = $58; //@line 11601
  $543 = $ReallocAsyncCtx5 + 124 | 0; //@line 11602
  HEAP32[$543 >> 2] = $60; //@line 11603
  $544 = $ReallocAsyncCtx5 + 128 | 0; //@line 11604
  HEAP8[$544 >> 0] = $505; //@line 11605
  $545 = $ReallocAsyncCtx5 + 132 | 0; //@line 11606
  HEAP32[$545 >> 2] = $62; //@line 11607
  $546 = $ReallocAsyncCtx5 + 136 | 0; //@line 11608
  HEAP32[$546 >> 2] = $64; //@line 11609
  $547 = $ReallocAsyncCtx5 + 140 | 0; //@line 11610
  HEAP32[$547 >> 2] = $66; //@line 11611
  $548 = $ReallocAsyncCtx5 + 144 | 0; //@line 11612
  HEAP32[$548 >> 2] = $68; //@line 11613
  $549 = $ReallocAsyncCtx5 + 148 | 0; //@line 11614
  HEAP32[$549 >> 2] = $70; //@line 11615
  $550 = $ReallocAsyncCtx5 + 152 | 0; //@line 11616
  HEAP32[$550 >> 2] = $72; //@line 11617
  $551 = $ReallocAsyncCtx5 + 156 | 0; //@line 11618
  HEAP32[$551 >> 2] = $74; //@line 11619
  $552 = $ReallocAsyncCtx5 + 160 | 0; //@line 11620
  HEAP32[$552 >> 2] = $76; //@line 11621
  $553 = $ReallocAsyncCtx5 + 164 | 0; //@line 11622
  HEAP32[$553 >> 2] = $78; //@line 11623
  $554 = $ReallocAsyncCtx5 + 168 | 0; //@line 11624
  HEAP32[$554 >> 2] = $80; //@line 11625
  $555 = $ReallocAsyncCtx5 + 172 | 0; //@line 11626
  HEAP32[$555 >> 2] = $82; //@line 11627
  $556 = $ReallocAsyncCtx5 + 176 | 0; //@line 11628
  HEAP32[$556 >> 2] = $84; //@line 11629
  $557 = $ReallocAsyncCtx5 + 180 | 0; //@line 11630
  HEAP32[$557 >> 2] = $86; //@line 11631
  $558 = $ReallocAsyncCtx5 + 184 | 0; //@line 11632
  HEAP32[$558 >> 2] = $88; //@line 11633
  $559 = $ReallocAsyncCtx5 + 188 | 0; //@line 11634
  HEAP32[$559 >> 2] = $90; //@line 11635
  $560 = $ReallocAsyncCtx5 + 192 | 0; //@line 11636
  HEAP32[$560 >> 2] = $92; //@line 11637
  $561 = $ReallocAsyncCtx5 + 196 | 0; //@line 11638
  HEAP32[$561 >> 2] = $94; //@line 11639
  $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 11640
  HEAP32[$562 >> 2] = $96; //@line 11641
  $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 11642
  HEAP32[$563 >> 2] = $98; //@line 11643
  $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 11644
  HEAP32[$564 >> 2] = $100; //@line 11645
  $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 11646
  HEAP32[$565 >> 2] = $102; //@line 11647
  $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 11648
  HEAP8[$566 >> 0] = $507; //@line 11649
  $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 11650
  HEAP32[$567 >> 2] = $104; //@line 11651
  $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 11652
  HEAP32[$568 >> 2] = $106; //@line 11653
  $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 11654
  HEAP32[$569 >> 2] = $108; //@line 11655
  $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 11656
  HEAP32[$570 >> 2] = $110; //@line 11657
  $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 11658
  HEAP32[$571 >> 2] = $112; //@line 11659
  $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 11660
  HEAP32[$572 >> 2] = $114; //@line 11661
  $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 11662
  HEAP32[$573 >> 2] = $116; //@line 11663
  sp = STACKTOP; //@line 11664
  return;
 } else if ((label | 0) == 27) {
  $578 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 11671
  $591 = $$0$be + 5 << 24 >> 24; //@line 11684
  $598 = (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 11691
  $601 = HEAP32[(HEAP32[$94 >> 2] | 0) + 48 >> 2] | 0; //@line 11694
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 11695
  $602 = FUNCTION_TABLE_iiii[$601 & 31]($54, $578, $598) | 0; //@line 11696
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 479; //@line 11699
   $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 11700
   HEAP8[$603 >> 0] = $2; //@line 11701
   $604 = $ReallocAsyncCtx6 + 5 | 0; //@line 11702
   HEAP8[$604 >> 0] = $4; //@line 11703
   $605 = $ReallocAsyncCtx6 + 8 | 0; //@line 11704
   HEAP32[$605 >> 2] = $6; //@line 11705
   $606 = $ReallocAsyncCtx6 + 12 | 0; //@line 11706
   HEAP32[$606 >> 2] = $8; //@line 11707
   $607 = $ReallocAsyncCtx6 + 16 | 0; //@line 11708
   HEAP32[$607 >> 2] = $10; //@line 11709
   $608 = $ReallocAsyncCtx6 + 20 | 0; //@line 11710
   HEAP32[$608 >> 2] = $12; //@line 11711
   $609 = $ReallocAsyncCtx6 + 24 | 0; //@line 11712
   HEAP32[$609 >> 2] = $14; //@line 11713
   $610 = $ReallocAsyncCtx6 + 28 | 0; //@line 11714
   HEAP32[$610 >> 2] = $16; //@line 11715
   $611 = $ReallocAsyncCtx6 + 32 | 0; //@line 11716
   HEAP32[$611 >> 2] = $18; //@line 11717
   $612 = $ReallocAsyncCtx6 + 36 | 0; //@line 11718
   HEAP32[$612 >> 2] = $20; //@line 11719
   $613 = $ReallocAsyncCtx6 + 40 | 0; //@line 11720
   HEAP8[$613 >> 0] = $22; //@line 11721
   $614 = $ReallocAsyncCtx6 + 44 | 0; //@line 11722
   HEAP32[$614 >> 2] = $24; //@line 11723
   $615 = $ReallocAsyncCtx6 + 48 | 0; //@line 11724
   HEAP32[$615 >> 2] = $26; //@line 11725
   $616 = $ReallocAsyncCtx6 + 52 | 0; //@line 11726
   HEAP8[$616 >> 0] = $591; //@line 11727
   $617 = $ReallocAsyncCtx6 + 56 | 0; //@line 11728
   HEAP32[$617 >> 2] = $30; //@line 11729
   $618 = $ReallocAsyncCtx6 + 60 | 0; //@line 11730
   HEAP32[$618 >> 2] = $32; //@line 11731
   $619 = $ReallocAsyncCtx6 + 64 | 0; //@line 11732
   HEAP32[$619 >> 2] = $34; //@line 11733
   $620 = $ReallocAsyncCtx6 + 68 | 0; //@line 11734
   HEAP32[$620 >> 2] = $36; //@line 11735
   $621 = $ReallocAsyncCtx6 + 72 | 0; //@line 11736
   HEAP32[$621 >> 2] = $38; //@line 11737
   $622 = $ReallocAsyncCtx6 + 76 | 0; //@line 11738
   HEAP32[$622 >> 2] = $40; //@line 11739
   $623 = $ReallocAsyncCtx6 + 80 | 0; //@line 11740
   HEAP32[$623 >> 2] = $42; //@line 11741
   $624 = $ReallocAsyncCtx6 + 84 | 0; //@line 11742
   HEAP32[$624 >> 2] = $44; //@line 11743
   $625 = $ReallocAsyncCtx6 + 88 | 0; //@line 11744
   HEAP32[$625 >> 2] = $46; //@line 11745
   $626 = $ReallocAsyncCtx6 + 92 | 0; //@line 11746
   HEAP32[$626 >> 2] = $48; //@line 11747
   $627 = $ReallocAsyncCtx6 + 96 | 0; //@line 11748
   HEAP32[$627 >> 2] = $50; //@line 11749
   $628 = $ReallocAsyncCtx6 + 100 | 0; //@line 11750
   HEAP32[$628 >> 2] = $52; //@line 11751
   $629 = $ReallocAsyncCtx6 + 104 | 0; //@line 11752
   HEAP32[$629 >> 2] = $54; //@line 11753
   $630 = $ReallocAsyncCtx6 + 108 | 0; //@line 11754
   HEAP32[$630 >> 2] = $56; //@line 11755
   $631 = $ReallocAsyncCtx6 + 112 | 0; //@line 11756
   HEAP32[$631 >> 2] = $58; //@line 11757
   $632 = $ReallocAsyncCtx6 + 116 | 0; //@line 11758
   HEAP32[$632 >> 2] = $60; //@line 11759
   $633 = $ReallocAsyncCtx6 + 120 | 0; //@line 11760
   HEAP32[$633 >> 2] = $62; //@line 11761
   $634 = $ReallocAsyncCtx6 + 124 | 0; //@line 11762
   HEAP32[$634 >> 2] = $64; //@line 11763
   $635 = $ReallocAsyncCtx6 + 128 | 0; //@line 11764
   HEAP32[$635 >> 2] = $66; //@line 11765
   $636 = $ReallocAsyncCtx6 + 132 | 0; //@line 11766
   HEAP32[$636 >> 2] = $68; //@line 11767
   $637 = $ReallocAsyncCtx6 + 136 | 0; //@line 11768
   HEAP32[$637 >> 2] = $70; //@line 11769
   $638 = $ReallocAsyncCtx6 + 140 | 0; //@line 11770
   HEAP32[$638 >> 2] = $72; //@line 11771
   $639 = $ReallocAsyncCtx6 + 144 | 0; //@line 11772
   HEAP32[$639 >> 2] = $74; //@line 11773
   $640 = $ReallocAsyncCtx6 + 148 | 0; //@line 11774
   HEAP32[$640 >> 2] = $76; //@line 11775
   $641 = $ReallocAsyncCtx6 + 152 | 0; //@line 11776
   HEAP32[$641 >> 2] = $78; //@line 11777
   $642 = $ReallocAsyncCtx6 + 156 | 0; //@line 11778
   HEAP32[$642 >> 2] = $80; //@line 11779
   $643 = $ReallocAsyncCtx6 + 160 | 0; //@line 11780
   HEAP32[$643 >> 2] = $82; //@line 11781
   $644 = $ReallocAsyncCtx6 + 164 | 0; //@line 11782
   HEAP32[$644 >> 2] = $84; //@line 11783
   $645 = $ReallocAsyncCtx6 + 168 | 0; //@line 11784
   HEAP32[$645 >> 2] = $86; //@line 11785
   $646 = $ReallocAsyncCtx6 + 172 | 0; //@line 11786
   HEAP32[$646 >> 2] = $88; //@line 11787
   $647 = $ReallocAsyncCtx6 + 176 | 0; //@line 11788
   HEAP32[$647 >> 2] = $90; //@line 11789
   $648 = $ReallocAsyncCtx6 + 180 | 0; //@line 11790
   HEAP32[$648 >> 2] = $92; //@line 11791
   $649 = $ReallocAsyncCtx6 + 184 | 0; //@line 11792
   HEAP32[$649 >> 2] = $94; //@line 11793
   $650 = $ReallocAsyncCtx6 + 188 | 0; //@line 11794
   HEAP32[$650 >> 2] = $96; //@line 11795
   $651 = $ReallocAsyncCtx6 + 192 | 0; //@line 11796
   HEAP32[$651 >> 2] = $98; //@line 11797
   $652 = $ReallocAsyncCtx6 + 196 | 0; //@line 11798
   HEAP32[$652 >> 2] = $100; //@line 11799
   $653 = $ReallocAsyncCtx6 + 200 | 0; //@line 11800
   HEAP32[$653 >> 2] = $102; //@line 11801
   $654 = $ReallocAsyncCtx6 + 204 | 0; //@line 11802
   HEAP32[$654 >> 2] = $104; //@line 11803
   $655 = $ReallocAsyncCtx6 + 208 | 0; //@line 11804
   HEAP32[$655 >> 2] = $106; //@line 11805
   $656 = $ReallocAsyncCtx6 + 212 | 0; //@line 11806
   HEAP32[$656 >> 2] = $108; //@line 11807
   $657 = $ReallocAsyncCtx6 + 216 | 0; //@line 11808
   HEAP32[$657 >> 2] = $110; //@line 11809
   $658 = $ReallocAsyncCtx6 + 220 | 0; //@line 11810
   HEAP32[$658 >> 2] = $112; //@line 11811
   $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 11812
   HEAP32[$659 >> 2] = $114; //@line 11813
   $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 11814
   HEAP32[$660 >> 2] = $116; //@line 11815
   sp = STACKTOP; //@line 11816
   return;
  }
  HEAP8[___async_retval >> 0] = $602; //@line 11820
  ___async_unwind = 0; //@line 11821
  HEAP32[$ReallocAsyncCtx6 >> 2] = 479; //@line 11822
  $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 11823
  HEAP8[$603 >> 0] = $2; //@line 11824
  $604 = $ReallocAsyncCtx6 + 5 | 0; //@line 11825
  HEAP8[$604 >> 0] = $4; //@line 11826
  $605 = $ReallocAsyncCtx6 + 8 | 0; //@line 11827
  HEAP32[$605 >> 2] = $6; //@line 11828
  $606 = $ReallocAsyncCtx6 + 12 | 0; //@line 11829
  HEAP32[$606 >> 2] = $8; //@line 11830
  $607 = $ReallocAsyncCtx6 + 16 | 0; //@line 11831
  HEAP32[$607 >> 2] = $10; //@line 11832
  $608 = $ReallocAsyncCtx6 + 20 | 0; //@line 11833
  HEAP32[$608 >> 2] = $12; //@line 11834
  $609 = $ReallocAsyncCtx6 + 24 | 0; //@line 11835
  HEAP32[$609 >> 2] = $14; //@line 11836
  $610 = $ReallocAsyncCtx6 + 28 | 0; //@line 11837
  HEAP32[$610 >> 2] = $16; //@line 11838
  $611 = $ReallocAsyncCtx6 + 32 | 0; //@line 11839
  HEAP32[$611 >> 2] = $18; //@line 11840
  $612 = $ReallocAsyncCtx6 + 36 | 0; //@line 11841
  HEAP32[$612 >> 2] = $20; //@line 11842
  $613 = $ReallocAsyncCtx6 + 40 | 0; //@line 11843
  HEAP8[$613 >> 0] = $22; //@line 11844
  $614 = $ReallocAsyncCtx6 + 44 | 0; //@line 11845
  HEAP32[$614 >> 2] = $24; //@line 11846
  $615 = $ReallocAsyncCtx6 + 48 | 0; //@line 11847
  HEAP32[$615 >> 2] = $26; //@line 11848
  $616 = $ReallocAsyncCtx6 + 52 | 0; //@line 11849
  HEAP8[$616 >> 0] = $591; //@line 11850
  $617 = $ReallocAsyncCtx6 + 56 | 0; //@line 11851
  HEAP32[$617 >> 2] = $30; //@line 11852
  $618 = $ReallocAsyncCtx6 + 60 | 0; //@line 11853
  HEAP32[$618 >> 2] = $32; //@line 11854
  $619 = $ReallocAsyncCtx6 + 64 | 0; //@line 11855
  HEAP32[$619 >> 2] = $34; //@line 11856
  $620 = $ReallocAsyncCtx6 + 68 | 0; //@line 11857
  HEAP32[$620 >> 2] = $36; //@line 11858
  $621 = $ReallocAsyncCtx6 + 72 | 0; //@line 11859
  HEAP32[$621 >> 2] = $38; //@line 11860
  $622 = $ReallocAsyncCtx6 + 76 | 0; //@line 11861
  HEAP32[$622 >> 2] = $40; //@line 11862
  $623 = $ReallocAsyncCtx6 + 80 | 0; //@line 11863
  HEAP32[$623 >> 2] = $42; //@line 11864
  $624 = $ReallocAsyncCtx6 + 84 | 0; //@line 11865
  HEAP32[$624 >> 2] = $44; //@line 11866
  $625 = $ReallocAsyncCtx6 + 88 | 0; //@line 11867
  HEAP32[$625 >> 2] = $46; //@line 11868
  $626 = $ReallocAsyncCtx6 + 92 | 0; //@line 11869
  HEAP32[$626 >> 2] = $48; //@line 11870
  $627 = $ReallocAsyncCtx6 + 96 | 0; //@line 11871
  HEAP32[$627 >> 2] = $50; //@line 11872
  $628 = $ReallocAsyncCtx6 + 100 | 0; //@line 11873
  HEAP32[$628 >> 2] = $52; //@line 11874
  $629 = $ReallocAsyncCtx6 + 104 | 0; //@line 11875
  HEAP32[$629 >> 2] = $54; //@line 11876
  $630 = $ReallocAsyncCtx6 + 108 | 0; //@line 11877
  HEAP32[$630 >> 2] = $56; //@line 11878
  $631 = $ReallocAsyncCtx6 + 112 | 0; //@line 11879
  HEAP32[$631 >> 2] = $58; //@line 11880
  $632 = $ReallocAsyncCtx6 + 116 | 0; //@line 11881
  HEAP32[$632 >> 2] = $60; //@line 11882
  $633 = $ReallocAsyncCtx6 + 120 | 0; //@line 11883
  HEAP32[$633 >> 2] = $62; //@line 11884
  $634 = $ReallocAsyncCtx6 + 124 | 0; //@line 11885
  HEAP32[$634 >> 2] = $64; //@line 11886
  $635 = $ReallocAsyncCtx6 + 128 | 0; //@line 11887
  HEAP32[$635 >> 2] = $66; //@line 11888
  $636 = $ReallocAsyncCtx6 + 132 | 0; //@line 11889
  HEAP32[$636 >> 2] = $68; //@line 11890
  $637 = $ReallocAsyncCtx6 + 136 | 0; //@line 11891
  HEAP32[$637 >> 2] = $70; //@line 11892
  $638 = $ReallocAsyncCtx6 + 140 | 0; //@line 11893
  HEAP32[$638 >> 2] = $72; //@line 11894
  $639 = $ReallocAsyncCtx6 + 144 | 0; //@line 11895
  HEAP32[$639 >> 2] = $74; //@line 11896
  $640 = $ReallocAsyncCtx6 + 148 | 0; //@line 11897
  HEAP32[$640 >> 2] = $76; //@line 11898
  $641 = $ReallocAsyncCtx6 + 152 | 0; //@line 11899
  HEAP32[$641 >> 2] = $78; //@line 11900
  $642 = $ReallocAsyncCtx6 + 156 | 0; //@line 11901
  HEAP32[$642 >> 2] = $80; //@line 11902
  $643 = $ReallocAsyncCtx6 + 160 | 0; //@line 11903
  HEAP32[$643 >> 2] = $82; //@line 11904
  $644 = $ReallocAsyncCtx6 + 164 | 0; //@line 11905
  HEAP32[$644 >> 2] = $84; //@line 11906
  $645 = $ReallocAsyncCtx6 + 168 | 0; //@line 11907
  HEAP32[$645 >> 2] = $86; //@line 11908
  $646 = $ReallocAsyncCtx6 + 172 | 0; //@line 11909
  HEAP32[$646 >> 2] = $88; //@line 11910
  $647 = $ReallocAsyncCtx6 + 176 | 0; //@line 11911
  HEAP32[$647 >> 2] = $90; //@line 11912
  $648 = $ReallocAsyncCtx6 + 180 | 0; //@line 11913
  HEAP32[$648 >> 2] = $92; //@line 11914
  $649 = $ReallocAsyncCtx6 + 184 | 0; //@line 11915
  HEAP32[$649 >> 2] = $94; //@line 11916
  $650 = $ReallocAsyncCtx6 + 188 | 0; //@line 11917
  HEAP32[$650 >> 2] = $96; //@line 11918
  $651 = $ReallocAsyncCtx6 + 192 | 0; //@line 11919
  HEAP32[$651 >> 2] = $98; //@line 11920
  $652 = $ReallocAsyncCtx6 + 196 | 0; //@line 11921
  HEAP32[$652 >> 2] = $100; //@line 11922
  $653 = $ReallocAsyncCtx6 + 200 | 0; //@line 11923
  HEAP32[$653 >> 2] = $102; //@line 11924
  $654 = $ReallocAsyncCtx6 + 204 | 0; //@line 11925
  HEAP32[$654 >> 2] = $104; //@line 11926
  $655 = $ReallocAsyncCtx6 + 208 | 0; //@line 11927
  HEAP32[$655 >> 2] = $106; //@line 11928
  $656 = $ReallocAsyncCtx6 + 212 | 0; //@line 11929
  HEAP32[$656 >> 2] = $108; //@line 11930
  $657 = $ReallocAsyncCtx6 + 216 | 0; //@line 11931
  HEAP32[$657 >> 2] = $110; //@line 11932
  $658 = $ReallocAsyncCtx6 + 220 | 0; //@line 11933
  HEAP32[$658 >> 2] = $112; //@line 11934
  $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 11935
  HEAP32[$659 >> 2] = $114; //@line 11936
  $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 11937
  HEAP32[$660 >> 2] = $116; //@line 11938
  sp = STACKTOP; //@line 11939
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 11944
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_159($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $138 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $212 = 0, $215 = 0, $22 = 0, $222 = 0, $223 = 0, $229 = 0, $24 = 0, $248 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $319 = 0, $32 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $385 = 0, $386 = 0, $4 = 0, $40 = 0, $400 = 0, $42 = 0, $421 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $489 = 0, $493 = 0, $497 = 0, $50 = 0, $502 = 0, $503 = 0, $507 = 0, $511 = 0, $513 = 0, $515 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $583 = 0, $590 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $611 = 0, $618 = 0, $62 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8004
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 8006
 $4 = HEAP8[$0 + 5 >> 0] | 0; //@line 8008
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 8010
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 8012
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 8014
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 8016
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 8018
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 8020
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 8022
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 8024
 $22 = HEAP8[$0 + 40 >> 0] | 0; //@line 8026
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 8028
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 8030
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 8034
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 8036
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 8038
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 8040
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 8042
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 8044
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 8046
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 8048
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 8050
 $48 = HEAP8[$0 + 92 >> 0] | 0; //@line 8052
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 8054
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 8056
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 8058
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 8060
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 8062
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 8064
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 8066
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 8068
 $66 = HEAP8[$0 + 128 >> 0] | 0; //@line 8070
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 8072
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 8074
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 8076
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 8078
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 8080
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 8082
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 8084
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 8086
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 8088
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 8090
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 8092
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 8094
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 8096
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 8098
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 8100
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 8102
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 8104
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 8106
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 8108
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 8110
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 8112
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 8116
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 8118
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 8120
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 8122
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 8124
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 8126
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 8128
 if (HEAP8[___async_retval >> 0] & 1) {
  $583 = HEAP32[$0 + 52 >> 2] & 15; //@line 8133
  HEAP8[$90 >> 0] = HEAP8[$0 + 216 >> 0] | 0; //@line 8134
  HEAP8[$112 >> 0] = $66; //@line 8135
  HEAPF32[$102 >> 2] = +(HEAPU8[13528 + $583 >> 0] | 0); //@line 8139
  $590 = HEAP8[$56 >> 0] | 0; //@line 8143
  $591 = $590 & 255; //@line 8144
  if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) > ($591 | 0)) {
   HEAP8[$56 >> 0] = $590 + 1 << 24 >> 24; //@line 8149
   HEAP8[$14 + 4 + $591 >> 0] = 9; //@line 8150
   HEAP8[$62 >> 0] = 1; //@line 8151
   $$0$be = $48; //@line 8152
   $$0107$be = 0; //@line 8152
  } else {
   $$0$be = $48; //@line 8154
   $$0107$be = -1010; //@line 8154
  }
 } else {
  $$0$be = $48; //@line 8157
  $$0107$be = $24; //@line 8157
 }
 L5 : while (1) {
  if (($$0$be & 255) >= ($2 & 255)) {
   label = 33; //@line 8162
   break;
  }
  $127 = $$0$be + 1 << 24 >> 24; //@line 8166
  switch (HEAP8[$18 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 8171
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 8176
    break L5;
    break;
   }
  case 7:
   {
    label = 18; //@line 8181
    break L5;
    break;
   }
  case 9:
   {
    label = 24; //@line 8186
    break L5;
    break;
   }
  case 10:
   {
    label = 30; //@line 8191
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$30 >> 2] = 0; //@line 8196
    HEAP8[$6 >> 0] = HEAP8[$18 + ($127 & 255) >> 0] | 0; //@line 8201
    HEAP8[$10 >> 0] = HEAP8[$18 + ($$0$be + 2 & 255) >> 0] | 0; //@line 8206
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 8207
    continue L5;
    break;
   }
  case 4:
   {
    $212 = $$0$be + 2 << 24 >> 24; //@line 8212
    $215 = HEAP8[$18 + ($127 & 255) >> 0] | 0; //@line 8215
    HEAP8[$38 >> 0] = $215; //@line 8216
    HEAP16[$46 >> 1] = 1 << ($215 & 255); //@line 8220
    $222 = HEAP8[$56 >> 0] | 0; //@line 8224
    $223 = $222 & 255; //@line 8225
    if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) <= ($223 | 0)) {
     $$0$be = $212; //@line 8228
     $$0107$be = -1010; //@line 8228
     continue L5;
    }
    HEAP8[$56 >> 0] = $222 + 1 << 24 >> 24; //@line 8233
    HEAP8[$14 + 4 + $223 >> 0] = 4; //@line 8234
    HEAP8[$62 >> 0] = 1; //@line 8235
    $$0$be = $212; //@line 8236
    $$0107$be = 0; //@line 8236
    continue L5;
    break;
   }
  case 6:
   {
    $319 = HEAP32[$16 >> 2] | 0; //@line 8241
    if ($319 | 0) {
     label = 13; //@line 8244
     break L5;
    }
    $385 = HEAP8[$56 >> 0] | 0; //@line 8250
    $386 = $385 & 255; //@line 8251
    if ((128 - (HEAPU8[$20 >> 0] | 0) - $386 | 0) <= 2) {
     $$0$be = $127; //@line 8255
     $$0107$be = -1010; //@line 8255
     continue L5;
    }
    HEAP8[$14 + 4 + $386 >> 0] = 6; //@line 8260
    HEAP8[($385 + 1 & 255) + ($14 + 4) >> 0] = -1; //@line 8264
    HEAP8[$56 >> 0] = $385 + 3 << 24 >> 24; //@line 8266
    HEAP8[($385 + 2 & 255) + ($14 + 4) >> 0] = $4; //@line 8269
    HEAP8[$62 >> 0] = 1; //@line 8270
    $$0$be = $127; //@line 8271
    $$0107$be = 0; //@line 8271
    continue L5;
    break;
   }
  case 8:
   {
    $489 = $$0$be + 2 << 24 >> 24; //@line 8276
    $493 = HEAP8[$18 + ($127 & 255) >> 0] & 15; //@line 8280
    $497 = ($493 + ($493 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 8285
    HEAP32[$78 >> 2] = $497; //@line 8286
    HEAP32[$72 >> 2] = $497 + 1e3; //@line 8288
    $502 = HEAP8[$56 >> 0] | 0; //@line 8292
    $503 = $502 & 255; //@line 8293
    if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) <= ($503 | 0)) {
     $$0$be = $489; //@line 8296
     $$0107$be = -1010; //@line 8296
     continue L5;
    }
    HEAP8[$56 >> 0] = $502 + 1 << 24 >> 24; //@line 8301
    HEAP8[$14 + 4 + $503 >> 0] = 8; //@line 8302
    HEAP8[$34 >> 0] = 1; //@line 8303
    HEAP8[$62 >> 0] = 1; //@line 8304
    $$0$be = $489; //@line 8305
    $$0107$be = 0; //@line 8305
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $127; //@line 8310
    $$0107$be = -1013; //@line 8310
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$12 >> 0] = 0; //@line 8316
  HEAP8[$86 >> 0] = 0; //@line 8317
  HEAP8[$82 >> 0] = 0; //@line 8318
  HEAP8[$74 >> 0] = 0; //@line 8319
  $138 = $127 & 255; //@line 8320
  $139 = $138 + -1 | 0; //@line 8321
  HEAP32[$60 >> 2] = $18 + $139; //@line 8323
  HEAP8[$36 >> 0] = $122 - $139; //@line 8326
  HEAP8[$88 >> 0] = HEAP8[$44 >> 0] | 0; //@line 8328
  HEAP8[$70 >> 0] = HEAP8[$90 >> 0] | 0; //@line 8330
  HEAP8[$114 >> 0] = HEAP8[$80 >> 0] | 0; //@line 8332
  HEAP8[$108 >> 0] = HEAP8[$98 >> 0] | 0; //@line 8334
  HEAP8[$32 >> 0] = HEAP8[$26 >> 0] | 0; //@line 8336
  $150 = HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] | 0; //@line 8339
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 8340
  $151 = FUNCTION_TABLE_iiiiiii[$150 & 3]($58, $52, $12, $86, $82, $74) | 0; //@line 8341
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 474; //@line 8344
   $152 = $ReallocAsyncCtx + 4 | 0; //@line 8345
   HEAP8[$152 >> 0] = $2; //@line 8346
   $153 = $ReallocAsyncCtx + 5 | 0; //@line 8347
   HEAP8[$153 >> 0] = $4; //@line 8348
   $154 = $ReallocAsyncCtx + 8 | 0; //@line 8349
   HEAP32[$154 >> 2] = $6; //@line 8350
   $155 = $ReallocAsyncCtx + 12 | 0; //@line 8351
   HEAP32[$155 >> 2] = $8; //@line 8352
   $156 = $ReallocAsyncCtx + 16 | 0; //@line 8353
   HEAP32[$156 >> 2] = $10; //@line 8354
   $157 = $ReallocAsyncCtx + 20 | 0; //@line 8355
   HEAP32[$157 >> 2] = $12; //@line 8356
   $158 = $ReallocAsyncCtx + 24 | 0; //@line 8357
   HEAP32[$158 >> 2] = $14; //@line 8358
   $159 = $ReallocAsyncCtx + 28 | 0; //@line 8359
   HEAP32[$159 >> 2] = $16; //@line 8360
   $160 = $ReallocAsyncCtx + 32 | 0; //@line 8361
   HEAP32[$160 >> 2] = $18; //@line 8362
   $161 = $ReallocAsyncCtx + 36 | 0; //@line 8363
   HEAP32[$161 >> 2] = $20; //@line 8364
   $162 = $ReallocAsyncCtx + 40 | 0; //@line 8365
   HEAP32[$162 >> 2] = $$0107$be; //@line 8366
   $163 = $ReallocAsyncCtx + 44 | 0; //@line 8367
   HEAP8[$163 >> 0] = $22; //@line 8368
   $164 = $ReallocAsyncCtx + 48 | 0; //@line 8369
   HEAP32[$164 >> 2] = $26; //@line 8370
   $165 = $ReallocAsyncCtx + 52 | 0; //@line 8371
   HEAP32[$165 >> 2] = $138; //@line 8372
   $166 = $ReallocAsyncCtx + 56 | 0; //@line 8373
   HEAP32[$166 >> 2] = $30; //@line 8374
   $167 = $ReallocAsyncCtx + 60 | 0; //@line 8375
   HEAP32[$167 >> 2] = $32; //@line 8376
   $168 = $ReallocAsyncCtx + 64 | 0; //@line 8377
   HEAP32[$168 >> 2] = $34; //@line 8378
   $169 = $ReallocAsyncCtx + 68 | 0; //@line 8379
   HEAP32[$169 >> 2] = $36; //@line 8380
   $170 = $ReallocAsyncCtx + 72 | 0; //@line 8381
   HEAP32[$170 >> 2] = $38; //@line 8382
   $171 = $ReallocAsyncCtx + 76 | 0; //@line 8383
   HEAP32[$171 >> 2] = $40; //@line 8384
   $172 = $ReallocAsyncCtx + 80 | 0; //@line 8385
   HEAP32[$172 >> 2] = $42; //@line 8386
   $173 = $ReallocAsyncCtx + 84 | 0; //@line 8387
   HEAP32[$173 >> 2] = $44; //@line 8388
   $174 = $ReallocAsyncCtx + 88 | 0; //@line 8389
   HEAP32[$174 >> 2] = $46; //@line 8390
   $175 = $ReallocAsyncCtx + 92 | 0; //@line 8391
   HEAP32[$175 >> 2] = $50; //@line 8392
   $176 = $ReallocAsyncCtx + 96 | 0; //@line 8393
   HEAP32[$176 >> 2] = $52; //@line 8394
   $177 = $ReallocAsyncCtx + 100 | 0; //@line 8395
   HEAP32[$177 >> 2] = $54; //@line 8396
   $178 = $ReallocAsyncCtx + 104 | 0; //@line 8397
   HEAP32[$178 >> 2] = $56; //@line 8398
   $179 = $ReallocAsyncCtx + 108 | 0; //@line 8399
   HEAP32[$179 >> 2] = $58; //@line 8400
   $180 = $ReallocAsyncCtx + 112 | 0; //@line 8401
   HEAP32[$180 >> 2] = $60; //@line 8402
   $181 = $ReallocAsyncCtx + 116 | 0; //@line 8403
   HEAP32[$181 >> 2] = $62; //@line 8404
   $182 = $ReallocAsyncCtx + 120 | 0; //@line 8405
   HEAP32[$182 >> 2] = $64; //@line 8406
   $183 = $ReallocAsyncCtx + 124 | 0; //@line 8407
   HEAP32[$183 >> 2] = $68; //@line 8408
   $184 = $ReallocAsyncCtx + 128 | 0; //@line 8409
   HEAP32[$184 >> 2] = $70; //@line 8410
   $185 = $ReallocAsyncCtx + 132 | 0; //@line 8411
   HEAP32[$185 >> 2] = $72; //@line 8412
   $186 = $ReallocAsyncCtx + 136 | 0; //@line 8413
   HEAP32[$186 >> 2] = $74; //@line 8414
   $187 = $ReallocAsyncCtx + 140 | 0; //@line 8415
   HEAP32[$187 >> 2] = $76; //@line 8416
   $188 = $ReallocAsyncCtx + 144 | 0; //@line 8417
   HEAP32[$188 >> 2] = $78; //@line 8418
   $189 = $ReallocAsyncCtx + 148 | 0; //@line 8419
   HEAP32[$189 >> 2] = $80; //@line 8420
   $190 = $ReallocAsyncCtx + 152 | 0; //@line 8421
   HEAP32[$190 >> 2] = $82; //@line 8422
   $191 = $ReallocAsyncCtx + 156 | 0; //@line 8423
   HEAP32[$191 >> 2] = $84; //@line 8424
   $192 = $ReallocAsyncCtx + 160 | 0; //@line 8425
   HEAP32[$192 >> 2] = $86; //@line 8426
   $193 = $ReallocAsyncCtx + 164 | 0; //@line 8427
   HEAP32[$193 >> 2] = $88; //@line 8428
   $194 = $ReallocAsyncCtx + 168 | 0; //@line 8429
   HEAP32[$194 >> 2] = $90; //@line 8430
   $195 = $ReallocAsyncCtx + 172 | 0; //@line 8431
   HEAP32[$195 >> 2] = $92; //@line 8432
   $196 = $ReallocAsyncCtx + 176 | 0; //@line 8433
   HEAP32[$196 >> 2] = $94; //@line 8434
   $197 = $ReallocAsyncCtx + 180 | 0; //@line 8435
   HEAP32[$197 >> 2] = $96; //@line 8436
   $198 = $ReallocAsyncCtx + 184 | 0; //@line 8437
   HEAP32[$198 >> 2] = $98; //@line 8438
   $199 = $ReallocAsyncCtx + 188 | 0; //@line 8439
   HEAP32[$199 >> 2] = $100; //@line 8440
   $200 = $ReallocAsyncCtx + 192 | 0; //@line 8441
   HEAP32[$200 >> 2] = $102; //@line 8442
   $201 = $ReallocAsyncCtx + 196 | 0; //@line 8443
   HEAP32[$201 >> 2] = $104; //@line 8444
   $202 = $ReallocAsyncCtx + 200 | 0; //@line 8445
   HEAP32[$202 >> 2] = $106; //@line 8446
   $203 = $ReallocAsyncCtx + 204 | 0; //@line 8447
   HEAP32[$203 >> 2] = $108; //@line 8448
   $204 = $ReallocAsyncCtx + 208 | 0; //@line 8449
   HEAP32[$204 >> 2] = $112; //@line 8450
   $205 = $ReallocAsyncCtx + 212 | 0; //@line 8451
   HEAP32[$205 >> 2] = $114; //@line 8452
   $206 = $ReallocAsyncCtx + 216 | 0; //@line 8453
   HEAP32[$206 >> 2] = $116; //@line 8454
   $207 = $ReallocAsyncCtx + 220 | 0; //@line 8455
   HEAP32[$207 >> 2] = $118; //@line 8456
   $208 = $ReallocAsyncCtx + 224 | 0; //@line 8457
   HEAP32[$208 >> 2] = $120; //@line 8458
   $209 = $ReallocAsyncCtx + 228 | 0; //@line 8459
   HEAP32[$209 >> 2] = $122; //@line 8460
   $210 = $ReallocAsyncCtx + 232 | 0; //@line 8461
   HEAP32[$210 >> 2] = $124; //@line 8462
   sp = STACKTOP; //@line 8463
   return;
  }
  HEAP8[___async_retval >> 0] = $151; //@line 8467
  ___async_unwind = 0; //@line 8468
  HEAP32[$ReallocAsyncCtx >> 2] = 474; //@line 8469
  $152 = $ReallocAsyncCtx + 4 | 0; //@line 8470
  HEAP8[$152 >> 0] = $2; //@line 8471
  $153 = $ReallocAsyncCtx + 5 | 0; //@line 8472
  HEAP8[$153 >> 0] = $4; //@line 8473
  $154 = $ReallocAsyncCtx + 8 | 0; //@line 8474
  HEAP32[$154 >> 2] = $6; //@line 8475
  $155 = $ReallocAsyncCtx + 12 | 0; //@line 8476
  HEAP32[$155 >> 2] = $8; //@line 8477
  $156 = $ReallocAsyncCtx + 16 | 0; //@line 8478
  HEAP32[$156 >> 2] = $10; //@line 8479
  $157 = $ReallocAsyncCtx + 20 | 0; //@line 8480
  HEAP32[$157 >> 2] = $12; //@line 8481
  $158 = $ReallocAsyncCtx + 24 | 0; //@line 8482
  HEAP32[$158 >> 2] = $14; //@line 8483
  $159 = $ReallocAsyncCtx + 28 | 0; //@line 8484
  HEAP32[$159 >> 2] = $16; //@line 8485
  $160 = $ReallocAsyncCtx + 32 | 0; //@line 8486
  HEAP32[$160 >> 2] = $18; //@line 8487
  $161 = $ReallocAsyncCtx + 36 | 0; //@line 8488
  HEAP32[$161 >> 2] = $20; //@line 8489
  $162 = $ReallocAsyncCtx + 40 | 0; //@line 8490
  HEAP32[$162 >> 2] = $$0107$be; //@line 8491
  $163 = $ReallocAsyncCtx + 44 | 0; //@line 8492
  HEAP8[$163 >> 0] = $22; //@line 8493
  $164 = $ReallocAsyncCtx + 48 | 0; //@line 8494
  HEAP32[$164 >> 2] = $26; //@line 8495
  $165 = $ReallocAsyncCtx + 52 | 0; //@line 8496
  HEAP32[$165 >> 2] = $138; //@line 8497
  $166 = $ReallocAsyncCtx + 56 | 0; //@line 8498
  HEAP32[$166 >> 2] = $30; //@line 8499
  $167 = $ReallocAsyncCtx + 60 | 0; //@line 8500
  HEAP32[$167 >> 2] = $32; //@line 8501
  $168 = $ReallocAsyncCtx + 64 | 0; //@line 8502
  HEAP32[$168 >> 2] = $34; //@line 8503
  $169 = $ReallocAsyncCtx + 68 | 0; //@line 8504
  HEAP32[$169 >> 2] = $36; //@line 8505
  $170 = $ReallocAsyncCtx + 72 | 0; //@line 8506
  HEAP32[$170 >> 2] = $38; //@line 8507
  $171 = $ReallocAsyncCtx + 76 | 0; //@line 8508
  HEAP32[$171 >> 2] = $40; //@line 8509
  $172 = $ReallocAsyncCtx + 80 | 0; //@line 8510
  HEAP32[$172 >> 2] = $42; //@line 8511
  $173 = $ReallocAsyncCtx + 84 | 0; //@line 8512
  HEAP32[$173 >> 2] = $44; //@line 8513
  $174 = $ReallocAsyncCtx + 88 | 0; //@line 8514
  HEAP32[$174 >> 2] = $46; //@line 8515
  $175 = $ReallocAsyncCtx + 92 | 0; //@line 8516
  HEAP32[$175 >> 2] = $50; //@line 8517
  $176 = $ReallocAsyncCtx + 96 | 0; //@line 8518
  HEAP32[$176 >> 2] = $52; //@line 8519
  $177 = $ReallocAsyncCtx + 100 | 0; //@line 8520
  HEAP32[$177 >> 2] = $54; //@line 8521
  $178 = $ReallocAsyncCtx + 104 | 0; //@line 8522
  HEAP32[$178 >> 2] = $56; //@line 8523
  $179 = $ReallocAsyncCtx + 108 | 0; //@line 8524
  HEAP32[$179 >> 2] = $58; //@line 8525
  $180 = $ReallocAsyncCtx + 112 | 0; //@line 8526
  HEAP32[$180 >> 2] = $60; //@line 8527
  $181 = $ReallocAsyncCtx + 116 | 0; //@line 8528
  HEAP32[$181 >> 2] = $62; //@line 8529
  $182 = $ReallocAsyncCtx + 120 | 0; //@line 8530
  HEAP32[$182 >> 2] = $64; //@line 8531
  $183 = $ReallocAsyncCtx + 124 | 0; //@line 8532
  HEAP32[$183 >> 2] = $68; //@line 8533
  $184 = $ReallocAsyncCtx + 128 | 0; //@line 8534
  HEAP32[$184 >> 2] = $70; //@line 8535
  $185 = $ReallocAsyncCtx + 132 | 0; //@line 8536
  HEAP32[$185 >> 2] = $72; //@line 8537
  $186 = $ReallocAsyncCtx + 136 | 0; //@line 8538
  HEAP32[$186 >> 2] = $74; //@line 8539
  $187 = $ReallocAsyncCtx + 140 | 0; //@line 8540
  HEAP32[$187 >> 2] = $76; //@line 8541
  $188 = $ReallocAsyncCtx + 144 | 0; //@line 8542
  HEAP32[$188 >> 2] = $78; //@line 8543
  $189 = $ReallocAsyncCtx + 148 | 0; //@line 8544
  HEAP32[$189 >> 2] = $80; //@line 8545
  $190 = $ReallocAsyncCtx + 152 | 0; //@line 8546
  HEAP32[$190 >> 2] = $82; //@line 8547
  $191 = $ReallocAsyncCtx + 156 | 0; //@line 8548
  HEAP32[$191 >> 2] = $84; //@line 8549
  $192 = $ReallocAsyncCtx + 160 | 0; //@line 8550
  HEAP32[$192 >> 2] = $86; //@line 8551
  $193 = $ReallocAsyncCtx + 164 | 0; //@line 8552
  HEAP32[$193 >> 2] = $88; //@line 8553
  $194 = $ReallocAsyncCtx + 168 | 0; //@line 8554
  HEAP32[$194 >> 2] = $90; //@line 8555
  $195 = $ReallocAsyncCtx + 172 | 0; //@line 8556
  HEAP32[$195 >> 2] = $92; //@line 8557
  $196 = $ReallocAsyncCtx + 176 | 0; //@line 8558
  HEAP32[$196 >> 2] = $94; //@line 8559
  $197 = $ReallocAsyncCtx + 180 | 0; //@line 8560
  HEAP32[$197 >> 2] = $96; //@line 8561
  $198 = $ReallocAsyncCtx + 184 | 0; //@line 8562
  HEAP32[$198 >> 2] = $98; //@line 8563
  $199 = $ReallocAsyncCtx + 188 | 0; //@line 8564
  HEAP32[$199 >> 2] = $100; //@line 8565
  $200 = $ReallocAsyncCtx + 192 | 0; //@line 8566
  HEAP32[$200 >> 2] = $102; //@line 8567
  $201 = $ReallocAsyncCtx + 196 | 0; //@line 8568
  HEAP32[$201 >> 2] = $104; //@line 8569
  $202 = $ReallocAsyncCtx + 200 | 0; //@line 8570
  HEAP32[$202 >> 2] = $106; //@line 8571
  $203 = $ReallocAsyncCtx + 204 | 0; //@line 8572
  HEAP32[$203 >> 2] = $108; //@line 8573
  $204 = $ReallocAsyncCtx + 208 | 0; //@line 8574
  HEAP32[$204 >> 2] = $112; //@line 8575
  $205 = $ReallocAsyncCtx + 212 | 0; //@line 8576
  HEAP32[$205 >> 2] = $114; //@line 8577
  $206 = $ReallocAsyncCtx + 216 | 0; //@line 8578
  HEAP32[$206 >> 2] = $116; //@line 8579
  $207 = $ReallocAsyncCtx + 220 | 0; //@line 8580
  HEAP32[$207 >> 2] = $118; //@line 8581
  $208 = $ReallocAsyncCtx + 224 | 0; //@line 8582
  HEAP32[$208 >> 2] = $120; //@line 8583
  $209 = $ReallocAsyncCtx + 228 | 0; //@line 8584
  HEAP32[$209 >> 2] = $122; //@line 8585
  $210 = $ReallocAsyncCtx + 232 | 0; //@line 8586
  HEAP32[$210 >> 2] = $124; //@line 8587
  sp = STACKTOP; //@line 8588
  return;
 } else if ((label | 0) == 9) {
  $229 = HEAP8[$18 + ($127 & 255) >> 0] | 0; //@line 8594
  HEAP8[$92 >> 0] = ($229 & 255) >>> 4 & 7; //@line 8599
  HEAP8[$96 >> 0] = $229 & 15; //@line 8601
  $248 = $$0$be + 5 << 24 >> 24; //@line 8615
  HEAP32[$68 >> 2] = (HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 8623
  $258 = HEAP32[(HEAP32[$76 >> 2] | 0) + 40 >> 2] | 0; //@line 8626
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 8627
  $259 = FUNCTION_TABLE_iii[$258 & 31]($58, $124) | 0; //@line 8628
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 475; //@line 8631
   $260 = $ReallocAsyncCtx2 + 4 | 0; //@line 8632
   HEAP8[$260 >> 0] = $2; //@line 8633
   $261 = $ReallocAsyncCtx2 + 5 | 0; //@line 8634
   HEAP8[$261 >> 0] = $4; //@line 8635
   $262 = $ReallocAsyncCtx2 + 8 | 0; //@line 8636
   HEAP32[$262 >> 2] = $6; //@line 8637
   $263 = $ReallocAsyncCtx2 + 12 | 0; //@line 8638
   HEAP32[$263 >> 2] = $8; //@line 8639
   $264 = $ReallocAsyncCtx2 + 16 | 0; //@line 8640
   HEAP32[$264 >> 2] = $10; //@line 8641
   $265 = $ReallocAsyncCtx2 + 20 | 0; //@line 8642
   HEAP32[$265 >> 2] = $12; //@line 8643
   $266 = $ReallocAsyncCtx2 + 24 | 0; //@line 8644
   HEAP32[$266 >> 2] = $14; //@line 8645
   $267 = $ReallocAsyncCtx2 + 28 | 0; //@line 8646
   HEAP32[$267 >> 2] = $16; //@line 8647
   $268 = $ReallocAsyncCtx2 + 32 | 0; //@line 8648
   HEAP32[$268 >> 2] = $18; //@line 8649
   $269 = $ReallocAsyncCtx2 + 36 | 0; //@line 8650
   HEAP32[$269 >> 2] = $20; //@line 8651
   $270 = $ReallocAsyncCtx2 + 40 | 0; //@line 8652
   HEAP8[$270 >> 0] = $22; //@line 8653
   $271 = $ReallocAsyncCtx2 + 44 | 0; //@line 8654
   HEAP32[$271 >> 2] = $26; //@line 8655
   $272 = $ReallocAsyncCtx2 + 48 | 0; //@line 8656
   HEAP32[$272 >> 2] = $30; //@line 8657
   $273 = $ReallocAsyncCtx2 + 52 | 0; //@line 8658
   HEAP32[$273 >> 2] = $32; //@line 8659
   $274 = $ReallocAsyncCtx2 + 56 | 0; //@line 8660
   HEAP32[$274 >> 2] = $34; //@line 8661
   $275 = $ReallocAsyncCtx2 + 60 | 0; //@line 8662
   HEAP8[$275 >> 0] = $248; //@line 8663
   $276 = $ReallocAsyncCtx2 + 64 | 0; //@line 8664
   HEAP32[$276 >> 2] = $36; //@line 8665
   $277 = $ReallocAsyncCtx2 + 68 | 0; //@line 8666
   HEAP32[$277 >> 2] = $38; //@line 8667
   $278 = $ReallocAsyncCtx2 + 72 | 0; //@line 8668
   HEAP32[$278 >> 2] = $40; //@line 8669
   $279 = $ReallocAsyncCtx2 + 76 | 0; //@line 8670
   HEAP32[$279 >> 2] = $42; //@line 8671
   $280 = $ReallocAsyncCtx2 + 80 | 0; //@line 8672
   HEAP32[$280 >> 2] = $44; //@line 8673
   $281 = $ReallocAsyncCtx2 + 84 | 0; //@line 8674
   HEAP32[$281 >> 2] = $46; //@line 8675
   $282 = $ReallocAsyncCtx2 + 88 | 0; //@line 8676
   HEAP32[$282 >> 2] = $50; //@line 8677
   $283 = $ReallocAsyncCtx2 + 92 | 0; //@line 8678
   HEAP32[$283 >> 2] = $52; //@line 8679
   $284 = $ReallocAsyncCtx2 + 96 | 0; //@line 8680
   HEAP32[$284 >> 2] = $54; //@line 8681
   $285 = $ReallocAsyncCtx2 + 100 | 0; //@line 8682
   HEAP32[$285 >> 2] = $56; //@line 8683
   $286 = $ReallocAsyncCtx2 + 104 | 0; //@line 8684
   HEAP32[$286 >> 2] = $58; //@line 8685
   $287 = $ReallocAsyncCtx2 + 108 | 0; //@line 8686
   HEAP32[$287 >> 2] = $60; //@line 8687
   $288 = $ReallocAsyncCtx2 + 112 | 0; //@line 8688
   HEAP32[$288 >> 2] = $62; //@line 8689
   $289 = $ReallocAsyncCtx2 + 116 | 0; //@line 8690
   HEAP32[$289 >> 2] = $64; //@line 8691
   $290 = $ReallocAsyncCtx2 + 120 | 0; //@line 8692
   HEAP32[$290 >> 2] = $68; //@line 8693
   $291 = $ReallocAsyncCtx2 + 124 | 0; //@line 8694
   HEAP32[$291 >> 2] = $70; //@line 8695
   $292 = $ReallocAsyncCtx2 + 128 | 0; //@line 8696
   HEAP32[$292 >> 2] = $72; //@line 8697
   $293 = $ReallocAsyncCtx2 + 132 | 0; //@line 8698
   HEAP32[$293 >> 2] = $74; //@line 8699
   $294 = $ReallocAsyncCtx2 + 136 | 0; //@line 8700
   HEAP32[$294 >> 2] = $76; //@line 8701
   $295 = $ReallocAsyncCtx2 + 140 | 0; //@line 8702
   HEAP32[$295 >> 2] = $78; //@line 8703
   $296 = $ReallocAsyncCtx2 + 144 | 0; //@line 8704
   HEAP32[$296 >> 2] = $80; //@line 8705
   $297 = $ReallocAsyncCtx2 + 148 | 0; //@line 8706
   HEAP32[$297 >> 2] = $82; //@line 8707
   $298 = $ReallocAsyncCtx2 + 152 | 0; //@line 8708
   HEAP32[$298 >> 2] = $84; //@line 8709
   $299 = $ReallocAsyncCtx2 + 156 | 0; //@line 8710
   HEAP32[$299 >> 2] = $86; //@line 8711
   $300 = $ReallocAsyncCtx2 + 160 | 0; //@line 8712
   HEAP32[$300 >> 2] = $88; //@line 8713
   $301 = $ReallocAsyncCtx2 + 164 | 0; //@line 8714
   HEAP32[$301 >> 2] = $90; //@line 8715
   $302 = $ReallocAsyncCtx2 + 168 | 0; //@line 8716
   HEAP32[$302 >> 2] = $92; //@line 8717
   $303 = $ReallocAsyncCtx2 + 172 | 0; //@line 8718
   HEAP32[$303 >> 2] = $94; //@line 8719
   $304 = $ReallocAsyncCtx2 + 176 | 0; //@line 8720
   HEAP32[$304 >> 2] = $96; //@line 8721
   $305 = $ReallocAsyncCtx2 + 180 | 0; //@line 8722
   HEAP32[$305 >> 2] = $98; //@line 8723
   $306 = $ReallocAsyncCtx2 + 184 | 0; //@line 8724
   HEAP32[$306 >> 2] = $100; //@line 8725
   $307 = $ReallocAsyncCtx2 + 188 | 0; //@line 8726
   HEAP32[$307 >> 2] = $102; //@line 8727
   $308 = $ReallocAsyncCtx2 + 192 | 0; //@line 8728
   HEAP32[$308 >> 2] = $104; //@line 8729
   $309 = $ReallocAsyncCtx2 + 196 | 0; //@line 8730
   HEAP32[$309 >> 2] = $106; //@line 8731
   $310 = $ReallocAsyncCtx2 + 200 | 0; //@line 8732
   HEAP32[$310 >> 2] = $108; //@line 8733
   $311 = $ReallocAsyncCtx2 + 204 | 0; //@line 8734
   HEAP32[$311 >> 2] = $112; //@line 8735
   $312 = $ReallocAsyncCtx2 + 208 | 0; //@line 8736
   HEAP32[$312 >> 2] = $114; //@line 8737
   $313 = $ReallocAsyncCtx2 + 212 | 0; //@line 8738
   HEAP32[$313 >> 2] = $116; //@line 8739
   $314 = $ReallocAsyncCtx2 + 216 | 0; //@line 8740
   HEAP32[$314 >> 2] = $118; //@line 8741
   $315 = $ReallocAsyncCtx2 + 220 | 0; //@line 8742
   HEAP32[$315 >> 2] = $120; //@line 8743
   $316 = $ReallocAsyncCtx2 + 224 | 0; //@line 8744
   HEAP32[$316 >> 2] = $122; //@line 8745
   $317 = $ReallocAsyncCtx2 + 228 | 0; //@line 8746
   HEAP32[$317 >> 2] = $124; //@line 8747
   sp = STACKTOP; //@line 8748
   return;
  }
  HEAP8[___async_retval >> 0] = $259; //@line 8752
  ___async_unwind = 0; //@line 8753
  HEAP32[$ReallocAsyncCtx2 >> 2] = 475; //@line 8754
  $260 = $ReallocAsyncCtx2 + 4 | 0; //@line 8755
  HEAP8[$260 >> 0] = $2; //@line 8756
  $261 = $ReallocAsyncCtx2 + 5 | 0; //@line 8757
  HEAP8[$261 >> 0] = $4; //@line 8758
  $262 = $ReallocAsyncCtx2 + 8 | 0; //@line 8759
  HEAP32[$262 >> 2] = $6; //@line 8760
  $263 = $ReallocAsyncCtx2 + 12 | 0; //@line 8761
  HEAP32[$263 >> 2] = $8; //@line 8762
  $264 = $ReallocAsyncCtx2 + 16 | 0; //@line 8763
  HEAP32[$264 >> 2] = $10; //@line 8764
  $265 = $ReallocAsyncCtx2 + 20 | 0; //@line 8765
  HEAP32[$265 >> 2] = $12; //@line 8766
  $266 = $ReallocAsyncCtx2 + 24 | 0; //@line 8767
  HEAP32[$266 >> 2] = $14; //@line 8768
  $267 = $ReallocAsyncCtx2 + 28 | 0; //@line 8769
  HEAP32[$267 >> 2] = $16; //@line 8770
  $268 = $ReallocAsyncCtx2 + 32 | 0; //@line 8771
  HEAP32[$268 >> 2] = $18; //@line 8772
  $269 = $ReallocAsyncCtx2 + 36 | 0; //@line 8773
  HEAP32[$269 >> 2] = $20; //@line 8774
  $270 = $ReallocAsyncCtx2 + 40 | 0; //@line 8775
  HEAP8[$270 >> 0] = $22; //@line 8776
  $271 = $ReallocAsyncCtx2 + 44 | 0; //@line 8777
  HEAP32[$271 >> 2] = $26; //@line 8778
  $272 = $ReallocAsyncCtx2 + 48 | 0; //@line 8779
  HEAP32[$272 >> 2] = $30; //@line 8780
  $273 = $ReallocAsyncCtx2 + 52 | 0; //@line 8781
  HEAP32[$273 >> 2] = $32; //@line 8782
  $274 = $ReallocAsyncCtx2 + 56 | 0; //@line 8783
  HEAP32[$274 >> 2] = $34; //@line 8784
  $275 = $ReallocAsyncCtx2 + 60 | 0; //@line 8785
  HEAP8[$275 >> 0] = $248; //@line 8786
  $276 = $ReallocAsyncCtx2 + 64 | 0; //@line 8787
  HEAP32[$276 >> 2] = $36; //@line 8788
  $277 = $ReallocAsyncCtx2 + 68 | 0; //@line 8789
  HEAP32[$277 >> 2] = $38; //@line 8790
  $278 = $ReallocAsyncCtx2 + 72 | 0; //@line 8791
  HEAP32[$278 >> 2] = $40; //@line 8792
  $279 = $ReallocAsyncCtx2 + 76 | 0; //@line 8793
  HEAP32[$279 >> 2] = $42; //@line 8794
  $280 = $ReallocAsyncCtx2 + 80 | 0; //@line 8795
  HEAP32[$280 >> 2] = $44; //@line 8796
  $281 = $ReallocAsyncCtx2 + 84 | 0; //@line 8797
  HEAP32[$281 >> 2] = $46; //@line 8798
  $282 = $ReallocAsyncCtx2 + 88 | 0; //@line 8799
  HEAP32[$282 >> 2] = $50; //@line 8800
  $283 = $ReallocAsyncCtx2 + 92 | 0; //@line 8801
  HEAP32[$283 >> 2] = $52; //@line 8802
  $284 = $ReallocAsyncCtx2 + 96 | 0; //@line 8803
  HEAP32[$284 >> 2] = $54; //@line 8804
  $285 = $ReallocAsyncCtx2 + 100 | 0; //@line 8805
  HEAP32[$285 >> 2] = $56; //@line 8806
  $286 = $ReallocAsyncCtx2 + 104 | 0; //@line 8807
  HEAP32[$286 >> 2] = $58; //@line 8808
  $287 = $ReallocAsyncCtx2 + 108 | 0; //@line 8809
  HEAP32[$287 >> 2] = $60; //@line 8810
  $288 = $ReallocAsyncCtx2 + 112 | 0; //@line 8811
  HEAP32[$288 >> 2] = $62; //@line 8812
  $289 = $ReallocAsyncCtx2 + 116 | 0; //@line 8813
  HEAP32[$289 >> 2] = $64; //@line 8814
  $290 = $ReallocAsyncCtx2 + 120 | 0; //@line 8815
  HEAP32[$290 >> 2] = $68; //@line 8816
  $291 = $ReallocAsyncCtx2 + 124 | 0; //@line 8817
  HEAP32[$291 >> 2] = $70; //@line 8818
  $292 = $ReallocAsyncCtx2 + 128 | 0; //@line 8819
  HEAP32[$292 >> 2] = $72; //@line 8820
  $293 = $ReallocAsyncCtx2 + 132 | 0; //@line 8821
  HEAP32[$293 >> 2] = $74; //@line 8822
  $294 = $ReallocAsyncCtx2 + 136 | 0; //@line 8823
  HEAP32[$294 >> 2] = $76; //@line 8824
  $295 = $ReallocAsyncCtx2 + 140 | 0; //@line 8825
  HEAP32[$295 >> 2] = $78; //@line 8826
  $296 = $ReallocAsyncCtx2 + 144 | 0; //@line 8827
  HEAP32[$296 >> 2] = $80; //@line 8828
  $297 = $ReallocAsyncCtx2 + 148 | 0; //@line 8829
  HEAP32[$297 >> 2] = $82; //@line 8830
  $298 = $ReallocAsyncCtx2 + 152 | 0; //@line 8831
  HEAP32[$298 >> 2] = $84; //@line 8832
  $299 = $ReallocAsyncCtx2 + 156 | 0; //@line 8833
  HEAP32[$299 >> 2] = $86; //@line 8834
  $300 = $ReallocAsyncCtx2 + 160 | 0; //@line 8835
  HEAP32[$300 >> 2] = $88; //@line 8836
  $301 = $ReallocAsyncCtx2 + 164 | 0; //@line 8837
  HEAP32[$301 >> 2] = $90; //@line 8838
  $302 = $ReallocAsyncCtx2 + 168 | 0; //@line 8839
  HEAP32[$302 >> 2] = $92; //@line 8840
  $303 = $ReallocAsyncCtx2 + 172 | 0; //@line 8841
  HEAP32[$303 >> 2] = $94; //@line 8842
  $304 = $ReallocAsyncCtx2 + 176 | 0; //@line 8843
  HEAP32[$304 >> 2] = $96; //@line 8844
  $305 = $ReallocAsyncCtx2 + 180 | 0; //@line 8845
  HEAP32[$305 >> 2] = $98; //@line 8846
  $306 = $ReallocAsyncCtx2 + 184 | 0; //@line 8847
  HEAP32[$306 >> 2] = $100; //@line 8848
  $307 = $ReallocAsyncCtx2 + 188 | 0; //@line 8849
  HEAP32[$307 >> 2] = $102; //@line 8850
  $308 = $ReallocAsyncCtx2 + 192 | 0; //@line 8851
  HEAP32[$308 >> 2] = $104; //@line 8852
  $309 = $ReallocAsyncCtx2 + 196 | 0; //@line 8853
  HEAP32[$309 >> 2] = $106; //@line 8854
  $310 = $ReallocAsyncCtx2 + 200 | 0; //@line 8855
  HEAP32[$310 >> 2] = $108; //@line 8856
  $311 = $ReallocAsyncCtx2 + 204 | 0; //@line 8857
  HEAP32[$311 >> 2] = $112; //@line 8858
  $312 = $ReallocAsyncCtx2 + 208 | 0; //@line 8859
  HEAP32[$312 >> 2] = $114; //@line 8860
  $313 = $ReallocAsyncCtx2 + 212 | 0; //@line 8861
  HEAP32[$313 >> 2] = $116; //@line 8862
  $314 = $ReallocAsyncCtx2 + 216 | 0; //@line 8863
  HEAP32[$314 >> 2] = $118; //@line 8864
  $315 = $ReallocAsyncCtx2 + 220 | 0; //@line 8865
  HEAP32[$315 >> 2] = $120; //@line 8866
  $316 = $ReallocAsyncCtx2 + 224 | 0; //@line 8867
  HEAP32[$316 >> 2] = $122; //@line 8868
  $317 = $ReallocAsyncCtx2 + 228 | 0; //@line 8869
  HEAP32[$317 >> 2] = $124; //@line 8870
  sp = STACKTOP; //@line 8871
  return;
 } else if ((label | 0) == 13) {
  $321 = HEAP32[$319 >> 2] | 0; //@line 8875
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 8876
  $322 = FUNCTION_TABLE_ii[$321 & 15]($64) | 0; //@line 8877
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 476; //@line 8880
   $323 = $ReallocAsyncCtx3 + 4 | 0; //@line 8881
   HEAP8[$323 >> 0] = $2; //@line 8882
   $324 = $ReallocAsyncCtx3 + 5 | 0; //@line 8883
   HEAP8[$324 >> 0] = $4; //@line 8884
   $325 = $ReallocAsyncCtx3 + 8 | 0; //@line 8885
   HEAP32[$325 >> 2] = $6; //@line 8886
   $326 = $ReallocAsyncCtx3 + 12 | 0; //@line 8887
   HEAP32[$326 >> 2] = $8; //@line 8888
   $327 = $ReallocAsyncCtx3 + 16 | 0; //@line 8889
   HEAP32[$327 >> 2] = $10; //@line 8890
   $328 = $ReallocAsyncCtx3 + 20 | 0; //@line 8891
   HEAP32[$328 >> 2] = $12; //@line 8892
   $329 = $ReallocAsyncCtx3 + 24 | 0; //@line 8893
   HEAP32[$329 >> 2] = $14; //@line 8894
   $330 = $ReallocAsyncCtx3 + 28 | 0; //@line 8895
   HEAP32[$330 >> 2] = $16; //@line 8896
   $331 = $ReallocAsyncCtx3 + 32 | 0; //@line 8897
   HEAP32[$331 >> 2] = $18; //@line 8898
   $332 = $ReallocAsyncCtx3 + 36 | 0; //@line 8899
   HEAP32[$332 >> 2] = $20; //@line 8900
   $333 = $ReallocAsyncCtx3 + 40 | 0; //@line 8901
   HEAP8[$333 >> 0] = $22; //@line 8902
   $334 = $ReallocAsyncCtx3 + 44 | 0; //@line 8903
   HEAP32[$334 >> 2] = $26; //@line 8904
   $335 = $ReallocAsyncCtx3 + 48 | 0; //@line 8905
   HEAP32[$335 >> 2] = $30; //@line 8906
   $336 = $ReallocAsyncCtx3 + 52 | 0; //@line 8907
   HEAP32[$336 >> 2] = $32; //@line 8908
   $337 = $ReallocAsyncCtx3 + 56 | 0; //@line 8909
   HEAP32[$337 >> 2] = $34; //@line 8910
   $338 = $ReallocAsyncCtx3 + 60 | 0; //@line 8911
   HEAP32[$338 >> 2] = $36; //@line 8912
   $339 = $ReallocAsyncCtx3 + 64 | 0; //@line 8913
   HEAP32[$339 >> 2] = $38; //@line 8914
   $340 = $ReallocAsyncCtx3 + 68 | 0; //@line 8915
   HEAP32[$340 >> 2] = $40; //@line 8916
   $341 = $ReallocAsyncCtx3 + 72 | 0; //@line 8917
   HEAP32[$341 >> 2] = $42; //@line 8918
   $342 = $ReallocAsyncCtx3 + 76 | 0; //@line 8919
   HEAP32[$342 >> 2] = $44; //@line 8920
   $343 = $ReallocAsyncCtx3 + 80 | 0; //@line 8921
   HEAP32[$343 >> 2] = $46; //@line 8922
   $344 = $ReallocAsyncCtx3 + 84 | 0; //@line 8923
   HEAP8[$344 >> 0] = $127; //@line 8924
   $345 = $ReallocAsyncCtx3 + 88 | 0; //@line 8925
   HEAP32[$345 >> 2] = $50; //@line 8926
   $346 = $ReallocAsyncCtx3 + 92 | 0; //@line 8927
   HEAP32[$346 >> 2] = $52; //@line 8928
   $347 = $ReallocAsyncCtx3 + 96 | 0; //@line 8929
   HEAP32[$347 >> 2] = $54; //@line 8930
   $348 = $ReallocAsyncCtx3 + 100 | 0; //@line 8931
   HEAP32[$348 >> 2] = $56; //@line 8932
   $349 = $ReallocAsyncCtx3 + 104 | 0; //@line 8933
   HEAP32[$349 >> 2] = $58; //@line 8934
   $350 = $ReallocAsyncCtx3 + 108 | 0; //@line 8935
   HEAP32[$350 >> 2] = $60; //@line 8936
   $351 = $ReallocAsyncCtx3 + 112 | 0; //@line 8937
   HEAP32[$351 >> 2] = $62; //@line 8938
   $352 = $ReallocAsyncCtx3 + 116 | 0; //@line 8939
   HEAP32[$352 >> 2] = $64; //@line 8940
   $353 = $ReallocAsyncCtx3 + 120 | 0; //@line 8941
   HEAP32[$353 >> 2] = $68; //@line 8942
   $354 = $ReallocAsyncCtx3 + 124 | 0; //@line 8943
   HEAP32[$354 >> 2] = $70; //@line 8944
   $355 = $ReallocAsyncCtx3 + 128 | 0; //@line 8945
   HEAP32[$355 >> 2] = $72; //@line 8946
   $356 = $ReallocAsyncCtx3 + 132 | 0; //@line 8947
   HEAP32[$356 >> 2] = $74; //@line 8948
   $357 = $ReallocAsyncCtx3 + 136 | 0; //@line 8949
   HEAP32[$357 >> 2] = $76; //@line 8950
   $358 = $ReallocAsyncCtx3 + 140 | 0; //@line 8951
   HEAP32[$358 >> 2] = $78; //@line 8952
   $359 = $ReallocAsyncCtx3 + 144 | 0; //@line 8953
   HEAP32[$359 >> 2] = $80; //@line 8954
   $360 = $ReallocAsyncCtx3 + 148 | 0; //@line 8955
   HEAP32[$360 >> 2] = $82; //@line 8956
   $361 = $ReallocAsyncCtx3 + 152 | 0; //@line 8957
   HEAP32[$361 >> 2] = $84; //@line 8958
   $362 = $ReallocAsyncCtx3 + 156 | 0; //@line 8959
   HEAP32[$362 >> 2] = $86; //@line 8960
   $363 = $ReallocAsyncCtx3 + 160 | 0; //@line 8961
   HEAP32[$363 >> 2] = $88; //@line 8962
   $364 = $ReallocAsyncCtx3 + 164 | 0; //@line 8963
   HEAP32[$364 >> 2] = $90; //@line 8964
   $365 = $ReallocAsyncCtx3 + 168 | 0; //@line 8965
   HEAP32[$365 >> 2] = $92; //@line 8966
   $366 = $ReallocAsyncCtx3 + 172 | 0; //@line 8967
   HEAP32[$366 >> 2] = $94; //@line 8968
   $367 = $ReallocAsyncCtx3 + 176 | 0; //@line 8969
   HEAP32[$367 >> 2] = $96; //@line 8970
   $368 = $ReallocAsyncCtx3 + 180 | 0; //@line 8971
   HEAP32[$368 >> 2] = $98; //@line 8972
   $369 = $ReallocAsyncCtx3 + 184 | 0; //@line 8973
   HEAP32[$369 >> 2] = $100; //@line 8974
   $370 = $ReallocAsyncCtx3 + 188 | 0; //@line 8975
   HEAP32[$370 >> 2] = $102; //@line 8976
   $371 = $ReallocAsyncCtx3 + 192 | 0; //@line 8977
   HEAP32[$371 >> 2] = $104; //@line 8978
   $372 = $ReallocAsyncCtx3 + 196 | 0; //@line 8979
   HEAP32[$372 >> 2] = $106; //@line 8980
   $373 = $ReallocAsyncCtx3 + 200 | 0; //@line 8981
   HEAP32[$373 >> 2] = $108; //@line 8982
   $374 = $ReallocAsyncCtx3 + 204 | 0; //@line 8983
   HEAP32[$374 >> 2] = $112; //@line 8984
   $375 = $ReallocAsyncCtx3 + 208 | 0; //@line 8985
   HEAP32[$375 >> 2] = $114; //@line 8986
   $376 = $ReallocAsyncCtx3 + 212 | 0; //@line 8987
   HEAP32[$376 >> 2] = $116; //@line 8988
   $377 = $ReallocAsyncCtx3 + 216 | 0; //@line 8989
   HEAP32[$377 >> 2] = $118; //@line 8990
   $378 = $ReallocAsyncCtx3 + 220 | 0; //@line 8991
   HEAP32[$378 >> 2] = $120; //@line 8992
   $379 = $ReallocAsyncCtx3 + 224 | 0; //@line 8993
   HEAP32[$379 >> 2] = $122; //@line 8994
   $380 = $ReallocAsyncCtx3 + 228 | 0; //@line 8995
   HEAP32[$380 >> 2] = $124; //@line 8996
   sp = STACKTOP; //@line 8997
   return;
  }
  HEAP8[___async_retval >> 0] = $322; //@line 9001
  ___async_unwind = 0; //@line 9002
  HEAP32[$ReallocAsyncCtx3 >> 2] = 476; //@line 9003
  $323 = $ReallocAsyncCtx3 + 4 | 0; //@line 9004
  HEAP8[$323 >> 0] = $2; //@line 9005
  $324 = $ReallocAsyncCtx3 + 5 | 0; //@line 9006
  HEAP8[$324 >> 0] = $4; //@line 9007
  $325 = $ReallocAsyncCtx3 + 8 | 0; //@line 9008
  HEAP32[$325 >> 2] = $6; //@line 9009
  $326 = $ReallocAsyncCtx3 + 12 | 0; //@line 9010
  HEAP32[$326 >> 2] = $8; //@line 9011
  $327 = $ReallocAsyncCtx3 + 16 | 0; //@line 9012
  HEAP32[$327 >> 2] = $10; //@line 9013
  $328 = $ReallocAsyncCtx3 + 20 | 0; //@line 9014
  HEAP32[$328 >> 2] = $12; //@line 9015
  $329 = $ReallocAsyncCtx3 + 24 | 0; //@line 9016
  HEAP32[$329 >> 2] = $14; //@line 9017
  $330 = $ReallocAsyncCtx3 + 28 | 0; //@line 9018
  HEAP32[$330 >> 2] = $16; //@line 9019
  $331 = $ReallocAsyncCtx3 + 32 | 0; //@line 9020
  HEAP32[$331 >> 2] = $18; //@line 9021
  $332 = $ReallocAsyncCtx3 + 36 | 0; //@line 9022
  HEAP32[$332 >> 2] = $20; //@line 9023
  $333 = $ReallocAsyncCtx3 + 40 | 0; //@line 9024
  HEAP8[$333 >> 0] = $22; //@line 9025
  $334 = $ReallocAsyncCtx3 + 44 | 0; //@line 9026
  HEAP32[$334 >> 2] = $26; //@line 9027
  $335 = $ReallocAsyncCtx3 + 48 | 0; //@line 9028
  HEAP32[$335 >> 2] = $30; //@line 9029
  $336 = $ReallocAsyncCtx3 + 52 | 0; //@line 9030
  HEAP32[$336 >> 2] = $32; //@line 9031
  $337 = $ReallocAsyncCtx3 + 56 | 0; //@line 9032
  HEAP32[$337 >> 2] = $34; //@line 9033
  $338 = $ReallocAsyncCtx3 + 60 | 0; //@line 9034
  HEAP32[$338 >> 2] = $36; //@line 9035
  $339 = $ReallocAsyncCtx3 + 64 | 0; //@line 9036
  HEAP32[$339 >> 2] = $38; //@line 9037
  $340 = $ReallocAsyncCtx3 + 68 | 0; //@line 9038
  HEAP32[$340 >> 2] = $40; //@line 9039
  $341 = $ReallocAsyncCtx3 + 72 | 0; //@line 9040
  HEAP32[$341 >> 2] = $42; //@line 9041
  $342 = $ReallocAsyncCtx3 + 76 | 0; //@line 9042
  HEAP32[$342 >> 2] = $44; //@line 9043
  $343 = $ReallocAsyncCtx3 + 80 | 0; //@line 9044
  HEAP32[$343 >> 2] = $46; //@line 9045
  $344 = $ReallocAsyncCtx3 + 84 | 0; //@line 9046
  HEAP8[$344 >> 0] = $127; //@line 9047
  $345 = $ReallocAsyncCtx3 + 88 | 0; //@line 9048
  HEAP32[$345 >> 2] = $50; //@line 9049
  $346 = $ReallocAsyncCtx3 + 92 | 0; //@line 9050
  HEAP32[$346 >> 2] = $52; //@line 9051
  $347 = $ReallocAsyncCtx3 + 96 | 0; //@line 9052
  HEAP32[$347 >> 2] = $54; //@line 9053
  $348 = $ReallocAsyncCtx3 + 100 | 0; //@line 9054
  HEAP32[$348 >> 2] = $56; //@line 9055
  $349 = $ReallocAsyncCtx3 + 104 | 0; //@line 9056
  HEAP32[$349 >> 2] = $58; //@line 9057
  $350 = $ReallocAsyncCtx3 + 108 | 0; //@line 9058
  HEAP32[$350 >> 2] = $60; //@line 9059
  $351 = $ReallocAsyncCtx3 + 112 | 0; //@line 9060
  HEAP32[$351 >> 2] = $62; //@line 9061
  $352 = $ReallocAsyncCtx3 + 116 | 0; //@line 9062
  HEAP32[$352 >> 2] = $64; //@line 9063
  $353 = $ReallocAsyncCtx3 + 120 | 0; //@line 9064
  HEAP32[$353 >> 2] = $68; //@line 9065
  $354 = $ReallocAsyncCtx3 + 124 | 0; //@line 9066
  HEAP32[$354 >> 2] = $70; //@line 9067
  $355 = $ReallocAsyncCtx3 + 128 | 0; //@line 9068
  HEAP32[$355 >> 2] = $72; //@line 9069
  $356 = $ReallocAsyncCtx3 + 132 | 0; //@line 9070
  HEAP32[$356 >> 2] = $74; //@line 9071
  $357 = $ReallocAsyncCtx3 + 136 | 0; //@line 9072
  HEAP32[$357 >> 2] = $76; //@line 9073
  $358 = $ReallocAsyncCtx3 + 140 | 0; //@line 9074
  HEAP32[$358 >> 2] = $78; //@line 9075
  $359 = $ReallocAsyncCtx3 + 144 | 0; //@line 9076
  HEAP32[$359 >> 2] = $80; //@line 9077
  $360 = $ReallocAsyncCtx3 + 148 | 0; //@line 9078
  HEAP32[$360 >> 2] = $82; //@line 9079
  $361 = $ReallocAsyncCtx3 + 152 | 0; //@line 9080
  HEAP32[$361 >> 2] = $84; //@line 9081
  $362 = $ReallocAsyncCtx3 + 156 | 0; //@line 9082
  HEAP32[$362 >> 2] = $86; //@line 9083
  $363 = $ReallocAsyncCtx3 + 160 | 0; //@line 9084
  HEAP32[$363 >> 2] = $88; //@line 9085
  $364 = $ReallocAsyncCtx3 + 164 | 0; //@line 9086
  HEAP32[$364 >> 2] = $90; //@line 9087
  $365 = $ReallocAsyncCtx3 + 168 | 0; //@line 9088
  HEAP32[$365 >> 2] = $92; //@line 9089
  $366 = $ReallocAsyncCtx3 + 172 | 0; //@line 9090
  HEAP32[$366 >> 2] = $94; //@line 9091
  $367 = $ReallocAsyncCtx3 + 176 | 0; //@line 9092
  HEAP32[$367 >> 2] = $96; //@line 9093
  $368 = $ReallocAsyncCtx3 + 180 | 0; //@line 9094
  HEAP32[$368 >> 2] = $98; //@line 9095
  $369 = $ReallocAsyncCtx3 + 184 | 0; //@line 9096
  HEAP32[$369 >> 2] = $100; //@line 9097
  $370 = $ReallocAsyncCtx3 + 188 | 0; //@line 9098
  HEAP32[$370 >> 2] = $102; //@line 9099
  $371 = $ReallocAsyncCtx3 + 192 | 0; //@line 9100
  HEAP32[$371 >> 2] = $104; //@line 9101
  $372 = $ReallocAsyncCtx3 + 196 | 0; //@line 9102
  HEAP32[$372 >> 2] = $106; //@line 9103
  $373 = $ReallocAsyncCtx3 + 200 | 0; //@line 9104
  HEAP32[$373 >> 2] = $108; //@line 9105
  $374 = $ReallocAsyncCtx3 + 204 | 0; //@line 9106
  HEAP32[$374 >> 2] = $112; //@line 9107
  $375 = $ReallocAsyncCtx3 + 208 | 0; //@line 9108
  HEAP32[$375 >> 2] = $114; //@line 9109
  $376 = $ReallocAsyncCtx3 + 212 | 0; //@line 9110
  HEAP32[$376 >> 2] = $116; //@line 9111
  $377 = $ReallocAsyncCtx3 + 216 | 0; //@line 9112
  HEAP32[$377 >> 2] = $118; //@line 9113
  $378 = $ReallocAsyncCtx3 + 220 | 0; //@line 9114
  HEAP32[$378 >> 2] = $120; //@line 9115
  $379 = $ReallocAsyncCtx3 + 224 | 0; //@line 9116
  HEAP32[$379 >> 2] = $122; //@line 9117
  $380 = $ReallocAsyncCtx3 + 228 | 0; //@line 9118
  HEAP32[$380 >> 2] = $124; //@line 9119
  sp = STACKTOP; //@line 9120
  return;
 } else if ((label | 0) == 18) {
  $400 = HEAP8[$18 + ($127 & 255) >> 0] | 0; //@line 9127
  HEAP32[$42 >> 2] = (HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 9148
  HEAP32[$40 >> 2] = 0; //@line 9149
  $421 = $$0$be + 6 << 24 >> 24; //@line 9150
  HEAP8[$94 >> 0] = HEAP8[$18 + ($$0$be + 5 & 255) >> 0] | 0; //@line 9154
  $427 = HEAP32[(HEAP32[$84 >> 2] | 0) + 8 >> 2] | 0; //@line 9157
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 9158
  $428 = FUNCTION_TABLE_iiii[$427 & 31]($58, $400, $118) | 0; //@line 9159
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 9162
   $429 = $ReallocAsyncCtx4 + 4 | 0; //@line 9163
   HEAP8[$429 >> 0] = $2; //@line 9164
   $430 = $ReallocAsyncCtx4 + 5 | 0; //@line 9165
   HEAP8[$430 >> 0] = $4; //@line 9166
   $431 = $ReallocAsyncCtx4 + 8 | 0; //@line 9167
   HEAP32[$431 >> 2] = $6; //@line 9168
   $432 = $ReallocAsyncCtx4 + 12 | 0; //@line 9169
   HEAP32[$432 >> 2] = $8; //@line 9170
   $433 = $ReallocAsyncCtx4 + 16 | 0; //@line 9171
   HEAP32[$433 >> 2] = $10; //@line 9172
   $434 = $ReallocAsyncCtx4 + 20 | 0; //@line 9173
   HEAP32[$434 >> 2] = $12; //@line 9174
   $435 = $ReallocAsyncCtx4 + 24 | 0; //@line 9175
   HEAP32[$435 >> 2] = $14; //@line 9176
   $436 = $ReallocAsyncCtx4 + 28 | 0; //@line 9177
   HEAP32[$436 >> 2] = $16; //@line 9178
   $437 = $ReallocAsyncCtx4 + 32 | 0; //@line 9179
   HEAP32[$437 >> 2] = $18; //@line 9180
   $438 = $ReallocAsyncCtx4 + 36 | 0; //@line 9181
   HEAP32[$438 >> 2] = $20; //@line 9182
   $439 = $ReallocAsyncCtx4 + 40 | 0; //@line 9183
   HEAP8[$439 >> 0] = $22; //@line 9184
   $440 = $ReallocAsyncCtx4 + 44 | 0; //@line 9185
   HEAP32[$440 >> 2] = $26; //@line 9186
   $441 = $ReallocAsyncCtx4 + 48 | 0; //@line 9187
   HEAP32[$441 >> 2] = $30; //@line 9188
   $442 = $ReallocAsyncCtx4 + 52 | 0; //@line 9189
   HEAP32[$442 >> 2] = $32; //@line 9190
   $443 = $ReallocAsyncCtx4 + 56 | 0; //@line 9191
   HEAP32[$443 >> 2] = $34; //@line 9192
   $444 = $ReallocAsyncCtx4 + 60 | 0; //@line 9193
   HEAP32[$444 >> 2] = $36; //@line 9194
   $445 = $ReallocAsyncCtx4 + 64 | 0; //@line 9195
   HEAP32[$445 >> 2] = $38; //@line 9196
   $446 = $ReallocAsyncCtx4 + 68 | 0; //@line 9197
   HEAP32[$446 >> 2] = $40; //@line 9198
   $447 = $ReallocAsyncCtx4 + 72 | 0; //@line 9199
   HEAP32[$447 >> 2] = $42; //@line 9200
   $448 = $ReallocAsyncCtx4 + 76 | 0; //@line 9201
   HEAP32[$448 >> 2] = $44; //@line 9202
   $449 = $ReallocAsyncCtx4 + 80 | 0; //@line 9203
   HEAP32[$449 >> 2] = $46; //@line 9204
   $450 = $ReallocAsyncCtx4 + 84 | 0; //@line 9205
   HEAP32[$450 >> 2] = $50; //@line 9206
   $451 = $ReallocAsyncCtx4 + 88 | 0; //@line 9207
   HEAP32[$451 >> 2] = $52; //@line 9208
   $452 = $ReallocAsyncCtx4 + 92 | 0; //@line 9209
   HEAP32[$452 >> 2] = $54; //@line 9210
   $453 = $ReallocAsyncCtx4 + 96 | 0; //@line 9211
   HEAP32[$453 >> 2] = $56; //@line 9212
   $454 = $ReallocAsyncCtx4 + 100 | 0; //@line 9213
   HEAP32[$454 >> 2] = $58; //@line 9214
   $455 = $ReallocAsyncCtx4 + 104 | 0; //@line 9215
   HEAP32[$455 >> 2] = $60; //@line 9216
   $456 = $ReallocAsyncCtx4 + 108 | 0; //@line 9217
   HEAP32[$456 >> 2] = $62; //@line 9218
   $457 = $ReallocAsyncCtx4 + 112 | 0; //@line 9219
   HEAP32[$457 >> 2] = $64; //@line 9220
   $458 = $ReallocAsyncCtx4 + 116 | 0; //@line 9221
   HEAP32[$458 >> 2] = $68; //@line 9222
   $459 = $ReallocAsyncCtx4 + 120 | 0; //@line 9223
   HEAP32[$459 >> 2] = $70; //@line 9224
   $460 = $ReallocAsyncCtx4 + 124 | 0; //@line 9225
   HEAP32[$460 >> 2] = $72; //@line 9226
   $461 = $ReallocAsyncCtx4 + 128 | 0; //@line 9227
   HEAP32[$461 >> 2] = $74; //@line 9228
   $462 = $ReallocAsyncCtx4 + 132 | 0; //@line 9229
   HEAP32[$462 >> 2] = $76; //@line 9230
   $463 = $ReallocAsyncCtx4 + 136 | 0; //@line 9231
   HEAP32[$463 >> 2] = $78; //@line 9232
   $464 = $ReallocAsyncCtx4 + 140 | 0; //@line 9233
   HEAP32[$464 >> 2] = $80; //@line 9234
   $465 = $ReallocAsyncCtx4 + 144 | 0; //@line 9235
   HEAP32[$465 >> 2] = $82; //@line 9236
   $466 = $ReallocAsyncCtx4 + 148 | 0; //@line 9237
   HEAP32[$466 >> 2] = $84; //@line 9238
   $467 = $ReallocAsyncCtx4 + 152 | 0; //@line 9239
   HEAP32[$467 >> 2] = $86; //@line 9240
   $468 = $ReallocAsyncCtx4 + 156 | 0; //@line 9241
   HEAP32[$468 >> 2] = $88; //@line 9242
   $469 = $ReallocAsyncCtx4 + 160 | 0; //@line 9243
   HEAP32[$469 >> 2] = $90; //@line 9244
   $470 = $ReallocAsyncCtx4 + 164 | 0; //@line 9245
   HEAP32[$470 >> 2] = $92; //@line 9246
   $471 = $ReallocAsyncCtx4 + 168 | 0; //@line 9247
   HEAP32[$471 >> 2] = $94; //@line 9248
   $472 = $ReallocAsyncCtx4 + 172 | 0; //@line 9249
   HEAP32[$472 >> 2] = $96; //@line 9250
   $473 = $ReallocAsyncCtx4 + 176 | 0; //@line 9251
   HEAP8[$473 >> 0] = $421; //@line 9252
   $474 = $ReallocAsyncCtx4 + 180 | 0; //@line 9253
   HEAP32[$474 >> 2] = $98; //@line 9254
   $475 = $ReallocAsyncCtx4 + 184 | 0; //@line 9255
   HEAP32[$475 >> 2] = $100; //@line 9256
   $476 = $ReallocAsyncCtx4 + 188 | 0; //@line 9257
   HEAP32[$476 >> 2] = $102; //@line 9258
   $477 = $ReallocAsyncCtx4 + 192 | 0; //@line 9259
   HEAP32[$477 >> 2] = $104; //@line 9260
   $478 = $ReallocAsyncCtx4 + 196 | 0; //@line 9261
   HEAP32[$478 >> 2] = $106; //@line 9262
   $479 = $ReallocAsyncCtx4 + 200 | 0; //@line 9263
   HEAP32[$479 >> 2] = $108; //@line 9264
   $480 = $ReallocAsyncCtx4 + 204 | 0; //@line 9265
   HEAP32[$480 >> 2] = $112; //@line 9266
   $481 = $ReallocAsyncCtx4 + 208 | 0; //@line 9267
   HEAP32[$481 >> 2] = $114; //@line 9268
   $482 = $ReallocAsyncCtx4 + 212 | 0; //@line 9269
   HEAP32[$482 >> 2] = $116; //@line 9270
   $483 = $ReallocAsyncCtx4 + 216 | 0; //@line 9271
   HEAP32[$483 >> 2] = $118; //@line 9272
   $484 = $ReallocAsyncCtx4 + 220 | 0; //@line 9273
   HEAP32[$484 >> 2] = $120; //@line 9274
   $485 = $ReallocAsyncCtx4 + 224 | 0; //@line 9275
   HEAP32[$485 >> 2] = $122; //@line 9276
   $486 = $ReallocAsyncCtx4 + 228 | 0; //@line 9277
   HEAP32[$486 >> 2] = $124; //@line 9278
   sp = STACKTOP; //@line 9279
   return;
  }
  HEAP8[___async_retval >> 0] = $428; //@line 9283
  ___async_unwind = 0; //@line 9284
  HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 9285
  $429 = $ReallocAsyncCtx4 + 4 | 0; //@line 9286
  HEAP8[$429 >> 0] = $2; //@line 9287
  $430 = $ReallocAsyncCtx4 + 5 | 0; //@line 9288
  HEAP8[$430 >> 0] = $4; //@line 9289
  $431 = $ReallocAsyncCtx4 + 8 | 0; //@line 9290
  HEAP32[$431 >> 2] = $6; //@line 9291
  $432 = $ReallocAsyncCtx4 + 12 | 0; //@line 9292
  HEAP32[$432 >> 2] = $8; //@line 9293
  $433 = $ReallocAsyncCtx4 + 16 | 0; //@line 9294
  HEAP32[$433 >> 2] = $10; //@line 9295
  $434 = $ReallocAsyncCtx4 + 20 | 0; //@line 9296
  HEAP32[$434 >> 2] = $12; //@line 9297
  $435 = $ReallocAsyncCtx4 + 24 | 0; //@line 9298
  HEAP32[$435 >> 2] = $14; //@line 9299
  $436 = $ReallocAsyncCtx4 + 28 | 0; //@line 9300
  HEAP32[$436 >> 2] = $16; //@line 9301
  $437 = $ReallocAsyncCtx4 + 32 | 0; //@line 9302
  HEAP32[$437 >> 2] = $18; //@line 9303
  $438 = $ReallocAsyncCtx4 + 36 | 0; //@line 9304
  HEAP32[$438 >> 2] = $20; //@line 9305
  $439 = $ReallocAsyncCtx4 + 40 | 0; //@line 9306
  HEAP8[$439 >> 0] = $22; //@line 9307
  $440 = $ReallocAsyncCtx4 + 44 | 0; //@line 9308
  HEAP32[$440 >> 2] = $26; //@line 9309
  $441 = $ReallocAsyncCtx4 + 48 | 0; //@line 9310
  HEAP32[$441 >> 2] = $30; //@line 9311
  $442 = $ReallocAsyncCtx4 + 52 | 0; //@line 9312
  HEAP32[$442 >> 2] = $32; //@line 9313
  $443 = $ReallocAsyncCtx4 + 56 | 0; //@line 9314
  HEAP32[$443 >> 2] = $34; //@line 9315
  $444 = $ReallocAsyncCtx4 + 60 | 0; //@line 9316
  HEAP32[$444 >> 2] = $36; //@line 9317
  $445 = $ReallocAsyncCtx4 + 64 | 0; //@line 9318
  HEAP32[$445 >> 2] = $38; //@line 9319
  $446 = $ReallocAsyncCtx4 + 68 | 0; //@line 9320
  HEAP32[$446 >> 2] = $40; //@line 9321
  $447 = $ReallocAsyncCtx4 + 72 | 0; //@line 9322
  HEAP32[$447 >> 2] = $42; //@line 9323
  $448 = $ReallocAsyncCtx4 + 76 | 0; //@line 9324
  HEAP32[$448 >> 2] = $44; //@line 9325
  $449 = $ReallocAsyncCtx4 + 80 | 0; //@line 9326
  HEAP32[$449 >> 2] = $46; //@line 9327
  $450 = $ReallocAsyncCtx4 + 84 | 0; //@line 9328
  HEAP32[$450 >> 2] = $50; //@line 9329
  $451 = $ReallocAsyncCtx4 + 88 | 0; //@line 9330
  HEAP32[$451 >> 2] = $52; //@line 9331
  $452 = $ReallocAsyncCtx4 + 92 | 0; //@line 9332
  HEAP32[$452 >> 2] = $54; //@line 9333
  $453 = $ReallocAsyncCtx4 + 96 | 0; //@line 9334
  HEAP32[$453 >> 2] = $56; //@line 9335
  $454 = $ReallocAsyncCtx4 + 100 | 0; //@line 9336
  HEAP32[$454 >> 2] = $58; //@line 9337
  $455 = $ReallocAsyncCtx4 + 104 | 0; //@line 9338
  HEAP32[$455 >> 2] = $60; //@line 9339
  $456 = $ReallocAsyncCtx4 + 108 | 0; //@line 9340
  HEAP32[$456 >> 2] = $62; //@line 9341
  $457 = $ReallocAsyncCtx4 + 112 | 0; //@line 9342
  HEAP32[$457 >> 2] = $64; //@line 9343
  $458 = $ReallocAsyncCtx4 + 116 | 0; //@line 9344
  HEAP32[$458 >> 2] = $68; //@line 9345
  $459 = $ReallocAsyncCtx4 + 120 | 0; //@line 9346
  HEAP32[$459 >> 2] = $70; //@line 9347
  $460 = $ReallocAsyncCtx4 + 124 | 0; //@line 9348
  HEAP32[$460 >> 2] = $72; //@line 9349
  $461 = $ReallocAsyncCtx4 + 128 | 0; //@line 9350
  HEAP32[$461 >> 2] = $74; //@line 9351
  $462 = $ReallocAsyncCtx4 + 132 | 0; //@line 9352
  HEAP32[$462 >> 2] = $76; //@line 9353
  $463 = $ReallocAsyncCtx4 + 136 | 0; //@line 9354
  HEAP32[$463 >> 2] = $78; //@line 9355
  $464 = $ReallocAsyncCtx4 + 140 | 0; //@line 9356
  HEAP32[$464 >> 2] = $80; //@line 9357
  $465 = $ReallocAsyncCtx4 + 144 | 0; //@line 9358
  HEAP32[$465 >> 2] = $82; //@line 9359
  $466 = $ReallocAsyncCtx4 + 148 | 0; //@line 9360
  HEAP32[$466 >> 2] = $84; //@line 9361
  $467 = $ReallocAsyncCtx4 + 152 | 0; //@line 9362
  HEAP32[$467 >> 2] = $86; //@line 9363
  $468 = $ReallocAsyncCtx4 + 156 | 0; //@line 9364
  HEAP32[$468 >> 2] = $88; //@line 9365
  $469 = $ReallocAsyncCtx4 + 160 | 0; //@line 9366
  HEAP32[$469 >> 2] = $90; //@line 9367
  $470 = $ReallocAsyncCtx4 + 164 | 0; //@line 9368
  HEAP32[$470 >> 2] = $92; //@line 9369
  $471 = $ReallocAsyncCtx4 + 168 | 0; //@line 9370
  HEAP32[$471 >> 2] = $94; //@line 9371
  $472 = $ReallocAsyncCtx4 + 172 | 0; //@line 9372
  HEAP32[$472 >> 2] = $96; //@line 9373
  $473 = $ReallocAsyncCtx4 + 176 | 0; //@line 9374
  HEAP8[$473 >> 0] = $421; //@line 9375
  $474 = $ReallocAsyncCtx4 + 180 | 0; //@line 9376
  HEAP32[$474 >> 2] = $98; //@line 9377
  $475 = $ReallocAsyncCtx4 + 184 | 0; //@line 9378
  HEAP32[$475 >> 2] = $100; //@line 9379
  $476 = $ReallocAsyncCtx4 + 188 | 0; //@line 9380
  HEAP32[$476 >> 2] = $102; //@line 9381
  $477 = $ReallocAsyncCtx4 + 192 | 0; //@line 9382
  HEAP32[$477 >> 2] = $104; //@line 9383
  $478 = $ReallocAsyncCtx4 + 196 | 0; //@line 9384
  HEAP32[$478 >> 2] = $106; //@line 9385
  $479 = $ReallocAsyncCtx4 + 200 | 0; //@line 9386
  HEAP32[$479 >> 2] = $108; //@line 9387
  $480 = $ReallocAsyncCtx4 + 204 | 0; //@line 9388
  HEAP32[$480 >> 2] = $112; //@line 9389
  $481 = $ReallocAsyncCtx4 + 208 | 0; //@line 9390
  HEAP32[$481 >> 2] = $114; //@line 9391
  $482 = $ReallocAsyncCtx4 + 212 | 0; //@line 9392
  HEAP32[$482 >> 2] = $116; //@line 9393
  $483 = $ReallocAsyncCtx4 + 216 | 0; //@line 9394
  HEAP32[$483 >> 2] = $118; //@line 9395
  $484 = $ReallocAsyncCtx4 + 220 | 0; //@line 9396
  HEAP32[$484 >> 2] = $120; //@line 9397
  $485 = $ReallocAsyncCtx4 + 224 | 0; //@line 9398
  HEAP32[$485 >> 2] = $122; //@line 9399
  $486 = $ReallocAsyncCtx4 + 228 | 0; //@line 9400
  HEAP32[$486 >> 2] = $124; //@line 9401
  sp = STACKTOP; //@line 9402
  return;
 } else if ((label | 0) == 24) {
  $507 = $$0$be + 2 << 24 >> 24; //@line 9406
  $511 = HEAPU8[$18 + ($127 & 255) >> 0] | 0; //@line 9410
  $513 = $511 >>> 5 & 1; //@line 9413
  $515 = $511 >>> 4 & 1; //@line 9416
  $518 = HEAP32[(HEAP32[$120 >> 2] | 0) + 44 >> 2] | 0; //@line 9419
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 9420
  $519 = FUNCTION_TABLE_iiii[$518 & 31]($58, $515, $513) | 0; //@line 9421
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 478; //@line 9424
   $520 = $ReallocAsyncCtx5 + 4 | 0; //@line 9425
   HEAP8[$520 >> 0] = $2; //@line 9426
   $521 = $ReallocAsyncCtx5 + 5 | 0; //@line 9427
   HEAP8[$521 >> 0] = $4; //@line 9428
   $522 = $ReallocAsyncCtx5 + 8 | 0; //@line 9429
   HEAP32[$522 >> 2] = $6; //@line 9430
   $523 = $ReallocAsyncCtx5 + 12 | 0; //@line 9431
   HEAP32[$523 >> 2] = $8; //@line 9432
   $524 = $ReallocAsyncCtx5 + 16 | 0; //@line 9433
   HEAP32[$524 >> 2] = $10; //@line 9434
   $525 = $ReallocAsyncCtx5 + 20 | 0; //@line 9435
   HEAP32[$525 >> 2] = $12; //@line 9436
   $526 = $ReallocAsyncCtx5 + 24 | 0; //@line 9437
   HEAP32[$526 >> 2] = $14; //@line 9438
   $527 = $ReallocAsyncCtx5 + 28 | 0; //@line 9439
   HEAP32[$527 >> 2] = $16; //@line 9440
   $528 = $ReallocAsyncCtx5 + 32 | 0; //@line 9441
   HEAP32[$528 >> 2] = $18; //@line 9442
   $529 = $ReallocAsyncCtx5 + 36 | 0; //@line 9443
   HEAP32[$529 >> 2] = $20; //@line 9444
   $530 = $ReallocAsyncCtx5 + 40 | 0; //@line 9445
   HEAP8[$530 >> 0] = $22; //@line 9446
   $531 = $ReallocAsyncCtx5 + 44 | 0; //@line 9447
   HEAP32[$531 >> 2] = $$0107$be; //@line 9448
   $532 = $ReallocAsyncCtx5 + 48 | 0; //@line 9449
   HEAP32[$532 >> 2] = $26; //@line 9450
   $533 = $ReallocAsyncCtx5 + 52 | 0; //@line 9451
   HEAP32[$533 >> 2] = $511; //@line 9452
   $534 = $ReallocAsyncCtx5 + 56 | 0; //@line 9453
   HEAP32[$534 >> 2] = $30; //@line 9454
   $535 = $ReallocAsyncCtx5 + 60 | 0; //@line 9455
   HEAP32[$535 >> 2] = $32; //@line 9456
   $536 = $ReallocAsyncCtx5 + 64 | 0; //@line 9457
   HEAP32[$536 >> 2] = $34; //@line 9458
   $537 = $ReallocAsyncCtx5 + 68 | 0; //@line 9459
   HEAP32[$537 >> 2] = $36; //@line 9460
   $538 = $ReallocAsyncCtx5 + 72 | 0; //@line 9461
   HEAP32[$538 >> 2] = $38; //@line 9462
   $539 = $ReallocAsyncCtx5 + 76 | 0; //@line 9463
   HEAP32[$539 >> 2] = $40; //@line 9464
   $540 = $ReallocAsyncCtx5 + 80 | 0; //@line 9465
   HEAP32[$540 >> 2] = $42; //@line 9466
   $541 = $ReallocAsyncCtx5 + 84 | 0; //@line 9467
   HEAP32[$541 >> 2] = $44; //@line 9468
   $542 = $ReallocAsyncCtx5 + 88 | 0; //@line 9469
   HEAP32[$542 >> 2] = $46; //@line 9470
   $543 = $ReallocAsyncCtx5 + 92 | 0; //@line 9471
   HEAP8[$543 >> 0] = $507; //@line 9472
   $544 = $ReallocAsyncCtx5 + 96 | 0; //@line 9473
   HEAP32[$544 >> 2] = $50; //@line 9474
   $545 = $ReallocAsyncCtx5 + 100 | 0; //@line 9475
   HEAP32[$545 >> 2] = $52; //@line 9476
   $546 = $ReallocAsyncCtx5 + 104 | 0; //@line 9477
   HEAP32[$546 >> 2] = $54; //@line 9478
   $547 = $ReallocAsyncCtx5 + 108 | 0; //@line 9479
   HEAP32[$547 >> 2] = $56; //@line 9480
   $548 = $ReallocAsyncCtx5 + 112 | 0; //@line 9481
   HEAP32[$548 >> 2] = $58; //@line 9482
   $549 = $ReallocAsyncCtx5 + 116 | 0; //@line 9483
   HEAP32[$549 >> 2] = $60; //@line 9484
   $550 = $ReallocAsyncCtx5 + 120 | 0; //@line 9485
   HEAP32[$550 >> 2] = $62; //@line 9486
   $551 = $ReallocAsyncCtx5 + 124 | 0; //@line 9487
   HEAP32[$551 >> 2] = $64; //@line 9488
   $552 = $ReallocAsyncCtx5 + 128 | 0; //@line 9489
   HEAP8[$552 >> 0] = $513; //@line 9490
   $553 = $ReallocAsyncCtx5 + 132 | 0; //@line 9491
   HEAP32[$553 >> 2] = $68; //@line 9492
   $554 = $ReallocAsyncCtx5 + 136 | 0; //@line 9493
   HEAP32[$554 >> 2] = $70; //@line 9494
   $555 = $ReallocAsyncCtx5 + 140 | 0; //@line 9495
   HEAP32[$555 >> 2] = $72; //@line 9496
   $556 = $ReallocAsyncCtx5 + 144 | 0; //@line 9497
   HEAP32[$556 >> 2] = $74; //@line 9498
   $557 = $ReallocAsyncCtx5 + 148 | 0; //@line 9499
   HEAP32[$557 >> 2] = $76; //@line 9500
   $558 = $ReallocAsyncCtx5 + 152 | 0; //@line 9501
   HEAP32[$558 >> 2] = $78; //@line 9502
   $559 = $ReallocAsyncCtx5 + 156 | 0; //@line 9503
   HEAP32[$559 >> 2] = $80; //@line 9504
   $560 = $ReallocAsyncCtx5 + 160 | 0; //@line 9505
   HEAP32[$560 >> 2] = $82; //@line 9506
   $561 = $ReallocAsyncCtx5 + 164 | 0; //@line 9507
   HEAP32[$561 >> 2] = $84; //@line 9508
   $562 = $ReallocAsyncCtx5 + 168 | 0; //@line 9509
   HEAP32[$562 >> 2] = $86; //@line 9510
   $563 = $ReallocAsyncCtx5 + 172 | 0; //@line 9511
   HEAP32[$563 >> 2] = $88; //@line 9512
   $564 = $ReallocAsyncCtx5 + 176 | 0; //@line 9513
   HEAP32[$564 >> 2] = $90; //@line 9514
   $565 = $ReallocAsyncCtx5 + 180 | 0; //@line 9515
   HEAP32[$565 >> 2] = $92; //@line 9516
   $566 = $ReallocAsyncCtx5 + 184 | 0; //@line 9517
   HEAP32[$566 >> 2] = $94; //@line 9518
   $567 = $ReallocAsyncCtx5 + 188 | 0; //@line 9519
   HEAP32[$567 >> 2] = $96; //@line 9520
   $568 = $ReallocAsyncCtx5 + 192 | 0; //@line 9521
   HEAP32[$568 >> 2] = $98; //@line 9522
   $569 = $ReallocAsyncCtx5 + 196 | 0; //@line 9523
   HEAP32[$569 >> 2] = $100; //@line 9524
   $570 = $ReallocAsyncCtx5 + 200 | 0; //@line 9525
   HEAP32[$570 >> 2] = $102; //@line 9526
   $571 = $ReallocAsyncCtx5 + 204 | 0; //@line 9527
   HEAP32[$571 >> 2] = $104; //@line 9528
   $572 = $ReallocAsyncCtx5 + 208 | 0; //@line 9529
   HEAP32[$572 >> 2] = $106; //@line 9530
   $573 = $ReallocAsyncCtx5 + 212 | 0; //@line 9531
   HEAP32[$573 >> 2] = $108; //@line 9532
   $574 = $ReallocAsyncCtx5 + 216 | 0; //@line 9533
   HEAP8[$574 >> 0] = $515; //@line 9534
   $575 = $ReallocAsyncCtx5 + 220 | 0; //@line 9535
   HEAP32[$575 >> 2] = $112; //@line 9536
   $576 = $ReallocAsyncCtx5 + 224 | 0; //@line 9537
   HEAP32[$576 >> 2] = $114; //@line 9538
   $577 = $ReallocAsyncCtx5 + 228 | 0; //@line 9539
   HEAP32[$577 >> 2] = $116; //@line 9540
   $578 = $ReallocAsyncCtx5 + 232 | 0; //@line 9541
   HEAP32[$578 >> 2] = $118; //@line 9542
   $579 = $ReallocAsyncCtx5 + 236 | 0; //@line 9543
   HEAP32[$579 >> 2] = $120; //@line 9544
   $580 = $ReallocAsyncCtx5 + 240 | 0; //@line 9545
   HEAP32[$580 >> 2] = $122; //@line 9546
   $581 = $ReallocAsyncCtx5 + 244 | 0; //@line 9547
   HEAP32[$581 >> 2] = $124; //@line 9548
   sp = STACKTOP; //@line 9549
   return;
  }
  HEAP8[___async_retval >> 0] = $519 & 1; //@line 9554
  ___async_unwind = 0; //@line 9555
  HEAP32[$ReallocAsyncCtx5 >> 2] = 478; //@line 9556
  $520 = $ReallocAsyncCtx5 + 4 | 0; //@line 9557
  HEAP8[$520 >> 0] = $2; //@line 9558
  $521 = $ReallocAsyncCtx5 + 5 | 0; //@line 9559
  HEAP8[$521 >> 0] = $4; //@line 9560
  $522 = $ReallocAsyncCtx5 + 8 | 0; //@line 9561
  HEAP32[$522 >> 2] = $6; //@line 9562
  $523 = $ReallocAsyncCtx5 + 12 | 0; //@line 9563
  HEAP32[$523 >> 2] = $8; //@line 9564
  $524 = $ReallocAsyncCtx5 + 16 | 0; //@line 9565
  HEAP32[$524 >> 2] = $10; //@line 9566
  $525 = $ReallocAsyncCtx5 + 20 | 0; //@line 9567
  HEAP32[$525 >> 2] = $12; //@line 9568
  $526 = $ReallocAsyncCtx5 + 24 | 0; //@line 9569
  HEAP32[$526 >> 2] = $14; //@line 9570
  $527 = $ReallocAsyncCtx5 + 28 | 0; //@line 9571
  HEAP32[$527 >> 2] = $16; //@line 9572
  $528 = $ReallocAsyncCtx5 + 32 | 0; //@line 9573
  HEAP32[$528 >> 2] = $18; //@line 9574
  $529 = $ReallocAsyncCtx5 + 36 | 0; //@line 9575
  HEAP32[$529 >> 2] = $20; //@line 9576
  $530 = $ReallocAsyncCtx5 + 40 | 0; //@line 9577
  HEAP8[$530 >> 0] = $22; //@line 9578
  $531 = $ReallocAsyncCtx5 + 44 | 0; //@line 9579
  HEAP32[$531 >> 2] = $$0107$be; //@line 9580
  $532 = $ReallocAsyncCtx5 + 48 | 0; //@line 9581
  HEAP32[$532 >> 2] = $26; //@line 9582
  $533 = $ReallocAsyncCtx5 + 52 | 0; //@line 9583
  HEAP32[$533 >> 2] = $511; //@line 9584
  $534 = $ReallocAsyncCtx5 + 56 | 0; //@line 9585
  HEAP32[$534 >> 2] = $30; //@line 9586
  $535 = $ReallocAsyncCtx5 + 60 | 0; //@line 9587
  HEAP32[$535 >> 2] = $32; //@line 9588
  $536 = $ReallocAsyncCtx5 + 64 | 0; //@line 9589
  HEAP32[$536 >> 2] = $34; //@line 9590
  $537 = $ReallocAsyncCtx5 + 68 | 0; //@line 9591
  HEAP32[$537 >> 2] = $36; //@line 9592
  $538 = $ReallocAsyncCtx5 + 72 | 0; //@line 9593
  HEAP32[$538 >> 2] = $38; //@line 9594
  $539 = $ReallocAsyncCtx5 + 76 | 0; //@line 9595
  HEAP32[$539 >> 2] = $40; //@line 9596
  $540 = $ReallocAsyncCtx5 + 80 | 0; //@line 9597
  HEAP32[$540 >> 2] = $42; //@line 9598
  $541 = $ReallocAsyncCtx5 + 84 | 0; //@line 9599
  HEAP32[$541 >> 2] = $44; //@line 9600
  $542 = $ReallocAsyncCtx5 + 88 | 0; //@line 9601
  HEAP32[$542 >> 2] = $46; //@line 9602
  $543 = $ReallocAsyncCtx5 + 92 | 0; //@line 9603
  HEAP8[$543 >> 0] = $507; //@line 9604
  $544 = $ReallocAsyncCtx5 + 96 | 0; //@line 9605
  HEAP32[$544 >> 2] = $50; //@line 9606
  $545 = $ReallocAsyncCtx5 + 100 | 0; //@line 9607
  HEAP32[$545 >> 2] = $52; //@line 9608
  $546 = $ReallocAsyncCtx5 + 104 | 0; //@line 9609
  HEAP32[$546 >> 2] = $54; //@line 9610
  $547 = $ReallocAsyncCtx5 + 108 | 0; //@line 9611
  HEAP32[$547 >> 2] = $56; //@line 9612
  $548 = $ReallocAsyncCtx5 + 112 | 0; //@line 9613
  HEAP32[$548 >> 2] = $58; //@line 9614
  $549 = $ReallocAsyncCtx5 + 116 | 0; //@line 9615
  HEAP32[$549 >> 2] = $60; //@line 9616
  $550 = $ReallocAsyncCtx5 + 120 | 0; //@line 9617
  HEAP32[$550 >> 2] = $62; //@line 9618
  $551 = $ReallocAsyncCtx5 + 124 | 0; //@line 9619
  HEAP32[$551 >> 2] = $64; //@line 9620
  $552 = $ReallocAsyncCtx5 + 128 | 0; //@line 9621
  HEAP8[$552 >> 0] = $513; //@line 9622
  $553 = $ReallocAsyncCtx5 + 132 | 0; //@line 9623
  HEAP32[$553 >> 2] = $68; //@line 9624
  $554 = $ReallocAsyncCtx5 + 136 | 0; //@line 9625
  HEAP32[$554 >> 2] = $70; //@line 9626
  $555 = $ReallocAsyncCtx5 + 140 | 0; //@line 9627
  HEAP32[$555 >> 2] = $72; //@line 9628
  $556 = $ReallocAsyncCtx5 + 144 | 0; //@line 9629
  HEAP32[$556 >> 2] = $74; //@line 9630
  $557 = $ReallocAsyncCtx5 + 148 | 0; //@line 9631
  HEAP32[$557 >> 2] = $76; //@line 9632
  $558 = $ReallocAsyncCtx5 + 152 | 0; //@line 9633
  HEAP32[$558 >> 2] = $78; //@line 9634
  $559 = $ReallocAsyncCtx5 + 156 | 0; //@line 9635
  HEAP32[$559 >> 2] = $80; //@line 9636
  $560 = $ReallocAsyncCtx5 + 160 | 0; //@line 9637
  HEAP32[$560 >> 2] = $82; //@line 9638
  $561 = $ReallocAsyncCtx5 + 164 | 0; //@line 9639
  HEAP32[$561 >> 2] = $84; //@line 9640
  $562 = $ReallocAsyncCtx5 + 168 | 0; //@line 9641
  HEAP32[$562 >> 2] = $86; //@line 9642
  $563 = $ReallocAsyncCtx5 + 172 | 0; //@line 9643
  HEAP32[$563 >> 2] = $88; //@line 9644
  $564 = $ReallocAsyncCtx5 + 176 | 0; //@line 9645
  HEAP32[$564 >> 2] = $90; //@line 9646
  $565 = $ReallocAsyncCtx5 + 180 | 0; //@line 9647
  HEAP32[$565 >> 2] = $92; //@line 9648
  $566 = $ReallocAsyncCtx5 + 184 | 0; //@line 9649
  HEAP32[$566 >> 2] = $94; //@line 9650
  $567 = $ReallocAsyncCtx5 + 188 | 0; //@line 9651
  HEAP32[$567 >> 2] = $96; //@line 9652
  $568 = $ReallocAsyncCtx5 + 192 | 0; //@line 9653
  HEAP32[$568 >> 2] = $98; //@line 9654
  $569 = $ReallocAsyncCtx5 + 196 | 0; //@line 9655
  HEAP32[$569 >> 2] = $100; //@line 9656
  $570 = $ReallocAsyncCtx5 + 200 | 0; //@line 9657
  HEAP32[$570 >> 2] = $102; //@line 9658
  $571 = $ReallocAsyncCtx5 + 204 | 0; //@line 9659
  HEAP32[$571 >> 2] = $104; //@line 9660
  $572 = $ReallocAsyncCtx5 + 208 | 0; //@line 9661
  HEAP32[$572 >> 2] = $106; //@line 9662
  $573 = $ReallocAsyncCtx5 + 212 | 0; //@line 9663
  HEAP32[$573 >> 2] = $108; //@line 9664
  $574 = $ReallocAsyncCtx5 + 216 | 0; //@line 9665
  HEAP8[$574 >> 0] = $515; //@line 9666
  $575 = $ReallocAsyncCtx5 + 220 | 0; //@line 9667
  HEAP32[$575 >> 2] = $112; //@line 9668
  $576 = $ReallocAsyncCtx5 + 224 | 0; //@line 9669
  HEAP32[$576 >> 2] = $114; //@line 9670
  $577 = $ReallocAsyncCtx5 + 228 | 0; //@line 9671
  HEAP32[$577 >> 2] = $116; //@line 9672
  $578 = $ReallocAsyncCtx5 + 232 | 0; //@line 9673
  HEAP32[$578 >> 2] = $118; //@line 9674
  $579 = $ReallocAsyncCtx5 + 236 | 0; //@line 9675
  HEAP32[$579 >> 2] = $120; //@line 9676
  $580 = $ReallocAsyncCtx5 + 240 | 0; //@line 9677
  HEAP32[$580 >> 2] = $122; //@line 9678
  $581 = $ReallocAsyncCtx5 + 244 | 0; //@line 9679
  HEAP32[$581 >> 2] = $124; //@line 9680
  sp = STACKTOP; //@line 9681
  return;
 } else if ((label | 0) == 30) {
  $598 = HEAP8[$18 + ($127 & 255) >> 0] | 0; //@line 9688
  $611 = $$0$be + 5 << 24 >> 24; //@line 9701
  $618 = (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 9708
  $621 = HEAP32[(HEAP32[$100 >> 2] | 0) + 48 >> 2] | 0; //@line 9711
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 9712
  $622 = FUNCTION_TABLE_iiii[$621 & 31]($58, $598, $618) | 0; //@line 9713
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 479; //@line 9716
   $623 = $ReallocAsyncCtx6 + 4 | 0; //@line 9717
   HEAP8[$623 >> 0] = $2; //@line 9718
   $624 = $ReallocAsyncCtx6 + 5 | 0; //@line 9719
   HEAP8[$624 >> 0] = $4; //@line 9720
   $625 = $ReallocAsyncCtx6 + 8 | 0; //@line 9721
   HEAP32[$625 >> 2] = $6; //@line 9722
   $626 = $ReallocAsyncCtx6 + 12 | 0; //@line 9723
   HEAP32[$626 >> 2] = $8; //@line 9724
   $627 = $ReallocAsyncCtx6 + 16 | 0; //@line 9725
   HEAP32[$627 >> 2] = $10; //@line 9726
   $628 = $ReallocAsyncCtx6 + 20 | 0; //@line 9727
   HEAP32[$628 >> 2] = $12; //@line 9728
   $629 = $ReallocAsyncCtx6 + 24 | 0; //@line 9729
   HEAP32[$629 >> 2] = $14; //@line 9730
   $630 = $ReallocAsyncCtx6 + 28 | 0; //@line 9731
   HEAP32[$630 >> 2] = $16; //@line 9732
   $631 = $ReallocAsyncCtx6 + 32 | 0; //@line 9733
   HEAP32[$631 >> 2] = $18; //@line 9734
   $632 = $ReallocAsyncCtx6 + 36 | 0; //@line 9735
   HEAP32[$632 >> 2] = $20; //@line 9736
   $633 = $ReallocAsyncCtx6 + 40 | 0; //@line 9737
   HEAP8[$633 >> 0] = $22; //@line 9738
   $634 = $ReallocAsyncCtx6 + 44 | 0; //@line 9739
   HEAP32[$634 >> 2] = $26; //@line 9740
   $635 = $ReallocAsyncCtx6 + 48 | 0; //@line 9741
   HEAP32[$635 >> 2] = $30; //@line 9742
   $636 = $ReallocAsyncCtx6 + 52 | 0; //@line 9743
   HEAP8[$636 >> 0] = $611; //@line 9744
   $637 = $ReallocAsyncCtx6 + 56 | 0; //@line 9745
   HEAP32[$637 >> 2] = $32; //@line 9746
   $638 = $ReallocAsyncCtx6 + 60 | 0; //@line 9747
   HEAP32[$638 >> 2] = $34; //@line 9748
   $639 = $ReallocAsyncCtx6 + 64 | 0; //@line 9749
   HEAP32[$639 >> 2] = $36; //@line 9750
   $640 = $ReallocAsyncCtx6 + 68 | 0; //@line 9751
   HEAP32[$640 >> 2] = $38; //@line 9752
   $641 = $ReallocAsyncCtx6 + 72 | 0; //@line 9753
   HEAP32[$641 >> 2] = $40; //@line 9754
   $642 = $ReallocAsyncCtx6 + 76 | 0; //@line 9755
   HEAP32[$642 >> 2] = $42; //@line 9756
   $643 = $ReallocAsyncCtx6 + 80 | 0; //@line 9757
   HEAP32[$643 >> 2] = $44; //@line 9758
   $644 = $ReallocAsyncCtx6 + 84 | 0; //@line 9759
   HEAP32[$644 >> 2] = $46; //@line 9760
   $645 = $ReallocAsyncCtx6 + 88 | 0; //@line 9761
   HEAP32[$645 >> 2] = $50; //@line 9762
   $646 = $ReallocAsyncCtx6 + 92 | 0; //@line 9763
   HEAP32[$646 >> 2] = $52; //@line 9764
   $647 = $ReallocAsyncCtx6 + 96 | 0; //@line 9765
   HEAP32[$647 >> 2] = $54; //@line 9766
   $648 = $ReallocAsyncCtx6 + 100 | 0; //@line 9767
   HEAP32[$648 >> 2] = $56; //@line 9768
   $649 = $ReallocAsyncCtx6 + 104 | 0; //@line 9769
   HEAP32[$649 >> 2] = $58; //@line 9770
   $650 = $ReallocAsyncCtx6 + 108 | 0; //@line 9771
   HEAP32[$650 >> 2] = $60; //@line 9772
   $651 = $ReallocAsyncCtx6 + 112 | 0; //@line 9773
   HEAP32[$651 >> 2] = $62; //@line 9774
   $652 = $ReallocAsyncCtx6 + 116 | 0; //@line 9775
   HEAP32[$652 >> 2] = $64; //@line 9776
   $653 = $ReallocAsyncCtx6 + 120 | 0; //@line 9777
   HEAP32[$653 >> 2] = $68; //@line 9778
   $654 = $ReallocAsyncCtx6 + 124 | 0; //@line 9779
   HEAP32[$654 >> 2] = $70; //@line 9780
   $655 = $ReallocAsyncCtx6 + 128 | 0; //@line 9781
   HEAP32[$655 >> 2] = $72; //@line 9782
   $656 = $ReallocAsyncCtx6 + 132 | 0; //@line 9783
   HEAP32[$656 >> 2] = $74; //@line 9784
   $657 = $ReallocAsyncCtx6 + 136 | 0; //@line 9785
   HEAP32[$657 >> 2] = $76; //@line 9786
   $658 = $ReallocAsyncCtx6 + 140 | 0; //@line 9787
   HEAP32[$658 >> 2] = $78; //@line 9788
   $659 = $ReallocAsyncCtx6 + 144 | 0; //@line 9789
   HEAP32[$659 >> 2] = $80; //@line 9790
   $660 = $ReallocAsyncCtx6 + 148 | 0; //@line 9791
   HEAP32[$660 >> 2] = $82; //@line 9792
   $661 = $ReallocAsyncCtx6 + 152 | 0; //@line 9793
   HEAP32[$661 >> 2] = $84; //@line 9794
   $662 = $ReallocAsyncCtx6 + 156 | 0; //@line 9795
   HEAP32[$662 >> 2] = $86; //@line 9796
   $663 = $ReallocAsyncCtx6 + 160 | 0; //@line 9797
   HEAP32[$663 >> 2] = $88; //@line 9798
   $664 = $ReallocAsyncCtx6 + 164 | 0; //@line 9799
   HEAP32[$664 >> 2] = $90; //@line 9800
   $665 = $ReallocAsyncCtx6 + 168 | 0; //@line 9801
   HEAP32[$665 >> 2] = $92; //@line 9802
   $666 = $ReallocAsyncCtx6 + 172 | 0; //@line 9803
   HEAP32[$666 >> 2] = $94; //@line 9804
   $667 = $ReallocAsyncCtx6 + 176 | 0; //@line 9805
   HEAP32[$667 >> 2] = $96; //@line 9806
   $668 = $ReallocAsyncCtx6 + 180 | 0; //@line 9807
   HEAP32[$668 >> 2] = $98; //@line 9808
   $669 = $ReallocAsyncCtx6 + 184 | 0; //@line 9809
   HEAP32[$669 >> 2] = $100; //@line 9810
   $670 = $ReallocAsyncCtx6 + 188 | 0; //@line 9811
   HEAP32[$670 >> 2] = $102; //@line 9812
   $671 = $ReallocAsyncCtx6 + 192 | 0; //@line 9813
   HEAP32[$671 >> 2] = $104; //@line 9814
   $672 = $ReallocAsyncCtx6 + 196 | 0; //@line 9815
   HEAP32[$672 >> 2] = $106; //@line 9816
   $673 = $ReallocAsyncCtx6 + 200 | 0; //@line 9817
   HEAP32[$673 >> 2] = $108; //@line 9818
   $674 = $ReallocAsyncCtx6 + 204 | 0; //@line 9819
   HEAP32[$674 >> 2] = $112; //@line 9820
   $675 = $ReallocAsyncCtx6 + 208 | 0; //@line 9821
   HEAP32[$675 >> 2] = $114; //@line 9822
   $676 = $ReallocAsyncCtx6 + 212 | 0; //@line 9823
   HEAP32[$676 >> 2] = $116; //@line 9824
   $677 = $ReallocAsyncCtx6 + 216 | 0; //@line 9825
   HEAP32[$677 >> 2] = $118; //@line 9826
   $678 = $ReallocAsyncCtx6 + 220 | 0; //@line 9827
   HEAP32[$678 >> 2] = $120; //@line 9828
   $679 = $ReallocAsyncCtx6 + 224 | 0; //@line 9829
   HEAP32[$679 >> 2] = $122; //@line 9830
   $680 = $ReallocAsyncCtx6 + 228 | 0; //@line 9831
   HEAP32[$680 >> 2] = $124; //@line 9832
   sp = STACKTOP; //@line 9833
   return;
  }
  HEAP8[___async_retval >> 0] = $622; //@line 9837
  ___async_unwind = 0; //@line 9838
  HEAP32[$ReallocAsyncCtx6 >> 2] = 479; //@line 9839
  $623 = $ReallocAsyncCtx6 + 4 | 0; //@line 9840
  HEAP8[$623 >> 0] = $2; //@line 9841
  $624 = $ReallocAsyncCtx6 + 5 | 0; //@line 9842
  HEAP8[$624 >> 0] = $4; //@line 9843
  $625 = $ReallocAsyncCtx6 + 8 | 0; //@line 9844
  HEAP32[$625 >> 2] = $6; //@line 9845
  $626 = $ReallocAsyncCtx6 + 12 | 0; //@line 9846
  HEAP32[$626 >> 2] = $8; //@line 9847
  $627 = $ReallocAsyncCtx6 + 16 | 0; //@line 9848
  HEAP32[$627 >> 2] = $10; //@line 9849
  $628 = $ReallocAsyncCtx6 + 20 | 0; //@line 9850
  HEAP32[$628 >> 2] = $12; //@line 9851
  $629 = $ReallocAsyncCtx6 + 24 | 0; //@line 9852
  HEAP32[$629 >> 2] = $14; //@line 9853
  $630 = $ReallocAsyncCtx6 + 28 | 0; //@line 9854
  HEAP32[$630 >> 2] = $16; //@line 9855
  $631 = $ReallocAsyncCtx6 + 32 | 0; //@line 9856
  HEAP32[$631 >> 2] = $18; //@line 9857
  $632 = $ReallocAsyncCtx6 + 36 | 0; //@line 9858
  HEAP32[$632 >> 2] = $20; //@line 9859
  $633 = $ReallocAsyncCtx6 + 40 | 0; //@line 9860
  HEAP8[$633 >> 0] = $22; //@line 9861
  $634 = $ReallocAsyncCtx6 + 44 | 0; //@line 9862
  HEAP32[$634 >> 2] = $26; //@line 9863
  $635 = $ReallocAsyncCtx6 + 48 | 0; //@line 9864
  HEAP32[$635 >> 2] = $30; //@line 9865
  $636 = $ReallocAsyncCtx6 + 52 | 0; //@line 9866
  HEAP8[$636 >> 0] = $611; //@line 9867
  $637 = $ReallocAsyncCtx6 + 56 | 0; //@line 9868
  HEAP32[$637 >> 2] = $32; //@line 9869
  $638 = $ReallocAsyncCtx6 + 60 | 0; //@line 9870
  HEAP32[$638 >> 2] = $34; //@line 9871
  $639 = $ReallocAsyncCtx6 + 64 | 0; //@line 9872
  HEAP32[$639 >> 2] = $36; //@line 9873
  $640 = $ReallocAsyncCtx6 + 68 | 0; //@line 9874
  HEAP32[$640 >> 2] = $38; //@line 9875
  $641 = $ReallocAsyncCtx6 + 72 | 0; //@line 9876
  HEAP32[$641 >> 2] = $40; //@line 9877
  $642 = $ReallocAsyncCtx6 + 76 | 0; //@line 9878
  HEAP32[$642 >> 2] = $42; //@line 9879
  $643 = $ReallocAsyncCtx6 + 80 | 0; //@line 9880
  HEAP32[$643 >> 2] = $44; //@line 9881
  $644 = $ReallocAsyncCtx6 + 84 | 0; //@line 9882
  HEAP32[$644 >> 2] = $46; //@line 9883
  $645 = $ReallocAsyncCtx6 + 88 | 0; //@line 9884
  HEAP32[$645 >> 2] = $50; //@line 9885
  $646 = $ReallocAsyncCtx6 + 92 | 0; //@line 9886
  HEAP32[$646 >> 2] = $52; //@line 9887
  $647 = $ReallocAsyncCtx6 + 96 | 0; //@line 9888
  HEAP32[$647 >> 2] = $54; //@line 9889
  $648 = $ReallocAsyncCtx6 + 100 | 0; //@line 9890
  HEAP32[$648 >> 2] = $56; //@line 9891
  $649 = $ReallocAsyncCtx6 + 104 | 0; //@line 9892
  HEAP32[$649 >> 2] = $58; //@line 9893
  $650 = $ReallocAsyncCtx6 + 108 | 0; //@line 9894
  HEAP32[$650 >> 2] = $60; //@line 9895
  $651 = $ReallocAsyncCtx6 + 112 | 0; //@line 9896
  HEAP32[$651 >> 2] = $62; //@line 9897
  $652 = $ReallocAsyncCtx6 + 116 | 0; //@line 9898
  HEAP32[$652 >> 2] = $64; //@line 9899
  $653 = $ReallocAsyncCtx6 + 120 | 0; //@line 9900
  HEAP32[$653 >> 2] = $68; //@line 9901
  $654 = $ReallocAsyncCtx6 + 124 | 0; //@line 9902
  HEAP32[$654 >> 2] = $70; //@line 9903
  $655 = $ReallocAsyncCtx6 + 128 | 0; //@line 9904
  HEAP32[$655 >> 2] = $72; //@line 9905
  $656 = $ReallocAsyncCtx6 + 132 | 0; //@line 9906
  HEAP32[$656 >> 2] = $74; //@line 9907
  $657 = $ReallocAsyncCtx6 + 136 | 0; //@line 9908
  HEAP32[$657 >> 2] = $76; //@line 9909
  $658 = $ReallocAsyncCtx6 + 140 | 0; //@line 9910
  HEAP32[$658 >> 2] = $78; //@line 9911
  $659 = $ReallocAsyncCtx6 + 144 | 0; //@line 9912
  HEAP32[$659 >> 2] = $80; //@line 9913
  $660 = $ReallocAsyncCtx6 + 148 | 0; //@line 9914
  HEAP32[$660 >> 2] = $82; //@line 9915
  $661 = $ReallocAsyncCtx6 + 152 | 0; //@line 9916
  HEAP32[$661 >> 2] = $84; //@line 9917
  $662 = $ReallocAsyncCtx6 + 156 | 0; //@line 9918
  HEAP32[$662 >> 2] = $86; //@line 9919
  $663 = $ReallocAsyncCtx6 + 160 | 0; //@line 9920
  HEAP32[$663 >> 2] = $88; //@line 9921
  $664 = $ReallocAsyncCtx6 + 164 | 0; //@line 9922
  HEAP32[$664 >> 2] = $90; //@line 9923
  $665 = $ReallocAsyncCtx6 + 168 | 0; //@line 9924
  HEAP32[$665 >> 2] = $92; //@line 9925
  $666 = $ReallocAsyncCtx6 + 172 | 0; //@line 9926
  HEAP32[$666 >> 2] = $94; //@line 9927
  $667 = $ReallocAsyncCtx6 + 176 | 0; //@line 9928
  HEAP32[$667 >> 2] = $96; //@line 9929
  $668 = $ReallocAsyncCtx6 + 180 | 0; //@line 9930
  HEAP32[$668 >> 2] = $98; //@line 9931
  $669 = $ReallocAsyncCtx6 + 184 | 0; //@line 9932
  HEAP32[$669 >> 2] = $100; //@line 9933
  $670 = $ReallocAsyncCtx6 + 188 | 0; //@line 9934
  HEAP32[$670 >> 2] = $102; //@line 9935
  $671 = $ReallocAsyncCtx6 + 192 | 0; //@line 9936
  HEAP32[$671 >> 2] = $104; //@line 9937
  $672 = $ReallocAsyncCtx6 + 196 | 0; //@line 9938
  HEAP32[$672 >> 2] = $106; //@line 9939
  $673 = $ReallocAsyncCtx6 + 200 | 0; //@line 9940
  HEAP32[$673 >> 2] = $108; //@line 9941
  $674 = $ReallocAsyncCtx6 + 204 | 0; //@line 9942
  HEAP32[$674 >> 2] = $112; //@line 9943
  $675 = $ReallocAsyncCtx6 + 208 | 0; //@line 9944
  HEAP32[$675 >> 2] = $114; //@line 9945
  $676 = $ReallocAsyncCtx6 + 212 | 0; //@line 9946
  HEAP32[$676 >> 2] = $116; //@line 9947
  $677 = $ReallocAsyncCtx6 + 216 | 0; //@line 9948
  HEAP32[$677 >> 2] = $118; //@line 9949
  $678 = $ReallocAsyncCtx6 + 220 | 0; //@line 9950
  HEAP32[$678 >> 2] = $120; //@line 9951
  $679 = $ReallocAsyncCtx6 + 224 | 0; //@line 9952
  HEAP32[$679 >> 2] = $122; //@line 9953
  $680 = $ReallocAsyncCtx6 + 228 | 0; //@line 9954
  HEAP32[$680 >> 2] = $124; //@line 9955
  sp = STACKTOP; //@line 9956
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 9961
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_156($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i116 = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $319 = 0, $32 = 0, $320 = 0, $328 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $394 = 0, $395 = 0, $4 = 0, $40 = 0, $409 = 0, $42 = 0, $430 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $498 = 0, $50 = 0, $502 = 0, $506 = 0, $511 = 0, $512 = 0, $516 = 0, $52 = 0, $520 = 0, $522 = 0, $524 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $595 = 0, $6 = 0, $60 = 0, $608 = 0, $615 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2057
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 2059
 $4 = HEAP8[$0 + 5 >> 0] | 0; //@line 2061
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 2063
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 2065
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 2067
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 2069
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 2071
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 2073
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 2075
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 2077
 $22 = HEAP8[$0 + 40 >> 0] | 0; //@line 2079
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 2081
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 2083
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 2085
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 2087
 $32 = HEAP8[$0 + 60 >> 0] | 0; //@line 2089
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 2091
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 2093
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 2095
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 2097
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 2099
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 2101
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 2103
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 2105
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 2107
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 2109
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 2111
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 2113
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 2115
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 2117
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 2119
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 2121
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 2123
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 2125
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 2127
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 2129
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 2131
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 2133
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 2135
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 2137
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 2139
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 2141
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 2143
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 2145
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 2147
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 2149
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 2151
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 2153
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 2155
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 2157
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 2159
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 2161
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 2163
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 2165
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 2167
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 2169
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 2171
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 2173
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 2175
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$108 >> 0] = HEAP8[$90 >> 0] | 0; //@line 2180
  HEAP32[$98 >> 2] = HEAP32[$62 >> 2]; //@line 2182
  HEAP8[$100 >> 0] = HEAP8[$86 >> 0] | 0; //@line 2184
 }
 $319 = HEAP8[$52 >> 0] | 0; //@line 2189
 $320 = $319 & 255; //@line 2190
 if ((128 - (HEAPU8[$20 >> 0] | 0) - $320 | 0) > 1) {
  HEAP8[$14 + 4 + $320 >> 0] = 5; //@line 2196
  HEAP8[$52 >> 0] = $319 + 2 << 24 >> 24; //@line 2198
  HEAP8[($319 + 1 & 255) + ($14 + 4) >> 0] = $AsyncRetVal; //@line 2201
  HEAP8[$30 >> 0] = 1; //@line 2202
  HEAP8[$58 >> 0] = 1; //@line 2203
  $$0$i116 = 0; //@line 2204
 } else {
  $$0$i116 = -1010; //@line 2206
 }
 $$0$be = $32; //@line 2208
 $$0107$be = $$0$i116; //@line 2208
 L8 : while (1) {
  if (($$0$be & 255) >= ($2 & 255)) {
   label = 35; //@line 2212
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 2216
  switch (HEAP8[$18 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 2221
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 2226
    break L8;
    break;
   }
  case 7:
   {
    label = 23; //@line 2231
    break L8;
    break;
   }
  case 9:
   {
    label = 29; //@line 2236
    break L8;
    break;
   }
  case 10:
   {
    label = 32; //@line 2241
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$26 >> 2] = 0; //@line 2246
    HEAP8[$6 >> 0] = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 2251
    HEAP8[$10 >> 0] = HEAP8[$18 + ($$0$be + 2 & 255) >> 0] | 0; //@line 2256
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 2257
    continue L8;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 2262
    $207 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 2265
    HEAP8[$36 >> 0] = $207; //@line 2266
    HEAP16[$44 >> 1] = 1 << ($207 & 255); //@line 2270
    $214 = HEAP8[$52 >> 0] | 0; //@line 2274
    $215 = $214 & 255; //@line 2275
    if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 2278
     $$0107$be = -1010; //@line 2278
     continue L8;
    }
    HEAP8[$52 >> 0] = $214 + 1 << 24 >> 24; //@line 2283
    HEAP8[$14 + 4 + $215 >> 0] = 4; //@line 2284
    HEAP8[$58 >> 0] = 1; //@line 2285
    $$0$be = $204; //@line 2286
    $$0107$be = 0; //@line 2286
    continue L8;
    break;
   }
  case 6:
   {
    $328 = HEAP32[$16 >> 2] | 0; //@line 2291
    if ($328 | 0) {
     label = 18; //@line 2294
     break L8;
    }
    $394 = HEAP8[$52 >> 0] | 0; //@line 2300
    $395 = $394 & 255; //@line 2301
    if ((128 - (HEAPU8[$20 >> 0] | 0) - $395 | 0) <= 2) {
     $$0$be = $119; //@line 2305
     $$0107$be = -1010; //@line 2305
     continue L8;
    }
    HEAP8[$14 + 4 + $395 >> 0] = 6; //@line 2310
    HEAP8[($394 + 1 & 255) + ($14 + 4) >> 0] = -1; //@line 2314
    HEAP8[$52 >> 0] = $394 + 3 << 24 >> 24; //@line 2316
    HEAP8[($394 + 2 & 255) + ($14 + 4) >> 0] = $4; //@line 2319
    HEAP8[$58 >> 0] = 1; //@line 2320
    $$0$be = $119; //@line 2321
    $$0107$be = 0; //@line 2321
    continue L8;
    break;
   }
  case 8:
   {
    $498 = $$0$be + 2 << 24 >> 24; //@line 2326
    $502 = HEAP8[$18 + ($119 & 255) >> 0] & 15; //@line 2330
    $506 = ($502 + ($502 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 2335
    HEAP32[$72 >> 2] = $506; //@line 2336
    HEAP32[$66 >> 2] = $506 + 1e3; //@line 2338
    $511 = HEAP8[$52 >> 0] | 0; //@line 2342
    $512 = $511 & 255; //@line 2343
    if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) <= ($512 | 0)) {
     $$0$be = $498; //@line 2346
     $$0107$be = -1010; //@line 2346
     continue L8;
    }
    HEAP8[$52 >> 0] = $511 + 1 << 24 >> 24; //@line 2351
    HEAP8[$14 + 4 + $512 >> 0] = 8; //@line 2352
    HEAP8[$30 >> 0] = 1; //@line 2353
    HEAP8[$58 >> 0] = 1; //@line 2354
    $$0$be = $498; //@line 2355
    $$0107$be = 0; //@line 2355
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 2360
    $$0107$be = -1013; //@line 2360
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$12 >> 0] = 0; //@line 2366
  HEAP8[$80 >> 0] = 0; //@line 2367
  HEAP8[$76 >> 0] = 0; //@line 2368
  HEAP8[$68 >> 0] = 0; //@line 2369
  $130 = $119 & 255; //@line 2370
  $131 = $130 + -1 | 0; //@line 2371
  HEAP32[$56 >> 2] = $18 + $131; //@line 2373
  HEAP8[$34 >> 0] = $114 - $131; //@line 2376
  HEAP8[$82 >> 0] = HEAP8[$42 >> 0] | 0; //@line 2378
  HEAP8[$64 >> 0] = HEAP8[$84 >> 0] | 0; //@line 2380
  HEAP8[$106 >> 0] = HEAP8[$74 >> 0] | 0; //@line 2382
  HEAP8[$102 >> 0] = HEAP8[$92 >> 0] | 0; //@line 2384
  HEAP8[$28 >> 0] = HEAP8[$24 >> 0] | 0; //@line 2386
  $142 = HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] | 0; //@line 2389
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 2390
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($54, $48, $12, $80, $76, $68) | 0; //@line 2391
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 474; //@line 2394
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 2395
   HEAP8[$144 >> 0] = $2; //@line 2396
   $145 = $ReallocAsyncCtx + 5 | 0; //@line 2397
   HEAP8[$145 >> 0] = $4; //@line 2398
   $146 = $ReallocAsyncCtx + 8 | 0; //@line 2399
   HEAP32[$146 >> 2] = $6; //@line 2400
   $147 = $ReallocAsyncCtx + 12 | 0; //@line 2401
   HEAP32[$147 >> 2] = $8; //@line 2402
   $148 = $ReallocAsyncCtx + 16 | 0; //@line 2403
   HEAP32[$148 >> 2] = $10; //@line 2404
   $149 = $ReallocAsyncCtx + 20 | 0; //@line 2405
   HEAP32[$149 >> 2] = $12; //@line 2406
   $150 = $ReallocAsyncCtx + 24 | 0; //@line 2407
   HEAP32[$150 >> 2] = $14; //@line 2408
   $151 = $ReallocAsyncCtx + 28 | 0; //@line 2409
   HEAP32[$151 >> 2] = $16; //@line 2410
   $152 = $ReallocAsyncCtx + 32 | 0; //@line 2411
   HEAP32[$152 >> 2] = $18; //@line 2412
   $153 = $ReallocAsyncCtx + 36 | 0; //@line 2413
   HEAP32[$153 >> 2] = $20; //@line 2414
   $154 = $ReallocAsyncCtx + 40 | 0; //@line 2415
   HEAP32[$154 >> 2] = $$0107$be; //@line 2416
   $155 = $ReallocAsyncCtx + 44 | 0; //@line 2417
   HEAP8[$155 >> 0] = $22; //@line 2418
   $156 = $ReallocAsyncCtx + 48 | 0; //@line 2419
   HEAP32[$156 >> 2] = $24; //@line 2420
   $157 = $ReallocAsyncCtx + 52 | 0; //@line 2421
   HEAP32[$157 >> 2] = $130; //@line 2422
   $158 = $ReallocAsyncCtx + 56 | 0; //@line 2423
   HEAP32[$158 >> 2] = $26; //@line 2424
   $159 = $ReallocAsyncCtx + 60 | 0; //@line 2425
   HEAP32[$159 >> 2] = $28; //@line 2426
   $160 = $ReallocAsyncCtx + 64 | 0; //@line 2427
   HEAP32[$160 >> 2] = $30; //@line 2428
   $161 = $ReallocAsyncCtx + 68 | 0; //@line 2429
   HEAP32[$161 >> 2] = $34; //@line 2430
   $162 = $ReallocAsyncCtx + 72 | 0; //@line 2431
   HEAP32[$162 >> 2] = $36; //@line 2432
   $163 = $ReallocAsyncCtx + 76 | 0; //@line 2433
   HEAP32[$163 >> 2] = $38; //@line 2434
   $164 = $ReallocAsyncCtx + 80 | 0; //@line 2435
   HEAP32[$164 >> 2] = $40; //@line 2436
   $165 = $ReallocAsyncCtx + 84 | 0; //@line 2437
   HEAP32[$165 >> 2] = $42; //@line 2438
   $166 = $ReallocAsyncCtx + 88 | 0; //@line 2439
   HEAP32[$166 >> 2] = $44; //@line 2440
   $167 = $ReallocAsyncCtx + 92 | 0; //@line 2441
   HEAP32[$167 >> 2] = $46; //@line 2442
   $168 = $ReallocAsyncCtx + 96 | 0; //@line 2443
   HEAP32[$168 >> 2] = $48; //@line 2444
   $169 = $ReallocAsyncCtx + 100 | 0; //@line 2445
   HEAP32[$169 >> 2] = $50; //@line 2446
   $170 = $ReallocAsyncCtx + 104 | 0; //@line 2447
   HEAP32[$170 >> 2] = $52; //@line 2448
   $171 = $ReallocAsyncCtx + 108 | 0; //@line 2449
   HEAP32[$171 >> 2] = $54; //@line 2450
   $172 = $ReallocAsyncCtx + 112 | 0; //@line 2451
   HEAP32[$172 >> 2] = $56; //@line 2452
   $173 = $ReallocAsyncCtx + 116 | 0; //@line 2453
   HEAP32[$173 >> 2] = $58; //@line 2454
   $174 = $ReallocAsyncCtx + 120 | 0; //@line 2455
   HEAP32[$174 >> 2] = $60; //@line 2456
   $175 = $ReallocAsyncCtx + 124 | 0; //@line 2457
   HEAP32[$175 >> 2] = $62; //@line 2458
   $176 = $ReallocAsyncCtx + 128 | 0; //@line 2459
   HEAP32[$176 >> 2] = $64; //@line 2460
   $177 = $ReallocAsyncCtx + 132 | 0; //@line 2461
   HEAP32[$177 >> 2] = $66; //@line 2462
   $178 = $ReallocAsyncCtx + 136 | 0; //@line 2463
   HEAP32[$178 >> 2] = $68; //@line 2464
   $179 = $ReallocAsyncCtx + 140 | 0; //@line 2465
   HEAP32[$179 >> 2] = $70; //@line 2466
   $180 = $ReallocAsyncCtx + 144 | 0; //@line 2467
   HEAP32[$180 >> 2] = $72; //@line 2468
   $181 = $ReallocAsyncCtx + 148 | 0; //@line 2469
   HEAP32[$181 >> 2] = $74; //@line 2470
   $182 = $ReallocAsyncCtx + 152 | 0; //@line 2471
   HEAP32[$182 >> 2] = $76; //@line 2472
   $183 = $ReallocAsyncCtx + 156 | 0; //@line 2473
   HEAP32[$183 >> 2] = $78; //@line 2474
   $184 = $ReallocAsyncCtx + 160 | 0; //@line 2475
   HEAP32[$184 >> 2] = $80; //@line 2476
   $185 = $ReallocAsyncCtx + 164 | 0; //@line 2477
   HEAP32[$185 >> 2] = $82; //@line 2478
   $186 = $ReallocAsyncCtx + 168 | 0; //@line 2479
   HEAP32[$186 >> 2] = $84; //@line 2480
   $187 = $ReallocAsyncCtx + 172 | 0; //@line 2481
   HEAP32[$187 >> 2] = $86; //@line 2482
   $188 = $ReallocAsyncCtx + 176 | 0; //@line 2483
   HEAP32[$188 >> 2] = $88; //@line 2484
   $189 = $ReallocAsyncCtx + 180 | 0; //@line 2485
   HEAP32[$189 >> 2] = $90; //@line 2486
   $190 = $ReallocAsyncCtx + 184 | 0; //@line 2487
   HEAP32[$190 >> 2] = $92; //@line 2488
   $191 = $ReallocAsyncCtx + 188 | 0; //@line 2489
   HEAP32[$191 >> 2] = $94; //@line 2490
   $192 = $ReallocAsyncCtx + 192 | 0; //@line 2491
   HEAP32[$192 >> 2] = $96; //@line 2492
   $193 = $ReallocAsyncCtx + 196 | 0; //@line 2493
   HEAP32[$193 >> 2] = $98; //@line 2494
   $194 = $ReallocAsyncCtx + 200 | 0; //@line 2495
   HEAP32[$194 >> 2] = $100; //@line 2496
   $195 = $ReallocAsyncCtx + 204 | 0; //@line 2497
   HEAP32[$195 >> 2] = $102; //@line 2498
   $196 = $ReallocAsyncCtx + 208 | 0; //@line 2499
   HEAP32[$196 >> 2] = $104; //@line 2500
   $197 = $ReallocAsyncCtx + 212 | 0; //@line 2501
   HEAP32[$197 >> 2] = $106; //@line 2502
   $198 = $ReallocAsyncCtx + 216 | 0; //@line 2503
   HEAP32[$198 >> 2] = $108; //@line 2504
   $199 = $ReallocAsyncCtx + 220 | 0; //@line 2505
   HEAP32[$199 >> 2] = $110; //@line 2506
   $200 = $ReallocAsyncCtx + 224 | 0; //@line 2507
   HEAP32[$200 >> 2] = $112; //@line 2508
   $201 = $ReallocAsyncCtx + 228 | 0; //@line 2509
   HEAP32[$201 >> 2] = $114; //@line 2510
   $202 = $ReallocAsyncCtx + 232 | 0; //@line 2511
   HEAP32[$202 >> 2] = $116; //@line 2512
   sp = STACKTOP; //@line 2513
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 2517
  ___async_unwind = 0; //@line 2518
  HEAP32[$ReallocAsyncCtx >> 2] = 474; //@line 2519
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 2520
  HEAP8[$144 >> 0] = $2; //@line 2521
  $145 = $ReallocAsyncCtx + 5 | 0; //@line 2522
  HEAP8[$145 >> 0] = $4; //@line 2523
  $146 = $ReallocAsyncCtx + 8 | 0; //@line 2524
  HEAP32[$146 >> 2] = $6; //@line 2525
  $147 = $ReallocAsyncCtx + 12 | 0; //@line 2526
  HEAP32[$147 >> 2] = $8; //@line 2527
  $148 = $ReallocAsyncCtx + 16 | 0; //@line 2528
  HEAP32[$148 >> 2] = $10; //@line 2529
  $149 = $ReallocAsyncCtx + 20 | 0; //@line 2530
  HEAP32[$149 >> 2] = $12; //@line 2531
  $150 = $ReallocAsyncCtx + 24 | 0; //@line 2532
  HEAP32[$150 >> 2] = $14; //@line 2533
  $151 = $ReallocAsyncCtx + 28 | 0; //@line 2534
  HEAP32[$151 >> 2] = $16; //@line 2535
  $152 = $ReallocAsyncCtx + 32 | 0; //@line 2536
  HEAP32[$152 >> 2] = $18; //@line 2537
  $153 = $ReallocAsyncCtx + 36 | 0; //@line 2538
  HEAP32[$153 >> 2] = $20; //@line 2539
  $154 = $ReallocAsyncCtx + 40 | 0; //@line 2540
  HEAP32[$154 >> 2] = $$0107$be; //@line 2541
  $155 = $ReallocAsyncCtx + 44 | 0; //@line 2542
  HEAP8[$155 >> 0] = $22; //@line 2543
  $156 = $ReallocAsyncCtx + 48 | 0; //@line 2544
  HEAP32[$156 >> 2] = $24; //@line 2545
  $157 = $ReallocAsyncCtx + 52 | 0; //@line 2546
  HEAP32[$157 >> 2] = $130; //@line 2547
  $158 = $ReallocAsyncCtx + 56 | 0; //@line 2548
  HEAP32[$158 >> 2] = $26; //@line 2549
  $159 = $ReallocAsyncCtx + 60 | 0; //@line 2550
  HEAP32[$159 >> 2] = $28; //@line 2551
  $160 = $ReallocAsyncCtx + 64 | 0; //@line 2552
  HEAP32[$160 >> 2] = $30; //@line 2553
  $161 = $ReallocAsyncCtx + 68 | 0; //@line 2554
  HEAP32[$161 >> 2] = $34; //@line 2555
  $162 = $ReallocAsyncCtx + 72 | 0; //@line 2556
  HEAP32[$162 >> 2] = $36; //@line 2557
  $163 = $ReallocAsyncCtx + 76 | 0; //@line 2558
  HEAP32[$163 >> 2] = $38; //@line 2559
  $164 = $ReallocAsyncCtx + 80 | 0; //@line 2560
  HEAP32[$164 >> 2] = $40; //@line 2561
  $165 = $ReallocAsyncCtx + 84 | 0; //@line 2562
  HEAP32[$165 >> 2] = $42; //@line 2563
  $166 = $ReallocAsyncCtx + 88 | 0; //@line 2564
  HEAP32[$166 >> 2] = $44; //@line 2565
  $167 = $ReallocAsyncCtx + 92 | 0; //@line 2566
  HEAP32[$167 >> 2] = $46; //@line 2567
  $168 = $ReallocAsyncCtx + 96 | 0; //@line 2568
  HEAP32[$168 >> 2] = $48; //@line 2569
  $169 = $ReallocAsyncCtx + 100 | 0; //@line 2570
  HEAP32[$169 >> 2] = $50; //@line 2571
  $170 = $ReallocAsyncCtx + 104 | 0; //@line 2572
  HEAP32[$170 >> 2] = $52; //@line 2573
  $171 = $ReallocAsyncCtx + 108 | 0; //@line 2574
  HEAP32[$171 >> 2] = $54; //@line 2575
  $172 = $ReallocAsyncCtx + 112 | 0; //@line 2576
  HEAP32[$172 >> 2] = $56; //@line 2577
  $173 = $ReallocAsyncCtx + 116 | 0; //@line 2578
  HEAP32[$173 >> 2] = $58; //@line 2579
  $174 = $ReallocAsyncCtx + 120 | 0; //@line 2580
  HEAP32[$174 >> 2] = $60; //@line 2581
  $175 = $ReallocAsyncCtx + 124 | 0; //@line 2582
  HEAP32[$175 >> 2] = $62; //@line 2583
  $176 = $ReallocAsyncCtx + 128 | 0; //@line 2584
  HEAP32[$176 >> 2] = $64; //@line 2585
  $177 = $ReallocAsyncCtx + 132 | 0; //@line 2586
  HEAP32[$177 >> 2] = $66; //@line 2587
  $178 = $ReallocAsyncCtx + 136 | 0; //@line 2588
  HEAP32[$178 >> 2] = $68; //@line 2589
  $179 = $ReallocAsyncCtx + 140 | 0; //@line 2590
  HEAP32[$179 >> 2] = $70; //@line 2591
  $180 = $ReallocAsyncCtx + 144 | 0; //@line 2592
  HEAP32[$180 >> 2] = $72; //@line 2593
  $181 = $ReallocAsyncCtx + 148 | 0; //@line 2594
  HEAP32[$181 >> 2] = $74; //@line 2595
  $182 = $ReallocAsyncCtx + 152 | 0; //@line 2596
  HEAP32[$182 >> 2] = $76; //@line 2597
  $183 = $ReallocAsyncCtx + 156 | 0; //@line 2598
  HEAP32[$183 >> 2] = $78; //@line 2599
  $184 = $ReallocAsyncCtx + 160 | 0; //@line 2600
  HEAP32[$184 >> 2] = $80; //@line 2601
  $185 = $ReallocAsyncCtx + 164 | 0; //@line 2602
  HEAP32[$185 >> 2] = $82; //@line 2603
  $186 = $ReallocAsyncCtx + 168 | 0; //@line 2604
  HEAP32[$186 >> 2] = $84; //@line 2605
  $187 = $ReallocAsyncCtx + 172 | 0; //@line 2606
  HEAP32[$187 >> 2] = $86; //@line 2607
  $188 = $ReallocAsyncCtx + 176 | 0; //@line 2608
  HEAP32[$188 >> 2] = $88; //@line 2609
  $189 = $ReallocAsyncCtx + 180 | 0; //@line 2610
  HEAP32[$189 >> 2] = $90; //@line 2611
  $190 = $ReallocAsyncCtx + 184 | 0; //@line 2612
  HEAP32[$190 >> 2] = $92; //@line 2613
  $191 = $ReallocAsyncCtx + 188 | 0; //@line 2614
  HEAP32[$191 >> 2] = $94; //@line 2615
  $192 = $ReallocAsyncCtx + 192 | 0; //@line 2616
  HEAP32[$192 >> 2] = $96; //@line 2617
  $193 = $ReallocAsyncCtx + 196 | 0; //@line 2618
  HEAP32[$193 >> 2] = $98; //@line 2619
  $194 = $ReallocAsyncCtx + 200 | 0; //@line 2620
  HEAP32[$194 >> 2] = $100; //@line 2621
  $195 = $ReallocAsyncCtx + 204 | 0; //@line 2622
  HEAP32[$195 >> 2] = $102; //@line 2623
  $196 = $ReallocAsyncCtx + 208 | 0; //@line 2624
  HEAP32[$196 >> 2] = $104; //@line 2625
  $197 = $ReallocAsyncCtx + 212 | 0; //@line 2626
  HEAP32[$197 >> 2] = $106; //@line 2627
  $198 = $ReallocAsyncCtx + 216 | 0; //@line 2628
  HEAP32[$198 >> 2] = $108; //@line 2629
  $199 = $ReallocAsyncCtx + 220 | 0; //@line 2630
  HEAP32[$199 >> 2] = $110; //@line 2631
  $200 = $ReallocAsyncCtx + 224 | 0; //@line 2632
  HEAP32[$200 >> 2] = $112; //@line 2633
  $201 = $ReallocAsyncCtx + 228 | 0; //@line 2634
  HEAP32[$201 >> 2] = $114; //@line 2635
  $202 = $ReallocAsyncCtx + 232 | 0; //@line 2636
  HEAP32[$202 >> 2] = $116; //@line 2637
  sp = STACKTOP; //@line 2638
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 2644
  HEAP8[$86 >> 0] = ($221 & 255) >>> 4 & 7; //@line 2649
  HEAP8[$90 >> 0] = $221 & 15; //@line 2651
  $240 = $$0$be + 5 << 24 >> 24; //@line 2665
  HEAP32[$62 >> 2] = (HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 2673
  $250 = HEAP32[(HEAP32[$70 >> 2] | 0) + 40 >> 2] | 0; //@line 2676
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 2677
  $251 = FUNCTION_TABLE_iii[$250 & 31]($54, $116) | 0; //@line 2678
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 475; //@line 2681
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 2682
   HEAP8[$252 >> 0] = $2; //@line 2683
   $253 = $ReallocAsyncCtx2 + 5 | 0; //@line 2684
   HEAP8[$253 >> 0] = $4; //@line 2685
   $254 = $ReallocAsyncCtx2 + 8 | 0; //@line 2686
   HEAP32[$254 >> 2] = $6; //@line 2687
   $255 = $ReallocAsyncCtx2 + 12 | 0; //@line 2688
   HEAP32[$255 >> 2] = $8; //@line 2689
   $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 2690
   HEAP32[$256 >> 2] = $10; //@line 2691
   $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 2692
   HEAP32[$257 >> 2] = $12; //@line 2693
   $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 2694
   HEAP32[$258 >> 2] = $14; //@line 2695
   $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 2696
   HEAP32[$259 >> 2] = $16; //@line 2697
   $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 2698
   HEAP32[$260 >> 2] = $18; //@line 2699
   $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 2700
   HEAP32[$261 >> 2] = $20; //@line 2701
   $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 2702
   HEAP8[$262 >> 0] = $22; //@line 2703
   $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 2704
   HEAP32[$263 >> 2] = $24; //@line 2705
   $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 2706
   HEAP32[$264 >> 2] = $26; //@line 2707
   $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 2708
   HEAP32[$265 >> 2] = $28; //@line 2709
   $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 2710
   HEAP32[$266 >> 2] = $30; //@line 2711
   $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 2712
   HEAP8[$267 >> 0] = $240; //@line 2713
   $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 2714
   HEAP32[$268 >> 2] = $34; //@line 2715
   $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 2716
   HEAP32[$269 >> 2] = $36; //@line 2717
   $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 2718
   HEAP32[$270 >> 2] = $38; //@line 2719
   $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 2720
   HEAP32[$271 >> 2] = $40; //@line 2721
   $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 2722
   HEAP32[$272 >> 2] = $42; //@line 2723
   $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 2724
   HEAP32[$273 >> 2] = $44; //@line 2725
   $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 2726
   HEAP32[$274 >> 2] = $46; //@line 2727
   $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 2728
   HEAP32[$275 >> 2] = $48; //@line 2729
   $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 2730
   HEAP32[$276 >> 2] = $50; //@line 2731
   $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 2732
   HEAP32[$277 >> 2] = $52; //@line 2733
   $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 2734
   HEAP32[$278 >> 2] = $54; //@line 2735
   $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 2736
   HEAP32[$279 >> 2] = $56; //@line 2737
   $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 2738
   HEAP32[$280 >> 2] = $58; //@line 2739
   $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 2740
   HEAP32[$281 >> 2] = $60; //@line 2741
   $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 2742
   HEAP32[$282 >> 2] = $62; //@line 2743
   $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 2744
   HEAP32[$283 >> 2] = $64; //@line 2745
   $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 2746
   HEAP32[$284 >> 2] = $66; //@line 2747
   $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 2748
   HEAP32[$285 >> 2] = $68; //@line 2749
   $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 2750
   HEAP32[$286 >> 2] = $70; //@line 2751
   $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 2752
   HEAP32[$287 >> 2] = $72; //@line 2753
   $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 2754
   HEAP32[$288 >> 2] = $74; //@line 2755
   $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 2756
   HEAP32[$289 >> 2] = $76; //@line 2757
   $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 2758
   HEAP32[$290 >> 2] = $78; //@line 2759
   $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 2760
   HEAP32[$291 >> 2] = $80; //@line 2761
   $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 2762
   HEAP32[$292 >> 2] = $82; //@line 2763
   $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 2764
   HEAP32[$293 >> 2] = $84; //@line 2765
   $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 2766
   HEAP32[$294 >> 2] = $86; //@line 2767
   $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 2768
   HEAP32[$295 >> 2] = $88; //@line 2769
   $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 2770
   HEAP32[$296 >> 2] = $90; //@line 2771
   $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 2772
   HEAP32[$297 >> 2] = $92; //@line 2773
   $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 2774
   HEAP32[$298 >> 2] = $94; //@line 2775
   $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 2776
   HEAP32[$299 >> 2] = $96; //@line 2777
   $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 2778
   HEAP32[$300 >> 2] = $98; //@line 2779
   $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 2780
   HEAP32[$301 >> 2] = $100; //@line 2781
   $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 2782
   HEAP32[$302 >> 2] = $102; //@line 2783
   $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 2784
   HEAP32[$303 >> 2] = $104; //@line 2785
   $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 2786
   HEAP32[$304 >> 2] = $106; //@line 2787
   $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 2788
   HEAP32[$305 >> 2] = $108; //@line 2789
   $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 2790
   HEAP32[$306 >> 2] = $110; //@line 2791
   $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 2792
   HEAP32[$307 >> 2] = $112; //@line 2793
   $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 2794
   HEAP32[$308 >> 2] = $114; //@line 2795
   $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 2796
   HEAP32[$309 >> 2] = $116; //@line 2797
   sp = STACKTOP; //@line 2798
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 2802
  ___async_unwind = 0; //@line 2803
  HEAP32[$ReallocAsyncCtx2 >> 2] = 475; //@line 2804
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 2805
  HEAP8[$252 >> 0] = $2; //@line 2806
  $253 = $ReallocAsyncCtx2 + 5 | 0; //@line 2807
  HEAP8[$253 >> 0] = $4; //@line 2808
  $254 = $ReallocAsyncCtx2 + 8 | 0; //@line 2809
  HEAP32[$254 >> 2] = $6; //@line 2810
  $255 = $ReallocAsyncCtx2 + 12 | 0; //@line 2811
  HEAP32[$255 >> 2] = $8; //@line 2812
  $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 2813
  HEAP32[$256 >> 2] = $10; //@line 2814
  $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 2815
  HEAP32[$257 >> 2] = $12; //@line 2816
  $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 2817
  HEAP32[$258 >> 2] = $14; //@line 2818
  $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 2819
  HEAP32[$259 >> 2] = $16; //@line 2820
  $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 2821
  HEAP32[$260 >> 2] = $18; //@line 2822
  $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 2823
  HEAP32[$261 >> 2] = $20; //@line 2824
  $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 2825
  HEAP8[$262 >> 0] = $22; //@line 2826
  $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 2827
  HEAP32[$263 >> 2] = $24; //@line 2828
  $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 2829
  HEAP32[$264 >> 2] = $26; //@line 2830
  $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 2831
  HEAP32[$265 >> 2] = $28; //@line 2832
  $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 2833
  HEAP32[$266 >> 2] = $30; //@line 2834
  $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 2835
  HEAP8[$267 >> 0] = $240; //@line 2836
  $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 2837
  HEAP32[$268 >> 2] = $34; //@line 2838
  $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 2839
  HEAP32[$269 >> 2] = $36; //@line 2840
  $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 2841
  HEAP32[$270 >> 2] = $38; //@line 2842
  $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 2843
  HEAP32[$271 >> 2] = $40; //@line 2844
  $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 2845
  HEAP32[$272 >> 2] = $42; //@line 2846
  $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 2847
  HEAP32[$273 >> 2] = $44; //@line 2848
  $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 2849
  HEAP32[$274 >> 2] = $46; //@line 2850
  $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 2851
  HEAP32[$275 >> 2] = $48; //@line 2852
  $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 2853
  HEAP32[$276 >> 2] = $50; //@line 2854
  $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 2855
  HEAP32[$277 >> 2] = $52; //@line 2856
  $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 2857
  HEAP32[$278 >> 2] = $54; //@line 2858
  $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 2859
  HEAP32[$279 >> 2] = $56; //@line 2860
  $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 2861
  HEAP32[$280 >> 2] = $58; //@line 2862
  $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 2863
  HEAP32[$281 >> 2] = $60; //@line 2864
  $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 2865
  HEAP32[$282 >> 2] = $62; //@line 2866
  $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 2867
  HEAP32[$283 >> 2] = $64; //@line 2868
  $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 2869
  HEAP32[$284 >> 2] = $66; //@line 2870
  $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 2871
  HEAP32[$285 >> 2] = $68; //@line 2872
  $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 2873
  HEAP32[$286 >> 2] = $70; //@line 2874
  $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 2875
  HEAP32[$287 >> 2] = $72; //@line 2876
  $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 2877
  HEAP32[$288 >> 2] = $74; //@line 2878
  $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 2879
  HEAP32[$289 >> 2] = $76; //@line 2880
  $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 2881
  HEAP32[$290 >> 2] = $78; //@line 2882
  $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 2883
  HEAP32[$291 >> 2] = $80; //@line 2884
  $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 2885
  HEAP32[$292 >> 2] = $82; //@line 2886
  $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 2887
  HEAP32[$293 >> 2] = $84; //@line 2888
  $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 2889
  HEAP32[$294 >> 2] = $86; //@line 2890
  $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 2891
  HEAP32[$295 >> 2] = $88; //@line 2892
  $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 2893
  HEAP32[$296 >> 2] = $90; //@line 2894
  $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 2895
  HEAP32[$297 >> 2] = $92; //@line 2896
  $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 2897
  HEAP32[$298 >> 2] = $94; //@line 2898
  $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 2899
  HEAP32[$299 >> 2] = $96; //@line 2900
  $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 2901
  HEAP32[$300 >> 2] = $98; //@line 2902
  $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 2903
  HEAP32[$301 >> 2] = $100; //@line 2904
  $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 2905
  HEAP32[$302 >> 2] = $102; //@line 2906
  $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 2907
  HEAP32[$303 >> 2] = $104; //@line 2908
  $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 2909
  HEAP32[$304 >> 2] = $106; //@line 2910
  $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 2911
  HEAP32[$305 >> 2] = $108; //@line 2912
  $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 2913
  HEAP32[$306 >> 2] = $110; //@line 2914
  $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 2915
  HEAP32[$307 >> 2] = $112; //@line 2916
  $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 2917
  HEAP32[$308 >> 2] = $114; //@line 2918
  $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 2919
  HEAP32[$309 >> 2] = $116; //@line 2920
  sp = STACKTOP; //@line 2921
  return;
 } else if ((label | 0) == 18) {
  $330 = HEAP32[$328 >> 2] | 0; //@line 2925
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 2926
  $331 = FUNCTION_TABLE_ii[$330 & 15]($60) | 0; //@line 2927
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 476; //@line 2930
   $332 = $ReallocAsyncCtx3 + 4 | 0; //@line 2931
   HEAP8[$332 >> 0] = $2; //@line 2932
   $333 = $ReallocAsyncCtx3 + 5 | 0; //@line 2933
   HEAP8[$333 >> 0] = $4; //@line 2934
   $334 = $ReallocAsyncCtx3 + 8 | 0; //@line 2935
   HEAP32[$334 >> 2] = $6; //@line 2936
   $335 = $ReallocAsyncCtx3 + 12 | 0; //@line 2937
   HEAP32[$335 >> 2] = $8; //@line 2938
   $336 = $ReallocAsyncCtx3 + 16 | 0; //@line 2939
   HEAP32[$336 >> 2] = $10; //@line 2940
   $337 = $ReallocAsyncCtx3 + 20 | 0; //@line 2941
   HEAP32[$337 >> 2] = $12; //@line 2942
   $338 = $ReallocAsyncCtx3 + 24 | 0; //@line 2943
   HEAP32[$338 >> 2] = $14; //@line 2944
   $339 = $ReallocAsyncCtx3 + 28 | 0; //@line 2945
   HEAP32[$339 >> 2] = $16; //@line 2946
   $340 = $ReallocAsyncCtx3 + 32 | 0; //@line 2947
   HEAP32[$340 >> 2] = $18; //@line 2948
   $341 = $ReallocAsyncCtx3 + 36 | 0; //@line 2949
   HEAP32[$341 >> 2] = $20; //@line 2950
   $342 = $ReallocAsyncCtx3 + 40 | 0; //@line 2951
   HEAP8[$342 >> 0] = $22; //@line 2952
   $343 = $ReallocAsyncCtx3 + 44 | 0; //@line 2953
   HEAP32[$343 >> 2] = $24; //@line 2954
   $344 = $ReallocAsyncCtx3 + 48 | 0; //@line 2955
   HEAP32[$344 >> 2] = $26; //@line 2956
   $345 = $ReallocAsyncCtx3 + 52 | 0; //@line 2957
   HEAP32[$345 >> 2] = $28; //@line 2958
   $346 = $ReallocAsyncCtx3 + 56 | 0; //@line 2959
   HEAP32[$346 >> 2] = $30; //@line 2960
   $347 = $ReallocAsyncCtx3 + 60 | 0; //@line 2961
   HEAP32[$347 >> 2] = $34; //@line 2962
   $348 = $ReallocAsyncCtx3 + 64 | 0; //@line 2963
   HEAP32[$348 >> 2] = $36; //@line 2964
   $349 = $ReallocAsyncCtx3 + 68 | 0; //@line 2965
   HEAP32[$349 >> 2] = $38; //@line 2966
   $350 = $ReallocAsyncCtx3 + 72 | 0; //@line 2967
   HEAP32[$350 >> 2] = $40; //@line 2968
   $351 = $ReallocAsyncCtx3 + 76 | 0; //@line 2969
   HEAP32[$351 >> 2] = $42; //@line 2970
   $352 = $ReallocAsyncCtx3 + 80 | 0; //@line 2971
   HEAP32[$352 >> 2] = $44; //@line 2972
   $353 = $ReallocAsyncCtx3 + 84 | 0; //@line 2973
   HEAP8[$353 >> 0] = $119; //@line 2974
   $354 = $ReallocAsyncCtx3 + 88 | 0; //@line 2975
   HEAP32[$354 >> 2] = $46; //@line 2976
   $355 = $ReallocAsyncCtx3 + 92 | 0; //@line 2977
   HEAP32[$355 >> 2] = $48; //@line 2978
   $356 = $ReallocAsyncCtx3 + 96 | 0; //@line 2979
   HEAP32[$356 >> 2] = $50; //@line 2980
   $357 = $ReallocAsyncCtx3 + 100 | 0; //@line 2981
   HEAP32[$357 >> 2] = $52; //@line 2982
   $358 = $ReallocAsyncCtx3 + 104 | 0; //@line 2983
   HEAP32[$358 >> 2] = $54; //@line 2984
   $359 = $ReallocAsyncCtx3 + 108 | 0; //@line 2985
   HEAP32[$359 >> 2] = $56; //@line 2986
   $360 = $ReallocAsyncCtx3 + 112 | 0; //@line 2987
   HEAP32[$360 >> 2] = $58; //@line 2988
   $361 = $ReallocAsyncCtx3 + 116 | 0; //@line 2989
   HEAP32[$361 >> 2] = $60; //@line 2990
   $362 = $ReallocAsyncCtx3 + 120 | 0; //@line 2991
   HEAP32[$362 >> 2] = $62; //@line 2992
   $363 = $ReallocAsyncCtx3 + 124 | 0; //@line 2993
   HEAP32[$363 >> 2] = $64; //@line 2994
   $364 = $ReallocAsyncCtx3 + 128 | 0; //@line 2995
   HEAP32[$364 >> 2] = $66; //@line 2996
   $365 = $ReallocAsyncCtx3 + 132 | 0; //@line 2997
   HEAP32[$365 >> 2] = $68; //@line 2998
   $366 = $ReallocAsyncCtx3 + 136 | 0; //@line 2999
   HEAP32[$366 >> 2] = $70; //@line 3000
   $367 = $ReallocAsyncCtx3 + 140 | 0; //@line 3001
   HEAP32[$367 >> 2] = $72; //@line 3002
   $368 = $ReallocAsyncCtx3 + 144 | 0; //@line 3003
   HEAP32[$368 >> 2] = $74; //@line 3004
   $369 = $ReallocAsyncCtx3 + 148 | 0; //@line 3005
   HEAP32[$369 >> 2] = $76; //@line 3006
   $370 = $ReallocAsyncCtx3 + 152 | 0; //@line 3007
   HEAP32[$370 >> 2] = $78; //@line 3008
   $371 = $ReallocAsyncCtx3 + 156 | 0; //@line 3009
   HEAP32[$371 >> 2] = $80; //@line 3010
   $372 = $ReallocAsyncCtx3 + 160 | 0; //@line 3011
   HEAP32[$372 >> 2] = $82; //@line 3012
   $373 = $ReallocAsyncCtx3 + 164 | 0; //@line 3013
   HEAP32[$373 >> 2] = $84; //@line 3014
   $374 = $ReallocAsyncCtx3 + 168 | 0; //@line 3015
   HEAP32[$374 >> 2] = $86; //@line 3016
   $375 = $ReallocAsyncCtx3 + 172 | 0; //@line 3017
   HEAP32[$375 >> 2] = $88; //@line 3018
   $376 = $ReallocAsyncCtx3 + 176 | 0; //@line 3019
   HEAP32[$376 >> 2] = $90; //@line 3020
   $377 = $ReallocAsyncCtx3 + 180 | 0; //@line 3021
   HEAP32[$377 >> 2] = $92; //@line 3022
   $378 = $ReallocAsyncCtx3 + 184 | 0; //@line 3023
   HEAP32[$378 >> 2] = $94; //@line 3024
   $379 = $ReallocAsyncCtx3 + 188 | 0; //@line 3025
   HEAP32[$379 >> 2] = $96; //@line 3026
   $380 = $ReallocAsyncCtx3 + 192 | 0; //@line 3027
   HEAP32[$380 >> 2] = $98; //@line 3028
   $381 = $ReallocAsyncCtx3 + 196 | 0; //@line 3029
   HEAP32[$381 >> 2] = $100; //@line 3030
   $382 = $ReallocAsyncCtx3 + 200 | 0; //@line 3031
   HEAP32[$382 >> 2] = $102; //@line 3032
   $383 = $ReallocAsyncCtx3 + 204 | 0; //@line 3033
   HEAP32[$383 >> 2] = $104; //@line 3034
   $384 = $ReallocAsyncCtx3 + 208 | 0; //@line 3035
   HEAP32[$384 >> 2] = $106; //@line 3036
   $385 = $ReallocAsyncCtx3 + 212 | 0; //@line 3037
   HEAP32[$385 >> 2] = $108; //@line 3038
   $386 = $ReallocAsyncCtx3 + 216 | 0; //@line 3039
   HEAP32[$386 >> 2] = $110; //@line 3040
   $387 = $ReallocAsyncCtx3 + 220 | 0; //@line 3041
   HEAP32[$387 >> 2] = $112; //@line 3042
   $388 = $ReallocAsyncCtx3 + 224 | 0; //@line 3043
   HEAP32[$388 >> 2] = $114; //@line 3044
   $389 = $ReallocAsyncCtx3 + 228 | 0; //@line 3045
   HEAP32[$389 >> 2] = $116; //@line 3046
   sp = STACKTOP; //@line 3047
   return;
  }
  HEAP8[___async_retval >> 0] = $331; //@line 3051
  ___async_unwind = 0; //@line 3052
  HEAP32[$ReallocAsyncCtx3 >> 2] = 476; //@line 3053
  $332 = $ReallocAsyncCtx3 + 4 | 0; //@line 3054
  HEAP8[$332 >> 0] = $2; //@line 3055
  $333 = $ReallocAsyncCtx3 + 5 | 0; //@line 3056
  HEAP8[$333 >> 0] = $4; //@line 3057
  $334 = $ReallocAsyncCtx3 + 8 | 0; //@line 3058
  HEAP32[$334 >> 2] = $6; //@line 3059
  $335 = $ReallocAsyncCtx3 + 12 | 0; //@line 3060
  HEAP32[$335 >> 2] = $8; //@line 3061
  $336 = $ReallocAsyncCtx3 + 16 | 0; //@line 3062
  HEAP32[$336 >> 2] = $10; //@line 3063
  $337 = $ReallocAsyncCtx3 + 20 | 0; //@line 3064
  HEAP32[$337 >> 2] = $12; //@line 3065
  $338 = $ReallocAsyncCtx3 + 24 | 0; //@line 3066
  HEAP32[$338 >> 2] = $14; //@line 3067
  $339 = $ReallocAsyncCtx3 + 28 | 0; //@line 3068
  HEAP32[$339 >> 2] = $16; //@line 3069
  $340 = $ReallocAsyncCtx3 + 32 | 0; //@line 3070
  HEAP32[$340 >> 2] = $18; //@line 3071
  $341 = $ReallocAsyncCtx3 + 36 | 0; //@line 3072
  HEAP32[$341 >> 2] = $20; //@line 3073
  $342 = $ReallocAsyncCtx3 + 40 | 0; //@line 3074
  HEAP8[$342 >> 0] = $22; //@line 3075
  $343 = $ReallocAsyncCtx3 + 44 | 0; //@line 3076
  HEAP32[$343 >> 2] = $24; //@line 3077
  $344 = $ReallocAsyncCtx3 + 48 | 0; //@line 3078
  HEAP32[$344 >> 2] = $26; //@line 3079
  $345 = $ReallocAsyncCtx3 + 52 | 0; //@line 3080
  HEAP32[$345 >> 2] = $28; //@line 3081
  $346 = $ReallocAsyncCtx3 + 56 | 0; //@line 3082
  HEAP32[$346 >> 2] = $30; //@line 3083
  $347 = $ReallocAsyncCtx3 + 60 | 0; //@line 3084
  HEAP32[$347 >> 2] = $34; //@line 3085
  $348 = $ReallocAsyncCtx3 + 64 | 0; //@line 3086
  HEAP32[$348 >> 2] = $36; //@line 3087
  $349 = $ReallocAsyncCtx3 + 68 | 0; //@line 3088
  HEAP32[$349 >> 2] = $38; //@line 3089
  $350 = $ReallocAsyncCtx3 + 72 | 0; //@line 3090
  HEAP32[$350 >> 2] = $40; //@line 3091
  $351 = $ReallocAsyncCtx3 + 76 | 0; //@line 3092
  HEAP32[$351 >> 2] = $42; //@line 3093
  $352 = $ReallocAsyncCtx3 + 80 | 0; //@line 3094
  HEAP32[$352 >> 2] = $44; //@line 3095
  $353 = $ReallocAsyncCtx3 + 84 | 0; //@line 3096
  HEAP8[$353 >> 0] = $119; //@line 3097
  $354 = $ReallocAsyncCtx3 + 88 | 0; //@line 3098
  HEAP32[$354 >> 2] = $46; //@line 3099
  $355 = $ReallocAsyncCtx3 + 92 | 0; //@line 3100
  HEAP32[$355 >> 2] = $48; //@line 3101
  $356 = $ReallocAsyncCtx3 + 96 | 0; //@line 3102
  HEAP32[$356 >> 2] = $50; //@line 3103
  $357 = $ReallocAsyncCtx3 + 100 | 0; //@line 3104
  HEAP32[$357 >> 2] = $52; //@line 3105
  $358 = $ReallocAsyncCtx3 + 104 | 0; //@line 3106
  HEAP32[$358 >> 2] = $54; //@line 3107
  $359 = $ReallocAsyncCtx3 + 108 | 0; //@line 3108
  HEAP32[$359 >> 2] = $56; //@line 3109
  $360 = $ReallocAsyncCtx3 + 112 | 0; //@line 3110
  HEAP32[$360 >> 2] = $58; //@line 3111
  $361 = $ReallocAsyncCtx3 + 116 | 0; //@line 3112
  HEAP32[$361 >> 2] = $60; //@line 3113
  $362 = $ReallocAsyncCtx3 + 120 | 0; //@line 3114
  HEAP32[$362 >> 2] = $62; //@line 3115
  $363 = $ReallocAsyncCtx3 + 124 | 0; //@line 3116
  HEAP32[$363 >> 2] = $64; //@line 3117
  $364 = $ReallocAsyncCtx3 + 128 | 0; //@line 3118
  HEAP32[$364 >> 2] = $66; //@line 3119
  $365 = $ReallocAsyncCtx3 + 132 | 0; //@line 3120
  HEAP32[$365 >> 2] = $68; //@line 3121
  $366 = $ReallocAsyncCtx3 + 136 | 0; //@line 3122
  HEAP32[$366 >> 2] = $70; //@line 3123
  $367 = $ReallocAsyncCtx3 + 140 | 0; //@line 3124
  HEAP32[$367 >> 2] = $72; //@line 3125
  $368 = $ReallocAsyncCtx3 + 144 | 0; //@line 3126
  HEAP32[$368 >> 2] = $74; //@line 3127
  $369 = $ReallocAsyncCtx3 + 148 | 0; //@line 3128
  HEAP32[$369 >> 2] = $76; //@line 3129
  $370 = $ReallocAsyncCtx3 + 152 | 0; //@line 3130
  HEAP32[$370 >> 2] = $78; //@line 3131
  $371 = $ReallocAsyncCtx3 + 156 | 0; //@line 3132
  HEAP32[$371 >> 2] = $80; //@line 3133
  $372 = $ReallocAsyncCtx3 + 160 | 0; //@line 3134
  HEAP32[$372 >> 2] = $82; //@line 3135
  $373 = $ReallocAsyncCtx3 + 164 | 0; //@line 3136
  HEAP32[$373 >> 2] = $84; //@line 3137
  $374 = $ReallocAsyncCtx3 + 168 | 0; //@line 3138
  HEAP32[$374 >> 2] = $86; //@line 3139
  $375 = $ReallocAsyncCtx3 + 172 | 0; //@line 3140
  HEAP32[$375 >> 2] = $88; //@line 3141
  $376 = $ReallocAsyncCtx3 + 176 | 0; //@line 3142
  HEAP32[$376 >> 2] = $90; //@line 3143
  $377 = $ReallocAsyncCtx3 + 180 | 0; //@line 3144
  HEAP32[$377 >> 2] = $92; //@line 3145
  $378 = $ReallocAsyncCtx3 + 184 | 0; //@line 3146
  HEAP32[$378 >> 2] = $94; //@line 3147
  $379 = $ReallocAsyncCtx3 + 188 | 0; //@line 3148
  HEAP32[$379 >> 2] = $96; //@line 3149
  $380 = $ReallocAsyncCtx3 + 192 | 0; //@line 3150
  HEAP32[$380 >> 2] = $98; //@line 3151
  $381 = $ReallocAsyncCtx3 + 196 | 0; //@line 3152
  HEAP32[$381 >> 2] = $100; //@line 3153
  $382 = $ReallocAsyncCtx3 + 200 | 0; //@line 3154
  HEAP32[$382 >> 2] = $102; //@line 3155
  $383 = $ReallocAsyncCtx3 + 204 | 0; //@line 3156
  HEAP32[$383 >> 2] = $104; //@line 3157
  $384 = $ReallocAsyncCtx3 + 208 | 0; //@line 3158
  HEAP32[$384 >> 2] = $106; //@line 3159
  $385 = $ReallocAsyncCtx3 + 212 | 0; //@line 3160
  HEAP32[$385 >> 2] = $108; //@line 3161
  $386 = $ReallocAsyncCtx3 + 216 | 0; //@line 3162
  HEAP32[$386 >> 2] = $110; //@line 3163
  $387 = $ReallocAsyncCtx3 + 220 | 0; //@line 3164
  HEAP32[$387 >> 2] = $112; //@line 3165
  $388 = $ReallocAsyncCtx3 + 224 | 0; //@line 3166
  HEAP32[$388 >> 2] = $114; //@line 3167
  $389 = $ReallocAsyncCtx3 + 228 | 0; //@line 3168
  HEAP32[$389 >> 2] = $116; //@line 3169
  sp = STACKTOP; //@line 3170
  return;
 } else if ((label | 0) == 23) {
  $409 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 3177
  HEAP32[$40 >> 2] = (HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 3198
  HEAP32[$38 >> 2] = 0; //@line 3199
  $430 = $$0$be + 6 << 24 >> 24; //@line 3200
  HEAP8[$88 >> 0] = HEAP8[$18 + ($$0$be + 5 & 255) >> 0] | 0; //@line 3204
  $436 = HEAP32[(HEAP32[$78 >> 2] | 0) + 8 >> 2] | 0; //@line 3207
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 3208
  $437 = FUNCTION_TABLE_iiii[$436 & 31]($54, $409, $110) | 0; //@line 3209
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 3212
   $438 = $ReallocAsyncCtx4 + 4 | 0; //@line 3213
   HEAP8[$438 >> 0] = $2; //@line 3214
   $439 = $ReallocAsyncCtx4 + 5 | 0; //@line 3215
   HEAP8[$439 >> 0] = $4; //@line 3216
   $440 = $ReallocAsyncCtx4 + 8 | 0; //@line 3217
   HEAP32[$440 >> 2] = $6; //@line 3218
   $441 = $ReallocAsyncCtx4 + 12 | 0; //@line 3219
   HEAP32[$441 >> 2] = $8; //@line 3220
   $442 = $ReallocAsyncCtx4 + 16 | 0; //@line 3221
   HEAP32[$442 >> 2] = $10; //@line 3222
   $443 = $ReallocAsyncCtx4 + 20 | 0; //@line 3223
   HEAP32[$443 >> 2] = $12; //@line 3224
   $444 = $ReallocAsyncCtx4 + 24 | 0; //@line 3225
   HEAP32[$444 >> 2] = $14; //@line 3226
   $445 = $ReallocAsyncCtx4 + 28 | 0; //@line 3227
   HEAP32[$445 >> 2] = $16; //@line 3228
   $446 = $ReallocAsyncCtx4 + 32 | 0; //@line 3229
   HEAP32[$446 >> 2] = $18; //@line 3230
   $447 = $ReallocAsyncCtx4 + 36 | 0; //@line 3231
   HEAP32[$447 >> 2] = $20; //@line 3232
   $448 = $ReallocAsyncCtx4 + 40 | 0; //@line 3233
   HEAP8[$448 >> 0] = $22; //@line 3234
   $449 = $ReallocAsyncCtx4 + 44 | 0; //@line 3235
   HEAP32[$449 >> 2] = $24; //@line 3236
   $450 = $ReallocAsyncCtx4 + 48 | 0; //@line 3237
   HEAP32[$450 >> 2] = $26; //@line 3238
   $451 = $ReallocAsyncCtx4 + 52 | 0; //@line 3239
   HEAP32[$451 >> 2] = $28; //@line 3240
   $452 = $ReallocAsyncCtx4 + 56 | 0; //@line 3241
   HEAP32[$452 >> 2] = $30; //@line 3242
   $453 = $ReallocAsyncCtx4 + 60 | 0; //@line 3243
   HEAP32[$453 >> 2] = $34; //@line 3244
   $454 = $ReallocAsyncCtx4 + 64 | 0; //@line 3245
   HEAP32[$454 >> 2] = $36; //@line 3246
   $455 = $ReallocAsyncCtx4 + 68 | 0; //@line 3247
   HEAP32[$455 >> 2] = $38; //@line 3248
   $456 = $ReallocAsyncCtx4 + 72 | 0; //@line 3249
   HEAP32[$456 >> 2] = $40; //@line 3250
   $457 = $ReallocAsyncCtx4 + 76 | 0; //@line 3251
   HEAP32[$457 >> 2] = $42; //@line 3252
   $458 = $ReallocAsyncCtx4 + 80 | 0; //@line 3253
   HEAP32[$458 >> 2] = $44; //@line 3254
   $459 = $ReallocAsyncCtx4 + 84 | 0; //@line 3255
   HEAP32[$459 >> 2] = $46; //@line 3256
   $460 = $ReallocAsyncCtx4 + 88 | 0; //@line 3257
   HEAP32[$460 >> 2] = $48; //@line 3258
   $461 = $ReallocAsyncCtx4 + 92 | 0; //@line 3259
   HEAP32[$461 >> 2] = $50; //@line 3260
   $462 = $ReallocAsyncCtx4 + 96 | 0; //@line 3261
   HEAP32[$462 >> 2] = $52; //@line 3262
   $463 = $ReallocAsyncCtx4 + 100 | 0; //@line 3263
   HEAP32[$463 >> 2] = $54; //@line 3264
   $464 = $ReallocAsyncCtx4 + 104 | 0; //@line 3265
   HEAP32[$464 >> 2] = $56; //@line 3266
   $465 = $ReallocAsyncCtx4 + 108 | 0; //@line 3267
   HEAP32[$465 >> 2] = $58; //@line 3268
   $466 = $ReallocAsyncCtx4 + 112 | 0; //@line 3269
   HEAP32[$466 >> 2] = $60; //@line 3270
   $467 = $ReallocAsyncCtx4 + 116 | 0; //@line 3271
   HEAP32[$467 >> 2] = $62; //@line 3272
   $468 = $ReallocAsyncCtx4 + 120 | 0; //@line 3273
   HEAP32[$468 >> 2] = $64; //@line 3274
   $469 = $ReallocAsyncCtx4 + 124 | 0; //@line 3275
   HEAP32[$469 >> 2] = $66; //@line 3276
   $470 = $ReallocAsyncCtx4 + 128 | 0; //@line 3277
   HEAP32[$470 >> 2] = $68; //@line 3278
   $471 = $ReallocAsyncCtx4 + 132 | 0; //@line 3279
   HEAP32[$471 >> 2] = $70; //@line 3280
   $472 = $ReallocAsyncCtx4 + 136 | 0; //@line 3281
   HEAP32[$472 >> 2] = $72; //@line 3282
   $473 = $ReallocAsyncCtx4 + 140 | 0; //@line 3283
   HEAP32[$473 >> 2] = $74; //@line 3284
   $474 = $ReallocAsyncCtx4 + 144 | 0; //@line 3285
   HEAP32[$474 >> 2] = $76; //@line 3286
   $475 = $ReallocAsyncCtx4 + 148 | 0; //@line 3287
   HEAP32[$475 >> 2] = $78; //@line 3288
   $476 = $ReallocAsyncCtx4 + 152 | 0; //@line 3289
   HEAP32[$476 >> 2] = $80; //@line 3290
   $477 = $ReallocAsyncCtx4 + 156 | 0; //@line 3291
   HEAP32[$477 >> 2] = $82; //@line 3292
   $478 = $ReallocAsyncCtx4 + 160 | 0; //@line 3293
   HEAP32[$478 >> 2] = $84; //@line 3294
   $479 = $ReallocAsyncCtx4 + 164 | 0; //@line 3295
   HEAP32[$479 >> 2] = $86; //@line 3296
   $480 = $ReallocAsyncCtx4 + 168 | 0; //@line 3297
   HEAP32[$480 >> 2] = $88; //@line 3298
   $481 = $ReallocAsyncCtx4 + 172 | 0; //@line 3299
   HEAP32[$481 >> 2] = $90; //@line 3300
   $482 = $ReallocAsyncCtx4 + 176 | 0; //@line 3301
   HEAP8[$482 >> 0] = $430; //@line 3302
   $483 = $ReallocAsyncCtx4 + 180 | 0; //@line 3303
   HEAP32[$483 >> 2] = $92; //@line 3304
   $484 = $ReallocAsyncCtx4 + 184 | 0; //@line 3305
   HEAP32[$484 >> 2] = $94; //@line 3306
   $485 = $ReallocAsyncCtx4 + 188 | 0; //@line 3307
   HEAP32[$485 >> 2] = $96; //@line 3308
   $486 = $ReallocAsyncCtx4 + 192 | 0; //@line 3309
   HEAP32[$486 >> 2] = $98; //@line 3310
   $487 = $ReallocAsyncCtx4 + 196 | 0; //@line 3311
   HEAP32[$487 >> 2] = $100; //@line 3312
   $488 = $ReallocAsyncCtx4 + 200 | 0; //@line 3313
   HEAP32[$488 >> 2] = $102; //@line 3314
   $489 = $ReallocAsyncCtx4 + 204 | 0; //@line 3315
   HEAP32[$489 >> 2] = $104; //@line 3316
   $490 = $ReallocAsyncCtx4 + 208 | 0; //@line 3317
   HEAP32[$490 >> 2] = $106; //@line 3318
   $491 = $ReallocAsyncCtx4 + 212 | 0; //@line 3319
   HEAP32[$491 >> 2] = $108; //@line 3320
   $492 = $ReallocAsyncCtx4 + 216 | 0; //@line 3321
   HEAP32[$492 >> 2] = $110; //@line 3322
   $493 = $ReallocAsyncCtx4 + 220 | 0; //@line 3323
   HEAP32[$493 >> 2] = $112; //@line 3324
   $494 = $ReallocAsyncCtx4 + 224 | 0; //@line 3325
   HEAP32[$494 >> 2] = $114; //@line 3326
   $495 = $ReallocAsyncCtx4 + 228 | 0; //@line 3327
   HEAP32[$495 >> 2] = $116; //@line 3328
   sp = STACKTOP; //@line 3329
   return;
  }
  HEAP8[___async_retval >> 0] = $437; //@line 3333
  ___async_unwind = 0; //@line 3334
  HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 3335
  $438 = $ReallocAsyncCtx4 + 4 | 0; //@line 3336
  HEAP8[$438 >> 0] = $2; //@line 3337
  $439 = $ReallocAsyncCtx4 + 5 | 0; //@line 3338
  HEAP8[$439 >> 0] = $4; //@line 3339
  $440 = $ReallocAsyncCtx4 + 8 | 0; //@line 3340
  HEAP32[$440 >> 2] = $6; //@line 3341
  $441 = $ReallocAsyncCtx4 + 12 | 0; //@line 3342
  HEAP32[$441 >> 2] = $8; //@line 3343
  $442 = $ReallocAsyncCtx4 + 16 | 0; //@line 3344
  HEAP32[$442 >> 2] = $10; //@line 3345
  $443 = $ReallocAsyncCtx4 + 20 | 0; //@line 3346
  HEAP32[$443 >> 2] = $12; //@line 3347
  $444 = $ReallocAsyncCtx4 + 24 | 0; //@line 3348
  HEAP32[$444 >> 2] = $14; //@line 3349
  $445 = $ReallocAsyncCtx4 + 28 | 0; //@line 3350
  HEAP32[$445 >> 2] = $16; //@line 3351
  $446 = $ReallocAsyncCtx4 + 32 | 0; //@line 3352
  HEAP32[$446 >> 2] = $18; //@line 3353
  $447 = $ReallocAsyncCtx4 + 36 | 0; //@line 3354
  HEAP32[$447 >> 2] = $20; //@line 3355
  $448 = $ReallocAsyncCtx4 + 40 | 0; //@line 3356
  HEAP8[$448 >> 0] = $22; //@line 3357
  $449 = $ReallocAsyncCtx4 + 44 | 0; //@line 3358
  HEAP32[$449 >> 2] = $24; //@line 3359
  $450 = $ReallocAsyncCtx4 + 48 | 0; //@line 3360
  HEAP32[$450 >> 2] = $26; //@line 3361
  $451 = $ReallocAsyncCtx4 + 52 | 0; //@line 3362
  HEAP32[$451 >> 2] = $28; //@line 3363
  $452 = $ReallocAsyncCtx4 + 56 | 0; //@line 3364
  HEAP32[$452 >> 2] = $30; //@line 3365
  $453 = $ReallocAsyncCtx4 + 60 | 0; //@line 3366
  HEAP32[$453 >> 2] = $34; //@line 3367
  $454 = $ReallocAsyncCtx4 + 64 | 0; //@line 3368
  HEAP32[$454 >> 2] = $36; //@line 3369
  $455 = $ReallocAsyncCtx4 + 68 | 0; //@line 3370
  HEAP32[$455 >> 2] = $38; //@line 3371
  $456 = $ReallocAsyncCtx4 + 72 | 0; //@line 3372
  HEAP32[$456 >> 2] = $40; //@line 3373
  $457 = $ReallocAsyncCtx4 + 76 | 0; //@line 3374
  HEAP32[$457 >> 2] = $42; //@line 3375
  $458 = $ReallocAsyncCtx4 + 80 | 0; //@line 3376
  HEAP32[$458 >> 2] = $44; //@line 3377
  $459 = $ReallocAsyncCtx4 + 84 | 0; //@line 3378
  HEAP32[$459 >> 2] = $46; //@line 3379
  $460 = $ReallocAsyncCtx4 + 88 | 0; //@line 3380
  HEAP32[$460 >> 2] = $48; //@line 3381
  $461 = $ReallocAsyncCtx4 + 92 | 0; //@line 3382
  HEAP32[$461 >> 2] = $50; //@line 3383
  $462 = $ReallocAsyncCtx4 + 96 | 0; //@line 3384
  HEAP32[$462 >> 2] = $52; //@line 3385
  $463 = $ReallocAsyncCtx4 + 100 | 0; //@line 3386
  HEAP32[$463 >> 2] = $54; //@line 3387
  $464 = $ReallocAsyncCtx4 + 104 | 0; //@line 3388
  HEAP32[$464 >> 2] = $56; //@line 3389
  $465 = $ReallocAsyncCtx4 + 108 | 0; //@line 3390
  HEAP32[$465 >> 2] = $58; //@line 3391
  $466 = $ReallocAsyncCtx4 + 112 | 0; //@line 3392
  HEAP32[$466 >> 2] = $60; //@line 3393
  $467 = $ReallocAsyncCtx4 + 116 | 0; //@line 3394
  HEAP32[$467 >> 2] = $62; //@line 3395
  $468 = $ReallocAsyncCtx4 + 120 | 0; //@line 3396
  HEAP32[$468 >> 2] = $64; //@line 3397
  $469 = $ReallocAsyncCtx4 + 124 | 0; //@line 3398
  HEAP32[$469 >> 2] = $66; //@line 3399
  $470 = $ReallocAsyncCtx4 + 128 | 0; //@line 3400
  HEAP32[$470 >> 2] = $68; //@line 3401
  $471 = $ReallocAsyncCtx4 + 132 | 0; //@line 3402
  HEAP32[$471 >> 2] = $70; //@line 3403
  $472 = $ReallocAsyncCtx4 + 136 | 0; //@line 3404
  HEAP32[$472 >> 2] = $72; //@line 3405
  $473 = $ReallocAsyncCtx4 + 140 | 0; //@line 3406
  HEAP32[$473 >> 2] = $74; //@line 3407
  $474 = $ReallocAsyncCtx4 + 144 | 0; //@line 3408
  HEAP32[$474 >> 2] = $76; //@line 3409
  $475 = $ReallocAsyncCtx4 + 148 | 0; //@line 3410
  HEAP32[$475 >> 2] = $78; //@line 3411
  $476 = $ReallocAsyncCtx4 + 152 | 0; //@line 3412
  HEAP32[$476 >> 2] = $80; //@line 3413
  $477 = $ReallocAsyncCtx4 + 156 | 0; //@line 3414
  HEAP32[$477 >> 2] = $82; //@line 3415
  $478 = $ReallocAsyncCtx4 + 160 | 0; //@line 3416
  HEAP32[$478 >> 2] = $84; //@line 3417
  $479 = $ReallocAsyncCtx4 + 164 | 0; //@line 3418
  HEAP32[$479 >> 2] = $86; //@line 3419
  $480 = $ReallocAsyncCtx4 + 168 | 0; //@line 3420
  HEAP32[$480 >> 2] = $88; //@line 3421
  $481 = $ReallocAsyncCtx4 + 172 | 0; //@line 3422
  HEAP32[$481 >> 2] = $90; //@line 3423
  $482 = $ReallocAsyncCtx4 + 176 | 0; //@line 3424
  HEAP8[$482 >> 0] = $430; //@line 3425
  $483 = $ReallocAsyncCtx4 + 180 | 0; //@line 3426
  HEAP32[$483 >> 2] = $92; //@line 3427
  $484 = $ReallocAsyncCtx4 + 184 | 0; //@line 3428
  HEAP32[$484 >> 2] = $94; //@line 3429
  $485 = $ReallocAsyncCtx4 + 188 | 0; //@line 3430
  HEAP32[$485 >> 2] = $96; //@line 3431
  $486 = $ReallocAsyncCtx4 + 192 | 0; //@line 3432
  HEAP32[$486 >> 2] = $98; //@line 3433
  $487 = $ReallocAsyncCtx4 + 196 | 0; //@line 3434
  HEAP32[$487 >> 2] = $100; //@line 3435
  $488 = $ReallocAsyncCtx4 + 200 | 0; //@line 3436
  HEAP32[$488 >> 2] = $102; //@line 3437
  $489 = $ReallocAsyncCtx4 + 204 | 0; //@line 3438
  HEAP32[$489 >> 2] = $104; //@line 3439
  $490 = $ReallocAsyncCtx4 + 208 | 0; //@line 3440
  HEAP32[$490 >> 2] = $106; //@line 3441
  $491 = $ReallocAsyncCtx4 + 212 | 0; //@line 3442
  HEAP32[$491 >> 2] = $108; //@line 3443
  $492 = $ReallocAsyncCtx4 + 216 | 0; //@line 3444
  HEAP32[$492 >> 2] = $110; //@line 3445
  $493 = $ReallocAsyncCtx4 + 220 | 0; //@line 3446
  HEAP32[$493 >> 2] = $112; //@line 3447
  $494 = $ReallocAsyncCtx4 + 224 | 0; //@line 3448
  HEAP32[$494 >> 2] = $114; //@line 3449
  $495 = $ReallocAsyncCtx4 + 228 | 0; //@line 3450
  HEAP32[$495 >> 2] = $116; //@line 3451
  sp = STACKTOP; //@line 3452
  return;
 } else if ((label | 0) == 29) {
  $516 = $$0$be + 2 << 24 >> 24; //@line 3456
  $520 = HEAPU8[$18 + ($119 & 255) >> 0] | 0; //@line 3460
  $522 = $520 >>> 5 & 1; //@line 3463
  $524 = $520 >>> 4 & 1; //@line 3466
  $527 = HEAP32[(HEAP32[$112 >> 2] | 0) + 44 >> 2] | 0; //@line 3469
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 3470
  $528 = FUNCTION_TABLE_iiii[$527 & 31]($54, $524, $522) | 0; //@line 3471
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 478; //@line 3474
   $529 = $ReallocAsyncCtx5 + 4 | 0; //@line 3475
   HEAP8[$529 >> 0] = $2; //@line 3476
   $530 = $ReallocAsyncCtx5 + 5 | 0; //@line 3477
   HEAP8[$530 >> 0] = $4; //@line 3478
   $531 = $ReallocAsyncCtx5 + 8 | 0; //@line 3479
   HEAP32[$531 >> 2] = $6; //@line 3480
   $532 = $ReallocAsyncCtx5 + 12 | 0; //@line 3481
   HEAP32[$532 >> 2] = $8; //@line 3482
   $533 = $ReallocAsyncCtx5 + 16 | 0; //@line 3483
   HEAP32[$533 >> 2] = $10; //@line 3484
   $534 = $ReallocAsyncCtx5 + 20 | 0; //@line 3485
   HEAP32[$534 >> 2] = $12; //@line 3486
   $535 = $ReallocAsyncCtx5 + 24 | 0; //@line 3487
   HEAP32[$535 >> 2] = $14; //@line 3488
   $536 = $ReallocAsyncCtx5 + 28 | 0; //@line 3489
   HEAP32[$536 >> 2] = $16; //@line 3490
   $537 = $ReallocAsyncCtx5 + 32 | 0; //@line 3491
   HEAP32[$537 >> 2] = $18; //@line 3492
   $538 = $ReallocAsyncCtx5 + 36 | 0; //@line 3493
   HEAP32[$538 >> 2] = $20; //@line 3494
   $539 = $ReallocAsyncCtx5 + 40 | 0; //@line 3495
   HEAP8[$539 >> 0] = $22; //@line 3496
   $540 = $ReallocAsyncCtx5 + 44 | 0; //@line 3497
   HEAP32[$540 >> 2] = $$0107$be; //@line 3498
   $541 = $ReallocAsyncCtx5 + 48 | 0; //@line 3499
   HEAP32[$541 >> 2] = $24; //@line 3500
   $542 = $ReallocAsyncCtx5 + 52 | 0; //@line 3501
   HEAP32[$542 >> 2] = $520; //@line 3502
   $543 = $ReallocAsyncCtx5 + 56 | 0; //@line 3503
   HEAP32[$543 >> 2] = $26; //@line 3504
   $544 = $ReallocAsyncCtx5 + 60 | 0; //@line 3505
   HEAP32[$544 >> 2] = $28; //@line 3506
   $545 = $ReallocAsyncCtx5 + 64 | 0; //@line 3507
   HEAP32[$545 >> 2] = $30; //@line 3508
   $546 = $ReallocAsyncCtx5 + 68 | 0; //@line 3509
   HEAP32[$546 >> 2] = $34; //@line 3510
   $547 = $ReallocAsyncCtx5 + 72 | 0; //@line 3511
   HEAP32[$547 >> 2] = $36; //@line 3512
   $548 = $ReallocAsyncCtx5 + 76 | 0; //@line 3513
   HEAP32[$548 >> 2] = $38; //@line 3514
   $549 = $ReallocAsyncCtx5 + 80 | 0; //@line 3515
   HEAP32[$549 >> 2] = $40; //@line 3516
   $550 = $ReallocAsyncCtx5 + 84 | 0; //@line 3517
   HEAP32[$550 >> 2] = $42; //@line 3518
   $551 = $ReallocAsyncCtx5 + 88 | 0; //@line 3519
   HEAP32[$551 >> 2] = $44; //@line 3520
   $552 = $ReallocAsyncCtx5 + 92 | 0; //@line 3521
   HEAP8[$552 >> 0] = $516; //@line 3522
   $553 = $ReallocAsyncCtx5 + 96 | 0; //@line 3523
   HEAP32[$553 >> 2] = $46; //@line 3524
   $554 = $ReallocAsyncCtx5 + 100 | 0; //@line 3525
   HEAP32[$554 >> 2] = $48; //@line 3526
   $555 = $ReallocAsyncCtx5 + 104 | 0; //@line 3527
   HEAP32[$555 >> 2] = $50; //@line 3528
   $556 = $ReallocAsyncCtx5 + 108 | 0; //@line 3529
   HEAP32[$556 >> 2] = $52; //@line 3530
   $557 = $ReallocAsyncCtx5 + 112 | 0; //@line 3531
   HEAP32[$557 >> 2] = $54; //@line 3532
   $558 = $ReallocAsyncCtx5 + 116 | 0; //@line 3533
   HEAP32[$558 >> 2] = $56; //@line 3534
   $559 = $ReallocAsyncCtx5 + 120 | 0; //@line 3535
   HEAP32[$559 >> 2] = $58; //@line 3536
   $560 = $ReallocAsyncCtx5 + 124 | 0; //@line 3537
   HEAP32[$560 >> 2] = $60; //@line 3538
   $561 = $ReallocAsyncCtx5 + 128 | 0; //@line 3539
   HEAP8[$561 >> 0] = $522; //@line 3540
   $562 = $ReallocAsyncCtx5 + 132 | 0; //@line 3541
   HEAP32[$562 >> 2] = $62; //@line 3542
   $563 = $ReallocAsyncCtx5 + 136 | 0; //@line 3543
   HEAP32[$563 >> 2] = $64; //@line 3544
   $564 = $ReallocAsyncCtx5 + 140 | 0; //@line 3545
   HEAP32[$564 >> 2] = $66; //@line 3546
   $565 = $ReallocAsyncCtx5 + 144 | 0; //@line 3547
   HEAP32[$565 >> 2] = $68; //@line 3548
   $566 = $ReallocAsyncCtx5 + 148 | 0; //@line 3549
   HEAP32[$566 >> 2] = $70; //@line 3550
   $567 = $ReallocAsyncCtx5 + 152 | 0; //@line 3551
   HEAP32[$567 >> 2] = $72; //@line 3552
   $568 = $ReallocAsyncCtx5 + 156 | 0; //@line 3553
   HEAP32[$568 >> 2] = $74; //@line 3554
   $569 = $ReallocAsyncCtx5 + 160 | 0; //@line 3555
   HEAP32[$569 >> 2] = $76; //@line 3556
   $570 = $ReallocAsyncCtx5 + 164 | 0; //@line 3557
   HEAP32[$570 >> 2] = $78; //@line 3558
   $571 = $ReallocAsyncCtx5 + 168 | 0; //@line 3559
   HEAP32[$571 >> 2] = $80; //@line 3560
   $572 = $ReallocAsyncCtx5 + 172 | 0; //@line 3561
   HEAP32[$572 >> 2] = $82; //@line 3562
   $573 = $ReallocAsyncCtx5 + 176 | 0; //@line 3563
   HEAP32[$573 >> 2] = $84; //@line 3564
   $574 = $ReallocAsyncCtx5 + 180 | 0; //@line 3565
   HEAP32[$574 >> 2] = $86; //@line 3566
   $575 = $ReallocAsyncCtx5 + 184 | 0; //@line 3567
   HEAP32[$575 >> 2] = $88; //@line 3568
   $576 = $ReallocAsyncCtx5 + 188 | 0; //@line 3569
   HEAP32[$576 >> 2] = $90; //@line 3570
   $577 = $ReallocAsyncCtx5 + 192 | 0; //@line 3571
   HEAP32[$577 >> 2] = $92; //@line 3572
   $578 = $ReallocAsyncCtx5 + 196 | 0; //@line 3573
   HEAP32[$578 >> 2] = $94; //@line 3574
   $579 = $ReallocAsyncCtx5 + 200 | 0; //@line 3575
   HEAP32[$579 >> 2] = $96; //@line 3576
   $580 = $ReallocAsyncCtx5 + 204 | 0; //@line 3577
   HEAP32[$580 >> 2] = $98; //@line 3578
   $581 = $ReallocAsyncCtx5 + 208 | 0; //@line 3579
   HEAP32[$581 >> 2] = $100; //@line 3580
   $582 = $ReallocAsyncCtx5 + 212 | 0; //@line 3581
   HEAP32[$582 >> 2] = $102; //@line 3582
   $583 = $ReallocAsyncCtx5 + 216 | 0; //@line 3583
   HEAP8[$583 >> 0] = $524; //@line 3584
   $584 = $ReallocAsyncCtx5 + 220 | 0; //@line 3585
   HEAP32[$584 >> 2] = $104; //@line 3586
   $585 = $ReallocAsyncCtx5 + 224 | 0; //@line 3587
   HEAP32[$585 >> 2] = $106; //@line 3588
   $586 = $ReallocAsyncCtx5 + 228 | 0; //@line 3589
   HEAP32[$586 >> 2] = $108; //@line 3590
   $587 = $ReallocAsyncCtx5 + 232 | 0; //@line 3591
   HEAP32[$587 >> 2] = $110; //@line 3592
   $588 = $ReallocAsyncCtx5 + 236 | 0; //@line 3593
   HEAP32[$588 >> 2] = $112; //@line 3594
   $589 = $ReallocAsyncCtx5 + 240 | 0; //@line 3595
   HEAP32[$589 >> 2] = $114; //@line 3596
   $590 = $ReallocAsyncCtx5 + 244 | 0; //@line 3597
   HEAP32[$590 >> 2] = $116; //@line 3598
   sp = STACKTOP; //@line 3599
   return;
  }
  HEAP8[___async_retval >> 0] = $528 & 1; //@line 3604
  ___async_unwind = 0; //@line 3605
  HEAP32[$ReallocAsyncCtx5 >> 2] = 478; //@line 3606
  $529 = $ReallocAsyncCtx5 + 4 | 0; //@line 3607
  HEAP8[$529 >> 0] = $2; //@line 3608
  $530 = $ReallocAsyncCtx5 + 5 | 0; //@line 3609
  HEAP8[$530 >> 0] = $4; //@line 3610
  $531 = $ReallocAsyncCtx5 + 8 | 0; //@line 3611
  HEAP32[$531 >> 2] = $6; //@line 3612
  $532 = $ReallocAsyncCtx5 + 12 | 0; //@line 3613
  HEAP32[$532 >> 2] = $8; //@line 3614
  $533 = $ReallocAsyncCtx5 + 16 | 0; //@line 3615
  HEAP32[$533 >> 2] = $10; //@line 3616
  $534 = $ReallocAsyncCtx5 + 20 | 0; //@line 3617
  HEAP32[$534 >> 2] = $12; //@line 3618
  $535 = $ReallocAsyncCtx5 + 24 | 0; //@line 3619
  HEAP32[$535 >> 2] = $14; //@line 3620
  $536 = $ReallocAsyncCtx5 + 28 | 0; //@line 3621
  HEAP32[$536 >> 2] = $16; //@line 3622
  $537 = $ReallocAsyncCtx5 + 32 | 0; //@line 3623
  HEAP32[$537 >> 2] = $18; //@line 3624
  $538 = $ReallocAsyncCtx5 + 36 | 0; //@line 3625
  HEAP32[$538 >> 2] = $20; //@line 3626
  $539 = $ReallocAsyncCtx5 + 40 | 0; //@line 3627
  HEAP8[$539 >> 0] = $22; //@line 3628
  $540 = $ReallocAsyncCtx5 + 44 | 0; //@line 3629
  HEAP32[$540 >> 2] = $$0107$be; //@line 3630
  $541 = $ReallocAsyncCtx5 + 48 | 0; //@line 3631
  HEAP32[$541 >> 2] = $24; //@line 3632
  $542 = $ReallocAsyncCtx5 + 52 | 0; //@line 3633
  HEAP32[$542 >> 2] = $520; //@line 3634
  $543 = $ReallocAsyncCtx5 + 56 | 0; //@line 3635
  HEAP32[$543 >> 2] = $26; //@line 3636
  $544 = $ReallocAsyncCtx5 + 60 | 0; //@line 3637
  HEAP32[$544 >> 2] = $28; //@line 3638
  $545 = $ReallocAsyncCtx5 + 64 | 0; //@line 3639
  HEAP32[$545 >> 2] = $30; //@line 3640
  $546 = $ReallocAsyncCtx5 + 68 | 0; //@line 3641
  HEAP32[$546 >> 2] = $34; //@line 3642
  $547 = $ReallocAsyncCtx5 + 72 | 0; //@line 3643
  HEAP32[$547 >> 2] = $36; //@line 3644
  $548 = $ReallocAsyncCtx5 + 76 | 0; //@line 3645
  HEAP32[$548 >> 2] = $38; //@line 3646
  $549 = $ReallocAsyncCtx5 + 80 | 0; //@line 3647
  HEAP32[$549 >> 2] = $40; //@line 3648
  $550 = $ReallocAsyncCtx5 + 84 | 0; //@line 3649
  HEAP32[$550 >> 2] = $42; //@line 3650
  $551 = $ReallocAsyncCtx5 + 88 | 0; //@line 3651
  HEAP32[$551 >> 2] = $44; //@line 3652
  $552 = $ReallocAsyncCtx5 + 92 | 0; //@line 3653
  HEAP8[$552 >> 0] = $516; //@line 3654
  $553 = $ReallocAsyncCtx5 + 96 | 0; //@line 3655
  HEAP32[$553 >> 2] = $46; //@line 3656
  $554 = $ReallocAsyncCtx5 + 100 | 0; //@line 3657
  HEAP32[$554 >> 2] = $48; //@line 3658
  $555 = $ReallocAsyncCtx5 + 104 | 0; //@line 3659
  HEAP32[$555 >> 2] = $50; //@line 3660
  $556 = $ReallocAsyncCtx5 + 108 | 0; //@line 3661
  HEAP32[$556 >> 2] = $52; //@line 3662
  $557 = $ReallocAsyncCtx5 + 112 | 0; //@line 3663
  HEAP32[$557 >> 2] = $54; //@line 3664
  $558 = $ReallocAsyncCtx5 + 116 | 0; //@line 3665
  HEAP32[$558 >> 2] = $56; //@line 3666
  $559 = $ReallocAsyncCtx5 + 120 | 0; //@line 3667
  HEAP32[$559 >> 2] = $58; //@line 3668
  $560 = $ReallocAsyncCtx5 + 124 | 0; //@line 3669
  HEAP32[$560 >> 2] = $60; //@line 3670
  $561 = $ReallocAsyncCtx5 + 128 | 0; //@line 3671
  HEAP8[$561 >> 0] = $522; //@line 3672
  $562 = $ReallocAsyncCtx5 + 132 | 0; //@line 3673
  HEAP32[$562 >> 2] = $62; //@line 3674
  $563 = $ReallocAsyncCtx5 + 136 | 0; //@line 3675
  HEAP32[$563 >> 2] = $64; //@line 3676
  $564 = $ReallocAsyncCtx5 + 140 | 0; //@line 3677
  HEAP32[$564 >> 2] = $66; //@line 3678
  $565 = $ReallocAsyncCtx5 + 144 | 0; //@line 3679
  HEAP32[$565 >> 2] = $68; //@line 3680
  $566 = $ReallocAsyncCtx5 + 148 | 0; //@line 3681
  HEAP32[$566 >> 2] = $70; //@line 3682
  $567 = $ReallocAsyncCtx5 + 152 | 0; //@line 3683
  HEAP32[$567 >> 2] = $72; //@line 3684
  $568 = $ReallocAsyncCtx5 + 156 | 0; //@line 3685
  HEAP32[$568 >> 2] = $74; //@line 3686
  $569 = $ReallocAsyncCtx5 + 160 | 0; //@line 3687
  HEAP32[$569 >> 2] = $76; //@line 3688
  $570 = $ReallocAsyncCtx5 + 164 | 0; //@line 3689
  HEAP32[$570 >> 2] = $78; //@line 3690
  $571 = $ReallocAsyncCtx5 + 168 | 0; //@line 3691
  HEAP32[$571 >> 2] = $80; //@line 3692
  $572 = $ReallocAsyncCtx5 + 172 | 0; //@line 3693
  HEAP32[$572 >> 2] = $82; //@line 3694
  $573 = $ReallocAsyncCtx5 + 176 | 0; //@line 3695
  HEAP32[$573 >> 2] = $84; //@line 3696
  $574 = $ReallocAsyncCtx5 + 180 | 0; //@line 3697
  HEAP32[$574 >> 2] = $86; //@line 3698
  $575 = $ReallocAsyncCtx5 + 184 | 0; //@line 3699
  HEAP32[$575 >> 2] = $88; //@line 3700
  $576 = $ReallocAsyncCtx5 + 188 | 0; //@line 3701
  HEAP32[$576 >> 2] = $90; //@line 3702
  $577 = $ReallocAsyncCtx5 + 192 | 0; //@line 3703
  HEAP32[$577 >> 2] = $92; //@line 3704
  $578 = $ReallocAsyncCtx5 + 196 | 0; //@line 3705
  HEAP32[$578 >> 2] = $94; //@line 3706
  $579 = $ReallocAsyncCtx5 + 200 | 0; //@line 3707
  HEAP32[$579 >> 2] = $96; //@line 3708
  $580 = $ReallocAsyncCtx5 + 204 | 0; //@line 3709
  HEAP32[$580 >> 2] = $98; //@line 3710
  $581 = $ReallocAsyncCtx5 + 208 | 0; //@line 3711
  HEAP32[$581 >> 2] = $100; //@line 3712
  $582 = $ReallocAsyncCtx5 + 212 | 0; //@line 3713
  HEAP32[$582 >> 2] = $102; //@line 3714
  $583 = $ReallocAsyncCtx5 + 216 | 0; //@line 3715
  HEAP8[$583 >> 0] = $524; //@line 3716
  $584 = $ReallocAsyncCtx5 + 220 | 0; //@line 3717
  HEAP32[$584 >> 2] = $104; //@line 3718
  $585 = $ReallocAsyncCtx5 + 224 | 0; //@line 3719
  HEAP32[$585 >> 2] = $106; //@line 3720
  $586 = $ReallocAsyncCtx5 + 228 | 0; //@line 3721
  HEAP32[$586 >> 2] = $108; //@line 3722
  $587 = $ReallocAsyncCtx5 + 232 | 0; //@line 3723
  HEAP32[$587 >> 2] = $110; //@line 3724
  $588 = $ReallocAsyncCtx5 + 236 | 0; //@line 3725
  HEAP32[$588 >> 2] = $112; //@line 3726
  $589 = $ReallocAsyncCtx5 + 240 | 0; //@line 3727
  HEAP32[$589 >> 2] = $114; //@line 3728
  $590 = $ReallocAsyncCtx5 + 244 | 0; //@line 3729
  HEAP32[$590 >> 2] = $116; //@line 3730
  sp = STACKTOP; //@line 3731
  return;
 } else if ((label | 0) == 32) {
  $595 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 3738
  $608 = $$0$be + 5 << 24 >> 24; //@line 3751
  $615 = (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 3758
  $618 = HEAP32[(HEAP32[$94 >> 2] | 0) + 48 >> 2] | 0; //@line 3761
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 3762
  $619 = FUNCTION_TABLE_iiii[$618 & 31]($54, $595, $615) | 0; //@line 3763
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 479; //@line 3766
   $620 = $ReallocAsyncCtx6 + 4 | 0; //@line 3767
   HEAP8[$620 >> 0] = $2; //@line 3768
   $621 = $ReallocAsyncCtx6 + 5 | 0; //@line 3769
   HEAP8[$621 >> 0] = $4; //@line 3770
   $622 = $ReallocAsyncCtx6 + 8 | 0; //@line 3771
   HEAP32[$622 >> 2] = $6; //@line 3772
   $623 = $ReallocAsyncCtx6 + 12 | 0; //@line 3773
   HEAP32[$623 >> 2] = $8; //@line 3774
   $624 = $ReallocAsyncCtx6 + 16 | 0; //@line 3775
   HEAP32[$624 >> 2] = $10; //@line 3776
   $625 = $ReallocAsyncCtx6 + 20 | 0; //@line 3777
   HEAP32[$625 >> 2] = $12; //@line 3778
   $626 = $ReallocAsyncCtx6 + 24 | 0; //@line 3779
   HEAP32[$626 >> 2] = $14; //@line 3780
   $627 = $ReallocAsyncCtx6 + 28 | 0; //@line 3781
   HEAP32[$627 >> 2] = $16; //@line 3782
   $628 = $ReallocAsyncCtx6 + 32 | 0; //@line 3783
   HEAP32[$628 >> 2] = $18; //@line 3784
   $629 = $ReallocAsyncCtx6 + 36 | 0; //@line 3785
   HEAP32[$629 >> 2] = $20; //@line 3786
   $630 = $ReallocAsyncCtx6 + 40 | 0; //@line 3787
   HEAP8[$630 >> 0] = $22; //@line 3788
   $631 = $ReallocAsyncCtx6 + 44 | 0; //@line 3789
   HEAP32[$631 >> 2] = $24; //@line 3790
   $632 = $ReallocAsyncCtx6 + 48 | 0; //@line 3791
   HEAP32[$632 >> 2] = $26; //@line 3792
   $633 = $ReallocAsyncCtx6 + 52 | 0; //@line 3793
   HEAP8[$633 >> 0] = $608; //@line 3794
   $634 = $ReallocAsyncCtx6 + 56 | 0; //@line 3795
   HEAP32[$634 >> 2] = $28; //@line 3796
   $635 = $ReallocAsyncCtx6 + 60 | 0; //@line 3797
   HEAP32[$635 >> 2] = $30; //@line 3798
   $636 = $ReallocAsyncCtx6 + 64 | 0; //@line 3799
   HEAP32[$636 >> 2] = $34; //@line 3800
   $637 = $ReallocAsyncCtx6 + 68 | 0; //@line 3801
   HEAP32[$637 >> 2] = $36; //@line 3802
   $638 = $ReallocAsyncCtx6 + 72 | 0; //@line 3803
   HEAP32[$638 >> 2] = $38; //@line 3804
   $639 = $ReallocAsyncCtx6 + 76 | 0; //@line 3805
   HEAP32[$639 >> 2] = $40; //@line 3806
   $640 = $ReallocAsyncCtx6 + 80 | 0; //@line 3807
   HEAP32[$640 >> 2] = $42; //@line 3808
   $641 = $ReallocAsyncCtx6 + 84 | 0; //@line 3809
   HEAP32[$641 >> 2] = $44; //@line 3810
   $642 = $ReallocAsyncCtx6 + 88 | 0; //@line 3811
   HEAP32[$642 >> 2] = $46; //@line 3812
   $643 = $ReallocAsyncCtx6 + 92 | 0; //@line 3813
   HEAP32[$643 >> 2] = $48; //@line 3814
   $644 = $ReallocAsyncCtx6 + 96 | 0; //@line 3815
   HEAP32[$644 >> 2] = $50; //@line 3816
   $645 = $ReallocAsyncCtx6 + 100 | 0; //@line 3817
   HEAP32[$645 >> 2] = $52; //@line 3818
   $646 = $ReallocAsyncCtx6 + 104 | 0; //@line 3819
   HEAP32[$646 >> 2] = $54; //@line 3820
   $647 = $ReallocAsyncCtx6 + 108 | 0; //@line 3821
   HEAP32[$647 >> 2] = $56; //@line 3822
   $648 = $ReallocAsyncCtx6 + 112 | 0; //@line 3823
   HEAP32[$648 >> 2] = $58; //@line 3824
   $649 = $ReallocAsyncCtx6 + 116 | 0; //@line 3825
   HEAP32[$649 >> 2] = $60; //@line 3826
   $650 = $ReallocAsyncCtx6 + 120 | 0; //@line 3827
   HEAP32[$650 >> 2] = $62; //@line 3828
   $651 = $ReallocAsyncCtx6 + 124 | 0; //@line 3829
   HEAP32[$651 >> 2] = $64; //@line 3830
   $652 = $ReallocAsyncCtx6 + 128 | 0; //@line 3831
   HEAP32[$652 >> 2] = $66; //@line 3832
   $653 = $ReallocAsyncCtx6 + 132 | 0; //@line 3833
   HEAP32[$653 >> 2] = $68; //@line 3834
   $654 = $ReallocAsyncCtx6 + 136 | 0; //@line 3835
   HEAP32[$654 >> 2] = $70; //@line 3836
   $655 = $ReallocAsyncCtx6 + 140 | 0; //@line 3837
   HEAP32[$655 >> 2] = $72; //@line 3838
   $656 = $ReallocAsyncCtx6 + 144 | 0; //@line 3839
   HEAP32[$656 >> 2] = $74; //@line 3840
   $657 = $ReallocAsyncCtx6 + 148 | 0; //@line 3841
   HEAP32[$657 >> 2] = $76; //@line 3842
   $658 = $ReallocAsyncCtx6 + 152 | 0; //@line 3843
   HEAP32[$658 >> 2] = $78; //@line 3844
   $659 = $ReallocAsyncCtx6 + 156 | 0; //@line 3845
   HEAP32[$659 >> 2] = $80; //@line 3846
   $660 = $ReallocAsyncCtx6 + 160 | 0; //@line 3847
   HEAP32[$660 >> 2] = $82; //@line 3848
   $661 = $ReallocAsyncCtx6 + 164 | 0; //@line 3849
   HEAP32[$661 >> 2] = $84; //@line 3850
   $662 = $ReallocAsyncCtx6 + 168 | 0; //@line 3851
   HEAP32[$662 >> 2] = $86; //@line 3852
   $663 = $ReallocAsyncCtx6 + 172 | 0; //@line 3853
   HEAP32[$663 >> 2] = $88; //@line 3854
   $664 = $ReallocAsyncCtx6 + 176 | 0; //@line 3855
   HEAP32[$664 >> 2] = $90; //@line 3856
   $665 = $ReallocAsyncCtx6 + 180 | 0; //@line 3857
   HEAP32[$665 >> 2] = $92; //@line 3858
   $666 = $ReallocAsyncCtx6 + 184 | 0; //@line 3859
   HEAP32[$666 >> 2] = $94; //@line 3860
   $667 = $ReallocAsyncCtx6 + 188 | 0; //@line 3861
   HEAP32[$667 >> 2] = $96; //@line 3862
   $668 = $ReallocAsyncCtx6 + 192 | 0; //@line 3863
   HEAP32[$668 >> 2] = $98; //@line 3864
   $669 = $ReallocAsyncCtx6 + 196 | 0; //@line 3865
   HEAP32[$669 >> 2] = $100; //@line 3866
   $670 = $ReallocAsyncCtx6 + 200 | 0; //@line 3867
   HEAP32[$670 >> 2] = $102; //@line 3868
   $671 = $ReallocAsyncCtx6 + 204 | 0; //@line 3869
   HEAP32[$671 >> 2] = $104; //@line 3870
   $672 = $ReallocAsyncCtx6 + 208 | 0; //@line 3871
   HEAP32[$672 >> 2] = $106; //@line 3872
   $673 = $ReallocAsyncCtx6 + 212 | 0; //@line 3873
   HEAP32[$673 >> 2] = $108; //@line 3874
   $674 = $ReallocAsyncCtx6 + 216 | 0; //@line 3875
   HEAP32[$674 >> 2] = $110; //@line 3876
   $675 = $ReallocAsyncCtx6 + 220 | 0; //@line 3877
   HEAP32[$675 >> 2] = $112; //@line 3878
   $676 = $ReallocAsyncCtx6 + 224 | 0; //@line 3879
   HEAP32[$676 >> 2] = $114; //@line 3880
   $677 = $ReallocAsyncCtx6 + 228 | 0; //@line 3881
   HEAP32[$677 >> 2] = $116; //@line 3882
   sp = STACKTOP; //@line 3883
   return;
  }
  HEAP8[___async_retval >> 0] = $619; //@line 3887
  ___async_unwind = 0; //@line 3888
  HEAP32[$ReallocAsyncCtx6 >> 2] = 479; //@line 3889
  $620 = $ReallocAsyncCtx6 + 4 | 0; //@line 3890
  HEAP8[$620 >> 0] = $2; //@line 3891
  $621 = $ReallocAsyncCtx6 + 5 | 0; //@line 3892
  HEAP8[$621 >> 0] = $4; //@line 3893
  $622 = $ReallocAsyncCtx6 + 8 | 0; //@line 3894
  HEAP32[$622 >> 2] = $6; //@line 3895
  $623 = $ReallocAsyncCtx6 + 12 | 0; //@line 3896
  HEAP32[$623 >> 2] = $8; //@line 3897
  $624 = $ReallocAsyncCtx6 + 16 | 0; //@line 3898
  HEAP32[$624 >> 2] = $10; //@line 3899
  $625 = $ReallocAsyncCtx6 + 20 | 0; //@line 3900
  HEAP32[$625 >> 2] = $12; //@line 3901
  $626 = $ReallocAsyncCtx6 + 24 | 0; //@line 3902
  HEAP32[$626 >> 2] = $14; //@line 3903
  $627 = $ReallocAsyncCtx6 + 28 | 0; //@line 3904
  HEAP32[$627 >> 2] = $16; //@line 3905
  $628 = $ReallocAsyncCtx6 + 32 | 0; //@line 3906
  HEAP32[$628 >> 2] = $18; //@line 3907
  $629 = $ReallocAsyncCtx6 + 36 | 0; //@line 3908
  HEAP32[$629 >> 2] = $20; //@line 3909
  $630 = $ReallocAsyncCtx6 + 40 | 0; //@line 3910
  HEAP8[$630 >> 0] = $22; //@line 3911
  $631 = $ReallocAsyncCtx6 + 44 | 0; //@line 3912
  HEAP32[$631 >> 2] = $24; //@line 3913
  $632 = $ReallocAsyncCtx6 + 48 | 0; //@line 3914
  HEAP32[$632 >> 2] = $26; //@line 3915
  $633 = $ReallocAsyncCtx6 + 52 | 0; //@line 3916
  HEAP8[$633 >> 0] = $608; //@line 3917
  $634 = $ReallocAsyncCtx6 + 56 | 0; //@line 3918
  HEAP32[$634 >> 2] = $28; //@line 3919
  $635 = $ReallocAsyncCtx6 + 60 | 0; //@line 3920
  HEAP32[$635 >> 2] = $30; //@line 3921
  $636 = $ReallocAsyncCtx6 + 64 | 0; //@line 3922
  HEAP32[$636 >> 2] = $34; //@line 3923
  $637 = $ReallocAsyncCtx6 + 68 | 0; //@line 3924
  HEAP32[$637 >> 2] = $36; //@line 3925
  $638 = $ReallocAsyncCtx6 + 72 | 0; //@line 3926
  HEAP32[$638 >> 2] = $38; //@line 3927
  $639 = $ReallocAsyncCtx6 + 76 | 0; //@line 3928
  HEAP32[$639 >> 2] = $40; //@line 3929
  $640 = $ReallocAsyncCtx6 + 80 | 0; //@line 3930
  HEAP32[$640 >> 2] = $42; //@line 3931
  $641 = $ReallocAsyncCtx6 + 84 | 0; //@line 3932
  HEAP32[$641 >> 2] = $44; //@line 3933
  $642 = $ReallocAsyncCtx6 + 88 | 0; //@line 3934
  HEAP32[$642 >> 2] = $46; //@line 3935
  $643 = $ReallocAsyncCtx6 + 92 | 0; //@line 3936
  HEAP32[$643 >> 2] = $48; //@line 3937
  $644 = $ReallocAsyncCtx6 + 96 | 0; //@line 3938
  HEAP32[$644 >> 2] = $50; //@line 3939
  $645 = $ReallocAsyncCtx6 + 100 | 0; //@line 3940
  HEAP32[$645 >> 2] = $52; //@line 3941
  $646 = $ReallocAsyncCtx6 + 104 | 0; //@line 3942
  HEAP32[$646 >> 2] = $54; //@line 3943
  $647 = $ReallocAsyncCtx6 + 108 | 0; //@line 3944
  HEAP32[$647 >> 2] = $56; //@line 3945
  $648 = $ReallocAsyncCtx6 + 112 | 0; //@line 3946
  HEAP32[$648 >> 2] = $58; //@line 3947
  $649 = $ReallocAsyncCtx6 + 116 | 0; //@line 3948
  HEAP32[$649 >> 2] = $60; //@line 3949
  $650 = $ReallocAsyncCtx6 + 120 | 0; //@line 3950
  HEAP32[$650 >> 2] = $62; //@line 3951
  $651 = $ReallocAsyncCtx6 + 124 | 0; //@line 3952
  HEAP32[$651 >> 2] = $64; //@line 3953
  $652 = $ReallocAsyncCtx6 + 128 | 0; //@line 3954
  HEAP32[$652 >> 2] = $66; //@line 3955
  $653 = $ReallocAsyncCtx6 + 132 | 0; //@line 3956
  HEAP32[$653 >> 2] = $68; //@line 3957
  $654 = $ReallocAsyncCtx6 + 136 | 0; //@line 3958
  HEAP32[$654 >> 2] = $70; //@line 3959
  $655 = $ReallocAsyncCtx6 + 140 | 0; //@line 3960
  HEAP32[$655 >> 2] = $72; //@line 3961
  $656 = $ReallocAsyncCtx6 + 144 | 0; //@line 3962
  HEAP32[$656 >> 2] = $74; //@line 3963
  $657 = $ReallocAsyncCtx6 + 148 | 0; //@line 3964
  HEAP32[$657 >> 2] = $76; //@line 3965
  $658 = $ReallocAsyncCtx6 + 152 | 0; //@line 3966
  HEAP32[$658 >> 2] = $78; //@line 3967
  $659 = $ReallocAsyncCtx6 + 156 | 0; //@line 3968
  HEAP32[$659 >> 2] = $80; //@line 3969
  $660 = $ReallocAsyncCtx6 + 160 | 0; //@line 3970
  HEAP32[$660 >> 2] = $82; //@line 3971
  $661 = $ReallocAsyncCtx6 + 164 | 0; //@line 3972
  HEAP32[$661 >> 2] = $84; //@line 3973
  $662 = $ReallocAsyncCtx6 + 168 | 0; //@line 3974
  HEAP32[$662 >> 2] = $86; //@line 3975
  $663 = $ReallocAsyncCtx6 + 172 | 0; //@line 3976
  HEAP32[$663 >> 2] = $88; //@line 3977
  $664 = $ReallocAsyncCtx6 + 176 | 0; //@line 3978
  HEAP32[$664 >> 2] = $90; //@line 3979
  $665 = $ReallocAsyncCtx6 + 180 | 0; //@line 3980
  HEAP32[$665 >> 2] = $92; //@line 3981
  $666 = $ReallocAsyncCtx6 + 184 | 0; //@line 3982
  HEAP32[$666 >> 2] = $94; //@line 3983
  $667 = $ReallocAsyncCtx6 + 188 | 0; //@line 3984
  HEAP32[$667 >> 2] = $96; //@line 3985
  $668 = $ReallocAsyncCtx6 + 192 | 0; //@line 3986
  HEAP32[$668 >> 2] = $98; //@line 3987
  $669 = $ReallocAsyncCtx6 + 196 | 0; //@line 3988
  HEAP32[$669 >> 2] = $100; //@line 3989
  $670 = $ReallocAsyncCtx6 + 200 | 0; //@line 3990
  HEAP32[$670 >> 2] = $102; //@line 3991
  $671 = $ReallocAsyncCtx6 + 204 | 0; //@line 3992
  HEAP32[$671 >> 2] = $104; //@line 3993
  $672 = $ReallocAsyncCtx6 + 208 | 0; //@line 3994
  HEAP32[$672 >> 2] = $106; //@line 3995
  $673 = $ReallocAsyncCtx6 + 212 | 0; //@line 3996
  HEAP32[$673 >> 2] = $108; //@line 3997
  $674 = $ReallocAsyncCtx6 + 216 | 0; //@line 3998
  HEAP32[$674 >> 2] = $110; //@line 3999
  $675 = $ReallocAsyncCtx6 + 220 | 0; //@line 4000
  HEAP32[$675 >> 2] = $112; //@line 4001
  $676 = $ReallocAsyncCtx6 + 224 | 0; //@line 4002
  HEAP32[$676 >> 2] = $114; //@line 4003
  $677 = $ReallocAsyncCtx6 + 228 | 0; //@line 4004
  HEAP32[$677 >> 2] = $116; //@line 4005
  sp = STACKTOP; //@line 4006
  return;
 } else if ((label | 0) == 35) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 4011
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$0107$be = 0, $$0109129 = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $121 = 0, $132 = 0, $133 = 0, $14 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $211 = 0, $214 = 0, $219 = 0, $22 = 0, $220 = 0, $226 = 0, $230 = 0, $233 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $337 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $403 = 0, $404 = 0, $418 = 0, $42 = 0, $439 = 0, $44 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $507 = 0, $511 = 0, $515 = 0, $52 = 0, $520 = 0, $521 = 0, $525 = 0, $529 = 0, $531 = 0, $533 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $604 = 0, $617 = 0, $62 = 0, $624 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $689 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 38
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 40
 $4 = HEAP8[$0 + 5 >> 0] | 0; //@line 42
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 44
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 46
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 48
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 50
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 52
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 54
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 56
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 58
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 60
 $24 = HEAP8[$0 + 44 >> 0] | 0; //@line 62
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 64
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 66
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 68
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 70
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 72
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 74
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 76
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 78
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 80
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 82
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 84
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 86
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 88
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 90
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 92
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 94
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 96
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 98
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 100
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 102
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 104
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 106
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 108
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 110
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 112
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 114
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 116
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 118
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 120
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 122
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 124
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 126
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 128
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 130
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 132
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 134
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 136
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 138
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 140
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 142
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 144
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 146
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 148
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 150
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 152
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 154
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 156
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 158
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$76 >> 0] = HEAP8[$12 >> 0] | 0; //@line 163
  HEAP8[$94 >> 0] = HEAP8[$82 >> 0] | 0; //@line 165
  HEAP8[$26 >> 0] = HEAP8[$78 >> 0] | 0; //@line 167
 }
 $211 = HEAP8[$70 >> 0] | 0; //@line 169
 if (($211 & 255) > 4) {
  $div = ($211 & 255) / 5 | 0; //@line 172
  $214 = 128 - (HEAPU8[$20 >> 0] | 0) | 0; //@line 176
  $$0109129 = 0; //@line 177
  $220 = HEAP8[$54 >> 0] | 0; //@line 177
  while (1) {
   $219 = $220 & 255; //@line 179
   if (($214 - $219 | 0) > 1) {
    $226 = $220 + 2 << 24 >> 24; //@line 186
    HEAP8[$14 + 4 + $219 >> 0] = 3; //@line 188
    HEAP8[$54 >> 0] = $226; //@line 189
    HEAP8[($220 + 1 & 255) + ($14 + 4) >> 0] = $AsyncRetVal; //@line 190
    HEAP8[$60 >> 0] = 1; //@line 191
    $$0$i = 0; //@line 192
    $689 = $226; //@line 192
   } else {
    $$0$i = -1010; //@line 194
    $689 = $220; //@line 194
   }
   $$0109129 = $$0109129 + 1 << 24 >> 24; //@line 196
   if (($$0109129 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 201
    break;
   } else {
    $220 = $689; //@line 199
   }
  }
 } else {
  $$1$lcssa = $22; //@line 206
 }
 $$0$be = $28 + 255 + ($211 & 255) & 255; //@line 212
 $$0107$be = $$1$lcssa; //@line 212
 L13 : while (1) {
  if (($$0$be & 255) >= ($2 & 255)) {
   label = 38; //@line 216
   break;
  }
  $121 = $$0$be + 1 << 24 >> 24; //@line 220
  switch (HEAP8[$18 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 225
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 230
    break L13;
    break;
   }
  case 7:
   {
    label = 26; //@line 235
    break L13;
    break;
   }
  case 9:
   {
    label = 32; //@line 240
    break L13;
    break;
   }
  case 10:
   {
    label = 35; //@line 245
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$30 >> 2] = 0; //@line 250
    HEAP8[$6 >> 0] = HEAP8[$18 + ($121 & 255) >> 0] | 0; //@line 255
    HEAP8[$10 >> 0] = HEAP8[$18 + ($$0$be + 2 & 255) >> 0] | 0; //@line 260
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 261
    continue L13;
    break;
   }
  case 4:
   {
    $230 = $$0$be + 2 << 24 >> 24; //@line 266
    $233 = HEAP8[$18 + ($121 & 255) >> 0] | 0; //@line 269
    HEAP8[$38 >> 0] = $233; //@line 270
    HEAP16[$46 >> 1] = 1 << ($233 & 255); //@line 274
    $240 = HEAP8[$54 >> 0] | 0; //@line 278
    $241 = $240 & 255; //@line 279
    if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) <= ($241 | 0)) {
     $$0$be = $230; //@line 282
     $$0107$be = -1010; //@line 282
     continue L13;
    }
    HEAP8[$54 >> 0] = $240 + 1 << 24 >> 24; //@line 287
    HEAP8[$14 + 4 + $241 >> 0] = 4; //@line 288
    HEAP8[$60 >> 0] = 1; //@line 289
    $$0$be = $230; //@line 290
    $$0107$be = 0; //@line 290
    continue L13;
    break;
   }
  case 6:
   {
    $337 = HEAP32[$16 >> 2] | 0; //@line 295
    if ($337 | 0) {
     label = 21; //@line 298
     break L13;
    }
    $403 = HEAP8[$54 >> 0] | 0; //@line 304
    $404 = $403 & 255; //@line 305
    if ((128 - (HEAPU8[$20 >> 0] | 0) - $404 | 0) <= 2) {
     $$0$be = $121; //@line 309
     $$0107$be = -1010; //@line 309
     continue L13;
    }
    HEAP8[$14 + 4 + $404 >> 0] = 6; //@line 314
    HEAP8[($403 + 1 & 255) + ($14 + 4) >> 0] = -1; //@line 318
    HEAP8[$54 >> 0] = $403 + 3 << 24 >> 24; //@line 320
    HEAP8[($403 + 2 & 255) + ($14 + 4) >> 0] = $4; //@line 323
    HEAP8[$60 >> 0] = 1; //@line 324
    $$0$be = $121; //@line 325
    $$0107$be = 0; //@line 325
    continue L13;
    break;
   }
  case 8:
   {
    $507 = $$0$be + 2 << 24 >> 24; //@line 330
    $511 = HEAP8[$18 + ($121 & 255) >> 0] & 15; //@line 334
    $515 = ($511 + ($511 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 339
    HEAP32[$74 >> 2] = $515; //@line 340
    HEAP32[$68 >> 2] = $515 + 1e3; //@line 342
    $520 = HEAP8[$54 >> 0] | 0; //@line 346
    $521 = $520 & 255; //@line 347
    if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) <= ($521 | 0)) {
     $$0$be = $507; //@line 350
     $$0107$be = -1010; //@line 350
     continue L13;
    }
    HEAP8[$54 >> 0] = $520 + 1 << 24 >> 24; //@line 355
    HEAP8[$14 + 4 + $521 >> 0] = 8; //@line 356
    HEAP8[$34 >> 0] = 1; //@line 357
    HEAP8[$60 >> 0] = 1; //@line 358
    $$0$be = $507; //@line 359
    $$0107$be = 0; //@line 359
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $121; //@line 364
    $$0107$be = -1013; //@line 364
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$12 >> 0] = 0; //@line 370
  HEAP8[$82 >> 0] = 0; //@line 371
  HEAP8[$78 >> 0] = 0; //@line 372
  HEAP8[$70 >> 0] = 0; //@line 373
  $132 = $121 & 255; //@line 374
  $133 = $132 + -1 | 0; //@line 375
  HEAP32[$58 >> 2] = $18 + $133; //@line 377
  HEAP8[$36 >> 0] = $116 - $133; //@line 380
  HEAP8[$84 >> 0] = HEAP8[$44 >> 0] | 0; //@line 382
  HEAP8[$66 >> 0] = HEAP8[$86 >> 0] | 0; //@line 384
  HEAP8[$108 >> 0] = HEAP8[$76 >> 0] | 0; //@line 386
  HEAP8[$104 >> 0] = HEAP8[$94 >> 0] | 0; //@line 388
  HEAP8[$32 >> 0] = HEAP8[$26 >> 0] | 0; //@line 390
  $144 = HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] | 0; //@line 393
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 394
  $145 = FUNCTION_TABLE_iiiiiii[$144 & 3]($56, $50, $12, $82, $78, $70) | 0; //@line 395
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 474; //@line 398
   $146 = $ReallocAsyncCtx + 4 | 0; //@line 399
   HEAP8[$146 >> 0] = $2; //@line 400
   $147 = $ReallocAsyncCtx + 5 | 0; //@line 401
   HEAP8[$147 >> 0] = $4; //@line 402
   $148 = $ReallocAsyncCtx + 8 | 0; //@line 403
   HEAP32[$148 >> 2] = $6; //@line 404
   $149 = $ReallocAsyncCtx + 12 | 0; //@line 405
   HEAP32[$149 >> 2] = $8; //@line 406
   $150 = $ReallocAsyncCtx + 16 | 0; //@line 407
   HEAP32[$150 >> 2] = $10; //@line 408
   $151 = $ReallocAsyncCtx + 20 | 0; //@line 409
   HEAP32[$151 >> 2] = $12; //@line 410
   $152 = $ReallocAsyncCtx + 24 | 0; //@line 411
   HEAP32[$152 >> 2] = $14; //@line 412
   $153 = $ReallocAsyncCtx + 28 | 0; //@line 413
   HEAP32[$153 >> 2] = $16; //@line 414
   $154 = $ReallocAsyncCtx + 32 | 0; //@line 415
   HEAP32[$154 >> 2] = $18; //@line 416
   $155 = $ReallocAsyncCtx + 36 | 0; //@line 417
   HEAP32[$155 >> 2] = $20; //@line 418
   $156 = $ReallocAsyncCtx + 40 | 0; //@line 419
   HEAP32[$156 >> 2] = $$0107$be; //@line 420
   $157 = $ReallocAsyncCtx + 44 | 0; //@line 421
   HEAP8[$157 >> 0] = $24; //@line 422
   $158 = $ReallocAsyncCtx + 48 | 0; //@line 423
   HEAP32[$158 >> 2] = $26; //@line 424
   $159 = $ReallocAsyncCtx + 52 | 0; //@line 425
   HEAP32[$159 >> 2] = $132; //@line 426
   $160 = $ReallocAsyncCtx + 56 | 0; //@line 427
   HEAP32[$160 >> 2] = $30; //@line 428
   $161 = $ReallocAsyncCtx + 60 | 0; //@line 429
   HEAP32[$161 >> 2] = $32; //@line 430
   $162 = $ReallocAsyncCtx + 64 | 0; //@line 431
   HEAP32[$162 >> 2] = $34; //@line 432
   $163 = $ReallocAsyncCtx + 68 | 0; //@line 433
   HEAP32[$163 >> 2] = $36; //@line 434
   $164 = $ReallocAsyncCtx + 72 | 0; //@line 435
   HEAP32[$164 >> 2] = $38; //@line 436
   $165 = $ReallocAsyncCtx + 76 | 0; //@line 437
   HEAP32[$165 >> 2] = $40; //@line 438
   $166 = $ReallocAsyncCtx + 80 | 0; //@line 439
   HEAP32[$166 >> 2] = $42; //@line 440
   $167 = $ReallocAsyncCtx + 84 | 0; //@line 441
   HEAP32[$167 >> 2] = $44; //@line 442
   $168 = $ReallocAsyncCtx + 88 | 0; //@line 443
   HEAP32[$168 >> 2] = $46; //@line 444
   $169 = $ReallocAsyncCtx + 92 | 0; //@line 445
   HEAP32[$169 >> 2] = $48; //@line 446
   $170 = $ReallocAsyncCtx + 96 | 0; //@line 447
   HEAP32[$170 >> 2] = $50; //@line 448
   $171 = $ReallocAsyncCtx + 100 | 0; //@line 449
   HEAP32[$171 >> 2] = $52; //@line 450
   $172 = $ReallocAsyncCtx + 104 | 0; //@line 451
   HEAP32[$172 >> 2] = $54; //@line 452
   $173 = $ReallocAsyncCtx + 108 | 0; //@line 453
   HEAP32[$173 >> 2] = $56; //@line 454
   $174 = $ReallocAsyncCtx + 112 | 0; //@line 455
   HEAP32[$174 >> 2] = $58; //@line 456
   $175 = $ReallocAsyncCtx + 116 | 0; //@line 457
   HEAP32[$175 >> 2] = $60; //@line 458
   $176 = $ReallocAsyncCtx + 120 | 0; //@line 459
   HEAP32[$176 >> 2] = $62; //@line 460
   $177 = $ReallocAsyncCtx + 124 | 0; //@line 461
   HEAP32[$177 >> 2] = $64; //@line 462
   $178 = $ReallocAsyncCtx + 128 | 0; //@line 463
   HEAP32[$178 >> 2] = $66; //@line 464
   $179 = $ReallocAsyncCtx + 132 | 0; //@line 465
   HEAP32[$179 >> 2] = $68; //@line 466
   $180 = $ReallocAsyncCtx + 136 | 0; //@line 467
   HEAP32[$180 >> 2] = $70; //@line 468
   $181 = $ReallocAsyncCtx + 140 | 0; //@line 469
   HEAP32[$181 >> 2] = $72; //@line 470
   $182 = $ReallocAsyncCtx + 144 | 0; //@line 471
   HEAP32[$182 >> 2] = $74; //@line 472
   $183 = $ReallocAsyncCtx + 148 | 0; //@line 473
   HEAP32[$183 >> 2] = $76; //@line 474
   $184 = $ReallocAsyncCtx + 152 | 0; //@line 475
   HEAP32[$184 >> 2] = $78; //@line 476
   $185 = $ReallocAsyncCtx + 156 | 0; //@line 477
   HEAP32[$185 >> 2] = $80; //@line 478
   $186 = $ReallocAsyncCtx + 160 | 0; //@line 479
   HEAP32[$186 >> 2] = $82; //@line 480
   $187 = $ReallocAsyncCtx + 164 | 0; //@line 481
   HEAP32[$187 >> 2] = $84; //@line 482
   $188 = $ReallocAsyncCtx + 168 | 0; //@line 483
   HEAP32[$188 >> 2] = $86; //@line 484
   $189 = $ReallocAsyncCtx + 172 | 0; //@line 485
   HEAP32[$189 >> 2] = $88; //@line 486
   $190 = $ReallocAsyncCtx + 176 | 0; //@line 487
   HEAP32[$190 >> 2] = $90; //@line 488
   $191 = $ReallocAsyncCtx + 180 | 0; //@line 489
   HEAP32[$191 >> 2] = $92; //@line 490
   $192 = $ReallocAsyncCtx + 184 | 0; //@line 491
   HEAP32[$192 >> 2] = $94; //@line 492
   $193 = $ReallocAsyncCtx + 188 | 0; //@line 493
   HEAP32[$193 >> 2] = $96; //@line 494
   $194 = $ReallocAsyncCtx + 192 | 0; //@line 495
   HEAP32[$194 >> 2] = $98; //@line 496
   $195 = $ReallocAsyncCtx + 196 | 0; //@line 497
   HEAP32[$195 >> 2] = $100; //@line 498
   $196 = $ReallocAsyncCtx + 200 | 0; //@line 499
   HEAP32[$196 >> 2] = $102; //@line 500
   $197 = $ReallocAsyncCtx + 204 | 0; //@line 501
   HEAP32[$197 >> 2] = $104; //@line 502
   $198 = $ReallocAsyncCtx + 208 | 0; //@line 503
   HEAP32[$198 >> 2] = $106; //@line 504
   $199 = $ReallocAsyncCtx + 212 | 0; //@line 505
   HEAP32[$199 >> 2] = $108; //@line 506
   $200 = $ReallocAsyncCtx + 216 | 0; //@line 507
   HEAP32[$200 >> 2] = $110; //@line 508
   $201 = $ReallocAsyncCtx + 220 | 0; //@line 509
   HEAP32[$201 >> 2] = $112; //@line 510
   $202 = $ReallocAsyncCtx + 224 | 0; //@line 511
   HEAP32[$202 >> 2] = $114; //@line 512
   $203 = $ReallocAsyncCtx + 228 | 0; //@line 513
   HEAP32[$203 >> 2] = $116; //@line 514
   $204 = $ReallocAsyncCtx + 232 | 0; //@line 515
   HEAP32[$204 >> 2] = $118; //@line 516
   sp = STACKTOP; //@line 517
   return;
  }
  HEAP8[___async_retval >> 0] = $145; //@line 521
  ___async_unwind = 0; //@line 522
  HEAP32[$ReallocAsyncCtx >> 2] = 474; //@line 523
  $146 = $ReallocAsyncCtx + 4 | 0; //@line 524
  HEAP8[$146 >> 0] = $2; //@line 525
  $147 = $ReallocAsyncCtx + 5 | 0; //@line 526
  HEAP8[$147 >> 0] = $4; //@line 527
  $148 = $ReallocAsyncCtx + 8 | 0; //@line 528
  HEAP32[$148 >> 2] = $6; //@line 529
  $149 = $ReallocAsyncCtx + 12 | 0; //@line 530
  HEAP32[$149 >> 2] = $8; //@line 531
  $150 = $ReallocAsyncCtx + 16 | 0; //@line 532
  HEAP32[$150 >> 2] = $10; //@line 533
  $151 = $ReallocAsyncCtx + 20 | 0; //@line 534
  HEAP32[$151 >> 2] = $12; //@line 535
  $152 = $ReallocAsyncCtx + 24 | 0; //@line 536
  HEAP32[$152 >> 2] = $14; //@line 537
  $153 = $ReallocAsyncCtx + 28 | 0; //@line 538
  HEAP32[$153 >> 2] = $16; //@line 539
  $154 = $ReallocAsyncCtx + 32 | 0; //@line 540
  HEAP32[$154 >> 2] = $18; //@line 541
  $155 = $ReallocAsyncCtx + 36 | 0; //@line 542
  HEAP32[$155 >> 2] = $20; //@line 543
  $156 = $ReallocAsyncCtx + 40 | 0; //@line 544
  HEAP32[$156 >> 2] = $$0107$be; //@line 545
  $157 = $ReallocAsyncCtx + 44 | 0; //@line 546
  HEAP8[$157 >> 0] = $24; //@line 547
  $158 = $ReallocAsyncCtx + 48 | 0; //@line 548
  HEAP32[$158 >> 2] = $26; //@line 549
  $159 = $ReallocAsyncCtx + 52 | 0; //@line 550
  HEAP32[$159 >> 2] = $132; //@line 551
  $160 = $ReallocAsyncCtx + 56 | 0; //@line 552
  HEAP32[$160 >> 2] = $30; //@line 553
  $161 = $ReallocAsyncCtx + 60 | 0; //@line 554
  HEAP32[$161 >> 2] = $32; //@line 555
  $162 = $ReallocAsyncCtx + 64 | 0; //@line 556
  HEAP32[$162 >> 2] = $34; //@line 557
  $163 = $ReallocAsyncCtx + 68 | 0; //@line 558
  HEAP32[$163 >> 2] = $36; //@line 559
  $164 = $ReallocAsyncCtx + 72 | 0; //@line 560
  HEAP32[$164 >> 2] = $38; //@line 561
  $165 = $ReallocAsyncCtx + 76 | 0; //@line 562
  HEAP32[$165 >> 2] = $40; //@line 563
  $166 = $ReallocAsyncCtx + 80 | 0; //@line 564
  HEAP32[$166 >> 2] = $42; //@line 565
  $167 = $ReallocAsyncCtx + 84 | 0; //@line 566
  HEAP32[$167 >> 2] = $44; //@line 567
  $168 = $ReallocAsyncCtx + 88 | 0; //@line 568
  HEAP32[$168 >> 2] = $46; //@line 569
  $169 = $ReallocAsyncCtx + 92 | 0; //@line 570
  HEAP32[$169 >> 2] = $48; //@line 571
  $170 = $ReallocAsyncCtx + 96 | 0; //@line 572
  HEAP32[$170 >> 2] = $50; //@line 573
  $171 = $ReallocAsyncCtx + 100 | 0; //@line 574
  HEAP32[$171 >> 2] = $52; //@line 575
  $172 = $ReallocAsyncCtx + 104 | 0; //@line 576
  HEAP32[$172 >> 2] = $54; //@line 577
  $173 = $ReallocAsyncCtx + 108 | 0; //@line 578
  HEAP32[$173 >> 2] = $56; //@line 579
  $174 = $ReallocAsyncCtx + 112 | 0; //@line 580
  HEAP32[$174 >> 2] = $58; //@line 581
  $175 = $ReallocAsyncCtx + 116 | 0; //@line 582
  HEAP32[$175 >> 2] = $60; //@line 583
  $176 = $ReallocAsyncCtx + 120 | 0; //@line 584
  HEAP32[$176 >> 2] = $62; //@line 585
  $177 = $ReallocAsyncCtx + 124 | 0; //@line 586
  HEAP32[$177 >> 2] = $64; //@line 587
  $178 = $ReallocAsyncCtx + 128 | 0; //@line 588
  HEAP32[$178 >> 2] = $66; //@line 589
  $179 = $ReallocAsyncCtx + 132 | 0; //@line 590
  HEAP32[$179 >> 2] = $68; //@line 591
  $180 = $ReallocAsyncCtx + 136 | 0; //@line 592
  HEAP32[$180 >> 2] = $70; //@line 593
  $181 = $ReallocAsyncCtx + 140 | 0; //@line 594
  HEAP32[$181 >> 2] = $72; //@line 595
  $182 = $ReallocAsyncCtx + 144 | 0; //@line 596
  HEAP32[$182 >> 2] = $74; //@line 597
  $183 = $ReallocAsyncCtx + 148 | 0; //@line 598
  HEAP32[$183 >> 2] = $76; //@line 599
  $184 = $ReallocAsyncCtx + 152 | 0; //@line 600
  HEAP32[$184 >> 2] = $78; //@line 601
  $185 = $ReallocAsyncCtx + 156 | 0; //@line 602
  HEAP32[$185 >> 2] = $80; //@line 603
  $186 = $ReallocAsyncCtx + 160 | 0; //@line 604
  HEAP32[$186 >> 2] = $82; //@line 605
  $187 = $ReallocAsyncCtx + 164 | 0; //@line 606
  HEAP32[$187 >> 2] = $84; //@line 607
  $188 = $ReallocAsyncCtx + 168 | 0; //@line 608
  HEAP32[$188 >> 2] = $86; //@line 609
  $189 = $ReallocAsyncCtx + 172 | 0; //@line 610
  HEAP32[$189 >> 2] = $88; //@line 611
  $190 = $ReallocAsyncCtx + 176 | 0; //@line 612
  HEAP32[$190 >> 2] = $90; //@line 613
  $191 = $ReallocAsyncCtx + 180 | 0; //@line 614
  HEAP32[$191 >> 2] = $92; //@line 615
  $192 = $ReallocAsyncCtx + 184 | 0; //@line 616
  HEAP32[$192 >> 2] = $94; //@line 617
  $193 = $ReallocAsyncCtx + 188 | 0; //@line 618
  HEAP32[$193 >> 2] = $96; //@line 619
  $194 = $ReallocAsyncCtx + 192 | 0; //@line 620
  HEAP32[$194 >> 2] = $98; //@line 621
  $195 = $ReallocAsyncCtx + 196 | 0; //@line 622
  HEAP32[$195 >> 2] = $100; //@line 623
  $196 = $ReallocAsyncCtx + 200 | 0; //@line 624
  HEAP32[$196 >> 2] = $102; //@line 625
  $197 = $ReallocAsyncCtx + 204 | 0; //@line 626
  HEAP32[$197 >> 2] = $104; //@line 627
  $198 = $ReallocAsyncCtx + 208 | 0; //@line 628
  HEAP32[$198 >> 2] = $106; //@line 629
  $199 = $ReallocAsyncCtx + 212 | 0; //@line 630
  HEAP32[$199 >> 2] = $108; //@line 631
  $200 = $ReallocAsyncCtx + 216 | 0; //@line 632
  HEAP32[$200 >> 2] = $110; //@line 633
  $201 = $ReallocAsyncCtx + 220 | 0; //@line 634
  HEAP32[$201 >> 2] = $112; //@line 635
  $202 = $ReallocAsyncCtx + 224 | 0; //@line 636
  HEAP32[$202 >> 2] = $114; //@line 637
  $203 = $ReallocAsyncCtx + 228 | 0; //@line 638
  HEAP32[$203 >> 2] = $116; //@line 639
  $204 = $ReallocAsyncCtx + 232 | 0; //@line 640
  HEAP32[$204 >> 2] = $118; //@line 641
  sp = STACKTOP; //@line 642
  return;
 } else if ((label | 0) == 17) {
  $247 = HEAP8[$18 + ($121 & 255) >> 0] | 0; //@line 648
  HEAP8[$88 >> 0] = ($247 & 255) >>> 4 & 7; //@line 653
  HEAP8[$92 >> 0] = $247 & 15; //@line 655
  $266 = $$0$be + 5 << 24 >> 24; //@line 669
  HEAP32[$64 >> 2] = (HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 677
  $276 = HEAP32[(HEAP32[$72 >> 2] | 0) + 40 >> 2] | 0; //@line 680
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 681
  $277 = FUNCTION_TABLE_iii[$276 & 31]($56, $118) | 0; //@line 682
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 475; //@line 685
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 686
   HEAP8[$278 >> 0] = $2; //@line 687
   $279 = $ReallocAsyncCtx2 + 5 | 0; //@line 688
   HEAP8[$279 >> 0] = $4; //@line 689
   $280 = $ReallocAsyncCtx2 + 8 | 0; //@line 690
   HEAP32[$280 >> 2] = $6; //@line 691
   $281 = $ReallocAsyncCtx2 + 12 | 0; //@line 692
   HEAP32[$281 >> 2] = $8; //@line 693
   $282 = $ReallocAsyncCtx2 + 16 | 0; //@line 694
   HEAP32[$282 >> 2] = $10; //@line 695
   $283 = $ReallocAsyncCtx2 + 20 | 0; //@line 696
   HEAP32[$283 >> 2] = $12; //@line 697
   $284 = $ReallocAsyncCtx2 + 24 | 0; //@line 698
   HEAP32[$284 >> 2] = $14; //@line 699
   $285 = $ReallocAsyncCtx2 + 28 | 0; //@line 700
   HEAP32[$285 >> 2] = $16; //@line 701
   $286 = $ReallocAsyncCtx2 + 32 | 0; //@line 702
   HEAP32[$286 >> 2] = $18; //@line 703
   $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 704
   HEAP32[$287 >> 2] = $20; //@line 705
   $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 706
   HEAP8[$288 >> 0] = $24; //@line 707
   $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 708
   HEAP32[$289 >> 2] = $26; //@line 709
   $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 710
   HEAP32[$290 >> 2] = $30; //@line 711
   $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 712
   HEAP32[$291 >> 2] = $32; //@line 713
   $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 714
   HEAP32[$292 >> 2] = $34; //@line 715
   $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 716
   HEAP8[$293 >> 0] = $266; //@line 717
   $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 718
   HEAP32[$294 >> 2] = $36; //@line 719
   $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 720
   HEAP32[$295 >> 2] = $38; //@line 721
   $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 722
   HEAP32[$296 >> 2] = $40; //@line 723
   $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 724
   HEAP32[$297 >> 2] = $42; //@line 725
   $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 726
   HEAP32[$298 >> 2] = $44; //@line 727
   $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 728
   HEAP32[$299 >> 2] = $46; //@line 729
   $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 730
   HEAP32[$300 >> 2] = $48; //@line 731
   $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 732
   HEAP32[$301 >> 2] = $50; //@line 733
   $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 734
   HEAP32[$302 >> 2] = $52; //@line 735
   $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 736
   HEAP32[$303 >> 2] = $54; //@line 737
   $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 738
   HEAP32[$304 >> 2] = $56; //@line 739
   $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 740
   HEAP32[$305 >> 2] = $58; //@line 741
   $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 742
   HEAP32[$306 >> 2] = $60; //@line 743
   $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 744
   HEAP32[$307 >> 2] = $62; //@line 745
   $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 746
   HEAP32[$308 >> 2] = $64; //@line 747
   $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 748
   HEAP32[$309 >> 2] = $66; //@line 749
   $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 750
   HEAP32[$310 >> 2] = $68; //@line 751
   $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 752
   HEAP32[$311 >> 2] = $70; //@line 753
   $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 754
   HEAP32[$312 >> 2] = $72; //@line 755
   $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 756
   HEAP32[$313 >> 2] = $74; //@line 757
   $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 758
   HEAP32[$314 >> 2] = $76; //@line 759
   $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 760
   HEAP32[$315 >> 2] = $78; //@line 761
   $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 762
   HEAP32[$316 >> 2] = $80; //@line 763
   $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 764
   HEAP32[$317 >> 2] = $82; //@line 765
   $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 766
   HEAP32[$318 >> 2] = $84; //@line 767
   $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 768
   HEAP32[$319 >> 2] = $86; //@line 769
   $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 770
   HEAP32[$320 >> 2] = $88; //@line 771
   $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 772
   HEAP32[$321 >> 2] = $90; //@line 773
   $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 774
   HEAP32[$322 >> 2] = $92; //@line 775
   $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 776
   HEAP32[$323 >> 2] = $94; //@line 777
   $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 778
   HEAP32[$324 >> 2] = $96; //@line 779
   $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 780
   HEAP32[$325 >> 2] = $98; //@line 781
   $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 782
   HEAP32[$326 >> 2] = $100; //@line 783
   $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 784
   HEAP32[$327 >> 2] = $102; //@line 785
   $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 786
   HEAP32[$328 >> 2] = $104; //@line 787
   $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 788
   HEAP32[$329 >> 2] = $106; //@line 789
   $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 790
   HEAP32[$330 >> 2] = $108; //@line 791
   $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 792
   HEAP32[$331 >> 2] = $110; //@line 793
   $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 794
   HEAP32[$332 >> 2] = $112; //@line 795
   $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 796
   HEAP32[$333 >> 2] = $114; //@line 797
   $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 798
   HEAP32[$334 >> 2] = $116; //@line 799
   $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 800
   HEAP32[$335 >> 2] = $118; //@line 801
   sp = STACKTOP; //@line 802
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 806
  ___async_unwind = 0; //@line 807
  HEAP32[$ReallocAsyncCtx2 >> 2] = 475; //@line 808
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 809
  HEAP8[$278 >> 0] = $2; //@line 810
  $279 = $ReallocAsyncCtx2 + 5 | 0; //@line 811
  HEAP8[$279 >> 0] = $4; //@line 812
  $280 = $ReallocAsyncCtx2 + 8 | 0; //@line 813
  HEAP32[$280 >> 2] = $6; //@line 814
  $281 = $ReallocAsyncCtx2 + 12 | 0; //@line 815
  HEAP32[$281 >> 2] = $8; //@line 816
  $282 = $ReallocAsyncCtx2 + 16 | 0; //@line 817
  HEAP32[$282 >> 2] = $10; //@line 818
  $283 = $ReallocAsyncCtx2 + 20 | 0; //@line 819
  HEAP32[$283 >> 2] = $12; //@line 820
  $284 = $ReallocAsyncCtx2 + 24 | 0; //@line 821
  HEAP32[$284 >> 2] = $14; //@line 822
  $285 = $ReallocAsyncCtx2 + 28 | 0; //@line 823
  HEAP32[$285 >> 2] = $16; //@line 824
  $286 = $ReallocAsyncCtx2 + 32 | 0; //@line 825
  HEAP32[$286 >> 2] = $18; //@line 826
  $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 827
  HEAP32[$287 >> 2] = $20; //@line 828
  $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 829
  HEAP8[$288 >> 0] = $24; //@line 830
  $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 831
  HEAP32[$289 >> 2] = $26; //@line 832
  $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 833
  HEAP32[$290 >> 2] = $30; //@line 834
  $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 835
  HEAP32[$291 >> 2] = $32; //@line 836
  $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 837
  HEAP32[$292 >> 2] = $34; //@line 838
  $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 839
  HEAP8[$293 >> 0] = $266; //@line 840
  $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 841
  HEAP32[$294 >> 2] = $36; //@line 842
  $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 843
  HEAP32[$295 >> 2] = $38; //@line 844
  $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 845
  HEAP32[$296 >> 2] = $40; //@line 846
  $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 847
  HEAP32[$297 >> 2] = $42; //@line 848
  $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 849
  HEAP32[$298 >> 2] = $44; //@line 850
  $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 851
  HEAP32[$299 >> 2] = $46; //@line 852
  $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 853
  HEAP32[$300 >> 2] = $48; //@line 854
  $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 855
  HEAP32[$301 >> 2] = $50; //@line 856
  $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 857
  HEAP32[$302 >> 2] = $52; //@line 858
  $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 859
  HEAP32[$303 >> 2] = $54; //@line 860
  $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 861
  HEAP32[$304 >> 2] = $56; //@line 862
  $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 863
  HEAP32[$305 >> 2] = $58; //@line 864
  $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 865
  HEAP32[$306 >> 2] = $60; //@line 866
  $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 867
  HEAP32[$307 >> 2] = $62; //@line 868
  $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 869
  HEAP32[$308 >> 2] = $64; //@line 870
  $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 871
  HEAP32[$309 >> 2] = $66; //@line 872
  $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 873
  HEAP32[$310 >> 2] = $68; //@line 874
  $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 875
  HEAP32[$311 >> 2] = $70; //@line 876
  $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 877
  HEAP32[$312 >> 2] = $72; //@line 878
  $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 879
  HEAP32[$313 >> 2] = $74; //@line 880
  $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 881
  HEAP32[$314 >> 2] = $76; //@line 882
  $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 883
  HEAP32[$315 >> 2] = $78; //@line 884
  $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 885
  HEAP32[$316 >> 2] = $80; //@line 886
  $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 887
  HEAP32[$317 >> 2] = $82; //@line 888
  $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 889
  HEAP32[$318 >> 2] = $84; //@line 890
  $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 891
  HEAP32[$319 >> 2] = $86; //@line 892
  $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 893
  HEAP32[$320 >> 2] = $88; //@line 894
  $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 895
  HEAP32[$321 >> 2] = $90; //@line 896
  $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 897
  HEAP32[$322 >> 2] = $92; //@line 898
  $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 899
  HEAP32[$323 >> 2] = $94; //@line 900
  $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 901
  HEAP32[$324 >> 2] = $96; //@line 902
  $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 903
  HEAP32[$325 >> 2] = $98; //@line 904
  $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 905
  HEAP32[$326 >> 2] = $100; //@line 906
  $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 907
  HEAP32[$327 >> 2] = $102; //@line 908
  $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 909
  HEAP32[$328 >> 2] = $104; //@line 910
  $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 911
  HEAP32[$329 >> 2] = $106; //@line 912
  $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 913
  HEAP32[$330 >> 2] = $108; //@line 914
  $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 915
  HEAP32[$331 >> 2] = $110; //@line 916
  $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 917
  HEAP32[$332 >> 2] = $112; //@line 918
  $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 919
  HEAP32[$333 >> 2] = $114; //@line 920
  $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 921
  HEAP32[$334 >> 2] = $116; //@line 922
  $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 923
  HEAP32[$335 >> 2] = $118; //@line 924
  sp = STACKTOP; //@line 925
  return;
 } else if ((label | 0) == 21) {
  $339 = HEAP32[$337 >> 2] | 0; //@line 929
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 930
  $340 = FUNCTION_TABLE_ii[$339 & 15]($62) | 0; //@line 931
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 476; //@line 934
   $341 = $ReallocAsyncCtx3 + 4 | 0; //@line 935
   HEAP8[$341 >> 0] = $2; //@line 936
   $342 = $ReallocAsyncCtx3 + 5 | 0; //@line 937
   HEAP8[$342 >> 0] = $4; //@line 938
   $343 = $ReallocAsyncCtx3 + 8 | 0; //@line 939
   HEAP32[$343 >> 2] = $6; //@line 940
   $344 = $ReallocAsyncCtx3 + 12 | 0; //@line 941
   HEAP32[$344 >> 2] = $8; //@line 942
   $345 = $ReallocAsyncCtx3 + 16 | 0; //@line 943
   HEAP32[$345 >> 2] = $10; //@line 944
   $346 = $ReallocAsyncCtx3 + 20 | 0; //@line 945
   HEAP32[$346 >> 2] = $12; //@line 946
   $347 = $ReallocAsyncCtx3 + 24 | 0; //@line 947
   HEAP32[$347 >> 2] = $14; //@line 948
   $348 = $ReallocAsyncCtx3 + 28 | 0; //@line 949
   HEAP32[$348 >> 2] = $16; //@line 950
   $349 = $ReallocAsyncCtx3 + 32 | 0; //@line 951
   HEAP32[$349 >> 2] = $18; //@line 952
   $350 = $ReallocAsyncCtx3 + 36 | 0; //@line 953
   HEAP32[$350 >> 2] = $20; //@line 954
   $351 = $ReallocAsyncCtx3 + 40 | 0; //@line 955
   HEAP8[$351 >> 0] = $24; //@line 956
   $352 = $ReallocAsyncCtx3 + 44 | 0; //@line 957
   HEAP32[$352 >> 2] = $26; //@line 958
   $353 = $ReallocAsyncCtx3 + 48 | 0; //@line 959
   HEAP32[$353 >> 2] = $30; //@line 960
   $354 = $ReallocAsyncCtx3 + 52 | 0; //@line 961
   HEAP32[$354 >> 2] = $32; //@line 962
   $355 = $ReallocAsyncCtx3 + 56 | 0; //@line 963
   HEAP32[$355 >> 2] = $34; //@line 964
   $356 = $ReallocAsyncCtx3 + 60 | 0; //@line 965
   HEAP32[$356 >> 2] = $36; //@line 966
   $357 = $ReallocAsyncCtx3 + 64 | 0; //@line 967
   HEAP32[$357 >> 2] = $38; //@line 968
   $358 = $ReallocAsyncCtx3 + 68 | 0; //@line 969
   HEAP32[$358 >> 2] = $40; //@line 970
   $359 = $ReallocAsyncCtx3 + 72 | 0; //@line 971
   HEAP32[$359 >> 2] = $42; //@line 972
   $360 = $ReallocAsyncCtx3 + 76 | 0; //@line 973
   HEAP32[$360 >> 2] = $44; //@line 974
   $361 = $ReallocAsyncCtx3 + 80 | 0; //@line 975
   HEAP32[$361 >> 2] = $46; //@line 976
   $362 = $ReallocAsyncCtx3 + 84 | 0; //@line 977
   HEAP8[$362 >> 0] = $121; //@line 978
   $363 = $ReallocAsyncCtx3 + 88 | 0; //@line 979
   HEAP32[$363 >> 2] = $48; //@line 980
   $364 = $ReallocAsyncCtx3 + 92 | 0; //@line 981
   HEAP32[$364 >> 2] = $50; //@line 982
   $365 = $ReallocAsyncCtx3 + 96 | 0; //@line 983
   HEAP32[$365 >> 2] = $52; //@line 984
   $366 = $ReallocAsyncCtx3 + 100 | 0; //@line 985
   HEAP32[$366 >> 2] = $54; //@line 986
   $367 = $ReallocAsyncCtx3 + 104 | 0; //@line 987
   HEAP32[$367 >> 2] = $56; //@line 988
   $368 = $ReallocAsyncCtx3 + 108 | 0; //@line 989
   HEAP32[$368 >> 2] = $58; //@line 990
   $369 = $ReallocAsyncCtx3 + 112 | 0; //@line 991
   HEAP32[$369 >> 2] = $60; //@line 992
   $370 = $ReallocAsyncCtx3 + 116 | 0; //@line 993
   HEAP32[$370 >> 2] = $62; //@line 994
   $371 = $ReallocAsyncCtx3 + 120 | 0; //@line 995
   HEAP32[$371 >> 2] = $64; //@line 996
   $372 = $ReallocAsyncCtx3 + 124 | 0; //@line 997
   HEAP32[$372 >> 2] = $66; //@line 998
   $373 = $ReallocAsyncCtx3 + 128 | 0; //@line 999
   HEAP32[$373 >> 2] = $68; //@line 1000
   $374 = $ReallocAsyncCtx3 + 132 | 0; //@line 1001
   HEAP32[$374 >> 2] = $70; //@line 1002
   $375 = $ReallocAsyncCtx3 + 136 | 0; //@line 1003
   HEAP32[$375 >> 2] = $72; //@line 1004
   $376 = $ReallocAsyncCtx3 + 140 | 0; //@line 1005
   HEAP32[$376 >> 2] = $74; //@line 1006
   $377 = $ReallocAsyncCtx3 + 144 | 0; //@line 1007
   HEAP32[$377 >> 2] = $76; //@line 1008
   $378 = $ReallocAsyncCtx3 + 148 | 0; //@line 1009
   HEAP32[$378 >> 2] = $78; //@line 1010
   $379 = $ReallocAsyncCtx3 + 152 | 0; //@line 1011
   HEAP32[$379 >> 2] = $80; //@line 1012
   $380 = $ReallocAsyncCtx3 + 156 | 0; //@line 1013
   HEAP32[$380 >> 2] = $82; //@line 1014
   $381 = $ReallocAsyncCtx3 + 160 | 0; //@line 1015
   HEAP32[$381 >> 2] = $84; //@line 1016
   $382 = $ReallocAsyncCtx3 + 164 | 0; //@line 1017
   HEAP32[$382 >> 2] = $86; //@line 1018
   $383 = $ReallocAsyncCtx3 + 168 | 0; //@line 1019
   HEAP32[$383 >> 2] = $88; //@line 1020
   $384 = $ReallocAsyncCtx3 + 172 | 0; //@line 1021
   HEAP32[$384 >> 2] = $90; //@line 1022
   $385 = $ReallocAsyncCtx3 + 176 | 0; //@line 1023
   HEAP32[$385 >> 2] = $92; //@line 1024
   $386 = $ReallocAsyncCtx3 + 180 | 0; //@line 1025
   HEAP32[$386 >> 2] = $94; //@line 1026
   $387 = $ReallocAsyncCtx3 + 184 | 0; //@line 1027
   HEAP32[$387 >> 2] = $96; //@line 1028
   $388 = $ReallocAsyncCtx3 + 188 | 0; //@line 1029
   HEAP32[$388 >> 2] = $98; //@line 1030
   $389 = $ReallocAsyncCtx3 + 192 | 0; //@line 1031
   HEAP32[$389 >> 2] = $100; //@line 1032
   $390 = $ReallocAsyncCtx3 + 196 | 0; //@line 1033
   HEAP32[$390 >> 2] = $102; //@line 1034
   $391 = $ReallocAsyncCtx3 + 200 | 0; //@line 1035
   HEAP32[$391 >> 2] = $104; //@line 1036
   $392 = $ReallocAsyncCtx3 + 204 | 0; //@line 1037
   HEAP32[$392 >> 2] = $106; //@line 1038
   $393 = $ReallocAsyncCtx3 + 208 | 0; //@line 1039
   HEAP32[$393 >> 2] = $108; //@line 1040
   $394 = $ReallocAsyncCtx3 + 212 | 0; //@line 1041
   HEAP32[$394 >> 2] = $110; //@line 1042
   $395 = $ReallocAsyncCtx3 + 216 | 0; //@line 1043
   HEAP32[$395 >> 2] = $112; //@line 1044
   $396 = $ReallocAsyncCtx3 + 220 | 0; //@line 1045
   HEAP32[$396 >> 2] = $114; //@line 1046
   $397 = $ReallocAsyncCtx3 + 224 | 0; //@line 1047
   HEAP32[$397 >> 2] = $116; //@line 1048
   $398 = $ReallocAsyncCtx3 + 228 | 0; //@line 1049
   HEAP32[$398 >> 2] = $118; //@line 1050
   sp = STACKTOP; //@line 1051
   return;
  }
  HEAP8[___async_retval >> 0] = $340; //@line 1055
  ___async_unwind = 0; //@line 1056
  HEAP32[$ReallocAsyncCtx3 >> 2] = 476; //@line 1057
  $341 = $ReallocAsyncCtx3 + 4 | 0; //@line 1058
  HEAP8[$341 >> 0] = $2; //@line 1059
  $342 = $ReallocAsyncCtx3 + 5 | 0; //@line 1060
  HEAP8[$342 >> 0] = $4; //@line 1061
  $343 = $ReallocAsyncCtx3 + 8 | 0; //@line 1062
  HEAP32[$343 >> 2] = $6; //@line 1063
  $344 = $ReallocAsyncCtx3 + 12 | 0; //@line 1064
  HEAP32[$344 >> 2] = $8; //@line 1065
  $345 = $ReallocAsyncCtx3 + 16 | 0; //@line 1066
  HEAP32[$345 >> 2] = $10; //@line 1067
  $346 = $ReallocAsyncCtx3 + 20 | 0; //@line 1068
  HEAP32[$346 >> 2] = $12; //@line 1069
  $347 = $ReallocAsyncCtx3 + 24 | 0; //@line 1070
  HEAP32[$347 >> 2] = $14; //@line 1071
  $348 = $ReallocAsyncCtx3 + 28 | 0; //@line 1072
  HEAP32[$348 >> 2] = $16; //@line 1073
  $349 = $ReallocAsyncCtx3 + 32 | 0; //@line 1074
  HEAP32[$349 >> 2] = $18; //@line 1075
  $350 = $ReallocAsyncCtx3 + 36 | 0; //@line 1076
  HEAP32[$350 >> 2] = $20; //@line 1077
  $351 = $ReallocAsyncCtx3 + 40 | 0; //@line 1078
  HEAP8[$351 >> 0] = $24; //@line 1079
  $352 = $ReallocAsyncCtx3 + 44 | 0; //@line 1080
  HEAP32[$352 >> 2] = $26; //@line 1081
  $353 = $ReallocAsyncCtx3 + 48 | 0; //@line 1082
  HEAP32[$353 >> 2] = $30; //@line 1083
  $354 = $ReallocAsyncCtx3 + 52 | 0; //@line 1084
  HEAP32[$354 >> 2] = $32; //@line 1085
  $355 = $ReallocAsyncCtx3 + 56 | 0; //@line 1086
  HEAP32[$355 >> 2] = $34; //@line 1087
  $356 = $ReallocAsyncCtx3 + 60 | 0; //@line 1088
  HEAP32[$356 >> 2] = $36; //@line 1089
  $357 = $ReallocAsyncCtx3 + 64 | 0; //@line 1090
  HEAP32[$357 >> 2] = $38; //@line 1091
  $358 = $ReallocAsyncCtx3 + 68 | 0; //@line 1092
  HEAP32[$358 >> 2] = $40; //@line 1093
  $359 = $ReallocAsyncCtx3 + 72 | 0; //@line 1094
  HEAP32[$359 >> 2] = $42; //@line 1095
  $360 = $ReallocAsyncCtx3 + 76 | 0; //@line 1096
  HEAP32[$360 >> 2] = $44; //@line 1097
  $361 = $ReallocAsyncCtx3 + 80 | 0; //@line 1098
  HEAP32[$361 >> 2] = $46; //@line 1099
  $362 = $ReallocAsyncCtx3 + 84 | 0; //@line 1100
  HEAP8[$362 >> 0] = $121; //@line 1101
  $363 = $ReallocAsyncCtx3 + 88 | 0; //@line 1102
  HEAP32[$363 >> 2] = $48; //@line 1103
  $364 = $ReallocAsyncCtx3 + 92 | 0; //@line 1104
  HEAP32[$364 >> 2] = $50; //@line 1105
  $365 = $ReallocAsyncCtx3 + 96 | 0; //@line 1106
  HEAP32[$365 >> 2] = $52; //@line 1107
  $366 = $ReallocAsyncCtx3 + 100 | 0; //@line 1108
  HEAP32[$366 >> 2] = $54; //@line 1109
  $367 = $ReallocAsyncCtx3 + 104 | 0; //@line 1110
  HEAP32[$367 >> 2] = $56; //@line 1111
  $368 = $ReallocAsyncCtx3 + 108 | 0; //@line 1112
  HEAP32[$368 >> 2] = $58; //@line 1113
  $369 = $ReallocAsyncCtx3 + 112 | 0; //@line 1114
  HEAP32[$369 >> 2] = $60; //@line 1115
  $370 = $ReallocAsyncCtx3 + 116 | 0; //@line 1116
  HEAP32[$370 >> 2] = $62; //@line 1117
  $371 = $ReallocAsyncCtx3 + 120 | 0; //@line 1118
  HEAP32[$371 >> 2] = $64; //@line 1119
  $372 = $ReallocAsyncCtx3 + 124 | 0; //@line 1120
  HEAP32[$372 >> 2] = $66; //@line 1121
  $373 = $ReallocAsyncCtx3 + 128 | 0; //@line 1122
  HEAP32[$373 >> 2] = $68; //@line 1123
  $374 = $ReallocAsyncCtx3 + 132 | 0; //@line 1124
  HEAP32[$374 >> 2] = $70; //@line 1125
  $375 = $ReallocAsyncCtx3 + 136 | 0; //@line 1126
  HEAP32[$375 >> 2] = $72; //@line 1127
  $376 = $ReallocAsyncCtx3 + 140 | 0; //@line 1128
  HEAP32[$376 >> 2] = $74; //@line 1129
  $377 = $ReallocAsyncCtx3 + 144 | 0; //@line 1130
  HEAP32[$377 >> 2] = $76; //@line 1131
  $378 = $ReallocAsyncCtx3 + 148 | 0; //@line 1132
  HEAP32[$378 >> 2] = $78; //@line 1133
  $379 = $ReallocAsyncCtx3 + 152 | 0; //@line 1134
  HEAP32[$379 >> 2] = $80; //@line 1135
  $380 = $ReallocAsyncCtx3 + 156 | 0; //@line 1136
  HEAP32[$380 >> 2] = $82; //@line 1137
  $381 = $ReallocAsyncCtx3 + 160 | 0; //@line 1138
  HEAP32[$381 >> 2] = $84; //@line 1139
  $382 = $ReallocAsyncCtx3 + 164 | 0; //@line 1140
  HEAP32[$382 >> 2] = $86; //@line 1141
  $383 = $ReallocAsyncCtx3 + 168 | 0; //@line 1142
  HEAP32[$383 >> 2] = $88; //@line 1143
  $384 = $ReallocAsyncCtx3 + 172 | 0; //@line 1144
  HEAP32[$384 >> 2] = $90; //@line 1145
  $385 = $ReallocAsyncCtx3 + 176 | 0; //@line 1146
  HEAP32[$385 >> 2] = $92; //@line 1147
  $386 = $ReallocAsyncCtx3 + 180 | 0; //@line 1148
  HEAP32[$386 >> 2] = $94; //@line 1149
  $387 = $ReallocAsyncCtx3 + 184 | 0; //@line 1150
  HEAP32[$387 >> 2] = $96; //@line 1151
  $388 = $ReallocAsyncCtx3 + 188 | 0; //@line 1152
  HEAP32[$388 >> 2] = $98; //@line 1153
  $389 = $ReallocAsyncCtx3 + 192 | 0; //@line 1154
  HEAP32[$389 >> 2] = $100; //@line 1155
  $390 = $ReallocAsyncCtx3 + 196 | 0; //@line 1156
  HEAP32[$390 >> 2] = $102; //@line 1157
  $391 = $ReallocAsyncCtx3 + 200 | 0; //@line 1158
  HEAP32[$391 >> 2] = $104; //@line 1159
  $392 = $ReallocAsyncCtx3 + 204 | 0; //@line 1160
  HEAP32[$392 >> 2] = $106; //@line 1161
  $393 = $ReallocAsyncCtx3 + 208 | 0; //@line 1162
  HEAP32[$393 >> 2] = $108; //@line 1163
  $394 = $ReallocAsyncCtx3 + 212 | 0; //@line 1164
  HEAP32[$394 >> 2] = $110; //@line 1165
  $395 = $ReallocAsyncCtx3 + 216 | 0; //@line 1166
  HEAP32[$395 >> 2] = $112; //@line 1167
  $396 = $ReallocAsyncCtx3 + 220 | 0; //@line 1168
  HEAP32[$396 >> 2] = $114; //@line 1169
  $397 = $ReallocAsyncCtx3 + 224 | 0; //@line 1170
  HEAP32[$397 >> 2] = $116; //@line 1171
  $398 = $ReallocAsyncCtx3 + 228 | 0; //@line 1172
  HEAP32[$398 >> 2] = $118; //@line 1173
  sp = STACKTOP; //@line 1174
  return;
 } else if ((label | 0) == 26) {
  $418 = HEAP8[$18 + ($121 & 255) >> 0] | 0; //@line 1181
  HEAP32[$42 >> 2] = (HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 1202
  HEAP32[$40 >> 2] = 0; //@line 1203
  $439 = $$0$be + 6 << 24 >> 24; //@line 1204
  HEAP8[$90 >> 0] = HEAP8[$18 + ($$0$be + 5 & 255) >> 0] | 0; //@line 1208
  $445 = HEAP32[(HEAP32[$80 >> 2] | 0) + 8 >> 2] | 0; //@line 1211
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 1212
  $446 = FUNCTION_TABLE_iiii[$445 & 31]($56, $418, $112) | 0; //@line 1213
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 1216
   $447 = $ReallocAsyncCtx4 + 4 | 0; //@line 1217
   HEAP8[$447 >> 0] = $2; //@line 1218
   $448 = $ReallocAsyncCtx4 + 5 | 0; //@line 1219
   HEAP8[$448 >> 0] = $4; //@line 1220
   $449 = $ReallocAsyncCtx4 + 8 | 0; //@line 1221
   HEAP32[$449 >> 2] = $6; //@line 1222
   $450 = $ReallocAsyncCtx4 + 12 | 0; //@line 1223
   HEAP32[$450 >> 2] = $8; //@line 1224
   $451 = $ReallocAsyncCtx4 + 16 | 0; //@line 1225
   HEAP32[$451 >> 2] = $10; //@line 1226
   $452 = $ReallocAsyncCtx4 + 20 | 0; //@line 1227
   HEAP32[$452 >> 2] = $12; //@line 1228
   $453 = $ReallocAsyncCtx4 + 24 | 0; //@line 1229
   HEAP32[$453 >> 2] = $14; //@line 1230
   $454 = $ReallocAsyncCtx4 + 28 | 0; //@line 1231
   HEAP32[$454 >> 2] = $16; //@line 1232
   $455 = $ReallocAsyncCtx4 + 32 | 0; //@line 1233
   HEAP32[$455 >> 2] = $18; //@line 1234
   $456 = $ReallocAsyncCtx4 + 36 | 0; //@line 1235
   HEAP32[$456 >> 2] = $20; //@line 1236
   $457 = $ReallocAsyncCtx4 + 40 | 0; //@line 1237
   HEAP8[$457 >> 0] = $24; //@line 1238
   $458 = $ReallocAsyncCtx4 + 44 | 0; //@line 1239
   HEAP32[$458 >> 2] = $26; //@line 1240
   $459 = $ReallocAsyncCtx4 + 48 | 0; //@line 1241
   HEAP32[$459 >> 2] = $30; //@line 1242
   $460 = $ReallocAsyncCtx4 + 52 | 0; //@line 1243
   HEAP32[$460 >> 2] = $32; //@line 1244
   $461 = $ReallocAsyncCtx4 + 56 | 0; //@line 1245
   HEAP32[$461 >> 2] = $34; //@line 1246
   $462 = $ReallocAsyncCtx4 + 60 | 0; //@line 1247
   HEAP32[$462 >> 2] = $36; //@line 1248
   $463 = $ReallocAsyncCtx4 + 64 | 0; //@line 1249
   HEAP32[$463 >> 2] = $38; //@line 1250
   $464 = $ReallocAsyncCtx4 + 68 | 0; //@line 1251
   HEAP32[$464 >> 2] = $40; //@line 1252
   $465 = $ReallocAsyncCtx4 + 72 | 0; //@line 1253
   HEAP32[$465 >> 2] = $42; //@line 1254
   $466 = $ReallocAsyncCtx4 + 76 | 0; //@line 1255
   HEAP32[$466 >> 2] = $44; //@line 1256
   $467 = $ReallocAsyncCtx4 + 80 | 0; //@line 1257
   HEAP32[$467 >> 2] = $46; //@line 1258
   $468 = $ReallocAsyncCtx4 + 84 | 0; //@line 1259
   HEAP32[$468 >> 2] = $48; //@line 1260
   $469 = $ReallocAsyncCtx4 + 88 | 0; //@line 1261
   HEAP32[$469 >> 2] = $50; //@line 1262
   $470 = $ReallocAsyncCtx4 + 92 | 0; //@line 1263
   HEAP32[$470 >> 2] = $52; //@line 1264
   $471 = $ReallocAsyncCtx4 + 96 | 0; //@line 1265
   HEAP32[$471 >> 2] = $54; //@line 1266
   $472 = $ReallocAsyncCtx4 + 100 | 0; //@line 1267
   HEAP32[$472 >> 2] = $56; //@line 1268
   $473 = $ReallocAsyncCtx4 + 104 | 0; //@line 1269
   HEAP32[$473 >> 2] = $58; //@line 1270
   $474 = $ReallocAsyncCtx4 + 108 | 0; //@line 1271
   HEAP32[$474 >> 2] = $60; //@line 1272
   $475 = $ReallocAsyncCtx4 + 112 | 0; //@line 1273
   HEAP32[$475 >> 2] = $62; //@line 1274
   $476 = $ReallocAsyncCtx4 + 116 | 0; //@line 1275
   HEAP32[$476 >> 2] = $64; //@line 1276
   $477 = $ReallocAsyncCtx4 + 120 | 0; //@line 1277
   HEAP32[$477 >> 2] = $66; //@line 1278
   $478 = $ReallocAsyncCtx4 + 124 | 0; //@line 1279
   HEAP32[$478 >> 2] = $68; //@line 1280
   $479 = $ReallocAsyncCtx4 + 128 | 0; //@line 1281
   HEAP32[$479 >> 2] = $70; //@line 1282
   $480 = $ReallocAsyncCtx4 + 132 | 0; //@line 1283
   HEAP32[$480 >> 2] = $72; //@line 1284
   $481 = $ReallocAsyncCtx4 + 136 | 0; //@line 1285
   HEAP32[$481 >> 2] = $74; //@line 1286
   $482 = $ReallocAsyncCtx4 + 140 | 0; //@line 1287
   HEAP32[$482 >> 2] = $76; //@line 1288
   $483 = $ReallocAsyncCtx4 + 144 | 0; //@line 1289
   HEAP32[$483 >> 2] = $78; //@line 1290
   $484 = $ReallocAsyncCtx4 + 148 | 0; //@line 1291
   HEAP32[$484 >> 2] = $80; //@line 1292
   $485 = $ReallocAsyncCtx4 + 152 | 0; //@line 1293
   HEAP32[$485 >> 2] = $82; //@line 1294
   $486 = $ReallocAsyncCtx4 + 156 | 0; //@line 1295
   HEAP32[$486 >> 2] = $84; //@line 1296
   $487 = $ReallocAsyncCtx4 + 160 | 0; //@line 1297
   HEAP32[$487 >> 2] = $86; //@line 1298
   $488 = $ReallocAsyncCtx4 + 164 | 0; //@line 1299
   HEAP32[$488 >> 2] = $88; //@line 1300
   $489 = $ReallocAsyncCtx4 + 168 | 0; //@line 1301
   HEAP32[$489 >> 2] = $90; //@line 1302
   $490 = $ReallocAsyncCtx4 + 172 | 0; //@line 1303
   HEAP32[$490 >> 2] = $92; //@line 1304
   $491 = $ReallocAsyncCtx4 + 176 | 0; //@line 1305
   HEAP8[$491 >> 0] = $439; //@line 1306
   $492 = $ReallocAsyncCtx4 + 180 | 0; //@line 1307
   HEAP32[$492 >> 2] = $94; //@line 1308
   $493 = $ReallocAsyncCtx4 + 184 | 0; //@line 1309
   HEAP32[$493 >> 2] = $96; //@line 1310
   $494 = $ReallocAsyncCtx4 + 188 | 0; //@line 1311
   HEAP32[$494 >> 2] = $98; //@line 1312
   $495 = $ReallocAsyncCtx4 + 192 | 0; //@line 1313
   HEAP32[$495 >> 2] = $100; //@line 1314
   $496 = $ReallocAsyncCtx4 + 196 | 0; //@line 1315
   HEAP32[$496 >> 2] = $102; //@line 1316
   $497 = $ReallocAsyncCtx4 + 200 | 0; //@line 1317
   HEAP32[$497 >> 2] = $104; //@line 1318
   $498 = $ReallocAsyncCtx4 + 204 | 0; //@line 1319
   HEAP32[$498 >> 2] = $106; //@line 1320
   $499 = $ReallocAsyncCtx4 + 208 | 0; //@line 1321
   HEAP32[$499 >> 2] = $108; //@line 1322
   $500 = $ReallocAsyncCtx4 + 212 | 0; //@line 1323
   HEAP32[$500 >> 2] = $110; //@line 1324
   $501 = $ReallocAsyncCtx4 + 216 | 0; //@line 1325
   HEAP32[$501 >> 2] = $112; //@line 1326
   $502 = $ReallocAsyncCtx4 + 220 | 0; //@line 1327
   HEAP32[$502 >> 2] = $114; //@line 1328
   $503 = $ReallocAsyncCtx4 + 224 | 0; //@line 1329
   HEAP32[$503 >> 2] = $116; //@line 1330
   $504 = $ReallocAsyncCtx4 + 228 | 0; //@line 1331
   HEAP32[$504 >> 2] = $118; //@line 1332
   sp = STACKTOP; //@line 1333
   return;
  }
  HEAP8[___async_retval >> 0] = $446; //@line 1337
  ___async_unwind = 0; //@line 1338
  HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 1339
  $447 = $ReallocAsyncCtx4 + 4 | 0; //@line 1340
  HEAP8[$447 >> 0] = $2; //@line 1341
  $448 = $ReallocAsyncCtx4 + 5 | 0; //@line 1342
  HEAP8[$448 >> 0] = $4; //@line 1343
  $449 = $ReallocAsyncCtx4 + 8 | 0; //@line 1344
  HEAP32[$449 >> 2] = $6; //@line 1345
  $450 = $ReallocAsyncCtx4 + 12 | 0; //@line 1346
  HEAP32[$450 >> 2] = $8; //@line 1347
  $451 = $ReallocAsyncCtx4 + 16 | 0; //@line 1348
  HEAP32[$451 >> 2] = $10; //@line 1349
  $452 = $ReallocAsyncCtx4 + 20 | 0; //@line 1350
  HEAP32[$452 >> 2] = $12; //@line 1351
  $453 = $ReallocAsyncCtx4 + 24 | 0; //@line 1352
  HEAP32[$453 >> 2] = $14; //@line 1353
  $454 = $ReallocAsyncCtx4 + 28 | 0; //@line 1354
  HEAP32[$454 >> 2] = $16; //@line 1355
  $455 = $ReallocAsyncCtx4 + 32 | 0; //@line 1356
  HEAP32[$455 >> 2] = $18; //@line 1357
  $456 = $ReallocAsyncCtx4 + 36 | 0; //@line 1358
  HEAP32[$456 >> 2] = $20; //@line 1359
  $457 = $ReallocAsyncCtx4 + 40 | 0; //@line 1360
  HEAP8[$457 >> 0] = $24; //@line 1361
  $458 = $ReallocAsyncCtx4 + 44 | 0; //@line 1362
  HEAP32[$458 >> 2] = $26; //@line 1363
  $459 = $ReallocAsyncCtx4 + 48 | 0; //@line 1364
  HEAP32[$459 >> 2] = $30; //@line 1365
  $460 = $ReallocAsyncCtx4 + 52 | 0; //@line 1366
  HEAP32[$460 >> 2] = $32; //@line 1367
  $461 = $ReallocAsyncCtx4 + 56 | 0; //@line 1368
  HEAP32[$461 >> 2] = $34; //@line 1369
  $462 = $ReallocAsyncCtx4 + 60 | 0; //@line 1370
  HEAP32[$462 >> 2] = $36; //@line 1371
  $463 = $ReallocAsyncCtx4 + 64 | 0; //@line 1372
  HEAP32[$463 >> 2] = $38; //@line 1373
  $464 = $ReallocAsyncCtx4 + 68 | 0; //@line 1374
  HEAP32[$464 >> 2] = $40; //@line 1375
  $465 = $ReallocAsyncCtx4 + 72 | 0; //@line 1376
  HEAP32[$465 >> 2] = $42; //@line 1377
  $466 = $ReallocAsyncCtx4 + 76 | 0; //@line 1378
  HEAP32[$466 >> 2] = $44; //@line 1379
  $467 = $ReallocAsyncCtx4 + 80 | 0; //@line 1380
  HEAP32[$467 >> 2] = $46; //@line 1381
  $468 = $ReallocAsyncCtx4 + 84 | 0; //@line 1382
  HEAP32[$468 >> 2] = $48; //@line 1383
  $469 = $ReallocAsyncCtx4 + 88 | 0; //@line 1384
  HEAP32[$469 >> 2] = $50; //@line 1385
  $470 = $ReallocAsyncCtx4 + 92 | 0; //@line 1386
  HEAP32[$470 >> 2] = $52; //@line 1387
  $471 = $ReallocAsyncCtx4 + 96 | 0; //@line 1388
  HEAP32[$471 >> 2] = $54; //@line 1389
  $472 = $ReallocAsyncCtx4 + 100 | 0; //@line 1390
  HEAP32[$472 >> 2] = $56; //@line 1391
  $473 = $ReallocAsyncCtx4 + 104 | 0; //@line 1392
  HEAP32[$473 >> 2] = $58; //@line 1393
  $474 = $ReallocAsyncCtx4 + 108 | 0; //@line 1394
  HEAP32[$474 >> 2] = $60; //@line 1395
  $475 = $ReallocAsyncCtx4 + 112 | 0; //@line 1396
  HEAP32[$475 >> 2] = $62; //@line 1397
  $476 = $ReallocAsyncCtx4 + 116 | 0; //@line 1398
  HEAP32[$476 >> 2] = $64; //@line 1399
  $477 = $ReallocAsyncCtx4 + 120 | 0; //@line 1400
  HEAP32[$477 >> 2] = $66; //@line 1401
  $478 = $ReallocAsyncCtx4 + 124 | 0; //@line 1402
  HEAP32[$478 >> 2] = $68; //@line 1403
  $479 = $ReallocAsyncCtx4 + 128 | 0; //@line 1404
  HEAP32[$479 >> 2] = $70; //@line 1405
  $480 = $ReallocAsyncCtx4 + 132 | 0; //@line 1406
  HEAP32[$480 >> 2] = $72; //@line 1407
  $481 = $ReallocAsyncCtx4 + 136 | 0; //@line 1408
  HEAP32[$481 >> 2] = $74; //@line 1409
  $482 = $ReallocAsyncCtx4 + 140 | 0; //@line 1410
  HEAP32[$482 >> 2] = $76; //@line 1411
  $483 = $ReallocAsyncCtx4 + 144 | 0; //@line 1412
  HEAP32[$483 >> 2] = $78; //@line 1413
  $484 = $ReallocAsyncCtx4 + 148 | 0; //@line 1414
  HEAP32[$484 >> 2] = $80; //@line 1415
  $485 = $ReallocAsyncCtx4 + 152 | 0; //@line 1416
  HEAP32[$485 >> 2] = $82; //@line 1417
  $486 = $ReallocAsyncCtx4 + 156 | 0; //@line 1418
  HEAP32[$486 >> 2] = $84; //@line 1419
  $487 = $ReallocAsyncCtx4 + 160 | 0; //@line 1420
  HEAP32[$487 >> 2] = $86; //@line 1421
  $488 = $ReallocAsyncCtx4 + 164 | 0; //@line 1422
  HEAP32[$488 >> 2] = $88; //@line 1423
  $489 = $ReallocAsyncCtx4 + 168 | 0; //@line 1424
  HEAP32[$489 >> 2] = $90; //@line 1425
  $490 = $ReallocAsyncCtx4 + 172 | 0; //@line 1426
  HEAP32[$490 >> 2] = $92; //@line 1427
  $491 = $ReallocAsyncCtx4 + 176 | 0; //@line 1428
  HEAP8[$491 >> 0] = $439; //@line 1429
  $492 = $ReallocAsyncCtx4 + 180 | 0; //@line 1430
  HEAP32[$492 >> 2] = $94; //@line 1431
  $493 = $ReallocAsyncCtx4 + 184 | 0; //@line 1432
  HEAP32[$493 >> 2] = $96; //@line 1433
  $494 = $ReallocAsyncCtx4 + 188 | 0; //@line 1434
  HEAP32[$494 >> 2] = $98; //@line 1435
  $495 = $ReallocAsyncCtx4 + 192 | 0; //@line 1436
  HEAP32[$495 >> 2] = $100; //@line 1437
  $496 = $ReallocAsyncCtx4 + 196 | 0; //@line 1438
  HEAP32[$496 >> 2] = $102; //@line 1439
  $497 = $ReallocAsyncCtx4 + 200 | 0; //@line 1440
  HEAP32[$497 >> 2] = $104; //@line 1441
  $498 = $ReallocAsyncCtx4 + 204 | 0; //@line 1442
  HEAP32[$498 >> 2] = $106; //@line 1443
  $499 = $ReallocAsyncCtx4 + 208 | 0; //@line 1444
  HEAP32[$499 >> 2] = $108; //@line 1445
  $500 = $ReallocAsyncCtx4 + 212 | 0; //@line 1446
  HEAP32[$500 >> 2] = $110; //@line 1447
  $501 = $ReallocAsyncCtx4 + 216 | 0; //@line 1448
  HEAP32[$501 >> 2] = $112; //@line 1449
  $502 = $ReallocAsyncCtx4 + 220 | 0; //@line 1450
  HEAP32[$502 >> 2] = $114; //@line 1451
  $503 = $ReallocAsyncCtx4 + 224 | 0; //@line 1452
  HEAP32[$503 >> 2] = $116; //@line 1453
  $504 = $ReallocAsyncCtx4 + 228 | 0; //@line 1454
  HEAP32[$504 >> 2] = $118; //@line 1455
  sp = STACKTOP; //@line 1456
  return;
 } else if ((label | 0) == 32) {
  $525 = $$0$be + 2 << 24 >> 24; //@line 1460
  $529 = HEAPU8[$18 + ($121 & 255) >> 0] | 0; //@line 1464
  $531 = $529 >>> 5 & 1; //@line 1467
  $533 = $529 >>> 4 & 1; //@line 1470
  $536 = HEAP32[(HEAP32[$114 >> 2] | 0) + 44 >> 2] | 0; //@line 1473
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 1474
  $537 = FUNCTION_TABLE_iiii[$536 & 31]($56, $533, $531) | 0; //@line 1475
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 478; //@line 1478
   $538 = $ReallocAsyncCtx5 + 4 | 0; //@line 1479
   HEAP8[$538 >> 0] = $2; //@line 1480
   $539 = $ReallocAsyncCtx5 + 5 | 0; //@line 1481
   HEAP8[$539 >> 0] = $4; //@line 1482
   $540 = $ReallocAsyncCtx5 + 8 | 0; //@line 1483
   HEAP32[$540 >> 2] = $6; //@line 1484
   $541 = $ReallocAsyncCtx5 + 12 | 0; //@line 1485
   HEAP32[$541 >> 2] = $8; //@line 1486
   $542 = $ReallocAsyncCtx5 + 16 | 0; //@line 1487
   HEAP32[$542 >> 2] = $10; //@line 1488
   $543 = $ReallocAsyncCtx5 + 20 | 0; //@line 1489
   HEAP32[$543 >> 2] = $12; //@line 1490
   $544 = $ReallocAsyncCtx5 + 24 | 0; //@line 1491
   HEAP32[$544 >> 2] = $14; //@line 1492
   $545 = $ReallocAsyncCtx5 + 28 | 0; //@line 1493
   HEAP32[$545 >> 2] = $16; //@line 1494
   $546 = $ReallocAsyncCtx5 + 32 | 0; //@line 1495
   HEAP32[$546 >> 2] = $18; //@line 1496
   $547 = $ReallocAsyncCtx5 + 36 | 0; //@line 1497
   HEAP32[$547 >> 2] = $20; //@line 1498
   $548 = $ReallocAsyncCtx5 + 40 | 0; //@line 1499
   HEAP8[$548 >> 0] = $24; //@line 1500
   $549 = $ReallocAsyncCtx5 + 44 | 0; //@line 1501
   HEAP32[$549 >> 2] = $$0107$be; //@line 1502
   $550 = $ReallocAsyncCtx5 + 48 | 0; //@line 1503
   HEAP32[$550 >> 2] = $26; //@line 1504
   $551 = $ReallocAsyncCtx5 + 52 | 0; //@line 1505
   HEAP32[$551 >> 2] = $529; //@line 1506
   $552 = $ReallocAsyncCtx5 + 56 | 0; //@line 1507
   HEAP32[$552 >> 2] = $30; //@line 1508
   $553 = $ReallocAsyncCtx5 + 60 | 0; //@line 1509
   HEAP32[$553 >> 2] = $32; //@line 1510
   $554 = $ReallocAsyncCtx5 + 64 | 0; //@line 1511
   HEAP32[$554 >> 2] = $34; //@line 1512
   $555 = $ReallocAsyncCtx5 + 68 | 0; //@line 1513
   HEAP32[$555 >> 2] = $36; //@line 1514
   $556 = $ReallocAsyncCtx5 + 72 | 0; //@line 1515
   HEAP32[$556 >> 2] = $38; //@line 1516
   $557 = $ReallocAsyncCtx5 + 76 | 0; //@line 1517
   HEAP32[$557 >> 2] = $40; //@line 1518
   $558 = $ReallocAsyncCtx5 + 80 | 0; //@line 1519
   HEAP32[$558 >> 2] = $42; //@line 1520
   $559 = $ReallocAsyncCtx5 + 84 | 0; //@line 1521
   HEAP32[$559 >> 2] = $44; //@line 1522
   $560 = $ReallocAsyncCtx5 + 88 | 0; //@line 1523
   HEAP32[$560 >> 2] = $46; //@line 1524
   $561 = $ReallocAsyncCtx5 + 92 | 0; //@line 1525
   HEAP8[$561 >> 0] = $525; //@line 1526
   $562 = $ReallocAsyncCtx5 + 96 | 0; //@line 1527
   HEAP32[$562 >> 2] = $48; //@line 1528
   $563 = $ReallocAsyncCtx5 + 100 | 0; //@line 1529
   HEAP32[$563 >> 2] = $50; //@line 1530
   $564 = $ReallocAsyncCtx5 + 104 | 0; //@line 1531
   HEAP32[$564 >> 2] = $52; //@line 1532
   $565 = $ReallocAsyncCtx5 + 108 | 0; //@line 1533
   HEAP32[$565 >> 2] = $54; //@line 1534
   $566 = $ReallocAsyncCtx5 + 112 | 0; //@line 1535
   HEAP32[$566 >> 2] = $56; //@line 1536
   $567 = $ReallocAsyncCtx5 + 116 | 0; //@line 1537
   HEAP32[$567 >> 2] = $58; //@line 1538
   $568 = $ReallocAsyncCtx5 + 120 | 0; //@line 1539
   HEAP32[$568 >> 2] = $60; //@line 1540
   $569 = $ReallocAsyncCtx5 + 124 | 0; //@line 1541
   HEAP32[$569 >> 2] = $62; //@line 1542
   $570 = $ReallocAsyncCtx5 + 128 | 0; //@line 1543
   HEAP8[$570 >> 0] = $531; //@line 1544
   $571 = $ReallocAsyncCtx5 + 132 | 0; //@line 1545
   HEAP32[$571 >> 2] = $64; //@line 1546
   $572 = $ReallocAsyncCtx5 + 136 | 0; //@line 1547
   HEAP32[$572 >> 2] = $66; //@line 1548
   $573 = $ReallocAsyncCtx5 + 140 | 0; //@line 1549
   HEAP32[$573 >> 2] = $68; //@line 1550
   $574 = $ReallocAsyncCtx5 + 144 | 0; //@line 1551
   HEAP32[$574 >> 2] = $70; //@line 1552
   $575 = $ReallocAsyncCtx5 + 148 | 0; //@line 1553
   HEAP32[$575 >> 2] = $72; //@line 1554
   $576 = $ReallocAsyncCtx5 + 152 | 0; //@line 1555
   HEAP32[$576 >> 2] = $74; //@line 1556
   $577 = $ReallocAsyncCtx5 + 156 | 0; //@line 1557
   HEAP32[$577 >> 2] = $76; //@line 1558
   $578 = $ReallocAsyncCtx5 + 160 | 0; //@line 1559
   HEAP32[$578 >> 2] = $78; //@line 1560
   $579 = $ReallocAsyncCtx5 + 164 | 0; //@line 1561
   HEAP32[$579 >> 2] = $80; //@line 1562
   $580 = $ReallocAsyncCtx5 + 168 | 0; //@line 1563
   HEAP32[$580 >> 2] = $82; //@line 1564
   $581 = $ReallocAsyncCtx5 + 172 | 0; //@line 1565
   HEAP32[$581 >> 2] = $84; //@line 1566
   $582 = $ReallocAsyncCtx5 + 176 | 0; //@line 1567
   HEAP32[$582 >> 2] = $86; //@line 1568
   $583 = $ReallocAsyncCtx5 + 180 | 0; //@line 1569
   HEAP32[$583 >> 2] = $88; //@line 1570
   $584 = $ReallocAsyncCtx5 + 184 | 0; //@line 1571
   HEAP32[$584 >> 2] = $90; //@line 1572
   $585 = $ReallocAsyncCtx5 + 188 | 0; //@line 1573
   HEAP32[$585 >> 2] = $92; //@line 1574
   $586 = $ReallocAsyncCtx5 + 192 | 0; //@line 1575
   HEAP32[$586 >> 2] = $94; //@line 1576
   $587 = $ReallocAsyncCtx5 + 196 | 0; //@line 1577
   HEAP32[$587 >> 2] = $96; //@line 1578
   $588 = $ReallocAsyncCtx5 + 200 | 0; //@line 1579
   HEAP32[$588 >> 2] = $98; //@line 1580
   $589 = $ReallocAsyncCtx5 + 204 | 0; //@line 1581
   HEAP32[$589 >> 2] = $100; //@line 1582
   $590 = $ReallocAsyncCtx5 + 208 | 0; //@line 1583
   HEAP32[$590 >> 2] = $102; //@line 1584
   $591 = $ReallocAsyncCtx5 + 212 | 0; //@line 1585
   HEAP32[$591 >> 2] = $104; //@line 1586
   $592 = $ReallocAsyncCtx5 + 216 | 0; //@line 1587
   HEAP8[$592 >> 0] = $533; //@line 1588
   $593 = $ReallocAsyncCtx5 + 220 | 0; //@line 1589
   HEAP32[$593 >> 2] = $106; //@line 1590
   $594 = $ReallocAsyncCtx5 + 224 | 0; //@line 1591
   HEAP32[$594 >> 2] = $108; //@line 1592
   $595 = $ReallocAsyncCtx5 + 228 | 0; //@line 1593
   HEAP32[$595 >> 2] = $110; //@line 1594
   $596 = $ReallocAsyncCtx5 + 232 | 0; //@line 1595
   HEAP32[$596 >> 2] = $112; //@line 1596
   $597 = $ReallocAsyncCtx5 + 236 | 0; //@line 1597
   HEAP32[$597 >> 2] = $114; //@line 1598
   $598 = $ReallocAsyncCtx5 + 240 | 0; //@line 1599
   HEAP32[$598 >> 2] = $116; //@line 1600
   $599 = $ReallocAsyncCtx5 + 244 | 0; //@line 1601
   HEAP32[$599 >> 2] = $118; //@line 1602
   sp = STACKTOP; //@line 1603
   return;
  }
  HEAP8[___async_retval >> 0] = $537 & 1; //@line 1608
  ___async_unwind = 0; //@line 1609
  HEAP32[$ReallocAsyncCtx5 >> 2] = 478; //@line 1610
  $538 = $ReallocAsyncCtx5 + 4 | 0; //@line 1611
  HEAP8[$538 >> 0] = $2; //@line 1612
  $539 = $ReallocAsyncCtx5 + 5 | 0; //@line 1613
  HEAP8[$539 >> 0] = $4; //@line 1614
  $540 = $ReallocAsyncCtx5 + 8 | 0; //@line 1615
  HEAP32[$540 >> 2] = $6; //@line 1616
  $541 = $ReallocAsyncCtx5 + 12 | 0; //@line 1617
  HEAP32[$541 >> 2] = $8; //@line 1618
  $542 = $ReallocAsyncCtx5 + 16 | 0; //@line 1619
  HEAP32[$542 >> 2] = $10; //@line 1620
  $543 = $ReallocAsyncCtx5 + 20 | 0; //@line 1621
  HEAP32[$543 >> 2] = $12; //@line 1622
  $544 = $ReallocAsyncCtx5 + 24 | 0; //@line 1623
  HEAP32[$544 >> 2] = $14; //@line 1624
  $545 = $ReallocAsyncCtx5 + 28 | 0; //@line 1625
  HEAP32[$545 >> 2] = $16; //@line 1626
  $546 = $ReallocAsyncCtx5 + 32 | 0; //@line 1627
  HEAP32[$546 >> 2] = $18; //@line 1628
  $547 = $ReallocAsyncCtx5 + 36 | 0; //@line 1629
  HEAP32[$547 >> 2] = $20; //@line 1630
  $548 = $ReallocAsyncCtx5 + 40 | 0; //@line 1631
  HEAP8[$548 >> 0] = $24; //@line 1632
  $549 = $ReallocAsyncCtx5 + 44 | 0; //@line 1633
  HEAP32[$549 >> 2] = $$0107$be; //@line 1634
  $550 = $ReallocAsyncCtx5 + 48 | 0; //@line 1635
  HEAP32[$550 >> 2] = $26; //@line 1636
  $551 = $ReallocAsyncCtx5 + 52 | 0; //@line 1637
  HEAP32[$551 >> 2] = $529; //@line 1638
  $552 = $ReallocAsyncCtx5 + 56 | 0; //@line 1639
  HEAP32[$552 >> 2] = $30; //@line 1640
  $553 = $ReallocAsyncCtx5 + 60 | 0; //@line 1641
  HEAP32[$553 >> 2] = $32; //@line 1642
  $554 = $ReallocAsyncCtx5 + 64 | 0; //@line 1643
  HEAP32[$554 >> 2] = $34; //@line 1644
  $555 = $ReallocAsyncCtx5 + 68 | 0; //@line 1645
  HEAP32[$555 >> 2] = $36; //@line 1646
  $556 = $ReallocAsyncCtx5 + 72 | 0; //@line 1647
  HEAP32[$556 >> 2] = $38; //@line 1648
  $557 = $ReallocAsyncCtx5 + 76 | 0; //@line 1649
  HEAP32[$557 >> 2] = $40; //@line 1650
  $558 = $ReallocAsyncCtx5 + 80 | 0; //@line 1651
  HEAP32[$558 >> 2] = $42; //@line 1652
  $559 = $ReallocAsyncCtx5 + 84 | 0; //@line 1653
  HEAP32[$559 >> 2] = $44; //@line 1654
  $560 = $ReallocAsyncCtx5 + 88 | 0; //@line 1655
  HEAP32[$560 >> 2] = $46; //@line 1656
  $561 = $ReallocAsyncCtx5 + 92 | 0; //@line 1657
  HEAP8[$561 >> 0] = $525; //@line 1658
  $562 = $ReallocAsyncCtx5 + 96 | 0; //@line 1659
  HEAP32[$562 >> 2] = $48; //@line 1660
  $563 = $ReallocAsyncCtx5 + 100 | 0; //@line 1661
  HEAP32[$563 >> 2] = $50; //@line 1662
  $564 = $ReallocAsyncCtx5 + 104 | 0; //@line 1663
  HEAP32[$564 >> 2] = $52; //@line 1664
  $565 = $ReallocAsyncCtx5 + 108 | 0; //@line 1665
  HEAP32[$565 >> 2] = $54; //@line 1666
  $566 = $ReallocAsyncCtx5 + 112 | 0; //@line 1667
  HEAP32[$566 >> 2] = $56; //@line 1668
  $567 = $ReallocAsyncCtx5 + 116 | 0; //@line 1669
  HEAP32[$567 >> 2] = $58; //@line 1670
  $568 = $ReallocAsyncCtx5 + 120 | 0; //@line 1671
  HEAP32[$568 >> 2] = $60; //@line 1672
  $569 = $ReallocAsyncCtx5 + 124 | 0; //@line 1673
  HEAP32[$569 >> 2] = $62; //@line 1674
  $570 = $ReallocAsyncCtx5 + 128 | 0; //@line 1675
  HEAP8[$570 >> 0] = $531; //@line 1676
  $571 = $ReallocAsyncCtx5 + 132 | 0; //@line 1677
  HEAP32[$571 >> 2] = $64; //@line 1678
  $572 = $ReallocAsyncCtx5 + 136 | 0; //@line 1679
  HEAP32[$572 >> 2] = $66; //@line 1680
  $573 = $ReallocAsyncCtx5 + 140 | 0; //@line 1681
  HEAP32[$573 >> 2] = $68; //@line 1682
  $574 = $ReallocAsyncCtx5 + 144 | 0; //@line 1683
  HEAP32[$574 >> 2] = $70; //@line 1684
  $575 = $ReallocAsyncCtx5 + 148 | 0; //@line 1685
  HEAP32[$575 >> 2] = $72; //@line 1686
  $576 = $ReallocAsyncCtx5 + 152 | 0; //@line 1687
  HEAP32[$576 >> 2] = $74; //@line 1688
  $577 = $ReallocAsyncCtx5 + 156 | 0; //@line 1689
  HEAP32[$577 >> 2] = $76; //@line 1690
  $578 = $ReallocAsyncCtx5 + 160 | 0; //@line 1691
  HEAP32[$578 >> 2] = $78; //@line 1692
  $579 = $ReallocAsyncCtx5 + 164 | 0; //@line 1693
  HEAP32[$579 >> 2] = $80; //@line 1694
  $580 = $ReallocAsyncCtx5 + 168 | 0; //@line 1695
  HEAP32[$580 >> 2] = $82; //@line 1696
  $581 = $ReallocAsyncCtx5 + 172 | 0; //@line 1697
  HEAP32[$581 >> 2] = $84; //@line 1698
  $582 = $ReallocAsyncCtx5 + 176 | 0; //@line 1699
  HEAP32[$582 >> 2] = $86; //@line 1700
  $583 = $ReallocAsyncCtx5 + 180 | 0; //@line 1701
  HEAP32[$583 >> 2] = $88; //@line 1702
  $584 = $ReallocAsyncCtx5 + 184 | 0; //@line 1703
  HEAP32[$584 >> 2] = $90; //@line 1704
  $585 = $ReallocAsyncCtx5 + 188 | 0; //@line 1705
  HEAP32[$585 >> 2] = $92; //@line 1706
  $586 = $ReallocAsyncCtx5 + 192 | 0; //@line 1707
  HEAP32[$586 >> 2] = $94; //@line 1708
  $587 = $ReallocAsyncCtx5 + 196 | 0; //@line 1709
  HEAP32[$587 >> 2] = $96; //@line 1710
  $588 = $ReallocAsyncCtx5 + 200 | 0; //@line 1711
  HEAP32[$588 >> 2] = $98; //@line 1712
  $589 = $ReallocAsyncCtx5 + 204 | 0; //@line 1713
  HEAP32[$589 >> 2] = $100; //@line 1714
  $590 = $ReallocAsyncCtx5 + 208 | 0; //@line 1715
  HEAP32[$590 >> 2] = $102; //@line 1716
  $591 = $ReallocAsyncCtx5 + 212 | 0; //@line 1717
  HEAP32[$591 >> 2] = $104; //@line 1718
  $592 = $ReallocAsyncCtx5 + 216 | 0; //@line 1719
  HEAP8[$592 >> 0] = $533; //@line 1720
  $593 = $ReallocAsyncCtx5 + 220 | 0; //@line 1721
  HEAP32[$593 >> 2] = $106; //@line 1722
  $594 = $ReallocAsyncCtx5 + 224 | 0; //@line 1723
  HEAP32[$594 >> 2] = $108; //@line 1724
  $595 = $ReallocAsyncCtx5 + 228 | 0; //@line 1725
  HEAP32[$595 >> 2] = $110; //@line 1726
  $596 = $ReallocAsyncCtx5 + 232 | 0; //@line 1727
  HEAP32[$596 >> 2] = $112; //@line 1728
  $597 = $ReallocAsyncCtx5 + 236 | 0; //@line 1729
  HEAP32[$597 >> 2] = $114; //@line 1730
  $598 = $ReallocAsyncCtx5 + 240 | 0; //@line 1731
  HEAP32[$598 >> 2] = $116; //@line 1732
  $599 = $ReallocAsyncCtx5 + 244 | 0; //@line 1733
  HEAP32[$599 >> 2] = $118; //@line 1734
  sp = STACKTOP; //@line 1735
  return;
 } else if ((label | 0) == 35) {
  $604 = HEAP8[$18 + ($121 & 255) >> 0] | 0; //@line 1742
  $617 = $$0$be + 5 << 24 >> 24; //@line 1755
  $624 = (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 1762
  $627 = HEAP32[(HEAP32[$96 >> 2] | 0) + 48 >> 2] | 0; //@line 1765
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 1766
  $628 = FUNCTION_TABLE_iiii[$627 & 31]($56, $604, $624) | 0; //@line 1767
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 479; //@line 1770
   $629 = $ReallocAsyncCtx6 + 4 | 0; //@line 1771
   HEAP8[$629 >> 0] = $2; //@line 1772
   $630 = $ReallocAsyncCtx6 + 5 | 0; //@line 1773
   HEAP8[$630 >> 0] = $4; //@line 1774
   $631 = $ReallocAsyncCtx6 + 8 | 0; //@line 1775
   HEAP32[$631 >> 2] = $6; //@line 1776
   $632 = $ReallocAsyncCtx6 + 12 | 0; //@line 1777
   HEAP32[$632 >> 2] = $8; //@line 1778
   $633 = $ReallocAsyncCtx6 + 16 | 0; //@line 1779
   HEAP32[$633 >> 2] = $10; //@line 1780
   $634 = $ReallocAsyncCtx6 + 20 | 0; //@line 1781
   HEAP32[$634 >> 2] = $12; //@line 1782
   $635 = $ReallocAsyncCtx6 + 24 | 0; //@line 1783
   HEAP32[$635 >> 2] = $14; //@line 1784
   $636 = $ReallocAsyncCtx6 + 28 | 0; //@line 1785
   HEAP32[$636 >> 2] = $16; //@line 1786
   $637 = $ReallocAsyncCtx6 + 32 | 0; //@line 1787
   HEAP32[$637 >> 2] = $18; //@line 1788
   $638 = $ReallocAsyncCtx6 + 36 | 0; //@line 1789
   HEAP32[$638 >> 2] = $20; //@line 1790
   $639 = $ReallocAsyncCtx6 + 40 | 0; //@line 1791
   HEAP8[$639 >> 0] = $24; //@line 1792
   $640 = $ReallocAsyncCtx6 + 44 | 0; //@line 1793
   HEAP32[$640 >> 2] = $26; //@line 1794
   $641 = $ReallocAsyncCtx6 + 48 | 0; //@line 1795
   HEAP32[$641 >> 2] = $30; //@line 1796
   $642 = $ReallocAsyncCtx6 + 52 | 0; //@line 1797
   HEAP8[$642 >> 0] = $617; //@line 1798
   $643 = $ReallocAsyncCtx6 + 56 | 0; //@line 1799
   HEAP32[$643 >> 2] = $32; //@line 1800
   $644 = $ReallocAsyncCtx6 + 60 | 0; //@line 1801
   HEAP32[$644 >> 2] = $34; //@line 1802
   $645 = $ReallocAsyncCtx6 + 64 | 0; //@line 1803
   HEAP32[$645 >> 2] = $36; //@line 1804
   $646 = $ReallocAsyncCtx6 + 68 | 0; //@line 1805
   HEAP32[$646 >> 2] = $38; //@line 1806
   $647 = $ReallocAsyncCtx6 + 72 | 0; //@line 1807
   HEAP32[$647 >> 2] = $40; //@line 1808
   $648 = $ReallocAsyncCtx6 + 76 | 0; //@line 1809
   HEAP32[$648 >> 2] = $42; //@line 1810
   $649 = $ReallocAsyncCtx6 + 80 | 0; //@line 1811
   HEAP32[$649 >> 2] = $44; //@line 1812
   $650 = $ReallocAsyncCtx6 + 84 | 0; //@line 1813
   HEAP32[$650 >> 2] = $46; //@line 1814
   $651 = $ReallocAsyncCtx6 + 88 | 0; //@line 1815
   HEAP32[$651 >> 2] = $48; //@line 1816
   $652 = $ReallocAsyncCtx6 + 92 | 0; //@line 1817
   HEAP32[$652 >> 2] = $50; //@line 1818
   $653 = $ReallocAsyncCtx6 + 96 | 0; //@line 1819
   HEAP32[$653 >> 2] = $52; //@line 1820
   $654 = $ReallocAsyncCtx6 + 100 | 0; //@line 1821
   HEAP32[$654 >> 2] = $54; //@line 1822
   $655 = $ReallocAsyncCtx6 + 104 | 0; //@line 1823
   HEAP32[$655 >> 2] = $56; //@line 1824
   $656 = $ReallocAsyncCtx6 + 108 | 0; //@line 1825
   HEAP32[$656 >> 2] = $58; //@line 1826
   $657 = $ReallocAsyncCtx6 + 112 | 0; //@line 1827
   HEAP32[$657 >> 2] = $60; //@line 1828
   $658 = $ReallocAsyncCtx6 + 116 | 0; //@line 1829
   HEAP32[$658 >> 2] = $62; //@line 1830
   $659 = $ReallocAsyncCtx6 + 120 | 0; //@line 1831
   HEAP32[$659 >> 2] = $64; //@line 1832
   $660 = $ReallocAsyncCtx6 + 124 | 0; //@line 1833
   HEAP32[$660 >> 2] = $66; //@line 1834
   $661 = $ReallocAsyncCtx6 + 128 | 0; //@line 1835
   HEAP32[$661 >> 2] = $68; //@line 1836
   $662 = $ReallocAsyncCtx6 + 132 | 0; //@line 1837
   HEAP32[$662 >> 2] = $70; //@line 1838
   $663 = $ReallocAsyncCtx6 + 136 | 0; //@line 1839
   HEAP32[$663 >> 2] = $72; //@line 1840
   $664 = $ReallocAsyncCtx6 + 140 | 0; //@line 1841
   HEAP32[$664 >> 2] = $74; //@line 1842
   $665 = $ReallocAsyncCtx6 + 144 | 0; //@line 1843
   HEAP32[$665 >> 2] = $76; //@line 1844
   $666 = $ReallocAsyncCtx6 + 148 | 0; //@line 1845
   HEAP32[$666 >> 2] = $78; //@line 1846
   $667 = $ReallocAsyncCtx6 + 152 | 0; //@line 1847
   HEAP32[$667 >> 2] = $80; //@line 1848
   $668 = $ReallocAsyncCtx6 + 156 | 0; //@line 1849
   HEAP32[$668 >> 2] = $82; //@line 1850
   $669 = $ReallocAsyncCtx6 + 160 | 0; //@line 1851
   HEAP32[$669 >> 2] = $84; //@line 1852
   $670 = $ReallocAsyncCtx6 + 164 | 0; //@line 1853
   HEAP32[$670 >> 2] = $86; //@line 1854
   $671 = $ReallocAsyncCtx6 + 168 | 0; //@line 1855
   HEAP32[$671 >> 2] = $88; //@line 1856
   $672 = $ReallocAsyncCtx6 + 172 | 0; //@line 1857
   HEAP32[$672 >> 2] = $90; //@line 1858
   $673 = $ReallocAsyncCtx6 + 176 | 0; //@line 1859
   HEAP32[$673 >> 2] = $92; //@line 1860
   $674 = $ReallocAsyncCtx6 + 180 | 0; //@line 1861
   HEAP32[$674 >> 2] = $94; //@line 1862
   $675 = $ReallocAsyncCtx6 + 184 | 0; //@line 1863
   HEAP32[$675 >> 2] = $96; //@line 1864
   $676 = $ReallocAsyncCtx6 + 188 | 0; //@line 1865
   HEAP32[$676 >> 2] = $98; //@line 1866
   $677 = $ReallocAsyncCtx6 + 192 | 0; //@line 1867
   HEAP32[$677 >> 2] = $100; //@line 1868
   $678 = $ReallocAsyncCtx6 + 196 | 0; //@line 1869
   HEAP32[$678 >> 2] = $102; //@line 1870
   $679 = $ReallocAsyncCtx6 + 200 | 0; //@line 1871
   HEAP32[$679 >> 2] = $104; //@line 1872
   $680 = $ReallocAsyncCtx6 + 204 | 0; //@line 1873
   HEAP32[$680 >> 2] = $106; //@line 1874
   $681 = $ReallocAsyncCtx6 + 208 | 0; //@line 1875
   HEAP32[$681 >> 2] = $108; //@line 1876
   $682 = $ReallocAsyncCtx6 + 212 | 0; //@line 1877
   HEAP32[$682 >> 2] = $110; //@line 1878
   $683 = $ReallocAsyncCtx6 + 216 | 0; //@line 1879
   HEAP32[$683 >> 2] = $112; //@line 1880
   $684 = $ReallocAsyncCtx6 + 220 | 0; //@line 1881
   HEAP32[$684 >> 2] = $114; //@line 1882
   $685 = $ReallocAsyncCtx6 + 224 | 0; //@line 1883
   HEAP32[$685 >> 2] = $116; //@line 1884
   $686 = $ReallocAsyncCtx6 + 228 | 0; //@line 1885
   HEAP32[$686 >> 2] = $118; //@line 1886
   sp = STACKTOP; //@line 1887
   return;
  }
  HEAP8[___async_retval >> 0] = $628; //@line 1891
  ___async_unwind = 0; //@line 1892
  HEAP32[$ReallocAsyncCtx6 >> 2] = 479; //@line 1893
  $629 = $ReallocAsyncCtx6 + 4 | 0; //@line 1894
  HEAP8[$629 >> 0] = $2; //@line 1895
  $630 = $ReallocAsyncCtx6 + 5 | 0; //@line 1896
  HEAP8[$630 >> 0] = $4; //@line 1897
  $631 = $ReallocAsyncCtx6 + 8 | 0; //@line 1898
  HEAP32[$631 >> 2] = $6; //@line 1899
  $632 = $ReallocAsyncCtx6 + 12 | 0; //@line 1900
  HEAP32[$632 >> 2] = $8; //@line 1901
  $633 = $ReallocAsyncCtx6 + 16 | 0; //@line 1902
  HEAP32[$633 >> 2] = $10; //@line 1903
  $634 = $ReallocAsyncCtx6 + 20 | 0; //@line 1904
  HEAP32[$634 >> 2] = $12; //@line 1905
  $635 = $ReallocAsyncCtx6 + 24 | 0; //@line 1906
  HEAP32[$635 >> 2] = $14; //@line 1907
  $636 = $ReallocAsyncCtx6 + 28 | 0; //@line 1908
  HEAP32[$636 >> 2] = $16; //@line 1909
  $637 = $ReallocAsyncCtx6 + 32 | 0; //@line 1910
  HEAP32[$637 >> 2] = $18; //@line 1911
  $638 = $ReallocAsyncCtx6 + 36 | 0; //@line 1912
  HEAP32[$638 >> 2] = $20; //@line 1913
  $639 = $ReallocAsyncCtx6 + 40 | 0; //@line 1914
  HEAP8[$639 >> 0] = $24; //@line 1915
  $640 = $ReallocAsyncCtx6 + 44 | 0; //@line 1916
  HEAP32[$640 >> 2] = $26; //@line 1917
  $641 = $ReallocAsyncCtx6 + 48 | 0; //@line 1918
  HEAP32[$641 >> 2] = $30; //@line 1919
  $642 = $ReallocAsyncCtx6 + 52 | 0; //@line 1920
  HEAP8[$642 >> 0] = $617; //@line 1921
  $643 = $ReallocAsyncCtx6 + 56 | 0; //@line 1922
  HEAP32[$643 >> 2] = $32; //@line 1923
  $644 = $ReallocAsyncCtx6 + 60 | 0; //@line 1924
  HEAP32[$644 >> 2] = $34; //@line 1925
  $645 = $ReallocAsyncCtx6 + 64 | 0; //@line 1926
  HEAP32[$645 >> 2] = $36; //@line 1927
  $646 = $ReallocAsyncCtx6 + 68 | 0; //@line 1928
  HEAP32[$646 >> 2] = $38; //@line 1929
  $647 = $ReallocAsyncCtx6 + 72 | 0; //@line 1930
  HEAP32[$647 >> 2] = $40; //@line 1931
  $648 = $ReallocAsyncCtx6 + 76 | 0; //@line 1932
  HEAP32[$648 >> 2] = $42; //@line 1933
  $649 = $ReallocAsyncCtx6 + 80 | 0; //@line 1934
  HEAP32[$649 >> 2] = $44; //@line 1935
  $650 = $ReallocAsyncCtx6 + 84 | 0; //@line 1936
  HEAP32[$650 >> 2] = $46; //@line 1937
  $651 = $ReallocAsyncCtx6 + 88 | 0; //@line 1938
  HEAP32[$651 >> 2] = $48; //@line 1939
  $652 = $ReallocAsyncCtx6 + 92 | 0; //@line 1940
  HEAP32[$652 >> 2] = $50; //@line 1941
  $653 = $ReallocAsyncCtx6 + 96 | 0; //@line 1942
  HEAP32[$653 >> 2] = $52; //@line 1943
  $654 = $ReallocAsyncCtx6 + 100 | 0; //@line 1944
  HEAP32[$654 >> 2] = $54; //@line 1945
  $655 = $ReallocAsyncCtx6 + 104 | 0; //@line 1946
  HEAP32[$655 >> 2] = $56; //@line 1947
  $656 = $ReallocAsyncCtx6 + 108 | 0; //@line 1948
  HEAP32[$656 >> 2] = $58; //@line 1949
  $657 = $ReallocAsyncCtx6 + 112 | 0; //@line 1950
  HEAP32[$657 >> 2] = $60; //@line 1951
  $658 = $ReallocAsyncCtx6 + 116 | 0; //@line 1952
  HEAP32[$658 >> 2] = $62; //@line 1953
  $659 = $ReallocAsyncCtx6 + 120 | 0; //@line 1954
  HEAP32[$659 >> 2] = $64; //@line 1955
  $660 = $ReallocAsyncCtx6 + 124 | 0; //@line 1956
  HEAP32[$660 >> 2] = $66; //@line 1957
  $661 = $ReallocAsyncCtx6 + 128 | 0; //@line 1958
  HEAP32[$661 >> 2] = $68; //@line 1959
  $662 = $ReallocAsyncCtx6 + 132 | 0; //@line 1960
  HEAP32[$662 >> 2] = $70; //@line 1961
  $663 = $ReallocAsyncCtx6 + 136 | 0; //@line 1962
  HEAP32[$663 >> 2] = $72; //@line 1963
  $664 = $ReallocAsyncCtx6 + 140 | 0; //@line 1964
  HEAP32[$664 >> 2] = $74; //@line 1965
  $665 = $ReallocAsyncCtx6 + 144 | 0; //@line 1966
  HEAP32[$665 >> 2] = $76; //@line 1967
  $666 = $ReallocAsyncCtx6 + 148 | 0; //@line 1968
  HEAP32[$666 >> 2] = $78; //@line 1969
  $667 = $ReallocAsyncCtx6 + 152 | 0; //@line 1970
  HEAP32[$667 >> 2] = $80; //@line 1971
  $668 = $ReallocAsyncCtx6 + 156 | 0; //@line 1972
  HEAP32[$668 >> 2] = $82; //@line 1973
  $669 = $ReallocAsyncCtx6 + 160 | 0; //@line 1974
  HEAP32[$669 >> 2] = $84; //@line 1975
  $670 = $ReallocAsyncCtx6 + 164 | 0; //@line 1976
  HEAP32[$670 >> 2] = $86; //@line 1977
  $671 = $ReallocAsyncCtx6 + 168 | 0; //@line 1978
  HEAP32[$671 >> 2] = $88; //@line 1979
  $672 = $ReallocAsyncCtx6 + 172 | 0; //@line 1980
  HEAP32[$672 >> 2] = $90; //@line 1981
  $673 = $ReallocAsyncCtx6 + 176 | 0; //@line 1982
  HEAP32[$673 >> 2] = $92; //@line 1983
  $674 = $ReallocAsyncCtx6 + 180 | 0; //@line 1984
  HEAP32[$674 >> 2] = $94; //@line 1985
  $675 = $ReallocAsyncCtx6 + 184 | 0; //@line 1986
  HEAP32[$675 >> 2] = $96; //@line 1987
  $676 = $ReallocAsyncCtx6 + 188 | 0; //@line 1988
  HEAP32[$676 >> 2] = $98; //@line 1989
  $677 = $ReallocAsyncCtx6 + 192 | 0; //@line 1990
  HEAP32[$677 >> 2] = $100; //@line 1991
  $678 = $ReallocAsyncCtx6 + 196 | 0; //@line 1992
  HEAP32[$678 >> 2] = $102; //@line 1993
  $679 = $ReallocAsyncCtx6 + 200 | 0; //@line 1994
  HEAP32[$679 >> 2] = $104; //@line 1995
  $680 = $ReallocAsyncCtx6 + 204 | 0; //@line 1996
  HEAP32[$680 >> 2] = $106; //@line 1997
  $681 = $ReallocAsyncCtx6 + 208 | 0; //@line 1998
  HEAP32[$681 >> 2] = $108; //@line 1999
  $682 = $ReallocAsyncCtx6 + 212 | 0; //@line 2000
  HEAP32[$682 >> 2] = $110; //@line 2001
  $683 = $ReallocAsyncCtx6 + 216 | 0; //@line 2002
  HEAP32[$683 >> 2] = $112; //@line 2003
  $684 = $ReallocAsyncCtx6 + 220 | 0; //@line 2004
  HEAP32[$684 >> 2] = $114; //@line 2005
  $685 = $ReallocAsyncCtx6 + 224 | 0; //@line 2006
  HEAP32[$685 >> 2] = $116; //@line 2007
  $686 = $ReallocAsyncCtx6 + 228 | 0; //@line 2008
  HEAP32[$686 >> 2] = $118; //@line 2009
  sp = STACKTOP; //@line 2010
  return;
 } else if ((label | 0) == 38) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 2015
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_158($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i118 = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $483 = 0, $484 = 0, $493 = 0, $497 = 0, $50 = 0, $501 = 0, $506 = 0, $507 = 0, $511 = 0, $515 = 0, $517 = 0, $519 = 0, $52 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $590 = 0, $6 = 0, $60 = 0, $603 = 0, $610 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6019
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 6021
 $4 = HEAP8[$0 + 5 >> 0] | 0; //@line 6023
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 6025
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 6027
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 6029
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 6031
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 6033
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 6035
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 6037
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 6039
 $22 = HEAP8[$0 + 40 >> 0] | 0; //@line 6041
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 6043
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 6045
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 6047
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 6049
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 6051
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 6053
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 6055
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 6057
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 6059
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 6061
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 6063
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 6065
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 6067
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 6069
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 6071
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 6073
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 6075
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 6077
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 6079
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 6081
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 6083
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 6085
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 6087
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 6089
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 6091
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 6093
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 6095
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 6097
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 6099
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 6101
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 6103
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 6105
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 6107
 $90 = HEAP8[$0 + 176 >> 0] | 0; //@line 6109
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 6111
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 6113
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 6115
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 6117
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 6119
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 6121
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 6123
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 6125
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 6127
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 6129
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 6131
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 6133
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 6135
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 6137
 $483 = HEAP8[$50 >> 0] | 0; //@line 6141
 $484 = $483 & 255; //@line 6142
 if ((128 - (HEAPU8[$20 >> 0] | 0) - $484 | 0) > 1) {
  HEAP8[$14 + 4 + $484 >> 0] = 7; //@line 6151
  HEAP8[$50 >> 0] = $483 + 2 << 24 >> 24; //@line 6152
  HEAP8[($483 + 1 & 255) + ($14 + 4) >> 0] = $AsyncRetVal; //@line 6153
  HEAP8[$56 >> 0] = 1; //@line 6154
  $$0$i118 = 0; //@line 6155
 } else {
  $$0$i118 = -1010; //@line 6157
 }
 $$0$be = $90; //@line 6159
 $$0107$be = $$0$i118; //@line 6159
 L5 : while (1) {
  if (($$0$be & 255) >= ($2 & 255)) {
   label = 33; //@line 6163
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 6167
  switch (HEAP8[$18 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 6172
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 6177
    break L5;
    break;
   }
  case 7:
   {
    label = 18; //@line 6182
    break L5;
    break;
   }
  case 9:
   {
    label = 27; //@line 6187
    break L5;
    break;
   }
  case 10:
   {
    label = 30; //@line 6192
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$26 >> 2] = 0; //@line 6197
    HEAP8[$6 >> 0] = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 6202
    HEAP8[$10 >> 0] = HEAP8[$18 + ($$0$be + 2 & 255) >> 0] | 0; //@line 6207
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 6208
    continue L5;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 6213
    $207 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 6216
    HEAP8[$34 >> 0] = $207; //@line 6217
    HEAP16[$42 >> 1] = 1 << ($207 & 255); //@line 6221
    $214 = HEAP8[$50 >> 0] | 0; //@line 6225
    $215 = $214 & 255; //@line 6226
    if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 6229
     $$0107$be = -1010; //@line 6229
     continue L5;
    }
    HEAP8[$50 >> 0] = $214 + 1 << 24 >> 24; //@line 6234
    HEAP8[$14 + 4 + $215 >> 0] = 4; //@line 6235
    HEAP8[$56 >> 0] = 1; //@line 6236
    $$0$be = $204; //@line 6237
    $$0107$be = 0; //@line 6237
    continue L5;
    break;
   }
  case 6:
   {
    $311 = HEAP32[$16 >> 2] | 0; //@line 6242
    if ($311 | 0) {
     label = 13; //@line 6245
     break L5;
    }
    $377 = HEAP8[$50 >> 0] | 0; //@line 6251
    $378 = $377 & 255; //@line 6252
    if ((128 - (HEAPU8[$20 >> 0] | 0) - $378 | 0) <= 2) {
     $$0$be = $119; //@line 6256
     $$0107$be = -1010; //@line 6256
     continue L5;
    }
    HEAP8[$14 + 4 + $378 >> 0] = 6; //@line 6261
    HEAP8[($377 + 1 & 255) + ($14 + 4) >> 0] = -1; //@line 6265
    HEAP8[$50 >> 0] = $377 + 3 << 24 >> 24; //@line 6267
    HEAP8[($377 + 2 & 255) + ($14 + 4) >> 0] = $4; //@line 6270
    HEAP8[$56 >> 0] = 1; //@line 6271
    $$0$be = $119; //@line 6272
    $$0107$be = 0; //@line 6272
    continue L5;
    break;
   }
  case 8:
   {
    $493 = $$0$be + 2 << 24 >> 24; //@line 6277
    $497 = HEAP8[$18 + ($119 & 255) >> 0] & 15; //@line 6281
    $501 = ($497 + ($497 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 6286
    HEAP32[$70 >> 2] = $501; //@line 6287
    HEAP32[$64 >> 2] = $501 + 1e3; //@line 6289
    $506 = HEAP8[$50 >> 0] | 0; //@line 6293
    $507 = $506 & 255; //@line 6294
    if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) <= ($507 | 0)) {
     $$0$be = $493; //@line 6297
     $$0107$be = -1010; //@line 6297
     continue L5;
    }
    HEAP8[$50 >> 0] = $506 + 1 << 24 >> 24; //@line 6302
    HEAP8[$14 + 4 + $507 >> 0] = 8; //@line 6303
    HEAP8[$30 >> 0] = 1; //@line 6304
    HEAP8[$56 >> 0] = 1; //@line 6305
    $$0$be = $493; //@line 6306
    $$0107$be = 0; //@line 6306
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 6311
    $$0107$be = -1013; //@line 6311
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$12 >> 0] = 0; //@line 6317
  HEAP8[$78 >> 0] = 0; //@line 6318
  HEAP8[$74 >> 0] = 0; //@line 6319
  HEAP8[$66 >> 0] = 0; //@line 6320
  $130 = $119 & 255; //@line 6321
  $131 = $130 + -1 | 0; //@line 6322
  HEAP32[$54 >> 2] = $18 + $131; //@line 6324
  HEAP8[$32 >> 0] = $114 - $131; //@line 6327
  HEAP8[$80 >> 0] = HEAP8[$40 >> 0] | 0; //@line 6329
  HEAP8[$62 >> 0] = HEAP8[$82 >> 0] | 0; //@line 6331
  HEAP8[$106 >> 0] = HEAP8[$72 >> 0] | 0; //@line 6333
  HEAP8[$102 >> 0] = HEAP8[$92 >> 0] | 0; //@line 6335
  HEAP8[$28 >> 0] = HEAP8[$24 >> 0] | 0; //@line 6337
  $142 = HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] | 0; //@line 6340
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 6341
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($52, $46, $12, $78, $74, $66) | 0; //@line 6342
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 474; //@line 6345
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 6346
   HEAP8[$144 >> 0] = $2; //@line 6347
   $145 = $ReallocAsyncCtx + 5 | 0; //@line 6348
   HEAP8[$145 >> 0] = $4; //@line 6349
   $146 = $ReallocAsyncCtx + 8 | 0; //@line 6350
   HEAP32[$146 >> 2] = $6; //@line 6351
   $147 = $ReallocAsyncCtx + 12 | 0; //@line 6352
   HEAP32[$147 >> 2] = $8; //@line 6353
   $148 = $ReallocAsyncCtx + 16 | 0; //@line 6354
   HEAP32[$148 >> 2] = $10; //@line 6355
   $149 = $ReallocAsyncCtx + 20 | 0; //@line 6356
   HEAP32[$149 >> 2] = $12; //@line 6357
   $150 = $ReallocAsyncCtx + 24 | 0; //@line 6358
   HEAP32[$150 >> 2] = $14; //@line 6359
   $151 = $ReallocAsyncCtx + 28 | 0; //@line 6360
   HEAP32[$151 >> 2] = $16; //@line 6361
   $152 = $ReallocAsyncCtx + 32 | 0; //@line 6362
   HEAP32[$152 >> 2] = $18; //@line 6363
   $153 = $ReallocAsyncCtx + 36 | 0; //@line 6364
   HEAP32[$153 >> 2] = $20; //@line 6365
   $154 = $ReallocAsyncCtx + 40 | 0; //@line 6366
   HEAP32[$154 >> 2] = $$0107$be; //@line 6367
   $155 = $ReallocAsyncCtx + 44 | 0; //@line 6368
   HEAP8[$155 >> 0] = $22; //@line 6369
   $156 = $ReallocAsyncCtx + 48 | 0; //@line 6370
   HEAP32[$156 >> 2] = $24; //@line 6371
   $157 = $ReallocAsyncCtx + 52 | 0; //@line 6372
   HEAP32[$157 >> 2] = $130; //@line 6373
   $158 = $ReallocAsyncCtx + 56 | 0; //@line 6374
   HEAP32[$158 >> 2] = $26; //@line 6375
   $159 = $ReallocAsyncCtx + 60 | 0; //@line 6376
   HEAP32[$159 >> 2] = $28; //@line 6377
   $160 = $ReallocAsyncCtx + 64 | 0; //@line 6378
   HEAP32[$160 >> 2] = $30; //@line 6379
   $161 = $ReallocAsyncCtx + 68 | 0; //@line 6380
   HEAP32[$161 >> 2] = $32; //@line 6381
   $162 = $ReallocAsyncCtx + 72 | 0; //@line 6382
   HEAP32[$162 >> 2] = $34; //@line 6383
   $163 = $ReallocAsyncCtx + 76 | 0; //@line 6384
   HEAP32[$163 >> 2] = $36; //@line 6385
   $164 = $ReallocAsyncCtx + 80 | 0; //@line 6386
   HEAP32[$164 >> 2] = $38; //@line 6387
   $165 = $ReallocAsyncCtx + 84 | 0; //@line 6388
   HEAP32[$165 >> 2] = $40; //@line 6389
   $166 = $ReallocAsyncCtx + 88 | 0; //@line 6390
   HEAP32[$166 >> 2] = $42; //@line 6391
   $167 = $ReallocAsyncCtx + 92 | 0; //@line 6392
   HEAP32[$167 >> 2] = $44; //@line 6393
   $168 = $ReallocAsyncCtx + 96 | 0; //@line 6394
   HEAP32[$168 >> 2] = $46; //@line 6395
   $169 = $ReallocAsyncCtx + 100 | 0; //@line 6396
   HEAP32[$169 >> 2] = $48; //@line 6397
   $170 = $ReallocAsyncCtx + 104 | 0; //@line 6398
   HEAP32[$170 >> 2] = $50; //@line 6399
   $171 = $ReallocAsyncCtx + 108 | 0; //@line 6400
   HEAP32[$171 >> 2] = $52; //@line 6401
   $172 = $ReallocAsyncCtx + 112 | 0; //@line 6402
   HEAP32[$172 >> 2] = $54; //@line 6403
   $173 = $ReallocAsyncCtx + 116 | 0; //@line 6404
   HEAP32[$173 >> 2] = $56; //@line 6405
   $174 = $ReallocAsyncCtx + 120 | 0; //@line 6406
   HEAP32[$174 >> 2] = $58; //@line 6407
   $175 = $ReallocAsyncCtx + 124 | 0; //@line 6408
   HEAP32[$175 >> 2] = $60; //@line 6409
   $176 = $ReallocAsyncCtx + 128 | 0; //@line 6410
   HEAP32[$176 >> 2] = $62; //@line 6411
   $177 = $ReallocAsyncCtx + 132 | 0; //@line 6412
   HEAP32[$177 >> 2] = $64; //@line 6413
   $178 = $ReallocAsyncCtx + 136 | 0; //@line 6414
   HEAP32[$178 >> 2] = $66; //@line 6415
   $179 = $ReallocAsyncCtx + 140 | 0; //@line 6416
   HEAP32[$179 >> 2] = $68; //@line 6417
   $180 = $ReallocAsyncCtx + 144 | 0; //@line 6418
   HEAP32[$180 >> 2] = $70; //@line 6419
   $181 = $ReallocAsyncCtx + 148 | 0; //@line 6420
   HEAP32[$181 >> 2] = $72; //@line 6421
   $182 = $ReallocAsyncCtx + 152 | 0; //@line 6422
   HEAP32[$182 >> 2] = $74; //@line 6423
   $183 = $ReallocAsyncCtx + 156 | 0; //@line 6424
   HEAP32[$183 >> 2] = $76; //@line 6425
   $184 = $ReallocAsyncCtx + 160 | 0; //@line 6426
   HEAP32[$184 >> 2] = $78; //@line 6427
   $185 = $ReallocAsyncCtx + 164 | 0; //@line 6428
   HEAP32[$185 >> 2] = $80; //@line 6429
   $186 = $ReallocAsyncCtx + 168 | 0; //@line 6430
   HEAP32[$186 >> 2] = $82; //@line 6431
   $187 = $ReallocAsyncCtx + 172 | 0; //@line 6432
   HEAP32[$187 >> 2] = $84; //@line 6433
   $188 = $ReallocAsyncCtx + 176 | 0; //@line 6434
   HEAP32[$188 >> 2] = $86; //@line 6435
   $189 = $ReallocAsyncCtx + 180 | 0; //@line 6436
   HEAP32[$189 >> 2] = $88; //@line 6437
   $190 = $ReallocAsyncCtx + 184 | 0; //@line 6438
   HEAP32[$190 >> 2] = $92; //@line 6439
   $191 = $ReallocAsyncCtx + 188 | 0; //@line 6440
   HEAP32[$191 >> 2] = $94; //@line 6441
   $192 = $ReallocAsyncCtx + 192 | 0; //@line 6442
   HEAP32[$192 >> 2] = $96; //@line 6443
   $193 = $ReallocAsyncCtx + 196 | 0; //@line 6444
   HEAP32[$193 >> 2] = $98; //@line 6445
   $194 = $ReallocAsyncCtx + 200 | 0; //@line 6446
   HEAP32[$194 >> 2] = $100; //@line 6447
   $195 = $ReallocAsyncCtx + 204 | 0; //@line 6448
   HEAP32[$195 >> 2] = $102; //@line 6449
   $196 = $ReallocAsyncCtx + 208 | 0; //@line 6450
   HEAP32[$196 >> 2] = $104; //@line 6451
   $197 = $ReallocAsyncCtx + 212 | 0; //@line 6452
   HEAP32[$197 >> 2] = $106; //@line 6453
   $198 = $ReallocAsyncCtx + 216 | 0; //@line 6454
   HEAP32[$198 >> 2] = $108; //@line 6455
   $199 = $ReallocAsyncCtx + 220 | 0; //@line 6456
   HEAP32[$199 >> 2] = $110; //@line 6457
   $200 = $ReallocAsyncCtx + 224 | 0; //@line 6458
   HEAP32[$200 >> 2] = $112; //@line 6459
   $201 = $ReallocAsyncCtx + 228 | 0; //@line 6460
   HEAP32[$201 >> 2] = $114; //@line 6461
   $202 = $ReallocAsyncCtx + 232 | 0; //@line 6462
   HEAP32[$202 >> 2] = $116; //@line 6463
   sp = STACKTOP; //@line 6464
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 6468
  ___async_unwind = 0; //@line 6469
  HEAP32[$ReallocAsyncCtx >> 2] = 474; //@line 6470
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 6471
  HEAP8[$144 >> 0] = $2; //@line 6472
  $145 = $ReallocAsyncCtx + 5 | 0; //@line 6473
  HEAP8[$145 >> 0] = $4; //@line 6474
  $146 = $ReallocAsyncCtx + 8 | 0; //@line 6475
  HEAP32[$146 >> 2] = $6; //@line 6476
  $147 = $ReallocAsyncCtx + 12 | 0; //@line 6477
  HEAP32[$147 >> 2] = $8; //@line 6478
  $148 = $ReallocAsyncCtx + 16 | 0; //@line 6479
  HEAP32[$148 >> 2] = $10; //@line 6480
  $149 = $ReallocAsyncCtx + 20 | 0; //@line 6481
  HEAP32[$149 >> 2] = $12; //@line 6482
  $150 = $ReallocAsyncCtx + 24 | 0; //@line 6483
  HEAP32[$150 >> 2] = $14; //@line 6484
  $151 = $ReallocAsyncCtx + 28 | 0; //@line 6485
  HEAP32[$151 >> 2] = $16; //@line 6486
  $152 = $ReallocAsyncCtx + 32 | 0; //@line 6487
  HEAP32[$152 >> 2] = $18; //@line 6488
  $153 = $ReallocAsyncCtx + 36 | 0; //@line 6489
  HEAP32[$153 >> 2] = $20; //@line 6490
  $154 = $ReallocAsyncCtx + 40 | 0; //@line 6491
  HEAP32[$154 >> 2] = $$0107$be; //@line 6492
  $155 = $ReallocAsyncCtx + 44 | 0; //@line 6493
  HEAP8[$155 >> 0] = $22; //@line 6494
  $156 = $ReallocAsyncCtx + 48 | 0; //@line 6495
  HEAP32[$156 >> 2] = $24; //@line 6496
  $157 = $ReallocAsyncCtx + 52 | 0; //@line 6497
  HEAP32[$157 >> 2] = $130; //@line 6498
  $158 = $ReallocAsyncCtx + 56 | 0; //@line 6499
  HEAP32[$158 >> 2] = $26; //@line 6500
  $159 = $ReallocAsyncCtx + 60 | 0; //@line 6501
  HEAP32[$159 >> 2] = $28; //@line 6502
  $160 = $ReallocAsyncCtx + 64 | 0; //@line 6503
  HEAP32[$160 >> 2] = $30; //@line 6504
  $161 = $ReallocAsyncCtx + 68 | 0; //@line 6505
  HEAP32[$161 >> 2] = $32; //@line 6506
  $162 = $ReallocAsyncCtx + 72 | 0; //@line 6507
  HEAP32[$162 >> 2] = $34; //@line 6508
  $163 = $ReallocAsyncCtx + 76 | 0; //@line 6509
  HEAP32[$163 >> 2] = $36; //@line 6510
  $164 = $ReallocAsyncCtx + 80 | 0; //@line 6511
  HEAP32[$164 >> 2] = $38; //@line 6512
  $165 = $ReallocAsyncCtx + 84 | 0; //@line 6513
  HEAP32[$165 >> 2] = $40; //@line 6514
  $166 = $ReallocAsyncCtx + 88 | 0; //@line 6515
  HEAP32[$166 >> 2] = $42; //@line 6516
  $167 = $ReallocAsyncCtx + 92 | 0; //@line 6517
  HEAP32[$167 >> 2] = $44; //@line 6518
  $168 = $ReallocAsyncCtx + 96 | 0; //@line 6519
  HEAP32[$168 >> 2] = $46; //@line 6520
  $169 = $ReallocAsyncCtx + 100 | 0; //@line 6521
  HEAP32[$169 >> 2] = $48; //@line 6522
  $170 = $ReallocAsyncCtx + 104 | 0; //@line 6523
  HEAP32[$170 >> 2] = $50; //@line 6524
  $171 = $ReallocAsyncCtx + 108 | 0; //@line 6525
  HEAP32[$171 >> 2] = $52; //@line 6526
  $172 = $ReallocAsyncCtx + 112 | 0; //@line 6527
  HEAP32[$172 >> 2] = $54; //@line 6528
  $173 = $ReallocAsyncCtx + 116 | 0; //@line 6529
  HEAP32[$173 >> 2] = $56; //@line 6530
  $174 = $ReallocAsyncCtx + 120 | 0; //@line 6531
  HEAP32[$174 >> 2] = $58; //@line 6532
  $175 = $ReallocAsyncCtx + 124 | 0; //@line 6533
  HEAP32[$175 >> 2] = $60; //@line 6534
  $176 = $ReallocAsyncCtx + 128 | 0; //@line 6535
  HEAP32[$176 >> 2] = $62; //@line 6536
  $177 = $ReallocAsyncCtx + 132 | 0; //@line 6537
  HEAP32[$177 >> 2] = $64; //@line 6538
  $178 = $ReallocAsyncCtx + 136 | 0; //@line 6539
  HEAP32[$178 >> 2] = $66; //@line 6540
  $179 = $ReallocAsyncCtx + 140 | 0; //@line 6541
  HEAP32[$179 >> 2] = $68; //@line 6542
  $180 = $ReallocAsyncCtx + 144 | 0; //@line 6543
  HEAP32[$180 >> 2] = $70; //@line 6544
  $181 = $ReallocAsyncCtx + 148 | 0; //@line 6545
  HEAP32[$181 >> 2] = $72; //@line 6546
  $182 = $ReallocAsyncCtx + 152 | 0; //@line 6547
  HEAP32[$182 >> 2] = $74; //@line 6548
  $183 = $ReallocAsyncCtx + 156 | 0; //@line 6549
  HEAP32[$183 >> 2] = $76; //@line 6550
  $184 = $ReallocAsyncCtx + 160 | 0; //@line 6551
  HEAP32[$184 >> 2] = $78; //@line 6552
  $185 = $ReallocAsyncCtx + 164 | 0; //@line 6553
  HEAP32[$185 >> 2] = $80; //@line 6554
  $186 = $ReallocAsyncCtx + 168 | 0; //@line 6555
  HEAP32[$186 >> 2] = $82; //@line 6556
  $187 = $ReallocAsyncCtx + 172 | 0; //@line 6557
  HEAP32[$187 >> 2] = $84; //@line 6558
  $188 = $ReallocAsyncCtx + 176 | 0; //@line 6559
  HEAP32[$188 >> 2] = $86; //@line 6560
  $189 = $ReallocAsyncCtx + 180 | 0; //@line 6561
  HEAP32[$189 >> 2] = $88; //@line 6562
  $190 = $ReallocAsyncCtx + 184 | 0; //@line 6563
  HEAP32[$190 >> 2] = $92; //@line 6564
  $191 = $ReallocAsyncCtx + 188 | 0; //@line 6565
  HEAP32[$191 >> 2] = $94; //@line 6566
  $192 = $ReallocAsyncCtx + 192 | 0; //@line 6567
  HEAP32[$192 >> 2] = $96; //@line 6568
  $193 = $ReallocAsyncCtx + 196 | 0; //@line 6569
  HEAP32[$193 >> 2] = $98; //@line 6570
  $194 = $ReallocAsyncCtx + 200 | 0; //@line 6571
  HEAP32[$194 >> 2] = $100; //@line 6572
  $195 = $ReallocAsyncCtx + 204 | 0; //@line 6573
  HEAP32[$195 >> 2] = $102; //@line 6574
  $196 = $ReallocAsyncCtx + 208 | 0; //@line 6575
  HEAP32[$196 >> 2] = $104; //@line 6576
  $197 = $ReallocAsyncCtx + 212 | 0; //@line 6577
  HEAP32[$197 >> 2] = $106; //@line 6578
  $198 = $ReallocAsyncCtx + 216 | 0; //@line 6579
  HEAP32[$198 >> 2] = $108; //@line 6580
  $199 = $ReallocAsyncCtx + 220 | 0; //@line 6581
  HEAP32[$199 >> 2] = $110; //@line 6582
  $200 = $ReallocAsyncCtx + 224 | 0; //@line 6583
  HEAP32[$200 >> 2] = $112; //@line 6584
  $201 = $ReallocAsyncCtx + 228 | 0; //@line 6585
  HEAP32[$201 >> 2] = $114; //@line 6586
  $202 = $ReallocAsyncCtx + 232 | 0; //@line 6587
  HEAP32[$202 >> 2] = $116; //@line 6588
  sp = STACKTOP; //@line 6589
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 6595
  HEAP8[$84 >> 0] = ($221 & 255) >>> 4 & 7; //@line 6600
  HEAP8[$88 >> 0] = $221 & 15; //@line 6602
  $240 = $$0$be + 5 << 24 >> 24; //@line 6616
  HEAP32[$60 >> 2] = (HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 6624
  $250 = HEAP32[(HEAP32[$68 >> 2] | 0) + 40 >> 2] | 0; //@line 6627
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 6628
  $251 = FUNCTION_TABLE_iii[$250 & 31]($52, $116) | 0; //@line 6629
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 475; //@line 6632
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 6633
   HEAP8[$252 >> 0] = $2; //@line 6634
   $253 = $ReallocAsyncCtx2 + 5 | 0; //@line 6635
   HEAP8[$253 >> 0] = $4; //@line 6636
   $254 = $ReallocAsyncCtx2 + 8 | 0; //@line 6637
   HEAP32[$254 >> 2] = $6; //@line 6638
   $255 = $ReallocAsyncCtx2 + 12 | 0; //@line 6639
   HEAP32[$255 >> 2] = $8; //@line 6640
   $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 6641
   HEAP32[$256 >> 2] = $10; //@line 6642
   $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 6643
   HEAP32[$257 >> 2] = $12; //@line 6644
   $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 6645
   HEAP32[$258 >> 2] = $14; //@line 6646
   $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 6647
   HEAP32[$259 >> 2] = $16; //@line 6648
   $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 6649
   HEAP32[$260 >> 2] = $18; //@line 6650
   $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 6651
   HEAP32[$261 >> 2] = $20; //@line 6652
   $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 6653
   HEAP8[$262 >> 0] = $22; //@line 6654
   $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 6655
   HEAP32[$263 >> 2] = $24; //@line 6656
   $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 6657
   HEAP32[$264 >> 2] = $26; //@line 6658
   $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 6659
   HEAP32[$265 >> 2] = $28; //@line 6660
   $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 6661
   HEAP32[$266 >> 2] = $30; //@line 6662
   $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 6663
   HEAP8[$267 >> 0] = $240; //@line 6664
   $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 6665
   HEAP32[$268 >> 2] = $32; //@line 6666
   $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 6667
   HEAP32[$269 >> 2] = $34; //@line 6668
   $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 6669
   HEAP32[$270 >> 2] = $36; //@line 6670
   $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 6671
   HEAP32[$271 >> 2] = $38; //@line 6672
   $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 6673
   HEAP32[$272 >> 2] = $40; //@line 6674
   $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 6675
   HEAP32[$273 >> 2] = $42; //@line 6676
   $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 6677
   HEAP32[$274 >> 2] = $44; //@line 6678
   $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 6679
   HEAP32[$275 >> 2] = $46; //@line 6680
   $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 6681
   HEAP32[$276 >> 2] = $48; //@line 6682
   $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 6683
   HEAP32[$277 >> 2] = $50; //@line 6684
   $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 6685
   HEAP32[$278 >> 2] = $52; //@line 6686
   $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 6687
   HEAP32[$279 >> 2] = $54; //@line 6688
   $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 6689
   HEAP32[$280 >> 2] = $56; //@line 6690
   $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 6691
   HEAP32[$281 >> 2] = $58; //@line 6692
   $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 6693
   HEAP32[$282 >> 2] = $60; //@line 6694
   $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 6695
   HEAP32[$283 >> 2] = $62; //@line 6696
   $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 6697
   HEAP32[$284 >> 2] = $64; //@line 6698
   $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 6699
   HEAP32[$285 >> 2] = $66; //@line 6700
   $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 6701
   HEAP32[$286 >> 2] = $68; //@line 6702
   $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 6703
   HEAP32[$287 >> 2] = $70; //@line 6704
   $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 6705
   HEAP32[$288 >> 2] = $72; //@line 6706
   $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 6707
   HEAP32[$289 >> 2] = $74; //@line 6708
   $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 6709
   HEAP32[$290 >> 2] = $76; //@line 6710
   $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 6711
   HEAP32[$291 >> 2] = $78; //@line 6712
   $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 6713
   HEAP32[$292 >> 2] = $80; //@line 6714
   $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 6715
   HEAP32[$293 >> 2] = $82; //@line 6716
   $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 6717
   HEAP32[$294 >> 2] = $84; //@line 6718
   $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 6719
   HEAP32[$295 >> 2] = $86; //@line 6720
   $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 6721
   HEAP32[$296 >> 2] = $88; //@line 6722
   $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 6723
   HEAP32[$297 >> 2] = $92; //@line 6724
   $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 6725
   HEAP32[$298 >> 2] = $94; //@line 6726
   $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 6727
   HEAP32[$299 >> 2] = $96; //@line 6728
   $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 6729
   HEAP32[$300 >> 2] = $98; //@line 6730
   $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 6731
   HEAP32[$301 >> 2] = $100; //@line 6732
   $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 6733
   HEAP32[$302 >> 2] = $102; //@line 6734
   $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 6735
   HEAP32[$303 >> 2] = $104; //@line 6736
   $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 6737
   HEAP32[$304 >> 2] = $106; //@line 6738
   $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 6739
   HEAP32[$305 >> 2] = $108; //@line 6740
   $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 6741
   HEAP32[$306 >> 2] = $110; //@line 6742
   $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 6743
   HEAP32[$307 >> 2] = $112; //@line 6744
   $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 6745
   HEAP32[$308 >> 2] = $114; //@line 6746
   $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 6747
   HEAP32[$309 >> 2] = $116; //@line 6748
   sp = STACKTOP; //@line 6749
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 6753
  ___async_unwind = 0; //@line 6754
  HEAP32[$ReallocAsyncCtx2 >> 2] = 475; //@line 6755
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 6756
  HEAP8[$252 >> 0] = $2; //@line 6757
  $253 = $ReallocAsyncCtx2 + 5 | 0; //@line 6758
  HEAP8[$253 >> 0] = $4; //@line 6759
  $254 = $ReallocAsyncCtx2 + 8 | 0; //@line 6760
  HEAP32[$254 >> 2] = $6; //@line 6761
  $255 = $ReallocAsyncCtx2 + 12 | 0; //@line 6762
  HEAP32[$255 >> 2] = $8; //@line 6763
  $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 6764
  HEAP32[$256 >> 2] = $10; //@line 6765
  $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 6766
  HEAP32[$257 >> 2] = $12; //@line 6767
  $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 6768
  HEAP32[$258 >> 2] = $14; //@line 6769
  $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 6770
  HEAP32[$259 >> 2] = $16; //@line 6771
  $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 6772
  HEAP32[$260 >> 2] = $18; //@line 6773
  $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 6774
  HEAP32[$261 >> 2] = $20; //@line 6775
  $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 6776
  HEAP8[$262 >> 0] = $22; //@line 6777
  $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 6778
  HEAP32[$263 >> 2] = $24; //@line 6779
  $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 6780
  HEAP32[$264 >> 2] = $26; //@line 6781
  $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 6782
  HEAP32[$265 >> 2] = $28; //@line 6783
  $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 6784
  HEAP32[$266 >> 2] = $30; //@line 6785
  $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 6786
  HEAP8[$267 >> 0] = $240; //@line 6787
  $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 6788
  HEAP32[$268 >> 2] = $32; //@line 6789
  $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 6790
  HEAP32[$269 >> 2] = $34; //@line 6791
  $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 6792
  HEAP32[$270 >> 2] = $36; //@line 6793
  $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 6794
  HEAP32[$271 >> 2] = $38; //@line 6795
  $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 6796
  HEAP32[$272 >> 2] = $40; //@line 6797
  $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 6798
  HEAP32[$273 >> 2] = $42; //@line 6799
  $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 6800
  HEAP32[$274 >> 2] = $44; //@line 6801
  $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 6802
  HEAP32[$275 >> 2] = $46; //@line 6803
  $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 6804
  HEAP32[$276 >> 2] = $48; //@line 6805
  $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 6806
  HEAP32[$277 >> 2] = $50; //@line 6807
  $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 6808
  HEAP32[$278 >> 2] = $52; //@line 6809
  $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 6810
  HEAP32[$279 >> 2] = $54; //@line 6811
  $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 6812
  HEAP32[$280 >> 2] = $56; //@line 6813
  $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 6814
  HEAP32[$281 >> 2] = $58; //@line 6815
  $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 6816
  HEAP32[$282 >> 2] = $60; //@line 6817
  $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 6818
  HEAP32[$283 >> 2] = $62; //@line 6819
  $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 6820
  HEAP32[$284 >> 2] = $64; //@line 6821
  $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 6822
  HEAP32[$285 >> 2] = $66; //@line 6823
  $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 6824
  HEAP32[$286 >> 2] = $68; //@line 6825
  $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 6826
  HEAP32[$287 >> 2] = $70; //@line 6827
  $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 6828
  HEAP32[$288 >> 2] = $72; //@line 6829
  $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 6830
  HEAP32[$289 >> 2] = $74; //@line 6831
  $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 6832
  HEAP32[$290 >> 2] = $76; //@line 6833
  $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 6834
  HEAP32[$291 >> 2] = $78; //@line 6835
  $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 6836
  HEAP32[$292 >> 2] = $80; //@line 6837
  $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 6838
  HEAP32[$293 >> 2] = $82; //@line 6839
  $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 6840
  HEAP32[$294 >> 2] = $84; //@line 6841
  $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 6842
  HEAP32[$295 >> 2] = $86; //@line 6843
  $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 6844
  HEAP32[$296 >> 2] = $88; //@line 6845
  $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 6846
  HEAP32[$297 >> 2] = $92; //@line 6847
  $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 6848
  HEAP32[$298 >> 2] = $94; //@line 6849
  $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 6850
  HEAP32[$299 >> 2] = $96; //@line 6851
  $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 6852
  HEAP32[$300 >> 2] = $98; //@line 6853
  $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 6854
  HEAP32[$301 >> 2] = $100; //@line 6855
  $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 6856
  HEAP32[$302 >> 2] = $102; //@line 6857
  $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 6858
  HEAP32[$303 >> 2] = $104; //@line 6859
  $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 6860
  HEAP32[$304 >> 2] = $106; //@line 6861
  $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 6862
  HEAP32[$305 >> 2] = $108; //@line 6863
  $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 6864
  HEAP32[$306 >> 2] = $110; //@line 6865
  $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 6866
  HEAP32[$307 >> 2] = $112; //@line 6867
  $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 6868
  HEAP32[$308 >> 2] = $114; //@line 6869
  $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 6870
  HEAP32[$309 >> 2] = $116; //@line 6871
  sp = STACKTOP; //@line 6872
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 6876
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 6877
  $314 = FUNCTION_TABLE_ii[$313 & 15]($58) | 0; //@line 6878
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 476; //@line 6881
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 6882
   HEAP8[$315 >> 0] = $2; //@line 6883
   $316 = $ReallocAsyncCtx3 + 5 | 0; //@line 6884
   HEAP8[$316 >> 0] = $4; //@line 6885
   $317 = $ReallocAsyncCtx3 + 8 | 0; //@line 6886
   HEAP32[$317 >> 2] = $6; //@line 6887
   $318 = $ReallocAsyncCtx3 + 12 | 0; //@line 6888
   HEAP32[$318 >> 2] = $8; //@line 6889
   $319 = $ReallocAsyncCtx3 + 16 | 0; //@line 6890
   HEAP32[$319 >> 2] = $10; //@line 6891
   $320 = $ReallocAsyncCtx3 + 20 | 0; //@line 6892
   HEAP32[$320 >> 2] = $12; //@line 6893
   $321 = $ReallocAsyncCtx3 + 24 | 0; //@line 6894
   HEAP32[$321 >> 2] = $14; //@line 6895
   $322 = $ReallocAsyncCtx3 + 28 | 0; //@line 6896
   HEAP32[$322 >> 2] = $16; //@line 6897
   $323 = $ReallocAsyncCtx3 + 32 | 0; //@line 6898
   HEAP32[$323 >> 2] = $18; //@line 6899
   $324 = $ReallocAsyncCtx3 + 36 | 0; //@line 6900
   HEAP32[$324 >> 2] = $20; //@line 6901
   $325 = $ReallocAsyncCtx3 + 40 | 0; //@line 6902
   HEAP8[$325 >> 0] = $22; //@line 6903
   $326 = $ReallocAsyncCtx3 + 44 | 0; //@line 6904
   HEAP32[$326 >> 2] = $24; //@line 6905
   $327 = $ReallocAsyncCtx3 + 48 | 0; //@line 6906
   HEAP32[$327 >> 2] = $26; //@line 6907
   $328 = $ReallocAsyncCtx3 + 52 | 0; //@line 6908
   HEAP32[$328 >> 2] = $28; //@line 6909
   $329 = $ReallocAsyncCtx3 + 56 | 0; //@line 6910
   HEAP32[$329 >> 2] = $30; //@line 6911
   $330 = $ReallocAsyncCtx3 + 60 | 0; //@line 6912
   HEAP32[$330 >> 2] = $32; //@line 6913
   $331 = $ReallocAsyncCtx3 + 64 | 0; //@line 6914
   HEAP32[$331 >> 2] = $34; //@line 6915
   $332 = $ReallocAsyncCtx3 + 68 | 0; //@line 6916
   HEAP32[$332 >> 2] = $36; //@line 6917
   $333 = $ReallocAsyncCtx3 + 72 | 0; //@line 6918
   HEAP32[$333 >> 2] = $38; //@line 6919
   $334 = $ReallocAsyncCtx3 + 76 | 0; //@line 6920
   HEAP32[$334 >> 2] = $40; //@line 6921
   $335 = $ReallocAsyncCtx3 + 80 | 0; //@line 6922
   HEAP32[$335 >> 2] = $42; //@line 6923
   $336 = $ReallocAsyncCtx3 + 84 | 0; //@line 6924
   HEAP8[$336 >> 0] = $119; //@line 6925
   $337 = $ReallocAsyncCtx3 + 88 | 0; //@line 6926
   HEAP32[$337 >> 2] = $44; //@line 6927
   $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 6928
   HEAP32[$338 >> 2] = $46; //@line 6929
   $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 6930
   HEAP32[$339 >> 2] = $48; //@line 6931
   $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 6932
   HEAP32[$340 >> 2] = $50; //@line 6933
   $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 6934
   HEAP32[$341 >> 2] = $52; //@line 6935
   $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 6936
   HEAP32[$342 >> 2] = $54; //@line 6937
   $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 6938
   HEAP32[$343 >> 2] = $56; //@line 6939
   $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 6940
   HEAP32[$344 >> 2] = $58; //@line 6941
   $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 6942
   HEAP32[$345 >> 2] = $60; //@line 6943
   $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 6944
   HEAP32[$346 >> 2] = $62; //@line 6945
   $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 6946
   HEAP32[$347 >> 2] = $64; //@line 6947
   $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 6948
   HEAP32[$348 >> 2] = $66; //@line 6949
   $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 6950
   HEAP32[$349 >> 2] = $68; //@line 6951
   $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 6952
   HEAP32[$350 >> 2] = $70; //@line 6953
   $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 6954
   HEAP32[$351 >> 2] = $72; //@line 6955
   $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 6956
   HEAP32[$352 >> 2] = $74; //@line 6957
   $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 6958
   HEAP32[$353 >> 2] = $76; //@line 6959
   $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 6960
   HEAP32[$354 >> 2] = $78; //@line 6961
   $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 6962
   HEAP32[$355 >> 2] = $80; //@line 6963
   $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 6964
   HEAP32[$356 >> 2] = $82; //@line 6965
   $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 6966
   HEAP32[$357 >> 2] = $84; //@line 6967
   $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 6968
   HEAP32[$358 >> 2] = $86; //@line 6969
   $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 6970
   HEAP32[$359 >> 2] = $88; //@line 6971
   $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 6972
   HEAP32[$360 >> 2] = $92; //@line 6973
   $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 6974
   HEAP32[$361 >> 2] = $94; //@line 6975
   $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 6976
   HEAP32[$362 >> 2] = $96; //@line 6977
   $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 6978
   HEAP32[$363 >> 2] = $98; //@line 6979
   $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 6980
   HEAP32[$364 >> 2] = $100; //@line 6981
   $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 6982
   HEAP32[$365 >> 2] = $102; //@line 6983
   $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 6984
   HEAP32[$366 >> 2] = $104; //@line 6985
   $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 6986
   HEAP32[$367 >> 2] = $106; //@line 6987
   $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 6988
   HEAP32[$368 >> 2] = $108; //@line 6989
   $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 6990
   HEAP32[$369 >> 2] = $110; //@line 6991
   $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 6992
   HEAP32[$370 >> 2] = $112; //@line 6993
   $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 6994
   HEAP32[$371 >> 2] = $114; //@line 6995
   $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 6996
   HEAP32[$372 >> 2] = $116; //@line 6997
   sp = STACKTOP; //@line 6998
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 7002
  ___async_unwind = 0; //@line 7003
  HEAP32[$ReallocAsyncCtx3 >> 2] = 476; //@line 7004
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 7005
  HEAP8[$315 >> 0] = $2; //@line 7006
  $316 = $ReallocAsyncCtx3 + 5 | 0; //@line 7007
  HEAP8[$316 >> 0] = $4; //@line 7008
  $317 = $ReallocAsyncCtx3 + 8 | 0; //@line 7009
  HEAP32[$317 >> 2] = $6; //@line 7010
  $318 = $ReallocAsyncCtx3 + 12 | 0; //@line 7011
  HEAP32[$318 >> 2] = $8; //@line 7012
  $319 = $ReallocAsyncCtx3 + 16 | 0; //@line 7013
  HEAP32[$319 >> 2] = $10; //@line 7014
  $320 = $ReallocAsyncCtx3 + 20 | 0; //@line 7015
  HEAP32[$320 >> 2] = $12; //@line 7016
  $321 = $ReallocAsyncCtx3 + 24 | 0; //@line 7017
  HEAP32[$321 >> 2] = $14; //@line 7018
  $322 = $ReallocAsyncCtx3 + 28 | 0; //@line 7019
  HEAP32[$322 >> 2] = $16; //@line 7020
  $323 = $ReallocAsyncCtx3 + 32 | 0; //@line 7021
  HEAP32[$323 >> 2] = $18; //@line 7022
  $324 = $ReallocAsyncCtx3 + 36 | 0; //@line 7023
  HEAP32[$324 >> 2] = $20; //@line 7024
  $325 = $ReallocAsyncCtx3 + 40 | 0; //@line 7025
  HEAP8[$325 >> 0] = $22; //@line 7026
  $326 = $ReallocAsyncCtx3 + 44 | 0; //@line 7027
  HEAP32[$326 >> 2] = $24; //@line 7028
  $327 = $ReallocAsyncCtx3 + 48 | 0; //@line 7029
  HEAP32[$327 >> 2] = $26; //@line 7030
  $328 = $ReallocAsyncCtx3 + 52 | 0; //@line 7031
  HEAP32[$328 >> 2] = $28; //@line 7032
  $329 = $ReallocAsyncCtx3 + 56 | 0; //@line 7033
  HEAP32[$329 >> 2] = $30; //@line 7034
  $330 = $ReallocAsyncCtx3 + 60 | 0; //@line 7035
  HEAP32[$330 >> 2] = $32; //@line 7036
  $331 = $ReallocAsyncCtx3 + 64 | 0; //@line 7037
  HEAP32[$331 >> 2] = $34; //@line 7038
  $332 = $ReallocAsyncCtx3 + 68 | 0; //@line 7039
  HEAP32[$332 >> 2] = $36; //@line 7040
  $333 = $ReallocAsyncCtx3 + 72 | 0; //@line 7041
  HEAP32[$333 >> 2] = $38; //@line 7042
  $334 = $ReallocAsyncCtx3 + 76 | 0; //@line 7043
  HEAP32[$334 >> 2] = $40; //@line 7044
  $335 = $ReallocAsyncCtx3 + 80 | 0; //@line 7045
  HEAP32[$335 >> 2] = $42; //@line 7046
  $336 = $ReallocAsyncCtx3 + 84 | 0; //@line 7047
  HEAP8[$336 >> 0] = $119; //@line 7048
  $337 = $ReallocAsyncCtx3 + 88 | 0; //@line 7049
  HEAP32[$337 >> 2] = $44; //@line 7050
  $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 7051
  HEAP32[$338 >> 2] = $46; //@line 7052
  $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 7053
  HEAP32[$339 >> 2] = $48; //@line 7054
  $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 7055
  HEAP32[$340 >> 2] = $50; //@line 7056
  $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 7057
  HEAP32[$341 >> 2] = $52; //@line 7058
  $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 7059
  HEAP32[$342 >> 2] = $54; //@line 7060
  $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 7061
  HEAP32[$343 >> 2] = $56; //@line 7062
  $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 7063
  HEAP32[$344 >> 2] = $58; //@line 7064
  $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 7065
  HEAP32[$345 >> 2] = $60; //@line 7066
  $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 7067
  HEAP32[$346 >> 2] = $62; //@line 7068
  $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 7069
  HEAP32[$347 >> 2] = $64; //@line 7070
  $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 7071
  HEAP32[$348 >> 2] = $66; //@line 7072
  $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 7073
  HEAP32[$349 >> 2] = $68; //@line 7074
  $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 7075
  HEAP32[$350 >> 2] = $70; //@line 7076
  $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 7077
  HEAP32[$351 >> 2] = $72; //@line 7078
  $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 7079
  HEAP32[$352 >> 2] = $74; //@line 7080
  $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 7081
  HEAP32[$353 >> 2] = $76; //@line 7082
  $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 7083
  HEAP32[$354 >> 2] = $78; //@line 7084
  $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 7085
  HEAP32[$355 >> 2] = $80; //@line 7086
  $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 7087
  HEAP32[$356 >> 2] = $82; //@line 7088
  $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 7089
  HEAP32[$357 >> 2] = $84; //@line 7090
  $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 7091
  HEAP32[$358 >> 2] = $86; //@line 7092
  $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 7093
  HEAP32[$359 >> 2] = $88; //@line 7094
  $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 7095
  HEAP32[$360 >> 2] = $92; //@line 7096
  $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 7097
  HEAP32[$361 >> 2] = $94; //@line 7098
  $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 7099
  HEAP32[$362 >> 2] = $96; //@line 7100
  $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 7101
  HEAP32[$363 >> 2] = $98; //@line 7102
  $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 7103
  HEAP32[$364 >> 2] = $100; //@line 7104
  $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 7105
  HEAP32[$365 >> 2] = $102; //@line 7106
  $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 7107
  HEAP32[$366 >> 2] = $104; //@line 7108
  $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 7109
  HEAP32[$367 >> 2] = $106; //@line 7110
  $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 7111
  HEAP32[$368 >> 2] = $108; //@line 7112
  $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 7113
  HEAP32[$369 >> 2] = $110; //@line 7114
  $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 7115
  HEAP32[$370 >> 2] = $112; //@line 7116
  $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 7117
  HEAP32[$371 >> 2] = $114; //@line 7118
  $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 7119
  HEAP32[$372 >> 2] = $116; //@line 7120
  sp = STACKTOP; //@line 7121
  return;
 } else if ((label | 0) == 18) {
  $392 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 7128
  HEAP32[$38 >> 2] = (HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 7149
  HEAP32[$36 >> 2] = 0; //@line 7150
  $413 = $$0$be + 6 << 24 >> 24; //@line 7151
  HEAP8[$86 >> 0] = HEAP8[$18 + ($$0$be + 5 & 255) >> 0] | 0; //@line 7155
  $419 = HEAP32[(HEAP32[$76 >> 2] | 0) + 8 >> 2] | 0; //@line 7158
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 7159
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($52, $392, $110) | 0; //@line 7160
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 7163
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 7164
   HEAP8[$421 >> 0] = $2; //@line 7165
   $422 = $ReallocAsyncCtx4 + 5 | 0; //@line 7166
   HEAP8[$422 >> 0] = $4; //@line 7167
   $423 = $ReallocAsyncCtx4 + 8 | 0; //@line 7168
   HEAP32[$423 >> 2] = $6; //@line 7169
   $424 = $ReallocAsyncCtx4 + 12 | 0; //@line 7170
   HEAP32[$424 >> 2] = $8; //@line 7171
   $425 = $ReallocAsyncCtx4 + 16 | 0; //@line 7172
   HEAP32[$425 >> 2] = $10; //@line 7173
   $426 = $ReallocAsyncCtx4 + 20 | 0; //@line 7174
   HEAP32[$426 >> 2] = $12; //@line 7175
   $427 = $ReallocAsyncCtx4 + 24 | 0; //@line 7176
   HEAP32[$427 >> 2] = $14; //@line 7177
   $428 = $ReallocAsyncCtx4 + 28 | 0; //@line 7178
   HEAP32[$428 >> 2] = $16; //@line 7179
   $429 = $ReallocAsyncCtx4 + 32 | 0; //@line 7180
   HEAP32[$429 >> 2] = $18; //@line 7181
   $430 = $ReallocAsyncCtx4 + 36 | 0; //@line 7182
   HEAP32[$430 >> 2] = $20; //@line 7183
   $431 = $ReallocAsyncCtx4 + 40 | 0; //@line 7184
   HEAP8[$431 >> 0] = $22; //@line 7185
   $432 = $ReallocAsyncCtx4 + 44 | 0; //@line 7186
   HEAP32[$432 >> 2] = $24; //@line 7187
   $433 = $ReallocAsyncCtx4 + 48 | 0; //@line 7188
   HEAP32[$433 >> 2] = $26; //@line 7189
   $434 = $ReallocAsyncCtx4 + 52 | 0; //@line 7190
   HEAP32[$434 >> 2] = $28; //@line 7191
   $435 = $ReallocAsyncCtx4 + 56 | 0; //@line 7192
   HEAP32[$435 >> 2] = $30; //@line 7193
   $436 = $ReallocAsyncCtx4 + 60 | 0; //@line 7194
   HEAP32[$436 >> 2] = $32; //@line 7195
   $437 = $ReallocAsyncCtx4 + 64 | 0; //@line 7196
   HEAP32[$437 >> 2] = $34; //@line 7197
   $438 = $ReallocAsyncCtx4 + 68 | 0; //@line 7198
   HEAP32[$438 >> 2] = $36; //@line 7199
   $439 = $ReallocAsyncCtx4 + 72 | 0; //@line 7200
   HEAP32[$439 >> 2] = $38; //@line 7201
   $440 = $ReallocAsyncCtx4 + 76 | 0; //@line 7202
   HEAP32[$440 >> 2] = $40; //@line 7203
   $441 = $ReallocAsyncCtx4 + 80 | 0; //@line 7204
   HEAP32[$441 >> 2] = $42; //@line 7205
   $442 = $ReallocAsyncCtx4 + 84 | 0; //@line 7206
   HEAP32[$442 >> 2] = $44; //@line 7207
   $443 = $ReallocAsyncCtx4 + 88 | 0; //@line 7208
   HEAP32[$443 >> 2] = $46; //@line 7209
   $444 = $ReallocAsyncCtx4 + 92 | 0; //@line 7210
   HEAP32[$444 >> 2] = $48; //@line 7211
   $445 = $ReallocAsyncCtx4 + 96 | 0; //@line 7212
   HEAP32[$445 >> 2] = $50; //@line 7213
   $446 = $ReallocAsyncCtx4 + 100 | 0; //@line 7214
   HEAP32[$446 >> 2] = $52; //@line 7215
   $447 = $ReallocAsyncCtx4 + 104 | 0; //@line 7216
   HEAP32[$447 >> 2] = $54; //@line 7217
   $448 = $ReallocAsyncCtx4 + 108 | 0; //@line 7218
   HEAP32[$448 >> 2] = $56; //@line 7219
   $449 = $ReallocAsyncCtx4 + 112 | 0; //@line 7220
   HEAP32[$449 >> 2] = $58; //@line 7221
   $450 = $ReallocAsyncCtx4 + 116 | 0; //@line 7222
   HEAP32[$450 >> 2] = $60; //@line 7223
   $451 = $ReallocAsyncCtx4 + 120 | 0; //@line 7224
   HEAP32[$451 >> 2] = $62; //@line 7225
   $452 = $ReallocAsyncCtx4 + 124 | 0; //@line 7226
   HEAP32[$452 >> 2] = $64; //@line 7227
   $453 = $ReallocAsyncCtx4 + 128 | 0; //@line 7228
   HEAP32[$453 >> 2] = $66; //@line 7229
   $454 = $ReallocAsyncCtx4 + 132 | 0; //@line 7230
   HEAP32[$454 >> 2] = $68; //@line 7231
   $455 = $ReallocAsyncCtx4 + 136 | 0; //@line 7232
   HEAP32[$455 >> 2] = $70; //@line 7233
   $456 = $ReallocAsyncCtx4 + 140 | 0; //@line 7234
   HEAP32[$456 >> 2] = $72; //@line 7235
   $457 = $ReallocAsyncCtx4 + 144 | 0; //@line 7236
   HEAP32[$457 >> 2] = $74; //@line 7237
   $458 = $ReallocAsyncCtx4 + 148 | 0; //@line 7238
   HEAP32[$458 >> 2] = $76; //@line 7239
   $459 = $ReallocAsyncCtx4 + 152 | 0; //@line 7240
   HEAP32[$459 >> 2] = $78; //@line 7241
   $460 = $ReallocAsyncCtx4 + 156 | 0; //@line 7242
   HEAP32[$460 >> 2] = $80; //@line 7243
   $461 = $ReallocAsyncCtx4 + 160 | 0; //@line 7244
   HEAP32[$461 >> 2] = $82; //@line 7245
   $462 = $ReallocAsyncCtx4 + 164 | 0; //@line 7246
   HEAP32[$462 >> 2] = $84; //@line 7247
   $463 = $ReallocAsyncCtx4 + 168 | 0; //@line 7248
   HEAP32[$463 >> 2] = $86; //@line 7249
   $464 = $ReallocAsyncCtx4 + 172 | 0; //@line 7250
   HEAP32[$464 >> 2] = $88; //@line 7251
   $465 = $ReallocAsyncCtx4 + 176 | 0; //@line 7252
   HEAP8[$465 >> 0] = $413; //@line 7253
   $466 = $ReallocAsyncCtx4 + 180 | 0; //@line 7254
   HEAP32[$466 >> 2] = $92; //@line 7255
   $467 = $ReallocAsyncCtx4 + 184 | 0; //@line 7256
   HEAP32[$467 >> 2] = $94; //@line 7257
   $468 = $ReallocAsyncCtx4 + 188 | 0; //@line 7258
   HEAP32[$468 >> 2] = $96; //@line 7259
   $469 = $ReallocAsyncCtx4 + 192 | 0; //@line 7260
   HEAP32[$469 >> 2] = $98; //@line 7261
   $470 = $ReallocAsyncCtx4 + 196 | 0; //@line 7262
   HEAP32[$470 >> 2] = $100; //@line 7263
   $471 = $ReallocAsyncCtx4 + 200 | 0; //@line 7264
   HEAP32[$471 >> 2] = $102; //@line 7265
   $472 = $ReallocAsyncCtx4 + 204 | 0; //@line 7266
   HEAP32[$472 >> 2] = $104; //@line 7267
   $473 = $ReallocAsyncCtx4 + 208 | 0; //@line 7268
   HEAP32[$473 >> 2] = $106; //@line 7269
   $474 = $ReallocAsyncCtx4 + 212 | 0; //@line 7270
   HEAP32[$474 >> 2] = $108; //@line 7271
   $475 = $ReallocAsyncCtx4 + 216 | 0; //@line 7272
   HEAP32[$475 >> 2] = $110; //@line 7273
   $476 = $ReallocAsyncCtx4 + 220 | 0; //@line 7274
   HEAP32[$476 >> 2] = $112; //@line 7275
   $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 7276
   HEAP32[$477 >> 2] = $114; //@line 7277
   $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 7278
   HEAP32[$478 >> 2] = $116; //@line 7279
   sp = STACKTOP; //@line 7280
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 7284
  ___async_unwind = 0; //@line 7285
  HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 7286
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 7287
  HEAP8[$421 >> 0] = $2; //@line 7288
  $422 = $ReallocAsyncCtx4 + 5 | 0; //@line 7289
  HEAP8[$422 >> 0] = $4; //@line 7290
  $423 = $ReallocAsyncCtx4 + 8 | 0; //@line 7291
  HEAP32[$423 >> 2] = $6; //@line 7292
  $424 = $ReallocAsyncCtx4 + 12 | 0; //@line 7293
  HEAP32[$424 >> 2] = $8; //@line 7294
  $425 = $ReallocAsyncCtx4 + 16 | 0; //@line 7295
  HEAP32[$425 >> 2] = $10; //@line 7296
  $426 = $ReallocAsyncCtx4 + 20 | 0; //@line 7297
  HEAP32[$426 >> 2] = $12; //@line 7298
  $427 = $ReallocAsyncCtx4 + 24 | 0; //@line 7299
  HEAP32[$427 >> 2] = $14; //@line 7300
  $428 = $ReallocAsyncCtx4 + 28 | 0; //@line 7301
  HEAP32[$428 >> 2] = $16; //@line 7302
  $429 = $ReallocAsyncCtx4 + 32 | 0; //@line 7303
  HEAP32[$429 >> 2] = $18; //@line 7304
  $430 = $ReallocAsyncCtx4 + 36 | 0; //@line 7305
  HEAP32[$430 >> 2] = $20; //@line 7306
  $431 = $ReallocAsyncCtx4 + 40 | 0; //@line 7307
  HEAP8[$431 >> 0] = $22; //@line 7308
  $432 = $ReallocAsyncCtx4 + 44 | 0; //@line 7309
  HEAP32[$432 >> 2] = $24; //@line 7310
  $433 = $ReallocAsyncCtx4 + 48 | 0; //@line 7311
  HEAP32[$433 >> 2] = $26; //@line 7312
  $434 = $ReallocAsyncCtx4 + 52 | 0; //@line 7313
  HEAP32[$434 >> 2] = $28; //@line 7314
  $435 = $ReallocAsyncCtx4 + 56 | 0; //@line 7315
  HEAP32[$435 >> 2] = $30; //@line 7316
  $436 = $ReallocAsyncCtx4 + 60 | 0; //@line 7317
  HEAP32[$436 >> 2] = $32; //@line 7318
  $437 = $ReallocAsyncCtx4 + 64 | 0; //@line 7319
  HEAP32[$437 >> 2] = $34; //@line 7320
  $438 = $ReallocAsyncCtx4 + 68 | 0; //@line 7321
  HEAP32[$438 >> 2] = $36; //@line 7322
  $439 = $ReallocAsyncCtx4 + 72 | 0; //@line 7323
  HEAP32[$439 >> 2] = $38; //@line 7324
  $440 = $ReallocAsyncCtx4 + 76 | 0; //@line 7325
  HEAP32[$440 >> 2] = $40; //@line 7326
  $441 = $ReallocAsyncCtx4 + 80 | 0; //@line 7327
  HEAP32[$441 >> 2] = $42; //@line 7328
  $442 = $ReallocAsyncCtx4 + 84 | 0; //@line 7329
  HEAP32[$442 >> 2] = $44; //@line 7330
  $443 = $ReallocAsyncCtx4 + 88 | 0; //@line 7331
  HEAP32[$443 >> 2] = $46; //@line 7332
  $444 = $ReallocAsyncCtx4 + 92 | 0; //@line 7333
  HEAP32[$444 >> 2] = $48; //@line 7334
  $445 = $ReallocAsyncCtx4 + 96 | 0; //@line 7335
  HEAP32[$445 >> 2] = $50; //@line 7336
  $446 = $ReallocAsyncCtx4 + 100 | 0; //@line 7337
  HEAP32[$446 >> 2] = $52; //@line 7338
  $447 = $ReallocAsyncCtx4 + 104 | 0; //@line 7339
  HEAP32[$447 >> 2] = $54; //@line 7340
  $448 = $ReallocAsyncCtx4 + 108 | 0; //@line 7341
  HEAP32[$448 >> 2] = $56; //@line 7342
  $449 = $ReallocAsyncCtx4 + 112 | 0; //@line 7343
  HEAP32[$449 >> 2] = $58; //@line 7344
  $450 = $ReallocAsyncCtx4 + 116 | 0; //@line 7345
  HEAP32[$450 >> 2] = $60; //@line 7346
  $451 = $ReallocAsyncCtx4 + 120 | 0; //@line 7347
  HEAP32[$451 >> 2] = $62; //@line 7348
  $452 = $ReallocAsyncCtx4 + 124 | 0; //@line 7349
  HEAP32[$452 >> 2] = $64; //@line 7350
  $453 = $ReallocAsyncCtx4 + 128 | 0; //@line 7351
  HEAP32[$453 >> 2] = $66; //@line 7352
  $454 = $ReallocAsyncCtx4 + 132 | 0; //@line 7353
  HEAP32[$454 >> 2] = $68; //@line 7354
  $455 = $ReallocAsyncCtx4 + 136 | 0; //@line 7355
  HEAP32[$455 >> 2] = $70; //@line 7356
  $456 = $ReallocAsyncCtx4 + 140 | 0; //@line 7357
  HEAP32[$456 >> 2] = $72; //@line 7358
  $457 = $ReallocAsyncCtx4 + 144 | 0; //@line 7359
  HEAP32[$457 >> 2] = $74; //@line 7360
  $458 = $ReallocAsyncCtx4 + 148 | 0; //@line 7361
  HEAP32[$458 >> 2] = $76; //@line 7362
  $459 = $ReallocAsyncCtx4 + 152 | 0; //@line 7363
  HEAP32[$459 >> 2] = $78; //@line 7364
  $460 = $ReallocAsyncCtx4 + 156 | 0; //@line 7365
  HEAP32[$460 >> 2] = $80; //@line 7366
  $461 = $ReallocAsyncCtx4 + 160 | 0; //@line 7367
  HEAP32[$461 >> 2] = $82; //@line 7368
  $462 = $ReallocAsyncCtx4 + 164 | 0; //@line 7369
  HEAP32[$462 >> 2] = $84; //@line 7370
  $463 = $ReallocAsyncCtx4 + 168 | 0; //@line 7371
  HEAP32[$463 >> 2] = $86; //@line 7372
  $464 = $ReallocAsyncCtx4 + 172 | 0; //@line 7373
  HEAP32[$464 >> 2] = $88; //@line 7374
  $465 = $ReallocAsyncCtx4 + 176 | 0; //@line 7375
  HEAP8[$465 >> 0] = $413; //@line 7376
  $466 = $ReallocAsyncCtx4 + 180 | 0; //@line 7377
  HEAP32[$466 >> 2] = $92; //@line 7378
  $467 = $ReallocAsyncCtx4 + 184 | 0; //@line 7379
  HEAP32[$467 >> 2] = $94; //@line 7380
  $468 = $ReallocAsyncCtx4 + 188 | 0; //@line 7381
  HEAP32[$468 >> 2] = $96; //@line 7382
  $469 = $ReallocAsyncCtx4 + 192 | 0; //@line 7383
  HEAP32[$469 >> 2] = $98; //@line 7384
  $470 = $ReallocAsyncCtx4 + 196 | 0; //@line 7385
  HEAP32[$470 >> 2] = $100; //@line 7386
  $471 = $ReallocAsyncCtx4 + 200 | 0; //@line 7387
  HEAP32[$471 >> 2] = $102; //@line 7388
  $472 = $ReallocAsyncCtx4 + 204 | 0; //@line 7389
  HEAP32[$472 >> 2] = $104; //@line 7390
  $473 = $ReallocAsyncCtx4 + 208 | 0; //@line 7391
  HEAP32[$473 >> 2] = $106; //@line 7392
  $474 = $ReallocAsyncCtx4 + 212 | 0; //@line 7393
  HEAP32[$474 >> 2] = $108; //@line 7394
  $475 = $ReallocAsyncCtx4 + 216 | 0; //@line 7395
  HEAP32[$475 >> 2] = $110; //@line 7396
  $476 = $ReallocAsyncCtx4 + 220 | 0; //@line 7397
  HEAP32[$476 >> 2] = $112; //@line 7398
  $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 7399
  HEAP32[$477 >> 2] = $114; //@line 7400
  $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 7401
  HEAP32[$478 >> 2] = $116; //@line 7402
  sp = STACKTOP; //@line 7403
  return;
 } else if ((label | 0) == 27) {
  $511 = $$0$be + 2 << 24 >> 24; //@line 7407
  $515 = HEAPU8[$18 + ($119 & 255) >> 0] | 0; //@line 7411
  $517 = $515 >>> 5 & 1; //@line 7414
  $519 = $515 >>> 4 & 1; //@line 7417
  $522 = HEAP32[(HEAP32[$112 >> 2] | 0) + 44 >> 2] | 0; //@line 7420
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 7421
  $523 = FUNCTION_TABLE_iiii[$522 & 31]($52, $519, $517) | 0; //@line 7422
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 478; //@line 7425
   $524 = $ReallocAsyncCtx5 + 4 | 0; //@line 7426
   HEAP8[$524 >> 0] = $2; //@line 7427
   $525 = $ReallocAsyncCtx5 + 5 | 0; //@line 7428
   HEAP8[$525 >> 0] = $4; //@line 7429
   $526 = $ReallocAsyncCtx5 + 8 | 0; //@line 7430
   HEAP32[$526 >> 2] = $6; //@line 7431
   $527 = $ReallocAsyncCtx5 + 12 | 0; //@line 7432
   HEAP32[$527 >> 2] = $8; //@line 7433
   $528 = $ReallocAsyncCtx5 + 16 | 0; //@line 7434
   HEAP32[$528 >> 2] = $10; //@line 7435
   $529 = $ReallocAsyncCtx5 + 20 | 0; //@line 7436
   HEAP32[$529 >> 2] = $12; //@line 7437
   $530 = $ReallocAsyncCtx5 + 24 | 0; //@line 7438
   HEAP32[$530 >> 2] = $14; //@line 7439
   $531 = $ReallocAsyncCtx5 + 28 | 0; //@line 7440
   HEAP32[$531 >> 2] = $16; //@line 7441
   $532 = $ReallocAsyncCtx5 + 32 | 0; //@line 7442
   HEAP32[$532 >> 2] = $18; //@line 7443
   $533 = $ReallocAsyncCtx5 + 36 | 0; //@line 7444
   HEAP32[$533 >> 2] = $20; //@line 7445
   $534 = $ReallocAsyncCtx5 + 40 | 0; //@line 7446
   HEAP8[$534 >> 0] = $22; //@line 7447
   $535 = $ReallocAsyncCtx5 + 44 | 0; //@line 7448
   HEAP32[$535 >> 2] = $$0107$be; //@line 7449
   $536 = $ReallocAsyncCtx5 + 48 | 0; //@line 7450
   HEAP32[$536 >> 2] = $24; //@line 7451
   $537 = $ReallocAsyncCtx5 + 52 | 0; //@line 7452
   HEAP32[$537 >> 2] = $515; //@line 7453
   $538 = $ReallocAsyncCtx5 + 56 | 0; //@line 7454
   HEAP32[$538 >> 2] = $26; //@line 7455
   $539 = $ReallocAsyncCtx5 + 60 | 0; //@line 7456
   HEAP32[$539 >> 2] = $28; //@line 7457
   $540 = $ReallocAsyncCtx5 + 64 | 0; //@line 7458
   HEAP32[$540 >> 2] = $30; //@line 7459
   $541 = $ReallocAsyncCtx5 + 68 | 0; //@line 7460
   HEAP32[$541 >> 2] = $32; //@line 7461
   $542 = $ReallocAsyncCtx5 + 72 | 0; //@line 7462
   HEAP32[$542 >> 2] = $34; //@line 7463
   $543 = $ReallocAsyncCtx5 + 76 | 0; //@line 7464
   HEAP32[$543 >> 2] = $36; //@line 7465
   $544 = $ReallocAsyncCtx5 + 80 | 0; //@line 7466
   HEAP32[$544 >> 2] = $38; //@line 7467
   $545 = $ReallocAsyncCtx5 + 84 | 0; //@line 7468
   HEAP32[$545 >> 2] = $40; //@line 7469
   $546 = $ReallocAsyncCtx5 + 88 | 0; //@line 7470
   HEAP32[$546 >> 2] = $42; //@line 7471
   $547 = $ReallocAsyncCtx5 + 92 | 0; //@line 7472
   HEAP8[$547 >> 0] = $511; //@line 7473
   $548 = $ReallocAsyncCtx5 + 96 | 0; //@line 7474
   HEAP32[$548 >> 2] = $44; //@line 7475
   $549 = $ReallocAsyncCtx5 + 100 | 0; //@line 7476
   HEAP32[$549 >> 2] = $46; //@line 7477
   $550 = $ReallocAsyncCtx5 + 104 | 0; //@line 7478
   HEAP32[$550 >> 2] = $48; //@line 7479
   $551 = $ReallocAsyncCtx5 + 108 | 0; //@line 7480
   HEAP32[$551 >> 2] = $50; //@line 7481
   $552 = $ReallocAsyncCtx5 + 112 | 0; //@line 7482
   HEAP32[$552 >> 2] = $52; //@line 7483
   $553 = $ReallocAsyncCtx5 + 116 | 0; //@line 7484
   HEAP32[$553 >> 2] = $54; //@line 7485
   $554 = $ReallocAsyncCtx5 + 120 | 0; //@line 7486
   HEAP32[$554 >> 2] = $56; //@line 7487
   $555 = $ReallocAsyncCtx5 + 124 | 0; //@line 7488
   HEAP32[$555 >> 2] = $58; //@line 7489
   $556 = $ReallocAsyncCtx5 + 128 | 0; //@line 7490
   HEAP8[$556 >> 0] = $517; //@line 7491
   $557 = $ReallocAsyncCtx5 + 132 | 0; //@line 7492
   HEAP32[$557 >> 2] = $60; //@line 7493
   $558 = $ReallocAsyncCtx5 + 136 | 0; //@line 7494
   HEAP32[$558 >> 2] = $62; //@line 7495
   $559 = $ReallocAsyncCtx5 + 140 | 0; //@line 7496
   HEAP32[$559 >> 2] = $64; //@line 7497
   $560 = $ReallocAsyncCtx5 + 144 | 0; //@line 7498
   HEAP32[$560 >> 2] = $66; //@line 7499
   $561 = $ReallocAsyncCtx5 + 148 | 0; //@line 7500
   HEAP32[$561 >> 2] = $68; //@line 7501
   $562 = $ReallocAsyncCtx5 + 152 | 0; //@line 7502
   HEAP32[$562 >> 2] = $70; //@line 7503
   $563 = $ReallocAsyncCtx5 + 156 | 0; //@line 7504
   HEAP32[$563 >> 2] = $72; //@line 7505
   $564 = $ReallocAsyncCtx5 + 160 | 0; //@line 7506
   HEAP32[$564 >> 2] = $74; //@line 7507
   $565 = $ReallocAsyncCtx5 + 164 | 0; //@line 7508
   HEAP32[$565 >> 2] = $76; //@line 7509
   $566 = $ReallocAsyncCtx5 + 168 | 0; //@line 7510
   HEAP32[$566 >> 2] = $78; //@line 7511
   $567 = $ReallocAsyncCtx5 + 172 | 0; //@line 7512
   HEAP32[$567 >> 2] = $80; //@line 7513
   $568 = $ReallocAsyncCtx5 + 176 | 0; //@line 7514
   HEAP32[$568 >> 2] = $82; //@line 7515
   $569 = $ReallocAsyncCtx5 + 180 | 0; //@line 7516
   HEAP32[$569 >> 2] = $84; //@line 7517
   $570 = $ReallocAsyncCtx5 + 184 | 0; //@line 7518
   HEAP32[$570 >> 2] = $86; //@line 7519
   $571 = $ReallocAsyncCtx5 + 188 | 0; //@line 7520
   HEAP32[$571 >> 2] = $88; //@line 7521
   $572 = $ReallocAsyncCtx5 + 192 | 0; //@line 7522
   HEAP32[$572 >> 2] = $92; //@line 7523
   $573 = $ReallocAsyncCtx5 + 196 | 0; //@line 7524
   HEAP32[$573 >> 2] = $94; //@line 7525
   $574 = $ReallocAsyncCtx5 + 200 | 0; //@line 7526
   HEAP32[$574 >> 2] = $96; //@line 7527
   $575 = $ReallocAsyncCtx5 + 204 | 0; //@line 7528
   HEAP32[$575 >> 2] = $98; //@line 7529
   $576 = $ReallocAsyncCtx5 + 208 | 0; //@line 7530
   HEAP32[$576 >> 2] = $100; //@line 7531
   $577 = $ReallocAsyncCtx5 + 212 | 0; //@line 7532
   HEAP32[$577 >> 2] = $102; //@line 7533
   $578 = $ReallocAsyncCtx5 + 216 | 0; //@line 7534
   HEAP8[$578 >> 0] = $519; //@line 7535
   $579 = $ReallocAsyncCtx5 + 220 | 0; //@line 7536
   HEAP32[$579 >> 2] = $104; //@line 7537
   $580 = $ReallocAsyncCtx5 + 224 | 0; //@line 7538
   HEAP32[$580 >> 2] = $106; //@line 7539
   $581 = $ReallocAsyncCtx5 + 228 | 0; //@line 7540
   HEAP32[$581 >> 2] = $108; //@line 7541
   $582 = $ReallocAsyncCtx5 + 232 | 0; //@line 7542
   HEAP32[$582 >> 2] = $110; //@line 7543
   $583 = $ReallocAsyncCtx5 + 236 | 0; //@line 7544
   HEAP32[$583 >> 2] = $112; //@line 7545
   $584 = $ReallocAsyncCtx5 + 240 | 0; //@line 7546
   HEAP32[$584 >> 2] = $114; //@line 7547
   $585 = $ReallocAsyncCtx5 + 244 | 0; //@line 7548
   HEAP32[$585 >> 2] = $116; //@line 7549
   sp = STACKTOP; //@line 7550
   return;
  }
  HEAP8[___async_retval >> 0] = $523 & 1; //@line 7555
  ___async_unwind = 0; //@line 7556
  HEAP32[$ReallocAsyncCtx5 >> 2] = 478; //@line 7557
  $524 = $ReallocAsyncCtx5 + 4 | 0; //@line 7558
  HEAP8[$524 >> 0] = $2; //@line 7559
  $525 = $ReallocAsyncCtx5 + 5 | 0; //@line 7560
  HEAP8[$525 >> 0] = $4; //@line 7561
  $526 = $ReallocAsyncCtx5 + 8 | 0; //@line 7562
  HEAP32[$526 >> 2] = $6; //@line 7563
  $527 = $ReallocAsyncCtx5 + 12 | 0; //@line 7564
  HEAP32[$527 >> 2] = $8; //@line 7565
  $528 = $ReallocAsyncCtx5 + 16 | 0; //@line 7566
  HEAP32[$528 >> 2] = $10; //@line 7567
  $529 = $ReallocAsyncCtx5 + 20 | 0; //@line 7568
  HEAP32[$529 >> 2] = $12; //@line 7569
  $530 = $ReallocAsyncCtx5 + 24 | 0; //@line 7570
  HEAP32[$530 >> 2] = $14; //@line 7571
  $531 = $ReallocAsyncCtx5 + 28 | 0; //@line 7572
  HEAP32[$531 >> 2] = $16; //@line 7573
  $532 = $ReallocAsyncCtx5 + 32 | 0; //@line 7574
  HEAP32[$532 >> 2] = $18; //@line 7575
  $533 = $ReallocAsyncCtx5 + 36 | 0; //@line 7576
  HEAP32[$533 >> 2] = $20; //@line 7577
  $534 = $ReallocAsyncCtx5 + 40 | 0; //@line 7578
  HEAP8[$534 >> 0] = $22; //@line 7579
  $535 = $ReallocAsyncCtx5 + 44 | 0; //@line 7580
  HEAP32[$535 >> 2] = $$0107$be; //@line 7581
  $536 = $ReallocAsyncCtx5 + 48 | 0; //@line 7582
  HEAP32[$536 >> 2] = $24; //@line 7583
  $537 = $ReallocAsyncCtx5 + 52 | 0; //@line 7584
  HEAP32[$537 >> 2] = $515; //@line 7585
  $538 = $ReallocAsyncCtx5 + 56 | 0; //@line 7586
  HEAP32[$538 >> 2] = $26; //@line 7587
  $539 = $ReallocAsyncCtx5 + 60 | 0; //@line 7588
  HEAP32[$539 >> 2] = $28; //@line 7589
  $540 = $ReallocAsyncCtx5 + 64 | 0; //@line 7590
  HEAP32[$540 >> 2] = $30; //@line 7591
  $541 = $ReallocAsyncCtx5 + 68 | 0; //@line 7592
  HEAP32[$541 >> 2] = $32; //@line 7593
  $542 = $ReallocAsyncCtx5 + 72 | 0; //@line 7594
  HEAP32[$542 >> 2] = $34; //@line 7595
  $543 = $ReallocAsyncCtx5 + 76 | 0; //@line 7596
  HEAP32[$543 >> 2] = $36; //@line 7597
  $544 = $ReallocAsyncCtx5 + 80 | 0; //@line 7598
  HEAP32[$544 >> 2] = $38; //@line 7599
  $545 = $ReallocAsyncCtx5 + 84 | 0; //@line 7600
  HEAP32[$545 >> 2] = $40; //@line 7601
  $546 = $ReallocAsyncCtx5 + 88 | 0; //@line 7602
  HEAP32[$546 >> 2] = $42; //@line 7603
  $547 = $ReallocAsyncCtx5 + 92 | 0; //@line 7604
  HEAP8[$547 >> 0] = $511; //@line 7605
  $548 = $ReallocAsyncCtx5 + 96 | 0; //@line 7606
  HEAP32[$548 >> 2] = $44; //@line 7607
  $549 = $ReallocAsyncCtx5 + 100 | 0; //@line 7608
  HEAP32[$549 >> 2] = $46; //@line 7609
  $550 = $ReallocAsyncCtx5 + 104 | 0; //@line 7610
  HEAP32[$550 >> 2] = $48; //@line 7611
  $551 = $ReallocAsyncCtx5 + 108 | 0; //@line 7612
  HEAP32[$551 >> 2] = $50; //@line 7613
  $552 = $ReallocAsyncCtx5 + 112 | 0; //@line 7614
  HEAP32[$552 >> 2] = $52; //@line 7615
  $553 = $ReallocAsyncCtx5 + 116 | 0; //@line 7616
  HEAP32[$553 >> 2] = $54; //@line 7617
  $554 = $ReallocAsyncCtx5 + 120 | 0; //@line 7618
  HEAP32[$554 >> 2] = $56; //@line 7619
  $555 = $ReallocAsyncCtx5 + 124 | 0; //@line 7620
  HEAP32[$555 >> 2] = $58; //@line 7621
  $556 = $ReallocAsyncCtx5 + 128 | 0; //@line 7622
  HEAP8[$556 >> 0] = $517; //@line 7623
  $557 = $ReallocAsyncCtx5 + 132 | 0; //@line 7624
  HEAP32[$557 >> 2] = $60; //@line 7625
  $558 = $ReallocAsyncCtx5 + 136 | 0; //@line 7626
  HEAP32[$558 >> 2] = $62; //@line 7627
  $559 = $ReallocAsyncCtx5 + 140 | 0; //@line 7628
  HEAP32[$559 >> 2] = $64; //@line 7629
  $560 = $ReallocAsyncCtx5 + 144 | 0; //@line 7630
  HEAP32[$560 >> 2] = $66; //@line 7631
  $561 = $ReallocAsyncCtx5 + 148 | 0; //@line 7632
  HEAP32[$561 >> 2] = $68; //@line 7633
  $562 = $ReallocAsyncCtx5 + 152 | 0; //@line 7634
  HEAP32[$562 >> 2] = $70; //@line 7635
  $563 = $ReallocAsyncCtx5 + 156 | 0; //@line 7636
  HEAP32[$563 >> 2] = $72; //@line 7637
  $564 = $ReallocAsyncCtx5 + 160 | 0; //@line 7638
  HEAP32[$564 >> 2] = $74; //@line 7639
  $565 = $ReallocAsyncCtx5 + 164 | 0; //@line 7640
  HEAP32[$565 >> 2] = $76; //@line 7641
  $566 = $ReallocAsyncCtx5 + 168 | 0; //@line 7642
  HEAP32[$566 >> 2] = $78; //@line 7643
  $567 = $ReallocAsyncCtx5 + 172 | 0; //@line 7644
  HEAP32[$567 >> 2] = $80; //@line 7645
  $568 = $ReallocAsyncCtx5 + 176 | 0; //@line 7646
  HEAP32[$568 >> 2] = $82; //@line 7647
  $569 = $ReallocAsyncCtx5 + 180 | 0; //@line 7648
  HEAP32[$569 >> 2] = $84; //@line 7649
  $570 = $ReallocAsyncCtx5 + 184 | 0; //@line 7650
  HEAP32[$570 >> 2] = $86; //@line 7651
  $571 = $ReallocAsyncCtx5 + 188 | 0; //@line 7652
  HEAP32[$571 >> 2] = $88; //@line 7653
  $572 = $ReallocAsyncCtx5 + 192 | 0; //@line 7654
  HEAP32[$572 >> 2] = $92; //@line 7655
  $573 = $ReallocAsyncCtx5 + 196 | 0; //@line 7656
  HEAP32[$573 >> 2] = $94; //@line 7657
  $574 = $ReallocAsyncCtx5 + 200 | 0; //@line 7658
  HEAP32[$574 >> 2] = $96; //@line 7659
  $575 = $ReallocAsyncCtx5 + 204 | 0; //@line 7660
  HEAP32[$575 >> 2] = $98; //@line 7661
  $576 = $ReallocAsyncCtx5 + 208 | 0; //@line 7662
  HEAP32[$576 >> 2] = $100; //@line 7663
  $577 = $ReallocAsyncCtx5 + 212 | 0; //@line 7664
  HEAP32[$577 >> 2] = $102; //@line 7665
  $578 = $ReallocAsyncCtx5 + 216 | 0; //@line 7666
  HEAP8[$578 >> 0] = $519; //@line 7667
  $579 = $ReallocAsyncCtx5 + 220 | 0; //@line 7668
  HEAP32[$579 >> 2] = $104; //@line 7669
  $580 = $ReallocAsyncCtx5 + 224 | 0; //@line 7670
  HEAP32[$580 >> 2] = $106; //@line 7671
  $581 = $ReallocAsyncCtx5 + 228 | 0; //@line 7672
  HEAP32[$581 >> 2] = $108; //@line 7673
  $582 = $ReallocAsyncCtx5 + 232 | 0; //@line 7674
  HEAP32[$582 >> 2] = $110; //@line 7675
  $583 = $ReallocAsyncCtx5 + 236 | 0; //@line 7676
  HEAP32[$583 >> 2] = $112; //@line 7677
  $584 = $ReallocAsyncCtx5 + 240 | 0; //@line 7678
  HEAP32[$584 >> 2] = $114; //@line 7679
  $585 = $ReallocAsyncCtx5 + 244 | 0; //@line 7680
  HEAP32[$585 >> 2] = $116; //@line 7681
  sp = STACKTOP; //@line 7682
  return;
 } else if ((label | 0) == 30) {
  $590 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 7689
  $603 = $$0$be + 5 << 24 >> 24; //@line 7702
  $610 = (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 7709
  $613 = HEAP32[(HEAP32[$94 >> 2] | 0) + 48 >> 2] | 0; //@line 7712
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 7713
  $614 = FUNCTION_TABLE_iiii[$613 & 31]($52, $590, $610) | 0; //@line 7714
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 479; //@line 7717
   $615 = $ReallocAsyncCtx6 + 4 | 0; //@line 7718
   HEAP8[$615 >> 0] = $2; //@line 7719
   $616 = $ReallocAsyncCtx6 + 5 | 0; //@line 7720
   HEAP8[$616 >> 0] = $4; //@line 7721
   $617 = $ReallocAsyncCtx6 + 8 | 0; //@line 7722
   HEAP32[$617 >> 2] = $6; //@line 7723
   $618 = $ReallocAsyncCtx6 + 12 | 0; //@line 7724
   HEAP32[$618 >> 2] = $8; //@line 7725
   $619 = $ReallocAsyncCtx6 + 16 | 0; //@line 7726
   HEAP32[$619 >> 2] = $10; //@line 7727
   $620 = $ReallocAsyncCtx6 + 20 | 0; //@line 7728
   HEAP32[$620 >> 2] = $12; //@line 7729
   $621 = $ReallocAsyncCtx6 + 24 | 0; //@line 7730
   HEAP32[$621 >> 2] = $14; //@line 7731
   $622 = $ReallocAsyncCtx6 + 28 | 0; //@line 7732
   HEAP32[$622 >> 2] = $16; //@line 7733
   $623 = $ReallocAsyncCtx6 + 32 | 0; //@line 7734
   HEAP32[$623 >> 2] = $18; //@line 7735
   $624 = $ReallocAsyncCtx6 + 36 | 0; //@line 7736
   HEAP32[$624 >> 2] = $20; //@line 7737
   $625 = $ReallocAsyncCtx6 + 40 | 0; //@line 7738
   HEAP8[$625 >> 0] = $22; //@line 7739
   $626 = $ReallocAsyncCtx6 + 44 | 0; //@line 7740
   HEAP32[$626 >> 2] = $24; //@line 7741
   $627 = $ReallocAsyncCtx6 + 48 | 0; //@line 7742
   HEAP32[$627 >> 2] = $26; //@line 7743
   $628 = $ReallocAsyncCtx6 + 52 | 0; //@line 7744
   HEAP8[$628 >> 0] = $603; //@line 7745
   $629 = $ReallocAsyncCtx6 + 56 | 0; //@line 7746
   HEAP32[$629 >> 2] = $28; //@line 7747
   $630 = $ReallocAsyncCtx6 + 60 | 0; //@line 7748
   HEAP32[$630 >> 2] = $30; //@line 7749
   $631 = $ReallocAsyncCtx6 + 64 | 0; //@line 7750
   HEAP32[$631 >> 2] = $32; //@line 7751
   $632 = $ReallocAsyncCtx6 + 68 | 0; //@line 7752
   HEAP32[$632 >> 2] = $34; //@line 7753
   $633 = $ReallocAsyncCtx6 + 72 | 0; //@line 7754
   HEAP32[$633 >> 2] = $36; //@line 7755
   $634 = $ReallocAsyncCtx6 + 76 | 0; //@line 7756
   HEAP32[$634 >> 2] = $38; //@line 7757
   $635 = $ReallocAsyncCtx6 + 80 | 0; //@line 7758
   HEAP32[$635 >> 2] = $40; //@line 7759
   $636 = $ReallocAsyncCtx6 + 84 | 0; //@line 7760
   HEAP32[$636 >> 2] = $42; //@line 7761
   $637 = $ReallocAsyncCtx6 + 88 | 0; //@line 7762
   HEAP32[$637 >> 2] = $44; //@line 7763
   $638 = $ReallocAsyncCtx6 + 92 | 0; //@line 7764
   HEAP32[$638 >> 2] = $46; //@line 7765
   $639 = $ReallocAsyncCtx6 + 96 | 0; //@line 7766
   HEAP32[$639 >> 2] = $48; //@line 7767
   $640 = $ReallocAsyncCtx6 + 100 | 0; //@line 7768
   HEAP32[$640 >> 2] = $50; //@line 7769
   $641 = $ReallocAsyncCtx6 + 104 | 0; //@line 7770
   HEAP32[$641 >> 2] = $52; //@line 7771
   $642 = $ReallocAsyncCtx6 + 108 | 0; //@line 7772
   HEAP32[$642 >> 2] = $54; //@line 7773
   $643 = $ReallocAsyncCtx6 + 112 | 0; //@line 7774
   HEAP32[$643 >> 2] = $56; //@line 7775
   $644 = $ReallocAsyncCtx6 + 116 | 0; //@line 7776
   HEAP32[$644 >> 2] = $58; //@line 7777
   $645 = $ReallocAsyncCtx6 + 120 | 0; //@line 7778
   HEAP32[$645 >> 2] = $60; //@line 7779
   $646 = $ReallocAsyncCtx6 + 124 | 0; //@line 7780
   HEAP32[$646 >> 2] = $62; //@line 7781
   $647 = $ReallocAsyncCtx6 + 128 | 0; //@line 7782
   HEAP32[$647 >> 2] = $64; //@line 7783
   $648 = $ReallocAsyncCtx6 + 132 | 0; //@line 7784
   HEAP32[$648 >> 2] = $66; //@line 7785
   $649 = $ReallocAsyncCtx6 + 136 | 0; //@line 7786
   HEAP32[$649 >> 2] = $68; //@line 7787
   $650 = $ReallocAsyncCtx6 + 140 | 0; //@line 7788
   HEAP32[$650 >> 2] = $70; //@line 7789
   $651 = $ReallocAsyncCtx6 + 144 | 0; //@line 7790
   HEAP32[$651 >> 2] = $72; //@line 7791
   $652 = $ReallocAsyncCtx6 + 148 | 0; //@line 7792
   HEAP32[$652 >> 2] = $74; //@line 7793
   $653 = $ReallocAsyncCtx6 + 152 | 0; //@line 7794
   HEAP32[$653 >> 2] = $76; //@line 7795
   $654 = $ReallocAsyncCtx6 + 156 | 0; //@line 7796
   HEAP32[$654 >> 2] = $78; //@line 7797
   $655 = $ReallocAsyncCtx6 + 160 | 0; //@line 7798
   HEAP32[$655 >> 2] = $80; //@line 7799
   $656 = $ReallocAsyncCtx6 + 164 | 0; //@line 7800
   HEAP32[$656 >> 2] = $82; //@line 7801
   $657 = $ReallocAsyncCtx6 + 168 | 0; //@line 7802
   HEAP32[$657 >> 2] = $84; //@line 7803
   $658 = $ReallocAsyncCtx6 + 172 | 0; //@line 7804
   HEAP32[$658 >> 2] = $86; //@line 7805
   $659 = $ReallocAsyncCtx6 + 176 | 0; //@line 7806
   HEAP32[$659 >> 2] = $88; //@line 7807
   $660 = $ReallocAsyncCtx6 + 180 | 0; //@line 7808
   HEAP32[$660 >> 2] = $92; //@line 7809
   $661 = $ReallocAsyncCtx6 + 184 | 0; //@line 7810
   HEAP32[$661 >> 2] = $94; //@line 7811
   $662 = $ReallocAsyncCtx6 + 188 | 0; //@line 7812
   HEAP32[$662 >> 2] = $96; //@line 7813
   $663 = $ReallocAsyncCtx6 + 192 | 0; //@line 7814
   HEAP32[$663 >> 2] = $98; //@line 7815
   $664 = $ReallocAsyncCtx6 + 196 | 0; //@line 7816
   HEAP32[$664 >> 2] = $100; //@line 7817
   $665 = $ReallocAsyncCtx6 + 200 | 0; //@line 7818
   HEAP32[$665 >> 2] = $102; //@line 7819
   $666 = $ReallocAsyncCtx6 + 204 | 0; //@line 7820
   HEAP32[$666 >> 2] = $104; //@line 7821
   $667 = $ReallocAsyncCtx6 + 208 | 0; //@line 7822
   HEAP32[$667 >> 2] = $106; //@line 7823
   $668 = $ReallocAsyncCtx6 + 212 | 0; //@line 7824
   HEAP32[$668 >> 2] = $108; //@line 7825
   $669 = $ReallocAsyncCtx6 + 216 | 0; //@line 7826
   HEAP32[$669 >> 2] = $110; //@line 7827
   $670 = $ReallocAsyncCtx6 + 220 | 0; //@line 7828
   HEAP32[$670 >> 2] = $112; //@line 7829
   $671 = $ReallocAsyncCtx6 + 224 | 0; //@line 7830
   HEAP32[$671 >> 2] = $114; //@line 7831
   $672 = $ReallocAsyncCtx6 + 228 | 0; //@line 7832
   HEAP32[$672 >> 2] = $116; //@line 7833
   sp = STACKTOP; //@line 7834
   return;
  }
  HEAP8[___async_retval >> 0] = $614; //@line 7838
  ___async_unwind = 0; //@line 7839
  HEAP32[$ReallocAsyncCtx6 >> 2] = 479; //@line 7840
  $615 = $ReallocAsyncCtx6 + 4 | 0; //@line 7841
  HEAP8[$615 >> 0] = $2; //@line 7842
  $616 = $ReallocAsyncCtx6 + 5 | 0; //@line 7843
  HEAP8[$616 >> 0] = $4; //@line 7844
  $617 = $ReallocAsyncCtx6 + 8 | 0; //@line 7845
  HEAP32[$617 >> 2] = $6; //@line 7846
  $618 = $ReallocAsyncCtx6 + 12 | 0; //@line 7847
  HEAP32[$618 >> 2] = $8; //@line 7848
  $619 = $ReallocAsyncCtx6 + 16 | 0; //@line 7849
  HEAP32[$619 >> 2] = $10; //@line 7850
  $620 = $ReallocAsyncCtx6 + 20 | 0; //@line 7851
  HEAP32[$620 >> 2] = $12; //@line 7852
  $621 = $ReallocAsyncCtx6 + 24 | 0; //@line 7853
  HEAP32[$621 >> 2] = $14; //@line 7854
  $622 = $ReallocAsyncCtx6 + 28 | 0; //@line 7855
  HEAP32[$622 >> 2] = $16; //@line 7856
  $623 = $ReallocAsyncCtx6 + 32 | 0; //@line 7857
  HEAP32[$623 >> 2] = $18; //@line 7858
  $624 = $ReallocAsyncCtx6 + 36 | 0; //@line 7859
  HEAP32[$624 >> 2] = $20; //@line 7860
  $625 = $ReallocAsyncCtx6 + 40 | 0; //@line 7861
  HEAP8[$625 >> 0] = $22; //@line 7862
  $626 = $ReallocAsyncCtx6 + 44 | 0; //@line 7863
  HEAP32[$626 >> 2] = $24; //@line 7864
  $627 = $ReallocAsyncCtx6 + 48 | 0; //@line 7865
  HEAP32[$627 >> 2] = $26; //@line 7866
  $628 = $ReallocAsyncCtx6 + 52 | 0; //@line 7867
  HEAP8[$628 >> 0] = $603; //@line 7868
  $629 = $ReallocAsyncCtx6 + 56 | 0; //@line 7869
  HEAP32[$629 >> 2] = $28; //@line 7870
  $630 = $ReallocAsyncCtx6 + 60 | 0; //@line 7871
  HEAP32[$630 >> 2] = $30; //@line 7872
  $631 = $ReallocAsyncCtx6 + 64 | 0; //@line 7873
  HEAP32[$631 >> 2] = $32; //@line 7874
  $632 = $ReallocAsyncCtx6 + 68 | 0; //@line 7875
  HEAP32[$632 >> 2] = $34; //@line 7876
  $633 = $ReallocAsyncCtx6 + 72 | 0; //@line 7877
  HEAP32[$633 >> 2] = $36; //@line 7878
  $634 = $ReallocAsyncCtx6 + 76 | 0; //@line 7879
  HEAP32[$634 >> 2] = $38; //@line 7880
  $635 = $ReallocAsyncCtx6 + 80 | 0; //@line 7881
  HEAP32[$635 >> 2] = $40; //@line 7882
  $636 = $ReallocAsyncCtx6 + 84 | 0; //@line 7883
  HEAP32[$636 >> 2] = $42; //@line 7884
  $637 = $ReallocAsyncCtx6 + 88 | 0; //@line 7885
  HEAP32[$637 >> 2] = $44; //@line 7886
  $638 = $ReallocAsyncCtx6 + 92 | 0; //@line 7887
  HEAP32[$638 >> 2] = $46; //@line 7888
  $639 = $ReallocAsyncCtx6 + 96 | 0; //@line 7889
  HEAP32[$639 >> 2] = $48; //@line 7890
  $640 = $ReallocAsyncCtx6 + 100 | 0; //@line 7891
  HEAP32[$640 >> 2] = $50; //@line 7892
  $641 = $ReallocAsyncCtx6 + 104 | 0; //@line 7893
  HEAP32[$641 >> 2] = $52; //@line 7894
  $642 = $ReallocAsyncCtx6 + 108 | 0; //@line 7895
  HEAP32[$642 >> 2] = $54; //@line 7896
  $643 = $ReallocAsyncCtx6 + 112 | 0; //@line 7897
  HEAP32[$643 >> 2] = $56; //@line 7898
  $644 = $ReallocAsyncCtx6 + 116 | 0; //@line 7899
  HEAP32[$644 >> 2] = $58; //@line 7900
  $645 = $ReallocAsyncCtx6 + 120 | 0; //@line 7901
  HEAP32[$645 >> 2] = $60; //@line 7902
  $646 = $ReallocAsyncCtx6 + 124 | 0; //@line 7903
  HEAP32[$646 >> 2] = $62; //@line 7904
  $647 = $ReallocAsyncCtx6 + 128 | 0; //@line 7905
  HEAP32[$647 >> 2] = $64; //@line 7906
  $648 = $ReallocAsyncCtx6 + 132 | 0; //@line 7907
  HEAP32[$648 >> 2] = $66; //@line 7908
  $649 = $ReallocAsyncCtx6 + 136 | 0; //@line 7909
  HEAP32[$649 >> 2] = $68; //@line 7910
  $650 = $ReallocAsyncCtx6 + 140 | 0; //@line 7911
  HEAP32[$650 >> 2] = $70; //@line 7912
  $651 = $ReallocAsyncCtx6 + 144 | 0; //@line 7913
  HEAP32[$651 >> 2] = $72; //@line 7914
  $652 = $ReallocAsyncCtx6 + 148 | 0; //@line 7915
  HEAP32[$652 >> 2] = $74; //@line 7916
  $653 = $ReallocAsyncCtx6 + 152 | 0; //@line 7917
  HEAP32[$653 >> 2] = $76; //@line 7918
  $654 = $ReallocAsyncCtx6 + 156 | 0; //@line 7919
  HEAP32[$654 >> 2] = $78; //@line 7920
  $655 = $ReallocAsyncCtx6 + 160 | 0; //@line 7921
  HEAP32[$655 >> 2] = $80; //@line 7922
  $656 = $ReallocAsyncCtx6 + 164 | 0; //@line 7923
  HEAP32[$656 >> 2] = $82; //@line 7924
  $657 = $ReallocAsyncCtx6 + 168 | 0; //@line 7925
  HEAP32[$657 >> 2] = $84; //@line 7926
  $658 = $ReallocAsyncCtx6 + 172 | 0; //@line 7927
  HEAP32[$658 >> 2] = $86; //@line 7928
  $659 = $ReallocAsyncCtx6 + 176 | 0; //@line 7929
  HEAP32[$659 >> 2] = $88; //@line 7930
  $660 = $ReallocAsyncCtx6 + 180 | 0; //@line 7931
  HEAP32[$660 >> 2] = $92; //@line 7932
  $661 = $ReallocAsyncCtx6 + 184 | 0; //@line 7933
  HEAP32[$661 >> 2] = $94; //@line 7934
  $662 = $ReallocAsyncCtx6 + 188 | 0; //@line 7935
  HEAP32[$662 >> 2] = $96; //@line 7936
  $663 = $ReallocAsyncCtx6 + 192 | 0; //@line 7937
  HEAP32[$663 >> 2] = $98; //@line 7938
  $664 = $ReallocAsyncCtx6 + 196 | 0; //@line 7939
  HEAP32[$664 >> 2] = $100; //@line 7940
  $665 = $ReallocAsyncCtx6 + 200 | 0; //@line 7941
  HEAP32[$665 >> 2] = $102; //@line 7942
  $666 = $ReallocAsyncCtx6 + 204 | 0; //@line 7943
  HEAP32[$666 >> 2] = $104; //@line 7944
  $667 = $ReallocAsyncCtx6 + 208 | 0; //@line 7945
  HEAP32[$667 >> 2] = $106; //@line 7946
  $668 = $ReallocAsyncCtx6 + 212 | 0; //@line 7947
  HEAP32[$668 >> 2] = $108; //@line 7948
  $669 = $ReallocAsyncCtx6 + 216 | 0; //@line 7949
  HEAP32[$669 >> 2] = $110; //@line 7950
  $670 = $ReallocAsyncCtx6 + 220 | 0; //@line 7951
  HEAP32[$670 >> 2] = $112; //@line 7952
  $671 = $ReallocAsyncCtx6 + 224 | 0; //@line 7953
  HEAP32[$671 >> 2] = $114; //@line 7954
  $672 = $ReallocAsyncCtx6 + 228 | 0; //@line 7955
  HEAP32[$672 >> 2] = $116; //@line 7956
  sp = STACKTOP; //@line 7957
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 7962
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_157($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $$0111 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $481 = 0, $485 = 0, $489 = 0, $494 = 0, $495 = 0, $499 = 0, $50 = 0, $503 = 0, $505 = 0, $507 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $578 = 0, $58 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4052
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 4054
 $4 = HEAP8[$0 + 5 >> 0] | 0; //@line 4056
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 4058
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 4060
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 4062
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 4064
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 4066
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 4068
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 4070
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 4072
 $22 = HEAP8[$0 + 40 >> 0] | 0; //@line 4074
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 4076
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 4078
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 4080
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 4082
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 4084
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 4086
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 4088
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 4090
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 4092
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 4094
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 4098
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 4100
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 4102
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 4104
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 4106
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 4108
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 4110
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 4112
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 4114
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 4116
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 4118
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 4120
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 4122
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 4124
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 4126
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 4128
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 4130
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 4132
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 4134
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 4136
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 4138
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 4140
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 4142
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 4144
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 4146
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 4148
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 4150
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 4152
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 4154
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 4156
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 4158
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 4160
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 4162
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 4164
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 4166
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 4168
 $$0111 = HEAP8[___async_retval >> 0] | 0; //@line 4171
 $$reg2mem$0 = HEAP8[$0 + 84 >> 0] | 0; //@line 4171
 L2 : while (1) {
  $377 = HEAP8[$52 >> 0] | 0; //@line 4176
  $378 = $377 & 255; //@line 4177
  if ((128 - (HEAPU8[$20 >> 0] | 0) - $378 | 0) > 2) {
   HEAP8[$14 + 4 + $378 >> 0] = 6; //@line 4183
   HEAP8[($377 + 1 & 255) + ($14 + 4) >> 0] = $$0111; //@line 4187
   HEAP8[$52 >> 0] = $377 + 3 << 24 >> 24; //@line 4189
   HEAP8[($377 + 2 & 255) + ($14 + 4) >> 0] = $4; //@line 4192
   HEAP8[$58 >> 0] = 1; //@line 4193
   $$0$be = $$reg2mem$0; //@line 4194
   $$0107$be = 0; //@line 4194
  } else {
   $$0$be = $$reg2mem$0; //@line 4196
   $$0107$be = -1010; //@line 4196
  }
  L6 : while (1) {
   if (($$0$be & 255) >= ($2 & 255)) {
    label = 31; //@line 4201
    break L2;
   }
   $119 = $$0$be + 1 << 24 >> 24; //@line 4205
   switch (HEAP8[$18 + ($$0$be & 255) >> 0] | 0) {
   case 3:
    {
     label = 4; //@line 4210
     break L2;
     break;
    }
   case 5:
    {
     label = 9; //@line 4215
     break L2;
     break;
    }
   case 7:
    {
     label = 19; //@line 4220
     break L2;
     break;
    }
   case 9:
    {
     label = 25; //@line 4225
     break L2;
     break;
    }
   case 10:
    {
     label = 28; //@line 4230
     break L2;
     break;
    }
   case 6:
    {
     break L6;
     break;
    }
   case 2:
    {
     HEAP32[$26 >> 2] = 0; //@line 4239
     HEAP8[$6 >> 0] = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 4244
     HEAP8[$10 >> 0] = HEAP8[$18 + ($$0$be + 2 & 255) >> 0] | 0; //@line 4249
     $$0$be = $$0$be + 3 << 24 >> 24; //@line 4250
     continue L6;
     break;
    }
   case 4:
    {
     $204 = $$0$be + 2 << 24 >> 24; //@line 4255
     $207 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 4258
     HEAP8[$34 >> 0] = $207; //@line 4259
     HEAP16[$42 >> 1] = 1 << ($207 & 255); //@line 4263
     $214 = HEAP8[$52 >> 0] | 0; //@line 4267
     $215 = $214 & 255; //@line 4268
     if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) <= ($215 | 0)) {
      $$0$be = $204; //@line 4271
      $$0107$be = -1010; //@line 4271
      continue L6;
     }
     HEAP8[$52 >> 0] = $214 + 1 << 24 >> 24; //@line 4276
     HEAP8[$14 + 4 + $215 >> 0] = 4; //@line 4277
     HEAP8[$58 >> 0] = 1; //@line 4278
     $$0$be = $204; //@line 4279
     $$0107$be = 0; //@line 4279
     continue L6;
     break;
    }
   case 8:
    {
     $481 = $$0$be + 2 << 24 >> 24; //@line 4284
     $485 = HEAP8[$18 + ($119 & 255) >> 0] & 15; //@line 4288
     $489 = ($485 + ($485 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 4293
     HEAP32[$72 >> 2] = $489; //@line 4294
     HEAP32[$66 >> 2] = $489 + 1e3; //@line 4296
     $494 = HEAP8[$52 >> 0] | 0; //@line 4300
     $495 = $494 & 255; //@line 4301
     if ((128 - (HEAPU8[$20 >> 0] | 0) | 0) <= ($495 | 0)) {
      $$0$be = $481; //@line 4304
      $$0107$be = -1010; //@line 4304
      continue L6;
     }
     HEAP8[$52 >> 0] = $494 + 1 << 24 >> 24; //@line 4309
     HEAP8[$14 + 4 + $495 >> 0] = 8; //@line 4310
     HEAP8[$30 >> 0] = 1; //@line 4311
     HEAP8[$58 >> 0] = 1; //@line 4312
     $$0$be = $481; //@line 4313
     $$0107$be = 0; //@line 4313
     continue L6;
     break;
    }
   default:
    {
     $$0$be = $119; //@line 4318
     $$0107$be = -1013; //@line 4318
     continue L6;
    }
   }
  }
  $311 = HEAP32[$16 >> 2] | 0; //@line 4323
  if (!$311) {
   $$0111 = -1; //@line 4326
   $$reg2mem$0 = $119; //@line 4326
  } else {
   label = 13; //@line 4328
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$12 >> 0] = 0; //@line 4333
  HEAP8[$80 >> 0] = 0; //@line 4334
  HEAP8[$76 >> 0] = 0; //@line 4335
  HEAP8[$68 >> 0] = 0; //@line 4336
  $130 = $119 & 255; //@line 4337
  $131 = $130 + -1 | 0; //@line 4338
  HEAP32[$56 >> 2] = $18 + $131; //@line 4340
  HEAP8[$32 >> 0] = $114 - $131; //@line 4343
  HEAP8[$82 >> 0] = HEAP8[$40 >> 0] | 0; //@line 4345
  HEAP8[$64 >> 0] = HEAP8[$84 >> 0] | 0; //@line 4347
  HEAP8[$106 >> 0] = HEAP8[$74 >> 0] | 0; //@line 4349
  HEAP8[$102 >> 0] = HEAP8[$92 >> 0] | 0; //@line 4351
  HEAP8[$28 >> 0] = HEAP8[$24 >> 0] | 0; //@line 4353
  $142 = HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] | 0; //@line 4356
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 4357
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($54, $48, $12, $80, $76, $68) | 0; //@line 4358
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 474; //@line 4361
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 4362
   HEAP8[$144 >> 0] = $2; //@line 4363
   $145 = $ReallocAsyncCtx + 5 | 0; //@line 4364
   HEAP8[$145 >> 0] = $4; //@line 4365
   $146 = $ReallocAsyncCtx + 8 | 0; //@line 4366
   HEAP32[$146 >> 2] = $6; //@line 4367
   $147 = $ReallocAsyncCtx + 12 | 0; //@line 4368
   HEAP32[$147 >> 2] = $8; //@line 4369
   $148 = $ReallocAsyncCtx + 16 | 0; //@line 4370
   HEAP32[$148 >> 2] = $10; //@line 4371
   $149 = $ReallocAsyncCtx + 20 | 0; //@line 4372
   HEAP32[$149 >> 2] = $12; //@line 4373
   $150 = $ReallocAsyncCtx + 24 | 0; //@line 4374
   HEAP32[$150 >> 2] = $14; //@line 4375
   $151 = $ReallocAsyncCtx + 28 | 0; //@line 4376
   HEAP32[$151 >> 2] = $16; //@line 4377
   $152 = $ReallocAsyncCtx + 32 | 0; //@line 4378
   HEAP32[$152 >> 2] = $18; //@line 4379
   $153 = $ReallocAsyncCtx + 36 | 0; //@line 4380
   HEAP32[$153 >> 2] = $20; //@line 4381
   $154 = $ReallocAsyncCtx + 40 | 0; //@line 4382
   HEAP32[$154 >> 2] = $$0107$be; //@line 4383
   $155 = $ReallocAsyncCtx + 44 | 0; //@line 4384
   HEAP8[$155 >> 0] = $22; //@line 4385
   $156 = $ReallocAsyncCtx + 48 | 0; //@line 4386
   HEAP32[$156 >> 2] = $24; //@line 4387
   $157 = $ReallocAsyncCtx + 52 | 0; //@line 4388
   HEAP32[$157 >> 2] = $130; //@line 4389
   $158 = $ReallocAsyncCtx + 56 | 0; //@line 4390
   HEAP32[$158 >> 2] = $26; //@line 4391
   $159 = $ReallocAsyncCtx + 60 | 0; //@line 4392
   HEAP32[$159 >> 2] = $28; //@line 4393
   $160 = $ReallocAsyncCtx + 64 | 0; //@line 4394
   HEAP32[$160 >> 2] = $30; //@line 4395
   $161 = $ReallocAsyncCtx + 68 | 0; //@line 4396
   HEAP32[$161 >> 2] = $32; //@line 4397
   $162 = $ReallocAsyncCtx + 72 | 0; //@line 4398
   HEAP32[$162 >> 2] = $34; //@line 4399
   $163 = $ReallocAsyncCtx + 76 | 0; //@line 4400
   HEAP32[$163 >> 2] = $36; //@line 4401
   $164 = $ReallocAsyncCtx + 80 | 0; //@line 4402
   HEAP32[$164 >> 2] = $38; //@line 4403
   $165 = $ReallocAsyncCtx + 84 | 0; //@line 4404
   HEAP32[$165 >> 2] = $40; //@line 4405
   $166 = $ReallocAsyncCtx + 88 | 0; //@line 4406
   HEAP32[$166 >> 2] = $42; //@line 4407
   $167 = $ReallocAsyncCtx + 92 | 0; //@line 4408
   HEAP32[$167 >> 2] = $46; //@line 4409
   $168 = $ReallocAsyncCtx + 96 | 0; //@line 4410
   HEAP32[$168 >> 2] = $48; //@line 4411
   $169 = $ReallocAsyncCtx + 100 | 0; //@line 4412
   HEAP32[$169 >> 2] = $50; //@line 4413
   $170 = $ReallocAsyncCtx + 104 | 0; //@line 4414
   HEAP32[$170 >> 2] = $52; //@line 4415
   $171 = $ReallocAsyncCtx + 108 | 0; //@line 4416
   HEAP32[$171 >> 2] = $54; //@line 4417
   $172 = $ReallocAsyncCtx + 112 | 0; //@line 4418
   HEAP32[$172 >> 2] = $56; //@line 4419
   $173 = $ReallocAsyncCtx + 116 | 0; //@line 4420
   HEAP32[$173 >> 2] = $58; //@line 4421
   $174 = $ReallocAsyncCtx + 120 | 0; //@line 4422
   HEAP32[$174 >> 2] = $60; //@line 4423
   $175 = $ReallocAsyncCtx + 124 | 0; //@line 4424
   HEAP32[$175 >> 2] = $62; //@line 4425
   $176 = $ReallocAsyncCtx + 128 | 0; //@line 4426
   HEAP32[$176 >> 2] = $64; //@line 4427
   $177 = $ReallocAsyncCtx + 132 | 0; //@line 4428
   HEAP32[$177 >> 2] = $66; //@line 4429
   $178 = $ReallocAsyncCtx + 136 | 0; //@line 4430
   HEAP32[$178 >> 2] = $68; //@line 4431
   $179 = $ReallocAsyncCtx + 140 | 0; //@line 4432
   HEAP32[$179 >> 2] = $70; //@line 4433
   $180 = $ReallocAsyncCtx + 144 | 0; //@line 4434
   HEAP32[$180 >> 2] = $72; //@line 4435
   $181 = $ReallocAsyncCtx + 148 | 0; //@line 4436
   HEAP32[$181 >> 2] = $74; //@line 4437
   $182 = $ReallocAsyncCtx + 152 | 0; //@line 4438
   HEAP32[$182 >> 2] = $76; //@line 4439
   $183 = $ReallocAsyncCtx + 156 | 0; //@line 4440
   HEAP32[$183 >> 2] = $78; //@line 4441
   $184 = $ReallocAsyncCtx + 160 | 0; //@line 4442
   HEAP32[$184 >> 2] = $80; //@line 4443
   $185 = $ReallocAsyncCtx + 164 | 0; //@line 4444
   HEAP32[$185 >> 2] = $82; //@line 4445
   $186 = $ReallocAsyncCtx + 168 | 0; //@line 4446
   HEAP32[$186 >> 2] = $84; //@line 4447
   $187 = $ReallocAsyncCtx + 172 | 0; //@line 4448
   HEAP32[$187 >> 2] = $86; //@line 4449
   $188 = $ReallocAsyncCtx + 176 | 0; //@line 4450
   HEAP32[$188 >> 2] = $88; //@line 4451
   $189 = $ReallocAsyncCtx + 180 | 0; //@line 4452
   HEAP32[$189 >> 2] = $90; //@line 4453
   $190 = $ReallocAsyncCtx + 184 | 0; //@line 4454
   HEAP32[$190 >> 2] = $92; //@line 4455
   $191 = $ReallocAsyncCtx + 188 | 0; //@line 4456
   HEAP32[$191 >> 2] = $94; //@line 4457
   $192 = $ReallocAsyncCtx + 192 | 0; //@line 4458
   HEAP32[$192 >> 2] = $96; //@line 4459
   $193 = $ReallocAsyncCtx + 196 | 0; //@line 4460
   HEAP32[$193 >> 2] = $98; //@line 4461
   $194 = $ReallocAsyncCtx + 200 | 0; //@line 4462
   HEAP32[$194 >> 2] = $100; //@line 4463
   $195 = $ReallocAsyncCtx + 204 | 0; //@line 4464
   HEAP32[$195 >> 2] = $102; //@line 4465
   $196 = $ReallocAsyncCtx + 208 | 0; //@line 4466
   HEAP32[$196 >> 2] = $104; //@line 4467
   $197 = $ReallocAsyncCtx + 212 | 0; //@line 4468
   HEAP32[$197 >> 2] = $106; //@line 4469
   $198 = $ReallocAsyncCtx + 216 | 0; //@line 4470
   HEAP32[$198 >> 2] = $108; //@line 4471
   $199 = $ReallocAsyncCtx + 220 | 0; //@line 4472
   HEAP32[$199 >> 2] = $110; //@line 4473
   $200 = $ReallocAsyncCtx + 224 | 0; //@line 4474
   HEAP32[$200 >> 2] = $112; //@line 4475
   $201 = $ReallocAsyncCtx + 228 | 0; //@line 4476
   HEAP32[$201 >> 2] = $114; //@line 4477
   $202 = $ReallocAsyncCtx + 232 | 0; //@line 4478
   HEAP32[$202 >> 2] = $116; //@line 4479
   sp = STACKTOP; //@line 4480
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 4484
  ___async_unwind = 0; //@line 4485
  HEAP32[$ReallocAsyncCtx >> 2] = 474; //@line 4486
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 4487
  HEAP8[$144 >> 0] = $2; //@line 4488
  $145 = $ReallocAsyncCtx + 5 | 0; //@line 4489
  HEAP8[$145 >> 0] = $4; //@line 4490
  $146 = $ReallocAsyncCtx + 8 | 0; //@line 4491
  HEAP32[$146 >> 2] = $6; //@line 4492
  $147 = $ReallocAsyncCtx + 12 | 0; //@line 4493
  HEAP32[$147 >> 2] = $8; //@line 4494
  $148 = $ReallocAsyncCtx + 16 | 0; //@line 4495
  HEAP32[$148 >> 2] = $10; //@line 4496
  $149 = $ReallocAsyncCtx + 20 | 0; //@line 4497
  HEAP32[$149 >> 2] = $12; //@line 4498
  $150 = $ReallocAsyncCtx + 24 | 0; //@line 4499
  HEAP32[$150 >> 2] = $14; //@line 4500
  $151 = $ReallocAsyncCtx + 28 | 0; //@line 4501
  HEAP32[$151 >> 2] = $16; //@line 4502
  $152 = $ReallocAsyncCtx + 32 | 0; //@line 4503
  HEAP32[$152 >> 2] = $18; //@line 4504
  $153 = $ReallocAsyncCtx + 36 | 0; //@line 4505
  HEAP32[$153 >> 2] = $20; //@line 4506
  $154 = $ReallocAsyncCtx + 40 | 0; //@line 4507
  HEAP32[$154 >> 2] = $$0107$be; //@line 4508
  $155 = $ReallocAsyncCtx + 44 | 0; //@line 4509
  HEAP8[$155 >> 0] = $22; //@line 4510
  $156 = $ReallocAsyncCtx + 48 | 0; //@line 4511
  HEAP32[$156 >> 2] = $24; //@line 4512
  $157 = $ReallocAsyncCtx + 52 | 0; //@line 4513
  HEAP32[$157 >> 2] = $130; //@line 4514
  $158 = $ReallocAsyncCtx + 56 | 0; //@line 4515
  HEAP32[$158 >> 2] = $26; //@line 4516
  $159 = $ReallocAsyncCtx + 60 | 0; //@line 4517
  HEAP32[$159 >> 2] = $28; //@line 4518
  $160 = $ReallocAsyncCtx + 64 | 0; //@line 4519
  HEAP32[$160 >> 2] = $30; //@line 4520
  $161 = $ReallocAsyncCtx + 68 | 0; //@line 4521
  HEAP32[$161 >> 2] = $32; //@line 4522
  $162 = $ReallocAsyncCtx + 72 | 0; //@line 4523
  HEAP32[$162 >> 2] = $34; //@line 4524
  $163 = $ReallocAsyncCtx + 76 | 0; //@line 4525
  HEAP32[$163 >> 2] = $36; //@line 4526
  $164 = $ReallocAsyncCtx + 80 | 0; //@line 4527
  HEAP32[$164 >> 2] = $38; //@line 4528
  $165 = $ReallocAsyncCtx + 84 | 0; //@line 4529
  HEAP32[$165 >> 2] = $40; //@line 4530
  $166 = $ReallocAsyncCtx + 88 | 0; //@line 4531
  HEAP32[$166 >> 2] = $42; //@line 4532
  $167 = $ReallocAsyncCtx + 92 | 0; //@line 4533
  HEAP32[$167 >> 2] = $46; //@line 4534
  $168 = $ReallocAsyncCtx + 96 | 0; //@line 4535
  HEAP32[$168 >> 2] = $48; //@line 4536
  $169 = $ReallocAsyncCtx + 100 | 0; //@line 4537
  HEAP32[$169 >> 2] = $50; //@line 4538
  $170 = $ReallocAsyncCtx + 104 | 0; //@line 4539
  HEAP32[$170 >> 2] = $52; //@line 4540
  $171 = $ReallocAsyncCtx + 108 | 0; //@line 4541
  HEAP32[$171 >> 2] = $54; //@line 4542
  $172 = $ReallocAsyncCtx + 112 | 0; //@line 4543
  HEAP32[$172 >> 2] = $56; //@line 4544
  $173 = $ReallocAsyncCtx + 116 | 0; //@line 4545
  HEAP32[$173 >> 2] = $58; //@line 4546
  $174 = $ReallocAsyncCtx + 120 | 0; //@line 4547
  HEAP32[$174 >> 2] = $60; //@line 4548
  $175 = $ReallocAsyncCtx + 124 | 0; //@line 4549
  HEAP32[$175 >> 2] = $62; //@line 4550
  $176 = $ReallocAsyncCtx + 128 | 0; //@line 4551
  HEAP32[$176 >> 2] = $64; //@line 4552
  $177 = $ReallocAsyncCtx + 132 | 0; //@line 4553
  HEAP32[$177 >> 2] = $66; //@line 4554
  $178 = $ReallocAsyncCtx + 136 | 0; //@line 4555
  HEAP32[$178 >> 2] = $68; //@line 4556
  $179 = $ReallocAsyncCtx + 140 | 0; //@line 4557
  HEAP32[$179 >> 2] = $70; //@line 4558
  $180 = $ReallocAsyncCtx + 144 | 0; //@line 4559
  HEAP32[$180 >> 2] = $72; //@line 4560
  $181 = $ReallocAsyncCtx + 148 | 0; //@line 4561
  HEAP32[$181 >> 2] = $74; //@line 4562
  $182 = $ReallocAsyncCtx + 152 | 0; //@line 4563
  HEAP32[$182 >> 2] = $76; //@line 4564
  $183 = $ReallocAsyncCtx + 156 | 0; //@line 4565
  HEAP32[$183 >> 2] = $78; //@line 4566
  $184 = $ReallocAsyncCtx + 160 | 0; //@line 4567
  HEAP32[$184 >> 2] = $80; //@line 4568
  $185 = $ReallocAsyncCtx + 164 | 0; //@line 4569
  HEAP32[$185 >> 2] = $82; //@line 4570
  $186 = $ReallocAsyncCtx + 168 | 0; //@line 4571
  HEAP32[$186 >> 2] = $84; //@line 4572
  $187 = $ReallocAsyncCtx + 172 | 0; //@line 4573
  HEAP32[$187 >> 2] = $86; //@line 4574
  $188 = $ReallocAsyncCtx + 176 | 0; //@line 4575
  HEAP32[$188 >> 2] = $88; //@line 4576
  $189 = $ReallocAsyncCtx + 180 | 0; //@line 4577
  HEAP32[$189 >> 2] = $90; //@line 4578
  $190 = $ReallocAsyncCtx + 184 | 0; //@line 4579
  HEAP32[$190 >> 2] = $92; //@line 4580
  $191 = $ReallocAsyncCtx + 188 | 0; //@line 4581
  HEAP32[$191 >> 2] = $94; //@line 4582
  $192 = $ReallocAsyncCtx + 192 | 0; //@line 4583
  HEAP32[$192 >> 2] = $96; //@line 4584
  $193 = $ReallocAsyncCtx + 196 | 0; //@line 4585
  HEAP32[$193 >> 2] = $98; //@line 4586
  $194 = $ReallocAsyncCtx + 200 | 0; //@line 4587
  HEAP32[$194 >> 2] = $100; //@line 4588
  $195 = $ReallocAsyncCtx + 204 | 0; //@line 4589
  HEAP32[$195 >> 2] = $102; //@line 4590
  $196 = $ReallocAsyncCtx + 208 | 0; //@line 4591
  HEAP32[$196 >> 2] = $104; //@line 4592
  $197 = $ReallocAsyncCtx + 212 | 0; //@line 4593
  HEAP32[$197 >> 2] = $106; //@line 4594
  $198 = $ReallocAsyncCtx + 216 | 0; //@line 4595
  HEAP32[$198 >> 2] = $108; //@line 4596
  $199 = $ReallocAsyncCtx + 220 | 0; //@line 4597
  HEAP32[$199 >> 2] = $110; //@line 4598
  $200 = $ReallocAsyncCtx + 224 | 0; //@line 4599
  HEAP32[$200 >> 2] = $112; //@line 4600
  $201 = $ReallocAsyncCtx + 228 | 0; //@line 4601
  HEAP32[$201 >> 2] = $114; //@line 4602
  $202 = $ReallocAsyncCtx + 232 | 0; //@line 4603
  HEAP32[$202 >> 2] = $116; //@line 4604
  sp = STACKTOP; //@line 4605
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 4611
  HEAP8[$86 >> 0] = ($221 & 255) >>> 4 & 7; //@line 4616
  HEAP8[$90 >> 0] = $221 & 15; //@line 4618
  $240 = $$0$be + 5 << 24 >> 24; //@line 4632
  HEAP32[$62 >> 2] = (HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 4640
  $250 = HEAP32[(HEAP32[$70 >> 2] | 0) + 40 >> 2] | 0; //@line 4643
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 4644
  $251 = FUNCTION_TABLE_iii[$250 & 31]($54, $116) | 0; //@line 4645
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 475; //@line 4648
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 4649
   HEAP8[$252 >> 0] = $2; //@line 4650
   $253 = $ReallocAsyncCtx2 + 5 | 0; //@line 4651
   HEAP8[$253 >> 0] = $4; //@line 4652
   $254 = $ReallocAsyncCtx2 + 8 | 0; //@line 4653
   HEAP32[$254 >> 2] = $6; //@line 4654
   $255 = $ReallocAsyncCtx2 + 12 | 0; //@line 4655
   HEAP32[$255 >> 2] = $8; //@line 4656
   $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 4657
   HEAP32[$256 >> 2] = $10; //@line 4658
   $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 4659
   HEAP32[$257 >> 2] = $12; //@line 4660
   $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 4661
   HEAP32[$258 >> 2] = $14; //@line 4662
   $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 4663
   HEAP32[$259 >> 2] = $16; //@line 4664
   $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 4665
   HEAP32[$260 >> 2] = $18; //@line 4666
   $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 4667
   HEAP32[$261 >> 2] = $20; //@line 4668
   $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 4669
   HEAP8[$262 >> 0] = $22; //@line 4670
   $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 4671
   HEAP32[$263 >> 2] = $24; //@line 4672
   $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 4673
   HEAP32[$264 >> 2] = $26; //@line 4674
   $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 4675
   HEAP32[$265 >> 2] = $28; //@line 4676
   $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 4677
   HEAP32[$266 >> 2] = $30; //@line 4678
   $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 4679
   HEAP8[$267 >> 0] = $240; //@line 4680
   $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 4681
   HEAP32[$268 >> 2] = $32; //@line 4682
   $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 4683
   HEAP32[$269 >> 2] = $34; //@line 4684
   $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 4685
   HEAP32[$270 >> 2] = $36; //@line 4686
   $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 4687
   HEAP32[$271 >> 2] = $38; //@line 4688
   $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 4689
   HEAP32[$272 >> 2] = $40; //@line 4690
   $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 4691
   HEAP32[$273 >> 2] = $42; //@line 4692
   $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 4693
   HEAP32[$274 >> 2] = $46; //@line 4694
   $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 4695
   HEAP32[$275 >> 2] = $48; //@line 4696
   $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 4697
   HEAP32[$276 >> 2] = $50; //@line 4698
   $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 4699
   HEAP32[$277 >> 2] = $52; //@line 4700
   $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 4701
   HEAP32[$278 >> 2] = $54; //@line 4702
   $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 4703
   HEAP32[$279 >> 2] = $56; //@line 4704
   $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 4705
   HEAP32[$280 >> 2] = $58; //@line 4706
   $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 4707
   HEAP32[$281 >> 2] = $60; //@line 4708
   $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 4709
   HEAP32[$282 >> 2] = $62; //@line 4710
   $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 4711
   HEAP32[$283 >> 2] = $64; //@line 4712
   $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 4713
   HEAP32[$284 >> 2] = $66; //@line 4714
   $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 4715
   HEAP32[$285 >> 2] = $68; //@line 4716
   $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 4717
   HEAP32[$286 >> 2] = $70; //@line 4718
   $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 4719
   HEAP32[$287 >> 2] = $72; //@line 4720
   $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 4721
   HEAP32[$288 >> 2] = $74; //@line 4722
   $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 4723
   HEAP32[$289 >> 2] = $76; //@line 4724
   $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 4725
   HEAP32[$290 >> 2] = $78; //@line 4726
   $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 4727
   HEAP32[$291 >> 2] = $80; //@line 4728
   $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 4729
   HEAP32[$292 >> 2] = $82; //@line 4730
   $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 4731
   HEAP32[$293 >> 2] = $84; //@line 4732
   $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 4733
   HEAP32[$294 >> 2] = $86; //@line 4734
   $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 4735
   HEAP32[$295 >> 2] = $88; //@line 4736
   $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 4737
   HEAP32[$296 >> 2] = $90; //@line 4738
   $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 4739
   HEAP32[$297 >> 2] = $92; //@line 4740
   $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 4741
   HEAP32[$298 >> 2] = $94; //@line 4742
   $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 4743
   HEAP32[$299 >> 2] = $96; //@line 4744
   $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 4745
   HEAP32[$300 >> 2] = $98; //@line 4746
   $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 4747
   HEAP32[$301 >> 2] = $100; //@line 4748
   $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 4749
   HEAP32[$302 >> 2] = $102; //@line 4750
   $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 4751
   HEAP32[$303 >> 2] = $104; //@line 4752
   $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 4753
   HEAP32[$304 >> 2] = $106; //@line 4754
   $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 4755
   HEAP32[$305 >> 2] = $108; //@line 4756
   $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 4757
   HEAP32[$306 >> 2] = $110; //@line 4758
   $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 4759
   HEAP32[$307 >> 2] = $112; //@line 4760
   $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 4761
   HEAP32[$308 >> 2] = $114; //@line 4762
   $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 4763
   HEAP32[$309 >> 2] = $116; //@line 4764
   sp = STACKTOP; //@line 4765
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 4769
  ___async_unwind = 0; //@line 4770
  HEAP32[$ReallocAsyncCtx2 >> 2] = 475; //@line 4771
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 4772
  HEAP8[$252 >> 0] = $2; //@line 4773
  $253 = $ReallocAsyncCtx2 + 5 | 0; //@line 4774
  HEAP8[$253 >> 0] = $4; //@line 4775
  $254 = $ReallocAsyncCtx2 + 8 | 0; //@line 4776
  HEAP32[$254 >> 2] = $6; //@line 4777
  $255 = $ReallocAsyncCtx2 + 12 | 0; //@line 4778
  HEAP32[$255 >> 2] = $8; //@line 4779
  $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 4780
  HEAP32[$256 >> 2] = $10; //@line 4781
  $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 4782
  HEAP32[$257 >> 2] = $12; //@line 4783
  $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 4784
  HEAP32[$258 >> 2] = $14; //@line 4785
  $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 4786
  HEAP32[$259 >> 2] = $16; //@line 4787
  $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 4788
  HEAP32[$260 >> 2] = $18; //@line 4789
  $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 4790
  HEAP32[$261 >> 2] = $20; //@line 4791
  $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 4792
  HEAP8[$262 >> 0] = $22; //@line 4793
  $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 4794
  HEAP32[$263 >> 2] = $24; //@line 4795
  $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 4796
  HEAP32[$264 >> 2] = $26; //@line 4797
  $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 4798
  HEAP32[$265 >> 2] = $28; //@line 4799
  $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 4800
  HEAP32[$266 >> 2] = $30; //@line 4801
  $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 4802
  HEAP8[$267 >> 0] = $240; //@line 4803
  $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 4804
  HEAP32[$268 >> 2] = $32; //@line 4805
  $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 4806
  HEAP32[$269 >> 2] = $34; //@line 4807
  $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 4808
  HEAP32[$270 >> 2] = $36; //@line 4809
  $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 4810
  HEAP32[$271 >> 2] = $38; //@line 4811
  $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 4812
  HEAP32[$272 >> 2] = $40; //@line 4813
  $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 4814
  HEAP32[$273 >> 2] = $42; //@line 4815
  $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 4816
  HEAP32[$274 >> 2] = $46; //@line 4817
  $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 4818
  HEAP32[$275 >> 2] = $48; //@line 4819
  $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 4820
  HEAP32[$276 >> 2] = $50; //@line 4821
  $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 4822
  HEAP32[$277 >> 2] = $52; //@line 4823
  $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 4824
  HEAP32[$278 >> 2] = $54; //@line 4825
  $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 4826
  HEAP32[$279 >> 2] = $56; //@line 4827
  $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 4828
  HEAP32[$280 >> 2] = $58; //@line 4829
  $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 4830
  HEAP32[$281 >> 2] = $60; //@line 4831
  $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 4832
  HEAP32[$282 >> 2] = $62; //@line 4833
  $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 4834
  HEAP32[$283 >> 2] = $64; //@line 4835
  $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 4836
  HEAP32[$284 >> 2] = $66; //@line 4837
  $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 4838
  HEAP32[$285 >> 2] = $68; //@line 4839
  $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 4840
  HEAP32[$286 >> 2] = $70; //@line 4841
  $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 4842
  HEAP32[$287 >> 2] = $72; //@line 4843
  $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 4844
  HEAP32[$288 >> 2] = $74; //@line 4845
  $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 4846
  HEAP32[$289 >> 2] = $76; //@line 4847
  $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 4848
  HEAP32[$290 >> 2] = $78; //@line 4849
  $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 4850
  HEAP32[$291 >> 2] = $80; //@line 4851
  $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 4852
  HEAP32[$292 >> 2] = $82; //@line 4853
  $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 4854
  HEAP32[$293 >> 2] = $84; //@line 4855
  $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 4856
  HEAP32[$294 >> 2] = $86; //@line 4857
  $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 4858
  HEAP32[$295 >> 2] = $88; //@line 4859
  $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 4860
  HEAP32[$296 >> 2] = $90; //@line 4861
  $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 4862
  HEAP32[$297 >> 2] = $92; //@line 4863
  $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 4864
  HEAP32[$298 >> 2] = $94; //@line 4865
  $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 4866
  HEAP32[$299 >> 2] = $96; //@line 4867
  $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 4868
  HEAP32[$300 >> 2] = $98; //@line 4869
  $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 4870
  HEAP32[$301 >> 2] = $100; //@line 4871
  $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 4872
  HEAP32[$302 >> 2] = $102; //@line 4873
  $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 4874
  HEAP32[$303 >> 2] = $104; //@line 4875
  $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 4876
  HEAP32[$304 >> 2] = $106; //@line 4877
  $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 4878
  HEAP32[$305 >> 2] = $108; //@line 4879
  $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 4880
  HEAP32[$306 >> 2] = $110; //@line 4881
  $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 4882
  HEAP32[$307 >> 2] = $112; //@line 4883
  $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 4884
  HEAP32[$308 >> 2] = $114; //@line 4885
  $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 4886
  HEAP32[$309 >> 2] = $116; //@line 4887
  sp = STACKTOP; //@line 4888
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 4892
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 4893
  $314 = FUNCTION_TABLE_ii[$313 & 15]($60) | 0; //@line 4894
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 476; //@line 4897
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 4898
   HEAP8[$315 >> 0] = $2; //@line 4899
   $316 = $ReallocAsyncCtx3 + 5 | 0; //@line 4900
   HEAP8[$316 >> 0] = $4; //@line 4901
   $317 = $ReallocAsyncCtx3 + 8 | 0; //@line 4902
   HEAP32[$317 >> 2] = $6; //@line 4903
   $318 = $ReallocAsyncCtx3 + 12 | 0; //@line 4904
   HEAP32[$318 >> 2] = $8; //@line 4905
   $319 = $ReallocAsyncCtx3 + 16 | 0; //@line 4906
   HEAP32[$319 >> 2] = $10; //@line 4907
   $320 = $ReallocAsyncCtx3 + 20 | 0; //@line 4908
   HEAP32[$320 >> 2] = $12; //@line 4909
   $321 = $ReallocAsyncCtx3 + 24 | 0; //@line 4910
   HEAP32[$321 >> 2] = $14; //@line 4911
   $322 = $ReallocAsyncCtx3 + 28 | 0; //@line 4912
   HEAP32[$322 >> 2] = $16; //@line 4913
   $323 = $ReallocAsyncCtx3 + 32 | 0; //@line 4914
   HEAP32[$323 >> 2] = $18; //@line 4915
   $324 = $ReallocAsyncCtx3 + 36 | 0; //@line 4916
   HEAP32[$324 >> 2] = $20; //@line 4917
   $325 = $ReallocAsyncCtx3 + 40 | 0; //@line 4918
   HEAP8[$325 >> 0] = $22; //@line 4919
   $326 = $ReallocAsyncCtx3 + 44 | 0; //@line 4920
   HEAP32[$326 >> 2] = $24; //@line 4921
   $327 = $ReallocAsyncCtx3 + 48 | 0; //@line 4922
   HEAP32[$327 >> 2] = $26; //@line 4923
   $328 = $ReallocAsyncCtx3 + 52 | 0; //@line 4924
   HEAP32[$328 >> 2] = $28; //@line 4925
   $329 = $ReallocAsyncCtx3 + 56 | 0; //@line 4926
   HEAP32[$329 >> 2] = $30; //@line 4927
   $330 = $ReallocAsyncCtx3 + 60 | 0; //@line 4928
   HEAP32[$330 >> 2] = $32; //@line 4929
   $331 = $ReallocAsyncCtx3 + 64 | 0; //@line 4930
   HEAP32[$331 >> 2] = $34; //@line 4931
   $332 = $ReallocAsyncCtx3 + 68 | 0; //@line 4932
   HEAP32[$332 >> 2] = $36; //@line 4933
   $333 = $ReallocAsyncCtx3 + 72 | 0; //@line 4934
   HEAP32[$333 >> 2] = $38; //@line 4935
   $334 = $ReallocAsyncCtx3 + 76 | 0; //@line 4936
   HEAP32[$334 >> 2] = $40; //@line 4937
   $335 = $ReallocAsyncCtx3 + 80 | 0; //@line 4938
   HEAP32[$335 >> 2] = $42; //@line 4939
   $336 = $ReallocAsyncCtx3 + 84 | 0; //@line 4940
   HEAP8[$336 >> 0] = $119; //@line 4941
   $337 = $ReallocAsyncCtx3 + 88 | 0; //@line 4942
   HEAP32[$337 >> 2] = $46; //@line 4943
   $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 4944
   HEAP32[$338 >> 2] = $48; //@line 4945
   $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 4946
   HEAP32[$339 >> 2] = $50; //@line 4947
   $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 4948
   HEAP32[$340 >> 2] = $52; //@line 4949
   $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 4950
   HEAP32[$341 >> 2] = $54; //@line 4951
   $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 4952
   HEAP32[$342 >> 2] = $56; //@line 4953
   $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 4954
   HEAP32[$343 >> 2] = $58; //@line 4955
   $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 4956
   HEAP32[$344 >> 2] = $60; //@line 4957
   $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 4958
   HEAP32[$345 >> 2] = $62; //@line 4959
   $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 4960
   HEAP32[$346 >> 2] = $64; //@line 4961
   $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 4962
   HEAP32[$347 >> 2] = $66; //@line 4963
   $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 4964
   HEAP32[$348 >> 2] = $68; //@line 4965
   $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 4966
   HEAP32[$349 >> 2] = $70; //@line 4967
   $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 4968
   HEAP32[$350 >> 2] = $72; //@line 4969
   $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 4970
   HEAP32[$351 >> 2] = $74; //@line 4971
   $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 4972
   HEAP32[$352 >> 2] = $76; //@line 4973
   $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 4974
   HEAP32[$353 >> 2] = $78; //@line 4975
   $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 4976
   HEAP32[$354 >> 2] = $80; //@line 4977
   $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 4978
   HEAP32[$355 >> 2] = $82; //@line 4979
   $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 4980
   HEAP32[$356 >> 2] = $84; //@line 4981
   $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 4982
   HEAP32[$357 >> 2] = $86; //@line 4983
   $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 4984
   HEAP32[$358 >> 2] = $88; //@line 4985
   $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 4986
   HEAP32[$359 >> 2] = $90; //@line 4987
   $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 4988
   HEAP32[$360 >> 2] = $92; //@line 4989
   $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 4990
   HEAP32[$361 >> 2] = $94; //@line 4991
   $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 4992
   HEAP32[$362 >> 2] = $96; //@line 4993
   $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 4994
   HEAP32[$363 >> 2] = $98; //@line 4995
   $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 4996
   HEAP32[$364 >> 2] = $100; //@line 4997
   $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 4998
   HEAP32[$365 >> 2] = $102; //@line 4999
   $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 5000
   HEAP32[$366 >> 2] = $104; //@line 5001
   $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 5002
   HEAP32[$367 >> 2] = $106; //@line 5003
   $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 5004
   HEAP32[$368 >> 2] = $108; //@line 5005
   $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 5006
   HEAP32[$369 >> 2] = $110; //@line 5007
   $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 5008
   HEAP32[$370 >> 2] = $112; //@line 5009
   $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 5010
   HEAP32[$371 >> 2] = $114; //@line 5011
   $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 5012
   HEAP32[$372 >> 2] = $116; //@line 5013
   sp = STACKTOP; //@line 5014
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 5018
  ___async_unwind = 0; //@line 5019
  HEAP32[$ReallocAsyncCtx3 >> 2] = 476; //@line 5020
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 5021
  HEAP8[$315 >> 0] = $2; //@line 5022
  $316 = $ReallocAsyncCtx3 + 5 | 0; //@line 5023
  HEAP8[$316 >> 0] = $4; //@line 5024
  $317 = $ReallocAsyncCtx3 + 8 | 0; //@line 5025
  HEAP32[$317 >> 2] = $6; //@line 5026
  $318 = $ReallocAsyncCtx3 + 12 | 0; //@line 5027
  HEAP32[$318 >> 2] = $8; //@line 5028
  $319 = $ReallocAsyncCtx3 + 16 | 0; //@line 5029
  HEAP32[$319 >> 2] = $10; //@line 5030
  $320 = $ReallocAsyncCtx3 + 20 | 0; //@line 5031
  HEAP32[$320 >> 2] = $12; //@line 5032
  $321 = $ReallocAsyncCtx3 + 24 | 0; //@line 5033
  HEAP32[$321 >> 2] = $14; //@line 5034
  $322 = $ReallocAsyncCtx3 + 28 | 0; //@line 5035
  HEAP32[$322 >> 2] = $16; //@line 5036
  $323 = $ReallocAsyncCtx3 + 32 | 0; //@line 5037
  HEAP32[$323 >> 2] = $18; //@line 5038
  $324 = $ReallocAsyncCtx3 + 36 | 0; //@line 5039
  HEAP32[$324 >> 2] = $20; //@line 5040
  $325 = $ReallocAsyncCtx3 + 40 | 0; //@line 5041
  HEAP8[$325 >> 0] = $22; //@line 5042
  $326 = $ReallocAsyncCtx3 + 44 | 0; //@line 5043
  HEAP32[$326 >> 2] = $24; //@line 5044
  $327 = $ReallocAsyncCtx3 + 48 | 0; //@line 5045
  HEAP32[$327 >> 2] = $26; //@line 5046
  $328 = $ReallocAsyncCtx3 + 52 | 0; //@line 5047
  HEAP32[$328 >> 2] = $28; //@line 5048
  $329 = $ReallocAsyncCtx3 + 56 | 0; //@line 5049
  HEAP32[$329 >> 2] = $30; //@line 5050
  $330 = $ReallocAsyncCtx3 + 60 | 0; //@line 5051
  HEAP32[$330 >> 2] = $32; //@line 5052
  $331 = $ReallocAsyncCtx3 + 64 | 0; //@line 5053
  HEAP32[$331 >> 2] = $34; //@line 5054
  $332 = $ReallocAsyncCtx3 + 68 | 0; //@line 5055
  HEAP32[$332 >> 2] = $36; //@line 5056
  $333 = $ReallocAsyncCtx3 + 72 | 0; //@line 5057
  HEAP32[$333 >> 2] = $38; //@line 5058
  $334 = $ReallocAsyncCtx3 + 76 | 0; //@line 5059
  HEAP32[$334 >> 2] = $40; //@line 5060
  $335 = $ReallocAsyncCtx3 + 80 | 0; //@line 5061
  HEAP32[$335 >> 2] = $42; //@line 5062
  $336 = $ReallocAsyncCtx3 + 84 | 0; //@line 5063
  HEAP8[$336 >> 0] = $119; //@line 5064
  $337 = $ReallocAsyncCtx3 + 88 | 0; //@line 5065
  HEAP32[$337 >> 2] = $46; //@line 5066
  $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 5067
  HEAP32[$338 >> 2] = $48; //@line 5068
  $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 5069
  HEAP32[$339 >> 2] = $50; //@line 5070
  $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 5071
  HEAP32[$340 >> 2] = $52; //@line 5072
  $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 5073
  HEAP32[$341 >> 2] = $54; //@line 5074
  $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 5075
  HEAP32[$342 >> 2] = $56; //@line 5076
  $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 5077
  HEAP32[$343 >> 2] = $58; //@line 5078
  $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 5079
  HEAP32[$344 >> 2] = $60; //@line 5080
  $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 5081
  HEAP32[$345 >> 2] = $62; //@line 5082
  $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 5083
  HEAP32[$346 >> 2] = $64; //@line 5084
  $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 5085
  HEAP32[$347 >> 2] = $66; //@line 5086
  $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 5087
  HEAP32[$348 >> 2] = $68; //@line 5088
  $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 5089
  HEAP32[$349 >> 2] = $70; //@line 5090
  $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 5091
  HEAP32[$350 >> 2] = $72; //@line 5092
  $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 5093
  HEAP32[$351 >> 2] = $74; //@line 5094
  $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 5095
  HEAP32[$352 >> 2] = $76; //@line 5096
  $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 5097
  HEAP32[$353 >> 2] = $78; //@line 5098
  $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 5099
  HEAP32[$354 >> 2] = $80; //@line 5100
  $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 5101
  HEAP32[$355 >> 2] = $82; //@line 5102
  $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 5103
  HEAP32[$356 >> 2] = $84; //@line 5104
  $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 5105
  HEAP32[$357 >> 2] = $86; //@line 5106
  $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 5107
  HEAP32[$358 >> 2] = $88; //@line 5108
  $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 5109
  HEAP32[$359 >> 2] = $90; //@line 5110
  $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 5111
  HEAP32[$360 >> 2] = $92; //@line 5112
  $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 5113
  HEAP32[$361 >> 2] = $94; //@line 5114
  $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 5115
  HEAP32[$362 >> 2] = $96; //@line 5116
  $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 5117
  HEAP32[$363 >> 2] = $98; //@line 5118
  $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 5119
  HEAP32[$364 >> 2] = $100; //@line 5120
  $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 5121
  HEAP32[$365 >> 2] = $102; //@line 5122
  $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 5123
  HEAP32[$366 >> 2] = $104; //@line 5124
  $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 5125
  HEAP32[$367 >> 2] = $106; //@line 5126
  $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 5127
  HEAP32[$368 >> 2] = $108; //@line 5128
  $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 5129
  HEAP32[$369 >> 2] = $110; //@line 5130
  $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 5131
  HEAP32[$370 >> 2] = $112; //@line 5132
  $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 5133
  HEAP32[$371 >> 2] = $114; //@line 5134
  $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 5135
  HEAP32[$372 >> 2] = $116; //@line 5136
  sp = STACKTOP; //@line 5137
  return;
 } else if ((label | 0) == 19) {
  $392 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 5144
  HEAP32[$38 >> 2] = (HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 5165
  HEAP32[$36 >> 2] = 0; //@line 5166
  $413 = $$0$be + 6 << 24 >> 24; //@line 5167
  HEAP8[$88 >> 0] = HEAP8[$18 + ($$0$be + 5 & 255) >> 0] | 0; //@line 5171
  $419 = HEAP32[(HEAP32[$78 >> 2] | 0) + 8 >> 2] | 0; //@line 5174
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 5175
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($54, $392, $110) | 0; //@line 5176
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 5179
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 5180
   HEAP8[$421 >> 0] = $2; //@line 5181
   $422 = $ReallocAsyncCtx4 + 5 | 0; //@line 5182
   HEAP8[$422 >> 0] = $4; //@line 5183
   $423 = $ReallocAsyncCtx4 + 8 | 0; //@line 5184
   HEAP32[$423 >> 2] = $6; //@line 5185
   $424 = $ReallocAsyncCtx4 + 12 | 0; //@line 5186
   HEAP32[$424 >> 2] = $8; //@line 5187
   $425 = $ReallocAsyncCtx4 + 16 | 0; //@line 5188
   HEAP32[$425 >> 2] = $10; //@line 5189
   $426 = $ReallocAsyncCtx4 + 20 | 0; //@line 5190
   HEAP32[$426 >> 2] = $12; //@line 5191
   $427 = $ReallocAsyncCtx4 + 24 | 0; //@line 5192
   HEAP32[$427 >> 2] = $14; //@line 5193
   $428 = $ReallocAsyncCtx4 + 28 | 0; //@line 5194
   HEAP32[$428 >> 2] = $16; //@line 5195
   $429 = $ReallocAsyncCtx4 + 32 | 0; //@line 5196
   HEAP32[$429 >> 2] = $18; //@line 5197
   $430 = $ReallocAsyncCtx4 + 36 | 0; //@line 5198
   HEAP32[$430 >> 2] = $20; //@line 5199
   $431 = $ReallocAsyncCtx4 + 40 | 0; //@line 5200
   HEAP8[$431 >> 0] = $22; //@line 5201
   $432 = $ReallocAsyncCtx4 + 44 | 0; //@line 5202
   HEAP32[$432 >> 2] = $24; //@line 5203
   $433 = $ReallocAsyncCtx4 + 48 | 0; //@line 5204
   HEAP32[$433 >> 2] = $26; //@line 5205
   $434 = $ReallocAsyncCtx4 + 52 | 0; //@line 5206
   HEAP32[$434 >> 2] = $28; //@line 5207
   $435 = $ReallocAsyncCtx4 + 56 | 0; //@line 5208
   HEAP32[$435 >> 2] = $30; //@line 5209
   $436 = $ReallocAsyncCtx4 + 60 | 0; //@line 5210
   HEAP32[$436 >> 2] = $32; //@line 5211
   $437 = $ReallocAsyncCtx4 + 64 | 0; //@line 5212
   HEAP32[$437 >> 2] = $34; //@line 5213
   $438 = $ReallocAsyncCtx4 + 68 | 0; //@line 5214
   HEAP32[$438 >> 2] = $36; //@line 5215
   $439 = $ReallocAsyncCtx4 + 72 | 0; //@line 5216
   HEAP32[$439 >> 2] = $38; //@line 5217
   $440 = $ReallocAsyncCtx4 + 76 | 0; //@line 5218
   HEAP32[$440 >> 2] = $40; //@line 5219
   $441 = $ReallocAsyncCtx4 + 80 | 0; //@line 5220
   HEAP32[$441 >> 2] = $42; //@line 5221
   $442 = $ReallocAsyncCtx4 + 84 | 0; //@line 5222
   HEAP32[$442 >> 2] = $46; //@line 5223
   $443 = $ReallocAsyncCtx4 + 88 | 0; //@line 5224
   HEAP32[$443 >> 2] = $48; //@line 5225
   $444 = $ReallocAsyncCtx4 + 92 | 0; //@line 5226
   HEAP32[$444 >> 2] = $50; //@line 5227
   $445 = $ReallocAsyncCtx4 + 96 | 0; //@line 5228
   HEAP32[$445 >> 2] = $52; //@line 5229
   $446 = $ReallocAsyncCtx4 + 100 | 0; //@line 5230
   HEAP32[$446 >> 2] = $54; //@line 5231
   $447 = $ReallocAsyncCtx4 + 104 | 0; //@line 5232
   HEAP32[$447 >> 2] = $56; //@line 5233
   $448 = $ReallocAsyncCtx4 + 108 | 0; //@line 5234
   HEAP32[$448 >> 2] = $58; //@line 5235
   $449 = $ReallocAsyncCtx4 + 112 | 0; //@line 5236
   HEAP32[$449 >> 2] = $60; //@line 5237
   $450 = $ReallocAsyncCtx4 + 116 | 0; //@line 5238
   HEAP32[$450 >> 2] = $62; //@line 5239
   $451 = $ReallocAsyncCtx4 + 120 | 0; //@line 5240
   HEAP32[$451 >> 2] = $64; //@line 5241
   $452 = $ReallocAsyncCtx4 + 124 | 0; //@line 5242
   HEAP32[$452 >> 2] = $66; //@line 5243
   $453 = $ReallocAsyncCtx4 + 128 | 0; //@line 5244
   HEAP32[$453 >> 2] = $68; //@line 5245
   $454 = $ReallocAsyncCtx4 + 132 | 0; //@line 5246
   HEAP32[$454 >> 2] = $70; //@line 5247
   $455 = $ReallocAsyncCtx4 + 136 | 0; //@line 5248
   HEAP32[$455 >> 2] = $72; //@line 5249
   $456 = $ReallocAsyncCtx4 + 140 | 0; //@line 5250
   HEAP32[$456 >> 2] = $74; //@line 5251
   $457 = $ReallocAsyncCtx4 + 144 | 0; //@line 5252
   HEAP32[$457 >> 2] = $76; //@line 5253
   $458 = $ReallocAsyncCtx4 + 148 | 0; //@line 5254
   HEAP32[$458 >> 2] = $78; //@line 5255
   $459 = $ReallocAsyncCtx4 + 152 | 0; //@line 5256
   HEAP32[$459 >> 2] = $80; //@line 5257
   $460 = $ReallocAsyncCtx4 + 156 | 0; //@line 5258
   HEAP32[$460 >> 2] = $82; //@line 5259
   $461 = $ReallocAsyncCtx4 + 160 | 0; //@line 5260
   HEAP32[$461 >> 2] = $84; //@line 5261
   $462 = $ReallocAsyncCtx4 + 164 | 0; //@line 5262
   HEAP32[$462 >> 2] = $86; //@line 5263
   $463 = $ReallocAsyncCtx4 + 168 | 0; //@line 5264
   HEAP32[$463 >> 2] = $88; //@line 5265
   $464 = $ReallocAsyncCtx4 + 172 | 0; //@line 5266
   HEAP32[$464 >> 2] = $90; //@line 5267
   $465 = $ReallocAsyncCtx4 + 176 | 0; //@line 5268
   HEAP8[$465 >> 0] = $413; //@line 5269
   $466 = $ReallocAsyncCtx4 + 180 | 0; //@line 5270
   HEAP32[$466 >> 2] = $92; //@line 5271
   $467 = $ReallocAsyncCtx4 + 184 | 0; //@line 5272
   HEAP32[$467 >> 2] = $94; //@line 5273
   $468 = $ReallocAsyncCtx4 + 188 | 0; //@line 5274
   HEAP32[$468 >> 2] = $96; //@line 5275
   $469 = $ReallocAsyncCtx4 + 192 | 0; //@line 5276
   HEAP32[$469 >> 2] = $98; //@line 5277
   $470 = $ReallocAsyncCtx4 + 196 | 0; //@line 5278
   HEAP32[$470 >> 2] = $100; //@line 5279
   $471 = $ReallocAsyncCtx4 + 200 | 0; //@line 5280
   HEAP32[$471 >> 2] = $102; //@line 5281
   $472 = $ReallocAsyncCtx4 + 204 | 0; //@line 5282
   HEAP32[$472 >> 2] = $104; //@line 5283
   $473 = $ReallocAsyncCtx4 + 208 | 0; //@line 5284
   HEAP32[$473 >> 2] = $106; //@line 5285
   $474 = $ReallocAsyncCtx4 + 212 | 0; //@line 5286
   HEAP32[$474 >> 2] = $108; //@line 5287
   $475 = $ReallocAsyncCtx4 + 216 | 0; //@line 5288
   HEAP32[$475 >> 2] = $110; //@line 5289
   $476 = $ReallocAsyncCtx4 + 220 | 0; //@line 5290
   HEAP32[$476 >> 2] = $112; //@line 5291
   $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 5292
   HEAP32[$477 >> 2] = $114; //@line 5293
   $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 5294
   HEAP32[$478 >> 2] = $116; //@line 5295
   sp = STACKTOP; //@line 5296
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 5300
  ___async_unwind = 0; //@line 5301
  HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 5302
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 5303
  HEAP8[$421 >> 0] = $2; //@line 5304
  $422 = $ReallocAsyncCtx4 + 5 | 0; //@line 5305
  HEAP8[$422 >> 0] = $4; //@line 5306
  $423 = $ReallocAsyncCtx4 + 8 | 0; //@line 5307
  HEAP32[$423 >> 2] = $6; //@line 5308
  $424 = $ReallocAsyncCtx4 + 12 | 0; //@line 5309
  HEAP32[$424 >> 2] = $8; //@line 5310
  $425 = $ReallocAsyncCtx4 + 16 | 0; //@line 5311
  HEAP32[$425 >> 2] = $10; //@line 5312
  $426 = $ReallocAsyncCtx4 + 20 | 0; //@line 5313
  HEAP32[$426 >> 2] = $12; //@line 5314
  $427 = $ReallocAsyncCtx4 + 24 | 0; //@line 5315
  HEAP32[$427 >> 2] = $14; //@line 5316
  $428 = $ReallocAsyncCtx4 + 28 | 0; //@line 5317
  HEAP32[$428 >> 2] = $16; //@line 5318
  $429 = $ReallocAsyncCtx4 + 32 | 0; //@line 5319
  HEAP32[$429 >> 2] = $18; //@line 5320
  $430 = $ReallocAsyncCtx4 + 36 | 0; //@line 5321
  HEAP32[$430 >> 2] = $20; //@line 5322
  $431 = $ReallocAsyncCtx4 + 40 | 0; //@line 5323
  HEAP8[$431 >> 0] = $22; //@line 5324
  $432 = $ReallocAsyncCtx4 + 44 | 0; //@line 5325
  HEAP32[$432 >> 2] = $24; //@line 5326
  $433 = $ReallocAsyncCtx4 + 48 | 0; //@line 5327
  HEAP32[$433 >> 2] = $26; //@line 5328
  $434 = $ReallocAsyncCtx4 + 52 | 0; //@line 5329
  HEAP32[$434 >> 2] = $28; //@line 5330
  $435 = $ReallocAsyncCtx4 + 56 | 0; //@line 5331
  HEAP32[$435 >> 2] = $30; //@line 5332
  $436 = $ReallocAsyncCtx4 + 60 | 0; //@line 5333
  HEAP32[$436 >> 2] = $32; //@line 5334
  $437 = $ReallocAsyncCtx4 + 64 | 0; //@line 5335
  HEAP32[$437 >> 2] = $34; //@line 5336
  $438 = $ReallocAsyncCtx4 + 68 | 0; //@line 5337
  HEAP32[$438 >> 2] = $36; //@line 5338
  $439 = $ReallocAsyncCtx4 + 72 | 0; //@line 5339
  HEAP32[$439 >> 2] = $38; //@line 5340
  $440 = $ReallocAsyncCtx4 + 76 | 0; //@line 5341
  HEAP32[$440 >> 2] = $40; //@line 5342
  $441 = $ReallocAsyncCtx4 + 80 | 0; //@line 5343
  HEAP32[$441 >> 2] = $42; //@line 5344
  $442 = $ReallocAsyncCtx4 + 84 | 0; //@line 5345
  HEAP32[$442 >> 2] = $46; //@line 5346
  $443 = $ReallocAsyncCtx4 + 88 | 0; //@line 5347
  HEAP32[$443 >> 2] = $48; //@line 5348
  $444 = $ReallocAsyncCtx4 + 92 | 0; //@line 5349
  HEAP32[$444 >> 2] = $50; //@line 5350
  $445 = $ReallocAsyncCtx4 + 96 | 0; //@line 5351
  HEAP32[$445 >> 2] = $52; //@line 5352
  $446 = $ReallocAsyncCtx4 + 100 | 0; //@line 5353
  HEAP32[$446 >> 2] = $54; //@line 5354
  $447 = $ReallocAsyncCtx4 + 104 | 0; //@line 5355
  HEAP32[$447 >> 2] = $56; //@line 5356
  $448 = $ReallocAsyncCtx4 + 108 | 0; //@line 5357
  HEAP32[$448 >> 2] = $58; //@line 5358
  $449 = $ReallocAsyncCtx4 + 112 | 0; //@line 5359
  HEAP32[$449 >> 2] = $60; //@line 5360
  $450 = $ReallocAsyncCtx4 + 116 | 0; //@line 5361
  HEAP32[$450 >> 2] = $62; //@line 5362
  $451 = $ReallocAsyncCtx4 + 120 | 0; //@line 5363
  HEAP32[$451 >> 2] = $64; //@line 5364
  $452 = $ReallocAsyncCtx4 + 124 | 0; //@line 5365
  HEAP32[$452 >> 2] = $66; //@line 5366
  $453 = $ReallocAsyncCtx4 + 128 | 0; //@line 5367
  HEAP32[$453 >> 2] = $68; //@line 5368
  $454 = $ReallocAsyncCtx4 + 132 | 0; //@line 5369
  HEAP32[$454 >> 2] = $70; //@line 5370
  $455 = $ReallocAsyncCtx4 + 136 | 0; //@line 5371
  HEAP32[$455 >> 2] = $72; //@line 5372
  $456 = $ReallocAsyncCtx4 + 140 | 0; //@line 5373
  HEAP32[$456 >> 2] = $74; //@line 5374
  $457 = $ReallocAsyncCtx4 + 144 | 0; //@line 5375
  HEAP32[$457 >> 2] = $76; //@line 5376
  $458 = $ReallocAsyncCtx4 + 148 | 0; //@line 5377
  HEAP32[$458 >> 2] = $78; //@line 5378
  $459 = $ReallocAsyncCtx4 + 152 | 0; //@line 5379
  HEAP32[$459 >> 2] = $80; //@line 5380
  $460 = $ReallocAsyncCtx4 + 156 | 0; //@line 5381
  HEAP32[$460 >> 2] = $82; //@line 5382
  $461 = $ReallocAsyncCtx4 + 160 | 0; //@line 5383
  HEAP32[$461 >> 2] = $84; //@line 5384
  $462 = $ReallocAsyncCtx4 + 164 | 0; //@line 5385
  HEAP32[$462 >> 2] = $86; //@line 5386
  $463 = $ReallocAsyncCtx4 + 168 | 0; //@line 5387
  HEAP32[$463 >> 2] = $88; //@line 5388
  $464 = $ReallocAsyncCtx4 + 172 | 0; //@line 5389
  HEAP32[$464 >> 2] = $90; //@line 5390
  $465 = $ReallocAsyncCtx4 + 176 | 0; //@line 5391
  HEAP8[$465 >> 0] = $413; //@line 5392
  $466 = $ReallocAsyncCtx4 + 180 | 0; //@line 5393
  HEAP32[$466 >> 2] = $92; //@line 5394
  $467 = $ReallocAsyncCtx4 + 184 | 0; //@line 5395
  HEAP32[$467 >> 2] = $94; //@line 5396
  $468 = $ReallocAsyncCtx4 + 188 | 0; //@line 5397
  HEAP32[$468 >> 2] = $96; //@line 5398
  $469 = $ReallocAsyncCtx4 + 192 | 0; //@line 5399
  HEAP32[$469 >> 2] = $98; //@line 5400
  $470 = $ReallocAsyncCtx4 + 196 | 0; //@line 5401
  HEAP32[$470 >> 2] = $100; //@line 5402
  $471 = $ReallocAsyncCtx4 + 200 | 0; //@line 5403
  HEAP32[$471 >> 2] = $102; //@line 5404
  $472 = $ReallocAsyncCtx4 + 204 | 0; //@line 5405
  HEAP32[$472 >> 2] = $104; //@line 5406
  $473 = $ReallocAsyncCtx4 + 208 | 0; //@line 5407
  HEAP32[$473 >> 2] = $106; //@line 5408
  $474 = $ReallocAsyncCtx4 + 212 | 0; //@line 5409
  HEAP32[$474 >> 2] = $108; //@line 5410
  $475 = $ReallocAsyncCtx4 + 216 | 0; //@line 5411
  HEAP32[$475 >> 2] = $110; //@line 5412
  $476 = $ReallocAsyncCtx4 + 220 | 0; //@line 5413
  HEAP32[$476 >> 2] = $112; //@line 5414
  $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 5415
  HEAP32[$477 >> 2] = $114; //@line 5416
  $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 5417
  HEAP32[$478 >> 2] = $116; //@line 5418
  sp = STACKTOP; //@line 5419
  return;
 } else if ((label | 0) == 25) {
  $499 = $$0$be + 2 << 24 >> 24; //@line 5423
  $503 = HEAPU8[$18 + ($119 & 255) >> 0] | 0; //@line 5427
  $505 = $503 >>> 5 & 1; //@line 5430
  $507 = $503 >>> 4 & 1; //@line 5433
  $510 = HEAP32[(HEAP32[$112 >> 2] | 0) + 44 >> 2] | 0; //@line 5436
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 5437
  $511 = FUNCTION_TABLE_iiii[$510 & 31]($54, $507, $505) | 0; //@line 5438
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 478; //@line 5441
   $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 5442
   HEAP8[$512 >> 0] = $2; //@line 5443
   $513 = $ReallocAsyncCtx5 + 5 | 0; //@line 5444
   HEAP8[$513 >> 0] = $4; //@line 5445
   $514 = $ReallocAsyncCtx5 + 8 | 0; //@line 5446
   HEAP32[$514 >> 2] = $6; //@line 5447
   $515 = $ReallocAsyncCtx5 + 12 | 0; //@line 5448
   HEAP32[$515 >> 2] = $8; //@line 5449
   $516 = $ReallocAsyncCtx5 + 16 | 0; //@line 5450
   HEAP32[$516 >> 2] = $10; //@line 5451
   $517 = $ReallocAsyncCtx5 + 20 | 0; //@line 5452
   HEAP32[$517 >> 2] = $12; //@line 5453
   $518 = $ReallocAsyncCtx5 + 24 | 0; //@line 5454
   HEAP32[$518 >> 2] = $14; //@line 5455
   $519 = $ReallocAsyncCtx5 + 28 | 0; //@line 5456
   HEAP32[$519 >> 2] = $16; //@line 5457
   $520 = $ReallocAsyncCtx5 + 32 | 0; //@line 5458
   HEAP32[$520 >> 2] = $18; //@line 5459
   $521 = $ReallocAsyncCtx5 + 36 | 0; //@line 5460
   HEAP32[$521 >> 2] = $20; //@line 5461
   $522 = $ReallocAsyncCtx5 + 40 | 0; //@line 5462
   HEAP8[$522 >> 0] = $22; //@line 5463
   $523 = $ReallocAsyncCtx5 + 44 | 0; //@line 5464
   HEAP32[$523 >> 2] = $$0107$be; //@line 5465
   $524 = $ReallocAsyncCtx5 + 48 | 0; //@line 5466
   HEAP32[$524 >> 2] = $24; //@line 5467
   $525 = $ReallocAsyncCtx5 + 52 | 0; //@line 5468
   HEAP32[$525 >> 2] = $503; //@line 5469
   $526 = $ReallocAsyncCtx5 + 56 | 0; //@line 5470
   HEAP32[$526 >> 2] = $26; //@line 5471
   $527 = $ReallocAsyncCtx5 + 60 | 0; //@line 5472
   HEAP32[$527 >> 2] = $28; //@line 5473
   $528 = $ReallocAsyncCtx5 + 64 | 0; //@line 5474
   HEAP32[$528 >> 2] = $30; //@line 5475
   $529 = $ReallocAsyncCtx5 + 68 | 0; //@line 5476
   HEAP32[$529 >> 2] = $32; //@line 5477
   $530 = $ReallocAsyncCtx5 + 72 | 0; //@line 5478
   HEAP32[$530 >> 2] = $34; //@line 5479
   $531 = $ReallocAsyncCtx5 + 76 | 0; //@line 5480
   HEAP32[$531 >> 2] = $36; //@line 5481
   $532 = $ReallocAsyncCtx5 + 80 | 0; //@line 5482
   HEAP32[$532 >> 2] = $38; //@line 5483
   $533 = $ReallocAsyncCtx5 + 84 | 0; //@line 5484
   HEAP32[$533 >> 2] = $40; //@line 5485
   $534 = $ReallocAsyncCtx5 + 88 | 0; //@line 5486
   HEAP32[$534 >> 2] = $42; //@line 5487
   $535 = $ReallocAsyncCtx5 + 92 | 0; //@line 5488
   HEAP8[$535 >> 0] = $499; //@line 5489
   $536 = $ReallocAsyncCtx5 + 96 | 0; //@line 5490
   HEAP32[$536 >> 2] = $46; //@line 5491
   $537 = $ReallocAsyncCtx5 + 100 | 0; //@line 5492
   HEAP32[$537 >> 2] = $48; //@line 5493
   $538 = $ReallocAsyncCtx5 + 104 | 0; //@line 5494
   HEAP32[$538 >> 2] = $50; //@line 5495
   $539 = $ReallocAsyncCtx5 + 108 | 0; //@line 5496
   HEAP32[$539 >> 2] = $52; //@line 5497
   $540 = $ReallocAsyncCtx5 + 112 | 0; //@line 5498
   HEAP32[$540 >> 2] = $54; //@line 5499
   $541 = $ReallocAsyncCtx5 + 116 | 0; //@line 5500
   HEAP32[$541 >> 2] = $56; //@line 5501
   $542 = $ReallocAsyncCtx5 + 120 | 0; //@line 5502
   HEAP32[$542 >> 2] = $58; //@line 5503
   $543 = $ReallocAsyncCtx5 + 124 | 0; //@line 5504
   HEAP32[$543 >> 2] = $60; //@line 5505
   $544 = $ReallocAsyncCtx5 + 128 | 0; //@line 5506
   HEAP8[$544 >> 0] = $505; //@line 5507
   $545 = $ReallocAsyncCtx5 + 132 | 0; //@line 5508
   HEAP32[$545 >> 2] = $62; //@line 5509
   $546 = $ReallocAsyncCtx5 + 136 | 0; //@line 5510
   HEAP32[$546 >> 2] = $64; //@line 5511
   $547 = $ReallocAsyncCtx5 + 140 | 0; //@line 5512
   HEAP32[$547 >> 2] = $66; //@line 5513
   $548 = $ReallocAsyncCtx5 + 144 | 0; //@line 5514
   HEAP32[$548 >> 2] = $68; //@line 5515
   $549 = $ReallocAsyncCtx5 + 148 | 0; //@line 5516
   HEAP32[$549 >> 2] = $70; //@line 5517
   $550 = $ReallocAsyncCtx5 + 152 | 0; //@line 5518
   HEAP32[$550 >> 2] = $72; //@line 5519
   $551 = $ReallocAsyncCtx5 + 156 | 0; //@line 5520
   HEAP32[$551 >> 2] = $74; //@line 5521
   $552 = $ReallocAsyncCtx5 + 160 | 0; //@line 5522
   HEAP32[$552 >> 2] = $76; //@line 5523
   $553 = $ReallocAsyncCtx5 + 164 | 0; //@line 5524
   HEAP32[$553 >> 2] = $78; //@line 5525
   $554 = $ReallocAsyncCtx5 + 168 | 0; //@line 5526
   HEAP32[$554 >> 2] = $80; //@line 5527
   $555 = $ReallocAsyncCtx5 + 172 | 0; //@line 5528
   HEAP32[$555 >> 2] = $82; //@line 5529
   $556 = $ReallocAsyncCtx5 + 176 | 0; //@line 5530
   HEAP32[$556 >> 2] = $84; //@line 5531
   $557 = $ReallocAsyncCtx5 + 180 | 0; //@line 5532
   HEAP32[$557 >> 2] = $86; //@line 5533
   $558 = $ReallocAsyncCtx5 + 184 | 0; //@line 5534
   HEAP32[$558 >> 2] = $88; //@line 5535
   $559 = $ReallocAsyncCtx5 + 188 | 0; //@line 5536
   HEAP32[$559 >> 2] = $90; //@line 5537
   $560 = $ReallocAsyncCtx5 + 192 | 0; //@line 5538
   HEAP32[$560 >> 2] = $92; //@line 5539
   $561 = $ReallocAsyncCtx5 + 196 | 0; //@line 5540
   HEAP32[$561 >> 2] = $94; //@line 5541
   $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 5542
   HEAP32[$562 >> 2] = $96; //@line 5543
   $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 5544
   HEAP32[$563 >> 2] = $98; //@line 5545
   $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 5546
   HEAP32[$564 >> 2] = $100; //@line 5547
   $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 5548
   HEAP32[$565 >> 2] = $102; //@line 5549
   $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 5550
   HEAP8[$566 >> 0] = $507; //@line 5551
   $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 5552
   HEAP32[$567 >> 2] = $104; //@line 5553
   $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 5554
   HEAP32[$568 >> 2] = $106; //@line 5555
   $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 5556
   HEAP32[$569 >> 2] = $108; //@line 5557
   $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 5558
   HEAP32[$570 >> 2] = $110; //@line 5559
   $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 5560
   HEAP32[$571 >> 2] = $112; //@line 5561
   $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 5562
   HEAP32[$572 >> 2] = $114; //@line 5563
   $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 5564
   HEAP32[$573 >> 2] = $116; //@line 5565
   sp = STACKTOP; //@line 5566
   return;
  }
  HEAP8[___async_retval >> 0] = $511 & 1; //@line 5571
  ___async_unwind = 0; //@line 5572
  HEAP32[$ReallocAsyncCtx5 >> 2] = 478; //@line 5573
  $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 5574
  HEAP8[$512 >> 0] = $2; //@line 5575
  $513 = $ReallocAsyncCtx5 + 5 | 0; //@line 5576
  HEAP8[$513 >> 0] = $4; //@line 5577
  $514 = $ReallocAsyncCtx5 + 8 | 0; //@line 5578
  HEAP32[$514 >> 2] = $6; //@line 5579
  $515 = $ReallocAsyncCtx5 + 12 | 0; //@line 5580
  HEAP32[$515 >> 2] = $8; //@line 5581
  $516 = $ReallocAsyncCtx5 + 16 | 0; //@line 5582
  HEAP32[$516 >> 2] = $10; //@line 5583
  $517 = $ReallocAsyncCtx5 + 20 | 0; //@line 5584
  HEAP32[$517 >> 2] = $12; //@line 5585
  $518 = $ReallocAsyncCtx5 + 24 | 0; //@line 5586
  HEAP32[$518 >> 2] = $14; //@line 5587
  $519 = $ReallocAsyncCtx5 + 28 | 0; //@line 5588
  HEAP32[$519 >> 2] = $16; //@line 5589
  $520 = $ReallocAsyncCtx5 + 32 | 0; //@line 5590
  HEAP32[$520 >> 2] = $18; //@line 5591
  $521 = $ReallocAsyncCtx5 + 36 | 0; //@line 5592
  HEAP32[$521 >> 2] = $20; //@line 5593
  $522 = $ReallocAsyncCtx5 + 40 | 0; //@line 5594
  HEAP8[$522 >> 0] = $22; //@line 5595
  $523 = $ReallocAsyncCtx5 + 44 | 0; //@line 5596
  HEAP32[$523 >> 2] = $$0107$be; //@line 5597
  $524 = $ReallocAsyncCtx5 + 48 | 0; //@line 5598
  HEAP32[$524 >> 2] = $24; //@line 5599
  $525 = $ReallocAsyncCtx5 + 52 | 0; //@line 5600
  HEAP32[$525 >> 2] = $503; //@line 5601
  $526 = $ReallocAsyncCtx5 + 56 | 0; //@line 5602
  HEAP32[$526 >> 2] = $26; //@line 5603
  $527 = $ReallocAsyncCtx5 + 60 | 0; //@line 5604
  HEAP32[$527 >> 2] = $28; //@line 5605
  $528 = $ReallocAsyncCtx5 + 64 | 0; //@line 5606
  HEAP32[$528 >> 2] = $30; //@line 5607
  $529 = $ReallocAsyncCtx5 + 68 | 0; //@line 5608
  HEAP32[$529 >> 2] = $32; //@line 5609
  $530 = $ReallocAsyncCtx5 + 72 | 0; //@line 5610
  HEAP32[$530 >> 2] = $34; //@line 5611
  $531 = $ReallocAsyncCtx5 + 76 | 0; //@line 5612
  HEAP32[$531 >> 2] = $36; //@line 5613
  $532 = $ReallocAsyncCtx5 + 80 | 0; //@line 5614
  HEAP32[$532 >> 2] = $38; //@line 5615
  $533 = $ReallocAsyncCtx5 + 84 | 0; //@line 5616
  HEAP32[$533 >> 2] = $40; //@line 5617
  $534 = $ReallocAsyncCtx5 + 88 | 0; //@line 5618
  HEAP32[$534 >> 2] = $42; //@line 5619
  $535 = $ReallocAsyncCtx5 + 92 | 0; //@line 5620
  HEAP8[$535 >> 0] = $499; //@line 5621
  $536 = $ReallocAsyncCtx5 + 96 | 0; //@line 5622
  HEAP32[$536 >> 2] = $46; //@line 5623
  $537 = $ReallocAsyncCtx5 + 100 | 0; //@line 5624
  HEAP32[$537 >> 2] = $48; //@line 5625
  $538 = $ReallocAsyncCtx5 + 104 | 0; //@line 5626
  HEAP32[$538 >> 2] = $50; //@line 5627
  $539 = $ReallocAsyncCtx5 + 108 | 0; //@line 5628
  HEAP32[$539 >> 2] = $52; //@line 5629
  $540 = $ReallocAsyncCtx5 + 112 | 0; //@line 5630
  HEAP32[$540 >> 2] = $54; //@line 5631
  $541 = $ReallocAsyncCtx5 + 116 | 0; //@line 5632
  HEAP32[$541 >> 2] = $56; //@line 5633
  $542 = $ReallocAsyncCtx5 + 120 | 0; //@line 5634
  HEAP32[$542 >> 2] = $58; //@line 5635
  $543 = $ReallocAsyncCtx5 + 124 | 0; //@line 5636
  HEAP32[$543 >> 2] = $60; //@line 5637
  $544 = $ReallocAsyncCtx5 + 128 | 0; //@line 5638
  HEAP8[$544 >> 0] = $505; //@line 5639
  $545 = $ReallocAsyncCtx5 + 132 | 0; //@line 5640
  HEAP32[$545 >> 2] = $62; //@line 5641
  $546 = $ReallocAsyncCtx5 + 136 | 0; //@line 5642
  HEAP32[$546 >> 2] = $64; //@line 5643
  $547 = $ReallocAsyncCtx5 + 140 | 0; //@line 5644
  HEAP32[$547 >> 2] = $66; //@line 5645
  $548 = $ReallocAsyncCtx5 + 144 | 0; //@line 5646
  HEAP32[$548 >> 2] = $68; //@line 5647
  $549 = $ReallocAsyncCtx5 + 148 | 0; //@line 5648
  HEAP32[$549 >> 2] = $70; //@line 5649
  $550 = $ReallocAsyncCtx5 + 152 | 0; //@line 5650
  HEAP32[$550 >> 2] = $72; //@line 5651
  $551 = $ReallocAsyncCtx5 + 156 | 0; //@line 5652
  HEAP32[$551 >> 2] = $74; //@line 5653
  $552 = $ReallocAsyncCtx5 + 160 | 0; //@line 5654
  HEAP32[$552 >> 2] = $76; //@line 5655
  $553 = $ReallocAsyncCtx5 + 164 | 0; //@line 5656
  HEAP32[$553 >> 2] = $78; //@line 5657
  $554 = $ReallocAsyncCtx5 + 168 | 0; //@line 5658
  HEAP32[$554 >> 2] = $80; //@line 5659
  $555 = $ReallocAsyncCtx5 + 172 | 0; //@line 5660
  HEAP32[$555 >> 2] = $82; //@line 5661
  $556 = $ReallocAsyncCtx5 + 176 | 0; //@line 5662
  HEAP32[$556 >> 2] = $84; //@line 5663
  $557 = $ReallocAsyncCtx5 + 180 | 0; //@line 5664
  HEAP32[$557 >> 2] = $86; //@line 5665
  $558 = $ReallocAsyncCtx5 + 184 | 0; //@line 5666
  HEAP32[$558 >> 2] = $88; //@line 5667
  $559 = $ReallocAsyncCtx5 + 188 | 0; //@line 5668
  HEAP32[$559 >> 2] = $90; //@line 5669
  $560 = $ReallocAsyncCtx5 + 192 | 0; //@line 5670
  HEAP32[$560 >> 2] = $92; //@line 5671
  $561 = $ReallocAsyncCtx5 + 196 | 0; //@line 5672
  HEAP32[$561 >> 2] = $94; //@line 5673
  $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 5674
  HEAP32[$562 >> 2] = $96; //@line 5675
  $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 5676
  HEAP32[$563 >> 2] = $98; //@line 5677
  $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 5678
  HEAP32[$564 >> 2] = $100; //@line 5679
  $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 5680
  HEAP32[$565 >> 2] = $102; //@line 5681
  $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 5682
  HEAP8[$566 >> 0] = $507; //@line 5683
  $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 5684
  HEAP32[$567 >> 2] = $104; //@line 5685
  $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 5686
  HEAP32[$568 >> 2] = $106; //@line 5687
  $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 5688
  HEAP32[$569 >> 2] = $108; //@line 5689
  $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 5690
  HEAP32[$570 >> 2] = $110; //@line 5691
  $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 5692
  HEAP32[$571 >> 2] = $112; //@line 5693
  $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 5694
  HEAP32[$572 >> 2] = $114; //@line 5695
  $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 5696
  HEAP32[$573 >> 2] = $116; //@line 5697
  sp = STACKTOP; //@line 5698
  return;
 } else if ((label | 0) == 28) {
  $578 = HEAP8[$18 + ($119 & 255) >> 0] | 0; //@line 5705
  $591 = $$0$be + 5 << 24 >> 24; //@line 5718
  $598 = (HEAPU8[$18 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$18 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$18 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 5725
  $601 = HEAP32[(HEAP32[$94 >> 2] | 0) + 48 >> 2] | 0; //@line 5728
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 5729
  $602 = FUNCTION_TABLE_iiii[$601 & 31]($54, $578, $598) | 0; //@line 5730
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 479; //@line 5733
   $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 5734
   HEAP8[$603 >> 0] = $2; //@line 5735
   $604 = $ReallocAsyncCtx6 + 5 | 0; //@line 5736
   HEAP8[$604 >> 0] = $4; //@line 5737
   $605 = $ReallocAsyncCtx6 + 8 | 0; //@line 5738
   HEAP32[$605 >> 2] = $6; //@line 5739
   $606 = $ReallocAsyncCtx6 + 12 | 0; //@line 5740
   HEAP32[$606 >> 2] = $8; //@line 5741
   $607 = $ReallocAsyncCtx6 + 16 | 0; //@line 5742
   HEAP32[$607 >> 2] = $10; //@line 5743
   $608 = $ReallocAsyncCtx6 + 20 | 0; //@line 5744
   HEAP32[$608 >> 2] = $12; //@line 5745
   $609 = $ReallocAsyncCtx6 + 24 | 0; //@line 5746
   HEAP32[$609 >> 2] = $14; //@line 5747
   $610 = $ReallocAsyncCtx6 + 28 | 0; //@line 5748
   HEAP32[$610 >> 2] = $16; //@line 5749
   $611 = $ReallocAsyncCtx6 + 32 | 0; //@line 5750
   HEAP32[$611 >> 2] = $18; //@line 5751
   $612 = $ReallocAsyncCtx6 + 36 | 0; //@line 5752
   HEAP32[$612 >> 2] = $20; //@line 5753
   $613 = $ReallocAsyncCtx6 + 40 | 0; //@line 5754
   HEAP8[$613 >> 0] = $22; //@line 5755
   $614 = $ReallocAsyncCtx6 + 44 | 0; //@line 5756
   HEAP32[$614 >> 2] = $24; //@line 5757
   $615 = $ReallocAsyncCtx6 + 48 | 0; //@line 5758
   HEAP32[$615 >> 2] = $26; //@line 5759
   $616 = $ReallocAsyncCtx6 + 52 | 0; //@line 5760
   HEAP8[$616 >> 0] = $591; //@line 5761
   $617 = $ReallocAsyncCtx6 + 56 | 0; //@line 5762
   HEAP32[$617 >> 2] = $28; //@line 5763
   $618 = $ReallocAsyncCtx6 + 60 | 0; //@line 5764
   HEAP32[$618 >> 2] = $30; //@line 5765
   $619 = $ReallocAsyncCtx6 + 64 | 0; //@line 5766
   HEAP32[$619 >> 2] = $32; //@line 5767
   $620 = $ReallocAsyncCtx6 + 68 | 0; //@line 5768
   HEAP32[$620 >> 2] = $34; //@line 5769
   $621 = $ReallocAsyncCtx6 + 72 | 0; //@line 5770
   HEAP32[$621 >> 2] = $36; //@line 5771
   $622 = $ReallocAsyncCtx6 + 76 | 0; //@line 5772
   HEAP32[$622 >> 2] = $38; //@line 5773
   $623 = $ReallocAsyncCtx6 + 80 | 0; //@line 5774
   HEAP32[$623 >> 2] = $40; //@line 5775
   $624 = $ReallocAsyncCtx6 + 84 | 0; //@line 5776
   HEAP32[$624 >> 2] = $42; //@line 5777
   $625 = $ReallocAsyncCtx6 + 88 | 0; //@line 5778
   HEAP32[$625 >> 2] = $46; //@line 5779
   $626 = $ReallocAsyncCtx6 + 92 | 0; //@line 5780
   HEAP32[$626 >> 2] = $48; //@line 5781
   $627 = $ReallocAsyncCtx6 + 96 | 0; //@line 5782
   HEAP32[$627 >> 2] = $50; //@line 5783
   $628 = $ReallocAsyncCtx6 + 100 | 0; //@line 5784
   HEAP32[$628 >> 2] = $52; //@line 5785
   $629 = $ReallocAsyncCtx6 + 104 | 0; //@line 5786
   HEAP32[$629 >> 2] = $54; //@line 5787
   $630 = $ReallocAsyncCtx6 + 108 | 0; //@line 5788
   HEAP32[$630 >> 2] = $56; //@line 5789
   $631 = $ReallocAsyncCtx6 + 112 | 0; //@line 5790
   HEAP32[$631 >> 2] = $58; //@line 5791
   $632 = $ReallocAsyncCtx6 + 116 | 0; //@line 5792
   HEAP32[$632 >> 2] = $60; //@line 5793
   $633 = $ReallocAsyncCtx6 + 120 | 0; //@line 5794
   HEAP32[$633 >> 2] = $62; //@line 5795
   $634 = $ReallocAsyncCtx6 + 124 | 0; //@line 5796
   HEAP32[$634 >> 2] = $64; //@line 5797
   $635 = $ReallocAsyncCtx6 + 128 | 0; //@line 5798
   HEAP32[$635 >> 2] = $66; //@line 5799
   $636 = $ReallocAsyncCtx6 + 132 | 0; //@line 5800
   HEAP32[$636 >> 2] = $68; //@line 5801
   $637 = $ReallocAsyncCtx6 + 136 | 0; //@line 5802
   HEAP32[$637 >> 2] = $70; //@line 5803
   $638 = $ReallocAsyncCtx6 + 140 | 0; //@line 5804
   HEAP32[$638 >> 2] = $72; //@line 5805
   $639 = $ReallocAsyncCtx6 + 144 | 0; //@line 5806
   HEAP32[$639 >> 2] = $74; //@line 5807
   $640 = $ReallocAsyncCtx6 + 148 | 0; //@line 5808
   HEAP32[$640 >> 2] = $76; //@line 5809
   $641 = $ReallocAsyncCtx6 + 152 | 0; //@line 5810
   HEAP32[$641 >> 2] = $78; //@line 5811
   $642 = $ReallocAsyncCtx6 + 156 | 0; //@line 5812
   HEAP32[$642 >> 2] = $80; //@line 5813
   $643 = $ReallocAsyncCtx6 + 160 | 0; //@line 5814
   HEAP32[$643 >> 2] = $82; //@line 5815
   $644 = $ReallocAsyncCtx6 + 164 | 0; //@line 5816
   HEAP32[$644 >> 2] = $84; //@line 5817
   $645 = $ReallocAsyncCtx6 + 168 | 0; //@line 5818
   HEAP32[$645 >> 2] = $86; //@line 5819
   $646 = $ReallocAsyncCtx6 + 172 | 0; //@line 5820
   HEAP32[$646 >> 2] = $88; //@line 5821
   $647 = $ReallocAsyncCtx6 + 176 | 0; //@line 5822
   HEAP32[$647 >> 2] = $90; //@line 5823
   $648 = $ReallocAsyncCtx6 + 180 | 0; //@line 5824
   HEAP32[$648 >> 2] = $92; //@line 5825
   $649 = $ReallocAsyncCtx6 + 184 | 0; //@line 5826
   HEAP32[$649 >> 2] = $94; //@line 5827
   $650 = $ReallocAsyncCtx6 + 188 | 0; //@line 5828
   HEAP32[$650 >> 2] = $96; //@line 5829
   $651 = $ReallocAsyncCtx6 + 192 | 0; //@line 5830
   HEAP32[$651 >> 2] = $98; //@line 5831
   $652 = $ReallocAsyncCtx6 + 196 | 0; //@line 5832
   HEAP32[$652 >> 2] = $100; //@line 5833
   $653 = $ReallocAsyncCtx6 + 200 | 0; //@line 5834
   HEAP32[$653 >> 2] = $102; //@line 5835
   $654 = $ReallocAsyncCtx6 + 204 | 0; //@line 5836
   HEAP32[$654 >> 2] = $104; //@line 5837
   $655 = $ReallocAsyncCtx6 + 208 | 0; //@line 5838
   HEAP32[$655 >> 2] = $106; //@line 5839
   $656 = $ReallocAsyncCtx6 + 212 | 0; //@line 5840
   HEAP32[$656 >> 2] = $108; //@line 5841
   $657 = $ReallocAsyncCtx6 + 216 | 0; //@line 5842
   HEAP32[$657 >> 2] = $110; //@line 5843
   $658 = $ReallocAsyncCtx6 + 220 | 0; //@line 5844
   HEAP32[$658 >> 2] = $112; //@line 5845
   $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 5846
   HEAP32[$659 >> 2] = $114; //@line 5847
   $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 5848
   HEAP32[$660 >> 2] = $116; //@line 5849
   sp = STACKTOP; //@line 5850
   return;
  }
  HEAP8[___async_retval >> 0] = $602; //@line 5854
  ___async_unwind = 0; //@line 5855
  HEAP32[$ReallocAsyncCtx6 >> 2] = 479; //@line 5856
  $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 5857
  HEAP8[$603 >> 0] = $2; //@line 5858
  $604 = $ReallocAsyncCtx6 + 5 | 0; //@line 5859
  HEAP8[$604 >> 0] = $4; //@line 5860
  $605 = $ReallocAsyncCtx6 + 8 | 0; //@line 5861
  HEAP32[$605 >> 2] = $6; //@line 5862
  $606 = $ReallocAsyncCtx6 + 12 | 0; //@line 5863
  HEAP32[$606 >> 2] = $8; //@line 5864
  $607 = $ReallocAsyncCtx6 + 16 | 0; //@line 5865
  HEAP32[$607 >> 2] = $10; //@line 5866
  $608 = $ReallocAsyncCtx6 + 20 | 0; //@line 5867
  HEAP32[$608 >> 2] = $12; //@line 5868
  $609 = $ReallocAsyncCtx6 + 24 | 0; //@line 5869
  HEAP32[$609 >> 2] = $14; //@line 5870
  $610 = $ReallocAsyncCtx6 + 28 | 0; //@line 5871
  HEAP32[$610 >> 2] = $16; //@line 5872
  $611 = $ReallocAsyncCtx6 + 32 | 0; //@line 5873
  HEAP32[$611 >> 2] = $18; //@line 5874
  $612 = $ReallocAsyncCtx6 + 36 | 0; //@line 5875
  HEAP32[$612 >> 2] = $20; //@line 5876
  $613 = $ReallocAsyncCtx6 + 40 | 0; //@line 5877
  HEAP8[$613 >> 0] = $22; //@line 5878
  $614 = $ReallocAsyncCtx6 + 44 | 0; //@line 5879
  HEAP32[$614 >> 2] = $24; //@line 5880
  $615 = $ReallocAsyncCtx6 + 48 | 0; //@line 5881
  HEAP32[$615 >> 2] = $26; //@line 5882
  $616 = $ReallocAsyncCtx6 + 52 | 0; //@line 5883
  HEAP8[$616 >> 0] = $591; //@line 5884
  $617 = $ReallocAsyncCtx6 + 56 | 0; //@line 5885
  HEAP32[$617 >> 2] = $28; //@line 5886
  $618 = $ReallocAsyncCtx6 + 60 | 0; //@line 5887
  HEAP32[$618 >> 2] = $30; //@line 5888
  $619 = $ReallocAsyncCtx6 + 64 | 0; //@line 5889
  HEAP32[$619 >> 2] = $32; //@line 5890
  $620 = $ReallocAsyncCtx6 + 68 | 0; //@line 5891
  HEAP32[$620 >> 2] = $34; //@line 5892
  $621 = $ReallocAsyncCtx6 + 72 | 0; //@line 5893
  HEAP32[$621 >> 2] = $36; //@line 5894
  $622 = $ReallocAsyncCtx6 + 76 | 0; //@line 5895
  HEAP32[$622 >> 2] = $38; //@line 5896
  $623 = $ReallocAsyncCtx6 + 80 | 0; //@line 5897
  HEAP32[$623 >> 2] = $40; //@line 5898
  $624 = $ReallocAsyncCtx6 + 84 | 0; //@line 5899
  HEAP32[$624 >> 2] = $42; //@line 5900
  $625 = $ReallocAsyncCtx6 + 88 | 0; //@line 5901
  HEAP32[$625 >> 2] = $46; //@line 5902
  $626 = $ReallocAsyncCtx6 + 92 | 0; //@line 5903
  HEAP32[$626 >> 2] = $48; //@line 5904
  $627 = $ReallocAsyncCtx6 + 96 | 0; //@line 5905
  HEAP32[$627 >> 2] = $50; //@line 5906
  $628 = $ReallocAsyncCtx6 + 100 | 0; //@line 5907
  HEAP32[$628 >> 2] = $52; //@line 5908
  $629 = $ReallocAsyncCtx6 + 104 | 0; //@line 5909
  HEAP32[$629 >> 2] = $54; //@line 5910
  $630 = $ReallocAsyncCtx6 + 108 | 0; //@line 5911
  HEAP32[$630 >> 2] = $56; //@line 5912
  $631 = $ReallocAsyncCtx6 + 112 | 0; //@line 5913
  HEAP32[$631 >> 2] = $58; //@line 5914
  $632 = $ReallocAsyncCtx6 + 116 | 0; //@line 5915
  HEAP32[$632 >> 2] = $60; //@line 5916
  $633 = $ReallocAsyncCtx6 + 120 | 0; //@line 5917
  HEAP32[$633 >> 2] = $62; //@line 5918
  $634 = $ReallocAsyncCtx6 + 124 | 0; //@line 5919
  HEAP32[$634 >> 2] = $64; //@line 5920
  $635 = $ReallocAsyncCtx6 + 128 | 0; //@line 5921
  HEAP32[$635 >> 2] = $66; //@line 5922
  $636 = $ReallocAsyncCtx6 + 132 | 0; //@line 5923
  HEAP32[$636 >> 2] = $68; //@line 5924
  $637 = $ReallocAsyncCtx6 + 136 | 0; //@line 5925
  HEAP32[$637 >> 2] = $70; //@line 5926
  $638 = $ReallocAsyncCtx6 + 140 | 0; //@line 5927
  HEAP32[$638 >> 2] = $72; //@line 5928
  $639 = $ReallocAsyncCtx6 + 144 | 0; //@line 5929
  HEAP32[$639 >> 2] = $74; //@line 5930
  $640 = $ReallocAsyncCtx6 + 148 | 0; //@line 5931
  HEAP32[$640 >> 2] = $76; //@line 5932
  $641 = $ReallocAsyncCtx6 + 152 | 0; //@line 5933
  HEAP32[$641 >> 2] = $78; //@line 5934
  $642 = $ReallocAsyncCtx6 + 156 | 0; //@line 5935
  HEAP32[$642 >> 2] = $80; //@line 5936
  $643 = $ReallocAsyncCtx6 + 160 | 0; //@line 5937
  HEAP32[$643 >> 2] = $82; //@line 5938
  $644 = $ReallocAsyncCtx6 + 164 | 0; //@line 5939
  HEAP32[$644 >> 2] = $84; //@line 5940
  $645 = $ReallocAsyncCtx6 + 168 | 0; //@line 5941
  HEAP32[$645 >> 2] = $86; //@line 5942
  $646 = $ReallocAsyncCtx6 + 172 | 0; //@line 5943
  HEAP32[$646 >> 2] = $88; //@line 5944
  $647 = $ReallocAsyncCtx6 + 176 | 0; //@line 5945
  HEAP32[$647 >> 2] = $90; //@line 5946
  $648 = $ReallocAsyncCtx6 + 180 | 0; //@line 5947
  HEAP32[$648 >> 2] = $92; //@line 5948
  $649 = $ReallocAsyncCtx6 + 184 | 0; //@line 5949
  HEAP32[$649 >> 2] = $94; //@line 5950
  $650 = $ReallocAsyncCtx6 + 188 | 0; //@line 5951
  HEAP32[$650 >> 2] = $96; //@line 5952
  $651 = $ReallocAsyncCtx6 + 192 | 0; //@line 5953
  HEAP32[$651 >> 2] = $98; //@line 5954
  $652 = $ReallocAsyncCtx6 + 196 | 0; //@line 5955
  HEAP32[$652 >> 2] = $100; //@line 5956
  $653 = $ReallocAsyncCtx6 + 200 | 0; //@line 5957
  HEAP32[$653 >> 2] = $102; //@line 5958
  $654 = $ReallocAsyncCtx6 + 204 | 0; //@line 5959
  HEAP32[$654 >> 2] = $104; //@line 5960
  $655 = $ReallocAsyncCtx6 + 208 | 0; //@line 5961
  HEAP32[$655 >> 2] = $106; //@line 5962
  $656 = $ReallocAsyncCtx6 + 212 | 0; //@line 5963
  HEAP32[$656 >> 2] = $108; //@line 5964
  $657 = $ReallocAsyncCtx6 + 216 | 0; //@line 5965
  HEAP32[$657 >> 2] = $110; //@line 5966
  $658 = $ReallocAsyncCtx6 + 220 | 0; //@line 5967
  HEAP32[$658 >> 2] = $112; //@line 5968
  $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 5969
  HEAP32[$659 >> 2] = $114; //@line 5970
  $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 5971
  HEAP32[$660 >> 2] = $116; //@line 5972
  sp = STACKTOP; //@line 5973
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 5978
  return;
 }
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 7862
 STACKTOP = STACKTOP + 16 | 0; //@line 7863
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7863
 $1 = sp; //@line 7864
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 7871
   $7 = $6 >>> 3; //@line 7872
   $8 = HEAP32[5767] | 0; //@line 7873
   $9 = $8 >>> $7; //@line 7874
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 7880
    $16 = 23108 + ($14 << 1 << 2) | 0; //@line 7882
    $17 = $16 + 8 | 0; //@line 7883
    $18 = HEAP32[$17 >> 2] | 0; //@line 7884
    $19 = $18 + 8 | 0; //@line 7885
    $20 = HEAP32[$19 >> 2] | 0; //@line 7886
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5767] = $8 & ~(1 << $14); //@line 7893
     } else {
      if ((HEAP32[5771] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 7898
      }
      $27 = $20 + 12 | 0; //@line 7901
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 7905
       HEAP32[$17 >> 2] = $20; //@line 7906
       break;
      } else {
       _abort(); //@line 7909
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 7914
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 7917
    $34 = $18 + $30 + 4 | 0; //@line 7919
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 7922
    $$0 = $19; //@line 7923
    STACKTOP = sp; //@line 7924
    return $$0 | 0; //@line 7924
   }
   $37 = HEAP32[5769] | 0; //@line 7926
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 7932
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 7935
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 7938
     $49 = $47 >>> 12 & 16; //@line 7940
     $50 = $47 >>> $49; //@line 7941
     $52 = $50 >>> 5 & 8; //@line 7943
     $54 = $50 >>> $52; //@line 7945
     $56 = $54 >>> 2 & 4; //@line 7947
     $58 = $54 >>> $56; //@line 7949
     $60 = $58 >>> 1 & 2; //@line 7951
     $62 = $58 >>> $60; //@line 7953
     $64 = $62 >>> 1 & 1; //@line 7955
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 7958
     $69 = 23108 + ($67 << 1 << 2) | 0; //@line 7960
     $70 = $69 + 8 | 0; //@line 7961
     $71 = HEAP32[$70 >> 2] | 0; //@line 7962
     $72 = $71 + 8 | 0; //@line 7963
     $73 = HEAP32[$72 >> 2] | 0; //@line 7964
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 7970
       HEAP32[5767] = $77; //@line 7971
       $98 = $77; //@line 7972
      } else {
       if ((HEAP32[5771] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 7977
       }
       $80 = $73 + 12 | 0; //@line 7980
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 7984
        HEAP32[$70 >> 2] = $73; //@line 7985
        $98 = $8; //@line 7986
        break;
       } else {
        _abort(); //@line 7989
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 7994
     $84 = $83 - $6 | 0; //@line 7995
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 7998
     $87 = $71 + $6 | 0; //@line 7999
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 8002
     HEAP32[$71 + $83 >> 2] = $84; //@line 8004
     if ($37 | 0) {
      $92 = HEAP32[5772] | 0; //@line 8007
      $93 = $37 >>> 3; //@line 8008
      $95 = 23108 + ($93 << 1 << 2) | 0; //@line 8010
      $96 = 1 << $93; //@line 8011
      if (!($98 & $96)) {
       HEAP32[5767] = $98 | $96; //@line 8016
       $$0199 = $95; //@line 8018
       $$pre$phiZ2D = $95 + 8 | 0; //@line 8018
      } else {
       $101 = $95 + 8 | 0; //@line 8020
       $102 = HEAP32[$101 >> 2] | 0; //@line 8021
       if ((HEAP32[5771] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 8025
       } else {
        $$0199 = $102; //@line 8028
        $$pre$phiZ2D = $101; //@line 8028
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 8031
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 8033
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 8035
      HEAP32[$92 + 12 >> 2] = $95; //@line 8037
     }
     HEAP32[5769] = $84; //@line 8039
     HEAP32[5772] = $87; //@line 8040
     $$0 = $72; //@line 8041
     STACKTOP = sp; //@line 8042
     return $$0 | 0; //@line 8042
    }
    $108 = HEAP32[5768] | 0; //@line 8044
    if (!$108) {
     $$0197 = $6; //@line 8047
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 8051
     $114 = $112 >>> 12 & 16; //@line 8053
     $115 = $112 >>> $114; //@line 8054
     $117 = $115 >>> 5 & 8; //@line 8056
     $119 = $115 >>> $117; //@line 8058
     $121 = $119 >>> 2 & 4; //@line 8060
     $123 = $119 >>> $121; //@line 8062
     $125 = $123 >>> 1 & 2; //@line 8064
     $127 = $123 >>> $125; //@line 8066
     $129 = $127 >>> 1 & 1; //@line 8068
     $134 = HEAP32[23372 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 8073
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 8077
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8083
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 8086
      $$0193$lcssa$i = $138; //@line 8086
     } else {
      $$01926$i = $134; //@line 8088
      $$01935$i = $138; //@line 8088
      $146 = $143; //@line 8088
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 8093
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 8094
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 8095
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 8096
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8102
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 8105
        $$0193$lcssa$i = $$$0193$i; //@line 8105
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 8108
        $$01935$i = $$$0193$i; //@line 8108
       }
      }
     }
     $157 = HEAP32[5771] | 0; //@line 8112
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 8115
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 8118
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 8121
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 8125
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 8127
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 8131
       $176 = HEAP32[$175 >> 2] | 0; //@line 8132
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 8135
        $179 = HEAP32[$178 >> 2] | 0; //@line 8136
        if (!$179) {
         $$3$i = 0; //@line 8139
         break;
        } else {
         $$1196$i = $179; //@line 8142
         $$1198$i = $178; //@line 8142
        }
       } else {
        $$1196$i = $176; //@line 8145
        $$1198$i = $175; //@line 8145
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 8148
        $182 = HEAP32[$181 >> 2] | 0; //@line 8149
        if ($182 | 0) {
         $$1196$i = $182; //@line 8152
         $$1198$i = $181; //@line 8152
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 8155
        $185 = HEAP32[$184 >> 2] | 0; //@line 8156
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 8161
         $$1198$i = $184; //@line 8161
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 8166
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 8169
        $$3$i = $$1196$i; //@line 8170
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 8175
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 8178
       }
       $169 = $167 + 12 | 0; //@line 8181
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 8185
       }
       $172 = $164 + 8 | 0; //@line 8188
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 8192
        HEAP32[$172 >> 2] = $167; //@line 8193
        $$3$i = $164; //@line 8194
        break;
       } else {
        _abort(); //@line 8197
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 8206
       $191 = 23372 + ($190 << 2) | 0; //@line 8207
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 8212
         if (!$$3$i) {
          HEAP32[5768] = $108 & ~(1 << $190); //@line 8218
          break L73;
         }
        } else {
         if ((HEAP32[5771] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 8225
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 8233
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5771] | 0; //@line 8243
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 8246
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 8250
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 8252
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 8258
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 8262
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 8264
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 8270
       if ($214 | 0) {
        if ((HEAP32[5771] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 8276
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 8280
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 8282
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 8290
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 8293
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 8295
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 8298
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 8302
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 8305
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 8307
      if ($37 | 0) {
       $234 = HEAP32[5772] | 0; //@line 8310
       $235 = $37 >>> 3; //@line 8311
       $237 = 23108 + ($235 << 1 << 2) | 0; //@line 8313
       $238 = 1 << $235; //@line 8314
       if (!($8 & $238)) {
        HEAP32[5767] = $8 | $238; //@line 8319
        $$0189$i = $237; //@line 8321
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 8321
       } else {
        $242 = $237 + 8 | 0; //@line 8323
        $243 = HEAP32[$242 >> 2] | 0; //@line 8324
        if ((HEAP32[5771] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 8328
        } else {
         $$0189$i = $243; //@line 8331
         $$pre$phi$iZ2D = $242; //@line 8331
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 8334
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 8336
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 8338
       HEAP32[$234 + 12 >> 2] = $237; //@line 8340
      }
      HEAP32[5769] = $$0193$lcssa$i; //@line 8342
      HEAP32[5772] = $159; //@line 8343
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 8346
     STACKTOP = sp; //@line 8347
     return $$0 | 0; //@line 8347
    }
   } else {
    $$0197 = $6; //@line 8350
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 8355
   } else {
    $251 = $0 + 11 | 0; //@line 8357
    $252 = $251 & -8; //@line 8358
    $253 = HEAP32[5768] | 0; //@line 8359
    if (!$253) {
     $$0197 = $252; //@line 8362
    } else {
     $255 = 0 - $252 | 0; //@line 8364
     $256 = $251 >>> 8; //@line 8365
     if (!$256) {
      $$0358$i = 0; //@line 8368
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 8372
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 8376
       $262 = $256 << $261; //@line 8377
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 8380
       $267 = $262 << $265; //@line 8382
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 8385
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 8390
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 8396
      }
     }
     $282 = HEAP32[23372 + ($$0358$i << 2) >> 2] | 0; //@line 8400
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 8404
       $$3$i203 = 0; //@line 8404
       $$3350$i = $255; //@line 8404
       label = 81; //@line 8405
      } else {
       $$0342$i = 0; //@line 8412
       $$0347$i = $255; //@line 8412
       $$0353$i = $282; //@line 8412
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 8412
       $$0362$i = 0; //@line 8412
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 8417
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 8422
          $$435113$i = 0; //@line 8422
          $$435712$i = $$0353$i; //@line 8422
          label = 85; //@line 8423
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 8426
          $$1348$i = $292; //@line 8426
         }
        } else {
         $$1343$i = $$0342$i; //@line 8429
         $$1348$i = $$0347$i; //@line 8429
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 8432
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 8435
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 8439
        $302 = ($$0353$i | 0) == 0; //@line 8440
        if ($302) {
         $$2355$i = $$1363$i; //@line 8445
         $$3$i203 = $$1343$i; //@line 8445
         $$3350$i = $$1348$i; //@line 8445
         label = 81; //@line 8446
         break;
        } else {
         $$0342$i = $$1343$i; //@line 8449
         $$0347$i = $$1348$i; //@line 8449
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 8449
         $$0362$i = $$1363$i; //@line 8449
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 8459
       $309 = $253 & ($306 | 0 - $306); //@line 8462
       if (!$309) {
        $$0197 = $252; //@line 8465
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 8470
       $315 = $313 >>> 12 & 16; //@line 8472
       $316 = $313 >>> $315; //@line 8473
       $318 = $316 >>> 5 & 8; //@line 8475
       $320 = $316 >>> $318; //@line 8477
       $322 = $320 >>> 2 & 4; //@line 8479
       $324 = $320 >>> $322; //@line 8481
       $326 = $324 >>> 1 & 2; //@line 8483
       $328 = $324 >>> $326; //@line 8485
       $330 = $328 >>> 1 & 1; //@line 8487
       $$4$ph$i = 0; //@line 8493
       $$4357$ph$i = HEAP32[23372 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 8493
      } else {
       $$4$ph$i = $$3$i203; //@line 8495
       $$4357$ph$i = $$2355$i; //@line 8495
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 8499
       $$4351$lcssa$i = $$3350$i; //@line 8499
      } else {
       $$414$i = $$4$ph$i; //@line 8501
       $$435113$i = $$3350$i; //@line 8501
       $$435712$i = $$4357$ph$i; //@line 8501
       label = 85; //@line 8502
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 8507
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 8511
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 8512
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 8513
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 8514
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8520
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 8523
        $$4351$lcssa$i = $$$4351$i; //@line 8523
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 8526
        $$435113$i = $$$4351$i; //@line 8526
        label = 85; //@line 8527
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 8533
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5769] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5771] | 0; //@line 8539
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 8542
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 8545
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 8548
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 8552
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 8554
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 8558
         $371 = HEAP32[$370 >> 2] | 0; //@line 8559
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 8562
          $374 = HEAP32[$373 >> 2] | 0; //@line 8563
          if (!$374) {
           $$3372$i = 0; //@line 8566
           break;
          } else {
           $$1370$i = $374; //@line 8569
           $$1374$i = $373; //@line 8569
          }
         } else {
          $$1370$i = $371; //@line 8572
          $$1374$i = $370; //@line 8572
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 8575
          $377 = HEAP32[$376 >> 2] | 0; //@line 8576
          if ($377 | 0) {
           $$1370$i = $377; //@line 8579
           $$1374$i = $376; //@line 8579
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 8582
          $380 = HEAP32[$379 >> 2] | 0; //@line 8583
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 8588
           $$1374$i = $379; //@line 8588
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 8593
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 8596
          $$3372$i = $$1370$i; //@line 8597
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 8602
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 8605
         }
         $364 = $362 + 12 | 0; //@line 8608
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 8612
         }
         $367 = $359 + 8 | 0; //@line 8615
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 8619
          HEAP32[$367 >> 2] = $362; //@line 8620
          $$3372$i = $359; //@line 8621
          break;
         } else {
          _abort(); //@line 8624
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 8632
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 8635
         $386 = 23372 + ($385 << 2) | 0; //@line 8636
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 8641
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 8646
            HEAP32[5768] = $391; //@line 8647
            $475 = $391; //@line 8648
            break L164;
           }
          } else {
           if ((HEAP32[5771] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 8655
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 8663
            if (!$$3372$i) {
             $475 = $253; //@line 8666
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5771] | 0; //@line 8674
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 8677
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 8681
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 8683
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 8689
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 8693
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 8695
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 8701
         if (!$409) {
          $475 = $253; //@line 8704
         } else {
          if ((HEAP32[5771] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 8709
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 8713
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 8715
           $475 = $253; //@line 8716
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 8725
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 8728
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 8730
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 8733
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 8737
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 8740
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 8742
         $428 = $$4351$lcssa$i >>> 3; //@line 8743
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 23108 + ($428 << 1 << 2) | 0; //@line 8747
          $432 = HEAP32[5767] | 0; //@line 8748
          $433 = 1 << $428; //@line 8749
          if (!($432 & $433)) {
           HEAP32[5767] = $432 | $433; //@line 8754
           $$0368$i = $431; //@line 8756
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 8756
          } else {
           $437 = $431 + 8 | 0; //@line 8758
           $438 = HEAP32[$437 >> 2] | 0; //@line 8759
           if ((HEAP32[5771] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 8763
           } else {
            $$0368$i = $438; //@line 8766
            $$pre$phi$i211Z2D = $437; //@line 8766
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 8769
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 8771
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 8773
          HEAP32[$354 + 12 >> 2] = $431; //@line 8775
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 8778
         if (!$444) {
          $$0361$i = 0; //@line 8781
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 8785
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 8789
           $450 = $444 << $449; //@line 8790
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 8793
           $455 = $450 << $453; //@line 8795
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 8798
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 8803
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 8809
          }
         }
         $469 = 23372 + ($$0361$i << 2) | 0; //@line 8812
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 8814
         $471 = $354 + 16 | 0; //@line 8815
         HEAP32[$471 + 4 >> 2] = 0; //@line 8817
         HEAP32[$471 >> 2] = 0; //@line 8818
         $473 = 1 << $$0361$i; //@line 8819
         if (!($475 & $473)) {
          HEAP32[5768] = $475 | $473; //@line 8824
          HEAP32[$469 >> 2] = $354; //@line 8825
          HEAP32[$354 + 24 >> 2] = $469; //@line 8827
          HEAP32[$354 + 12 >> 2] = $354; //@line 8829
          HEAP32[$354 + 8 >> 2] = $354; //@line 8831
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 8840
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 8840
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 8847
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 8851
          $494 = HEAP32[$492 >> 2] | 0; //@line 8853
          if (!$494) {
           label = 136; //@line 8856
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 8859
           $$0345$i = $494; //@line 8859
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5771] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 8866
          } else {
           HEAP32[$492 >> 2] = $354; //@line 8869
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 8871
           HEAP32[$354 + 12 >> 2] = $354; //@line 8873
           HEAP32[$354 + 8 >> 2] = $354; //@line 8875
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 8880
          $502 = HEAP32[$501 >> 2] | 0; //@line 8881
          $503 = HEAP32[5771] | 0; //@line 8882
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 8888
           HEAP32[$501 >> 2] = $354; //@line 8889
           HEAP32[$354 + 8 >> 2] = $502; //@line 8891
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 8893
           HEAP32[$354 + 24 >> 2] = 0; //@line 8895
           break;
          } else {
           _abort(); //@line 8898
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 8905
       STACKTOP = sp; //@line 8906
       return $$0 | 0; //@line 8906
      } else {
       $$0197 = $252; //@line 8908
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5769] | 0; //@line 8915
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 8918
  $515 = HEAP32[5772] | 0; //@line 8919
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 8922
   HEAP32[5772] = $517; //@line 8923
   HEAP32[5769] = $514; //@line 8924
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 8927
   HEAP32[$515 + $512 >> 2] = $514; //@line 8929
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 8932
  } else {
   HEAP32[5769] = 0; //@line 8934
   HEAP32[5772] = 0; //@line 8935
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 8938
   $526 = $515 + $512 + 4 | 0; //@line 8940
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 8943
  }
  $$0 = $515 + 8 | 0; //@line 8946
  STACKTOP = sp; //@line 8947
  return $$0 | 0; //@line 8947
 }
 $530 = HEAP32[5770] | 0; //@line 8949
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 8952
  HEAP32[5770] = $532; //@line 8953
  $533 = HEAP32[5773] | 0; //@line 8954
  $534 = $533 + $$0197 | 0; //@line 8955
  HEAP32[5773] = $534; //@line 8956
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 8959
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 8962
  $$0 = $533 + 8 | 0; //@line 8964
  STACKTOP = sp; //@line 8965
  return $$0 | 0; //@line 8965
 }
 if (!(HEAP32[5885] | 0)) {
  HEAP32[5887] = 4096; //@line 8970
  HEAP32[5886] = 4096; //@line 8971
  HEAP32[5888] = -1; //@line 8972
  HEAP32[5889] = -1; //@line 8973
  HEAP32[5890] = 0; //@line 8974
  HEAP32[5878] = 0; //@line 8975
  HEAP32[5885] = $1 & -16 ^ 1431655768; //@line 8979
  $548 = 4096; //@line 8980
 } else {
  $548 = HEAP32[5887] | 0; //@line 8983
 }
 $545 = $$0197 + 48 | 0; //@line 8985
 $546 = $$0197 + 47 | 0; //@line 8986
 $547 = $548 + $546 | 0; //@line 8987
 $549 = 0 - $548 | 0; //@line 8988
 $550 = $547 & $549; //@line 8989
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 8992
  STACKTOP = sp; //@line 8993
  return $$0 | 0; //@line 8993
 }
 $552 = HEAP32[5877] | 0; //@line 8995
 if ($552 | 0) {
  $554 = HEAP32[5875] | 0; //@line 8998
  $555 = $554 + $550 | 0; //@line 8999
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 9004
   STACKTOP = sp; //@line 9005
   return $$0 | 0; //@line 9005
  }
 }
 L244 : do {
  if (!(HEAP32[5878] & 4)) {
   $561 = HEAP32[5773] | 0; //@line 9013
   L246 : do {
    if (!$561) {
     label = 163; //@line 9017
    } else {
     $$0$i$i = 23516; //@line 9019
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 9021
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 9024
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 9033
      if (!$570) {
       label = 163; //@line 9036
       break L246;
      } else {
       $$0$i$i = $570; //@line 9039
      }
     }
     $595 = $547 - $530 & $549; //@line 9043
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 9046
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 9054
       } else {
        $$723947$i = $595; //@line 9056
        $$748$i = $597; //@line 9056
        label = 180; //@line 9057
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 9061
       $$2253$ph$i = $595; //@line 9061
       label = 171; //@line 9062
      }
     } else {
      $$2234243136$i = 0; //@line 9065
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 9071
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 9074
     } else {
      $574 = $572; //@line 9076
      $575 = HEAP32[5886] | 0; //@line 9077
      $576 = $575 + -1 | 0; //@line 9078
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 9086
      $584 = HEAP32[5875] | 0; //@line 9087
      $585 = $$$i + $584 | 0; //@line 9088
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[5877] | 0; //@line 9093
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 9100
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 9104
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 9107
        $$748$i = $572; //@line 9107
        label = 180; //@line 9108
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 9111
        $$2253$ph$i = $$$i; //@line 9111
        label = 171; //@line 9112
       }
      } else {
       $$2234243136$i = 0; //@line 9115
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 9122
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 9131
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 9134
       $$748$i = $$2247$ph$i; //@line 9134
       label = 180; //@line 9135
       break L244;
      }
     }
     $607 = HEAP32[5887] | 0; //@line 9139
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 9143
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 9146
      $$748$i = $$2247$ph$i; //@line 9146
      label = 180; //@line 9147
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 9153
      $$2234243136$i = 0; //@line 9154
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 9158
      $$748$i = $$2247$ph$i; //@line 9158
      label = 180; //@line 9159
      break L244;
     }
    }
   } while (0);
   HEAP32[5878] = HEAP32[5878] | 4; //@line 9166
   $$4236$i = $$2234243136$i; //@line 9167
   label = 178; //@line 9168
  } else {
   $$4236$i = 0; //@line 9170
   label = 178; //@line 9171
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 9177
   $621 = _sbrk(0) | 0; //@line 9178
   $627 = $621 - $620 | 0; //@line 9186
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 9188
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 9196
    $$748$i = $620; //@line 9196
    label = 180; //@line 9197
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[5875] | 0) + $$723947$i | 0; //@line 9203
  HEAP32[5875] = $633; //@line 9204
  if ($633 >>> 0 > (HEAP32[5876] | 0) >>> 0) {
   HEAP32[5876] = $633; //@line 9208
  }
  $636 = HEAP32[5773] | 0; //@line 9210
  do {
   if (!$636) {
    $638 = HEAP32[5771] | 0; //@line 9214
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5771] = $$748$i; //@line 9219
    }
    HEAP32[5879] = $$748$i; //@line 9221
    HEAP32[5880] = $$723947$i; //@line 9222
    HEAP32[5882] = 0; //@line 9223
    HEAP32[5776] = HEAP32[5885]; //@line 9225
    HEAP32[5775] = -1; //@line 9226
    HEAP32[5780] = 23108; //@line 9227
    HEAP32[5779] = 23108; //@line 9228
    HEAP32[5782] = 23116; //@line 9229
    HEAP32[5781] = 23116; //@line 9230
    HEAP32[5784] = 23124; //@line 9231
    HEAP32[5783] = 23124; //@line 9232
    HEAP32[5786] = 23132; //@line 9233
    HEAP32[5785] = 23132; //@line 9234
    HEAP32[5788] = 23140; //@line 9235
    HEAP32[5787] = 23140; //@line 9236
    HEAP32[5790] = 23148; //@line 9237
    HEAP32[5789] = 23148; //@line 9238
    HEAP32[5792] = 23156; //@line 9239
    HEAP32[5791] = 23156; //@line 9240
    HEAP32[5794] = 23164; //@line 9241
    HEAP32[5793] = 23164; //@line 9242
    HEAP32[5796] = 23172; //@line 9243
    HEAP32[5795] = 23172; //@line 9244
    HEAP32[5798] = 23180; //@line 9245
    HEAP32[5797] = 23180; //@line 9246
    HEAP32[5800] = 23188; //@line 9247
    HEAP32[5799] = 23188; //@line 9248
    HEAP32[5802] = 23196; //@line 9249
    HEAP32[5801] = 23196; //@line 9250
    HEAP32[5804] = 23204; //@line 9251
    HEAP32[5803] = 23204; //@line 9252
    HEAP32[5806] = 23212; //@line 9253
    HEAP32[5805] = 23212; //@line 9254
    HEAP32[5808] = 23220; //@line 9255
    HEAP32[5807] = 23220; //@line 9256
    HEAP32[5810] = 23228; //@line 9257
    HEAP32[5809] = 23228; //@line 9258
    HEAP32[5812] = 23236; //@line 9259
    HEAP32[5811] = 23236; //@line 9260
    HEAP32[5814] = 23244; //@line 9261
    HEAP32[5813] = 23244; //@line 9262
    HEAP32[5816] = 23252; //@line 9263
    HEAP32[5815] = 23252; //@line 9264
    HEAP32[5818] = 23260; //@line 9265
    HEAP32[5817] = 23260; //@line 9266
    HEAP32[5820] = 23268; //@line 9267
    HEAP32[5819] = 23268; //@line 9268
    HEAP32[5822] = 23276; //@line 9269
    HEAP32[5821] = 23276; //@line 9270
    HEAP32[5824] = 23284; //@line 9271
    HEAP32[5823] = 23284; //@line 9272
    HEAP32[5826] = 23292; //@line 9273
    HEAP32[5825] = 23292; //@line 9274
    HEAP32[5828] = 23300; //@line 9275
    HEAP32[5827] = 23300; //@line 9276
    HEAP32[5830] = 23308; //@line 9277
    HEAP32[5829] = 23308; //@line 9278
    HEAP32[5832] = 23316; //@line 9279
    HEAP32[5831] = 23316; //@line 9280
    HEAP32[5834] = 23324; //@line 9281
    HEAP32[5833] = 23324; //@line 9282
    HEAP32[5836] = 23332; //@line 9283
    HEAP32[5835] = 23332; //@line 9284
    HEAP32[5838] = 23340; //@line 9285
    HEAP32[5837] = 23340; //@line 9286
    HEAP32[5840] = 23348; //@line 9287
    HEAP32[5839] = 23348; //@line 9288
    HEAP32[5842] = 23356; //@line 9289
    HEAP32[5841] = 23356; //@line 9290
    $642 = $$723947$i + -40 | 0; //@line 9291
    $644 = $$748$i + 8 | 0; //@line 9293
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 9298
    $650 = $$748$i + $649 | 0; //@line 9299
    $651 = $642 - $649 | 0; //@line 9300
    HEAP32[5773] = $650; //@line 9301
    HEAP32[5770] = $651; //@line 9302
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 9305
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 9308
    HEAP32[5774] = HEAP32[5889]; //@line 9310
   } else {
    $$024367$i = 23516; //@line 9312
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 9314
     $658 = $$024367$i + 4 | 0; //@line 9315
     $659 = HEAP32[$658 >> 2] | 0; //@line 9316
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 9320
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 9324
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 9329
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 9343
       $673 = (HEAP32[5770] | 0) + $$723947$i | 0; //@line 9345
       $675 = $636 + 8 | 0; //@line 9347
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 9352
       $681 = $636 + $680 | 0; //@line 9353
       $682 = $673 - $680 | 0; //@line 9354
       HEAP32[5773] = $681; //@line 9355
       HEAP32[5770] = $682; //@line 9356
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 9359
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 9362
       HEAP32[5774] = HEAP32[5889]; //@line 9364
       break;
      }
     }
    }
    $688 = HEAP32[5771] | 0; //@line 9369
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5771] = $$748$i; //@line 9372
     $753 = $$748$i; //@line 9373
    } else {
     $753 = $688; //@line 9375
    }
    $690 = $$748$i + $$723947$i | 0; //@line 9377
    $$124466$i = 23516; //@line 9378
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 9383
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 9387
     if (!$694) {
      $$0$i$i$i = 23516; //@line 9390
      break;
     } else {
      $$124466$i = $694; //@line 9393
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 9402
      $700 = $$124466$i + 4 | 0; //@line 9403
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 9406
      $704 = $$748$i + 8 | 0; //@line 9408
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 9414
      $712 = $690 + 8 | 0; //@line 9416
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 9422
      $722 = $710 + $$0197 | 0; //@line 9426
      $723 = $718 - $710 - $$0197 | 0; //@line 9427
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 9430
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5770] | 0) + $723 | 0; //@line 9435
        HEAP32[5770] = $728; //@line 9436
        HEAP32[5773] = $722; //@line 9437
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 9440
       } else {
        if ((HEAP32[5772] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5769] | 0) + $723 | 0; //@line 9446
         HEAP32[5769] = $734; //@line 9447
         HEAP32[5772] = $722; //@line 9448
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 9451
         HEAP32[$722 + $734 >> 2] = $734; //@line 9453
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 9457
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 9461
         $743 = $739 >>> 3; //@line 9462
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 9467
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 9469
           $750 = 23108 + ($743 << 1 << 2) | 0; //@line 9471
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 9477
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 9486
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5767] = HEAP32[5767] & ~(1 << $743); //@line 9496
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 9503
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 9507
             }
             $764 = $748 + 8 | 0; //@line 9510
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 9514
              break;
             }
             _abort(); //@line 9517
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 9522
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 9523
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 9526
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 9528
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 9532
             $783 = $782 + 4 | 0; //@line 9533
             $784 = HEAP32[$783 >> 2] | 0; //@line 9534
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 9537
              if (!$786) {
               $$3$i$i = 0; //@line 9540
               break;
              } else {
               $$1291$i$i = $786; //@line 9543
               $$1293$i$i = $782; //@line 9543
              }
             } else {
              $$1291$i$i = $784; //@line 9546
              $$1293$i$i = $783; //@line 9546
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 9549
              $789 = HEAP32[$788 >> 2] | 0; //@line 9550
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 9553
               $$1293$i$i = $788; //@line 9553
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 9556
              $792 = HEAP32[$791 >> 2] | 0; //@line 9557
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 9562
               $$1293$i$i = $791; //@line 9562
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 9567
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 9570
              $$3$i$i = $$1291$i$i; //@line 9571
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 9576
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 9579
             }
             $776 = $774 + 12 | 0; //@line 9582
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 9586
             }
             $779 = $771 + 8 | 0; //@line 9589
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 9593
              HEAP32[$779 >> 2] = $774; //@line 9594
              $$3$i$i = $771; //@line 9595
              break;
             } else {
              _abort(); //@line 9598
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 9608
           $798 = 23372 + ($797 << 2) | 0; //@line 9609
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 9614
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5768] = HEAP32[5768] & ~(1 << $797); //@line 9623
             break L311;
            } else {
             if ((HEAP32[5771] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 9629
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 9637
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5771] | 0; //@line 9647
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 9650
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 9654
           $815 = $718 + 16 | 0; //@line 9655
           $816 = HEAP32[$815 >> 2] | 0; //@line 9656
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 9662
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 9666
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 9668
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 9674
           if (!$822) {
            break;
           }
           if ((HEAP32[5771] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 9682
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 9686
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 9688
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 9695
         $$0287$i$i = $742 + $723 | 0; //@line 9695
        } else {
         $$0$i17$i = $718; //@line 9697
         $$0287$i$i = $723; //@line 9697
        }
        $830 = $$0$i17$i + 4 | 0; //@line 9699
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 9702
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 9705
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 9707
        $836 = $$0287$i$i >>> 3; //@line 9708
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 23108 + ($836 << 1 << 2) | 0; //@line 9712
         $840 = HEAP32[5767] | 0; //@line 9713
         $841 = 1 << $836; //@line 9714
         do {
          if (!($840 & $841)) {
           HEAP32[5767] = $840 | $841; //@line 9720
           $$0295$i$i = $839; //@line 9722
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 9722
          } else {
           $845 = $839 + 8 | 0; //@line 9724
           $846 = HEAP32[$845 >> 2] | 0; //@line 9725
           if ((HEAP32[5771] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 9729
            $$pre$phi$i19$iZ2D = $845; //@line 9729
            break;
           }
           _abort(); //@line 9732
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 9736
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 9738
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 9740
         HEAP32[$722 + 12 >> 2] = $839; //@line 9742
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 9745
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 9749
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 9753
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 9758
          $858 = $852 << $857; //@line 9759
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 9762
          $863 = $858 << $861; //@line 9764
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 9767
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 9772
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 9778
         }
        } while (0);
        $877 = 23372 + ($$0296$i$i << 2) | 0; //@line 9781
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 9783
        $879 = $722 + 16 | 0; //@line 9784
        HEAP32[$879 + 4 >> 2] = 0; //@line 9786
        HEAP32[$879 >> 2] = 0; //@line 9787
        $881 = HEAP32[5768] | 0; //@line 9788
        $882 = 1 << $$0296$i$i; //@line 9789
        if (!($881 & $882)) {
         HEAP32[5768] = $881 | $882; //@line 9794
         HEAP32[$877 >> 2] = $722; //@line 9795
         HEAP32[$722 + 24 >> 2] = $877; //@line 9797
         HEAP32[$722 + 12 >> 2] = $722; //@line 9799
         HEAP32[$722 + 8 >> 2] = $722; //@line 9801
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 9810
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 9810
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 9817
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 9821
         $902 = HEAP32[$900 >> 2] | 0; //@line 9823
         if (!$902) {
          label = 260; //@line 9826
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 9829
          $$0289$i$i = $902; //@line 9829
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5771] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 9836
         } else {
          HEAP32[$900 >> 2] = $722; //@line 9839
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 9841
          HEAP32[$722 + 12 >> 2] = $722; //@line 9843
          HEAP32[$722 + 8 >> 2] = $722; //@line 9845
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 9850
         $910 = HEAP32[$909 >> 2] | 0; //@line 9851
         $911 = HEAP32[5771] | 0; //@line 9852
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 9858
          HEAP32[$909 >> 2] = $722; //@line 9859
          HEAP32[$722 + 8 >> 2] = $910; //@line 9861
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 9863
          HEAP32[$722 + 24 >> 2] = 0; //@line 9865
          break;
         } else {
          _abort(); //@line 9868
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 9875
      STACKTOP = sp; //@line 9876
      return $$0 | 0; //@line 9876
     } else {
      $$0$i$i$i = 23516; //@line 9878
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 9882
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 9887
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 9895
    }
    $927 = $923 + -47 | 0; //@line 9897
    $929 = $927 + 8 | 0; //@line 9899
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 9905
    $936 = $636 + 16 | 0; //@line 9906
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 9908
    $939 = $938 + 8 | 0; //@line 9909
    $940 = $938 + 24 | 0; //@line 9910
    $941 = $$723947$i + -40 | 0; //@line 9911
    $943 = $$748$i + 8 | 0; //@line 9913
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 9918
    $949 = $$748$i + $948 | 0; //@line 9919
    $950 = $941 - $948 | 0; //@line 9920
    HEAP32[5773] = $949; //@line 9921
    HEAP32[5770] = $950; //@line 9922
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 9925
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 9928
    HEAP32[5774] = HEAP32[5889]; //@line 9930
    $956 = $938 + 4 | 0; //@line 9931
    HEAP32[$956 >> 2] = 27; //@line 9932
    HEAP32[$939 >> 2] = HEAP32[5879]; //@line 9933
    HEAP32[$939 + 4 >> 2] = HEAP32[5880]; //@line 9933
    HEAP32[$939 + 8 >> 2] = HEAP32[5881]; //@line 9933
    HEAP32[$939 + 12 >> 2] = HEAP32[5882]; //@line 9933
    HEAP32[5879] = $$748$i; //@line 9934
    HEAP32[5880] = $$723947$i; //@line 9935
    HEAP32[5882] = 0; //@line 9936
    HEAP32[5881] = $939; //@line 9937
    $958 = $940; //@line 9938
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 9940
     HEAP32[$958 >> 2] = 7; //@line 9941
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 9954
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 9957
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 9960
     HEAP32[$938 >> 2] = $964; //@line 9961
     $969 = $964 >>> 3; //@line 9962
     if ($964 >>> 0 < 256) {
      $972 = 23108 + ($969 << 1 << 2) | 0; //@line 9966
      $973 = HEAP32[5767] | 0; //@line 9967
      $974 = 1 << $969; //@line 9968
      if (!($973 & $974)) {
       HEAP32[5767] = $973 | $974; //@line 9973
       $$0211$i$i = $972; //@line 9975
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 9975
      } else {
       $978 = $972 + 8 | 0; //@line 9977
       $979 = HEAP32[$978 >> 2] | 0; //@line 9978
       if ((HEAP32[5771] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 9982
       } else {
        $$0211$i$i = $979; //@line 9985
        $$pre$phi$i$iZ2D = $978; //@line 9985
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 9988
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 9990
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 9992
      HEAP32[$636 + 12 >> 2] = $972; //@line 9994
      break;
     }
     $985 = $964 >>> 8; //@line 9997
     if (!$985) {
      $$0212$i$i = 0; //@line 10000
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 10004
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 10008
       $991 = $985 << $990; //@line 10009
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 10012
       $996 = $991 << $994; //@line 10014
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 10017
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 10022
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 10028
      }
     }
     $1010 = 23372 + ($$0212$i$i << 2) | 0; //@line 10031
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 10033
     HEAP32[$636 + 20 >> 2] = 0; //@line 10035
     HEAP32[$936 >> 2] = 0; //@line 10036
     $1013 = HEAP32[5768] | 0; //@line 10037
     $1014 = 1 << $$0212$i$i; //@line 10038
     if (!($1013 & $1014)) {
      HEAP32[5768] = $1013 | $1014; //@line 10043
      HEAP32[$1010 >> 2] = $636; //@line 10044
      HEAP32[$636 + 24 >> 2] = $1010; //@line 10046
      HEAP32[$636 + 12 >> 2] = $636; //@line 10048
      HEAP32[$636 + 8 >> 2] = $636; //@line 10050
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 10059
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 10059
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 10066
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 10070
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 10072
      if (!$1034) {
       label = 286; //@line 10075
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 10078
       $$0207$i$i = $1034; //@line 10078
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5771] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 10085
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 10088
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 10090
       HEAP32[$636 + 12 >> 2] = $636; //@line 10092
       HEAP32[$636 + 8 >> 2] = $636; //@line 10094
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 10099
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 10100
      $1043 = HEAP32[5771] | 0; //@line 10101
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 10107
       HEAP32[$1041 >> 2] = $636; //@line 10108
       HEAP32[$636 + 8 >> 2] = $1042; //@line 10110
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 10112
       HEAP32[$636 + 24 >> 2] = 0; //@line 10114
       break;
      } else {
       _abort(); //@line 10117
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5770] | 0; //@line 10124
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 10127
   HEAP32[5770] = $1054; //@line 10128
   $1055 = HEAP32[5773] | 0; //@line 10129
   $1056 = $1055 + $$0197 | 0; //@line 10130
   HEAP32[5773] = $1056; //@line 10131
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 10134
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 10137
   $$0 = $1055 + 8 | 0; //@line 10139
   STACKTOP = sp; //@line 10140
   return $$0 | 0; //@line 10140
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 10144
 $$0 = 0; //@line 10145
 STACKTOP = sp; //@line 10146
 return $$0 | 0; //@line 10146
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i116 = 0, $$0$i118 = 0, $$0107$be = 0, $$0107$lcssa = 0, $$0107131 = 0, $$0109129 = 0, $$0111 = 0, $$0132 = 0, $$1$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $137 = 0, $140 = 0, $145 = 0, $146 = 0, $15 = 0, $152 = 0, $156 = 0, $159 = 0, $16 = 0, $166 = 0, $167 = 0, $17 = 0, $173 = 0, $18 = 0, $19 = 0, $192 = 0, $20 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $270 = 0, $271 = 0, $279 = 0, $28 = 0, $281 = 0, $282 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $344 = 0, $345 = 0, $35 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $380 = 0, $386 = 0, $387 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $449 = 0, $45 = 0, $450 = 0, $459 = 0, $46 = 0, $463 = 0, $467 = 0, $472 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $483 = 0, $485 = 0, $488 = 0, $489 = 0, $559 = 0, $560 = 0, $567 = 0, $580 = 0, $587 = 0, $59 = 0, $590 = 0, $591 = 0, $60 = 0, $653 = 0, $654 = 0, $661 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16588
 STACKTOP = STACKTOP + 16 | 0; //@line 16589
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16589
 $8 = sp; //@line 16590
 $9 = sp + 15 | 0; //@line 16591
 $10 = sp + 14 | 0; //@line 16592
 $11 = sp + 13 | 0; //@line 16593
 $12 = sp + 12 | 0; //@line 16594
 $13 = $3 & 255; //@line 16595
 if (($2 & 255) >= ($3 & 255)) {
  $$0107$lcssa = 0; //@line 16598
  STACKTOP = sp; //@line 16599
  return $$0107$lcssa | 0; //@line 16599
 }
 $15 = $5 + 8 | 0; //@line 16601
 $16 = $5 + 16 | 0; //@line 16602
 $17 = $5 + 17 | 0; //@line 16603
 $18 = $8 + 4 | 0; //@line 16604
 $19 = $6 + 60 | 0; //@line 16605
 $20 = $8 + 6 | 0; //@line 16606
 $21 = $6 + 44 | 0; //@line 16607
 $22 = $8 + 5 | 0; //@line 16608
 $23 = $6 + 1 | 0; //@line 16609
 $24 = $8 + 7 | 0; //@line 16610
 $25 = $8 + 8 | 0; //@line 16611
 $26 = $6 + 32 | 0; //@line 16612
 $27 = $8 + 9 | 0; //@line 16613
 $28 = $0 + 3 | 0; //@line 16614
 $29 = $0 + 2 | 0; //@line 16615
 $30 = $6 + 56 | 0; //@line 16616
 $31 = $6 + 58 | 0; //@line 16617
 $32 = $8 + 1 | 0; //@line 16618
 $33 = $8 + 4 | 0; //@line 16619
 $34 = $6 + 40 | 0; //@line 16620
 $35 = $6 + 36 | 0; //@line 16621
 $36 = $6 + 33 | 0; //@line 16622
 $37 = $0 + 1 | 0; //@line 16623
 $38 = $0 + 272 | 0; //@line 16624
 $39 = $4 & 63; //@line 16625
 $40 = $0 + 260 | 0; //@line 16626
 $41 = $8 + 4 | 0; //@line 16627
 $42 = $8 + 8 | 0; //@line 16628
 $43 = $6 + 16 | 0; //@line 16629
 $44 = $6 + 20 | 0; //@line 16630
 $45 = $6 + 45 | 0; //@line 16631
 $46 = $6 + 48 | 0; //@line 16632
 $$0107131 = 0; //@line 16633
 $$0132 = $2; //@line 16633
 L4 : while (1) {
  $48 = $$0132 + 1 << 24 >> 24; //@line 16636
  switch (HEAP8[$1 + ($$0132 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 16641
    HEAP8[$16 >> 0] = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 16646
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0132 + 2 & 255) >> 0] | 0; //@line 16651
    $$0$be = $$0132 + 3 << 24 >> 24; //@line 16652
    $$0107$be = $$0107131; //@line 16652
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 16656
    HEAP8[$10 >> 0] = 0; //@line 16657
    HEAP8[$11 >> 0] = 0; //@line 16658
    HEAP8[$12 >> 0] = 0; //@line 16659
    $59 = $48 & 255; //@line 16660
    $60 = $59 + -1 | 0; //@line 16661
    HEAP32[$8 >> 2] = $1 + $60; //@line 16663
    HEAP8[$18 >> 0] = $13 - $60; //@line 16666
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 16668
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 16670
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 16672
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 16674
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 16676
    $71 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 16679
    $AsyncCtx = _emscripten_alloc_async_context(236, sp) | 0; //@line 16680
    $72 = FUNCTION_TABLE_iiiiiii[$71 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 16681
    if (___async) {
     label = 6; //@line 16684
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16687
    if (($72 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 16692
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 16694
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 16696
    }
    $137 = HEAP8[$12 >> 0] | 0; //@line 16698
    if (($137 & 255) > 4) {
     $div = ($137 & 255) / 5 | 0; //@line 16701
     $140 = 128 - (HEAPU8[$28 >> 0] | 0) | 0; //@line 16705
     $$0109129 = 0; //@line 16706
     $146 = HEAP8[$29 >> 0] | 0; //@line 16706
     while (1) {
      $145 = $146 & 255; //@line 16708
      if (($140 - $145 | 0) > 1) {
       $152 = $146 + 2 << 24 >> 24; //@line 16715
       HEAP8[$0 + 4 + $145 >> 0] = 3; //@line 16717
       HEAP8[$29 >> 0] = $152; //@line 16718
       HEAP8[($146 + 1 & 255) + ($0 + 4) >> 0] = $72; //@line 16719
       HEAP8[$0 >> 0] = 1; //@line 16720
       $$0$i = 0; //@line 16721
       $661 = $152; //@line 16721
      } else {
       $$0$i = -1010; //@line 16723
       $661 = $146; //@line 16723
      }
      $$0109129 = $$0109129 + 1 << 24 >> 24; //@line 16725
      if (($$0109129 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 16730
       break;
      } else {
       $146 = $661; //@line 16728
      }
     }
    } else {
     $$1$lcssa = $$0107131; //@line 16735
    }
    $$0$be = $59 + 255 + ($137 & 255) & 255; //@line 16741
    $$0107$be = $$1$lcssa; //@line 16741
    break;
   }
  case 4:
   {
    $156 = $$0132 + 2 << 24 >> 24; //@line 16745
    $159 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 16748
    HEAP8[$30 >> 0] = $159; //@line 16749
    HEAP16[$31 >> 1] = 1 << ($159 & 255); //@line 16753
    $166 = HEAP8[$29 >> 0] | 0; //@line 16757
    $167 = $166 & 255; //@line 16758
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($167 | 0)) {
     HEAP8[$29 >> 0] = $166 + 1 << 24 >> 24; //@line 16763
     HEAP8[$0 + 4 + $167 >> 0] = 4; //@line 16764
     HEAP8[$0 >> 0] = 1; //@line 16765
     $$0$be = $156; //@line 16766
     $$0107$be = 0; //@line 16766
    } else {
     $$0$be = $156; //@line 16768
     $$0107$be = -1010; //@line 16768
    }
    break;
   }
  case 5:
   {
    $173 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 16775
    HEAP8[$32 >> 0] = ($173 & 255) >>> 4 & 7; //@line 16780
    HEAP8[$8 >> 0] = $173 & 15; //@line 16782
    $192 = $$0132 + 5 << 24 >> 24; //@line 16796
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0])) * 100; //@line 16804
    $202 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 16807
    $AsyncCtx3 = _emscripten_alloc_async_context(232, sp) | 0; //@line 16808
    $203 = FUNCTION_TABLE_iii[$202 & 31]($7, $8) | 0; //@line 16809
    if (___async) {
     label = 18; //@line 16812
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16815
    if (($203 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 16820
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 16822
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 16824
    }
    $270 = HEAP8[$29 >> 0] | 0; //@line 16829
    $271 = $270 & 255; //@line 16830
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $271 | 0) > 1) {
     HEAP8[$0 + 4 + $271 >> 0] = 5; //@line 16836
     HEAP8[$29 >> 0] = $270 + 2 << 24 >> 24; //@line 16838
     HEAP8[($270 + 1 & 255) + ($0 + 4) >> 0] = $203; //@line 16841
     HEAP8[$37 >> 0] = 1; //@line 16842
     HEAP8[$0 >> 0] = 1; //@line 16843
     $$0$i116 = 0; //@line 16844
    } else {
     $$0$i116 = -1010; //@line 16846
    }
    $$0$be = $192; //@line 16848
    $$0107$be = $$0$i116; //@line 16848
    break;
   }
  case 6:
   {
    $279 = HEAP32[$38 >> 2] | 0; //@line 16852
    if (!$279) {
     $$0111 = -1; //@line 16855
    } else {
     $281 = HEAP32[$279 >> 2] | 0; //@line 16857
     $AsyncCtx6 = _emscripten_alloc_async_context(232, sp) | 0; //@line 16858
     $282 = FUNCTION_TABLE_ii[$281 & 15]($40) | 0; //@line 16859
     if (___async) {
      label = 26; //@line 16862
      break L4;
     }
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 16865
     $$0111 = $282; //@line 16866
    }
    $344 = HEAP8[$29 >> 0] | 0; //@line 16871
    $345 = $344 & 255; //@line 16872
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $345 | 0) > 2) {
     HEAP8[$0 + 4 + $345 >> 0] = 6; //@line 16878
     HEAP8[($344 + 1 & 255) + ($0 + 4) >> 0] = $$0111; //@line 16882
     HEAP8[$29 >> 0] = $344 + 3 << 24 >> 24; //@line 16884
     HEAP8[($344 + 2 & 255) + ($0 + 4) >> 0] = $39; //@line 16887
     HEAP8[$0 >> 0] = 1; //@line 16888
     $$0$be = $48; //@line 16889
     $$0107$be = 0; //@line 16889
    } else {
     $$0$be = $48; //@line 16891
     $$0107$be = -1010; //@line 16891
    }
    break;
   }
  case 7:
   {
    $359 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 16899
    HEAP32[$8 >> 2] = (HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0])) * 100; //@line 16920
    HEAP32[$41 >> 2] = 0; //@line 16921
    $380 = $$0132 + 6 << 24 >> 24; //@line 16922
    HEAP8[$42 >> 0] = HEAP8[$1 + ($$0132 + 5 & 255) >> 0] | 0; //@line 16926
    $386 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 16929
    $AsyncCtx10 = _emscripten_alloc_async_context(232, sp) | 0; //@line 16930
    $387 = FUNCTION_TABLE_iiii[$386 & 31]($7, $359, $8) | 0; //@line 16931
    if (___async) {
     label = 31; //@line 16934
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 16937
    $449 = HEAP8[$29 >> 0] | 0; //@line 16941
    $450 = $449 & 255; //@line 16942
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $450 | 0) > 1) {
     HEAP8[$0 + 4 + $450 >> 0] = 7; //@line 16951
     HEAP8[$29 >> 0] = $449 + 2 << 24 >> 24; //@line 16952
     HEAP8[($449 + 1 & 255) + ($0 + 4) >> 0] = $387; //@line 16953
     HEAP8[$0 >> 0] = 1; //@line 16954
     $$0$i118 = 0; //@line 16955
    } else {
     $$0$i118 = -1010; //@line 16957
    }
    $$0$be = $380; //@line 16959
    $$0107$be = $$0$i118; //@line 16959
    break;
   }
  case 8:
   {
    $459 = $$0132 + 2 << 24 >> 24; //@line 16963
    $463 = HEAP8[$1 + ($48 & 255) >> 0] & 15; //@line 16967
    $467 = ($463 + ($463 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 16972
    HEAP32[$43 >> 2] = $467; //@line 16973
    HEAP32[$44 >> 2] = $467 + 1e3; //@line 16975
    $472 = HEAP8[$29 >> 0] | 0; //@line 16979
    $473 = $472 & 255; //@line 16980
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($473 | 0)) {
     HEAP8[$29 >> 0] = $472 + 1 << 24 >> 24; //@line 16985
     HEAP8[$0 + 4 + $473 >> 0] = 8; //@line 16986
     HEAP8[$37 >> 0] = 1; //@line 16987
     HEAP8[$0 >> 0] = 1; //@line 16988
     $$0$be = $459; //@line 16989
     $$0107$be = 0; //@line 16989
    } else {
     $$0$be = $459; //@line 16991
     $$0107$be = -1010; //@line 16991
    }
    break;
   }
  case 9:
   {
    $477 = $$0132 + 2 << 24 >> 24; //@line 16996
    $481 = HEAPU8[$1 + ($48 & 255) >> 0] | 0; //@line 17000
    $483 = $481 >>> 5 & 1; //@line 17003
    $485 = $481 >>> 4 & 1; //@line 17006
    $488 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 17009
    $AsyncCtx14 = _emscripten_alloc_async_context(248, sp) | 0; //@line 17010
    $489 = FUNCTION_TABLE_iiii[$488 & 31]($7, $485, $483) | 0; //@line 17011
    if (___async) {
     label = 39; //@line 17014
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 17017
    if ($489) {
     HEAP8[$21 >> 0] = $485; //@line 17020
     HEAP8[$45 >> 0] = $483; //@line 17021
     HEAPF32[$46 >> 2] = +(HEAPU8[13528 + ($481 & 15) >> 0] | 0); //@line 17025
     $559 = HEAP8[$29 >> 0] | 0; //@line 17029
     $560 = $559 & 255; //@line 17030
     if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($560 | 0)) {
      HEAP8[$29 >> 0] = $559 + 1 << 24 >> 24; //@line 17035
      HEAP8[$0 + 4 + $560 >> 0] = 9; //@line 17036
      HEAP8[$0 >> 0] = 1; //@line 17037
      $$0$be = $477; //@line 17038
      $$0107$be = 0; //@line 17038
     } else {
      $$0$be = $477; //@line 17040
      $$0107$be = -1010; //@line 17040
     }
    } else {
     $$0$be = $477; //@line 17043
     $$0107$be = $$0107131; //@line 17043
    }
    break;
   }
  case 10:
   {
    $567 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17051
    $580 = $$0132 + 5 << 24 >> 24; //@line 17064
    $587 = (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0] | HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16) * 100 | 0; //@line 17071
    $590 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 17074
    $AsyncCtx18 = _emscripten_alloc_async_context(232, sp) | 0; //@line 17075
    $591 = FUNCTION_TABLE_iiii[$590 & 31]($7, $567, $587) | 0; //@line 17076
    if (___async) {
     label = 44; //@line 17079
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx18 | 0); //@line 17082
    $653 = HEAP8[$29 >> 0] | 0; //@line 17086
    $654 = $653 & 255; //@line 17087
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($654 | 0)) {
     HEAP8[$0 + 4 + $654 >> 0] = 10; //@line 17092
     HEAP8[$29 >> 0] = $653 + 2 << 24 >> 24; //@line 17094
     HEAP8[($653 + 1 & 255) + ($0 + 4) >> 0] = $591; //@line 17097
     HEAP8[$37 >> 0] = 1; //@line 17098
     HEAP8[$0 >> 0] = 1; //@line 17099
     $$0$be = $580; //@line 17100
     $$0107$be = 0; //@line 17100
    } else {
     $$0$be = $580; //@line 17102
     $$0107$be = -1010; //@line 17102
    }
    break;
   }
  default:
   {
    $$0$be = $48; //@line 17107
    $$0107$be = -1013; //@line 17107
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0107131 = $$0107$be; //@line 17112
   $$0132 = $$0$be; //@line 17112
  } else {
   $$0107$lcssa = $$0107$be; //@line 17114
   label = 47; //@line 17115
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 474; //@line 17120
  HEAP8[$AsyncCtx + 4 >> 0] = $3; //@line 17122
  HEAP8[$AsyncCtx + 5 >> 0] = $39; //@line 17124
  HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 17126
  HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 17128
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 17130
  HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 17132
  HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 17134
  HEAP32[$AsyncCtx + 28 >> 2] = $38; //@line 17136
  HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 17138
  HEAP32[$AsyncCtx + 36 >> 2] = $28; //@line 17140
  HEAP32[$AsyncCtx + 40 >> 2] = $$0107131; //@line 17142
  HEAP8[$AsyncCtx + 44 >> 0] = $2; //@line 17144
  HEAP32[$AsyncCtx + 48 >> 2] = $26; //@line 17146
  HEAP32[$AsyncCtx + 52 >> 2] = $59; //@line 17148
  HEAP32[$AsyncCtx + 56 >> 2] = $15; //@line 17150
  HEAP32[$AsyncCtx + 60 >> 2] = $27; //@line 17152
  HEAP32[$AsyncCtx + 64 >> 2] = $37; //@line 17154
  HEAP32[$AsyncCtx + 68 >> 2] = $18; //@line 17156
  HEAP32[$AsyncCtx + 72 >> 2] = $30; //@line 17158
  HEAP32[$AsyncCtx + 76 >> 2] = $41; //@line 17160
  HEAP32[$AsyncCtx + 80 >> 2] = $8; //@line 17162
  HEAP32[$AsyncCtx + 84 >> 2] = $19; //@line 17164
  HEAP32[$AsyncCtx + 88 >> 2] = $31; //@line 17166
  HEAP32[$AsyncCtx + 92 >> 2] = $8; //@line 17168
  HEAP32[$AsyncCtx + 96 >> 2] = $8; //@line 17170
  HEAP32[$AsyncCtx + 100 >> 2] = $8; //@line 17172
  HEAP32[$AsyncCtx + 104 >> 2] = $29; //@line 17174
  HEAP32[$AsyncCtx + 108 >> 2] = $7; //@line 17176
  HEAP32[$AsyncCtx + 112 >> 2] = $8; //@line 17178
  HEAP32[$AsyncCtx + 116 >> 2] = $0; //@line 17180
  HEAP32[$AsyncCtx + 120 >> 2] = $40; //@line 17182
  HEAP32[$AsyncCtx + 124 >> 2] = $33; //@line 17184
  HEAP32[$AsyncCtx + 128 >> 2] = $22; //@line 17186
  HEAP32[$AsyncCtx + 132 >> 2] = $44; //@line 17188
  HEAP32[$AsyncCtx + 136 >> 2] = $12; //@line 17190
  HEAP32[$AsyncCtx + 140 >> 2] = $7; //@line 17192
  HEAP32[$AsyncCtx + 144 >> 2] = $43; //@line 17194
  HEAP32[$AsyncCtx + 148 >> 2] = $23; //@line 17196
  HEAP32[$AsyncCtx + 152 >> 2] = $11; //@line 17198
  HEAP32[$AsyncCtx + 156 >> 2] = $7; //@line 17200
  HEAP32[$AsyncCtx + 160 >> 2] = $10; //@line 17202
  HEAP32[$AsyncCtx + 164 >> 2] = $20; //@line 17204
  HEAP32[$AsyncCtx + 168 >> 2] = $21; //@line 17206
  HEAP32[$AsyncCtx + 172 >> 2] = $32; //@line 17208
  HEAP32[$AsyncCtx + 176 >> 2] = $42; //@line 17210
  HEAP32[$AsyncCtx + 180 >> 2] = $8; //@line 17212
  HEAP32[$AsyncCtx + 184 >> 2] = $6; //@line 17214
  HEAP32[$AsyncCtx + 188 >> 2] = $7; //@line 17216
  HEAP32[$AsyncCtx + 192 >> 2] = $46; //@line 17218
  HEAP32[$AsyncCtx + 196 >> 2] = $35; //@line 17220
  HEAP32[$AsyncCtx + 200 >> 2] = $36; //@line 17222
  HEAP32[$AsyncCtx + 204 >> 2] = $25; //@line 17224
  HEAP32[$AsyncCtx + 208 >> 2] = $45; //@line 17226
  HEAP32[$AsyncCtx + 212 >> 2] = $24; //@line 17228
  HEAP32[$AsyncCtx + 216 >> 2] = $34; //@line 17230
  HEAP32[$AsyncCtx + 220 >> 2] = $8; //@line 17232
  HEAP32[$AsyncCtx + 224 >> 2] = $7; //@line 17234
  HEAP32[$AsyncCtx + 228 >> 2] = $13; //@line 17236
  HEAP32[$AsyncCtx + 232 >> 2] = $8; //@line 17238
  sp = STACKTOP; //@line 17239
  STACKTOP = sp; //@line 17240
  return 0; //@line 17240
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 475; //@line 17243
  HEAP8[$AsyncCtx3 + 4 >> 0] = $3; //@line 17245
  HEAP8[$AsyncCtx3 + 5 >> 0] = $39; //@line 17247
  HEAP32[$AsyncCtx3 + 8 >> 2] = $16; //@line 17249
  HEAP32[$AsyncCtx3 + 12 >> 2] = $7; //@line 17251
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 17253
  HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 17255
  HEAP32[$AsyncCtx3 + 24 >> 2] = $0; //@line 17257
  HEAP32[$AsyncCtx3 + 28 >> 2] = $38; //@line 17259
  HEAP32[$AsyncCtx3 + 32 >> 2] = $1; //@line 17261
  HEAP32[$AsyncCtx3 + 36 >> 2] = $28; //@line 17263
  HEAP8[$AsyncCtx3 + 40 >> 0] = $2; //@line 17265
  HEAP32[$AsyncCtx3 + 44 >> 2] = $26; //@line 17267
  HEAP32[$AsyncCtx3 + 48 >> 2] = $15; //@line 17269
  HEAP32[$AsyncCtx3 + 52 >> 2] = $27; //@line 17271
  HEAP32[$AsyncCtx3 + 56 >> 2] = $37; //@line 17273
  HEAP8[$AsyncCtx3 + 60 >> 0] = $192; //@line 17275
  HEAP32[$AsyncCtx3 + 64 >> 2] = $18; //@line 17277
  HEAP32[$AsyncCtx3 + 68 >> 2] = $30; //@line 17279
  HEAP32[$AsyncCtx3 + 72 >> 2] = $41; //@line 17281
  HEAP32[$AsyncCtx3 + 76 >> 2] = $8; //@line 17283
  HEAP32[$AsyncCtx3 + 80 >> 2] = $19; //@line 17285
  HEAP32[$AsyncCtx3 + 84 >> 2] = $31; //@line 17287
  HEAP32[$AsyncCtx3 + 88 >> 2] = $8; //@line 17289
  HEAP32[$AsyncCtx3 + 92 >> 2] = $8; //@line 17291
  HEAP32[$AsyncCtx3 + 96 >> 2] = $8; //@line 17293
  HEAP32[$AsyncCtx3 + 100 >> 2] = $29; //@line 17295
  HEAP32[$AsyncCtx3 + 104 >> 2] = $7; //@line 17297
  HEAP32[$AsyncCtx3 + 108 >> 2] = $8; //@line 17299
  HEAP32[$AsyncCtx3 + 112 >> 2] = $0; //@line 17301
  HEAP32[$AsyncCtx3 + 116 >> 2] = $40; //@line 17303
  HEAP32[$AsyncCtx3 + 120 >> 2] = $33; //@line 17305
  HEAP32[$AsyncCtx3 + 124 >> 2] = $22; //@line 17307
  HEAP32[$AsyncCtx3 + 128 >> 2] = $44; //@line 17309
  HEAP32[$AsyncCtx3 + 132 >> 2] = $12; //@line 17311
  HEAP32[$AsyncCtx3 + 136 >> 2] = $7; //@line 17313
  HEAP32[$AsyncCtx3 + 140 >> 2] = $43; //@line 17315
  HEAP32[$AsyncCtx3 + 144 >> 2] = $23; //@line 17317
  HEAP32[$AsyncCtx3 + 148 >> 2] = $11; //@line 17319
  HEAP32[$AsyncCtx3 + 152 >> 2] = $7; //@line 17321
  HEAP32[$AsyncCtx3 + 156 >> 2] = $10; //@line 17323
  HEAP32[$AsyncCtx3 + 160 >> 2] = $20; //@line 17325
  HEAP32[$AsyncCtx3 + 164 >> 2] = $21; //@line 17327
  HEAP32[$AsyncCtx3 + 168 >> 2] = $32; //@line 17329
  HEAP32[$AsyncCtx3 + 172 >> 2] = $42; //@line 17331
  HEAP32[$AsyncCtx3 + 176 >> 2] = $8; //@line 17333
  HEAP32[$AsyncCtx3 + 180 >> 2] = $6; //@line 17335
  HEAP32[$AsyncCtx3 + 184 >> 2] = $7; //@line 17337
  HEAP32[$AsyncCtx3 + 188 >> 2] = $46; //@line 17339
  HEAP32[$AsyncCtx3 + 192 >> 2] = $35; //@line 17341
  HEAP32[$AsyncCtx3 + 196 >> 2] = $36; //@line 17343
  HEAP32[$AsyncCtx3 + 200 >> 2] = $25; //@line 17345
  HEAP32[$AsyncCtx3 + 204 >> 2] = $45; //@line 17347
  HEAP32[$AsyncCtx3 + 208 >> 2] = $24; //@line 17349
  HEAP32[$AsyncCtx3 + 212 >> 2] = $34; //@line 17351
  HEAP32[$AsyncCtx3 + 216 >> 2] = $8; //@line 17353
  HEAP32[$AsyncCtx3 + 220 >> 2] = $7; //@line 17355
  HEAP32[$AsyncCtx3 + 224 >> 2] = $13; //@line 17357
  HEAP32[$AsyncCtx3 + 228 >> 2] = $8; //@line 17359
  sp = STACKTOP; //@line 17360
  STACKTOP = sp; //@line 17361
  return 0; //@line 17361
 } else if ((label | 0) == 26) {
  HEAP32[$AsyncCtx6 >> 2] = 476; //@line 17364
  HEAP8[$AsyncCtx6 + 4 >> 0] = $3; //@line 17366
  HEAP8[$AsyncCtx6 + 5 >> 0] = $39; //@line 17368
  HEAP32[$AsyncCtx6 + 8 >> 2] = $16; //@line 17370
  HEAP32[$AsyncCtx6 + 12 >> 2] = $7; //@line 17372
  HEAP32[$AsyncCtx6 + 16 >> 2] = $17; //@line 17374
  HEAP32[$AsyncCtx6 + 20 >> 2] = $9; //@line 17376
  HEAP32[$AsyncCtx6 + 24 >> 2] = $0; //@line 17378
  HEAP32[$AsyncCtx6 + 28 >> 2] = $38; //@line 17380
  HEAP32[$AsyncCtx6 + 32 >> 2] = $1; //@line 17382
  HEAP32[$AsyncCtx6 + 36 >> 2] = $28; //@line 17384
  HEAP8[$AsyncCtx6 + 40 >> 0] = $2; //@line 17386
  HEAP32[$AsyncCtx6 + 44 >> 2] = $26; //@line 17388
  HEAP32[$AsyncCtx6 + 48 >> 2] = $15; //@line 17390
  HEAP32[$AsyncCtx6 + 52 >> 2] = $27; //@line 17392
  HEAP32[$AsyncCtx6 + 56 >> 2] = $37; //@line 17394
  HEAP32[$AsyncCtx6 + 60 >> 2] = $18; //@line 17396
  HEAP32[$AsyncCtx6 + 64 >> 2] = $30; //@line 17398
  HEAP32[$AsyncCtx6 + 68 >> 2] = $41; //@line 17400
  HEAP32[$AsyncCtx6 + 72 >> 2] = $8; //@line 17402
  HEAP32[$AsyncCtx6 + 76 >> 2] = $19; //@line 17404
  HEAP32[$AsyncCtx6 + 80 >> 2] = $31; //@line 17406
  HEAP8[$AsyncCtx6 + 84 >> 0] = $48; //@line 17408
  HEAP32[$AsyncCtx6 + 88 >> 2] = $8; //@line 17410
  HEAP32[$AsyncCtx6 + 92 >> 2] = $8; //@line 17412
  HEAP32[$AsyncCtx6 + 96 >> 2] = $8; //@line 17414
  HEAP32[$AsyncCtx6 + 100 >> 2] = $29; //@line 17416
  HEAP32[$AsyncCtx6 + 104 >> 2] = $7; //@line 17418
  HEAP32[$AsyncCtx6 + 108 >> 2] = $8; //@line 17420
  HEAP32[$AsyncCtx6 + 112 >> 2] = $0; //@line 17422
  HEAP32[$AsyncCtx6 + 116 >> 2] = $40; //@line 17424
  HEAP32[$AsyncCtx6 + 120 >> 2] = $33; //@line 17426
  HEAP32[$AsyncCtx6 + 124 >> 2] = $22; //@line 17428
  HEAP32[$AsyncCtx6 + 128 >> 2] = $44; //@line 17430
  HEAP32[$AsyncCtx6 + 132 >> 2] = $12; //@line 17432
  HEAP32[$AsyncCtx6 + 136 >> 2] = $7; //@line 17434
  HEAP32[$AsyncCtx6 + 140 >> 2] = $43; //@line 17436
  HEAP32[$AsyncCtx6 + 144 >> 2] = $23; //@line 17438
  HEAP32[$AsyncCtx6 + 148 >> 2] = $11; //@line 17440
  HEAP32[$AsyncCtx6 + 152 >> 2] = $7; //@line 17442
  HEAP32[$AsyncCtx6 + 156 >> 2] = $10; //@line 17444
  HEAP32[$AsyncCtx6 + 160 >> 2] = $20; //@line 17446
  HEAP32[$AsyncCtx6 + 164 >> 2] = $21; //@line 17448
  HEAP32[$AsyncCtx6 + 168 >> 2] = $32; //@line 17450
  HEAP32[$AsyncCtx6 + 172 >> 2] = $42; //@line 17452
  HEAP32[$AsyncCtx6 + 176 >> 2] = $8; //@line 17454
  HEAP32[$AsyncCtx6 + 180 >> 2] = $6; //@line 17456
  HEAP32[$AsyncCtx6 + 184 >> 2] = $7; //@line 17458
  HEAP32[$AsyncCtx6 + 188 >> 2] = $46; //@line 17460
  HEAP32[$AsyncCtx6 + 192 >> 2] = $35; //@line 17462
  HEAP32[$AsyncCtx6 + 196 >> 2] = $36; //@line 17464
  HEAP32[$AsyncCtx6 + 200 >> 2] = $25; //@line 17466
  HEAP32[$AsyncCtx6 + 204 >> 2] = $45; //@line 17468
  HEAP32[$AsyncCtx6 + 208 >> 2] = $24; //@line 17470
  HEAP32[$AsyncCtx6 + 212 >> 2] = $34; //@line 17472
  HEAP32[$AsyncCtx6 + 216 >> 2] = $8; //@line 17474
  HEAP32[$AsyncCtx6 + 220 >> 2] = $7; //@line 17476
  HEAP32[$AsyncCtx6 + 224 >> 2] = $13; //@line 17478
  HEAP32[$AsyncCtx6 + 228 >> 2] = $8; //@line 17480
  sp = STACKTOP; //@line 17481
  STACKTOP = sp; //@line 17482
  return 0; //@line 17482
 } else if ((label | 0) == 31) {
  HEAP32[$AsyncCtx10 >> 2] = 477; //@line 17485
  HEAP8[$AsyncCtx10 + 4 >> 0] = $3; //@line 17487
  HEAP8[$AsyncCtx10 + 5 >> 0] = $39; //@line 17489
  HEAP32[$AsyncCtx10 + 8 >> 2] = $16; //@line 17491
  HEAP32[$AsyncCtx10 + 12 >> 2] = $7; //@line 17493
  HEAP32[$AsyncCtx10 + 16 >> 2] = $17; //@line 17495
  HEAP32[$AsyncCtx10 + 20 >> 2] = $9; //@line 17497
  HEAP32[$AsyncCtx10 + 24 >> 2] = $0; //@line 17499
  HEAP32[$AsyncCtx10 + 28 >> 2] = $38; //@line 17501
  HEAP32[$AsyncCtx10 + 32 >> 2] = $1; //@line 17503
  HEAP32[$AsyncCtx10 + 36 >> 2] = $28; //@line 17505
  HEAP8[$AsyncCtx10 + 40 >> 0] = $2; //@line 17507
  HEAP32[$AsyncCtx10 + 44 >> 2] = $26; //@line 17509
  HEAP32[$AsyncCtx10 + 48 >> 2] = $15; //@line 17511
  HEAP32[$AsyncCtx10 + 52 >> 2] = $27; //@line 17513
  HEAP32[$AsyncCtx10 + 56 >> 2] = $37; //@line 17515
  HEAP32[$AsyncCtx10 + 60 >> 2] = $18; //@line 17517
  HEAP32[$AsyncCtx10 + 64 >> 2] = $30; //@line 17519
  HEAP32[$AsyncCtx10 + 68 >> 2] = $41; //@line 17521
  HEAP32[$AsyncCtx10 + 72 >> 2] = $8; //@line 17523
  HEAP32[$AsyncCtx10 + 76 >> 2] = $19; //@line 17525
  HEAP32[$AsyncCtx10 + 80 >> 2] = $31; //@line 17527
  HEAP32[$AsyncCtx10 + 84 >> 2] = $8; //@line 17529
  HEAP32[$AsyncCtx10 + 88 >> 2] = $8; //@line 17531
  HEAP32[$AsyncCtx10 + 92 >> 2] = $8; //@line 17533
  HEAP32[$AsyncCtx10 + 96 >> 2] = $29; //@line 17535
  HEAP32[$AsyncCtx10 + 100 >> 2] = $7; //@line 17537
  HEAP32[$AsyncCtx10 + 104 >> 2] = $8; //@line 17539
  HEAP32[$AsyncCtx10 + 108 >> 2] = $0; //@line 17541
  HEAP32[$AsyncCtx10 + 112 >> 2] = $40; //@line 17543
  HEAP32[$AsyncCtx10 + 116 >> 2] = $33; //@line 17545
  HEAP32[$AsyncCtx10 + 120 >> 2] = $22; //@line 17547
  HEAP32[$AsyncCtx10 + 124 >> 2] = $44; //@line 17549
  HEAP32[$AsyncCtx10 + 128 >> 2] = $12; //@line 17551
  HEAP32[$AsyncCtx10 + 132 >> 2] = $7; //@line 17553
  HEAP32[$AsyncCtx10 + 136 >> 2] = $43; //@line 17555
  HEAP32[$AsyncCtx10 + 140 >> 2] = $23; //@line 17557
  HEAP32[$AsyncCtx10 + 144 >> 2] = $11; //@line 17559
  HEAP32[$AsyncCtx10 + 148 >> 2] = $7; //@line 17561
  HEAP32[$AsyncCtx10 + 152 >> 2] = $10; //@line 17563
  HEAP32[$AsyncCtx10 + 156 >> 2] = $20; //@line 17565
  HEAP32[$AsyncCtx10 + 160 >> 2] = $21; //@line 17567
  HEAP32[$AsyncCtx10 + 164 >> 2] = $32; //@line 17569
  HEAP32[$AsyncCtx10 + 168 >> 2] = $42; //@line 17571
  HEAP32[$AsyncCtx10 + 172 >> 2] = $8; //@line 17573
  HEAP8[$AsyncCtx10 + 176 >> 0] = $380; //@line 17575
  HEAP32[$AsyncCtx10 + 180 >> 2] = $6; //@line 17577
  HEAP32[$AsyncCtx10 + 184 >> 2] = $7; //@line 17579
  HEAP32[$AsyncCtx10 + 188 >> 2] = $46; //@line 17581
  HEAP32[$AsyncCtx10 + 192 >> 2] = $35; //@line 17583
  HEAP32[$AsyncCtx10 + 196 >> 2] = $36; //@line 17585
  HEAP32[$AsyncCtx10 + 200 >> 2] = $25; //@line 17587
  HEAP32[$AsyncCtx10 + 204 >> 2] = $45; //@line 17589
  HEAP32[$AsyncCtx10 + 208 >> 2] = $24; //@line 17591
  HEAP32[$AsyncCtx10 + 212 >> 2] = $34; //@line 17593
  HEAP32[$AsyncCtx10 + 216 >> 2] = $8; //@line 17595
  HEAP32[$AsyncCtx10 + 220 >> 2] = $7; //@line 17597
  HEAP32[$AsyncCtx10 + 224 >> 2] = $13; //@line 17599
  HEAP32[$AsyncCtx10 + 228 >> 2] = $8; //@line 17601
  sp = STACKTOP; //@line 17602
  STACKTOP = sp; //@line 17603
  return 0; //@line 17603
 } else if ((label | 0) == 39) {
  HEAP32[$AsyncCtx14 >> 2] = 478; //@line 17606
  HEAP8[$AsyncCtx14 + 4 >> 0] = $3; //@line 17608
  HEAP8[$AsyncCtx14 + 5 >> 0] = $39; //@line 17610
  HEAP32[$AsyncCtx14 + 8 >> 2] = $16; //@line 17612
  HEAP32[$AsyncCtx14 + 12 >> 2] = $7; //@line 17614
  HEAP32[$AsyncCtx14 + 16 >> 2] = $17; //@line 17616
  HEAP32[$AsyncCtx14 + 20 >> 2] = $9; //@line 17618
  HEAP32[$AsyncCtx14 + 24 >> 2] = $0; //@line 17620
  HEAP32[$AsyncCtx14 + 28 >> 2] = $38; //@line 17622
  HEAP32[$AsyncCtx14 + 32 >> 2] = $1; //@line 17624
  HEAP32[$AsyncCtx14 + 36 >> 2] = $28; //@line 17626
  HEAP8[$AsyncCtx14 + 40 >> 0] = $2; //@line 17628
  HEAP32[$AsyncCtx14 + 44 >> 2] = $$0107131; //@line 17630
  HEAP32[$AsyncCtx14 + 48 >> 2] = $26; //@line 17632
  HEAP32[$AsyncCtx14 + 52 >> 2] = $481; //@line 17634
  HEAP32[$AsyncCtx14 + 56 >> 2] = $15; //@line 17636
  HEAP32[$AsyncCtx14 + 60 >> 2] = $27; //@line 17638
  HEAP32[$AsyncCtx14 + 64 >> 2] = $37; //@line 17640
  HEAP32[$AsyncCtx14 + 68 >> 2] = $18; //@line 17642
  HEAP32[$AsyncCtx14 + 72 >> 2] = $30; //@line 17644
  HEAP32[$AsyncCtx14 + 76 >> 2] = $41; //@line 17646
  HEAP32[$AsyncCtx14 + 80 >> 2] = $8; //@line 17648
  HEAP32[$AsyncCtx14 + 84 >> 2] = $19; //@line 17650
  HEAP32[$AsyncCtx14 + 88 >> 2] = $31; //@line 17652
  HEAP8[$AsyncCtx14 + 92 >> 0] = $477; //@line 17654
  HEAP32[$AsyncCtx14 + 96 >> 2] = $8; //@line 17656
  HEAP32[$AsyncCtx14 + 100 >> 2] = $8; //@line 17658
  HEAP32[$AsyncCtx14 + 104 >> 2] = $8; //@line 17660
  HEAP32[$AsyncCtx14 + 108 >> 2] = $29; //@line 17662
  HEAP32[$AsyncCtx14 + 112 >> 2] = $7; //@line 17664
  HEAP32[$AsyncCtx14 + 116 >> 2] = $8; //@line 17666
  HEAP32[$AsyncCtx14 + 120 >> 2] = $0; //@line 17668
  HEAP32[$AsyncCtx14 + 124 >> 2] = $40; //@line 17670
  HEAP8[$AsyncCtx14 + 128 >> 0] = $483; //@line 17672
  HEAP32[$AsyncCtx14 + 132 >> 2] = $33; //@line 17674
  HEAP32[$AsyncCtx14 + 136 >> 2] = $22; //@line 17676
  HEAP32[$AsyncCtx14 + 140 >> 2] = $44; //@line 17678
  HEAP32[$AsyncCtx14 + 144 >> 2] = $12; //@line 17680
  HEAP32[$AsyncCtx14 + 148 >> 2] = $7; //@line 17682
  HEAP32[$AsyncCtx14 + 152 >> 2] = $43; //@line 17684
  HEAP32[$AsyncCtx14 + 156 >> 2] = $23; //@line 17686
  HEAP32[$AsyncCtx14 + 160 >> 2] = $11; //@line 17688
  HEAP32[$AsyncCtx14 + 164 >> 2] = $7; //@line 17690
  HEAP32[$AsyncCtx14 + 168 >> 2] = $10; //@line 17692
  HEAP32[$AsyncCtx14 + 172 >> 2] = $20; //@line 17694
  HEAP32[$AsyncCtx14 + 176 >> 2] = $21; //@line 17696
  HEAP32[$AsyncCtx14 + 180 >> 2] = $32; //@line 17698
  HEAP32[$AsyncCtx14 + 184 >> 2] = $42; //@line 17700
  HEAP32[$AsyncCtx14 + 188 >> 2] = $8; //@line 17702
  HEAP32[$AsyncCtx14 + 192 >> 2] = $6; //@line 17704
  HEAP32[$AsyncCtx14 + 196 >> 2] = $7; //@line 17706
  HEAP32[$AsyncCtx14 + 200 >> 2] = $46; //@line 17708
  HEAP32[$AsyncCtx14 + 204 >> 2] = $35; //@line 17710
  HEAP32[$AsyncCtx14 + 208 >> 2] = $36; //@line 17712
  HEAP32[$AsyncCtx14 + 212 >> 2] = $25; //@line 17714
  HEAP8[$AsyncCtx14 + 216 >> 0] = $485; //@line 17716
  HEAP32[$AsyncCtx14 + 220 >> 2] = $45; //@line 17718
  HEAP32[$AsyncCtx14 + 224 >> 2] = $24; //@line 17720
  HEAP32[$AsyncCtx14 + 228 >> 2] = $34; //@line 17722
  HEAP32[$AsyncCtx14 + 232 >> 2] = $8; //@line 17724
  HEAP32[$AsyncCtx14 + 236 >> 2] = $7; //@line 17726
  HEAP32[$AsyncCtx14 + 240 >> 2] = $13; //@line 17728
  HEAP32[$AsyncCtx14 + 244 >> 2] = $8; //@line 17730
  sp = STACKTOP; //@line 17731
  STACKTOP = sp; //@line 17732
  return 0; //@line 17732
 } else if ((label | 0) == 44) {
  HEAP32[$AsyncCtx18 >> 2] = 479; //@line 17735
  HEAP8[$AsyncCtx18 + 4 >> 0] = $3; //@line 17737
  HEAP8[$AsyncCtx18 + 5 >> 0] = $39; //@line 17739
  HEAP32[$AsyncCtx18 + 8 >> 2] = $16; //@line 17741
  HEAP32[$AsyncCtx18 + 12 >> 2] = $7; //@line 17743
  HEAP32[$AsyncCtx18 + 16 >> 2] = $17; //@line 17745
  HEAP32[$AsyncCtx18 + 20 >> 2] = $9; //@line 17747
  HEAP32[$AsyncCtx18 + 24 >> 2] = $0; //@line 17749
  HEAP32[$AsyncCtx18 + 28 >> 2] = $38; //@line 17751
  HEAP32[$AsyncCtx18 + 32 >> 2] = $1; //@line 17753
  HEAP32[$AsyncCtx18 + 36 >> 2] = $28; //@line 17755
  HEAP8[$AsyncCtx18 + 40 >> 0] = $2; //@line 17757
  HEAP32[$AsyncCtx18 + 44 >> 2] = $26; //@line 17759
  HEAP32[$AsyncCtx18 + 48 >> 2] = $15; //@line 17761
  HEAP8[$AsyncCtx18 + 52 >> 0] = $580; //@line 17763
  HEAP32[$AsyncCtx18 + 56 >> 2] = $27; //@line 17765
  HEAP32[$AsyncCtx18 + 60 >> 2] = $37; //@line 17767
  HEAP32[$AsyncCtx18 + 64 >> 2] = $18; //@line 17769
  HEAP32[$AsyncCtx18 + 68 >> 2] = $30; //@line 17771
  HEAP32[$AsyncCtx18 + 72 >> 2] = $41; //@line 17773
  HEAP32[$AsyncCtx18 + 76 >> 2] = $8; //@line 17775
  HEAP32[$AsyncCtx18 + 80 >> 2] = $19; //@line 17777
  HEAP32[$AsyncCtx18 + 84 >> 2] = $31; //@line 17779
  HEAP32[$AsyncCtx18 + 88 >> 2] = $8; //@line 17781
  HEAP32[$AsyncCtx18 + 92 >> 2] = $8; //@line 17783
  HEAP32[$AsyncCtx18 + 96 >> 2] = $8; //@line 17785
  HEAP32[$AsyncCtx18 + 100 >> 2] = $29; //@line 17787
  HEAP32[$AsyncCtx18 + 104 >> 2] = $7; //@line 17789
  HEAP32[$AsyncCtx18 + 108 >> 2] = $8; //@line 17791
  HEAP32[$AsyncCtx18 + 112 >> 2] = $0; //@line 17793
  HEAP32[$AsyncCtx18 + 116 >> 2] = $40; //@line 17795
  HEAP32[$AsyncCtx18 + 120 >> 2] = $33; //@line 17797
  HEAP32[$AsyncCtx18 + 124 >> 2] = $22; //@line 17799
  HEAP32[$AsyncCtx18 + 128 >> 2] = $44; //@line 17801
  HEAP32[$AsyncCtx18 + 132 >> 2] = $12; //@line 17803
  HEAP32[$AsyncCtx18 + 136 >> 2] = $7; //@line 17805
  HEAP32[$AsyncCtx18 + 140 >> 2] = $43; //@line 17807
  HEAP32[$AsyncCtx18 + 144 >> 2] = $23; //@line 17809
  HEAP32[$AsyncCtx18 + 148 >> 2] = $11; //@line 17811
  HEAP32[$AsyncCtx18 + 152 >> 2] = $7; //@line 17813
  HEAP32[$AsyncCtx18 + 156 >> 2] = $10; //@line 17815
  HEAP32[$AsyncCtx18 + 160 >> 2] = $20; //@line 17817
  HEAP32[$AsyncCtx18 + 164 >> 2] = $21; //@line 17819
  HEAP32[$AsyncCtx18 + 168 >> 2] = $32; //@line 17821
  HEAP32[$AsyncCtx18 + 172 >> 2] = $42; //@line 17823
  HEAP32[$AsyncCtx18 + 176 >> 2] = $8; //@line 17825
  HEAP32[$AsyncCtx18 + 180 >> 2] = $6; //@line 17827
  HEAP32[$AsyncCtx18 + 184 >> 2] = $7; //@line 17829
  HEAP32[$AsyncCtx18 + 188 >> 2] = $46; //@line 17831
  HEAP32[$AsyncCtx18 + 192 >> 2] = $35; //@line 17833
  HEAP32[$AsyncCtx18 + 196 >> 2] = $36; //@line 17835
  HEAP32[$AsyncCtx18 + 200 >> 2] = $25; //@line 17837
  HEAP32[$AsyncCtx18 + 204 >> 2] = $45; //@line 17839
  HEAP32[$AsyncCtx18 + 208 >> 2] = $24; //@line 17841
  HEAP32[$AsyncCtx18 + 212 >> 2] = $34; //@line 17843
  HEAP32[$AsyncCtx18 + 216 >> 2] = $8; //@line 17845
  HEAP32[$AsyncCtx18 + 220 >> 2] = $7; //@line 17847
  HEAP32[$AsyncCtx18 + 224 >> 2] = $13; //@line 17849
  HEAP32[$AsyncCtx18 + 228 >> 2] = $8; //@line 17851
  sp = STACKTOP; //@line 17852
  STACKTOP = sp; //@line 17853
  return 0; //@line 17853
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 17856
  return $$0107$lcssa | 0; //@line 17856
 }
 return 0; //@line 17858
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13904
 STACKTOP = STACKTOP + 560 | 0; //@line 13905
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 13905
 $6 = sp + 8 | 0; //@line 13906
 $7 = sp; //@line 13907
 $8 = sp + 524 | 0; //@line 13908
 $9 = $8; //@line 13909
 $10 = sp + 512 | 0; //@line 13910
 HEAP32[$7 >> 2] = 0; //@line 13911
 $11 = $10 + 12 | 0; //@line 13912
 ___DOUBLE_BITS_677($1) | 0; //@line 13913
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 13918
  $$0520 = 1; //@line 13918
  $$0521 = 15647; //@line 13918
 } else {
  $$0471 = $1; //@line 13929
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 13929
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 15648 : 15653 : 15650; //@line 13929
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 13931
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 13940
   $31 = $$0520 + 3 | 0; //@line 13945
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 13947
   _out_670($0, $$0521, $$0520); //@line 13948
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 15674 : 15678 : $27 ? 15666 : 15670, 3); //@line 13949
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 13951
   $$sink560 = $31; //@line 13952
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 13955
   $36 = $35 != 0.0; //@line 13956
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 13960
   }
   $39 = $5 | 32; //@line 13962
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 13965
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 13968
    $44 = $$0520 | 2; //@line 13969
    $46 = 12 - $3 | 0; //@line 13971
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 13976
     } else {
      $$0509585 = 8.0; //@line 13978
      $$1508586 = $46; //@line 13978
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 13980
       $$0509585 = $$0509585 * 16.0; //@line 13981
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 13996
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 14001
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 14006
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 14009
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14012
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 14015
     HEAP8[$68 >> 0] = 48; //@line 14016
     $$0511 = $68; //@line 14017
    } else {
     $$0511 = $66; //@line 14019
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 14026
    $76 = $$0511 + -2 | 0; //@line 14029
    HEAP8[$76 >> 0] = $5 + 15; //@line 14030
    $77 = ($3 | 0) < 1; //@line 14031
    $79 = ($4 & 8 | 0) == 0; //@line 14033
    $$0523 = $8; //@line 14034
    $$2473 = $$1472; //@line 14034
    while (1) {
     $80 = ~~$$2473; //@line 14036
     $86 = $$0523 + 1 | 0; //@line 14042
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[15682 + $80 >> 0]; //@line 14043
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 14046
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 14055
      } else {
       HEAP8[$86 >> 0] = 46; //@line 14058
       $$1524 = $$0523 + 2 | 0; //@line 14059
      }
     } else {
      $$1524 = $86; //@line 14062
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 14066
     }
    }
    $$pre693 = $$1524; //@line 14072
    if (!$3) {
     label = 24; //@line 14074
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 14082
      $$sink = $3 + 2 | 0; //@line 14082
     } else {
      label = 24; //@line 14084
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 14088
     $$pre$phi691Z2D = $101; //@line 14089
     $$sink = $101; //@line 14089
    }
    $104 = $11 - $76 | 0; //@line 14093
    $106 = $104 + $44 + $$sink | 0; //@line 14095
    _pad_676($0, 32, $2, $106, $4); //@line 14096
    _out_670($0, $$0521$, $44); //@line 14097
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 14099
    _out_670($0, $8, $$pre$phi691Z2D); //@line 14100
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 14102
    _out_670($0, $76, $104); //@line 14103
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 14105
    $$sink560 = $106; //@line 14106
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 14110
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 14114
    HEAP32[$7 >> 2] = $113; //@line 14115
    $$3 = $35 * 268435456.0; //@line 14116
    $$pr = $113; //@line 14116
   } else {
    $$3 = $35; //@line 14119
    $$pr = HEAP32[$7 >> 2] | 0; //@line 14119
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 14123
   $$0498 = $$561; //@line 14124
   $$4 = $$3; //@line 14124
   do {
    $116 = ~~$$4 >>> 0; //@line 14126
    HEAP32[$$0498 >> 2] = $116; //@line 14127
    $$0498 = $$0498 + 4 | 0; //@line 14128
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 14131
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 14141
    $$1499662 = $$0498; //@line 14141
    $124 = $$pr; //@line 14141
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 14144
     $$0488655 = $$1499662 + -4 | 0; //@line 14145
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 14148
     } else {
      $$0488657 = $$0488655; //@line 14150
      $$0497656 = 0; //@line 14150
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 14153
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 14155
       $131 = tempRet0; //@line 14156
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 14157
       HEAP32[$$0488657 >> 2] = $132; //@line 14159
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 14160
       $$0488657 = $$0488657 + -4 | 0; //@line 14162
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 14172
      } else {
       $138 = $$1482663 + -4 | 0; //@line 14174
       HEAP32[$138 >> 2] = $$0497656; //@line 14175
       $$2483$ph = $138; //@line 14176
      }
     }
     $$2500 = $$1499662; //@line 14179
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 14185
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 14189
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 14195
     HEAP32[$7 >> 2] = $144; //@line 14196
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 14199
      $$1499662 = $$2500; //@line 14199
      $124 = $144; //@line 14199
     } else {
      $$1482$lcssa = $$2483$ph; //@line 14201
      $$1499$lcssa = $$2500; //@line 14201
      $$pr566 = $144; //@line 14201
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 14206
    $$1499$lcssa = $$0498; //@line 14206
    $$pr566 = $$pr; //@line 14206
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 14212
    $150 = ($39 | 0) == 102; //@line 14213
    $$3484650 = $$1482$lcssa; //@line 14214
    $$3501649 = $$1499$lcssa; //@line 14214
    $152 = $$pr566; //@line 14214
    while (1) {
     $151 = 0 - $152 | 0; //@line 14216
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 14218
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 14222
      $161 = 1e9 >>> $154; //@line 14223
      $$0487644 = 0; //@line 14224
      $$1489643 = $$3484650; //@line 14224
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 14226
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 14230
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 14231
       $$1489643 = $$1489643 + 4 | 0; //@line 14232
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14243
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 14246
       $$4502 = $$3501649; //@line 14246
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 14249
       $$$3484700 = $$$3484; //@line 14250
       $$4502 = $$3501649 + 4 | 0; //@line 14250
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14257
      $$4502 = $$3501649; //@line 14257
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 14259
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 14266
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 14268
     HEAP32[$7 >> 2] = $152; //@line 14269
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 14274
      $$3501$lcssa = $$$4502; //@line 14274
      break;
     } else {
      $$3484650 = $$$3484700; //@line 14272
      $$3501649 = $$$4502; //@line 14272
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 14279
    $$3501$lcssa = $$1499$lcssa; //@line 14279
   }
   $185 = $$561; //@line 14282
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 14287
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 14288
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 14291
    } else {
     $$0514639 = $189; //@line 14293
     $$0530638 = 10; //@line 14293
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 14295
      $193 = $$0514639 + 1 | 0; //@line 14296
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 14299
       break;
      } else {
       $$0514639 = $193; //@line 14302
      }
     }
    }
   } else {
    $$1515 = 0; //@line 14307
   }
   $198 = ($39 | 0) == 103; //@line 14312
   $199 = ($$540 | 0) != 0; //@line 14313
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 14316
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 14325
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 14328
    $213 = ($209 | 0) % 9 | 0; //@line 14329
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 14332
     $$1531632 = 10; //@line 14332
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 14335
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 14338
       $$1531632 = $215; //@line 14338
      } else {
       $$1531$lcssa = $215; //@line 14340
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 14345
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 14347
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 14348
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 14351
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 14354
     $$4518 = $$1515; //@line 14354
     $$8 = $$3484$lcssa; //@line 14354
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 14359
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 14360
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 14365
     if (!$$0520) {
      $$1467 = $$$564; //@line 14368
      $$1469 = $$543; //@line 14368
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 14371
      $$1467 = $230 ? -$$$564 : $$$564; //@line 14376
      $$1469 = $230 ? -$$543 : $$543; //@line 14376
     }
     $233 = $217 - $218 | 0; //@line 14378
     HEAP32[$212 >> 2] = $233; //@line 14379
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 14383
      HEAP32[$212 >> 2] = $236; //@line 14384
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 14387
       $$sink547625 = $212; //@line 14387
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 14389
        HEAP32[$$sink547625 >> 2] = 0; //@line 14390
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 14393
         HEAP32[$240 >> 2] = 0; //@line 14394
         $$6 = $240; //@line 14395
        } else {
         $$6 = $$5486626; //@line 14397
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 14400
        HEAP32[$238 >> 2] = $242; //@line 14401
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 14404
         $$sink547625 = $238; //@line 14404
        } else {
         $$5486$lcssa = $$6; //@line 14406
         $$sink547$lcssa = $238; //@line 14406
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 14411
       $$sink547$lcssa = $212; //@line 14411
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 14416
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 14417
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 14420
       $$4518 = $247; //@line 14420
       $$8 = $$5486$lcssa; //@line 14420
      } else {
       $$2516621 = $247; //@line 14422
       $$2532620 = 10; //@line 14422
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 14424
        $251 = $$2516621 + 1 | 0; //@line 14425
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 14428
         $$4518 = $251; //@line 14428
         $$8 = $$5486$lcssa; //@line 14428
         break;
        } else {
         $$2516621 = $251; //@line 14431
        }
       }
      }
     } else {
      $$4492 = $212; //@line 14436
      $$4518 = $$1515; //@line 14436
      $$8 = $$3484$lcssa; //@line 14436
     }
    }
    $253 = $$4492 + 4 | 0; //@line 14439
    $$5519$ph = $$4518; //@line 14442
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 14442
    $$9$ph = $$8; //@line 14442
   } else {
    $$5519$ph = $$1515; //@line 14444
    $$7505$ph = $$3501$lcssa; //@line 14444
    $$9$ph = $$3484$lcssa; //@line 14444
   }
   $$7505 = $$7505$ph; //@line 14446
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 14450
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 14453
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 14457
    } else {
     $$lcssa675 = 1; //@line 14459
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 14463
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 14468
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 14476
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 14476
     } else {
      $$0479 = $5 + -2 | 0; //@line 14480
      $$2476 = $$540$ + -1 | 0; //@line 14480
     }
     $267 = $4 & 8; //@line 14482
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 14487
       if (!$270) {
        $$2529 = 9; //@line 14490
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 14495
         $$3533616 = 10; //@line 14495
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 14497
          $275 = $$1528617 + 1 | 0; //@line 14498
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 14504
           break;
          } else {
           $$1528617 = $275; //@line 14502
          }
         }
        } else {
         $$2529 = 0; //@line 14509
        }
       }
      } else {
       $$2529 = 9; //@line 14513
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 14521
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 14523
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 14525
       $$1480 = $$0479; //@line 14528
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 14528
       $$pre$phi698Z2D = 0; //@line 14528
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 14532
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 14534
       $$1480 = $$0479; //@line 14537
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 14537
       $$pre$phi698Z2D = 0; //@line 14537
       break;
      }
     } else {
      $$1480 = $$0479; //@line 14541
      $$3477 = $$2476; //@line 14541
      $$pre$phi698Z2D = $267; //@line 14541
     }
    } else {
     $$1480 = $5; //@line 14545
     $$3477 = $$540; //@line 14545
     $$pre$phi698Z2D = $4 & 8; //@line 14545
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 14548
   $294 = ($292 | 0) != 0 & 1; //@line 14550
   $296 = ($$1480 | 32 | 0) == 102; //@line 14552
   if ($296) {
    $$2513 = 0; //@line 14556
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 14556
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 14559
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14562
    $304 = $11; //@line 14563
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 14568
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 14570
      HEAP8[$308 >> 0] = 48; //@line 14571
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 14576
      } else {
       $$1512$lcssa = $308; //@line 14578
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 14583
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 14590
    $318 = $$1512$lcssa + -2 | 0; //@line 14592
    HEAP8[$318 >> 0] = $$1480; //@line 14593
    $$2513 = $318; //@line 14596
    $$pn = $304 - $318 | 0; //@line 14596
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 14601
   _pad_676($0, 32, $2, $323, $4); //@line 14602
   _out_670($0, $$0521, $$0520); //@line 14603
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 14605
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 14608
    $326 = $8 + 9 | 0; //@line 14609
    $327 = $326; //@line 14610
    $328 = $8 + 8 | 0; //@line 14611
    $$5493600 = $$0496$$9; //@line 14612
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 14615
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 14620
       $$1465 = $328; //@line 14621
      } else {
       $$1465 = $330; //@line 14623
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 14630
       $$0464597 = $330; //@line 14631
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 14633
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 14636
        } else {
         $$1465 = $335; //@line 14638
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 14643
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 14648
     $$5493600 = $$5493600 + 4 | 0; //@line 14649
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 15698, 1); //@line 14659
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 14665
     $$6494592 = $$5493600; //@line 14665
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 14668
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 14673
       $$0463587 = $347; //@line 14674
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 14676
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 14679
        } else {
         $$0463$lcssa = $351; //@line 14681
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 14686
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 14690
      $$6494592 = $$6494592 + 4 | 0; //@line 14691
      $356 = $$4478593 + -9 | 0; //@line 14692
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 14699
       break;
      } else {
       $$4478593 = $356; //@line 14697
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 14704
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 14707
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 14710
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 14713
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 14714
     $365 = $363; //@line 14715
     $366 = 0 - $9 | 0; //@line 14716
     $367 = $8 + 8 | 0; //@line 14717
     $$5605 = $$3477; //@line 14718
     $$7495604 = $$9$ph; //@line 14718
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 14721
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 14724
       $$0 = $367; //@line 14725
      } else {
       $$0 = $369; //@line 14727
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 14732
        _out_670($0, $$0, 1); //@line 14733
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 14737
         break;
        }
        _out_670($0, 15698, 1); //@line 14740
        $$2 = $375; //@line 14741
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 14745
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 14750
        $$1601 = $$0; //@line 14751
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 14753
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 14756
         } else {
          $$2 = $373; //@line 14758
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 14765
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 14768
      $381 = $$5605 - $378 | 0; //@line 14769
      $$7495604 = $$7495604 + 4 | 0; //@line 14770
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 14777
       break;
      } else {
       $$5605 = $381; //@line 14775
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 14782
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 14785
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 14789
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 14792
   $$sink560 = $323; //@line 14793
  }
 } while (0);
 STACKTOP = sp; //@line 14798
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 14798
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 12476
 STACKTOP = STACKTOP + 64 | 0; //@line 12477
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 12477
 $5 = sp + 16 | 0; //@line 12478
 $6 = sp; //@line 12479
 $7 = sp + 24 | 0; //@line 12480
 $8 = sp + 8 | 0; //@line 12481
 $9 = sp + 20 | 0; //@line 12482
 HEAP32[$5 >> 2] = $1; //@line 12483
 $10 = ($0 | 0) != 0; //@line 12484
 $11 = $7 + 40 | 0; //@line 12485
 $12 = $11; //@line 12486
 $13 = $7 + 39 | 0; //@line 12487
 $14 = $8 + 4 | 0; //@line 12488
 $$0243 = 0; //@line 12489
 $$0247 = 0; //@line 12489
 $$0269 = 0; //@line 12489
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 12498
     $$1248 = -1; //@line 12499
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 12503
     break;
    }
   } else {
    $$1248 = $$0247; //@line 12507
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 12510
  $21 = HEAP8[$20 >> 0] | 0; //@line 12511
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 12514
   break;
  } else {
   $23 = $21; //@line 12517
   $25 = $20; //@line 12517
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 12522
     $27 = $25; //@line 12522
     label = 9; //@line 12523
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 12528
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 12535
   HEAP32[$5 >> 2] = $24; //@line 12536
   $23 = HEAP8[$24 >> 0] | 0; //@line 12538
   $25 = $24; //@line 12538
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 12543
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 12548
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 12551
     $27 = $27 + 2 | 0; //@line 12552
     HEAP32[$5 >> 2] = $27; //@line 12553
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 12560
      break;
     } else {
      $$0249303 = $30; //@line 12557
      label = 9; //@line 12558
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 12568
  if ($10) {
   _out_670($0, $20, $36); //@line 12570
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 12574
   $$0247 = $$1248; //@line 12574
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 12582
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 12583
  if ($43) {
   $$0253 = -1; //@line 12585
   $$1270 = $$0269; //@line 12585
   $$sink = 1; //@line 12585
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 12595
    $$1270 = 1; //@line 12595
    $$sink = 3; //@line 12595
   } else {
    $$0253 = -1; //@line 12597
    $$1270 = $$0269; //@line 12597
    $$sink = 1; //@line 12597
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 12600
  HEAP32[$5 >> 2] = $51; //@line 12601
  $52 = HEAP8[$51 >> 0] | 0; //@line 12602
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 12604
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 12611
   $$lcssa291 = $52; //@line 12611
   $$lcssa292 = $51; //@line 12611
  } else {
   $$0262309 = 0; //@line 12613
   $60 = $52; //@line 12613
   $65 = $51; //@line 12613
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 12618
    $64 = $65 + 1 | 0; //@line 12619
    HEAP32[$5 >> 2] = $64; //@line 12620
    $66 = HEAP8[$64 >> 0] | 0; //@line 12621
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 12623
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 12630
     $$lcssa291 = $66; //@line 12630
     $$lcssa292 = $64; //@line 12630
     break;
    } else {
     $$0262309 = $63; //@line 12633
     $60 = $66; //@line 12633
     $65 = $64; //@line 12633
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 12645
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 12647
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 12652
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12657
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12669
     $$2271 = 1; //@line 12669
     $storemerge274 = $79 + 3 | 0; //@line 12669
    } else {
     label = 23; //@line 12671
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 12675
    if ($$1270 | 0) {
     $$0 = -1; //@line 12678
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12693
     $106 = HEAP32[$105 >> 2] | 0; //@line 12694
     HEAP32[$2 >> 2] = $105 + 4; //@line 12696
     $363 = $106; //@line 12697
    } else {
     $363 = 0; //@line 12699
    }
    $$0259 = $363; //@line 12703
    $$2271 = 0; //@line 12703
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 12703
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 12705
   $109 = ($$0259 | 0) < 0; //@line 12706
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 12711
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 12711
   $$3272 = $$2271; //@line 12711
   $115 = $storemerge274; //@line 12711
  } else {
   $112 = _getint_671($5) | 0; //@line 12713
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 12716
    break;
   }
   $$1260 = $112; //@line 12720
   $$1263 = $$0262$lcssa; //@line 12720
   $$3272 = $$1270; //@line 12720
   $115 = HEAP32[$5 >> 2] | 0; //@line 12720
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 12731
     $156 = _getint_671($5) | 0; //@line 12732
     $$0254 = $156; //@line 12734
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 12734
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 12743
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 12748
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12753
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12760
      $144 = $125 + 4 | 0; //@line 12764
      HEAP32[$5 >> 2] = $144; //@line 12765
      $$0254 = $140; //@line 12766
      $$pre345 = $144; //@line 12766
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 12772
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12787
     $152 = HEAP32[$151 >> 2] | 0; //@line 12788
     HEAP32[$2 >> 2] = $151 + 4; //@line 12790
     $364 = $152; //@line 12791
    } else {
     $364 = 0; //@line 12793
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 12796
    HEAP32[$5 >> 2] = $154; //@line 12797
    $$0254 = $364; //@line 12798
    $$pre345 = $154; //@line 12798
   } else {
    $$0254 = -1; //@line 12800
    $$pre345 = $115; //@line 12800
   }
  } while (0);
  $$0252 = 0; //@line 12803
  $158 = $$pre345; //@line 12803
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 12810
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 12813
   HEAP32[$5 >> 2] = $158; //@line 12814
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (15166 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 12819
   $168 = $167 & 255; //@line 12820
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 12824
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 12831
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 12835
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 12839
     break L1;
    } else {
     label = 50; //@line 12842
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 12847
     $176 = $3 + ($$0253 << 3) | 0; //@line 12849
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 12854
     $182 = $6; //@line 12855
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 12857
     HEAP32[$182 + 4 >> 2] = $181; //@line 12860
     label = 50; //@line 12861
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 12865
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 12868
    $187 = HEAP32[$5 >> 2] | 0; //@line 12870
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 12874
   if ($10) {
    $187 = $158; //@line 12876
   } else {
    $$0243 = 0; //@line 12878
    $$0247 = $$1248; //@line 12878
    $$0269 = $$3272; //@line 12878
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 12884
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 12890
  $196 = $$1263 & -65537; //@line 12893
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 12894
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12902
       $$0243 = 0; //@line 12903
       $$0247 = $$1248; //@line 12903
       $$0269 = $$3272; //@line 12903
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12909
       $$0243 = 0; //@line 12910
       $$0247 = $$1248; //@line 12910
       $$0269 = $$3272; //@line 12910
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 12918
       HEAP32[$208 >> 2] = $$1248; //@line 12920
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12923
       $$0243 = 0; //@line 12924
       $$0247 = $$1248; //@line 12924
       $$0269 = $$3272; //@line 12924
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 12931
       $$0243 = 0; //@line 12932
       $$0247 = $$1248; //@line 12932
       $$0269 = $$3272; //@line 12932
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 12939
       $$0243 = 0; //@line 12940
       $$0247 = $$1248; //@line 12940
       $$0269 = $$3272; //@line 12940
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12946
       $$0243 = 0; //@line 12947
       $$0247 = $$1248; //@line 12947
       $$0269 = $$3272; //@line 12947
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 12955
       HEAP32[$220 >> 2] = $$1248; //@line 12957
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12960
       $$0243 = 0; //@line 12961
       $$0247 = $$1248; //@line 12961
       $$0269 = $$3272; //@line 12961
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 12966
       $$0247 = $$1248; //@line 12966
       $$0269 = $$3272; //@line 12966
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 12976
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 12976
     $$3265 = $$1263$ | 8; //@line 12976
     label = 62; //@line 12977
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 12981
     $$1255 = $$0254; //@line 12981
     $$3265 = $$1263$; //@line 12981
     label = 62; //@line 12982
     break;
    }
   case 111:
    {
     $242 = $6; //@line 12986
     $244 = HEAP32[$242 >> 2] | 0; //@line 12988
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 12991
     $248 = _fmt_o($244, $247, $11) | 0; //@line 12992
     $252 = $12 - $248 | 0; //@line 12996
     $$0228 = $248; //@line 13001
     $$1233 = 0; //@line 13001
     $$1238 = 15630; //@line 13001
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 13001
     $$4266 = $$1263$; //@line 13001
     $281 = $244; //@line 13001
     $283 = $247; //@line 13001
     label = 68; //@line 13002
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 13006
     $258 = HEAP32[$256 >> 2] | 0; //@line 13008
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 13011
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 13014
      $264 = tempRet0; //@line 13015
      $265 = $6; //@line 13016
      HEAP32[$265 >> 2] = $263; //@line 13018
      HEAP32[$265 + 4 >> 2] = $264; //@line 13021
      $$0232 = 1; //@line 13022
      $$0237 = 15630; //@line 13022
      $275 = $263; //@line 13022
      $276 = $264; //@line 13022
      label = 67; //@line 13023
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 13035
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 15630 : 15632 : 15631; //@line 13035
      $275 = $258; //@line 13035
      $276 = $261; //@line 13035
      label = 67; //@line 13036
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 13042
     $$0232 = 0; //@line 13048
     $$0237 = 15630; //@line 13048
     $275 = HEAP32[$197 >> 2] | 0; //@line 13048
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 13048
     label = 67; //@line 13049
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 13060
     $$2 = $13; //@line 13061
     $$2234 = 0; //@line 13061
     $$2239 = 15630; //@line 13061
     $$2251 = $11; //@line 13061
     $$5 = 1; //@line 13061
     $$6268 = $196; //@line 13061
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 13068
     label = 72; //@line 13069
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 13073
     $$1 = $302 | 0 ? $302 : 15640; //@line 13076
     label = 72; //@line 13077
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 13087
     HEAP32[$14 >> 2] = 0; //@line 13088
     HEAP32[$6 >> 2] = $8; //@line 13089
     $$4258354 = -1; //@line 13090
     $365 = $8; //@line 13090
     label = 76; //@line 13091
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 13095
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 13098
      $$0240$lcssa356 = 0; //@line 13099
      label = 85; //@line 13100
     } else {
      $$4258354 = $$0254; //@line 13102
      $365 = $$pre348; //@line 13102
      label = 76; //@line 13103
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 13110
     $$0247 = $$1248; //@line 13110
     $$0269 = $$3272; //@line 13110
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 13115
     $$2234 = 0; //@line 13115
     $$2239 = 15630; //@line 13115
     $$2251 = $11; //@line 13115
     $$5 = $$0254; //@line 13115
     $$6268 = $$1263$; //@line 13115
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 13121
    $227 = $6; //@line 13122
    $229 = HEAP32[$227 >> 2] | 0; //@line 13124
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 13127
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 13129
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 13135
    $$0228 = $234; //@line 13140
    $$1233 = $or$cond278 ? 0 : 2; //@line 13140
    $$1238 = $or$cond278 ? 15630 : 15630 + ($$1236 >> 4) | 0; //@line 13140
    $$2256 = $$1255; //@line 13140
    $$4266 = $$3265; //@line 13140
    $281 = $229; //@line 13140
    $283 = $232; //@line 13140
    label = 68; //@line 13141
   } else if ((label | 0) == 67) {
    label = 0; //@line 13144
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 13146
    $$1233 = $$0232; //@line 13146
    $$1238 = $$0237; //@line 13146
    $$2256 = $$0254; //@line 13146
    $$4266 = $$1263$; //@line 13146
    $281 = $275; //@line 13146
    $283 = $276; //@line 13146
    label = 68; //@line 13147
   } else if ((label | 0) == 72) {
    label = 0; //@line 13150
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 13151
    $306 = ($305 | 0) == 0; //@line 13152
    $$2 = $$1; //@line 13159
    $$2234 = 0; //@line 13159
    $$2239 = 15630; //@line 13159
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 13159
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 13159
    $$6268 = $196; //@line 13159
   } else if ((label | 0) == 76) {
    label = 0; //@line 13162
    $$0229316 = $365; //@line 13163
    $$0240315 = 0; //@line 13163
    $$1244314 = 0; //@line 13163
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 13165
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 13168
      $$2245 = $$1244314; //@line 13168
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 13171
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 13177
      $$2245 = $320; //@line 13177
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 13181
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 13184
      $$0240315 = $325; //@line 13184
      $$1244314 = $320; //@line 13184
     } else {
      $$0240$lcssa = $325; //@line 13186
      $$2245 = $320; //@line 13186
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 13192
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 13195
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 13198
     label = 85; //@line 13199
    } else {
     $$1230327 = $365; //@line 13201
     $$1241326 = 0; //@line 13201
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 13203
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13206
       label = 85; //@line 13207
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 13210
      $$1241326 = $331 + $$1241326 | 0; //@line 13211
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13214
       label = 85; //@line 13215
       break L97;
      }
      _out_670($0, $9, $331); //@line 13219
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13224
       label = 85; //@line 13225
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 13222
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 13233
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 13239
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 13241
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 13246
   $$2 = $or$cond ? $$0228 : $11; //@line 13251
   $$2234 = $$1233; //@line 13251
   $$2239 = $$1238; //@line 13251
   $$2251 = $11; //@line 13251
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 13251
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 13251
  } else if ((label | 0) == 85) {
   label = 0; //@line 13254
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 13256
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 13259
   $$0247 = $$1248; //@line 13259
   $$0269 = $$3272; //@line 13259
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 13264
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 13266
  $345 = $$$5 + $$2234 | 0; //@line 13267
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 13269
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 13270
  _out_670($0, $$2239, $$2234); //@line 13271
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 13273
  _pad_676($0, 48, $$$5, $343, 0); //@line 13274
  _out_670($0, $$2, $343); //@line 13275
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 13277
  $$0243 = $$2261; //@line 13278
  $$0247 = $$1248; //@line 13278
  $$0269 = $$3272; //@line 13278
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 13286
    } else {
     $$2242302 = 1; //@line 13288
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 13291
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 13294
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 13298
      $356 = $$2242302 + 1 | 0; //@line 13299
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 13302
      } else {
       $$2242$lcssa = $356; //@line 13304
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 13310
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 13316
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 13322
       } else {
        $$0 = 1; //@line 13324
        break;
       }
      }
     } else {
      $$0 = 1; //@line 13329
     }
    }
   } else {
    $$0 = $$1248; //@line 13333
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13337
 return $$0 | 0; //@line 13337
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3652
 STACKTOP = STACKTOP + 96 | 0; //@line 3653
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 3653
 $vararg_buffer23 = sp + 72 | 0; //@line 3654
 $vararg_buffer20 = sp + 64 | 0; //@line 3655
 $vararg_buffer18 = sp + 56 | 0; //@line 3656
 $vararg_buffer15 = sp + 48 | 0; //@line 3657
 $vararg_buffer12 = sp + 40 | 0; //@line 3658
 $vararg_buffer9 = sp + 32 | 0; //@line 3659
 $vararg_buffer6 = sp + 24 | 0; //@line 3660
 $vararg_buffer3 = sp + 16 | 0; //@line 3661
 $vararg_buffer1 = sp + 8 | 0; //@line 3662
 $vararg_buffer = sp; //@line 3663
 $4 = sp + 80 | 0; //@line 3664
 $5 = HEAP32[176] | 0; //@line 3665
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 3669
   FUNCTION_TABLE_v[$5 & 7](); //@line 3670
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 126; //@line 3673
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 3675
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 3677
    HEAP8[$AsyncCtx + 12 >> 0] = $0; //@line 3679
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 3681
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 3683
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer3; //@line 3685
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer3; //@line 3687
    HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 3689
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer18; //@line 3691
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer18; //@line 3693
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer20; //@line 3695
    HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer20; //@line 3697
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer23; //@line 3699
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer23; //@line 3701
    HEAP32[$AsyncCtx + 60 >> 2] = $4; //@line 3703
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer15; //@line 3705
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer15; //@line 3707
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer12; //@line 3709
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer12; //@line 3711
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer9; //@line 3713
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer9; //@line 3715
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer6; //@line 3717
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer6; //@line 3719
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer1; //@line 3721
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer1; //@line 3723
    sp = STACKTOP; //@line 3724
    STACKTOP = sp; //@line 3725
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3727
    HEAP32[178] = (HEAP32[178] | 0) + 1; //@line 3730
    break;
   }
  }
 } while (0);
 $34 = HEAP32[167] | 0; //@line 3735
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 3739
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[164] | 0; //@line 3745
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 3752
       break;
      }
     }
     $43 = HEAP32[165] | 0; //@line 3756
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 3760
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 3765
      } else {
       label = 11; //@line 3767
      }
     }
    } else {
     label = 11; //@line 3771
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 3775
   }
   if (!((HEAP32[174] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[171] = HEAP32[169]; //@line 3787
    break;
   }
   $54 = HEAPU8[652] | 0; //@line 3791
   $55 = $0 & 255; //@line 3792
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 3797
    $$lobit = $59 >>> 6; //@line 3798
    $60 = $$lobit & 255; //@line 3799
    $64 = ($54 & 32 | 0) == 0; //@line 3803
    $65 = HEAP32[168] | 0; //@line 3804
    $66 = HEAP32[167] | 0; //@line 3805
    $67 = $0 << 24 >> 24 == 1; //@line 3806
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3810
      _vsnprintf($66, $65, $2, $3) | 0; //@line 3811
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 127; //@line 3814
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 3817
       sp = STACKTOP; //@line 3818
       STACKTOP = sp; //@line 3819
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 3821
      $69 = HEAP32[175] | 0; //@line 3822
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[174] | 0; //@line 3826
       $74 = HEAP32[167] | 0; //@line 3827
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3828
       FUNCTION_TABLE_vi[$73 & 1023]($74); //@line 3829
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 130; //@line 3832
        sp = STACKTOP; //@line 3833
        STACKTOP = sp; //@line 3834
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 3836
        break;
       }
      }
      $71 = HEAP32[167] | 0; //@line 3840
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3841
      FUNCTION_TABLE_vi[$69 & 1023]($71); //@line 3842
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 128; //@line 3845
       sp = STACKTOP; //@line 3846
       STACKTOP = sp; //@line 3847
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 3849
      $72 = HEAP32[175] | 0; //@line 3850
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3851
      FUNCTION_TABLE_vi[$72 & 1023](11932); //@line 3852
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 129; //@line 3855
       sp = STACKTOP; //@line 3856
       STACKTOP = sp; //@line 3857
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 3859
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 3866
       $$1143 = $66; //@line 3866
       $$1145 = $65; //@line 3866
       $$3154 = 0; //@line 3866
       label = 38; //@line 3867
      } else {
       if ($64) {
        $$0142 = $66; //@line 3870
        $$0144 = $65; //@line 3870
       } else {
        $76 = _snprintf($66, $65, 11934, $vararg_buffer) | 0; //@line 3872
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 3874
        $78 = ($$ | 0) > 0; //@line 3875
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 3880
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 3880
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 3884
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 11952; //@line 3890
          label = 35; //@line 3891
          break;
         }
        case 1:
         {
          $$sink = 11958; //@line 3895
          label = 35; //@line 3896
          break;
         }
        case 3:
         {
          $$sink = 11946; //@line 3900
          label = 35; //@line 3901
          break;
         }
        case 7:
         {
          $$sink = 11940; //@line 3905
          label = 35; //@line 3906
          break;
         }
        default:
         {
          $$0141 = 0; //@line 3910
          $$1152 = 0; //@line 3910
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 3914
         $$0141 = $60 & 1; //@line 3917
         $$1152 = _snprintf($$0142, $$0144, 11964, $vararg_buffer1) | 0; //@line 3917
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 3920
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 3922
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 3924
         $$1$off0 = $extract$t159; //@line 3929
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 3929
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 3929
         $$3154 = $$1152; //@line 3929
         label = 38; //@line 3930
        } else {
         $$1$off0 = $extract$t159; //@line 3932
         $$1143 = $$0142; //@line 3932
         $$1145 = $$0144; //@line 3932
         $$3154 = $$1152$; //@line 3932
         label = 38; //@line 3933
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[172] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 3946
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 3947
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 3948
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 131; //@line 3951
           HEAP32[$AsyncCtx60 + 4 >> 2] = $vararg_buffer20; //@line 3953
           HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer20; //@line 3955
           HEAP8[$AsyncCtx60 + 12 >> 0] = $$1$off0 & 1; //@line 3958
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer23; //@line 3960
           HEAP32[$AsyncCtx60 + 20 >> 2] = $vararg_buffer23; //@line 3962
           HEAP32[$AsyncCtx60 + 24 >> 2] = $$3154; //@line 3964
           HEAP32[$AsyncCtx60 + 28 >> 2] = $vararg_buffer3; //@line 3966
           HEAP32[$AsyncCtx60 + 32 >> 2] = $$1143; //@line 3968
           HEAP32[$AsyncCtx60 + 36 >> 2] = $$1145; //@line 3970
           HEAP32[$AsyncCtx60 + 40 >> 2] = $vararg_buffer3; //@line 3972
           HEAP32[$AsyncCtx60 + 44 >> 2] = $4; //@line 3974
           HEAP32[$AsyncCtx60 + 48 >> 2] = $2; //@line 3976
           HEAP32[$AsyncCtx60 + 52 >> 2] = $3; //@line 3978
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer18; //@line 3980
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer18; //@line 3982
           HEAP32[$AsyncCtx60 + 64 >> 2] = $55; //@line 3984
           HEAP32[$AsyncCtx60 + 68 >> 2] = $vararg_buffer15; //@line 3986
           HEAP32[$AsyncCtx60 + 72 >> 2] = $1; //@line 3988
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer15; //@line 3990
           HEAP32[$AsyncCtx60 + 80 >> 2] = $vararg_buffer12; //@line 3992
           HEAP32[$AsyncCtx60 + 84 >> 2] = $vararg_buffer12; //@line 3994
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer9; //@line 3996
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer9; //@line 3998
           HEAP32[$AsyncCtx60 + 96 >> 2] = $vararg_buffer6; //@line 4000
           HEAP32[$AsyncCtx60 + 100 >> 2] = $vararg_buffer6; //@line 4002
           sp = STACKTOP; //@line 4003
           STACKTOP = sp; //@line 4004
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 4006
          $125 = HEAP32[172] | 0; //@line 4011
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 4012
          $126 = FUNCTION_TABLE_ii[$125 & 15](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 4013
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 132; //@line 4016
           HEAP32[$AsyncCtx38 + 4 >> 2] = $vararg_buffer3; //@line 4018
           HEAP32[$AsyncCtx38 + 8 >> 2] = $$1143; //@line 4020
           HEAP32[$AsyncCtx38 + 12 >> 2] = $$1145; //@line 4022
           HEAP32[$AsyncCtx38 + 16 >> 2] = $vararg_buffer3; //@line 4024
           HEAP32[$AsyncCtx38 + 20 >> 2] = $4; //@line 4026
           HEAP32[$AsyncCtx38 + 24 >> 2] = $2; //@line 4028
           HEAP32[$AsyncCtx38 + 28 >> 2] = $3; //@line 4030
           HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer18; //@line 4032
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer18; //@line 4034
           HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer20; //@line 4036
           HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer20; //@line 4038
           HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer23; //@line 4040
           HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer23; //@line 4042
           HEAP8[$AsyncCtx38 + 56 >> 0] = $$1$off0 & 1; //@line 4045
           HEAP32[$AsyncCtx38 + 60 >> 2] = $55; //@line 4047
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer15; //@line 4049
           HEAP32[$AsyncCtx38 + 68 >> 2] = $1; //@line 4051
           HEAP32[$AsyncCtx38 + 72 >> 2] = $vararg_buffer15; //@line 4053
           HEAP32[$AsyncCtx38 + 76 >> 2] = $vararg_buffer12; //@line 4055
           HEAP32[$AsyncCtx38 + 80 >> 2] = $vararg_buffer12; //@line 4057
           HEAP32[$AsyncCtx38 + 84 >> 2] = $vararg_buffer9; //@line 4059
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer9; //@line 4061
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer6; //@line 4063
           HEAP32[$AsyncCtx38 + 96 >> 2] = $vararg_buffer6; //@line 4065
           sp = STACKTOP; //@line 4066
           STACKTOP = sp; //@line 4067
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 4069
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 4070
           $151 = _snprintf($$1143, $$1145, 11964, $vararg_buffer3) | 0; //@line 4071
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 4073
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 4078
            $$3147 = $$1145 - $$10 | 0; //@line 4078
            label = 44; //@line 4079
            break;
           } else {
            $$3147168 = $$1145; //@line 4082
            $$3169 = $$1143; //@line 4082
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 4087
          $$3147 = $$1145; //@line 4087
          label = 44; //@line 4088
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 4094
          $$3169 = $$3; //@line 4094
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 4099
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 4105
          $$5156 = _snprintf($$3169, $$3147168, 11967, $vararg_buffer6) | 0; //@line 4107
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 4111
          $$5156 = _snprintf($$3169, $$3147168, 11982, $vararg_buffer9) | 0; //@line 4113
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 4117
          $$5156 = _snprintf($$3169, $$3147168, 11997, $vararg_buffer12) | 0; //@line 4119
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 4123
          $$5156 = _snprintf($$3169, $$3147168, 12012, $vararg_buffer15) | 0; //@line 4125
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 12027, $vararg_buffer18) | 0; //@line 4130
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 4134
        $168 = $$3169 + $$5156$ | 0; //@line 4136
        $169 = $$3147168 - $$5156$ | 0; //@line 4137
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4141
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 4142
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 133; //@line 4145
          HEAP32[$AsyncCtx56 + 4 >> 2] = $vararg_buffer20; //@line 4147
          HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer20; //@line 4149
          HEAP8[$AsyncCtx56 + 12 >> 0] = $$1$off0 & 1; //@line 4152
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer23; //@line 4154
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer23; //@line 4156
          HEAP32[$AsyncCtx56 + 24 >> 2] = $169; //@line 4158
          HEAP32[$AsyncCtx56 + 28 >> 2] = $168; //@line 4160
          sp = STACKTOP; //@line 4161
          STACKTOP = sp; //@line 4162
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 4164
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 4166
         $181 = $168 + $$13 | 0; //@line 4168
         $182 = $169 - $$13 | 0; //@line 4169
         if (($$13 | 0) > 0) {
          $184 = HEAP32[173] | 0; //@line 4172
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4177
            $186 = FUNCTION_TABLE_i[$184 & 7]() | 0; //@line 4178
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 134; //@line 4181
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 4183
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 4185
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 4187
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 4189
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 4192
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 4194
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 4196
             sp = STACKTOP; //@line 4197
             STACKTOP = sp; //@line 4198
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 4200
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 4201
             $194 = _snprintf($181, $182, 11964, $vararg_buffer20) | 0; //@line 4202
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 4204
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 4209
              $$6150 = $182 - $$18 | 0; //@line 4209
              $$9 = $$18; //@line 4209
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 4216
            $$6150 = $182; //@line 4216
            $$9 = $$13; //@line 4216
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 12042, $vararg_buffer23) | 0; //@line 4225
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[174] | 0; //@line 4231
      $202 = HEAP32[167] | 0; //@line 4232
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4233
      FUNCTION_TABLE_vi[$201 & 1023]($202); //@line 4234
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 135; //@line 4237
       sp = STACKTOP; //@line 4238
       STACKTOP = sp; //@line 4239
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 4241
       break;
      }
     }
    } while (0);
    HEAP32[171] = HEAP32[169]; //@line 4247
   }
  }
 } while (0);
 $204 = HEAP32[177] | 0; //@line 4251
 if (!$204) {
  STACKTOP = sp; //@line 4254
  return;
 }
 $206 = HEAP32[178] | 0; //@line 4256
 HEAP32[178] = 0; //@line 4257
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4258
 FUNCTION_TABLE_v[$204 & 7](); //@line 4259
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 136; //@line 4262
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 4264
  sp = STACKTOP; //@line 4265
  STACKTOP = sp; //@line 4266
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 4268
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 4271
 } else {
  STACKTOP = sp; //@line 4273
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 4276
  $$pre = HEAP32[177] | 0; //@line 4277
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4278
  FUNCTION_TABLE_v[$$pre & 7](); //@line 4279
  if (___async) {
   label = 70; //@line 4282
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 4285
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 4288
  } else {
   label = 72; //@line 4290
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 137; //@line 4295
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 4297
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 4299
  sp = STACKTOP; //@line 4300
  STACKTOP = sp; //@line 4301
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 4304
  return;
 }
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$043 = 0, $$044 = 0, $$04750525456586062646668707274767880828486889092949698100102104106108 = 0, $$048 = 0, $1 = 0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $147 = 0, $149 = 0, $155 = 0, $156 = 0, $157 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $174 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $184 = 0, $24 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $53 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $72 = 0, $75 = 0, $79 = 0, $80 = 0, $87 = 0, $88 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5526
 $1 = $0 + 4 | 0; //@line 5527
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 5536
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5537
 FUNCTION_TABLE_v[$7 & 7](); //@line 5538
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 603; //@line 5541
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5543
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5545
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5547
  sp = STACKTOP; //@line 5548
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5551
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 5554
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5555
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 5556
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 604; //@line 5559
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 5561
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 5563
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 5565
  sp = STACKTOP; //@line 5566
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5569
 $18 = HEAP32[$14 >> 2] | 0; //@line 5570
 L10 : do {
  if (($18 | 0) < 32768) {
   if (($18 | 0) >= 128) {
    if (($18 | 0) < 2048) {
     switch ($18 | 0) {
     case 1024:
      {
       $$043 = 10; //@line 5580
       $$048 = $18; //@line 5580
       break L10;
       break;
      }
     case 512:
      {
       $$043 = 9; //@line 5585
       $$048 = $18; //@line 5585
       break L10;
       break;
      }
     case 256:
      {
       $$043 = 8; //@line 5590
       $$048 = $18; //@line 5590
       break L10;
       break;
      }
     case 128:
      {
       $$043 = 7; //@line 5595
       $$048 = $18; //@line 5595
       break L10;
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5600
       label = 60; //@line 5601
       break L10;
      }
     }
    }
    if (($18 | 0) < 8192) {
     switch ($18 | 0) {
     case 4096:
      {
       $$043 = 12; //@line 5610
       $$048 = $18; //@line 5610
       break L10;
       break;
      }
     case 2048:
      {
       $$043 = 11; //@line 5615
       $$048 = $18; //@line 5615
       break L10;
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5620
       label = 60; //@line 5621
       break L10;
      }
     }
    }
    if (($18 | 0) < 16384) {
     switch ($18 | 0) {
     case 8192:
      {
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5633
       label = 60; //@line 5634
       break L10;
      }
     }
     $$043 = 13; //@line 5638
     $$048 = $18; //@line 5638
     break;
    } else {
     switch ($18 | 0) {
     case 16384:
      {
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5646
       label = 60; //@line 5647
       break L10;
      }
     }
     $$043 = 14; //@line 5651
     $$048 = $18; //@line 5651
     break;
    }
   }
   if (($18 | 0) >= 8) {
    switch ($18 | 0) {
    case 64:
     {
      $$043 = 6; //@line 5659
      $$048 = $18; //@line 5659
      break L10;
      break;
     }
    case 32:
     {
      $$043 = 5; //@line 5664
      $$048 = $18; //@line 5664
      break L10;
      break;
     }
    case 16:
     {
      $$043 = 4; //@line 5669
      $$048 = $18; //@line 5669
      break L10;
      break;
     }
    case 8:
     {
      $$043 = 3; //@line 5674
      $$048 = $18; //@line 5674
      break L10;
      break;
     }
    default:
     {
      $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5679
      label = 60; //@line 5680
      break L10;
     }
    }
   }
   if (($18 | 0) >= 2) {
    switch ($18 | 0) {
    case 4:
     {
      $$043 = 2; //@line 5689
      $$048 = $18; //@line 5689
      break L10;
      break;
     }
    case 2:
     {
      $$043 = 1; //@line 5694
      $$048 = $18; //@line 5694
      break L10;
      break;
     }
    default:
     {
      $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5699
      label = 60; //@line 5700
      break L10;
     }
    }
   }
   if (($18 | 0) < 0) {
    switch ($18 | 0) {
    case -2147483648:
     {
      $$043 = 31; //@line 5709
      $$048 = -2147483648; //@line 5709
      break L10;
      break;
     }
    default:
     {
      $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5714
      label = 60; //@line 5715
      break L10;
     }
    }
   }
   switch ($18 | 0) {
   case 0:
    {
     break;
    }
   default:
    {
     $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5725
     label = 60; //@line 5726
     break L10;
    }
   }
   $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5730
   _mbed_assert_internal(14438, 14440, 41); //@line 5731
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 605; //@line 5734
    HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 5736
    HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 5738
    HEAP32[$AsyncCtx19 + 12 >> 2] = $0; //@line 5740
    HEAP32[$AsyncCtx19 + 16 >> 2] = $14; //@line 5742
    sp = STACKTOP; //@line 5743
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5746
    $$04750525456586062646668707274767880828486889092949698100102104106108 = 1e6; //@line 5747
    label = 60; //@line 5748
    break;
   }
  } else {
   if (($18 | 0) < 8388608) {
    if (($18 | 0) < 524288) {
     if (($18 | 0) < 131072) {
      if (($18 | 0) < 65536) {
       switch ($18 | 0) {
       case 32768:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5765
         label = 60; //@line 5766
         break L10;
        }
       }
       $$043 = 15; //@line 5770
       $$048 = $18; //@line 5770
       break;
      } else {
       switch ($18 | 0) {
       case 65536:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5778
         label = 60; //@line 5779
         break L10;
        }
       }
       $$043 = 16; //@line 5783
       $$048 = $18; //@line 5783
       break;
      }
     } else {
      if (($18 | 0) < 262144) {
       switch ($18 | 0) {
       case 131072:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5794
         label = 60; //@line 5795
         break L10;
        }
       }
       $$043 = 17; //@line 5799
       $$048 = $18; //@line 5799
       break;
      } else {
       switch ($18 | 0) {
       case 262144:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5807
         label = 60; //@line 5808
         break L10;
        }
       }
       $$043 = 18; //@line 5812
       $$048 = $18; //@line 5812
       break;
      }
     }
    } else {
     if (($18 | 0) < 2097152) {
      if (($18 | 0) < 1048576) {
       switch ($18 | 0) {
       case 524288:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5826
         label = 60; //@line 5827
         break L10;
        }
       }
       $$043 = 19; //@line 5831
       $$048 = $18; //@line 5831
       break;
      } else {
       switch ($18 | 0) {
       case 1048576:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5839
         label = 60; //@line 5840
         break L10;
        }
       }
       $$043 = 20; //@line 5844
       $$048 = $18; //@line 5844
       break;
      }
     } else {
      if (($18 | 0) < 4194304) {
       switch ($18 | 0) {
       case 2097152:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5855
         label = 60; //@line 5856
         break L10;
        }
       }
       $$043 = 21; //@line 5860
       $$048 = $18; //@line 5860
       break;
      } else {
       switch ($18 | 0) {
       case 4194304:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5868
         label = 60; //@line 5869
         break L10;
        }
       }
       $$043 = 22; //@line 5873
       $$048 = $18; //@line 5873
       break;
      }
     }
    }
   } else {
    if (($18 | 0) < 134217728) {
     if (($18 | 0) < 33554432) {
      if (($18 | 0) < 16777216) {
       switch ($18 | 0) {
       case 8388608:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5890
         label = 60; //@line 5891
         break L10;
        }
       }
       $$043 = 23; //@line 5895
       $$048 = $18; //@line 5895
       break;
      } else {
       switch ($18 | 0) {
       case 16777216:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5903
         label = 60; //@line 5904
         break L10;
        }
       }
       $$043 = 24; //@line 5908
       $$048 = $18; //@line 5908
       break;
      }
     } else {
      if (($18 | 0) < 67108864) {
       switch ($18 | 0) {
       case 33554432:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5919
         label = 60; //@line 5920
         break L10;
        }
       }
       $$043 = 25; //@line 5924
       $$048 = $18; //@line 5924
       break;
      } else {
       switch ($18 | 0) {
       case 67108864:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5932
         label = 60; //@line 5933
         break L10;
        }
       }
       $$043 = 26; //@line 5937
       $$048 = $18; //@line 5937
       break;
      }
     }
    } else {
     if (($18 | 0) < 536870912) {
      if (($18 | 0) < 268435456) {
       switch ($18 | 0) {
       case 134217728:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5951
         label = 60; //@line 5952
         break L10;
        }
       }
       $$043 = 27; //@line 5956
       $$048 = $18; //@line 5956
       break;
      } else {
       switch ($18 | 0) {
       case 268435456:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5964
         label = 60; //@line 5965
         break L10;
        }
       }
       $$043 = 28; //@line 5969
       $$048 = $18; //@line 5969
       break;
      }
     } else {
      if (($18 | 0) < 1073741824) {
       switch ($18 | 0) {
       case 536870912:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5980
         label = 60; //@line 5981
         break L10;
        }
       }
       $$043 = 29; //@line 5985
       $$048 = $18; //@line 5985
       break;
      } else {
       switch ($18 | 0) {
       case 1073741824:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5993
         label = 60; //@line 5994
         break L10;
        }
       }
       $$043 = 30; //@line 5998
       $$048 = $18; //@line 5998
       break;
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 60) {
  $$043 = 0; //@line 6007
  $$048 = $$04750525456586062646668707274767880828486889092949698100102104106108; //@line 6007
 }
 $24 = HEAP32[$14 + 4 >> 2] | 0; //@line 6010
 do {
  if (($24 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6015
   _mbed_assert_internal(14438, 14440, 55); //@line 6016
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 606; //@line 6019
    HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 6021
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 6023
    HEAP32[$AsyncCtx16 + 12 >> 2] = $$048; //@line 6025
    HEAP8[$AsyncCtx16 + 16 >> 0] = $$043; //@line 6027
    HEAP32[$AsyncCtx16 + 20 >> 2] = $0; //@line 6029
    sp = STACKTOP; //@line 6030
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 6033
    $$044 = 32; //@line 6034
    break;
   }
  } else {
   $$044 = $24; //@line 6038
  }
 } while (0);
 $32 = 7 << $$044 + -4; //@line 6042
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 6043
 $34 = tempRet0; //@line 6044
 $35 = _i64Add($$048 | 0, 0, -1, -1) | 0; //@line 6045
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 6047
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$048 | 0, 0) | 0; //@line 6049
 $40 = tempRet0; //@line 6050
 $41 = HEAP32[$1 >> 2] | 0; //@line 6051
 HEAP32[$41 >> 2] = 0; //@line 6052
 HEAP32[$41 + 4 >> 2] = 0; //@line 6054
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6057
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 6058
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 6059
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 607; //@line 6062
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 6064
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$048; //@line 6066
  HEAP8[$AsyncCtx6 + 12 >> 0] = $$043; //@line 6068
  HEAP32[$AsyncCtx6 + 16 >> 2] = $$044; //@line 6070
  HEAP32[$AsyncCtx6 + 20 >> 2] = $32; //@line 6072
  $53 = $AsyncCtx6 + 24 | 0; //@line 6074
  HEAP32[$53 >> 2] = $39; //@line 6076
  HEAP32[$53 + 4 >> 2] = $40; //@line 6079
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 6081
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 6083
  sp = STACKTOP; //@line 6084
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 6087
 $59 = HEAP32[$1 >> 2] | 0; //@line 6088
 $60 = $59 + 32 | 0; //@line 6089
 HEAP32[$60 >> 2] = $46; //@line 6090
 $61 = $59 + 40 | 0; //@line 6091
 $62 = $61; //@line 6092
 HEAP32[$62 >> 2] = 0; //@line 6094
 HEAP32[$62 + 4 >> 2] = 0; //@line 6097
 $66 = $59 + 8 | 0; //@line 6098
 HEAP32[$66 >> 2] = $$048; //@line 6099
 $67 = $59 + 57 | 0; //@line 6100
 HEAP8[$67 >> 0] = $$043; //@line 6101
 $68 = _bitshift64Shl(1, 0, $$044 | 0) | 0; //@line 6102
 $70 = _i64Add($68 | 0, tempRet0 | 0, -1, 0) | 0; //@line 6104
 $72 = $59 + 12 | 0; //@line 6106
 HEAP32[$72 >> 2] = $70; //@line 6107
 HEAP32[$59 + 16 >> 2] = $32; //@line 6109
 $75 = $59 + 24 | 0; //@line 6111
 HEAP32[$75 >> 2] = $39; //@line 6113
 HEAP32[$75 + 4 >> 2] = $40; //@line 6116
 $79 = $59 + 48 | 0; //@line 6117
 $80 = $79; //@line 6118
 HEAP32[$80 >> 2] = 0; //@line 6120
 HEAP32[$80 + 4 >> 2] = 0; //@line 6123
 HEAP8[$59 + 56 >> 0] = 1; //@line 6125
 $87 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6128
 $AsyncCtx9 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6129
 $88 = FUNCTION_TABLE_i[$87 & 7]() | 0; //@line 6130
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 608; //@line 6133
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 6135
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 6137
  HEAP32[$AsyncCtx9 + 12 >> 2] = $60; //@line 6139
  HEAP32[$AsyncCtx9 + 16 >> 2] = $72; //@line 6141
  HEAP32[$AsyncCtx9 + 20 >> 2] = $66; //@line 6143
  HEAP32[$AsyncCtx9 + 24 >> 2] = $79; //@line 6145
  HEAP32[$AsyncCtx9 + 28 >> 2] = $67; //@line 6147
  HEAP32[$AsyncCtx9 + 32 >> 2] = $61; //@line 6149
  sp = STACKTOP; //@line 6150
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6153
 if (($88 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $104 = $88 - (HEAP32[$60 >> 2] | 0) & HEAP32[$72 >> 2]; //@line 6162
  HEAP32[$60 >> 2] = $88; //@line 6163
  $105 = HEAP32[$66 >> 2] | 0; //@line 6164
  do {
   if (($105 | 0) == 1e6) {
    $180 = $104; //@line 6168
    $181 = 0; //@line 6168
   } else {
    $107 = HEAP8[$67 >> 0] | 0; //@line 6170
    $109 = ___muldi3($104 | 0, 0, 1e6, 0) | 0; //@line 6172
    $110 = tempRet0; //@line 6173
    if (!($107 << 24 >> 24)) {
     $143 = ___udivdi3($109 | 0, $110 | 0, $105 | 0, 0) | 0; //@line 6175
     $144 = tempRet0; //@line 6176
     $145 = ___muldi3($143 | 0, $144 | 0, $105 | 0, 0) | 0; //@line 6177
     $147 = _i64Subtract($109 | 0, $110 | 0, $145 | 0, tempRet0 | 0) | 0; //@line 6179
     $149 = $61; //@line 6181
     $155 = _i64Add($147 | 0, tempRet0 | 0, HEAP32[$149 >> 2] | 0, HEAP32[$149 + 4 >> 2] | 0) | 0; //@line 6187
     $156 = tempRet0; //@line 6188
     $157 = $61; //@line 6189
     HEAP32[$157 >> 2] = $155; //@line 6191
     HEAP32[$157 + 4 >> 2] = $156; //@line 6194
     if ($156 >>> 0 < 0 | ($156 | 0) == 0 & $155 >>> 0 < $105 >>> 0) {
      $180 = $143; //@line 6201
      $181 = $144; //@line 6201
      break;
     }
     $166 = _i64Add($143 | 0, $144 | 0, 1, 0) | 0; //@line 6204
     $167 = tempRet0; //@line 6205
     $168 = _i64Subtract($155 | 0, $156 | 0, $105 | 0, 0) | 0; //@line 6206
     $170 = $61; //@line 6208
     HEAP32[$170 >> 2] = $168; //@line 6210
     HEAP32[$170 + 4 >> 2] = tempRet0; //@line 6213
     $180 = $166; //@line 6214
     $181 = $167; //@line 6214
     break;
    } else {
     $111 = $107 & 255; //@line 6217
     $112 = _bitshift64Lshr($109 | 0, $110 | 0, $111 | 0) | 0; //@line 6218
     $113 = tempRet0; //@line 6219
     $114 = _bitshift64Shl($112 | 0, $113 | 0, $111 | 0) | 0; //@line 6220
     $116 = _i64Subtract($109 | 0, $110 | 0, $114 | 0, tempRet0 | 0) | 0; //@line 6222
     $118 = $61; //@line 6224
     $124 = _i64Add(HEAP32[$118 >> 2] | 0, HEAP32[$118 + 4 >> 2] | 0, $116 | 0, tempRet0 | 0) | 0; //@line 6230
     $125 = tempRet0; //@line 6231
     $126 = $61; //@line 6232
     HEAP32[$126 >> 2] = $124; //@line 6234
     HEAP32[$126 + 4 >> 2] = $125; //@line 6237
     if ($125 >>> 0 < 0 | ($125 | 0) == 0 & $124 >>> 0 < $105 >>> 0) {
      $180 = $112; //@line 6244
      $181 = $113; //@line 6244
      break;
     }
     $135 = _i64Add($112 | 0, $113 | 0, 1, 0) | 0; //@line 6247
     $136 = tempRet0; //@line 6248
     $137 = _i64Subtract($124 | 0, $125 | 0, $105 | 0, 0) | 0; //@line 6249
     $139 = $61; //@line 6251
     HEAP32[$139 >> 2] = $137; //@line 6253
     HEAP32[$139 + 4 >> 2] = tempRet0; //@line 6256
     $180 = $135; //@line 6257
     $181 = $136; //@line 6257
     break;
    }
   }
  } while (0);
  $174 = $79; //@line 6262
  $182 = _i64Add(HEAP32[$174 >> 2] | 0, HEAP32[$174 + 4 >> 2] | 0, $180 | 0, $181 | 0) | 0; //@line 6268
  $184 = $79; //@line 6270
  HEAP32[$184 >> 2] = $182; //@line 6272
  HEAP32[$184 + 4 >> 2] = tempRet0; //@line 6275
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6277
 _schedule_interrupt($0); //@line 6278
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 609; //@line 6281
  sp = STACKTOP; //@line 6282
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6285
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i25 = 0, $$pre$i$i38 = 0, $$pre$i$i54 = 0, $$pre$i$i70 = 0, $$pre123 = 0, $$pre124 = 0, $$pre125 = 0, $$pre126 = 0, $10 = 0, $110 = 0, $111 = 0, $123 = 0, $124 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = 0, $149 = 0, $150 = 0, $161 = 0, $162 = 0, $168 = 0, $169 = 0, $171 = 0, $172 = 0, $175 = 0, $185 = 0, $186 = 0, $196 = 0, $197 = 0, $2 = 0, $204 = 0, $209 = 0, $214 = 0, $23 = 0, $24 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $55 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $82 = 0, $83 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx5 = 0, $AsyncCtx50 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5023
 STACKTOP = STACKTOP + 16 | 0; //@line 5024
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5024
 $2 = sp; //@line 5025
 $3 = $2 + 12 | 0; //@line 5026
 HEAP32[$2 >> 2] = 166; //@line 5027
 HEAP32[$2 + 4 >> 2] = 0; //@line 5029
 HEAP32[$2 + 8 >> 2] = $0; //@line 5031
 HEAP32[$3 >> 2] = 824; //@line 5032
 $4 = $0 + 2384 | 0; //@line 5033
 do {
  if (($4 | 0) == ($2 | 0)) {
   $38 = 824; //@line 5037
   label = 10; //@line 5038
  } else {
   $6 = $0 + 2396 | 0; //@line 5040
   $7 = HEAP32[$6 >> 2] | 0; //@line 5041
   if (!$7) {
    $23 = 824; //@line 5044
   } else {
    $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 5047
    $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 5048
    FUNCTION_TABLE_vi[$10 & 1023]($4); //@line 5049
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 167; //@line 5052
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5054
     HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 5056
     HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 5058
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 5060
     HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 5062
     HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 5064
     HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 5066
     HEAP32[$AsyncCtx + 32 >> 2] = $4; //@line 5068
     HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 5070
     HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 5072
     sp = STACKTOP; //@line 5073
     STACKTOP = sp; //@line 5074
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5076
    $$pre = HEAP32[$3 >> 2] | 0; //@line 5077
    if (!$$pre) {
     HEAP32[$6 >> 2] = 0; //@line 5080
     break;
    } else {
     $23 = $$pre; //@line 5083
    }
   }
   $24 = HEAP32[$23 + 4 >> 2] | 0; //@line 5087
   $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 5088
   FUNCTION_TABLE_vii[$24 & 15]($4, $2); //@line 5089
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 168; //@line 5092
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 5094
    HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 5096
    HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 5098
    HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 5100
    HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 5102
    HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 5104
    HEAP32[$AsyncCtx2 + 28 >> 2] = $2; //@line 5106
    HEAP32[$AsyncCtx2 + 32 >> 2] = $3; //@line 5108
    HEAP32[$AsyncCtx2 + 36 >> 2] = $6; //@line 5110
    HEAP32[$AsyncCtx2 + 40 >> 2] = $2; //@line 5112
    sp = STACKTOP; //@line 5113
    STACKTOP = sp; //@line 5114
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5116
    $$pre$i$i = HEAP32[$3 >> 2] | 0; //@line 5117
    HEAP32[$6 >> 2] = $$pre$i$i; //@line 5119
    if (!$$pre$i$i) {
     break;
    } else {
     $38 = $$pre$i$i; //@line 5124
     label = 10; //@line 5125
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $39 = HEAP32[$38 + 8 >> 2] | 0; //@line 5134
   $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5135
   FUNCTION_TABLE_vi[$39 & 1023]($2); //@line 5136
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 169; //@line 5139
    HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 5141
    HEAP32[$AsyncCtx5 + 8 >> 2] = $2; //@line 5143
    HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 5145
    HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 5147
    HEAP32[$AsyncCtx5 + 20 >> 2] = $2; //@line 5149
    HEAP32[$AsyncCtx5 + 24 >> 2] = $4; //@line 5151
    HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 5153
    HEAP32[$AsyncCtx5 + 32 >> 2] = $2; //@line 5155
    sp = STACKTOP; //@line 5156
    STACKTOP = sp; //@line 5157
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 5159
    break;
   }
  }
 } while (0);
 $48 = $2 + 12 | 0; //@line 5164
 HEAP32[$2 >> 2] = 6; //@line 5165
 HEAP32[$2 + 4 >> 2] = 0; //@line 5167
 HEAP32[$2 + 8 >> 2] = $0; //@line 5169
 HEAP32[$48 >> 2] = 836; //@line 5170
 $49 = $0 + 2416 | 0; //@line 5171
 do {
  if (($49 | 0) == ($2 | 0)) {
   $82 = 836; //@line 5175
   label = 22; //@line 5176
  } else {
   $51 = $0 + 2428 | 0; //@line 5178
   $52 = HEAP32[$51 >> 2] | 0; //@line 5179
   if (!$52) {
    $68 = 836; //@line 5182
   } else {
    $55 = HEAP32[$52 + 8 >> 2] | 0; //@line 5185
    $AsyncCtx8 = _emscripten_alloc_async_context(44, sp) | 0; //@line 5186
    FUNCTION_TABLE_vi[$55 & 1023]($49); //@line 5187
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 170; //@line 5190
     HEAP32[$AsyncCtx8 + 4 >> 2] = $51; //@line 5192
     HEAP32[$AsyncCtx8 + 8 >> 2] = $2; //@line 5194
     HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 5196
     HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 5198
     HEAP32[$AsyncCtx8 + 20 >> 2] = $1; //@line 5200
     HEAP32[$AsyncCtx8 + 24 >> 2] = $49; //@line 5202
     HEAP32[$AsyncCtx8 + 28 >> 2] = $48; //@line 5204
     HEAP32[$AsyncCtx8 + 32 >> 2] = $4; //@line 5206
     HEAP32[$AsyncCtx8 + 36 >> 2] = $2; //@line 5208
     HEAP32[$AsyncCtx8 + 40 >> 2] = $2; //@line 5210
     sp = STACKTOP; //@line 5211
     STACKTOP = sp; //@line 5212
     return;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 5214
    $$pre123 = HEAP32[$48 >> 2] | 0; //@line 5215
    if (!$$pre123) {
     HEAP32[$51 >> 2] = 0; //@line 5218
     break;
    } else {
     $68 = $$pre123; //@line 5221
    }
   }
   $69 = HEAP32[$68 + 4 >> 2] | 0; //@line 5225
   $AsyncCtx11 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5226
   FUNCTION_TABLE_vii[$69 & 15]($49, $2); //@line 5227
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 171; //@line 5230
    HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 5232
    HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 5234
    HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 5236
    HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 5238
    HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 5240
    HEAP32[$AsyncCtx11 + 24 >> 2] = $2; //@line 5242
    HEAP32[$AsyncCtx11 + 28 >> 2] = $48; //@line 5244
    HEAP32[$AsyncCtx11 + 32 >> 2] = $51; //@line 5246
    HEAP32[$AsyncCtx11 + 36 >> 2] = $2; //@line 5248
    sp = STACKTOP; //@line 5249
    STACKTOP = sp; //@line 5250
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5252
    $$pre$i$i25 = HEAP32[$48 >> 2] | 0; //@line 5253
    HEAP32[$51 >> 2] = $$pre$i$i25; //@line 5255
    if (!$$pre$i$i25) {
     break;
    } else {
     $82 = $$pre$i$i25; //@line 5260
     label = 22; //@line 5261
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $83 = HEAP32[$82 + 8 >> 2] | 0; //@line 5270
   $AsyncCtx14 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5271
   FUNCTION_TABLE_vi[$83 & 1023]($2); //@line 5272
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 172; //@line 5275
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 5277
    HEAP32[$AsyncCtx14 + 8 >> 2] = $2; //@line 5279
    HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 5281
    HEAP32[$AsyncCtx14 + 16 >> 2] = $1; //@line 5283
    HEAP32[$AsyncCtx14 + 20 >> 2] = $4; //@line 5285
    HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 5287
    HEAP32[$AsyncCtx14 + 28 >> 2] = $2; //@line 5289
    sp = STACKTOP; //@line 5290
    STACKTOP = sp; //@line 5291
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5293
    break;
   }
  }
 } while (0);
 $91 = $2 + 12 | 0; //@line 5298
 HEAP32[$2 >> 2] = 173; //@line 5299
 HEAP32[$2 + 4 >> 2] = 0; //@line 5301
 HEAP32[$2 + 8 >> 2] = $0; //@line 5303
 HEAP32[$91 >> 2] = 824; //@line 5304
 $92 = $0 + 2448 | 0; //@line 5305
 do {
  if (($92 | 0) == ($2 | 0)) {
   $123 = 824; //@line 5309
   label = 34; //@line 5310
  } else {
   $94 = $0 + 2460 | 0; //@line 5312
   $95 = HEAP32[$94 >> 2] | 0; //@line 5313
   if (!$95) {
    $110 = 824; //@line 5316
   } else {
    $98 = HEAP32[$95 + 8 >> 2] | 0; //@line 5319
    $AsyncCtx17 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5320
    FUNCTION_TABLE_vi[$98 & 1023]($92); //@line 5321
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 174; //@line 5324
     HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 5326
     HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 5328
     HEAP32[$AsyncCtx17 + 12 >> 2] = $4; //@line 5330
     HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 5332
     HEAP32[$AsyncCtx17 + 20 >> 2] = $91; //@line 5334
     HEAP32[$AsyncCtx17 + 24 >> 2] = $94; //@line 5336
     HEAP32[$AsyncCtx17 + 28 >> 2] = $2; //@line 5338
     HEAP32[$AsyncCtx17 + 32 >> 2] = $2; //@line 5340
     HEAP32[$AsyncCtx17 + 36 >> 2] = $92; //@line 5342
     sp = STACKTOP; //@line 5343
     STACKTOP = sp; //@line 5344
     return;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 5346
    $$pre124 = HEAP32[$91 >> 2] | 0; //@line 5347
    if (!$$pre124) {
     HEAP32[$94 >> 2] = 0; //@line 5350
     break;
    } else {
     $110 = $$pre124; //@line 5353
    }
   }
   $111 = HEAP32[$110 + 4 >> 2] | 0; //@line 5357
   $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5358
   FUNCTION_TABLE_vii[$111 & 15]($92, $2); //@line 5359
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 175; //@line 5362
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 5364
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 5366
    HEAP32[$AsyncCtx20 + 12 >> 2] = $4; //@line 5368
    HEAP32[$AsyncCtx20 + 16 >> 2] = $2; //@line 5370
    HEAP32[$AsyncCtx20 + 20 >> 2] = $91; //@line 5372
    HEAP32[$AsyncCtx20 + 24 >> 2] = $94; //@line 5374
    HEAP32[$AsyncCtx20 + 28 >> 2] = $2; //@line 5376
    HEAP32[$AsyncCtx20 + 32 >> 2] = $2; //@line 5378
    sp = STACKTOP; //@line 5379
    STACKTOP = sp; //@line 5380
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 5382
    $$pre$i$i38 = HEAP32[$91 >> 2] | 0; //@line 5383
    HEAP32[$94 >> 2] = $$pre$i$i38; //@line 5385
    if (!$$pre$i$i38) {
     break;
    } else {
     $123 = $$pre$i$i38; //@line 5390
     label = 34; //@line 5391
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $124 = HEAP32[$123 + 8 >> 2] | 0; //@line 5400
   $AsyncCtx23 = _emscripten_alloc_async_context(28, sp) | 0; //@line 5401
   FUNCTION_TABLE_vi[$124 & 1023]($2); //@line 5402
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 176; //@line 5405
    HEAP32[$AsyncCtx23 + 4 >> 2] = $1; //@line 5407
    HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 5409
    HEAP32[$AsyncCtx23 + 12 >> 2] = $4; //@line 5411
    HEAP32[$AsyncCtx23 + 16 >> 2] = $2; //@line 5413
    HEAP32[$AsyncCtx23 + 20 >> 2] = $2; //@line 5415
    HEAP32[$AsyncCtx23 + 24 >> 2] = $2; //@line 5417
    sp = STACKTOP; //@line 5418
    STACKTOP = sp; //@line 5419
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5421
    break;
   }
  }
 } while (0);
 $131 = $2 + 12 | 0; //@line 5426
 HEAP32[$2 >> 2] = 177; //@line 5427
 HEAP32[$2 + 4 >> 2] = 0; //@line 5429
 HEAP32[$2 + 8 >> 2] = $0; //@line 5431
 HEAP32[$131 >> 2] = 824; //@line 5432
 $132 = $0 + 2400 | 0; //@line 5433
 do {
  if (($132 | 0) == ($2 | 0)) {
   $161 = 824; //@line 5437
   label = 46; //@line 5438
  } else {
   $134 = $0 + 2412 | 0; //@line 5440
   $135 = HEAP32[$134 >> 2] | 0; //@line 5441
   if (!$135) {
    $149 = 824; //@line 5444
   } else {
    $138 = HEAP32[$135 + 8 >> 2] | 0; //@line 5447
    $AsyncCtx26 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5448
    FUNCTION_TABLE_vi[$138 & 1023]($132); //@line 5449
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 178; //@line 5452
     HEAP32[$AsyncCtx26 + 4 >> 2] = $1; //@line 5454
     HEAP32[$AsyncCtx26 + 8 >> 2] = $131; //@line 5456
     HEAP32[$AsyncCtx26 + 12 >> 2] = $134; //@line 5458
     HEAP32[$AsyncCtx26 + 16 >> 2] = $0; //@line 5460
     HEAP32[$AsyncCtx26 + 20 >> 2] = $2; //@line 5462
     HEAP32[$AsyncCtx26 + 24 >> 2] = $4; //@line 5464
     HEAP32[$AsyncCtx26 + 28 >> 2] = $2; //@line 5466
     HEAP32[$AsyncCtx26 + 32 >> 2] = $132; //@line 5468
     sp = STACKTOP; //@line 5469
     STACKTOP = sp; //@line 5470
     return;
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 5472
    $$pre125 = HEAP32[$131 >> 2] | 0; //@line 5473
    if (!$$pre125) {
     HEAP32[$134 >> 2] = 0; //@line 5476
     break;
    } else {
     $149 = $$pre125; //@line 5479
    }
   }
   $150 = HEAP32[$149 + 4 >> 2] | 0; //@line 5483
   $AsyncCtx29 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5484
   FUNCTION_TABLE_vii[$150 & 15]($132, $2); //@line 5485
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 179; //@line 5488
    HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 5490
    HEAP32[$AsyncCtx29 + 8 >> 2] = $131; //@line 5492
    HEAP32[$AsyncCtx29 + 12 >> 2] = $134; //@line 5494
    HEAP32[$AsyncCtx29 + 16 >> 2] = $0; //@line 5496
    HEAP32[$AsyncCtx29 + 20 >> 2] = $2; //@line 5498
    HEAP32[$AsyncCtx29 + 24 >> 2] = $4; //@line 5500
    HEAP32[$AsyncCtx29 + 28 >> 2] = $2; //@line 5502
    sp = STACKTOP; //@line 5503
    STACKTOP = sp; //@line 5504
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 5506
    $$pre$i$i54 = HEAP32[$131 >> 2] | 0; //@line 5507
    HEAP32[$134 >> 2] = $$pre$i$i54; //@line 5509
    if (!$$pre$i$i54) {
     break;
    } else {
     $161 = $$pre$i$i54; //@line 5514
     label = 46; //@line 5515
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $162 = HEAP32[$161 + 8 >> 2] | 0; //@line 5524
   $AsyncCtx32 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5525
   FUNCTION_TABLE_vi[$162 & 1023]($2); //@line 5526
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 180; //@line 5529
    HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 5531
    HEAP32[$AsyncCtx32 + 8 >> 2] = $0; //@line 5533
    HEAP32[$AsyncCtx32 + 12 >> 2] = $4; //@line 5535
    HEAP32[$AsyncCtx32 + 16 >> 2] = $2; //@line 5537
    HEAP32[$AsyncCtx32 + 20 >> 2] = $2; //@line 5539
    sp = STACKTOP; //@line 5540
    STACKTOP = sp; //@line 5541
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 5543
    break;
   }
  }
 } while (0);
 $168 = $2 + 12 | 0; //@line 5548
 HEAP32[$2 >> 2] = 181; //@line 5549
 HEAP32[$2 + 4 >> 2] = 0; //@line 5551
 HEAP32[$2 + 8 >> 2] = $0; //@line 5553
 HEAP32[$168 >> 2] = 824; //@line 5554
 $169 = $0 + 2432 | 0; //@line 5555
 do {
  if (($169 | 0) == ($2 | 0)) {
   $196 = 824; //@line 5559
   label = 58; //@line 5560
  } else {
   $171 = $0 + 2444 | 0; //@line 5562
   $172 = HEAP32[$171 >> 2] | 0; //@line 5563
   if (!$172) {
    $185 = 824; //@line 5566
   } else {
    $175 = HEAP32[$172 + 8 >> 2] | 0; //@line 5569
    $AsyncCtx35 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5570
    FUNCTION_TABLE_vi[$175 & 1023]($169); //@line 5571
    if (___async) {
     HEAP32[$AsyncCtx35 >> 2] = 182; //@line 5574
     HEAP32[$AsyncCtx35 + 4 >> 2] = $168; //@line 5576
     HEAP32[$AsyncCtx35 + 8 >> 2] = $171; //@line 5578
     HEAP32[$AsyncCtx35 + 12 >> 2] = $169; //@line 5580
     HEAP32[$AsyncCtx35 + 16 >> 2] = $2; //@line 5582
     HEAP32[$AsyncCtx35 + 20 >> 2] = $0; //@line 5584
     HEAP32[$AsyncCtx35 + 24 >> 2] = $1; //@line 5586
     HEAP32[$AsyncCtx35 + 28 >> 2] = $4; //@line 5588
     sp = STACKTOP; //@line 5589
     STACKTOP = sp; //@line 5590
     return;
    }
    _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5592
    $$pre126 = HEAP32[$168 >> 2] | 0; //@line 5593
    if (!$$pre126) {
     HEAP32[$171 >> 2] = 0; //@line 5596
     break;
    } else {
     $185 = $$pre126; //@line 5599
    }
   }
   $186 = HEAP32[$185 + 4 >> 2] | 0; //@line 5603
   $AsyncCtx38 = _emscripten_alloc_async_context(28, sp) | 0; //@line 5604
   FUNCTION_TABLE_vii[$186 & 15]($169, $2); //@line 5605
   if (___async) {
    HEAP32[$AsyncCtx38 >> 2] = 183; //@line 5608
    HEAP32[$AsyncCtx38 + 4 >> 2] = $168; //@line 5610
    HEAP32[$AsyncCtx38 + 8 >> 2] = $171; //@line 5612
    HEAP32[$AsyncCtx38 + 12 >> 2] = $2; //@line 5614
    HEAP32[$AsyncCtx38 + 16 >> 2] = $0; //@line 5616
    HEAP32[$AsyncCtx38 + 20 >> 2] = $1; //@line 5618
    HEAP32[$AsyncCtx38 + 24 >> 2] = $4; //@line 5620
    sp = STACKTOP; //@line 5621
    STACKTOP = sp; //@line 5622
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx38 | 0); //@line 5624
    $$pre$i$i70 = HEAP32[$168 >> 2] | 0; //@line 5625
    HEAP32[$171 >> 2] = $$pre$i$i70; //@line 5627
    if (!$$pre$i$i70) {
     break;
    } else {
     $196 = $$pre$i$i70; //@line 5632
     label = 58; //@line 5633
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 58) {
   $197 = HEAP32[$196 + 8 >> 2] | 0; //@line 5642
   $AsyncCtx41 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5643
   FUNCTION_TABLE_vi[$197 & 1023]($2); //@line 5644
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 184; //@line 5647
    HEAP32[$AsyncCtx41 + 4 >> 2] = $2; //@line 5649
    HEAP32[$AsyncCtx41 + 8 >> 2] = $0; //@line 5651
    HEAP32[$AsyncCtx41 + 12 >> 2] = $1; //@line 5653
    HEAP32[$AsyncCtx41 + 16 >> 2] = $4; //@line 5655
    sp = STACKTOP; //@line 5656
    STACKTOP = sp; //@line 5657
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx41 | 0); //@line 5659
    break;
   }
  }
 } while (0);
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($0, $1); //@line 5664
 $204 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 5667
 $AsyncCtx44 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5668
 FUNCTION_TABLE_vi[$204 & 1023]($1); //@line 5669
 if (___async) {
  HEAP32[$AsyncCtx44 >> 2] = 185; //@line 5672
  HEAP32[$AsyncCtx44 + 4 >> 2] = $1; //@line 5674
  HEAP32[$AsyncCtx44 + 8 >> 2] = $4; //@line 5676
  HEAP32[$AsyncCtx44 + 12 >> 2] = $1; //@line 5678
  sp = STACKTOP; //@line 5679
  STACKTOP = sp; //@line 5680
  return;
 }
 _emscripten_free_async_context($AsyncCtx44 | 0); //@line 5682
 $209 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 5684
 $AsyncCtx47 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5685
 FUNCTION_TABLE_vii[$209 & 15]($1, $4); //@line 5686
 if (___async) {
  HEAP32[$AsyncCtx47 >> 2] = 186; //@line 5689
  HEAP32[$AsyncCtx47 + 4 >> 2] = $1; //@line 5691
  HEAP32[$AsyncCtx47 + 8 >> 2] = $1; //@line 5693
  sp = STACKTOP; //@line 5694
  STACKTOP = sp; //@line 5695
  return;
 }
 _emscripten_free_async_context($AsyncCtx47 | 0); //@line 5697
 $214 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 5700
 $AsyncCtx50 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5701
 FUNCTION_TABLE_vi[$214 & 1023]($1); //@line 5702
 if (___async) {
  HEAP32[$AsyncCtx50 >> 2] = 187; //@line 5705
  sp = STACKTOP; //@line 5706
  STACKTOP = sp; //@line 5707
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx50 | 0); //@line 5709
  STACKTOP = sp; //@line 5710
  return;
 }
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23706
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23708
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23710
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 23712
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23714
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23718
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23720
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23722
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23724
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23726
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23728
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23730
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23732
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 23734
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23736
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 23738
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 23740
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 23742
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 23744
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 23746
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 23748
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 23750
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 23752
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 23754
 HEAP32[178] = (HEAP32[178] | 0) + 1; //@line 23759
 $53 = HEAP32[167] | 0; //@line 23760
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 23764
   do {
    if ($6 << 24 >> 24 > -1 & ($16 | 0) != 0) {
     $57 = HEAP32[164] | 0; //@line 23770
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $16) | 0) {
       $$0$i = 1; //@line 23777
       break;
      }
     }
     $62 = HEAP32[165] | 0; //@line 23781
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 23785
     } else {
      if (!(_strstr($62, $16) | 0)) {
       $$0$i = 1; //@line 23790
      } else {
       label = 9; //@line 23792
      }
     }
    } else {
     label = 9; //@line 23796
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 23800
   }
   if (!((HEAP32[174] | 0) != 0 & ((($16 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[171] = HEAP32[169]; //@line 23812
    break;
   }
   $73 = HEAPU8[652] | 0; //@line 23816
   $74 = $6 & 255; //@line 23817
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 23822
    $$lobit = $78 >>> 6; //@line 23823
    $79 = $$lobit & 255; //@line 23824
    $83 = ($73 & 32 | 0) == 0; //@line 23828
    $84 = HEAP32[168] | 0; //@line 23829
    $85 = HEAP32[167] | 0; //@line 23830
    $86 = $6 << 24 >> 24 == 1; //@line 23831
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 23834
     _vsnprintf($85, $84, $2, $4) | 0; //@line 23835
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 127; //@line 23838
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 23839
      $$expand_i1_val = $86 & 1; //@line 23840
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 23841
      sp = STACKTOP; //@line 23842
      return;
     }
     ___async_unwind = 0; //@line 23845
     HEAP32[$ReallocAsyncCtx12 >> 2] = 127; //@line 23846
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 23847
     $$expand_i1_val = $86 & 1; //@line 23848
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 23849
     sp = STACKTOP; //@line 23850
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 23856
     $$1143 = $85; //@line 23856
     $$1145 = $84; //@line 23856
     $$3154 = 0; //@line 23856
     label = 28; //@line 23857
    } else {
     if ($83) {
      $$0142 = $85; //@line 23860
      $$0144 = $84; //@line 23860
     } else {
      $89 = _snprintf($85, $84, 11934, $8) | 0; //@line 23862
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 23864
      $91 = ($$ | 0) > 0; //@line 23865
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 23870
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 23870
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 23874
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 11952; //@line 23880
        label = 25; //@line 23881
        break;
       }
      case 1:
       {
        $$sink = 11958; //@line 23885
        label = 25; //@line 23886
        break;
       }
      case 3:
       {
        $$sink = 11946; //@line 23890
        label = 25; //@line 23891
        break;
       }
      case 7:
       {
        $$sink = 11940; //@line 23895
        label = 25; //@line 23896
        break;
       }
      default:
       {
        $$0141 = 0; //@line 23900
        $$1152 = 0; //@line 23900
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$48 >> 2] = $$sink; //@line 23904
       $$0141 = $79 & 1; //@line 23907
       $$1152 = _snprintf($$0142, $$0144, 11964, $48) | 0; //@line 23907
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 23910
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 23912
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 23914
       $$1$off0 = $extract$t159; //@line 23919
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 23919
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 23919
       $$3154 = $$1152; //@line 23919
       label = 28; //@line 23920
      } else {
       $$1$off0 = $extract$t159; //@line 23922
       $$1143 = $$0142; //@line 23922
       $$1145 = $$0144; //@line 23922
       $$3154 = $$1152$; //@line 23922
       label = 28; //@line 23923
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[172] | 0) != 0) {
      HEAP32[$30 >> 2] = HEAP32[$4 >> 2]; //@line 23934
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 23935
      $108 = _vsnprintf(0, 0, $2, $30) | 0; //@line 23936
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 131; //@line 23939
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 23940
       HEAP32[$109 >> 2] = $22; //@line 23941
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 23942
       HEAP32[$110 >> 2] = $24; //@line 23943
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 23944
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 23945
       HEAP8[$111 >> 0] = $$1$off0$expand_i1_val; //@line 23946
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 23947
       HEAP32[$112 >> 2] = $26; //@line 23948
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 23949
       HEAP32[$113 >> 2] = $28; //@line 23950
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 23951
       HEAP32[$114 >> 2] = $$3154; //@line 23952
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 23953
       HEAP32[$115 >> 2] = $12; //@line 23954
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 23955
       HEAP32[$116 >> 2] = $$1143; //@line 23956
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 23957
       HEAP32[$117 >> 2] = $$1145; //@line 23958
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 23959
       HEAP32[$118 >> 2] = $14; //@line 23960
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 23961
       HEAP32[$119 >> 2] = $30; //@line 23962
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 23963
       HEAP32[$120 >> 2] = $2; //@line 23964
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 23965
       HEAP32[$121 >> 2] = $4; //@line 23966
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 23967
       HEAP32[$122 >> 2] = $18; //@line 23968
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 23969
       HEAP32[$123 >> 2] = $20; //@line 23970
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 23971
       HEAP32[$124 >> 2] = $74; //@line 23972
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 23973
       HEAP32[$125 >> 2] = $32; //@line 23974
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 23975
       HEAP32[$126 >> 2] = $16; //@line 23976
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 23977
       HEAP32[$127 >> 2] = $34; //@line 23978
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 23979
       HEAP32[$128 >> 2] = $36; //@line 23980
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 23981
       HEAP32[$129 >> 2] = $38; //@line 23982
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 23983
       HEAP32[$130 >> 2] = $40; //@line 23984
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 23985
       HEAP32[$131 >> 2] = $42; //@line 23986
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 23987
       HEAP32[$132 >> 2] = $44; //@line 23988
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 23989
       HEAP32[$133 >> 2] = $46; //@line 23990
       sp = STACKTOP; //@line 23991
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 23995
      ___async_unwind = 0; //@line 23996
      HEAP32[$ReallocAsyncCtx11 >> 2] = 131; //@line 23997
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 23998
      HEAP32[$109 >> 2] = $22; //@line 23999
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 24000
      HEAP32[$110 >> 2] = $24; //@line 24001
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 24002
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 24003
      HEAP8[$111 >> 0] = $$1$off0$expand_i1_val; //@line 24004
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 24005
      HEAP32[$112 >> 2] = $26; //@line 24006
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 24007
      HEAP32[$113 >> 2] = $28; //@line 24008
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 24009
      HEAP32[$114 >> 2] = $$3154; //@line 24010
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 24011
      HEAP32[$115 >> 2] = $12; //@line 24012
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 24013
      HEAP32[$116 >> 2] = $$1143; //@line 24014
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 24015
      HEAP32[$117 >> 2] = $$1145; //@line 24016
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 24017
      HEAP32[$118 >> 2] = $14; //@line 24018
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 24019
      HEAP32[$119 >> 2] = $30; //@line 24020
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 24021
      HEAP32[$120 >> 2] = $2; //@line 24022
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 24023
      HEAP32[$121 >> 2] = $4; //@line 24024
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 24025
      HEAP32[$122 >> 2] = $18; //@line 24026
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 24027
      HEAP32[$123 >> 2] = $20; //@line 24028
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 24029
      HEAP32[$124 >> 2] = $74; //@line 24030
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 24031
      HEAP32[$125 >> 2] = $32; //@line 24032
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 24033
      HEAP32[$126 >> 2] = $16; //@line 24034
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 24035
      HEAP32[$127 >> 2] = $34; //@line 24036
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 24037
      HEAP32[$128 >> 2] = $36; //@line 24038
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 24039
      HEAP32[$129 >> 2] = $38; //@line 24040
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 24041
      HEAP32[$130 >> 2] = $40; //@line 24042
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 24043
      HEAP32[$131 >> 2] = $42; //@line 24044
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 24045
      HEAP32[$132 >> 2] = $44; //@line 24046
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 24047
      HEAP32[$133 >> 2] = $46; //@line 24048
      sp = STACKTOP; //@line 24049
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 24054
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$44 >> 2] = $16; //@line 24060
        $$5156 = _snprintf($$1143, $$1145, 11967, $44) | 0; //@line 24062
        break;
       }
      case 1:
       {
        HEAP32[$40 >> 2] = $16; //@line 24066
        $$5156 = _snprintf($$1143, $$1145, 11982, $40) | 0; //@line 24068
        break;
       }
      case 3:
       {
        HEAP32[$36 >> 2] = $16; //@line 24072
        $$5156 = _snprintf($$1143, $$1145, 11997, $36) | 0; //@line 24074
        break;
       }
      case 7:
       {
        HEAP32[$32 >> 2] = $16; //@line 24078
        $$5156 = _snprintf($$1143, $$1145, 12012, $32) | 0; //@line 24080
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 12027, $18) | 0; //@line 24085
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 24089
      $147 = $$1143 + $$5156$ | 0; //@line 24091
      $148 = $$1145 - $$5156$ | 0; //@line 24092
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 24096
       $150 = _vsnprintf($147, $148, $2, $4) | 0; //@line 24097
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 133; //@line 24100
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 24101
        HEAP32[$151 >> 2] = $22; //@line 24102
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 24103
        HEAP32[$152 >> 2] = $24; //@line 24104
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 24105
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 24106
        HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 24107
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 24108
        HEAP32[$154 >> 2] = $26; //@line 24109
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 24110
        HEAP32[$155 >> 2] = $28; //@line 24111
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 24112
        HEAP32[$156 >> 2] = $148; //@line 24113
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 24114
        HEAP32[$157 >> 2] = $147; //@line 24115
        sp = STACKTOP; //@line 24116
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 24120
       ___async_unwind = 0; //@line 24121
       HEAP32[$ReallocAsyncCtx10 >> 2] = 133; //@line 24122
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 24123
       HEAP32[$151 >> 2] = $22; //@line 24124
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 24125
       HEAP32[$152 >> 2] = $24; //@line 24126
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 24127
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 24128
       HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 24129
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 24130
       HEAP32[$154 >> 2] = $26; //@line 24131
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 24132
       HEAP32[$155 >> 2] = $28; //@line 24133
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 24134
       HEAP32[$156 >> 2] = $148; //@line 24135
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 24136
       HEAP32[$157 >> 2] = $147; //@line 24137
       sp = STACKTOP; //@line 24138
       return;
      }
     }
    }
    $159 = HEAP32[174] | 0; //@line 24143
    $160 = HEAP32[167] | 0; //@line 24144
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 24145
    FUNCTION_TABLE_vi[$159 & 1023]($160); //@line 24146
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 24149
     sp = STACKTOP; //@line 24150
     return;
    }
    ___async_unwind = 0; //@line 24153
    HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 24154
    sp = STACKTOP; //@line 24155
    return;
   }
  }
 } while (0);
 $161 = HEAP32[177] | 0; //@line 24160
 if (!$161) {
  return;
 }
 $163 = HEAP32[178] | 0; //@line 24165
 HEAP32[178] = 0; //@line 24166
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 24167
 FUNCTION_TABLE_v[$161 & 7](); //@line 24168
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 24171
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 24172
  HEAP32[$164 >> 2] = $163; //@line 24173
  sp = STACKTOP; //@line 24174
  return;
 }
 ___async_unwind = 0; //@line 24177
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 24178
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 24179
 HEAP32[$164 >> 2] = $163; //@line 24180
 sp = STACKTOP; //@line 24181
 return;
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 10173
 $3 = HEAP32[5771] | 0; //@line 10174
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 10177
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 10181
 $7 = $6 & 3; //@line 10182
 if (($7 | 0) == 1) {
  _abort(); //@line 10185
 }
 $9 = $6 & -8; //@line 10188
 $10 = $2 + $9 | 0; //@line 10189
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 10194
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 10200
   $17 = $13 + $9 | 0; //@line 10201
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 10204
   }
   if ((HEAP32[5772] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 10210
    $106 = HEAP32[$105 >> 2] | 0; //@line 10211
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 10215
     $$1382 = $17; //@line 10215
     $114 = $16; //@line 10215
     break;
    }
    HEAP32[5769] = $17; //@line 10218
    HEAP32[$105 >> 2] = $106 & -2; //@line 10220
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 10223
    HEAP32[$16 + $17 >> 2] = $17; //@line 10225
    return;
   }
   $21 = $13 >>> 3; //@line 10228
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 10232
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 10234
    $28 = 23108 + ($21 << 1 << 2) | 0; //@line 10236
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 10241
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10248
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5767] = HEAP32[5767] & ~(1 << $21); //@line 10258
     $$1 = $16; //@line 10259
     $$1382 = $17; //@line 10259
     $114 = $16; //@line 10259
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 10265
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 10269
     }
     $41 = $26 + 8 | 0; //@line 10272
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 10276
     } else {
      _abort(); //@line 10278
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 10283
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 10284
    $$1 = $16; //@line 10285
    $$1382 = $17; //@line 10285
    $114 = $16; //@line 10285
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 10289
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 10291
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 10295
     $60 = $59 + 4 | 0; //@line 10296
     $61 = HEAP32[$60 >> 2] | 0; //@line 10297
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 10300
      if (!$63) {
       $$3 = 0; //@line 10303
       break;
      } else {
       $$1387 = $63; //@line 10306
       $$1390 = $59; //@line 10306
      }
     } else {
      $$1387 = $61; //@line 10309
      $$1390 = $60; //@line 10309
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 10312
      $66 = HEAP32[$65 >> 2] | 0; //@line 10313
      if ($66 | 0) {
       $$1387 = $66; //@line 10316
       $$1390 = $65; //@line 10316
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 10319
      $69 = HEAP32[$68 >> 2] | 0; //@line 10320
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 10325
       $$1390 = $68; //@line 10325
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 10330
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 10333
      $$3 = $$1387; //@line 10334
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 10339
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 10342
     }
     $53 = $51 + 12 | 0; //@line 10345
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10349
     }
     $56 = $48 + 8 | 0; //@line 10352
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 10356
      HEAP32[$56 >> 2] = $51; //@line 10357
      $$3 = $48; //@line 10358
      break;
     } else {
      _abort(); //@line 10361
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 10368
    $$1382 = $17; //@line 10368
    $114 = $16; //@line 10368
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 10371
    $75 = 23372 + ($74 << 2) | 0; //@line 10372
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 10377
      if (!$$3) {
       HEAP32[5768] = HEAP32[5768] & ~(1 << $74); //@line 10384
       $$1 = $16; //@line 10385
       $$1382 = $17; //@line 10385
       $114 = $16; //@line 10385
       break L10;
      }
     } else {
      if ((HEAP32[5771] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 10392
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 10400
       if (!$$3) {
        $$1 = $16; //@line 10403
        $$1382 = $17; //@line 10403
        $114 = $16; //@line 10403
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5771] | 0; //@line 10411
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 10414
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 10418
    $92 = $16 + 16 | 0; //@line 10419
    $93 = HEAP32[$92 >> 2] | 0; //@line 10420
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 10426
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 10430
       HEAP32[$93 + 24 >> 2] = $$3; //@line 10432
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 10438
    if (!$99) {
     $$1 = $16; //@line 10441
     $$1382 = $17; //@line 10441
     $114 = $16; //@line 10441
    } else {
     if ((HEAP32[5771] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 10446
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 10450
      HEAP32[$99 + 24 >> 2] = $$3; //@line 10452
      $$1 = $16; //@line 10453
      $$1382 = $17; //@line 10453
      $114 = $16; //@line 10453
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 10459
   $$1382 = $9; //@line 10459
   $114 = $2; //@line 10459
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 10464
 }
 $115 = $10 + 4 | 0; //@line 10467
 $116 = HEAP32[$115 >> 2] | 0; //@line 10468
 if (!($116 & 1)) {
  _abort(); //@line 10472
 }
 if (!($116 & 2)) {
  if ((HEAP32[5773] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5770] | 0) + $$1382 | 0; //@line 10482
   HEAP32[5770] = $124; //@line 10483
   HEAP32[5773] = $$1; //@line 10484
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 10487
   if (($$1 | 0) != (HEAP32[5772] | 0)) {
    return;
   }
   HEAP32[5772] = 0; //@line 10493
   HEAP32[5769] = 0; //@line 10494
   return;
  }
  if ((HEAP32[5772] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5769] | 0) + $$1382 | 0; //@line 10501
   HEAP32[5769] = $132; //@line 10502
   HEAP32[5772] = $114; //@line 10503
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 10506
   HEAP32[$114 + $132 >> 2] = $132; //@line 10508
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 10512
  $138 = $116 >>> 3; //@line 10513
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 10518
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 10520
    $145 = 23108 + ($138 << 1 << 2) | 0; //@line 10522
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5771] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 10528
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 10535
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5767] = HEAP32[5767] & ~(1 << $138); //@line 10545
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 10551
    } else {
     if ((HEAP32[5771] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 10556
     }
     $160 = $143 + 8 | 0; //@line 10559
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 10563
     } else {
      _abort(); //@line 10565
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 10570
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 10571
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 10574
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 10576
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 10580
      $180 = $179 + 4 | 0; //@line 10581
      $181 = HEAP32[$180 >> 2] | 0; //@line 10582
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 10585
       if (!$183) {
        $$3400 = 0; //@line 10588
        break;
       } else {
        $$1398 = $183; //@line 10591
        $$1402 = $179; //@line 10591
       }
      } else {
       $$1398 = $181; //@line 10594
       $$1402 = $180; //@line 10594
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 10597
       $186 = HEAP32[$185 >> 2] | 0; //@line 10598
       if ($186 | 0) {
        $$1398 = $186; //@line 10601
        $$1402 = $185; //@line 10601
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 10604
       $189 = HEAP32[$188 >> 2] | 0; //@line 10605
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 10610
        $$1402 = $188; //@line 10610
       }
      }
      if ((HEAP32[5771] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 10616
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 10619
       $$3400 = $$1398; //@line 10620
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 10625
      if ((HEAP32[5771] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 10629
      }
      $173 = $170 + 12 | 0; //@line 10632
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 10636
      }
      $176 = $167 + 8 | 0; //@line 10639
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 10643
       HEAP32[$176 >> 2] = $170; //@line 10644
       $$3400 = $167; //@line 10645
       break;
      } else {
       _abort(); //@line 10648
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 10656
     $196 = 23372 + ($195 << 2) | 0; //@line 10657
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 10662
       if (!$$3400) {
        HEAP32[5768] = HEAP32[5768] & ~(1 << $195); //@line 10669
        break L108;
       }
      } else {
       if ((HEAP32[5771] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 10676
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 10684
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5771] | 0; //@line 10694
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 10697
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 10701
     $213 = $10 + 16 | 0; //@line 10702
     $214 = HEAP32[$213 >> 2] | 0; //@line 10703
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 10709
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 10713
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 10715
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 10721
     if ($220 | 0) {
      if ((HEAP32[5771] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 10727
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 10731
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 10733
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 10742
  HEAP32[$114 + $137 >> 2] = $137; //@line 10744
  if (($$1 | 0) == (HEAP32[5772] | 0)) {
   HEAP32[5769] = $137; //@line 10748
   return;
  } else {
   $$2 = $137; //@line 10751
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 10755
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 10758
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 10760
  $$2 = $$1382; //@line 10761
 }
 $235 = $$2 >>> 3; //@line 10763
 if ($$2 >>> 0 < 256) {
  $238 = 23108 + ($235 << 1 << 2) | 0; //@line 10767
  $239 = HEAP32[5767] | 0; //@line 10768
  $240 = 1 << $235; //@line 10769
  if (!($239 & $240)) {
   HEAP32[5767] = $239 | $240; //@line 10774
   $$0403 = $238; //@line 10776
   $$pre$phiZ2D = $238 + 8 | 0; //@line 10776
  } else {
   $244 = $238 + 8 | 0; //@line 10778
   $245 = HEAP32[$244 >> 2] | 0; //@line 10779
   if ((HEAP32[5771] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 10783
   } else {
    $$0403 = $245; //@line 10786
    $$pre$phiZ2D = $244; //@line 10786
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 10789
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 10791
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 10793
  HEAP32[$$1 + 12 >> 2] = $238; //@line 10795
  return;
 }
 $251 = $$2 >>> 8; //@line 10798
 if (!$251) {
  $$0396 = 0; //@line 10801
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 10805
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 10809
   $257 = $251 << $256; //@line 10810
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 10813
   $262 = $257 << $260; //@line 10815
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 10818
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 10823
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 10829
  }
 }
 $276 = 23372 + ($$0396 << 2) | 0; //@line 10832
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 10834
 HEAP32[$$1 + 20 >> 2] = 0; //@line 10837
 HEAP32[$$1 + 16 >> 2] = 0; //@line 10838
 $280 = HEAP32[5768] | 0; //@line 10839
 $281 = 1 << $$0396; //@line 10840
 do {
  if (!($280 & $281)) {
   HEAP32[5768] = $280 | $281; //@line 10846
   HEAP32[$276 >> 2] = $$1; //@line 10847
   HEAP32[$$1 + 24 >> 2] = $276; //@line 10849
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 10851
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 10853
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 10861
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 10861
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 10868
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 10872
    $301 = HEAP32[$299 >> 2] | 0; //@line 10874
    if (!$301) {
     label = 121; //@line 10877
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 10880
     $$0384 = $301; //@line 10880
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5771] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 10887
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 10890
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 10892
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 10894
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 10896
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 10901
    $309 = HEAP32[$308 >> 2] | 0; //@line 10902
    $310 = HEAP32[5771] | 0; //@line 10903
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 10909
     HEAP32[$308 >> 2] = $$1; //@line 10910
     HEAP32[$$1 + 8 >> 2] = $309; //@line 10912
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 10914
     HEAP32[$$1 + 24 >> 2] = 0; //@line 10916
     break;
    } else {
     _abort(); //@line 10919
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5775] | 0) + -1 | 0; //@line 10926
 HEAP32[5775] = $319; //@line 10927
 if (!$319) {
  $$0212$in$i = 23524; //@line 10930
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 10935
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 10941
  }
 }
 HEAP32[5775] = -1; //@line 10944
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$058 = 0, $$059 = 0, $$062 = 0, $$06272 = 0, $$06273 = 0, $$064 = 0, $$06471 = 0, $$06575 = 0, $$06874 = 0, $$1 = 0, $$163 = 0, $$166 = 0, $$16670 = 0, $$267 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $109 = 0, $11 = 0, $115 = 0, $121 = 0, $135 = 0, $15 = 0, $156 = 0, $157 = 0, $170 = 0, $171 = 0, $172 = 0, $178 = 0, $179 = 0, $183 = 0, $185 = 0, $191 = 0, $192 = 0, $195 = 0, $197 = 0, $212 = 0, $219 = 0, $220 = 0, $221 = 0, $224 = 0, $242 = 0, $245 = 0, $246 = 0, $247 = 0, $258 = 0, $40 = 0, $6 = 0, $64 = 0, $7 = 0, $74 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13232
 STACKTOP = STACKTOP + 16 | 0; //@line 13233
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13233
 $vararg_buffer1 = sp + 8 | 0; //@line 13234
 $vararg_buffer = sp; //@line 13235
 $6 = sp + 12 | 0; //@line 13236
 HEAP32[$6 >> 2] = 0; //@line 13237
 $7 = $0 + 1440 | 0; //@line 13238
 $8 = $0 + 1177 | 0; //@line 13239
 HEAP8[$8 >> 0] = 0; //@line 13240
 $9 = ($4 | 0) == 0; //@line 13241
 $$ = $9 ? 0 : $5; //@line 13242
 HEAP16[$7 >> 1] = $$; //@line 13243
 $11 = $0 + 1185 | 0; //@line 13245
 HEAP8[$11 >> 0] = HEAP8[$1 >> 0] | 0; //@line 13246
 L1 : do {
  switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
  case 0:
   {
    HEAP16[$7 >> 1] = 1; //@line 13253
    $15 = HEAP32[$0 + 1708 >> 2] | 0; //@line 13256
    HEAP8[$0 + 1193 >> 0] = HEAP8[$15 >> 0] | 0; //@line 13261
    HEAP8[$0 + 1192 >> 0] = HEAP8[$15 + 1 >> 0] | 0; //@line 13265
    HEAP8[$0 + 1191 >> 0] = HEAP8[$15 + 2 >> 0] | 0; //@line 13269
    HEAP8[$0 + 1190 >> 0] = HEAP8[$15 + 3 >> 0] | 0; //@line 13273
    HEAP8[$0 + 1189 >> 0] = HEAP8[$15 + 4 >> 0] | 0; //@line 13277
    HEAP8[$0 + 1188 >> 0] = HEAP8[$15 + 5 >> 0] | 0; //@line 13281
    HEAP8[$0 + 1187 >> 0] = HEAP8[$15 + 6 >> 0] | 0; //@line 13284
    HEAP8[$0 + 1186 >> 0] = HEAP8[$15 + 7 >> 0] | 0; //@line 13286
    HEAP16[$7 >> 1] = 9; //@line 13287
    $40 = HEAP32[$0 + 1704 >> 2] | 0; //@line 13290
    HEAP8[$0 + 1201 >> 0] = HEAP8[$40 >> 0] | 0; //@line 13295
    HEAP8[$0 + 1200 >> 0] = HEAP8[$40 + 1 >> 0] | 0; //@line 13299
    HEAP8[$0 + 1199 >> 0] = HEAP8[$40 + 2 >> 0] | 0; //@line 13303
    HEAP8[$0 + 1198 >> 0] = HEAP8[$40 + 3 >> 0] | 0; //@line 13307
    HEAP8[$0 + 1197 >> 0] = HEAP8[$40 + 4 >> 0] | 0; //@line 13311
    HEAP8[$0 + 1196 >> 0] = HEAP8[$40 + 5 >> 0] | 0; //@line 13315
    HEAP8[$0 + 1195 >> 0] = HEAP8[$40 + 6 >> 0] | 0; //@line 13318
    HEAP8[$0 + 1194 >> 0] = HEAP8[$40 + 7 >> 0] | 0; //@line 13320
    HEAP16[$7 >> 1] = 17; //@line 13321
    $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13323
    $64 = __ZN7LoRaPHY13get_radio_rngEv($0 + 4 | 0) | 0; //@line 13324
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 411; //@line 13327
     HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 13329
     HEAP32[$AsyncCtx17 + 8 >> 2] = $7; //@line 13331
     HEAP32[$AsyncCtx17 + 12 >> 2] = $11; //@line 13333
     HEAP32[$AsyncCtx17 + 16 >> 2] = $6; //@line 13335
     HEAP32[$AsyncCtx17 + 20 >> 2] = $6; //@line 13337
     HEAP8[$AsyncCtx17 + 24 >> 0] = $3; //@line 13339
     HEAP32[$AsyncCtx17 + 28 >> 2] = $vararg_buffer1; //@line 13341
     HEAP32[$AsyncCtx17 + 32 >> 2] = $vararg_buffer1; //@line 13343
     sp = STACKTOP; //@line 13344
     STACKTOP = sp; //@line 13345
     return 0; //@line 13345
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 13347
    $74 = $0 + 1748 | 0; //@line 13349
    HEAP16[$74 >> 1] = $64; //@line 13350
    $76 = HEAP16[$7 >> 1] | 0; //@line 13352
    HEAP16[$7 >> 1] = $76 + 1 << 16 >> 16; //@line 13354
    HEAP8[($76 & 65535) + ($0 + 1185) >> 0] = $64; //@line 13357
    $82 = (HEAPU16[$74 >> 1] | 0) >>> 8 & 255; //@line 13360
    $83 = HEAP16[$7 >> 1] | 0; //@line 13361
    HEAP16[$7 >> 1] = $83 + 1 << 16 >> 16; //@line 13363
    HEAP8[($83 & 65535) + ($0 + 1185) >> 0] = $82; //@line 13366
    $89 = HEAP16[$7 >> 1] & 255; //@line 13369
    $91 = HEAP32[$0 + 1712 >> 2] | 0; //@line 13371
    $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 13372
    $92 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($0 + 756 | 0, $11, $89, $91, 128, $6) | 0; //@line 13373
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 412; //@line 13376
     HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 13378
     HEAP32[$AsyncCtx9 + 8 >> 2] = $7; //@line 13380
     HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 13382
     HEAP32[$AsyncCtx9 + 16 >> 2] = $6; //@line 13384
     HEAP8[$AsyncCtx9 + 20 >> 0] = $3; //@line 13386
     HEAP32[$AsyncCtx9 + 24 >> 2] = $vararg_buffer1; //@line 13388
     HEAP32[$AsyncCtx9 + 28 >> 2] = $vararg_buffer1; //@line 13390
     sp = STACKTOP; //@line 13391
     STACKTOP = sp; //@line 13392
     return 0; //@line 13392
    }
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13394
    if (!$92) {
     $101 = HEAP32[$6 >> 2] | 0; //@line 13397
     $103 = HEAP16[$7 >> 1] | 0; //@line 13399
     HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 13401
     HEAP8[($103 & 65535) + ($0 + 1185) >> 0] = $101; //@line 13404
     $109 = HEAP16[$7 >> 1] | 0; //@line 13407
     HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 13409
     HEAP8[($109 & 65535) + ($0 + 1185) >> 0] = $101 >>> 8; //@line 13412
     $115 = HEAP16[$7 >> 1] | 0; //@line 13415
     HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 13417
     HEAP8[($115 & 65535) + ($0 + 1185) >> 0] = $101 >>> 16; //@line 13420
     $121 = HEAP16[$7 >> 1] | 0; //@line 13423
     HEAP16[$7 >> 1] = $121 + 1 << 16 >> 16; //@line 13425
     HEAP8[($121 & 65535) + ($0 + 1185) >> 0] = $101 >>> 24; //@line 13428
     $$163 = $3; //@line 13429
     $$3 = 0; //@line 13429
     break L1;
    } else {
     $$059 = -1014; //@line 13432
     STACKTOP = sp; //@line 13433
     return $$059 | 0; //@line 13433
    }
    break;
   }
  case 4:
   {
    HEAP8[$8 >> 0] = 1; //@line 13438
    label = 9; //@line 13439
    break;
   }
  case 2:
   {
    label = 9; //@line 13443
    break;
   }
  case 7:
   {
    if ($9 | $$ << 16 >> 16 == 0) {
     $$163 = $3; //@line 13450
     $$3 = 0; //@line 13450
    } else {
     _memcpy($0 + 1186 | 0, $4 | 0, $$ & 65535 | 0) | 0; //@line 13454
     HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 1; //@line 13459
     $$163 = $3; //@line 13460
     $$3 = 0; //@line 13460
    }
    break;
   }
  default:
   {
    $$163 = $3; //@line 13465
    $$3 = -1002; //@line 13465
   }
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   if (!(HEAP8[$0 + 2376 >> 0] | 0)) {
    $$059 = -1009; //@line 13475
    STACKTOP = sp; //@line 13476
    return $$059 | 0; //@line 13476
   }
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $AsyncCtx13 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13486
    $135 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0 + 4 | 0, 1, $0 + 1877 | 0, $0 + 1876 | 0, $0 + 1768 | 0) | 0; //@line 13487
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 413; //@line 13490
     HEAP32[$AsyncCtx13 + 4 >> 2] = $6; //@line 13492
     HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 13494
     HEAP8[$AsyncCtx13 + 12 >> 0] = $3; //@line 13496
     HEAP32[$AsyncCtx13 + 16 >> 2] = $4; //@line 13498
     HEAP32[$AsyncCtx13 + 20 >> 2] = $7; //@line 13500
     HEAP32[$AsyncCtx13 + 24 >> 2] = $6; //@line 13502
     HEAP32[$AsyncCtx13 + 28 >> 2] = $vararg_buffer1; //@line 13504
     HEAP32[$AsyncCtx13 + 32 >> 2] = $vararg_buffer1; //@line 13506
     HEAP32[$AsyncCtx13 + 36 >> 2] = $11; //@line 13508
     HEAP32[$AsyncCtx13 + 40 >> 2] = $2; //@line 13510
     HEAP8[$AsyncCtx13 + 44 >> 0] = $9 & 1; //@line 13513
     HEAP32[$AsyncCtx13 + 48 >> 2] = $vararg_buffer; //@line 13515
     HEAP32[$AsyncCtx13 + 52 >> 2] = $vararg_buffer; //@line 13517
     sp = STACKTOP; //@line 13518
     STACKTOP = sp; //@line 13519
     return 0; //@line 13519
    }
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13521
    if ($135) {
     HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 13525
    }
   }
   if (!(HEAP8[$0 + 1178 >> 0] | 0)) {
    $$pre$phiZ2D = $2; //@line 13532
   } else {
    _mbed_tracef(16, 12866, 13038, $vararg_buffer); //@line 13534
    HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 13537
    $$pre$phiZ2D = $2; //@line 13538
   }
   $156 = $0 + 1756 | 0; //@line 13540
   $157 = HEAP32[$156 >> 2] | 0; //@line 13541
   HEAP8[$0 + 1186 >> 0] = $157; //@line 13544
   HEAP8[$0 + 1187 >> 0] = $157 >>> 8; //@line 13548
   HEAP8[$0 + 1188 >> 0] = $157 >>> 16; //@line 13552
   HEAP8[$0 + 1189 >> 0] = $157 >>> 24; //@line 13556
   $170 = $0 + 1190 | 0; //@line 13558
   HEAP8[$170 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 13559
   $171 = $0 + 1760 | 0; //@line 13560
   $172 = HEAP32[$171 >> 2] | 0; //@line 13561
   HEAP8[$0 + 1191 >> 0] = $172; //@line 13564
   HEAP8[$0 + 1192 >> 0] = $172 >>> 8; //@line 13568
   $178 = $0 + 476 | 0; //@line 13569
   __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($178); //@line 13570
   $179 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($178) | 0; //@line 13571
   do {
    if ($9) {
     label = 27; //@line 13574
    } else {
     if (!(HEAP16[$7 >> 1] | 0)) {
      label = 27; //@line 13579
     } else {
      if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($178) | 0)) {
       __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($178); //@line 13583
       $$06272 = $3; //@line 13584
       $$06471 = $4; //@line 13584
       $$16670 = 8; //@line 13584
       label = 31; //@line 13585
       break;
      }
      $183 = $179 & 255; //@line 13588
      if (($179 & 255) >= 16) {
       HEAP16[$7 >> 1] = $179 & 255; //@line 13592
       $$062 = 0; //@line 13594
       $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($178) | 0; //@line 13594
       $$166 = 8; //@line 13594
       label = 30; //@line 13595
       break;
      }
      $185 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 13598
      $191 = ($185 & 255) + $183 & 15 | $185 & -16; //@line 13604
      HEAP8[$$pre$phiZ2D >> 0] = $191; //@line 13605
      HEAP8[$170 >> 0] = $191; //@line 13606
      $192 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($178) | 0; //@line 13607
      if (!($179 << 24 >> 24)) {
       __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($178); //@line 13610
       $$06272 = $3; //@line 13611
       $$06471 = $4; //@line 13611
       $$16670 = 8; //@line 13611
       label = 31; //@line 13612
       break;
      } else {
       $$06575 = 8; //@line 13615
       $$06874 = 0; //@line 13615
       $195 = 0; //@line 13615
       while (1) {
        $197 = $$06575 + 1 << 24 >> 24; //@line 13619
        HEAP8[($$06575 & 255) + ($0 + 1185) >> 0] = HEAP8[$192 + $195 >> 0] | 0; //@line 13622
        $$06874 = $$06874 + 1 << 16 >> 16; //@line 13623
        $195 = $$06874 & 65535; //@line 13624
        if ($195 >>> 0 >= $183 >>> 0) {
         $$062 = $3; //@line 13629
         $$064 = $4; //@line 13629
         $$166 = $197; //@line 13629
         label = 30; //@line 13630
         break;
        } else {
         $$06575 = $197; //@line 13627
        }
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 27) {
    if (!($179 << 24 >> 24)) {
     $$062 = $3; //@line 13641
     $$064 = $4; //@line 13641
     $$166 = 8; //@line 13641
     label = 30; //@line 13642
    } else {
     if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($178) | 0) {
      HEAP16[$7 >> 1] = $179 & 255; //@line 13647
      $$062 = 0; //@line 13649
      $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($178) | 0; //@line 13649
      $$166 = 8; //@line 13649
      label = 30; //@line 13650
     } else {
      $$062 = $3; //@line 13652
      $$064 = $4; //@line 13652
      $$166 = 8; //@line 13652
      label = 30; //@line 13653
     }
    }
   }
   if ((label | 0) == 30) {
    __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($178); //@line 13658
    if (!$$064) {
     $$06273 = $$062; //@line 13661
     $$1 = 0; //@line 13661
     $$267 = $$166; //@line 13661
    } else {
     $$06272 = $$062; //@line 13663
     $$06471 = $$064; //@line 13663
     $$16670 = $$166; //@line 13663
     label = 31; //@line 13664
    }
   }
   do {
    if ((label | 0) == 31) {
     if (!(HEAP16[$7 >> 1] | 0)) {
      $$06273 = $$06272; //@line 13672
      $$1 = 0; //@line 13672
      $$267 = $$16670; //@line 13672
     } else {
      $212 = $$16670 + 1 << 24 >> 24; //@line 13674
      HEAP8[($$16670 & 255) + ($0 + 1185) >> 0] = $$06272; //@line 13677
      if (!($$06272 << 24 >> 24)) {
       __ZN14LoRaMacCommand20clear_command_bufferEv($178); //@line 13681
       $$058 = $0 + 1716 | 0; //@line 13683
      } else {
       $$058 = $0 + 1732 | 0; //@line 13685
      }
      $219 = HEAP16[$7 >> 1] | 0; //@line 13688
      $220 = HEAP32[$156 >> 2] | 0; //@line 13689
      $221 = HEAP32[$171 >> 2] | 0; //@line 13690
      $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 13693
      $224 = __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $$06471, $219, $$058, 128, $220, 0, $221, ($212 & 255) + ($0 + 1185) | 0) | 0; //@line 13694
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 414; //@line 13697
       HEAP8[$AsyncCtx + 4 >> 0] = $$06272; //@line 13699
       HEAP8[$AsyncCtx + 5 >> 0] = $212; //@line 13701
       HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 13703
       HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 13705
       HEAP32[$AsyncCtx + 16 >> 2] = $156; //@line 13707
       HEAP32[$AsyncCtx + 20 >> 2] = $171; //@line 13709
       HEAP32[$AsyncCtx + 24 >> 2] = $11; //@line 13711
       HEAP32[$AsyncCtx + 28 >> 2] = $6; //@line 13713
       HEAP8[$AsyncCtx + 32 >> 0] = $3; //@line 13715
       HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer1; //@line 13717
       HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer1; //@line 13719
       HEAP32[$AsyncCtx + 44 >> 2] = $6; //@line 13721
       sp = STACKTOP; //@line 13722
       STACKTOP = sp; //@line 13723
       return 0; //@line 13723
      } else {
       _emscripten_free_async_context($AsyncCtx | 0); //@line 13725
       $$06273 = $$06272; //@line 13728
       $$1 = ($224 | 0) == 0 ? 0 : -1014; //@line 13728
       $$267 = $212; //@line 13728
       break;
      }
     }
    }
   } while (0);
   $242 = (HEAPU16[$7 >> 1] | 0) + ($$267 & 255) & 65535; //@line 13738
   HEAP16[$7 >> 1] = $242; //@line 13739
   $245 = HEAP32[$156 >> 2] | 0; //@line 13742
   $246 = HEAP32[$171 >> 2] | 0; //@line 13743
   $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13744
   $247 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0 + 756 | 0, $11, $242, $0 + 1716 | 0, 128, $245, 0, $246, $6) | 0; //@line 13745
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 415; //@line 13748
    HEAP32[$AsyncCtx5 + 4 >> 2] = $$1; //@line 13750
    HEAP32[$AsyncCtx5 + 8 >> 2] = $6; //@line 13752
    HEAP32[$AsyncCtx5 + 12 >> 2] = $7; //@line 13754
    HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 13756
    HEAP8[$AsyncCtx5 + 20 >> 0] = $3; //@line 13758
    HEAP8[$AsyncCtx5 + 21 >> 0] = $$06273; //@line 13760
    HEAP32[$AsyncCtx5 + 24 >> 2] = $vararg_buffer1; //@line 13762
    HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer1; //@line 13764
    HEAP32[$AsyncCtx5 + 32 >> 2] = $6; //@line 13766
    sp = STACKTOP; //@line 13767
    STACKTOP = sp; //@line 13768
    return 0; //@line 13768
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 13770
    $258 = HEAP32[$6 >> 2] | 0; //@line 13773
    HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 1185) >> 0] = $258; //@line 13778
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 1185) >> 0] = $258 >>> 8; //@line 13785
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 1185) >> 0] = $258 >>> 16; //@line 13792
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 1185) >> 0] = $258 >>> 24; //@line 13799
    HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 13804
    $$163 = $$06273; //@line 13805
    $$3 = ($247 | 0) == 0 ? $$1 : -1014; //@line 13805
    break;
   }
  }
 } while (0);
 HEAP32[$vararg_buffer1 >> 2] = $$163 & 255; //@line 13811
 _mbed_tracef(16, 12866, 13051, $vararg_buffer1); //@line 13812
 $$059 = $$3; //@line 13813
 STACKTOP = sp; //@line 13814
 return $$059 | 0; //@line 13814
}
function _initialize__async_cb_17($0) {
 $0 = $0 | 0;
 var $$043 = 0, $$048 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18919
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18921
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18923
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18925
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18927
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 18928
 L2 : do {
  if (($8 | 0) < 32768) {
   if (($8 | 0) >= 128) {
    if (($8 | 0) < 2048) {
     switch ($8 | 0) {
     case 1024:
      {
       $$043 = 10; //@line 18938
       $$048 = $8; //@line 18938
       break L2;
       break;
      }
     case 512:
      {
       $$043 = 9; //@line 18943
       $$048 = $8; //@line 18943
       break L2;
       break;
      }
     case 256:
      {
       $$043 = 8; //@line 18948
       $$048 = $8; //@line 18948
       break L2;
       break;
      }
     case 128:
      {
       $$043 = 7; //@line 18953
       $$048 = $8; //@line 18953
       break L2;
       break;
      }
     default:
      {
       label = 43; //@line 18958
       break L2;
      }
     }
    }
    if (($8 | 0) < 8192) {
     switch ($8 | 0) {
     case 4096:
      {
       $$043 = 12; //@line 18967
       $$048 = $8; //@line 18967
       break L2;
       break;
      }
     case 2048:
      {
       $$043 = 11; //@line 18972
       $$048 = $8; //@line 18972
       break L2;
       break;
      }
     default:
      {
       label = 43; //@line 18977
       break L2;
      }
     }
    }
    if (($8 | 0) < 16384) {
     switch ($8 | 0) {
     case 8192:
      {
       break;
      }
     default:
      {
       label = 43; //@line 18989
       break L2;
      }
     }
     $$043 = 13; //@line 18993
     $$048 = $8; //@line 18993
     break;
    } else {
     switch ($8 | 0) {
     case 16384:
      {
       break;
      }
     default:
      {
       label = 43; //@line 19001
       break L2;
      }
     }
     $$043 = 14; //@line 19005
     $$048 = $8; //@line 19005
     break;
    }
   }
   if (($8 | 0) >= 8) {
    switch ($8 | 0) {
    case 64:
     {
      $$043 = 6; //@line 19013
      $$048 = $8; //@line 19013
      break L2;
      break;
     }
    case 32:
     {
      $$043 = 5; //@line 19018
      $$048 = $8; //@line 19018
      break L2;
      break;
     }
    case 16:
     {
      $$043 = 4; //@line 19023
      $$048 = $8; //@line 19023
      break L2;
      break;
     }
    case 8:
     {
      $$043 = 3; //@line 19028
      $$048 = $8; //@line 19028
      break L2;
      break;
     }
    default:
     {
      label = 43; //@line 19033
      break L2;
     }
    }
   }
   if (($8 | 0) >= 2) {
    switch ($8 | 0) {
    case 4:
     {
      $$043 = 2; //@line 19042
      $$048 = $8; //@line 19042
      break L2;
      break;
     }
    case 2:
     {
      $$043 = 1; //@line 19047
      $$048 = $8; //@line 19047
      break L2;
      break;
     }
    default:
     {
      label = 43; //@line 19052
      break L2;
     }
    }
   }
   if (($8 | 0) < 0) {
    switch ($8 | 0) {
    case -2147483648:
     {
      $$043 = 31; //@line 19061
      $$048 = -2147483648; //@line 19061
      break L2;
      break;
     }
    default:
     {
      label = 43; //@line 19066
      break L2;
     }
    }
   }
   switch ($8 | 0) {
   case 0:
    {
     break;
    }
   default:
    {
     label = 43; //@line 19076
     break L2;
    }
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 19080
   _mbed_assert_internal(14438, 14440, 41); //@line 19081
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 605; //@line 19084
    $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 19085
    HEAP32[$9 >> 2] = $2; //@line 19086
    $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 19087
    HEAP32[$10 >> 2] = $4; //@line 19088
    $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 19089
    HEAP32[$11 >> 2] = $6; //@line 19090
    $12 = $ReallocAsyncCtx7 + 16 | 0; //@line 19091
    HEAP32[$12 >> 2] = $AsyncRetVal; //@line 19092
    sp = STACKTOP; //@line 19093
    return;
   }
   ___async_unwind = 0; //@line 19096
   HEAP32[$ReallocAsyncCtx7 >> 2] = 605; //@line 19097
   $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 19098
   HEAP32[$9 >> 2] = $2; //@line 19099
   $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 19100
   HEAP32[$10 >> 2] = $4; //@line 19101
   $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 19102
   HEAP32[$11 >> 2] = $6; //@line 19103
   $12 = $ReallocAsyncCtx7 + 16 | 0; //@line 19104
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 19105
   sp = STACKTOP; //@line 19106
   return;
  } else {
   if (($8 | 0) < 8388608) {
    if (($8 | 0) < 524288) {
     if (($8 | 0) < 131072) {
      if (($8 | 0) < 65536) {
       switch ($8 | 0) {
       case 32768:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19122
         break L2;
        }
       }
       $$043 = 15; //@line 19126
       $$048 = $8; //@line 19126
       break;
      } else {
       switch ($8 | 0) {
       case 65536:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19134
         break L2;
        }
       }
       $$043 = 16; //@line 19138
       $$048 = $8; //@line 19138
       break;
      }
     } else {
      if (($8 | 0) < 262144) {
       switch ($8 | 0) {
       case 131072:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19149
         break L2;
        }
       }
       $$043 = 17; //@line 19153
       $$048 = $8; //@line 19153
       break;
      } else {
       switch ($8 | 0) {
       case 262144:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19161
         break L2;
        }
       }
       $$043 = 18; //@line 19165
       $$048 = $8; //@line 19165
       break;
      }
     }
    } else {
     if (($8 | 0) < 2097152) {
      if (($8 | 0) < 1048576) {
       switch ($8 | 0) {
       case 524288:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19179
         break L2;
        }
       }
       $$043 = 19; //@line 19183
       $$048 = $8; //@line 19183
       break;
      } else {
       switch ($8 | 0) {
       case 1048576:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19191
         break L2;
        }
       }
       $$043 = 20; //@line 19195
       $$048 = $8; //@line 19195
       break;
      }
     } else {
      if (($8 | 0) < 4194304) {
       switch ($8 | 0) {
       case 2097152:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19206
         break L2;
        }
       }
       $$043 = 21; //@line 19210
       $$048 = $8; //@line 19210
       break;
      } else {
       switch ($8 | 0) {
       case 4194304:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19218
         break L2;
        }
       }
       $$043 = 22; //@line 19222
       $$048 = $8; //@line 19222
       break;
      }
     }
    }
   } else {
    if (($8 | 0) < 134217728) {
     if (($8 | 0) < 33554432) {
      if (($8 | 0) < 16777216) {
       switch ($8 | 0) {
       case 8388608:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19239
         break L2;
        }
       }
       $$043 = 23; //@line 19243
       $$048 = $8; //@line 19243
       break;
      } else {
       switch ($8 | 0) {
       case 16777216:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19251
         break L2;
        }
       }
       $$043 = 24; //@line 19255
       $$048 = $8; //@line 19255
       break;
      }
     } else {
      if (($8 | 0) < 67108864) {
       switch ($8 | 0) {
       case 33554432:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19266
         break L2;
        }
       }
       $$043 = 25; //@line 19270
       $$048 = $8; //@line 19270
       break;
      } else {
       switch ($8 | 0) {
       case 67108864:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19278
         break L2;
        }
       }
       $$043 = 26; //@line 19282
       $$048 = $8; //@line 19282
       break;
      }
     }
    } else {
     if (($8 | 0) < 536870912) {
      if (($8 | 0) < 268435456) {
       switch ($8 | 0) {
       case 134217728:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19296
         break L2;
        }
       }
       $$043 = 27; //@line 19300
       $$048 = $8; //@line 19300
       break;
      } else {
       switch ($8 | 0) {
       case 268435456:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19308
         break L2;
        }
       }
       $$043 = 28; //@line 19312
       $$048 = $8; //@line 19312
       break;
      }
     } else {
      if (($8 | 0) < 1073741824) {
       switch ($8 | 0) {
       case 536870912:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19323
         break L2;
        }
       }
       $$043 = 29; //@line 19327
       $$048 = $8; //@line 19327
       break;
      } else {
       switch ($8 | 0) {
       case 1073741824:
        {
         break;
        }
       default:
        {
         label = 43; //@line 19335
         break L2;
        }
       }
       $$043 = 30; //@line 19339
       $$048 = $8; //@line 19339
       break;
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 43) {
  $$043 = 0; //@line 19348
  $$048 = $8; //@line 19348
 }
 $14 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 19351
 if (($14 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 19355
  _mbed_assert_internal(14438, 14440, 55); //@line 19356
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 606; //@line 19359
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 19360
   HEAP32[$16 >> 2] = $2; //@line 19361
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 19362
   HEAP32[$17 >> 2] = $4; //@line 19363
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 19364
   HEAP32[$18 >> 2] = $$048; //@line 19365
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 19366
   HEAP8[$19 >> 0] = $$043; //@line 19367
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 19368
   HEAP32[$20 >> 2] = $6; //@line 19369
   sp = STACKTOP; //@line 19370
   return;
  }
  ___async_unwind = 0; //@line 19373
  HEAP32[$ReallocAsyncCtx6 >> 2] = 606; //@line 19374
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 19375
  HEAP32[$16 >> 2] = $2; //@line 19376
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 19377
  HEAP32[$17 >> 2] = $4; //@line 19378
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 19379
  HEAP32[$18 >> 2] = $$048; //@line 19380
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 19381
  HEAP8[$19 >> 0] = $$043; //@line 19382
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 19383
  HEAP32[$20 >> 2] = $6; //@line 19384
  sp = STACKTOP; //@line 19385
  return;
 } else {
  $22 = 7 << $14 + -4; //@line 19389
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 19390
  $24 = tempRet0; //@line 19391
  $25 = _i64Add($$048 | 0, 0, -1, -1) | 0; //@line 19392
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 19394
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $$048 | 0, 0) | 0; //@line 19396
  $30 = tempRet0; //@line 19397
  $31 = HEAP32[$2 >> 2] | 0; //@line 19398
  HEAP32[$31 >> 2] = 0; //@line 19399
  HEAP32[$31 + 4 >> 2] = 0; //@line 19401
  $35 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 19404
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 19405
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 19406
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 19409
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 19410
   HEAP32[$37 >> 2] = $2; //@line 19411
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 19412
   HEAP32[$38 >> 2] = $$048; //@line 19413
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 19414
   HEAP8[$39 >> 0] = $$043; //@line 19415
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 19416
   HEAP32[$40 >> 2] = $14; //@line 19417
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 19418
   HEAP32[$41 >> 2] = $22; //@line 19419
   $42 = $ReallocAsyncCtx3 + 24 | 0; //@line 19420
   $43 = $42; //@line 19421
   $44 = $43; //@line 19422
   HEAP32[$44 >> 2] = $29; //@line 19423
   $45 = $43 + 4 | 0; //@line 19424
   $46 = $45; //@line 19425
   HEAP32[$46 >> 2] = $30; //@line 19426
   $47 = $ReallocAsyncCtx3 + 32 | 0; //@line 19427
   HEAP32[$47 >> 2] = $6; //@line 19428
   $48 = $ReallocAsyncCtx3 + 36 | 0; //@line 19429
   HEAP32[$48 >> 2] = $4; //@line 19430
   sp = STACKTOP; //@line 19431
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 19435
  ___async_unwind = 0; //@line 19436
  HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 19437
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 19438
  HEAP32[$37 >> 2] = $2; //@line 19439
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 19440
  HEAP32[$38 >> 2] = $$048; //@line 19441
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 19442
  HEAP8[$39 >> 0] = $$043; //@line 19443
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 19444
  HEAP32[$40 >> 2] = $14; //@line 19445
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 19446
  HEAP32[$41 >> 2] = $22; //@line 19447
  $42 = $ReallocAsyncCtx3 + 24 | 0; //@line 19448
  $43 = $42; //@line 19449
  $44 = $43; //@line 19450
  HEAP32[$44 >> 2] = $29; //@line 19451
  $45 = $43 + 4 | 0; //@line 19452
  $46 = $45; //@line 19453
  HEAP32[$46 >> 2] = $30; //@line 19454
  $47 = $ReallocAsyncCtx3 + 32 | 0; //@line 19455
  HEAP32[$47 >> 2] = $6; //@line 19456
  $48 = $ReallocAsyncCtx3 + 36 | 0; //@line 19457
  HEAP32[$48 >> 2] = $4; //@line 19458
  sp = STACKTOP; //@line 19459
  return;
 }
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i45 = 0, $$019$i = 0, $$019$i42 = 0, $$021$i44 = 0, $$09$i = 0, $$09$i53 = 0, $$09$i58 = 0, $$sink$sink$i = 0, $105 = 0, $108 = 0, $116 = 0, $117 = 0, $12 = 0, $130 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $160 = 0, $177 = 0, $181 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $69 = 0, $7 = 0, $70 = 0, $89 = 0, $9 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx3 = 0, $AsyncCtx32 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $116$looptemp = 0;
 sp = STACKTOP; //@line 3970
 STACKTOP = STACKTOP + 80 | 0; //@line 3971
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 3971
 $2 = sp + 56 | 0; //@line 3972
 $3 = sp + 4 | 0; //@line 3973
 $4 = sp + 40 | 0; //@line 3974
 $5 = sp + 24 | 0; //@line 3975
 $6 = sp + 8 | 0; //@line 3976
 $7 = sp; //@line 3977
 if (!$0) {
  $$0 = -24832; //@line 3980
  STACKTOP = sp; //@line 3981
  return $$0 | 0; //@line 3981
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 3983
 if (!$9) {
  $$0 = -24832; //@line 3986
  STACKTOP = sp; //@line 3987
  return $$0 | 0; //@line 3987
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 3990
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 3995
  STACKTOP = sp; //@line 3996
  return $$0 | 0; //@line 3996
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 3999
 $AsyncCtx26 = _emscripten_alloc_async_context(68, sp) | 0; //@line 4000
 _mbedtls_platform_zeroize($4, 16); //@line 4001
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 584; //@line 4004
  HEAP32[$AsyncCtx26 + 4 >> 2] = $5; //@line 4006
  HEAP32[$AsyncCtx26 + 8 >> 2] = $12; //@line 4008
  HEAP32[$AsyncCtx26 + 12 >> 2] = $7; //@line 4010
  HEAP32[$AsyncCtx26 + 16 >> 2] = $6; //@line 4012
  HEAP32[$AsyncCtx26 + 20 >> 2] = $4; //@line 4014
  HEAP32[$AsyncCtx26 + 24 >> 2] = $1; //@line 4016
  HEAP32[$AsyncCtx26 + 28 >> 2] = $16; //@line 4018
  HEAP32[$AsyncCtx26 + 32 >> 2] = $0; //@line 4020
  HEAP32[$AsyncCtx26 + 36 >> 2] = $7; //@line 4022
  HEAP32[$AsyncCtx26 + 40 >> 2] = $12; //@line 4024
  HEAP32[$AsyncCtx26 + 44 >> 2] = $4; //@line 4026
  HEAP32[$AsyncCtx26 + 48 >> 2] = $6; //@line 4028
  HEAP32[$AsyncCtx26 + 52 >> 2] = $5; //@line 4030
  HEAP32[$AsyncCtx26 + 56 >> 2] = $2; //@line 4032
  HEAP32[$AsyncCtx26 + 60 >> 2] = $0; //@line 4034
  HEAP32[$AsyncCtx26 + 64 >> 2] = $3; //@line 4036
  sp = STACKTOP; //@line 4037
  STACKTOP = sp; //@line 4038
  return 0; //@line 4038
 }
 _emscripten_free_async_context($AsyncCtx26 | 0); //@line 4040
 $AsyncCtx22 = _emscripten_alloc_async_context(68, sp) | 0; //@line 4041
 _mbedtls_platform_zeroize($5, 16); //@line 4042
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 585; //@line 4045
  HEAP32[$AsyncCtx22 + 4 >> 2] = $5; //@line 4047
  HEAP32[$AsyncCtx22 + 8 >> 2] = $12; //@line 4049
  HEAP32[$AsyncCtx22 + 12 >> 2] = $7; //@line 4051
  HEAP32[$AsyncCtx22 + 16 >> 2] = $6; //@line 4053
  HEAP32[$AsyncCtx22 + 20 >> 2] = $4; //@line 4055
  HEAP32[$AsyncCtx22 + 24 >> 2] = $1; //@line 4057
  HEAP32[$AsyncCtx22 + 28 >> 2] = $16; //@line 4059
  HEAP32[$AsyncCtx22 + 32 >> 2] = $0; //@line 4061
  HEAP32[$AsyncCtx22 + 36 >> 2] = $7; //@line 4063
  HEAP32[$AsyncCtx22 + 40 >> 2] = $12; //@line 4065
  HEAP32[$AsyncCtx22 + 44 >> 2] = $4; //@line 4067
  HEAP32[$AsyncCtx22 + 48 >> 2] = $6; //@line 4069
  HEAP32[$AsyncCtx22 + 52 >> 2] = $5; //@line 4071
  HEAP32[$AsyncCtx22 + 56 >> 2] = $2; //@line 4073
  HEAP32[$AsyncCtx22 + 60 >> 2] = $0; //@line 4075
  HEAP32[$AsyncCtx22 + 64 >> 2] = $3; //@line 4077
  sp = STACKTOP; //@line 4078
  STACKTOP = sp; //@line 4079
  return 0; //@line 4079
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 4081
 $AsyncCtx18 = _emscripten_alloc_async_context(76, sp) | 0; //@line 4082
 _mbedtls_platform_zeroize($2, 16); //@line 4083
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 586; //@line 4086
  HEAP32[$AsyncCtx18 + 4 >> 2] = $5; //@line 4088
  HEAP32[$AsyncCtx18 + 8 >> 2] = $12; //@line 4090
  HEAP32[$AsyncCtx18 + 12 >> 2] = $7; //@line 4092
  HEAP32[$AsyncCtx18 + 16 >> 2] = $6; //@line 4094
  HEAP32[$AsyncCtx18 + 20 >> 2] = $4; //@line 4096
  HEAP32[$AsyncCtx18 + 24 >> 2] = $1; //@line 4098
  HEAP32[$AsyncCtx18 + 28 >> 2] = $16; //@line 4100
  HEAP32[$AsyncCtx18 + 32 >> 2] = $0; //@line 4102
  HEAP32[$AsyncCtx18 + 36 >> 2] = $7; //@line 4104
  HEAP32[$AsyncCtx18 + 40 >> 2] = $12; //@line 4106
  HEAP32[$AsyncCtx18 + 44 >> 2] = $4; //@line 4108
  HEAP32[$AsyncCtx18 + 48 >> 2] = $6; //@line 4110
  HEAP32[$AsyncCtx18 + 52 >> 2] = $2; //@line 4112
  HEAP32[$AsyncCtx18 + 56 >> 2] = $5; //@line 4114
  HEAP32[$AsyncCtx18 + 60 >> 2] = $2; //@line 4116
  HEAP32[$AsyncCtx18 + 64 >> 2] = $3; //@line 4118
  HEAP32[$AsyncCtx18 + 68 >> 2] = $0; //@line 4120
  HEAP32[$AsyncCtx18 + 72 >> 2] = $3; //@line 4122
  sp = STACKTOP; //@line 4123
  STACKTOP = sp; //@line 4124
  return 0; //@line 4124
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 4126
 $69 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 4129
 $AsyncCtx32 = _emscripten_alloc_async_context(72, sp) | 0; //@line 4130
 $70 = _mbedtls_cipher_update($0, $2, $69, $2, $3) | 0; //@line 4131
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 587; //@line 4134
  HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 4136
  HEAP32[$AsyncCtx32 + 8 >> 2] = $12; //@line 4138
  HEAP32[$AsyncCtx32 + 12 >> 2] = $16; //@line 4140
  HEAP32[$AsyncCtx32 + 16 >> 2] = $0; //@line 4142
  HEAP32[$AsyncCtx32 + 20 >> 2] = $7; //@line 4144
  HEAP32[$AsyncCtx32 + 24 >> 2] = $7; //@line 4146
  HEAP32[$AsyncCtx32 + 28 >> 2] = $6; //@line 4148
  HEAP32[$AsyncCtx32 + 32 >> 2] = $5; //@line 4150
  HEAP32[$AsyncCtx32 + 36 >> 2] = $4; //@line 4152
  HEAP32[$AsyncCtx32 + 40 >> 2] = $12; //@line 4154
  HEAP32[$AsyncCtx32 + 44 >> 2] = $4; //@line 4156
  HEAP32[$AsyncCtx32 + 48 >> 2] = $6; //@line 4158
  HEAP32[$AsyncCtx32 + 52 >> 2] = $2; //@line 4160
  HEAP32[$AsyncCtx32 + 56 >> 2] = $69; //@line 4162
  HEAP32[$AsyncCtx32 + 60 >> 2] = $5; //@line 4164
  HEAP32[$AsyncCtx32 + 64 >> 2] = $2; //@line 4166
  HEAP32[$AsyncCtx32 + 68 >> 2] = $3; //@line 4168
  sp = STACKTOP; //@line 4169
  STACKTOP = sp; //@line 4170
  return 0; //@line 4170
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 4172
 L22 : do {
  if (!$70) {
   switch ($69 | 0) {
   case 16:
    {
     $$019$i42 = 135; //@line 4178
     break;
    }
   case 8:
    {
     $$019$i42 = 27; //@line 4182
     break;
    }
   default:
    {
     break L22;
    }
   }
   $89 = $69 + -1 | 0; //@line 4189
   $$01720$i45 = 0; //@line 4190
   $$021$i44 = $89; //@line 4190
   while (1) {
    $92 = HEAPU8[$2 + $$021$i44 >> 0] | 0; //@line 4194
    HEAP8[$4 + $$021$i44 >> 0] = $92 << 1 | $$01720$i45; //@line 4199
    if (($$021$i44 | 0) > 0) {
     $$01720$i45 = $92 >>> 7; //@line 4204
     $$021$i44 = $$021$i44 + -1 | 0; //@line 4204
    } else {
     break;
    }
   }
   $105 = $4 + $89 | 0; //@line 4214
   $108 = $$019$i42 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$105 >> 0] | 0); //@line 4217
   HEAP8[$105 >> 0] = $108; //@line 4219
   switch ($69 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 4222
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 4226
     break;
    }
   default:
    {
     break L22;
    }
   }
   HEAP8[$5 + $89 >> 0] = $108 << 1; //@line 4236
   if (($89 | 0) > 0) {
    $116 = $108; //@line 4240
    $117 = $69 + -2 | 0; //@line 4240
    while (1) {
     $116$looptemp = $116;
     $116 = HEAPU8[$4 + $117 >> 0] | 0; //@line 4245
     HEAP8[$5 + $117 >> 0] = $116 << 1 | $116$looptemp >>> 7; //@line 4250
     if (($117 | 0) <= 0) {
      break;
     } else {
      $117 = $117 + -1 | 0; //@line 4254
     }
    }
   }
   $130 = $5 + $89 | 0; //@line 4265
   HEAP8[$130 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$130 >> 0] | 0); //@line 4270
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(64, sp) | 0; //@line 4273
 _mbedtls_platform_zeroize($2, 16); //@line 4274
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 588; //@line 4277
  HEAP32[$AsyncCtx14 + 4 >> 2] = $1; //@line 4279
  HEAP32[$AsyncCtx14 + 8 >> 2] = $12; //@line 4281
  HEAP32[$AsyncCtx14 + 12 >> 2] = $16; //@line 4283
  HEAP32[$AsyncCtx14 + 16 >> 2] = $0; //@line 4285
  HEAP32[$AsyncCtx14 + 20 >> 2] = $7; //@line 4287
  HEAP32[$AsyncCtx14 + 24 >> 2] = $7; //@line 4289
  HEAP32[$AsyncCtx14 + 28 >> 2] = $6; //@line 4291
  HEAP32[$AsyncCtx14 + 32 >> 2] = $5; //@line 4293
  HEAP32[$AsyncCtx14 + 36 >> 2] = $4; //@line 4295
  HEAP32[$AsyncCtx14 + 40 >> 2] = $12; //@line 4297
  HEAP32[$AsyncCtx14 + 44 >> 2] = $4; //@line 4299
  HEAP32[$AsyncCtx14 + 48 >> 2] = $6; //@line 4301
  HEAP32[$AsyncCtx14 + 52 >> 2] = $3; //@line 4303
  HEAP32[$AsyncCtx14 + 56 >> 2] = $2; //@line 4305
  HEAP32[$AsyncCtx14 + 60 >> 2] = $5; //@line 4307
  sp = STACKTOP; //@line 4308
  STACKTOP = sp; //@line 4309
  return 0; //@line 4309
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 4311
 $150 = $12 + 16 | 0; //@line 4312
 $151 = $12 + 32 | 0; //@line 4313
 $152 = HEAP32[$151 >> 2] | 0; //@line 4314
 if ($152 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 4317
  do {
   if ($$013$i >>> 0 < $152 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 4323
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($152 | 0) ? -128 : 0; //@line 4327
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 4330
   $$013$i = $$013$i + 1 | 0; //@line 4331
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i = 0; //@line 4334
  do {
   $160 = $6 + $$09$i | 0; //@line 4341
   HEAP8[$160 >> 0] = HEAP8[$5 + $$09$i >> 0] ^ HEAP8[$160 >> 0]; //@line 4346
   $$09$i = $$09$i + 1 | 0; //@line 4347
  } while (($$09$i | 0) != ($16 | 0));
  label = 33; //@line 4350
 } else {
  if ($16 | 0) {
   $$09$i53 = 0; //@line 4359
   do {
    HEAP8[$6 + $$09$i53 >> 0] = HEAP8[$4 + $$09$i53 >> 0] ^ HEAP8[$12 + 16 + $$09$i53 >> 0]; //@line 4367
    $$09$i53 = $$09$i53 + 1 | 0; //@line 4368
   } while (($$09$i53 | 0) != ($16 | 0));
   label = 33; //@line 4371
  }
 }
 if ((label | 0) == 33) {
  if ($16 | 0) {
   $$09$i58 = 0; //@line 4382
   do {
    $177 = $12 + $$09$i58 | 0; //@line 4386
    HEAP8[$177 >> 0] = HEAP8[$177 >> 0] ^ HEAP8[$6 + $$09$i58 >> 0]; //@line 4389
    $$09$i58 = $$09$i58 + 1 | 0; //@line 4390
   } while (($$09$i58 | 0) != ($16 | 0));
  }
 }
 $AsyncCtx29 = _emscripten_alloc_async_context(40, sp) | 0; //@line 4400
 $181 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 4401
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 589; //@line 4404
  HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 4406
  HEAP32[$AsyncCtx29 + 8 >> 2] = $12; //@line 4408
  HEAP32[$AsyncCtx29 + 12 >> 2] = $16; //@line 4410
  HEAP32[$AsyncCtx29 + 16 >> 2] = $4; //@line 4412
  HEAP32[$AsyncCtx29 + 20 >> 2] = $5; //@line 4414
  HEAP32[$AsyncCtx29 + 24 >> 2] = $151; //@line 4416
  HEAP32[$AsyncCtx29 + 28 >> 2] = $150; //@line 4418
  HEAP32[$AsyncCtx29 + 32 >> 2] = $7; //@line 4420
  HEAP32[$AsyncCtx29 + 36 >> 2] = $6; //@line 4422
  sp = STACKTOP; //@line 4423
  STACKTOP = sp; //@line 4424
  return 0; //@line 4424
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 4426
 if (!$181) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 4429
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 4431
 _mbedtls_platform_zeroize($4, 16); //@line 4432
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 590; //@line 4435
  HEAP32[$AsyncCtx11 + 4 >> 2] = $5; //@line 4437
  HEAP32[$AsyncCtx11 + 8 >> 2] = $151; //@line 4439
  HEAP32[$AsyncCtx11 + 12 >> 2] = $150; //@line 4441
  HEAP32[$AsyncCtx11 + 16 >> 2] = $12; //@line 4443
  HEAP32[$AsyncCtx11 + 20 >> 2] = $181; //@line 4445
  HEAP32[$AsyncCtx11 + 24 >> 2] = $7; //@line 4447
  HEAP32[$AsyncCtx11 + 28 >> 2] = $6; //@line 4449
  HEAP32[$AsyncCtx11 + 32 >> 2] = $4; //@line 4451
  sp = STACKTOP; //@line 4452
  STACKTOP = sp; //@line 4453
  return 0; //@line 4453
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4455
 $AsyncCtx7 = _emscripten_alloc_async_context(36, sp) | 0; //@line 4456
 _mbedtls_platform_zeroize($5, 16); //@line 4457
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 591; //@line 4460
  HEAP32[$AsyncCtx7 + 4 >> 2] = $151; //@line 4462
  HEAP32[$AsyncCtx7 + 8 >> 2] = $150; //@line 4464
  HEAP32[$AsyncCtx7 + 12 >> 2] = $12; //@line 4466
  HEAP32[$AsyncCtx7 + 16 >> 2] = $181; //@line 4468
  HEAP32[$AsyncCtx7 + 20 >> 2] = $7; //@line 4470
  HEAP32[$AsyncCtx7 + 24 >> 2] = $6; //@line 4472
  HEAP32[$AsyncCtx7 + 28 >> 2] = $5; //@line 4474
  HEAP32[$AsyncCtx7 + 32 >> 2] = $4; //@line 4476
  sp = STACKTOP; //@line 4477
  STACKTOP = sp; //@line 4478
  return 0; //@line 4478
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4480
 HEAP32[$151 >> 2] = 0; //@line 4481
 $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4482
 _mbedtls_platform_zeroize($150, 16); //@line 4483
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 592; //@line 4486
  HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 4488
  HEAP32[$AsyncCtx3 + 8 >> 2] = $181; //@line 4490
  HEAP32[$AsyncCtx3 + 12 >> 2] = $7; //@line 4492
  HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 4494
  HEAP32[$AsyncCtx3 + 20 >> 2] = $5; //@line 4496
  HEAP32[$AsyncCtx3 + 24 >> 2] = $4; //@line 4498
  sp = STACKTOP; //@line 4499
  STACKTOP = sp; //@line 4500
  return 0; //@line 4500
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4502
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 4503
 _mbedtls_platform_zeroize($12, 16); //@line 4504
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 593; //@line 4507
  HEAP32[$AsyncCtx + 4 >> 2] = $181; //@line 4509
  HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 4511
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 4513
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4515
  HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 4517
  sp = STACKTOP; //@line 4518
  STACKTOP = sp; //@line 4519
  return 0; //@line 4519
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4521
 $$0 = $181; //@line 4522
 STACKTOP = sp; //@line 4523
 return $$0 | 0; //@line 4523
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $115 = 0, $12 = 0, $120 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16161
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16163
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16165
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16167
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16169
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16171
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16173
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16175
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16177
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16179
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16181
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16183
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16185
 HEAP8[$4 + 2900 >> 0] = 0; //@line 16187
 HEAP8[$4 + 2898 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 14 >> 0] | 0; //@line 16192
 HEAP16[$4 + 2896 >> 1] = HEAP16[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 24 >> 1] | 0; //@line 16197
 HEAP8[$4 + 2899 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 26 >> 0] | 0; //@line 16202
 if (HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac25post_process_mlme_requestEv($2); //@line 16207
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 16208
  __ZN12LoRaWANStack20mlme_confirm_handlerEv($4); //@line 16209
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 277; //@line 16212
   $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 16213
   HEAP32[$41 >> 2] = $2; //@line 16214
   $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 16215
   HEAP32[$42 >> 2] = $6; //@line 16216
   $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 16217
   HEAP32[$43 >> 2] = $8; //@line 16218
   $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 16219
   HEAP32[$44 >> 2] = $10; //@line 16220
   $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 16221
   HEAP32[$45 >> 2] = $4; //@line 16222
   $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 16223
   HEAP32[$46 >> 2] = $12; //@line 16224
   $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 16225
   HEAP32[$47 >> 2] = $14; //@line 16226
   $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 16227
   HEAP32[$48 >> 2] = $16; //@line 16228
   $49 = $ReallocAsyncCtx3 + 36 | 0; //@line 16229
   HEAP32[$49 >> 2] = $18; //@line 16230
   $50 = $ReallocAsyncCtx3 + 40 | 0; //@line 16231
   HEAP32[$50 >> 2] = $20; //@line 16232
   $51 = $ReallocAsyncCtx3 + 44 | 0; //@line 16233
   HEAP32[$51 >> 2] = $22; //@line 16234
   $52 = $ReallocAsyncCtx3 + 48 | 0; //@line 16235
   HEAP32[$52 >> 2] = $24; //@line 16236
   sp = STACKTOP; //@line 16237
   return;
  }
  ___async_unwind = 0; //@line 16240
  HEAP32[$ReallocAsyncCtx3 >> 2] = 277; //@line 16241
  $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 16242
  HEAP32[$41 >> 2] = $2; //@line 16243
  $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 16244
  HEAP32[$42 >> 2] = $6; //@line 16245
  $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 16246
  HEAP32[$43 >> 2] = $8; //@line 16247
  $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 16248
  HEAP32[$44 >> 2] = $10; //@line 16249
  $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 16250
  HEAP32[$45 >> 2] = $4; //@line 16251
  $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 16252
  HEAP32[$46 >> 2] = $12; //@line 16253
  $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 16254
  HEAP32[$47 >> 2] = $14; //@line 16255
  $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 16256
  HEAP32[$48 >> 2] = $16; //@line 16257
  $49 = $ReallocAsyncCtx3 + 36 | 0; //@line 16258
  HEAP32[$49 >> 2] = $18; //@line 16259
  $50 = $ReallocAsyncCtx3 + 40 | 0; //@line 16260
  HEAP32[$50 >> 2] = $20; //@line 16261
  $51 = $ReallocAsyncCtx3 + 44 | 0; //@line 16262
  HEAP32[$51 >> 2] = $22; //@line 16263
  $52 = $ReallocAsyncCtx3 + 48 | 0; //@line 16264
  HEAP32[$52 >> 2] = $24; //@line 16265
  sp = STACKTOP; //@line 16266
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  return;
 }
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) != 1) {
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 16277
  HEAP32[$10 >> 2] = HEAP32[$10 >> 2] | 16; //@line 16280
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 16281
  __ZN12LoRaWANStack26process_status_check_stateEv($4); //@line 16282
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 280; //@line 16285
   $90 = $ReallocAsyncCtx5 + 4 | 0; //@line 16286
   HEAP32[$90 >> 2] = $2; //@line 16287
   $91 = $ReallocAsyncCtx5 + 8 | 0; //@line 16288
   HEAP32[$91 >> 2] = $10; //@line 16289
   $92 = $ReallocAsyncCtx5 + 12 | 0; //@line 16290
   HEAP32[$92 >> 2] = $4; //@line 16291
   $93 = $ReallocAsyncCtx5 + 16 | 0; //@line 16292
   HEAP32[$93 >> 2] = $16; //@line 16293
   $94 = $ReallocAsyncCtx5 + 20 | 0; //@line 16294
   HEAP32[$94 >> 2] = $18; //@line 16295
   $95 = $ReallocAsyncCtx5 + 24 | 0; //@line 16296
   HEAP32[$95 >> 2] = $20; //@line 16297
   $96 = $ReallocAsyncCtx5 + 28 | 0; //@line 16298
   HEAP32[$96 >> 2] = $22; //@line 16299
   $97 = $ReallocAsyncCtx5 + 32 | 0; //@line 16300
   HEAP32[$97 >> 2] = $24; //@line 16301
   sp = STACKTOP; //@line 16302
   return;
  }
  ___async_unwind = 0; //@line 16305
  HEAP32[$ReallocAsyncCtx5 >> 2] = 280; //@line 16306
  $90 = $ReallocAsyncCtx5 + 4 | 0; //@line 16307
  HEAP32[$90 >> 2] = $2; //@line 16308
  $91 = $ReallocAsyncCtx5 + 8 | 0; //@line 16309
  HEAP32[$91 >> 2] = $10; //@line 16310
  $92 = $ReallocAsyncCtx5 + 12 | 0; //@line 16311
  HEAP32[$92 >> 2] = $4; //@line 16312
  $93 = $ReallocAsyncCtx5 + 16 | 0; //@line 16313
  HEAP32[$93 >> 2] = $16; //@line 16314
  $94 = $ReallocAsyncCtx5 + 20 | 0; //@line 16315
  HEAP32[$94 >> 2] = $18; //@line 16316
  $95 = $ReallocAsyncCtx5 + 24 | 0; //@line 16317
  HEAP32[$95 >> 2] = $20; //@line 16318
  $96 = $ReallocAsyncCtx5 + 28 | 0; //@line 16319
  HEAP32[$96 >> 2] = $22; //@line 16320
  $97 = $ReallocAsyncCtx5 + 32 | 0; //@line 16321
  HEAP32[$97 >> 2] = $24; //@line 16322
  sp = STACKTOP; //@line 16323
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 32 >> 0] | 0) {
  HEAP32[$6 >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) + 11 >> 0]; //@line 16335
  _mbed_tracef(16, 12187, 12389, $6); //@line 16336
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 16337
  HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -18 | 16; //@line 16341
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 16342
  __ZN12LoRaWANStack26process_status_check_stateEv($4); //@line 16343
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 278; //@line 16346
   $68 = $ReallocAsyncCtx7 + 4 | 0; //@line 16347
   HEAP32[$68 >> 2] = $2; //@line 16348
   $69 = $ReallocAsyncCtx7 + 8 | 0; //@line 16349
   HEAP32[$69 >> 2] = $10; //@line 16350
   $70 = $ReallocAsyncCtx7 + 12 | 0; //@line 16351
   HEAP32[$70 >> 2] = $4; //@line 16352
   $71 = $ReallocAsyncCtx7 + 16 | 0; //@line 16353
   HEAP32[$71 >> 2] = $16; //@line 16354
   $72 = $ReallocAsyncCtx7 + 20 | 0; //@line 16355
   HEAP32[$72 >> 2] = $18; //@line 16356
   $73 = $ReallocAsyncCtx7 + 24 | 0; //@line 16357
   HEAP32[$73 >> 2] = $20; //@line 16358
   $74 = $ReallocAsyncCtx7 + 28 | 0; //@line 16359
   HEAP32[$74 >> 2] = $22; //@line 16360
   $75 = $ReallocAsyncCtx7 + 32 | 0; //@line 16361
   HEAP32[$75 >> 2] = $24; //@line 16362
   sp = STACKTOP; //@line 16363
   return;
  }
  ___async_unwind = 0; //@line 16366
  HEAP32[$ReallocAsyncCtx7 >> 2] = 278; //@line 16367
  $68 = $ReallocAsyncCtx7 + 4 | 0; //@line 16368
  HEAP32[$68 >> 2] = $2; //@line 16369
  $69 = $ReallocAsyncCtx7 + 8 | 0; //@line 16370
  HEAP32[$69 >> 2] = $10; //@line 16371
  $70 = $ReallocAsyncCtx7 + 12 | 0; //@line 16372
  HEAP32[$70 >> 2] = $4; //@line 16373
  $71 = $ReallocAsyncCtx7 + 16 | 0; //@line 16374
  HEAP32[$71 >> 2] = $16; //@line 16375
  $72 = $ReallocAsyncCtx7 + 20 | 0; //@line 16376
  HEAP32[$72 >> 2] = $18; //@line 16377
  $73 = $ReallocAsyncCtx7 + 24 | 0; //@line 16378
  HEAP32[$73 >> 2] = $20; //@line 16379
  $74 = $ReallocAsyncCtx7 + 28 | 0; //@line 16380
  HEAP32[$74 >> 2] = $22; //@line 16381
  $75 = $ReallocAsyncCtx7 + 32 | 0; //@line 16382
  HEAP32[$75 >> 2] = $24; //@line 16383
  sp = STACKTOP; //@line 16384
  return;
 }
 if (!(__ZN7LoRaMac24continue_sending_processEv($2) | 0)) {
  _mbed_tracef(2, 12187, 12192, $12); //@line 16389
  HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -18 | 1; //@line 16393
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 16394
  __ZN12LoRaWANStack26process_status_check_stateEv($4); //@line 16395
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 279; //@line 16398
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 16399
   HEAP32[$80 >> 2] = $2; //@line 16400
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 16401
   HEAP32[$81 >> 2] = $10; //@line 16402
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 16403
   HEAP32[$82 >> 2] = $4; //@line 16404
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 16405
   HEAP32[$83 >> 2] = $16; //@line 16406
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 16407
   HEAP32[$84 >> 2] = $18; //@line 16408
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 16409
   HEAP32[$85 >> 2] = $20; //@line 16410
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 16411
   HEAP32[$86 >> 2] = $22; //@line 16412
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 16413
   HEAP32[$87 >> 2] = $24; //@line 16414
   sp = STACKTOP; //@line 16415
   return;
  }
  ___async_unwind = 0; //@line 16418
  HEAP32[$ReallocAsyncCtx6 >> 2] = 279; //@line 16419
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 16420
  HEAP32[$80 >> 2] = $2; //@line 16421
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 16422
  HEAP32[$81 >> 2] = $10; //@line 16423
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 16424
  HEAP32[$82 >> 2] = $4; //@line 16425
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 16426
  HEAP32[$83 >> 2] = $16; //@line 16427
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 16428
  HEAP32[$84 >> 2] = $18; //@line 16429
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 16430
  HEAP32[$85 >> 2] = $20; //@line 16431
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 16432
  HEAP32[$86 >> 2] = $22; //@line 16433
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 16434
  HEAP32[$87 >> 2] = $24; //@line 16435
  sp = STACKTOP; //@line 16436
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 16443
  HEAP32[$10 >> 2] = HEAP32[$10 >> 2] | 2; //@line 16446
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 16447
  __ZN12LoRaWANStack26process_status_check_stateEv($4); //@line 16448
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 16451
   $103 = $ReallocAsyncCtx4 + 4 | 0; //@line 16452
   HEAP32[$103 >> 2] = $10; //@line 16453
   $104 = $ReallocAsyncCtx4 + 8 | 0; //@line 16454
   HEAP32[$104 >> 2] = $2; //@line 16455
   $105 = $ReallocAsyncCtx4 + 12 | 0; //@line 16456
   HEAP32[$105 >> 2] = $16; //@line 16457
   $106 = $ReallocAsyncCtx4 + 16 | 0; //@line 16458
   HEAP32[$106 >> 2] = $4; //@line 16459
   $107 = $ReallocAsyncCtx4 + 20 | 0; //@line 16460
   HEAP32[$107 >> 2] = $18; //@line 16461
   $108 = $ReallocAsyncCtx4 + 24 | 0; //@line 16462
   HEAP32[$108 >> 2] = $20; //@line 16463
   $109 = $ReallocAsyncCtx4 + 28 | 0; //@line 16464
   HEAP32[$109 >> 2] = $22; //@line 16465
   $110 = $ReallocAsyncCtx4 + 32 | 0; //@line 16466
   HEAP32[$110 >> 2] = $24; //@line 16467
   sp = STACKTOP; //@line 16468
   return;
  }
  ___async_unwind = 0; //@line 16471
  HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 16472
  $103 = $ReallocAsyncCtx4 + 4 | 0; //@line 16473
  HEAP32[$103 >> 2] = $10; //@line 16474
  $104 = $ReallocAsyncCtx4 + 8 | 0; //@line 16475
  HEAP32[$104 >> 2] = $2; //@line 16476
  $105 = $ReallocAsyncCtx4 + 12 | 0; //@line 16477
  HEAP32[$105 >> 2] = $16; //@line 16478
  $106 = $ReallocAsyncCtx4 + 16 | 0; //@line 16479
  HEAP32[$106 >> 2] = $4; //@line 16480
  $107 = $ReallocAsyncCtx4 + 20 | 0; //@line 16481
  HEAP32[$107 >> 2] = $18; //@line 16482
  $108 = $ReallocAsyncCtx4 + 24 | 0; //@line 16483
  HEAP32[$108 >> 2] = $20; //@line 16484
  $109 = $ReallocAsyncCtx4 + 28 | 0; //@line 16485
  HEAP32[$109 >> 2] = $22; //@line 16486
  $110 = $ReallocAsyncCtx4 + 32 | 0; //@line 16487
  HEAP32[$110 >> 2] = $24; //@line 16488
  sp = STACKTOP; //@line 16489
  return;
 }
 if (!(HEAP32[$10 >> 2] & 1)) {
  $115 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 16497
  HEAP32[$16 >> 2] = $115 ? 5 : 2; //@line 16499
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$4 + 2911 >> 0] = 1; //@line 16507
  return;
 }
 _mbed_tracef(16, 12187, 12409, $18); //@line 16510
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 16511
 _mbed_tracef(16, 12187, 12433, $22); //@line 16512
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16513
 __ZN12LoRaWANStack23mlme_indication_handlerEv($4); //@line 16514
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 16517
  $120 = $ReallocAsyncCtx2 + 4 | 0; //@line 16518
  HEAP32[$120 >> 2] = $4; //@line 16519
  sp = STACKTOP; //@line 16520
  return;
 }
 ___async_unwind = 0; //@line 16523
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 16524
 $120 = $ReallocAsyncCtx2 + 4 | 0; //@line 16525
 HEAP32[$120 >> 2] = $4; //@line 16526
 sp = STACKTOP; //@line 16527
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_280($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21441
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21443
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21445
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21447
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21449
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21451
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21453
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21455
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21457
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21459
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21461
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21463
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21465
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21467
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21469
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21471
 $36 = (HEAP8[$0 + 65 >> 0] | 0) + 1 << 24 >> 24; //@line 21476
 if (($36 & 255) >= (HEAPU8[$20 >> 0] | 0)) {
  return;
 }
 $43 = (HEAPU8[$0 + 64 >> 0] | 0) + 3 & 255; //@line 21484
 if (((HEAPU8[$18 >> 0] | 0) + (HEAPU8[$28 >> 0] | 0) | 0) >>> 0 > ($36 & 255) >>> 0) {
  $42 = $43 & 255; //@line 21493
  $58 = HEAPU8[$22 + ($42 + 2) >> 0] << 16 | (HEAPU8[$22 + ($42 + 1) >> 0] << 8 | HEAPU8[$22 + $42 >> 0]); //@line 21508
  $59 = $58 * 100 | 0; //@line 21509
  HEAP32[$24 >> 2] = $59; //@line 21510
  HEAP32[$26 >> 2] = 0; //@line 21511
  if ($58 | 0) {
   if (!(HEAP8[$12 >> 0] | 0)) {
    HEAP8[$6 >> 0] = -1; //@line 21518
    $91 = HEAP32[(HEAP32[$8 >> 2] | 0) + 60 >> 2] | 0; //@line 21521
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(68) | 0; //@line 21522
    FUNCTION_TABLE_iiii[$91 & 31]($4, $10, $36) | 0; //@line 21523
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 21526
     $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 21527
     HEAP32[$92 >> 2] = $2; //@line 21528
     $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 21529
     HEAP32[$93 >> 2] = $4; //@line 21530
     $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 21531
     HEAP32[$94 >> 2] = $6; //@line 21532
     $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 21533
     HEAP32[$95 >> 2] = $8; //@line 21534
     $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 21535
     HEAP32[$96 >> 2] = $10; //@line 21536
     $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 21537
     HEAP32[$97 >> 2] = $12; //@line 21538
     $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 21539
     HEAP32[$98 >> 2] = $14; //@line 21540
     $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 21541
     HEAP32[$99 >> 2] = $16; //@line 21542
     $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 21543
     HEAP32[$100 >> 2] = $18; //@line 21544
     $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 21545
     HEAP32[$101 >> 2] = $20; //@line 21546
     $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 21547
     HEAP32[$102 >> 2] = $22; //@line 21548
     $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 21549
     HEAP32[$103 >> 2] = $24; //@line 21550
     $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 21551
     HEAP32[$104 >> 2] = $26; //@line 21552
     $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 21553
     HEAP32[$105 >> 2] = $28; //@line 21554
     $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 21555
     HEAP32[$106 >> 2] = $30; //@line 21556
     $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 21557
     HEAP8[$107 >> 0] = $43; //@line 21558
     $108 = $ReallocAsyncCtx2 + 65 | 0; //@line 21559
     HEAP8[$108 >> 0] = $36; //@line 21560
     sp = STACKTOP; //@line 21561
     return;
    }
    ___async_unwind = 0; //@line 21564
    HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 21565
    $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 21566
    HEAP32[$92 >> 2] = $2; //@line 21567
    $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 21568
    HEAP32[$93 >> 2] = $4; //@line 21569
    $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 21570
    HEAP32[$94 >> 2] = $6; //@line 21571
    $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 21572
    HEAP32[$95 >> 2] = $8; //@line 21573
    $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 21574
    HEAP32[$96 >> 2] = $10; //@line 21575
    $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 21576
    HEAP32[$97 >> 2] = $12; //@line 21577
    $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 21578
    HEAP32[$98 >> 2] = $14; //@line 21579
    $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 21580
    HEAP32[$99 >> 2] = $16; //@line 21581
    $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 21582
    HEAP32[$100 >> 2] = $18; //@line 21583
    $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 21584
    HEAP32[$101 >> 2] = $20; //@line 21585
    $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 21586
    HEAP32[$102 >> 2] = $22; //@line 21587
    $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 21588
    HEAP32[$103 >> 2] = $24; //@line 21589
    $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 21590
    HEAP32[$104 >> 2] = $26; //@line 21591
    $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 21592
    HEAP32[$105 >> 2] = $28; //@line 21593
    $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 21594
    HEAP32[$106 >> 2] = $30; //@line 21595
    $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 21596
    HEAP8[$107 >> 0] = $43; //@line 21597
    $108 = $ReallocAsyncCtx2 + 65 | 0; //@line 21598
    HEAP8[$108 >> 0] = $36; //@line 21599
    sp = STACKTOP; //@line 21600
    return;
   } else {
    $65 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 21605
    $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 21607
    $67 = FUNCTION_TABLE_iiii[$65 & 31]($4, $59, 0) | 0; //@line 21608
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 500; //@line 21611
     $68 = $ReallocAsyncCtx + 4 | 0; //@line 21612
     HEAP32[$68 >> 2] = $2; //@line 21613
     $69 = $ReallocAsyncCtx + 8 | 0; //@line 21614
     HEAP32[$69 >> 2] = $4; //@line 21615
     $70 = $ReallocAsyncCtx + 12 | 0; //@line 21616
     HEAP32[$70 >> 2] = 0; //@line 21617
     $71 = $ReallocAsyncCtx + 16 | 0; //@line 21618
     HEAP32[$71 >> 2] = $6; //@line 21619
     $72 = $ReallocAsyncCtx + 20 | 0; //@line 21620
     HEAP32[$72 >> 2] = $8; //@line 21621
     $73 = $ReallocAsyncCtx + 24 | 0; //@line 21622
     HEAP32[$73 >> 2] = $10; //@line 21623
     $74 = $ReallocAsyncCtx + 28 | 0; //@line 21624
     HEAP8[$74 >> 0] = $36; //@line 21625
     $75 = $ReallocAsyncCtx + 32 | 0; //@line 21626
     HEAP32[$75 >> 2] = $12; //@line 21627
     $76 = $ReallocAsyncCtx + 36 | 0; //@line 21628
     HEAP32[$76 >> 2] = $14; //@line 21629
     $77 = $ReallocAsyncCtx + 40 | 0; //@line 21630
     HEAP32[$77 >> 2] = $59; //@line 21631
     $78 = $ReallocAsyncCtx + 44 | 0; //@line 21632
     HEAP32[$78 >> 2] = $16; //@line 21633
     $79 = $ReallocAsyncCtx + 48 | 0; //@line 21634
     HEAP8[$79 >> 0] = $43; //@line 21635
     $80 = $ReallocAsyncCtx + 52 | 0; //@line 21636
     HEAP32[$80 >> 2] = $18; //@line 21637
     $81 = $ReallocAsyncCtx + 56 | 0; //@line 21638
     HEAP32[$81 >> 2] = $20; //@line 21639
     $82 = $ReallocAsyncCtx + 60 | 0; //@line 21640
     HEAP32[$82 >> 2] = $22; //@line 21641
     $83 = $ReallocAsyncCtx + 64 | 0; //@line 21642
     HEAP32[$83 >> 2] = $24; //@line 21643
     $84 = $ReallocAsyncCtx + 68 | 0; //@line 21644
     HEAP32[$84 >> 2] = $26; //@line 21645
     $85 = $ReallocAsyncCtx + 72 | 0; //@line 21646
     HEAP32[$85 >> 2] = $28; //@line 21647
     $86 = $ReallocAsyncCtx + 76 | 0; //@line 21648
     HEAP32[$86 >> 2] = $30; //@line 21649
     sp = STACKTOP; //@line 21650
     return;
    }
    HEAP8[___async_retval >> 0] = $67 & 1; //@line 21655
    ___async_unwind = 0; //@line 21656
    HEAP32[$ReallocAsyncCtx >> 2] = 500; //@line 21657
    $68 = $ReallocAsyncCtx + 4 | 0; //@line 21658
    HEAP32[$68 >> 2] = $2; //@line 21659
    $69 = $ReallocAsyncCtx + 8 | 0; //@line 21660
    HEAP32[$69 >> 2] = $4; //@line 21661
    $70 = $ReallocAsyncCtx + 12 | 0; //@line 21662
    HEAP32[$70 >> 2] = 0; //@line 21663
    $71 = $ReallocAsyncCtx + 16 | 0; //@line 21664
    HEAP32[$71 >> 2] = $6; //@line 21665
    $72 = $ReallocAsyncCtx + 20 | 0; //@line 21666
    HEAP32[$72 >> 2] = $8; //@line 21667
    $73 = $ReallocAsyncCtx + 24 | 0; //@line 21668
    HEAP32[$73 >> 2] = $10; //@line 21669
    $74 = $ReallocAsyncCtx + 28 | 0; //@line 21670
    HEAP8[$74 >> 0] = $36; //@line 21671
    $75 = $ReallocAsyncCtx + 32 | 0; //@line 21672
    HEAP32[$75 >> 2] = $12; //@line 21673
    $76 = $ReallocAsyncCtx + 36 | 0; //@line 21674
    HEAP32[$76 >> 2] = $14; //@line 21675
    $77 = $ReallocAsyncCtx + 40 | 0; //@line 21676
    HEAP32[$77 >> 2] = $59; //@line 21677
    $78 = $ReallocAsyncCtx + 44 | 0; //@line 21678
    HEAP32[$78 >> 2] = $16; //@line 21679
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 21680
    HEAP8[$79 >> 0] = $43; //@line 21681
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 21682
    HEAP32[$80 >> 2] = $18; //@line 21683
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 21684
    HEAP32[$81 >> 2] = $20; //@line 21685
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 21686
    HEAP32[$82 >> 2] = $22; //@line 21687
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 21688
    HEAP32[$83 >> 2] = $24; //@line 21689
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 21690
    HEAP32[$84 >> 2] = $26; //@line 21691
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 21692
    HEAP32[$85 >> 2] = $28; //@line 21693
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 21694
    HEAP32[$86 >> 2] = $30; //@line 21695
    sp = STACKTOP; //@line 21696
    return;
   }
  }
 } else {
  HEAP32[$24 >> 2] = 0; //@line 21701
  HEAP8[$30 >> 0] = 0; //@line 21702
  HEAP32[$26 >> 2] = 0; //@line 21703
 }
 $111 = HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] | 0; //@line 21707
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 21708
 FUNCTION_TABLE_iii[$111 & 31]($4, $36) | 0; //@line 21709
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 502; //@line 21712
  $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 21713
  HEAP32[$112 >> 2] = $2; //@line 21714
  $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 21715
  HEAP32[$113 >> 2] = $4; //@line 21716
  $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 21717
  HEAP32[$114 >> 2] = $6; //@line 21718
  $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 21719
  HEAP32[$115 >> 2] = $8; //@line 21720
  $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 21721
  HEAP32[$116 >> 2] = $10; //@line 21722
  $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 21723
  HEAP32[$117 >> 2] = $12; //@line 21724
  $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 21725
  HEAP32[$118 >> 2] = $14; //@line 21726
  $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 21727
  HEAP32[$119 >> 2] = $16; //@line 21728
  $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 21729
  HEAP32[$120 >> 2] = $18; //@line 21730
  $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 21731
  HEAP32[$121 >> 2] = $20; //@line 21732
  $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 21733
  HEAP32[$122 >> 2] = $22; //@line 21734
  $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 21735
  HEAP32[$123 >> 2] = $24; //@line 21736
  $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 21737
  HEAP32[$124 >> 2] = $26; //@line 21738
  $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 21739
  HEAP32[$125 >> 2] = $28; //@line 21740
  $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 21741
  HEAP32[$126 >> 2] = $30; //@line 21742
  $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 21743
  HEAP8[$127 >> 0] = $43; //@line 21744
  $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 21745
  HEAP8[$128 >> 0] = $36; //@line 21746
  sp = STACKTOP; //@line 21747
  return;
 }
 ___async_unwind = 0; //@line 21750
 HEAP32[$ReallocAsyncCtx3 >> 2] = 502; //@line 21751
 $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 21752
 HEAP32[$112 >> 2] = $2; //@line 21753
 $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 21754
 HEAP32[$113 >> 2] = $4; //@line 21755
 $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 21756
 HEAP32[$114 >> 2] = $6; //@line 21757
 $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 21758
 HEAP32[$115 >> 2] = $8; //@line 21759
 $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 21760
 HEAP32[$116 >> 2] = $10; //@line 21761
 $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 21762
 HEAP32[$117 >> 2] = $12; //@line 21763
 $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 21764
 HEAP32[$118 >> 2] = $14; //@line 21765
 $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 21766
 HEAP32[$119 >> 2] = $16; //@line 21767
 $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 21768
 HEAP32[$120 >> 2] = $18; //@line 21769
 $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 21770
 HEAP32[$121 >> 2] = $20; //@line 21771
 $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 21772
 HEAP32[$122 >> 2] = $22; //@line 21773
 $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 21774
 HEAP32[$123 >> 2] = $24; //@line 21775
 $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 21776
 HEAP32[$124 >> 2] = $26; //@line 21777
 $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 21778
 HEAP32[$125 >> 2] = $28; //@line 21779
 $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 21780
 HEAP32[$126 >> 2] = $30; //@line 21781
 $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 21782
 HEAP8[$127 >> 0] = $43; //@line 21783
 $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 21784
 HEAP8[$128 >> 0] = $36; //@line 21785
 sp = STACKTOP; //@line 21786
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_279($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21083
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21085
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21087
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21089
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21091
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21093
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21095
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21097
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21099
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21101
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21103
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21105
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21107
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21109
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21111
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21113
 $36 = (HEAP8[$0 + 65 >> 0] | 0) + 1 << 24 >> 24; //@line 21118
 if (($36 & 255) >= (HEAPU8[$20 >> 0] | 0)) {
  return;
 }
 $43 = (HEAPU8[$0 + 64 >> 0] | 0) + 3 & 255; //@line 21126
 if (((HEAPU8[$18 >> 0] | 0) + (HEAPU8[$28 >> 0] | 0) | 0) >>> 0 > ($36 & 255) >>> 0) {
  $42 = $43 & 255; //@line 21135
  $58 = HEAPU8[$22 + ($42 + 2) >> 0] << 16 | (HEAPU8[$22 + ($42 + 1) >> 0] << 8 | HEAPU8[$22 + $42 >> 0]); //@line 21150
  $59 = $58 * 100 | 0; //@line 21151
  HEAP32[$24 >> 2] = $59; //@line 21152
  HEAP32[$26 >> 2] = 0; //@line 21153
  if ($58 | 0) {
   if (!(HEAP8[$12 >> 0] | 0)) {
    HEAP8[$6 >> 0] = -1; //@line 21160
    $91 = HEAP32[(HEAP32[$8 >> 2] | 0) + 60 >> 2] | 0; //@line 21163
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(68) | 0; //@line 21164
    FUNCTION_TABLE_iiii[$91 & 31]($4, $10, $36) | 0; //@line 21165
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 21168
     $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 21169
     HEAP32[$92 >> 2] = $2; //@line 21170
     $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 21171
     HEAP32[$93 >> 2] = $4; //@line 21172
     $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 21173
     HEAP32[$94 >> 2] = $6; //@line 21174
     $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 21175
     HEAP32[$95 >> 2] = $8; //@line 21176
     $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 21177
     HEAP32[$96 >> 2] = $10; //@line 21178
     $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 21179
     HEAP32[$97 >> 2] = $12; //@line 21180
     $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 21181
     HEAP32[$98 >> 2] = $14; //@line 21182
     $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 21183
     HEAP32[$99 >> 2] = $16; //@line 21184
     $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 21185
     HEAP32[$100 >> 2] = $18; //@line 21186
     $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 21187
     HEAP32[$101 >> 2] = $20; //@line 21188
     $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 21189
     HEAP32[$102 >> 2] = $22; //@line 21190
     $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 21191
     HEAP32[$103 >> 2] = $24; //@line 21192
     $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 21193
     HEAP32[$104 >> 2] = $26; //@line 21194
     $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 21195
     HEAP32[$105 >> 2] = $28; //@line 21196
     $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 21197
     HEAP32[$106 >> 2] = $30; //@line 21198
     $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 21199
     HEAP8[$107 >> 0] = $43; //@line 21200
     $108 = $ReallocAsyncCtx2 + 65 | 0; //@line 21201
     HEAP8[$108 >> 0] = $36; //@line 21202
     sp = STACKTOP; //@line 21203
     return;
    }
    ___async_unwind = 0; //@line 21206
    HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 21207
    $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 21208
    HEAP32[$92 >> 2] = $2; //@line 21209
    $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 21210
    HEAP32[$93 >> 2] = $4; //@line 21211
    $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 21212
    HEAP32[$94 >> 2] = $6; //@line 21213
    $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 21214
    HEAP32[$95 >> 2] = $8; //@line 21215
    $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 21216
    HEAP32[$96 >> 2] = $10; //@line 21217
    $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 21218
    HEAP32[$97 >> 2] = $12; //@line 21219
    $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 21220
    HEAP32[$98 >> 2] = $14; //@line 21221
    $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 21222
    HEAP32[$99 >> 2] = $16; //@line 21223
    $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 21224
    HEAP32[$100 >> 2] = $18; //@line 21225
    $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 21226
    HEAP32[$101 >> 2] = $20; //@line 21227
    $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 21228
    HEAP32[$102 >> 2] = $22; //@line 21229
    $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 21230
    HEAP32[$103 >> 2] = $24; //@line 21231
    $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 21232
    HEAP32[$104 >> 2] = $26; //@line 21233
    $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 21234
    HEAP32[$105 >> 2] = $28; //@line 21235
    $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 21236
    HEAP32[$106 >> 2] = $30; //@line 21237
    $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 21238
    HEAP8[$107 >> 0] = $43; //@line 21239
    $108 = $ReallocAsyncCtx2 + 65 | 0; //@line 21240
    HEAP8[$108 >> 0] = $36; //@line 21241
    sp = STACKTOP; //@line 21242
    return;
   } else {
    $65 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 21247
    $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 21249
    $67 = FUNCTION_TABLE_iiii[$65 & 31]($4, $59, 0) | 0; //@line 21250
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 500; //@line 21253
     $68 = $ReallocAsyncCtx + 4 | 0; //@line 21254
     HEAP32[$68 >> 2] = $2; //@line 21255
     $69 = $ReallocAsyncCtx + 8 | 0; //@line 21256
     HEAP32[$69 >> 2] = $4; //@line 21257
     $70 = $ReallocAsyncCtx + 12 | 0; //@line 21258
     HEAP32[$70 >> 2] = 0; //@line 21259
     $71 = $ReallocAsyncCtx + 16 | 0; //@line 21260
     HEAP32[$71 >> 2] = $6; //@line 21261
     $72 = $ReallocAsyncCtx + 20 | 0; //@line 21262
     HEAP32[$72 >> 2] = $8; //@line 21263
     $73 = $ReallocAsyncCtx + 24 | 0; //@line 21264
     HEAP32[$73 >> 2] = $10; //@line 21265
     $74 = $ReallocAsyncCtx + 28 | 0; //@line 21266
     HEAP8[$74 >> 0] = $36; //@line 21267
     $75 = $ReallocAsyncCtx + 32 | 0; //@line 21268
     HEAP32[$75 >> 2] = $12; //@line 21269
     $76 = $ReallocAsyncCtx + 36 | 0; //@line 21270
     HEAP32[$76 >> 2] = $14; //@line 21271
     $77 = $ReallocAsyncCtx + 40 | 0; //@line 21272
     HEAP32[$77 >> 2] = $59; //@line 21273
     $78 = $ReallocAsyncCtx + 44 | 0; //@line 21274
     HEAP32[$78 >> 2] = $16; //@line 21275
     $79 = $ReallocAsyncCtx + 48 | 0; //@line 21276
     HEAP8[$79 >> 0] = $43; //@line 21277
     $80 = $ReallocAsyncCtx + 52 | 0; //@line 21278
     HEAP32[$80 >> 2] = $18; //@line 21279
     $81 = $ReallocAsyncCtx + 56 | 0; //@line 21280
     HEAP32[$81 >> 2] = $20; //@line 21281
     $82 = $ReallocAsyncCtx + 60 | 0; //@line 21282
     HEAP32[$82 >> 2] = $22; //@line 21283
     $83 = $ReallocAsyncCtx + 64 | 0; //@line 21284
     HEAP32[$83 >> 2] = $24; //@line 21285
     $84 = $ReallocAsyncCtx + 68 | 0; //@line 21286
     HEAP32[$84 >> 2] = $26; //@line 21287
     $85 = $ReallocAsyncCtx + 72 | 0; //@line 21288
     HEAP32[$85 >> 2] = $28; //@line 21289
     $86 = $ReallocAsyncCtx + 76 | 0; //@line 21290
     HEAP32[$86 >> 2] = $30; //@line 21291
     sp = STACKTOP; //@line 21292
     return;
    }
    HEAP8[___async_retval >> 0] = $67 & 1; //@line 21297
    ___async_unwind = 0; //@line 21298
    HEAP32[$ReallocAsyncCtx >> 2] = 500; //@line 21299
    $68 = $ReallocAsyncCtx + 4 | 0; //@line 21300
    HEAP32[$68 >> 2] = $2; //@line 21301
    $69 = $ReallocAsyncCtx + 8 | 0; //@line 21302
    HEAP32[$69 >> 2] = $4; //@line 21303
    $70 = $ReallocAsyncCtx + 12 | 0; //@line 21304
    HEAP32[$70 >> 2] = 0; //@line 21305
    $71 = $ReallocAsyncCtx + 16 | 0; //@line 21306
    HEAP32[$71 >> 2] = $6; //@line 21307
    $72 = $ReallocAsyncCtx + 20 | 0; //@line 21308
    HEAP32[$72 >> 2] = $8; //@line 21309
    $73 = $ReallocAsyncCtx + 24 | 0; //@line 21310
    HEAP32[$73 >> 2] = $10; //@line 21311
    $74 = $ReallocAsyncCtx + 28 | 0; //@line 21312
    HEAP8[$74 >> 0] = $36; //@line 21313
    $75 = $ReallocAsyncCtx + 32 | 0; //@line 21314
    HEAP32[$75 >> 2] = $12; //@line 21315
    $76 = $ReallocAsyncCtx + 36 | 0; //@line 21316
    HEAP32[$76 >> 2] = $14; //@line 21317
    $77 = $ReallocAsyncCtx + 40 | 0; //@line 21318
    HEAP32[$77 >> 2] = $59; //@line 21319
    $78 = $ReallocAsyncCtx + 44 | 0; //@line 21320
    HEAP32[$78 >> 2] = $16; //@line 21321
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 21322
    HEAP8[$79 >> 0] = $43; //@line 21323
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 21324
    HEAP32[$80 >> 2] = $18; //@line 21325
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 21326
    HEAP32[$81 >> 2] = $20; //@line 21327
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 21328
    HEAP32[$82 >> 2] = $22; //@line 21329
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 21330
    HEAP32[$83 >> 2] = $24; //@line 21331
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 21332
    HEAP32[$84 >> 2] = $26; //@line 21333
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 21334
    HEAP32[$85 >> 2] = $28; //@line 21335
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 21336
    HEAP32[$86 >> 2] = $30; //@line 21337
    sp = STACKTOP; //@line 21338
    return;
   }
  }
 } else {
  HEAP32[$24 >> 2] = 0; //@line 21343
  HEAP8[$30 >> 0] = 0; //@line 21344
  HEAP32[$26 >> 2] = 0; //@line 21345
 }
 $111 = HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] | 0; //@line 21349
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 21350
 FUNCTION_TABLE_iii[$111 & 31]($4, $36) | 0; //@line 21351
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 502; //@line 21354
  $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 21355
  HEAP32[$112 >> 2] = $2; //@line 21356
  $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 21357
  HEAP32[$113 >> 2] = $4; //@line 21358
  $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 21359
  HEAP32[$114 >> 2] = $6; //@line 21360
  $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 21361
  HEAP32[$115 >> 2] = $8; //@line 21362
  $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 21363
  HEAP32[$116 >> 2] = $10; //@line 21364
  $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 21365
  HEAP32[$117 >> 2] = $12; //@line 21366
  $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 21367
  HEAP32[$118 >> 2] = $14; //@line 21368
  $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 21369
  HEAP32[$119 >> 2] = $16; //@line 21370
  $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 21371
  HEAP32[$120 >> 2] = $18; //@line 21372
  $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 21373
  HEAP32[$121 >> 2] = $20; //@line 21374
  $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 21375
  HEAP32[$122 >> 2] = $22; //@line 21376
  $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 21377
  HEAP32[$123 >> 2] = $24; //@line 21378
  $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 21379
  HEAP32[$124 >> 2] = $26; //@line 21380
  $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 21381
  HEAP32[$125 >> 2] = $28; //@line 21382
  $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 21383
  HEAP32[$126 >> 2] = $30; //@line 21384
  $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 21385
  HEAP8[$127 >> 0] = $43; //@line 21386
  $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 21387
  HEAP8[$128 >> 0] = $36; //@line 21388
  sp = STACKTOP; //@line 21389
  return;
 }
 ___async_unwind = 0; //@line 21392
 HEAP32[$ReallocAsyncCtx3 >> 2] = 502; //@line 21393
 $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 21394
 HEAP32[$112 >> 2] = $2; //@line 21395
 $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 21396
 HEAP32[$113 >> 2] = $4; //@line 21397
 $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 21398
 HEAP32[$114 >> 2] = $6; //@line 21399
 $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 21400
 HEAP32[$115 >> 2] = $8; //@line 21401
 $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 21402
 HEAP32[$116 >> 2] = $10; //@line 21403
 $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 21404
 HEAP32[$117 >> 2] = $12; //@line 21405
 $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 21406
 HEAP32[$118 >> 2] = $14; //@line 21407
 $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 21408
 HEAP32[$119 >> 2] = $16; //@line 21409
 $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 21410
 HEAP32[$120 >> 2] = $18; //@line 21411
 $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 21412
 HEAP32[$121 >> 2] = $20; //@line 21413
 $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 21414
 HEAP32[$122 >> 2] = $22; //@line 21415
 $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 21416
 HEAP32[$123 >> 2] = $24; //@line 21417
 $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 21418
 HEAP32[$124 >> 2] = $26; //@line 21419
 $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 21420
 HEAP32[$125 >> 2] = $28; //@line 21421
 $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 21422
 HEAP32[$126 >> 2] = $30; //@line 21423
 $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 21424
 HEAP8[$127 >> 0] = $43; //@line 21425
 $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 21426
 HEAP8[$128 >> 0] = $36; //@line 21427
 sp = STACKTOP; //@line 21428
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$063 = 0, $$06370 = 0, $$06371 = 0, $$1$off0 = 0, $$160 = 0, $$162 = 0, $$164 = 0, $$pre$phi$sinkZ2D = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $141 = 0, $143 = 0, $144 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $156 = 0, $16 = 0, $183 = 0, $201 = 0, $203 = 0, $40 = 0, $41 = 0, $47 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx9 = 0, $addconv = 0, $sext$i = 0, $storemerge$in = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 12117
 STACKTOP = STACKTOP + 48 | 0; //@line 12118
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 12118
 $vararg_buffer5 = sp + 24 | 0; //@line 12119
 $vararg_buffer3 = sp + 16 | 0; //@line 12120
 $vararg_buffer1 = sp + 8 | 0; //@line 12121
 $7 = sp + 32 | 0; //@line 12123
 $8 = sp + 28 | 0; //@line 12124
 HEAP8[$7 >> 0] = $3; //@line 12125
 $9 = $0 + 4 | 0; //@line 12126
 $15 = __ZN7LoRaPHY15get_max_payloadEhb($9, HEAP8[$0 + 2026 >> 0] | 0, (HEAP8[$0 + 1173 >> 0] | 0) != 0) | 0; //@line 12132
 $16 = $2 & 65535; //@line 12133
 $sext$i = ($16 << 16) + -851968 | 0; //@line 12135
 if (((($sext$i | 0) < 0 ? 0 : $sext$i >> 16) | 0) > ($15 & 255 | 0)) {
  _mbed_tracef(2, 12866, 12898, sp); //@line 12142
 }
 HEAP32[$8 >> 2] = 0; //@line 12144
 $40 = HEAPU8[$1 + ($3 + 1 & 255) >> 0] << 8 | HEAPU8[$1 + ($3 & 255) >> 0] | HEAPU8[$1 + ($3 + 2 & 255) >> 0] << 16; //@line 12163
 $41 = $3 + 4 << 24 >> 24; //@line 12164
 HEAP8[$7 >> 0] = $41; //@line 12165
 $47 = $40 | HEAPU8[$1 + ($3 + 3 & 255) >> 0] << 24; //@line 12171
 L4 : do {
  if (($47 | 0) == (HEAP32[$0 + 1756 >> 2] | 0)) {
   $$1$off0 = 0; //@line 12180
   $$160 = $0 + 1732 | 0; //@line 12180
   $$162 = $0 + 1716 | 0; //@line 12180
   $$164 = 0; //@line 12180
   $storemerge$in = $0 + 1764 | 0; //@line 12180
  } else {
   $$06370 = HEAP32[$0 + 1988 >> 2] | 0; //@line 12183
   L7 : do {
    if ($$06370 | 0) {
     $$06371 = $$06370; //@line 12187
     while (1) {
      if (($47 | 0) == (HEAP32[$$06371 >> 2] | 0)) {
       break;
      }
      $$063 = HEAP32[$$06371 + 40 >> 2] | 0; //@line 12195
      if (!$$063) {
       break L7;
      } else {
       $$06371 = $$063; //@line 12200
      }
     }
     $$1$off0 = 1; //@line 12206
     $$160 = $$06371 + 20 | 0; //@line 12206
     $$162 = $$06371 + 4 | 0; //@line 12206
     $$164 = $$06371; //@line 12206
     $storemerge$in = $$06371 + 36 | 0; //@line 12206
     break L4;
    }
   } while (0);
   HEAP32[$0 + 2020 >> 2] = 11; //@line 12211
   HEAP8[$0 + 2012 >> 0] = 0; //@line 12213
   STACKTOP = sp; //@line 12214
   return;
  }
 } while (0);
 HEAP32[$8 >> 2] = HEAP32[$storemerge$in >> 2]; //@line 12218
 HEAP8[$7 >> 0] = $3 + 5 << 24 >> 24; //@line 12220
 $68 = HEAP8[$1 + ($41 & 255) >> 0] | 0; //@line 12223
 $69 = $68 & 15; //@line 12224
 $addconv = $69 + 8 << 24 >> 24; //@line 12225
 $AsyncCtx9 = _emscripten_alloc_async_context(92, sp) | 0; //@line 12226
 $70 = __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1_($0, $1, $2, $7, $47, $8, $$162) | 0; //@line 12227
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 385; //@line 12230
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 12232
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$164; //@line 12234
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer1; //@line 12236
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer1; //@line 12238
  HEAP8[$AsyncCtx9 + 20 >> 0] = $4; //@line 12240
  HEAP32[$AsyncCtx9 + 24 >> 2] = $7; //@line 12242
  HEAP32[$AsyncCtx9 + 28 >> 2] = $1; //@line 12244
  HEAP32[$AsyncCtx9 + 32 >> 2] = $16; //@line 12246
  HEAP32[$AsyncCtx9 + 36 >> 2] = $8; //@line 12248
  HEAP32[$AsyncCtx9 + 40 >> 2] = $vararg_buffer5; //@line 12250
  HEAP32[$AsyncCtx9 + 44 >> 2] = $vararg_buffer5; //@line 12252
  HEAP32[$AsyncCtx9 + 48 >> 2] = $vararg_buffer3; //@line 12254
  HEAP32[$AsyncCtx9 + 52 >> 2] = $vararg_buffer3; //@line 12256
  HEAP8[$AsyncCtx9 + 56 >> 0] = $addconv; //@line 12258
  HEAP8[$AsyncCtx9 + 57 >> 0] = $6; //@line 12260
  HEAP32[$AsyncCtx9 + 60 >> 2] = $9; //@line 12262
  HEAP8[$AsyncCtx9 + 64 >> 0] = $69; //@line 12264
  HEAP16[$AsyncCtx9 + 66 >> 1] = $2; //@line 12266
  HEAP32[$AsyncCtx9 + 68 >> 2] = $$162; //@line 12268
  HEAP32[$AsyncCtx9 + 72 >> 2] = $$160; //@line 12270
  HEAP32[$AsyncCtx9 + 76 >> 2] = $47; //@line 12272
  HEAP8[$AsyncCtx9 + 80 >> 0] = $68; //@line 12274
  HEAP8[$AsyncCtx9 + 81 >> 0] = $$1$off0 & 1; //@line 12277
  HEAP32[$AsyncCtx9 + 84 >> 2] = $8; //@line 12279
  HEAP16[$AsyncCtx9 + 88 >> 1] = $5; //@line 12281
  sp = STACKTOP; //@line 12282
  STACKTOP = sp; //@line 12283
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12285
 if (!$70) {
  _mbed_tracef(2, 12866, 12917, $vararg_buffer1); //@line 12287
  HEAP32[$0 + 2020 >> 2] = 12; //@line 12289
  HEAP8[$0 + 2012 >> 0] = 0; //@line 12291
  STACKTOP = sp; //@line 12292
  return;
 }
 $AsyncCtx21 = _emscripten_alloc_async_context(88, sp) | 0; //@line 12295
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 12296
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 386; //@line 12299
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 12301
  HEAP32[$AsyncCtx21 + 8 >> 2] = $$164; //@line 12303
  HEAP8[$AsyncCtx21 + 12 >> 0] = $4; //@line 12305
  HEAP32[$AsyncCtx21 + 16 >> 2] = $7; //@line 12307
  HEAP32[$AsyncCtx21 + 20 >> 2] = $1; //@line 12309
  HEAP32[$AsyncCtx21 + 24 >> 2] = $16; //@line 12311
  HEAP32[$AsyncCtx21 + 28 >> 2] = $8; //@line 12313
  HEAP32[$AsyncCtx21 + 32 >> 2] = $0; //@line 12315
  HEAP32[$AsyncCtx21 + 36 >> 2] = $vararg_buffer5; //@line 12317
  HEAP32[$AsyncCtx21 + 40 >> 2] = $vararg_buffer5; //@line 12319
  HEAP32[$AsyncCtx21 + 44 >> 2] = $vararg_buffer3; //@line 12321
  HEAP32[$AsyncCtx21 + 48 >> 2] = $vararg_buffer3; //@line 12323
  HEAP8[$AsyncCtx21 + 52 >> 0] = $addconv; //@line 12325
  HEAP8[$AsyncCtx21 + 53 >> 0] = $6; //@line 12327
  HEAP32[$AsyncCtx21 + 56 >> 2] = $9; //@line 12329
  HEAP8[$AsyncCtx21 + 60 >> 0] = $69; //@line 12331
  HEAP16[$AsyncCtx21 + 62 >> 1] = $2; //@line 12333
  HEAP32[$AsyncCtx21 + 64 >> 2] = $$162; //@line 12335
  HEAP32[$AsyncCtx21 + 68 >> 2] = $$160; //@line 12337
  HEAP32[$AsyncCtx21 + 72 >> 2] = $47; //@line 12339
  HEAP8[$AsyncCtx21 + 76 >> 0] = $68; //@line 12341
  HEAP8[$AsyncCtx21 + 77 >> 0] = $$1$off0 & 1; //@line 12344
  HEAP32[$AsyncCtx21 + 80 >> 2] = $8; //@line 12346
  HEAP16[$AsyncCtx21 + 84 >> 1] = $5; //@line 12348
  sp = STACKTOP; //@line 12349
  STACKTOP = sp; //@line 12350
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 12352
 $123 = $0 + 2062 | 0; //@line 12353
 HEAP8[$123 >> 0] = 0; //@line 12354
 $124 = $0 + 2044 | 0; //@line 12355
 HEAP8[$124 >> 0] = 0; //@line 12356
 $125 = $0 + 2012 | 0; //@line 12357
 HEAP8[$125 >> 0] = 1; //@line 12358
 HEAP8[$0 + 2034 >> 0] = 0; //@line 12360
 $127 = $0 + 2020 | 0; //@line 12361
 HEAP32[$127 >> 2] = 0; //@line 12362
 HEAP8[$0 + 2024 >> 0] = $$1$off0 & 1; //@line 12365
 HEAP8[$0 + 2027 >> 0] = ($68 & 255) >>> 4 & 1; //@line 12369
 $133 = $0 + 2028 | 0; //@line 12370
 HEAP32[$133 >> 2] = 0; //@line 12371
 $134 = $0 + 2032 | 0; //@line 12372
 HEAP16[$134 >> 1] = 0; //@line 12373
 $135 = HEAP32[$8 >> 2] | 0; //@line 12374
 $136 = $0 + 2048 | 0; //@line 12375
 HEAP32[$136 >> 2] = $135; //@line 12376
 HEAP16[$0 + 2036 >> 1] = $5; //@line 12378
 HEAP8[$0 + 2038 >> 0] = $6; //@line 12380
 HEAP32[$0 + 2056 >> 2] = 0; //@line 12382
 HEAP32[$0 + 1768 >> 2] = 0; //@line 12384
 $141 = $0 + 476 | 0; //@line 12385
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($141); //@line 12386
 L25 : do {
  if ($$1$off0) {
   HEAP32[$0 + 2016 >> 2] = 2; //@line 12390
   $143 = $$164 + 36 | 0; //@line 12391
   $144 = HEAP32[$143 >> 2] | 0; //@line 12392
   if (($144 | 0) == 0 | ($144 | 0) != ($135 | 0)) {
    $$pre$phi$sinkZ2D = $143; //@line 12397
   } else {
    HEAP32[$127 >> 2] = 8; //@line 12399
    HEAP32[$136 >> 2] = $135; //@line 12400
    HEAP8[$125 >> 0] = 0; //@line 12401
    STACKTOP = sp; //@line 12402
    return;
   }
  } else {
   switch ($4 << 24 >> 24) {
   case 5:
    {
     HEAP8[$0 + 1178 >> 0] = 1; //@line 12408
     HEAP32[$0 + 2016 >> 2] = 1; //@line 12410
     $149 = $0 + 1764 | 0; //@line 12411
     $150 = HEAP32[$149 >> 2] | 0; //@line 12412
     if (($150 | 0) == 0 | ($150 | 0) != ($135 | 0)) {
      $$pre$phi$sinkZ2D = $149; //@line 12417
      break L25;
     }
     _mbed_tracef(16, 12866, 12928, $vararg_buffer3); //@line 12420
     HEAP8[$125 >> 0] = 0; //@line 12421
     HEAP32[$127 >> 2] = 8; //@line 12422
     $$pre$phi$sinkZ2D = $149; //@line 12423
     break L25;
     break;
    }
   case 3:
    {
     HEAP8[$0 + 1178 >> 0] = 0; //@line 12429
     HEAP32[$0 + 2016 >> 2] = 0; //@line 12431
     $155 = $0 + 1764 | 0; //@line 12432
     $156 = HEAP32[$155 >> 2] | 0; //@line 12433
     if (($156 | 0) == 0 | ($156 | 0) != ($135 | 0)) {
      $$pre$phi$sinkZ2D = $155; //@line 12438
      break L25;
     }
     _mbed_tracef(16, 12866, 12928, $vararg_buffer5); //@line 12441
     HEAP8[$125 >> 0] = 0; //@line 12442
     HEAP32[$127 >> 2] = 8; //@line 12443
     STACKTOP = sp; //@line 12444
     return;
    }
   default:
    {
     $$pre$phi$sinkZ2D = $0 + 1764 | 0; //@line 12449
     break L25;
    }
   }
  }
 } while (0);
 HEAP32[$$pre$phi$sinkZ2D >> 2] = $135; //@line 12455
 if (!(HEAP8[$0 + 1177 >> 0] | 0)) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($141); //@line 12460
 } else {
  if ($68 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($141); //@line 12465
   HEAP8[$123 >> 0] = 1; //@line 12466
   HEAP8[$124 >> 0] = 1; //@line 12467
  }
 }
 do {
  if (!($16 + 252 - ($addconv & 255) & 255)) {
   if ($69 << 24 >> 24) {
    $AsyncCtx13 = _emscripten_alloc_async_context(52, sp) | 0; //@line 12481
    $183 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($141, $1, 8, $addconv, $6, $0 + 2084 | 0, $0 + 1876 | 0, $9) | 0; //@line 12482
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 388; //@line 12485
     HEAP32[$AsyncCtx13 + 4 >> 2] = $141; //@line 12487
     HEAP32[$AsyncCtx13 + 8 >> 2] = $127; //@line 12489
     HEAP8[$AsyncCtx13 + 12 >> 0] = $4; //@line 12491
     HEAP32[$AsyncCtx13 + 16 >> 2] = $0; //@line 12493
     HEAP32[$AsyncCtx13 + 20 >> 2] = $7; //@line 12495
     HEAP32[$AsyncCtx13 + 24 >> 2] = $1; //@line 12497
     HEAP32[$AsyncCtx13 + 28 >> 2] = $16; //@line 12499
     HEAP32[$AsyncCtx13 + 32 >> 2] = $133; //@line 12501
     HEAP32[$AsyncCtx13 + 36 >> 2] = $134; //@line 12503
     HEAP32[$AsyncCtx13 + 40 >> 2] = $123; //@line 12505
     HEAP32[$AsyncCtx13 + 44 >> 2] = $8; //@line 12507
     HEAP32[$AsyncCtx13 + 48 >> 2] = $0; //@line 12509
     sp = STACKTOP; //@line 12510
     STACKTOP = sp; //@line 12511
     return;
    }
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12513
    if ($183 | 0) {
     HEAP32[$127 >> 2] = 1; //@line 12516
     break;
    }
    if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($141) | 0) {
     HEAP32[$0 + 2076 >> 2] = 4; //@line 12522
     HEAP8[$0 + 2080 >> 0] = 1; //@line 12524
     __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($141); //@line 12525
    }
   }
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 12529
   __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($0, $1, $2, $69, $$162, $$160, $47, $135, 0, $6); //@line 12530
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 387; //@line 12533
    HEAP8[$AsyncCtx + 4 >> 0] = $4; //@line 12535
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12537
    HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 12539
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 12541
    HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 12543
    HEAP32[$AsyncCtx + 24 >> 2] = $127; //@line 12545
    HEAP32[$AsyncCtx + 28 >> 2] = $133; //@line 12547
    HEAP32[$AsyncCtx + 32 >> 2] = $134; //@line 12549
    HEAP32[$AsyncCtx + 36 >> 2] = $123; //@line 12551
    HEAP32[$AsyncCtx + 40 >> 2] = $8; //@line 12553
    HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 12555
    sp = STACKTOP; //@line 12556
    STACKTOP = sp; //@line 12557
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12559
    break;
   }
  }
 } while (0);
 if ($4 << 24 >> 24 == 7) {
  $201 = $0 + 1442 | 0; //@line 12566
  $203 = HEAPU8[$7 >> 0] | 0; //@line 12568
  _memcpy($201 | 0, $1 + $203 | 0, $16 | 0) | 0; //@line 12570
  HEAP32[$0 + 2016 >> 2] = 3; //@line 12572
  HEAP32[$127 >> 2] = 0; //@line 12573
  HEAP32[$133 >> 2] = $201; //@line 12574
  HEAP16[$134 >> 1] = $16 - $203; //@line 12577
 }
 if (!(HEAP8[$123 >> 0] | 0)) {
  STACKTOP = sp; //@line 12582
  return;
 }
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12585
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 12586
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 389; //@line 12589
  HEAP32[$AsyncCtx17 + 4 >> 2] = $8; //@line 12591
  sp = STACKTOP; //@line 12592
  STACKTOP = sp; //@line 12593
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 12595
 STACKTOP = sp; //@line 12596
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $100 = 0, $108 = 0, $116 = 0, $119 = 0, $126 = 0, $133 = 0, $136 = 0, $2 = 0, $29 = 0, $3 = 0, $4 = 0, $40 = 0, $48 = 0, $5 = 0, $66 = 0, $76 = 0, $79 = 0, $8 = 0, $88 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15340
 STACKTOP = STACKTOP + 64 | 0; //@line 15341
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 15341
 $2 = sp + 48 | 0; //@line 15342
 $3 = sp + 32 | 0; //@line 15343
 $4 = sp + 16 | 0; //@line 15344
 $5 = sp; //@line 15345
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 15346
 HEAP32[$0 + 1992 >> 2] = $1; //@line 15348
 $8 = $0 + 4 | 0; //@line 15350
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 752 | 0, $8); //@line 15351
 HEAP32[$0 + 2380 >> 2] = 0; //@line 15353
 $10 = $0 + 1168 | 0; //@line 15354
 HEAP8[$0 + 1701 >> 0] = 0; //@line 15356
 HEAP8[$0 + 1700 >> 0] = 1; //@line 15358
 HEAP8[$0 + 1173 >> 0] = 0; //@line 15360
 HEAP32[$0 + 1780 >> 2] = 0; //@line 15362
 HEAP32[$0 + 1784 >> 2] = 0; //@line 15364
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($8, $10, 1); //@line 15365
 HEAP32[$0 + 1880 >> 2] = 10; //@line 15367
 HEAP8[$0 + 1884 >> 0] = 6; //@line 15369
 HEAP8[$0 + 1908 >> 0] = 1; //@line 15371
 HEAP8[$0 + 2376 >> 0] = 0; //@line 15373
 HEAP32[$0 + 1760 >> 2] = 0; //@line 15375
 HEAP32[$0 + 1764 >> 2] = 0; //@line 15377
 HEAP32[$0 + 1768 >> 2] = 0; //@line 15379
 HEAP8[$0 + 1184 >> 0] = 0; //@line 15381
 HEAP8[$0 + 1698 >> 0] = 1; //@line 15383
 HEAP8[$0 + 1699 >> 0] = 1; //@line 15385
 HEAP8[$0 + 1181 >> 0] = 0; //@line 15387
 HEAP8[$0 + 1932 >> 0] = 0; //@line 15389
 HEAP16[$0 + 1934 >> 1] = 1; //@line 15391
 $29 = $0 + 476 | 0; //@line 15392
 __ZN14LoRaMacCommand20clear_command_bufferEv($29); //@line 15393
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($29); //@line 15394
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($29); //@line 15395
 HEAP8[$0 + 1175 >> 0] = 1; //@line 15397
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($8, $10, 0); //@line 15398
 HEAP8[$0 + 1177 >> 0] = 0; //@line 15400
 HEAP8[$0 + 1178 >> 0] = 0; //@line 15402
 $$05$i = HEAP32[$0 + 1988 >> 2] | 0; //@line 15404
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 15407
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 15410
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 15412
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 1182 >> 0] = 0; //@line 15422
 HEAP8[$0 + 1183 >> 0] = 0; //@line 15424
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15425
 $40 = __ZN7LoRaPHY13get_radio_rngEv($8) | 0; //@line 15426
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 444; //@line 15429
  HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 15431
  HEAP32[$AsyncCtx27 + 8 >> 2] = $4; //@line 15433
  HEAP32[$AsyncCtx27 + 12 >> 2] = $0; //@line 15435
  HEAP32[$AsyncCtx27 + 16 >> 2] = $3; //@line 15437
  HEAP32[$AsyncCtx27 + 20 >> 2] = $8; //@line 15439
  HEAP32[$AsyncCtx27 + 24 >> 2] = $5; //@line 15441
  HEAP32[$AsyncCtx27 + 28 >> 2] = $2; //@line 15443
  sp = STACKTOP; //@line 15444
  STACKTOP = sp; //@line 15445
  return 0; //@line 15445
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 15447
 _srand($40); //@line 15448
 $48 = $0 + 1172 | 0; //@line 15449
 HEAP8[$48 >> 0] = 1; //@line 15450
 $AsyncCtx33 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15451
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 15452
 if (___async) {
  HEAP32[$AsyncCtx33 >> 2] = 445; //@line 15455
  HEAP32[$AsyncCtx33 + 4 >> 2] = $0; //@line 15457
  HEAP32[$AsyncCtx33 + 8 >> 2] = $4; //@line 15459
  HEAP32[$AsyncCtx33 + 12 >> 2] = $0; //@line 15461
  HEAP32[$AsyncCtx33 + 16 >> 2] = $3; //@line 15463
  HEAP32[$AsyncCtx33 + 20 >> 2] = $48; //@line 15465
  HEAP32[$AsyncCtx33 + 24 >> 2] = $8; //@line 15467
  HEAP32[$AsyncCtx33 + 28 >> 2] = $5; //@line 15469
  HEAP32[$AsyncCtx33 + 32 >> 2] = $2; //@line 15471
  sp = STACKTOP; //@line 15472
  STACKTOP = sp; //@line 15473
  return 0; //@line 15473
 }
 _emscripten_free_async_context($AsyncCtx33 | 0); //@line 15475
 $AsyncCtx36 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15476
 __ZN7LoRaPHY18put_radio_to_sleepEv($8); //@line 15477
 if (___async) {
  HEAP32[$AsyncCtx36 >> 2] = 446; //@line 15480
  HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 15482
  HEAP32[$AsyncCtx36 + 8 >> 2] = $4; //@line 15484
  HEAP32[$AsyncCtx36 + 12 >> 2] = $0; //@line 15486
  HEAP32[$AsyncCtx36 + 16 >> 2] = $3; //@line 15488
  HEAP32[$AsyncCtx36 + 20 >> 2] = $48; //@line 15490
  HEAP32[$AsyncCtx36 + 24 >> 2] = $8; //@line 15492
  HEAP32[$AsyncCtx36 + 28 >> 2] = $5; //@line 15494
  HEAP32[$AsyncCtx36 + 32 >> 2] = $2; //@line 15496
  sp = STACKTOP; //@line 15497
  STACKTOP = sp; //@line 15498
  return 0; //@line 15498
 }
 _emscripten_free_async_context($AsyncCtx36 | 0); //@line 15500
 $66 = $2 + 12 | 0; //@line 15502
 HEAP32[$2 >> 2] = 447; //@line 15503
 HEAP32[$2 + 4 >> 2] = 0; //@line 15505
 HEAP32[$2 + 8 >> 2] = $0; //@line 15507
 HEAP32[$66 >> 2] = 860; //@line 15508
 $AsyncCtx23 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15509
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1796 | 0, $2); //@line 15510
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 448; //@line 15513
  HEAP32[$AsyncCtx23 + 4 >> 2] = $66; //@line 15515
  HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 15517
  HEAP32[$AsyncCtx23 + 12 >> 2] = $4; //@line 15519
  HEAP32[$AsyncCtx23 + 16 >> 2] = $0; //@line 15521
  HEAP32[$AsyncCtx23 + 20 >> 2] = $3; //@line 15523
  HEAP32[$AsyncCtx23 + 24 >> 2] = $48; //@line 15525
  HEAP32[$AsyncCtx23 + 28 >> 2] = $8; //@line 15527
  HEAP32[$AsyncCtx23 + 32 >> 2] = $5; //@line 15529
  HEAP32[$AsyncCtx23 + 36 >> 2] = $2; //@line 15531
  sp = STACKTOP; //@line 15532
  STACKTOP = sp; //@line 15533
  return 0; //@line 15533
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 15535
 $76 = HEAP32[$66 >> 2] | 0; //@line 15536
 do {
  if ($76 | 0) {
   $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 15541
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 15542
   FUNCTION_TABLE_vi[$79 & 1023]($2); //@line 15543
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 449; //@line 15546
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15548
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 15550
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 15552
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 15554
    HEAP32[$AsyncCtx + 20 >> 2] = $48; //@line 15556
    HEAP32[$AsyncCtx + 24 >> 2] = $8; //@line 15558
    HEAP32[$AsyncCtx + 28 >> 2] = $5; //@line 15560
    sp = STACKTOP; //@line 15561
    STACKTOP = sp; //@line 15562
    return 0; //@line 15562
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15564
    break;
   }
  }
 } while (0);
 $88 = $3 + 12 | 0; //@line 15570
 HEAP32[$3 >> 2] = 450; //@line 15571
 HEAP32[$3 + 4 >> 2] = 0; //@line 15573
 HEAP32[$3 + 8 >> 2] = $0; //@line 15575
 HEAP32[$88 >> 2] = 860; //@line 15576
 $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15577
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1816 | 0, $3); //@line 15578
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 451; //@line 15581
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 15583
  HEAP32[$AsyncCtx20 + 8 >> 2] = $5; //@line 15585
  HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 15587
  HEAP32[$AsyncCtx20 + 16 >> 2] = $4; //@line 15589
  HEAP32[$AsyncCtx20 + 20 >> 2] = $48; //@line 15591
  HEAP32[$AsyncCtx20 + 24 >> 2] = $8; //@line 15593
  HEAP32[$AsyncCtx20 + 28 >> 2] = $88; //@line 15595
  HEAP32[$AsyncCtx20 + 32 >> 2] = $3; //@line 15597
  sp = STACKTOP; //@line 15598
  STACKTOP = sp; //@line 15599
  return 0; //@line 15599
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 15601
 $97 = HEAP32[$88 >> 2] | 0; //@line 15602
 do {
  if ($97 | 0) {
   $100 = HEAP32[$97 + 8 >> 2] | 0; //@line 15607
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15608
   FUNCTION_TABLE_vi[$100 & 1023]($3); //@line 15609
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 452; //@line 15612
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15614
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 15616
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 15618
    HEAP32[$AsyncCtx3 + 16 >> 2] = $5; //@line 15620
    HEAP32[$AsyncCtx3 + 20 >> 2] = $48; //@line 15622
    HEAP32[$AsyncCtx3 + 24 >> 2] = $8; //@line 15624
    sp = STACKTOP; //@line 15625
    STACKTOP = sp; //@line 15626
    return 0; //@line 15626
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15628
    break;
   }
  }
 } while (0);
 $108 = $4 + 12 | 0; //@line 15634
 HEAP32[$4 >> 2] = 453; //@line 15635
 HEAP32[$4 + 4 >> 2] = 0; //@line 15637
 HEAP32[$4 + 8 >> 2] = $0; //@line 15639
 HEAP32[$108 >> 2] = 860; //@line 15640
 $AsyncCtx17 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15641
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1836 | 0, $4); //@line 15642
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 454; //@line 15645
  HEAP32[$AsyncCtx17 + 4 >> 2] = $108; //@line 15647
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 15649
  HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 15651
  HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 15653
  HEAP32[$AsyncCtx17 + 20 >> 2] = $4; //@line 15655
  HEAP32[$AsyncCtx17 + 24 >> 2] = $48; //@line 15657
  HEAP32[$AsyncCtx17 + 28 >> 2] = $8; //@line 15659
  sp = STACKTOP; //@line 15660
  STACKTOP = sp; //@line 15661
  return 0; //@line 15661
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15663
 $116 = HEAP32[$108 >> 2] | 0; //@line 15664
 do {
  if ($116 | 0) {
   $119 = HEAP32[$116 + 8 >> 2] | 0; //@line 15669
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15670
   FUNCTION_TABLE_vi[$119 & 1023]($4); //@line 15671
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 455; //@line 15674
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 15676
    HEAP32[$AsyncCtx7 + 8 >> 2] = $5; //@line 15678
    HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 15680
    HEAP32[$AsyncCtx7 + 16 >> 2] = $48; //@line 15682
    HEAP32[$AsyncCtx7 + 20 >> 2] = $8; //@line 15684
    sp = STACKTOP; //@line 15685
    STACKTOP = sp; //@line 15686
    return 0; //@line 15686
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15688
    break;
   }
  }
 } while (0);
 $126 = $5 + 12 | 0; //@line 15694
 HEAP32[$5 >> 2] = 456; //@line 15695
 HEAP32[$5 + 4 >> 2] = 0; //@line 15697
 HEAP32[$5 + 8 >> 2] = $0; //@line 15699
 HEAP32[$126 >> 2] = 860; //@line 15700
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15701
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1856 | 0, $5); //@line 15702
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 457; //@line 15705
  HEAP32[$AsyncCtx14 + 4 >> 2] = $126; //@line 15707
  HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 15709
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 15711
  HEAP32[$AsyncCtx14 + 16 >> 2] = $48; //@line 15713
  HEAP32[$AsyncCtx14 + 20 >> 2] = $8; //@line 15715
  HEAP32[$AsyncCtx14 + 24 >> 2] = $5; //@line 15717
  sp = STACKTOP; //@line 15718
  STACKTOP = sp; //@line 15719
  return 0; //@line 15719
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 15721
 $133 = HEAP32[$126 >> 2] | 0; //@line 15722
 do {
  if ($133 | 0) {
   $136 = HEAP32[$133 + 8 >> 2] | 0; //@line 15727
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15728
   FUNCTION_TABLE_vi[$136 & 1023]($5); //@line 15729
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 458; //@line 15732
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15734
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 15736
    HEAP32[$AsyncCtx11 + 12 >> 2] = $48; //@line 15738
    HEAP32[$AsyncCtx11 + 16 >> 2] = $8; //@line 15740
    sp = STACKTOP; //@line 15741
    STACKTOP = sp; //@line 15742
    return 0; //@line 15742
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15744
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0; //@line 15751
 HEAP8[$0 + 1936 >> 0] = 1; //@line 15753
 HEAP8[$48 >> 0] = 1; //@line 15754
 $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15755
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 15756
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 459; //@line 15759
  sp = STACKTOP; //@line 15760
  STACKTOP = sp; //@line 15761
  return 0; //@line 15761
 } else {
  _emscripten_free_async_context($AsyncCtx30 | 0); //@line 15763
  STACKTOP = sp; //@line 15764
  return 0; //@line 15764
 }
 return 0; //@line 15766
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15320
 STACKTOP = STACKTOP + 1056 | 0; //@line 15321
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 15321
 $2 = sp + 1024 | 0; //@line 15322
 $3 = sp; //@line 15323
 HEAP32[$2 >> 2] = 0; //@line 15324
 HEAP32[$2 + 4 >> 2] = 0; //@line 15324
 HEAP32[$2 + 8 >> 2] = 0; //@line 15324
 HEAP32[$2 + 12 >> 2] = 0; //@line 15324
 HEAP32[$2 + 16 >> 2] = 0; //@line 15324
 HEAP32[$2 + 20 >> 2] = 0; //@line 15324
 HEAP32[$2 + 24 >> 2] = 0; //@line 15324
 HEAP32[$2 + 28 >> 2] = 0; //@line 15324
 $4 = HEAP8[$1 >> 0] | 0; //@line 15325
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 15329
   $$0185$ph$lcssa327 = -1; //@line 15329
   $$0187219$ph325326 = 0; //@line 15329
   $$1176$ph$ph$lcssa208 = 1; //@line 15329
   $$1186$ph$lcssa = -1; //@line 15329
   label = 26; //@line 15330
  } else {
   $$0187263 = 0; //@line 15332
   $10 = $4; //@line 15332
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 15338
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 15346
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 15349
    $$0187263 = $$0187263 + 1 | 0; //@line 15350
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 15353
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 15355
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 15363
   if ($23) {
    $$0183$ph260 = 0; //@line 15365
    $$0185$ph259 = -1; //@line 15365
    $130 = 1; //@line 15365
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 15367
     $$0183$ph197$ph253 = $$0183$ph260; //@line 15367
     $131 = $130; //@line 15367
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 15369
      $132 = $131; //@line 15369
      L10 : while (1) {
       $$0179242 = 1; //@line 15371
       $25 = $132; //@line 15371
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 15375
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 15377
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 15383
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 15387
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15392
         $$0185$ph$lcssa = $$0185$ph259; //@line 15392
         break L6;
        } else {
         $25 = $27; //@line 15390
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 15396
       $132 = $37 + 1 | 0; //@line 15397
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15402
        $$0185$ph$lcssa = $$0185$ph259; //@line 15402
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 15400
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 15407
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 15411
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 15416
       $$0185$ph$lcssa = $$0185$ph259; //@line 15416
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 15414
       $$0183$ph197$ph253 = $25; //@line 15414
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 15421
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 15426
      $$0185$ph$lcssa = $$0183$ph197248; //@line 15426
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 15424
      $$0185$ph259 = $$0183$ph197248; //@line 15424
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 15431
     $$1186$ph238 = -1; //@line 15431
     $133 = 1; //@line 15431
     while (1) {
      $$1176$ph$ph233 = 1; //@line 15433
      $$1184$ph193$ph232 = $$1184$ph239; //@line 15433
      $135 = $133; //@line 15433
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 15435
       $134 = $135; //@line 15435
       L25 : while (1) {
        $$1180222 = 1; //@line 15437
        $52 = $134; //@line 15437
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 15441
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 15443
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 15449
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 15453
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15458
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15458
          $$0187219$ph325326 = $$0187263; //@line 15458
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15458
          $$1186$ph$lcssa = $$1186$ph238; //@line 15458
          label = 26; //@line 15459
          break L1;
         } else {
          $52 = $45; //@line 15456
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 15463
        $134 = $56 + 1 | 0; //@line 15464
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15469
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15469
         $$0187219$ph325326 = $$0187263; //@line 15469
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15469
         $$1186$ph$lcssa = $$1186$ph238; //@line 15469
         label = 26; //@line 15470
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 15467
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 15475
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 15479
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15484
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15484
        $$0187219$ph325326 = $$0187263; //@line 15484
        $$1176$ph$ph$lcssa208 = $60; //@line 15484
        $$1186$ph$lcssa = $$1186$ph238; //@line 15484
        label = 26; //@line 15485
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 15482
        $$1184$ph193$ph232 = $52; //@line 15482
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 15490
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15495
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15495
       $$0187219$ph325326 = $$0187263; //@line 15495
       $$1176$ph$ph$lcssa208 = 1; //@line 15495
       $$1186$ph$lcssa = $$1184$ph193227; //@line 15495
       label = 26; //@line 15496
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 15493
       $$1186$ph238 = $$1184$ph193227; //@line 15493
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15501
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15501
     $$0187219$ph325326 = $$0187263; //@line 15501
     $$1176$ph$ph$lcssa208 = 1; //@line 15501
     $$1186$ph$lcssa = -1; //@line 15501
     label = 26; //@line 15502
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 15505
    $$0185$ph$lcssa327 = -1; //@line 15505
    $$0187219$ph325326 = $$0187263; //@line 15505
    $$1176$ph$ph$lcssa208 = 1; //@line 15505
    $$1186$ph$lcssa = -1; //@line 15505
    label = 26; //@line 15506
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 15514
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 15515
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 15516
   $70 = $$1186$$0185 + 1 | 0; //@line 15518
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 15523
    $$3178 = $$1176$$0175; //@line 15523
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 15526
    $$0168 = 0; //@line 15530
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 15530
   }
   $78 = $$0187219$ph325326 | 63; //@line 15532
   $79 = $$0187219$ph325326 + -1 | 0; //@line 15533
   $80 = ($$0168 | 0) != 0; //@line 15534
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 15535
   $$0166 = $0; //@line 15536
   $$0169 = 0; //@line 15536
   $$0170 = $0; //@line 15536
   while (1) {
    $83 = $$0166; //@line 15539
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 15544
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 15548
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 15555
        break L35;
       } else {
        $$3173 = $86; //@line 15558
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 15563
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 15567
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 15579
      $$2181$sink = $$0187219$ph325326; //@line 15579
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 15584
      if ($105 | 0) {
       $$0169$be = 0; //@line 15592
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 15592
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 15596
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 15598
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 15602
       } else {
        $$3182221 = $111; //@line 15604
        $$pr = $113; //@line 15604
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 15612
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 15614
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 15617
          break L54;
         } else {
          $$3182221 = $118; //@line 15620
         }
        }
        $$0169$be = 0; //@line 15624
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 15624
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 15631
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 15634
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 15643
        $$2181$sink = $$3178; //@line 15643
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 15650
    $$0169 = $$0169$be; //@line 15650
    $$0170 = $$3173; //@line 15650
   }
  }
 } while (0);
 STACKTOP = sp; //@line 15654
 return $$3 | 0; //@line 15654
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_399($0) {
 $0 = $0 | 0;
 var $$058 = 0, $$062 = 0, $$06272 = 0, $$06273 = 0, $$064 = 0, $$06471 = 0, $$06575 = 0, $$06874 = 0, $$166 = 0, $$16670 = 0, $$267 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $121 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $35 = 0, $36 = 0, $4 = 0, $49 = 0, $50 = 0, $51 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $74 = 0, $76 = 0, $8 = 0, $91 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30562
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30564
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30566
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 30568
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30570
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30572
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30574
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30576
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30578
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30580
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30582
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 30585
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30587
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$20 >> 0] = HEAP8[$20 >> 0] | 64; //@line 30596
 }
 if (!(HEAP8[$4 + 1178 >> 0] | 0)) {
  $$pre$phiZ2D = $20; //@line 30602
 } else {
  _mbed_tracef(16, 12866, 13038, $24); //@line 30604
  HEAP8[$20 >> 0] = HEAP8[$20 >> 0] | 32; //@line 30607
  $$pre$phiZ2D = $20; //@line 30608
 }
 $35 = $4 + 1756 | 0; //@line 30610
 $36 = HEAP32[$35 >> 2] | 0; //@line 30611
 HEAP8[$4 + 1186 >> 0] = $36; //@line 30614
 HEAP8[$4 + 1187 >> 0] = $36 >>> 8; //@line 30618
 HEAP8[$4 + 1188 >> 0] = $36 >>> 16; //@line 30622
 HEAP8[$4 + 1189 >> 0] = $36 >>> 24; //@line 30626
 $49 = $4 + 1190 | 0; //@line 30628
 HEAP8[$49 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 30629
 $50 = $4 + 1760 | 0; //@line 30630
 $51 = HEAP32[$50 >> 2] | 0; //@line 30631
 HEAP8[$4 + 1191 >> 0] = $51; //@line 30634
 HEAP8[$4 + 1192 >> 0] = $51 >>> 8; //@line 30638
 $57 = $4 + 476 | 0; //@line 30639
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($57); //@line 30640
 $58 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($57) | 0; //@line 30641
 do {
  if ($22) {
   label = 16; //@line 30644
  } else {
   if (!(HEAP16[$10 >> 1] | 0)) {
    label = 16; //@line 30649
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($57) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($57); //@line 30653
     $$06272 = $6; //@line 30654
     $$06471 = $8; //@line 30654
     $$16670 = 8; //@line 30654
     label = 20; //@line 30655
     break;
    }
    $62 = $58 & 255; //@line 30658
    if (($58 & 255) >= 16) {
     HEAP16[$10 >> 1] = $58 & 255; //@line 30662
     $$062 = 0; //@line 30664
     $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($57) | 0; //@line 30664
     $$166 = 8; //@line 30664
     label = 19; //@line 30665
     break;
    }
    $64 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 30668
    $70 = ($64 & 255) + $62 & 15 | $64 & -16; //@line 30674
    HEAP8[$$pre$phiZ2D >> 0] = $70; //@line 30675
    HEAP8[$49 >> 0] = $70; //@line 30676
    $71 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($57) | 0; //@line 30677
    if (!($58 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($57); //@line 30680
     $$06272 = $6; //@line 30681
     $$06471 = $8; //@line 30681
     $$16670 = 8; //@line 30681
     label = 20; //@line 30682
     break;
    } else {
     $$06575 = 8; //@line 30685
     $$06874 = 0; //@line 30685
     $74 = 0; //@line 30685
     while (1) {
      $76 = $$06575 + 1 << 24 >> 24; //@line 30689
      HEAP8[($$06575 & 255) + ($4 + 1185) >> 0] = HEAP8[$71 + $74 >> 0] | 0; //@line 30692
      $$06874 = $$06874 + 1 << 16 >> 16; //@line 30693
      $74 = $$06874 & 65535; //@line 30694
      if ($74 >>> 0 >= $62 >>> 0) {
       $$062 = $6; //@line 30699
       $$064 = $8; //@line 30699
       $$166 = $76; //@line 30699
       label = 19; //@line 30700
       break;
      } else {
       $$06575 = $76; //@line 30697
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($58 << 24 >> 24)) {
   $$062 = $6; //@line 30711
   $$064 = $8; //@line 30711
   $$166 = 8; //@line 30711
   label = 19; //@line 30712
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($57) | 0) {
    HEAP16[$10 >> 1] = $58 & 255; //@line 30717
    $$062 = 0; //@line 30719
    $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($57) | 0; //@line 30719
    $$166 = 8; //@line 30719
    label = 19; //@line 30720
   } else {
    $$062 = $6; //@line 30722
    $$064 = $8; //@line 30722
    $$166 = 8; //@line 30722
    label = 19; //@line 30723
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($57); //@line 30728
  if (!$$064) {
   $$06273 = $$062; //@line 30731
   $$267 = $$166; //@line 30731
  } else {
   $$06272 = $$062; //@line 30733
   $$06471 = $$064; //@line 30733
   $$16670 = $$166; //@line 30733
   label = 20; //@line 30734
  }
 }
 if ((label | 0) == 20) {
  if (!(HEAP16[$10 >> 1] | 0)) {
   $$06273 = $$06272; //@line 30741
   $$267 = $$16670; //@line 30741
  } else {
   $91 = $$16670 + 1 << 24 >> 24; //@line 30743
   HEAP8[($$16670 & 255) + ($4 + 1185) >> 0] = $$06272; //@line 30746
   if (!($$06272 << 24 >> 24)) {
    __ZN14LoRaMacCommand20clear_command_bufferEv($57); //@line 30750
    $$058 = $4 + 1716 | 0; //@line 30752
   } else {
    $$058 = $4 + 1732 | 0; //@line 30754
   }
   $98 = HEAP16[$10 >> 1] | 0; //@line 30757
   $99 = HEAP32[$35 >> 2] | 0; //@line 30758
   $100 = HEAP32[$50 >> 2] | 0; //@line 30759
   $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 30762
   $103 = __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($4 + 756 | 0, $$06471, $98, $$058, 128, $99, 0, $100, ($91 & 255) + ($4 + 1185) | 0) | 0; //@line 30763
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 414; //@line 30766
    $104 = $ReallocAsyncCtx + 4 | 0; //@line 30767
    HEAP8[$104 >> 0] = $$06272; //@line 30768
    $105 = $ReallocAsyncCtx + 5 | 0; //@line 30769
    HEAP8[$105 >> 0] = $91; //@line 30770
    $106 = $ReallocAsyncCtx + 8 | 0; //@line 30771
    HEAP32[$106 >> 2] = $10; //@line 30772
    $107 = $ReallocAsyncCtx + 12 | 0; //@line 30773
    HEAP32[$107 >> 2] = $4; //@line 30774
    $108 = $ReallocAsyncCtx + 16 | 0; //@line 30775
    HEAP32[$108 >> 2] = $35; //@line 30776
    $109 = $ReallocAsyncCtx + 20 | 0; //@line 30777
    HEAP32[$109 >> 2] = $50; //@line 30778
    $110 = $ReallocAsyncCtx + 24 | 0; //@line 30779
    HEAP32[$110 >> 2] = $18; //@line 30780
    $111 = $ReallocAsyncCtx + 28 | 0; //@line 30781
    HEAP32[$111 >> 2] = $12; //@line 30782
    $112 = $ReallocAsyncCtx + 32 | 0; //@line 30783
    HEAP8[$112 >> 0] = $6; //@line 30784
    $113 = $ReallocAsyncCtx + 36 | 0; //@line 30785
    HEAP32[$113 >> 2] = $14; //@line 30786
    $114 = $ReallocAsyncCtx + 40 | 0; //@line 30787
    HEAP32[$114 >> 2] = $16; //@line 30788
    $115 = $ReallocAsyncCtx + 44 | 0; //@line 30789
    HEAP32[$115 >> 2] = $2; //@line 30790
    sp = STACKTOP; //@line 30791
    return;
   }
   HEAP32[___async_retval >> 2] = $103; //@line 30795
   ___async_unwind = 0; //@line 30796
   HEAP32[$ReallocAsyncCtx >> 2] = 414; //@line 30797
   $104 = $ReallocAsyncCtx + 4 | 0; //@line 30798
   HEAP8[$104 >> 0] = $$06272; //@line 30799
   $105 = $ReallocAsyncCtx + 5 | 0; //@line 30800
   HEAP8[$105 >> 0] = $91; //@line 30801
   $106 = $ReallocAsyncCtx + 8 | 0; //@line 30802
   HEAP32[$106 >> 2] = $10; //@line 30803
   $107 = $ReallocAsyncCtx + 12 | 0; //@line 30804
   HEAP32[$107 >> 2] = $4; //@line 30805
   $108 = $ReallocAsyncCtx + 16 | 0; //@line 30806
   HEAP32[$108 >> 2] = $35; //@line 30807
   $109 = $ReallocAsyncCtx + 20 | 0; //@line 30808
   HEAP32[$109 >> 2] = $50; //@line 30809
   $110 = $ReallocAsyncCtx + 24 | 0; //@line 30810
   HEAP32[$110 >> 2] = $18; //@line 30811
   $111 = $ReallocAsyncCtx + 28 | 0; //@line 30812
   HEAP32[$111 >> 2] = $12; //@line 30813
   $112 = $ReallocAsyncCtx + 32 | 0; //@line 30814
   HEAP8[$112 >> 0] = $6; //@line 30815
   $113 = $ReallocAsyncCtx + 36 | 0; //@line 30816
   HEAP32[$113 >> 2] = $14; //@line 30817
   $114 = $ReallocAsyncCtx + 40 | 0; //@line 30818
   HEAP32[$114 >> 2] = $16; //@line 30819
   $115 = $ReallocAsyncCtx + 44 | 0; //@line 30820
   HEAP32[$115 >> 2] = $2; //@line 30821
   sp = STACKTOP; //@line 30822
   return;
  }
 }
 $121 = (HEAPU16[$10 >> 1] | 0) + ($$267 & 255) & 65535; //@line 30830
 HEAP16[$10 >> 1] = $121; //@line 30831
 $124 = HEAP32[$35 >> 2] | 0; //@line 30834
 $125 = HEAP32[$50 >> 2] | 0; //@line 30835
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 30836
 $126 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($4 + 756 | 0, $18, $121, $4 + 1716 | 0, 128, $124, 0, $125, $12) | 0; //@line 30837
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 415; //@line 30840
  $127 = $ReallocAsyncCtx2 + 4 | 0; //@line 30841
  HEAP32[$127 >> 2] = 0; //@line 30842
  $128 = $ReallocAsyncCtx2 + 8 | 0; //@line 30843
  HEAP32[$128 >> 2] = $12; //@line 30844
  $129 = $ReallocAsyncCtx2 + 12 | 0; //@line 30845
  HEAP32[$129 >> 2] = $10; //@line 30846
  $130 = $ReallocAsyncCtx2 + 16 | 0; //@line 30847
  HEAP32[$130 >> 2] = $4; //@line 30848
  $131 = $ReallocAsyncCtx2 + 20 | 0; //@line 30849
  HEAP8[$131 >> 0] = $6; //@line 30850
  $132 = $ReallocAsyncCtx2 + 21 | 0; //@line 30851
  HEAP8[$132 >> 0] = $$06273; //@line 30852
  $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 30853
  HEAP32[$133 >> 2] = $14; //@line 30854
  $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 30855
  HEAP32[$134 >> 2] = $16; //@line 30856
  $135 = $ReallocAsyncCtx2 + 32 | 0; //@line 30857
  HEAP32[$135 >> 2] = $2; //@line 30858
  sp = STACKTOP; //@line 30859
  return;
 }
 HEAP32[___async_retval >> 2] = $126; //@line 30863
 ___async_unwind = 0; //@line 30864
 HEAP32[$ReallocAsyncCtx2 >> 2] = 415; //@line 30865
 $127 = $ReallocAsyncCtx2 + 4 | 0; //@line 30866
 HEAP32[$127 >> 2] = 0; //@line 30867
 $128 = $ReallocAsyncCtx2 + 8 | 0; //@line 30868
 HEAP32[$128 >> 2] = $12; //@line 30869
 $129 = $ReallocAsyncCtx2 + 12 | 0; //@line 30870
 HEAP32[$129 >> 2] = $10; //@line 30871
 $130 = $ReallocAsyncCtx2 + 16 | 0; //@line 30872
 HEAP32[$130 >> 2] = $4; //@line 30873
 $131 = $ReallocAsyncCtx2 + 20 | 0; //@line 30874
 HEAP8[$131 >> 0] = $6; //@line 30875
 $132 = $ReallocAsyncCtx2 + 21 | 0; //@line 30876
 HEAP8[$132 >> 0] = $$06273; //@line 30877
 $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 30878
 HEAP32[$133 >> 2] = $14; //@line 30879
 $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 30880
 HEAP32[$134 >> 2] = $16; //@line 30881
 $135 = $ReallocAsyncCtx2 + 32 | 0; //@line 30882
 HEAP32[$135 >> 2] = $2; //@line 30883
 sp = STACKTOP; //@line 30884
 return;
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 4556
 STACKTOP = STACKTOP + 32 | 0; //@line 4557
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4557
 $4 = sp + 8 | 0; //@line 4558
 $5 = sp; //@line 4559
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 4560
 if (!$6) {
  $$0 = -20; //@line 4563
  STACKTOP = sp; //@line 4564
  return $$0 | 0; //@line 4564
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 4570
  STACKTOP = sp; //@line 4571
  return $$0 | 0; //@line 4571
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4573
 _mbedtls_cipher_free($0); //@line 4574
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 594; //@line 4577
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4579
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 4581
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 4583
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 4585
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 4587
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 4589
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 4591
  sp = STACKTOP; //@line 4592
  STACKTOP = sp; //@line 4593
  return 0; //@line 4593
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4595
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4596
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 4597
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 595; //@line 4600
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4602
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 4604
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 4606
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 4608
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 4610
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 4612
  sp = STACKTOP; //@line 4613
  STACKTOP = sp; //@line 4614
  return 0; //@line 4614
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4616
 if ($18 | 0) {
  $$0 = $18; //@line 4619
  STACKTOP = sp; //@line 4620
  return $$0 | 0; //@line 4620
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4622
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 4623
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 596; //@line 4626
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 4628
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 4630
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 4632
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 4634
  sp = STACKTOP; //@line 4635
  STACKTOP = sp; //@line 4636
  return 0; //@line 4636
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4638
 if ($26 | 0) {
  $$0 = $26; //@line 4641
  STACKTOP = sp; //@line 4642
  return $$0 | 0; //@line 4642
 }
 HEAP32[$5 >> 2] = 0; //@line 4644
 dest = $4; //@line 4645
 stop = dest + 16 | 0; //@line 4645
 do {
  HEAP8[dest >> 0] = 0; //@line 4645
  dest = dest + 1 | 0; //@line 4645
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 4646
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 4647
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 597; //@line 4650
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 4652
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4654
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4656
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4658
  sp = STACKTOP; //@line 4659
  STACKTOP = sp; //@line 4660
  return 0; //@line 4660
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4662
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 4681
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 4699
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 4717
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 4735
  $110 = $0 + 136 | 0; //@line 4737
  HEAP32[$110 >> 2] = $108; //@line 4739
  HEAP32[$110 + 4 >> 2] = $90; //@line 4742
  $115 = $0 + 264 | 0; //@line 4744
  HEAP32[$115 >> 2] = $72; //@line 4746
  HEAP32[$115 + 4 >> 2] = $54; //@line 4749
  $120 = $0 + 200 | 0; //@line 4751
  HEAP32[$120 >> 2] = 0; //@line 4753
  HEAP32[$120 + 4 >> 2] = 0; //@line 4756
  $125 = $0 + 72 | 0; //@line 4758
  HEAP32[$125 >> 2] = 0; //@line 4760
  HEAP32[$125 + 4 >> 2] = 0; //@line 4763
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 4765
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 4767
  $133 = tempRet0; //@line 4768
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 4769
  $136 = $134 | $132; //@line 4771
  $137 = tempRet0 | $133; //@line 4772
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 4773
  $139 = tempRet0; //@line 4774
  $141 = $130 & -520093696 ^ $139; //@line 4776
  $143 = $0 + 104 | 0; //@line 4778
  HEAP32[$143 >> 2] = $136; //@line 4780
  HEAP32[$143 + 4 >> 2] = $137; //@line 4783
  $148 = $0 + 232 | 0; //@line 4785
  HEAP32[$148 >> 2] = $138; //@line 4787
  HEAP32[$148 + 4 >> 2] = $141; //@line 4790
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 4792
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 4794
  $156 = tempRet0; //@line 4795
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 4796
  $159 = $157 | $155; //@line 4798
  $160 = tempRet0 | $156; //@line 4799
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 4800
  $162 = tempRet0; //@line 4801
  $164 = $153 & -520093696 ^ $162; //@line 4803
  $166 = $0 + 88 | 0; //@line 4805
  HEAP32[$166 >> 2] = $159; //@line 4807
  HEAP32[$166 + 4 >> 2] = $160; //@line 4810
  $171 = $0 + 216 | 0; //@line 4812
  HEAP32[$171 >> 2] = $161; //@line 4814
  HEAP32[$171 + 4 >> 2] = $164; //@line 4817
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 4819
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 4821
  $179 = tempRet0; //@line 4822
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 4823
  $182 = $178 | $180; //@line 4825
  $183 = $179 | tempRet0; //@line 4826
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 4827
  $187 = $176 & -520093696 ^ tempRet0; //@line 4830
  $189 = $0 + 80 | 0; //@line 4832
  HEAP32[$189 >> 2] = $182; //@line 4834
  HEAP32[$189 + 4 >> 2] = $183; //@line 4837
  $194 = $0 + 208 | 0; //@line 4839
  HEAP32[$194 >> 2] = $184; //@line 4841
  HEAP32[$194 + 4 >> 2] = $187; //@line 4844
  $198 = $184 ^ $161; //@line 4845
  $199 = $187 ^ $164; //@line 4846
  $201 = $0 + 224 | 0; //@line 4848
  HEAP32[$201 >> 2] = $198; //@line 4850
  HEAP32[$201 + 4 >> 2] = $199; //@line 4853
  $205 = $182 ^ $159; //@line 4854
  $206 = $183 ^ $160; //@line 4855
  $208 = $0 + 96 | 0; //@line 4857
  HEAP32[$208 >> 2] = $205; //@line 4859
  HEAP32[$208 + 4 >> 2] = $206; //@line 4862
  $212 = $184 ^ $138; //@line 4863
  $213 = $187 ^ $141; //@line 4864
  $215 = $0 + 240 | 0; //@line 4866
  HEAP32[$215 >> 2] = $212; //@line 4868
  HEAP32[$215 + 4 >> 2] = $213; //@line 4871
  $219 = $182 ^ $136; //@line 4872
  $220 = $183 ^ $137; //@line 4873
  $222 = $0 + 112 | 0; //@line 4875
  HEAP32[$222 >> 2] = $219; //@line 4877
  HEAP32[$222 + 4 >> 2] = $220; //@line 4880
  $226 = $161 ^ $138; //@line 4881
  $227 = $164 ^ $141; //@line 4882
  $229 = $0 + 248 | 0; //@line 4884
  HEAP32[$229 >> 2] = $226; //@line 4886
  HEAP32[$229 + 4 >> 2] = $227; //@line 4889
  $233 = $159 ^ $136; //@line 4890
  $234 = $160 ^ $137; //@line 4891
  $236 = $0 + 120 | 0; //@line 4893
  HEAP32[$236 >> 2] = $233; //@line 4895
  HEAP32[$236 + 4 >> 2] = $234; //@line 4898
  $240 = $198 ^ $138; //@line 4899
  $241 = $199 ^ $141; //@line 4900
  $243 = $0 + 256 | 0; //@line 4902
  HEAP32[$243 >> 2] = $240; //@line 4904
  HEAP32[$243 + 4 >> 2] = $241; //@line 4907
  $247 = $205 ^ $136; //@line 4908
  $248 = $206 ^ $137; //@line 4909
  $250 = $0 + 128 | 0; //@line 4911
  HEAP32[$250 >> 2] = $247; //@line 4913
  HEAP32[$250 + 4 >> 2] = $248; //@line 4916
  $257 = $0 + 272 | 0; //@line 4920
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 4922
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 4925
  $264 = $0 + 144 | 0; //@line 4929
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 4931
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 4934
  $271 = $0 + 280 | 0; //@line 4938
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 4940
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 4943
  $278 = $0 + 152 | 0; //@line 4947
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 4949
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 4952
  $285 = $0 + 288 | 0; //@line 4956
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 4958
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 4961
  $292 = $0 + 160 | 0; //@line 4965
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 4967
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 4970
  $299 = $0 + 296 | 0; //@line 4974
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 4976
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 4979
  $306 = $0 + 168 | 0; //@line 4983
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 4985
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 4988
  $313 = $0 + 304 | 0; //@line 4992
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 4994
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 4997
  $320 = $0 + 176 | 0; //@line 5001
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 5003
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 5006
  $327 = $0 + 312 | 0; //@line 5010
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 5012
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 5015
  $334 = $0 + 184 | 0; //@line 5019
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 5021
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 5024
  $341 = $0 + 320 | 0; //@line 5028
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 5030
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 5033
  $348 = $0 + 192 | 0; //@line 5037
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 5039
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 5042
  $$0$i = 0; //@line 5043
 } else {
  $$0$i = $32; //@line 5045
 }
 $$0 = $$0$i; //@line 5047
 STACKTOP = sp; //@line 5048
 return $$0 | 0; //@line 5048
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $103 = 0, $104 = 0, $108 = 0, $11 = 0, $110 = 0, $115 = 0, $116 = 0, $119 = 0, $122 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $33 = 0, $4 = 0, $41 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $69 = 0, $7 = 0, $70 = 0, $77 = 0, $80 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6975
 STACKTOP = STACKTOP + 64 | 0; //@line 6976
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 6976
 $vararg_buffer3 = sp + 24 | 0; //@line 6977
 $vararg_buffer1 = sp + 16 | 0; //@line 6978
 $vararg_buffer = sp; //@line 6979
 $1 = sp + 40 | 0; //@line 6980
 $2 = __ZNK7LoRaMac19get_mcps_indicationEv($0) | 0; //@line 6981
 $4 = HEAP32[$2 + 8 >> 2] | 0; //@line 6983
 if ($4 | 0) {
  HEAP32[$vararg_buffer >> 2] = $4; //@line 6986
  _mbed_tracef(2, 12187, 12229, $vararg_buffer); //@line 6987
  $6 = $0 + 2512 | 0; //@line 6988
  $7 = HEAP32[$6 >> 2] | 0; //@line 6989
  do {
   if ($7 | 0) {
    $11 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6995
    $13 = HEAP32[$7 + 4 >> 2] | 0; //@line 6997
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6998
    FUNCTION_TABLE_vii[$13 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 6999
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 240; //@line 7002
     HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 7004
     HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 7006
     HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 7008
     HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 7010
     sp = STACKTOP; //@line 7011
     STACKTOP = sp; //@line 7012
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7014
    $18 = $vararg_buffer + 12 | 0; //@line 7016
    HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 7017
    $AsyncCtx30 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7018
    $19 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($11, $vararg_buffer, 9) | 0; //@line 7019
    if (___async) {
     HEAP32[$AsyncCtx30 >> 2] = 241; //@line 7022
     HEAP32[$AsyncCtx30 + 4 >> 2] = $18; //@line 7024
     HEAP32[$AsyncCtx30 + 8 >> 2] = $vararg_buffer; //@line 7026
     sp = STACKTOP; //@line 7027
     STACKTOP = sp; //@line 7028
     return;
    }
    _emscripten_free_async_context($AsyncCtx30 | 0); //@line 7030
    $22 = HEAP32[$18 >> 2] | 0; //@line 7031
    do {
     if ($22 | 0) {
      $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 7036
      $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7037
      FUNCTION_TABLE_vi[$25 & 1023]($vararg_buffer); //@line 7038
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 242; //@line 7041
       HEAP32[$AsyncCtx7 + 4 >> 2] = $19; //@line 7043
       HEAP32[$AsyncCtx7 + 8 >> 2] = $vararg_buffer; //@line 7045
       sp = STACKTOP; //@line 7046
       STACKTOP = sp; //@line 7047
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7049
       break;
      }
     }
    } while (0);
    if (!$19) {
     $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7056
     _mbed_assert_internal(12080, 12089, 775); //@line 7057
     if (___async) {
      HEAP32[$AsyncCtx42 >> 2] = 243; //@line 7060
      HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer; //@line 7062
      sp = STACKTOP; //@line 7063
      STACKTOP = sp; //@line 7064
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx42 | 0); //@line 7066
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 7072
  return;
 }
 HEAP32[$0 + 2556 >> 2] = HEAP32[$2 + 36 >> 2]; //@line 7077
 $33 = $2 + 13 | 0; //@line 7078
 if ((HEAP8[$33 >> 0] | 0) == -32) {
  _mbed_tracef(8, 12187, 12267, $vararg_buffer1); //@line 7082
  STACKTOP = sp; //@line 7083
  return;
 }
 if (HEAP8[$2 + 22 >> 0] | 0) {
  HEAP32[$0 + 2836 >> 2] = 2; //@line 7090
  $41 = HEAP16[$2 + 20 >> 1] | 0; //@line 7092
  HEAP16[$0 + 2860 >> 1] = $41; //@line 7094
  HEAP8[$0 + 2853 >> 0] = HEAP8[$33 >> 0] | 0; //@line 7097
  HEAP32[$0 + 2856 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 7101
  HEAP32[$0 + 2844 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 7105
  HEAP32[$vararg_buffer3 >> 2] = $41 & 65535; //@line 7107
  _mbed_tracef(16, 12187, 12293, $vararg_buffer3); //@line 7108
  HEAP8[$0 + 2832 >> 0] = 1; //@line 7110
  $53 = $0 + 2512 | 0; //@line 7111
  $54 = HEAP32[$53 >> 2] | 0; //@line 7112
  do {
   if ($54 | 0) {
    $58 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7118
    $60 = HEAP32[$54 + 4 >> 2] | 0; //@line 7120
    $AsyncCtx10 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7121
    FUNCTION_TABLE_vii[$60 & 15]($vararg_buffer3, $0 + 2500 | 0); //@line 7122
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 244; //@line 7125
     HEAP32[$AsyncCtx10 + 4 >> 2] = $vararg_buffer3; //@line 7127
     HEAP32[$AsyncCtx10 + 8 >> 2] = $0; //@line 7129
     HEAP32[$AsyncCtx10 + 12 >> 2] = $2; //@line 7131
     HEAP32[$AsyncCtx10 + 16 >> 2] = $1; //@line 7133
     HEAP32[$AsyncCtx10 + 20 >> 2] = $0; //@line 7135
     HEAP32[$AsyncCtx10 + 24 >> 2] = $53; //@line 7137
     HEAP32[$AsyncCtx10 + 28 >> 2] = $vararg_buffer3; //@line 7139
     HEAP32[$AsyncCtx10 + 32 >> 2] = $58; //@line 7141
     sp = STACKTOP; //@line 7142
     STACKTOP = sp; //@line 7143
     return;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7145
    $69 = $vararg_buffer3 + 12 | 0; //@line 7147
    HEAP32[$69 >> 2] = HEAP32[$53 >> 2]; //@line 7148
    $AsyncCtx27 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7149
    $70 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($58, $vararg_buffer3, 7) | 0; //@line 7150
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 245; //@line 7153
     HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer3; //@line 7155
     HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 7157
     HEAP32[$AsyncCtx27 + 12 >> 2] = $2; //@line 7159
     HEAP32[$AsyncCtx27 + 16 >> 2] = $69; //@line 7161
     HEAP32[$AsyncCtx27 + 20 >> 2] = $1; //@line 7163
     HEAP32[$AsyncCtx27 + 24 >> 2] = $0; //@line 7165
     sp = STACKTOP; //@line 7166
     STACKTOP = sp; //@line 7167
     return;
    }
    _emscripten_free_async_context($AsyncCtx27 | 0); //@line 7169
    $77 = HEAP32[$69 >> 2] | 0; //@line 7170
    do {
     if ($77 | 0) {
      $80 = HEAP32[$77 + 8 >> 2] | 0; //@line 7175
      $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7176
      FUNCTION_TABLE_vi[$80 & 1023]($vararg_buffer3); //@line 7177
      if (___async) {
       HEAP32[$AsyncCtx14 >> 2] = 246; //@line 7180
       HEAP32[$AsyncCtx14 + 4 >> 2] = $70; //@line 7182
       HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 7184
       HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer3; //@line 7186
       HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 7188
       HEAP32[$AsyncCtx14 + 20 >> 2] = $1; //@line 7190
       HEAP32[$AsyncCtx14 + 24 >> 2] = $0; //@line 7192
       sp = STACKTOP; //@line 7193
       STACKTOP = sp; //@line 7194
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx14 | 0); //@line 7196
       break;
      }
     }
    } while (0);
    if (!$70) {
     $AsyncCtx38 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7203
     _mbed_assert_internal(12080, 12089, 775); //@line 7204
     if (___async) {
      HEAP32[$AsyncCtx38 >> 2] = 247; //@line 7207
      HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 7209
      HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer3; //@line 7211
      HEAP32[$AsyncCtx38 + 12 >> 2] = $2; //@line 7213
      HEAP32[$AsyncCtx38 + 16 >> 2] = $1; //@line 7215
      HEAP32[$AsyncCtx38 + 20 >> 2] = $0; //@line 7217
      sp = STACKTOP; //@line 7218
      STACKTOP = sp; //@line 7219
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx38 | 0); //@line 7221
      break;
     }
    }
   }
  } while (0);
 }
 if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2) {
  label = 35; //@line 7231
 } else {
  if (!(HEAP8[$2 + 15 >> 0] | 0)) {
   label = 35; //@line 7237
  }
 }
 if ((label | 0) == 35) {
  if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) != 2) {
   STACKTOP = sp; //@line 7244
   return;
  }
  if ((HEAP32[$2 + 4 >> 2] | 0) != 1) {
   STACKTOP = sp; //@line 7250
   return;
  }
 }
 $103 = $0 + 2512 | 0; //@line 7253
 $104 = HEAP32[$103 >> 2] | 0; //@line 7254
 do {
  if ($104 | 0) {
   $108 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7260
   $110 = HEAP32[$104 + 4 >> 2] | 0; //@line 7262
   $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7263
   FUNCTION_TABLE_vii[$110 & 15]($1, $0 + 2500 | 0); //@line 7264
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 248; //@line 7267
    HEAP32[$AsyncCtx17 + 4 >> 2] = $103; //@line 7269
    HEAP32[$AsyncCtx17 + 8 >> 2] = $1; //@line 7271
    HEAP32[$AsyncCtx17 + 12 >> 2] = $108; //@line 7273
    HEAP32[$AsyncCtx17 + 16 >> 2] = $1; //@line 7275
    sp = STACKTOP; //@line 7276
    STACKTOP = sp; //@line 7277
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 7279
   $115 = $1 + 12 | 0; //@line 7281
   HEAP32[$115 >> 2] = HEAP32[$103 >> 2]; //@line 7282
   $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7283
   $116 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($108, $1, 11) | 0; //@line 7284
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 249; //@line 7287
    HEAP32[$AsyncCtx24 + 4 >> 2] = $115; //@line 7289
    HEAP32[$AsyncCtx24 + 8 >> 2] = $1; //@line 7291
    sp = STACKTOP; //@line 7292
    STACKTOP = sp; //@line 7293
    return;
   }
   _emscripten_free_async_context($AsyncCtx24 | 0); //@line 7295
   $119 = HEAP32[$115 >> 2] | 0; //@line 7296
   do {
    if ($119 | 0) {
     $122 = HEAP32[$119 + 8 >> 2] | 0; //@line 7301
     $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7302
     FUNCTION_TABLE_vi[$122 & 1023]($1); //@line 7303
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 250; //@line 7306
      HEAP32[$AsyncCtx21 + 4 >> 2] = $116; //@line 7308
      HEAP32[$AsyncCtx21 + 8 >> 2] = $1; //@line 7310
      sp = STACKTOP; //@line 7311
      STACKTOP = sp; //@line 7312
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 7314
      break;
     }
    }
   } while (0);
   if (!$116) {
    $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7321
    _mbed_assert_internal(12080, 12089, 775); //@line 7322
    if (___async) {
     HEAP32[$AsyncCtx34 >> 2] = 251; //@line 7325
     HEAP32[$AsyncCtx34 + 4 >> 2] = $1; //@line 7327
     sp = STACKTOP; //@line 7328
     STACKTOP = sp; //@line 7329
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx34 | 0); //@line 7331
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 7337
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_65($0) {
 $0 = $0 | 0;
 var $$pre$phi$sinkZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $124 = 0, $126 = 0, $134 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $67 = 0, $69 = 0, $70 = 0, $75 = 0, $76 = 0, $8 = 0, $81 = 0, $82 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22755
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22757
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22759
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 22761
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22763
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22765
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22767
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22769
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22771
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22773
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22777
 $26 = HEAP8[$0 + 52 >> 0] | 0; //@line 22781
 $28 = HEAP8[$0 + 53 >> 0] | 0; //@line 22783
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 22785
 $32 = HEAP8[$0 + 60 >> 0] | 0; //@line 22787
 $34 = HEAP16[$0 + 62 >> 1] | 0; //@line 22789
 $36 = HEAP32[$0 + 64 >> 2] | 0; //@line 22791
 $38 = HEAP32[$0 + 68 >> 2] | 0; //@line 22793
 $40 = HEAP32[$0 + 72 >> 2] | 0; //@line 22795
 $42 = HEAP8[$0 + 76 >> 0] | 0; //@line 22797
 $44 = HEAP8[$0 + 77 >> 0] & 1; //@line 22800
 $46 = HEAP32[$0 + 80 >> 2] | 0; //@line 22802
 $48 = HEAP16[$0 + 84 >> 1] | 0; //@line 22804
 $49 = $2 + 2062 | 0; //@line 22805
 HEAP8[$49 >> 0] = 0; //@line 22806
 $50 = $2 + 2044 | 0; //@line 22807
 HEAP8[$50 >> 0] = 0; //@line 22808
 $51 = $2 + 2012 | 0; //@line 22809
 HEAP8[$51 >> 0] = 1; //@line 22810
 HEAP8[$2 + 2034 >> 0] = 0; //@line 22812
 $53 = $2 + 2020 | 0; //@line 22813
 HEAP32[$53 >> 2] = 0; //@line 22814
 HEAP8[$2 + 2024 >> 0] = $44 & 1; //@line 22817
 HEAP8[$2 + 2027 >> 0] = ($42 & 255) >>> 4 & 1; //@line 22821
 $59 = $2 + 2028 | 0; //@line 22822
 HEAP32[$59 >> 2] = 0; //@line 22823
 $60 = $2 + 2032 | 0; //@line 22824
 HEAP16[$60 >> 1] = 0; //@line 22825
 $61 = HEAP32[$46 >> 2] | 0; //@line 22826
 $62 = $2 + 2048 | 0; //@line 22827
 HEAP32[$62 >> 2] = $61; //@line 22828
 HEAP16[$2 + 2036 >> 1] = $48; //@line 22830
 HEAP8[$2 + 2038 >> 0] = $28; //@line 22832
 HEAP32[$2 + 2056 >> 2] = 0; //@line 22834
 HEAP32[$2 + 1768 >> 2] = 0; //@line 22836
 $67 = $2 + 476 | 0; //@line 22837
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($67); //@line 22838
 L2 : do {
  if ($44) {
   HEAP32[$2 + 2016 >> 2] = 2; //@line 22842
   $69 = $4 + 36 | 0; //@line 22843
   $70 = HEAP32[$69 >> 2] | 0; //@line 22844
   if (($70 | 0) == 0 | ($70 | 0) != ($61 | 0)) {
    $$pre$phi$sinkZ2D = $69; //@line 22849
   } else {
    HEAP32[$53 >> 2] = 8; //@line 22851
    HEAP32[$62 >> 2] = $61; //@line 22852
    HEAP8[$51 >> 0] = 0; //@line 22853
    return;
   }
  } else {
   switch ($6 << 24 >> 24) {
   case 5:
    {
     HEAP8[$2 + 1178 >> 0] = 1; //@line 22860
     HEAP32[$2 + 2016 >> 2] = 1; //@line 22862
     $75 = $2 + 1764 | 0; //@line 22863
     $76 = HEAP32[$75 >> 2] | 0; //@line 22864
     if (($76 | 0) == 0 | ($76 | 0) != ($61 | 0)) {
      $$pre$phi$sinkZ2D = $75; //@line 22869
      break L2;
     }
     _mbed_tracef(16, 12866, 12928, $22); //@line 22872
     HEAP8[$51 >> 0] = 0; //@line 22873
     HEAP32[$53 >> 2] = 8; //@line 22874
     $$pre$phi$sinkZ2D = $75; //@line 22875
     break L2;
     break;
    }
   case 3:
    {
     HEAP8[$2 + 1178 >> 0] = 0; //@line 22881
     HEAP32[$2 + 2016 >> 2] = 0; //@line 22883
     $81 = $2 + 1764 | 0; //@line 22884
     $82 = HEAP32[$81 >> 2] | 0; //@line 22885
     if (($82 | 0) == 0 | ($82 | 0) != ($61 | 0)) {
      $$pre$phi$sinkZ2D = $81; //@line 22890
      break L2;
     }
     _mbed_tracef(16, 12866, 12928, $18); //@line 22893
     HEAP8[$51 >> 0] = 0; //@line 22894
     HEAP32[$53 >> 2] = 8; //@line 22895
     return;
    }
   default:
    {
     $$pre$phi$sinkZ2D = $2 + 1764 | 0; //@line 22901
     break L2;
    }
   }
  }
 } while (0);
 HEAP32[$$pre$phi$sinkZ2D >> 2] = $61; //@line 22907
 if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($67); //@line 22912
 } else {
  if ($42 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($67); //@line 22917
   HEAP8[$49 >> 0] = 1; //@line 22918
   HEAP8[$50 >> 0] = 1; //@line 22919
  }
 }
 if ($12 + 252 - ($26 & 255) & 255 | 0) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 22928
  __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($2, $10, $34, $32, $36, $38, $40, $61, 0, $28); //@line 22929
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 387; //@line 22932
   $95 = $ReallocAsyncCtx + 4 | 0; //@line 22933
   HEAP8[$95 >> 0] = $6; //@line 22934
   $96 = $ReallocAsyncCtx + 8 | 0; //@line 22935
   HEAP32[$96 >> 2] = $2; //@line 22936
   $97 = $ReallocAsyncCtx + 12 | 0; //@line 22937
   HEAP32[$97 >> 2] = $8; //@line 22938
   $98 = $ReallocAsyncCtx + 16 | 0; //@line 22939
   HEAP32[$98 >> 2] = $10; //@line 22940
   $99 = $ReallocAsyncCtx + 20 | 0; //@line 22941
   HEAP32[$99 >> 2] = $12; //@line 22942
   $100 = $ReallocAsyncCtx + 24 | 0; //@line 22943
   HEAP32[$100 >> 2] = $53; //@line 22944
   $101 = $ReallocAsyncCtx + 28 | 0; //@line 22945
   HEAP32[$101 >> 2] = $59; //@line 22946
   $102 = $ReallocAsyncCtx + 32 | 0; //@line 22947
   HEAP32[$102 >> 2] = $60; //@line 22948
   $103 = $ReallocAsyncCtx + 36 | 0; //@line 22949
   HEAP32[$103 >> 2] = $49; //@line 22950
   $104 = $ReallocAsyncCtx + 40 | 0; //@line 22951
   HEAP32[$104 >> 2] = $14; //@line 22952
   $105 = $ReallocAsyncCtx + 44 | 0; //@line 22953
   HEAP32[$105 >> 2] = $16; //@line 22954
   sp = STACKTOP; //@line 22955
   return;
  }
  ___async_unwind = 0; //@line 22958
  HEAP32[$ReallocAsyncCtx >> 2] = 387; //@line 22959
  $95 = $ReallocAsyncCtx + 4 | 0; //@line 22960
  HEAP8[$95 >> 0] = $6; //@line 22961
  $96 = $ReallocAsyncCtx + 8 | 0; //@line 22962
  HEAP32[$96 >> 2] = $2; //@line 22963
  $97 = $ReallocAsyncCtx + 12 | 0; //@line 22964
  HEAP32[$97 >> 2] = $8; //@line 22965
  $98 = $ReallocAsyncCtx + 16 | 0; //@line 22966
  HEAP32[$98 >> 2] = $10; //@line 22967
  $99 = $ReallocAsyncCtx + 20 | 0; //@line 22968
  HEAP32[$99 >> 2] = $12; //@line 22969
  $100 = $ReallocAsyncCtx + 24 | 0; //@line 22970
  HEAP32[$100 >> 2] = $53; //@line 22971
  $101 = $ReallocAsyncCtx + 28 | 0; //@line 22972
  HEAP32[$101 >> 2] = $59; //@line 22973
  $102 = $ReallocAsyncCtx + 32 | 0; //@line 22974
  HEAP32[$102 >> 2] = $60; //@line 22975
  $103 = $ReallocAsyncCtx + 36 | 0; //@line 22976
  HEAP32[$103 >> 2] = $49; //@line 22977
  $104 = $ReallocAsyncCtx + 40 | 0; //@line 22978
  HEAP32[$104 >> 2] = $14; //@line 22979
  $105 = $ReallocAsyncCtx + 44 | 0; //@line 22980
  HEAP32[$105 >> 2] = $16; //@line 22981
  sp = STACKTOP; //@line 22982
  return;
 }
 if ($32 << 24 >> 24) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 22989
  $109 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($67, $10, 8, $26, $28, $2 + 2084 | 0, $2 + 1876 | 0, $30) | 0; //@line 22990
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 388; //@line 22993
   $110 = $ReallocAsyncCtx3 + 4 | 0; //@line 22994
   HEAP32[$110 >> 2] = $67; //@line 22995
   $111 = $ReallocAsyncCtx3 + 8 | 0; //@line 22996
   HEAP32[$111 >> 2] = $53; //@line 22997
   $112 = $ReallocAsyncCtx3 + 12 | 0; //@line 22998
   HEAP8[$112 >> 0] = $6; //@line 22999
   $113 = $ReallocAsyncCtx3 + 16 | 0; //@line 23000
   HEAP32[$113 >> 2] = $2; //@line 23001
   $114 = $ReallocAsyncCtx3 + 20 | 0; //@line 23002
   HEAP32[$114 >> 2] = $8; //@line 23003
   $115 = $ReallocAsyncCtx3 + 24 | 0; //@line 23004
   HEAP32[$115 >> 2] = $10; //@line 23005
   $116 = $ReallocAsyncCtx3 + 28 | 0; //@line 23006
   HEAP32[$116 >> 2] = $12; //@line 23007
   $117 = $ReallocAsyncCtx3 + 32 | 0; //@line 23008
   HEAP32[$117 >> 2] = $59; //@line 23009
   $118 = $ReallocAsyncCtx3 + 36 | 0; //@line 23010
   HEAP32[$118 >> 2] = $60; //@line 23011
   $119 = $ReallocAsyncCtx3 + 40 | 0; //@line 23012
   HEAP32[$119 >> 2] = $49; //@line 23013
   $120 = $ReallocAsyncCtx3 + 44 | 0; //@line 23014
   HEAP32[$120 >> 2] = $14; //@line 23015
   $121 = $ReallocAsyncCtx3 + 48 | 0; //@line 23016
   HEAP32[$121 >> 2] = $16; //@line 23017
   sp = STACKTOP; //@line 23018
   return;
  }
  HEAP32[___async_retval >> 2] = $109; //@line 23022
  ___async_unwind = 0; //@line 23023
  HEAP32[$ReallocAsyncCtx3 >> 2] = 388; //@line 23024
  $110 = $ReallocAsyncCtx3 + 4 | 0; //@line 23025
  HEAP32[$110 >> 2] = $67; //@line 23026
  $111 = $ReallocAsyncCtx3 + 8 | 0; //@line 23027
  HEAP32[$111 >> 2] = $53; //@line 23028
  $112 = $ReallocAsyncCtx3 + 12 | 0; //@line 23029
  HEAP8[$112 >> 0] = $6; //@line 23030
  $113 = $ReallocAsyncCtx3 + 16 | 0; //@line 23031
  HEAP32[$113 >> 2] = $2; //@line 23032
  $114 = $ReallocAsyncCtx3 + 20 | 0; //@line 23033
  HEAP32[$114 >> 2] = $8; //@line 23034
  $115 = $ReallocAsyncCtx3 + 24 | 0; //@line 23035
  HEAP32[$115 >> 2] = $10; //@line 23036
  $116 = $ReallocAsyncCtx3 + 28 | 0; //@line 23037
  HEAP32[$116 >> 2] = $12; //@line 23038
  $117 = $ReallocAsyncCtx3 + 32 | 0; //@line 23039
  HEAP32[$117 >> 2] = $59; //@line 23040
  $118 = $ReallocAsyncCtx3 + 36 | 0; //@line 23041
  HEAP32[$118 >> 2] = $60; //@line 23042
  $119 = $ReallocAsyncCtx3 + 40 | 0; //@line 23043
  HEAP32[$119 >> 2] = $49; //@line 23044
  $120 = $ReallocAsyncCtx3 + 44 | 0; //@line 23045
  HEAP32[$120 >> 2] = $14; //@line 23046
  $121 = $ReallocAsyncCtx3 + 48 | 0; //@line 23047
  HEAP32[$121 >> 2] = $16; //@line 23048
  sp = STACKTOP; //@line 23049
  return;
 }
 if ($6 << 24 >> 24 == 7) {
  $124 = $2 + 1442 | 0; //@line 23054
  $126 = HEAPU8[$8 >> 0] | 0; //@line 23056
  _memcpy($124 | 0, $10 + $126 | 0, $12 | 0) | 0; //@line 23058
  HEAP32[$2 + 2016 >> 2] = 3; //@line 23060
  HEAP32[$53 >> 2] = 0; //@line 23061
  HEAP32[$59 >> 2] = $124; //@line 23062
  HEAP16[$60 >> 1] = $12 - $126; //@line 23065
 }
 if (!(HEAP8[$49 >> 0] | 0)) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 23073
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($16, $2 + 1856 | 0); //@line 23074
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 389; //@line 23077
  $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 23078
  HEAP32[$134 >> 2] = $14; //@line 23079
  sp = STACKTOP; //@line 23080
  return;
 }
 ___async_unwind = 0; //@line 23083
 HEAP32[$ReallocAsyncCtx4 >> 2] = 389; //@line 23084
 $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 23085
 HEAP32[$134 >> 2] = $14; //@line 23086
 sp = STACKTOP; //@line 23087
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_212($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $87 = 0, $92 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16548
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16550
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16552
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16556
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16558
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16560
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16564
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16566
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16568
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16570
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16572
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  return;
 }
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) != 1) {
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 16581
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 16; //@line 16584
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 16585
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 16586
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 280; //@line 16589
   $62 = $ReallocAsyncCtx5 + 4 | 0; //@line 16590
   HEAP32[$62 >> 2] = $2; //@line 16591
   $63 = $ReallocAsyncCtx5 + 8 | 0; //@line 16592
   HEAP32[$63 >> 2] = $8; //@line 16593
   $64 = $ReallocAsyncCtx5 + 12 | 0; //@line 16594
   HEAP32[$64 >> 2] = $10; //@line 16595
   $65 = $ReallocAsyncCtx5 + 16 | 0; //@line 16596
   HEAP32[$65 >> 2] = $16; //@line 16597
   $66 = $ReallocAsyncCtx5 + 20 | 0; //@line 16598
   HEAP32[$66 >> 2] = $18; //@line 16599
   $67 = $ReallocAsyncCtx5 + 24 | 0; //@line 16600
   HEAP32[$67 >> 2] = $20; //@line 16601
   $68 = $ReallocAsyncCtx5 + 28 | 0; //@line 16602
   HEAP32[$68 >> 2] = $22; //@line 16603
   $69 = $ReallocAsyncCtx5 + 32 | 0; //@line 16604
   HEAP32[$69 >> 2] = $24; //@line 16605
   sp = STACKTOP; //@line 16606
   return;
  }
  ___async_unwind = 0; //@line 16609
  HEAP32[$ReallocAsyncCtx5 >> 2] = 280; //@line 16610
  $62 = $ReallocAsyncCtx5 + 4 | 0; //@line 16611
  HEAP32[$62 >> 2] = $2; //@line 16612
  $63 = $ReallocAsyncCtx5 + 8 | 0; //@line 16613
  HEAP32[$63 >> 2] = $8; //@line 16614
  $64 = $ReallocAsyncCtx5 + 12 | 0; //@line 16615
  HEAP32[$64 >> 2] = $10; //@line 16616
  $65 = $ReallocAsyncCtx5 + 16 | 0; //@line 16617
  HEAP32[$65 >> 2] = $16; //@line 16618
  $66 = $ReallocAsyncCtx5 + 20 | 0; //@line 16619
  HEAP32[$66 >> 2] = $18; //@line 16620
  $67 = $ReallocAsyncCtx5 + 24 | 0; //@line 16621
  HEAP32[$67 >> 2] = $20; //@line 16622
  $68 = $ReallocAsyncCtx5 + 28 | 0; //@line 16623
  HEAP32[$68 >> 2] = $22; //@line 16624
  $69 = $ReallocAsyncCtx5 + 32 | 0; //@line 16625
  HEAP32[$69 >> 2] = $24; //@line 16626
  sp = STACKTOP; //@line 16627
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 32 >> 0] | 0) {
  HEAP32[$4 >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) + 11 >> 0]; //@line 16639
  _mbed_tracef(16, 12187, 12389, $4); //@line 16640
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 16641
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -18 | 16; //@line 16645
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 16646
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 16647
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 278; //@line 16650
   $40 = $ReallocAsyncCtx7 + 4 | 0; //@line 16651
   HEAP32[$40 >> 2] = $2; //@line 16652
   $41 = $ReallocAsyncCtx7 + 8 | 0; //@line 16653
   HEAP32[$41 >> 2] = $8; //@line 16654
   $42 = $ReallocAsyncCtx7 + 12 | 0; //@line 16655
   HEAP32[$42 >> 2] = $10; //@line 16656
   $43 = $ReallocAsyncCtx7 + 16 | 0; //@line 16657
   HEAP32[$43 >> 2] = $16; //@line 16658
   $44 = $ReallocAsyncCtx7 + 20 | 0; //@line 16659
   HEAP32[$44 >> 2] = $18; //@line 16660
   $45 = $ReallocAsyncCtx7 + 24 | 0; //@line 16661
   HEAP32[$45 >> 2] = $20; //@line 16662
   $46 = $ReallocAsyncCtx7 + 28 | 0; //@line 16663
   HEAP32[$46 >> 2] = $22; //@line 16664
   $47 = $ReallocAsyncCtx7 + 32 | 0; //@line 16665
   HEAP32[$47 >> 2] = $24; //@line 16666
   sp = STACKTOP; //@line 16667
   return;
  }
  ___async_unwind = 0; //@line 16670
  HEAP32[$ReallocAsyncCtx7 >> 2] = 278; //@line 16671
  $40 = $ReallocAsyncCtx7 + 4 | 0; //@line 16672
  HEAP32[$40 >> 2] = $2; //@line 16673
  $41 = $ReallocAsyncCtx7 + 8 | 0; //@line 16674
  HEAP32[$41 >> 2] = $8; //@line 16675
  $42 = $ReallocAsyncCtx7 + 12 | 0; //@line 16676
  HEAP32[$42 >> 2] = $10; //@line 16677
  $43 = $ReallocAsyncCtx7 + 16 | 0; //@line 16678
  HEAP32[$43 >> 2] = $16; //@line 16679
  $44 = $ReallocAsyncCtx7 + 20 | 0; //@line 16680
  HEAP32[$44 >> 2] = $18; //@line 16681
  $45 = $ReallocAsyncCtx7 + 24 | 0; //@line 16682
  HEAP32[$45 >> 2] = $20; //@line 16683
  $46 = $ReallocAsyncCtx7 + 28 | 0; //@line 16684
  HEAP32[$46 >> 2] = $22; //@line 16685
  $47 = $ReallocAsyncCtx7 + 32 | 0; //@line 16686
  HEAP32[$47 >> 2] = $24; //@line 16687
  sp = STACKTOP; //@line 16688
  return;
 }
 if (!(__ZN7LoRaMac24continue_sending_processEv($2) | 0)) {
  _mbed_tracef(2, 12187, 12192, $12); //@line 16693
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -18 | 1; //@line 16697
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 16698
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 16699
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 279; //@line 16702
   $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 16703
   HEAP32[$52 >> 2] = $2; //@line 16704
   $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 16705
   HEAP32[$53 >> 2] = $8; //@line 16706
   $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 16707
   HEAP32[$54 >> 2] = $10; //@line 16708
   $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 16709
   HEAP32[$55 >> 2] = $16; //@line 16710
   $56 = $ReallocAsyncCtx6 + 20 | 0; //@line 16711
   HEAP32[$56 >> 2] = $18; //@line 16712
   $57 = $ReallocAsyncCtx6 + 24 | 0; //@line 16713
   HEAP32[$57 >> 2] = $20; //@line 16714
   $58 = $ReallocAsyncCtx6 + 28 | 0; //@line 16715
   HEAP32[$58 >> 2] = $22; //@line 16716
   $59 = $ReallocAsyncCtx6 + 32 | 0; //@line 16717
   HEAP32[$59 >> 2] = $24; //@line 16718
   sp = STACKTOP; //@line 16719
   return;
  }
  ___async_unwind = 0; //@line 16722
  HEAP32[$ReallocAsyncCtx6 >> 2] = 279; //@line 16723
  $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 16724
  HEAP32[$52 >> 2] = $2; //@line 16725
  $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 16726
  HEAP32[$53 >> 2] = $8; //@line 16727
  $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 16728
  HEAP32[$54 >> 2] = $10; //@line 16729
  $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 16730
  HEAP32[$55 >> 2] = $16; //@line 16731
  $56 = $ReallocAsyncCtx6 + 20 | 0; //@line 16732
  HEAP32[$56 >> 2] = $18; //@line 16733
  $57 = $ReallocAsyncCtx6 + 24 | 0; //@line 16734
  HEAP32[$57 >> 2] = $20; //@line 16735
  $58 = $ReallocAsyncCtx6 + 28 | 0; //@line 16736
  HEAP32[$58 >> 2] = $22; //@line 16737
  $59 = $ReallocAsyncCtx6 + 32 | 0; //@line 16738
  HEAP32[$59 >> 2] = $24; //@line 16739
  sp = STACKTOP; //@line 16740
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 16747
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 2; //@line 16750
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 16751
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 16752
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 16755
   $75 = $ReallocAsyncCtx4 + 4 | 0; //@line 16756
   HEAP32[$75 >> 2] = $8; //@line 16757
   $76 = $ReallocAsyncCtx4 + 8 | 0; //@line 16758
   HEAP32[$76 >> 2] = $2; //@line 16759
   $77 = $ReallocAsyncCtx4 + 12 | 0; //@line 16760
   HEAP32[$77 >> 2] = $16; //@line 16761
   $78 = $ReallocAsyncCtx4 + 16 | 0; //@line 16762
   HEAP32[$78 >> 2] = $10; //@line 16763
   $79 = $ReallocAsyncCtx4 + 20 | 0; //@line 16764
   HEAP32[$79 >> 2] = $18; //@line 16765
   $80 = $ReallocAsyncCtx4 + 24 | 0; //@line 16766
   HEAP32[$80 >> 2] = $20; //@line 16767
   $81 = $ReallocAsyncCtx4 + 28 | 0; //@line 16768
   HEAP32[$81 >> 2] = $22; //@line 16769
   $82 = $ReallocAsyncCtx4 + 32 | 0; //@line 16770
   HEAP32[$82 >> 2] = $24; //@line 16771
   sp = STACKTOP; //@line 16772
   return;
  }
  ___async_unwind = 0; //@line 16775
  HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 16776
  $75 = $ReallocAsyncCtx4 + 4 | 0; //@line 16777
  HEAP32[$75 >> 2] = $8; //@line 16778
  $76 = $ReallocAsyncCtx4 + 8 | 0; //@line 16779
  HEAP32[$76 >> 2] = $2; //@line 16780
  $77 = $ReallocAsyncCtx4 + 12 | 0; //@line 16781
  HEAP32[$77 >> 2] = $16; //@line 16782
  $78 = $ReallocAsyncCtx4 + 16 | 0; //@line 16783
  HEAP32[$78 >> 2] = $10; //@line 16784
  $79 = $ReallocAsyncCtx4 + 20 | 0; //@line 16785
  HEAP32[$79 >> 2] = $18; //@line 16786
  $80 = $ReallocAsyncCtx4 + 24 | 0; //@line 16787
  HEAP32[$80 >> 2] = $20; //@line 16788
  $81 = $ReallocAsyncCtx4 + 28 | 0; //@line 16789
  HEAP32[$81 >> 2] = $22; //@line 16790
  $82 = $ReallocAsyncCtx4 + 32 | 0; //@line 16791
  HEAP32[$82 >> 2] = $24; //@line 16792
  sp = STACKTOP; //@line 16793
  return;
 }
 if (!(HEAP32[$8 >> 2] & 1)) {
  $87 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 16801
  HEAP32[$16 >> 2] = $87 ? 5 : 2; //@line 16803
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$10 + 2911 >> 0] = 1; //@line 16811
  return;
 }
 _mbed_tracef(16, 12187, 12409, $18); //@line 16814
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 16815
 _mbed_tracef(16, 12187, 12433, $22); //@line 16816
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16817
 __ZN12LoRaWANStack23mlme_indication_handlerEv($10); //@line 16818
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 16821
  $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 16822
  HEAP32[$92 >> 2] = $10; //@line 16823
  sp = STACKTOP; //@line 16824
  return;
 }
 ___async_unwind = 0; //@line 16827
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 16828
 $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 16829
 HEAP32[$92 >> 2] = $10; //@line 16830
 sp = STACKTOP; //@line 16831
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$130$$$i = 0, $$026$$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$lcssa = 0, $$02864 = 0, $$029$be = 0, $$029$lcssa = 0, $$02963 = 0, $$1 = 0, $$2$i = 0, $$258 = 0, $$3 = 0, $$452 = 0, $$lcssa78 = 0, $$lcssa79 = 0, $$pre = 0, $$sroa$035$0$lcssa = 0, $$sroa$035$060 = 0, $$sroa$035$349 = 0, $$sroa$11$0$lcssa = 0, $$sroa$11$062 = 0, $$sroa$11$351 = 0, $$sroa$637$0$lcssa = 0, $$sroa$637$061 = 0, $$sroa$637$350 = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $11 = 0, $116 = 0, $12 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $135 = 0, $136 = 0, $140 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $66 = 0, $7 = 0, $79 = 0, $81 = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv82 = 0, $not$or$cond$i$i = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 19907
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 19911
   $$029$lcssa = 7; //@line 19911
   $$sroa$035$0$lcssa = 0; //@line 19911
   $$sroa$11$0$lcssa = 0; //@line 19911
   $$sroa$637$0$lcssa = 0; //@line 19911
   $101 = 0; //@line 19911
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 19913
   $10 = $0 + 20 | 0; //@line 19914
   $11 = $0 + 124 | 0; //@line 19915
   $$02864 = 0; //@line 19916
   $$02963 = 7; //@line 19916
   $$lcssa78 = 0; //@line 19916
   $$sroa$035$060 = 0; //@line 19916
   $$sroa$11$062 = 0; //@line 19916
   $$sroa$637$061 = 0; //@line 19916
   $13 = 0; //@line 19916
   while (1) {
    $12 = $9 + $13 | 0; //@line 19918
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02864; //@line 19922
     $$029$lcssa = $$02963; //@line 19922
     $$sroa$035$0$lcssa = $$sroa$035$060; //@line 19922
     $$sroa$11$0$lcssa = $$sroa$11$062; //@line 19922
     $$sroa$637$0$lcssa = $$sroa$637$061; //@line 19922
     $101 = $$lcssa78; //@line 19922
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 19926
    $18 = $17 & 15; //@line 19927
    $19 = ($17 & 255) >>> 4; //@line 19928
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 19936
    $28 = $27 & 65535; //@line 19937
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 19939
    $32 = ($30 & 255) >>> 4; //@line 19941
    $34 = $32 & 7; //@line 19943
    $35 = $30 & 15; //@line 19944
    $36 = $13 + 5 | 0; //@line 19945
    $37 = $36 & 255; //@line 19946
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 19950
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 19956
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 19959
        $$lcssa79 = $28; //@line 19959
       } else {
        $45 = $42 & 255; //@line 19962
        if ($34 << 24 >> 24 != 6) {
         $$258 = $$1; //@line 19964
         $indvars$iv = 0; //@line 19964
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$258; //@line 19971
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$258 & -2 : $$258; //@line 19979
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 19981
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 19986
           $$lcssa79 = $28; //@line 19986
           break L6;
          } else {
           $$258 = $$3; //@line 19984
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 19991
        $52 = $28; //@line 19992
        $indvars$iv82 = 0; //@line 19992
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv82 * 12 | 0) >> 2] | 0)) {
          $140 = $52; //@line 19998
         } else {
          $140 = (1 << ($indvars$iv82 & 15) | $52 & 65535) & 65535; //@line 20005
         }
         $indvars$iv82 = $indvars$iv82 + 1 | 0; //@line 20007
         if ($indvars$iv82 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 20012
          $$lcssa79 = $140; //@line 20012
          break;
         } else {
          $52 = $140; //@line 20010
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 20020
       $$lcssa79 = $28; //@line 20020
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02864 = $37; //@line 20027
     $$02963 = $$029$be; //@line 20027
     $$lcssa78 = $$lcssa79; //@line 20027
     $$sroa$035$060 = $35; //@line 20027
     $$sroa$11$062 = $18; //@line 20027
     $$sroa$637$061 = $19; //@line 20027
     $13 = $36 & 255; //@line 20027
    } else {
     $$028$lcssa = $37; //@line 20029
     $$029$lcssa = $$029$be; //@line 20029
     $$sroa$035$0$lcssa = $35; //@line 20029
     $$sroa$11$0$lcssa = $18; //@line 20029
     $$sroa$637$0$lcssa = $19; //@line 20029
     $101 = $$lcssa79; //@line 20029
     break L1;
    }
   }
  }
 } while (0);
 $66 = $$sroa$637$0$lcssa << 24 >> 24; //@line 20035
 if (($66 | 0) < (HEAPU8[$0 + 92 >> 0] | 0)) {
  if (HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $66 >> 0] | 0) {
   $79 = HEAP8[$1 + 7 >> 0] | 0; //@line 20050
   $81 = HEAP8[$1 + 8 >> 0] | 0; //@line 20052
   if (!(HEAP8[$1 + 6 >> 0] | 0)) {
    if ($$sroa$637$0$lcssa << 24 >> 24 == 15 & $$sroa$11$0$lcssa << 24 >> 24 == 15) {
     $$026$i = $81; //@line 20061
     $$028$i = $79; //@line 20061
    } else {
     $$452 = 0; //@line 20063
     $$sroa$035$349 = HEAP8[$1 + 9 >> 0] | 0; //@line 20063
     $$sroa$11$351 = $81; //@line 20063
     $$sroa$637$350 = $79; //@line 20063
     HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20064
     HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20065
     HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20066
     HEAP8[$5 >> 0] = $$028$lcssa; //@line 20067
     return $$452 | 0; //@line 20068
    }
   } else {
    $$026$i = $$sroa$11$0$lcssa; //@line 20071
    $$028$i = $$sroa$637$0$lcssa; //@line 20071
   }
   if (!($$029$lcssa << 24 >> 24)) {
    $$452 = 0; //@line 20075
    $$sroa$035$349 = $$sroa$035$0$lcssa; //@line 20075
    $$sroa$11$351 = $$026$i; //@line 20075
    $$sroa$637$350 = $$028$i; //@line 20075
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20076
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20077
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20078
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 20079
    return $$452 | 0; //@line 20080
   }
   $93 = HEAP32[$0 + 124 >> 2] | 0; //@line 20087
   L33 : do {
    if ($$028$i << 24 >> 24 >= (HEAP8[$0 + 26 >> 0] | 0) ? $$028$i << 24 >> 24 <= (HEAP8[$0 + 27 >> 0] | 0) : 0) {
     $97 = HEAP8[$0 + 20 >> 0] | 0; //@line 20094
     if (!($97 << 24 >> 24)) {
      label = 26; //@line 20097
     } else {
      $99 = $97 & 255; //@line 20099
      $100 = $101 & 65535; //@line 20100
      $indvars$iv$i31 = 0; //@line 20101
      while (1) {
       if (1 << ($indvars$iv$i31 & 15) & $100 | 0) {
        $107 = HEAP8[$93 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 20109
        if (($107 & 15) <= $$028$i << 24 >> 24 ? ($107 & 255) >>> 4 << 24 >> 24 >= $$028$i << 24 >> 24 : 0) {
         $125 = $$029$lcssa; //@line 20116
         break L33;
        }
       }
       $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 20120
       if ($indvars$iv$i31 >>> 0 >= $99 >>> 0) {
        label = 26; //@line 20125
        break;
       }
      }
     }
    } else {
     label = 26; //@line 20131
    }
   } while (0);
   if ((label | 0) == 26) {
    $125 = $$029$lcssa & -3; //@line 20136
   }
   $116 = HEAP8[$0 + 22 >> 0] | 0; //@line 20139
   $not$or$cond$i$i = $$026$i << 24 >> 24 >= $116 << 24 >> 24 ? $$026$i << 24 >> 24 <= (HEAP8[$0 + 21 >> 0] | 0) : 0; //@line 20144
   $123 = ($116 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 20147
   $$$130$$$i = $123 | $not$or$cond$i$i ? $125 : $125 & -5; //@line 20151
   $$026$$$026$i = $not$or$cond$i$i ? $$026$i : $123 ? $116 : $$026$i; //@line 20152
   $127 = $$$130$$$i << 24 >> 24 == 7; //@line 20153
   $$2$i = $$sroa$035$0$lcssa << 24 >> 24 == 0 & $127 ? 1 : $$sroa$035$0$lcssa; //@line 20156
   if (!$127) {
    $$452 = $$$130$$$i; //@line 20158
    $$sroa$035$349 = $$2$i; //@line 20158
    $$sroa$11$351 = $$026$$$026$i; //@line 20158
    $$sroa$637$350 = $$028$i; //@line 20158
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20159
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20160
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20161
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 20162
    return $$452 | 0; //@line 20163
   }
   $129 = $0 + 116 | 0; //@line 20165
   $131 = $0 + 113 | 0; //@line 20167
   _memset(HEAP32[$129 >> 2] | 0, 0, HEAPU8[$131 >> 0] << 1 | 0) | 0; //@line 20171
   $135 = HEAP32[$129 >> 2] | 0; //@line 20172
   $136 = HEAP8[$131 >> 0] | 0; //@line 20173
   if (!(($135 | 0) != 0 & $136 << 24 >> 24 != 0)) {
    $$452 = 7; //@line 20178
    $$sroa$035$349 = $$2$i; //@line 20178
    $$sroa$11$351 = $$026$$$026$i; //@line 20178
    $$sroa$637$350 = $$028$i; //@line 20178
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20179
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20180
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20181
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 20182
    return $$452 | 0; //@line 20183
   }
   $wide$trip$count$i = $136 & 255; //@line 20185
   $indvars$iv$i = 0; //@line 20186
   do {
    HEAP16[$135 + ($indvars$iv$i << 1) >> 1] = $101; //@line 20189
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 20190
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
   $$452 = 7; //@line 20193
   $$sroa$035$349 = $$2$i; //@line 20193
   $$sroa$11$351 = $$026$$$026$i; //@line 20193
   $$sroa$637$350 = $$028$i; //@line 20193
   HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20199
   HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20200
   HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20201
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 20202
   return $$452 | 0; //@line 20203
  }
 }
 $$452 = $$029$lcssa & -3; //@line 20207
 $$sroa$035$349 = $$sroa$035$0$lcssa; //@line 20207
 $$sroa$11$351 = $$sroa$11$0$lcssa; //@line 20207
 $$sroa$637$350 = $$sroa$637$0$lcssa; //@line 20207
 HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20208
 HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20209
 HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20210
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 20211
 return $$452 | 0; //@line 20212
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 31087
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 31088
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 31089
 $d_sroa_0_0_extract_trunc = $b$0; //@line 31090
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 31091
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 31092
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 31094
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 31097
    HEAP32[$rem + 4 >> 2] = 0; //@line 31098
   }
   $_0$1 = 0; //@line 31100
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 31101
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31102
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 31105
    $_0$0 = 0; //@line 31106
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31107
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 31109
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 31110
   $_0$1 = 0; //@line 31111
   $_0$0 = 0; //@line 31112
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31113
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 31116
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 31121
     HEAP32[$rem + 4 >> 2] = 0; //@line 31122
    }
    $_0$1 = 0; //@line 31124
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 31125
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31126
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 31130
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 31131
    }
    $_0$1 = 0; //@line 31133
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 31134
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31135
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 31137
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 31140
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 31141
    }
    $_0$1 = 0; //@line 31143
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 31144
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31145
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 31148
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 31150
    $58 = 31 - $51 | 0; //@line 31151
    $sr_1_ph = $57; //@line 31152
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 31153
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 31154
    $q_sroa_0_1_ph = 0; //@line 31155
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 31156
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 31160
    $_0$0 = 0; //@line 31161
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31162
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 31164
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 31165
   $_0$1 = 0; //@line 31166
   $_0$0 = 0; //@line 31167
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31168
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 31172
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 31174
     $126 = 31 - $119 | 0; //@line 31175
     $130 = $119 - 31 >> 31; //@line 31176
     $sr_1_ph = $125; //@line 31177
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 31178
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 31179
     $q_sroa_0_1_ph = 0; //@line 31180
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 31181
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 31185
     $_0$0 = 0; //@line 31186
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31187
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 31189
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 31190
    $_0$1 = 0; //@line 31191
    $_0$0 = 0; //@line 31192
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31193
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 31195
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 31198
    $89 = 64 - $88 | 0; //@line 31199
    $91 = 32 - $88 | 0; //@line 31200
    $92 = $91 >> 31; //@line 31201
    $95 = $88 - 32 | 0; //@line 31202
    $105 = $95 >> 31; //@line 31203
    $sr_1_ph = $88; //@line 31204
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 31205
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 31206
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 31207
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 31208
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 31212
    HEAP32[$rem + 4 >> 2] = 0; //@line 31213
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 31216
    $_0$0 = $a$0 | 0 | 0; //@line 31217
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31218
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 31220
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 31221
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 31222
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31223
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 31228
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 31229
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 31230
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 31231
  $carry_0_lcssa$1 = 0; //@line 31232
  $carry_0_lcssa$0 = 0; //@line 31233
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 31235
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 31236
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 31237
  $137$1 = tempRet0; //@line 31238
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 31239
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 31240
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 31241
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 31242
  $sr_1202 = $sr_1_ph; //@line 31243
  $carry_0203 = 0; //@line 31244
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 31246
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 31247
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 31248
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 31249
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 31250
   $150$1 = tempRet0; //@line 31251
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 31252
   $carry_0203 = $151$0 & 1; //@line 31253
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 31255
   $r_sroa_1_1200 = tempRet0; //@line 31256
   $sr_1202 = $sr_1202 - 1 | 0; //@line 31257
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 31269
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 31270
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 31271
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 31272
  $carry_0_lcssa$1 = 0; //@line 31273
  $carry_0_lcssa$0 = $carry_0203; //@line 31274
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 31276
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 31277
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 31280
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 31281
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 31283
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 31284
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31285
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17160
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 17166
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 17175
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 17180
      $19 = $1 + 44 | 0; //@line 17181
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 17190
      $26 = $1 + 52 | 0; //@line 17191
      $27 = $1 + 53 | 0; //@line 17192
      $28 = $1 + 54 | 0; //@line 17193
      $29 = $0 + 8 | 0; //@line 17194
      $30 = $1 + 24 | 0; //@line 17195
      $$081$off0 = 0; //@line 17196
      $$084 = $0 + 16 | 0; //@line 17196
      $$085$off0 = 0; //@line 17196
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 17200
        label = 20; //@line 17201
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 17204
       HEAP8[$27 >> 0] = 0; //@line 17205
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17206
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 17207
       if (___async) {
        label = 12; //@line 17210
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 17213
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 17217
        label = 20; //@line 17218
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 17225
         $$186$off0 = $$085$off0; //@line 17225
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 17234
           label = 20; //@line 17235
           break L10;
          } else {
           $$182$off0 = 1; //@line 17238
           $$186$off0 = $$085$off0; //@line 17238
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 17245
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 17252
          break L10;
         } else {
          $$182$off0 = 1; //@line 17255
          $$186$off0 = 1; //@line 17255
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 17260
       $$084 = $$084 + 8 | 0; //@line 17260
       $$085$off0 = $$186$off0; //@line 17260
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 685; //@line 17263
       HEAP32[$AsyncCtx15 + 4 >> 2] = $25; //@line 17265
       HEAP32[$AsyncCtx15 + 8 >> 2] = $26; //@line 17267
       HEAP32[$AsyncCtx15 + 12 >> 2] = $27; //@line 17269
       HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 17271
       HEAP32[$AsyncCtx15 + 20 >> 2] = $2; //@line 17273
       HEAP8[$AsyncCtx15 + 24 >> 0] = $4 & 1; //@line 17276
       HEAP32[$AsyncCtx15 + 28 >> 2] = $28; //@line 17278
       HEAP32[$AsyncCtx15 + 32 >> 2] = $30; //@line 17280
       HEAP32[$AsyncCtx15 + 36 >> 2] = $29; //@line 17282
       HEAP8[$AsyncCtx15 + 40 >> 0] = $$081$off0 & 1; //@line 17285
       HEAP8[$AsyncCtx15 + 41 >> 0] = $$085$off0 & 1; //@line 17288
       HEAP32[$AsyncCtx15 + 44 >> 2] = $13; //@line 17290
       HEAP32[$AsyncCtx15 + 48 >> 2] = $$084; //@line 17292
       HEAP32[$AsyncCtx15 + 52 >> 2] = $19; //@line 17294
       sp = STACKTOP; //@line 17295
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 17301
         $61 = $1 + 40 | 0; //@line 17302
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 17305
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 17313
           if ($$283$off0) {
            label = 25; //@line 17315
            break;
           } else {
            $69 = 4; //@line 17318
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 17325
        } else {
         $69 = 4; //@line 17327
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 17332
      }
      HEAP32[$19 >> 2] = $69; //@line 17334
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 17343
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 17348
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 17349
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17350
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 17351
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 686; //@line 17354
    HEAP32[$AsyncCtx11 + 4 >> 2] = $73; //@line 17356
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 17358
    HEAP32[$AsyncCtx11 + 12 >> 2] = $72; //@line 17360
    HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 17362
    HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 17364
    HEAP32[$AsyncCtx11 + 24 >> 2] = $3; //@line 17366
    HEAP8[$AsyncCtx11 + 28 >> 0] = $4 & 1; //@line 17369
    sp = STACKTOP; //@line 17370
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17373
   $81 = $0 + 24 | 0; //@line 17374
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 17378
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 17382
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 17389
       $$2 = $81; //@line 17390
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 17402
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 17403
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 17408
        $136 = $$2 + 8 | 0; //@line 17409
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 17412
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 689; //@line 17417
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 17419
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 17421
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 17423
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 17425
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 17427
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 17429
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 17431
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 17434
       sp = STACKTOP; //@line 17435
       return;
      }
      $104 = $1 + 24 | 0; //@line 17438
      $105 = $1 + 54 | 0; //@line 17439
      $$1 = $81; //@line 17440
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17456
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 17457
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17462
       $122 = $$1 + 8 | 0; //@line 17463
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 17466
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 688; //@line 17471
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 17473
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 17475
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 17477
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 17479
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 17481
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 17483
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 17485
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 17487
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 17490
      sp = STACKTOP; //@line 17491
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 17495
    $$0 = $81; //@line 17496
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17503
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 17504
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17509
     $100 = $$0 + 8 | 0; //@line 17510
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 17513
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 687; //@line 17518
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 17520
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 17522
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 17524
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 17526
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 17528
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 17530
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 17533
    sp = STACKTOP; //@line 17534
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25548
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25550
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25552
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25554
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25556
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25558
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25560
 $$pre = HEAP32[$10 >> 2] | 0; //@line 25561
 if ($$pre | 0) {
  $15 = HEAP32[$$pre + 4 >> 2] | 0; //@line 25565
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 25566
  FUNCTION_TABLE_vii[$15 & 15]($8, $4); //@line 25567
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 339; //@line 25570
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 25571
   HEAP32[$16 >> 2] = $2; //@line 25572
   $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 25573
   HEAP32[$17 >> 2] = $4; //@line 25574
   $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 25575
   HEAP32[$18 >> 2] = $6; //@line 25576
   $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 25577
   HEAP32[$19 >> 2] = $10; //@line 25578
   $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 25579
   HEAP32[$20 >> 2] = $12; //@line 25580
   sp = STACKTOP; //@line 25581
   return;
  }
  ___async_unwind = 0; //@line 25584
  HEAP32[$ReallocAsyncCtx2 >> 2] = 339; //@line 25585
  $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 25586
  HEAP32[$16 >> 2] = $2; //@line 25587
  $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 25588
  HEAP32[$17 >> 2] = $4; //@line 25589
  $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 25590
  HEAP32[$18 >> 2] = $6; //@line 25591
  $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 25592
  HEAP32[$19 >> 2] = $10; //@line 25593
  $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 25594
  HEAP32[$20 >> 2] = $12; //@line 25595
  sp = STACKTOP; //@line 25596
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 25599
 $21 = $4 + 16 | 0; //@line 25600
 $22 = $4 + 28 | 0; //@line 25601
 $23 = HEAP32[$22 >> 2] | 0; //@line 25602
 if ($23 | 0) {
  $25 = $2 + 2516 | 0; //@line 25605
  if (($25 | 0) != ($21 | 0)) {
   $27 = $2 + 2528 | 0; //@line 25608
   $28 = HEAP32[$27 >> 2] | 0; //@line 25609
   if (!$28) {
    $40 = HEAP32[$23 + 4 >> 2] | 0; //@line 25613
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 25614
    FUNCTION_TABLE_vii[$40 & 15]($25, $21); //@line 25615
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 341; //@line 25618
     $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 25619
     HEAP32[$41 >> 2] = $22; //@line 25620
     $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 25621
     HEAP32[$42 >> 2] = $12; //@line 25622
     $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 25623
     HEAP32[$43 >> 2] = $2; //@line 25624
     $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 25625
     HEAP32[$44 >> 2] = $27; //@line 25626
     $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 25627
     HEAP32[$45 >> 2] = $4; //@line 25628
     sp = STACKTOP; //@line 25629
     return;
    }
    ___async_unwind = 0; //@line 25632
    HEAP32[$ReallocAsyncCtx4 >> 2] = 341; //@line 25633
    $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 25634
    HEAP32[$41 >> 2] = $22; //@line 25635
    $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 25636
    HEAP32[$42 >> 2] = $12; //@line 25637
    $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 25638
    HEAP32[$43 >> 2] = $2; //@line 25639
    $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 25640
    HEAP32[$44 >> 2] = $27; //@line 25641
    $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 25642
    HEAP32[$45 >> 2] = $4; //@line 25643
    sp = STACKTOP; //@line 25644
    return;
   } else {
    $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 25648
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 25649
    FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 25650
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 340; //@line 25653
     $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 25654
     HEAP32[$32 >> 2] = $22; //@line 25655
     $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 25656
     HEAP32[$33 >> 2] = $12; //@line 25657
     $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 25658
     HEAP32[$34 >> 2] = $2; //@line 25659
     $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 25660
     HEAP32[$35 >> 2] = $27; //@line 25661
     $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 25662
     HEAP32[$36 >> 2] = $25; //@line 25663
     $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 25664
     HEAP32[$37 >> 2] = $21; //@line 25665
     $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 25666
     HEAP32[$38 >> 2] = $4; //@line 25667
     sp = STACKTOP; //@line 25668
     return;
    }
    ___async_unwind = 0; //@line 25671
    HEAP32[$ReallocAsyncCtx3 >> 2] = 340; //@line 25672
    $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 25673
    HEAP32[$32 >> 2] = $22; //@line 25674
    $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 25675
    HEAP32[$33 >> 2] = $12; //@line 25676
    $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 25677
    HEAP32[$34 >> 2] = $2; //@line 25678
    $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 25679
    HEAP32[$35 >> 2] = $27; //@line 25680
    $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 25681
    HEAP32[$36 >> 2] = $25; //@line 25682
    $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 25683
    HEAP32[$37 >> 2] = $21; //@line 25684
    $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 25685
    HEAP32[$38 >> 2] = $4; //@line 25686
    sp = STACKTOP; //@line 25687
    return;
   }
  }
 }
 $46 = $4 + 32 | 0; //@line 25692
 $47 = $4 + 44 | 0; //@line 25693
 $48 = HEAP32[$47 >> 2] | 0; //@line 25694
 if (!$48) {
  HEAP32[___async_retval >> 2] = 0; //@line 25698
  return;
 }
 $50 = $2 + 2532 | 0; //@line 25701
 if (($50 | 0) == ($46 | 0)) {
  $71 = HEAP32[$48 + 4 >> 2] | 0; //@line 25705
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 25706
  FUNCTION_TABLE_vii[$71 & 15]($12, $46); //@line 25707
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 25710
   $72 = $ReallocAsyncCtx7 + 4 | 0; //@line 25711
   HEAP32[$72 >> 2] = $47; //@line 25712
   $73 = $ReallocAsyncCtx7 + 8 | 0; //@line 25713
   HEAP32[$73 >> 2] = $2; //@line 25714
   $74 = $ReallocAsyncCtx7 + 12 | 0; //@line 25715
   HEAP32[$74 >> 2] = $12; //@line 25716
   sp = STACKTOP; //@line 25717
   return;
  }
  ___async_unwind = 0; //@line 25720
  HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 25721
  $72 = $ReallocAsyncCtx7 + 4 | 0; //@line 25722
  HEAP32[$72 >> 2] = $47; //@line 25723
  $73 = $ReallocAsyncCtx7 + 8 | 0; //@line 25724
  HEAP32[$73 >> 2] = $2; //@line 25725
  $74 = $ReallocAsyncCtx7 + 12 | 0; //@line 25726
  HEAP32[$74 >> 2] = $12; //@line 25727
  sp = STACKTOP; //@line 25728
  return;
 }
 $52 = $2 + 2544 | 0; //@line 25731
 $53 = HEAP32[$52 >> 2] | 0; //@line 25732
 if (!$53) {
  $64 = HEAP32[$48 + 4 >> 2] | 0; //@line 25736
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 25737
  FUNCTION_TABLE_vii[$64 & 15]($50, $46); //@line 25738
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 25741
   $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 25742
   HEAP32[$65 >> 2] = $47; //@line 25743
   $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 25744
   HEAP32[$66 >> 2] = $52; //@line 25745
   $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 25746
   HEAP32[$67 >> 2] = $2; //@line 25747
   $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 25748
   HEAP32[$68 >> 2] = $12; //@line 25749
   $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 25750
   HEAP32[$69 >> 2] = $46; //@line 25751
   sp = STACKTOP; //@line 25752
   return;
  }
  ___async_unwind = 0; //@line 25755
  HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 25756
  $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 25757
  HEAP32[$65 >> 2] = $47; //@line 25758
  $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 25759
  HEAP32[$66 >> 2] = $52; //@line 25760
  $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 25761
  HEAP32[$67 >> 2] = $2; //@line 25762
  $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 25763
  HEAP32[$68 >> 2] = $12; //@line 25764
  $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 25765
  HEAP32[$69 >> 2] = $46; //@line 25766
  sp = STACKTOP; //@line 25767
  return;
 } else {
  $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 25771
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 25772
  FUNCTION_TABLE_vi[$56 & 1023]($50); //@line 25773
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 25776
   $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 25777
   HEAP32[$57 >> 2] = $47; //@line 25778
   $58 = $ReallocAsyncCtx5 + 8 | 0; //@line 25779
   HEAP32[$58 >> 2] = $52; //@line 25780
   $59 = $ReallocAsyncCtx5 + 12 | 0; //@line 25781
   HEAP32[$59 >> 2] = $2; //@line 25782
   $60 = $ReallocAsyncCtx5 + 16 | 0; //@line 25783
   HEAP32[$60 >> 2] = $50; //@line 25784
   $61 = $ReallocAsyncCtx5 + 20 | 0; //@line 25785
   HEAP32[$61 >> 2] = $46; //@line 25786
   $62 = $ReallocAsyncCtx5 + 24 | 0; //@line 25787
   HEAP32[$62 >> 2] = $12; //@line 25788
   sp = STACKTOP; //@line 25789
   return;
  }
  ___async_unwind = 0; //@line 25792
  HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 25793
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 25794
  HEAP32[$57 >> 2] = $47; //@line 25795
  $58 = $ReallocAsyncCtx5 + 8 | 0; //@line 25796
  HEAP32[$58 >> 2] = $52; //@line 25797
  $59 = $ReallocAsyncCtx5 + 12 | 0; //@line 25798
  HEAP32[$59 >> 2] = $2; //@line 25799
  $60 = $ReallocAsyncCtx5 + 16 | 0; //@line 25800
  HEAP32[$60 >> 2] = $50; //@line 25801
  $61 = $ReallocAsyncCtx5 + 20 | 0; //@line 25802
  HEAP32[$61 >> 2] = $46; //@line 25803
  $62 = $ReallocAsyncCtx5 + 24 | 0; //@line 25804
  HEAP32[$62 >> 2] = $12; //@line 25805
  sp = STACKTOP; //@line 25806
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$pr = 0, $$pre = 0, $$pre16 = 0, $$pre17 = 0, $10 = 0, $101 = 0, $104 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $43 = 0, $53 = 0, $54 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $8 = 0, $80 = 0, $81 = 0, $87 = 0, $90 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9762
 STACKTOP = STACKTOP + 16 | 0; //@line 9763
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9763
 $2 = sp; //@line 9764
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 9769
  STACKTOP = sp; //@line 9770
  return $$0 | 0; //@line 9770
 }
 if (!$1) {
  $$0 = -1003; //@line 9774
  STACKTOP = sp; //@line 9775
  return $$0 | 0; //@line 9775
 }
 $7 = $1 + 12 | 0; //@line 9777
 $8 = HEAP32[$7 >> 2] | 0; //@line 9778
 if (!$8) {
  $$0 = -1003; //@line 9781
  STACKTOP = sp; //@line 9782
  return $$0 | 0; //@line 9782
 }
 $10 = $0 + 2500 | 0; //@line 9784
 if (($10 | 0) != ($1 | 0)) {
  $12 = $0 + 2512 | 0; //@line 9787
  $13 = HEAP32[$12 >> 2] | 0; //@line 9788
  do {
   if (!$13) {
    $25 = $8; //@line 9792
    label = 9; //@line 9793
   } else {
    $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 9796
    $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 9797
    FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 9798
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 338; //@line 9801
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9803
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9805
     HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 9807
     HEAP32[$AsyncCtx + 16 >> 2] = $10; //@line 9809
     HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 9811
     HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 9813
     sp = STACKTOP; //@line 9814
     STACKTOP = sp; //@line 9815
     return 0; //@line 9815
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9817
     $$pre = HEAP32[$7 >> 2] | 0; //@line 9818
     if (!$$pre) {
      $32 = 0; //@line 9821
      break;
     } else {
      $25 = $$pre; //@line 9824
      label = 9; //@line 9825
      break;
     }
    }
   }
  } while (0);
  do {
   if ((label | 0) == 9) {
    $26 = HEAP32[$25 + 4 >> 2] | 0; //@line 9834
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9835
    FUNCTION_TABLE_vii[$26 & 15]($10, $1); //@line 9836
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 339; //@line 9839
     HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 9841
     HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9843
     HEAP32[$AsyncCtx2 + 12 >> 2] = $12; //@line 9845
     HEAP32[$AsyncCtx2 + 16 >> 2] = $7; //@line 9847
     HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 9849
     sp = STACKTOP; //@line 9850
     STACKTOP = sp; //@line 9851
     return 0; //@line 9851
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9853
     $32 = HEAP32[$7 >> 2] | 0; //@line 9855
     break;
    }
   }
  } while (0);
  HEAP32[$12 >> 2] = $32; //@line 9860
 }
 $33 = $1 + 16 | 0; //@line 9862
 $34 = $1 + 28 | 0; //@line 9863
 $35 = HEAP32[$34 >> 2] | 0; //@line 9864
 if ($35 | 0) {
  $37 = $0 + 2516 | 0; //@line 9867
  if (($37 | 0) != ($33 | 0)) {
   $39 = $0 + 2528 | 0; //@line 9870
   $40 = HEAP32[$39 >> 2] | 0; //@line 9871
   do {
    if (!$40) {
     $53 = $35; //@line 9875
     label = 19; //@line 9876
    } else {
     $43 = HEAP32[$40 + 8 >> 2] | 0; //@line 9879
     $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9880
     FUNCTION_TABLE_vi[$43 & 1023]($37); //@line 9881
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 340; //@line 9884
      HEAP32[$AsyncCtx5 + 4 >> 2] = $34; //@line 9886
      HEAP32[$AsyncCtx5 + 8 >> 2] = $2; //@line 9888
      HEAP32[$AsyncCtx5 + 12 >> 2] = $0; //@line 9890
      HEAP32[$AsyncCtx5 + 16 >> 2] = $39; //@line 9892
      HEAP32[$AsyncCtx5 + 20 >> 2] = $37; //@line 9894
      HEAP32[$AsyncCtx5 + 24 >> 2] = $33; //@line 9896
      HEAP32[$AsyncCtx5 + 28 >> 2] = $1; //@line 9898
      sp = STACKTOP; //@line 9899
      STACKTOP = sp; //@line 9900
      return 0; //@line 9900
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9902
      $$pre16 = HEAP32[$34 >> 2] | 0; //@line 9903
      if (!$$pre16) {
       $60 = 0; //@line 9906
       break;
      } else {
       $53 = $$pre16; //@line 9909
       label = 19; //@line 9910
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 19) {
     $54 = HEAP32[$53 + 4 >> 2] | 0; //@line 9919
     $AsyncCtx8 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9920
     FUNCTION_TABLE_vii[$54 & 15]($37, $33); //@line 9921
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 341; //@line 9924
      HEAP32[$AsyncCtx8 + 4 >> 2] = $34; //@line 9926
      HEAP32[$AsyncCtx8 + 8 >> 2] = $2; //@line 9928
      HEAP32[$AsyncCtx8 + 12 >> 2] = $0; //@line 9930
      HEAP32[$AsyncCtx8 + 16 >> 2] = $39; //@line 9932
      HEAP32[$AsyncCtx8 + 20 >> 2] = $1; //@line 9934
      sp = STACKTOP; //@line 9935
      STACKTOP = sp; //@line 9936
      return 0; //@line 9936
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9938
      $60 = HEAP32[$34 >> 2] | 0; //@line 9940
      break;
     }
    }
   } while (0);
   HEAP32[$39 >> 2] = $60; //@line 9945
  }
 }
 $61 = $1 + 32 | 0; //@line 9948
 $62 = $1 + 44 | 0; //@line 9949
 $63 = HEAP32[$62 >> 2] | 0; //@line 9950
 if (!$63) {
  $$0 = 0; //@line 9953
  STACKTOP = sp; //@line 9954
  return $$0 | 0; //@line 9954
 }
 $65 = $0 + 2532 | 0; //@line 9956
 if (($65 | 0) == ($61 | 0)) {
  $90 = $63; //@line 9959
  $94 = $0; //@line 9959
  label = 34; //@line 9960
 } else {
  $67 = $0 + 2544 | 0; //@line 9962
  $68 = HEAP32[$67 >> 2] | 0; //@line 9963
  do {
   if (!$68) {
    $80 = $63; //@line 9967
    label = 30; //@line 9968
   } else {
    $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 9971
    $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9972
    FUNCTION_TABLE_vi[$71 & 1023]($65); //@line 9973
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 342; //@line 9976
     HEAP32[$AsyncCtx11 + 4 >> 2] = $62; //@line 9978
     HEAP32[$AsyncCtx11 + 8 >> 2] = $67; //@line 9980
     HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 9982
     HEAP32[$AsyncCtx11 + 16 >> 2] = $65; //@line 9984
     HEAP32[$AsyncCtx11 + 20 >> 2] = $61; //@line 9986
     HEAP32[$AsyncCtx11 + 24 >> 2] = $2; //@line 9988
     sp = STACKTOP; //@line 9989
     STACKTOP = sp; //@line 9990
     return 0; //@line 9990
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9992
     $$pre17 = HEAP32[$62 >> 2] | 0; //@line 9993
     if (!$$pre17) {
      $87 = 0; //@line 9996
      break;
     } else {
      $80 = $$pre17; //@line 9999
      label = 30; //@line 10000
      break;
     }
    }
   }
  } while (0);
  do {
   if ((label | 0) == 30) {
    $81 = HEAP32[$80 + 4 >> 2] | 0; //@line 10009
    $AsyncCtx14 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10010
    FUNCTION_TABLE_vii[$81 & 15]($65, $61); //@line 10011
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 343; //@line 10014
     HEAP32[$AsyncCtx14 + 4 >> 2] = $62; //@line 10016
     HEAP32[$AsyncCtx14 + 8 >> 2] = $67; //@line 10018
     HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 10020
     HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 10022
     HEAP32[$AsyncCtx14 + 20 >> 2] = $61; //@line 10024
     sp = STACKTOP; //@line 10025
     STACKTOP = sp; //@line 10026
     return 0; //@line 10026
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 10028
     $87 = HEAP32[$62 >> 2] | 0; //@line 10030
     break;
    }
   }
  } while (0);
  HEAP32[$67 >> 2] = $87; //@line 10035
  $$pr = HEAP32[$62 >> 2] | 0; //@line 10036
  if (!$$pr) {
   $97 = 0; //@line 10039
   $98 = $0; //@line 10039
  } else {
   $90 = $$pr; //@line 10041
   $94 = $0; //@line 10041
   label = 34; //@line 10042
  }
 }
 do {
  if ((label | 0) == 34) {
   $91 = HEAP32[$90 + 4 >> 2] | 0; //@line 10048
   $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10049
   FUNCTION_TABLE_vii[$91 & 15]($2, $61); //@line 10050
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 344; //@line 10053
    HEAP32[$AsyncCtx17 + 4 >> 2] = $62; //@line 10055
    HEAP32[$AsyncCtx17 + 8 >> 2] = $94; //@line 10057
    HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 10059
    sp = STACKTOP; //@line 10060
    STACKTOP = sp; //@line 10061
    return 0; //@line 10061
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 10063
    $97 = HEAP32[$62 >> 2] | 0; //@line 10065
    $98 = $94; //@line 10065
    break;
   }
  }
 } while (0);
 $96 = $2 + 12 | 0; //@line 10070
 HEAP32[$96 >> 2] = $97; //@line 10071
 $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10072
 __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($98, $2); //@line 10073
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 345; //@line 10076
  HEAP32[$AsyncCtx24 + 4 >> 2] = $96; //@line 10078
  HEAP32[$AsyncCtx24 + 8 >> 2] = $2; //@line 10080
  sp = STACKTOP; //@line 10081
  STACKTOP = sp; //@line 10082
  return 0; //@line 10082
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 10084
 $101 = HEAP32[$96 >> 2] | 0; //@line 10085
 if (!$101) {
  $$0 = 0; //@line 10088
  STACKTOP = sp; //@line 10089
  return $$0 | 0; //@line 10089
 }
 $104 = HEAP32[$101 + 8 >> 2] | 0; //@line 10092
 $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10093
 FUNCTION_TABLE_vi[$104 & 1023]($2); //@line 10094
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 346; //@line 10097
  sp = STACKTOP; //@line 10098
  STACKTOP = sp; //@line 10099
  return 0; //@line 10099
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 10101
 $$0 = 0; //@line 10102
 STACKTOP = sp; //@line 10103
 return $$0 | 0; //@line 10103
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22404
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22406
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22408
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22410
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22412
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22414
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22416
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22418
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22420
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22422
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22424
 $$pre = HEAP32[$4 >> 2] | 0; //@line 22425
 if ($$pre | 0) {
  $23 = HEAP32[$$pre + 4 >> 2] | 0; //@line 22429
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 22430
  FUNCTION_TABLE_vii[$23 & 15]($16, $12); //@line 22431
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 168; //@line 22434
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 22435
   HEAP32[$24 >> 2] = $2; //@line 22436
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 22437
   HEAP32[$25 >> 2] = $6; //@line 22438
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 22439
   HEAP32[$26 >> 2] = $8; //@line 22440
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 22441
   HEAP32[$27 >> 2] = $12; //@line 22442
   $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 22443
   HEAP32[$28 >> 2] = $14; //@line 22444
   $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 22445
   HEAP32[$29 >> 2] = $16; //@line 22446
   $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 22447
   HEAP32[$30 >> 2] = $18; //@line 22448
   $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 22449
   HEAP32[$31 >> 2] = $4; //@line 22450
   $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 22451
   HEAP32[$32 >> 2] = $10; //@line 22452
   $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 22453
   HEAP32[$33 >> 2] = $20; //@line 22454
   sp = STACKTOP; //@line 22455
   return;
  }
  ___async_unwind = 0; //@line 22458
  HEAP32[$ReallocAsyncCtx2 >> 2] = 168; //@line 22459
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 22460
  HEAP32[$24 >> 2] = $2; //@line 22461
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 22462
  HEAP32[$25 >> 2] = $6; //@line 22463
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 22464
  HEAP32[$26 >> 2] = $8; //@line 22465
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 22466
  HEAP32[$27 >> 2] = $12; //@line 22467
  $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 22468
  HEAP32[$28 >> 2] = $14; //@line 22469
  $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 22470
  HEAP32[$29 >> 2] = $16; //@line 22471
  $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 22472
  HEAP32[$30 >> 2] = $18; //@line 22473
  $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 22474
  HEAP32[$31 >> 2] = $4; //@line 22475
  $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 22476
  HEAP32[$32 >> 2] = $10; //@line 22477
  $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 22478
  HEAP32[$33 >> 2] = $20; //@line 22479
  sp = STACKTOP; //@line 22480
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 22483
 $34 = $14 + 12 | 0; //@line 22484
 HEAP32[$14 >> 2] = 6; //@line 22485
 HEAP32[$14 + 4 >> 2] = 0; //@line 22487
 HEAP32[$14 + 8 >> 2] = $2; //@line 22489
 HEAP32[$34 >> 2] = 836; //@line 22490
 $35 = $2 + 2416 | 0; //@line 22491
 if (($35 | 0) == ($14 | 0)) {
  $64 = HEAP32[211] | 0; //@line 22495
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 22496
  FUNCTION_TABLE_vi[$64 & 1023]($14); //@line 22497
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 22500
   $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 22501
   HEAP32[$65 >> 2] = $14; //@line 22502
   $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 22503
   HEAP32[$66 >> 2] = $6; //@line 22504
   $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 22505
   HEAP32[$67 >> 2] = $2; //@line 22506
   $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 22507
   HEAP32[$68 >> 2] = $8; //@line 22508
   $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 22509
   HEAP32[$69 >> 2] = $16; //@line 22510
   $70 = $ReallocAsyncCtx6 + 24 | 0; //@line 22511
   HEAP32[$70 >> 2] = $18; //@line 22512
   $71 = $ReallocAsyncCtx6 + 28 | 0; //@line 22513
   HEAP32[$71 >> 2] = $20; //@line 22514
   sp = STACKTOP; //@line 22515
   return;
  }
  ___async_unwind = 0; //@line 22518
  HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 22519
  $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 22520
  HEAP32[$65 >> 2] = $14; //@line 22521
  $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 22522
  HEAP32[$66 >> 2] = $6; //@line 22523
  $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 22524
  HEAP32[$67 >> 2] = $2; //@line 22525
  $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 22526
  HEAP32[$68 >> 2] = $8; //@line 22527
  $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 22528
  HEAP32[$69 >> 2] = $16; //@line 22529
  $70 = $ReallocAsyncCtx6 + 24 | 0; //@line 22530
  HEAP32[$70 >> 2] = $18; //@line 22531
  $71 = $ReallocAsyncCtx6 + 28 | 0; //@line 22532
  HEAP32[$71 >> 2] = $20; //@line 22533
  sp = STACKTOP; //@line 22534
  return;
 }
 $37 = $2 + 2428 | 0; //@line 22537
 $38 = HEAP32[$37 >> 2] | 0; //@line 22538
 if (!$38) {
  $53 = HEAP32[210] | 0; //@line 22542
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 22543
  FUNCTION_TABLE_vii[$53 & 15]($35, $14); //@line 22544
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 22547
   $54 = $ReallocAsyncCtx5 + 4 | 0; //@line 22548
   HEAP32[$54 >> 2] = $14; //@line 22549
   $55 = $ReallocAsyncCtx5 + 8 | 0; //@line 22550
   HEAP32[$55 >> 2] = $6; //@line 22551
   $56 = $ReallocAsyncCtx5 + 12 | 0; //@line 22552
   HEAP32[$56 >> 2] = $2; //@line 22553
   $57 = $ReallocAsyncCtx5 + 16 | 0; //@line 22554
   HEAP32[$57 >> 2] = $8; //@line 22555
   $58 = $ReallocAsyncCtx5 + 20 | 0; //@line 22556
   HEAP32[$58 >> 2] = $16; //@line 22557
   $59 = $ReallocAsyncCtx5 + 24 | 0; //@line 22558
   HEAP32[$59 >> 2] = $18; //@line 22559
   $60 = $ReallocAsyncCtx5 + 28 | 0; //@line 22560
   HEAP32[$60 >> 2] = $34; //@line 22561
   $61 = $ReallocAsyncCtx5 + 32 | 0; //@line 22562
   HEAP32[$61 >> 2] = $37; //@line 22563
   $62 = $ReallocAsyncCtx5 + 36 | 0; //@line 22564
   HEAP32[$62 >> 2] = $20; //@line 22565
   sp = STACKTOP; //@line 22566
   return;
  }
  ___async_unwind = 0; //@line 22569
  HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 22570
  $54 = $ReallocAsyncCtx5 + 4 | 0; //@line 22571
  HEAP32[$54 >> 2] = $14; //@line 22572
  $55 = $ReallocAsyncCtx5 + 8 | 0; //@line 22573
  HEAP32[$55 >> 2] = $6; //@line 22574
  $56 = $ReallocAsyncCtx5 + 12 | 0; //@line 22575
  HEAP32[$56 >> 2] = $2; //@line 22576
  $57 = $ReallocAsyncCtx5 + 16 | 0; //@line 22577
  HEAP32[$57 >> 2] = $8; //@line 22578
  $58 = $ReallocAsyncCtx5 + 20 | 0; //@line 22579
  HEAP32[$58 >> 2] = $16; //@line 22580
  $59 = $ReallocAsyncCtx5 + 24 | 0; //@line 22581
  HEAP32[$59 >> 2] = $18; //@line 22582
  $60 = $ReallocAsyncCtx5 + 28 | 0; //@line 22583
  HEAP32[$60 >> 2] = $34; //@line 22584
  $61 = $ReallocAsyncCtx5 + 32 | 0; //@line 22585
  HEAP32[$61 >> 2] = $37; //@line 22586
  $62 = $ReallocAsyncCtx5 + 36 | 0; //@line 22587
  HEAP32[$62 >> 2] = $20; //@line 22588
  sp = STACKTOP; //@line 22589
  return;
 } else {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 22593
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 22594
  FUNCTION_TABLE_vi[$41 & 1023]($35); //@line 22595
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 22598
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 22599
   HEAP32[$42 >> 2] = $37; //@line 22600
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 22601
   HEAP32[$43 >> 2] = $14; //@line 22602
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 22603
   HEAP32[$44 >> 2] = $6; //@line 22604
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 22605
   HEAP32[$45 >> 2] = $2; //@line 22606
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 22607
   HEAP32[$46 >> 2] = $8; //@line 22608
   $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 22609
   HEAP32[$47 >> 2] = $35; //@line 22610
   $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 22611
   HEAP32[$48 >> 2] = $34; //@line 22612
   $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 22613
   HEAP32[$49 >> 2] = $16; //@line 22614
   $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 22615
   HEAP32[$50 >> 2] = $18; //@line 22616
   $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 22617
   HEAP32[$51 >> 2] = $20; //@line 22618
   sp = STACKTOP; //@line 22619
   return;
  }
  ___async_unwind = 0; //@line 22622
  HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 22623
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 22624
  HEAP32[$42 >> 2] = $37; //@line 22625
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 22626
  HEAP32[$43 >> 2] = $14; //@line 22627
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 22628
  HEAP32[$44 >> 2] = $6; //@line 22629
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 22630
  HEAP32[$45 >> 2] = $2; //@line 22631
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 22632
  HEAP32[$46 >> 2] = $8; //@line 22633
  $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 22634
  HEAP32[$47 >> 2] = $35; //@line 22635
  $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 22636
  HEAP32[$48 >> 2] = $34; //@line 22637
  $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 22638
  HEAP32[$49 >> 2] = $16; //@line 22639
  $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 22640
  HEAP32[$50 >> 2] = $18; //@line 22641
  $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 22642
  HEAP32[$51 >> 2] = $20; //@line 22643
  sp = STACKTOP; //@line 22644
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $106 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $79 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1956
 HEAP32[$0 >> 2] = 496; //@line 1957
 $19 = $0 + 4 | 0; //@line 1958
 HEAP32[$19 >> 2] = 0; //@line 1959
 HEAP32[$19 + 4 >> 2] = 0; //@line 1959
 HEAP32[$19 + 8 >> 2] = 0; //@line 1959
 HEAP32[$19 + 12 >> 2] = 0; //@line 1959
 HEAP32[$19 + 16 >> 2] = 0; //@line 1959
 HEAP32[$19 + 20 >> 2] = 0; //@line 1959
 _gpio_init_out_ex($19, $4, 1); //@line 1960
 $20 = $0 + 28 | 0; //@line 1961
 HEAP32[$20 >> 2] = 0; //@line 1962
 HEAP32[$20 + 4 >> 2] = 0; //@line 1962
 HEAP32[$20 + 8 >> 2] = 0; //@line 1962
 HEAP32[$20 + 12 >> 2] = 0; //@line 1962
 HEAP32[$20 + 16 >> 2] = 0; //@line 1962
 HEAP32[$20 + 20 >> 2] = 0; //@line 1962
 _gpio_init_in($20, $5); //@line 1963
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 1965
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 1967
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 1969
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 1971
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 1973
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 1975
 $27 = $0 + 484 | 0; //@line 1976
 HEAP32[$27 >> 2] = 0; //@line 1977
 HEAP32[$27 + 4 >> 2] = 0; //@line 1977
 HEAP32[$27 + 8 >> 2] = 0; //@line 1977
 HEAP32[$27 + 12 >> 2] = 0; //@line 1977
 HEAP32[$27 + 16 >> 2] = 0; //@line 1977
 HEAP32[$27 + 20 >> 2] = 0; //@line 1977
 _gpio_init_out_ex($27, $12, 0); //@line 1978
 $28 = $0 + 508 | 0; //@line 1979
 HEAP32[$28 >> 2] = 0; //@line 1980
 HEAP32[$28 + 4 >> 2] = 0; //@line 1980
 HEAP32[$28 + 8 >> 2] = 0; //@line 1980
 HEAP32[$28 + 12 >> 2] = 0; //@line 1980
 HEAP32[$28 + 16 >> 2] = 0; //@line 1980
 HEAP32[$28 + 20 >> 2] = 0; //@line 1980
 _gpio_init_out_ex($28, $13, 0); //@line 1981
 $29 = $0 + 532 | 0; //@line 1982
 HEAP32[$29 >> 2] = 0; //@line 1983
 HEAP32[$29 + 4 >> 2] = 0; //@line 1983
 HEAP32[$29 + 8 >> 2] = 0; //@line 1983
 HEAP32[$29 + 12 >> 2] = 0; //@line 1983
 HEAP32[$29 + 16 >> 2] = 0; //@line 1983
 HEAP32[$29 + 20 >> 2] = 0; //@line 1983
 _gpio_init_out_ex($29, $14, 0); //@line 1984
 $30 = $0 + 556 | 0; //@line 1985
 HEAP32[$30 >> 2] = 0; //@line 1986
 HEAP32[$30 + 4 >> 2] = 0; //@line 1986
 HEAP32[$30 + 8 >> 2] = 0; //@line 1986
 HEAP32[$30 + 12 >> 2] = 0; //@line 1986
 HEAP32[$30 + 16 >> 2] = 0; //@line 1986
 HEAP32[$30 + 20 >> 2] = 0; //@line 1986
 _gpio_init_out_ex($30, $15, 0); //@line 1987
 $31 = $0 + 580 | 0; //@line 1988
 HEAP32[$31 >> 2] = 0; //@line 1989
 HEAP32[$31 + 4 >> 2] = 0; //@line 1989
 HEAP32[$31 + 8 >> 2] = 0; //@line 1989
 HEAP32[$31 + 12 >> 2] = 0; //@line 1989
 HEAP32[$31 + 16 >> 2] = 0; //@line 1989
 HEAP32[$31 + 20 >> 2] = 0; //@line 1989
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 1990
 $32 = $0 + 604 | 0; //@line 1991
 HEAP32[$32 >> 2] = 0; //@line 1992
 HEAP32[$32 + 4 >> 2] = 0; //@line 1992
 HEAP32[$32 + 8 >> 2] = 0; //@line 1992
 HEAP32[$32 + 12 >> 2] = 0; //@line 1992
 HEAP32[$32 + 16 >> 2] = 0; //@line 1992
 HEAP32[$32 + 20 >> 2] = 0; //@line 1992
 _gpio_init_out($32, $17); //@line 1993
 $33 = $0 + 628 | 0; //@line 1994
 HEAP32[$33 >> 2] = 0; //@line 1995
 HEAP32[$33 + 4 >> 2] = 0; //@line 1995
 HEAP32[$33 + 8 >> 2] = 0; //@line 1995
 HEAP32[$33 + 12 >> 2] = 0; //@line 1995
 HEAP32[$33 + 16 >> 2] = 0; //@line 1995
 HEAP32[$33 + 20 >> 2] = 0; //@line 1995
 _gpio_init_out($33, $18); //@line 1996
 $34 = $0 + 1048 | 0; //@line 1997
 $AsyncCtx11 = _emscripten_alloc_async_context(52, sp) | 0; //@line 1998
 __ZN4mbed10TimerEventC2Ev($34); //@line 1999
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 94; //@line 2002
  HEAP32[$AsyncCtx11 + 4 >> 2] = $34; //@line 2004
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2006
  HEAP32[$AsyncCtx11 + 12 >> 2] = $16; //@line 2008
  HEAP32[$AsyncCtx11 + 16 >> 2] = $17; //@line 2010
  HEAP32[$AsyncCtx11 + 20 >> 2] = $12; //@line 2012
  HEAP32[$AsyncCtx11 + 24 >> 2] = $13; //@line 2014
  HEAP32[$AsyncCtx11 + 28 >> 2] = $15; //@line 2016
  HEAP32[$AsyncCtx11 + 32 >> 2] = $14; //@line 2018
  HEAP32[$AsyncCtx11 + 36 >> 2] = $18; //@line 2020
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 2022
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 2024
  HEAP32[$AsyncCtx11 + 48 >> 2] = $33; //@line 2026
  sp = STACKTOP; //@line 2027
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2030
 $47 = $0 + 1088 | 0; //@line 2031
 HEAP32[$47 >> 2] = 0; //@line 2032
 HEAP32[$47 + 4 >> 2] = 0; //@line 2032
 HEAP32[$47 + 8 >> 2] = 0; //@line 2032
 HEAP32[$47 + 12 >> 2] = 0; //@line 2032
 HEAP8[$0 + 1104 >> 0] = 1; //@line 2034
 HEAP32[$34 >> 2] = 620; //@line 2035
 $49 = $0 + 1112 | 0; //@line 2036
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2037
 __ZN4mbed10TimerEventC2Ev($49); //@line 2038
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 95; //@line 2041
  HEAP32[$AsyncCtx7 + 4 >> 2] = $49; //@line 2043
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 2045
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 2047
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 2049
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 2051
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 2053
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 2055
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 2057
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 2059
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 2061
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 2063
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 2065
  sp = STACKTOP; //@line 2066
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2069
 $62 = $0 + 1152 | 0; //@line 2070
 HEAP32[$62 >> 2] = 0; //@line 2071
 HEAP32[$62 + 4 >> 2] = 0; //@line 2071
 HEAP32[$62 + 8 >> 2] = 0; //@line 2071
 HEAP32[$62 + 12 >> 2] = 0; //@line 2071
 HEAP8[$0 + 1168 >> 0] = 1; //@line 2073
 HEAP32[$49 >> 2] = 620; //@line 2074
 $64 = $0 + 1176 | 0; //@line 2075
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2076
 __ZN4mbed10TimerEventC2Ev($64); //@line 2077
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 96; //@line 2080
  HEAP32[$AsyncCtx3 + 4 >> 2] = $64; //@line 2082
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 2084
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 2086
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 2088
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 2090
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 2092
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 2094
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 2096
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 2098
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 2100
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 2102
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 2104
  sp = STACKTOP; //@line 2105
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2108
 $77 = $0 + 1216 | 0; //@line 2109
 HEAP32[$77 >> 2] = 0; //@line 2110
 HEAP32[$77 + 4 >> 2] = 0; //@line 2110
 HEAP32[$77 + 8 >> 2] = 0; //@line 2110
 HEAP32[$77 + 12 >> 2] = 0; //@line 2110
 HEAP8[$0 + 1232 >> 0] = 1; //@line 2112
 HEAP32[$64 >> 2] = 620; //@line 2113
 $79 = $0 + 1240 | 0; //@line 2114
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 2115
 __ZN4mbed10TimerEventC2Ev($79); //@line 2116
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 97; //@line 2119
  HEAP32[$AsyncCtx + 4 >> 2] = $79; //@line 2121
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2123
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 2125
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 2127
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 2129
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 2131
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 2133
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 2135
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 2137
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 2139
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 2141
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 2143
  sp = STACKTOP; //@line 2144
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2147
 $92 = $0 + 1280 | 0; //@line 2148
 HEAP32[$92 >> 2] = 0; //@line 2149
 HEAP32[$92 + 4 >> 2] = 0; //@line 2149
 HEAP32[$92 + 8 >> 2] = 0; //@line 2149
 HEAP32[$92 + 12 >> 2] = 0; //@line 2149
 HEAP8[$0 + 1296 >> 0] = 1; //@line 2151
 HEAP32[$79 >> 2] = 620; //@line 2152
 HEAP32[$0 + 668 >> 2] = $16; //@line 2154
 HEAP32[$0 + 672 >> 2] = $17; //@line 2156
 HEAP32[$0 + 652 >> 2] = $12; //@line 2158
 HEAP32[$0 + 656 >> 2] = $13; //@line 2160
 HEAP32[$0 + 664 >> 2] = $15; //@line 2162
 HEAP32[$0 + 660 >> 2] = $14; //@line 2164
 HEAP32[$0 + 676 >> 2] = $18; //@line 2166
 HEAP32[$0 + 680 >> 2] = $10; //@line 2168
 HEAP32[$0 + 684 >> 2] = $11; //@line 2170
 HEAP32[$0 + 788 >> 2] = 0; //@line 2172
 if (($18 | 0) == -1) {
  $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 2175
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 2179
 $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 2180
 return;
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 2148
 STACKTOP = STACKTOP + 16 | 0; //@line 2149
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2149
 $6 = sp; //@line 2150
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 2154
  STACKTOP = sp; //@line 2155
  return $$044 | 0; //@line 2155
 }
 $10 = ($2 | 0) == 0; //@line 2158
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 2161
   STACKTOP = sp; //@line 2162
   return $$044 | 0; //@line 2162
  }
  $109 = $3 + 1 | 0; //@line 2164
  $110 = $3 + 2 | 0; //@line 2165
  $111 = $3 + 3 | 0; //@line 2166
  $112 = $3 + 4 | 0; //@line 2167
  $113 = $3 + 5 | 0; //@line 2168
  $114 = $3 + 6 | 0; //@line 2169
  $115 = $3 + 7 | 0; //@line 2170
  $116 = $3 + 8 | 0; //@line 2171
  $117 = $3 + 9 | 0; //@line 2172
  $118 = $3 + 10 | 0; //@line 2173
  $119 = $3 + 11 | 0; //@line 2174
  $120 = $3 + 12 | 0; //@line 2175
  $121 = $3 + 13 | 0; //@line 2176
  $122 = $3 + 14 | 0; //@line 2177
  $123 = $3 + 15 | 0; //@line 2178
  $$04056 = $5; //@line 2179
  $$04255 = $4; //@line 2179
  $$04554 = $2; //@line 2179
  while (1) {
   dest = $6; //@line 2181
   src = $$04255; //@line 2181
   stop = dest + 16 | 0; //@line 2181
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2181
    dest = dest + 1 | 0; //@line 2181
    src = src + 1 | 0; //@line 2181
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 2182
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 2186
   $127 = $$04056 + 1 | 0; //@line 2187
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 2191
   $131 = $$04056 + 2 | 0; //@line 2192
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 2196
   $135 = $$04056 + 3 | 0; //@line 2197
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 2201
   $139 = $$04056 + 4 | 0; //@line 2202
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 2206
   $143 = $$04056 + 5 | 0; //@line 2207
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 2211
   $147 = $$04056 + 6 | 0; //@line 2212
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 2216
   $151 = $$04056 + 7 | 0; //@line 2217
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 2221
   $155 = $$04056 + 8 | 0; //@line 2222
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 2226
   $159 = $$04056 + 9 | 0; //@line 2227
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 2231
   $163 = $$04056 + 10 | 0; //@line 2232
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 2236
   $167 = $$04056 + 11 | 0; //@line 2237
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 2241
   $171 = $$04056 + 12 | 0; //@line 2242
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 2246
   $175 = $$04056 + 13 | 0; //@line 2247
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 2251
   $179 = $$04056 + 14 | 0; //@line 2252
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 2256
   $183 = $$04056 + 15 | 0; //@line 2257
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 2261
   dest = $3; //@line 2262
   src = $6; //@line 2262
   stop = dest + 16 | 0; //@line 2262
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2262
    dest = dest + 1 | 0; //@line 2262
    src = src + 1 | 0; //@line 2262
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 2265
   if (!$$04554) {
    $$044 = 0; //@line 2268
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 2271
    $$04255 = $$04255 + 16 | 0; //@line 2271
   }
  }
  STACKTOP = sp; //@line 2274
  return $$044 | 0; //@line 2274
 }
 if ($10) {
  $$044 = 0; //@line 2277
  STACKTOP = sp; //@line 2278
  return $$044 | 0; //@line 2278
 }
 $12 = $3 + 1 | 0; //@line 2281
 $13 = $3 + 2 | 0; //@line 2282
 $14 = $3 + 3 | 0; //@line 2283
 $15 = $3 + 4 | 0; //@line 2284
 $16 = $3 + 5 | 0; //@line 2285
 $17 = $3 + 6 | 0; //@line 2286
 $18 = $3 + 7 | 0; //@line 2287
 $19 = $3 + 8 | 0; //@line 2288
 $20 = $3 + 9 | 0; //@line 2289
 $21 = $3 + 10 | 0; //@line 2290
 $22 = $3 + 11 | 0; //@line 2291
 $23 = $3 + 12 | 0; //@line 2292
 $24 = $3 + 13 | 0; //@line 2293
 $25 = $3 + 14 | 0; //@line 2294
 $26 = $3 + 15 | 0; //@line 2295
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 2297
  $$14359$us = $4; //@line 2297
  $$14658$us = $2; //@line 2297
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 2302
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 2308
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 2314
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 2320
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 2326
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 2332
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 2338
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 2344
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 2350
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 2356
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 2362
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 2368
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 2374
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 2380
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 2386
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 2392
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 2393
   dest = $3; //@line 2394
   src = $$14160$us; //@line 2394
   stop = dest + 16 | 0; //@line 2394
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2394
    dest = dest + 1 | 0; //@line 2394
    src = src + 1 | 0; //@line 2394
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 2397
   if (!$$14658$us) {
    $$044 = 0; //@line 2400
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 2403
    $$14359$us = $$14359$us + 16 | 0; //@line 2403
   }
  }
  STACKTOP = sp; //@line 2406
  return $$044 | 0; //@line 2406
 } else {
  $$14160 = $5; //@line 2408
  $$14359 = $4; //@line 2408
  $$14658 = $2; //@line 2408
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 2413
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 2419
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 2425
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 2431
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 2437
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 2443
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 2449
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 2455
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 2461
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 2467
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 2473
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 2479
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 2485
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 2491
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 2497
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 2503
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 2504
   dest = $3; //@line 2505
   src = $$14160; //@line 2505
   stop = dest + 16 | 0; //@line 2505
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2505
    dest = dest + 1 | 0; //@line 2505
    src = src + 1 | 0; //@line 2505
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 2508
   if (!$$14658) {
    $$044 = 0; //@line 2511
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 2514
    $$14359 = $$14359 + 16 | 0; //@line 2514
   }
  }
  STACKTOP = sp; //@line 2517
  return $$044 | 0; //@line 2517
 }
 return 0; //@line 2519
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_293($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22655
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22657
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22659
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22661
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22663
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22665
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22667
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22669
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22675
 $$pre$i$i = HEAP32[HEAP32[$0 + 32 >> 2] >> 2] | 0; //@line 22676
 HEAP32[HEAP32[$0 + 36 >> 2] >> 2] = $$pre$i$i; //@line 22678
 if ($$pre$i$i | 0) {
  $24 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 22682
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 22683
  FUNCTION_TABLE_vi[$24 & 1023]($8); //@line 22684
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 169; //@line 22687
   $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 22688
   HEAP32[$25 >> 2] = $2; //@line 22689
   $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 22690
   HEAP32[$26 >> 2] = $4; //@line 22691
   $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 22692
   HEAP32[$27 >> 2] = $6; //@line 22693
   $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 22694
   HEAP32[$28 >> 2] = $8; //@line 22695
   $29 = $ReallocAsyncCtx3 + 20 | 0; //@line 22696
   HEAP32[$29 >> 2] = $10; //@line 22697
   $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 22698
   HEAP32[$30 >> 2] = $12; //@line 22699
   $31 = $ReallocAsyncCtx3 + 28 | 0; //@line 22700
   HEAP32[$31 >> 2] = $14; //@line 22701
   $32 = $ReallocAsyncCtx3 + 32 | 0; //@line 22702
   HEAP32[$32 >> 2] = $20; //@line 22703
   sp = STACKTOP; //@line 22704
   return;
  }
  ___async_unwind = 0; //@line 22707
  HEAP32[$ReallocAsyncCtx3 >> 2] = 169; //@line 22708
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 22709
  HEAP32[$25 >> 2] = $2; //@line 22710
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 22711
  HEAP32[$26 >> 2] = $4; //@line 22712
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 22713
  HEAP32[$27 >> 2] = $6; //@line 22714
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 22715
  HEAP32[$28 >> 2] = $8; //@line 22716
  $29 = $ReallocAsyncCtx3 + 20 | 0; //@line 22717
  HEAP32[$29 >> 2] = $10; //@line 22718
  $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 22719
  HEAP32[$30 >> 2] = $12; //@line 22720
  $31 = $ReallocAsyncCtx3 + 28 | 0; //@line 22721
  HEAP32[$31 >> 2] = $14; //@line 22722
  $32 = $ReallocAsyncCtx3 + 32 | 0; //@line 22723
  HEAP32[$32 >> 2] = $20; //@line 22724
  sp = STACKTOP; //@line 22725
  return;
 }
 $33 = $10 + 12 | 0; //@line 22728
 HEAP32[$10 >> 2] = 6; //@line 22729
 HEAP32[$10 + 4 >> 2] = 0; //@line 22731
 HEAP32[$10 + 8 >> 2] = $2; //@line 22733
 HEAP32[$33 >> 2] = 836; //@line 22734
 $34 = $2 + 2416 | 0; //@line 22735
 if (($34 | 0) == ($10 | 0)) {
  $63 = HEAP32[211] | 0; //@line 22739
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 22740
  FUNCTION_TABLE_vi[$63 & 1023]($10); //@line 22741
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 22744
   $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 22745
   HEAP32[$64 >> 2] = $10; //@line 22746
   $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 22747
   HEAP32[$65 >> 2] = $4; //@line 22748
   $66 = $ReallocAsyncCtx6 + 12 | 0; //@line 22749
   HEAP32[$66 >> 2] = $2; //@line 22750
   $67 = $ReallocAsyncCtx6 + 16 | 0; //@line 22751
   HEAP32[$67 >> 2] = $6; //@line 22752
   $68 = $ReallocAsyncCtx6 + 20 | 0; //@line 22753
   HEAP32[$68 >> 2] = $12; //@line 22754
   $69 = $ReallocAsyncCtx6 + 24 | 0; //@line 22755
   HEAP32[$69 >> 2] = $14; //@line 22756
   $70 = $ReallocAsyncCtx6 + 28 | 0; //@line 22757
   HEAP32[$70 >> 2] = $20; //@line 22758
   sp = STACKTOP; //@line 22759
   return;
  }
  ___async_unwind = 0; //@line 22762
  HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 22763
  $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 22764
  HEAP32[$64 >> 2] = $10; //@line 22765
  $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 22766
  HEAP32[$65 >> 2] = $4; //@line 22767
  $66 = $ReallocAsyncCtx6 + 12 | 0; //@line 22768
  HEAP32[$66 >> 2] = $2; //@line 22769
  $67 = $ReallocAsyncCtx6 + 16 | 0; //@line 22770
  HEAP32[$67 >> 2] = $6; //@line 22771
  $68 = $ReallocAsyncCtx6 + 20 | 0; //@line 22772
  HEAP32[$68 >> 2] = $12; //@line 22773
  $69 = $ReallocAsyncCtx6 + 24 | 0; //@line 22774
  HEAP32[$69 >> 2] = $14; //@line 22775
  $70 = $ReallocAsyncCtx6 + 28 | 0; //@line 22776
  HEAP32[$70 >> 2] = $20; //@line 22777
  sp = STACKTOP; //@line 22778
  return;
 }
 $36 = $2 + 2428 | 0; //@line 22781
 $37 = HEAP32[$36 >> 2] | 0; //@line 22782
 if (!$37) {
  $52 = HEAP32[210] | 0; //@line 22786
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 22787
  FUNCTION_TABLE_vii[$52 & 15]($34, $10); //@line 22788
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 22791
   $53 = $ReallocAsyncCtx5 + 4 | 0; //@line 22792
   HEAP32[$53 >> 2] = $10; //@line 22793
   $54 = $ReallocAsyncCtx5 + 8 | 0; //@line 22794
   HEAP32[$54 >> 2] = $4; //@line 22795
   $55 = $ReallocAsyncCtx5 + 12 | 0; //@line 22796
   HEAP32[$55 >> 2] = $2; //@line 22797
   $56 = $ReallocAsyncCtx5 + 16 | 0; //@line 22798
   HEAP32[$56 >> 2] = $6; //@line 22799
   $57 = $ReallocAsyncCtx5 + 20 | 0; //@line 22800
   HEAP32[$57 >> 2] = $12; //@line 22801
   $58 = $ReallocAsyncCtx5 + 24 | 0; //@line 22802
   HEAP32[$58 >> 2] = $14; //@line 22803
   $59 = $ReallocAsyncCtx5 + 28 | 0; //@line 22804
   HEAP32[$59 >> 2] = $33; //@line 22805
   $60 = $ReallocAsyncCtx5 + 32 | 0; //@line 22806
   HEAP32[$60 >> 2] = $36; //@line 22807
   $61 = $ReallocAsyncCtx5 + 36 | 0; //@line 22808
   HEAP32[$61 >> 2] = $20; //@line 22809
   sp = STACKTOP; //@line 22810
   return;
  }
  ___async_unwind = 0; //@line 22813
  HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 22814
  $53 = $ReallocAsyncCtx5 + 4 | 0; //@line 22815
  HEAP32[$53 >> 2] = $10; //@line 22816
  $54 = $ReallocAsyncCtx5 + 8 | 0; //@line 22817
  HEAP32[$54 >> 2] = $4; //@line 22818
  $55 = $ReallocAsyncCtx5 + 12 | 0; //@line 22819
  HEAP32[$55 >> 2] = $2; //@line 22820
  $56 = $ReallocAsyncCtx5 + 16 | 0; //@line 22821
  HEAP32[$56 >> 2] = $6; //@line 22822
  $57 = $ReallocAsyncCtx5 + 20 | 0; //@line 22823
  HEAP32[$57 >> 2] = $12; //@line 22824
  $58 = $ReallocAsyncCtx5 + 24 | 0; //@line 22825
  HEAP32[$58 >> 2] = $14; //@line 22826
  $59 = $ReallocAsyncCtx5 + 28 | 0; //@line 22827
  HEAP32[$59 >> 2] = $33; //@line 22828
  $60 = $ReallocAsyncCtx5 + 32 | 0; //@line 22829
  HEAP32[$60 >> 2] = $36; //@line 22830
  $61 = $ReallocAsyncCtx5 + 36 | 0; //@line 22831
  HEAP32[$61 >> 2] = $20; //@line 22832
  sp = STACKTOP; //@line 22833
  return;
 } else {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 22837
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 22838
  FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 22839
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 22842
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 22843
   HEAP32[$41 >> 2] = $36; //@line 22844
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 22845
   HEAP32[$42 >> 2] = $10; //@line 22846
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 22847
   HEAP32[$43 >> 2] = $4; //@line 22848
   $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 22849
   HEAP32[$44 >> 2] = $2; //@line 22850
   $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 22851
   HEAP32[$45 >> 2] = $6; //@line 22852
   $46 = $ReallocAsyncCtx4 + 24 | 0; //@line 22853
   HEAP32[$46 >> 2] = $34; //@line 22854
   $47 = $ReallocAsyncCtx4 + 28 | 0; //@line 22855
   HEAP32[$47 >> 2] = $33; //@line 22856
   $48 = $ReallocAsyncCtx4 + 32 | 0; //@line 22857
   HEAP32[$48 >> 2] = $12; //@line 22858
   $49 = $ReallocAsyncCtx4 + 36 | 0; //@line 22859
   HEAP32[$49 >> 2] = $14; //@line 22860
   $50 = $ReallocAsyncCtx4 + 40 | 0; //@line 22861
   HEAP32[$50 >> 2] = $20; //@line 22862
   sp = STACKTOP; //@line 22863
   return;
  }
  ___async_unwind = 0; //@line 22866
  HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 22867
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 22868
  HEAP32[$41 >> 2] = $36; //@line 22869
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 22870
  HEAP32[$42 >> 2] = $10; //@line 22871
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 22872
  HEAP32[$43 >> 2] = $4; //@line 22873
  $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 22874
  HEAP32[$44 >> 2] = $2; //@line 22875
  $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 22876
  HEAP32[$45 >> 2] = $6; //@line 22877
  $46 = $ReallocAsyncCtx4 + 24 | 0; //@line 22878
  HEAP32[$46 >> 2] = $34; //@line 22879
  $47 = $ReallocAsyncCtx4 + 28 | 0; //@line 22880
  HEAP32[$47 >> 2] = $33; //@line 22881
  $48 = $ReallocAsyncCtx4 + 32 | 0; //@line 22882
  HEAP32[$48 >> 2] = $12; //@line 22883
  $49 = $ReallocAsyncCtx4 + 36 | 0; //@line 22884
  HEAP32[$49 >> 2] = $14; //@line 22885
  $50 = $ReallocAsyncCtx4 + 40 | 0; //@line 22886
  HEAP32[$50 >> 2] = $20; //@line 22887
  sp = STACKTOP; //@line 22888
  return;
 }
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $120 = 0, $123 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $137 = 0, $14 = 0, $142 = 0, $149 = 0, $153 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $170 = 0, $171 = 0, $174 = 0, $176 = 0, $178 = 0, $184 = 0, $185 = 0, $189 = 0, $19 = 0, $197 = 0, $2 = 0, $205 = 0, $208 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $74 = 0, $75 = 0, $76 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6302
 $1 = $0 + 4 | 0; //@line 6303
 $2 = HEAP32[$1 >> 2] | 0; //@line 6304
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6307
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6308
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 6309
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 610; //@line 6312
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6314
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 6316
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 6318
  sp = STACKTOP; //@line 6319
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6322
 $10 = HEAP32[$1 >> 2] | 0; //@line 6323
 $11 = $10 + 32 | 0; //@line 6324
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 6328
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 6333
  HEAP32[$14 >> 2] = $6; //@line 6334
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 6336
  do {
   if (($21 | 0) == 1e6) {
    $100 = $19; //@line 6340
    $101 = 0; //@line 6340
   } else {
    $24 = HEAP8[$2 + 57 >> 0] | 0; //@line 6343
    $26 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6345
    $27 = tempRet0; //@line 6346
    if (!($24 << 24 >> 24)) {
     $61 = ___udivdi3($26 | 0, $27 | 0, $21 | 0, 0) | 0; //@line 6348
     $62 = tempRet0; //@line 6349
     $63 = ___muldi3($61 | 0, $62 | 0, $21 | 0, 0) | 0; //@line 6350
     $65 = _i64Subtract($26 | 0, $27 | 0, $63 | 0, tempRet0 | 0) | 0; //@line 6352
     $67 = $2 + 40 | 0; //@line 6354
     $68 = $67; //@line 6355
     $74 = _i64Add($65 | 0, tempRet0 | 0, HEAP32[$68 >> 2] | 0, HEAP32[$68 + 4 >> 2] | 0) | 0; //@line 6361
     $75 = tempRet0; //@line 6362
     $76 = $67; //@line 6363
     HEAP32[$76 >> 2] = $74; //@line 6365
     HEAP32[$76 + 4 >> 2] = $75; //@line 6368
     if ($75 >>> 0 < 0 | ($75 | 0) == 0 & $74 >>> 0 < $21 >>> 0) {
      $100 = $61; //@line 6375
      $101 = $62; //@line 6375
      break;
     }
     $85 = _i64Add($61 | 0, $62 | 0, 1, 0) | 0; //@line 6378
     $86 = tempRet0; //@line 6379
     $87 = _i64Subtract($74 | 0, $75 | 0, $21 | 0, 0) | 0; //@line 6380
     $89 = $67; //@line 6382
     HEAP32[$89 >> 2] = $87; //@line 6384
     HEAP32[$89 + 4 >> 2] = tempRet0; //@line 6387
     $100 = $85; //@line 6388
     $101 = $86; //@line 6388
     break;
    } else {
     $28 = $24 & 255; //@line 6391
     $29 = _bitshift64Lshr($26 | 0, $27 | 0, $28 | 0) | 0; //@line 6392
     $30 = tempRet0; //@line 6393
     $31 = _bitshift64Shl($29 | 0, $30 | 0, $28 | 0) | 0; //@line 6394
     $33 = _i64Subtract($26 | 0, $27 | 0, $31 | 0, tempRet0 | 0) | 0; //@line 6396
     $35 = $2 + 40 | 0; //@line 6398
     $36 = $35; //@line 6399
     $42 = _i64Add(HEAP32[$36 >> 2] | 0, HEAP32[$36 + 4 >> 2] | 0, $33 | 0, tempRet0 | 0) | 0; //@line 6405
     $43 = tempRet0; //@line 6406
     $44 = $35; //@line 6407
     HEAP32[$44 >> 2] = $42; //@line 6409
     HEAP32[$44 + 4 >> 2] = $43; //@line 6412
     if ($43 >>> 0 < 0 | ($43 | 0) == 0 & $42 >>> 0 < $21 >>> 0) {
      $100 = $29; //@line 6419
      $101 = $30; //@line 6419
      break;
     }
     $53 = _i64Add($29 | 0, $30 | 0, 1, 0) | 0; //@line 6422
     $54 = tempRet0; //@line 6423
     $55 = _i64Subtract($42 | 0, $43 | 0, $21 | 0, 0) | 0; //@line 6424
     $57 = $35; //@line 6426
     HEAP32[$57 >> 2] = $55; //@line 6428
     HEAP32[$57 + 4 >> 2] = tempRet0; //@line 6431
     $100 = $53; //@line 6432
     $101 = $54; //@line 6432
     break;
    }
   }
  } while (0);
  $93 = $2 + 48 | 0; //@line 6437
  $94 = $93; //@line 6438
  $102 = _i64Add(HEAP32[$94 >> 2] | 0, HEAP32[$94 + 4 >> 2] | 0, $100 | 0, $101 | 0) | 0; //@line 6444
  $104 = $93; //@line 6446
  HEAP32[$104 >> 2] = $102; //@line 6448
  HEAP32[$104 + 4 >> 2] = tempRet0; //@line 6451
 }
 $109 = HEAP32[$10 + 4 >> 2] | 0; //@line 6454
 if (!$109) {
  $205 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 6464
  $208 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 6467
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6468
  FUNCTION_TABLE_vi[$208 & 1023]($205); //@line 6469
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 616; //@line 6472
   sp = STACKTOP; //@line 6473
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 6476
   return;
  }
 }
 $112 = $10 + 48 | 0; //@line 6481
 $114 = HEAP32[$112 >> 2] | 0; //@line 6483
 $117 = HEAP32[$112 + 4 >> 2] | 0; //@line 6486
 $118 = $109; //@line 6487
 $120 = HEAP32[$118 >> 2] | 0; //@line 6489
 $123 = HEAP32[$118 + 4 >> 2] | 0; //@line 6492
 if (!($123 >>> 0 > $117 >>> 0 | ($123 | 0) == ($117 | 0) & $120 >>> 0 > $114 >>> 0)) {
  $131 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 6501
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6502
  FUNCTION_TABLE_v[$131 & 7](); //@line 6503
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 611; //@line 6506
   sp = STACKTOP; //@line 6507
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6510
  return;
 }
 $132 = _i64Subtract($120 | 0, $123 | 0, $114 | 0, $117 | 0) | 0; //@line 6513
 $133 = tempRet0; //@line 6514
 $135 = HEAP32[$10 + 16 >> 2] | 0; //@line 6516
 $137 = $10 + 24 | 0; //@line 6518
 $142 = HEAP32[$137 + 4 >> 2] | 0; //@line 6523
 do {
  if ($133 >>> 0 > $142 >>> 0 | (($133 | 0) == ($142 | 0) ? $132 >>> 0 > (HEAP32[$137 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $135; //@line 6531
  } else {
   $149 = HEAP32[$10 + 8 >> 2] | 0; //@line 6534
   if (($149 | 0) == 1e6) {
    $$0$i = $135 >>> 0 < $132 >>> 0 ? $135 : $132; //@line 6539
    break;
   }
   $153 = HEAP8[$10 + 57 >> 0] | 0; //@line 6543
   if (!($153 << 24 >> 24)) {
    $161 = ___muldi3($132 | 0, $133 | 0, $149 | 0, 0) | 0; //@line 6546
    $163 = ___udivdi3($161 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 6548
    $$0$i = $135 >>> 0 < $163 >>> 0 ? $135 : $163; //@line 6552
    break;
   } else {
    $156 = _bitshift64Shl($132 | 0, $133 | 0, $153 & 255 | 0) | 0; //@line 6556
    $158 = ___udivdi3($156 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 6558
    $$0$i = $135 >>> 0 < $158 >>> 0 ? $135 : $158; //@line 6562
    break;
   }
  }
 } while (0);
 $170 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 6571
 $171 = $2 + 32 | 0; //@line 6572
 $174 = HEAP32[$0 >> 2] | 0; //@line 6575
 if (($170 | 0) == (HEAP32[$171 >> 2] | 0)) {
  $176 = HEAP32[$174 + 20 >> 2] | 0; //@line 6578
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6579
  FUNCTION_TABLE_v[$176 & 7](); //@line 6580
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 612; //@line 6583
   sp = STACKTOP; //@line 6584
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6587
  return;
 }
 $178 = HEAP32[$174 + 16 >> 2] | 0; //@line 6591
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6592
 FUNCTION_TABLE_vi[$178 & 1023]($170); //@line 6593
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 613; //@line 6596
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6598
  HEAP32[$AsyncCtx11 + 8 >> 2] = $171; //@line 6600
  HEAP32[$AsyncCtx11 + 12 >> 2] = $170; //@line 6602
  sp = STACKTOP; //@line 6603
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6606
 $184 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6609
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6610
 $185 = FUNCTION_TABLE_i[$184 & 7]() | 0; //@line 6611
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 614; //@line 6614
  HEAP32[$AsyncCtx14 + 4 >> 2] = $171; //@line 6616
  HEAP32[$AsyncCtx14 + 8 >> 2] = $170; //@line 6618
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 6620
  sp = STACKTOP; //@line 6621
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 6624
 $189 = HEAP32[$171 >> 2] | 0; //@line 6625
 if ($170 >>> 0 > $189 >>> 0) {
  if (!($185 >>> 0 >= $170 >>> 0 | $185 >>> 0 < $189 >>> 0)) {
   return;
  }
 } else {
  if (!($185 >>> 0 >= $170 >>> 0 & $185 >>> 0 < $189 >>> 0)) {
   return;
  }
 }
 $197 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 6644
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6645
 FUNCTION_TABLE_v[$197 & 7](); //@line 6646
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 615; //@line 6649
  sp = STACKTOP; //@line 6650
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 6653
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $22 = 0, $23 = 0, $26 = 0, $29 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $71 = 0, $76 = 0, $77 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6683
 STACKTOP = STACKTOP + 32 | 0; //@line 6684
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6684
 $vararg_buffer = sp; //@line 6685
 $1 = sp + 16 | 0; //@line 6686
 $5 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 4 >> 2] | 0) == 0; //@line 6690
 $6 = __ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0; //@line 6691
 if ($5) {
  HEAP32[$0 + 2552 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 6696
  $10 = $0 + 2512 | 0; //@line 6697
  $11 = HEAP32[$10 >> 2] | 0; //@line 6698
  do {
   if ($11 | 0) {
    $15 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6704
    $17 = HEAP32[$11 + 4 >> 2] | 0; //@line 6706
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6707
    FUNCTION_TABLE_vii[$17 & 15]($1, $0 + 2500 | 0); //@line 6708
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 228; //@line 6711
     HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 6713
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6715
     HEAP32[$AsyncCtx + 12 >> 2] = $15; //@line 6717
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 6719
     sp = STACKTOP; //@line 6720
     STACKTOP = sp; //@line 6721
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6723
    $22 = $1 + 12 | 0; //@line 6725
    HEAP32[$22 >> 2] = HEAP32[$10 >> 2]; //@line 6726
    $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6727
    $23 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($15, $1, 2) | 0; //@line 6728
    if (___async) {
     HEAP32[$AsyncCtx25 >> 2] = 229; //@line 6731
     HEAP32[$AsyncCtx25 + 4 >> 2] = $22; //@line 6733
     HEAP32[$AsyncCtx25 + 8 >> 2] = $1; //@line 6735
     sp = STACKTOP; //@line 6736
     STACKTOP = sp; //@line 6737
     return;
    }
    _emscripten_free_async_context($AsyncCtx25 | 0); //@line 6739
    $26 = HEAP32[$22 >> 2] | 0; //@line 6740
    do {
     if ($26 | 0) {
      $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 6745
      $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6746
      FUNCTION_TABLE_vi[$29 & 1023]($1); //@line 6747
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 230; //@line 6750
       HEAP32[$AsyncCtx2 + 4 >> 2] = $23; //@line 6752
       HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 6754
       sp = STACKTOP; //@line 6755
       STACKTOP = sp; //@line 6756
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6758
       break;
      }
     }
    } while (0);
    if (!$23) {
     $AsyncCtx37 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6765
     _mbed_assert_internal(12080, 12089, 775); //@line 6766
     if (___async) {
      HEAP32[$AsyncCtx37 >> 2] = 231; //@line 6769
      HEAP32[$AsyncCtx37 + 4 >> 2] = $1; //@line 6771
      sp = STACKTOP; //@line 6772
      STACKTOP = sp; //@line 6773
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx37 | 0); //@line 6775
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 6781
  return;
 }
 HEAP32[$vararg_buffer >> 2] = HEAP32[$6 + 4 >> 2]; //@line 6785
 _mbed_tracef(2, 12187, 12318, $vararg_buffer); //@line 6786
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 4 >> 2] | 0) == 2) {
  $40 = $0 + 2512 | 0; //@line 6792
  $41 = HEAP32[$40 >> 2] | 0; //@line 6793
  do {
   if ($41 | 0) {
    $45 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6799
    $47 = HEAP32[$41 + 4 >> 2] | 0; //@line 6801
    $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6802
    FUNCTION_TABLE_vii[$47 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 6803
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 232; //@line 6806
     HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 6808
     HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 6810
     HEAP32[$AsyncCtx5 + 12 >> 2] = $45; //@line 6812
     HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 6814
     sp = STACKTOP; //@line 6815
     STACKTOP = sp; //@line 6816
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6818
    $52 = $vararg_buffer + 12 | 0; //@line 6820
    HEAP32[$52 >> 2] = HEAP32[$40 >> 2]; //@line 6821
    $AsyncCtx22 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6822
    $53 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($45, $vararg_buffer, 3) | 0; //@line 6823
    if (___async) {
     HEAP32[$AsyncCtx22 >> 2] = 233; //@line 6826
     HEAP32[$AsyncCtx22 + 4 >> 2] = $52; //@line 6828
     HEAP32[$AsyncCtx22 + 8 >> 2] = $vararg_buffer; //@line 6830
     sp = STACKTOP; //@line 6831
     STACKTOP = sp; //@line 6832
     return;
    }
    _emscripten_free_async_context($AsyncCtx22 | 0); //@line 6834
    $56 = HEAP32[$52 >> 2] | 0; //@line 6835
    do {
     if ($56 | 0) {
      $59 = HEAP32[$56 + 8 >> 2] | 0; //@line 6840
      $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6841
      FUNCTION_TABLE_vi[$59 & 1023]($vararg_buffer); //@line 6842
      if (___async) {
       HEAP32[$AsyncCtx9 >> 2] = 234; //@line 6845
       HEAP32[$AsyncCtx9 + 4 >> 2] = $53; //@line 6847
       HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 6849
       sp = STACKTOP; //@line 6850
       STACKTOP = sp; //@line 6851
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6853
       break;
      }
     }
    } while (0);
    if (!$53) {
     $AsyncCtx33 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6860
     _mbed_assert_internal(12080, 12089, 775); //@line 6861
     if (___async) {
      HEAP32[$AsyncCtx33 >> 2] = 235; //@line 6864
      HEAP32[$AsyncCtx33 + 4 >> 2] = $vararg_buffer; //@line 6866
      sp = STACKTOP; //@line 6867
      STACKTOP = sp; //@line 6868
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx33 | 0); //@line 6870
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 6876
  return;
 } else {
  $64 = $0 + 2512 | 0; //@line 6878
  $65 = HEAP32[$64 >> 2] | 0; //@line 6879
  do {
   if ($65 | 0) {
    $69 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6885
    $71 = HEAP32[$65 + 4 >> 2] | 0; //@line 6887
    $AsyncCtx12 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6888
    FUNCTION_TABLE_vii[$71 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 6889
    if (___async) {
     HEAP32[$AsyncCtx12 >> 2] = 236; //@line 6892
     HEAP32[$AsyncCtx12 + 4 >> 2] = $64; //@line 6894
     HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer; //@line 6896
     HEAP32[$AsyncCtx12 + 12 >> 2] = $69; //@line 6898
     HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer; //@line 6900
     sp = STACKTOP; //@line 6901
     STACKTOP = sp; //@line 6902
     return;
    }
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6904
    $76 = $vararg_buffer + 12 | 0; //@line 6906
    HEAP32[$76 >> 2] = HEAP32[$64 >> 2]; //@line 6907
    $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6908
    $77 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($69, $vararg_buffer, 4) | 0; //@line 6909
    if (___async) {
     HEAP32[$AsyncCtx19 >> 2] = 237; //@line 6912
     HEAP32[$AsyncCtx19 + 4 >> 2] = $76; //@line 6914
     HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer; //@line 6916
     sp = STACKTOP; //@line 6917
     STACKTOP = sp; //@line 6918
     return;
    }
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6920
    $80 = HEAP32[$76 >> 2] | 0; //@line 6921
    do {
     if ($80 | 0) {
      $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 6926
      $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6927
      FUNCTION_TABLE_vi[$83 & 1023]($vararg_buffer); //@line 6928
      if (___async) {
       HEAP32[$AsyncCtx16 >> 2] = 238; //@line 6931
       HEAP32[$AsyncCtx16 + 4 >> 2] = $77; //@line 6933
       HEAP32[$AsyncCtx16 + 8 >> 2] = $vararg_buffer; //@line 6935
       sp = STACKTOP; //@line 6936
       STACKTOP = sp; //@line 6937
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx16 | 0); //@line 6939
       break;
      }
     }
    } while (0);
    if (!$77) {
     $AsyncCtx29 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6946
     _mbed_assert_internal(12080, 12089, 775); //@line 6947
     if (___async) {
      HEAP32[$AsyncCtx29 >> 2] = 239; //@line 6950
      HEAP32[$AsyncCtx29 + 4 >> 2] = $vararg_buffer; //@line 6952
      sp = STACKTOP; //@line 6953
      STACKTOP = sp; //@line 6954
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx29 | 0); //@line 6956
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 6962
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_295($0) {
 $0 = $0 | 0;
 var $$pre123 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23085
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23087
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23089
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23091
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23093
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23095
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23097
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23099
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23101
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23103
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23105
 $$pre123 = HEAP32[$14 >> 2] | 0; //@line 23106
 if ($$pre123 | 0) {
  $23 = HEAP32[$$pre123 + 4 >> 2] | 0; //@line 23110
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 23111
  FUNCTION_TABLE_vii[$23 & 15]($12, $4); //@line 23112
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 23115
   $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 23116
   HEAP32[$24 >> 2] = $4; //@line 23117
   $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 23118
   HEAP32[$25 >> 2] = $6; //@line 23119
   $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 23120
   HEAP32[$26 >> 2] = $8; //@line 23121
   $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 23122
   HEAP32[$27 >> 2] = $10; //@line 23123
   $28 = $ReallocAsyncCtx5 + 20 | 0; //@line 23124
   HEAP32[$28 >> 2] = $16; //@line 23125
   $29 = $ReallocAsyncCtx5 + 24 | 0; //@line 23126
   HEAP32[$29 >> 2] = $18; //@line 23127
   $30 = $ReallocAsyncCtx5 + 28 | 0; //@line 23128
   HEAP32[$30 >> 2] = $14; //@line 23129
   $31 = $ReallocAsyncCtx5 + 32 | 0; //@line 23130
   HEAP32[$31 >> 2] = $2; //@line 23131
   $32 = $ReallocAsyncCtx5 + 36 | 0; //@line 23132
   HEAP32[$32 >> 2] = $20; //@line 23133
   sp = STACKTOP; //@line 23134
   return;
  }
  ___async_unwind = 0; //@line 23137
  HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 23138
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 23139
  HEAP32[$24 >> 2] = $4; //@line 23140
  $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 23141
  HEAP32[$25 >> 2] = $6; //@line 23142
  $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 23143
  HEAP32[$26 >> 2] = $8; //@line 23144
  $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 23145
  HEAP32[$27 >> 2] = $10; //@line 23146
  $28 = $ReallocAsyncCtx5 + 20 | 0; //@line 23147
  HEAP32[$28 >> 2] = $16; //@line 23148
  $29 = $ReallocAsyncCtx5 + 24 | 0; //@line 23149
  HEAP32[$29 >> 2] = $18; //@line 23150
  $30 = $ReallocAsyncCtx5 + 28 | 0; //@line 23151
  HEAP32[$30 >> 2] = $14; //@line 23152
  $31 = $ReallocAsyncCtx5 + 32 | 0; //@line 23153
  HEAP32[$31 >> 2] = $2; //@line 23154
  $32 = $ReallocAsyncCtx5 + 36 | 0; //@line 23155
  HEAP32[$32 >> 2] = $20; //@line 23156
  sp = STACKTOP; //@line 23157
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 23160
 $33 = $6 + 12 | 0; //@line 23161
 HEAP32[$6 >> 2] = 173; //@line 23162
 HEAP32[$6 + 4 >> 2] = 0; //@line 23164
 HEAP32[$6 + 8 >> 2] = $8; //@line 23166
 HEAP32[$33 >> 2] = 824; //@line 23167
 $34 = $8 + 2448 | 0; //@line 23168
 if (($34 | 0) == ($6 | 0)) {
  $61 = HEAP32[208] | 0; //@line 23172
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 23173
  FUNCTION_TABLE_vi[$61 & 1023]($6); //@line 23174
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 23177
   $62 = $ReallocAsyncCtx9 + 4 | 0; //@line 23178
   HEAP32[$62 >> 2] = $10; //@line 23179
   $63 = $ReallocAsyncCtx9 + 8 | 0; //@line 23180
   HEAP32[$63 >> 2] = $8; //@line 23181
   $64 = $ReallocAsyncCtx9 + 12 | 0; //@line 23182
   HEAP32[$64 >> 2] = $16; //@line 23183
   $65 = $ReallocAsyncCtx9 + 16 | 0; //@line 23184
   HEAP32[$65 >> 2] = $18; //@line 23185
   $66 = $ReallocAsyncCtx9 + 20 | 0; //@line 23186
   HEAP32[$66 >> 2] = $6; //@line 23187
   $67 = $ReallocAsyncCtx9 + 24 | 0; //@line 23188
   HEAP32[$67 >> 2] = $20; //@line 23189
   sp = STACKTOP; //@line 23190
   return;
  }
  ___async_unwind = 0; //@line 23193
  HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 23194
  $62 = $ReallocAsyncCtx9 + 4 | 0; //@line 23195
  HEAP32[$62 >> 2] = $10; //@line 23196
  $63 = $ReallocAsyncCtx9 + 8 | 0; //@line 23197
  HEAP32[$63 >> 2] = $8; //@line 23198
  $64 = $ReallocAsyncCtx9 + 12 | 0; //@line 23199
  HEAP32[$64 >> 2] = $16; //@line 23200
  $65 = $ReallocAsyncCtx9 + 16 | 0; //@line 23201
  HEAP32[$65 >> 2] = $18; //@line 23202
  $66 = $ReallocAsyncCtx9 + 20 | 0; //@line 23203
  HEAP32[$66 >> 2] = $6; //@line 23204
  $67 = $ReallocAsyncCtx9 + 24 | 0; //@line 23205
  HEAP32[$67 >> 2] = $20; //@line 23206
  sp = STACKTOP; //@line 23207
  return;
 }
 $36 = $8 + 2460 | 0; //@line 23210
 $37 = HEAP32[$36 >> 2] | 0; //@line 23211
 if (!$37) {
  $51 = HEAP32[207] | 0; //@line 23215
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 23216
  FUNCTION_TABLE_vii[$51 & 15]($34, $6); //@line 23217
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 23220
   $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 23221
   HEAP32[$52 >> 2] = $10; //@line 23222
   $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 23223
   HEAP32[$53 >> 2] = $8; //@line 23224
   $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 23225
   HEAP32[$54 >> 2] = $16; //@line 23226
   $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 23227
   HEAP32[$55 >> 2] = $18; //@line 23228
   $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 23229
   HEAP32[$56 >> 2] = $33; //@line 23230
   $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 23231
   HEAP32[$57 >> 2] = $36; //@line 23232
   $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 23233
   HEAP32[$58 >> 2] = $6; //@line 23234
   $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 23235
   HEAP32[$59 >> 2] = $20; //@line 23236
   sp = STACKTOP; //@line 23237
   return;
  }
  ___async_unwind = 0; //@line 23240
  HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 23241
  $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 23242
  HEAP32[$52 >> 2] = $10; //@line 23243
  $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 23244
  HEAP32[$53 >> 2] = $8; //@line 23245
  $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 23246
  HEAP32[$54 >> 2] = $16; //@line 23247
  $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 23248
  HEAP32[$55 >> 2] = $18; //@line 23249
  $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 23250
  HEAP32[$56 >> 2] = $33; //@line 23251
  $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 23252
  HEAP32[$57 >> 2] = $36; //@line 23253
  $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 23254
  HEAP32[$58 >> 2] = $6; //@line 23255
  $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 23256
  HEAP32[$59 >> 2] = $20; //@line 23257
  sp = STACKTOP; //@line 23258
  return;
 } else {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 23262
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 23263
  FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 23264
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 23267
   $41 = $ReallocAsyncCtx7 + 4 | 0; //@line 23268
   HEAP32[$41 >> 2] = $10; //@line 23269
   $42 = $ReallocAsyncCtx7 + 8 | 0; //@line 23270
   HEAP32[$42 >> 2] = $8; //@line 23271
   $43 = $ReallocAsyncCtx7 + 12 | 0; //@line 23272
   HEAP32[$43 >> 2] = $16; //@line 23273
   $44 = $ReallocAsyncCtx7 + 16 | 0; //@line 23274
   HEAP32[$44 >> 2] = $18; //@line 23275
   $45 = $ReallocAsyncCtx7 + 20 | 0; //@line 23276
   HEAP32[$45 >> 2] = $33; //@line 23277
   $46 = $ReallocAsyncCtx7 + 24 | 0; //@line 23278
   HEAP32[$46 >> 2] = $36; //@line 23279
   $47 = $ReallocAsyncCtx7 + 28 | 0; //@line 23280
   HEAP32[$47 >> 2] = $6; //@line 23281
   $48 = $ReallocAsyncCtx7 + 32 | 0; //@line 23282
   HEAP32[$48 >> 2] = $20; //@line 23283
   $49 = $ReallocAsyncCtx7 + 36 | 0; //@line 23284
   HEAP32[$49 >> 2] = $34; //@line 23285
   sp = STACKTOP; //@line 23286
   return;
  }
  ___async_unwind = 0; //@line 23289
  HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 23290
  $41 = $ReallocAsyncCtx7 + 4 | 0; //@line 23291
  HEAP32[$41 >> 2] = $10; //@line 23292
  $42 = $ReallocAsyncCtx7 + 8 | 0; //@line 23293
  HEAP32[$42 >> 2] = $8; //@line 23294
  $43 = $ReallocAsyncCtx7 + 12 | 0; //@line 23295
  HEAP32[$43 >> 2] = $16; //@line 23296
  $44 = $ReallocAsyncCtx7 + 16 | 0; //@line 23297
  HEAP32[$44 >> 2] = $18; //@line 23298
  $45 = $ReallocAsyncCtx7 + 20 | 0; //@line 23299
  HEAP32[$45 >> 2] = $33; //@line 23300
  $46 = $ReallocAsyncCtx7 + 24 | 0; //@line 23301
  HEAP32[$46 >> 2] = $36; //@line 23302
  $47 = $ReallocAsyncCtx7 + 28 | 0; //@line 23303
  HEAP32[$47 >> 2] = $6; //@line 23304
  $48 = $ReallocAsyncCtx7 + 32 | 0; //@line 23305
  HEAP32[$48 >> 2] = $20; //@line 23306
  $49 = $ReallocAsyncCtx7 + 36 | 0; //@line 23307
  HEAP32[$49 >> 2] = $34; //@line 23308
  sp = STACKTOP; //@line 23309
  return;
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $111 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 7923
 STACKTOP = STACKTOP + 32 | 0; //@line 7924
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7924
 $vararg_buffer5 = sp + 24 | 0; //@line 7925
 $vararg_buffer3 = sp + 16 | 0; //@line 7926
 $vararg_buffer1 = sp + 8 | 0; //@line 7927
 $vararg_buffer = sp; //@line 7928
 $5 = $0 + 2496 | 0; //@line 7929
 HEAP32[$5 >> 2] = 5; //@line 7930
 $6 = $0 + 2904 | 0; //@line 7931
 HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -3; //@line 7934
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 7935
 __ZN7LoRaMac16on_radio_rx_doneEPKhtsa($0, $1, $2, $3, $4); //@line 7936
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 276; //@line 7939
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7941
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 7943
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 7945
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 7947
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 7949
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 7951
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 7953
  HEAP32[$AsyncCtx + 32 >> 2] = $5; //@line 7955
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer3; //@line 7957
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer3; //@line 7959
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer5; //@line 7961
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer5; //@line 7963
  sp = STACKTOP; //@line 7964
  STACKTOP = sp; //@line 7965
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7967
 HEAP8[$0 + 2900 >> 0] = 0; //@line 7969
 HEAP8[$0 + 2898 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 14 >> 0] | 0; //@line 7974
 HEAP16[$0 + 2896 >> 1] = HEAP16[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 24 >> 1] | 0; //@line 7979
 HEAP8[$0 + 2899 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 26 >> 0] | 0; //@line 7984
 do {
  if (HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) >> 0] | 0) {
   __ZN7LoRaMac25post_process_mlme_requestEv($0); //@line 7990
   $AsyncCtx13 = _emscripten_alloc_async_context(52, sp) | 0; //@line 7991
   __ZN12LoRaWANStack20mlme_confirm_handlerEv($0); //@line 7992
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 277; //@line 7995
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 7997
    HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer; //@line 7999
    HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer; //@line 8001
    HEAP32[$AsyncCtx13 + 16 >> 2] = $6; //@line 8003
    HEAP32[$AsyncCtx13 + 20 >> 2] = $0; //@line 8005
    HEAP32[$AsyncCtx13 + 24 >> 2] = $vararg_buffer1; //@line 8007
    HEAP32[$AsyncCtx13 + 28 >> 2] = $vararg_buffer1; //@line 8009
    HEAP32[$AsyncCtx13 + 32 >> 2] = $5; //@line 8011
    HEAP32[$AsyncCtx13 + 36 >> 2] = $vararg_buffer3; //@line 8013
    HEAP32[$AsyncCtx13 + 40 >> 2] = $vararg_buffer3; //@line 8015
    HEAP32[$AsyncCtx13 + 44 >> 2] = $vararg_buffer5; //@line 8017
    HEAP32[$AsyncCtx13 + 48 >> 2] = $vararg_buffer5; //@line 8019
    sp = STACKTOP; //@line 8020
    STACKTOP = sp; //@line 8021
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 8023
    break;
   }
  }
 } while (0);
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  STACKTOP = sp; //@line 8030
  return;
 }
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1) {
   if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 32 >> 0] | 0) {
    HEAP32[$vararg_buffer >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 11 >> 0]; //@line 8046
    _mbed_tracef(16, 12187, 12389, $vararg_buffer); //@line 8047
    __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 8048
    HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -18 | 16; //@line 8052
    $AsyncCtx29 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8053
    __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8054
    if (___async) {
     HEAP32[$AsyncCtx29 >> 2] = 278; //@line 8057
     HEAP32[$AsyncCtx29 + 4 >> 2] = $0; //@line 8059
     HEAP32[$AsyncCtx29 + 8 >> 2] = $6; //@line 8061
     HEAP32[$AsyncCtx29 + 12 >> 2] = $0; //@line 8063
     HEAP32[$AsyncCtx29 + 16 >> 2] = $5; //@line 8065
     HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer3; //@line 8067
     HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer3; //@line 8069
     HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer5; //@line 8071
     HEAP32[$AsyncCtx29 + 32 >> 2] = $vararg_buffer5; //@line 8073
     sp = STACKTOP; //@line 8074
     STACKTOP = sp; //@line 8075
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx29 | 0); //@line 8077
     break;
    }
   }
   if (!(__ZN7LoRaMac24continue_sending_processEv($0) | 0)) {
    _mbed_tracef(2, 12187, 12192, $vararg_buffer1); //@line 8083
    HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -18 | 1; //@line 8087
    $AsyncCtx25 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8088
    __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8089
    if (___async) {
     HEAP32[$AsyncCtx25 >> 2] = 279; //@line 8092
     HEAP32[$AsyncCtx25 + 4 >> 2] = $0; //@line 8094
     HEAP32[$AsyncCtx25 + 8 >> 2] = $6; //@line 8096
     HEAP32[$AsyncCtx25 + 12 >> 2] = $0; //@line 8098
     HEAP32[$AsyncCtx25 + 16 >> 2] = $5; //@line 8100
     HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer3; //@line 8102
     HEAP32[$AsyncCtx25 + 24 >> 2] = $vararg_buffer3; //@line 8104
     HEAP32[$AsyncCtx25 + 28 >> 2] = $vararg_buffer5; //@line 8106
     HEAP32[$AsyncCtx25 + 32 >> 2] = $vararg_buffer5; //@line 8108
     sp = STACKTOP; //@line 8109
     STACKTOP = sp; //@line 8110
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx25 | 0); //@line 8112
     break;
    }
   }
  } else {
   __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 8117
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 16; //@line 8120
   $AsyncCtx21 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8121
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8122
   if (___async) {
    HEAP32[$AsyncCtx21 >> 2] = 280; //@line 8125
    HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 8127
    HEAP32[$AsyncCtx21 + 8 >> 2] = $6; //@line 8129
    HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 8131
    HEAP32[$AsyncCtx21 + 16 >> 2] = $5; //@line 8133
    HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer3; //@line 8135
    HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 8137
    HEAP32[$AsyncCtx21 + 28 >> 2] = $vararg_buffer5; //@line 8139
    HEAP32[$AsyncCtx21 + 32 >> 2] = $vararg_buffer5; //@line 8141
    sp = STACKTOP; //@line 8142
    STACKTOP = sp; //@line 8143
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx21 | 0); //@line 8145
    break;
   }
  }
 } while (0);
 do {
  if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) >> 0] | 0) {
   __ZN7LoRaMac21post_process_mcps_indEv($0); //@line 8155
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 2; //@line 8158
   $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8159
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8160
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 281; //@line 8163
    HEAP32[$AsyncCtx17 + 4 >> 2] = $6; //@line 8165
    HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 8167
    HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 8169
    HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 8171
    HEAP32[$AsyncCtx17 + 20 >> 2] = $vararg_buffer3; //@line 8173
    HEAP32[$AsyncCtx17 + 24 >> 2] = $vararg_buffer3; //@line 8175
    HEAP32[$AsyncCtx17 + 28 >> 2] = $vararg_buffer5; //@line 8177
    HEAP32[$AsyncCtx17 + 32 >> 2] = $vararg_buffer5; //@line 8179
    sp = STACKTOP; //@line 8180
    STACKTOP = sp; //@line 8181
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 8183
    break;
   }
  }
 } while (0);
 if (!(HEAP32[$6 >> 2] & 1)) {
  $111 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 8193
  HEAP32[$5 >> 2] = $111 ? 5 : 2; //@line 8195
 }
 do {
  if (HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($0) | 0) + 4 >> 0] | 0) {
   _mbed_tracef(16, 12187, 12409, $vararg_buffer3); //@line 8203
   __ZN7LoRaMac21post_process_mlme_indEv($0); //@line 8204
   _mbed_tracef(16, 12187, 12433, $vararg_buffer5); //@line 8205
   $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8206
   __ZN12LoRaWANStack23mlme_indication_handlerEv($0); //@line 8207
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 282; //@line 8210
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 8212
    sp = STACKTOP; //@line 8213
    STACKTOP = sp; //@line 8214
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 8216
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 2911 >> 0] = 1; //@line 8222
 STACKTOP = sp; //@line 8223
 return;
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0121 = 0, $$0122 = 0, $$0124 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi128Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $114 = 0, $116 = 0, $12 = 0, $120 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $33 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $83 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3096
 if (!$0) {
  $$1 = -24832; //@line 3099
  return $$1 | 0; //@line 3100
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 3102
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 3107
  return $$1 | 0; //@line 3108
 }
 HEAP32[$4 >> 2] = 0; //@line 3110
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 3112
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 3114
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 3119
    return $$1 | 0; //@line 3120
   }
   HEAP32[$4 >> 2] = $2; //@line 3122
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 3126
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 3128
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 3130
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3131
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 3132
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 568; //@line 3135
    sp = STACKTOP; //@line 3136
    return 0; //@line 3137
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 3139
   $$1 = $22; //@line 3140
   return $$1 | 0; //@line 3141
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 3145
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 3147
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3148
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 3149
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 569; //@line 3152
    sp = STACKTOP; //@line 3153
    return 0; //@line 3154
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 3156
   $$1 = $25; //@line 3157
   return $$1 | 0; //@line 3158
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 3164
    return $$1 | 0; //@line 3165
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 3173
     return $$1 | 0; //@line 3174
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 3179
     return $$1 | 0; //@line 3180
    }
   }
   switch ($12 | 0) {
   case 2:
    {
     $33 = $0 + 8 | 0; //@line 3185
     L21 : do {
      switch (HEAP32[$33 >> 2] | 0) {
      case 0:
       {
        $38 = $0 + 36 | 0; //@line 3193
        $39 = HEAP32[$38 >> 2] | 0; //@line 3194
        $40 = $10 - $39 | 0; //@line 3195
        if (!(HEAP32[$0 + 12 >> 2] | 0)) {
         if ($40 >>> 0 > $2 >>> 0) {
          $$pre$phiZ2D = $38; //@line 3199
          $48 = $39; //@line 3199
          label = 22; //@line 3200
          break L21;
         } else {
          label = 20; //@line 3203
          break L21;
         }
        } else {
         if ($40 >>> 0 < $2 >>> 0) {
          label = 20; //@line 3209
          break L21;
         } else {
          $$pre$phiZ2D = $38; //@line 3212
          $48 = $39; //@line 3212
          label = 22; //@line 3213
          break L21;
         }
        }
        break;
       }
      case 1:
       {
        $43 = $0 + 36 | 0; //@line 3220
        $44 = HEAP32[$43 >> 2] | 0; //@line 3221
        if (($10 - $44 | 0) >>> 0 > $2 >>> 0) {
         $$pre$phiZ2D = $43; //@line 3225
         $48 = $44; //@line 3225
         label = 22; //@line 3226
        } else {
         $$pre$phi128Z2D = $43; //@line 3228
         $52 = $44; //@line 3228
        }
        break;
       }
      default:
       {
        label = 20; //@line 3233
       }
      }
     } while (0);
     if ((label | 0) == 20) {
      $$phi$trans$insert = $0 + 36 | 0; //@line 3238
      $$pre$phi128Z2D = $$phi$trans$insert; //@line 3240
      $52 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 3240
     } else if ((label | 0) == 22) {
      _memcpy($0 + 20 + $48 | 0, $1 | 0, $2 | 0) | 0; //@line 3244
      HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 3247
      $$1 = 0; //@line 3248
      return $$1 | 0; //@line 3249
     }
     do {
      if (!$52) {
       $$0121 = $3; //@line 3254
       $$0122 = $2; //@line 3254
       $$0124 = $1; //@line 3254
      } else {
       $53 = $10 - $52 | 0; //@line 3256
       _memcpy($0 + 20 + $52 | 0, $1 | 0, $53 | 0) | 0; //@line 3258
       $59 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 3263
       $61 = HEAP32[$0 + 60 >> 2] | 0; //@line 3265
       $62 = HEAP32[$33 >> 2] | 0; //@line 3266
       $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3269
       $65 = FUNCTION_TABLE_iiiiiii[$59 & 3]($61, $62, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 3270
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 570; //@line 3273
        HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 3275
        HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 3277
        HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 3279
        HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi128Z2D; //@line 3281
        HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 3283
        HEAP32[$AsyncCtx3 + 24 >> 2] = $53; //@line 3285
        HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 3287
        HEAP32[$AsyncCtx3 + 32 >> 2] = $33; //@line 3289
        HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 3291
        HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 3293
        sp = STACKTOP; //@line 3294
        return 0; //@line 3295
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3297
       if (!$65) {
        HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 3302
        HEAP32[$$pre$phi128Z2D >> 2] = 0; //@line 3304
        $$0121 = $3 + $10 | 0; //@line 3307
        $$0122 = $2 - $53 | 0; //@line 3307
        $$0124 = $1 + $53 | 0; //@line 3307
        break;
       } else {
        $$1 = $65; //@line 3310
        return $$1 | 0; //@line 3311
       }
      }
     } while (0);
     if (!$$0122) {
      $$1 = 0; //@line 3317
      return $$1 | 0; //@line 3318
     }
     $83 = ($$0122 >>> 0) % ($10 >>> 0) | 0; //@line 3320
     if (!$83) {
      if (!(HEAP32[$33 >> 2] | 0)) {
       $$0 = (HEAP32[$0 + 12 >> 2] | 0) == 0 ? 0 : $10; //@line 3330
      } else {
       $$0 = 0; //@line 3332
      }
     } else {
      $$0 = $83; //@line 3335
     }
     $91 = $$0122 - $$0 | 0; //@line 3338
     _memcpy($0 + 20 | 0, $$0124 + $91 | 0, $$0 | 0) | 0; //@line 3340
     HEAP32[$$pre$phi128Z2D >> 2] = (HEAP32[$$pre$phi128Z2D >> 2] | 0) + $$0; //@line 3343
     if (!$91) {
      $$1 = 0; //@line 3346
      return $$1 | 0; //@line 3347
     }
     $100 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 3353
     $102 = HEAP32[$0 + 60 >> 2] | 0; //@line 3355
     $103 = HEAP32[$33 >> 2] | 0; //@line 3356
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3358
     $105 = FUNCTION_TABLE_iiiiiii[$100 & 3]($102, $103, $91, $0 + 40 | 0, $$0124, $$0121) | 0; //@line 3359
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 571; //@line 3362
      HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 3364
      HEAP32[$AsyncCtx7 + 8 >> 2] = $91; //@line 3366
      sp = STACKTOP; //@line 3367
      return 0; //@line 3368
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3370
     if ($105 | 0) {
      $$1 = $105; //@line 3373
      return $$1 | 0; //@line 3374
     }
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $91; //@line 3378
     $$1 = 0; //@line 3379
     return $$1 | 0; //@line 3380
    }
   case 5:
    {
     $114 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 3387
     $116 = HEAP32[$0 + 60 >> 2] | 0; //@line 3389
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3393
     $120 = FUNCTION_TABLE_iiiiiiii[$114 & 1]($116, $2, $0 + 36 | 0, $0 + 40 | 0, $0 + 20 | 0, $1, $3) | 0; //@line 3394
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 572; //@line 3397
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 3399
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 3401
      sp = STACKTOP; //@line 3402
      return 0; //@line 3403
     }
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3405
     if ($120 | 0) {
      $$1 = $120; //@line 3408
      return $$1 | 0; //@line 3409
     }
     HEAP32[$4 >> 2] = $2; //@line 3411
     $$1 = 0; //@line 3412
     return $$1 | 0; //@line 3413
    }
   default:
    {
     $$1 = -24704; //@line 3417
     return $$1 | 0; //@line 3418
    }
   }
  }
 }
 return 0; //@line 3423
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_296($0) {
 $0 = $0 | 0;
 var $$pre$i$i25 = 0, $10 = 0, $12 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23319
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23321
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23323
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23325
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23327
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23329
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23331
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23337
 $$pre$i$i25 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 23338
 HEAP32[HEAP32[$0 + 32 >> 2] >> 2] = $$pre$i$i25; //@line 23340
 if ($$pre$i$i25 | 0) {
  $22 = HEAP32[$$pre$i$i25 + 8 >> 2] | 0; //@line 23344
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 23345
  FUNCTION_TABLE_vi[$22 & 1023]($2); //@line 23346
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 23349
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 23350
   HEAP32[$23 >> 2] = $2; //@line 23351
   $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 23352
   HEAP32[$24 >> 2] = $4; //@line 23353
   $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 23354
   HEAP32[$25 >> 2] = $6; //@line 23355
   $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 23356
   HEAP32[$26 >> 2] = $8; //@line 23357
   $27 = $ReallocAsyncCtx6 + 20 | 0; //@line 23358
   HEAP32[$27 >> 2] = $10; //@line 23359
   $28 = $ReallocAsyncCtx6 + 24 | 0; //@line 23360
   HEAP32[$28 >> 2] = $12; //@line 23361
   $29 = $ReallocAsyncCtx6 + 28 | 0; //@line 23362
   HEAP32[$29 >> 2] = $18; //@line 23363
   sp = STACKTOP; //@line 23364
   return;
  }
  ___async_unwind = 0; //@line 23367
  HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 23368
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 23369
  HEAP32[$23 >> 2] = $2; //@line 23370
  $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 23371
  HEAP32[$24 >> 2] = $4; //@line 23372
  $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 23373
  HEAP32[$25 >> 2] = $6; //@line 23374
  $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 23375
  HEAP32[$26 >> 2] = $8; //@line 23376
  $27 = $ReallocAsyncCtx6 + 20 | 0; //@line 23377
  HEAP32[$27 >> 2] = $10; //@line 23378
  $28 = $ReallocAsyncCtx6 + 24 | 0; //@line 23379
  HEAP32[$28 >> 2] = $12; //@line 23380
  $29 = $ReallocAsyncCtx6 + 28 | 0; //@line 23381
  HEAP32[$29 >> 2] = $18; //@line 23382
  sp = STACKTOP; //@line 23383
  return;
 }
 $30 = $4 + 12 | 0; //@line 23386
 HEAP32[$4 >> 2] = 173; //@line 23387
 HEAP32[$4 + 4 >> 2] = 0; //@line 23389
 HEAP32[$4 + 8 >> 2] = $6; //@line 23391
 HEAP32[$30 >> 2] = 824; //@line 23392
 $31 = $6 + 2448 | 0; //@line 23393
 if (($31 | 0) == ($4 | 0)) {
  $58 = HEAP32[208] | 0; //@line 23397
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 23398
  FUNCTION_TABLE_vi[$58 & 1023]($4); //@line 23399
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 23402
   $59 = $ReallocAsyncCtx9 + 4 | 0; //@line 23403
   HEAP32[$59 >> 2] = $8; //@line 23404
   $60 = $ReallocAsyncCtx9 + 8 | 0; //@line 23405
   HEAP32[$60 >> 2] = $6; //@line 23406
   $61 = $ReallocAsyncCtx9 + 12 | 0; //@line 23407
   HEAP32[$61 >> 2] = $10; //@line 23408
   $62 = $ReallocAsyncCtx9 + 16 | 0; //@line 23409
   HEAP32[$62 >> 2] = $12; //@line 23410
   $63 = $ReallocAsyncCtx9 + 20 | 0; //@line 23411
   HEAP32[$63 >> 2] = $4; //@line 23412
   $64 = $ReallocAsyncCtx9 + 24 | 0; //@line 23413
   HEAP32[$64 >> 2] = $18; //@line 23414
   sp = STACKTOP; //@line 23415
   return;
  }
  ___async_unwind = 0; //@line 23418
  HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 23419
  $59 = $ReallocAsyncCtx9 + 4 | 0; //@line 23420
  HEAP32[$59 >> 2] = $8; //@line 23421
  $60 = $ReallocAsyncCtx9 + 8 | 0; //@line 23422
  HEAP32[$60 >> 2] = $6; //@line 23423
  $61 = $ReallocAsyncCtx9 + 12 | 0; //@line 23424
  HEAP32[$61 >> 2] = $10; //@line 23425
  $62 = $ReallocAsyncCtx9 + 16 | 0; //@line 23426
  HEAP32[$62 >> 2] = $12; //@line 23427
  $63 = $ReallocAsyncCtx9 + 20 | 0; //@line 23428
  HEAP32[$63 >> 2] = $4; //@line 23429
  $64 = $ReallocAsyncCtx9 + 24 | 0; //@line 23430
  HEAP32[$64 >> 2] = $18; //@line 23431
  sp = STACKTOP; //@line 23432
  return;
 }
 $33 = $6 + 2460 | 0; //@line 23435
 $34 = HEAP32[$33 >> 2] | 0; //@line 23436
 if (!$34) {
  $48 = HEAP32[207] | 0; //@line 23440
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 23441
  FUNCTION_TABLE_vii[$48 & 15]($31, $4); //@line 23442
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 23445
   $49 = $ReallocAsyncCtx8 + 4 | 0; //@line 23446
   HEAP32[$49 >> 2] = $8; //@line 23447
   $50 = $ReallocAsyncCtx8 + 8 | 0; //@line 23448
   HEAP32[$50 >> 2] = $6; //@line 23449
   $51 = $ReallocAsyncCtx8 + 12 | 0; //@line 23450
   HEAP32[$51 >> 2] = $10; //@line 23451
   $52 = $ReallocAsyncCtx8 + 16 | 0; //@line 23452
   HEAP32[$52 >> 2] = $12; //@line 23453
   $53 = $ReallocAsyncCtx8 + 20 | 0; //@line 23454
   HEAP32[$53 >> 2] = $30; //@line 23455
   $54 = $ReallocAsyncCtx8 + 24 | 0; //@line 23456
   HEAP32[$54 >> 2] = $33; //@line 23457
   $55 = $ReallocAsyncCtx8 + 28 | 0; //@line 23458
   HEAP32[$55 >> 2] = $4; //@line 23459
   $56 = $ReallocAsyncCtx8 + 32 | 0; //@line 23460
   HEAP32[$56 >> 2] = $18; //@line 23461
   sp = STACKTOP; //@line 23462
   return;
  }
  ___async_unwind = 0; //@line 23465
  HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 23466
  $49 = $ReallocAsyncCtx8 + 4 | 0; //@line 23467
  HEAP32[$49 >> 2] = $8; //@line 23468
  $50 = $ReallocAsyncCtx8 + 8 | 0; //@line 23469
  HEAP32[$50 >> 2] = $6; //@line 23470
  $51 = $ReallocAsyncCtx8 + 12 | 0; //@line 23471
  HEAP32[$51 >> 2] = $10; //@line 23472
  $52 = $ReallocAsyncCtx8 + 16 | 0; //@line 23473
  HEAP32[$52 >> 2] = $12; //@line 23474
  $53 = $ReallocAsyncCtx8 + 20 | 0; //@line 23475
  HEAP32[$53 >> 2] = $30; //@line 23476
  $54 = $ReallocAsyncCtx8 + 24 | 0; //@line 23477
  HEAP32[$54 >> 2] = $33; //@line 23478
  $55 = $ReallocAsyncCtx8 + 28 | 0; //@line 23479
  HEAP32[$55 >> 2] = $4; //@line 23480
  $56 = $ReallocAsyncCtx8 + 32 | 0; //@line 23481
  HEAP32[$56 >> 2] = $18; //@line 23482
  sp = STACKTOP; //@line 23483
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 23487
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 23488
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 23489
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 23492
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 23493
   HEAP32[$38 >> 2] = $8; //@line 23494
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 23495
   HEAP32[$39 >> 2] = $6; //@line 23496
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 23497
   HEAP32[$40 >> 2] = $10; //@line 23498
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 23499
   HEAP32[$41 >> 2] = $12; //@line 23500
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 23501
   HEAP32[$42 >> 2] = $30; //@line 23502
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 23503
   HEAP32[$43 >> 2] = $33; //@line 23504
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 23505
   HEAP32[$44 >> 2] = $4; //@line 23506
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 23507
   HEAP32[$45 >> 2] = $18; //@line 23508
   $46 = $ReallocAsyncCtx7 + 36 | 0; //@line 23509
   HEAP32[$46 >> 2] = $31; //@line 23510
   sp = STACKTOP; //@line 23511
   return;
  }
  ___async_unwind = 0; //@line 23514
  HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 23515
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 23516
  HEAP32[$38 >> 2] = $8; //@line 23517
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 23518
  HEAP32[$39 >> 2] = $6; //@line 23519
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 23520
  HEAP32[$40 >> 2] = $10; //@line 23521
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 23522
  HEAP32[$41 >> 2] = $12; //@line 23523
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 23524
  HEAP32[$42 >> 2] = $30; //@line 23525
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 23526
  HEAP32[$43 >> 2] = $33; //@line 23527
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 23528
  HEAP32[$44 >> 2] = $4; //@line 23529
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 23530
  HEAP32[$45 >> 2] = $18; //@line 23531
  $46 = $ReallocAsyncCtx7 + 36 | 0; //@line 23532
  HEAP32[$46 >> 2] = $31; //@line 23533
  sp = STACKTOP; //@line 23534
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_105($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25816
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25818
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25820
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25826
 HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 25828
 $11 = $4 + 16 | 0; //@line 25829
 $12 = $4 + 28 | 0; //@line 25830
 $13 = HEAP32[$12 >> 2] | 0; //@line 25831
 if ($13 | 0) {
  $15 = $2 + 2516 | 0; //@line 25834
  if (($15 | 0) != ($11 | 0)) {
   $17 = $2 + 2528 | 0; //@line 25837
   $18 = HEAP32[$17 >> 2] | 0; //@line 25838
   if (!$18) {
    $30 = HEAP32[$13 + 4 >> 2] | 0; //@line 25842
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 25843
    FUNCTION_TABLE_vii[$30 & 15]($15, $11); //@line 25844
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 341; //@line 25847
     $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 25848
     HEAP32[$31 >> 2] = $12; //@line 25849
     $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 25850
     HEAP32[$32 >> 2] = $10; //@line 25851
     $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 25852
     HEAP32[$33 >> 2] = $2; //@line 25853
     $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 25854
     HEAP32[$34 >> 2] = $17; //@line 25855
     $35 = $ReallocAsyncCtx4 + 20 | 0; //@line 25856
     HEAP32[$35 >> 2] = $4; //@line 25857
     sp = STACKTOP; //@line 25858
     return;
    }
    ___async_unwind = 0; //@line 25861
    HEAP32[$ReallocAsyncCtx4 >> 2] = 341; //@line 25862
    $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 25863
    HEAP32[$31 >> 2] = $12; //@line 25864
    $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 25865
    HEAP32[$32 >> 2] = $10; //@line 25866
    $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 25867
    HEAP32[$33 >> 2] = $2; //@line 25868
    $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 25869
    HEAP32[$34 >> 2] = $17; //@line 25870
    $35 = $ReallocAsyncCtx4 + 20 | 0; //@line 25871
    HEAP32[$35 >> 2] = $4; //@line 25872
    sp = STACKTOP; //@line 25873
    return;
   } else {
    $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 25877
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 25878
    FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 25879
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 340; //@line 25882
     $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 25883
     HEAP32[$22 >> 2] = $12; //@line 25884
     $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 25885
     HEAP32[$23 >> 2] = $10; //@line 25886
     $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 25887
     HEAP32[$24 >> 2] = $2; //@line 25888
     $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 25889
     HEAP32[$25 >> 2] = $17; //@line 25890
     $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 25891
     HEAP32[$26 >> 2] = $15; //@line 25892
     $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 25893
     HEAP32[$27 >> 2] = $11; //@line 25894
     $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 25895
     HEAP32[$28 >> 2] = $4; //@line 25896
     sp = STACKTOP; //@line 25897
     return;
    }
    ___async_unwind = 0; //@line 25900
    HEAP32[$ReallocAsyncCtx3 >> 2] = 340; //@line 25901
    $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 25902
    HEAP32[$22 >> 2] = $12; //@line 25903
    $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 25904
    HEAP32[$23 >> 2] = $10; //@line 25905
    $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 25906
    HEAP32[$24 >> 2] = $2; //@line 25907
    $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 25908
    HEAP32[$25 >> 2] = $17; //@line 25909
    $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 25910
    HEAP32[$26 >> 2] = $15; //@line 25911
    $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 25912
    HEAP32[$27 >> 2] = $11; //@line 25913
    $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 25914
    HEAP32[$28 >> 2] = $4; //@line 25915
    sp = STACKTOP; //@line 25916
    return;
   }
  }
 }
 $36 = $4 + 32 | 0; //@line 25921
 $37 = $4 + 44 | 0; //@line 25922
 $38 = HEAP32[$37 >> 2] | 0; //@line 25923
 if (!$38) {
  HEAP32[___async_retval >> 2] = 0; //@line 25927
  return;
 }
 $40 = $2 + 2532 | 0; //@line 25930
 if (($40 | 0) == ($36 | 0)) {
  $61 = HEAP32[$38 + 4 >> 2] | 0; //@line 25934
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 25935
  FUNCTION_TABLE_vii[$61 & 15]($10, $36); //@line 25936
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 25939
   $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 25940
   HEAP32[$62 >> 2] = $37; //@line 25941
   $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 25942
   HEAP32[$63 >> 2] = $2; //@line 25943
   $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 25944
   HEAP32[$64 >> 2] = $10; //@line 25945
   sp = STACKTOP; //@line 25946
   return;
  }
  ___async_unwind = 0; //@line 25949
  HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 25950
  $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 25951
  HEAP32[$62 >> 2] = $37; //@line 25952
  $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 25953
  HEAP32[$63 >> 2] = $2; //@line 25954
  $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 25955
  HEAP32[$64 >> 2] = $10; //@line 25956
  sp = STACKTOP; //@line 25957
  return;
 }
 $42 = $2 + 2544 | 0; //@line 25960
 $43 = HEAP32[$42 >> 2] | 0; //@line 25961
 if (!$43) {
  $54 = HEAP32[$38 + 4 >> 2] | 0; //@line 25965
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 25966
  FUNCTION_TABLE_vii[$54 & 15]($40, $36); //@line 25967
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 25970
   $55 = $ReallocAsyncCtx6 + 4 | 0; //@line 25971
   HEAP32[$55 >> 2] = $37; //@line 25972
   $56 = $ReallocAsyncCtx6 + 8 | 0; //@line 25973
   HEAP32[$56 >> 2] = $42; //@line 25974
   $57 = $ReallocAsyncCtx6 + 12 | 0; //@line 25975
   HEAP32[$57 >> 2] = $2; //@line 25976
   $58 = $ReallocAsyncCtx6 + 16 | 0; //@line 25977
   HEAP32[$58 >> 2] = $10; //@line 25978
   $59 = $ReallocAsyncCtx6 + 20 | 0; //@line 25979
   HEAP32[$59 >> 2] = $36; //@line 25980
   sp = STACKTOP; //@line 25981
   return;
  }
  ___async_unwind = 0; //@line 25984
  HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 25985
  $55 = $ReallocAsyncCtx6 + 4 | 0; //@line 25986
  HEAP32[$55 >> 2] = $37; //@line 25987
  $56 = $ReallocAsyncCtx6 + 8 | 0; //@line 25988
  HEAP32[$56 >> 2] = $42; //@line 25989
  $57 = $ReallocAsyncCtx6 + 12 | 0; //@line 25990
  HEAP32[$57 >> 2] = $2; //@line 25991
  $58 = $ReallocAsyncCtx6 + 16 | 0; //@line 25992
  HEAP32[$58 >> 2] = $10; //@line 25993
  $59 = $ReallocAsyncCtx6 + 20 | 0; //@line 25994
  HEAP32[$59 >> 2] = $36; //@line 25995
  sp = STACKTOP; //@line 25996
  return;
 } else {
  $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 26000
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 26001
  FUNCTION_TABLE_vi[$46 & 1023]($40); //@line 26002
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 26005
   $47 = $ReallocAsyncCtx5 + 4 | 0; //@line 26006
   HEAP32[$47 >> 2] = $37; //@line 26007
   $48 = $ReallocAsyncCtx5 + 8 | 0; //@line 26008
   HEAP32[$48 >> 2] = $42; //@line 26009
   $49 = $ReallocAsyncCtx5 + 12 | 0; //@line 26010
   HEAP32[$49 >> 2] = $2; //@line 26011
   $50 = $ReallocAsyncCtx5 + 16 | 0; //@line 26012
   HEAP32[$50 >> 2] = $40; //@line 26013
   $51 = $ReallocAsyncCtx5 + 20 | 0; //@line 26014
   HEAP32[$51 >> 2] = $36; //@line 26015
   $52 = $ReallocAsyncCtx5 + 24 | 0; //@line 26016
   HEAP32[$52 >> 2] = $10; //@line 26017
   sp = STACKTOP; //@line 26018
   return;
  }
  ___async_unwind = 0; //@line 26021
  HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 26022
  $47 = $ReallocAsyncCtx5 + 4 | 0; //@line 26023
  HEAP32[$47 >> 2] = $37; //@line 26024
  $48 = $ReallocAsyncCtx5 + 8 | 0; //@line 26025
  HEAP32[$48 >> 2] = $42; //@line 26026
  $49 = $ReallocAsyncCtx5 + 12 | 0; //@line 26027
  HEAP32[$49 >> 2] = $2; //@line 26028
  $50 = $ReallocAsyncCtx5 + 16 | 0; //@line 26029
  HEAP32[$50 >> 2] = $40; //@line 26030
  $51 = $ReallocAsyncCtx5 + 20 | 0; //@line 26031
  HEAP32[$51 >> 2] = $36; //@line 26032
  $52 = $ReallocAsyncCtx5 + 24 | 0; //@line 26033
  HEAP32[$52 >> 2] = $10; //@line 26034
  sp = STACKTOP; //@line 26035
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$036 = 0, $$038 = 0, $10 = 0, $104 = 0, $107 = 0, $110 = 0, $114 = 0, $117 = 0, $126 = 0, $129 = 0, $132 = 0, $134 = 0, $137 = 0, $16 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $41 = 0, $43 = 0, $47 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $7 = 0, $71 = 0, $74 = 0, $87 = 0, $90 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19229
 $3 = HEAP8[$1 + 1 >> 0] | 0; //@line 19231
 $5 = HEAP32[$1 + 4 >> 2] | 0; //@line 19233
 $6 = $0 + 4 | 0; //@line 19234
 $7 = HEAP32[$6 >> 2] | 0; //@line 19235
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 72 >> 2] | 0; //@line 19238
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 19239
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 19240
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 503; //@line 19243
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 19245
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 19247
  HEAP8[$AsyncCtx + 12 >> 0] = $3; //@line 19249
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 19251
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 19253
  sp = STACKTOP; //@line 19254
  return 0; //@line 19255
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19257
 $16 = HEAP32[$6 >> 2] | 0; //@line 19258
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 40 >> 2] | 0; //@line 19261
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19262
 $20 = FUNCTION_TABLE_ii[$19 & 15]($16) | 0; //@line 19263
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 504; //@line 19266
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 19268
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 19270
  HEAP8[$AsyncCtx2 + 12 >> 0] = $3; //@line 19272
  HEAP32[$AsyncCtx2 + 16 >> 2] = $5; //@line 19274
  HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 19276
  sp = STACKTOP; //@line 19277
  return 0; //@line 19278
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19280
 $26 = $20 << 24 >> 24 == 0; //@line 19281
 $27 = HEAP32[$6 >> 2] | 0; //@line 19282
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 76 >> 2] | 0; //@line 19285
 $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19286
 FUNCTION_TABLE_vi[$30 & 1023]($27); //@line 19287
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 505; //@line 19290
  HEAP32[$AsyncCtx5 + 4 >> 2] = $6; //@line 19292
  HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 19294
  HEAP8[$AsyncCtx5 + 12 >> 0] = $3; //@line 19296
  HEAP32[$AsyncCtx5 + 16 >> 2] = $5; //@line 19298
  HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 19300
  HEAP8[$AsyncCtx5 + 24 >> 0] = $26 & 1; //@line 19303
  sp = STACKTOP; //@line 19304
  return 0; //@line 19305
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19307
 if (!$26) {
  $$0 = 0; //@line 19309
  return $$0 | 0; //@line 19310
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $41 = HEAP32[$0 + 124 >> 2] | 0; //@line 19317
  $43 = HEAPU8[$1 >> 0] | 0; //@line 19319
  $47 = HEAP32[$41 + ($43 * 12 | 0) + 4 >> 2] | 0; //@line 19323
  $$038 = ($47 | 0) == 0 ? HEAP32[$41 + ($43 * 12 | 0) >> 2] | 0 : $47; //@line 19326
 } else {
  $$038 = $5; //@line 19328
 }
 $52 = HEAP32[$0 + 96 >> 2] | 0; //@line 19333
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 19335
 $55 = $3 & 255; //@line 19336
 $57 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $55 >> 0] | 0; //@line 19338
 $58 = HEAP32[$6 >> 2] | 0; //@line 19339
 $61 = HEAP32[(HEAP32[$58 >> 2] | 0) + 72 >> 2] | 0; //@line 19342
 $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 19343
 FUNCTION_TABLE_vi[$61 & 1023]($58); //@line 19344
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 506; //@line 19347
  HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 19349
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$038; //@line 19351
  HEAP8[$AsyncCtx9 + 12 >> 0] = $3; //@line 19353
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 19355
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 19357
  HEAP8[$AsyncCtx9 + 24 >> 0] = $57; //@line 19359
  HEAP32[$AsyncCtx9 + 28 >> 2] = $52; //@line 19361
  HEAP32[$AsyncCtx9 + 32 >> 2] = $54; //@line 19363
  HEAP32[$AsyncCtx9 + 36 >> 2] = $55; //@line 19365
  sp = STACKTOP; //@line 19366
  return 0; //@line 19367
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 19369
 $71 = HEAP32[$6 >> 2] | 0; //@line 19370
 $74 = HEAP32[(HEAP32[$71 >> 2] | 0) + 32 >> 2] | 0; //@line 19373
 $AsyncCtx12 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19374
 FUNCTION_TABLE_vii[$74 & 15]($71, $$038); //@line 19375
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 507; //@line 19378
  HEAP8[$AsyncCtx12 + 4 >> 0] = $3; //@line 19380
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 19382
  HEAP32[$AsyncCtx12 + 12 >> 2] = $6; //@line 19384
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 19386
  HEAP8[$AsyncCtx12 + 20 >> 0] = $57; //@line 19388
  HEAP32[$AsyncCtx12 + 24 >> 2] = $52; //@line 19390
  HEAP32[$AsyncCtx12 + 28 >> 2] = $54; //@line 19392
  HEAP32[$AsyncCtx12 + 32 >> 2] = $55; //@line 19394
  sp = STACKTOP; //@line 19395
  return 0; //@line 19396
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 19398
 do {
  if ($3 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 19406
   } else {
    $87 = HEAP32[$6 >> 2] | 0; //@line 19408
    $90 = HEAP32[(HEAP32[$87 >> 2] | 0) + 16 >> 2] | 0; //@line 19411
    $95 = HEAP32[$1 + 8 >> 2] & 65535; //@line 19416
    $98 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 19419
    $AsyncCtx16 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19420
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$90 & 1]($87, 0, 5e4, ($57 & 255) * 1e3 | 0, 0, 83333, 5, $95, 0, 0, 1, 0, 0, 0, $98); //@line 19421
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 508; //@line 19424
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 19426
     HEAP32[$AsyncCtx16 + 8 >> 2] = $52; //@line 19428
     HEAP32[$AsyncCtx16 + 12 >> 2] = $54; //@line 19430
     HEAP32[$AsyncCtx16 + 16 >> 2] = $55; //@line 19432
     HEAP32[$AsyncCtx16 + 20 >> 2] = $6; //@line 19434
     sp = STACKTOP; //@line 19435
     return 0; //@line 19436
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 19438
     $$036 = 0; //@line 19439
     break;
    }
   }
  } else {
   label = 19; //@line 19444
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $104 = HEAP32[$6 >> 2] | 0; //@line 19449
   $107 = HEAP32[(HEAP32[$104 >> 2] | 0) + 16 >> 2] | 0; //@line 19452
   $110 = HEAPU8[$1 + 2 >> 0] | 0; //@line 19455
   $114 = HEAP32[$1 + 8 >> 2] & 65535; //@line 19459
   $117 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 19462
   $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19463
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$107 & 1]($104, 1, $110, $57 & 255, 1, 0, 8, $114, 0, 0, 0, 0, 0, 1, $117); //@line 19464
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 509; //@line 19467
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 19469
    HEAP32[$AsyncCtx20 + 8 >> 2] = $52; //@line 19471
    HEAP32[$AsyncCtx20 + 12 >> 2] = $54; //@line 19473
    HEAP32[$AsyncCtx20 + 16 >> 2] = $55; //@line 19475
    HEAP32[$AsyncCtx20 + 20 >> 2] = $6; //@line 19477
    sp = STACKTOP; //@line 19478
    return 0; //@line 19479
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 19481
    $$036 = 1; //@line 19482
    break;
   }
  }
 } while (0);
 $126 = HEAP32[$6 >> 2] | 0; //@line 19493
 $129 = HEAP32[(HEAP32[$126 >> 2] | 0) + 44 >> 2] | 0; //@line 19496
 $132 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $52 : $54) + $55 >> 0] | 0) + 13 & 255; //@line 19499
 $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19500
 FUNCTION_TABLE_viii[$129 & 7]($126, $$036, $132); //@line 19501
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 510; //@line 19504
  HEAP32[$AsyncCtx24 + 4 >> 2] = $6; //@line 19506
  sp = STACKTOP; //@line 19507
  return 0; //@line 19508
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 19510
 $134 = HEAP32[$6 >> 2] | 0; //@line 19511
 $137 = HEAP32[(HEAP32[$134 >> 2] | 0) + 76 >> 2] | 0; //@line 19514
 $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 19515
 FUNCTION_TABLE_vi[$137 & 1023]($134); //@line 19516
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 511; //@line 19519
  sp = STACKTOP; //@line 19520
  return 0; //@line 19521
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 19523
 $$0 = 1; //@line 19524
 return $$0 | 0; //@line 19525
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $100 = 0, $102 = 0, $107 = 0, $110 = 0, $112 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $121 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $140 = 0, $147 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $161 = 0, $168 = 0, $169 = 0, $17 = 0, $172 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $187 = 0, $19 = 0, $190 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19992
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19994
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19996
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20000
 $8 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 20001
 $9 = $8 + 32 | 0; //@line 20002
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $2 + 32 | 0; //@line 20006
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 20011
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 20012
  $19 = HEAP32[$2 + 8 >> 2] | 0; //@line 20014
  do {
   if (($19 | 0) == 1e6) {
    $98 = $17; //@line 20018
    $99 = 0; //@line 20018
   } else {
    $22 = HEAP8[$2 + 57 >> 0] | 0; //@line 20021
    $24 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 20023
    $25 = tempRet0; //@line 20024
    if (!($22 << 24 >> 24)) {
     $59 = ___udivdi3($24 | 0, $25 | 0, $19 | 0, 0) | 0; //@line 20026
     $60 = tempRet0; //@line 20027
     $61 = ___muldi3($59 | 0, $60 | 0, $19 | 0, 0) | 0; //@line 20028
     $63 = _i64Subtract($24 | 0, $25 | 0, $61 | 0, tempRet0 | 0) | 0; //@line 20030
     $65 = $2 + 40 | 0; //@line 20032
     $66 = $65; //@line 20033
     $72 = _i64Add($63 | 0, tempRet0 | 0, HEAP32[$66 >> 2] | 0, HEAP32[$66 + 4 >> 2] | 0) | 0; //@line 20039
     $73 = tempRet0; //@line 20040
     $74 = $65; //@line 20041
     HEAP32[$74 >> 2] = $72; //@line 20043
     HEAP32[$74 + 4 >> 2] = $73; //@line 20046
     if ($73 >>> 0 < 0 | ($73 | 0) == 0 & $72 >>> 0 < $19 >>> 0) {
      $98 = $59; //@line 20053
      $99 = $60; //@line 20053
      break;
     }
     $83 = _i64Add($59 | 0, $60 | 0, 1, 0) | 0; //@line 20056
     $84 = tempRet0; //@line 20057
     $85 = _i64Subtract($72 | 0, $73 | 0, $19 | 0, 0) | 0; //@line 20058
     $87 = $65; //@line 20060
     HEAP32[$87 >> 2] = $85; //@line 20062
     HEAP32[$87 + 4 >> 2] = tempRet0; //@line 20065
     $98 = $83; //@line 20066
     $99 = $84; //@line 20066
     break;
    } else {
     $26 = $22 & 255; //@line 20069
     $27 = _bitshift64Lshr($24 | 0, $25 | 0, $26 | 0) | 0; //@line 20070
     $28 = tempRet0; //@line 20071
     $29 = _bitshift64Shl($27 | 0, $28 | 0, $26 | 0) | 0; //@line 20072
     $31 = _i64Subtract($24 | 0, $25 | 0, $29 | 0, tempRet0 | 0) | 0; //@line 20074
     $33 = $2 + 40 | 0; //@line 20076
     $34 = $33; //@line 20077
     $40 = _i64Add(HEAP32[$34 >> 2] | 0, HEAP32[$34 + 4 >> 2] | 0, $31 | 0, tempRet0 | 0) | 0; //@line 20083
     $41 = tempRet0; //@line 20084
     $42 = $33; //@line 20085
     HEAP32[$42 >> 2] = $40; //@line 20087
     HEAP32[$42 + 4 >> 2] = $41; //@line 20090
     if ($41 >>> 0 < 0 | ($41 | 0) == 0 & $40 >>> 0 < $19 >>> 0) {
      $98 = $27; //@line 20097
      $99 = $28; //@line 20097
      break;
     }
     $51 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 20100
     $52 = tempRet0; //@line 20101
     $53 = _i64Subtract($40 | 0, $41 | 0, $19 | 0, 0) | 0; //@line 20102
     $55 = $33; //@line 20104
     HEAP32[$55 >> 2] = $53; //@line 20106
     HEAP32[$55 + 4 >> 2] = tempRet0; //@line 20109
     $98 = $51; //@line 20110
     $99 = $52; //@line 20110
     break;
    }
   }
  } while (0);
  $91 = $2 + 48 | 0; //@line 20115
  $92 = $91; //@line 20116
  $100 = _i64Add(HEAP32[$92 >> 2] | 0, HEAP32[$92 + 4 >> 2] | 0, $98 | 0, $99 | 0) | 0; //@line 20122
  $102 = $91; //@line 20124
  HEAP32[$102 >> 2] = $100; //@line 20126
  HEAP32[$102 + 4 >> 2] = tempRet0; //@line 20129
 }
 $107 = HEAP32[$8 + 4 >> 2] | 0; //@line 20132
 if (!$107) {
  $187 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 20142
  $190 = HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0; //@line 20145
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 20146
  FUNCTION_TABLE_vi[$190 & 1023]($187); //@line 20147
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 616; //@line 20150
   sp = STACKTOP; //@line 20151
   return;
  }
  ___async_unwind = 0; //@line 20154
  HEAP32[$ReallocAsyncCtx7 >> 2] = 616; //@line 20155
  sp = STACKTOP; //@line 20156
  return;
 }
 $110 = $8 + 48 | 0; //@line 20160
 $112 = HEAP32[$110 >> 2] | 0; //@line 20162
 $115 = HEAP32[$110 + 4 >> 2] | 0; //@line 20165
 $116 = $107; //@line 20166
 $118 = HEAP32[$116 >> 2] | 0; //@line 20168
 $121 = HEAP32[$116 + 4 >> 2] | 0; //@line 20171
 if (!($121 >>> 0 > $115 >>> 0 | ($121 | 0) == ($115 | 0) & $118 >>> 0 > $112 >>> 0)) {
  $129 = HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0; //@line 20180
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20181
  FUNCTION_TABLE_v[$129 & 7](); //@line 20182
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 611; //@line 20185
   sp = STACKTOP; //@line 20186
   return;
  }
  ___async_unwind = 0; //@line 20189
  HEAP32[$ReallocAsyncCtx2 >> 2] = 611; //@line 20190
  sp = STACKTOP; //@line 20191
  return;
 }
 $130 = _i64Subtract($118 | 0, $121 | 0, $112 | 0, $115 | 0) | 0; //@line 20194
 $131 = tempRet0; //@line 20195
 $133 = HEAP32[$8 + 16 >> 2] | 0; //@line 20197
 $135 = $8 + 24 | 0; //@line 20199
 $140 = HEAP32[$135 + 4 >> 2] | 0; //@line 20204
 do {
  if ($131 >>> 0 > $140 >>> 0 | (($131 | 0) == ($140 | 0) ? $130 >>> 0 > (HEAP32[$135 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $133; //@line 20212
  } else {
   $147 = HEAP32[$8 + 8 >> 2] | 0; //@line 20215
   if (($147 | 0) == 1e6) {
    $$0$i = $133 >>> 0 < $130 >>> 0 ? $133 : $130; //@line 20220
    break;
   }
   $151 = HEAP8[$8 + 57 >> 0] | 0; //@line 20224
   if (!($151 << 24 >> 24)) {
    $159 = ___muldi3($130 | 0, $131 | 0, $147 | 0, 0) | 0; //@line 20227
    $161 = ___udivdi3($159 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 20229
    $$0$i = $133 >>> 0 < $161 >>> 0 ? $133 : $161; //@line 20233
    break;
   } else {
    $154 = _bitshift64Shl($130 | 0, $131 | 0, $151 & 255 | 0) | 0; //@line 20237
    $156 = ___udivdi3($154 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 20239
    $$0$i = $133 >>> 0 < $156 >>> 0 ? $133 : $156; //@line 20243
    break;
   }
  }
 } while (0);
 $168 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 20252
 $169 = $2 + 32 | 0; //@line 20253
 $172 = HEAP32[$4 >> 2] | 0; //@line 20256
 if (($168 | 0) == (HEAP32[$169 >> 2] | 0)) {
  $174 = HEAP32[$172 + 20 >> 2] | 0; //@line 20259
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 20260
  FUNCTION_TABLE_v[$174 & 7](); //@line 20261
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 612; //@line 20264
   sp = STACKTOP; //@line 20265
   return;
  }
  ___async_unwind = 0; //@line 20268
  HEAP32[$ReallocAsyncCtx3 >> 2] = 612; //@line 20269
  sp = STACKTOP; //@line 20270
  return;
 } else {
  $176 = HEAP32[$172 + 16 >> 2] | 0; //@line 20274
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 20275
  FUNCTION_TABLE_vi[$176 & 1023]($168); //@line 20276
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 613; //@line 20279
   $177 = $ReallocAsyncCtx4 + 4 | 0; //@line 20280
   HEAP32[$177 >> 2] = $4; //@line 20281
   $178 = $ReallocAsyncCtx4 + 8 | 0; //@line 20282
   HEAP32[$178 >> 2] = $169; //@line 20283
   $179 = $ReallocAsyncCtx4 + 12 | 0; //@line 20284
   HEAP32[$179 >> 2] = $168; //@line 20285
   sp = STACKTOP; //@line 20286
   return;
  }
  ___async_unwind = 0; //@line 20289
  HEAP32[$ReallocAsyncCtx4 >> 2] = 613; //@line 20290
  $177 = $ReallocAsyncCtx4 + 4 | 0; //@line 20291
  HEAP32[$177 >> 2] = $4; //@line 20292
  $178 = $ReallocAsyncCtx4 + 8 | 0; //@line 20293
  HEAP32[$178 >> 2] = $169; //@line 20294
  $179 = $ReallocAsyncCtx4 + 12 | 0; //@line 20295
  HEAP32[$179 >> 2] = $168; //@line 20296
  sp = STACKTOP; //@line 20297
  return;
 }
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6935
 STACKTOP = STACKTOP + 32 | 0; //@line 6936
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6936
 $0 = sp; //@line 6937
 _gpio_init_out($0, 50); //@line 6938
 while (1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6941
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6942
  _wait_ms(150); //@line 6943
  if (___async) {
   label = 3; //@line 6946
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 6949
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6951
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6952
  _wait_ms(150); //@line 6953
  if (___async) {
   label = 5; //@line 6956
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 6959
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6961
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6962
  _wait_ms(150); //@line 6963
  if (___async) {
   label = 7; //@line 6966
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 6969
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6971
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6972
  _wait_ms(150); //@line 6973
  if (___async) {
   label = 9; //@line 6976
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 6979
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6981
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6982
  _wait_ms(150); //@line 6983
  if (___async) {
   label = 11; //@line 6986
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 6989
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6991
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6992
  _wait_ms(150); //@line 6993
  if (___async) {
   label = 13; //@line 6996
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6999
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 7001
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7002
  _wait_ms(150); //@line 7003
  if (___async) {
   label = 15; //@line 7006
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 7009
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 7011
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7012
  _wait_ms(150); //@line 7013
  if (___async) {
   label = 17; //@line 7016
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 7019
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 7021
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7022
  _wait_ms(400); //@line 7023
  if (___async) {
   label = 19; //@line 7026
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 7029
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 7031
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7032
  _wait_ms(400); //@line 7033
  if (___async) {
   label = 21; //@line 7036
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 7039
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 7041
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7042
  _wait_ms(400); //@line 7043
  if (___async) {
   label = 23; //@line 7046
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7049
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 7051
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7052
  _wait_ms(400); //@line 7053
  if (___async) {
   label = 25; //@line 7056
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7059
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 7061
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7062
  _wait_ms(400); //@line 7063
  if (___async) {
   label = 27; //@line 7066
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 7069
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 7071
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7072
  _wait_ms(400); //@line 7073
  if (___async) {
   label = 29; //@line 7076
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7079
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 7081
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7082
  _wait_ms(400); //@line 7083
  if (___async) {
   label = 31; //@line 7086
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7089
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 7091
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7092
  _wait_ms(400); //@line 7093
  if (___async) {
   label = 33; //@line 7096
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7099
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 621; //@line 7103
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 7105
   sp = STACKTOP; //@line 7106
   STACKTOP = sp; //@line 7107
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 622; //@line 7111
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 7113
   sp = STACKTOP; //@line 7114
   STACKTOP = sp; //@line 7115
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 623; //@line 7119
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 7121
   sp = STACKTOP; //@line 7122
   STACKTOP = sp; //@line 7123
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 624; //@line 7127
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 7129
   sp = STACKTOP; //@line 7130
   STACKTOP = sp; //@line 7131
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 625; //@line 7135
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 7137
   sp = STACKTOP; //@line 7138
   STACKTOP = sp; //@line 7139
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 626; //@line 7143
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 7145
   sp = STACKTOP; //@line 7146
   STACKTOP = sp; //@line 7147
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 627; //@line 7151
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 7153
   sp = STACKTOP; //@line 7154
   STACKTOP = sp; //@line 7155
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 628; //@line 7159
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 7161
   sp = STACKTOP; //@line 7162
   STACKTOP = sp; //@line 7163
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 629; //@line 7167
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 7169
   sp = STACKTOP; //@line 7170
   STACKTOP = sp; //@line 7171
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 630; //@line 7175
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 7177
   sp = STACKTOP; //@line 7178
   STACKTOP = sp; //@line 7179
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 631; //@line 7183
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 7185
   sp = STACKTOP; //@line 7186
   STACKTOP = sp; //@line 7187
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 632; //@line 7191
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 7193
   sp = STACKTOP; //@line 7194
   STACKTOP = sp; //@line 7195
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 633; //@line 7199
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 7201
   sp = STACKTOP; //@line 7202
   STACKTOP = sp; //@line 7203
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 634; //@line 7207
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 7209
   sp = STACKTOP; //@line 7210
   STACKTOP = sp; //@line 7211
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 635; //@line 7215
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 7217
   sp = STACKTOP; //@line 7218
   STACKTOP = sp; //@line 7219
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 636; //@line 7223
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7225
   sp = STACKTOP; //@line 7226
   STACKTOP = sp; //@line 7227
   return;
  }
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_298($0) {
 $0 = $0 | 0;
 var $$pre124 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 23716
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23718
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23720
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23722
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23724
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23726
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23728
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23730
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23732
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23734
 $$pre124 = HEAP32[$10 >> 2] | 0; //@line 23735
 if ($$pre124 | 0) {
  $21 = HEAP32[$$pre124 + 4 >> 2] | 0; //@line 23739
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 23740
  FUNCTION_TABLE_vii[$21 & 15]($18, $14); //@line 23741
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 23744
   $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 23745
   HEAP32[$22 >> 2] = $2; //@line 23746
   $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 23747
   HEAP32[$23 >> 2] = $4; //@line 23748
   $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 23749
   HEAP32[$24 >> 2] = $6; //@line 23750
   $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 23751
   HEAP32[$25 >> 2] = $8; //@line 23752
   $26 = $ReallocAsyncCtx8 + 20 | 0; //@line 23753
   HEAP32[$26 >> 2] = $10; //@line 23754
   $27 = $ReallocAsyncCtx8 + 24 | 0; //@line 23755
   HEAP32[$27 >> 2] = $12; //@line 23756
   $28 = $ReallocAsyncCtx8 + 28 | 0; //@line 23757
   HEAP32[$28 >> 2] = $14; //@line 23758
   $29 = $ReallocAsyncCtx8 + 32 | 0; //@line 23759
   HEAP32[$29 >> 2] = $16; //@line 23760
   sp = STACKTOP; //@line 23761
   return;
  }
  ___async_unwind = 0; //@line 23764
  HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 23765
  $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 23766
  HEAP32[$22 >> 2] = $2; //@line 23767
  $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 23768
  HEAP32[$23 >> 2] = $4; //@line 23769
  $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 23770
  HEAP32[$24 >> 2] = $6; //@line 23771
  $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 23772
  HEAP32[$25 >> 2] = $8; //@line 23773
  $26 = $ReallocAsyncCtx8 + 20 | 0; //@line 23774
  HEAP32[$26 >> 2] = $10; //@line 23775
  $27 = $ReallocAsyncCtx8 + 24 | 0; //@line 23776
  HEAP32[$27 >> 2] = $12; //@line 23777
  $28 = $ReallocAsyncCtx8 + 28 | 0; //@line 23778
  HEAP32[$28 >> 2] = $14; //@line 23779
  $29 = $ReallocAsyncCtx8 + 32 | 0; //@line 23780
  HEAP32[$29 >> 2] = $16; //@line 23781
  sp = STACKTOP; //@line 23782
  return;
 }
 HEAP32[$12 >> 2] = 0; //@line 23785
 $30 = $16 + 12 | 0; //@line 23786
 HEAP32[$16 >> 2] = 177; //@line 23787
 HEAP32[$16 + 4 >> 2] = 0; //@line 23789
 HEAP32[$16 + 8 >> 2] = $4; //@line 23791
 HEAP32[$30 >> 2] = 824; //@line 23792
 $31 = $4 + 2400 | 0; //@line 23793
 if (($31 | 0) == ($16 | 0)) {
  $56 = HEAP32[208] | 0; //@line 23797
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 23798
  FUNCTION_TABLE_vi[$56 & 1023]($16); //@line 23799
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 23802
   $57 = $ReallocAsyncCtx12 + 4 | 0; //@line 23803
   HEAP32[$57 >> 2] = $2; //@line 23804
   $58 = $ReallocAsyncCtx12 + 8 | 0; //@line 23805
   HEAP32[$58 >> 2] = $4; //@line 23806
   $59 = $ReallocAsyncCtx12 + 12 | 0; //@line 23807
   HEAP32[$59 >> 2] = $6; //@line 23808
   $60 = $ReallocAsyncCtx12 + 16 | 0; //@line 23809
   HEAP32[$60 >> 2] = $16; //@line 23810
   $61 = $ReallocAsyncCtx12 + 20 | 0; //@line 23811
   HEAP32[$61 >> 2] = $8; //@line 23812
   sp = STACKTOP; //@line 23813
   return;
  }
  ___async_unwind = 0; //@line 23816
  HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 23817
  $57 = $ReallocAsyncCtx12 + 4 | 0; //@line 23818
  HEAP32[$57 >> 2] = $2; //@line 23819
  $58 = $ReallocAsyncCtx12 + 8 | 0; //@line 23820
  HEAP32[$58 >> 2] = $4; //@line 23821
  $59 = $ReallocAsyncCtx12 + 12 | 0; //@line 23822
  HEAP32[$59 >> 2] = $6; //@line 23823
  $60 = $ReallocAsyncCtx12 + 16 | 0; //@line 23824
  HEAP32[$60 >> 2] = $16; //@line 23825
  $61 = $ReallocAsyncCtx12 + 20 | 0; //@line 23826
  HEAP32[$61 >> 2] = $8; //@line 23827
  sp = STACKTOP; //@line 23828
  return;
 }
 $33 = $4 + 2412 | 0; //@line 23831
 $34 = HEAP32[$33 >> 2] | 0; //@line 23832
 if (!$34) {
  $47 = HEAP32[207] | 0; //@line 23836
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 23837
  FUNCTION_TABLE_vii[$47 & 15]($31, $16); //@line 23838
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 23841
   $48 = $ReallocAsyncCtx11 + 4 | 0; //@line 23842
   HEAP32[$48 >> 2] = $2; //@line 23843
   $49 = $ReallocAsyncCtx11 + 8 | 0; //@line 23844
   HEAP32[$49 >> 2] = $30; //@line 23845
   $50 = $ReallocAsyncCtx11 + 12 | 0; //@line 23846
   HEAP32[$50 >> 2] = $33; //@line 23847
   $51 = $ReallocAsyncCtx11 + 16 | 0; //@line 23848
   HEAP32[$51 >> 2] = $4; //@line 23849
   $52 = $ReallocAsyncCtx11 + 20 | 0; //@line 23850
   HEAP32[$52 >> 2] = $16; //@line 23851
   $53 = $ReallocAsyncCtx11 + 24 | 0; //@line 23852
   HEAP32[$53 >> 2] = $6; //@line 23853
   $54 = $ReallocAsyncCtx11 + 28 | 0; //@line 23854
   HEAP32[$54 >> 2] = $8; //@line 23855
   sp = STACKTOP; //@line 23856
   return;
  }
  ___async_unwind = 0; //@line 23859
  HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 23860
  $48 = $ReallocAsyncCtx11 + 4 | 0; //@line 23861
  HEAP32[$48 >> 2] = $2; //@line 23862
  $49 = $ReallocAsyncCtx11 + 8 | 0; //@line 23863
  HEAP32[$49 >> 2] = $30; //@line 23864
  $50 = $ReallocAsyncCtx11 + 12 | 0; //@line 23865
  HEAP32[$50 >> 2] = $33; //@line 23866
  $51 = $ReallocAsyncCtx11 + 16 | 0; //@line 23867
  HEAP32[$51 >> 2] = $4; //@line 23868
  $52 = $ReallocAsyncCtx11 + 20 | 0; //@line 23869
  HEAP32[$52 >> 2] = $16; //@line 23870
  $53 = $ReallocAsyncCtx11 + 24 | 0; //@line 23871
  HEAP32[$53 >> 2] = $6; //@line 23872
  $54 = $ReallocAsyncCtx11 + 28 | 0; //@line 23873
  HEAP32[$54 >> 2] = $8; //@line 23874
  sp = STACKTOP; //@line 23875
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 23879
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 23880
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 23881
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 178; //@line 23884
   $38 = $ReallocAsyncCtx10 + 4 | 0; //@line 23885
   HEAP32[$38 >> 2] = $2; //@line 23886
   $39 = $ReallocAsyncCtx10 + 8 | 0; //@line 23887
   HEAP32[$39 >> 2] = $30; //@line 23888
   $40 = $ReallocAsyncCtx10 + 12 | 0; //@line 23889
   HEAP32[$40 >> 2] = $33; //@line 23890
   $41 = $ReallocAsyncCtx10 + 16 | 0; //@line 23891
   HEAP32[$41 >> 2] = $4; //@line 23892
   $42 = $ReallocAsyncCtx10 + 20 | 0; //@line 23893
   HEAP32[$42 >> 2] = $16; //@line 23894
   $43 = $ReallocAsyncCtx10 + 24 | 0; //@line 23895
   HEAP32[$43 >> 2] = $6; //@line 23896
   $44 = $ReallocAsyncCtx10 + 28 | 0; //@line 23897
   HEAP32[$44 >> 2] = $8; //@line 23898
   $45 = $ReallocAsyncCtx10 + 32 | 0; //@line 23899
   HEAP32[$45 >> 2] = $31; //@line 23900
   sp = STACKTOP; //@line 23901
   return;
  }
  ___async_unwind = 0; //@line 23904
  HEAP32[$ReallocAsyncCtx10 >> 2] = 178; //@line 23905
  $38 = $ReallocAsyncCtx10 + 4 | 0; //@line 23906
  HEAP32[$38 >> 2] = $2; //@line 23907
  $39 = $ReallocAsyncCtx10 + 8 | 0; //@line 23908
  HEAP32[$39 >> 2] = $30; //@line 23909
  $40 = $ReallocAsyncCtx10 + 12 | 0; //@line 23910
  HEAP32[$40 >> 2] = $33; //@line 23911
  $41 = $ReallocAsyncCtx10 + 16 | 0; //@line 23912
  HEAP32[$41 >> 2] = $4; //@line 23913
  $42 = $ReallocAsyncCtx10 + 20 | 0; //@line 23914
  HEAP32[$42 >> 2] = $16; //@line 23915
  $43 = $ReallocAsyncCtx10 + 24 | 0; //@line 23916
  HEAP32[$43 >> 2] = $6; //@line 23917
  $44 = $ReallocAsyncCtx10 + 28 | 0; //@line 23918
  HEAP32[$44 >> 2] = $8; //@line 23919
  $45 = $ReallocAsyncCtx10 + 32 | 0; //@line 23920
  HEAP32[$45 >> 2] = $31; //@line 23921
  sp = STACKTOP; //@line 23922
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$2 = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $100 = 0, $103 = 0, $11 = 0, $115 = 0, $12 = 0, $13 = 0, $137 = 0, $14 = 0, $142 = 0, $147 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $53 = 0, $55 = 0, $6 = 0, $73 = 0, $74 = 0, $76 = 0, $8 = 0, $84 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 13827
 STACKTOP = STACKTOP + 48 | 0; //@line 13828
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 13828
 $vararg_buffer1 = sp + 8 | 0; //@line 13829
 $vararg_buffer = sp; //@line 13830
 $1 = sp + 40 | 0; //@line 13831
 $2 = sp + 28 | 0; //@line 13832
 $3 = sp + 24 | 0; //@line 13833
 HEAP32[$3 >> 2] = 0; //@line 13834
 switch (HEAP8[$0 + 1932 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 1784 | 0; //@line 13839
   HEAP32[$6 >> 2] = 0; //@line 13840
   $$pre$phiZ2D = $6; //@line 13841
   break;
  }
 case -1:
  {
   $$2 = -1011; //@line 13845
   STACKTOP = sp; //@line 13846
   return $$2 | 0; //@line 13846
  }
 default:
  {
   $$pre$phiZ2D = $0 + 1784 | 0; //@line 13851
  }
 }
 $8 = HEAP8[$0 + 1183 >> 0] | 0; //@line 13855
 $11 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, HEAP32[$0 + 1788 >> 2] | 0) | 0; //@line 13858
 $12 = $0 + 1179 | 0; //@line 13859
 HEAP8[$12 >> 0] = 1; //@line 13860
 $13 = $0 + 4 | 0; //@line 13861
 $14 = $0 + 2376 | 0; //@line 13862
 $20 = $0 + 1792 | 0; //@line 13868
 __ZN7LoRaPHY17calculate_backoffEbbbhjj($13, (HEAP8[$14 >> 0] | 0) != 0, (HEAP8[$0 + 1180 >> 0] | 0) != 0, 1, $8, $11, HEAP32[$20 >> 2] | 0); //@line 13870
 $22 = HEAP32[$20 >> 2] | 0; //@line 13871
 $27 = (Math_imul($22, HEAPU16[$0 + 1934 >> 1] | 0) | 0) - $22 | 0; //@line 13876
 HEAP32[$$pre$phiZ2D >> 2] = $27; //@line 13877
 HEAP32[$2 >> 2] = $27; //@line 13878
 $28 = $0 + 1877 | 0; //@line 13879
 $30 = $2 + 8 | 0; //@line 13881
 HEAP8[$30 >> 0] = HEAP8[$28 >> 0] | 0; //@line 13882
 HEAP8[$12 >> 0] = 1; //@line 13883
 HEAP8[$2 + 10 >> 0] = 1; //@line 13885
 HEAP8[$2 + 9 >> 0] = HEAP8[$14 >> 0] | 0; //@line 13888
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 1780 >> 2]; //@line 13892
 $37 = $0 + 1182 | 0; //@line 13893
 $38 = __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($13, $2, $37, $3, $$pre$phiZ2D) | 0; //@line 13894
 switch ($38 | 0) {
 case -1020:
  {
   $39 = HEAP32[$3 >> 2] | 0; //@line 13897
   if (!$39) {
    $$2 = 0; //@line 13900
    STACKTOP = sp; //@line 13901
    return $$2 | 0; //@line 13901
   }
   HEAP32[$vararg_buffer >> 2] = $39; //@line 13903
   _mbed_tracef(16, 12866, 12980, $vararg_buffer); //@line 13904
   $42 = HEAP32[$3 >> 2] | 0; //@line 13906
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13907
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1796 | 0, $42); //@line 13908
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 416; //@line 13911
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 13913
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13915
    sp = STACKTOP; //@line 13916
    STACKTOP = sp; //@line 13917
    return 0; //@line 13917
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13919
   $$2 = 0; //@line 13920
   STACKTOP = sp; //@line 13921
   return $$2 | 0; //@line 13921
  }
 case -1022:
 case -1021:
  {
   $$2 = $38; //@line 13925
   STACKTOP = sp; //@line 13926
   return $$2 | 0; //@line 13926
  }
 default:
  {
   $48 = HEAP8[$30 >> 0] | 0; //@line 13933
   HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$37 >> 0]; //@line 13934
   HEAP32[$vararg_buffer1 + 4 >> 2] = $48; //@line 13936
   _mbed_tracef(16, 12866, 13016, $vararg_buffer1); //@line 13937
   $53 = $0 + 1884 | 0; //@line 13942
   $55 = $0 + 1880 | 0; //@line 13944
   __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($13, __ZN7LoRaPHY15apply_DR_offsetEaa($13, HEAP8[$28 >> 0] | 0, HEAP8[$0 + 1909 >> 0] | 0) | 0, HEAP8[$53 >> 0] | 0, HEAP32[$55 >> 2] | 0, $0 + 1940 | 0); //@line 13947
   __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($13, HEAP8[$0 + 1916 >> 0] | 0, HEAP8[$53 >> 0] | 0, HEAP32[$55 >> 2] | 0, $0 + 1964 | 0); //@line 13953
   do {
    if (!(HEAP8[$14 >> 0] | 0)) {
     HEAP32[$0 + 1772 >> 2] = (HEAP32[$0 + 1952 >> 2] | 0) + (HEAP32[$0 + 1900 >> 2] | 0); //@line 13964
     $$sink = $0 + 1904 | 0; //@line 13966
    } else {
     $73 = HEAP16[$0 + 1440 >> 1] | 0; //@line 13969
     $74 = HEAP8[$28 >> 0] | 0; //@line 13970
     $76 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 476 | 0) | 0; //@line 13972
     $84 = ($76 & 255) + ($73 & 65535) & 65535; //@line 13980
     if ($84 >>> 0 < 256 & $84 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($13, $74, (HEAP8[$0 + 1173 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
      HEAP32[$0 + 1772 >> 2] = (HEAP32[$0 + 1952 >> 2] | 0) + (HEAP32[$0 + 1892 >> 2] | 0); //@line 13992
      $$sink = $0 + 1896 | 0; //@line 13994
      break;
     } else {
      $$2 = -1010; //@line 13997
      STACKTOP = sp; //@line 13998
      return $$2 | 0; //@line 13998
     }
    }
   } while (0);
   HEAP32[$0 + 1776 >> 2] = (HEAP32[$0 + 1976 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 14007
   $100 = $0 + 1178 | 0; //@line 14008
   if (HEAP8[$100 >> 0] | 0) {
    HEAP8[$100 >> 0] = 0; //@line 14012
   }
   $103 = HEAP8[$37 >> 0] | 0; //@line 14014
   HEAP8[$1 >> 0] = 0; //@line 14015
   HEAP8[$vararg_buffer1 >> 0] = $103; //@line 14016
   HEAP8[$vararg_buffer1 + 1 >> 0] = HEAP8[$28 >> 0] | 0; //@line 14019
   HEAP8[$vararg_buffer1 + 2 >> 0] = HEAP8[$0 + 1876 >> 0] | 0; //@line 14023
   HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1924 >> 2]; //@line 14027
   HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1928 >> 2]; //@line 14031
   $115 = $0 + 1440 | 0; //@line 14032
   HEAP16[$vararg_buffer1 + 12 >> 1] = HEAP16[$115 >> 1] | 0; //@line 14035
   $AsyncCtx10 = _emscripten_alloc_async_context(48, sp) | 0; //@line 14036
   __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($13, $vararg_buffer1, $1, $20) | 0; //@line 14037
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 417; //@line 14040
    HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 14042
    HEAP32[$AsyncCtx10 + 8 >> 2] = $28; //@line 14044
    HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 14046
    HEAP8[$AsyncCtx10 + 16 >> 0] = $103; //@line 14048
    HEAP32[$AsyncCtx10 + 20 >> 2] = $20; //@line 14050
    HEAP32[$AsyncCtx10 + 24 >> 2] = $14; //@line 14052
    HEAP32[$AsyncCtx10 + 28 >> 2] = $115; //@line 14054
    HEAP32[$AsyncCtx10 + 32 >> 2] = $13; //@line 14056
    HEAP32[$AsyncCtx10 + 36 >> 2] = $vararg_buffer1; //@line 14058
    HEAP32[$AsyncCtx10 + 40 >> 2] = $3; //@line 14060
    HEAP32[$AsyncCtx10 + 44 >> 2] = $2; //@line 14062
    sp = STACKTOP; //@line 14063
    STACKTOP = sp; //@line 14064
    return 0; //@line 14064
   }
   _emscripten_free_async_context($AsyncCtx10 | 0); //@line 14066
   HEAP32[$0 + 2092 >> 2] = 1; //@line 14068
   HEAP32[$0 + 2056 >> 2] = 1; //@line 14070
   HEAP8[$0 + 2060 >> 0] = HEAP8[$28 >> 0] | 0; //@line 14073
   HEAP8[$0 + 2061 >> 0] = HEAP8[$1 >> 0] | 0; //@line 14076
   HEAP32[$0 + 2072 >> 2] = $103 & 255; //@line 14079
   $137 = HEAP32[$20 >> 2] | 0; //@line 14080
   HEAP32[$0 + 2064 >> 2] = $137; //@line 14082
   HEAP32[$0 + 2096 >> 2] = $137; //@line 14084
   if (!(HEAP8[$14 >> 0] | 0)) {
    $142 = $0 + 1701 | 0; //@line 14088
    HEAP8[$142 >> 0] = (HEAP8[$142 >> 0] | 0) + 1 << 24 >> 24; //@line 14091
   }
   $147 = HEAP16[$115 >> 1] & 255; //@line 14095
   $AsyncCtx6 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14096
   __ZN7LoRaPHY11handle_sendEPhh($13, $0 + 1185 | 0, $147); //@line 14097
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 418; //@line 14100
    HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 14102
    HEAP32[$AsyncCtx6 + 8 >> 2] = $vararg_buffer1; //@line 14104
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 14106
    HEAP32[$AsyncCtx6 + 16 >> 2] = $2; //@line 14108
    sp = STACKTOP; //@line 14109
    STACKTOP = sp; //@line 14110
    return 0; //@line 14110
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 14112
   $$2 = 0; //@line 14113
   STACKTOP = sp; //@line 14114
   return $$2 | 0; //@line 14114
  }
 }
 return 0; //@line 14117
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_299($0) {
 $0 = $0 | 0;
 var $$pre$i$i38 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23932
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23934
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23936
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23938
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23940
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23946
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23948
 $$pre$i$i38 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 23949
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i38; //@line 23951
 if ($$pre$i$i38 | 0) {
  $20 = HEAP32[$$pre$i$i38 + 8 >> 2] | 0; //@line 23955
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 23956
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 23957
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 23960
   $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 23961
   HEAP32[$21 >> 2] = $2; //@line 23962
   $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 23963
   HEAP32[$22 >> 2] = $4; //@line 23964
   $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 23965
   HEAP32[$23 >> 2] = $6; //@line 23966
   $24 = $ReallocAsyncCtx9 + 16 | 0; //@line 23967
   HEAP32[$24 >> 2] = $8; //@line 23968
   $25 = $ReallocAsyncCtx9 + 20 | 0; //@line 23969
   HEAP32[$25 >> 2] = $14; //@line 23970
   $26 = $ReallocAsyncCtx9 + 24 | 0; //@line 23971
   HEAP32[$26 >> 2] = $16; //@line 23972
   sp = STACKTOP; //@line 23973
   return;
  }
  ___async_unwind = 0; //@line 23976
  HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 23977
  $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 23978
  HEAP32[$21 >> 2] = $2; //@line 23979
  $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 23980
  HEAP32[$22 >> 2] = $4; //@line 23981
  $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 23982
  HEAP32[$23 >> 2] = $6; //@line 23983
  $24 = $ReallocAsyncCtx9 + 16 | 0; //@line 23984
  HEAP32[$24 >> 2] = $8; //@line 23985
  $25 = $ReallocAsyncCtx9 + 20 | 0; //@line 23986
  HEAP32[$25 >> 2] = $14; //@line 23987
  $26 = $ReallocAsyncCtx9 + 24 | 0; //@line 23988
  HEAP32[$26 >> 2] = $16; //@line 23989
  sp = STACKTOP; //@line 23990
  return;
 }
 $27 = $16 + 12 | 0; //@line 23993
 HEAP32[$16 >> 2] = 177; //@line 23994
 HEAP32[$16 + 4 >> 2] = 0; //@line 23996
 HEAP32[$16 + 8 >> 2] = $4; //@line 23998
 HEAP32[$27 >> 2] = 824; //@line 23999
 $28 = $4 + 2400 | 0; //@line 24000
 if (($28 | 0) == ($16 | 0)) {
  $53 = HEAP32[208] | 0; //@line 24004
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 24005
  FUNCTION_TABLE_vi[$53 & 1023]($16); //@line 24006
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 24009
   $54 = $ReallocAsyncCtx12 + 4 | 0; //@line 24010
   HEAP32[$54 >> 2] = $2; //@line 24011
   $55 = $ReallocAsyncCtx12 + 8 | 0; //@line 24012
   HEAP32[$55 >> 2] = $4; //@line 24013
   $56 = $ReallocAsyncCtx12 + 12 | 0; //@line 24014
   HEAP32[$56 >> 2] = $6; //@line 24015
   $57 = $ReallocAsyncCtx12 + 16 | 0; //@line 24016
   HEAP32[$57 >> 2] = $16; //@line 24017
   $58 = $ReallocAsyncCtx12 + 20 | 0; //@line 24018
   HEAP32[$58 >> 2] = $8; //@line 24019
   sp = STACKTOP; //@line 24020
   return;
  }
  ___async_unwind = 0; //@line 24023
  HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 24024
  $54 = $ReallocAsyncCtx12 + 4 | 0; //@line 24025
  HEAP32[$54 >> 2] = $2; //@line 24026
  $55 = $ReallocAsyncCtx12 + 8 | 0; //@line 24027
  HEAP32[$55 >> 2] = $4; //@line 24028
  $56 = $ReallocAsyncCtx12 + 12 | 0; //@line 24029
  HEAP32[$56 >> 2] = $6; //@line 24030
  $57 = $ReallocAsyncCtx12 + 16 | 0; //@line 24031
  HEAP32[$57 >> 2] = $16; //@line 24032
  $58 = $ReallocAsyncCtx12 + 20 | 0; //@line 24033
  HEAP32[$58 >> 2] = $8; //@line 24034
  sp = STACKTOP; //@line 24035
  return;
 }
 $30 = $4 + 2412 | 0; //@line 24038
 $31 = HEAP32[$30 >> 2] | 0; //@line 24039
 if (!$31) {
  $44 = HEAP32[207] | 0; //@line 24043
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 24044
  FUNCTION_TABLE_vii[$44 & 15]($28, $16); //@line 24045
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 24048
   $45 = $ReallocAsyncCtx11 + 4 | 0; //@line 24049
   HEAP32[$45 >> 2] = $2; //@line 24050
   $46 = $ReallocAsyncCtx11 + 8 | 0; //@line 24051
   HEAP32[$46 >> 2] = $27; //@line 24052
   $47 = $ReallocAsyncCtx11 + 12 | 0; //@line 24053
   HEAP32[$47 >> 2] = $30; //@line 24054
   $48 = $ReallocAsyncCtx11 + 16 | 0; //@line 24055
   HEAP32[$48 >> 2] = $4; //@line 24056
   $49 = $ReallocAsyncCtx11 + 20 | 0; //@line 24057
   HEAP32[$49 >> 2] = $16; //@line 24058
   $50 = $ReallocAsyncCtx11 + 24 | 0; //@line 24059
   HEAP32[$50 >> 2] = $6; //@line 24060
   $51 = $ReallocAsyncCtx11 + 28 | 0; //@line 24061
   HEAP32[$51 >> 2] = $8; //@line 24062
   sp = STACKTOP; //@line 24063
   return;
  }
  ___async_unwind = 0; //@line 24066
  HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 24067
  $45 = $ReallocAsyncCtx11 + 4 | 0; //@line 24068
  HEAP32[$45 >> 2] = $2; //@line 24069
  $46 = $ReallocAsyncCtx11 + 8 | 0; //@line 24070
  HEAP32[$46 >> 2] = $27; //@line 24071
  $47 = $ReallocAsyncCtx11 + 12 | 0; //@line 24072
  HEAP32[$47 >> 2] = $30; //@line 24073
  $48 = $ReallocAsyncCtx11 + 16 | 0; //@line 24074
  HEAP32[$48 >> 2] = $4; //@line 24075
  $49 = $ReallocAsyncCtx11 + 20 | 0; //@line 24076
  HEAP32[$49 >> 2] = $16; //@line 24077
  $50 = $ReallocAsyncCtx11 + 24 | 0; //@line 24078
  HEAP32[$50 >> 2] = $6; //@line 24079
  $51 = $ReallocAsyncCtx11 + 28 | 0; //@line 24080
  HEAP32[$51 >> 2] = $8; //@line 24081
  sp = STACKTOP; //@line 24082
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 24086
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 24087
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 24088
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 178; //@line 24091
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 24092
   HEAP32[$35 >> 2] = $2; //@line 24093
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 24094
   HEAP32[$36 >> 2] = $27; //@line 24095
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 24096
   HEAP32[$37 >> 2] = $30; //@line 24097
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 24098
   HEAP32[$38 >> 2] = $4; //@line 24099
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 24100
   HEAP32[$39 >> 2] = $16; //@line 24101
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 24102
   HEAP32[$40 >> 2] = $6; //@line 24103
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 24104
   HEAP32[$41 >> 2] = $8; //@line 24105
   $42 = $ReallocAsyncCtx10 + 32 | 0; //@line 24106
   HEAP32[$42 >> 2] = $28; //@line 24107
   sp = STACKTOP; //@line 24108
   return;
  }
  ___async_unwind = 0; //@line 24111
  HEAP32[$ReallocAsyncCtx10 >> 2] = 178; //@line 24112
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 24113
  HEAP32[$35 >> 2] = $2; //@line 24114
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 24115
  HEAP32[$36 >> 2] = $27; //@line 24116
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 24117
  HEAP32[$37 >> 2] = $30; //@line 24118
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 24119
  HEAP32[$38 >> 2] = $4; //@line 24120
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 24121
  HEAP32[$39 >> 2] = $16; //@line 24122
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 24123
  HEAP32[$40 >> 2] = $6; //@line 24124
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 24125
  HEAP32[$41 >> 2] = $8; //@line 24126
  $42 = $ReallocAsyncCtx10 + 32 | 0; //@line 24127
  HEAP32[$42 >> 2] = $28; //@line 24128
  sp = STACKTOP; //@line 24129
  return;
 }
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29154
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29156
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29160
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 29179
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 29197
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 29215
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 29233
  $83 = $6 + 136 | 0; //@line 29235
  HEAP32[$83 >> 2] = $81; //@line 29237
  HEAP32[$83 + 4 >> 2] = $63; //@line 29240
  $88 = $6 + 264 | 0; //@line 29242
  HEAP32[$88 >> 2] = $45; //@line 29244
  HEAP32[$88 + 4 >> 2] = $27; //@line 29247
  $93 = $6 + 200 | 0; //@line 29249
  HEAP32[$93 >> 2] = 0; //@line 29251
  HEAP32[$93 + 4 >> 2] = 0; //@line 29254
  $98 = $6 + 72 | 0; //@line 29256
  HEAP32[$98 >> 2] = 0; //@line 29258
  HEAP32[$98 + 4 >> 2] = 0; //@line 29261
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 29263
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 29265
  $106 = tempRet0; //@line 29266
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 29267
  $109 = $107 | $105; //@line 29269
  $110 = tempRet0 | $106; //@line 29270
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 29271
  $112 = tempRet0; //@line 29272
  $114 = $103 & -520093696 ^ $112; //@line 29274
  $116 = $6 + 104 | 0; //@line 29276
  HEAP32[$116 >> 2] = $109; //@line 29278
  HEAP32[$116 + 4 >> 2] = $110; //@line 29281
  $121 = $6 + 232 | 0; //@line 29283
  HEAP32[$121 >> 2] = $111; //@line 29285
  HEAP32[$121 + 4 >> 2] = $114; //@line 29288
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 29290
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 29292
  $129 = tempRet0; //@line 29293
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 29294
  $132 = $130 | $128; //@line 29296
  $133 = tempRet0 | $129; //@line 29297
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 29298
  $135 = tempRet0; //@line 29299
  $137 = $126 & -520093696 ^ $135; //@line 29301
  $139 = $6 + 88 | 0; //@line 29303
  HEAP32[$139 >> 2] = $132; //@line 29305
  HEAP32[$139 + 4 >> 2] = $133; //@line 29308
  $144 = $6 + 216 | 0; //@line 29310
  HEAP32[$144 >> 2] = $134; //@line 29312
  HEAP32[$144 + 4 >> 2] = $137; //@line 29315
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 29317
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 29319
  $152 = tempRet0; //@line 29320
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 29321
  $155 = $151 | $153; //@line 29323
  $156 = $152 | tempRet0; //@line 29324
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 29325
  $160 = $149 & -520093696 ^ tempRet0; //@line 29328
  $162 = $6 + 80 | 0; //@line 29330
  HEAP32[$162 >> 2] = $155; //@line 29332
  HEAP32[$162 + 4 >> 2] = $156; //@line 29335
  $167 = $6 + 208 | 0; //@line 29337
  HEAP32[$167 >> 2] = $157; //@line 29339
  HEAP32[$167 + 4 >> 2] = $160; //@line 29342
  $171 = $157 ^ $134; //@line 29343
  $172 = $160 ^ $137; //@line 29344
  $174 = $6 + 224 | 0; //@line 29346
  HEAP32[$174 >> 2] = $171; //@line 29348
  HEAP32[$174 + 4 >> 2] = $172; //@line 29351
  $178 = $155 ^ $132; //@line 29352
  $179 = $156 ^ $133; //@line 29353
  $181 = $6 + 96 | 0; //@line 29355
  HEAP32[$181 >> 2] = $178; //@line 29357
  HEAP32[$181 + 4 >> 2] = $179; //@line 29360
  $185 = $157 ^ $111; //@line 29361
  $186 = $160 ^ $114; //@line 29362
  $188 = $6 + 240 | 0; //@line 29364
  HEAP32[$188 >> 2] = $185; //@line 29366
  HEAP32[$188 + 4 >> 2] = $186; //@line 29369
  $192 = $155 ^ $109; //@line 29370
  $193 = $156 ^ $110; //@line 29371
  $195 = $6 + 112 | 0; //@line 29373
  HEAP32[$195 >> 2] = $192; //@line 29375
  HEAP32[$195 + 4 >> 2] = $193; //@line 29378
  $199 = $134 ^ $111; //@line 29379
  $200 = $137 ^ $114; //@line 29380
  $202 = $6 + 248 | 0; //@line 29382
  HEAP32[$202 >> 2] = $199; //@line 29384
  HEAP32[$202 + 4 >> 2] = $200; //@line 29387
  $206 = $132 ^ $109; //@line 29388
  $207 = $133 ^ $110; //@line 29389
  $209 = $6 + 120 | 0; //@line 29391
  HEAP32[$209 >> 2] = $206; //@line 29393
  HEAP32[$209 + 4 >> 2] = $207; //@line 29396
  $213 = $171 ^ $111; //@line 29397
  $214 = $172 ^ $114; //@line 29398
  $216 = $6 + 256 | 0; //@line 29400
  HEAP32[$216 >> 2] = $213; //@line 29402
  HEAP32[$216 + 4 >> 2] = $214; //@line 29405
  $220 = $178 ^ $109; //@line 29406
  $221 = $179 ^ $110; //@line 29407
  $223 = $6 + 128 | 0; //@line 29409
  HEAP32[$223 >> 2] = $220; //@line 29411
  HEAP32[$223 + 4 >> 2] = $221; //@line 29414
  $230 = $6 + 272 | 0; //@line 29418
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 29420
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 29423
  $237 = $6 + 144 | 0; //@line 29427
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 29429
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 29432
  $244 = $6 + 280 | 0; //@line 29436
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 29438
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 29441
  $251 = $6 + 152 | 0; //@line 29445
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 29447
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 29450
  $258 = $6 + 288 | 0; //@line 29454
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 29456
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 29459
  $265 = $6 + 160 | 0; //@line 29463
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 29465
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 29468
  $272 = $6 + 296 | 0; //@line 29472
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 29474
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 29477
  $279 = $6 + 168 | 0; //@line 29481
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 29483
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 29486
  $286 = $6 + 304 | 0; //@line 29490
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 29492
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 29495
  $293 = $6 + 176 | 0; //@line 29499
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 29501
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 29504
  $300 = $6 + 312 | 0; //@line 29508
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 29510
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 29513
  $307 = $6 + 184 | 0; //@line 29517
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 29519
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 29522
  $314 = $6 + 320 | 0; //@line 29526
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 29528
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 29531
  $321 = $6 + 192 | 0; //@line 29535
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 29537
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 29540
  $$0$i = 0; //@line 29541
 } else {
  $$0$i = $AsyncRetVal; //@line 29543
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 29546
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $30 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $7 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 19625
 $6 = $1 + 1 | 0; //@line 19628
 $7 = HEAP8[$6 >> 0] | 0; //@line 19629
 $10 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($7 << 24 >> 24) >> 0] | 0; //@line 19632
 $12 = HEAP32[$0 + 124 >> 2] | 0; //@line 19634
 $19 = $1 + 2 | 0; //@line 19641
 $20 = HEAP8[$19 >> 0] | 0; //@line 19642
 $23 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 19645
 $25 = $20 << 24 >> 24 > $23 << 24 >> 24 ? $20 : $23; //@line 19647
 HEAP8[$19 >> 0] = $25; //@line 19648
 $30 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($7 & 255) << 2) >> 2] | 0; //@line 19653
 $switch$selectcmp$i = ($30 | 0) == 25e4; //@line 19654
 $switch$selectcmp4$i = ($30 | 0) == 5e5; //@line 19655
 $41 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($25 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 19666
 $42 = $0 + 4 | 0; //@line 19667
 $43 = HEAP32[$42 >> 2] | 0; //@line 19668
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 72 >> 2] | 0; //@line 19671
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 19672
 FUNCTION_TABLE_vi[$46 & 1023]($43); //@line 19673
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 512; //@line 19676
  HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 19678
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 19680
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 19682
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 19684
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 19686
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 19689
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 19692
  HEAP8[$AsyncCtx + 26 >> 0] = $10; //@line 19694
  HEAP8[$AsyncCtx + 27 >> 0] = $41; //@line 19696
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 19698
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 19700
  HEAP32[$AsyncCtx + 36 >> 2] = $19; //@line 19702
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 19704
  sp = STACKTOP; //@line 19705
  return 0; //@line 19706
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19708
 $60 = HEAP32[$42 >> 2] | 0; //@line 19709
 $63 = HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] | 0; //@line 19712
 $67 = HEAP32[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 19716
 $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19717
 FUNCTION_TABLE_vii[$63 & 15]($60, $67); //@line 19718
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 513; //@line 19721
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 19723
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 19725
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 19727
  HEAP8[$AsyncCtx2 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 19730
  HEAP8[$AsyncCtx2 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 19733
  HEAP8[$AsyncCtx2 + 18 >> 0] = $10; //@line 19735
  HEAP8[$AsyncCtx2 + 19 >> 0] = $41; //@line 19737
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 19739
  HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 19741
  HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 19743
  HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 19745
  sp = STACKTOP; //@line 19746
  return 0; //@line 19747
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19749
 $85 = HEAP32[$42 >> 2] | 0; //@line 19756
 $88 = HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] | 0; //@line 19759
 $90 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 19761
 $91 = $10 << 24 >> 24; //@line 19762
 do {
  if ((HEAP8[$6 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19766
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 0, $41, 25e3, $90, $91 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 19767
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 514; //@line 19770
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 19772
    HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 19774
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 19776
    HEAP32[$AsyncCtx6 + 16 >> 2] = $19; //@line 19778
    HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 19780
    sp = STACKTOP; //@line 19781
    return 0; //@line 19782
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 19784
    $$0 = 0; //@line 19785
    break;
   }
  } else {
   $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19789
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 1, $41, 0, $90, $91, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 19790
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 515; //@line 19793
    HEAP32[$AsyncCtx10 + 4 >> 2] = $42; //@line 19795
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 19797
    HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 19799
    HEAP32[$AsyncCtx10 + 16 >> 2] = $19; //@line 19801
    HEAP32[$AsyncCtx10 + 20 >> 2] = $2; //@line 19803
    sp = STACKTOP; //@line 19804
    return 0; //@line 19805
   } else {
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 19807
    $$0 = 1; //@line 19808
    break;
   }
  }
 } while (0);
 $103 = HEAP32[$42 >> 2] | 0; //@line 19813
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] | 0; //@line 19816
 $107 = $1 + 12 | 0; //@line 19817
 $109 = HEAP16[$107 >> 1] & 255; //@line 19819
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19820
 FUNCTION_TABLE_viii[$106 & 7]($103, $$0, $109); //@line 19821
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 516; //@line 19824
  HEAP32[$AsyncCtx14 + 4 >> 2] = $42; //@line 19826
  HEAP32[$AsyncCtx14 + 8 >> 2] = $107; //@line 19828
  HEAP32[$AsyncCtx14 + 12 >> 2] = $$0; //@line 19830
  HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 19832
  HEAP32[$AsyncCtx14 + 20 >> 2] = $19; //@line 19834
  HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 19836
  sp = STACKTOP; //@line 19837
  return 0; //@line 19838
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 19840
 $116 = HEAP32[$42 >> 2] | 0; //@line 19841
 $119 = HEAP32[(HEAP32[$116 >> 2] | 0) + 52 >> 2] | 0; //@line 19844
 $121 = HEAP16[$107 >> 1] & 255; //@line 19846
 $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19847
 $122 = FUNCTION_TABLE_iiii[$119 & 31]($116, $$0, $121) | 0; //@line 19848
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 517; //@line 19851
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 19853
  HEAP32[$AsyncCtx17 + 8 >> 2] = $42; //@line 19855
  HEAP32[$AsyncCtx17 + 12 >> 2] = $19; //@line 19857
  HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 19859
  sp = STACKTOP; //@line 19860
  return 0; //@line 19861
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 19863
 HEAP32[$3 >> 2] = $122; //@line 19864
 $127 = HEAP32[$42 >> 2] | 0; //@line 19865
 $130 = HEAP32[(HEAP32[$127 >> 2] | 0) + 76 >> 2] | 0; //@line 19868
 $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 19869
 FUNCTION_TABLE_vi[$130 & 1023]($127); //@line 19870
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 518; //@line 19873
  HEAP32[$AsyncCtx20 + 4 >> 2] = $19; //@line 19875
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 19877
  sp = STACKTOP; //@line 19878
  return 0; //@line 19879
 } else {
  _emscripten_free_async_context($AsyncCtx20 | 0); //@line 19881
  HEAP8[$2 >> 0] = HEAP8[$19 >> 0] | 0; //@line 19883
  return 1; //@line 19884
 }
 return 0; //@line 19886
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $23 = 0, $26 = 0, $29 = 0, $30 = 0, $33 = 0, $36 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $66 = 0, $67 = 0, $70 = 0, $73 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 8561
 STACKTOP = STACKTOP + 32 | 0; //@line 8562
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8562
 $vararg_buffer = sp; //@line 8563
 $1 = sp + 16 | 0; //@line 8564
 $5 = (HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 4 >> 2] | 0) == 1; //@line 8568
 $6 = __ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0; //@line 8569
 if ($5) {
  if (HEAP32[$6 + 8 >> 2] | 0) {
   STACKTOP = sp; //@line 8575
   return;
  }
  $10 = $0 + 2528 | 0; //@line 8577
  $11 = HEAP32[$10 >> 2] | 0; //@line 8578
  if (!$11) {
   STACKTOP = sp; //@line 8581
   return;
  }
  $15 = HEAP32[$0 + 3168 >> 2] | 0; //@line 8585
  $17 = HEAP32[$11 + 4 >> 2] | 0; //@line 8587
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8588
  FUNCTION_TABLE_vii[$17 & 15]($1, $0 + 2516 | 0); //@line 8589
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 295; //@line 8592
   HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 8594
   HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8596
   HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8598
   HEAP32[$AsyncCtx + 16 >> 2] = $15; //@line 8600
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 8602
   sp = STACKTOP; //@line 8603
   STACKTOP = sp; //@line 8604
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8606
  $23 = $1 + 12 | 0; //@line 8608
  HEAP32[$23 >> 2] = HEAP32[$10 >> 2]; //@line 8609
  $26 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 16 >> 0] | 0; //@line 8612
  $29 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 17 >> 0] | 0; //@line 8615
  $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8616
  $30 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($15, $1, $26, $29) | 0; //@line 8617
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 296; //@line 8620
   HEAP32[$AsyncCtx16 + 4 >> 2] = $23; //@line 8622
   HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 8624
   sp = STACKTOP; //@line 8625
   STACKTOP = sp; //@line 8626
   return;
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 8628
  $33 = HEAP32[$23 >> 2] | 0; //@line 8629
  do {
   if ($33 | 0) {
    $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 8634
    $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8635
    FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 8636
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 297; //@line 8639
     HEAP32[$AsyncCtx2 + 4 >> 2] = $30; //@line 8641
     sp = STACKTOP; //@line 8642
     STACKTOP = sp; //@line 8643
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8645
     break;
    }
   }
  } while (0);
  if ($30 | 0) {
   STACKTOP = sp; //@line 8652
   return;
  }
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8654
  _mbed_assert_internal(12080, 12089, 881); //@line 8655
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 298; //@line 8658
   sp = STACKTOP; //@line 8659
   STACKTOP = sp; //@line 8660
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 8662
  STACKTOP = sp; //@line 8663
  return;
 }
 if (HEAP32[$6 + 4 >> 2] | 0) {
  STACKTOP = sp; //@line 8669
  return;
 }
 if (!(HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2] | 0)) {
  $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8676
  __ZN12LoRaWANStack23process_connected_stateEv($0); //@line 8677
  if (___async) {
   HEAP32[$AsyncCtx13 >> 2] = 299; //@line 8680
   sp = STACKTOP; //@line 8681
   STACKTOP = sp; //@line 8682
   return;
  }
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 8684
  STACKTOP = sp; //@line 8685
  return;
 }
 HEAP32[$vararg_buffer >> 2] = HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2]; //@line 8690
 _mbed_tracef(2, 12187, 12490, $vararg_buffer); //@line 8691
 $53 = $0 + 2496 | 0; //@line 8696
 if ((HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2] | 0) != 13) {
  HEAP32[$53 >> 2] = 4; //@line 8698
  HEAP32[$vararg_buffer >> 2] = 0; //@line 8699
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8700
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $vararg_buffer); //@line 8701
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 304; //@line 8704
   HEAP32[$AsyncCtx23 + 4 >> 2] = $vararg_buffer; //@line 8706
   sp = STACKTOP; //@line 8707
   STACKTOP = sp; //@line 8708
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 8710
  STACKTOP = sp; //@line 8711
  return;
 }
 HEAP32[$53 >> 2] = 2; //@line 8713
 $54 = $0 + 2512 | 0; //@line 8714
 $55 = HEAP32[$54 >> 2] | 0; //@line 8715
 do {
  if ($55 | 0) {
   $59 = HEAP32[$0 + 3168 >> 2] | 0; //@line 8721
   $61 = HEAP32[$55 + 4 >> 2] | 0; //@line 8723
   $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8724
   FUNCTION_TABLE_vii[$61 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 8725
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 300; //@line 8728
    HEAP32[$AsyncCtx5 + 4 >> 2] = $54; //@line 8730
    HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 8732
    HEAP32[$AsyncCtx5 + 12 >> 2] = $59; //@line 8734
    HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 8736
    sp = STACKTOP; //@line 8737
    STACKTOP = sp; //@line 8738
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8740
   $66 = $vararg_buffer + 12 | 0; //@line 8742
   HEAP32[$66 >> 2] = HEAP32[$54 >> 2]; //@line 8743
   $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8744
   $67 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($59, $vararg_buffer, 5) | 0; //@line 8745
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 301; //@line 8748
    HEAP32[$AsyncCtx19 + 4 >> 2] = $66; //@line 8750
    HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer; //@line 8752
    sp = STACKTOP; //@line 8753
    STACKTOP = sp; //@line 8754
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 8756
   $70 = HEAP32[$66 >> 2] | 0; //@line 8757
   do {
    if ($70 | 0) {
     $73 = HEAP32[$70 + 8 >> 2] | 0; //@line 8762
     $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8763
     FUNCTION_TABLE_vi[$73 & 1023]($vararg_buffer); //@line 8764
     if (___async) {
      HEAP32[$AsyncCtx9 >> 2] = 302; //@line 8767
      HEAP32[$AsyncCtx9 + 4 >> 2] = $67; //@line 8769
      HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 8771
      sp = STACKTOP; //@line 8772
      STACKTOP = sp; //@line 8773
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx9 | 0); //@line 8775
      break;
     }
    }
   } while (0);
   if (!$67) {
    $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8782
    _mbed_assert_internal(12080, 12089, 775); //@line 8783
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 303; //@line 8786
     HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer; //@line 8788
     sp = STACKTOP; //@line 8789
     STACKTOP = sp; //@line 8790
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 8792
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 8798
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_301($0) {
 $0 = $0 | 0;
 var $$pre125 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 24297
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24299
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24301
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24303
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24305
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24307
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24309
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24311
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24313
 $$pre125 = HEAP32[$4 >> 2] | 0; //@line 24314
 if ($$pre125 | 0) {
  $19 = HEAP32[$$pre125 + 4 >> 2] | 0; //@line 24318
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 24319
  FUNCTION_TABLE_vii[$19 & 15]($16, $10); //@line 24320
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 24323
   $20 = $ReallocAsyncCtx11 + 4 | 0; //@line 24324
   HEAP32[$20 >> 2] = $2; //@line 24325
   $21 = $ReallocAsyncCtx11 + 8 | 0; //@line 24326
   HEAP32[$21 >> 2] = $4; //@line 24327
   $22 = $ReallocAsyncCtx11 + 12 | 0; //@line 24328
   HEAP32[$22 >> 2] = $6; //@line 24329
   $23 = $ReallocAsyncCtx11 + 16 | 0; //@line 24330
   HEAP32[$23 >> 2] = $8; //@line 24331
   $24 = $ReallocAsyncCtx11 + 20 | 0; //@line 24332
   HEAP32[$24 >> 2] = $10; //@line 24333
   $25 = $ReallocAsyncCtx11 + 24 | 0; //@line 24334
   HEAP32[$25 >> 2] = $12; //@line 24335
   $26 = $ReallocAsyncCtx11 + 28 | 0; //@line 24336
   HEAP32[$26 >> 2] = $14; //@line 24337
   sp = STACKTOP; //@line 24338
   return;
  }
  ___async_unwind = 0; //@line 24341
  HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 24342
  $20 = $ReallocAsyncCtx11 + 4 | 0; //@line 24343
  HEAP32[$20 >> 2] = $2; //@line 24344
  $21 = $ReallocAsyncCtx11 + 8 | 0; //@line 24345
  HEAP32[$21 >> 2] = $4; //@line 24346
  $22 = $ReallocAsyncCtx11 + 12 | 0; //@line 24347
  HEAP32[$22 >> 2] = $6; //@line 24348
  $23 = $ReallocAsyncCtx11 + 16 | 0; //@line 24349
  HEAP32[$23 >> 2] = $8; //@line 24350
  $24 = $ReallocAsyncCtx11 + 20 | 0; //@line 24351
  HEAP32[$24 >> 2] = $10; //@line 24352
  $25 = $ReallocAsyncCtx11 + 24 | 0; //@line 24353
  HEAP32[$25 >> 2] = $12; //@line 24354
  $26 = $ReallocAsyncCtx11 + 28 | 0; //@line 24355
  HEAP32[$26 >> 2] = $14; //@line 24356
  sp = STACKTOP; //@line 24357
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 24360
 $27 = $14 + 12 | 0; //@line 24361
 HEAP32[$14 >> 2] = 181; //@line 24362
 HEAP32[$14 + 4 >> 2] = 0; //@line 24364
 HEAP32[$14 + 8 >> 2] = $8; //@line 24366
 HEAP32[$27 >> 2] = 824; //@line 24367
 $28 = $8 + 2432 | 0; //@line 24368
 if (($28 | 0) == ($14 | 0)) {
  $51 = HEAP32[208] | 0; //@line 24372
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 24373
  FUNCTION_TABLE_vi[$51 & 1023]($14); //@line 24374
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 24377
   $52 = $ReallocAsyncCtx15 + 4 | 0; //@line 24378
   HEAP32[$52 >> 2] = $14; //@line 24379
   $53 = $ReallocAsyncCtx15 + 8 | 0; //@line 24380
   HEAP32[$53 >> 2] = $8; //@line 24381
   $54 = $ReallocAsyncCtx15 + 12 | 0; //@line 24382
   HEAP32[$54 >> 2] = $2; //@line 24383
   $55 = $ReallocAsyncCtx15 + 16 | 0; //@line 24384
   HEAP32[$55 >> 2] = $12; //@line 24385
   sp = STACKTOP; //@line 24386
   return;
  }
  ___async_unwind = 0; //@line 24389
  HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 24390
  $52 = $ReallocAsyncCtx15 + 4 | 0; //@line 24391
  HEAP32[$52 >> 2] = $14; //@line 24392
  $53 = $ReallocAsyncCtx15 + 8 | 0; //@line 24393
  HEAP32[$53 >> 2] = $8; //@line 24394
  $54 = $ReallocAsyncCtx15 + 12 | 0; //@line 24395
  HEAP32[$54 >> 2] = $2; //@line 24396
  $55 = $ReallocAsyncCtx15 + 16 | 0; //@line 24397
  HEAP32[$55 >> 2] = $12; //@line 24398
  sp = STACKTOP; //@line 24399
  return;
 }
 $30 = $8 + 2444 | 0; //@line 24402
 $31 = HEAP32[$30 >> 2] | 0; //@line 24403
 if (!$31) {
  $43 = HEAP32[207] | 0; //@line 24407
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 24408
  FUNCTION_TABLE_vii[$43 & 15]($28, $14); //@line 24409
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 24412
   $44 = $ReallocAsyncCtx14 + 4 | 0; //@line 24413
   HEAP32[$44 >> 2] = $27; //@line 24414
   $45 = $ReallocAsyncCtx14 + 8 | 0; //@line 24415
   HEAP32[$45 >> 2] = $30; //@line 24416
   $46 = $ReallocAsyncCtx14 + 12 | 0; //@line 24417
   HEAP32[$46 >> 2] = $14; //@line 24418
   $47 = $ReallocAsyncCtx14 + 16 | 0; //@line 24419
   HEAP32[$47 >> 2] = $8; //@line 24420
   $48 = $ReallocAsyncCtx14 + 20 | 0; //@line 24421
   HEAP32[$48 >> 2] = $2; //@line 24422
   $49 = $ReallocAsyncCtx14 + 24 | 0; //@line 24423
   HEAP32[$49 >> 2] = $12; //@line 24424
   sp = STACKTOP; //@line 24425
   return;
  }
  ___async_unwind = 0; //@line 24428
  HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 24429
  $44 = $ReallocAsyncCtx14 + 4 | 0; //@line 24430
  HEAP32[$44 >> 2] = $27; //@line 24431
  $45 = $ReallocAsyncCtx14 + 8 | 0; //@line 24432
  HEAP32[$45 >> 2] = $30; //@line 24433
  $46 = $ReallocAsyncCtx14 + 12 | 0; //@line 24434
  HEAP32[$46 >> 2] = $14; //@line 24435
  $47 = $ReallocAsyncCtx14 + 16 | 0; //@line 24436
  HEAP32[$47 >> 2] = $8; //@line 24437
  $48 = $ReallocAsyncCtx14 + 20 | 0; //@line 24438
  HEAP32[$48 >> 2] = $2; //@line 24439
  $49 = $ReallocAsyncCtx14 + 24 | 0; //@line 24440
  HEAP32[$49 >> 2] = $12; //@line 24441
  sp = STACKTOP; //@line 24442
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 24446
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 24447
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 24448
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 182; //@line 24451
   $35 = $ReallocAsyncCtx13 + 4 | 0; //@line 24452
   HEAP32[$35 >> 2] = $27; //@line 24453
   $36 = $ReallocAsyncCtx13 + 8 | 0; //@line 24454
   HEAP32[$36 >> 2] = $30; //@line 24455
   $37 = $ReallocAsyncCtx13 + 12 | 0; //@line 24456
   HEAP32[$37 >> 2] = $28; //@line 24457
   $38 = $ReallocAsyncCtx13 + 16 | 0; //@line 24458
   HEAP32[$38 >> 2] = $14; //@line 24459
   $39 = $ReallocAsyncCtx13 + 20 | 0; //@line 24460
   HEAP32[$39 >> 2] = $8; //@line 24461
   $40 = $ReallocAsyncCtx13 + 24 | 0; //@line 24462
   HEAP32[$40 >> 2] = $2; //@line 24463
   $41 = $ReallocAsyncCtx13 + 28 | 0; //@line 24464
   HEAP32[$41 >> 2] = $12; //@line 24465
   sp = STACKTOP; //@line 24466
   return;
  }
  ___async_unwind = 0; //@line 24469
  HEAP32[$ReallocAsyncCtx13 >> 2] = 182; //@line 24470
  $35 = $ReallocAsyncCtx13 + 4 | 0; //@line 24471
  HEAP32[$35 >> 2] = $27; //@line 24472
  $36 = $ReallocAsyncCtx13 + 8 | 0; //@line 24473
  HEAP32[$36 >> 2] = $30; //@line 24474
  $37 = $ReallocAsyncCtx13 + 12 | 0; //@line 24475
  HEAP32[$37 >> 2] = $28; //@line 24476
  $38 = $ReallocAsyncCtx13 + 16 | 0; //@line 24477
  HEAP32[$38 >> 2] = $14; //@line 24478
  $39 = $ReallocAsyncCtx13 + 20 | 0; //@line 24479
  HEAP32[$39 >> 2] = $8; //@line 24480
  $40 = $ReallocAsyncCtx13 + 24 | 0; //@line 24481
  HEAP32[$40 >> 2] = $2; //@line 24482
  $41 = $ReallocAsyncCtx13 + 28 | 0; //@line 24483
  HEAP32[$41 >> 2] = $12; //@line 24484
  sp = STACKTOP; //@line 24485
  return;
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $3 = 0, $30 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $66 = 0, $69 = 0, $74 = 0, $80 = 0, $81 = 0, $84 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 404
 STACKTOP = STACKTOP + 64 | 0; //@line 405
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 405
 $vararg_buffer5 = sp + 16 | 0; //@line 406
 $vararg_buffer2 = sp + 8 | 0; //@line 407
 $vararg_buffer = sp; //@line 408
 $2 = sp + 40 | 0; //@line 409
 $3 = sp + 24 | 0; //@line 410
 $4 = $0 + 783 | 0; //@line 411
 $6 = HEAPU8[$4 >> 0] | 0; //@line 413
 HEAP32[$vararg_buffer >> 2] = $1; //@line 414
 HEAP32[$vararg_buffer + 4 >> 2] = $6; //@line 416
 _mbed_tracef(16, 11016, 11086, $vararg_buffer); //@line 417
 _emscripten_asm_const_i(2) | 0; //@line 418
 HEAP8[$0 + 688 >> 0] = 1; //@line 420
 if (!(HEAP8[$4 >> 0] | 0)) {
  do {
   if ($1 | 0) {
    $44 = $0 + 1112 | 0; //@line 427
    $45 = $3 + 12 | 0; //@line 428
    HEAP32[$3 >> 2] = 52; //@line 429
    HEAP32[$3 + 4 >> 2] = 0; //@line 431
    HEAP32[$3 + 8 >> 2] = $0; //@line 433
    HEAP32[$45 >> 2] = 584; //@line 434
    $46 = ___muldi3($1 | 0, 0, 1e3, 0) | 0; //@line 435
    $47 = tempRet0; //@line 436
    $48 = $0 + 1152 | 0; //@line 437
    if (($48 | 0) != ($3 | 0)) {
     $50 = $0 + 1164 | 0; //@line 440
     $51 = HEAP32[$50 >> 2] | 0; //@line 441
     do {
      if ($51 | 0) {
       $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 446
       $AsyncCtx17 = _emscripten_alloc_async_context(40, sp) | 0; //@line 447
       FUNCTION_TABLE_vi[$54 & 1023]($48); //@line 448
       if (___async) {
        HEAP32[$AsyncCtx17 >> 2] = 53; //@line 451
        HEAP32[$AsyncCtx17 + 4 >> 2] = $45; //@line 453
        HEAP32[$AsyncCtx17 + 8 >> 2] = $50; //@line 455
        HEAP32[$AsyncCtx17 + 12 >> 2] = $48; //@line 457
        HEAP32[$AsyncCtx17 + 16 >> 2] = $3; //@line 459
        HEAP32[$AsyncCtx17 + 20 >> 2] = $44; //@line 461
        $61 = $AsyncCtx17 + 24 | 0; //@line 463
        HEAP32[$61 >> 2] = $46; //@line 465
        HEAP32[$61 + 4 >> 2] = $47; //@line 468
        HEAP32[$AsyncCtx17 + 32 >> 2] = $0; //@line 470
        sp = STACKTOP; //@line 471
        STACKTOP = sp; //@line 472
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx17 | 0); //@line 474
        break;
       }
      }
     } while (0);
     $66 = HEAP32[$45 >> 2] | 0; //@line 479
     do {
      if (!$66) {
       $80 = 0; //@line 483
      } else {
       $69 = HEAP32[$66 + 4 >> 2] | 0; //@line 486
       $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 487
       FUNCTION_TABLE_vii[$69 & 15]($48, $3); //@line 488
       if (___async) {
        HEAP32[$AsyncCtx20 >> 2] = 54; //@line 491
        HEAP32[$AsyncCtx20 + 4 >> 2] = $45; //@line 493
        HEAP32[$AsyncCtx20 + 8 >> 2] = $50; //@line 495
        HEAP32[$AsyncCtx20 + 12 >> 2] = $44; //@line 497
        $74 = $AsyncCtx20 + 16 | 0; //@line 499
        HEAP32[$74 >> 2] = $46; //@line 501
        HEAP32[$74 + 4 >> 2] = $47; //@line 504
        HEAP32[$AsyncCtx20 + 24 >> 2] = $0; //@line 506
        HEAP32[$AsyncCtx20 + 28 >> 2] = $3; //@line 508
        sp = STACKTOP; //@line 509
        STACKTOP = sp; //@line 510
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx20 | 0); //@line 512
        $80 = HEAP32[$45 >> 2] | 0; //@line 514
        break;
       }
      }
     } while (0);
     HEAP32[$50 >> 2] = $80; //@line 519
    }
    __ZN4mbed6Ticker5setupEy($44, $46, $47); //@line 521
    $81 = HEAP32[$45 >> 2] | 0; //@line 522
    if ($81 | 0) {
     $84 = HEAP32[$81 + 8 >> 2] | 0; //@line 526
     $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 527
     FUNCTION_TABLE_vi[$84 & 1023]($3); //@line 528
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 55; //@line 531
      HEAP32[$AsyncCtx24 + 4 >> 2] = $0; //@line 533
      sp = STACKTOP; //@line 534
      STACKTOP = sp; //@line 535
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 537
      break;
     }
    }
   }
  } while (0);
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 543
  STACKTOP = sp; //@line 544
  return;
 }
 $11 = _emscripten_asm_const_i(3) | 0; //@line 546
 $14 = $11 - (HEAP32[$0 + 784 >> 2] | 0) | 0; //@line 549
 HEAP32[$vararg_buffer2 >> 2] = $14; //@line 550
 _mbed_tracef(16, 11016, 11186, $vararg_buffer2); //@line 551
 HEAP8[$4 >> 0] = 0; //@line 552
 if ($14 >>> 0 > 500) {
  HEAP32[$vararg_buffer5 >> 2] = $14; //@line 555
  _mbed_tracef(4, 11016, 11207, $vararg_buffer5); //@line 556
  STACKTOP = sp; //@line 557
  return;
 }
 $16 = $0 + 1112 | 0; //@line 559
 $17 = $2 + 12 | 0; //@line 560
 HEAP32[$2 >> 2] = 48; //@line 561
 HEAP32[$2 + 4 >> 2] = 0; //@line 563
 HEAP32[$2 + 8 >> 2] = $0; //@line 565
 HEAP32[$17 >> 2] = 584; //@line 566
 $18 = $0 + 1152 | 0; //@line 567
 if (($18 | 0) != ($2 | 0)) {
  $20 = $0 + 1164 | 0; //@line 570
  $21 = HEAP32[$20 >> 2] | 0; //@line 571
  do {
   if ($21 | 0) {
    $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 576
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 577
    FUNCTION_TABLE_vi[$24 & 1023]($18); //@line 578
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 49; //@line 581
     HEAP32[$AsyncCtx + 4 >> 2] = $17; //@line 583
     HEAP32[$AsyncCtx + 8 >> 2] = $20; //@line 585
     HEAP32[$AsyncCtx + 12 >> 2] = $18; //@line 587
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 589
     HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 591
     sp = STACKTOP; //@line 592
     STACKTOP = sp; //@line 593
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 595
     break;
    }
   }
  } while (0);
  $30 = HEAP32[$17 >> 2] | 0; //@line 600
  do {
   if (!$30) {
    $38 = 0; //@line 604
   } else {
    $33 = HEAP32[$30 + 4 >> 2] | 0; //@line 607
    $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 608
    FUNCTION_TABLE_vii[$33 & 15]($18, $2); //@line 609
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 50; //@line 612
     HEAP32[$AsyncCtx9 + 4 >> 2] = $17; //@line 614
     HEAP32[$AsyncCtx9 + 8 >> 2] = $20; //@line 616
     HEAP32[$AsyncCtx9 + 12 >> 2] = $16; //@line 618
     HEAP32[$AsyncCtx9 + 16 >> 2] = $2; //@line 620
     sp = STACKTOP; //@line 621
     STACKTOP = sp; //@line 622
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 624
     $38 = HEAP32[$17 >> 2] | 0; //@line 626
     break;
    }
   }
  } while (0);
  HEAP32[$20 >> 2] = $38; //@line 631
 }
 __ZN4mbed6Ticker5setupEy($16, 2e5, 0); //@line 633
 $39 = HEAP32[$17 >> 2] | 0; //@line 634
 if (!$39) {
  STACKTOP = sp; //@line 637
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 640
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 641
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 642
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 51; //@line 645
  sp = STACKTOP; //@line 646
  STACKTOP = sp; //@line 647
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 649
 STACKTOP = sp; //@line 650
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01314 = 0, $$015 = 0, $$079$i = 0, $106 = 0, $124 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $34 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $78 = 0, $83 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18943
 STACKTOP = STACKTOP + 16 | 0; //@line 18944
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18944
 $3 = sp; //@line 18945
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 18950
  return;
 }
 $16 = $3 + 8 | 0; //@line 18961
 HEAP8[$16 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 18962
 L4 : do {
  if ($2 << 24 >> 24 == 16) {
   $18 = $0 + 18 | 0; //@line 18966
   $19 = HEAP8[$18 >> 0] | 0; //@line 18967
   $20 = $0 + 20 | 0; //@line 18968
   if (($19 & 255) < (HEAPU8[$20 >> 0] | 0)) {
    $23 = $0 + 19 | 0; //@line 18972
    $24 = $3 + 4 | 0; //@line 18973
    $25 = $0 + 76 | 0; //@line 18974
    $26 = $3 + 9 | 0; //@line 18975
    $$01314 = 0; //@line 18976
    $$015 = $19; //@line 18976
    $31 = $19; //@line 18976
    L7 : while (1) {
     if ((($31 & 255) + (HEAPU8[$23 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $34 = $$01314 & 255; //@line 18985
      $49 = HEAPU8[$1 + ($34 + 2) >> 0] << 16 | (HEAPU8[$1 + ($34 + 1) >> 0] << 8 | HEAPU8[$1 + $34 >> 0]); //@line 19000
      $50 = $49 * 100 | 0; //@line 19001
      HEAP32[$3 >> 2] = $50; //@line 19002
      HEAP32[$24 >> 2] = 0; //@line 19003
      if (!$49) {
       label = 16; //@line 19006
      } else {
       L12 : do {
        if (!(HEAP8[$25 >> 0] | 0)) {
         $83 = -1; //@line 19012
        } else {
         $$079$i = 0; //@line 19014
         while (1) {
          $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 19018
          $AsyncCtx = _emscripten_alloc_async_context(80, sp) | 0; //@line 19020
          $58 = FUNCTION_TABLE_iiii[$56 & 31]($0, $50, $$079$i & 255) | 0; //@line 19021
          if (___async) {
           label = 10; //@line 19024
           break L7;
          }
          _emscripten_free_async_context($AsyncCtx | 0); //@line 19027
          if ($58) {
           $83 = $$079$i; //@line 19029
           break L12;
          }
          $78 = $$079$i + 1 | 0; //@line 19032
          if (($78 | 0) < (HEAPU8[$25 >> 0] | 0)) {
           $$079$i = $78; //@line 19037
          } else {
           $83 = -1; //@line 19039
           break;
          }
         }
        }
       } while (0);
       HEAP8[$26 >> 0] = $83; //@line 19046
       $86 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 19049
       $AsyncCtx2 = _emscripten_alloc_async_context(68, sp) | 0; //@line 19050
       FUNCTION_TABLE_iiii[$86 & 31]($0, $3, $$015) | 0; //@line 19051
       if (___async) {
        label = 14; //@line 19054
        break;
       }
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19057
      }
     } else {
      HEAP32[$3 >> 2] = 0; //@line 19060
      HEAP8[$16 >> 0] = 0; //@line 19061
      HEAP32[$24 >> 2] = 0; //@line 19062
      label = 16; //@line 19063
     }
     if ((label | 0) == 16) {
      label = 0; //@line 19066
      $106 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 19069
      $AsyncCtx5 = _emscripten_alloc_async_context(68, sp) | 0; //@line 19070
      FUNCTION_TABLE_iii[$106 & 31]($0, $$015) | 0; //@line 19071
      if (___async) {
       label = 17; //@line 19074
       break;
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19077
     }
     $124 = $$015 + 1 << 24 >> 24; //@line 19079
     if (($124 & 255) >= (HEAPU8[$20 >> 0] | 0)) {
      break L4;
     }
     $$01314 = ($$01314 & 255) + 3 & 255; //@line 19089
     $$015 = $124; //@line 19089
     $31 = HEAP8[$18 >> 0] | 0; //@line 19089
    }
    if ((label | 0) == 10) {
     HEAP32[$AsyncCtx >> 2] = 500; //@line 19092
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19094
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 19096
     HEAP32[$AsyncCtx + 12 >> 2] = $$079$i; //@line 19098
     HEAP32[$AsyncCtx + 16 >> 2] = $26; //@line 19100
     HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 19102
     HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 19104
     HEAP8[$AsyncCtx + 28 >> 0] = $$015; //@line 19106
     HEAP32[$AsyncCtx + 32 >> 2] = $25; //@line 19108
     HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 19110
     HEAP32[$AsyncCtx + 40 >> 2] = $50; //@line 19112
     HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 19114
     HEAP8[$AsyncCtx + 48 >> 0] = $$01314; //@line 19116
     HEAP32[$AsyncCtx + 52 >> 2] = $18; //@line 19118
     HEAP32[$AsyncCtx + 56 >> 2] = $20; //@line 19120
     HEAP32[$AsyncCtx + 60 >> 2] = $1; //@line 19122
     HEAP32[$AsyncCtx + 64 >> 2] = $3; //@line 19124
     HEAP32[$AsyncCtx + 68 >> 2] = $24; //@line 19126
     HEAP32[$AsyncCtx + 72 >> 2] = $23; //@line 19128
     HEAP32[$AsyncCtx + 76 >> 2] = $16; //@line 19130
     sp = STACKTOP; //@line 19131
     STACKTOP = sp; //@line 19132
     return;
    } else if ((label | 0) == 14) {
     HEAP32[$AsyncCtx2 >> 2] = 501; //@line 19135
     HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 19137
     HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 19139
     HEAP32[$AsyncCtx2 + 12 >> 2] = $26; //@line 19141
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 19143
     HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 19145
     HEAP32[$AsyncCtx2 + 24 >> 2] = $25; //@line 19147
     HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 19149
     HEAP32[$AsyncCtx2 + 32 >> 2] = $3; //@line 19151
     HEAP32[$AsyncCtx2 + 36 >> 2] = $18; //@line 19153
     HEAP32[$AsyncCtx2 + 40 >> 2] = $20; //@line 19155
     HEAP32[$AsyncCtx2 + 44 >> 2] = $1; //@line 19157
     HEAP32[$AsyncCtx2 + 48 >> 2] = $3; //@line 19159
     HEAP32[$AsyncCtx2 + 52 >> 2] = $24; //@line 19161
     HEAP32[$AsyncCtx2 + 56 >> 2] = $23; //@line 19163
     HEAP32[$AsyncCtx2 + 60 >> 2] = $16; //@line 19165
     HEAP8[$AsyncCtx2 + 64 >> 0] = $$01314; //@line 19167
     HEAP8[$AsyncCtx2 + 65 >> 0] = $$015; //@line 19169
     sp = STACKTOP; //@line 19170
     STACKTOP = sp; //@line 19171
     return;
    } else if ((label | 0) == 17) {
     HEAP32[$AsyncCtx5 >> 2] = 502; //@line 19174
     HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 19176
     HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 19178
     HEAP32[$AsyncCtx5 + 12 >> 2] = $26; //@line 19180
     HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 19182
     HEAP32[$AsyncCtx5 + 20 >> 2] = $3; //@line 19184
     HEAP32[$AsyncCtx5 + 24 >> 2] = $25; //@line 19186
     HEAP32[$AsyncCtx5 + 28 >> 2] = $0; //@line 19188
     HEAP32[$AsyncCtx5 + 32 >> 2] = $3; //@line 19190
     HEAP32[$AsyncCtx5 + 36 >> 2] = $18; //@line 19192
     HEAP32[$AsyncCtx5 + 40 >> 2] = $20; //@line 19194
     HEAP32[$AsyncCtx5 + 44 >> 2] = $1; //@line 19196
     HEAP32[$AsyncCtx5 + 48 >> 2] = $3; //@line 19198
     HEAP32[$AsyncCtx5 + 52 >> 2] = $24; //@line 19200
     HEAP32[$AsyncCtx5 + 56 >> 2] = $23; //@line 19202
     HEAP32[$AsyncCtx5 + 60 >> 2] = $16; //@line 19204
     HEAP8[$AsyncCtx5 + 64 >> 0] = $$01314; //@line 19206
     HEAP8[$AsyncCtx5 + 65 >> 0] = $$015; //@line 19208
     sp = STACKTOP; //@line 19209
     STACKTOP = sp; //@line 19210
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 19215
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $48 = 0, $51 = 0, $54 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $71 = 0, $74 = 0, $78 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8237
 STACKTOP = STACKTOP + 48 | 0; //@line 8238
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8238
 $6 = sp + 16 | 0; //@line 8239
 $7 = sp; //@line 8240
 $8 = $1 + 12 | 0; //@line 8241
 $9 = HEAP32[$8 >> 2] | 0; //@line 8242
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 8246
   HEAP32[$11 >> 2] = 0; //@line 8247
   $36 = 0; //@line 8248
   $48 = $11; //@line 8248
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 8251
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 8252
   FUNCTION_TABLE_vii[$13 & 15]($7, $1); //@line 8253
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 283; //@line 8256
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 8258
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 8260
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 8262
    HEAP16[$AsyncCtx + 16 >> 1] = $3; //@line 8264
    HEAP16[$AsyncCtx + 18 >> 1] = $4; //@line 8266
    HEAP8[$AsyncCtx + 20 >> 0] = $5; //@line 8268
    HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 8270
    HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 8272
    sp = STACKTOP; //@line 8273
    STACKTOP = sp; //@line 8274
    return 0; //@line 8274
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8276
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 8277
   $22 = $7 + 12 | 0; //@line 8278
   HEAP32[$22 >> 2] = $$pre$i; //@line 8279
   if (!$$pre$i) {
    $36 = 0; //@line 8282
    $48 = $22; //@line 8282
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8286
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8287
    FUNCTION_TABLE_vii[$25 & 15]($6, $7); //@line 8288
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 284; //@line 8291
     HEAP32[$AsyncCtx2 + 4 >> 2] = $7; //@line 8293
     HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 8295
     HEAP32[$AsyncCtx2 + 12 >> 2] = $22; //@line 8297
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 8299
     HEAP16[$AsyncCtx2 + 20 >> 1] = $3; //@line 8301
     HEAP16[$AsyncCtx2 + 22 >> 1] = $4; //@line 8303
     HEAP8[$AsyncCtx2 + 24 >> 0] = $5; //@line 8305
     HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 8307
     HEAP32[$AsyncCtx2 + 32 >> 2] = $22; //@line 8309
     sp = STACKTOP; //@line 8310
     STACKTOP = sp; //@line 8311
     return 0; //@line 8311
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8313
     $36 = HEAP32[$22 >> 2] | 0; //@line 8315
     $48 = $22; //@line 8315
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 8321
 HEAP32[$35 >> 2] = $36; //@line 8322
 $37 = $6 + 16 | 0; //@line 8323
 HEAP32[$37 >> 2] = $2; //@line 8324
 HEAP16[$6 + 20 >> 1] = $3; //@line 8326
 HEAP16[$6 + 22 >> 1] = $4; //@line 8328
 HEAP8[$6 + 24 >> 0] = $5; //@line 8330
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8331
 $41 = _equeue_alloc($0, 28) | 0; //@line 8332
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 285; //@line 8335
  HEAP32[$AsyncCtx18 + 4 >> 2] = $7; //@line 8337
  HEAP32[$AsyncCtx18 + 8 >> 2] = $35; //@line 8339
  HEAP32[$AsyncCtx18 + 12 >> 2] = $37; //@line 8341
  HEAP32[$AsyncCtx18 + 16 >> 2] = $0; //@line 8343
  HEAP32[$AsyncCtx18 + 20 >> 2] = $35; //@line 8345
  HEAP32[$AsyncCtx18 + 24 >> 2] = $48; //@line 8347
  HEAP32[$AsyncCtx18 + 28 >> 2] = $6; //@line 8349
  sp = STACKTOP; //@line 8350
  STACKTOP = sp; //@line 8351
  return 0; //@line 8351
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 8353
 do {
  if (!$41) {
   $$0$i = 0; //@line 8357
  } else {
   $51 = HEAP32[$35 >> 2] | 0; //@line 8359
   do {
    if (!$51) {
     $64 = 0; //@line 8363
    } else {
     $54 = HEAP32[$51 + 4 >> 2] | 0; //@line 8366
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8367
     FUNCTION_TABLE_vii[$54 & 15]($41, $6); //@line 8368
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 286; //@line 8371
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 8373
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 8375
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 8377
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8379
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 8381
      HEAP32[$AsyncCtx5 + 24 >> 2] = $48; //@line 8383
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 8385
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 8387
      sp = STACKTOP; //@line 8388
      STACKTOP = sp; //@line 8389
      return 0; //@line 8389
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8391
      $64 = HEAP32[$35 >> 2] | 0; //@line 8393
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $64; //@line 8399
   $65 = $41 + 16 | 0; //@line 8400
   HEAP32[$65 >> 2] = HEAP32[$37 >> 2]; //@line 8401
   HEAP32[$65 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 8401
   HEAP8[$65 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 8401
   _equeue_event_dtor($41, 287); //@line 8402
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8403
   $66 = _equeue_post($0, 288, $41) | 0; //@line 8404
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 289; //@line 8407
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 8409
    HEAP32[$AsyncCtx15 + 8 >> 2] = $48; //@line 8411
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 8413
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 8415
    sp = STACKTOP; //@line 8416
    STACKTOP = sp; //@line 8417
    return 0; //@line 8417
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8419
    $$0$i = $66; //@line 8420
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$35 >> 2] | 0; //@line 8425
 do {
  if ($71 | 0) {
   $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 8430
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8431
   FUNCTION_TABLE_vi[$74 & 1023]($6); //@line 8432
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 290; //@line 8435
    HEAP32[$AsyncCtx8 + 4 >> 2] = $48; //@line 8437
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8439
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 8441
    sp = STACKTOP; //@line 8442
    STACKTOP = sp; //@line 8443
    return 0; //@line 8443
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8445
    break;
   }
  }
 } while (0);
 $78 = HEAP32[$48 >> 2] | 0; //@line 8450
 if (!$78) {
  STACKTOP = sp; //@line 8453
  return $$0$i | 0; //@line 8453
 }
 $81 = HEAP32[$78 + 8 >> 2] | 0; //@line 8456
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8457
 FUNCTION_TABLE_vi[$81 & 1023]($7); //@line 8458
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 291; //@line 8461
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8463
  sp = STACKTOP; //@line 8464
  STACKTOP = sp; //@line 8465
  return 0; //@line 8465
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8467
 STACKTOP = sp; //@line 8468
 return $$0$i | 0; //@line 8468
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_294($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22898
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22900
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22902
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22904
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22908
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22910
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22912
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22914
 $17 = $10 + 12 | 0; //@line 22915
 HEAP32[$10 >> 2] = 6; //@line 22916
 HEAP32[$10 + 4 >> 2] = 0; //@line 22918
 HEAP32[$10 + 8 >> 2] = $2; //@line 22920
 HEAP32[$17 >> 2] = 836; //@line 22921
 $18 = $2 + 2416 | 0; //@line 22922
 if (($18 | 0) == ($10 | 0)) {
  $47 = HEAP32[211] | 0; //@line 22926
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 22927
  FUNCTION_TABLE_vi[$47 & 1023]($10); //@line 22928
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 22931
   $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 22932
   HEAP32[$48 >> 2] = $10; //@line 22933
   $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 22934
   HEAP32[$49 >> 2] = $4; //@line 22935
   $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 22936
   HEAP32[$50 >> 2] = $2; //@line 22937
   $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 22938
   HEAP32[$51 >> 2] = $6; //@line 22939
   $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 22940
   HEAP32[$52 >> 2] = $12; //@line 22941
   $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 22942
   HEAP32[$53 >> 2] = $14; //@line 22943
   $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 22944
   HEAP32[$54 >> 2] = $16; //@line 22945
   sp = STACKTOP; //@line 22946
   return;
  }
  ___async_unwind = 0; //@line 22949
  HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 22950
  $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 22951
  HEAP32[$48 >> 2] = $10; //@line 22952
  $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 22953
  HEAP32[$49 >> 2] = $4; //@line 22954
  $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 22955
  HEAP32[$50 >> 2] = $2; //@line 22956
  $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 22957
  HEAP32[$51 >> 2] = $6; //@line 22958
  $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 22959
  HEAP32[$52 >> 2] = $12; //@line 22960
  $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 22961
  HEAP32[$53 >> 2] = $14; //@line 22962
  $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 22963
  HEAP32[$54 >> 2] = $16; //@line 22964
  sp = STACKTOP; //@line 22965
  return;
 }
 $20 = $2 + 2428 | 0; //@line 22968
 $21 = HEAP32[$20 >> 2] | 0; //@line 22969
 if (!$21) {
  $36 = HEAP32[210] | 0; //@line 22973
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 22974
  FUNCTION_TABLE_vii[$36 & 15]($18, $10); //@line 22975
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 22978
   $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 22979
   HEAP32[$37 >> 2] = $10; //@line 22980
   $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 22981
   HEAP32[$38 >> 2] = $4; //@line 22982
   $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 22983
   HEAP32[$39 >> 2] = $2; //@line 22984
   $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 22985
   HEAP32[$40 >> 2] = $6; //@line 22986
   $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 22987
   HEAP32[$41 >> 2] = $12; //@line 22988
   $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 22989
   HEAP32[$42 >> 2] = $14; //@line 22990
   $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 22991
   HEAP32[$43 >> 2] = $17; //@line 22992
   $44 = $ReallocAsyncCtx5 + 32 | 0; //@line 22993
   HEAP32[$44 >> 2] = $20; //@line 22994
   $45 = $ReallocAsyncCtx5 + 36 | 0; //@line 22995
   HEAP32[$45 >> 2] = $16; //@line 22996
   sp = STACKTOP; //@line 22997
   return;
  }
  ___async_unwind = 0; //@line 23000
  HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 23001
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 23002
  HEAP32[$37 >> 2] = $10; //@line 23003
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 23004
  HEAP32[$38 >> 2] = $4; //@line 23005
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 23006
  HEAP32[$39 >> 2] = $2; //@line 23007
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 23008
  HEAP32[$40 >> 2] = $6; //@line 23009
  $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 23010
  HEAP32[$41 >> 2] = $12; //@line 23011
  $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 23012
  HEAP32[$42 >> 2] = $14; //@line 23013
  $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 23014
  HEAP32[$43 >> 2] = $17; //@line 23015
  $44 = $ReallocAsyncCtx5 + 32 | 0; //@line 23016
  HEAP32[$44 >> 2] = $20; //@line 23017
  $45 = $ReallocAsyncCtx5 + 36 | 0; //@line 23018
  HEAP32[$45 >> 2] = $16; //@line 23019
  sp = STACKTOP; //@line 23020
  return;
 } else {
  $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 23024
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 23025
  FUNCTION_TABLE_vi[$24 & 1023]($18); //@line 23026
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 23029
   $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 23030
   HEAP32[$25 >> 2] = $20; //@line 23031
   $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 23032
   HEAP32[$26 >> 2] = $10; //@line 23033
   $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 23034
   HEAP32[$27 >> 2] = $4; //@line 23035
   $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 23036
   HEAP32[$28 >> 2] = $2; //@line 23037
   $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 23038
   HEAP32[$29 >> 2] = $6; //@line 23039
   $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 23040
   HEAP32[$30 >> 2] = $18; //@line 23041
   $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 23042
   HEAP32[$31 >> 2] = $17; //@line 23043
   $32 = $ReallocAsyncCtx4 + 32 | 0; //@line 23044
   HEAP32[$32 >> 2] = $12; //@line 23045
   $33 = $ReallocAsyncCtx4 + 36 | 0; //@line 23046
   HEAP32[$33 >> 2] = $14; //@line 23047
   $34 = $ReallocAsyncCtx4 + 40 | 0; //@line 23048
   HEAP32[$34 >> 2] = $16; //@line 23049
   sp = STACKTOP; //@line 23050
   return;
  }
  ___async_unwind = 0; //@line 23053
  HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 23054
  $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 23055
  HEAP32[$25 >> 2] = $20; //@line 23056
  $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 23057
  HEAP32[$26 >> 2] = $10; //@line 23058
  $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 23059
  HEAP32[$27 >> 2] = $4; //@line 23060
  $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 23061
  HEAP32[$28 >> 2] = $2; //@line 23062
  $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 23063
  HEAP32[$29 >> 2] = $6; //@line 23064
  $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 23065
  HEAP32[$30 >> 2] = $18; //@line 23066
  $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 23067
  HEAP32[$31 >> 2] = $17; //@line 23068
  $32 = $ReallocAsyncCtx4 + 32 | 0; //@line 23069
  HEAP32[$32 >> 2] = $12; //@line 23070
  $33 = $ReallocAsyncCtx4 + 36 | 0; //@line 23071
  HEAP32[$33 >> 2] = $14; //@line 23072
  $34 = $ReallocAsyncCtx4 + 40 | 0; //@line 23073
  HEAP32[$34 >> 2] = $16; //@line 23074
  sp = STACKTOP; //@line 23075
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_302($0) {
 $0 = $0 | 0;
 var $$pre$i$i54 = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 24495
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24497
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24503
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24505
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24507
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24509
 $$pre$i$i54 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 24510
 HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = $$pre$i$i54; //@line 24512
 if ($$pre$i$i54 | 0) {
  $18 = HEAP32[$$pre$i$i54 + 8 >> 2] | 0; //@line 24516
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 24517
  FUNCTION_TABLE_vi[$18 & 1023]($10); //@line 24518
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 24521
   $19 = $ReallocAsyncCtx12 + 4 | 0; //@line 24522
   HEAP32[$19 >> 2] = $2; //@line 24523
   $20 = $ReallocAsyncCtx12 + 8 | 0; //@line 24524
   HEAP32[$20 >> 2] = $8; //@line 24525
   $21 = $ReallocAsyncCtx12 + 12 | 0; //@line 24526
   HEAP32[$21 >> 2] = $12; //@line 24527
   $22 = $ReallocAsyncCtx12 + 16 | 0; //@line 24528
   HEAP32[$22 >> 2] = $10; //@line 24529
   $23 = $ReallocAsyncCtx12 + 20 | 0; //@line 24530
   HEAP32[$23 >> 2] = $14; //@line 24531
   sp = STACKTOP; //@line 24532
   return;
  }
  ___async_unwind = 0; //@line 24535
  HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 24536
  $19 = $ReallocAsyncCtx12 + 4 | 0; //@line 24537
  HEAP32[$19 >> 2] = $2; //@line 24538
  $20 = $ReallocAsyncCtx12 + 8 | 0; //@line 24539
  HEAP32[$20 >> 2] = $8; //@line 24540
  $21 = $ReallocAsyncCtx12 + 12 | 0; //@line 24541
  HEAP32[$21 >> 2] = $12; //@line 24542
  $22 = $ReallocAsyncCtx12 + 16 | 0; //@line 24543
  HEAP32[$22 >> 2] = $10; //@line 24544
  $23 = $ReallocAsyncCtx12 + 20 | 0; //@line 24545
  HEAP32[$23 >> 2] = $14; //@line 24546
  sp = STACKTOP; //@line 24547
  return;
 }
 $24 = $14 + 12 | 0; //@line 24550
 HEAP32[$14 >> 2] = 181; //@line 24551
 HEAP32[$14 + 4 >> 2] = 0; //@line 24553
 HEAP32[$14 + 8 >> 2] = $8; //@line 24555
 HEAP32[$24 >> 2] = 824; //@line 24556
 $25 = $8 + 2432 | 0; //@line 24557
 if (($25 | 0) == ($14 | 0)) {
  $48 = HEAP32[208] | 0; //@line 24561
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 24562
  FUNCTION_TABLE_vi[$48 & 1023]($14); //@line 24563
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 24566
   $49 = $ReallocAsyncCtx15 + 4 | 0; //@line 24567
   HEAP32[$49 >> 2] = $14; //@line 24568
   $50 = $ReallocAsyncCtx15 + 8 | 0; //@line 24569
   HEAP32[$50 >> 2] = $8; //@line 24570
   $51 = $ReallocAsyncCtx15 + 12 | 0; //@line 24571
   HEAP32[$51 >> 2] = $2; //@line 24572
   $52 = $ReallocAsyncCtx15 + 16 | 0; //@line 24573
   HEAP32[$52 >> 2] = $12; //@line 24574
   sp = STACKTOP; //@line 24575
   return;
  }
  ___async_unwind = 0; //@line 24578
  HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 24579
  $49 = $ReallocAsyncCtx15 + 4 | 0; //@line 24580
  HEAP32[$49 >> 2] = $14; //@line 24581
  $50 = $ReallocAsyncCtx15 + 8 | 0; //@line 24582
  HEAP32[$50 >> 2] = $8; //@line 24583
  $51 = $ReallocAsyncCtx15 + 12 | 0; //@line 24584
  HEAP32[$51 >> 2] = $2; //@line 24585
  $52 = $ReallocAsyncCtx15 + 16 | 0; //@line 24586
  HEAP32[$52 >> 2] = $12; //@line 24587
  sp = STACKTOP; //@line 24588
  return;
 }
 $27 = $8 + 2444 | 0; //@line 24591
 $28 = HEAP32[$27 >> 2] | 0; //@line 24592
 if (!$28) {
  $40 = HEAP32[207] | 0; //@line 24596
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 24597
  FUNCTION_TABLE_vii[$40 & 15]($25, $14); //@line 24598
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 24601
   $41 = $ReallocAsyncCtx14 + 4 | 0; //@line 24602
   HEAP32[$41 >> 2] = $24; //@line 24603
   $42 = $ReallocAsyncCtx14 + 8 | 0; //@line 24604
   HEAP32[$42 >> 2] = $27; //@line 24605
   $43 = $ReallocAsyncCtx14 + 12 | 0; //@line 24606
   HEAP32[$43 >> 2] = $14; //@line 24607
   $44 = $ReallocAsyncCtx14 + 16 | 0; //@line 24608
   HEAP32[$44 >> 2] = $8; //@line 24609
   $45 = $ReallocAsyncCtx14 + 20 | 0; //@line 24610
   HEAP32[$45 >> 2] = $2; //@line 24611
   $46 = $ReallocAsyncCtx14 + 24 | 0; //@line 24612
   HEAP32[$46 >> 2] = $12; //@line 24613
   sp = STACKTOP; //@line 24614
   return;
  }
  ___async_unwind = 0; //@line 24617
  HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 24618
  $41 = $ReallocAsyncCtx14 + 4 | 0; //@line 24619
  HEAP32[$41 >> 2] = $24; //@line 24620
  $42 = $ReallocAsyncCtx14 + 8 | 0; //@line 24621
  HEAP32[$42 >> 2] = $27; //@line 24622
  $43 = $ReallocAsyncCtx14 + 12 | 0; //@line 24623
  HEAP32[$43 >> 2] = $14; //@line 24624
  $44 = $ReallocAsyncCtx14 + 16 | 0; //@line 24625
  HEAP32[$44 >> 2] = $8; //@line 24626
  $45 = $ReallocAsyncCtx14 + 20 | 0; //@line 24627
  HEAP32[$45 >> 2] = $2; //@line 24628
  $46 = $ReallocAsyncCtx14 + 24 | 0; //@line 24629
  HEAP32[$46 >> 2] = $12; //@line 24630
  sp = STACKTOP; //@line 24631
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 24635
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 24636
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 24637
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 182; //@line 24640
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 24641
   HEAP32[$32 >> 2] = $24; //@line 24642
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 24643
   HEAP32[$33 >> 2] = $27; //@line 24644
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 24645
   HEAP32[$34 >> 2] = $25; //@line 24646
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 24647
   HEAP32[$35 >> 2] = $14; //@line 24648
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 24649
   HEAP32[$36 >> 2] = $8; //@line 24650
   $37 = $ReallocAsyncCtx13 + 24 | 0; //@line 24651
   HEAP32[$37 >> 2] = $2; //@line 24652
   $38 = $ReallocAsyncCtx13 + 28 | 0; //@line 24653
   HEAP32[$38 >> 2] = $12; //@line 24654
   sp = STACKTOP; //@line 24655
   return;
  }
  ___async_unwind = 0; //@line 24658
  HEAP32[$ReallocAsyncCtx13 >> 2] = 182; //@line 24659
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 24660
  HEAP32[$32 >> 2] = $24; //@line 24661
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 24662
  HEAP32[$33 >> 2] = $27; //@line 24663
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 24664
  HEAP32[$34 >> 2] = $25; //@line 24665
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 24666
  HEAP32[$35 >> 2] = $14; //@line 24667
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 24668
  HEAP32[$36 >> 2] = $8; //@line 24669
  $37 = $ReallocAsyncCtx13 + 24 | 0; //@line 24670
  HEAP32[$37 >> 2] = $2; //@line 24671
  $38 = $ReallocAsyncCtx13 + 28 | 0; //@line 24672
  HEAP32[$38 >> 2] = $12; //@line 24673
  sp = STACKTOP; //@line 24674
  return;
 }
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3699
 STACKTOP = STACKTOP + 16 | 0; //@line 3700
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3700
 $3 = sp; //@line 3701
 if (!$0) {
  $$0 = -24832; //@line 3704
  STACKTOP = sp; //@line 3705
  return $$0 | 0; //@line 3705
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3707
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 3712
  STACKTOP = sp; //@line 3713
  return $$0 | 0; //@line 3713
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 3716
 if (!$9) {
  $$0 = -24832; //@line 3719
  STACKTOP = sp; //@line 3720
  return $$0 | 0; //@line 3720
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 3723
 $13 = $9 + 32 | 0; //@line 3724
 $14 = HEAP32[$13 >> 2] | 0; //@line 3725
 do {
  if (!$14) {
   $$070 = $1; //@line 3729
   $$073 = $2; //@line 3729
  } else {
   $16 = $12 - $14 | 0; //@line 3731
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 3735
    if ($12 | 0) {
     $$09$i = 0; //@line 3738
     do {
      $22 = $9 + $$09$i | 0; //@line 3742
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 3745
      $$09$i = $$09$i + 1 | 0; //@line 3746
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3755
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3756
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 581; //@line 3759
     HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 3761
     HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 3763
     HEAP32[$AsyncCtx5 + 12 >> 2] = $12; //@line 3765
     HEAP32[$AsyncCtx5 + 16 >> 2] = $13; //@line 3767
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 3769
     HEAP32[$AsyncCtx5 + 24 >> 2] = $9; //@line 3771
     HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 3773
     HEAP32[$AsyncCtx5 + 32 >> 2] = $9; //@line 3775
     HEAP32[$AsyncCtx5 + 36 >> 2] = $3; //@line 3777
     sp = STACKTOP; //@line 3778
     STACKTOP = sp; //@line 3779
     return 0; //@line 3779
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3781
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 3785
     HEAP32[$13 >> 2] = 0; //@line 3788
     $$070 = $1 + $38 | 0; //@line 3789
     $$073 = $2 - $38 | 0; //@line 3789
     break;
    } else {
     $$0 = $26; //@line 3792
     STACKTOP = sp; //@line 3793
     return $$0 | 0; //@line 3793
    }
   } else {
    $$070 = $1; //@line 3796
    $$073 = $2; //@line 3796
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 3802
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 3808
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3810
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 3811
     if (___async) {
      label = 15; //@line 3814
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3817
     if ($46 | 0) {
      $$0 = $46; //@line 3820
      label = 26; //@line 3821
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 3824
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 3827
     } else {
      $$1$lcssa = $$070; //@line 3829
      $$174$lcssa = $$073; //@line 3829
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 582; //@line 3834
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 3836
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 3838
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 3840
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 3842
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 3844
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3846
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 3848
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 3850
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 3852
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 3854
     sp = STACKTOP; //@line 3855
     STACKTOP = sp; //@line 3856
     return 0; //@line 3856
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 3859
     return $$0 | 0; //@line 3859
    }
   } else {
    $$06984 = 1; //@line 3862
    $$17481 = $$073; //@line 3862
    $$182 = $$070; //@line 3862
   }
   while (1) {
    $$09$i75 = 0; //@line 3865
    do {
     $62 = $9 + $$09$i75 | 0; //@line 3869
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 3872
     $$09$i75 = $$09$i75 + 1 | 0; //@line 3873
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 3881
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3882
    if (___async) {
     label = 21; //@line 3885
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3888
    if ($66 | 0) {
     $$0 = $66; //@line 3891
     label = 26; //@line 3892
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 3895
    $80 = $$182 + $12 | 0; //@line 3896
    $81 = $$06984 + 1 | 0; //@line 3897
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 3900
     $$17481 = $79; //@line 3900
     $$182 = $80; //@line 3900
    } else {
     $$1$lcssa = $80; //@line 3902
     $$174$lcssa = $79; //@line 3902
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 583; //@line 3907
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 3909
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 3911
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 3913
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 3915
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 3917
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 3919
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 3921
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 3923
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 3925
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 3927
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 3929
    sp = STACKTOP; //@line 3930
    STACKTOP = sp; //@line 3931
    return 0; //@line 3931
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 3934
    return $$0 | 0; //@line 3934
   }
  } else {
   $$1$lcssa = $$070; //@line 3937
   $$174$lcssa = $$073; //@line 3937
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 3942
  STACKTOP = sp; //@line 3943
  return $$0 | 0; //@line 3943
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 3947
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 3950
 $$0 = 0; //@line 3951
 STACKTOP = sp; //@line 3952
 return $$0 | 0; //@line 3952
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $39 = 0, $4 = 0, $43 = 0, $46 = 0, $5 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8911
 STACKTOP = STACKTOP + 48 | 0; //@line 8912
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8912
 $4 = sp + 16 | 0; //@line 8913
 $5 = sp; //@line 8914
 $6 = $1 + 12 | 0; //@line 8915
 $7 = HEAP32[$6 >> 2] | 0; //@line 8916
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 8920
   HEAP32[$9 >> 2] = 0; //@line 8921
   $30 = 0; //@line 8922
   $39 = $9; //@line 8922
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 8925
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8926
   FUNCTION_TABLE_vii[$11 & 15]($5, $1); //@line 8927
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 309; //@line 8930
    HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 8932
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 8934
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 8936
    HEAP8[$AsyncCtx + 16 >> 0] = $2; //@line 8938
    HEAP8[$AsyncCtx + 17 >> 0] = $3; //@line 8940
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 8942
    sp = STACKTOP; //@line 8943
    STACKTOP = sp; //@line 8944
    return 0; //@line 8944
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8946
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 8947
   $18 = $5 + 12 | 0; //@line 8948
   HEAP32[$18 >> 2] = $$pre$i; //@line 8949
   if (!$$pre$i) {
    $30 = 0; //@line 8952
    $39 = $18; //@line 8952
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8956
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8957
    FUNCTION_TABLE_vii[$21 & 15]($4, $5); //@line 8958
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 310; //@line 8961
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 8963
     HEAP32[$AsyncCtx2 + 8 >> 2] = $5; //@line 8965
     HEAP32[$AsyncCtx2 + 12 >> 2] = $18; //@line 8967
     HEAP32[$AsyncCtx2 + 16 >> 2] = $18; //@line 8969
     HEAP8[$AsyncCtx2 + 20 >> 0] = $2; //@line 8971
     HEAP8[$AsyncCtx2 + 21 >> 0] = $3; //@line 8973
     HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 8975
     sp = STACKTOP; //@line 8976
     STACKTOP = sp; //@line 8977
     return 0; //@line 8977
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8979
     $30 = HEAP32[$18 >> 2] | 0; //@line 8981
     $39 = $18; //@line 8981
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 8987
 HEAP32[$29 >> 2] = $30; //@line 8988
 $31 = $4 + 16 | 0; //@line 8989
 HEAP8[$31 >> 0] = $2; //@line 8990
 HEAP8[$4 + 17 >> 0] = $3; //@line 8992
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8993
 $33 = _equeue_alloc($0, 20) | 0; //@line 8994
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 311; //@line 8997
  HEAP32[$AsyncCtx18 + 4 >> 2] = $29; //@line 8999
  HEAP32[$AsyncCtx18 + 8 >> 2] = $31; //@line 9001
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 9003
  HEAP32[$AsyncCtx18 + 16 >> 2] = $29; //@line 9005
  HEAP32[$AsyncCtx18 + 20 >> 2] = $39; //@line 9007
  HEAP32[$AsyncCtx18 + 24 >> 2] = $4; //@line 9009
  HEAP32[$AsyncCtx18 + 28 >> 2] = $5; //@line 9011
  sp = STACKTOP; //@line 9012
  STACKTOP = sp; //@line 9013
  return 0; //@line 9013
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 9015
 do {
  if (!$33) {
   $$0$i = 0; //@line 9019
  } else {
   $43 = HEAP32[$29 >> 2] | 0; //@line 9021
   do {
    if (!$43) {
     $56 = 0; //@line 9025
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 9028
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9029
     FUNCTION_TABLE_vii[$46 & 15]($33, $4); //@line 9030
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 312; //@line 9033
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 9035
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 9037
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 9039
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 9041
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 9043
      HEAP32[$AsyncCtx5 + 24 >> 2] = $39; //@line 9045
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 9047
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 9049
      sp = STACKTOP; //@line 9050
      STACKTOP = sp; //@line 9051
      return 0; //@line 9051
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9053
      $56 = HEAP32[$29 >> 2] | 0; //@line 9055
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $56; //@line 9061
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 9064
   _equeue_event_dtor($33, 313); //@line 9065
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9066
   $59 = _equeue_post($0, 314, $33) | 0; //@line 9067
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 315; //@line 9070
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 9072
    HEAP32[$AsyncCtx15 + 8 >> 2] = $39; //@line 9074
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 9076
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 9078
    sp = STACKTOP; //@line 9079
    STACKTOP = sp; //@line 9080
    return 0; //@line 9080
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 9082
    $$0$i = $59; //@line 9083
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$29 >> 2] | 0; //@line 9088
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 9093
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9094
   FUNCTION_TABLE_vi[$67 & 1023]($4); //@line 9095
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 316; //@line 9098
    HEAP32[$AsyncCtx8 + 4 >> 2] = $39; //@line 9100
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 9102
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 9104
    sp = STACKTOP; //@line 9105
    STACKTOP = sp; //@line 9106
    return 0; //@line 9106
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9108
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$39 >> 2] | 0; //@line 9113
 if (!$71) {
  STACKTOP = sp; //@line 9116
  return $$0$i | 0; //@line 9116
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 9119
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9120
 FUNCTION_TABLE_vi[$74 & 1023]($5); //@line 9121
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 317; //@line 9124
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 9126
  sp = STACKTOP; //@line 9127
  STACKTOP = sp; //@line 9128
  return 0; //@line 9128
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 9130
 STACKTOP = sp; //@line 9131
 return $$0$i | 0; //@line 9131
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $17 = 0, $18 = 0, $21 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $55 = 0, $58 = 0, $6 = 0, $63 = 0, $66 = 0, $70 = 0, $73 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 6096
 STACKTOP = STACKTOP + 48 | 0; //@line 6097
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6097
 $3 = sp + 16 | 0; //@line 6098
 $4 = sp; //@line 6099
 $5 = $1 + 12 | 0; //@line 6100
 $6 = HEAP32[$5 >> 2] | 0; //@line 6101
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 6105
   HEAP32[$8 >> 2] = 0; //@line 6106
   $29 = 0; //@line 6108
   $31 = $2 & 1; //@line 6108
   $38 = $8; //@line 6108
  } else {
   $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 6111
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6112
   FUNCTION_TABLE_vii[$11 & 15]($4, $1); //@line 6113
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 206; //@line 6116
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 6118
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 6120
    HEAP8[$AsyncCtx + 12 >> 0] = $2 & 1; //@line 6123
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 6125
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 6127
    sp = STACKTOP; //@line 6128
    STACKTOP = sp; //@line 6129
    return 0; //@line 6129
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6131
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 6132
   $17 = $4 + 12 | 0; //@line 6133
   HEAP32[$17 >> 2] = $$pre$i; //@line 6134
   $18 = $2 & 1; //@line 6135
   if (!$$pre$i) {
    $29 = 0; //@line 6138
    $31 = $18; //@line 6138
    $38 = $17; //@line 6138
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 6142
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6143
    FUNCTION_TABLE_vii[$21 & 15]($3, $4); //@line 6144
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 207; //@line 6147
     HEAP32[$AsyncCtx2 + 4 >> 2] = $17; //@line 6149
     HEAP8[$AsyncCtx2 + 8 >> 0] = $18; //@line 6151
     HEAP32[$AsyncCtx2 + 12 >> 2] = $17; //@line 6153
     HEAP32[$AsyncCtx2 + 16 >> 2] = $3; //@line 6155
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 6157
     HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 6159
     sp = STACKTOP; //@line 6160
     STACKTOP = sp; //@line 6161
     return 0; //@line 6161
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6163
     $29 = HEAP32[$17 >> 2] | 0; //@line 6165
     $31 = $18; //@line 6165
     $38 = $17; //@line 6165
     break;
    }
   }
  }
 } while (0);
 $28 = $3 + 12 | 0; //@line 6171
 HEAP32[$28 >> 2] = $29; //@line 6172
 $30 = $3 + 16 | 0; //@line 6173
 HEAP8[$30 >> 0] = $31; //@line 6174
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6175
 $32 = _equeue_alloc($0, 20) | 0; //@line 6176
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 208; //@line 6179
  HEAP32[$AsyncCtx18 + 4 >> 2] = $28; //@line 6181
  HEAP32[$AsyncCtx18 + 8 >> 2] = $30; //@line 6183
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 6185
  HEAP32[$AsyncCtx18 + 16 >> 2] = $28; //@line 6187
  HEAP32[$AsyncCtx18 + 20 >> 2] = $38; //@line 6189
  HEAP32[$AsyncCtx18 + 24 >> 2] = $3; //@line 6191
  HEAP32[$AsyncCtx18 + 28 >> 2] = $4; //@line 6193
  sp = STACKTOP; //@line 6194
  STACKTOP = sp; //@line 6195
  return 0; //@line 6195
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 6197
 do {
  if (!$32) {
   $$0$i = 0; //@line 6201
  } else {
   $42 = HEAP32[$28 >> 2] | 0; //@line 6203
   do {
    if (!$42) {
     $55 = 0; //@line 6207
    } else {
     $45 = HEAP32[$42 + 4 >> 2] | 0; //@line 6210
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6211
     FUNCTION_TABLE_vii[$45 & 15]($32, $3); //@line 6212
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 209; //@line 6215
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 6217
      HEAP32[$AsyncCtx5 + 8 >> 2] = $32; //@line 6219
      HEAP32[$AsyncCtx5 + 12 >> 2] = $30; //@line 6221
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 6223
      HEAP32[$AsyncCtx5 + 20 >> 2] = $28; //@line 6225
      HEAP32[$AsyncCtx5 + 24 >> 2] = $38; //@line 6227
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 6229
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 6231
      sp = STACKTOP; //@line 6232
      STACKTOP = sp; //@line 6233
      return 0; //@line 6233
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6235
      $55 = HEAP32[$28 >> 2] | 0; //@line 6237
      break;
     }
    }
   } while (0);
   HEAP32[$32 + 12 >> 2] = $55; //@line 6243
   HEAP8[$32 + 16 >> 0] = HEAP8[$30 >> 0] | 0; //@line 6246
   _equeue_event_dtor($32, 210); //@line 6247
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6248
   $58 = _equeue_post($0, 211, $32) | 0; //@line 6249
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 212; //@line 6252
    HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 6254
    HEAP32[$AsyncCtx15 + 8 >> 2] = $38; //@line 6256
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 6258
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 6260
    sp = STACKTOP; //@line 6261
    STACKTOP = sp; //@line 6262
    return 0; //@line 6262
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6264
    $$0$i = $58; //@line 6265
    break;
   }
  }
 } while (0);
 $63 = HEAP32[$28 >> 2] | 0; //@line 6270
 do {
  if ($63 | 0) {
   $66 = HEAP32[$63 + 8 >> 2] | 0; //@line 6275
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6276
   FUNCTION_TABLE_vi[$66 & 1023]($3); //@line 6277
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 213; //@line 6280
    HEAP32[$AsyncCtx8 + 4 >> 2] = $38; //@line 6282
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 6284
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 6286
    sp = STACKTOP; //@line 6287
    STACKTOP = sp; //@line 6288
    return 0; //@line 6288
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6290
    break;
   }
  }
 } while (0);
 $70 = HEAP32[$38 >> 2] | 0; //@line 6295
 if (!$70) {
  STACKTOP = sp; //@line 6298
  return $$0$i | 0; //@line 6298
 }
 $73 = HEAP32[$70 + 8 >> 2] | 0; //@line 6301
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6302
 FUNCTION_TABLE_vi[$73 & 1023]($4); //@line 6303
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 214; //@line 6306
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 6308
  sp = STACKTOP; //@line 6309
  STACKTOP = sp; //@line 6310
  return 0; //@line 6310
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6312
 STACKTOP = sp; //@line 6313
 return $$0$i | 0; //@line 6313
}
function _mbedtls_cipher_cmac_update__async_cb_193($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14680
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14682
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14684
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14686
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14688
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14690
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14692
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14694
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14696
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14698
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14700
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 14703
  $66 = ___async_retval; //@line 14704
  HEAP32[$66 >> 2] = $$0; //@line 14705
  return;
 }
 $22 = $6 - (HEAP32[$8 >> 2] | 0) | 0; //@line 14709
 $23 = $4 + $22 | 0; //@line 14710
 $24 = $2 - $22 | 0; //@line 14711
 HEAP32[$8 >> 2] = 0; //@line 14712
 $27 = (($6 + -1 + $24 | 0) >>> 0) / ($6 >>> 0) | 0; //@line 14715
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 14720
   $66 = ___async_retval; //@line 14721
   HEAP32[$66 >> 2] = $$0; //@line 14722
   return;
  }
  _memcpy((HEAP32[$8 >> 2] | 0) + ($16 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 14727
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $24; //@line 14730
  $$0 = 0; //@line 14731
  $66 = ___async_retval; //@line 14732
  HEAP32[$66 >> 2] = $$0; //@line 14733
  return;
 }
 if (!$6) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 14738
  $30 = _mbedtls_cipher_update($10, $12, 0, $12, $14) | 0; //@line 14739
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 582; //@line 14742
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 14743
   HEAP32[$31 >> 2] = 1; //@line 14744
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 14745
   HEAP32[$32 >> 2] = $27; //@line 14746
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 14747
   HEAP32[$33 >> 2] = $18; //@line 14748
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 14749
   HEAP32[$34 >> 2] = $10; //@line 14750
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 14751
   HEAP32[$35 >> 2] = $12; //@line 14752
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 14753
   HEAP32[$36 >> 2] = $14; //@line 14754
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 14755
   HEAP32[$37 >> 2] = $24; //@line 14756
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 14757
   HEAP32[$38 >> 2] = $23; //@line 14758
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 14759
   HEAP32[$39 >> 2] = $8; //@line 14760
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 14761
   HEAP32[$40 >> 2] = $16; //@line 14762
   sp = STACKTOP; //@line 14763
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 14767
  ___async_unwind = 0; //@line 14768
  HEAP32[$ReallocAsyncCtx2 >> 2] = 582; //@line 14769
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 14770
  HEAP32[$31 >> 2] = 1; //@line 14771
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 14772
  HEAP32[$32 >> 2] = $27; //@line 14773
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 14774
  HEAP32[$33 >> 2] = $18; //@line 14775
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 14776
  HEAP32[$34 >> 2] = $10; //@line 14777
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 14778
  HEAP32[$35 >> 2] = $12; //@line 14779
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 14780
  HEAP32[$36 >> 2] = $14; //@line 14781
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 14782
  HEAP32[$37 >> 2] = $24; //@line 14783
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 14784
  HEAP32[$38 >> 2] = $23; //@line 14785
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 14786
  HEAP32[$39 >> 2] = $8; //@line 14787
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 14788
  HEAP32[$40 >> 2] = $16; //@line 14789
  sp = STACKTOP; //@line 14790
  return;
 }
 $$09$i75 = 0; //@line 14793
 do {
  $44 = $16 + $$09$i75 | 0; //@line 14797
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 14800
  $$09$i75 = $$09$i75 + 1 | 0; //@line 14801
 } while (($$09$i75 | 0) != ($6 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 14809
 $48 = _mbedtls_cipher_update($10, $12, $6, $12, $14) | 0; //@line 14810
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 583; //@line 14813
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 14814
  HEAP32[$49 >> 2] = $24; //@line 14815
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 14816
  HEAP32[$50 >> 2] = $6; //@line 14817
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 14818
  HEAP32[$51 >> 2] = $23; //@line 14819
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 14820
  HEAP32[$52 >> 2] = 1; //@line 14821
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 14822
  HEAP32[$53 >> 2] = $27; //@line 14823
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 14824
  HEAP32[$54 >> 2] = $18; //@line 14825
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 14826
  HEAP32[$55 >> 2] = $8; //@line 14827
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 14828
  HEAP32[$56 >> 2] = $16; //@line 14829
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 14830
  HEAP32[$57 >> 2] = $10; //@line 14831
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 14832
  HEAP32[$58 >> 2] = $12; //@line 14833
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 14834
  HEAP32[$59 >> 2] = $14; //@line 14835
  sp = STACKTOP; //@line 14836
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 14840
 ___async_unwind = 0; //@line 14841
 HEAP32[$ReallocAsyncCtx >> 2] = 583; //@line 14842
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 14843
 HEAP32[$49 >> 2] = $24; //@line 14844
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 14845
 HEAP32[$50 >> 2] = $6; //@line 14846
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 14847
 HEAP32[$51 >> 2] = $23; //@line 14848
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 14849
 HEAP32[$52 >> 2] = 1; //@line 14850
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 14851
 HEAP32[$53 >> 2] = $27; //@line 14852
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 14853
 HEAP32[$54 >> 2] = $18; //@line 14854
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 14855
 HEAP32[$55 >> 2] = $8; //@line 14856
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 14857
 HEAP32[$56 >> 2] = $16; //@line 14858
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 14859
 HEAP32[$57 >> 2] = $10; //@line 14860
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 14861
 HEAP32[$58 >> 2] = $12; //@line 14862
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 14863
 HEAP32[$59 >> 2] = $14; //@line 14864
 sp = STACKTOP; //@line 14865
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $6 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20879
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20881
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20883
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20885
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20887
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20889
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20891
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 20893
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20895
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20897
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20899
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20901
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 20903
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20905
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20907
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20909
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20911
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20913
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20915
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20917
 if (HEAP8[___async_retval >> 0] & 1) {
  $70 = $6; //@line 20922
 } else {
  $44 = $6 + 1 | 0; //@line 20924
  if (($44 | 0) < (HEAPU8[$16 >> 0] | 0 | 0)) {
   $42 = HEAP32[(HEAP32[$18 >> 2] | 0) + 76 >> 2] | 0; //@line 20931
   $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 20933
   $45 = FUNCTION_TABLE_iiii[$42 & 31]($4, $20, $44 & 255) | 0; //@line 20934
   if (!___async) {
    HEAP8[___async_retval >> 0] = $45 & 1; //@line 20939
    ___async_unwind = 0; //@line 20940
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 500; //@line 20942
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 20944
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 20946
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $44; //@line 20948
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 20950
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 20952
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 20954
   HEAP8[$ReallocAsyncCtx + 28 >> 0] = $14; //@line 20956
   HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 20958
   HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 20960
   HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 20962
   HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 20964
   HEAP8[$ReallocAsyncCtx + 48 >> 0] = $24; //@line 20966
   HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 20968
   HEAP32[$ReallocAsyncCtx + 56 >> 2] = $28; //@line 20970
   HEAP32[$ReallocAsyncCtx + 60 >> 2] = $30; //@line 20972
   HEAP32[$ReallocAsyncCtx + 64 >> 2] = $32; //@line 20974
   HEAP32[$ReallocAsyncCtx + 68 >> 2] = $34; //@line 20976
   HEAP32[$ReallocAsyncCtx + 72 >> 2] = $36; //@line 20978
   HEAP32[$ReallocAsyncCtx + 76 >> 2] = $38; //@line 20980
   sp = STACKTOP; //@line 20981
   return;
  } else {
   $70 = -1; //@line 20984
  }
 }
 HEAP8[$8 >> 0] = $70; //@line 20988
 $73 = HEAP32[(HEAP32[$10 >> 2] | 0) + 60 >> 2] | 0; //@line 20991
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(68) | 0; //@line 20992
 FUNCTION_TABLE_iiii[$73 & 31]($4, $12, $14) | 0; //@line 20993
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 20996
  $74 = $ReallocAsyncCtx2 + 4 | 0; //@line 20997
  HEAP32[$74 >> 2] = $2; //@line 20998
  $75 = $ReallocAsyncCtx2 + 8 | 0; //@line 20999
  HEAP32[$75 >> 2] = $4; //@line 21000
  $76 = $ReallocAsyncCtx2 + 12 | 0; //@line 21001
  HEAP32[$76 >> 2] = $8; //@line 21002
  $77 = $ReallocAsyncCtx2 + 16 | 0; //@line 21003
  HEAP32[$77 >> 2] = $10; //@line 21004
  $78 = $ReallocAsyncCtx2 + 20 | 0; //@line 21005
  HEAP32[$78 >> 2] = $12; //@line 21006
  $79 = $ReallocAsyncCtx2 + 24 | 0; //@line 21007
  HEAP32[$79 >> 2] = $16; //@line 21008
  $80 = $ReallocAsyncCtx2 + 28 | 0; //@line 21009
  HEAP32[$80 >> 2] = $18; //@line 21010
  $81 = $ReallocAsyncCtx2 + 32 | 0; //@line 21011
  HEAP32[$81 >> 2] = $22; //@line 21012
  $82 = $ReallocAsyncCtx2 + 36 | 0; //@line 21013
  HEAP32[$82 >> 2] = $26; //@line 21014
  $83 = $ReallocAsyncCtx2 + 40 | 0; //@line 21015
  HEAP32[$83 >> 2] = $28; //@line 21016
  $84 = $ReallocAsyncCtx2 + 44 | 0; //@line 21017
  HEAP32[$84 >> 2] = $30; //@line 21018
  $85 = $ReallocAsyncCtx2 + 48 | 0; //@line 21019
  HEAP32[$85 >> 2] = $32; //@line 21020
  $86 = $ReallocAsyncCtx2 + 52 | 0; //@line 21021
  HEAP32[$86 >> 2] = $34; //@line 21022
  $87 = $ReallocAsyncCtx2 + 56 | 0; //@line 21023
  HEAP32[$87 >> 2] = $36; //@line 21024
  $88 = $ReallocAsyncCtx2 + 60 | 0; //@line 21025
  HEAP32[$88 >> 2] = $38; //@line 21026
  $89 = $ReallocAsyncCtx2 + 64 | 0; //@line 21027
  HEAP8[$89 >> 0] = $24; //@line 21028
  $90 = $ReallocAsyncCtx2 + 65 | 0; //@line 21029
  HEAP8[$90 >> 0] = $14; //@line 21030
  sp = STACKTOP; //@line 21031
  return;
 }
 ___async_unwind = 0; //@line 21034
 HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 21035
 $74 = $ReallocAsyncCtx2 + 4 | 0; //@line 21036
 HEAP32[$74 >> 2] = $2; //@line 21037
 $75 = $ReallocAsyncCtx2 + 8 | 0; //@line 21038
 HEAP32[$75 >> 2] = $4; //@line 21039
 $76 = $ReallocAsyncCtx2 + 12 | 0; //@line 21040
 HEAP32[$76 >> 2] = $8; //@line 21041
 $77 = $ReallocAsyncCtx2 + 16 | 0; //@line 21042
 HEAP32[$77 >> 2] = $10; //@line 21043
 $78 = $ReallocAsyncCtx2 + 20 | 0; //@line 21044
 HEAP32[$78 >> 2] = $12; //@line 21045
 $79 = $ReallocAsyncCtx2 + 24 | 0; //@line 21046
 HEAP32[$79 >> 2] = $16; //@line 21047
 $80 = $ReallocAsyncCtx2 + 28 | 0; //@line 21048
 HEAP32[$80 >> 2] = $18; //@line 21049
 $81 = $ReallocAsyncCtx2 + 32 | 0; //@line 21050
 HEAP32[$81 >> 2] = $22; //@line 21051
 $82 = $ReallocAsyncCtx2 + 36 | 0; //@line 21052
 HEAP32[$82 >> 2] = $26; //@line 21053
 $83 = $ReallocAsyncCtx2 + 40 | 0; //@line 21054
 HEAP32[$83 >> 2] = $28; //@line 21055
 $84 = $ReallocAsyncCtx2 + 44 | 0; //@line 21056
 HEAP32[$84 >> 2] = $30; //@line 21057
 $85 = $ReallocAsyncCtx2 + 48 | 0; //@line 21058
 HEAP32[$85 >> 2] = $32; //@line 21059
 $86 = $ReallocAsyncCtx2 + 52 | 0; //@line 21060
 HEAP32[$86 >> 2] = $34; //@line 21061
 $87 = $ReallocAsyncCtx2 + 56 | 0; //@line 21062
 HEAP32[$87 >> 2] = $36; //@line 21063
 $88 = $ReallocAsyncCtx2 + 60 | 0; //@line 21064
 HEAP32[$88 >> 2] = $38; //@line 21065
 $89 = $ReallocAsyncCtx2 + 64 | 0; //@line 21066
 HEAP8[$89 >> 0] = $24; //@line 21067
 $90 = $ReallocAsyncCtx2 + 65 | 0; //@line 21068
 HEAP8[$90 >> 0] = $14; //@line 21069
 sp = STACKTOP; //@line 21070
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1065
 HEAP32[$0 >> 2] = 496; //@line 1066
 $1 = $0 + 1240 | 0; //@line 1067
 HEAP32[$1 >> 2] = 10244; //@line 1068
 __ZN4mbed6Ticker6detachEv($1); //@line 1069
 $3 = HEAP32[$0 + 1292 >> 2] | 0; //@line 1071
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 1077
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1078
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1280 | 0); //@line 1079
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 66; //@line 1082
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1084
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1086
    sp = STACKTOP; //@line 1087
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1090
    break;
   }
  }
 } while (0);
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1095
 __ZN4mbed10TimerEventD2Ev($1); //@line 1096
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 67; //@line 1099
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 1101
  sp = STACKTOP; //@line 1102
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 1105
 $11 = $0 + 1176 | 0; //@line 1106
 HEAP32[$11 >> 2] = 10244; //@line 1107
 __ZN4mbed6Ticker6detachEv($11); //@line 1108
 $13 = HEAP32[$0 + 1228 >> 2] | 0; //@line 1110
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 1116
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1117
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1216 | 0); //@line 1118
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 68; //@line 1121
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1123
    HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 1125
    sp = STACKTOP; //@line 1126
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1129
    break;
   }
  }
 } while (0);
 $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1134
 __ZN4mbed10TimerEventD2Ev($11); //@line 1135
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 69; //@line 1138
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 1140
  sp = STACKTOP; //@line 1141
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 1144
 $21 = $0 + 1112 | 0; //@line 1145
 HEAP32[$21 >> 2] = 10244; //@line 1146
 __ZN4mbed6Ticker6detachEv($21); //@line 1147
 $23 = HEAP32[$0 + 1164 >> 2] | 0; //@line 1149
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 1155
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1156
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1152 | 0); //@line 1157
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 70; //@line 1160
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1162
    HEAP32[$AsyncCtx7 + 8 >> 2] = $21; //@line 1164
    sp = STACKTOP; //@line 1165
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1168
    break;
   }
  }
 } while (0);
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1173
 __ZN4mbed10TimerEventD2Ev($21); //@line 1174
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 71; //@line 1177
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 1179
  sp = STACKTOP; //@line 1180
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 1183
 $31 = $0 + 1048 | 0; //@line 1184
 HEAP32[$31 >> 2] = 10244; //@line 1185
 __ZN4mbed6Ticker6detachEv($31); //@line 1186
 $33 = HEAP32[$0 + 1100 >> 2] | 0; //@line 1188
 do {
  if ($33 | 0) {
   $37 = HEAP32[$33 + 8 >> 2] | 0; //@line 1194
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1195
   FUNCTION_TABLE_vi[$37 & 1023]($0 + 1088 | 0); //@line 1196
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 72; //@line 1199
    HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 1201
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 1203
    sp = STACKTOP; //@line 1204
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1207
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1212
 __ZN4mbed10TimerEventD2Ev($31); //@line 1213
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 73; //@line 1216
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 1218
  sp = STACKTOP; //@line 1219
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 1222
 $AsyncCtx46 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1224
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 1225
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 74; //@line 1228
  HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 1230
  sp = STACKTOP; //@line 1231
  return;
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 1234
 $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1236
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 1237
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 75; //@line 1240
  HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 1242
  sp = STACKTOP; //@line 1243
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 1246
 $AsyncCtx38 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1248
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 1249
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 76; //@line 1252
  HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 1254
  sp = STACKTOP; //@line 1255
  return;
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 1258
 $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1260
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 1261
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 77; //@line 1264
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 1266
  sp = STACKTOP; //@line 1267
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1270
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1272
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 1273
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 78; //@line 1276
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 1278
  sp = STACKTOP; //@line 1279
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1282
 $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1284
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 1285
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 79; //@line 1288
  sp = STACKTOP; //@line 1289
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 1292
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $5 = 0, $52 = 0, $55 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $70 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7348
 STACKTOP = STACKTOP + 48 | 0; //@line 7349
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7349
 $3 = sp + 16 | 0; //@line 7350
 $4 = sp; //@line 7351
 $5 = $1 + 12 | 0; //@line 7352
 $6 = HEAP32[$5 >> 2] | 0; //@line 7353
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 7357
   HEAP32[$8 >> 2] = 0; //@line 7358
   $27 = 0; //@line 7359
   $32 = $8; //@line 7359
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 7362
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7363
   FUNCTION_TABLE_vii[$10 & 15]($4, $1); //@line 7364
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 252; //@line 7367
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 7369
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 7371
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 7373
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7375
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 7377
    sp = STACKTOP; //@line 7378
    STACKTOP = sp; //@line 7379
    return 0; //@line 7379
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7381
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 7382
   $16 = $4 + 12 | 0; //@line 7383
   HEAP32[$16 >> 2] = $$pre$i; //@line 7384
   if (!$$pre$i) {
    $27 = 0; //@line 7387
    $32 = $16; //@line 7387
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 7391
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7392
    FUNCTION_TABLE_vii[$19 & 15]($3, $4); //@line 7393
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 253; //@line 7396
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 7398
     HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 7400
     HEAP32[$AsyncCtx2 + 12 >> 2] = $16; //@line 7402
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 7404
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 7406
     HEAP32[$AsyncCtx2 + 24 >> 2] = $16; //@line 7408
     sp = STACKTOP; //@line 7409
     STACKTOP = sp; //@line 7410
     return 0; //@line 7410
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7412
     $27 = HEAP32[$16 >> 2] | 0; //@line 7414
     $32 = $16; //@line 7414
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 7420
 HEAP32[$26 >> 2] = $27; //@line 7421
 $28 = $3 + 16 | 0; //@line 7422
 HEAP32[$28 >> 2] = $2; //@line 7423
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7424
 $29 = _equeue_alloc($0, 20) | 0; //@line 7425
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 254; //@line 7428
  HEAP32[$AsyncCtx18 + 4 >> 2] = $4; //@line 7430
  HEAP32[$AsyncCtx18 + 8 >> 2] = $32; //@line 7432
  HEAP32[$AsyncCtx18 + 12 >> 2] = $26; //@line 7434
  HEAP32[$AsyncCtx18 + 16 >> 2] = $28; //@line 7436
  HEAP32[$AsyncCtx18 + 20 >> 2] = $0; //@line 7438
  HEAP32[$AsyncCtx18 + 24 >> 2] = $26; //@line 7440
  HEAP32[$AsyncCtx18 + 28 >> 2] = $3; //@line 7442
  sp = STACKTOP; //@line 7443
  STACKTOP = sp; //@line 7444
  return 0; //@line 7444
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 7446
 do {
  if (!$29) {
   $$0$i = 0; //@line 7450
  } else {
   $39 = HEAP32[$26 >> 2] | 0; //@line 7452
   do {
    if (!$39) {
     $52 = 0; //@line 7456
    } else {
     $42 = HEAP32[$39 + 4 >> 2] | 0; //@line 7459
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7460
     FUNCTION_TABLE_vii[$42 & 15]($29, $3); //@line 7461
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 255; //@line 7464
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 7466
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 7468
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 7470
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 7472
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 7474
      HEAP32[$AsyncCtx5 + 24 >> 2] = $32; //@line 7476
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 7478
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 7480
      sp = STACKTOP; //@line 7481
      STACKTOP = sp; //@line 7482
      return 0; //@line 7482
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7484
      $52 = HEAP32[$26 >> 2] | 0; //@line 7486
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $52; //@line 7492
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 7495
   _equeue_event_dtor($29, 256); //@line 7496
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7497
   $55 = _equeue_post($0, 257, $29) | 0; //@line 7498
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 258; //@line 7501
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 7503
    HEAP32[$AsyncCtx15 + 8 >> 2] = $32; //@line 7505
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 7507
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 7509
    sp = STACKTOP; //@line 7510
    STACKTOP = sp; //@line 7511
    return 0; //@line 7511
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7513
    $$0$i = $55; //@line 7514
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$26 >> 2] | 0; //@line 7519
 do {
  if ($60 | 0) {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 7524
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7525
   FUNCTION_TABLE_vi[$63 & 1023]($3); //@line 7526
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 259; //@line 7529
    HEAP32[$AsyncCtx8 + 4 >> 2] = $32; //@line 7531
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 7533
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 7535
    sp = STACKTOP; //@line 7536
    STACKTOP = sp; //@line 7537
    return 0; //@line 7537
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7539
    break;
   }
  }
 } while (0);
 $67 = HEAP32[$32 >> 2] | 0; //@line 7544
 if (!$67) {
  STACKTOP = sp; //@line 7547
  return $$0$i | 0; //@line 7547
 }
 $70 = HEAP32[$67 + 8 >> 2] | 0; //@line 7550
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7551
 FUNCTION_TABLE_vi[$70 & 1023]($4); //@line 7552
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 260; //@line 7555
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 7557
  sp = STACKTOP; //@line 7558
  STACKTOP = sp; //@line 7559
  return 0; //@line 7559
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7561
 STACKTOP = sp; //@line 7562
 return $$0$i | 0; //@line 7562
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_297($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23543
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23547
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23549
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23551
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23553
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23555
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23557
 $15 = $4 + 12 | 0; //@line 23558
 HEAP32[$4 >> 2] = 173; //@line 23559
 HEAP32[$4 + 4 >> 2] = 0; //@line 23561
 HEAP32[$4 + 8 >> 2] = $6; //@line 23563
 HEAP32[$15 >> 2] = 824; //@line 23564
 $16 = $6 + 2448 | 0; //@line 23565
 if (($16 | 0) == ($4 | 0)) {
  $43 = HEAP32[208] | 0; //@line 23569
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 23570
  FUNCTION_TABLE_vi[$43 & 1023]($4); //@line 23571
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 23574
   $44 = $ReallocAsyncCtx9 + 4 | 0; //@line 23575
   HEAP32[$44 >> 2] = $8; //@line 23576
   $45 = $ReallocAsyncCtx9 + 8 | 0; //@line 23577
   HEAP32[$45 >> 2] = $6; //@line 23578
   $46 = $ReallocAsyncCtx9 + 12 | 0; //@line 23579
   HEAP32[$46 >> 2] = $10; //@line 23580
   $47 = $ReallocAsyncCtx9 + 16 | 0; //@line 23581
   HEAP32[$47 >> 2] = $12; //@line 23582
   $48 = $ReallocAsyncCtx9 + 20 | 0; //@line 23583
   HEAP32[$48 >> 2] = $4; //@line 23584
   $49 = $ReallocAsyncCtx9 + 24 | 0; //@line 23585
   HEAP32[$49 >> 2] = $14; //@line 23586
   sp = STACKTOP; //@line 23587
   return;
  }
  ___async_unwind = 0; //@line 23590
  HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 23591
  $44 = $ReallocAsyncCtx9 + 4 | 0; //@line 23592
  HEAP32[$44 >> 2] = $8; //@line 23593
  $45 = $ReallocAsyncCtx9 + 8 | 0; //@line 23594
  HEAP32[$45 >> 2] = $6; //@line 23595
  $46 = $ReallocAsyncCtx9 + 12 | 0; //@line 23596
  HEAP32[$46 >> 2] = $10; //@line 23597
  $47 = $ReallocAsyncCtx9 + 16 | 0; //@line 23598
  HEAP32[$47 >> 2] = $12; //@line 23599
  $48 = $ReallocAsyncCtx9 + 20 | 0; //@line 23600
  HEAP32[$48 >> 2] = $4; //@line 23601
  $49 = $ReallocAsyncCtx9 + 24 | 0; //@line 23602
  HEAP32[$49 >> 2] = $14; //@line 23603
  sp = STACKTOP; //@line 23604
  return;
 }
 $18 = $6 + 2460 | 0; //@line 23607
 $19 = HEAP32[$18 >> 2] | 0; //@line 23608
 if (!$19) {
  $33 = HEAP32[207] | 0; //@line 23612
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 23613
  FUNCTION_TABLE_vii[$33 & 15]($16, $4); //@line 23614
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 23617
   $34 = $ReallocAsyncCtx8 + 4 | 0; //@line 23618
   HEAP32[$34 >> 2] = $8; //@line 23619
   $35 = $ReallocAsyncCtx8 + 8 | 0; //@line 23620
   HEAP32[$35 >> 2] = $6; //@line 23621
   $36 = $ReallocAsyncCtx8 + 12 | 0; //@line 23622
   HEAP32[$36 >> 2] = $10; //@line 23623
   $37 = $ReallocAsyncCtx8 + 16 | 0; //@line 23624
   HEAP32[$37 >> 2] = $12; //@line 23625
   $38 = $ReallocAsyncCtx8 + 20 | 0; //@line 23626
   HEAP32[$38 >> 2] = $15; //@line 23627
   $39 = $ReallocAsyncCtx8 + 24 | 0; //@line 23628
   HEAP32[$39 >> 2] = $18; //@line 23629
   $40 = $ReallocAsyncCtx8 + 28 | 0; //@line 23630
   HEAP32[$40 >> 2] = $4; //@line 23631
   $41 = $ReallocAsyncCtx8 + 32 | 0; //@line 23632
   HEAP32[$41 >> 2] = $14; //@line 23633
   sp = STACKTOP; //@line 23634
   return;
  }
  ___async_unwind = 0; //@line 23637
  HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 23638
  $34 = $ReallocAsyncCtx8 + 4 | 0; //@line 23639
  HEAP32[$34 >> 2] = $8; //@line 23640
  $35 = $ReallocAsyncCtx8 + 8 | 0; //@line 23641
  HEAP32[$35 >> 2] = $6; //@line 23642
  $36 = $ReallocAsyncCtx8 + 12 | 0; //@line 23643
  HEAP32[$36 >> 2] = $10; //@line 23644
  $37 = $ReallocAsyncCtx8 + 16 | 0; //@line 23645
  HEAP32[$37 >> 2] = $12; //@line 23646
  $38 = $ReallocAsyncCtx8 + 20 | 0; //@line 23647
  HEAP32[$38 >> 2] = $15; //@line 23648
  $39 = $ReallocAsyncCtx8 + 24 | 0; //@line 23649
  HEAP32[$39 >> 2] = $18; //@line 23650
  $40 = $ReallocAsyncCtx8 + 28 | 0; //@line 23651
  HEAP32[$40 >> 2] = $4; //@line 23652
  $41 = $ReallocAsyncCtx8 + 32 | 0; //@line 23653
  HEAP32[$41 >> 2] = $14; //@line 23654
  sp = STACKTOP; //@line 23655
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 23659
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 23660
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 23661
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 23664
   $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 23665
   HEAP32[$23 >> 2] = $8; //@line 23666
   $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 23667
   HEAP32[$24 >> 2] = $6; //@line 23668
   $25 = $ReallocAsyncCtx7 + 12 | 0; //@line 23669
   HEAP32[$25 >> 2] = $10; //@line 23670
   $26 = $ReallocAsyncCtx7 + 16 | 0; //@line 23671
   HEAP32[$26 >> 2] = $12; //@line 23672
   $27 = $ReallocAsyncCtx7 + 20 | 0; //@line 23673
   HEAP32[$27 >> 2] = $15; //@line 23674
   $28 = $ReallocAsyncCtx7 + 24 | 0; //@line 23675
   HEAP32[$28 >> 2] = $18; //@line 23676
   $29 = $ReallocAsyncCtx7 + 28 | 0; //@line 23677
   HEAP32[$29 >> 2] = $4; //@line 23678
   $30 = $ReallocAsyncCtx7 + 32 | 0; //@line 23679
   HEAP32[$30 >> 2] = $14; //@line 23680
   $31 = $ReallocAsyncCtx7 + 36 | 0; //@line 23681
   HEAP32[$31 >> 2] = $16; //@line 23682
   sp = STACKTOP; //@line 23683
   return;
  }
  ___async_unwind = 0; //@line 23686
  HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 23687
  $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 23688
  HEAP32[$23 >> 2] = $8; //@line 23689
  $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 23690
  HEAP32[$24 >> 2] = $6; //@line 23691
  $25 = $ReallocAsyncCtx7 + 12 | 0; //@line 23692
  HEAP32[$25 >> 2] = $10; //@line 23693
  $26 = $ReallocAsyncCtx7 + 16 | 0; //@line 23694
  HEAP32[$26 >> 2] = $12; //@line 23695
  $27 = $ReallocAsyncCtx7 + 20 | 0; //@line 23696
  HEAP32[$27 >> 2] = $15; //@line 23697
  $28 = $ReallocAsyncCtx7 + 24 | 0; //@line 23698
  HEAP32[$28 >> 2] = $18; //@line 23699
  $29 = $ReallocAsyncCtx7 + 28 | 0; //@line 23700
  HEAP32[$29 >> 2] = $4; //@line 23701
  $30 = $ReallocAsyncCtx7 + 32 | 0; //@line 23702
  HEAP32[$30 >> 2] = $14; //@line 23703
  $31 = $ReallocAsyncCtx7 + 36 | 0; //@line 23704
  HEAP32[$31 >> 2] = $16; //@line 23705
  sp = STACKTOP; //@line 23706
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_106($0) {
 $0 = $0 | 0;
 var $$pre16 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26045
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26047
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26049
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26051
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26053
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26055
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26057
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26059
 $$pre16 = HEAP32[$2 >> 2] | 0; //@line 26060
 if ($$pre16 | 0) {
  $17 = HEAP32[$$pre16 + 4 >> 2] | 0; //@line 26064
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 26065
  FUNCTION_TABLE_vii[$17 & 15]($10, $12); //@line 26066
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 341; //@line 26069
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 26070
   HEAP32[$18 >> 2] = $2; //@line 26071
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 26072
   HEAP32[$19 >> 2] = $4; //@line 26073
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 26074
   HEAP32[$20 >> 2] = $6; //@line 26075
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 26076
   HEAP32[$21 >> 2] = $8; //@line 26077
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 26078
   HEAP32[$22 >> 2] = $14; //@line 26079
   sp = STACKTOP; //@line 26080
   return;
  }
  ___async_unwind = 0; //@line 26083
  HEAP32[$ReallocAsyncCtx4 >> 2] = 341; //@line 26084
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 26085
  HEAP32[$18 >> 2] = $2; //@line 26086
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 26087
  HEAP32[$19 >> 2] = $4; //@line 26088
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 26089
  HEAP32[$20 >> 2] = $6; //@line 26090
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 26091
  HEAP32[$21 >> 2] = $8; //@line 26092
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 26093
  HEAP32[$22 >> 2] = $14; //@line 26094
  sp = STACKTOP; //@line 26095
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 26098
 $23 = $14 + 32 | 0; //@line 26099
 $24 = $14 + 44 | 0; //@line 26100
 $25 = HEAP32[$24 >> 2] | 0; //@line 26101
 if (!$25) {
  HEAP32[___async_retval >> 2] = 0; //@line 26105
  return;
 }
 $27 = $6 + 2532 | 0; //@line 26108
 if (($27 | 0) == ($23 | 0)) {
  $48 = HEAP32[$25 + 4 >> 2] | 0; //@line 26112
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 26113
  FUNCTION_TABLE_vii[$48 & 15]($4, $23); //@line 26114
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 26117
   $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 26118
   HEAP32[$49 >> 2] = $24; //@line 26119
   $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 26120
   HEAP32[$50 >> 2] = $6; //@line 26121
   $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 26122
   HEAP32[$51 >> 2] = $4; //@line 26123
   sp = STACKTOP; //@line 26124
   return;
  }
  ___async_unwind = 0; //@line 26127
  HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 26128
  $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 26129
  HEAP32[$49 >> 2] = $24; //@line 26130
  $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 26131
  HEAP32[$50 >> 2] = $6; //@line 26132
  $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 26133
  HEAP32[$51 >> 2] = $4; //@line 26134
  sp = STACKTOP; //@line 26135
  return;
 }
 $29 = $6 + 2544 | 0; //@line 26138
 $30 = HEAP32[$29 >> 2] | 0; //@line 26139
 if (!$30) {
  $41 = HEAP32[$25 + 4 >> 2] | 0; //@line 26143
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 26144
  FUNCTION_TABLE_vii[$41 & 15]($27, $23); //@line 26145
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 26148
   $42 = $ReallocAsyncCtx6 + 4 | 0; //@line 26149
   HEAP32[$42 >> 2] = $24; //@line 26150
   $43 = $ReallocAsyncCtx6 + 8 | 0; //@line 26151
   HEAP32[$43 >> 2] = $29; //@line 26152
   $44 = $ReallocAsyncCtx6 + 12 | 0; //@line 26153
   HEAP32[$44 >> 2] = $6; //@line 26154
   $45 = $ReallocAsyncCtx6 + 16 | 0; //@line 26155
   HEAP32[$45 >> 2] = $4; //@line 26156
   $46 = $ReallocAsyncCtx6 + 20 | 0; //@line 26157
   HEAP32[$46 >> 2] = $23; //@line 26158
   sp = STACKTOP; //@line 26159
   return;
  }
  ___async_unwind = 0; //@line 26162
  HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 26163
  $42 = $ReallocAsyncCtx6 + 4 | 0; //@line 26164
  HEAP32[$42 >> 2] = $24; //@line 26165
  $43 = $ReallocAsyncCtx6 + 8 | 0; //@line 26166
  HEAP32[$43 >> 2] = $29; //@line 26167
  $44 = $ReallocAsyncCtx6 + 12 | 0; //@line 26168
  HEAP32[$44 >> 2] = $6; //@line 26169
  $45 = $ReallocAsyncCtx6 + 16 | 0; //@line 26170
  HEAP32[$45 >> 2] = $4; //@line 26171
  $46 = $ReallocAsyncCtx6 + 20 | 0; //@line 26172
  HEAP32[$46 >> 2] = $23; //@line 26173
  sp = STACKTOP; //@line 26174
  return;
 } else {
  $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 26178
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 26179
  FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 26180
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 26183
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 26184
   HEAP32[$34 >> 2] = $24; //@line 26185
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 26186
   HEAP32[$35 >> 2] = $29; //@line 26187
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 26188
   HEAP32[$36 >> 2] = $6; //@line 26189
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 26190
   HEAP32[$37 >> 2] = $27; //@line 26191
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 26192
   HEAP32[$38 >> 2] = $23; //@line 26193
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 26194
   HEAP32[$39 >> 2] = $4; //@line 26195
   sp = STACKTOP; //@line 26196
   return;
  }
  ___async_unwind = 0; //@line 26199
  HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 26200
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 26201
  HEAP32[$34 >> 2] = $24; //@line 26202
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 26203
  HEAP32[$35 >> 2] = $29; //@line 26204
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 26205
  HEAP32[$36 >> 2] = $6; //@line 26206
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 26207
  HEAP32[$37 >> 2] = $27; //@line 26208
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 26209
  HEAP32[$38 >> 2] = $23; //@line 26210
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 26211
  HEAP32[$39 >> 2] = $4; //@line 26212
  sp = STACKTOP; //@line 26213
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_228($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17915
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17917
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17919
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17921
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17923
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17925
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17927
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17929
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17931
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$10 >> 2] | 0; //@line 17934
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 17938
   $30 = $AsyncRetVal + 16 | 0; //@line 17939
   HEAP32[$30 >> 2] = HEAP32[$6 >> 2]; //@line 17940
   HEAP32[$30 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 17940
   HEAP8[$30 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 17940
   _equeue_event_dtor($AsyncRetVal, 287); //@line 17941
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 17942
   $31 = _equeue_post($8, 288, $AsyncRetVal) | 0; //@line 17943
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 17946
    $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 17947
    HEAP32[$32 >> 2] = $10; //@line 17948
    $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 17949
    HEAP32[$33 >> 2] = $12; //@line 17950
    $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 17951
    HEAP32[$34 >> 2] = $14; //@line 17952
    $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 17953
    HEAP32[$35 >> 2] = $2; //@line 17954
    sp = STACKTOP; //@line 17955
    return;
   }
   HEAP32[___async_retval >> 2] = $31; //@line 17959
   ___async_unwind = 0; //@line 17960
   HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 17961
   $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 17962
   HEAP32[$32 >> 2] = $10; //@line 17963
   $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 17964
   HEAP32[$33 >> 2] = $12; //@line 17965
   $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 17966
   HEAP32[$34 >> 2] = $14; //@line 17967
   $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 17968
   HEAP32[$35 >> 2] = $2; //@line 17969
   sp = STACKTOP; //@line 17970
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 17974
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 17975
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $14); //@line 17976
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 17979
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 17980
    HEAP32[$21 >> 2] = $4; //@line 17981
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 17982
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 17983
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 17984
    HEAP32[$23 >> 2] = $6; //@line 17985
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 17986
    HEAP32[$24 >> 2] = $8; //@line 17987
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 17988
    HEAP32[$25 >> 2] = $10; //@line 17989
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 17990
    HEAP32[$26 >> 2] = $12; //@line 17991
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 17992
    HEAP32[$27 >> 2] = $14; //@line 17993
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 17994
    HEAP32[$28 >> 2] = $2; //@line 17995
    sp = STACKTOP; //@line 17996
    return;
   }
   ___async_unwind = 0; //@line 17999
   HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 18000
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 18001
   HEAP32[$21 >> 2] = $4; //@line 18002
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 18003
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 18004
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 18005
   HEAP32[$23 >> 2] = $6; //@line 18006
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 18007
   HEAP32[$24 >> 2] = $8; //@line 18008
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 18009
   HEAP32[$25 >> 2] = $10; //@line 18010
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 18011
   HEAP32[$26 >> 2] = $12; //@line 18012
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 18013
   HEAP32[$27 >> 2] = $14; //@line 18014
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 18015
   HEAP32[$28 >> 2] = $2; //@line 18016
   sp = STACKTOP; //@line 18017
   return;
  }
 }
 $37 = HEAP32[$10 >> 2] | 0; //@line 18021
 if ($37 | 0) {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 18025
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 18026
  FUNCTION_TABLE_vi[$40 & 1023]($14); //@line 18027
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 18030
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 18031
   HEAP32[$41 >> 2] = $12; //@line 18032
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 18033
   HEAP32[$42 >> 2] = 0; //@line 18034
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 18035
   HEAP32[$43 >> 2] = $2; //@line 18036
   sp = STACKTOP; //@line 18037
   return;
  }
  ___async_unwind = 0; //@line 18040
  HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 18041
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 18042
  HEAP32[$41 >> 2] = $12; //@line 18043
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 18044
  HEAP32[$42 >> 2] = 0; //@line 18045
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 18046
  HEAP32[$43 >> 2] = $2; //@line 18047
  sp = STACKTOP; //@line 18048
  return;
 }
 $44 = HEAP32[$12 >> 2] | 0; //@line 18051
 if (!$44) {
  HEAP32[___async_retval >> 2] = 0; //@line 18055
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 18059
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 18060
 FUNCTION_TABLE_vi[$47 & 1023]($2); //@line 18061
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 18064
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 18065
  HEAP32[$48 >> 2] = 0; //@line 18066
  sp = STACKTOP; //@line 18067
  return;
 }
 ___async_unwind = 0; //@line 18070
 HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 18071
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 18072
 HEAP32[$48 >> 2] = 0; //@line 18073
 sp = STACKTOP; //@line 18074
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15390
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15392
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15394
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15396
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15398
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15400
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15402
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15404
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15406
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15408
 $19 = $2 + 12 | 0; //@line 15409
 $20 = HEAP32[$19 >> 2] | 0; //@line 15410
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 15414
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 15415
  FUNCTION_TABLE_vii[$23 & 15]($18, $2); //@line 15416
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 438; //@line 15419
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 15420
   HEAP32[$24 >> 2] = $19; //@line 15421
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 15422
   HEAP32[$25 >> 2] = $16; //@line 15423
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 15424
   HEAP32[$26 >> 2] = $10; //@line 15425
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 15426
   HEAP32[$27 >> 2] = $12; //@line 15427
   $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 15428
   HEAP32[$28 >> 2] = $14; //@line 15429
   $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 15430
   HEAP32[$29 >> 2] = $8; //@line 15431
   $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 15432
   HEAP32[$30 >> 2] = $4; //@line 15433
   $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 15434
   HEAP32[$31 >> 2] = $6; //@line 15435
   sp = STACKTOP; //@line 15436
   return;
  }
  ___async_unwind = 0; //@line 15439
  HEAP32[$ReallocAsyncCtx2 >> 2] = 438; //@line 15440
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 15441
  HEAP32[$24 >> 2] = $19; //@line 15442
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 15443
  HEAP32[$25 >> 2] = $16; //@line 15444
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 15445
  HEAP32[$26 >> 2] = $10; //@line 15446
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 15447
  HEAP32[$27 >> 2] = $12; //@line 15448
  $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 15449
  HEAP32[$28 >> 2] = $14; //@line 15450
  $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 15451
  HEAP32[$29 >> 2] = $8; //@line 15452
  $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 15453
  HEAP32[$30 >> 2] = $4; //@line 15454
  $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 15455
  HEAP32[$31 >> 2] = $6; //@line 15456
  sp = STACKTOP; //@line 15457
  return;
 }
 HEAP32[$16 >> 2] = 0; //@line 15460
 switch (HEAP32[$10 >> 2] | 0) {
 case 0:
  {
   _mbed_tracef(16, 12866, 13456, $12); //@line 15464
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 15466
   __ZN7LoRaPHY18put_radio_to_sleepEv($8 + 4 | 0); //@line 15467
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 439; //@line 15470
    $33 = $ReallocAsyncCtx5 + 4 | 0; //@line 15471
    HEAP32[$33 >> 2] = $10; //@line 15472
    $34 = $ReallocAsyncCtx5 + 8 | 0; //@line 15473
    HEAP32[$34 >> 2] = $4; //@line 15474
    $35 = $ReallocAsyncCtx5 + 12 | 0; //@line 15475
    HEAP32[$35 >> 2] = $6; //@line 15476
    $36 = $ReallocAsyncCtx5 + 16 | 0; //@line 15477
    HEAP32[$36 >> 2] = $8; //@line 15478
    sp = STACKTOP; //@line 15479
    return;
   }
   ___async_unwind = 0; //@line 15482
   HEAP32[$ReallocAsyncCtx5 >> 2] = 439; //@line 15483
   $33 = $ReallocAsyncCtx5 + 4 | 0; //@line 15484
   HEAP32[$33 >> 2] = $10; //@line 15485
   $34 = $ReallocAsyncCtx5 + 8 | 0; //@line 15486
   HEAP32[$34 >> 2] = $4; //@line 15487
   $35 = $ReallocAsyncCtx5 + 12 | 0; //@line 15488
   HEAP32[$35 >> 2] = $6; //@line 15489
   $36 = $ReallocAsyncCtx5 + 16 | 0; //@line 15490
   HEAP32[$36 >> 2] = $8; //@line 15491
   sp = STACKTOP; //@line 15492
   return;
  }
 case 2:
  {
   HEAP8[$8 + 1177 >> 0] = 0; //@line 15498
   $38 = $8 + 4 | 0; //@line 15499
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 15500
   __ZN7LoRaPHY18put_radio_to_sleepEv($38); //@line 15501
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 440; //@line 15504
    $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 15505
    HEAP32[$39 >> 2] = $8; //@line 15506
    $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 15507
    HEAP32[$40 >> 2] = $38; //@line 15508
    $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 15509
    HEAP32[$41 >> 2] = $10; //@line 15510
    $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 15511
    HEAP32[$42 >> 2] = $4; //@line 15512
    $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 15513
    HEAP32[$43 >> 2] = $6; //@line 15514
    sp = STACKTOP; //@line 15515
    return;
   }
   ___async_unwind = 0; //@line 15518
   HEAP32[$ReallocAsyncCtx4 >> 2] = 440; //@line 15519
   $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 15520
   HEAP32[$39 >> 2] = $8; //@line 15521
   $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 15522
   HEAP32[$40 >> 2] = $38; //@line 15523
   $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 15524
   HEAP32[$41 >> 2] = $10; //@line 15525
   $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 15526
   HEAP32[$42 >> 2] = $4; //@line 15527
   $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 15528
   HEAP32[$43 >> 2] = $6; //@line 15529
   sp = STACKTOP; //@line 15530
   return;
  }
 default:
  {
   if ((HEAP32[$10 >> 2] | 0) != 2) {
    return;
   }
   _mbed_tracef(16, 12866, 13492, $4); //@line 15540
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 15541
   __ZN7LoRaMac15open_rx2_windowEv($8); //@line 15542
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 441; //@line 15545
    sp = STACKTOP; //@line 15546
    return;
   }
   ___async_unwind = 0; //@line 15549
   HEAP32[$ReallocAsyncCtx3 >> 2] = 441; //@line 15550
   sp = STACKTOP; //@line 15551
   return;
  }
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_144($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28516
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28518
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28520
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28522
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28524
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28526
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28528
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28530
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28532
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 28535
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 28539
   HEAP16[$AsyncRetVal + 16 >> 1] = HEAP16[$4 >> 1] | 0; //@line 28542
   _equeue_event_dtor($AsyncRetVal, 313); //@line 28543
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28544
   $32 = _equeue_post($6, 314, $AsyncRetVal) | 0; //@line 28545
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 315; //@line 28548
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 28549
    HEAP32[$33 >> 2] = $8; //@line 28550
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 28551
    HEAP32[$34 >> 2] = $10; //@line 28552
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 28553
    HEAP32[$35 >> 2] = $12; //@line 28554
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 28555
    HEAP32[$36 >> 2] = $14; //@line 28556
    sp = STACKTOP; //@line 28557
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 28561
   ___async_unwind = 0; //@line 28562
   HEAP32[$ReallocAsyncCtx6 >> 2] = 315; //@line 28563
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 28564
   HEAP32[$33 >> 2] = $8; //@line 28565
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 28566
   HEAP32[$34 >> 2] = $10; //@line 28567
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 28568
   HEAP32[$35 >> 2] = $12; //@line 28569
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 28570
   HEAP32[$36 >> 2] = $14; //@line 28571
   sp = STACKTOP; //@line 28572
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 28576
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 28577
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $12); //@line 28578
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 312; //@line 28581
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 28582
    HEAP32[$21 >> 2] = $2; //@line 28583
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 28584
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 28585
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 28586
    HEAP32[$23 >> 2] = $4; //@line 28587
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 28588
    HEAP32[$24 >> 2] = $6; //@line 28589
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 28590
    HEAP32[$25 >> 2] = $8; //@line 28591
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 28592
    HEAP32[$26 >> 2] = $10; //@line 28593
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 28594
    HEAP32[$27 >> 2] = $12; //@line 28595
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 28596
    HEAP32[$28 >> 2] = $14; //@line 28597
    sp = STACKTOP; //@line 28598
    return;
   }
   ___async_unwind = 0; //@line 28601
   HEAP32[$ReallocAsyncCtx3 >> 2] = 312; //@line 28602
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 28603
   HEAP32[$21 >> 2] = $2; //@line 28604
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 28605
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 28606
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 28607
   HEAP32[$23 >> 2] = $4; //@line 28608
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 28609
   HEAP32[$24 >> 2] = $6; //@line 28610
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 28611
   HEAP32[$25 >> 2] = $8; //@line 28612
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 28613
   HEAP32[$26 >> 2] = $10; //@line 28614
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 28615
   HEAP32[$27 >> 2] = $12; //@line 28616
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 28617
   HEAP32[$28 >> 2] = $14; //@line 28618
   sp = STACKTOP; //@line 28619
   return;
  }
 }
 $38 = HEAP32[$8 >> 2] | 0; //@line 28623
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 28627
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 28628
  FUNCTION_TABLE_vi[$41 & 1023]($12); //@line 28629
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 316; //@line 28632
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 28633
   HEAP32[$42 >> 2] = $10; //@line 28634
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 28635
   HEAP32[$43 >> 2] = 0; //@line 28636
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 28637
   HEAP32[$44 >> 2] = $14; //@line 28638
   sp = STACKTOP; //@line 28639
   return;
  }
  ___async_unwind = 0; //@line 28642
  HEAP32[$ReallocAsyncCtx4 >> 2] = 316; //@line 28643
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 28644
  HEAP32[$42 >> 2] = $10; //@line 28645
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 28646
  HEAP32[$43 >> 2] = 0; //@line 28647
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 28648
  HEAP32[$44 >> 2] = $14; //@line 28649
  sp = STACKTOP; //@line 28650
  return;
 }
 $45 = HEAP32[$10 >> 2] | 0; //@line 28653
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 28657
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 28661
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 28662
 FUNCTION_TABLE_vi[$48 & 1023]($14); //@line 28663
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 317; //@line 28666
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 28667
  HEAP32[$49 >> 2] = 0; //@line 28668
  sp = STACKTOP; //@line 28669
  return;
 }
 ___async_unwind = 0; //@line 28672
 HEAP32[$ReallocAsyncCtx5 >> 2] = 317; //@line 28673
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 28674
 HEAP32[$49 >> 2] = 0; //@line 28675
 sp = STACKTOP; //@line 28676
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_127($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27480
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27482
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27484
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27486
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27488
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27490
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27492
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27494
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27496
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$12 >> 2] | 0; //@line 27499
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 27503
   HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$8 >> 2]; //@line 27506
   _equeue_event_dtor($AsyncRetVal, 256); //@line 27507
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27508
   $32 = _equeue_post($10, 257, $AsyncRetVal) | 0; //@line 27509
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 27512
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 27513
    HEAP32[$33 >> 2] = $12; //@line 27514
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 27515
    HEAP32[$34 >> 2] = $4; //@line 27516
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 27517
    HEAP32[$35 >> 2] = $14; //@line 27518
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 27519
    HEAP32[$36 >> 2] = $2; //@line 27520
    sp = STACKTOP; //@line 27521
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 27525
   ___async_unwind = 0; //@line 27526
   HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 27527
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 27528
   HEAP32[$33 >> 2] = $12; //@line 27529
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 27530
   HEAP32[$34 >> 2] = $4; //@line 27531
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 27532
   HEAP32[$35 >> 2] = $14; //@line 27533
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 27534
   HEAP32[$36 >> 2] = $2; //@line 27535
   sp = STACKTOP; //@line 27536
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 27540
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 27541
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $14); //@line 27542
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 255; //@line 27545
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 27546
    HEAP32[$21 >> 2] = $6; //@line 27547
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 27548
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 27549
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 27550
    HEAP32[$23 >> 2] = $8; //@line 27551
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 27552
    HEAP32[$24 >> 2] = $10; //@line 27553
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 27554
    HEAP32[$25 >> 2] = $12; //@line 27555
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 27556
    HEAP32[$26 >> 2] = $4; //@line 27557
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 27558
    HEAP32[$27 >> 2] = $14; //@line 27559
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 27560
    HEAP32[$28 >> 2] = $2; //@line 27561
    sp = STACKTOP; //@line 27562
    return;
   }
   ___async_unwind = 0; //@line 27565
   HEAP32[$ReallocAsyncCtx3 >> 2] = 255; //@line 27566
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 27567
   HEAP32[$21 >> 2] = $6; //@line 27568
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 27569
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 27570
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 27571
   HEAP32[$23 >> 2] = $8; //@line 27572
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 27573
   HEAP32[$24 >> 2] = $10; //@line 27574
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 27575
   HEAP32[$25 >> 2] = $12; //@line 27576
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 27577
   HEAP32[$26 >> 2] = $4; //@line 27578
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 27579
   HEAP32[$27 >> 2] = $14; //@line 27580
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 27581
   HEAP32[$28 >> 2] = $2; //@line 27582
   sp = STACKTOP; //@line 27583
   return;
  }
 }
 $38 = HEAP32[$12 >> 2] | 0; //@line 27587
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 27591
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27592
  FUNCTION_TABLE_vi[$41 & 1023]($14); //@line 27593
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 27596
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 27597
   HEAP32[$42 >> 2] = $4; //@line 27598
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 27599
   HEAP32[$43 >> 2] = 0; //@line 27600
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 27601
   HEAP32[$44 >> 2] = $2; //@line 27602
   sp = STACKTOP; //@line 27603
   return;
  }
  ___async_unwind = 0; //@line 27606
  HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 27607
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 27608
  HEAP32[$42 >> 2] = $4; //@line 27609
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 27610
  HEAP32[$43 >> 2] = 0; //@line 27611
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 27612
  HEAP32[$44 >> 2] = $2; //@line 27613
  sp = STACKTOP; //@line 27614
  return;
 }
 $45 = HEAP32[$4 >> 2] | 0; //@line 27617
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 27621
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 27625
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27626
 FUNCTION_TABLE_vi[$48 & 1023]($2); //@line 27627
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 27630
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 27631
  HEAP32[$49 >> 2] = 0; //@line 27632
  sp = STACKTOP; //@line 27633
  return;
 }
 ___async_unwind = 0; //@line 27636
 HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 27637
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 27638
 HEAP32[$49 >> 2] = 0; //@line 27639
 sp = STACKTOP; //@line 27640
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_190($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14213
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14215
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14219
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14221
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14223
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14225
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14227
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14229
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 14232
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 14236
   HEAP8[$AsyncRetVal + 16 >> 0] = HEAP8[$4 >> 0] | 0; //@line 14239
   _equeue_event_dtor($AsyncRetVal, 210); //@line 14240
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 14241
   $32 = _equeue_post($6, 211, $AsyncRetVal) | 0; //@line 14242
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 212; //@line 14245
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 14246
    HEAP32[$33 >> 2] = $8; //@line 14247
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 14248
    HEAP32[$34 >> 2] = $10; //@line 14249
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 14250
    HEAP32[$35 >> 2] = $12; //@line 14251
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 14252
    HEAP32[$36 >> 2] = $14; //@line 14253
    sp = STACKTOP; //@line 14254
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 14258
   ___async_unwind = 0; //@line 14259
   HEAP32[$ReallocAsyncCtx6 >> 2] = 212; //@line 14260
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 14261
   HEAP32[$33 >> 2] = $8; //@line 14262
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 14263
   HEAP32[$34 >> 2] = $10; //@line 14264
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 14265
   HEAP32[$35 >> 2] = $12; //@line 14266
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 14267
   HEAP32[$36 >> 2] = $14; //@line 14268
   sp = STACKTOP; //@line 14269
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 14273
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 14274
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $12); //@line 14275
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 209; //@line 14278
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 14279
    HEAP32[$21 >> 2] = $2; //@line 14280
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 14281
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 14282
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 14283
    HEAP32[$23 >> 2] = $4; //@line 14284
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 14285
    HEAP32[$24 >> 2] = $6; //@line 14286
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 14287
    HEAP32[$25 >> 2] = $8; //@line 14288
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 14289
    HEAP32[$26 >> 2] = $10; //@line 14290
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 14291
    HEAP32[$27 >> 2] = $12; //@line 14292
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 14293
    HEAP32[$28 >> 2] = $14; //@line 14294
    sp = STACKTOP; //@line 14295
    return;
   }
   ___async_unwind = 0; //@line 14298
   HEAP32[$ReallocAsyncCtx3 >> 2] = 209; //@line 14299
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 14300
   HEAP32[$21 >> 2] = $2; //@line 14301
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 14302
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 14303
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 14304
   HEAP32[$23 >> 2] = $4; //@line 14305
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 14306
   HEAP32[$24 >> 2] = $6; //@line 14307
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 14308
   HEAP32[$25 >> 2] = $8; //@line 14309
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 14310
   HEAP32[$26 >> 2] = $10; //@line 14311
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 14312
   HEAP32[$27 >> 2] = $12; //@line 14313
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 14314
   HEAP32[$28 >> 2] = $14; //@line 14315
   sp = STACKTOP; //@line 14316
   return;
  }
 }
 $38 = HEAP32[$8 >> 2] | 0; //@line 14320
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 14324
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 14325
  FUNCTION_TABLE_vi[$41 & 1023]($12); //@line 14326
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 213; //@line 14329
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 14330
   HEAP32[$42 >> 2] = $10; //@line 14331
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 14332
   HEAP32[$43 >> 2] = 0; //@line 14333
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 14334
   HEAP32[$44 >> 2] = $14; //@line 14335
   sp = STACKTOP; //@line 14336
   return;
  }
  ___async_unwind = 0; //@line 14339
  HEAP32[$ReallocAsyncCtx4 >> 2] = 213; //@line 14340
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 14341
  HEAP32[$42 >> 2] = $10; //@line 14342
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 14343
  HEAP32[$43 >> 2] = 0; //@line 14344
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 14345
  HEAP32[$44 >> 2] = $14; //@line 14346
  sp = STACKTOP; //@line 14347
  return;
 }
 $45 = HEAP32[$10 >> 2] | 0; //@line 14350
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 14354
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 14358
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 14359
 FUNCTION_TABLE_vi[$48 & 1023]($14); //@line 14360
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 214; //@line 14363
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 14364
  HEAP32[$49 >> 2] = 0; //@line 14365
  sp = STACKTOP; //@line 14366
  return;
 }
 ___async_unwind = 0; //@line 14369
 HEAP32[$ReallocAsyncCtx5 >> 2] = 214; //@line 14370
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 14371
 HEAP32[$49 >> 2] = 0; //@line 14372
 sp = STACKTOP; //@line 14373
 return;
}
function __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$046$lcssa$off0 = 0, $$04660 = 0, $$047$lcssa = 0, $$04759 = 0, $$050$lcssa = 0, $$1 = 0, $10 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $12 = 0, $125 = 0, $131 = 0, $137 = 0, $143 = 0, $149 = 0, $155 = 0, $156 = 0, $157 = 0, $166 = 0, $168 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $59 = 0, $65 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $9 = 0, $95 = 0, $AsyncCtx = 0, $indvars$iv = 0, $wide$trip$count = 0, sp = 0;
 sp = STACKTOP; //@line 18196
 $9 = $0 + 64 | 0; //@line 18197
 _mbedtls_aes_init($9); //@line 18198
 $10 = _mbedtls_aes_setkey_enc($9, $3, $4) | 0; //@line 18199
 L1 : do {
  if (!$10) {
   $12 = $0 + 32 | 0; //@line 18203
   HEAP8[$0 + 37 >> 0] = $6; //@line 18205
   HEAP8[$0 + 38 >> 0] = $5; //@line 18208
   HEAP8[$0 + 39 >> 0] = $5 >>> 8; //@line 18212
   HEAP8[$0 + 40 >> 0] = $5 >>> 16; //@line 18216
   HEAP8[$0 + 41 >> 0] = $5 >>> 24; //@line 18220
   HEAP8[$0 + 42 >> 0] = $7; //@line 18223
   HEAP8[$0 + 43 >> 0] = $7 >>> 8; //@line 18227
   HEAP8[$0 + 44 >> 0] = $7 >>> 16; //@line 18231
   HEAP8[$0 + 45 >> 0] = $7 >>> 24; //@line 18235
   if (($2 & 65535) > 15) {
    $38 = $0 + 47 | 0; //@line 18239
    $39 = $0 + 48 | 0; //@line 18240
    $40 = $0 + 49 | 0; //@line 18241
    $41 = $0 + 50 | 0; //@line 18242
    $42 = $0 + 51 | 0; //@line 18243
    $43 = $0 + 52 | 0; //@line 18244
    $44 = $0 + 53 | 0; //@line 18245
    $45 = $0 + 54 | 0; //@line 18246
    $46 = $0 + 55 | 0; //@line 18247
    $47 = $0 + 56 | 0; //@line 18248
    $48 = $0 + 57 | 0; //@line 18249
    $49 = $0 + 58 | 0; //@line 18250
    $50 = $0 + 59 | 0; //@line 18251
    $51 = $0 + 60 | 0; //@line 18252
    $52 = $0 + 61 | 0; //@line 18253
    $53 = $0 + 62 | 0; //@line 18254
    $54 = $0 + 63 | 0; //@line 18255
    $$04660 = 1; //@line 18256
    $$04759 = 0; //@line 18256
    $156 = $2 & 65535; //@line 18256
    while (1) {
     HEAP8[$38 >> 0] = $$04660; //@line 18259
     $$04660 = $$04660 + 1 << 16 >> 16; //@line 18260
     $57 = _mbedtls_aes_crypt_ecb($9, 1, $12, $39) | 0; //@line 18261
     if ($57 | 0) {
      $$1 = $57; //@line 18264
      break L1;
     }
     $59 = $$04759 & 255; //@line 18267
     HEAP8[$8 + $59 >> 0] = HEAP8[$39 >> 0] ^ HEAP8[$1 + $59 >> 0]; //@line 18273
     $65 = $59 + 1 | 0; //@line 18274
     HEAP8[$8 + $65 >> 0] = HEAP8[$40 >> 0] ^ HEAP8[$1 + $65 >> 0]; //@line 18280
     $71 = $59 + 2 | 0; //@line 18281
     HEAP8[$8 + $71 >> 0] = HEAP8[$41 >> 0] ^ HEAP8[$1 + $71 >> 0]; //@line 18287
     $77 = $59 + 3 | 0; //@line 18288
     HEAP8[$8 + $77 >> 0] = HEAP8[$42 >> 0] ^ HEAP8[$1 + $77 >> 0]; //@line 18294
     $83 = $59 + 4 | 0; //@line 18295
     HEAP8[$8 + $83 >> 0] = HEAP8[$43 >> 0] ^ HEAP8[$1 + $83 >> 0]; //@line 18301
     $89 = $59 + 5 | 0; //@line 18302
     HEAP8[$8 + $89 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$1 + $89 >> 0]; //@line 18308
     $95 = $59 + 6 | 0; //@line 18309
     HEAP8[$8 + $95 >> 0] = HEAP8[$45 >> 0] ^ HEAP8[$1 + $95 >> 0]; //@line 18315
     $101 = $59 + 7 | 0; //@line 18316
     HEAP8[$8 + $101 >> 0] = HEAP8[$46 >> 0] ^ HEAP8[$1 + $101 >> 0]; //@line 18322
     $107 = $59 + 8 | 0; //@line 18323
     HEAP8[$8 + $107 >> 0] = HEAP8[$47 >> 0] ^ HEAP8[$1 + $107 >> 0]; //@line 18329
     $113 = $59 + 9 | 0; //@line 18330
     HEAP8[$8 + $113 >> 0] = HEAP8[$48 >> 0] ^ HEAP8[$1 + $113 >> 0]; //@line 18336
     $119 = $59 + 10 | 0; //@line 18337
     HEAP8[$8 + $119 >> 0] = HEAP8[$49 >> 0] ^ HEAP8[$1 + $119 >> 0]; //@line 18343
     $125 = $59 + 11 | 0; //@line 18344
     HEAP8[$8 + $125 >> 0] = HEAP8[$50 >> 0] ^ HEAP8[$1 + $125 >> 0]; //@line 18350
     $131 = $59 + 12 | 0; //@line 18351
     HEAP8[$8 + $131 >> 0] = HEAP8[$51 >> 0] ^ HEAP8[$1 + $131 >> 0]; //@line 18357
     $137 = $59 + 13 | 0; //@line 18358
     HEAP8[$8 + $137 >> 0] = HEAP8[$52 >> 0] ^ HEAP8[$1 + $137 >> 0]; //@line 18364
     $143 = $59 + 14 | 0; //@line 18365
     HEAP8[$8 + $143 >> 0] = HEAP8[$53 >> 0] ^ HEAP8[$1 + $143 >> 0]; //@line 18371
     $149 = $59 + 15 | 0; //@line 18372
     HEAP8[$8 + $149 >> 0] = HEAP8[$54 >> 0] ^ HEAP8[$1 + $149 >> 0]; //@line 18378
     $155 = $156 + 65520 | 0; //@line 18379
     $157 = $155 & 65535; //@line 18380
     if (($157 & 65535) <= 15) {
      break;
     } else {
      $$04759 = $59 + 16 & 255; //@line 18386
      $156 = $155 & 65535; //@line 18386
     }
    }
    $$046$lcssa$off0 = $$04660 & 255; //@line 18394
    $$047$lcssa = $$04759 + 16 & 255; //@line 18394
    $$050$lcssa = $157; //@line 18394
   } else {
    $$046$lcssa$off0 = 1; //@line 18396
    $$047$lcssa = 0; //@line 18396
    $$050$lcssa = $2; //@line 18396
   }
   if (!($$050$lcssa << 16 >> 16)) {
    $$1 = 0; //@line 18400
   } else {
    HEAP8[$0 + 47 >> 0] = $$046$lcssa$off0; //@line 18403
    $166 = _mbedtls_aes_crypt_ecb($9, 1, $12, $0 + 48 | 0) | 0; //@line 18405
    if (!$166) {
     $wide$trip$count = $$050$lcssa & 65535; //@line 18408
     $indvars$iv = 0; //@line 18409
     do {
      $168 = $indvars$iv + $$047$lcssa | 0; //@line 18411
      HEAP8[$8 + $168 >> 0] = HEAP8[$0 + 48 + $indvars$iv >> 0] ^ HEAP8[$1 + $168 >> 0]; //@line 18418
      $indvars$iv = $indvars$iv + 1 | 0; //@line 18419
     } while (($indvars$iv | 0) != ($wide$trip$count | 0));
     $$1 = 0; //@line 18422
    } else {
     $$1 = $166; //@line 18429
    }
   }
  } else {
   $$1 = $10; //@line 18433
  }
 } while (0);
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 18436
 _mbedtls_aes_free($9); //@line 18437
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 488; //@line 18440
  HEAP32[$AsyncCtx + 4 >> 2] = $$1; //@line 18442
  sp = STACKTOP; //@line 18443
  return 0; //@line 18444
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18446
  return $$1 | 0; //@line 18447
 }
 return 0; //@line 18449
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_300($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 24138
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24140
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24142
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24144
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24146
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24150
 $13 = $12 + 12 | 0; //@line 24151
 HEAP32[$12 >> 2] = 177; //@line 24152
 HEAP32[$12 + 4 >> 2] = 0; //@line 24154
 HEAP32[$12 + 8 >> 2] = $4; //@line 24156
 HEAP32[$13 >> 2] = 824; //@line 24157
 $14 = $4 + 2400 | 0; //@line 24158
 if (($14 | 0) == ($12 | 0)) {
  $39 = HEAP32[208] | 0; //@line 24162
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 24163
  FUNCTION_TABLE_vi[$39 & 1023]($12); //@line 24164
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 24167
   $40 = $ReallocAsyncCtx12 + 4 | 0; //@line 24168
   HEAP32[$40 >> 2] = $2; //@line 24169
   $41 = $ReallocAsyncCtx12 + 8 | 0; //@line 24170
   HEAP32[$41 >> 2] = $4; //@line 24171
   $42 = $ReallocAsyncCtx12 + 12 | 0; //@line 24172
   HEAP32[$42 >> 2] = $6; //@line 24173
   $43 = $ReallocAsyncCtx12 + 16 | 0; //@line 24174
   HEAP32[$43 >> 2] = $12; //@line 24175
   $44 = $ReallocAsyncCtx12 + 20 | 0; //@line 24176
   HEAP32[$44 >> 2] = $8; //@line 24177
   sp = STACKTOP; //@line 24178
   return;
  }
  ___async_unwind = 0; //@line 24181
  HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 24182
  $40 = $ReallocAsyncCtx12 + 4 | 0; //@line 24183
  HEAP32[$40 >> 2] = $2; //@line 24184
  $41 = $ReallocAsyncCtx12 + 8 | 0; //@line 24185
  HEAP32[$41 >> 2] = $4; //@line 24186
  $42 = $ReallocAsyncCtx12 + 12 | 0; //@line 24187
  HEAP32[$42 >> 2] = $6; //@line 24188
  $43 = $ReallocAsyncCtx12 + 16 | 0; //@line 24189
  HEAP32[$43 >> 2] = $12; //@line 24190
  $44 = $ReallocAsyncCtx12 + 20 | 0; //@line 24191
  HEAP32[$44 >> 2] = $8; //@line 24192
  sp = STACKTOP; //@line 24193
  return;
 }
 $16 = $4 + 2412 | 0; //@line 24196
 $17 = HEAP32[$16 >> 2] | 0; //@line 24197
 if (!$17) {
  $30 = HEAP32[207] | 0; //@line 24201
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 24202
  FUNCTION_TABLE_vii[$30 & 15]($14, $12); //@line 24203
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 24206
   $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 24207
   HEAP32[$31 >> 2] = $2; //@line 24208
   $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 24209
   HEAP32[$32 >> 2] = $13; //@line 24210
   $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 24211
   HEAP32[$33 >> 2] = $16; //@line 24212
   $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 24213
   HEAP32[$34 >> 2] = $4; //@line 24214
   $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 24215
   HEAP32[$35 >> 2] = $12; //@line 24216
   $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 24217
   HEAP32[$36 >> 2] = $6; //@line 24218
   $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 24219
   HEAP32[$37 >> 2] = $8; //@line 24220
   sp = STACKTOP; //@line 24221
   return;
  }
  ___async_unwind = 0; //@line 24224
  HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 24225
  $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 24226
  HEAP32[$31 >> 2] = $2; //@line 24227
  $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 24228
  HEAP32[$32 >> 2] = $13; //@line 24229
  $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 24230
  HEAP32[$33 >> 2] = $16; //@line 24231
  $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 24232
  HEAP32[$34 >> 2] = $4; //@line 24233
  $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 24234
  HEAP32[$35 >> 2] = $12; //@line 24235
  $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 24236
  HEAP32[$36 >> 2] = $6; //@line 24237
  $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 24238
  HEAP32[$37 >> 2] = $8; //@line 24239
  sp = STACKTOP; //@line 24240
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 24244
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 24245
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 24246
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 178; //@line 24249
   $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 24250
   HEAP32[$21 >> 2] = $2; //@line 24251
   $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 24252
   HEAP32[$22 >> 2] = $13; //@line 24253
   $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 24254
   HEAP32[$23 >> 2] = $16; //@line 24255
   $24 = $ReallocAsyncCtx10 + 16 | 0; //@line 24256
   HEAP32[$24 >> 2] = $4; //@line 24257
   $25 = $ReallocAsyncCtx10 + 20 | 0; //@line 24258
   HEAP32[$25 >> 2] = $12; //@line 24259
   $26 = $ReallocAsyncCtx10 + 24 | 0; //@line 24260
   HEAP32[$26 >> 2] = $6; //@line 24261
   $27 = $ReallocAsyncCtx10 + 28 | 0; //@line 24262
   HEAP32[$27 >> 2] = $8; //@line 24263
   $28 = $ReallocAsyncCtx10 + 32 | 0; //@line 24264
   HEAP32[$28 >> 2] = $14; //@line 24265
   sp = STACKTOP; //@line 24266
   return;
  }
  ___async_unwind = 0; //@line 24269
  HEAP32[$ReallocAsyncCtx10 >> 2] = 178; //@line 24270
  $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 24271
  HEAP32[$21 >> 2] = $2; //@line 24272
  $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 24273
  HEAP32[$22 >> 2] = $13; //@line 24274
  $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 24275
  HEAP32[$23 >> 2] = $16; //@line 24276
  $24 = $ReallocAsyncCtx10 + 16 | 0; //@line 24277
  HEAP32[$24 >> 2] = $4; //@line 24278
  $25 = $ReallocAsyncCtx10 + 20 | 0; //@line 24279
  HEAP32[$25 >> 2] = $12; //@line 24280
  $26 = $ReallocAsyncCtx10 + 24 | 0; //@line 24281
  HEAP32[$26 >> 2] = $6; //@line 24282
  $27 = $ReallocAsyncCtx10 + 28 | 0; //@line 24283
  HEAP32[$27 >> 2] = $8; //@line 24284
  $28 = $ReallocAsyncCtx10 + 32 | 0; //@line 24285
  HEAP32[$28 >> 2] = $14; //@line 24286
  sp = STACKTOP; //@line 24287
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb_177($0) {
 $0 = $0 | 0;
 var $$01720$i45 = 0, $$019$i = 0, $$019$i42 = 0, $$021$i44 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $40 = 0, $53 = 0, $56 = 0, $6 = 0, $64 = 0, $65 = 0, $78 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $ReallocAsyncCtx5 = 0, sp = 0, $64$looptemp = 0;
 sp = STACKTOP; //@line 13130
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13132
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13134
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13136
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13138
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13140
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13142
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13144
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13146
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13148
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13150
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13152
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13154
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13156
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13158
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13160
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13162
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 13164
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($28 | 0) {
   case 16:
    {
     $$019$i42 = 135; //@line 13172
     break;
    }
   case 8:
    {
     $$019$i42 = 27; //@line 13176
     break;
    }
   default:
    {
     break L2;
    }
   }
   $37 = $28 + -1 | 0; //@line 13183
   $$01720$i45 = 0; //@line 13184
   $$021$i44 = $37; //@line 13184
   while (1) {
    $40 = HEAPU8[$32 + $$021$i44 >> 0] | 0; //@line 13188
    HEAP8[$22 + $$021$i44 >> 0] = $40 << 1 | $$01720$i45; //@line 13193
    if (($$021$i44 | 0) > 0) {
     $$01720$i45 = $40 >>> 7; //@line 13198
     $$021$i44 = $$021$i44 + -1 | 0; //@line 13198
    } else {
     break;
    }
   }
   $53 = $22 + $37 | 0; //@line 13208
   $56 = $$019$i42 & 0 - ((HEAPU8[$26 >> 0] | 0) >>> 7) ^ (HEAPU8[$53 >> 0] | 0); //@line 13211
   HEAP8[$53 >> 0] = $56; //@line 13213
   switch ($28 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 13216
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 13220
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$30 + $37 >> 0] = $56 << 1; //@line 13230
   if (($37 | 0) > 0) {
    $64 = $56; //@line 13234
    $65 = $28 + -2 | 0; //@line 13234
    while (1) {
     $64$looptemp = $64;
     $64 = HEAPU8[$22 + $65 >> 0] | 0; //@line 13239
     HEAP8[$30 + $65 >> 0] = $64 << 1 | $64$looptemp >>> 7; //@line 13244
     if (($65 | 0) <= 0) {
      break;
     } else {
      $65 = $65 + -1 | 0; //@line 13248
     }
    }
   }
   $78 = $30 + $37 | 0; //@line 13259
   HEAP8[$78 >> 0] = $$019$i & 0 - ((HEAPU8[$18 >> 0] | 0) >>> 7) ^ (HEAPU8[$78 >> 0] | 0); //@line 13264
  }
 } while (0);
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 13267
 _mbedtls_platform_zeroize($26, 16); //@line 13268
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 588; //@line 13271
  $83 = $ReallocAsyncCtx5 + 4 | 0; //@line 13272
  HEAP32[$83 >> 2] = $2; //@line 13273
  $84 = $ReallocAsyncCtx5 + 8 | 0; //@line 13274
  HEAP32[$84 >> 2] = $4; //@line 13275
  $85 = $ReallocAsyncCtx5 + 12 | 0; //@line 13276
  HEAP32[$85 >> 2] = $6; //@line 13277
  $86 = $ReallocAsyncCtx5 + 16 | 0; //@line 13278
  HEAP32[$86 >> 2] = $8; //@line 13279
  $87 = $ReallocAsyncCtx5 + 20 | 0; //@line 13280
  HEAP32[$87 >> 2] = $10; //@line 13281
  $88 = $ReallocAsyncCtx5 + 24 | 0; //@line 13282
  HEAP32[$88 >> 2] = $12; //@line 13283
  $89 = $ReallocAsyncCtx5 + 28 | 0; //@line 13284
  HEAP32[$89 >> 2] = $14; //@line 13285
  $90 = $ReallocAsyncCtx5 + 32 | 0; //@line 13286
  HEAP32[$90 >> 2] = $16; //@line 13287
  $91 = $ReallocAsyncCtx5 + 36 | 0; //@line 13288
  HEAP32[$91 >> 2] = $18; //@line 13289
  $92 = $ReallocAsyncCtx5 + 40 | 0; //@line 13290
  HEAP32[$92 >> 2] = $20; //@line 13291
  $93 = $ReallocAsyncCtx5 + 44 | 0; //@line 13292
  HEAP32[$93 >> 2] = $22; //@line 13293
  $94 = $ReallocAsyncCtx5 + 48 | 0; //@line 13294
  HEAP32[$94 >> 2] = $24; //@line 13295
  $95 = $ReallocAsyncCtx5 + 52 | 0; //@line 13296
  HEAP32[$95 >> 2] = $34; //@line 13297
  $96 = $ReallocAsyncCtx5 + 56 | 0; //@line 13298
  HEAP32[$96 >> 2] = $26; //@line 13299
  $97 = $ReallocAsyncCtx5 + 60 | 0; //@line 13300
  HEAP32[$97 >> 2] = $30; //@line 13301
  sp = STACKTOP; //@line 13302
  return;
 }
 ___async_unwind = 0; //@line 13305
 HEAP32[$ReallocAsyncCtx5 >> 2] = 588; //@line 13306
 $83 = $ReallocAsyncCtx5 + 4 | 0; //@line 13307
 HEAP32[$83 >> 2] = $2; //@line 13308
 $84 = $ReallocAsyncCtx5 + 8 | 0; //@line 13309
 HEAP32[$84 >> 2] = $4; //@line 13310
 $85 = $ReallocAsyncCtx5 + 12 | 0; //@line 13311
 HEAP32[$85 >> 2] = $6; //@line 13312
 $86 = $ReallocAsyncCtx5 + 16 | 0; //@line 13313
 HEAP32[$86 >> 2] = $8; //@line 13314
 $87 = $ReallocAsyncCtx5 + 20 | 0; //@line 13315
 HEAP32[$87 >> 2] = $10; //@line 13316
 $88 = $ReallocAsyncCtx5 + 24 | 0; //@line 13317
 HEAP32[$88 >> 2] = $12; //@line 13318
 $89 = $ReallocAsyncCtx5 + 28 | 0; //@line 13319
 HEAP32[$89 >> 2] = $14; //@line 13320
 $90 = $ReallocAsyncCtx5 + 32 | 0; //@line 13321
 HEAP32[$90 >> 2] = $16; //@line 13322
 $91 = $ReallocAsyncCtx5 + 36 | 0; //@line 13323
 HEAP32[$91 >> 2] = $18; //@line 13324
 $92 = $ReallocAsyncCtx5 + 40 | 0; //@line 13325
 HEAP32[$92 >> 2] = $20; //@line 13326
 $93 = $ReallocAsyncCtx5 + 44 | 0; //@line 13327
 HEAP32[$93 >> 2] = $22; //@line 13328
 $94 = $ReallocAsyncCtx5 + 48 | 0; //@line 13329
 HEAP32[$94 >> 2] = $24; //@line 13330
 $95 = $ReallocAsyncCtx5 + 52 | 0; //@line 13331
 HEAP32[$95 >> 2] = $34; //@line 13332
 $96 = $ReallocAsyncCtx5 + 56 | 0; //@line 13333
 HEAP32[$96 >> 2] = $26; //@line 13334
 $97 = $ReallocAsyncCtx5 + 60 | 0; //@line 13335
 HEAP32[$97 >> 2] = $30; //@line 13336
 sp = STACKTOP; //@line 13337
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $118 = 0, $12 = 0, $128 = 0, $13 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $7 = 0, $73 = 0, $75 = 0, $78 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11551
 STACKTOP = STACKTOP + 16 | 0; //@line 11552
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11552
 $3 = sp; //@line 11553
 HEAP32[$3 >> 2] = 0; //@line 11554
 HEAP8[$0 + 2102 >> 0] = HEAP8[$0 + 1701 >> 0] | 0; //@line 11558
 $7 = $0 + 756 | 0; //@line 11559
 $9 = $2 & 65535; //@line 11561
 $12 = $0 + 1712 | 0; //@line 11564
 $13 = HEAP32[$12 >> 2] | 0; //@line 11565
 $14 = $0 + 1442 | 0; //@line 11566
 $15 = $0 + 1443 | 0; //@line 11567
 $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 11568
 $16 = __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh($7, $1 + 1 | 0, $9 + 65535 & 65535, $13, 128, $15) | 0; //@line 11569
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 375; //@line 11572
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 11574
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11576
  HEAP32[$AsyncCtx + 12 >> 2] = $9; //@line 11578
  HEAP32[$AsyncCtx + 16 >> 2] = $12; //@line 11580
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 11582
  HEAP32[$AsyncCtx + 24 >> 2] = $15; //@line 11584
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 11586
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 11588
  HEAP32[$AsyncCtx + 36 >> 2] = $3; //@line 11590
  sp = STACKTOP; //@line 11591
  STACKTOP = sp; //@line 11592
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11594
 if ($16 | 0) {
  HEAP32[$0 + 2092 >> 2] = 13; //@line 11598
  STACKTOP = sp; //@line 11599
  return;
 }
 HEAP8[$14 >> 0] = HEAP8[$1 >> 0] | 0; //@line 11602
 $29 = $9 + -4 | 0; //@line 11603
 $31 = HEAP32[$12 >> 2] | 0; //@line 11605
 $AsyncCtx7 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11606
 $32 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($7, $14, $29 & 65535, $31, 128, $3) | 0; //@line 11607
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 376; //@line 11610
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11612
  HEAP32[$AsyncCtx7 + 8 >> 2] = $29; //@line 11614
  HEAP32[$AsyncCtx7 + 12 >> 2] = $9; //@line 11616
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 11618
  HEAP32[$AsyncCtx7 + 20 >> 2] = $3; //@line 11620
  HEAP32[$AsyncCtx7 + 24 >> 2] = $12; //@line 11622
  HEAP32[$AsyncCtx7 + 28 >> 2] = $7; //@line 11624
  HEAP32[$AsyncCtx7 + 32 >> 2] = $15; //@line 11626
  sp = STACKTOP; //@line 11627
  STACKTOP = sp; //@line 11628
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11630
 if ($32 | 0) {
  HEAP32[$0 + 2092 >> 2] = 13; //@line 11634
  STACKTOP = sp; //@line 11635
  return;
 }
 if (((HEAPU8[$9 + -3 + ($0 + 1442) >> 0] | 0) << 8 | (HEAPU8[$0 + 1442 + $29 >> 0] | 0) | (HEAPU8[$9 + -2 + ($0 + 1442) >> 0] | 0) << 16 | (HEAPU8[$9 + -1 + ($0 + 1442) >> 0] | 0) << 24 | 0) != (HEAP32[$3 >> 2] | 0)) {
  HEAP32[$0 + 2092 >> 2] = 7; //@line 11662
  STACKTOP = sp; //@line 11663
  return;
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(28, sp) | 0; //@line 11666
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 11667
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 377; //@line 11670
  HEAP32[$AsyncCtx15 + 4 >> 2] = $12; //@line 11672
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 11674
  HEAP32[$AsyncCtx15 + 12 >> 2] = $7; //@line 11676
  HEAP32[$AsyncCtx15 + 16 >> 2] = $15; //@line 11678
  HEAP32[$AsyncCtx15 + 20 >> 2] = $9; //@line 11680
  HEAP32[$AsyncCtx15 + 24 >> 2] = $3; //@line 11682
  sp = STACKTOP; //@line 11683
  STACKTOP = sp; //@line 11684
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 11686
 $73 = HEAP32[$12 >> 2] | 0; //@line 11687
 $75 = HEAP16[$0 + 1748 >> 1] | 0; //@line 11689
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11692
 $78 = __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($7, $73, 128, $15, $75, $0 + 1716 | 0, $0 + 1732 | 0) | 0; //@line 11693
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 378; //@line 11696
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11698
  HEAP32[$AsyncCtx3 + 8 >> 2] = $9; //@line 11700
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 11702
  sp = STACKTOP; //@line 11703
  STACKTOP = sp; //@line 11704
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11706
 if ($78 | 0) {
  HEAP32[$0 + 2092 >> 2] = 13; //@line 11710
  STACKTOP = sp; //@line 11711
  return;
 }
 HEAP32[$0 + 1752 >> 2] = (HEAPU8[$0 + 1448 >> 0] | 0) << 16 | ((HEAPU8[$0 + 1447 >> 0] | 0) << 8 | (HEAPU8[$0 + 1446 >> 0] | 0)); //@line 11727
 HEAP32[$0 + 1756 >> 2] = (HEAPU8[$0 + 1452 >> 0] | 0) << 24 | ((HEAPU8[$0 + 1451 >> 0] | 0) << 16 | ((HEAPU8[$0 + 1450 >> 0] | 0) << 8 | (HEAPU8[$0 + 1449 >> 0] | 0))); //@line 11747
 $118 = HEAP8[$0 + 1453 >> 0] | 0; //@line 11749
 HEAP8[$0 + 1909 >> 0] = ($118 & 255) >>> 4 & 7; //@line 11755
 HEAP8[$0 + 1916 >> 0] = $118 & 15; //@line 11758
 $128 = HEAP8[$0 + 1454 >> 0] & 15; //@line 11761
 $132 = $128 << 24 >> 24 == 0 ? 1e3 : ($128 & 255) * 1e3 | 0; //@line 11766
 HEAP32[$0 + 1892 >> 2] = $132; //@line 11767
 HEAP32[$0 + 1896 >> 2] = $132 + 1e3; //@line 11770
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11775
 __ZN7LoRaPHY13apply_cf_listEPKhh($0 + 4 | 0, $0 + 1455 | 0, $9 + 239 & 255); //@line 11776
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 379; //@line 11779
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 11781
  HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 11783
  sp = STACKTOP; //@line 11784
  STACKTOP = sp; //@line 11785
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11787
 HEAP32[$0 + 2092 >> 2] = 0; //@line 11789
 HEAP8[$0 + 2376 >> 0] = 1; //@line 11791
 HEAP32[$0 + 1760 >> 2] = 0; //@line 11793
 HEAP8[$0 + 1184 >> 0] = 0; //@line 11795
 STACKTOP = sp; //@line 11796
 return;
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28933
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28935
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28937
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28939
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28941
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28943
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28945
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28947
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28949
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28951
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28953
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28955
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28957
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28959
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28961
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28963
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28965
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28967
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 28970
  $84 = ___async_retval; //@line 28971
  HEAP32[$84 >> 2] = $$0; //@line 28972
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 28977
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 28981
   $68 = $14 + $$163 | 0; //@line 28982
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 28987
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 28992
   HEAP8[$16 + $$163 >> 0] = $75; //@line 28994
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 29000
   }
   $$163 = $$163 + 1 | 0; //@line 29002
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 29011
 $35 = $12 - $2 | 0; //@line 29012
 $51 = $14 + $2 | 0; //@line 29013
 $53 = $16 + $2 | 0; //@line 29014
 if (!$35) {
  $$0 = 0; //@line 29017
  $84 = ___async_retval; //@line 29018
  HEAP32[$84 >> 2] = $$0; //@line 29019
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 29023
 $$061 = 16; //@line 29024
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 29030
  $39 = $8 + 360 + $$061 | 0; //@line 29031
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 29033
  HEAP8[$39 >> 0] = $41; //@line 29034
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 29042
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 29043
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 29046
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 29047
  HEAP32[$44 >> 2] = $36; //@line 29048
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 29049
  HEAP32[$45 >> 2] = $4; //@line 29050
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 29051
  HEAP32[$46 >> 2] = $6; //@line 29052
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 29053
  HEAP32[$47 >> 2] = $8; //@line 29054
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 29055
  HEAP32[$48 >> 2] = $10; //@line 29056
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 29057
  HEAP32[$49 >> 2] = $35; //@line 29058
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 29059
  HEAP32[$50 >> 2] = $51; //@line 29060
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 29061
  HEAP32[$52 >> 2] = $53; //@line 29062
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 29063
  HEAP32[$54 >> 2] = $18; //@line 29064
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 29065
  HEAP32[$55 >> 2] = $20; //@line 29066
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 29067
  HEAP32[$56 >> 2] = $22; //@line 29068
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 29069
  HEAP32[$57 >> 2] = $24; //@line 29070
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 29071
  HEAP32[$58 >> 2] = $26; //@line 29072
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 29073
  HEAP32[$59 >> 2] = $28; //@line 29074
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 29075
  HEAP32[$60 >> 2] = $30; //@line 29076
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 29077
  HEAP32[$61 >> 2] = $32; //@line 29078
  sp = STACKTOP; //@line 29079
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 29083
 ___async_unwind = 0; //@line 29084
 HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 29085
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 29086
 HEAP32[$44 >> 2] = $36; //@line 29087
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 29088
 HEAP32[$45 >> 2] = $4; //@line 29089
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 29090
 HEAP32[$46 >> 2] = $6; //@line 29091
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 29092
 HEAP32[$47 >> 2] = $8; //@line 29093
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 29094
 HEAP32[$48 >> 2] = $10; //@line 29095
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 29096
 HEAP32[$49 >> 2] = $35; //@line 29097
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 29098
 HEAP32[$50 >> 2] = $51; //@line 29099
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 29100
 HEAP32[$52 >> 2] = $53; //@line 29101
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 29102
 HEAP32[$54 >> 2] = $18; //@line 29103
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 29104
 HEAP32[$55 >> 2] = $20; //@line 29105
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 29106
 HEAP32[$56 >> 2] = $22; //@line 29107
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 29108
 HEAP32[$57 >> 2] = $24; //@line 29109
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 29110
 HEAP32[$58 >> 2] = $26; //@line 29111
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 29112
 HEAP32[$59 >> 2] = $28; //@line 29113
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 29114
 HEAP32[$60 >> 2] = $30; //@line 29115
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 29116
 HEAP32[$61 >> 2] = $32; //@line 29117
 sp = STACKTOP; //@line 29118
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $33 = 0, $38 = 0, $41 = 0, $46 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $62 = 0, $65 = 0, $67 = 0, $70 = 0, $73 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1448
 STACKTOP = STACKTOP + 32 | 0; //@line 1449
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1449
 $1 = sp + 8 | 0; //@line 1451
 _mbed_tracef(16, 11016, 11268, sp); //@line 1452
 $2 = $0 + 688 | 0; //@line 1453
 switch (HEAP8[$2 >> 0] | 0) {
 case 1:
  {
   do {
    if (!(HEAP8[$0 + 689 >> 0] | 0)) {
     HEAP8[$0 + 732 >> 0] = 0; //@line 1463
     HEAP8[$0 + 733 >> 0] = 0; //@line 1465
     HEAP16[$0 + 744 >> 1] = 0; //@line 1467
     HEAP16[$0 + 742 >> 1] = 0; //@line 1469
     if (!(HEAP8[$0 + 722 >> 0] | 0)) {
      HEAP8[$2 >> 0] = 0; //@line 1474
      $14 = $0 + 1176 | 0; //@line 1475
      $15 = $1 + 12 | 0; //@line 1476
      HEAP32[$1 >> 2] = 52; //@line 1477
      HEAP32[$1 + 4 >> 2] = 0; //@line 1479
      HEAP32[$1 + 8 >> 2] = $0; //@line 1481
      HEAP32[$15 >> 2] = 584; //@line 1482
      $18 = ___muldi3(HEAP32[$0 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 1485
      $19 = tempRet0; //@line 1486
      $20 = $0 + 1216 | 0; //@line 1487
      if (($20 | 0) != ($1 | 0)) {
       $22 = $0 + 1228 | 0; //@line 1490
       $23 = HEAP32[$22 >> 2] | 0; //@line 1491
       do {
        if ($23 | 0) {
         $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 1496
         $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 1497
         FUNCTION_TABLE_vi[$26 & 1023]($20); //@line 1498
         if (___async) {
          HEAP32[$AsyncCtx >> 2] = 83; //@line 1501
          HEAP32[$AsyncCtx + 4 >> 2] = $15; //@line 1503
          HEAP32[$AsyncCtx + 8 >> 2] = $22; //@line 1505
          HEAP32[$AsyncCtx + 12 >> 2] = $20; //@line 1507
          HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 1509
          HEAP32[$AsyncCtx + 20 >> 2] = $14; //@line 1511
          $33 = $AsyncCtx + 24 | 0; //@line 1513
          HEAP32[$33 >> 2] = $18; //@line 1515
          HEAP32[$33 + 4 >> 2] = $19; //@line 1518
          HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 1520
          sp = STACKTOP; //@line 1521
          STACKTOP = sp; //@line 1522
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx | 0); //@line 1524
          break;
         }
        }
       } while (0);
       $38 = HEAP32[$15 >> 2] | 0; //@line 1529
       do {
        if (!$38) {
         $52 = 0; //@line 1533
        } else {
         $41 = HEAP32[$38 + 4 >> 2] | 0; //@line 1536
         $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1537
         FUNCTION_TABLE_vii[$41 & 15]($20, $1); //@line 1538
         if (___async) {
          HEAP32[$AsyncCtx2 >> 2] = 84; //@line 1541
          HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 1543
          HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 1545
          HEAP32[$AsyncCtx2 + 12 >> 2] = $14; //@line 1547
          $46 = $AsyncCtx2 + 16 | 0; //@line 1549
          HEAP32[$46 >> 2] = $18; //@line 1551
          HEAP32[$46 + 4 >> 2] = $19; //@line 1554
          HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 1556
          HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 1558
          sp = STACKTOP; //@line 1559
          STACKTOP = sp; //@line 1560
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1562
          $52 = HEAP32[$15 >> 2] | 0; //@line 1564
          break;
         }
        }
       } while (0);
       HEAP32[$22 >> 2] = $52; //@line 1569
      }
      __ZN4mbed6Ticker5setupEy($14, $18, $19); //@line 1571
      $53 = HEAP32[$15 >> 2] | 0; //@line 1572
      if ($53 | 0) {
       $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 1576
       $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1577
       FUNCTION_TABLE_vi[$56 & 1023]($1); //@line 1578
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 85; //@line 1581
        HEAP32[$AsyncCtx6 + 4 >> 2] = $0; //@line 1583
        sp = STACKTOP; //@line 1584
        STACKTOP = sp; //@line 1585
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 1587
        break;
       }
      }
     }
    }
   } while (0);
   $59 = HEAP32[$0 + 788 >> 2] | 0; //@line 1595
   if (!$59) {
    STACKTOP = sp; //@line 1598
    return;
   }
   $62 = HEAP32[$59 + 60 >> 2] | 0; //@line 1601
   if (!$62) {
    STACKTOP = sp; //@line 1604
    return;
   }
   $65 = HEAP32[$62 >> 2] | 0; //@line 1607
   $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1608
   FUNCTION_TABLE_vi[$65 & 1023]($59 + 48 | 0); //@line 1609
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 86; //@line 1612
    sp = STACKTOP; //@line 1613
    STACKTOP = sp; //@line 1614
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 1616
   STACKTOP = sp; //@line 1617
   return;
  }
 case 2:
  {
   HEAP8[$2 >> 0] = 0; //@line 1621
   $67 = HEAP32[$0 + 788 >> 2] | 0; //@line 1623
   if (!$67) {
    STACKTOP = sp; //@line 1626
    return;
   }
   $70 = HEAP32[$67 + 28 >> 2] | 0; //@line 1629
   if (!$70) {
    STACKTOP = sp; //@line 1632
    return;
   }
   $73 = HEAP32[$70 >> 2] | 0; //@line 1635
   $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1636
   FUNCTION_TABLE_vi[$73 & 1023]($67 + 16 | 0); //@line 1637
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 87; //@line 1640
    sp = STACKTOP; //@line 1641
    STACKTOP = sp; //@line 1642
    return;
   }
   _emscripten_free_async_context($AsyncCtx12 | 0); //@line 1644
   STACKTOP = sp; //@line 1645
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 1649
   return;
  }
 }
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1244
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1330
 $$0136 = $4 + 16 | 0; //@line 1330
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1330
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1330
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1330
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1330
 while (1) {
  $110 = HEAP32[5396 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6420 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0139 >>> 24 << 2) >> 2]; //@line 1352
  $130 = HEAP32[5396 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6420 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0137 >>> 24 << 2) >> 2]; //@line 1372
  $150 = HEAP32[5396 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6420 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0138 >>> 24 << 2) >> 2]; //@line 1392
  $170 = HEAP32[5396 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6420 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0140 >>> 24 << 2) >> 2]; //@line 1412
  $171 = $$0136 + 20 | 0; //@line 1413
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1414
  $173 = $110 & 255; //@line 1415
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5396 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6420 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($130 >>> 24 << 2) >> 2]; //@line 1476
  $250 = HEAP32[5396 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6420 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($150 >>> 24 << 2) >> 2]; //@line 1496
  $$0$in = $$0$in + -1 | 0; //@line 1497
  $$0136 = $$0136 + 32 | 0; //@line 1497
  $$0137 = HEAP32[5396 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6420 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($170 >>> 24 << 2) >> 2]; //@line 1497
  $$0138 = HEAP32[5396 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6420 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($110 >>> 24 << 2) >> 2]; //@line 1497
  $$0139 = $250; //@line 1497
  $$0140 = $230; //@line 1497
 }
 $261 = (HEAPU8[13746 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1509
 $268 = (HEAPU8[13746 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1516
 $274 = (HEAPU8[13746 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1522
 $276 = HEAP32[$171 >> 2] | 0; //@line 1524
 $281 = $276 ^ (HEAPU8[13746 + ($130 & 255) >> 0] | 0); //@line 1529
 $288 = (HEAPU8[13746 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1536
 $295 = (HEAPU8[13746 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1543
 $301 = (HEAPU8[13746 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1549
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1551
 $308 = $303 ^ (HEAPU8[13746 + ($150 & 255) >> 0] | 0); //@line 1556
 $315 = (HEAPU8[13746 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1563
 $322 = (HEAPU8[13746 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1570
 $328 = (HEAPU8[13746 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1576
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1577
 $334 = $329 ^ (HEAPU8[13746 + ($170 & 255) >> 0] | 0); //@line 1582
 $341 = (HEAPU8[13746 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1589
 $348 = (HEAPU8[13746 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1596
 $354 = (HEAPU8[13746 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1602
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[13746 + $173 >> 0] | 0); //@line 1604
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1608
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1612
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1616
 HEAP8[$2 + 4 >> 0] = $281; //@line 1619
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1623
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1627
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1631
 HEAP8[$2 + 8 >> 0] = $308; //@line 1634
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1638
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1642
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1646
 HEAP8[$2 + 12 >> 0] = $334; //@line 1649
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1653
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1657
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1661
 return 0; //@line 1662
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1691
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1777
 $$0136 = $4 + 16 | 0; //@line 1777
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1777
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1777
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1777
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1777
 while (1) {
  $110 = HEAP32[1300 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2324 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0138 >>> 24 << 2) >> 2]; //@line 1799
  $130 = HEAP32[1300 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2324 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0140 >>> 24 << 2) >> 2]; //@line 1819
  $150 = HEAP32[1300 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2324 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0139 >>> 24 << 2) >> 2]; //@line 1839
  $170 = HEAP32[1300 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2324 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0137 >>> 24 << 2) >> 2]; //@line 1859
  $171 = $$0136 + 20 | 0; //@line 1860
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1861
  $173 = $110 & 255; //@line 1862
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1300 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2324 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($170 >>> 24 << 2) >> 2]; //@line 1923
  $250 = HEAP32[1300 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2324 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($110 >>> 24 << 2) >> 2]; //@line 1943
  $$0$in = $$0$in + -1 | 0; //@line 1944
  $$0136 = $$0136 + 32 | 0; //@line 1944
  $$0137 = HEAP32[1300 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2324 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($130 >>> 24 << 2) >> 2]; //@line 1944
  $$0138 = HEAP32[1300 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2324 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($150 >>> 24 << 2) >> 2]; //@line 1944
  $$0139 = $250; //@line 1944
  $$0140 = $230; //@line 1944
 }
 $261 = (HEAPU8[14002 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1956
 $268 = (HEAPU8[14002 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1963
 $274 = (HEAPU8[14002 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1969
 $276 = HEAP32[$171 >> 2] | 0; //@line 1971
 $281 = $276 ^ (HEAPU8[14002 + ($130 & 255) >> 0] | 0); //@line 1976
 $288 = (HEAPU8[14002 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1983
 $295 = (HEAPU8[14002 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1990
 $301 = (HEAPU8[14002 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1996
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1998
 $308 = $303 ^ (HEAPU8[14002 + ($150 & 255) >> 0] | 0); //@line 2003
 $315 = (HEAPU8[14002 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 2010
 $322 = (HEAPU8[14002 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 2017
 $328 = (HEAPU8[14002 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 2023
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 2024
 $334 = $329 ^ (HEAPU8[14002 + ($170 & 255) >> 0] | 0); //@line 2029
 $341 = (HEAPU8[14002 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 2036
 $348 = (HEAPU8[14002 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 2043
 $354 = (HEAPU8[14002 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 2049
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14002 + $173 >> 0] | 0); //@line 2051
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 2055
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 2059
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 2063
 HEAP8[$2 + 4 >> 0] = $281; //@line 2066
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 2070
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 2074
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 2078
 HEAP8[$2 + 8 >> 0] = $308; //@line 2081
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 2085
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 2089
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 2093
 HEAP8[$2 + 12 >> 0] = $334; //@line 2096
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 2100
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 2104
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 2108
 return 0; //@line 2109
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $21 = 0, $22 = 0, $25 = 0, $3 = 0, $34 = 0, $35 = 0, $4 = 0, $42 = 0, $5 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 14940
 STACKTOP = STACKTOP + 16 | 0; //@line 14941
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14941
 $vararg_buffer1 = sp + 8 | 0; //@line 14942
 $vararg_buffer = sp; //@line 14943
 $3 = HEAP32[$1 >> 2] | 0; //@line 14944
 $4 = $0 + 2380 | 0; //@line 14945
 HEAP32[$4 >> 2] = $3; //@line 14946
 $5 = $0 + 1996 | 0; //@line 14947
 if (($5 | 0) == ($2 | 0)) {
  $35 = $3; //@line 14950
 } else {
  $7 = $0 + 2008 | 0; //@line 14952
  $8 = HEAP32[$7 >> 2] | 0; //@line 14953
  do {
   if ($8 | 0) {
    $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 14958
    $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 14959
    FUNCTION_TABLE_vi[$11 & 1023]($5); //@line 14960
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 437; //@line 14963
     HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14965
     HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 14967
     HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 14969
     HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 14971
     HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 14973
     HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 14975
     HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 14977
     HEAP32[$AsyncCtx + 32 >> 2] = $7; //@line 14979
     HEAP32[$AsyncCtx + 36 >> 2] = $5; //@line 14981
     sp = STACKTOP; //@line 14982
     STACKTOP = sp; //@line 14983
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 14985
     break;
    }
   }
  } while (0);
  $21 = $2 + 12 | 0; //@line 14990
  $22 = HEAP32[$21 >> 2] | 0; //@line 14991
  do {
   if (!$22) {
    $34 = 0; //@line 14995
   } else {
    $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 14998
    $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14999
    FUNCTION_TABLE_vii[$25 & 15]($5, $2); //@line 15000
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 438; //@line 15003
     HEAP32[$AsyncCtx5 + 4 >> 2] = $21; //@line 15005
     HEAP32[$AsyncCtx5 + 8 >> 2] = $7; //@line 15007
     HEAP32[$AsyncCtx5 + 12 >> 2] = $4; //@line 15009
     HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 15011
     HEAP32[$AsyncCtx5 + 20 >> 2] = $vararg_buffer; //@line 15013
     HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 15015
     HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer1; //@line 15017
     HEAP32[$AsyncCtx5 + 32 >> 2] = $vararg_buffer1; //@line 15019
     sp = STACKTOP; //@line 15020
     STACKTOP = sp; //@line 15021
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx5 | 0); //@line 15023
     $34 = HEAP32[$21 >> 2] | 0; //@line 15025
     break;
    }
   }
  } while (0);
  HEAP32[$7 >> 2] = $34; //@line 15030
  $35 = HEAP32[$4 >> 2] | 0; //@line 15032
 }
 L16 : do {
  switch ($35 | 0) {
  case 0:
   {
    _mbed_tracef(16, 12866, 13456, $vararg_buffer); //@line 15037
    $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15039
    __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 15040
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 439; //@line 15043
     HEAP32[$AsyncCtx17 + 4 >> 2] = $4; //@line 15045
     HEAP32[$AsyncCtx17 + 8 >> 2] = $vararg_buffer1; //@line 15047
     HEAP32[$AsyncCtx17 + 12 >> 2] = $vararg_buffer1; //@line 15049
     HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 15051
     sp = STACKTOP; //@line 15052
     STACKTOP = sp; //@line 15053
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15055
     break L16;
    }
    break;
   }
  case 2:
   {
    HEAP8[$0 + 1177 >> 0] = 0; //@line 15062
    $42 = $0 + 4 | 0; //@line 15063
    $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15064
    __ZN7LoRaPHY18put_radio_to_sleepEv($42); //@line 15065
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 440; //@line 15068
     HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 15070
     HEAP32[$AsyncCtx13 + 8 >> 2] = $42; //@line 15072
     HEAP32[$AsyncCtx13 + 12 >> 2] = $4; //@line 15074
     HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 15076
     HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer1; //@line 15078
     sp = STACKTOP; //@line 15079
     STACKTOP = sp; //@line 15080
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 15082
     __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($42, HEAP8[$0 + 1916 >> 0] | 0, HEAP8[$0 + 1884 >> 0] | 0, HEAP32[$0 + 1880 >> 2] | 0, $0 + 1964 | 0); //@line 15090
     break L16;
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 if ((HEAP32[$4 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 15102
  return;
 }
 _mbed_tracef(16, 12866, 13492, $vararg_buffer1); //@line 15104
 $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15105
 __ZN7LoRaMac15open_rx2_windowEv($0); //@line 15106
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 441; //@line 15109
  sp = STACKTOP; //@line 15110
  STACKTOP = sp; //@line 15111
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 15113
 STACKTOP = sp; //@line 15114
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_303($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 24683
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24685
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24687
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24689
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24693
 $11 = $10 + 12 | 0; //@line 24694
 HEAP32[$10 >> 2] = 181; //@line 24695
 HEAP32[$10 + 4 >> 2] = 0; //@line 24697
 HEAP32[$10 + 8 >> 2] = $4; //@line 24699
 HEAP32[$11 >> 2] = 824; //@line 24700
 $12 = $4 + 2432 | 0; //@line 24701
 if (($12 | 0) == ($10 | 0)) {
  $35 = HEAP32[208] | 0; //@line 24705
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 24706
  FUNCTION_TABLE_vi[$35 & 1023]($10); //@line 24707
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 24710
   $36 = $ReallocAsyncCtx15 + 4 | 0; //@line 24711
   HEAP32[$36 >> 2] = $10; //@line 24712
   $37 = $ReallocAsyncCtx15 + 8 | 0; //@line 24713
   HEAP32[$37 >> 2] = $4; //@line 24714
   $38 = $ReallocAsyncCtx15 + 12 | 0; //@line 24715
   HEAP32[$38 >> 2] = $2; //@line 24716
   $39 = $ReallocAsyncCtx15 + 16 | 0; //@line 24717
   HEAP32[$39 >> 2] = $6; //@line 24718
   sp = STACKTOP; //@line 24719
   return;
  }
  ___async_unwind = 0; //@line 24722
  HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 24723
  $36 = $ReallocAsyncCtx15 + 4 | 0; //@line 24724
  HEAP32[$36 >> 2] = $10; //@line 24725
  $37 = $ReallocAsyncCtx15 + 8 | 0; //@line 24726
  HEAP32[$37 >> 2] = $4; //@line 24727
  $38 = $ReallocAsyncCtx15 + 12 | 0; //@line 24728
  HEAP32[$38 >> 2] = $2; //@line 24729
  $39 = $ReallocAsyncCtx15 + 16 | 0; //@line 24730
  HEAP32[$39 >> 2] = $6; //@line 24731
  sp = STACKTOP; //@line 24732
  return;
 }
 $14 = $4 + 2444 | 0; //@line 24735
 $15 = HEAP32[$14 >> 2] | 0; //@line 24736
 if (!$15) {
  $27 = HEAP32[207] | 0; //@line 24740
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 24741
  FUNCTION_TABLE_vii[$27 & 15]($12, $10); //@line 24742
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 24745
   $28 = $ReallocAsyncCtx14 + 4 | 0; //@line 24746
   HEAP32[$28 >> 2] = $11; //@line 24747
   $29 = $ReallocAsyncCtx14 + 8 | 0; //@line 24748
   HEAP32[$29 >> 2] = $14; //@line 24749
   $30 = $ReallocAsyncCtx14 + 12 | 0; //@line 24750
   HEAP32[$30 >> 2] = $10; //@line 24751
   $31 = $ReallocAsyncCtx14 + 16 | 0; //@line 24752
   HEAP32[$31 >> 2] = $4; //@line 24753
   $32 = $ReallocAsyncCtx14 + 20 | 0; //@line 24754
   HEAP32[$32 >> 2] = $2; //@line 24755
   $33 = $ReallocAsyncCtx14 + 24 | 0; //@line 24756
   HEAP32[$33 >> 2] = $6; //@line 24757
   sp = STACKTOP; //@line 24758
   return;
  }
  ___async_unwind = 0; //@line 24761
  HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 24762
  $28 = $ReallocAsyncCtx14 + 4 | 0; //@line 24763
  HEAP32[$28 >> 2] = $11; //@line 24764
  $29 = $ReallocAsyncCtx14 + 8 | 0; //@line 24765
  HEAP32[$29 >> 2] = $14; //@line 24766
  $30 = $ReallocAsyncCtx14 + 12 | 0; //@line 24767
  HEAP32[$30 >> 2] = $10; //@line 24768
  $31 = $ReallocAsyncCtx14 + 16 | 0; //@line 24769
  HEAP32[$31 >> 2] = $4; //@line 24770
  $32 = $ReallocAsyncCtx14 + 20 | 0; //@line 24771
  HEAP32[$32 >> 2] = $2; //@line 24772
  $33 = $ReallocAsyncCtx14 + 24 | 0; //@line 24773
  HEAP32[$33 >> 2] = $6; //@line 24774
  sp = STACKTOP; //@line 24775
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 24779
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 24780
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 24781
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 182; //@line 24784
   $19 = $ReallocAsyncCtx13 + 4 | 0; //@line 24785
   HEAP32[$19 >> 2] = $11; //@line 24786
   $20 = $ReallocAsyncCtx13 + 8 | 0; //@line 24787
   HEAP32[$20 >> 2] = $14; //@line 24788
   $21 = $ReallocAsyncCtx13 + 12 | 0; //@line 24789
   HEAP32[$21 >> 2] = $12; //@line 24790
   $22 = $ReallocAsyncCtx13 + 16 | 0; //@line 24791
   HEAP32[$22 >> 2] = $10; //@line 24792
   $23 = $ReallocAsyncCtx13 + 20 | 0; //@line 24793
   HEAP32[$23 >> 2] = $4; //@line 24794
   $24 = $ReallocAsyncCtx13 + 24 | 0; //@line 24795
   HEAP32[$24 >> 2] = $2; //@line 24796
   $25 = $ReallocAsyncCtx13 + 28 | 0; //@line 24797
   HEAP32[$25 >> 2] = $6; //@line 24798
   sp = STACKTOP; //@line 24799
   return;
  }
  ___async_unwind = 0; //@line 24802
  HEAP32[$ReallocAsyncCtx13 >> 2] = 182; //@line 24803
  $19 = $ReallocAsyncCtx13 + 4 | 0; //@line 24804
  HEAP32[$19 >> 2] = $11; //@line 24805
  $20 = $ReallocAsyncCtx13 + 8 | 0; //@line 24806
  HEAP32[$20 >> 2] = $14; //@line 24807
  $21 = $ReallocAsyncCtx13 + 12 | 0; //@line 24808
  HEAP32[$21 >> 2] = $12; //@line 24809
  $22 = $ReallocAsyncCtx13 + 16 | 0; //@line 24810
  HEAP32[$22 >> 2] = $10; //@line 24811
  $23 = $ReallocAsyncCtx13 + 20 | 0; //@line 24812
  HEAP32[$23 >> 2] = $4; //@line 24813
  $24 = $ReallocAsyncCtx13 + 24 | 0; //@line 24814
  HEAP32[$24 >> 2] = $2; //@line 24815
  $25 = $ReallocAsyncCtx13 + 28 | 0; //@line 24816
  HEAP32[$25 >> 2] = $6; //@line 24817
  sp = STACKTOP; //@line 24818
  return;
 }
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $73 = 0, $76 = 0, $8 = 0, $89 = 0, $9 = 0, $90 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 20445
 STACKTOP = STACKTOP + 16 | 0; //@line 20446
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20446
 $5 = sp; //@line 20447
 dest = $5; //@line 20448
 stop = dest + 16 | 0; //@line 20448
 do {
  HEAP8[dest >> 0] = 255; //@line 20448
  dest = dest + 1 | 0; //@line 20448
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 20450
 $8 = $0 + 116 | 0; //@line 20451
 $9 = HEAP32[$8 >> 2] | 0; //@line 20452
 $10 = $0 + 113 | 0; //@line 20453
 $11 = HEAP8[$10 >> 0] | 0; //@line 20454
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 120 >> 2] | 0; //@line 20459
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 20466
   $indvars$iv$i = 0; //@line 20467
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 20472
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 20473
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 20483
 $23 = $0 + 8 | 0; //@line 20484
 $25 = $1 + 4 | 0; //@line 20486
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $76 = HEAP32[$1 >> 2] | 0; //@line 20491
  $$0 = -1020; //@line 20496
  $$sink = $76 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 20496
  HEAP32[$3 >> 2] = $$sink; //@line 20497
  STACKTOP = sp; //@line 20498
  return $$0 | 0; //@line 20498
 }
 HEAP32[$4 >> 2] = 0; //@line 20500
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 20509
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 20511
 $40 = HEAP32[$8 >> 2] | 0; //@line 20512
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 20514
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 124 | 0; //@line 20518
   $45 = $0 + 72 | 0; //@line 20519
   $$01722$i = 0; //@line 20520
   $$01821$i = 0; //@line 20520
   $$023$i = 0; //@line 20520
   $47 = 0; //@line 20520
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 20532
      $$220$i = $$01821$i; //@line 20532
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 20534
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 20536
      if (($57 & 15) <= $39 << 24 >> 24 ? ($57 & 255) >>> 4 << 24 >> 24 >= $39 << 24 >> 24 : 0) {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 20554
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 20555
        $$220$i = $$01821$i; //@line 20555
        break;
       } else {
        $$2$i = $$023$i; //@line 20559
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 20559
        break;
       }
      } else {
       $$2$i = $$023$i; //@line 20563
       $$220$i = $$01821$i; //@line 20563
      }
     }
    } while (0);
    $73 = $$01722$i + 1 << 24 >> 24; //@line 20567
    if (($73 & 255) < ($42 & 255)) {
     $$01722$i = $73; //@line 20571
     $$01821$i = $$220$i; //@line 20571
     $$023$i = $$2$i; //@line 20571
     $47 = $73 & 255; //@line 20571
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = -1020; //@line 20582
     $$sink = $37; //@line 20582
    }
    HEAP32[$3 >> 2] = $$sink; //@line 20584
    STACKTOP = sp; //@line 20585
    return $$0 | 0; //@line 20585
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 20592
    $$0 = 0; //@line 20593
    $$sink = 0; //@line 20593
    HEAP32[$3 >> 2] = $$sink; //@line 20594
    STACKTOP = sp; //@line 20595
    return $$0 | 0; //@line 20595
   }
  }
 } while (0);
 $89 = HEAP32[$0 + 120 >> 2] | 0; //@line 20600
 $90 = HEAP8[$10 >> 0] | 0; //@line 20601
 if (!(($40 | 0) != 0 & ($89 | 0) != 0 & $90 << 24 >> 24 != 0)) {
  $$0 = -1021; //@line 20608
  $$sink = 0; //@line 20608
  HEAP32[$3 >> 2] = $$sink; //@line 20609
  STACKTOP = sp; //@line 20610
  return $$0 | 0; //@line 20610
 }
 $wide$trip$count$i25 = $90 & 255; //@line 20612
 $indvars$iv$i27 = 0; //@line 20613
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$89 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 20618
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 20619
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = -1021; //@line 20622
 $$sink = 0; //@line 20622
 HEAP32[$3 >> 2] = $$sink; //@line 20628
 STACKTOP = sp; //@line 20629
 return $$0 | 0; //@line 20629
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_100($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25231
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25233
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25235
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25237
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25241
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25243
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25245
 $14 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 25246
 if ($14 | 0) {
  $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 25250
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(28) | 0; //@line 25251
  FUNCTION_TABLE_vi[$17 & 1023]($2); //@line 25252
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 246; //@line 25255
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 25256
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 25257
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 25258
   HEAP32[$19 >> 2] = $4; //@line 25259
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 25260
   HEAP32[$20 >> 2] = $2; //@line 25261
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 25262
   HEAP32[$21 >> 2] = $6; //@line 25263
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 25264
   HEAP32[$22 >> 2] = $10; //@line 25265
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 25266
   HEAP32[$23 >> 2] = $12; //@line 25267
   sp = STACKTOP; //@line 25268
   return;
  }
  ___async_unwind = 0; //@line 25271
  HEAP32[$ReallocAsyncCtx4 >> 2] = 246; //@line 25272
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 25273
  HEAP32[$18 >> 2] = $AsyncRetVal; //@line 25274
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 25275
  HEAP32[$19 >> 2] = $4; //@line 25276
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 25277
  HEAP32[$20 >> 2] = $2; //@line 25278
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 25279
  HEAP32[$21 >> 2] = $6; //@line 25280
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 25281
  HEAP32[$22 >> 2] = $10; //@line 25282
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 25283
  HEAP32[$23 >> 2] = $12; //@line 25284
  sp = STACKTOP; //@line 25285
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 25290
  _mbed_assert_internal(12080, 12089, 775); //@line 25291
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 247; //@line 25294
   $25 = $ReallocAsyncCtx11 + 4 | 0; //@line 25295
   HEAP32[$25 >> 2] = $4; //@line 25296
   $26 = $ReallocAsyncCtx11 + 8 | 0; //@line 25297
   HEAP32[$26 >> 2] = $2; //@line 25298
   $27 = $ReallocAsyncCtx11 + 12 | 0; //@line 25299
   HEAP32[$27 >> 2] = $6; //@line 25300
   $28 = $ReallocAsyncCtx11 + 16 | 0; //@line 25301
   HEAP32[$28 >> 2] = $10; //@line 25302
   $29 = $ReallocAsyncCtx11 + 20 | 0; //@line 25303
   HEAP32[$29 >> 2] = $12; //@line 25304
   sp = STACKTOP; //@line 25305
   return;
  }
  ___async_unwind = 0; //@line 25308
  HEAP32[$ReallocAsyncCtx11 >> 2] = 247; //@line 25309
  $25 = $ReallocAsyncCtx11 + 4 | 0; //@line 25310
  HEAP32[$25 >> 2] = $4; //@line 25311
  $26 = $ReallocAsyncCtx11 + 8 | 0; //@line 25312
  HEAP32[$26 >> 2] = $2; //@line 25313
  $27 = $ReallocAsyncCtx11 + 12 | 0; //@line 25314
  HEAP32[$27 >> 2] = $6; //@line 25315
  $28 = $ReallocAsyncCtx11 + 16 | 0; //@line 25316
  HEAP32[$28 >> 2] = $10; //@line 25317
  $29 = $ReallocAsyncCtx11 + 20 | 0; //@line 25318
  HEAP32[$29 >> 2] = $12; //@line 25319
  sp = STACKTOP; //@line 25320
  return;
 }
 if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) == 2) {
  label = 13; //@line 25326
 } else {
  if (!(HEAP8[$6 + 15 >> 0] | 0)) {
   label = 13; //@line 25332
  }
 }
 if ((label | 0) == 13) {
  if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
   return;
  }
  if ((HEAP32[$6 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $40 = $12 + 2512 | 0; //@line 25348
 $41 = HEAP32[$40 >> 2] | 0; //@line 25349
 if (!$41) {
  return;
 }
 $45 = HEAP32[$12 + 3168 >> 2] | 0; //@line 25356
 $47 = HEAP32[$41 + 4 >> 2] | 0; //@line 25358
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 25359
 FUNCTION_TABLE_vii[$47 & 15]($10, $12 + 2500 | 0); //@line 25360
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 25363
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 25364
  HEAP32[$48 >> 2] = $40; //@line 25365
  $49 = $ReallocAsyncCtx5 + 8 | 0; //@line 25366
  HEAP32[$49 >> 2] = $10; //@line 25367
  $50 = $ReallocAsyncCtx5 + 12 | 0; //@line 25368
  HEAP32[$50 >> 2] = $45; //@line 25369
  $51 = $ReallocAsyncCtx5 + 16 | 0; //@line 25370
  HEAP32[$51 >> 2] = $10; //@line 25371
  sp = STACKTOP; //@line 25372
  return;
 }
 ___async_unwind = 0; //@line 25375
 HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 25376
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 25377
 HEAP32[$48 >> 2] = $40; //@line 25378
 $49 = $ReallocAsyncCtx5 + 8 | 0; //@line 25379
 HEAP32[$49 >> 2] = $10; //@line 25380
 $50 = $ReallocAsyncCtx5 + 12 | 0; //@line 25381
 HEAP32[$50 >> 2] = $45; //@line 25382
 $51 = $ReallocAsyncCtx5 + 16 | 0; //@line 25383
 HEAP32[$51 >> 2] = $10; //@line 25384
 sp = STACKTOP; //@line 25385
 return;
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 681
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 685
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 689
   break;
  }
 default:
  {
   $$0106 = -32; //@line 693
   return $$0106 | 0; //@line 694
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 697
 $3 = $0 + 8 | 0; //@line 698
 HEAP32[$0 + 4 >> 2] = $3; //@line 700
 $5 = $2 >>> 5; //@line 701
 $$0103117 = 0; //@line 702
 do {
  $6 = $$0103117 << 2; //@line 704
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 727
  $$0103117 = $$0103117 + 1 | 0; //@line 728
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 740
   $$1104111 = 0; //@line 740
   $33 = HEAP32[$3 >> 2] | 0; //@line 740
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 746
    $33 = HEAP32[1260 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[13746 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13746 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13746 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13746 + ($35 & 255) >> 0] | 0) << 24; //@line 771
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 772
    HEAP32[$$0112 >> 2] = $33; //@line 773
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 776
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 778
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 781
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 783
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 786
    $$1104111 = $$1104111 + 1 | 0; //@line 787
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 790
   return $$0106 | 0; //@line 796
  }
 case 12:
  {
   $$1114 = $3; //@line 801
   $$2105113 = 0; //@line 801
   $76 = HEAP32[$3 >> 2] | 0; //@line 801
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 807
    $76 = HEAP32[1260 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[13746 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13746 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13746 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13746 + ($78 & 255) >> 0] | 0) << 24; //@line 832
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 833
    HEAP32[$$1114 >> 2] = $76; //@line 834
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 837
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 839
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 842
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 844
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 847
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 849
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 852
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 854
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 857
    $$2105113 = $$2105113 + 1 | 0; //@line 858
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 861
   return $$0106 | 0; //@line 867
  }
 case 14:
  {
   $$2116 = $3; //@line 872
   $$3115 = 0; //@line 872
   $127 = HEAP32[$3 >> 2] | 0; //@line 872
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 878
    $127 = HEAP32[1260 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[13746 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13746 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13746 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13746 + ($129 & 255) >> 0] | 0) << 24; //@line 903
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 904
    HEAP32[$$2116 >> 2] = $127; //@line 905
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 908
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 910
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 913
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 915
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 918
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 920
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[13746 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[13746 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13746 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[13746 + ($166 >>> 24) >> 0] | 0) << 24; //@line 947
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 949
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 952
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 954
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 957
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 959
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 962
    $$3115 = $$3115 + 1 | 0; //@line 963
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 966
   return $$0106 | 0; //@line 972
  }
 default:
  {
   $$0106 = 0; //@line 976
   return $$0106 | 0; //@line 977
  }
 }
 return 0; //@line 980
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $100 = 0, $101 = 0, $102 = 0, $104 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $74 = 0, $75 = 0, $76 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6715
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6716
 _initialize($0); //@line 6717
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 618; //@line 6720
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6722
  sp = STACKTOP; //@line 6723
  tempRet0 = 0; //@line 6724
  return 0; //@line 6725
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6727
 $2 = $0 + 4 | 0; //@line 6728
 $3 = HEAP32[$2 >> 2] | 0; //@line 6729
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6732
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6733
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 6734
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 619; //@line 6737
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6739
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 6741
  sp = STACKTOP; //@line 6742
  tempRet0 = 0; //@line 6743
  return 0; //@line 6744
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6746
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $108 = HEAP32[$2 >> 2] | 0; //@line 6752
  $109 = $108 + 48 | 0; //@line 6753
  $110 = $109; //@line 6754
  $111 = $110; //@line 6755
  $112 = HEAP32[$111 >> 2] | 0; //@line 6756
  $113 = $110 + 4 | 0; //@line 6757
  $114 = $113; //@line 6758
  $115 = HEAP32[$114 >> 2] | 0; //@line 6759
  tempRet0 = $115; //@line 6760
  return $112 | 0; //@line 6761
 }
 $14 = $3 + 32 | 0; //@line 6763
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 6768
 HEAP32[$14 >> 2] = $7; //@line 6769
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 6771
 do {
  if (($21 | 0) == 1e6) {
   $100 = $19; //@line 6775
   $101 = 0; //@line 6775
  } else {
   $24 = HEAP8[$3 + 57 >> 0] | 0; //@line 6778
   $26 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6780
   $27 = tempRet0; //@line 6781
   if (!($24 << 24 >> 24)) {
    $61 = ___udivdi3($26 | 0, $27 | 0, $21 | 0, 0) | 0; //@line 6783
    $62 = tempRet0; //@line 6784
    $63 = ___muldi3($61 | 0, $62 | 0, $21 | 0, 0) | 0; //@line 6785
    $65 = _i64Subtract($26 | 0, $27 | 0, $63 | 0, tempRet0 | 0) | 0; //@line 6787
    $67 = $3 + 40 | 0; //@line 6789
    $68 = $67; //@line 6790
    $74 = _i64Add($65 | 0, tempRet0 | 0, HEAP32[$68 >> 2] | 0, HEAP32[$68 + 4 >> 2] | 0) | 0; //@line 6796
    $75 = tempRet0; //@line 6797
    $76 = $67; //@line 6798
    HEAP32[$76 >> 2] = $74; //@line 6800
    HEAP32[$76 + 4 >> 2] = $75; //@line 6803
    if ($75 >>> 0 < 0 | ($75 | 0) == 0 & $74 >>> 0 < $21 >>> 0) {
     $100 = $61; //@line 6810
     $101 = $62; //@line 6810
     break;
    }
    $85 = _i64Add($61 | 0, $62 | 0, 1, 0) | 0; //@line 6813
    $86 = tempRet0; //@line 6814
    $87 = _i64Subtract($74 | 0, $75 | 0, $21 | 0, 0) | 0; //@line 6815
    $89 = $67; //@line 6817
    HEAP32[$89 >> 2] = $87; //@line 6819
    HEAP32[$89 + 4 >> 2] = tempRet0; //@line 6822
    $100 = $85; //@line 6823
    $101 = $86; //@line 6823
    break;
   } else {
    $28 = $24 & 255; //@line 6826
    $29 = _bitshift64Lshr($26 | 0, $27 | 0, $28 | 0) | 0; //@line 6827
    $30 = tempRet0; //@line 6828
    $31 = _bitshift64Shl($29 | 0, $30 | 0, $28 | 0) | 0; //@line 6829
    $33 = _i64Subtract($26 | 0, $27 | 0, $31 | 0, tempRet0 | 0) | 0; //@line 6831
    $35 = $3 + 40 | 0; //@line 6833
    $36 = $35; //@line 6834
    $42 = _i64Add(HEAP32[$36 >> 2] | 0, HEAP32[$36 + 4 >> 2] | 0, $33 | 0, tempRet0 | 0) | 0; //@line 6840
    $43 = tempRet0; //@line 6841
    $44 = $35; //@line 6842
    HEAP32[$44 >> 2] = $42; //@line 6844
    HEAP32[$44 + 4 >> 2] = $43; //@line 6847
    if ($43 >>> 0 < 0 | ($43 | 0) == 0 & $42 >>> 0 < $21 >>> 0) {
     $100 = $29; //@line 6854
     $101 = $30; //@line 6854
     break;
    }
    $53 = _i64Add($29 | 0, $30 | 0, 1, 0) | 0; //@line 6857
    $54 = tempRet0; //@line 6858
    $55 = _i64Subtract($42 | 0, $43 | 0, $21 | 0, 0) | 0; //@line 6859
    $57 = $35; //@line 6861
    HEAP32[$57 >> 2] = $55; //@line 6863
    HEAP32[$57 + 4 >> 2] = tempRet0; //@line 6866
    $100 = $53; //@line 6867
    $101 = $54; //@line 6867
    break;
   }
  }
 } while (0);
 $93 = $3 + 48 | 0; //@line 6872
 $94 = $93; //@line 6873
 $102 = _i64Add(HEAP32[$94 >> 2] | 0, HEAP32[$94 + 4 >> 2] | 0, $100 | 0, $101 | 0) | 0; //@line 6879
 $104 = $93; //@line 6881
 HEAP32[$104 >> 2] = $102; //@line 6883
 HEAP32[$104 + 4 >> 2] = tempRet0; //@line 6886
 $108 = HEAP32[$2 >> 2] | 0; //@line 6887
 $109 = $108 + 48 | 0; //@line 6888
 $110 = $109; //@line 6889
 $111 = $110; //@line 6890
 $112 = HEAP32[$111 >> 2] | 0; //@line 6891
 $113 = $110 + 4 | 0; //@line 6892
 $114 = $113; //@line 6893
 $115 = HEAP32[$114 >> 2] | 0; //@line 6894
 tempRet0 = $115; //@line 6895
 return $112 | 0; //@line 6896
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $48 = 0, $55 = 0, $62 = 0, $67 = 0, $68 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17977
 HEAP8[$0 + 5 >> 0] = $6; //@line 17979
 HEAP8[$0 + 6 >> 0] = $5; //@line 17982
 HEAP8[$0 + 7 >> 0] = $5 >>> 8; //@line 17986
 HEAP8[$0 + 8 >> 0] = $5 >>> 16; //@line 17990
 HEAP8[$0 + 9 >> 0] = $5 >>> 24; //@line 17994
 HEAP8[$0 + 10 >> 0] = $7; //@line 17997
 HEAP8[$0 + 11 >> 0] = $7 >>> 8; //@line 18001
 HEAP8[$0 + 12 >> 0] = $7 >>> 16; //@line 18005
 HEAP8[$0 + 13 >> 0] = $7 >>> 24; //@line 18009
 $33 = $2 & 255; //@line 18011
 HEAP8[$0 + 15 >> 0] = $2; //@line 18014
 $36 = $0 + 344 | 0; //@line 18015
 _mbedtls_cipher_init($36); //@line 18016
 $37 = _mbedtls_cipher_info_from_type(2) | 0; //@line 18017
 if (!$37) {
  $$0 = -24960; //@line 18020
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18022
  $39 = _mbedtls_cipher_setup($36, $37) | 0; //@line 18023
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 482; //@line 18026
   HEAP32[$AsyncCtx15 + 4 >> 2] = $36; //@line 18028
   HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 18030
   HEAP32[$AsyncCtx15 + 12 >> 2] = $33; //@line 18032
   HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 18034
   HEAP32[$AsyncCtx15 + 20 >> 2] = $8; //@line 18036
   HEAP32[$AsyncCtx15 + 24 >> 2] = $3; //@line 18038
   HEAP32[$AsyncCtx15 + 28 >> 2] = $4; //@line 18040
   sp = STACKTOP; //@line 18041
   return 0; //@line 18042
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18044
  if (!$39) {
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 18047
   $48 = _mbedtls_cipher_cmac_starts($36, $3, $4) | 0; //@line 18048
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 483; //@line 18051
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18053
    HEAP32[$AsyncCtx + 8 >> 2] = $36; //@line 18055
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 18057
    HEAP32[$AsyncCtx + 16 >> 2] = $33; //@line 18059
    HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 18061
    sp = STACKTOP; //@line 18062
    return 0; //@line 18063
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 18065
   if (!$48) {
    $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18068
    $55 = _mbedtls_cipher_cmac_update($36, $0, 16) | 0; //@line 18069
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 484; //@line 18072
     HEAP32[$AsyncCtx11 + 4 >> 2] = $36; //@line 18074
     HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 18076
     HEAP32[$AsyncCtx11 + 12 >> 2] = $33; //@line 18078
     HEAP32[$AsyncCtx11 + 16 >> 2] = $0; //@line 18080
     HEAP32[$AsyncCtx11 + 20 >> 2] = $8; //@line 18082
     sp = STACKTOP; //@line 18083
     return 0; //@line 18084
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18086
    if (!$55) {
     $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 18089
     $62 = _mbedtls_cipher_cmac_update($36, $1, $33) | 0; //@line 18090
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 485; //@line 18093
      HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 18095
      HEAP32[$AsyncCtx7 + 8 >> 2] = $36; //@line 18097
      HEAP32[$AsyncCtx7 + 12 >> 2] = $8; //@line 18099
      sp = STACKTOP; //@line 18100
      return 0; //@line 18101
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18103
     if (!$62) {
      $67 = $0 + 16 | 0; //@line 18106
      $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18107
      $68 = _mbedtls_cipher_cmac_finish($36, $67) | 0; //@line 18108
      if (___async) {
       HEAP32[$AsyncCtx3 >> 2] = 486; //@line 18111
       HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 18113
       HEAP32[$AsyncCtx3 + 8 >> 2] = $67; //@line 18115
       HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 18117
       HEAP32[$AsyncCtx3 + 16 >> 2] = $36; //@line 18119
       sp = STACKTOP; //@line 18120
       return 0; //@line 18121
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18123
      if (!$68) {
       HEAP32[$8 >> 2] = (HEAPU8[$0 + 18 >> 0] | 0) << 16 | (HEAPU8[$0 + 19 >> 0] | 0) << 24 | (HEAPU8[$0 + 17 >> 0] | 0) << 8 | (HEAPU8[$67 >> 0] | 0); //@line 18143
       $$0 = 0; //@line 18144
      } else {
       $$0 = $68; //@line 18146
      }
     } else {
      $$0 = $62; //@line 18149
     }
    } else {
     $$0 = $55; //@line 18152
    }
   } else {
    $$0 = $48; //@line 18155
   }
  } else {
   $$0 = $39; //@line 18158
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18161
 _mbedtls_cipher_free($36); //@line 18162
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 487; //@line 18165
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 18167
  sp = STACKTOP; //@line 18168
  return 0; //@line 18169
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 18171
  return $$0 | 0; //@line 18172
 }
 return 0; //@line 18174
}
function _mbed_vtracef__async_cb_86($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $42 = 0, $46 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24269
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24271
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24273
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24275
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24281
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24283
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24285
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24289
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24291
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24293
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24295
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 24298
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24300
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24302
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 24304
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 24308
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 24312
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 24316
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 24321
 $50 = _snprintf($4, $6, 11964, $2) | 0; //@line 24322
 $$10 = ($50 | 0) >= ($6 | 0) ? 0 : $50; //@line 24324
 $53 = $4 + $$10 | 0; //@line 24326
 $54 = $6 - $$10 | 0; //@line 24327
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 24331
   $$3169 = $53; //@line 24331
   label = 4; //@line 24332
  }
 } else {
  $$3147168 = $6; //@line 24335
  $$3169 = $4; //@line 24335
  label = 4; //@line 24336
 }
 if ((label | 0) == 4) {
  $56 = $30 + -2 | 0; //@line 24339
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$46 >> 2] = $34; //@line 24345
    $$5156 = _snprintf($$3169, $$3147168, 11967, $46) | 0; //@line 24347
    break;
   }
  case 1:
   {
    HEAP32[$42 >> 2] = $34; //@line 24351
    $$5156 = _snprintf($$3169, $$3147168, 11982, $42) | 0; //@line 24353
    break;
   }
  case 3:
   {
    HEAP32[$38 >> 2] = $34; //@line 24357
    $$5156 = _snprintf($$3169, $$3147168, 11997, $38) | 0; //@line 24359
    break;
   }
  case 7:
   {
    HEAP32[$32 >> 2] = $34; //@line 24363
    $$5156 = _snprintf($$3169, $$3147168, 12012, $32) | 0; //@line 24365
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 12027, $16) | 0; //@line 24370
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 24374
  $67 = $$3169 + $$5156$ | 0; //@line 24376
  $68 = $$3147168 - $$5156$ | 0; //@line 24377
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 24381
   $70 = _vsnprintf($67, $68, $12, $14) | 0; //@line 24382
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 133; //@line 24385
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 24386
    HEAP32[$71 >> 2] = $20; //@line 24387
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 24388
    HEAP32[$72 >> 2] = $22; //@line 24389
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 24390
    $$expand_i1_val = $28 & 1; //@line 24391
    HEAP8[$73 >> 0] = $$expand_i1_val; //@line 24392
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 24393
    HEAP32[$74 >> 2] = $24; //@line 24394
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 24395
    HEAP32[$75 >> 2] = $26; //@line 24396
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 24397
    HEAP32[$76 >> 2] = $68; //@line 24398
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 24399
    HEAP32[$77 >> 2] = $67; //@line 24400
    sp = STACKTOP; //@line 24401
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 24405
   ___async_unwind = 0; //@line 24406
   HEAP32[$ReallocAsyncCtx10 >> 2] = 133; //@line 24407
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 24408
   HEAP32[$71 >> 2] = $20; //@line 24409
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 24410
   HEAP32[$72 >> 2] = $22; //@line 24411
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 24412
   $$expand_i1_val = $28 & 1; //@line 24413
   HEAP8[$73 >> 0] = $$expand_i1_val; //@line 24414
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 24415
   HEAP32[$74 >> 2] = $24; //@line 24416
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 24417
   HEAP32[$75 >> 2] = $26; //@line 24418
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 24419
   HEAP32[$76 >> 2] = $68; //@line 24420
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 24421
   HEAP32[$77 >> 2] = $67; //@line 24422
   sp = STACKTOP; //@line 24423
   return;
  }
 }
 $79 = HEAP32[174] | 0; //@line 24427
 $80 = HEAP32[167] | 0; //@line 24428
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 24429
 FUNCTION_TABLE_vi[$79 & 1023]($80); //@line 24430
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 24433
  sp = STACKTOP; //@line 24434
  return;
 }
 ___async_unwind = 0; //@line 24437
 HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 24438
 sp = STACKTOP; //@line 24439
 return;
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 192
 HEAP32[$0 >> 2] = 968; //@line 193
 $2 = $0 + 324 | 0; //@line 194
 HEAP32[$2 >> 2] = HEAP32[262]; //@line 195
 HEAP32[$2 + 4 >> 2] = HEAP32[263]; //@line 195
 HEAP32[$2 + 8 >> 2] = HEAP32[264]; //@line 195
 HEAP32[$2 + 12 >> 2] = HEAP32[265]; //@line 195
 HEAP32[$2 + 16 >> 2] = HEAP32[266]; //@line 195
 HEAP32[$2 + 20 >> 2] = HEAP32[267]; //@line 195
 $3 = $0 + 348 | 0; //@line 196
 HEAP32[$3 >> 2] = HEAP32[268]; //@line 197
 HEAP32[$3 + 4 >> 2] = HEAP32[269]; //@line 197
 HEAP32[$3 + 8 >> 2] = HEAP32[270]; //@line 197
 HEAP32[$3 + 12 >> 2] = HEAP32[271]; //@line 197
 HEAP32[$3 + 16 >> 2] = HEAP32[272]; //@line 197
 HEAP32[$3 + 20 >> 2] = HEAP32[273]; //@line 197
 $4 = $0 + 372 | 0; //@line 198
 HEAP32[$4 >> 2] = HEAP32[274]; //@line 199
 HEAP32[$4 + 4 >> 2] = HEAP32[275]; //@line 199
 HEAP32[$4 + 8 >> 2] = HEAP32[276]; //@line 199
 HEAP32[$4 + 12 >> 2] = HEAP32[277]; //@line 199
 HEAP32[$4 + 16 >> 2] = HEAP32[278]; //@line 199
 HEAP32[$4 + 20 >> 2] = HEAP32[279]; //@line 199
 $5 = $0 + 396 | 0; //@line 200
 HEAP32[$5 >> 2] = HEAP32[280]; //@line 201
 HEAP32[$5 + 4 >> 2] = HEAP32[281]; //@line 201
 HEAP32[$5 + 8 >> 2] = HEAP32[282]; //@line 201
 HEAP32[$5 + 12 >> 2] = HEAP32[283]; //@line 201
 HEAP32[$5 + 16 >> 2] = HEAP32[284]; //@line 201
 HEAP32[$5 + 20 >> 2] = HEAP32[285]; //@line 201
 $6 = $0 + 420 | 0; //@line 202
 HEAP32[$6 >> 2] = HEAP32[286]; //@line 203
 HEAP32[$6 + 4 >> 2] = HEAP32[287]; //@line 203
 HEAP32[$6 + 8 >> 2] = HEAP32[288]; //@line 203
 HEAP32[$6 + 12 >> 2] = HEAP32[289]; //@line 203
 HEAP32[$6 + 16 >> 2] = HEAP32[290]; //@line 203
 HEAP32[$6 + 20 >> 2] = HEAP32[291]; //@line 203
 $7 = $0 + 444 | 0; //@line 204
 HEAP32[$7 >> 2] = HEAP32[292]; //@line 205
 HEAP32[$7 + 4 >> 2] = HEAP32[293]; //@line 205
 HEAP32[$7 + 8 >> 2] = HEAP32[294]; //@line 205
 HEAP32[$7 + 12 >> 2] = HEAP32[295]; //@line 205
 HEAP32[$7 + 16 >> 2] = HEAP32[296]; //@line 205
 HEAP32[$7 + 20 >> 2] = HEAP32[297]; //@line 205
 $8 = $0 + 132 | 0; //@line 206
 HEAP32[$8 >> 2] = HEAP32[298]; //@line 207
 HEAP32[$8 + 4 >> 2] = HEAP32[299]; //@line 207
 HEAP32[$8 + 8 >> 2] = HEAP32[300]; //@line 207
 HEAP8[$0 + 141 >> 0] = 1; //@line 209
 $10 = $0 + 144 | 0; //@line 210
 HEAP32[$10 >> 2] = HEAP32[301]; //@line 211
 HEAP32[$10 + 4 >> 2] = HEAP32[302]; //@line 211
 HEAP32[$10 + 8 >> 2] = HEAP32[303]; //@line 211
 HEAP8[$0 + 153 >> 0] = 1; //@line 213
 $12 = $0 + 156 | 0; //@line 214
 HEAP32[$12 >> 2] = HEAP32[304]; //@line 215
 HEAP32[$12 + 4 >> 2] = HEAP32[305]; //@line 215
 HEAP32[$12 + 8 >> 2] = HEAP32[306]; //@line 215
 HEAP8[$0 + 165 >> 0] = 1; //@line 217
 $14 = $0 + 470 | 0; //@line 218
 HEAP16[$14 >> 1] = 7; //@line 219
 $15 = $0 + 468 | 0; //@line 220
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $15, $14, 1); //@line 221
 HEAP32[$0 + 124 >> 2] = $8; //@line 223
 HEAP8[$0 + 112 >> 0] = 16; //@line 225
 HEAP32[$0 + 116 >> 2] = $15; //@line 227
 HEAP32[$0 + 120 >> 2] = $14; //@line 229
 HEAP8[$0 + 113 >> 0] = 1; //@line 231
 HEAP32[$0 + 72 >> 2] = $2; //@line 233
 HEAP8[$0 + 76 >> 0] = 6; //@line 235
 HEAP32[$0 + 80 >> 2] = 1228; //@line 237
 HEAP8[$0 + 84 >> 0] = 8; //@line 239
 HEAP32[$0 + 88 >> 2] = 13599; //@line 241
 HEAP8[$0 + 92 >> 0] = 8; //@line 243
 HEAP32[$0 + 96 >> 2] = 13607; //@line 245
 HEAP8[$0 + 100 >> 0] = 8; //@line 247
 HEAP32[$0 + 104 >> 2] = 13615; //@line 249
 HEAP8[$0 + 108 >> 0] = 8; //@line 251
 $31 = $0 + 128 | 0; //@line 252
 HEAP8[$31 >> 0] = HEAP8[$31 >> 0] & -4; //@line 255
 $34 = $0 + 12 | 0; //@line 256
 $35 = $0 + 18 | 0; //@line 257
 HEAP32[$34 >> 2] = 16843009; //@line 258
 HEAP16[$34 + 4 >> 1] = 257; //@line 258
 HEAP8[$35 >> 0] = 3; //@line 259
 HEAP8[$0 + 20 >> 0] = 16; //@line 261
 HEAP8[$0 + 19 >> 0] = 5; //@line 263
 HEAP8[$0 + 26 >> 0] = 0; //@line 265
 HEAP8[$0 + 27 >> 0] = 7; //@line 267
 HEAP8[$0 + 28 >> 0] = 0; //@line 269
 HEAP8[$0 + 29 >> 0] = 7; //@line 271
 HEAP8[$0 + 30 >> 0] = 0; //@line 273
 HEAP8[$0 + 31 >> 0] = 5; //@line 275
 HEAP8[$0 + 32 >> 0] = 0; //@line 277
 HEAP8[$0 + 33 >> 0] = 5; //@line 279
 HEAP8[$0 + 34 >> 0] = 0; //@line 281
 HEAP8[$0 + 21 >> 0] = 7; //@line 283
 HEAP8[$0 + 22 >> 0] = 0; //@line 285
 HEAP8[$0 + 23 >> 0] = 0; //@line 287
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 289
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 291
 HEAP8[$0 + 24 >> 0] = 64; //@line 293
 HEAP8[$0 + 25 >> 0] = 32; //@line 295
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 297
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 299
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 301
 HEAP16[$0 + 46 >> 1] = 7; //@line 303
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 305
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 307
 HEAP16[$0 + 48 >> 1] = 16384; //@line 309
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 311
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 313
 HEAP8[$0 + 64 >> 0] = 0; //@line 315
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 317
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17530
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17532
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17534
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17536
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 17538
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 17540
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 17542
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 17544
 $$pre$i = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 17547
 $17 = $2 + 12 | 0; //@line 17548
 HEAP32[$17 >> 2] = $$pre$i; //@line 17549
 if (!$$pre$i) {
  $30 = $4 + 12 | 0; //@line 17552
  HEAP32[$30 >> 2] = 0; //@line 17553
  $31 = $4 + 16 | 0; //@line 17554
  HEAP32[$31 >> 2] = $6; //@line 17555
  HEAP16[$4 + 20 >> 1] = $8; //@line 17557
  HEAP16[$4 + 22 >> 1] = $10; //@line 17559
  HEAP8[$4 + 24 >> 0] = $12; //@line 17561
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 17562
  $35 = _equeue_alloc($14, 28) | 0; //@line 17563
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 285; //@line 17566
   $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 17567
   HEAP32[$36 >> 2] = $2; //@line 17568
   $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 17569
   HEAP32[$37 >> 2] = $30; //@line 17570
   $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 17571
   HEAP32[$38 >> 2] = $31; //@line 17572
   $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 17573
   HEAP32[$39 >> 2] = $14; //@line 17574
   $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 17575
   HEAP32[$40 >> 2] = $30; //@line 17576
   $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 17577
   HEAP32[$41 >> 2] = $17; //@line 17578
   $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 17579
   HEAP32[$42 >> 2] = $4; //@line 17580
   sp = STACKTOP; //@line 17581
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 17585
  ___async_unwind = 0; //@line 17586
  HEAP32[$ReallocAsyncCtx7 >> 2] = 285; //@line 17587
  $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 17588
  HEAP32[$36 >> 2] = $2; //@line 17589
  $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 17590
  HEAP32[$37 >> 2] = $30; //@line 17591
  $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 17592
  HEAP32[$38 >> 2] = $31; //@line 17593
  $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 17594
  HEAP32[$39 >> 2] = $14; //@line 17595
  $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 17596
  HEAP32[$40 >> 2] = $30; //@line 17597
  $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 17598
  HEAP32[$41 >> 2] = $17; //@line 17599
  $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 17600
  HEAP32[$42 >> 2] = $4; //@line 17601
  sp = STACKTOP; //@line 17602
  return;
 } else {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 17607
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 17608
  FUNCTION_TABLE_vii[$20 & 15]($4, $2); //@line 17609
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 284; //@line 17612
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 17613
   HEAP32[$21 >> 2] = $2; //@line 17614
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 17615
   HEAP32[$22 >> 2] = $4; //@line 17616
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 17617
   HEAP32[$23 >> 2] = $17; //@line 17618
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 17619
   HEAP32[$24 >> 2] = $6; //@line 17620
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 17621
   HEAP16[$25 >> 1] = $8; //@line 17622
   $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 17623
   HEAP16[$26 >> 1] = $10; //@line 17624
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 17625
   HEAP8[$27 >> 0] = $12; //@line 17626
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 17627
   HEAP32[$28 >> 2] = $14; //@line 17628
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 17629
   HEAP32[$29 >> 2] = $17; //@line 17630
   sp = STACKTOP; //@line 17631
   return;
  }
  ___async_unwind = 0; //@line 17634
  HEAP32[$ReallocAsyncCtx2 >> 2] = 284; //@line 17635
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 17636
  HEAP32[$21 >> 2] = $2; //@line 17637
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 17638
  HEAP32[$22 >> 2] = $4; //@line 17639
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 17640
  HEAP32[$23 >> 2] = $17; //@line 17641
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 17642
  HEAP32[$24 >> 2] = $6; //@line 17643
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 17644
  HEAP16[$25 >> 1] = $8; //@line 17645
  $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 17646
  HEAP16[$26 >> 1] = $10; //@line 17647
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 17648
  HEAP8[$27 >> 0] = $12; //@line 17649
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 17650
  HEAP32[$28 >> 2] = $14; //@line 17651
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 17652
  HEAP32[$29 >> 2] = $17; //@line 17653
  sp = STACKTOP; //@line 17654
  return;
 }
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_199($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15106
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15108
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15110
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15112
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15114
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15116
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15118
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15120
 if ($AsyncRetVal | 0) {
  $15 = HEAP32[$4 >> 2] | 0; //@line 15123
  if (!$15) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 15127
   _equeue_event_delay($AsyncRetVal, $8); //@line 15128
   _equeue_event_dtor($AsyncRetVal, 268); //@line 15129
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 15130
   $27 = _equeue_post($10, 269, $AsyncRetVal) | 0; //@line 15131
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 551; //@line 15134
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 15135
    HEAP32[$28 >> 2] = $12; //@line 15136
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 15137
    HEAP32[$29 >> 2] = $4; //@line 15138
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 15139
    HEAP32[$30 >> 2] = $2; //@line 15140
    sp = STACKTOP; //@line 15141
    return;
   }
   HEAP32[___async_retval >> 2] = $27; //@line 15145
   ___async_unwind = 0; //@line 15146
   HEAP32[$ReallocAsyncCtx4 >> 2] = 551; //@line 15147
   $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 15148
   HEAP32[$28 >> 2] = $12; //@line 15149
   $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 15150
   HEAP32[$29 >> 2] = $4; //@line 15151
   $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 15152
   HEAP32[$30 >> 2] = $2; //@line 15153
   sp = STACKTOP; //@line 15154
   return;
  } else {
   $18 = HEAP32[$15 + 4 >> 2] | 0; //@line 15158
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 15159
   FUNCTION_TABLE_vii[$18 & 15]($AsyncRetVal, $2); //@line 15160
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 550; //@line 15163
    $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 15164
    HEAP32[$19 >> 2] = $6; //@line 15165
    $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 15166
    HEAP32[$20 >> 2] = $AsyncRetVal; //@line 15167
    $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 15168
    HEAP32[$21 >> 2] = $8; //@line 15169
    $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 15170
    HEAP32[$22 >> 2] = $10; //@line 15171
    $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 15172
    HEAP32[$23 >> 2] = $12; //@line 15173
    $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 15174
    HEAP32[$24 >> 2] = $4; //@line 15175
    $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 15176
    HEAP32[$25 >> 2] = $2; //@line 15177
    sp = STACKTOP; //@line 15178
    return;
   }
   ___async_unwind = 0; //@line 15181
   HEAP32[$ReallocAsyncCtx2 >> 2] = 550; //@line 15182
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 15183
   HEAP32[$19 >> 2] = $6; //@line 15184
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 15185
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 15186
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 15187
   HEAP32[$21 >> 2] = $8; //@line 15188
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 15189
   HEAP32[$22 >> 2] = $10; //@line 15190
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 15191
   HEAP32[$23 >> 2] = $12; //@line 15192
   $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 15193
   HEAP32[$24 >> 2] = $4; //@line 15194
   $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 15195
   HEAP32[$25 >> 2] = $2; //@line 15196
   sp = STACKTOP; //@line 15197
   return;
  }
 }
 $32 = $12 + 16 | 0; //@line 15201
 HEAP32[$32 >> 2] = 0; //@line 15202
 $33 = HEAP32[$4 >> 2] | 0; //@line 15203
 if ($33 | 0) {
  $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 15207
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 15208
  FUNCTION_TABLE_vi[$36 & 1023]($2); //@line 15209
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 15212
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 15213
   HEAP32[$37 >> 2] = $32; //@line 15214
   sp = STACKTOP; //@line 15215
   return;
  }
  ___async_unwind = 0; //@line 15218
  HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 15219
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 15220
  HEAP32[$37 >> 2] = $32; //@line 15221
  sp = STACKTOP; //@line 15222
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 15229
 _mbed_assert_internal(13623, 13641, 57); //@line 15230
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 553; //@line 15233
  sp = STACKTOP; //@line 15234
  return;
 }
 ___async_unwind = 0; //@line 15237
 HEAP32[$ReallocAsyncCtx6 >> 2] = 553; //@line 15238
 sp = STACKTOP; //@line 15239
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $25 = 0, $28 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 441
 STACKTOP = STACKTOP + 16 | 0; //@line 442
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 442
 $3 = sp; //@line 443
 $4 = HEAP32[$0 >> 2] | 0; //@line 444
 $5 = $1 + 12 | 0; //@line 445
 $6 = HEAP32[$5 >> 2] | 0; //@line 446
 do {
  if (!$6) {
   $16 = 0; //@line 450
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 453
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 454
   FUNCTION_TABLE_vii[$9 & 15]($3, $1); //@line 455
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 548; //@line 458
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 460
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 462
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 464
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 466
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 468
    sp = STACKTOP; //@line 469
    STACKTOP = sp; //@line 470
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 472
    $16 = HEAP32[$5 >> 2] | 0; //@line 474
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 479
 HEAP32[$15 >> 2] = $16; //@line 480
 $AsyncCtx12 = _emscripten_alloc_async_context(28, sp) | 0; //@line 481
 $17 = _equeue_alloc($4, 16) | 0; //@line 482
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 549; //@line 485
  HEAP32[$AsyncCtx12 + 4 >> 2] = $3; //@line 487
  HEAP32[$AsyncCtx12 + 8 >> 2] = $15; //@line 489
  HEAP32[$AsyncCtx12 + 12 >> 2] = $15; //@line 491
  HEAP32[$AsyncCtx12 + 16 >> 2] = $2; //@line 493
  HEAP32[$AsyncCtx12 + 20 >> 2] = $4; //@line 495
  HEAP32[$AsyncCtx12 + 24 >> 2] = $1; //@line 497
  sp = STACKTOP; //@line 498
  STACKTOP = sp; //@line 499
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 501
 do {
  if (!$17) {
   $$0$i = 0; //@line 505
  } else {
   $25 = HEAP32[$15 >> 2] | 0; //@line 507
   do {
    if (!$25) {
     $37 = 0; //@line 511
    } else {
     $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 514
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 515
     FUNCTION_TABLE_vii[$28 & 15]($17, $3); //@line 516
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 550; //@line 519
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 521
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 523
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 525
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 527
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 529
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 531
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 533
      sp = STACKTOP; //@line 534
      STACKTOP = sp; //@line 535
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 537
      $37 = HEAP32[$15 >> 2] | 0; //@line 539
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $37; //@line 545
   _equeue_event_delay($17, $2); //@line 546
   _equeue_event_dtor($17, 268); //@line 547
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 548
   $38 = _equeue_post($4, 269, $17) | 0; //@line 549
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 551; //@line 552
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 554
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 556
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 558
    sp = STACKTOP; //@line 559
    STACKTOP = sp; //@line 560
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 562
    $$0$i = $38; //@line 563
    break;
   }
  }
 } while (0);
 $42 = $1 + 16 | 0; //@line 568
 HEAP32[$42 >> 2] = $$0$i; //@line 569
 $43 = HEAP32[$15 >> 2] | 0; //@line 570
 do {
  if (!$43) {
   $49 = $$0$i; //@line 574
  } else {
   $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 577
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 578
   FUNCTION_TABLE_vi[$46 & 1023]($3); //@line 579
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 552; //@line 582
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 584
    sp = STACKTOP; //@line 585
    STACKTOP = sp; //@line 586
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 588
    $49 = HEAP32[$42 >> 2] | 0; //@line 590
    break;
   }
  }
 } while (0);
 if ($49 | 0) {
  STACKTOP = sp; //@line 597
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(4, sp) | 0; //@line 599
 _mbed_assert_internal(13623, 13641, 57); //@line 600
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 553; //@line 603
  sp = STACKTOP; //@line 604
  STACKTOP = sp; //@line 605
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 607
 STACKTOP = sp; //@line 608
 return;
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $63 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $90 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29816
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29818
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29820
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $104 = HEAP32[$2 >> 2] | 0; //@line 29826
  $105 = $104 + 48 | 0; //@line 29827
  $106 = $105; //@line 29828
  $107 = $106; //@line 29829
  $108 = HEAP32[$107 >> 2] | 0; //@line 29830
  $109 = $106 + 4 | 0; //@line 29831
  $110 = $109; //@line 29832
  $111 = HEAP32[$110 >> 2] | 0; //@line 29833
  $112 = ___async_retval; //@line 29834
  $113 = $112; //@line 29835
  $114 = $113; //@line 29836
  HEAP32[$114 >> 2] = $108; //@line 29837
  $115 = $113 + 4 | 0; //@line 29838
  $116 = $115; //@line 29839
  HEAP32[$116 >> 2] = $111; //@line 29840
  return;
 }
 $10 = $4 + 32 | 0; //@line 29843
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 29848
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29849
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 29851
 do {
  if (($17 | 0) == 1e6) {
   $96 = $15; //@line 29855
   $97 = 0; //@line 29855
  } else {
   $20 = HEAP8[$4 + 57 >> 0] | 0; //@line 29858
   $22 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 29860
   $23 = tempRet0; //@line 29861
   if (!($20 << 24 >> 24)) {
    $57 = ___udivdi3($22 | 0, $23 | 0, $17 | 0, 0) | 0; //@line 29863
    $58 = tempRet0; //@line 29864
    $59 = ___muldi3($57 | 0, $58 | 0, $17 | 0, 0) | 0; //@line 29865
    $61 = _i64Subtract($22 | 0, $23 | 0, $59 | 0, tempRet0 | 0) | 0; //@line 29867
    $63 = $4 + 40 | 0; //@line 29869
    $64 = $63; //@line 29870
    $70 = _i64Add($61 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 29876
    $71 = tempRet0; //@line 29877
    $72 = $63; //@line 29878
    HEAP32[$72 >> 2] = $70; //@line 29880
    HEAP32[$72 + 4 >> 2] = $71; //@line 29883
    if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $17 >>> 0) {
     $96 = $57; //@line 29890
     $97 = $58; //@line 29890
     break;
    }
    $81 = _i64Add($57 | 0, $58 | 0, 1, 0) | 0; //@line 29893
    $82 = tempRet0; //@line 29894
    $83 = _i64Subtract($70 | 0, $71 | 0, $17 | 0, 0) | 0; //@line 29895
    $85 = $63; //@line 29897
    HEAP32[$85 >> 2] = $83; //@line 29899
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 29902
    $96 = $81; //@line 29903
    $97 = $82; //@line 29903
    break;
   } else {
    $24 = $20 & 255; //@line 29906
    $25 = _bitshift64Lshr($22 | 0, $23 | 0, $24 | 0) | 0; //@line 29907
    $26 = tempRet0; //@line 29908
    $27 = _bitshift64Shl($25 | 0, $26 | 0, $24 | 0) | 0; //@line 29909
    $29 = _i64Subtract($22 | 0, $23 | 0, $27 | 0, tempRet0 | 0) | 0; //@line 29911
    $31 = $4 + 40 | 0; //@line 29913
    $32 = $31; //@line 29914
    $38 = _i64Add(HEAP32[$32 >> 2] | 0, HEAP32[$32 + 4 >> 2] | 0, $29 | 0, tempRet0 | 0) | 0; //@line 29920
    $39 = tempRet0; //@line 29921
    $40 = $31; //@line 29922
    HEAP32[$40 >> 2] = $38; //@line 29924
    HEAP32[$40 + 4 >> 2] = $39; //@line 29927
    if ($39 >>> 0 < 0 | ($39 | 0) == 0 & $38 >>> 0 < $17 >>> 0) {
     $96 = $25; //@line 29934
     $97 = $26; //@line 29934
     break;
    }
    $49 = _i64Add($25 | 0, $26 | 0, 1, 0) | 0; //@line 29937
    $50 = tempRet0; //@line 29938
    $51 = _i64Subtract($38 | 0, $39 | 0, $17 | 0, 0) | 0; //@line 29939
    $53 = $31; //@line 29941
    HEAP32[$53 >> 2] = $51; //@line 29943
    HEAP32[$53 + 4 >> 2] = tempRet0; //@line 29946
    $96 = $49; //@line 29947
    $97 = $50; //@line 29947
    break;
   }
  }
 } while (0);
 $89 = $4 + 48 | 0; //@line 29952
 $90 = $89; //@line 29953
 $98 = _i64Add(HEAP32[$90 >> 2] | 0, HEAP32[$90 + 4 >> 2] | 0, $96 | 0, $97 | 0) | 0; //@line 29959
 $100 = $89; //@line 29961
 HEAP32[$100 >> 2] = $98; //@line 29963
 HEAP32[$100 + 4 >> 2] = tempRet0; //@line 29966
 $104 = HEAP32[$2 >> 2] | 0; //@line 29967
 $105 = $104 + 48 | 0; //@line 29968
 $106 = $105; //@line 29969
 $107 = $106; //@line 29970
 $108 = HEAP32[$107 >> 2] | 0; //@line 29971
 $109 = $106 + 4 | 0; //@line 29972
 $110 = $109; //@line 29973
 $111 = HEAP32[$110 >> 2] | 0; //@line 29974
 $112 = ___async_retval; //@line 29975
 $113 = $112; //@line 29976
 $114 = $113; //@line 29977
 HEAP32[$114 >> 2] = $108; //@line 29978
 $115 = $113 + 4 | 0; //@line 29979
 $116 = $115; //@line 29980
 HEAP32[$116 >> 2] = $111; //@line 29981
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $10 = 0, $30 = 0, $36 = 0, $44 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 829
 STACKTOP = STACKTOP + 32 | 0; //@line 830
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 830
 $5 = sp; //@line 831
 HEAP8[$0 + 689 >> 0] = $1; //@line 834
 $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 837
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 838
 FUNCTION_TABLE_vii[$10 & 15]($0, $2); //@line 839
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 57; //@line 842
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 844
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 846
  HEAP16[$AsyncCtx + 12 >> 1] = $3; //@line 848
  HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 850
  sp = STACKTOP; //@line 851
  STACKTOP = sp; //@line 852
  return 0; //@line 852
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 854
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 855
 $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 856
 _wait_ms(1); //@line 857
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 58; //@line 860
  HEAP32[$AsyncCtx19 + 4 >> 2] = $5; //@line 862
  HEAP16[$AsyncCtx19 + 8 >> 1] = $3; //@line 864
  HEAP32[$AsyncCtx19 + 12 >> 2] = $4; //@line 866
  HEAP32[$AsyncCtx19 + 16 >> 2] = $0; //@line 868
  sp = STACKTOP; //@line 869
  STACKTOP = sp; //@line 870
  return 0; //@line 870
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 872
 $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 873
 __ZN4mbed5TimerC2Ev($5); //@line 874
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 59; //@line 877
  HEAP32[$AsyncCtx6 + 4 >> 2] = $5; //@line 879
  HEAP16[$AsyncCtx6 + 8 >> 1] = $3; //@line 881
  HEAP32[$AsyncCtx6 + 12 >> 2] = $4; //@line 883
  HEAP32[$AsyncCtx6 + 16 >> 2] = $0; //@line 885
  HEAP32[$AsyncCtx6 + 20 >> 2] = $5; //@line 887
  sp = STACKTOP; //@line 888
  STACKTOP = sp; //@line 889
  return 0; //@line 889
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 891
 $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 892
 __ZN4mbed5Timer5startEv($5); //@line 893
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 60; //@line 896
  HEAP16[$AsyncCtx9 + 4 >> 1] = $3; //@line 898
  HEAP32[$AsyncCtx9 + 8 >> 2] = $5; //@line 900
  HEAP32[$AsyncCtx9 + 12 >> 2] = $4; //@line 902
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 904
  HEAP32[$AsyncCtx9 + 20 >> 2] = $5; //@line 906
  sp = STACKTOP; //@line 907
  STACKTOP = sp; //@line 908
  return 0; //@line 908
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 910
 L13 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 914
   $30 = __ZN4mbed5Timer7read_msEv($5) | 0; //@line 915
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 61; //@line 918
    HEAP32[$AsyncCtx15 + 4 >> 2] = $4; //@line 920
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 922
    HEAP32[$AsyncCtx15 + 12 >> 2] = $5; //@line 924
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 926
    sp = STACKTOP; //@line 927
    STACKTOP = sp; //@line 928
    return 0; //@line 928
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 930
    $$0$off0 = ($30 | 0) >= ($4 | 0); //@line 932
    break;
   }
  } else {
   while (1) {
    $AsyncCtx12 = _emscripten_alloc_async_context(20, sp) | 0; //@line 937
    $36 = __ZN4mbed5Timer7read_msEv($5) | 0; //@line 938
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 943
    if (($36 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 946
     break L13;
    }
   }
   HEAP32[$AsyncCtx12 >> 2] = 62; //@line 950
   HEAP32[$AsyncCtx12 + 4 >> 2] = $4; //@line 952
   HEAP32[$AsyncCtx12 + 8 >> 2] = $5; //@line 954
   HEAP32[$AsyncCtx12 + 12 >> 2] = $0; //@line 956
   HEAP32[$AsyncCtx12 + 16 >> 2] = $5; //@line 958
   sp = STACKTOP; //@line 959
   STACKTOP = sp; //@line 960
   return 0; //@line 960
  }
 } while (0);
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 965
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 966
 FUNCTION_TABLE_vi[$44 & 1023]($0); //@line 967
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 63; //@line 970
  HEAP32[$AsyncCtx3 + 4 >> 2] = $5; //@line 972
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 974
  HEAP8[$AsyncCtx3 + 12 >> 0] = $$0$off0 & 1; //@line 977
  sp = STACKTOP; //@line 978
  STACKTOP = sp; //@line 979
  return 0; //@line 979
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 981
  __ZN4mbed5TimerD2Ev($5); //@line 982
  STACKTOP = sp; //@line 983
  return $$0$off0 | 0; //@line 983
 }
 return 0; //@line 985
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $23 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $44 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 14290
 STACKTOP = STACKTOP + 16 | 0; //@line 14291
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14291
 $vararg_buffer1 = sp + 8 | 0; //@line 14292
 $vararg_buffer = sp; //@line 14293
 $1 = $0 + 1699 | 0; //@line 14294
 if ((HEAPU8[$1 >> 0] | 0) > (HEAPU8[$0 + 1698 >> 0] | 0)) {
  if ((HEAP32[$0 + 2380 >> 2] | 0) != 2) {
   STACKTOP = sp; //@line 14304
   return;
  }
  HEAP32[$0 + 2056 >> 2] = 1; //@line 14307
  $10 = $0 + 1996 | 0; //@line 14308
  $11 = $0 + 2008 | 0; //@line 14309
  $12 = HEAP32[$11 >> 2] | 0; //@line 14310
  do {
   if (!$12) {
    $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14314
    _mbed_assert_internal(14946, 14951, 528); //@line 14315
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 425; //@line 14318
     HEAP32[$AsyncCtx20 + 4 >> 2] = $11; //@line 14320
     HEAP32[$AsyncCtx20 + 8 >> 2] = $10; //@line 14322
     sp = STACKTOP; //@line 14323
     STACKTOP = sp; //@line 14324
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 14326
     $17 = HEAP32[$11 >> 2] | 0; //@line 14328
     break;
    }
   } else {
    $17 = $12; //@line 14332
   }
  } while (0);
  $16 = HEAP32[$17 >> 2] | 0; //@line 14335
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14336
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 14337
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 426; //@line 14340
   sp = STACKTOP; //@line 14341
   STACKTOP = sp; //@line 14342
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14344
  STACKTOP = sp; //@line 14345
  return;
 }
 _mbed_tracef(16, 12866, 13237, $vararg_buffer); //@line 14347
 $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14349
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 14350
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 427; //@line 14353
  HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 14355
  HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 14357
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer1; //@line 14359
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 14361
  sp = STACKTOP; //@line 14362
  STACKTOP = sp; //@line 14363
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14365
 $23 = HEAP8[$1 >> 0] | 0; //@line 14366
 if (!($23 & 1)) {
  $34 = $23; //@line 14370
 } else {
  if (!(HEAP8[$0 + 1936 >> 0] | 0)) {
   $34 = $23; //@line 14376
  } else {
   _mbed_tracef(16, 12866, 13271, $vararg_buffer1); //@line 14378
   $30 = $0 + 1877 | 0; //@line 14380
   HEAP8[$30 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0 + 4 | 0, HEAP8[$30 >> 0] | 0) | 0; //@line 14383
   $34 = HEAP8[$1 >> 0] | 0; //@line 14385
  }
 }
 $33 = $0 + 2063 | 0; //@line 14388
 HEAP8[$33 >> 0] = $34; //@line 14389
 $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14390
 $35 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 14391
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 428; //@line 14394
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 14396
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 14398
  HEAP32[$AsyncCtx9 + 12 >> 2] = $33; //@line 14400
  sp = STACKTOP; //@line 14401
  STACKTOP = sp; //@line 14402
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14404
 do {
  if ($35 | 0) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 14409
   HEAP8[$0 + 1177 >> 0] = 0; //@line 14411
   HEAP8[$0 + 2062 >> 0] = 0; //@line 14413
   HEAP8[$33 >> 0] = HEAP8[$1 >> 0] | 0; //@line 14415
   $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14416
   $44 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 14417
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 429; //@line 14420
    HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 14422
    sp = STACKTOP; //@line 14423
    STACKTOP = sp; //@line 14424
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 14426
   if ($44 | 0) {
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14429
    _mbed_assert_internal(13085, 13111, 958); //@line 14430
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 430; //@line 14433
     HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 14435
     sp = STACKTOP; //@line 14436
     STACKTOP = sp; //@line 14437
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 14439
     break;
    }
   }
  }
 } while (0);
 HEAP8[$1 >> 0] = (HEAP8[$1 >> 0] | 0) + 1 << 24 >> 24; //@line 14447
 STACKTOP = sp; //@line 14448
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_107($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26222
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26226
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26228
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26232
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26234
 $11 = $10 + 32 | 0; //@line 26235
 $12 = $10 + 44 | 0; //@line 26236
 $13 = HEAP32[$12 >> 2] | 0; //@line 26237
 if (!$13) {
  HEAP32[___async_retval >> 2] = 0; //@line 26241
  return;
 }
 $15 = $6 + 2532 | 0; //@line 26244
 if (($15 | 0) == ($11 | 0)) {
  $36 = HEAP32[$13 + 4 >> 2] | 0; //@line 26248
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 26249
  FUNCTION_TABLE_vii[$36 & 15]($4, $11); //@line 26250
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 26253
   $37 = $ReallocAsyncCtx7 + 4 | 0; //@line 26254
   HEAP32[$37 >> 2] = $12; //@line 26255
   $38 = $ReallocAsyncCtx7 + 8 | 0; //@line 26256
   HEAP32[$38 >> 2] = $6; //@line 26257
   $39 = $ReallocAsyncCtx7 + 12 | 0; //@line 26258
   HEAP32[$39 >> 2] = $4; //@line 26259
   sp = STACKTOP; //@line 26260
   return;
  }
  ___async_unwind = 0; //@line 26263
  HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 26264
  $37 = $ReallocAsyncCtx7 + 4 | 0; //@line 26265
  HEAP32[$37 >> 2] = $12; //@line 26266
  $38 = $ReallocAsyncCtx7 + 8 | 0; //@line 26267
  HEAP32[$38 >> 2] = $6; //@line 26268
  $39 = $ReallocAsyncCtx7 + 12 | 0; //@line 26269
  HEAP32[$39 >> 2] = $4; //@line 26270
  sp = STACKTOP; //@line 26271
  return;
 }
 $17 = $6 + 2544 | 0; //@line 26274
 $18 = HEAP32[$17 >> 2] | 0; //@line 26275
 if (!$18) {
  $29 = HEAP32[$13 + 4 >> 2] | 0; //@line 26279
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 26280
  FUNCTION_TABLE_vii[$29 & 15]($15, $11); //@line 26281
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 26284
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 26285
   HEAP32[$30 >> 2] = $12; //@line 26286
   $31 = $ReallocAsyncCtx6 + 8 | 0; //@line 26287
   HEAP32[$31 >> 2] = $17; //@line 26288
   $32 = $ReallocAsyncCtx6 + 12 | 0; //@line 26289
   HEAP32[$32 >> 2] = $6; //@line 26290
   $33 = $ReallocAsyncCtx6 + 16 | 0; //@line 26291
   HEAP32[$33 >> 2] = $4; //@line 26292
   $34 = $ReallocAsyncCtx6 + 20 | 0; //@line 26293
   HEAP32[$34 >> 2] = $11; //@line 26294
   sp = STACKTOP; //@line 26295
   return;
  }
  ___async_unwind = 0; //@line 26298
  HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 26299
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 26300
  HEAP32[$30 >> 2] = $12; //@line 26301
  $31 = $ReallocAsyncCtx6 + 8 | 0; //@line 26302
  HEAP32[$31 >> 2] = $17; //@line 26303
  $32 = $ReallocAsyncCtx6 + 12 | 0; //@line 26304
  HEAP32[$32 >> 2] = $6; //@line 26305
  $33 = $ReallocAsyncCtx6 + 16 | 0; //@line 26306
  HEAP32[$33 >> 2] = $4; //@line 26307
  $34 = $ReallocAsyncCtx6 + 20 | 0; //@line 26308
  HEAP32[$34 >> 2] = $11; //@line 26309
  sp = STACKTOP; //@line 26310
  return;
 } else {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 26314
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 26315
  FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 26316
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 26319
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 26320
   HEAP32[$22 >> 2] = $12; //@line 26321
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 26322
   HEAP32[$23 >> 2] = $17; //@line 26323
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 26324
   HEAP32[$24 >> 2] = $6; //@line 26325
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 26326
   HEAP32[$25 >> 2] = $15; //@line 26327
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 26328
   HEAP32[$26 >> 2] = $11; //@line 26329
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 26330
   HEAP32[$27 >> 2] = $4; //@line 26331
   sp = STACKTOP; //@line 26332
   return;
  }
  ___async_unwind = 0; //@line 26335
  HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 26336
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 26337
  HEAP32[$22 >> 2] = $12; //@line 26338
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 26339
  HEAP32[$23 >> 2] = $17; //@line 26340
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 26341
  HEAP32[$24 >> 2] = $6; //@line 26342
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 26343
  HEAP32[$25 >> 2] = $15; //@line 26344
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 26345
  HEAP32[$26 >> 2] = $11; //@line 26346
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 26347
  HEAP32[$27 >> 2] = $4; //@line 26348
  sp = STACKTOP; //@line 26349
  return;
 }
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6442
 STACKTOP = STACKTOP + 32 | 0; //@line 6443
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6443
 $2 = sp + 8 | 0; //@line 6445
 $3 = $0 + 2496 | 0; //@line 6446
 switch (HEAP32[$3 >> 2] | 0) {
 case 3:
  {
   HEAP32[$3 >> 2] = 1; //@line 6450
   _mbed_tracef(16, 12187, 12353, sp); //@line 6451
   $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6452
   $5 = __ZN7LoRaMac4joinEb($0, 1) | 0; //@line 6453
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 219; //@line 6456
    HEAP32[$AsyncCtx10 + 4 >> 2] = $1; //@line 6458
    sp = STACKTOP; //@line 6459
    STACKTOP = sp; //@line 6460
    return;
   }
   _emscripten_free_async_context($AsyncCtx10 | 0); //@line 6462
   HEAP32[$1 >> 2] = $5; //@line 6463
   STACKTOP = sp; //@line 6464
   return;
  }
 case 4:
  {
   HEAP32[$3 >> 2] = 1; //@line 6468
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6469
   $7 = __ZN7LoRaMac24continue_joining_processEv($0) | 0; //@line 6470
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 220; //@line 6473
    HEAP32[$AsyncCtx6 + 4 >> 2] = $2; //@line 6475
    HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 6477
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 6479
    sp = STACKTOP; //@line 6480
    STACKTOP = sp; //@line 6481
    return;
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 6483
   if ($7) {
    STACKTOP = sp; //@line 6485
    return;
   }
   $11 = $0 + 2512 | 0; //@line 6487
   $12 = HEAP32[$11 >> 2] | 0; //@line 6488
   do {
    if ($12 | 0) {
     $16 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6494
     $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 6496
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6497
     FUNCTION_TABLE_vii[$18 & 15]($2, $0 + 2500 | 0); //@line 6498
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 221; //@line 6501
      HEAP32[$AsyncCtx + 4 >> 2] = $11; //@line 6503
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6505
      HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 6507
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6509
      HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 6511
      sp = STACKTOP; //@line 6512
      STACKTOP = sp; //@line 6513
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 6515
     $24 = $2 + 12 | 0; //@line 6517
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2]; //@line 6518
     $AsyncCtx13 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6519
     $25 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($16, $2, 10) | 0; //@line 6520
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 222; //@line 6523
      HEAP32[$AsyncCtx13 + 4 >> 2] = $24; //@line 6525
      HEAP32[$AsyncCtx13 + 8 >> 2] = $2; //@line 6527
      HEAP32[$AsyncCtx13 + 12 >> 2] = $3; //@line 6529
      sp = STACKTOP; //@line 6530
      STACKTOP = sp; //@line 6531
      return;
     }
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6533
     $29 = HEAP32[$24 >> 2] | 0; //@line 6534
     do {
      if ($29 | 0) {
       $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 6539
       $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6540
       FUNCTION_TABLE_vi[$32 & 1023]($2); //@line 6541
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 223; //@line 6544
        HEAP32[$AsyncCtx2 + 4 >> 2] = $25; //@line 6546
        HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 6548
        HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 6550
        sp = STACKTOP; //@line 6551
        STACKTOP = sp; //@line 6552
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6554
        break;
       }
      }
     } while (0);
     if (!$25) {
      $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6561
      _mbed_assert_internal(12080, 12089, 775); //@line 6562
      if (___async) {
       HEAP32[$AsyncCtx17 >> 2] = 224; //@line 6565
       HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 6567
       HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 6569
       sp = STACKTOP; //@line 6570
       STACKTOP = sp; //@line 6571
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6573
       break;
      }
     }
    }
   } while (0);
   HEAP32[$3 >> 2] = 2; //@line 6579
   STACKTOP = sp; //@line 6580
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 6584
   return;
  }
 }
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $13 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $27 = 0, $28 = 0, $35 = 0, $39 = 0, $50 = 0, $56 = 0, $73 = 0, $74 = 0, $75 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11924
 $13 = HEAP8[$1 + ($3 + 8 & 255) >> 0] | 0; //@line 11928
 $17 = $3 + 9 & 255; //@line 11932
 $18 = ($2 & 65535) + 252 - $17 | 0; //@line 11933
 $19 = $18 & 255; //@line 11934
 HEAP8[$0 + 2025 >> 0] = $13; //@line 11936
 $22 = $3 << 24 >> 24 == 0; //@line 11938
 if ($13 << 24 >> 24) {
  do {
   if (!$22) {
    $50 = $0 + 476 | 0; //@line 11942
    $AsyncCtx7 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11948
    $56 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($50, $1, 8, $17 + 255 & 255, $9, $0 + 2084 | 0, $0 + 1876 | 0, $0 + 4 | 0) | 0; //@line 11949
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 383; //@line 11952
     HEAP32[$AsyncCtx7 + 4 >> 2] = $50; //@line 11954
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 11956
     HEAP32[$AsyncCtx7 + 12 >> 2] = $1; //@line 11958
     HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 11960
     HEAP32[$AsyncCtx7 + 20 >> 2] = $18; //@line 11962
     HEAP32[$AsyncCtx7 + 24 >> 2] = $5; //@line 11964
     HEAP32[$AsyncCtx7 + 28 >> 2] = $6; //@line 11966
     HEAP32[$AsyncCtx7 + 32 >> 2] = $7; //@line 11968
     sp = STACKTOP; //@line 11969
     return;
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11972
    if (!$56) {
     if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($50) | 0)) {
      break;
     }
     HEAP32[$0 + 2076 >> 2] = 4; //@line 11980
     HEAP8[$0 + 2080 >> 0] = 1; //@line 11982
     __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($50); //@line 11983
     break;
    } else {
     HEAP32[$0 + 2020 >> 2] = 1; //@line 11987
     return;
    }
   }
  } while (0);
  $73 = $18 & 255; //@line 11995
  $74 = $0 + 1442 | 0; //@line 11996
  $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11997
  $75 = __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $1 + $17 | 0, $73, $5, 128, $6, 1, $7, $74) | 0; //@line 11998
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 384; //@line 12001
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12003
   HEAP32[$AsyncCtx + 8 >> 2] = $74; //@line 12005
   HEAP16[$AsyncCtx + 12 >> 1] = $73; //@line 12007
   sp = STACKTOP; //@line 12008
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12011
  if (!$75) {
   HEAP32[$0 + 2028 >> 2] = $74; //@line 12015
   HEAP16[$0 + 2032 >> 1] = $73; //@line 12017
   HEAP8[$0 + 2034 >> 0] = 1; //@line 12019
   return;
  } else {
   HEAP32[$0 + 2020 >> 2] = 13; //@line 12023
   return;
  }
 }
 if (!$22) {
  HEAP8[$0 + 2012 >> 0] = 0; //@line 12029
  HEAP8[$0 + 2062 >> 0] = 0; //@line 12031
  HEAP8[$0 + 2044 >> 0] = 0; //@line 12033
  return;
 }
 $27 = $0 + 1442 | 0; //@line 12040
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12041
 $28 = __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $1 + $17 | 0, $18 & 255, $4, 128, $6, 1, $7, $27) | 0; //@line 12042
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 381; //@line 12045
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12047
  HEAP32[$AsyncCtx3 + 8 >> 2] = $27; //@line 12049
  HEAP8[$AsyncCtx3 + 12 >> 0] = $19; //@line 12051
  HEAP8[$AsyncCtx3 + 13 >> 0] = $9; //@line 12053
  sp = STACKTOP; //@line 12054
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12057
 if ($28 | 0) {
  HEAP32[$0 + 2020 >> 2] = 13; //@line 12061
 }
 $35 = $0 + 476 | 0; //@line 12063
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12067
 $39 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($35, $27, 0, $19, $9, $0 + 2084 | 0, $0 + 1876 | 0, $0 + 4 | 0) | 0; //@line 12068
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 382; //@line 12071
  HEAP32[$AsyncCtx11 + 4 >> 2] = $35; //@line 12073
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 12075
  sp = STACKTOP; //@line 12076
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12079
 if ($39 | 0) {
  HEAP32[$0 + 2020 >> 2] = 1; //@line 12083
  return;
 }
 if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($35) | 0)) {
  return;
 }
 HEAP32[$0 + 2076 >> 2] = 4; //@line 12091
 HEAP8[$0 + 2080 >> 0] = 1; //@line 12093
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($35); //@line 12094
 return;
}
function _initialize__async_cb_22($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19845
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19847
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19851
 $10 = HEAP32[(HEAP32[$0 + 16 >> 2] | 0) + 4 >> 2] | 0; //@line 19855
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 19859
  _mbed_assert_internal(14438, 14440, 55); //@line 19860
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 606; //@line 19863
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 19864
   HEAP32[$12 >> 2] = $2; //@line 19865
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 19866
   HEAP32[$13 >> 2] = $4; //@line 19867
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 19868
   HEAP32[$14 >> 2] = 1e6; //@line 19869
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 19870
   HEAP8[$15 >> 0] = 0; //@line 19871
   $16 = $ReallocAsyncCtx6 + 20 | 0; //@line 19872
   HEAP32[$16 >> 2] = $6; //@line 19873
   sp = STACKTOP; //@line 19874
   return;
  }
  ___async_unwind = 0; //@line 19877
  HEAP32[$ReallocAsyncCtx6 >> 2] = 606; //@line 19878
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 19879
  HEAP32[$12 >> 2] = $2; //@line 19880
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 19881
  HEAP32[$13 >> 2] = $4; //@line 19882
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 19883
  HEAP32[$14 >> 2] = 1e6; //@line 19884
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 19885
  HEAP8[$15 >> 0] = 0; //@line 19886
  $16 = $ReallocAsyncCtx6 + 20 | 0; //@line 19887
  HEAP32[$16 >> 2] = $6; //@line 19888
  sp = STACKTOP; //@line 19889
  return;
 } else {
  $18 = 7 << $10 + -4; //@line 19893
  $19 = ___muldi3($18 | 0, 0, 1e6, 0) | 0; //@line 19894
  $20 = tempRet0; //@line 19895
  $21 = _i64Add(1e6, 0, -1, -1) | 0; //@line 19896
  $23 = _i64Add($21 | 0, tempRet0 | 0, $19 | 0, $20 | 0) | 0; //@line 19898
  $25 = ___udivdi3($23 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 19900
  $26 = tempRet0; //@line 19901
  $27 = HEAP32[$2 >> 2] | 0; //@line 19902
  HEAP32[$27 >> 2] = 0; //@line 19903
  HEAP32[$27 + 4 >> 2] = 0; //@line 19905
  $31 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 19908
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 19909
  $32 = FUNCTION_TABLE_i[$31 & 7]() | 0; //@line 19910
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 19913
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 19914
   HEAP32[$33 >> 2] = $2; //@line 19915
   $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 19916
   HEAP32[$34 >> 2] = 1e6; //@line 19917
   $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 19918
   HEAP8[$35 >> 0] = 0; //@line 19919
   $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 19920
   HEAP32[$36 >> 2] = $10; //@line 19921
   $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 19922
   HEAP32[$37 >> 2] = $18; //@line 19923
   $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 19924
   $39 = $38; //@line 19925
   $40 = $39; //@line 19926
   HEAP32[$40 >> 2] = $25; //@line 19927
   $41 = $39 + 4 | 0; //@line 19928
   $42 = $41; //@line 19929
   HEAP32[$42 >> 2] = $26; //@line 19930
   $43 = $ReallocAsyncCtx3 + 32 | 0; //@line 19931
   HEAP32[$43 >> 2] = $6; //@line 19932
   $44 = $ReallocAsyncCtx3 + 36 | 0; //@line 19933
   HEAP32[$44 >> 2] = $4; //@line 19934
   sp = STACKTOP; //@line 19935
   return;
  }
  HEAP32[___async_retval >> 2] = $32; //@line 19939
  ___async_unwind = 0; //@line 19940
  HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 19941
  $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 19942
  HEAP32[$33 >> 2] = $2; //@line 19943
  $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 19944
  HEAP32[$34 >> 2] = 1e6; //@line 19945
  $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 19946
  HEAP8[$35 >> 0] = 0; //@line 19947
  $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 19948
  HEAP32[$36 >> 2] = $10; //@line 19949
  $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 19950
  HEAP32[$37 >> 2] = $18; //@line 19951
  $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 19952
  $39 = $38; //@line 19953
  $40 = $39; //@line 19954
  HEAP32[$40 >> 2] = $25; //@line 19955
  $41 = $39 + 4 | 0; //@line 19956
  $42 = $41; //@line 19957
  HEAP32[$42 >> 2] = $26; //@line 19958
  $43 = $ReallocAsyncCtx3 + 32 | 0; //@line 19959
  HEAP32[$43 >> 2] = $6; //@line 19960
  $44 = $ReallocAsyncCtx3 + 36 | 0; //@line 19961
  HEAP32[$44 >> 2] = $4; //@line 19962
  sp = STACKTOP; //@line 19963
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_36($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21030
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21034
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21036
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21038
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21040
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21042
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21044
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21046
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21048
 $19 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21049
 if (!$19) {
  $31 = $10 + 12 | 0; //@line 21053
  HEAP32[$10 >> 2] = 450; //@line 21054
  HEAP32[$10 + 4 >> 2] = 0; //@line 21056
  HEAP32[$10 + 8 >> 2] = $4; //@line 21058
  HEAP32[$31 >> 2] = 860; //@line 21059
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 21060
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($8, $4 + 1816 | 0, $10); //@line 21061
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 451; //@line 21064
   $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 21065
   HEAP32[$32 >> 2] = $4; //@line 21066
   $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 21067
   HEAP32[$33 >> 2] = $16; //@line 21068
   $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 21069
   HEAP32[$34 >> 2] = $8; //@line 21070
   $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 21071
   HEAP32[$35 >> 2] = $6; //@line 21072
   $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 21073
   HEAP32[$36 >> 2] = $12; //@line 21074
   $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 21075
   HEAP32[$37 >> 2] = $14; //@line 21076
   $38 = $ReallocAsyncCtx7 + 28 | 0; //@line 21077
   HEAP32[$38 >> 2] = $31; //@line 21078
   $39 = $ReallocAsyncCtx7 + 32 | 0; //@line 21079
   HEAP32[$39 >> 2] = $10; //@line 21080
   sp = STACKTOP; //@line 21081
   return;
  }
  ___async_unwind = 0; //@line 21084
  HEAP32[$ReallocAsyncCtx7 >> 2] = 451; //@line 21085
  $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 21086
  HEAP32[$32 >> 2] = $4; //@line 21087
  $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 21088
  HEAP32[$33 >> 2] = $16; //@line 21089
  $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 21090
  HEAP32[$34 >> 2] = $8; //@line 21091
  $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 21092
  HEAP32[$35 >> 2] = $6; //@line 21093
  $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 21094
  HEAP32[$36 >> 2] = $12; //@line 21095
  $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 21096
  HEAP32[$37 >> 2] = $14; //@line 21097
  $38 = $ReallocAsyncCtx7 + 28 | 0; //@line 21098
  HEAP32[$38 >> 2] = $31; //@line 21099
  $39 = $ReallocAsyncCtx7 + 32 | 0; //@line 21100
  HEAP32[$39 >> 2] = $10; //@line 21101
  sp = STACKTOP; //@line 21102
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 21106
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 21107
  FUNCTION_TABLE_vi[$22 & 1023]($18); //@line 21108
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 449; //@line 21111
   $23 = $ReallocAsyncCtx + 4 | 0; //@line 21112
   HEAP32[$23 >> 2] = $4; //@line 21113
   $24 = $ReallocAsyncCtx + 8 | 0; //@line 21114
   HEAP32[$24 >> 2] = $6; //@line 21115
   $25 = $ReallocAsyncCtx + 12 | 0; //@line 21116
   HEAP32[$25 >> 2] = $8; //@line 21117
   $26 = $ReallocAsyncCtx + 16 | 0; //@line 21118
   HEAP32[$26 >> 2] = $10; //@line 21119
   $27 = $ReallocAsyncCtx + 20 | 0; //@line 21120
   HEAP32[$27 >> 2] = $12; //@line 21121
   $28 = $ReallocAsyncCtx + 24 | 0; //@line 21122
   HEAP32[$28 >> 2] = $14; //@line 21123
   $29 = $ReallocAsyncCtx + 28 | 0; //@line 21124
   HEAP32[$29 >> 2] = $16; //@line 21125
   sp = STACKTOP; //@line 21126
   return;
  }
  ___async_unwind = 0; //@line 21129
  HEAP32[$ReallocAsyncCtx >> 2] = 449; //@line 21130
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 21131
  HEAP32[$23 >> 2] = $4; //@line 21132
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 21133
  HEAP32[$24 >> 2] = $6; //@line 21134
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 21135
  HEAP32[$25 >> 2] = $8; //@line 21136
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 21137
  HEAP32[$26 >> 2] = $10; //@line 21138
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 21139
  HEAP32[$27 >> 2] = $12; //@line 21140
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 21141
  HEAP32[$28 >> 2] = $14; //@line 21142
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 21143
  HEAP32[$29 >> 2] = $16; //@line 21144
  sp = STACKTOP; //@line 21145
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_320($0) {
 $0 = $0 | 0;
 var $10 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 25773
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25775
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25777
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 25779
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 25781
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 25783
 if ((HEAP32[$2 + 2380 >> 2] | 0) != 2) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 25789
  __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 25790
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 396; //@line 25793
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 25794
   HEAP32[$23 >> 2] = $4; //@line 25795
   $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 25796
   HEAP32[$24 >> 2] = $2; //@line 25797
   $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 25798
   HEAP16[$25 >> 1] = $6; //@line 25799
   $26 = $ReallocAsyncCtx4 + 14 | 0; //@line 25800
   HEAP16[$26 >> 1] = $8; //@line 25801
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 25802
   HEAP8[$27 >> 0] = $10; //@line 25803
   sp = STACKTOP; //@line 25804
   return;
  }
  ___async_unwind = 0; //@line 25807
  HEAP32[$ReallocAsyncCtx4 >> 2] = 396; //@line 25808
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 25809
  HEAP32[$23 >> 2] = $4; //@line 25810
  $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 25811
  HEAP32[$24 >> 2] = $2; //@line 25812
  $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 25813
  HEAP16[$25 >> 1] = $6; //@line 25814
  $26 = $ReallocAsyncCtx4 + 14 | 0; //@line 25815
  HEAP16[$26 >> 1] = $8; //@line 25816
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 25817
  HEAP8[$27 >> 0] = $10; //@line 25818
  sp = STACKTOP; //@line 25819
  return;
 }
 if (!(HEAP8[$2 + 2377 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 25826
  __ZN7LoRaMac15open_rx2_windowEv($2); //@line 25827
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 395; //@line 25830
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 25831
   HEAP32[$17 >> 2] = $4; //@line 25832
   $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 25833
   HEAP32[$18 >> 2] = $2; //@line 25834
   $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 25835
   HEAP16[$19 >> 1] = $6; //@line 25836
   $20 = $ReallocAsyncCtx3 + 14 | 0; //@line 25837
   HEAP16[$20 >> 1] = $8; //@line 25838
   $21 = $ReallocAsyncCtx3 + 16 | 0; //@line 25839
   HEAP8[$21 >> 0] = $10; //@line 25840
   sp = STACKTOP; //@line 25841
   return;
  }
  ___async_unwind = 0; //@line 25844
  HEAP32[$ReallocAsyncCtx3 >> 2] = 395; //@line 25845
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 25846
  HEAP32[$17 >> 2] = $4; //@line 25847
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 25848
  HEAP32[$18 >> 2] = $2; //@line 25849
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 25850
  HEAP16[$19 >> 1] = $6; //@line 25851
  $20 = $ReallocAsyncCtx3 + 14 | 0; //@line 25852
  HEAP16[$20 >> 1] = $8; //@line 25853
  $21 = $ReallocAsyncCtx3 + 16 | 0; //@line 25854
  HEAP8[$21 >> 0] = $10; //@line 25855
  sp = STACKTOP; //@line 25856
  return;
 }
 $trunc = (HEAPU8[$4 >> 0] | 0) >>> 5; //@line 25860
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$2 + 2376 >> 0] | 0) {
    HEAP8[$2 + 2084 >> 0] = 0; //@line 25869
    return;
   }
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25872
   __ZN7LoRaMac24handle_join_accept_frameEPKht($2, $4, $6); //@line 25873
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 397; //@line 25876
    $33 = $ReallocAsyncCtx2 + 4 | 0; //@line 25877
    HEAP32[$33 >> 2] = $2; //@line 25878
    sp = STACKTOP; //@line 25879
    return;
   }
   ___async_unwind = 0; //@line 25882
   HEAP32[$ReallocAsyncCtx2 >> 2] = 397; //@line 25883
   $33 = $ReallocAsyncCtx2 + 4 | 0; //@line 25884
   HEAP32[$33 >> 2] = $2; //@line 25885
   sp = STACKTOP; //@line 25886
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25891
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($2, $4, $6, 1, $trunc, $8, $10); //@line 25892
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 398; //@line 25895
    sp = STACKTOP; //@line 25896
    return;
   }
   ___async_unwind = 0; //@line 25899
   HEAP32[$ReallocAsyncCtx >> 2] = 398; //@line 25900
   sp = STACKTOP; //@line 25901
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_319($0) {
 $0 = $0 | 0;
 var $10 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 25631
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25633
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25635
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 25637
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 25639
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 25641
 if ((HEAP32[$2 + 2380 >> 2] | 0) != 2) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 25647
  __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 25648
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 396; //@line 25651
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 25652
   HEAP32[$23 >> 2] = $4; //@line 25653
   $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 25654
   HEAP32[$24 >> 2] = $2; //@line 25655
   $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 25656
   HEAP16[$25 >> 1] = $6; //@line 25657
   $26 = $ReallocAsyncCtx4 + 14 | 0; //@line 25658
   HEAP16[$26 >> 1] = $8; //@line 25659
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 25660
   HEAP8[$27 >> 0] = $10; //@line 25661
   sp = STACKTOP; //@line 25662
   return;
  }
  ___async_unwind = 0; //@line 25665
  HEAP32[$ReallocAsyncCtx4 >> 2] = 396; //@line 25666
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 25667
  HEAP32[$23 >> 2] = $4; //@line 25668
  $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 25669
  HEAP32[$24 >> 2] = $2; //@line 25670
  $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 25671
  HEAP16[$25 >> 1] = $6; //@line 25672
  $26 = $ReallocAsyncCtx4 + 14 | 0; //@line 25673
  HEAP16[$26 >> 1] = $8; //@line 25674
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 25675
  HEAP8[$27 >> 0] = $10; //@line 25676
  sp = STACKTOP; //@line 25677
  return;
 }
 if (!(HEAP8[$2 + 2377 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 25684
  __ZN7LoRaMac15open_rx2_windowEv($2); //@line 25685
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 395; //@line 25688
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 25689
   HEAP32[$17 >> 2] = $4; //@line 25690
   $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 25691
   HEAP32[$18 >> 2] = $2; //@line 25692
   $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 25693
   HEAP16[$19 >> 1] = $6; //@line 25694
   $20 = $ReallocAsyncCtx3 + 14 | 0; //@line 25695
   HEAP16[$20 >> 1] = $8; //@line 25696
   $21 = $ReallocAsyncCtx3 + 16 | 0; //@line 25697
   HEAP8[$21 >> 0] = $10; //@line 25698
   sp = STACKTOP; //@line 25699
   return;
  }
  ___async_unwind = 0; //@line 25702
  HEAP32[$ReallocAsyncCtx3 >> 2] = 395; //@line 25703
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 25704
  HEAP32[$17 >> 2] = $4; //@line 25705
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 25706
  HEAP32[$18 >> 2] = $2; //@line 25707
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 25708
  HEAP16[$19 >> 1] = $6; //@line 25709
  $20 = $ReallocAsyncCtx3 + 14 | 0; //@line 25710
  HEAP16[$20 >> 1] = $8; //@line 25711
  $21 = $ReallocAsyncCtx3 + 16 | 0; //@line 25712
  HEAP8[$21 >> 0] = $10; //@line 25713
  sp = STACKTOP; //@line 25714
  return;
 }
 $trunc = (HEAPU8[$4 >> 0] | 0) >>> 5; //@line 25718
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$2 + 2376 >> 0] | 0) {
    HEAP8[$2 + 2084 >> 0] = 0; //@line 25727
    return;
   }
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25730
   __ZN7LoRaMac24handle_join_accept_frameEPKht($2, $4, $6); //@line 25731
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 397; //@line 25734
    $33 = $ReallocAsyncCtx2 + 4 | 0; //@line 25735
    HEAP32[$33 >> 2] = $2; //@line 25736
    sp = STACKTOP; //@line 25737
    return;
   }
   ___async_unwind = 0; //@line 25740
   HEAP32[$ReallocAsyncCtx2 >> 2] = 397; //@line 25741
   $33 = $ReallocAsyncCtx2 + 4 | 0; //@line 25742
   HEAP32[$33 >> 2] = $2; //@line 25743
   sp = STACKTOP; //@line 25744
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25749
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($2, $4, $6, 1, $trunc, $8, $10); //@line 25750
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 398; //@line 25753
    sp = STACKTOP; //@line 25754
    return;
   }
   ___async_unwind = 0; //@line 25757
   HEAP32[$ReallocAsyncCtx >> 2] = 398; //@line 25758
   sp = STACKTOP; //@line 25759
   return;
  }
 default:
  {
   return;
  }
 }
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3284
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 3291
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 3296
 $11 = $0 + 128 | 0; //@line 3297
 _equeue_mutex_lock($11); //@line 3298
 $12 = $10 + 4 | 0; //@line 3299
 $13 = HEAP8[$12 >> 0] | 0; //@line 3300
 $14 = $13 & 255; //@line 3301
 $15 = HEAP32[$5 >> 2] | 0; //@line 3302
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 3306
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 3310
 HEAP32[$10 + 24 >> 2] = -1; //@line 3312
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 3317
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 3332
   $33 = HEAP32[$32 >> 2] | 0; //@line 3333
   $35 = $10 + 8 | 0; //@line 3335
   $36 = HEAP32[$35 >> 2] | 0; //@line 3336
   $37 = $33; //@line 3337
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 3339
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 3341
    $46 = HEAP32[$35 >> 2] | 0; //@line 3342
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 3345
     $49 = $46; //@line 3345
     label = 13; //@line 3346
    }
   } else {
    $38 = $33 + 8 | 0; //@line 3349
    HEAP32[$38 >> 2] = $36; //@line 3350
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 3355
    }
    $42 = $10 + 16 | 0; //@line 3357
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 3359
    $$sink$in$in$i = $42; //@line 3361
    $49 = HEAP32[$32 >> 2] | 0; //@line 3361
    label = 13; //@line 3362
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 3367
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 3376
   _equeue_mutex_unlock($11); //@line 3377
   $56 = $10 + 36 | 0; //@line 3378
   $57 = $56 + -36 | 0; //@line 3379
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 3381
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3385
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 3386
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 123; //@line 3389
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3391
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 3393
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 3395
      sp = STACKTOP; //@line 3396
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3399
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 3404
   _equeue_mutex_lock($64); //@line 3405
   $65 = $0 + 24 | 0; //@line 3406
   $66 = HEAP32[$65 >> 2] | 0; //@line 3407
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 3411
     label = 24; //@line 3412
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 3414
     $$025$i$i = $65; //@line 3415
     $70 = $66; //@line 3415
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 3417
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 3422
      $73 = HEAP32[$72 >> 2] | 0; //@line 3423
      if (!$73) {
       $$02329$i$i = $72; //@line 3426
       label = 24; //@line 3427
       break L28;
      } else {
       $$025$i$i = $72; //@line 3430
       $70 = $73; //@line 3430
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 3436
      $$02330$i$i = $$025$i$i; //@line 3439
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 3439
     } else {
      $$02329$i$i = $$025$i$i; //@line 3441
      label = 24; //@line 3442
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 3448
    $$02330$i$i = $$02329$i$i; //@line 3449
    $$sink$in$i$i = $$02329$i$i; //@line 3449
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 3453
   HEAP32[$$02330$i$i >> 2] = $57; //@line 3454
   _equeue_mutex_unlock($64); //@line 3455
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 3459
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_172($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$09$i = 0, $$09$i53 = 0, $$09$i58 = 0, $$sink$sink$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $41 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12641
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12643
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12645
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12647
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12649
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12651
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12653
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12655
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12657
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12659
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12661
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12663
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12665
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12671
 $31 = $20 + 16 | 0; //@line 12672
 $32 = $20 + 32 | 0; //@line 12673
 $33 = HEAP32[$32 >> 2] | 0; //@line 12674
 if ($33 >>> 0 < $6 >>> 0) {
  $$013$i = 0; //@line 12677
  do {
   if ($$013$i >>> 0 < $33 >>> 0) {
    $$sink$sink$i = HEAP8[$20 + 16 + $$013$i >> 0] | 0; //@line 12683
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($33 | 0) ? -128 : 0; //@line 12687
   }
   HEAP8[$24 + $$013$i >> 0] = $$sink$sink$i; //@line 12690
   $$013$i = $$013$i + 1 | 0; //@line 12691
  } while (($$013$i | 0) != ($6 | 0));
  $$09$i = 0; //@line 12694
  do {
   $41 = $24 + $$09$i | 0; //@line 12701
   HEAP8[$41 >> 0] = HEAP8[$30 + $$09$i >> 0] ^ HEAP8[$41 >> 0]; //@line 12706
   $$09$i = $$09$i + 1 | 0; //@line 12707
  } while (($$09$i | 0) != ($6 | 0));
  label = 10; //@line 12710
 } else {
  if ($6 | 0) {
   $$09$i53 = 0; //@line 12719
   do {
    HEAP8[$24 + $$09$i53 >> 0] = HEAP8[$22 + $$09$i53 >> 0] ^ HEAP8[$20 + 16 + $$09$i53 >> 0]; //@line 12727
    $$09$i53 = $$09$i53 + 1 | 0; //@line 12728
   } while (($$09$i53 | 0) != ($6 | 0));
   label = 10; //@line 12731
  }
 }
 if ((label | 0) == 10) {
  if ($6 | 0) {
   $$09$i58 = 0; //@line 12742
   do {
    $58 = $20 + $$09$i58 | 0; //@line 12746
    HEAP8[$58 >> 0] = HEAP8[$58 >> 0] ^ HEAP8[$24 + $$09$i58 >> 0]; //@line 12749
    $$09$i58 = $$09$i58 + 1 | 0; //@line 12750
   } while (($$09$i58 | 0) != ($6 | 0));
  }
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 12760
 $62 = _mbedtls_cipher_update($8, $4, $6, $4, $10) | 0; //@line 12761
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 589; //@line 12764
  $63 = $ReallocAsyncCtx9 + 4 | 0; //@line 12765
  HEAP32[$63 >> 2] = $2; //@line 12766
  $64 = $ReallocAsyncCtx9 + 8 | 0; //@line 12767
  HEAP32[$64 >> 2] = $4; //@line 12768
  $65 = $ReallocAsyncCtx9 + 12 | 0; //@line 12769
  HEAP32[$65 >> 2] = $6; //@line 12770
  $66 = $ReallocAsyncCtx9 + 16 | 0; //@line 12771
  HEAP32[$66 >> 2] = $18; //@line 12772
  $67 = $ReallocAsyncCtx9 + 20 | 0; //@line 12773
  HEAP32[$67 >> 2] = $16; //@line 12774
  $68 = $ReallocAsyncCtx9 + 24 | 0; //@line 12775
  HEAP32[$68 >> 2] = $32; //@line 12776
  $69 = $ReallocAsyncCtx9 + 28 | 0; //@line 12777
  HEAP32[$69 >> 2] = $31; //@line 12778
  $70 = $ReallocAsyncCtx9 + 32 | 0; //@line 12779
  HEAP32[$70 >> 2] = $12; //@line 12780
  $71 = $ReallocAsyncCtx9 + 36 | 0; //@line 12781
  HEAP32[$71 >> 2] = $14; //@line 12782
  sp = STACKTOP; //@line 12783
  return;
 }
 HEAP32[___async_retval >> 2] = $62; //@line 12787
 ___async_unwind = 0; //@line 12788
 HEAP32[$ReallocAsyncCtx9 >> 2] = 589; //@line 12789
 $63 = $ReallocAsyncCtx9 + 4 | 0; //@line 12790
 HEAP32[$63 >> 2] = $2; //@line 12791
 $64 = $ReallocAsyncCtx9 + 8 | 0; //@line 12792
 HEAP32[$64 >> 2] = $4; //@line 12793
 $65 = $ReallocAsyncCtx9 + 12 | 0; //@line 12794
 HEAP32[$65 >> 2] = $6; //@line 12795
 $66 = $ReallocAsyncCtx9 + 16 | 0; //@line 12796
 HEAP32[$66 >> 2] = $18; //@line 12797
 $67 = $ReallocAsyncCtx9 + 20 | 0; //@line 12798
 HEAP32[$67 >> 2] = $16; //@line 12799
 $68 = $ReallocAsyncCtx9 + 24 | 0; //@line 12800
 HEAP32[$68 >> 2] = $32; //@line 12801
 $69 = $ReallocAsyncCtx9 + 28 | 0; //@line 12802
 HEAP32[$69 >> 2] = $31; //@line 12803
 $70 = $ReallocAsyncCtx9 + 32 | 0; //@line 12804
 HEAP32[$70 >> 2] = $12; //@line 12805
 $71 = $ReallocAsyncCtx9 + 36 | 0; //@line 12806
 HEAP32[$71 >> 2] = $14; //@line 12807
 sp = STACKTOP; //@line 12808
 return;
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$043$lcssa = 0, $$04352 = 0, $$04554$in = 0, $$050 = 0, $$053 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, $AsyncCtx = 0, sp = 0, $$04352$looptemp = 0;
 sp = STACKTOP; //@line 996
 STACKTOP = STACKTOP + 288 | 0; //@line 997
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 997
 $3 = sp; //@line 998
 _memset($3 | 0, 0, 280) | 0; //@line 999
 $4 = $0 + 8 | 0; //@line 1000
 HEAP32[$0 + 4 >> 2] = $4; //@line 1002
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 1003
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 1006
  HEAP32[$0 >> 2] = $8; //@line 1007
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 1009
  $11 = $8 << 2; //@line 1010
  $12 = $10 + ($11 << 2) | 0; //@line 1011
  $13 = $12 + 4 | 0; //@line 1012
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 1015
  $16 = $13 + 4 | 0; //@line 1016
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 1019
  $19 = $16 + 4 | 0; //@line 1020
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 1023
  $22 = $19 + 4 | 0; //@line 1024
  $24 = $0 + 24 | 0; //@line 1026
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 1027
  $$050 = $22 + -32 | 0; //@line 1028
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 1031
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 1037
   $$04352 = $24; //@line 1038
   $$04554$in = $8; //@line 1038
   $$053 = $$050; //@line 1038
   while (1) {
    $$04352$looptemp = $$04352;
    $$04352 = $$04352 + 16 | 0; //@line 1041
    $32 = HEAP32[$$053 >> 2] | 0; //@line 1042
    HEAP32[$$04352$looptemp >> 2] = HEAP32[2324 + ((HEAPU8[13746 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13746 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13746 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13746 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 1073
    $64 = HEAP32[$$053 + 4 >> 2] | 0; //@line 1075
    HEAP32[$$04352$looptemp + 4 >> 2] = HEAP32[2324 + ((HEAPU8[13746 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13746 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13746 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13746 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 1106
    $96 = HEAP32[$$053 + 8 >> 2] | 0; //@line 1108
    HEAP32[$$04352$looptemp + 8 >> 2] = HEAP32[2324 + ((HEAPU8[13746 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13746 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13746 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13746 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 1139
    $128 = HEAP32[$$053 + 12 >> 2] | 0; //@line 1141
    HEAP32[$$04352$looptemp + 12 >> 2] = HEAP32[2324 + ((HEAPU8[13746 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13746 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13746 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13746 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 1171
    $$053 = $$053 + -16 | 0; //@line 1172
    if (($$04554$in | 0) <= 2) {
     break;
    } else {
     $$04554$in = $$04554$in + -1 | 0; //@line 1175
    }
   }
   $$0$lcssa = $$053; //@line 1181
   $$043$lcssa = $$04352; //@line 1181
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 1181
  } else {
   $$0$lcssa = $$050; //@line 1183
   $$043$lcssa = $24; //@line 1183
   $$pn$lcssa = $22; //@line 1183
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 1188
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 1192
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 1196
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 1198
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1200
 _mbedtls_platform_zeroize($3, 280); //@line 1201
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 556; //@line 1204
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 1206
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 1208
  sp = STACKTOP; //@line 1209
  STACKTOP = sp; //@line 1210
  return 0; //@line 1210
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1212
  STACKTOP = sp; //@line 1213
  return $6 | 0; //@line 1213
 }
 return 0; //@line 1215
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 5065
 $6 = $4 & 15; //@line 5067
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 5069
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 5076
 $$07475 = 15; //@line 5082
 $22 = $4; //@line 5082
 $27 = HEAP32[$15 >> 2] | 0; //@line 5082
 $28 = HEAP32[$8 >> 2] | 0; //@line 5082
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 5082
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 5082
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 5087
   $70 = $28; //@line 5087
   $71 = $29; //@line 5087
   $74 = $32; //@line 5087
  } else {
   $25 = $22 & 15; //@line 5090
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 5092
   $31 = tempRet0; //@line 5093
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 5094
   $36 = tempRet0 | $31; //@line 5097
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 5098
   $38 = tempRet0; //@line 5099
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 5101
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 5107
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 5112
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 5121
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 5129
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 5129
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 5129
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 5129
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 5132
  $73 = tempRet0; //@line 5133
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 5134
  $78 = tempRet0 | $73; //@line 5137
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 5138
  $80 = tempRet0; //@line 5139
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 5141
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 5147
  $92 = ($22 & 255) >>> 4 & 255; //@line 5151
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 5153
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 5159
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 5160
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 5162
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 5168
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 5169
  $111 = $$07475 + -1 | 0; //@line 5170
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 5177
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 5177
  $27 = $109; //@line 5177
  $28 = $100; //@line 5177
  $29 = $101; //@line 5177
  $32 = $110; //@line 5177
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 5179
 HEAP8[$2 >> 0] = $113; //@line 5182
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 5183
 HEAP8[$2 + 1 >> 0] = $116; //@line 5187
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 5188
 HEAP8[$2 + 2 >> 0] = $120; //@line 5192
 HEAP8[$2 + 3 >> 0] = $101; //@line 5195
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 5196
 HEAP8[$2 + 4 >> 0] = $126; //@line 5200
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 5201
 HEAP8[$2 + 5 >> 0] = $130; //@line 5205
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 5206
 HEAP8[$2 + 6 >> 0] = $134; //@line 5210
 HEAP8[$2 + 7 >> 0] = $100; //@line 5213
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 5214
 HEAP8[$2 + 8 >> 0] = $140; //@line 5218
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 5219
 HEAP8[$2 + 9 >> 0] = $144; //@line 5223
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 5224
 HEAP8[$2 + 10 >> 0] = $148; //@line 5228
 HEAP8[$2 + 11 >> 0] = $110; //@line 5231
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 5232
 HEAP8[$2 + 12 >> 0] = $154; //@line 5236
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 5237
 HEAP8[$2 + 13 >> 0] = $158; //@line 5241
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 5242
 HEAP8[$2 + 14 >> 0] = $162; //@line 5246
 HEAP8[$2 + 15 >> 0] = $109; //@line 5249
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28170
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28174
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28176
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 28178
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 28180
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 28182
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28183
 $13 = $4 + 12 | 0; //@line 28184
 HEAP32[$13 >> 2] = $$pre$i; //@line 28185
 if (!$$pre$i) {
  $24 = $6 + 12 | 0; //@line 28188
  HEAP32[$24 >> 2] = 0; //@line 28189
  $25 = $6 + 16 | 0; //@line 28190
  HEAP8[$25 >> 0] = $8; //@line 28191
  HEAP8[$6 + 17 >> 0] = $10; //@line 28193
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 28194
  $27 = _equeue_alloc($12, 20) | 0; //@line 28195
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 311; //@line 28198
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 28199
   HEAP32[$28 >> 2] = $24; //@line 28200
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 28201
   HEAP32[$29 >> 2] = $25; //@line 28202
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 28203
   HEAP32[$30 >> 2] = $12; //@line 28204
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 28205
   HEAP32[$31 >> 2] = $24; //@line 28206
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 28207
   HEAP32[$32 >> 2] = $13; //@line 28208
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 28209
   HEAP32[$33 >> 2] = $6; //@line 28210
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 28211
   HEAP32[$34 >> 2] = $4; //@line 28212
   sp = STACKTOP; //@line 28213
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 28217
  ___async_unwind = 0; //@line 28218
  HEAP32[$ReallocAsyncCtx7 >> 2] = 311; //@line 28219
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 28220
  HEAP32[$28 >> 2] = $24; //@line 28221
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 28222
  HEAP32[$29 >> 2] = $25; //@line 28223
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 28224
  HEAP32[$30 >> 2] = $12; //@line 28225
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 28226
  HEAP32[$31 >> 2] = $24; //@line 28227
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 28228
  HEAP32[$32 >> 2] = $13; //@line 28229
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 28230
  HEAP32[$33 >> 2] = $6; //@line 28231
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 28232
  HEAP32[$34 >> 2] = $4; //@line 28233
  sp = STACKTOP; //@line 28234
  return;
 } else {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 28239
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 28240
  FUNCTION_TABLE_vii[$16 & 15]($6, $4); //@line 28241
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 310; //@line 28244
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 28245
   HEAP32[$17 >> 2] = $6; //@line 28246
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 28247
   HEAP32[$18 >> 2] = $4; //@line 28248
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 28249
   HEAP32[$19 >> 2] = $13; //@line 28250
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 28251
   HEAP32[$20 >> 2] = $13; //@line 28252
   $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 28253
   HEAP8[$21 >> 0] = $8; //@line 28254
   $22 = $ReallocAsyncCtx2 + 21 | 0; //@line 28255
   HEAP8[$22 >> 0] = $10; //@line 28256
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 28257
   HEAP32[$23 >> 2] = $12; //@line 28258
   sp = STACKTOP; //@line 28259
   return;
  }
  ___async_unwind = 0; //@line 28262
  HEAP32[$ReallocAsyncCtx2 >> 2] = 310; //@line 28263
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 28264
  HEAP32[$17 >> 2] = $6; //@line 28265
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 28266
  HEAP32[$18 >> 2] = $4; //@line 28267
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 28268
  HEAP32[$19 >> 2] = $13; //@line 28269
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 28270
  HEAP32[$20 >> 2] = $13; //@line 28271
  $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 28272
  HEAP8[$21 >> 0] = $8; //@line 28273
  $22 = $ReallocAsyncCtx2 + 21 | 0; //@line 28274
  HEAP8[$22 >> 0] = $10; //@line 28275
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 28276
  HEAP32[$23 >> 2] = $12; //@line 28277
  sp = STACKTOP; //@line 28278
  return;
 }
}
function __ZN12LoRaWANStack9handle_rxEPhtRhRib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$0$off0 = 0, $$031 = 0, $$1 = 0, $$pre$phi39Z2D = 0, $13 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10601
 STACKTOP = STACKTOP + 16 | 0; //@line 10602
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10602
 if (!(HEAP8[$0 + 2548 >> 0] | 0)) {
  $$1 = -1017; //@line 10608
  STACKTOP = sp; //@line 10609
  return $$1 | 0; //@line 10609
 }
 $9 = $0 + 2832 | 0; //@line 10611
 if (!(HEAP8[$9 >> 0] | 0)) {
  $$1 = -1001; //@line 10615
  STACKTOP = sp; //@line 10616
  return $$1 | 0; //@line 10616
 }
 if (!$1) {
  $$1 = -1003; //@line 10620
  STACKTOP = sp; //@line 10621
  return $$1 | 0; //@line 10621
 }
 $13 = $2 & 65535; //@line 10623
 if (!($2 << 16 >> 16)) {
  $$1 = -1003; //@line 10626
  STACKTOP = sp; //@line 10627
  return $$1 | 0; //@line 10627
 }
 L13 : do {
  switch (HEAP32[$0 + 2844 >> 2] | 0) {
  case 0:
   {
    $$0$i = 1; //@line 10634
    break;
   }
  case 1:
   {
    $$0$i = 2; //@line 10638
    break;
   }
  case 2:
   {
    $$0$i = 4; //@line 10642
    break;
   }
  case 3:
   {
    $$0$i = 8; //@line 10646
    break;
   }
  default:
   {
    _mbed_tracef(2, 12187, 12807, sp); //@line 10650
    $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 10651
    _mbed_assert_internal(14438, 12089, 811); //@line 10652
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 355; //@line 10655
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10657
     HEAP8[$AsyncCtx + 8 >> 0] = $5 & 1; //@line 10660
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 10662
     HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 10664
     HEAP16[$AsyncCtx + 20 >> 1] = $2; //@line 10666
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 10668
     HEAP32[$AsyncCtx + 28 >> 2] = $9; //@line 10670
     HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 10672
     sp = STACKTOP; //@line 10673
     STACKTOP = sp; //@line 10674
     return 0; //@line 10674
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 10676
     $$0$i = 1; //@line 10677
     break L13;
    }
   }
  }
 } while (0);
 $26 = HEAP8[$0 + 2853 >> 0] | 0; //@line 10684
 if ($5) {
  if ($26 << 24 >> 24 != (HEAP8[$3 >> 0] | 0)) {
   $$1 = -1001; //@line 10689
   STACKTOP = sp; //@line 10690
   return $$1 | 0; //@line 10690
  }
  if (!(HEAP32[$4 >> 2] & $$0$i)) {
   $$1 = -1001; //@line 10696
   STACKTOP = sp; //@line 10697
   return $$1 | 0; //@line 10697
  }
 }
 HEAP8[$3 >> 0] = $26; //@line 10700
 HEAP32[$4 >> 2] = $$0$i; //@line 10701
 $32 = $0 + 2856 | 0; //@line 10702
 $33 = HEAP32[$32 >> 2] | 0; //@line 10703
 $34 = $0 + 2860 | 0; //@line 10704
 $35 = HEAP16[$34 >> 1] | 0; //@line 10705
 $36 = $35 & 65535; //@line 10706
 $38 = $0 + 2882 | 0; //@line 10708
 $40 = (HEAP16[$38 >> 1] | 0) == 0; //@line 10710
 if (($35 & 65535) > ($2 & 65535)) {
  if ($40) {
   $43 = $0 + 2880 | 0; //@line 10715
   HEAP16[$43 >> 1] = $36 - $13; //@line 10716
   HEAP16[$38 >> 1] = $2; //@line 10717
   _memcpy($1 | 0, $33 | 0, $13 | 0) | 0; //@line 10718
   $$0$off0 = 0; //@line 10719
   $$031 = $2; //@line 10719
   $$pre$phi39Z2D = $43; //@line 10719
  } else {
   label = 19; //@line 10721
  }
 } else {
  if ($40) {
   $44 = $0 + 2880 | 0; //@line 10725
   HEAP16[$44 >> 1] = 0; //@line 10726
   HEAP16[$38 >> 1] = 0; //@line 10727
   _memcpy($1 | 0, $33 | 0, $36 | 0) | 0; //@line 10728
   $$0$off0 = 1; //@line 10729
   $$031 = $35; //@line 10729
   $$pre$phi39Z2D = $44; //@line 10729
  } else {
   label = 19; //@line 10731
  }
 }
 if ((label | 0) == 19) {
  $$0$off0 = 0; //@line 10736
  $$031 = $35; //@line 10736
  $$pre$phi39Z2D = $0 + 2880 | 0; //@line 10736
 }
 if (HEAP16[$$pre$phi39Z2D >> 1] | 0) {
  $48 = HEAP16[$0 + 2882 >> 1] | 0; //@line 10742
  if ($48 << 16 >> 16) {
   _memcpy($1 | 0, $33 + ($48 & 65535) | 0, $$031 & 65535 | 0) | 0; //@line 10748
  }
 }
 if (!$$0$off0) {
  $$1 = $$031; //@line 10752
  STACKTOP = sp; //@line 10753
  return $$1 | 0; //@line 10753
 }
 HEAP32[$32 >> 2] = 0; //@line 10755
 HEAP16[$34 >> 1] = 0; //@line 10756
 HEAP8[$9 >> 0] = 0; //@line 10757
 $$1 = $$031; //@line 10758
 STACKTOP = sp; //@line 10759
 return $$1 | 0; //@line 10759
}
function __ZN7LoRaMac16on_radio_tx_doneEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $22 = 0, $31 = 0, $40 = 0, $43 = 0, $49 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11291
 STACKTOP = STACKTOP + 16 | 0; //@line 11292
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11292
 _mbed_tracef(8, 12866, 12871, sp); //@line 11294
 $1 = __ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0; //@line 11295
 $2 = $0 + 2380 | 0; //@line 11296
 do {
  if ((HEAP32[$2 >> 2] | 0) == 2) {
   if (!(HEAP8[$0 + 2377 >> 0] | 0)) {
    $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11305
    __ZN7LoRaMac15open_rx2_windowEv($0); //@line 11306
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 368; //@line 11309
     HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 11311
     HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 11313
     HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 11315
     HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 11317
     sp = STACKTOP; //@line 11318
     STACKTOP = sp; //@line 11319
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11321
     break;
    }
   }
  } else {
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11327
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 11328
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 367; //@line 11331
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 11333
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 11335
    HEAP32[$AsyncCtx15 + 12 >> 2] = $2; //@line 11337
    HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 11339
    sp = STACKTOP; //@line 11340
    STACKTOP = sp; //@line 11341
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 11343
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 1175 >> 0] | 0)) {
   HEAP32[$0 + 2056 >> 2] = 0; //@line 11354
   HEAP32[$0 + 2092 >> 2] = 4; //@line 11356
  } else {
   $22 = HEAP32[$0 + 1772 >> 2] | 0; //@line 11360
   $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11361
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1816 | 0, $22); //@line 11362
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 369; //@line 11365
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 11367
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 11369
    HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 11371
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 11373
    sp = STACKTOP; //@line 11374
    STACKTOP = sp; //@line 11375
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11377
   do {
    if ((HEAP32[$2 >> 2] | 0) != 2) {
     $31 = HEAP32[$0 + 1776 >> 2] | 0; //@line 11384
     $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11385
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1836 | 0, $31); //@line 11386
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 370; //@line 11389
      HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11391
      HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 11393
      HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 11395
      sp = STACKTOP; //@line 11396
      STACKTOP = sp; //@line 11397
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11399
      break;
     }
    }
   } while (0);
   if (HEAP8[$0 + 1177 >> 0] | 0) {
    $40 = HEAP32[$0 + 1776 >> 2] | 0; //@line 11410
    $43 = (__ZN7LoRaPHY15get_ack_timeoutEv($0 + 4 | 0) | 0) + $40 | 0; //@line 11413
    $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11414
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1856 | 0, $43); //@line 11415
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 371; //@line 11418
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11420
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 11422
     sp = STACKTOP; //@line 11423
     STACKTOP = sp; //@line 11424
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 11426
     break;
    }
   }
  }
 } while (0);
 $49 = HEAP8[$0 + 1182 >> 0] | 0; //@line 11433
 HEAP8[$0 + 1183 >> 0] = $49; //@line 11435
 __ZN7LoRaPHY16set_last_tx_doneEhbj($0 + 4 | 0, $49, (HEAP8[$0 + 2376 >> 0] | 0) != 0, $1); //@line 11440
 HEAP32[$0 + 1780 >> 2] = $1; //@line 11442
 STACKTOP = sp; //@line 11443
 return;
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27429
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27431
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 27433
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 27438
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27439
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 27440
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 27443
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 27444
   HEAP32[$9 >> 2] = $2; //@line 27445
   sp = STACKTOP; //@line 27446
   return;
  }
  ___async_unwind = 0; //@line 27449
  HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 27450
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 27451
  HEAP32[$9 >> 2] = $2; //@line 27452
  sp = STACKTOP; //@line 27453
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 27457
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 27462
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27463
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 27464
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 160; //@line 27467
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 27468
   HEAP32[$16 >> 2] = $2; //@line 27469
   sp = STACKTOP; //@line 27470
   return;
  }
  ___async_unwind = 0; //@line 27473
  HEAP32[$ReallocAsyncCtx3 >> 2] = 160; //@line 27474
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 27475
  HEAP32[$16 >> 2] = $2; //@line 27476
  sp = STACKTOP; //@line 27477
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 27481
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 27486
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 27487
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 27488
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 27491
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 27492
   HEAP32[$23 >> 2] = $2; //@line 27493
   sp = STACKTOP; //@line 27494
   return;
  }
  ___async_unwind = 0; //@line 27497
  HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 27498
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 27499
  HEAP32[$23 >> 2] = $2; //@line 27500
  sp = STACKTOP; //@line 27501
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 27505
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 27510
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27511
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 27512
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 27515
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 27516
   HEAP32[$30 >> 2] = $2; //@line 27517
   sp = STACKTOP; //@line 27518
   return;
  }
  ___async_unwind = 0; //@line 27521
  HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 27522
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 27523
  HEAP32[$30 >> 2] = $2; //@line 27524
  sp = STACKTOP; //@line 27525
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 27529
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 27534
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27535
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 27536
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 27539
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 27540
   HEAP32[$37 >> 2] = $2; //@line 27541
   sp = STACKTOP; //@line 27542
   return;
  }
  ___async_unwind = 0; //@line 27545
  HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 27546
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 27547
  HEAP32[$37 >> 2] = $2; //@line 27548
  sp = STACKTOP; //@line 27549
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 27553
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 27559
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27560
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 27561
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 27564
  sp = STACKTOP; //@line 27565
  return;
 }
 ___async_unwind = 0; //@line 27568
 HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 27569
 sp = STACKTOP; //@line 27570
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9612
 STACKTOP = STACKTOP + 16 | 0; //@line 9613
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9613
 $2 = sp; //@line 9614
 $3 = $0 + 2496 | 0; //@line 9615
 do {
  if (HEAP32[$3 >> 2] | 0) {
   $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9620
   __ZN7LoRaMac19remove_channel_planEv($0) | 0; //@line 9621
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 332; //@line 9624
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 9626
    HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 9628
    HEAP32[$AsyncCtx9 + 12 >> 2] = $2; //@line 9630
    HEAP32[$AsyncCtx9 + 16 >> 2] = $3; //@line 9632
    HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 9634
    sp = STACKTOP; //@line 9635
    STACKTOP = sp; //@line 9636
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9638
    break;
   }
  }
 } while (0);
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9643
 __ZN7LoRaMac10disconnectEv($0); //@line 9644
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 333; //@line 9647
  HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 9649
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 9651
  HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 9653
  HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 9655
  sp = STACKTOP; //@line 9656
  STACKTOP = sp; //@line 9657
  return;
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9659
 HEAP8[$0 + 2548 >> 0] = 0; //@line 9661
 HEAP32[$3 >> 2] = 11; //@line 9662
 HEAP32[$1 >> 2] = -1011; //@line 9663
 $16 = $0 + 2904 | 0; //@line 9664
 HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -5; //@line 9667
 $19 = $0 + 2512 | 0; //@line 9668
 $20 = HEAP32[$19 >> 2] | 0; //@line 9669
 if (!$20) {
  STACKTOP = sp; //@line 9672
  return;
 }
 $24 = HEAP32[$0 + 3168 >> 2] | 0; //@line 9676
 $26 = HEAP32[$20 + 4 >> 2] | 0; //@line 9678
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9679
 FUNCTION_TABLE_vii[$26 & 15]($2, $0 + 2500 | 0); //@line 9680
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 334; //@line 9683
  HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 9685
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 9687
  HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 9689
  HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 9691
  sp = STACKTOP; //@line 9692
  STACKTOP = sp; //@line 9693
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9695
 $31 = $2 + 12 | 0; //@line 9697
 HEAP32[$31 >> 2] = HEAP32[$19 >> 2]; //@line 9698
 $AsyncCtx12 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9699
 $32 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($24, $2, 1) | 0; //@line 9700
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 335; //@line 9703
  HEAP32[$AsyncCtx12 + 4 >> 2] = $31; //@line 9705
  HEAP32[$AsyncCtx12 + 8 >> 2] = $2; //@line 9707
  sp = STACKTOP; //@line 9708
  STACKTOP = sp; //@line 9709
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 9711
 $35 = HEAP32[$31 >> 2] | 0; //@line 9712
 do {
  if ($35 | 0) {
   $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 9717
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9718
   FUNCTION_TABLE_vi[$38 & 1023]($2); //@line 9719
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 336; //@line 9722
    HEAP32[$AsyncCtx2 + 4 >> 2] = $32; //@line 9724
    HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 9726
    sp = STACKTOP; //@line 9727
    STACKTOP = sp; //@line 9728
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9730
    break;
   }
  }
 } while (0);
 if ($32 | 0) {
  STACKTOP = sp; //@line 9737
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9739
 _mbed_assert_internal(12080, 12089, 775); //@line 9740
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 337; //@line 9743
  HEAP32[$AsyncCtx16 + 4 >> 2] = $2; //@line 9745
  sp = STACKTOP; //@line 9746
  STACKTOP = sp; //@line 9747
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 9749
 STACKTOP = sp; //@line 9750
 return;
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14456
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14458
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14460
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14462
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14464
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14466
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14468
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14470
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14472
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14474
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14476
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14478
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14480
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 14483
  $53 = ___async_retval; //@line 14484
  HEAP32[$53 >> 2] = $$0; //@line 14485
  return;
 }
 $33 = $2 - $4 | 0; //@line 14488
 $25 = $6 + $4 | 0; //@line 14489
 $37 = $8 + 1 | 0; //@line 14490
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 14495
   $53 = ___async_retval; //@line 14496
   HEAP32[$53 >> 2] = $$0; //@line 14497
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 14502
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 14505
  $$0 = 0; //@line 14506
  $53 = ___async_retval; //@line 14507
  HEAP32[$53 >> 2] = $$0; //@line 14508
  return;
 }
 $$09$i75 = 0; //@line 14511
 do {
  $27 = $16 + $$09$i75 | 0; //@line 14515
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 14518
  $$09$i75 = $$09$i75 + 1 | 0; //@line 14519
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 14527
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 14528
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 583; //@line 14531
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 14532
  HEAP32[$32 >> 2] = $33; //@line 14533
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 14534
  HEAP32[$34 >> 2] = $4; //@line 14535
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 14536
  HEAP32[$35 >> 2] = $25; //@line 14537
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 14538
  HEAP32[$36 >> 2] = $37; //@line 14539
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 14540
  HEAP32[$38 >> 2] = $10; //@line 14541
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 14542
  HEAP32[$39 >> 2] = $12; //@line 14543
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 14544
  HEAP32[$40 >> 2] = $14; //@line 14545
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 14546
  HEAP32[$41 >> 2] = $16; //@line 14547
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 14548
  HEAP32[$42 >> 2] = $18; //@line 14549
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 14550
  HEAP32[$43 >> 2] = $20; //@line 14551
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 14552
  HEAP32[$44 >> 2] = $22; //@line 14553
  sp = STACKTOP; //@line 14554
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 14558
 ___async_unwind = 0; //@line 14559
 HEAP32[$ReallocAsyncCtx >> 2] = 583; //@line 14560
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 14561
 HEAP32[$32 >> 2] = $33; //@line 14562
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 14563
 HEAP32[$34 >> 2] = $4; //@line 14564
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 14565
 HEAP32[$35 >> 2] = $25; //@line 14566
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 14567
 HEAP32[$36 >> 2] = $37; //@line 14568
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 14569
 HEAP32[$38 >> 2] = $10; //@line 14570
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 14571
 HEAP32[$39 >> 2] = $12; //@line 14572
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 14573
 HEAP32[$40 >> 2] = $14; //@line 14574
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 14575
 HEAP32[$41 >> 2] = $16; //@line 14576
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 14577
 HEAP32[$42 >> 2] = $18; //@line 14578
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 14579
 HEAP32[$43 >> 2] = $20; //@line 14580
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 14581
 HEAP32[$44 >> 2] = $22; //@line 14582
 sp = STACKTOP; //@line 14583
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5262
 STACKTOP = STACKTOP + 32 | 0; //@line 5263
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5263
 $4 = sp + 8 | 0; //@line 5264
 $5 = sp; //@line 5265
 HEAP32[$5 >> 2] = 0; //@line 5266
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 5274
   STACKTOP = sp; //@line 5275
   return $$0 | 0; //@line 5275
  }
 }
 $11 = $0 + 328 | 0; //@line 5278
 $12 = $11; //@line 5279
 $14 = HEAP32[$12 >> 2] | 0; //@line 5281
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 5284
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 5285
 $19 = tempRet0; //@line 5286
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 5299
  STACKTOP = sp; //@line 5300
  return $$0 | 0; //@line 5300
 }
 $30 = $11; //@line 5302
 HEAP32[$30 >> 2] = $18; //@line 5304
 HEAP32[$30 + 4 >> 2] = $19; //@line 5307
 if (!$1) {
  $$0 = 0; //@line 5310
  STACKTOP = sp; //@line 5311
  return $$0 | 0; //@line 5311
 }
 $35 = $0 + 360 | 0; //@line 5313
 $36 = $0 + 376 | 0; //@line 5314
 $37 = $0 + 392 | 0; //@line 5315
 $$05966 = $3; //@line 5316
 $$06065 = $2; //@line 5316
 $$06264 = $1; //@line 5316
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 5319
  $$061 = 16; //@line 5320
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 5326
   $42 = $0 + 360 + $$061 | 0; //@line 5327
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 5329
   HEAP8[$42 >> 0] = $44; //@line 5330
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 5338
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 5339
  if (___async) {
   label = 10; //@line 5342
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5345
  if ($46 | 0) {
   $$0 = $46; //@line 5348
   label = 19; //@line 5349
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 5354
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 5358
    $68 = $$06065 + $$163 | 0; //@line 5359
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 5364
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 5369
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 5371
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 5377
    }
    $$163 = $$163 + 1 | 0; //@line 5379
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 5388
  $83 = $$06264 - $39 | 0; //@line 5389
  if (!$83) {
   $$0 = 0; //@line 5394
   label = 19; //@line 5395
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 5398
   $$06065 = $$06065 + $39 | 0; //@line 5398
   $$06264 = $83; //@line 5398
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 598; //@line 5402
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 5404
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5406
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 5408
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 5410
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 5412
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 5414
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 5416
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 5418
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 5420
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 5422
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 5424
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 5426
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 5428
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 5430
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 5432
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 5434
  sp = STACKTOP; //@line 5435
  STACKTOP = sp; //@line 5436
  return 0; //@line 5436
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 5439
  return $$0 | 0; //@line 5439
 }
 return 0; //@line 5441
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_384($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29149
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29151
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29153
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29155
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29157
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29159
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 29162
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29164
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29166
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29168
 $20 = HEAP8[$0 + 40 >> 0] & 1; //@line 29171
 $22 = HEAP8[$0 + 41 >> 0] & 1; //@line 29174
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 29176
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 29178
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 29180
 L2 : do {
  if (!(HEAP8[$14 >> 0] | 0)) {
   do {
    if (!(HEAP8[$6 >> 0] | 0)) {
     $$182$off0 = $20; //@line 29189
     $$186$off0 = $22; //@line 29189
    } else {
     if (!(HEAP8[$4 >> 0] | 0)) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $22; //@line 29198
       $$283$off0 = 1; //@line 29198
       label = 13; //@line 29199
       break L2;
      } else {
       $$182$off0 = 1; //@line 29202
       $$186$off0 = $22; //@line 29202
       break;
      }
     }
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      label = 18; //@line 29209
      break L2;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      label = 18; //@line 29216
      break L2;
     } else {
      $$182$off0 = 1; //@line 29219
      $$186$off0 = 1; //@line 29219
     }
    }
   } while (0);
   $30 = $26 + 8 | 0; //@line 29223
   if ($30 >>> 0 < $2 >>> 0) {
    HEAP8[$4 >> 0] = 0; //@line 29226
    HEAP8[$6 >> 0] = 0; //@line 29227
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 29228
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $8, $10, $10, 1, $12); //@line 29229
    if (!___async) {
     ___async_unwind = 0; //@line 29232
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 685; //@line 29234
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 29236
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 29238
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 29240
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 29242
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 29244
    HEAP8[$ReallocAsyncCtx5 + 24 >> 0] = $12 & 1; //@line 29247
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 29249
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 29251
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 29253
    HEAP8[$ReallocAsyncCtx5 + 40 >> 0] = $$182$off0 & 1; //@line 29256
    HEAP8[$ReallocAsyncCtx5 + 41 >> 0] = $$186$off0 & 1; //@line 29259
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 29261
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $30; //@line 29263
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 29265
    sp = STACKTOP; //@line 29266
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 29269
    $$283$off0 = $$182$off0; //@line 29269
    label = 13; //@line 29270
   }
  } else {
   $$085$off0$reg2mem$0 = $22; //@line 29273
   $$283$off0 = $20; //@line 29273
   label = 13; //@line 29274
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$24 >> 2] = $10; //@line 29280
    $59 = $8 + 40 | 0; //@line 29281
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 29284
    if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$16 >> 2] | 0) == 2) {
      HEAP8[$14 >> 0] = 1; //@line 29292
      if ($$283$off0) {
       label = 18; //@line 29294
       break;
      } else {
       $67 = 4; //@line 29297
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 29304
   } else {
    $67 = 4; //@line 29306
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 29311
 }
 HEAP32[$28 >> 2] = $67; //@line 29313
 return;
}
function _initialize__async_cb_19($0) {
 $0 = $0 | 0;
 var $10 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $76 = 0, $77 = 0, $78 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 19589
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19593
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19595
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19599
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19601
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19603
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19605
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19607
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $25 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 19616
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 19617
  $26 = HEAP32[$10 >> 2] | 0; //@line 19618
  do {
   if (($26 | 0) == 1e6) {
    $101 = $25; //@line 19622
    $102 = 0; //@line 19622
   } else {
    $28 = HEAP8[$14 >> 0] | 0; //@line 19624
    $30 = ___muldi3($25 | 0, 0, 1e6, 0) | 0; //@line 19626
    $31 = tempRet0; //@line 19627
    if (!($28 << 24 >> 24)) {
     $64 = ___udivdi3($30 | 0, $31 | 0, $26 | 0, 0) | 0; //@line 19629
     $65 = tempRet0; //@line 19630
     $66 = ___muldi3($64 | 0, $65 | 0, $26 | 0, 0) | 0; //@line 19631
     $68 = _i64Subtract($30 | 0, $31 | 0, $66 | 0, tempRet0 | 0) | 0; //@line 19633
     $70 = $16; //@line 19635
     $76 = _i64Add($68 | 0, tempRet0 | 0, HEAP32[$70 >> 2] | 0, HEAP32[$70 + 4 >> 2] | 0) | 0; //@line 19641
     $77 = tempRet0; //@line 19642
     $78 = $16; //@line 19643
     HEAP32[$78 >> 2] = $76; //@line 19645
     HEAP32[$78 + 4 >> 2] = $77; //@line 19648
     if ($77 >>> 0 < 0 | ($77 | 0) == 0 & $76 >>> 0 < $26 >>> 0) {
      $101 = $64; //@line 19655
      $102 = $65; //@line 19655
      break;
     }
     $87 = _i64Add($64 | 0, $65 | 0, 1, 0) | 0; //@line 19658
     $88 = tempRet0; //@line 19659
     $89 = _i64Subtract($76 | 0, $77 | 0, $26 | 0, 0) | 0; //@line 19660
     $91 = $16; //@line 19662
     HEAP32[$91 >> 2] = $89; //@line 19664
     HEAP32[$91 + 4 >> 2] = tempRet0; //@line 19667
     $101 = $87; //@line 19668
     $102 = $88; //@line 19668
     break;
    } else {
     $32 = $28 & 255; //@line 19671
     $33 = _bitshift64Lshr($30 | 0, $31 | 0, $32 | 0) | 0; //@line 19672
     $34 = tempRet0; //@line 19673
     $35 = _bitshift64Shl($33 | 0, $34 | 0, $32 | 0) | 0; //@line 19674
     $37 = _i64Subtract($30 | 0, $31 | 0, $35 | 0, tempRet0 | 0) | 0; //@line 19676
     $39 = $16; //@line 19678
     $45 = _i64Add(HEAP32[$39 >> 2] | 0, HEAP32[$39 + 4 >> 2] | 0, $37 | 0, tempRet0 | 0) | 0; //@line 19684
     $46 = tempRet0; //@line 19685
     $47 = $16; //@line 19686
     HEAP32[$47 >> 2] = $45; //@line 19688
     HEAP32[$47 + 4 >> 2] = $46; //@line 19691
     if ($46 >>> 0 < 0 | ($46 | 0) == 0 & $45 >>> 0 < $26 >>> 0) {
      $101 = $33; //@line 19698
      $102 = $34; //@line 19698
      break;
     }
     $56 = _i64Add($33 | 0, $34 | 0, 1, 0) | 0; //@line 19701
     $57 = tempRet0; //@line 19702
     $58 = _i64Subtract($45 | 0, $46 | 0, $26 | 0, 0) | 0; //@line 19703
     $60 = $16; //@line 19705
     HEAP32[$60 >> 2] = $58; //@line 19707
     HEAP32[$60 + 4 >> 2] = tempRet0; //@line 19710
     $101 = $56; //@line 19711
     $102 = $57; //@line 19711
     break;
    }
   }
  } while (0);
  $95 = $12; //@line 19716
  $103 = _i64Add(HEAP32[$95 >> 2] | 0, HEAP32[$95 + 4 >> 2] | 0, $101 | 0, $102 | 0) | 0; //@line 19722
  $105 = $12; //@line 19724
  HEAP32[$105 >> 2] = $103; //@line 19726
  HEAP32[$105 + 4 >> 2] = tempRet0; //@line 19729
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 19731
 _schedule_interrupt($4); //@line 19732
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 609; //@line 19735
  sp = STACKTOP; //@line 19736
  return;
 }
 ___async_unwind = 0; //@line 19739
 HEAP32[$ReallocAsyncCtx5 >> 2] = 609; //@line 19740
 sp = STACKTOP; //@line 19741
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_35($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20916
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20918
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20920
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20922
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20924
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20926
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20928
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20932
 $17 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 20933
 if (!$17) {
  $28 = $8 + 12 | 0; //@line 20937
  HEAP32[$8 >> 2] = 453; //@line 20938
  HEAP32[$8 + 4 >> 2] = 0; //@line 20940
  HEAP32[$8 + 8 >> 2] = $2; //@line 20942
  HEAP32[$28 >> 2] = 860; //@line 20943
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 20944
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1836 | 0, $8); //@line 20945
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 454; //@line 20948
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 20949
   HEAP32[$29 >> 2] = $28; //@line 20950
   $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 20951
   HEAP32[$30 >> 2] = $2; //@line 20952
   $31 = $ReallocAsyncCtx6 + 12 | 0; //@line 20953
   HEAP32[$31 >> 2] = $4; //@line 20954
   $32 = $ReallocAsyncCtx6 + 16 | 0; //@line 20955
   HEAP32[$32 >> 2] = $6; //@line 20956
   $33 = $ReallocAsyncCtx6 + 20 | 0; //@line 20957
   HEAP32[$33 >> 2] = $8; //@line 20958
   $34 = $ReallocAsyncCtx6 + 24 | 0; //@line 20959
   HEAP32[$34 >> 2] = $10; //@line 20960
   $35 = $ReallocAsyncCtx6 + 28 | 0; //@line 20961
   HEAP32[$35 >> 2] = $12; //@line 20962
   sp = STACKTOP; //@line 20963
   return;
  }
  ___async_unwind = 0; //@line 20966
  HEAP32[$ReallocAsyncCtx6 >> 2] = 454; //@line 20967
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 20968
  HEAP32[$29 >> 2] = $28; //@line 20969
  $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 20970
  HEAP32[$30 >> 2] = $2; //@line 20971
  $31 = $ReallocAsyncCtx6 + 12 | 0; //@line 20972
  HEAP32[$31 >> 2] = $4; //@line 20973
  $32 = $ReallocAsyncCtx6 + 16 | 0; //@line 20974
  HEAP32[$32 >> 2] = $6; //@line 20975
  $33 = $ReallocAsyncCtx6 + 20 | 0; //@line 20976
  HEAP32[$33 >> 2] = $8; //@line 20977
  $34 = $ReallocAsyncCtx6 + 24 | 0; //@line 20978
  HEAP32[$34 >> 2] = $10; //@line 20979
  $35 = $ReallocAsyncCtx6 + 28 | 0; //@line 20980
  HEAP32[$35 >> 2] = $12; //@line 20981
  sp = STACKTOP; //@line 20982
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 20986
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 20987
  FUNCTION_TABLE_vi[$20 & 1023]($16); //@line 20988
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 452; //@line 20991
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 20992
   HEAP32[$21 >> 2] = $2; //@line 20993
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 20994
   HEAP32[$22 >> 2] = $8; //@line 20995
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 20996
   HEAP32[$23 >> 2] = $6; //@line 20997
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 20998
   HEAP32[$24 >> 2] = $4; //@line 20999
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 21000
   HEAP32[$25 >> 2] = $10; //@line 21001
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 21002
   HEAP32[$26 >> 2] = $12; //@line 21003
   sp = STACKTOP; //@line 21004
   return;
  }
  ___async_unwind = 0; //@line 21007
  HEAP32[$ReallocAsyncCtx2 >> 2] = 452; //@line 21008
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 21009
  HEAP32[$21 >> 2] = $2; //@line 21010
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 21011
  HEAP32[$22 >> 2] = $8; //@line 21012
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 21013
  HEAP32[$23 >> 2] = $6; //@line 21014
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 21015
  HEAP32[$24 >> 2] = $4; //@line 21016
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 21017
  HEAP32[$25 >> 2] = $10; //@line 21018
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 21019
  HEAP32[$26 >> 2] = $12; //@line 21020
  sp = STACKTOP; //@line 21021
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13877
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13881
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 13884
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13886
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13888
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13889
 $11 = $4 + 12 | 0; //@line 13890
 HEAP32[$11 >> 2] = $$pre$i; //@line 13891
 $12 = $6 & 1; //@line 13892
 if (!$$pre$i) {
  $22 = $8 + 12 | 0; //@line 13895
  HEAP32[$22 >> 2] = 0; //@line 13896
  $23 = $8 + 16 | 0; //@line 13897
  HEAP8[$23 >> 0] = $12; //@line 13898
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 13899
  $24 = _equeue_alloc($10, 20) | 0; //@line 13900
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 208; //@line 13903
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 13904
   HEAP32[$25 >> 2] = $22; //@line 13905
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 13906
   HEAP32[$26 >> 2] = $23; //@line 13907
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 13908
   HEAP32[$27 >> 2] = $10; //@line 13909
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 13910
   HEAP32[$28 >> 2] = $22; //@line 13911
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 13912
   HEAP32[$29 >> 2] = $11; //@line 13913
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 13914
   HEAP32[$30 >> 2] = $8; //@line 13915
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 13916
   HEAP32[$31 >> 2] = $4; //@line 13917
   sp = STACKTOP; //@line 13918
   return;
  }
  HEAP32[___async_retval >> 2] = $24; //@line 13922
  ___async_unwind = 0; //@line 13923
  HEAP32[$ReallocAsyncCtx7 >> 2] = 208; //@line 13924
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 13925
  HEAP32[$25 >> 2] = $22; //@line 13926
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 13927
  HEAP32[$26 >> 2] = $23; //@line 13928
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 13929
  HEAP32[$27 >> 2] = $10; //@line 13930
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 13931
  HEAP32[$28 >> 2] = $22; //@line 13932
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 13933
  HEAP32[$29 >> 2] = $11; //@line 13934
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 13935
  HEAP32[$30 >> 2] = $8; //@line 13936
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 13937
  HEAP32[$31 >> 2] = $4; //@line 13938
  sp = STACKTOP; //@line 13939
  return;
 } else {
  $15 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 13944
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 13945
  FUNCTION_TABLE_vii[$15 & 15]($8, $4); //@line 13946
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 207; //@line 13949
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 13950
   HEAP32[$16 >> 2] = $11; //@line 13951
   $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 13952
   HEAP8[$17 >> 0] = $12; //@line 13953
   $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 13954
   HEAP32[$18 >> 2] = $11; //@line 13955
   $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 13956
   HEAP32[$19 >> 2] = $8; //@line 13957
   $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 13958
   HEAP32[$20 >> 2] = $10; //@line 13959
   $21 = $ReallocAsyncCtx2 + 24 | 0; //@line 13960
   HEAP32[$21 >> 2] = $4; //@line 13961
   sp = STACKTOP; //@line 13962
   return;
  }
  ___async_unwind = 0; //@line 13965
  HEAP32[$ReallocAsyncCtx2 >> 2] = 207; //@line 13966
  $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 13967
  HEAP32[$16 >> 2] = $11; //@line 13968
  $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 13969
  HEAP8[$17 >> 0] = $12; //@line 13970
  $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 13971
  HEAP32[$18 >> 2] = $11; //@line 13972
  $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 13973
  HEAP32[$19 >> 2] = $8; //@line 13974
  $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 13975
  HEAP32[$20 >> 2] = $10; //@line 13976
  $21 = $ReallocAsyncCtx2 + 24 | 0; //@line 13977
  HEAP32[$21 >> 2] = $4; //@line 13978
  sp = STACKTOP; //@line 13979
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 12679
 L1 : do {
  switch (HEAP32[$0 + 1168 >> 2] | 0) {
  case 0:
   {
    $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12686
    __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 12687
    if (___async) {
     HEAP32[$AsyncCtx19 >> 2] = 393; //@line 12690
     HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 12692
     HEAP32[$AsyncCtx19 + 8 >> 2] = $1; //@line 12694
     HEAP16[$AsyncCtx19 + 12 >> 1] = $2; //@line 12696
     HEAP16[$AsyncCtx19 + 14 >> 1] = $3; //@line 12698
     HEAP8[$AsyncCtx19 + 16 >> 0] = $4; //@line 12700
     sp = STACKTOP; //@line 12701
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12704
     break L1;
    }
    break;
   }
  case 1:
   {
    $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12711
    __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 12712
    if (___async) {
     HEAP32[$AsyncCtx15 >> 2] = 394; //@line 12715
     HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12717
     HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 12719
     HEAP16[$AsyncCtx15 + 12 >> 1] = $2; //@line 12721
     HEAP16[$AsyncCtx15 + 14 >> 1] = $3; //@line 12723
     HEAP8[$AsyncCtx15 + 16 >> 0] = $4; //@line 12725
     sp = STACKTOP; //@line 12726
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12729
     break L1;
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 do {
  if ((HEAP32[$0 + 2380 >> 2] | 0) == 2) {
   if (!(HEAP8[$0 + 2377 >> 0] | 0)) {
    $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12747
    __ZN7LoRaMac15open_rx2_windowEv($0); //@line 12748
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 395; //@line 12751
     HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 12753
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 12755
     HEAP16[$AsyncCtx7 + 12 >> 1] = $2; //@line 12757
     HEAP16[$AsyncCtx7 + 14 >> 1] = $3; //@line 12759
     HEAP8[$AsyncCtx7 + 16 >> 0] = $4; //@line 12761
     sp = STACKTOP; //@line 12762
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12765
     break;
    }
   }
  } else {
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12771
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 12772
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 396; //@line 12775
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 12777
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 12779
    HEAP16[$AsyncCtx11 + 12 >> 1] = $2; //@line 12781
    HEAP16[$AsyncCtx11 + 14 >> 1] = $3; //@line 12783
    HEAP8[$AsyncCtx11 + 16 >> 0] = $4; //@line 12785
    sp = STACKTOP; //@line 12786
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12789
    break;
   }
  }
 } while (0);
 $trunc = (HEAPU8[$1 >> 0] | 0) >>> 5; //@line 12795
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$0 + 2376 >> 0] | 0) {
    HEAP8[$0 + 2084 >> 0] = 0; //@line 12804
    return;
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12807
   __ZN7LoRaMac24handle_join_accept_frameEPKht($0, $1, $2); //@line 12808
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 397; //@line 12811
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12813
    sp = STACKTOP; //@line 12814
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12817
   HEAP8[$0 + 2084 >> 0] = 1; //@line 12819
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12824
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($0, $1, $2, 1, $trunc, $3, $4); //@line 12825
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 398; //@line 12828
    sp = STACKTOP; //@line 12829
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 12832
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27146
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27148
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27152
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27154
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27156
 $$pre$i = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 27157
 $11 = $2 + 12 | 0; //@line 27158
 HEAP32[$11 >> 2] = $$pre$i; //@line 27159
 if (!$$pre$i) {
  $21 = $6 + 12 | 0; //@line 27162
  HEAP32[$21 >> 2] = 0; //@line 27163
  $22 = $6 + 16 | 0; //@line 27164
  HEAP32[$22 >> 2] = $8; //@line 27165
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 27166
  $23 = _equeue_alloc($10, 20) | 0; //@line 27167
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 254; //@line 27170
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 27171
   HEAP32[$24 >> 2] = $2; //@line 27172
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 27173
   HEAP32[$25 >> 2] = $11; //@line 27174
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 27175
   HEAP32[$26 >> 2] = $21; //@line 27176
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 27177
   HEAP32[$27 >> 2] = $22; //@line 27178
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 27179
   HEAP32[$28 >> 2] = $10; //@line 27180
   $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 27181
   HEAP32[$29 >> 2] = $21; //@line 27182
   $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 27183
   HEAP32[$30 >> 2] = $6; //@line 27184
   sp = STACKTOP; //@line 27185
   return;
  }
  HEAP32[___async_retval >> 2] = $23; //@line 27189
  ___async_unwind = 0; //@line 27190
  HEAP32[$ReallocAsyncCtx7 >> 2] = 254; //@line 27191
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 27192
  HEAP32[$24 >> 2] = $2; //@line 27193
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 27194
  HEAP32[$25 >> 2] = $11; //@line 27195
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 27196
  HEAP32[$26 >> 2] = $21; //@line 27197
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 27198
  HEAP32[$27 >> 2] = $22; //@line 27199
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 27200
  HEAP32[$28 >> 2] = $10; //@line 27201
  $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 27202
  HEAP32[$29 >> 2] = $21; //@line 27203
  $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 27204
  HEAP32[$30 >> 2] = $6; //@line 27205
  sp = STACKTOP; //@line 27206
  return;
 } else {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 27211
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 27212
  FUNCTION_TABLE_vii[$14 & 15]($6, $2); //@line 27213
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 253; //@line 27216
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 27217
   HEAP32[$15 >> 2] = $2; //@line 27218
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 27219
   HEAP32[$16 >> 2] = $6; //@line 27220
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 27221
   HEAP32[$17 >> 2] = $11; //@line 27222
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 27223
   HEAP32[$18 >> 2] = $8; //@line 27224
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 27225
   HEAP32[$19 >> 2] = $10; //@line 27226
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 27227
   HEAP32[$20 >> 2] = $11; //@line 27228
   sp = STACKTOP; //@line 27229
   return;
  }
  ___async_unwind = 0; //@line 27232
  HEAP32[$ReallocAsyncCtx2 >> 2] = 253; //@line 27233
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 27234
  HEAP32[$15 >> 2] = $2; //@line 27235
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 27236
  HEAP32[$16 >> 2] = $6; //@line 27237
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 27238
  HEAP32[$17 >> 2] = $11; //@line 27239
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 27240
  HEAP32[$18 >> 2] = $8; //@line 27241
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 27242
  HEAP32[$19 >> 2] = $10; //@line 27243
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 27244
  HEAP32[$20 >> 2] = $11; //@line 27245
  sp = STACKTOP; //@line 27246
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21316
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21318
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21320
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21322
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21324
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21326
 $12 = $0 + 24 | 0; //@line 21328
 $14 = HEAP32[$12 >> 2] | 0; //@line 21330
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 21333
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 21335
 $20 = HEAP32[$2 >> 2] | 0; //@line 21336
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 21340
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 21341
  FUNCTION_TABLE_vii[$23 & 15]($6, $8); //@line 21342
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 84; //@line 21345
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 21346
   HEAP32[$24 >> 2] = $2; //@line 21347
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 21348
   HEAP32[$25 >> 2] = $4; //@line 21349
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 21350
   HEAP32[$26 >> 2] = $10; //@line 21351
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 21352
   $28 = $27; //@line 21353
   $29 = $28; //@line 21354
   HEAP32[$29 >> 2] = $14; //@line 21355
   $30 = $28 + 4 | 0; //@line 21356
   $31 = $30; //@line 21357
   HEAP32[$31 >> 2] = $17; //@line 21358
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 21359
   HEAP32[$32 >> 2] = $19; //@line 21360
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 21361
   HEAP32[$33 >> 2] = $8; //@line 21362
   sp = STACKTOP; //@line 21363
   return;
  }
  ___async_unwind = 0; //@line 21366
  HEAP32[$ReallocAsyncCtx2 >> 2] = 84; //@line 21367
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 21368
  HEAP32[$24 >> 2] = $2; //@line 21369
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 21370
  HEAP32[$25 >> 2] = $4; //@line 21371
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 21372
  HEAP32[$26 >> 2] = $10; //@line 21373
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 21374
  $28 = $27; //@line 21375
  $29 = $28; //@line 21376
  HEAP32[$29 >> 2] = $14; //@line 21377
  $30 = $28 + 4 | 0; //@line 21378
  $31 = $30; //@line 21379
  HEAP32[$31 >> 2] = $17; //@line 21380
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 21381
  HEAP32[$32 >> 2] = $19; //@line 21382
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 21383
  HEAP32[$33 >> 2] = $8; //@line 21384
  sp = STACKTOP; //@line 21385
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 21388
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 21389
 $34 = HEAP32[$2 >> 2] | 0; //@line 21390
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 21394
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 21395
  FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 21396
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 21399
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 21400
   HEAP32[$38 >> 2] = $19; //@line 21401
   sp = STACKTOP; //@line 21402
   return;
  }
  ___async_unwind = 0; //@line 21405
  HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 21406
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 21407
  HEAP32[$38 >> 2] = $19; //@line 21408
  sp = STACKTOP; //@line 21409
  return;
 }
 $40 = HEAP32[$19 + 788 >> 2] | 0; //@line 21413
 if (!$40) {
  return;
 }
 $43 = HEAP32[$40 + 60 >> 2] | 0; //@line 21419
 if (!$43) {
  return;
 }
 $46 = HEAP32[$43 >> 2] | 0; //@line 21425
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 21426
 FUNCTION_TABLE_vi[$46 & 1023]($40 + 48 | 0); //@line 21427
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 21430
  sp = STACKTOP; //@line 21431
  return;
 }
 ___async_unwind = 0; //@line 21434
 HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 21435
 sp = STACKTOP; //@line 21436
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_383($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28993
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28995
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28997
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29001
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29003
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29005
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 29008
 $15 = $4 + 24 | 0; //@line 29009
 do {
  if ((HEAP32[$0 + 12 >> 2] | 0) > 1) {
   $18 = HEAP32[$4 + 8 >> 2] | 0; //@line 29014
   if (!($18 & 2)) {
    $21 = $8 + 36 | 0; //@line 29018
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $8 + 54 | 0; //@line 29025
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 29036
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $8, $10, $12, $14); //@line 29037
      if (!___async) {
       ___async_unwind = 0; //@line 29040
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 689; //@line 29042
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 29044
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 29046
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 29048
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 29050
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 29052
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 29054
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $12; //@line 29056
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $14 & 1; //@line 29059
      sp = STACKTOP; //@line 29060
      return;
     }
     $36 = $8 + 24 | 0; //@line 29063
     $37 = $8 + 54 | 0; //@line 29064
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 29079
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $8, $10, $12, $14); //@line 29080
     if (!___async) {
      ___async_unwind = 0; //@line 29083
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 688; //@line 29085
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 29087
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 29089
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 29091
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 29093
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 29095
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $8; //@line 29097
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $10; //@line 29099
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $12; //@line 29101
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $14 & 1; //@line 29104
     sp = STACKTOP; //@line 29105
     return;
    }
   }
   $24 = $8 + 54 | 0; //@line 29109
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 29113
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $8, $10, $12, $14); //@line 29114
    if (!___async) {
     ___async_unwind = 0; //@line 29117
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 687; //@line 29119
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 29121
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 29123
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 29125
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 29127
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 29129
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 29131
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 29134
    sp = STACKTOP; //@line 29135
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_108($0) {
 $0 = $0 | 0;
 var $$pr = 0, $$pre17 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 26357
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26359
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26361
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26363
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26365
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26367
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26369
 $$pre17 = HEAP32[$2 >> 2] | 0; //@line 26370
 if ($$pre17 | 0) {
  $15 = HEAP32[$$pre17 + 4 >> 2] | 0; //@line 26374
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 26375
  FUNCTION_TABLE_vii[$15 & 15]($8, $10); //@line 26376
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 26379
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 26380
   HEAP32[$16 >> 2] = $2; //@line 26381
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 26382
   HEAP32[$17 >> 2] = $4; //@line 26383
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 26384
   HEAP32[$18 >> 2] = $6; //@line 26385
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 26386
   HEAP32[$19 >> 2] = $12; //@line 26387
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 26388
   HEAP32[$20 >> 2] = $10; //@line 26389
   sp = STACKTOP; //@line 26390
   return;
  }
  ___async_unwind = 0; //@line 26393
  HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 26394
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 26395
  HEAP32[$16 >> 2] = $2; //@line 26396
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 26397
  HEAP32[$17 >> 2] = $4; //@line 26398
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 26399
  HEAP32[$18 >> 2] = $6; //@line 26400
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 26401
  HEAP32[$19 >> 2] = $12; //@line 26402
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 26403
  HEAP32[$20 >> 2] = $10; //@line 26404
  sp = STACKTOP; //@line 26405
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 26408
 $$pr = HEAP32[$2 >> 2] | 0; //@line 26409
 if (!$$pr) {
  $27 = $12 + 12 | 0; //@line 26412
  HEAP32[$27 >> 2] = 0; //@line 26413
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 26414
  __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $12); //@line 26415
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 345; //@line 26418
   $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 26419
   HEAP32[$28 >> 2] = $27; //@line 26420
   $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 26421
   HEAP32[$29 >> 2] = $12; //@line 26422
   sp = STACKTOP; //@line 26423
   return;
  }
  ___async_unwind = 0; //@line 26426
  HEAP32[$ReallocAsyncCtx9 >> 2] = 345; //@line 26427
  $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 26428
  HEAP32[$28 >> 2] = $27; //@line 26429
  $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 26430
  HEAP32[$29 >> 2] = $12; //@line 26431
  sp = STACKTOP; //@line 26432
  return;
 } else {
  $23 = HEAP32[$$pr + 4 >> 2] | 0; //@line 26436
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 26437
  FUNCTION_TABLE_vii[$23 & 15]($12, $10); //@line 26438
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 26441
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 26442
   HEAP32[$24 >> 2] = $2; //@line 26443
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 26444
   HEAP32[$25 >> 2] = $6; //@line 26445
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 26446
   HEAP32[$26 >> 2] = $12; //@line 26447
   sp = STACKTOP; //@line 26448
   return;
  }
  ___async_unwind = 0; //@line 26451
  HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 26452
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 26453
  HEAP32[$24 >> 2] = $2; //@line 26454
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 26455
  HEAP32[$25 >> 2] = $6; //@line 26456
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 26457
  HEAP32[$26 >> 2] = $12; //@line 26458
  sp = STACKTOP; //@line 26459
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16998
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 17003
 } else {
  $9 = $1 + 52 | 0; //@line 17005
  $10 = HEAP8[$9 >> 0] | 0; //@line 17006
  $11 = $1 + 53 | 0; //@line 17007
  $12 = HEAP8[$11 >> 0] | 0; //@line 17008
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 17011
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 17012
  HEAP8[$9 >> 0] = 0; //@line 17013
  HEAP8[$11 >> 0] = 0; //@line 17014
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 17015
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 17016
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 683; //@line 17019
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 17021
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17023
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 17025
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 17027
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 17029
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 17031
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 17033
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 17035
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 17037
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 17039
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 17042
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 17044
   sp = STACKTOP; //@line 17045
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17048
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 17053
    $32 = $0 + 8 | 0; //@line 17054
    $33 = $1 + 54 | 0; //@line 17055
    $$0 = $0 + 24 | 0; //@line 17056
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 17089
     HEAP8[$11 >> 0] = 0; //@line 17090
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 17091
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 17092
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17097
     $62 = $$0 + 8 | 0; //@line 17098
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 17101
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 684; //@line 17106
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 17108
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 17110
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 17112
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 17114
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 17116
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 17118
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 17120
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 17122
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 17124
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 17126
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 17128
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 17130
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 17132
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 17135
    sp = STACKTOP; //@line 17136
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 17140
  HEAP8[$11 >> 0] = $12; //@line 17141
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13421
      $10 = HEAP32[$9 >> 2] | 0; //@line 13422
      HEAP32[$2 >> 2] = $9 + 4; //@line 13424
      HEAP32[$0 >> 2] = $10; //@line 13425
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13441
      $17 = HEAP32[$16 >> 2] | 0; //@line 13442
      HEAP32[$2 >> 2] = $16 + 4; //@line 13444
      $20 = $0; //@line 13447
      HEAP32[$20 >> 2] = $17; //@line 13449
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 13452
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13468
      $30 = HEAP32[$29 >> 2] | 0; //@line 13469
      HEAP32[$2 >> 2] = $29 + 4; //@line 13471
      $31 = $0; //@line 13472
      HEAP32[$31 >> 2] = $30; //@line 13474
      HEAP32[$31 + 4 >> 2] = 0; //@line 13477
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13493
      $41 = $40; //@line 13494
      $43 = HEAP32[$41 >> 2] | 0; //@line 13496
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 13499
      HEAP32[$2 >> 2] = $40 + 8; //@line 13501
      $47 = $0; //@line 13502
      HEAP32[$47 >> 2] = $43; //@line 13504
      HEAP32[$47 + 4 >> 2] = $46; //@line 13507
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13523
      $57 = HEAP32[$56 >> 2] | 0; //@line 13524
      HEAP32[$2 >> 2] = $56 + 4; //@line 13526
      $59 = ($57 & 65535) << 16 >> 16; //@line 13528
      $62 = $0; //@line 13531
      HEAP32[$62 >> 2] = $59; //@line 13533
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 13536
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13552
      $72 = HEAP32[$71 >> 2] | 0; //@line 13553
      HEAP32[$2 >> 2] = $71 + 4; //@line 13555
      $73 = $0; //@line 13557
      HEAP32[$73 >> 2] = $72 & 65535; //@line 13559
      HEAP32[$73 + 4 >> 2] = 0; //@line 13562
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13578
      $83 = HEAP32[$82 >> 2] | 0; //@line 13579
      HEAP32[$2 >> 2] = $82 + 4; //@line 13581
      $85 = ($83 & 255) << 24 >> 24; //@line 13583
      $88 = $0; //@line 13586
      HEAP32[$88 >> 2] = $85; //@line 13588
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 13591
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13607
      $98 = HEAP32[$97 >> 2] | 0; //@line 13608
      HEAP32[$2 >> 2] = $97 + 4; //@line 13610
      $99 = $0; //@line 13612
      HEAP32[$99 >> 2] = $98 & 255; //@line 13614
      HEAP32[$99 + 4 >> 2] = 0; //@line 13617
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13633
      $109 = +HEAPF64[$108 >> 3]; //@line 13634
      HEAP32[$2 >> 2] = $108 + 8; //@line 13636
      HEAPF64[$0 >> 3] = $109; //@line 13637
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13653
      $116 = +HEAPF64[$115 >> 3]; //@line 13654
      HEAP32[$2 >> 2] = $115 + 8; //@line 13656
      HEAPF64[$0 >> 3] = $116; //@line 13657
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_268($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $24 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $41 = 0, $44 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20341
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20347
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20349
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 20351
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20353
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20355
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20357
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $21 = HEAP32[$6 >> 2] | 0; //@line 20364
   $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 16 >> 2] | 0; //@line 20367
   $29 = HEAP32[$8 + 8 >> 2] & 65535; //@line 20372
   $32 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 20375
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 20376
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$24 & 1]($21, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $29, 0, 0, 1, 0, 0, 0, $32); //@line 20377
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 508; //@line 20380
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 20381
    HEAP32[$33 >> 2] = $8; //@line 20382
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 20383
    HEAP32[$34 >> 2] = $12; //@line 20384
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 20385
    HEAP32[$35 >> 2] = $14; //@line 20386
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 20387
    HEAP32[$36 >> 2] = $16; //@line 20388
    $37 = $ReallocAsyncCtx6 + 20 | 0; //@line 20389
    HEAP32[$37 >> 2] = $6; //@line 20390
    sp = STACKTOP; //@line 20391
    return;
   }
   ___async_unwind = 0; //@line 20394
   HEAP32[$ReallocAsyncCtx6 >> 2] = 508; //@line 20395
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 20396
   HEAP32[$33 >> 2] = $8; //@line 20397
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 20398
   HEAP32[$34 >> 2] = $12; //@line 20399
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 20400
   HEAP32[$35 >> 2] = $14; //@line 20401
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 20402
   HEAP32[$36 >> 2] = $16; //@line 20403
   $37 = $ReallocAsyncCtx6 + 20 | 0; //@line 20404
   HEAP32[$37 >> 2] = $6; //@line 20405
   sp = STACKTOP; //@line 20406
   return;
  }
 }
 $38 = HEAP32[$6 >> 2] | 0; //@line 20410
 $41 = HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] | 0; //@line 20413
 $44 = HEAPU8[$8 + 2 >> 0] | 0; //@line 20416
 $48 = HEAP32[$8 + 8 >> 2] & 65535; //@line 20420
 $51 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 20423
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 20424
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$41 & 1]($38, 1, $44, $10 & 255, 1, 0, 8, $48, 0, 0, 0, 0, 0, 1, $51); //@line 20425
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 509; //@line 20428
  $52 = $ReallocAsyncCtx7 + 4 | 0; //@line 20429
  HEAP32[$52 >> 2] = $8; //@line 20430
  $53 = $ReallocAsyncCtx7 + 8 | 0; //@line 20431
  HEAP32[$53 >> 2] = $12; //@line 20432
  $54 = $ReallocAsyncCtx7 + 12 | 0; //@line 20433
  HEAP32[$54 >> 2] = $14; //@line 20434
  $55 = $ReallocAsyncCtx7 + 16 | 0; //@line 20435
  HEAP32[$55 >> 2] = $16; //@line 20436
  $56 = $ReallocAsyncCtx7 + 20 | 0; //@line 20437
  HEAP32[$56 >> 2] = $6; //@line 20438
  sp = STACKTOP; //@line 20439
  return;
 }
 ___async_unwind = 0; //@line 20442
 HEAP32[$ReallocAsyncCtx7 >> 2] = 509; //@line 20443
 $52 = $ReallocAsyncCtx7 + 4 | 0; //@line 20444
 HEAP32[$52 >> 2] = $8; //@line 20445
 $53 = $ReallocAsyncCtx7 + 8 | 0; //@line 20446
 HEAP32[$53 >> 2] = $12; //@line 20447
 $54 = $ReallocAsyncCtx7 + 12 | 0; //@line 20448
 HEAP32[$54 >> 2] = $14; //@line 20449
 $55 = $ReallocAsyncCtx7 + 16 | 0; //@line 20450
 HEAP32[$55 >> 2] = $16; //@line 20451
 $56 = $ReallocAsyncCtx7 + 20 | 0; //@line 20452
 HEAP32[$56 >> 2] = $6; //@line 20453
 sp = STACKTOP; //@line 20454
 return;
}
function __ZN7LoRaMac15send_ongoing_txEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14799
 STACKTOP = STACKTOP + 16 | 0; //@line 14800
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14800
 $1 = sp + 1 | 0; //@line 14801
 $2 = sp; //@line 14802
 HEAP8[$0 + 1180 >> 0] = 0; //@line 14804
 $4 = $0 + 1877 | 0; //@line 14805
 $5 = HEAP8[$4 >> 0] | 0; //@line 14806
 $6 = $0 + 4 | 0; //@line 14807
 if ($5 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv($6) | 0) << 24 >> 24) {
  $21 = $5; //@line 14811
 } else {
  $21 = __ZN7LoRaPHY23get_minimum_tx_datarateEv($6) | 0; //@line 14814
 }
 HEAP8[$2 >> 0] = 0; //@line 14816
 $10 = $0 + 2052 | 0; //@line 14817
 HEAP32[$10 >> 2] = 0; //@line 14818
 HEAP32[$10 + 4 >> 2] = 0; //@line 14818
 HEAP32[$10 + 8 >> 2] = 0; //@line 14818
 HEAP32[$10 + 12 >> 2] = 0; //@line 14818
 HEAP32[$10 + 16 >> 2] = 0; //@line 14818
 HEAP32[$10 + 20 >> 2] = 0; //@line 14818
 HEAP32[$0 + 2056 >> 2] = 1; //@line 14820
 HEAP8[$0 + 1699 >> 0] = 1; //@line 14822
 $13 = $0 + 1698 | 0; //@line 14823
 HEAP8[$13 >> 0] = 1; //@line 14824
 $14 = $0 + 2108 | 0; //@line 14825
 switch (HEAP32[$14 >> 2] | 0) {
 case 0:
  {
   HEAP8[$2 >> 0] = 64; //@line 14829
   break;
  }
 case 1:
  {
   HEAP8[$2 >> 0] = -128; //@line 14833
   HEAP8[$13 >> 0] = HEAP8[$0 + 2114 >> 0] | 0; //@line 14836
   break;
  }
 case 3:
  {
   HEAP8[$2 >> 0] = -32; //@line 14840
   break;
  }
 default:
  {
   $$0 = -1002; //@line 14844
   STACKTOP = sp; //@line 14845
   return $$0 | 0; //@line 14845
  }
 }
 $18 = $0 + 1936 | 0; //@line 14848
 do {
  if (!(HEAP8[$18 >> 0] | 0)) {
   if (__ZN7LoRaPHY18verify_tx_datarateEhb($6, $21, 0) | 0) {
    HEAP8[$4 >> 0] = $21; //@line 14855
    $28 = HEAP8[$18 >> 0] << 7 & 255; //@line 14858
    break;
   } else {
    $$0 = -1003; //@line 14861
    STACKTOP = sp; //@line 14862
    return $$0 | 0; //@line 14862
   }
  } else {
   $28 = -128; //@line 14865
  }
 } while (0);
 $24 = HEAP8[$0 + 2112 >> 0] | 0; //@line 14869
 $27 = HEAP16[$0 + 2370 >> 1] | 0; //@line 14872
 HEAP8[$1 >> 0] = $28; //@line 14873
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 14874
 $29 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $2, $1, $24, $0 + 2115 | 0, $27) | 0; //@line 14875
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 435; //@line 14878
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14880
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 14882
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 14884
  HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 14886
  sp = STACKTOP; //@line 14887
  STACKTOP = sp; //@line 14888
  return 0; //@line 14888
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14890
 if ($29 | 0) {
  $$0 = $29; //@line 14893
  STACKTOP = sp; //@line 14894
  return $$0 | 0; //@line 14894
 }
 HEAP8[$0 + 2063 >> 0] = 0; //@line 14897
 HEAP8[$0 + 2062 >> 0] = 0; //@line 14899
 HEAP32[$0 + 2068 >> 2] = HEAP32[$0 + 1760 >> 2]; //@line 14903
 $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14904
 $40 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14905
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 436; //@line 14908
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 14910
  HEAP32[$AsyncCtx2 + 8 >> 2] = $14; //@line 14912
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 14914
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 14916
  sp = STACKTOP; //@line 14917
  STACKTOP = sp; //@line 14918
  return 0; //@line 14918
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14920
 if ($40 | 0) {
  $$0 = $40; //@line 14923
  STACKTOP = sp; //@line 14924
  return $$0 | 0; //@line 14924
 }
 HEAP32[$0 + 2052 >> 2] = HEAP32[$14 >> 2]; //@line 14928
 $$0 = 0; //@line 14929
 STACKTOP = sp; //@line 14930
 return $$0 | 0; //@line 14930
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 4801
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 4803
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4809
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4810
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 4811
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 158; //@line 4814
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4816
    sp = STACKTOP; //@line 4817
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4820
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 4826
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 4832
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4833
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 4834
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 159; //@line 4837
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 4839
    sp = STACKTOP; //@line 4840
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4843
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 4849
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 4855
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4856
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 4857
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 160; //@line 4860
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4862
    sp = STACKTOP; //@line 4863
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4866
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 4872
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 4878
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4879
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 4880
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 161; //@line 4883
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4885
    sp = STACKTOP; //@line 4886
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4889
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 4895
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 4901
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4902
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 4903
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 162; //@line 4906
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 4908
    sp = STACKTOP; //@line 4909
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 4912
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 4918
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 4924
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4925
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 4926
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 163; //@line 4929
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 4931
    sp = STACKTOP; //@line 4932
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 4935
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 4941
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 4947
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4948
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 4949
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 164; //@line 4952
  sp = STACKTOP; //@line 4953
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 4956
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb($0, $1, $2, $3, $trunc, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$1 = 0, $24 = 0, $25 = 0, $28 = 0, $32 = 0, $38 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10421
 STACKTOP = STACKTOP + 32 | 0; //@line 10422
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10422
 $vararg_buffer3 = sp + 16 | 0; //@line 10423
 $vararg_buffer1 = sp + 8 | 0; //@line 10424
 $vararg_buffer = sp; //@line 10425
 if (!(($2 | 0) != 0 | $4)) {
  $$1 = -1003; //@line 10429
  STACKTOP = sp; //@line 10430
  return $$1 | 0; //@line 10430
 }
 $7 = $0 + 2909 | 0; //@line 10432
 do {
  if (HEAP8[$7 >> 0] | 0) {
   if (HEAP32[$0 + 2496 >> 2] | 0) {
    HEAP8[$7 >> 0] = 1; //@line 10441
    if (!(HEAP32[$0 + 2528 >> 2] | 0)) {
     _mbed_tracef(2, 12187, 12694, $vararg_buffer); //@line 10446
     break;
    } else {
     __ZN7LoRaMac24setup_link_check_requestEv($0); //@line 10449
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$0 + 2548 >> 0] | 0)) {
  $$1 = -1017; //@line 10459
  STACKTOP = sp; //@line 10460
  return $$1 | 0; //@line 10460
 }
 if (__ZN7LoRaMac10tx_ongoingEv($0) | 0) {
  $$1 = -1001; //@line 10464
  STACKTOP = sp; //@line 10465
  return $$1 | 0; //@line 10465
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  $$1 = -1009; //@line 10469
  STACKTOP = sp; //@line 10470
  return $$1 | 0; //@line 10470
 }
 if (!($1 << 24 >> 24 != 0 | $5)) {
  _mbed_tracef(2, 12187, 12751, $vararg_buffer1); //@line 10475
  $$1 = -1015; //@line 10476
  STACKTOP = sp; //@line 10477
  return $$1 | 0; //@line 10477
 }
 HEAP8[$0 + 2908 >> 0] = $1; //@line 10480
 switch ($trunc & 15) {
 case 8:
 case 2:
 case 1:
  {
   break;
  }
 default:
  {
   _mbed_tracef(2, 12187, 12788, $vararg_buffer3); //@line 10487
   $$1 = -1003; //@line 10488
   STACKTOP = sp; //@line 10489
   return $$1 | 0; //@line 10489
  }
 }
 $24 = HEAP8[$0 + 2902 >> 0] | 0; //@line 10493
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10494
 $25 = __ZN7LoRaMac18prepare_ongoing_txEhPKhthh($0, $1, $2, $3, $trunc, $24) | 0; //@line 10495
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 353; //@line 10498
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 10500
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 10502
  sp = STACKTOP; //@line 10503
  STACKTOP = sp; //@line 10504
  return 0; //@line 10504
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10506
 $28 = $0 + 2496 | 0; //@line 10507
 switch (HEAP32[$28 >> 2] | 0) {
 case 5:
 case 2:
  {
   label = 18; //@line 10511
   break;
  }
 default:
  {
   if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2) {
    label = 18; //@line 10518
   } else {
    $$0 = -1e3; //@line 10520
   }
  }
 }
 if ((label | 0) == 18) {
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10525
  $32 = __ZN7LoRaMac15send_ongoing_txEv($0) | 0; //@line 10526
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 354; //@line 10529
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10531
   HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 10533
   HEAP32[$AsyncCtx + 12 >> 2] = $28; //@line 10535
   HEAP16[$AsyncCtx + 16 >> 1] = $25; //@line 10537
   sp = STACKTOP; //@line 10538
   STACKTOP = sp; //@line 10539
   return 0; //@line 10539
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10541
  if (!$32) {
   $38 = $0 + 2904 | 0; //@line 10544
   HEAP32[$38 >> 2] = HEAP32[$38 >> 2] & -18 | 1; //@line 10548
   __ZN7LoRaMac14set_tx_ongoingEb($0, 1); //@line 10549
   HEAP32[$28 >> 2] = 8; //@line 10550
   $$0 = 0; //@line 10551
  } else {
   $$0 = $32; //@line 10553
  }
 }
 $$1 = ($$0 | 0) == 0 ? $25 : $$0 & 65535; //@line 10559
 STACKTOP = sp; //@line 10560
 return $$1 | 0; //@line 10560
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_203($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15560
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15566
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15568
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15572
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15574
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15576
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 15578
 switch (HEAP32[$6 >> 2] | 0) {
 case 0:
  {
   _mbed_tracef(16, 12866, 13456, $8); //@line 15582
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 15584
   __ZN7LoRaPHY18put_radio_to_sleepEv($12 + 4 | 0); //@line 15585
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 439; //@line 15588
    $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 15589
    HEAP32[$18 >> 2] = $6; //@line 15590
    $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 15591
    HEAP32[$19 >> 2] = $14; //@line 15592
    $20 = $ReallocAsyncCtx5 + 12 | 0; //@line 15593
    HEAP32[$20 >> 2] = $16; //@line 15594
    $21 = $ReallocAsyncCtx5 + 16 | 0; //@line 15595
    HEAP32[$21 >> 2] = $12; //@line 15596
    sp = STACKTOP; //@line 15597
    return;
   }
   ___async_unwind = 0; //@line 15600
   HEAP32[$ReallocAsyncCtx5 >> 2] = 439; //@line 15601
   $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 15602
   HEAP32[$18 >> 2] = $6; //@line 15603
   $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 15604
   HEAP32[$19 >> 2] = $14; //@line 15605
   $20 = $ReallocAsyncCtx5 + 12 | 0; //@line 15606
   HEAP32[$20 >> 2] = $16; //@line 15607
   $21 = $ReallocAsyncCtx5 + 16 | 0; //@line 15608
   HEAP32[$21 >> 2] = $12; //@line 15609
   sp = STACKTOP; //@line 15610
   return;
  }
 case 2:
  {
   HEAP8[$12 + 1177 >> 0] = 0; //@line 15616
   $23 = $12 + 4 | 0; //@line 15617
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 15618
   __ZN7LoRaPHY18put_radio_to_sleepEv($23); //@line 15619
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 440; //@line 15622
    $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 15623
    HEAP32[$24 >> 2] = $12; //@line 15624
    $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 15625
    HEAP32[$25 >> 2] = $23; //@line 15626
    $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 15627
    HEAP32[$26 >> 2] = $6; //@line 15628
    $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 15629
    HEAP32[$27 >> 2] = $14; //@line 15630
    $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 15631
    HEAP32[$28 >> 2] = $16; //@line 15632
    sp = STACKTOP; //@line 15633
    return;
   }
   ___async_unwind = 0; //@line 15636
   HEAP32[$ReallocAsyncCtx4 >> 2] = 440; //@line 15637
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 15638
   HEAP32[$24 >> 2] = $12; //@line 15639
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 15640
   HEAP32[$25 >> 2] = $23; //@line 15641
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 15642
   HEAP32[$26 >> 2] = $6; //@line 15643
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 15644
   HEAP32[$27 >> 2] = $14; //@line 15645
   $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 15646
   HEAP32[$28 >> 2] = $16; //@line 15647
   sp = STACKTOP; //@line 15648
   return;
  }
 default:
  {
   if ((HEAP32[$6 >> 2] | 0) != 2) {
    return;
   }
   _mbed_tracef(16, 12866, 13492, $14); //@line 15658
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 15659
   __ZN7LoRaMac15open_rx2_windowEv($12); //@line 15660
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 441; //@line 15663
    sp = STACKTOP; //@line 15664
    return;
   }
   ___async_unwind = 0; //@line 15667
   HEAP32[$ReallocAsyncCtx3 >> 2] = 441; //@line 15668
   sp = STACKTOP; //@line 15669
   return;
  }
 }
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13345
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13347
 $4 = HEAP32[$2 + 1868 >> 2] | 0; //@line 13349
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 13354
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 13355
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1856 | 0); //@line 13356
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 362; //@line 13359
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 13360
   HEAP32[$9 >> 2] = $2; //@line 13361
   sp = STACKTOP; //@line 13362
   return;
  }
  ___async_unwind = 0; //@line 13365
  HEAP32[$ReallocAsyncCtx2 >> 2] = 362; //@line 13366
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 13367
  HEAP32[$9 >> 2] = $2; //@line 13368
  sp = STACKTOP; //@line 13369
  return;
 }
 $11 = HEAP32[$2 + 1848 >> 2] | 0; //@line 13373
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 13378
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 13379
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1836 | 0); //@line 13380
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 363; //@line 13383
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 13384
   HEAP32[$16 >> 2] = $2; //@line 13385
   sp = STACKTOP; //@line 13386
   return;
  }
  ___async_unwind = 0; //@line 13389
  HEAP32[$ReallocAsyncCtx3 >> 2] = 363; //@line 13390
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 13391
  HEAP32[$16 >> 2] = $2; //@line 13392
  sp = STACKTOP; //@line 13393
  return;
 }
 $18 = HEAP32[$2 + 1828 >> 2] | 0; //@line 13397
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 13402
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 13403
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 1816 | 0); //@line 13404
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 13407
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 13408
   HEAP32[$23 >> 2] = $2; //@line 13409
   sp = STACKTOP; //@line 13410
   return;
  }
  ___async_unwind = 0; //@line 13413
  HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 13414
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 13415
  HEAP32[$23 >> 2] = $2; //@line 13416
  sp = STACKTOP; //@line 13417
  return;
 }
 $25 = HEAP32[$2 + 1808 >> 2] | 0; //@line 13421
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 13426
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13427
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 1796 | 0); //@line 13428
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 13431
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 13432
   HEAP32[$30 >> 2] = $2; //@line 13433
   sp = STACKTOP; //@line 13434
   return;
  }
  ___async_unwind = 0; //@line 13437
  HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 13438
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 13439
  HEAP32[$30 >> 2] = $2; //@line 13440
  sp = STACKTOP; //@line 13441
  return;
 }
 $32 = HEAP32[$2 + 748 >> 2] | 0; //@line 13445
 if (!$32) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 13449
  return;
 }
 $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 13454
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 13455
 FUNCTION_TABLE_vi[$36 & 1023]($2 + 736 | 0); //@line 13456
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 13459
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 13460
  HEAP32[$37 >> 2] = $2; //@line 13461
  sp = STACKTOP; //@line 13462
  return;
 }
 ___async_unwind = 0; //@line 13465
 HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 13466
 $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 13467
 HEAP32[$37 >> 2] = $2; //@line 13468
 sp = STACKTOP; //@line 13469
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $18 = 0, $27 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18487
 $6 = $0 + 344 | 0; //@line 18488
 _mbedtls_cipher_init($6); //@line 18489
 $7 = _mbedtls_cipher_info_from_type(2) | 0; //@line 18490
 if (!$7) {
  $$0 = -24960; //@line 18493
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18495
  $9 = _mbedtls_cipher_setup($6, $7) | 0; //@line 18496
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 490; //@line 18499
   HEAP32[$AsyncCtx11 + 4 >> 2] = $6; //@line 18501
   HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 18503
   HEAP32[$AsyncCtx11 + 12 >> 2] = $4; //@line 18505
   HEAP16[$AsyncCtx11 + 16 >> 1] = $2; //@line 18507
   HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 18509
   HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 18511
   HEAP32[$AsyncCtx11 + 28 >> 2] = $5; //@line 18513
   sp = STACKTOP; //@line 18514
   return 0; //@line 18515
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18517
  if (!$9) {
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 18520
   $18 = _mbedtls_cipher_cmac_starts($6, $3, $4) | 0; //@line 18521
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 491; //@line 18524
    HEAP16[$AsyncCtx + 4 >> 1] = $2; //@line 18526
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 18528
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 18530
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 18532
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 18534
    sp = STACKTOP; //@line 18535
    return 0; //@line 18536
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 18538
   if (!$18) {
    $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 18543
    $27 = _mbedtls_cipher_cmac_update($6, $1, $2 & 255) | 0; //@line 18544
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 492; //@line 18547
     HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 18549
     HEAP32[$AsyncCtx7 + 8 >> 2] = $6; //@line 18551
     HEAP32[$AsyncCtx7 + 12 >> 2] = $5; //@line 18553
     sp = STACKTOP; //@line 18554
     return 0; //@line 18555
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18557
    if (!$27) {
     $32 = $0 + 16 | 0; //@line 18560
     $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18561
     $33 = _mbedtls_cipher_cmac_finish($6, $32) | 0; //@line 18562
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 493; //@line 18565
      HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 18567
      HEAP32[$AsyncCtx3 + 8 >> 2] = $32; //@line 18569
      HEAP32[$AsyncCtx3 + 12 >> 2] = $5; //@line 18571
      HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 18573
      sp = STACKTOP; //@line 18574
      return 0; //@line 18575
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18577
     if (!$33) {
      HEAP32[$5 >> 2] = (HEAPU8[$0 + 18 >> 0] | 0) << 16 | (HEAPU8[$0 + 19 >> 0] | 0) << 24 | (HEAPU8[$0 + 17 >> 0] | 0) << 8 | (HEAPU8[$32 >> 0] | 0); //@line 18597
      $$0 = 0; //@line 18598
     } else {
      $$0 = $33; //@line 18600
     }
    } else {
     $$0 = $27; //@line 18603
    }
   } else {
    $$0 = $18; //@line 18606
   }
  } else {
   $$0 = $9; //@line 18609
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18612
 _mbedtls_cipher_free($6); //@line 18613
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 494; //@line 18616
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 18618
  sp = STACKTOP; //@line 18619
  return 0; //@line 18620
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18622
  return $$0 | 0; //@line 18623
 }
 return 0; //@line 18625
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_34($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20812
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20816
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20818
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20820
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20822
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20824
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20826
 $15 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20827
 if (!$15) {
  $25 = $6 + 12 | 0; //@line 20831
  HEAP32[$6 >> 2] = 456; //@line 20832
  HEAP32[$6 + 4 >> 2] = 0; //@line 20834
  HEAP32[$6 + 8 >> 2] = $4; //@line 20836
  HEAP32[$25 >> 2] = 860; //@line 20837
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 20838
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($8, $4 + 1856 | 0, $6); //@line 20839
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 457; //@line 20842
   $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 20843
   HEAP32[$26 >> 2] = $25; //@line 20844
   $27 = $ReallocAsyncCtx5 + 8 | 0; //@line 20845
   HEAP32[$27 >> 2] = $8; //@line 20846
   $28 = $ReallocAsyncCtx5 + 12 | 0; //@line 20847
   HEAP32[$28 >> 2] = $4; //@line 20848
   $29 = $ReallocAsyncCtx5 + 16 | 0; //@line 20849
   HEAP32[$29 >> 2] = $12; //@line 20850
   $30 = $ReallocAsyncCtx5 + 20 | 0; //@line 20851
   HEAP32[$30 >> 2] = $14; //@line 20852
   $31 = $ReallocAsyncCtx5 + 24 | 0; //@line 20853
   HEAP32[$31 >> 2] = $6; //@line 20854
   sp = STACKTOP; //@line 20855
   return;
  }
  ___async_unwind = 0; //@line 20858
  HEAP32[$ReallocAsyncCtx5 >> 2] = 457; //@line 20859
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 20860
  HEAP32[$26 >> 2] = $25; //@line 20861
  $27 = $ReallocAsyncCtx5 + 8 | 0; //@line 20862
  HEAP32[$27 >> 2] = $8; //@line 20863
  $28 = $ReallocAsyncCtx5 + 12 | 0; //@line 20864
  HEAP32[$28 >> 2] = $4; //@line 20865
  $29 = $ReallocAsyncCtx5 + 16 | 0; //@line 20866
  HEAP32[$29 >> 2] = $12; //@line 20867
  $30 = $ReallocAsyncCtx5 + 20 | 0; //@line 20868
  HEAP32[$30 >> 2] = $14; //@line 20869
  $31 = $ReallocAsyncCtx5 + 24 | 0; //@line 20870
  HEAP32[$31 >> 2] = $6; //@line 20871
  sp = STACKTOP; //@line 20872
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 20876
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 20877
  FUNCTION_TABLE_vi[$18 & 1023]($10); //@line 20878
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 455; //@line 20881
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 20882
   HEAP32[$19 >> 2] = $4; //@line 20883
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 20884
   HEAP32[$20 >> 2] = $6; //@line 20885
   $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 20886
   HEAP32[$21 >> 2] = $8; //@line 20887
   $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 20888
   HEAP32[$22 >> 2] = $12; //@line 20889
   $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 20890
   HEAP32[$23 >> 2] = $14; //@line 20891
   sp = STACKTOP; //@line 20892
   return;
  }
  ___async_unwind = 0; //@line 20895
  HEAP32[$ReallocAsyncCtx3 >> 2] = 455; //@line 20896
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 20897
  HEAP32[$19 >> 2] = $4; //@line 20898
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 20899
  HEAP32[$20 >> 2] = $6; //@line 20900
  $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 20901
  HEAP32[$21 >> 2] = $8; //@line 20902
  $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 20903
  HEAP32[$22 >> 2] = $12; //@line 20904
  $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 20905
  HEAP32[$23 >> 2] = $14; //@line 20906
  sp = STACKTOP; //@line 20907
  return;
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_216($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17124
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17126
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17128
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17130
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17132
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17134
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17136
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17138
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17140
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 17145
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 17148
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 17149
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 17150
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 17153
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 17154
   HEAP32[$22 >> 2] = $4; //@line 17155
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 17156
   HEAP32[$23 >> 2] = $2; //@line 17157
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 17158
   HEAP32[$24 >> 2] = $8; //@line 17159
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 17160
   HEAP32[$25 >> 2] = $6; //@line 17161
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 17162
   HEAP32[$26 >> 2] = $10; //@line 17163
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 17164
   HEAP32[$27 >> 2] = $12; //@line 17165
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 17166
   HEAP32[$28 >> 2] = $14; //@line 17167
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 17168
   HEAP32[$29 >> 2] = $16; //@line 17169
   sp = STACKTOP; //@line 17170
   return;
  }
  ___async_unwind = 0; //@line 17173
  HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 17174
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 17175
  HEAP32[$22 >> 2] = $4; //@line 17176
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 17177
  HEAP32[$23 >> 2] = $2; //@line 17178
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 17179
  HEAP32[$24 >> 2] = $8; //@line 17180
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 17181
  HEAP32[$25 >> 2] = $6; //@line 17182
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 17183
  HEAP32[$26 >> 2] = $10; //@line 17184
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 17185
  HEAP32[$27 >> 2] = $12; //@line 17186
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 17187
  HEAP32[$28 >> 2] = $14; //@line 17188
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 17189
  HEAP32[$29 >> 2] = $16; //@line 17190
  sp = STACKTOP; //@line 17191
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 17199
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 17201
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 17209
  return;
 }
 _mbed_tracef(16, 12187, 12409, $10); //@line 17212
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 17213
 _mbed_tracef(16, 12187, 12433, $14); //@line 17214
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 17215
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 17216
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 17219
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 17220
  HEAP32[$39 >> 2] = $6; //@line 17221
  sp = STACKTOP; //@line 17222
  return;
 }
 ___async_unwind = 0; //@line 17225
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 17226
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 17227
 HEAP32[$39 >> 2] = $6; //@line 17228
 sp = STACKTOP; //@line 17229
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_215($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17011
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17013
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17015
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17017
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17019
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17021
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17023
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17025
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17027
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 17032
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 17035
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 17036
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 17037
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 17040
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 17041
   HEAP32[$22 >> 2] = $4; //@line 17042
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 17043
   HEAP32[$23 >> 2] = $2; //@line 17044
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 17045
   HEAP32[$24 >> 2] = $8; //@line 17046
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 17047
   HEAP32[$25 >> 2] = $6; //@line 17048
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 17049
   HEAP32[$26 >> 2] = $10; //@line 17050
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 17051
   HEAP32[$27 >> 2] = $12; //@line 17052
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 17053
   HEAP32[$28 >> 2] = $14; //@line 17054
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 17055
   HEAP32[$29 >> 2] = $16; //@line 17056
   sp = STACKTOP; //@line 17057
   return;
  }
  ___async_unwind = 0; //@line 17060
  HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 17061
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 17062
  HEAP32[$22 >> 2] = $4; //@line 17063
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 17064
  HEAP32[$23 >> 2] = $2; //@line 17065
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 17066
  HEAP32[$24 >> 2] = $8; //@line 17067
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 17068
  HEAP32[$25 >> 2] = $6; //@line 17069
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 17070
  HEAP32[$26 >> 2] = $10; //@line 17071
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 17072
  HEAP32[$27 >> 2] = $12; //@line 17073
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 17074
  HEAP32[$28 >> 2] = $14; //@line 17075
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 17076
  HEAP32[$29 >> 2] = $16; //@line 17077
  sp = STACKTOP; //@line 17078
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 17086
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 17088
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 17096
  return;
 }
 _mbed_tracef(16, 12187, 12409, $10); //@line 17099
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 17100
 _mbed_tracef(16, 12187, 12433, $14); //@line 17101
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 17102
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 17103
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 17106
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 17107
  HEAP32[$39 >> 2] = $6; //@line 17108
  sp = STACKTOP; //@line 17109
  return;
 }
 ___async_unwind = 0; //@line 17112
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 17113
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 17114
 HEAP32[$39 >> 2] = $6; //@line 17115
 sp = STACKTOP; //@line 17116
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_214($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16898
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16900
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16902
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16904
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16906
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16908
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16910
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16912
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16914
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 16919
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 16922
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 16923
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 16924
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 16927
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 16928
   HEAP32[$22 >> 2] = $4; //@line 16929
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 16930
   HEAP32[$23 >> 2] = $2; //@line 16931
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 16932
   HEAP32[$24 >> 2] = $8; //@line 16933
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 16934
   HEAP32[$25 >> 2] = $6; //@line 16935
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 16936
   HEAP32[$26 >> 2] = $10; //@line 16937
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 16938
   HEAP32[$27 >> 2] = $12; //@line 16939
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 16940
   HEAP32[$28 >> 2] = $14; //@line 16941
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 16942
   HEAP32[$29 >> 2] = $16; //@line 16943
   sp = STACKTOP; //@line 16944
   return;
  }
  ___async_unwind = 0; //@line 16947
  HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 16948
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 16949
  HEAP32[$22 >> 2] = $4; //@line 16950
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 16951
  HEAP32[$23 >> 2] = $2; //@line 16952
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 16953
  HEAP32[$24 >> 2] = $8; //@line 16954
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 16955
  HEAP32[$25 >> 2] = $6; //@line 16956
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 16957
  HEAP32[$26 >> 2] = $10; //@line 16958
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 16959
  HEAP32[$27 >> 2] = $12; //@line 16960
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 16961
  HEAP32[$28 >> 2] = $14; //@line 16962
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 16963
  HEAP32[$29 >> 2] = $16; //@line 16964
  sp = STACKTOP; //@line 16965
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 16973
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 16975
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 16983
  return;
 }
 _mbed_tracef(16, 12187, 12409, $10); //@line 16986
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 16987
 _mbed_tracef(16, 12187, 12433, $14); //@line 16988
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16989
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 16990
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 16993
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 16994
  HEAP32[$39 >> 2] = $6; //@line 16995
  sp = STACKTOP; //@line 16996
  return;
 }
 ___async_unwind = 0; //@line 16999
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 17000
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 17001
 HEAP32[$39 >> 2] = $6; //@line 17002
 sp = STACKTOP; //@line 17003
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 12321
 STACKTOP = STACKTOP + 224 | 0; //@line 12322
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 12322
 $3 = sp + 120 | 0; //@line 12323
 $4 = sp + 80 | 0; //@line 12324
 $5 = sp; //@line 12325
 $6 = sp + 136 | 0; //@line 12326
 dest = $4; //@line 12327
 stop = dest + 40 | 0; //@line 12327
 do {
  HEAP32[dest >> 2] = 0; //@line 12327
  dest = dest + 4 | 0; //@line 12327
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 12329
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 12333
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 12340
  } else {
   $43 = 0; //@line 12342
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 12344
  $14 = $13 & 32; //@line 12345
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 12351
  }
  $19 = $0 + 48 | 0; //@line 12353
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 12358
    $24 = HEAP32[$23 >> 2] | 0; //@line 12359
    HEAP32[$23 >> 2] = $6; //@line 12360
    $25 = $0 + 28 | 0; //@line 12361
    HEAP32[$25 >> 2] = $6; //@line 12362
    $26 = $0 + 20 | 0; //@line 12363
    HEAP32[$26 >> 2] = $6; //@line 12364
    HEAP32[$19 >> 2] = 80; //@line 12365
    $28 = $0 + 16 | 0; //@line 12367
    HEAP32[$28 >> 2] = $6 + 80; //@line 12368
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12369
    if (!$24) {
     $$1 = $29; //@line 12372
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 12375
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 12376
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 12377
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 663; //@line 12380
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 12382
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 12384
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 12386
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 12388
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 12390
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 12392
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 12394
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 12396
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 12398
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 12400
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 12402
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 12404
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 12406
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 12408
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 12410
      sp = STACKTOP; //@line 12411
      STACKTOP = sp; //@line 12412
      return 0; //@line 12412
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12414
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 12417
      HEAP32[$23 >> 2] = $24; //@line 12418
      HEAP32[$19 >> 2] = 0; //@line 12419
      HEAP32[$28 >> 2] = 0; //@line 12420
      HEAP32[$25 >> 2] = 0; //@line 12421
      HEAP32[$26 >> 2] = 0; //@line 12422
      $$1 = $$; //@line 12423
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12429
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 12432
  HEAP32[$0 >> 2] = $51 | $14; //@line 12437
  if ($43 | 0) {
   ___unlockfile($0); //@line 12440
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 12442
 }
 STACKTOP = sp; //@line 12444
 return $$0 | 0; //@line 12444
}
function _initialize__async_cb_18($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $43 = 0, $44 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19469
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19471
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19473
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 19475
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19477
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19479
 $12 = $0 + 24 | 0; //@line 19481
 $14 = HEAP32[$12 >> 2] | 0; //@line 19483
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 19486
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 19488
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 19490
 $23 = HEAP32[$2 >> 2] | 0; //@line 19493
 $24 = $23 + 32 | 0; //@line 19494
 HEAP32[$24 >> 2] = HEAP32[___async_retval >> 2]; //@line 19495
 $25 = $23 + 40 | 0; //@line 19496
 $26 = $25; //@line 19497
 HEAP32[$26 >> 2] = 0; //@line 19499
 HEAP32[$26 + 4 >> 2] = 0; //@line 19502
 $30 = $23 + 8 | 0; //@line 19503
 HEAP32[$30 >> 2] = $4; //@line 19504
 $31 = $23 + 57 | 0; //@line 19505
 HEAP8[$31 >> 0] = $6; //@line 19506
 $32 = _bitshift64Shl(1, 0, $8 | 0) | 0; //@line 19507
 $34 = _i64Add($32 | 0, tempRet0 | 0, -1, 0) | 0; //@line 19509
 $36 = $23 + 12 | 0; //@line 19511
 HEAP32[$36 >> 2] = $34; //@line 19512
 HEAP32[$23 + 16 >> 2] = $10; //@line 19514
 $39 = $23 + 24 | 0; //@line 19516
 HEAP32[$39 >> 2] = $14; //@line 19518
 HEAP32[$39 + 4 >> 2] = $17; //@line 19521
 $43 = $23 + 48 | 0; //@line 19522
 $44 = $43; //@line 19523
 HEAP32[$44 >> 2] = 0; //@line 19525
 HEAP32[$44 + 4 >> 2] = 0; //@line 19528
 HEAP8[$23 + 56 >> 0] = 1; //@line 19530
 $51 = HEAP32[(HEAP32[$19 >> 2] | 0) + 4 >> 2] | 0; //@line 19533
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 19534
 $52 = FUNCTION_TABLE_i[$51 & 7]() | 0; //@line 19535
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 608; //@line 19538
  $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 19539
  HEAP32[$53 >> 2] = $2; //@line 19540
  $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 19541
  HEAP32[$54 >> 2] = $21; //@line 19542
  $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 19543
  HEAP32[$55 >> 2] = $24; //@line 19544
  $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 19545
  HEAP32[$56 >> 2] = $36; //@line 19546
  $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 19547
  HEAP32[$57 >> 2] = $30; //@line 19548
  $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 19549
  HEAP32[$58 >> 2] = $43; //@line 19550
  $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 19551
  HEAP32[$59 >> 2] = $31; //@line 19552
  $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 19553
  HEAP32[$60 >> 2] = $25; //@line 19554
  sp = STACKTOP; //@line 19555
  return;
 }
 HEAP32[___async_retval >> 2] = $52; //@line 19559
 ___async_unwind = 0; //@line 19560
 HEAP32[$ReallocAsyncCtx4 >> 2] = 608; //@line 19561
 $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 19562
 HEAP32[$53 >> 2] = $2; //@line 19563
 $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 19564
 HEAP32[$54 >> 2] = $21; //@line 19565
 $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 19566
 HEAP32[$55 >> 2] = $24; //@line 19567
 $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 19568
 HEAP32[$56 >> 2] = $36; //@line 19569
 $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 19570
 HEAP32[$57 >> 2] = $30; //@line 19571
 $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 19572
 HEAP32[$58 >> 2] = $43; //@line 19573
 $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 19574
 HEAP32[$59 >> 2] = $31; //@line 19575
 $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 19576
 HEAP32[$60 >> 2] = $25; //@line 19577
 sp = STACKTOP; //@line 19578
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_310($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25174
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25180
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 25190
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 25192
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 25194
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 25196
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 25198
 $29 = HEAP32[$6 >> 2] | 0; //@line 25205
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 25208
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 25210
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 25211
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 25214
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 25215
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 514; //@line 25218
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 25219
   HEAP32[$37 >> 2] = $6; //@line 25220
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 25221
   HEAP32[$38 >> 2] = $16; //@line 25222
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 25223
   HEAP32[$39 >> 2] = $18; //@line 25224
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 25225
   HEAP32[$40 >> 2] = $20; //@line 25226
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 25227
   HEAP32[$41 >> 2] = $22; //@line 25228
   sp = STACKTOP; //@line 25229
   return;
  }
  ___async_unwind = 0; //@line 25232
  HEAP32[$ReallocAsyncCtx3 >> 2] = 514; //@line 25233
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 25234
  HEAP32[$37 >> 2] = $6; //@line 25235
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 25236
  HEAP32[$38 >> 2] = $16; //@line 25237
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 25238
  HEAP32[$39 >> 2] = $18; //@line 25239
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 25240
  HEAP32[$40 >> 2] = $20; //@line 25241
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 25242
  HEAP32[$41 >> 2] = $22; //@line 25243
  sp = STACKTOP; //@line 25244
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 25247
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 25248
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 515; //@line 25251
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 25252
   HEAP32[$42 >> 2] = $6; //@line 25253
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 25254
   HEAP32[$43 >> 2] = $16; //@line 25255
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 25256
   HEAP32[$44 >> 2] = $18; //@line 25257
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 25258
   HEAP32[$45 >> 2] = $20; //@line 25259
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 25260
   HEAP32[$46 >> 2] = $22; //@line 25261
   sp = STACKTOP; //@line 25262
   return;
  }
  ___async_unwind = 0; //@line 25265
  HEAP32[$ReallocAsyncCtx4 >> 2] = 515; //@line 25266
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 25267
  HEAP32[$42 >> 2] = $6; //@line 25268
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 25269
  HEAP32[$43 >> 2] = $16; //@line 25270
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 25271
  HEAP32[$44 >> 2] = $18; //@line 25272
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 25273
  HEAP32[$45 >> 2] = $20; //@line 25274
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 25275
  HEAP32[$46 >> 2] = $22; //@line 25276
  sp = STACKTOP; //@line 25277
  return;
 }
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16533
 STACKTOP = STACKTOP + 64 | 0; //@line 16534
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16534
 $4 = sp; //@line 16535
 $5 = HEAP32[$0 >> 2] | 0; //@line 16536
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 16539
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 16541
 HEAP32[$4 >> 2] = $2; //@line 16542
 HEAP32[$4 + 4 >> 2] = $0; //@line 16544
 HEAP32[$4 + 8 >> 2] = $1; //@line 16546
 HEAP32[$4 + 12 >> 2] = $3; //@line 16548
 $14 = $4 + 16 | 0; //@line 16549
 $15 = $4 + 20 | 0; //@line 16550
 $16 = $4 + 24 | 0; //@line 16551
 $17 = $4 + 28 | 0; //@line 16552
 $18 = $4 + 32 | 0; //@line 16553
 $19 = $4 + 40 | 0; //@line 16554
 dest = $14; //@line 16555
 stop = dest + 36 | 0; //@line 16555
 do {
  HEAP32[dest >> 2] = 0; //@line 16555
  dest = dest + 4 | 0; //@line 16555
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 16555
 HEAP8[$14 + 38 >> 0] = 0; //@line 16555
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 16560
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 16563
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16564
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 16565
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 675; //@line 16568
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 16570
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 16572
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 16574
    sp = STACKTOP; //@line 16575
    STACKTOP = sp; //@line 16576
    return 0; //@line 16576
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16578
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 16582
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 16586
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 16589
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16590
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 16591
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 676; //@line 16594
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 16596
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 16598
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 16600
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 16602
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 16604
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 16606
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 16608
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 16610
    sp = STACKTOP; //@line 16611
    STACKTOP = sp; //@line 16612
    return 0; //@line 16612
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16614
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 16628
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 16636
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 16652
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 16657
  }
 } while (0);
 STACKTOP = sp; //@line 16660
 return $$0 | 0; //@line 16660
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $43 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11043
 $2 = HEAP32[$0 + 2008 >> 2] | 0; //@line 11045
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 11051
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11052
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 1996 | 0); //@line 11053
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 361; //@line 11056
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11058
    sp = STACKTOP; //@line 11059
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11062
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 1868 >> 2] | 0; //@line 11068
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 11074
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11075
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 1856 | 0); //@line 11076
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 362; //@line 11079
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11081
    sp = STACKTOP; //@line 11082
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11085
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 1848 >> 2] | 0; //@line 11091
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 11097
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11098
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 1836 | 0); //@line 11099
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 363; //@line 11102
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11104
    sp = STACKTOP; //@line 11105
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11108
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 1828 >> 2] | 0; //@line 11114
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 11120
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11121
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1816 | 0); //@line 11122
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 364; //@line 11125
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 11127
    sp = STACKTOP; //@line 11128
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11131
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 1808 >> 2] | 0; //@line 11137
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 11143
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11144
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 1796 | 0); //@line 11145
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 365; //@line 11148
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 11150
    sp = STACKTOP; //@line 11151
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 11154
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 748 >> 2] | 0; //@line 11160
 if (!$37) {
  $43 = $0 + 4 | 0; //@line 11163
  __ZN12LoRaPHYEU868D2Ev($43); //@line 11164
  return;
 }
 $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 11169
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11170
 FUNCTION_TABLE_vi[$41 & 1023]($0 + 736 | 0); //@line 11171
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 366; //@line 11174
  HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 11176
  sp = STACKTOP; //@line 11177
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 11180
 $43 = $0 + 4 | 0; //@line 11181
 __ZN12LoRaPHYEU868D2Ev($43); //@line 11182
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_361($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27578
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27580
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 27582
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 27587
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27588
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 27589
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 160; //@line 27592
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 27593
   HEAP32[$9 >> 2] = $2; //@line 27594
   sp = STACKTOP; //@line 27595
   return;
  }
  ___async_unwind = 0; //@line 27598
  HEAP32[$ReallocAsyncCtx3 >> 2] = 160; //@line 27599
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 27600
  HEAP32[$9 >> 2] = $2; //@line 27601
  sp = STACKTOP; //@line 27602
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 27606
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 27611
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 27612
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 27613
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 27616
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 27617
   HEAP32[$16 >> 2] = $2; //@line 27618
   sp = STACKTOP; //@line 27619
   return;
  }
  ___async_unwind = 0; //@line 27622
  HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 27623
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 27624
  HEAP32[$16 >> 2] = $2; //@line 27625
  sp = STACKTOP; //@line 27626
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 27630
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 27635
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27636
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 27637
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 27640
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 27641
   HEAP32[$23 >> 2] = $2; //@line 27642
   sp = STACKTOP; //@line 27643
   return;
  }
  ___async_unwind = 0; //@line 27646
  HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 27647
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 27648
  HEAP32[$23 >> 2] = $2; //@line 27649
  sp = STACKTOP; //@line 27650
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 27654
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 27659
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27660
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 27661
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 27664
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 27665
   HEAP32[$30 >> 2] = $2; //@line 27666
   sp = STACKTOP; //@line 27667
   return;
  }
  ___async_unwind = 0; //@line 27670
  HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 27671
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 27672
  HEAP32[$30 >> 2] = $2; //@line 27673
  sp = STACKTOP; //@line 27674
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 27678
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 27684
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27685
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 27686
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 27689
  sp = STACKTOP; //@line 27690
  return;
 }
 ___async_unwind = 0; //@line 27693
 HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 27694
 sp = STACKTOP; //@line 27695
 return;
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $19 = 0, $20 = 0, $22 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15820
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15822
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1796 | 0); //@line 15823
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 461; //@line 15826
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 15828
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 15830
  sp = STACKTOP; //@line 15831
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15834
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15836
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 15837
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 462; //@line 15840
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15842
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 15844
  sp = STACKTOP; //@line 15845
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15848
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15850
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 15851
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 463; //@line 15854
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 15856
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 15858
  sp = STACKTOP; //@line 15859
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15862
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15864
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 15865
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 464; //@line 15868
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15870
  sp = STACKTOP; //@line 15871
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15874
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15876
 __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 15877
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 465; //@line 15880
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15882
  sp = STACKTOP; //@line 15883
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15886
  HEAP8[$0 + 2376 >> 0] = 0; //@line 15888
  HEAP8[$0 + 1181 >> 0] = 0; //@line 15890
  HEAP8[$0 + 1175 >> 0] = 1; //@line 15892
  HEAP8[$0 + 1177 >> 0] = 0; //@line 15894
  HEAP8[$0 + 1178 >> 0] = 0; //@line 15896
  $19 = $0 + 476 | 0; //@line 15897
  __ZN14LoRaMacCommand20clear_command_bufferEv($19); //@line 15898
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($19); //@line 15899
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($19); //@line 15900
  $20 = $0 + 2052 | 0; //@line 15901
  HEAP32[$20 >> 2] = 0; //@line 15902
  HEAP32[$20 + 4 >> 2] = 0; //@line 15902
  HEAP32[$20 + 8 >> 2] = 0; //@line 15902
  HEAP32[$20 + 12 >> 2] = 0; //@line 15902
  HEAP32[$20 + 16 >> 2] = 0; //@line 15902
  HEAP32[$20 + 20 >> 2] = 0; //@line 15902
  HEAP32[$0 + 2056 >> 2] = 1; //@line 15904
  $22 = $0 + 2084 | 0; //@line 15905
  HEAP32[$22 >> 2] = 0; //@line 15906
  HEAP32[$22 + 4 >> 2] = 0; //@line 15906
  HEAP32[$22 + 8 >> 2] = 0; //@line 15906
  HEAP32[$22 + 12 >> 2] = 0; //@line 15906
  HEAP32[$22 + 16 >> 2] = 0; //@line 15906
  HEAP32[$0 + 2092 >> 2] = 1; //@line 15908
  dest = $0 + 2012 | 0; //@line 15910
  stop = dest + 40 | 0; //@line 15910
  do {
   HEAP32[dest >> 2] = 0; //@line 15910
   dest = dest + 4 | 0; //@line 15910
  } while ((dest | 0) < (stop | 0));
  HEAP32[$0 + 2020 >> 2] = 1; //@line 15912
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $30 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9138
 STACKTOP = STACKTOP + 32 | 0; //@line 9139
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9139
 $1 = sp + 8 | 0; //@line 9141
 $2 = $0 + 2904 | 0; //@line 9142
 if (HEAP32[$2 >> 2] & 8 | 0) {
  _mbed_tracef(16, 12187, 12508, sp); //@line 9147
 }
 HEAP8[$0 + 2548 >> 0] = 1; //@line 9150
 $7 = $0 + 2512 | 0; //@line 9151
 $8 = HEAP32[$7 >> 2] | 0; //@line 9152
 do {
  if ($8 | 0) {
   $12 = HEAP32[$0 + 3168 >> 2] | 0; //@line 9158
   $14 = HEAP32[$8 + 4 >> 2] | 0; //@line 9160
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 9161
   FUNCTION_TABLE_vii[$14 & 15]($1, $0 + 2500 | 0); //@line 9162
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 318; //@line 9165
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 9167
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9169
    HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 9171
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9173
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 9175
    HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 9177
    sp = STACKTOP; //@line 9178
    STACKTOP = sp; //@line 9179
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9181
   $21 = $1 + 12 | 0; //@line 9183
   HEAP32[$21 >> 2] = HEAP32[$7 >> 2]; //@line 9184
   $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9185
   $22 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($12, $1, 0) | 0; //@line 9186
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 319; //@line 9189
    HEAP32[$AsyncCtx5 + 4 >> 2] = $21; //@line 9191
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 9193
    HEAP32[$AsyncCtx5 + 12 >> 2] = $2; //@line 9195
    HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 9197
    sp = STACKTOP; //@line 9198
    STACKTOP = sp; //@line 9199
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9201
   $27 = HEAP32[$21 >> 2] | 0; //@line 9202
   do {
    if ($27 | 0) {
     $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 9207
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9208
     FUNCTION_TABLE_vi[$30 & 1023]($1); //@line 9209
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 320; //@line 9212
      HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 9214
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9216
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 9218
      HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 9220
      sp = STACKTOP; //@line 9221
      STACKTOP = sp; //@line 9222
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9224
      break;
     }
    }
   } while (0);
   if (!$22) {
    $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9231
    _mbed_assert_internal(12080, 12089, 775); //@line 9232
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 321; //@line 9235
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 9237
     HEAP32[$AsyncCtx9 + 8 >> 2] = $2; //@line 9239
     HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 9241
     sp = STACKTOP; //@line 9242
     STACKTOP = sp; //@line 9243
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9245
     break;
    }
   }
  }
 } while (0);
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4; //@line 9253
 HEAP32[$0 + 2496 >> 2] = 2; //@line 9255
 STACKTOP = sp; //@line 9256
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_96($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $29 = 0, $30 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24989
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24993
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24995
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24997
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24999
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25001
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 25004
  _mbed_assert_internal(12080, 12089, 775); //@line 25005
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 247; //@line 25008
   $14 = $ReallocAsyncCtx11 + 4 | 0; //@line 25009
   HEAP32[$14 >> 2] = $4; //@line 25010
   $15 = $ReallocAsyncCtx11 + 8 | 0; //@line 25011
   HEAP32[$15 >> 2] = $6; //@line 25012
   $16 = $ReallocAsyncCtx11 + 12 | 0; //@line 25013
   HEAP32[$16 >> 2] = $8; //@line 25014
   $17 = $ReallocAsyncCtx11 + 16 | 0; //@line 25015
   HEAP32[$17 >> 2] = $10; //@line 25016
   $18 = $ReallocAsyncCtx11 + 20 | 0; //@line 25017
   HEAP32[$18 >> 2] = $12; //@line 25018
   sp = STACKTOP; //@line 25019
   return;
  }
  ___async_unwind = 0; //@line 25022
  HEAP32[$ReallocAsyncCtx11 >> 2] = 247; //@line 25023
  $14 = $ReallocAsyncCtx11 + 4 | 0; //@line 25024
  HEAP32[$14 >> 2] = $4; //@line 25025
  $15 = $ReallocAsyncCtx11 + 8 | 0; //@line 25026
  HEAP32[$15 >> 2] = $6; //@line 25027
  $16 = $ReallocAsyncCtx11 + 12 | 0; //@line 25028
  HEAP32[$16 >> 2] = $8; //@line 25029
  $17 = $ReallocAsyncCtx11 + 16 | 0; //@line 25030
  HEAP32[$17 >> 2] = $10; //@line 25031
  $18 = $ReallocAsyncCtx11 + 20 | 0; //@line 25032
  HEAP32[$18 >> 2] = $12; //@line 25033
  sp = STACKTOP; //@line 25034
  return;
 }
 if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) == 2) {
  label = 10; //@line 25040
 } else {
  if (!(HEAP8[$8 + 15 >> 0] | 0)) {
   label = 10; //@line 25046
  }
 }
 if ((label | 0) == 10) {
  if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
   return;
  }
  if ((HEAP32[$8 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $29 = $12 + 2512 | 0; //@line 25062
 $30 = HEAP32[$29 >> 2] | 0; //@line 25063
 if (!$30) {
  return;
 }
 $34 = HEAP32[$12 + 3168 >> 2] | 0; //@line 25070
 $36 = HEAP32[$30 + 4 >> 2] | 0; //@line 25072
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 25073
 FUNCTION_TABLE_vii[$36 & 15]($10, $12 + 2500 | 0); //@line 25074
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 25077
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 25078
  HEAP32[$37 >> 2] = $29; //@line 25079
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 25080
  HEAP32[$38 >> 2] = $10; //@line 25081
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 25082
  HEAP32[$39 >> 2] = $34; //@line 25083
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 25084
  HEAP32[$40 >> 2] = $10; //@line 25085
  sp = STACKTOP; //@line 25086
  return;
 }
 ___async_unwind = 0; //@line 25089
 HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 25090
 $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 25091
 HEAP32[$37 >> 2] = $29; //@line 25092
 $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 25093
 HEAP32[$38 >> 2] = $10; //@line 25094
 $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 25095
 HEAP32[$39 >> 2] = $34; //@line 25096
 $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 25097
 HEAP32[$40 >> 2] = $10; //@line 25098
 sp = STACKTOP; //@line 25099
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 12193
 $7 = ($2 | 0) != 0; //@line 12197
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 12201
   $$03555 = $0; //@line 12202
   $$03654 = $2; //@line 12202
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 12207
     $$036$lcssa64 = $$03654; //@line 12207
     label = 6; //@line 12208
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 12211
    $12 = $$03654 + -1 | 0; //@line 12212
    $16 = ($12 | 0) != 0; //@line 12216
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 12219
     $$03654 = $12; //@line 12219
    } else {
     $$035$lcssa = $11; //@line 12221
     $$036$lcssa = $12; //@line 12221
     $$lcssa = $16; //@line 12221
     label = 5; //@line 12222
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 12227
   $$036$lcssa = $2; //@line 12227
   $$lcssa = $7; //@line 12227
   label = 5; //@line 12228
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 12233
   $$036$lcssa64 = $$036$lcssa; //@line 12233
   label = 6; //@line 12234
  } else {
   $$2 = $$035$lcssa; //@line 12236
   $$3 = 0; //@line 12236
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 12242
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 12245
    $$3 = $$036$lcssa64; //@line 12245
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 12247
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 12251
      $$13745 = $$036$lcssa64; //@line 12251
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 12254
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 12263
       $30 = $$13745 + -4 | 0; //@line 12264
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 12267
        $$13745 = $30; //@line 12267
       } else {
        $$0$lcssa = $29; //@line 12269
        $$137$lcssa = $30; //@line 12269
        label = 11; //@line 12270
        break L11;
       }
      }
      $$140 = $$046; //@line 12274
      $$23839 = $$13745; //@line 12274
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 12276
      $$137$lcssa = $$036$lcssa64; //@line 12276
      label = 11; //@line 12277
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 12283
      $$3 = 0; //@line 12283
      break;
     } else {
      $$140 = $$0$lcssa; //@line 12286
      $$23839 = $$137$lcssa; //@line 12286
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 12293
      $$3 = $$23839; //@line 12293
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 12296
     $$23839 = $$23839 + -1 | 0; //@line 12297
     if (!$$23839) {
      $$2 = $35; //@line 12300
      $$3 = 0; //@line 12300
      break;
     } else {
      $$140 = $35; //@line 12303
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 12311
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 11964
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2630] | 0)) {
     $34 = 0; //@line 11972
    } else {
     $12 = HEAP32[2630] | 0; //@line 11974
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11975
     $13 = _fflush($12) | 0; //@line 11976
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 659; //@line 11979
      sp = STACKTOP; //@line 11980
      return 0; //@line 11981
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 11983
      $34 = $13; //@line 11984
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 11990
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 11994
    } else {
     $$02327 = $$02325; //@line 11996
     $$02426 = $34; //@line 11996
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 12003
      } else {
       $28 = 0; //@line 12005
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12013
       $25 = ___fflush_unlocked($$02327) | 0; //@line 12014
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 12019
       $$1 = $25 | $$02426; //@line 12021
      } else {
       $$1 = $$02426; //@line 12023
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 12027
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 12030
      if (!$$023) {
       $$024$lcssa = $$1; //@line 12033
       break L9;
      } else {
       $$02327 = $$023; //@line 12036
       $$02426 = $$1; //@line 12036
      }
     }
     HEAP32[$AsyncCtx >> 2] = 660; //@line 12039
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 12041
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 12043
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 12045
     sp = STACKTOP; //@line 12046
     return 0; //@line 12047
    }
   } while (0);
   ___ofl_unlock(); //@line 12050
   $$0 = $$024$lcssa; //@line 12051
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12057
    $5 = ___fflush_unlocked($0) | 0; //@line 12058
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 657; //@line 12061
     sp = STACKTOP; //@line 12062
     return 0; //@line 12063
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 12065
     $$0 = $5; //@line 12066
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 12071
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12072
   $7 = ___fflush_unlocked($0) | 0; //@line 12073
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 658; //@line 12076
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 12079
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 12081
    sp = STACKTOP; //@line 12082
    return 0; //@line 12083
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12085
   if ($phitmp) {
    $$0 = $7; //@line 12087
   } else {
    ___unlockfile($0); //@line 12089
    $$0 = $7; //@line 12090
   }
  }
 } while (0);
 return $$0 | 0; //@line 12094
}
function __ZN7LoRaPHY18dl_channel_requestEhj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19417
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19419
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19421
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19423
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19425
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19427
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 19429
 if (HEAP8[___async_retval >> 0] & 1) {
  $31 = $2; //@line 19434
 } else {
  $18 = $2 + 1 | 0; //@line 19436
  if (($18 | 0) < (HEAPU8[$10 >> 0] | 0 | 0)) {
   $16 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 19443
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 19445
   $19 = FUNCTION_TABLE_iiii[$16 & 31]($6, $8, $18 & 255) | 0; //@line 19446
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 520; //@line 19449
    $20 = $ReallocAsyncCtx + 4 | 0; //@line 19450
    HEAP32[$20 >> 2] = $18; //@line 19451
    $21 = $ReallocAsyncCtx + 8 | 0; //@line 19452
    HEAP32[$21 >> 2] = $4; //@line 19453
    $22 = $ReallocAsyncCtx + 12 | 0; //@line 19454
    HEAP32[$22 >> 2] = $6; //@line 19455
    $23 = $ReallocAsyncCtx + 16 | 0; //@line 19456
    HEAP32[$23 >> 2] = $8; //@line 19457
    $24 = $ReallocAsyncCtx + 20 | 0; //@line 19458
    HEAP32[$24 >> 2] = $10; //@line 19459
    $25 = $ReallocAsyncCtx + 24 | 0; //@line 19460
    HEAP8[$25 >> 0] = $12; //@line 19461
    sp = STACKTOP; //@line 19462
    return;
   }
   HEAP8[___async_retval >> 0] = $19 & 1; //@line 19467
   ___async_unwind = 0; //@line 19468
   HEAP32[$ReallocAsyncCtx >> 2] = 520; //@line 19469
   $20 = $ReallocAsyncCtx + 4 | 0; //@line 19470
   HEAP32[$20 >> 2] = $18; //@line 19471
   $21 = $ReallocAsyncCtx + 8 | 0; //@line 19472
   HEAP32[$21 >> 2] = $4; //@line 19473
   $22 = $ReallocAsyncCtx + 12 | 0; //@line 19474
   HEAP32[$22 >> 2] = $6; //@line 19475
   $23 = $ReallocAsyncCtx + 16 | 0; //@line 19476
   HEAP32[$23 >> 2] = $8; //@line 19477
   $24 = $ReallocAsyncCtx + 20 | 0; //@line 19478
   HEAP32[$24 >> 2] = $10; //@line 19479
   $25 = $ReallocAsyncCtx + 24 | 0; //@line 19480
   HEAP8[$25 >> 0] = $12; //@line 19481
   sp = STACKTOP; //@line 19482
   return;
  } else {
   $31 = -1; //@line 19485
  }
 }
 $34 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 19491
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 19492
 $35 = FUNCTION_TABLE_iiii[$34 & 31]($6, $8, $31 & 255) | 0; //@line 19493
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 521; //@line 19496
  $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 19497
  HEAP32[$36 >> 2] = $6; //@line 19498
  $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 19499
  HEAP8[$37 >> 0] = $12; //@line 19500
  $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 19501
  HEAP32[$38 >> 2] = $8; //@line 19502
  sp = STACKTOP; //@line 19503
  return;
 }
 HEAP8[___async_retval >> 0] = $35 & 1; //@line 19508
 ___async_unwind = 0; //@line 19509
 HEAP32[$ReallocAsyncCtx2 >> 2] = 521; //@line 19510
 $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 19511
 HEAP32[$36 >> 2] = $6; //@line 19512
 $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 19513
 HEAP8[$37 >> 0] = $12; //@line 19514
 $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 19515
 HEAP32[$38 >> 2] = $8; //@line 19516
 sp = STACKTOP; //@line 19517
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_248($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19254
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19256
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19258
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19260
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19262
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19264
 $12 = $0 + 24 | 0; //@line 19266
 $14 = HEAP32[$12 >> 2] | 0; //@line 19268
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 19271
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 19273
 $20 = HEAP32[$2 >> 2] | 0; //@line 19274
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 19278
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(32) | 0; //@line 19279
  FUNCTION_TABLE_vii[$23 & 15]($6, $8); //@line 19280
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 19283
   $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 19284
   HEAP32[$24 >> 2] = $2; //@line 19285
   $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 19286
   HEAP32[$25 >> 2] = $4; //@line 19287
   $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 19288
   HEAP32[$26 >> 2] = $10; //@line 19289
   $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 19290
   $28 = $27; //@line 19291
   $29 = $28; //@line 19292
   HEAP32[$29 >> 2] = $14; //@line 19293
   $30 = $28 + 4 | 0; //@line 19294
   $31 = $30; //@line 19295
   HEAP32[$31 >> 2] = $17; //@line 19296
   $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 19297
   HEAP32[$32 >> 2] = $19; //@line 19298
   $33 = $ReallocAsyncCtx5 + 28 | 0; //@line 19299
   HEAP32[$33 >> 2] = $8; //@line 19300
   sp = STACKTOP; //@line 19301
   return;
  }
  ___async_unwind = 0; //@line 19304
  HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 19305
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 19306
  HEAP32[$24 >> 2] = $2; //@line 19307
  $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 19308
  HEAP32[$25 >> 2] = $4; //@line 19309
  $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 19310
  HEAP32[$26 >> 2] = $10; //@line 19311
  $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 19312
  $28 = $27; //@line 19313
  $29 = $28; //@line 19314
  HEAP32[$29 >> 2] = $14; //@line 19315
  $30 = $28 + 4 | 0; //@line 19316
  $31 = $30; //@line 19317
  HEAP32[$31 >> 2] = $17; //@line 19318
  $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 19319
  HEAP32[$32 >> 2] = $19; //@line 19320
  $33 = $ReallocAsyncCtx5 + 28 | 0; //@line 19321
  HEAP32[$33 >> 2] = $8; //@line 19322
  sp = STACKTOP; //@line 19323
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 19326
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 19327
 $34 = HEAP32[$2 >> 2] | 0; //@line 19328
 if (!$34) {
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($19); //@line 19331
  return;
 }
 $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 19335
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19336
 FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 19337
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 55; //@line 19340
  $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 19341
  HEAP32[$38 >> 2] = $19; //@line 19342
  sp = STACKTOP; //@line 19343
  return;
 }
 ___async_unwind = 0; //@line 19346
 HEAP32[$ReallocAsyncCtx6 >> 2] = 55; //@line 19347
 $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 19348
 HEAP32[$38 >> 2] = $19; //@line 19349
 sp = STACKTOP; //@line 19350
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_341($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26718
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26720
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26722
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26724
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26726
 if (!$AsyncRetVal) {
  $22 = HEAP32[$2 >> 2] | 0; //@line 26729
  if (!$22) {
   HEAP32[___async_retval >> 2] = 0; //@line 26733
   return;
  }
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 26737
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26738
  FUNCTION_TABLE_vi[$25 & 1023]($6); //@line 26739
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 26742
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 26743
   HEAP32[$26 >> 2] = 0; //@line 26744
   sp = STACKTOP; //@line 26745
   return;
  }
  ___async_unwind = 0; //@line 26748
  HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 26749
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 26750
  HEAP32[$26 >> 2] = 0; //@line 26751
  sp = STACKTOP; //@line 26752
  return;
 }
 $9 = HEAP32[$2 >> 2] | 0; //@line 26755
 if (!$9) {
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 26759
  _equeue_event_dtor($AsyncRetVal, 268); //@line 26760
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 26761
  $18 = _equeue_post($4, 269, $AsyncRetVal) | 0; //@line 26762
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 270; //@line 26765
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 26766
   HEAP32[$19 >> 2] = $2; //@line 26767
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 26768
   HEAP32[$20 >> 2] = $6; //@line 26769
   sp = STACKTOP; //@line 26770
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 26774
  ___async_unwind = 0; //@line 26775
  HEAP32[$ReallocAsyncCtx3 >> 2] = 270; //@line 26776
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 26777
  HEAP32[$19 >> 2] = $2; //@line 26778
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 26779
  HEAP32[$20 >> 2] = $6; //@line 26780
  sp = STACKTOP; //@line 26781
  return;
 } else {
  $12 = HEAP32[$9 + 4 >> 2] | 0; //@line 26785
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 26786
  FUNCTION_TABLE_vii[$12 & 15]($AsyncRetVal, $6); //@line 26787
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 267; //@line 26790
   $13 = $ReallocAsyncCtx + 4 | 0; //@line 26791
   HEAP32[$13 >> 2] = $2; //@line 26792
   $14 = $ReallocAsyncCtx + 8 | 0; //@line 26793
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 26794
   $15 = $ReallocAsyncCtx + 12 | 0; //@line 26795
   HEAP32[$15 >> 2] = $4; //@line 26796
   $16 = $ReallocAsyncCtx + 16 | 0; //@line 26797
   HEAP32[$16 >> 2] = $6; //@line 26798
   sp = STACKTOP; //@line 26799
   return;
  }
  ___async_unwind = 0; //@line 26802
  HEAP32[$ReallocAsyncCtx >> 2] = 267; //@line 26803
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 26804
  HEAP32[$13 >> 2] = $2; //@line 26805
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 26806
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 26807
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 26808
  HEAP32[$15 >> 2] = $4; //@line 26809
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 26810
  HEAP32[$16 >> 2] = $6; //@line 26811
  sp = STACKTOP; //@line 26812
  return;
 }
}
function _mbed_vtracef__async_cb_91($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24599
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24601
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24603
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 24606
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24608
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24610
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24612
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24616
 $$13 = ($AsyncRetVal | 0) >= ($12 | 0) ? 0 : $AsyncRetVal; //@line 24618
 $18 = (HEAP32[$0 + 28 >> 2] | 0) + $$13 | 0; //@line 24620
 $19 = $12 - $$13 | 0; //@line 24621
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[173] | 0; //@line 24625
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $6 ^ 1) {
     break;
    }
    _snprintf($18, $19, 12042, $8) | 0; //@line 24637
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 24640
   $23 = FUNCTION_TABLE_i[$21 & 7]() | 0; //@line 24641
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 134; //@line 24644
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 24645
    HEAP32[$24 >> 2] = $2; //@line 24646
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 24647
    HEAP32[$25 >> 2] = $18; //@line 24648
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 24649
    HEAP32[$26 >> 2] = $19; //@line 24650
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 24651
    HEAP32[$27 >> 2] = $4; //@line 24652
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 24653
    $$expand_i1_val = $6 & 1; //@line 24654
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 24655
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 24656
    HEAP32[$29 >> 2] = $8; //@line 24657
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 24658
    HEAP32[$30 >> 2] = $10; //@line 24659
    sp = STACKTOP; //@line 24660
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 24664
   ___async_unwind = 0; //@line 24665
   HEAP32[$ReallocAsyncCtx6 >> 2] = 134; //@line 24666
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 24667
   HEAP32[$24 >> 2] = $2; //@line 24668
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 24669
   HEAP32[$25 >> 2] = $18; //@line 24670
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 24671
   HEAP32[$26 >> 2] = $19; //@line 24672
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 24673
   HEAP32[$27 >> 2] = $4; //@line 24674
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 24675
   $$expand_i1_val = $6 & 1; //@line 24676
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 24677
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 24678
   HEAP32[$29 >> 2] = $8; //@line 24679
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 24680
   HEAP32[$30 >> 2] = $10; //@line 24681
   sp = STACKTOP; //@line 24682
   return;
  }
 } while (0);
 $34 = HEAP32[174] | 0; //@line 24686
 $35 = HEAP32[167] | 0; //@line 24687
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 24688
 FUNCTION_TABLE_vi[$34 & 1023]($35); //@line 24689
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 24692
  sp = STACKTOP; //@line 24693
  return;
 }
 ___async_unwind = 0; //@line 24696
 HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 24697
 sp = STACKTOP; //@line 24698
 return;
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 21075
  return $$0$lcssa | 0; //@line 21076
 }
 $6 = $0 + 8 | 0; //@line 21078
 $wide$trip$count = $4 & 255; //@line 21079
 if ($1) {
  $$060$us = -1; //@line 21081
  $indvars$iv = 0; //@line 21081
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 21083
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 21086
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 21088
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 21093
      $$2$us = $$060$us; //@line 21094
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 21097
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 21100
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 21108
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 21113
      } else {
       $$2$us = $$060$us; //@line 21115
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 21119
     $$2$us = 0; //@line 21120
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 21123
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 21126
    break;
   } else {
    $$060$us = $$2$us; //@line 21129
   }
  }
  return $$0$lcssa | 0; //@line 21132
 } else {
  $$060 = -1; //@line 21134
  $indvars$iv62 = 0; //@line 21134
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 21138
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 21140
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 21146
  } else {
   $34 = 0; //@line 21148
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 21152
   label = 17; //@line 21153
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 21157
    label = 17; //@line 21158
   } else {
    $41 = 0; //@line 21160
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 21164
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 21168
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 21170
  $39 = HEAP32[$38 >> 2] | 0; //@line 21171
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 21174
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 21177
  } else {
   HEAP32[$38 >> 2] = 0; //@line 21179
   $$2 = $$060; //@line 21180
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 21182
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 21185
   break;
  } else {
   $$060 = $$2; //@line 21188
  }
 }
 return $$0$lcssa | 0; //@line 21191
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16715
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16721
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 16727
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 16730
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16731
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 16732
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 679; //@line 16735
     sp = STACKTOP; //@line 16736
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16739
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 16747
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 16752
     $19 = $1 + 44 | 0; //@line 16753
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 16759
     HEAP8[$22 >> 0] = 0; //@line 16760
     $23 = $1 + 53 | 0; //@line 16761
     HEAP8[$23 >> 0] = 0; //@line 16762
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 16764
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 16767
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16768
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 16769
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 678; //@line 16772
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 16774
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16776
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 16778
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 16780
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 16782
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 16784
      sp = STACKTOP; //@line 16785
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16788
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 16792
      label = 13; //@line 16793
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 16798
       label = 13; //@line 16799
      } else {
       $$037$off039 = 3; //@line 16801
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 16805
      $39 = $1 + 40 | 0; //@line 16806
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 16809
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16819
        $$037$off039 = $$037$off038; //@line 16820
       } else {
        $$037$off039 = $$037$off038; //@line 16822
       }
      } else {
       $$037$off039 = $$037$off038; //@line 16825
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 16828
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 16835
   }
  }
 } while (0);
 return;
}
function _mbed_vtracef__async_cb_92($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24708
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24710
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24712
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 24715
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24717
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24719
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24721
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24723
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24725
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24727
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24729
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24731
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24733
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24735
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24737
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24739
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24741
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 24743
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 24745
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 24747
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 24749
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 24751
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 24753
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 24755
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 24757
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 24759
 $55 = ($12 | 0 ? 4 : 0) + $12 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 24765
 $56 = HEAP32[172] | 0; //@line 24766
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 24767
 $57 = FUNCTION_TABLE_ii[$56 & 15]($55) | 0; //@line 24768
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 24772
  ___async_unwind = 0; //@line 24773
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 132; //@line 24775
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $14; //@line 24777
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $16; //@line 24779
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $18; //@line 24781
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $20; //@line 24783
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $22; //@line 24785
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $24; //@line 24787
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $26; //@line 24789
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $28; //@line 24791
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $30; //@line 24793
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $2; //@line 24795
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $4; //@line 24797
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $8; //@line 24799
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $10; //@line 24801
 HEAP8[$ReallocAsyncCtx5 + 56 >> 0] = $6 & 1; //@line 24804
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $32; //@line 24806
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $34; //@line 24808
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $36; //@line 24810
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $38; //@line 24812
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $40; //@line 24814
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $42; //@line 24816
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $44; //@line 24818
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $46; //@line 24820
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $48; //@line 24822
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $50; //@line 24824
 sp = STACKTOP; //@line 24825
 return;
}
function __ZN7LoRaMacC2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 10967
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 10969
 __ZN14LoRaMacCommandC2Ev($0 + 476 | 0); //@line 10971
 __ZN18LoRaMacChannelPlanC2Ev($0 + 752 | 0); //@line 10973
 __ZN13LoRaMacCryptoC2Ev($0 + 756 | 0); //@line 10975
 $5 = $0 + 1796 | 0; //@line 10976
 HEAP32[$5 >> 2] = 0; //@line 10977
 HEAP32[$5 + 4 >> 2] = 0; //@line 10977
 HEAP32[$5 + 8 >> 2] = 0; //@line 10977
 HEAP32[$5 + 12 >> 2] = 0; //@line 10977
 $6 = $0 + 1816 | 0; //@line 10978
 HEAP32[$6 >> 2] = 0; //@line 10979
 HEAP32[$6 + 4 >> 2] = 0; //@line 10979
 HEAP32[$6 + 8 >> 2] = 0; //@line 10979
 HEAP32[$6 + 12 >> 2] = 0; //@line 10979
 $7 = $0 + 1836 | 0; //@line 10980
 HEAP32[$7 >> 2] = 0; //@line 10981
 HEAP32[$7 + 4 >> 2] = 0; //@line 10981
 HEAP32[$7 + 8 >> 2] = 0; //@line 10981
 HEAP32[$7 + 12 >> 2] = 0; //@line 10981
 $8 = $0 + 1856 | 0; //@line 10982
 HEAP32[$8 >> 2] = 0; //@line 10983
 HEAP32[$8 + 4 >> 2] = 0; //@line 10983
 HEAP32[$8 + 8 >> 2] = 0; //@line 10983
 HEAP32[$8 + 12 >> 2] = 0; //@line 10983
 $9 = $0 + 1992 | 0; //@line 10984
 $10 = $0 + 2012 | 0; //@line 10985
 $11 = $0 + 2052 | 0; //@line 10986
 $12 = $0 + 2084 | 0; //@line 10987
 HEAP32[$0 + 2380 >> 2] = 0; //@line 10989
 $14 = $0 + 1704 | 0; //@line 10990
 $15 = $0 + 1752 | 0; //@line 10991
 HEAP16[$0 + 1440 >> 1] = 0; //@line 10993
 HEAP8[$0 + 1697 >> 0] = 0; //@line 10995
 HEAP8[$0 + 1174 >> 0] = 0; //@line 10997
 $19 = $0 + 1175 | 0; //@line 10998
 dest = $14; //@line 10999
 stop = dest + 44 | 0; //@line 10999
 do {
  HEAP32[dest >> 2] = 0; //@line 10999
  dest = dest + 4 | 0; //@line 10999
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 44 >> 1] = 0; //@line 10999
 HEAP32[$15 >> 2] = 0; //@line 11000
 HEAP32[$15 + 4 >> 2] = 0; //@line 11000
 HEAP32[$15 + 8 >> 2] = 0; //@line 11000
 HEAP32[$15 + 12 >> 2] = 0; //@line 11000
 _memset($9 | 0, 0, 386) | 0; //@line 11001
 HEAP8[$19 >> 0] = 1; //@line 11002
 HEAP32[$0 + 1768 >> 2] = 0; //@line 11004
 HEAP8[$0 + 1177 >> 0] = 0; //@line 11006
 HEAP8[$0 + 1178 >> 0] = 0; //@line 11008
 HEAP8[$0 + 1184 >> 0] = 0; //@line 11010
 HEAP32[$0 + 1788 >> 2] = 0; //@line 11012
 HEAP8[$0 + 1698 >> 0] = 1; //@line 11014
 HEAP8[$0 + 1699 >> 0] = 1; //@line 11016
 HEAP8[$0 + 1181 >> 0] = 0; //@line 11018
 HEAP32[$0 + 1792 >> 2] = 0; //@line 11020
 HEAP32[$0 + 1988 >> 2] = 0; //@line 11022
 HEAP8[$0 + 1936 >> 0] = 0; //@line 11024
 HEAP8[$0 + 1932 >> 0] = 0; //@line 11026
 HEAP32[$11 >> 2] = 0; //@line 11027
 HEAP32[$11 + 4 >> 2] = 0; //@line 11027
 HEAP32[$11 + 8 >> 2] = 0; //@line 11027
 HEAP32[$11 + 12 >> 2] = 0; //@line 11027
 HEAP32[$11 + 16 >> 2] = 0; //@line 11027
 HEAP32[$11 + 20 >> 2] = 0; //@line 11027
 HEAP32[$0 + 2056 >> 2] = 1; //@line 11029
 HEAP32[$12 >> 2] = 0; //@line 11030
 HEAP32[$12 + 4 >> 2] = 0; //@line 11030
 HEAP32[$12 + 8 >> 2] = 0; //@line 11030
 HEAP32[$12 + 12 >> 2] = 0; //@line 11030
 HEAP32[$12 + 16 >> 2] = 0; //@line 11030
 HEAP32[$0 + 2092 >> 2] = 1; //@line 11032
 dest = $10; //@line 11033
 stop = dest + 40 | 0; //@line 11033
 do {
  HEAP32[dest >> 2] = 0; //@line 11033
  dest = dest + 4 | 0; //@line 11033
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 + 2020 >> 2] = 1; //@line 11035
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3128
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 3139
 $14 = $1 + 20 | 0; //@line 3140
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3142
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 3147
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 3151
 $24 = $0 + 128 | 0; //@line 3152
 _equeue_mutex_lock($24); //@line 3153
 $25 = HEAP32[$0 >> 2] | 0; //@line 3154
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 3158
   label = 5; //@line 3159
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 3161
   $$053 = $0; //@line 3162
   $29 = $25; //@line 3162
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 3171
    $34 = HEAP32[$33 >> 2] | 0; //@line 3172
    if (!$34) {
     $$051$ph = $33; //@line 3175
     label = 5; //@line 3176
     break L1;
    } else {
     $$053 = $33; //@line 3179
     $29 = $34; //@line 3179
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 3187
    HEAP32[$49 >> 2] = $29; //@line 3188
    HEAP32[$29 + 16 >> 2] = $49; //@line 3190
    $$0515859 = $$053; //@line 3191
    label = 11; //@line 3192
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 3196
   $43 = $1 + 8 | 0; //@line 3197
   HEAP32[$43 >> 2] = $42; //@line 3198
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 3202
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 3204
   $47 = $1 + 12 | 0; //@line 3205
   HEAP32[$47 >> 2] = $46; //@line 3206
   HEAP32[$46 + 16 >> 2] = $47; //@line 3208
   $$05157 = $$053; //@line 3209
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 3214
  $$0515859 = $$051$ph; //@line 3215
  label = 11; //@line 3216
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 3220
  $$05157 = $$0515859; //@line 3221
 }
 HEAP32[$$05157 >> 2] = $1; //@line 3223
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 3225
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 3227
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 3230
  return $13 | 0; //@line 3231
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 3237
  return $13 | 0; //@line 3238
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 3243
  return $13 | 0; //@line 3244
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 3250
  return $13 | 0; //@line 3251
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 3254
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3256
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3260
 FUNCTION_TABLE_vii[$54 & 15]($65, $67 & ~($67 >> 31)); //@line 3261
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 122; //@line 3264
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 3266
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 3268
  sp = STACKTOP; //@line 3269
  return 0; //@line 3270
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3272
 _equeue_mutex_unlock($24); //@line 3273
 return $13 | 0; //@line 3274
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_304($0) {
 $0 = $0 | 0;
 var $$pre126 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 24826
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24828
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24830
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24832
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24834
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24836
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24838
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24840
 $$pre126 = HEAP32[$2 >> 2] | 0; //@line 24841
 if ($$pre126 | 0) {
  $17 = HEAP32[$$pre126 + 4 >> 2] | 0; //@line 24845
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 24846
  FUNCTION_TABLE_vii[$17 & 15]($6, $8); //@line 24847
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 24850
   $18 = $ReallocAsyncCtx14 + 4 | 0; //@line 24851
   HEAP32[$18 >> 2] = $2; //@line 24852
   $19 = $ReallocAsyncCtx14 + 8 | 0; //@line 24853
   HEAP32[$19 >> 2] = $4; //@line 24854
   $20 = $ReallocAsyncCtx14 + 12 | 0; //@line 24855
   HEAP32[$20 >> 2] = $8; //@line 24856
   $21 = $ReallocAsyncCtx14 + 16 | 0; //@line 24857
   HEAP32[$21 >> 2] = $10; //@line 24858
   $22 = $ReallocAsyncCtx14 + 20 | 0; //@line 24859
   HEAP32[$22 >> 2] = $12; //@line 24860
   $23 = $ReallocAsyncCtx14 + 24 | 0; //@line 24861
   HEAP32[$23 >> 2] = $14; //@line 24862
   sp = STACKTOP; //@line 24863
   return;
  }
  ___async_unwind = 0; //@line 24866
  HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 24867
  $18 = $ReallocAsyncCtx14 + 4 | 0; //@line 24868
  HEAP32[$18 >> 2] = $2; //@line 24869
  $19 = $ReallocAsyncCtx14 + 8 | 0; //@line 24870
  HEAP32[$19 >> 2] = $4; //@line 24871
  $20 = $ReallocAsyncCtx14 + 12 | 0; //@line 24872
  HEAP32[$20 >> 2] = $8; //@line 24873
  $21 = $ReallocAsyncCtx14 + 16 | 0; //@line 24874
  HEAP32[$21 >> 2] = $10; //@line 24875
  $22 = $ReallocAsyncCtx14 + 20 | 0; //@line 24876
  HEAP32[$22 >> 2] = $12; //@line 24877
  $23 = $ReallocAsyncCtx14 + 24 | 0; //@line 24878
  HEAP32[$23 >> 2] = $14; //@line 24879
  sp = STACKTOP; //@line 24880
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 24883
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($10, $12); //@line 24884
 $26 = HEAP32[(HEAP32[$12 >> 2] | 0) + 72 >> 2] | 0; //@line 24887
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 24888
 FUNCTION_TABLE_vi[$26 & 1023]($12); //@line 24889
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 185; //@line 24892
  $27 = $ReallocAsyncCtx16 + 4 | 0; //@line 24893
  HEAP32[$27 >> 2] = $12; //@line 24894
  $28 = $ReallocAsyncCtx16 + 8 | 0; //@line 24895
  HEAP32[$28 >> 2] = $14; //@line 24896
  $29 = $ReallocAsyncCtx16 + 12 | 0; //@line 24897
  HEAP32[$29 >> 2] = $12; //@line 24898
  sp = STACKTOP; //@line 24899
  return;
 }
 ___async_unwind = 0; //@line 24902
 HEAP32[$ReallocAsyncCtx16 >> 2] = 185; //@line 24903
 $27 = $ReallocAsyncCtx16 + 4 | 0; //@line 24904
 HEAP32[$27 >> 2] = $12; //@line 24905
 $28 = $ReallocAsyncCtx16 + 8 | 0; //@line 24906
 HEAP32[$28 >> 2] = $14; //@line 24907
 $29 = $ReallocAsyncCtx16 + 12 | 0; //@line 24908
 HEAP32[$29 >> 2] = $12; //@line 24909
 sp = STACKTOP; //@line 24910
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_62($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22531
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22533
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22535
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 22541
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22543
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22545
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22547
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22549
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22551
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22553
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22555
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22557
 $28 = HEAP8[$0 + 56 >> 0] | 0; //@line 22559
 $30 = HEAP8[$0 + 57 >> 0] | 0; //@line 22561
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 22563
 $34 = HEAP8[$0 + 64 >> 0] | 0; //@line 22565
 $36 = HEAP16[$0 + 66 >> 1] | 0; //@line 22567
 $38 = HEAP32[$0 + 68 >> 2] | 0; //@line 22569
 $40 = HEAP32[$0 + 72 >> 2] | 0; //@line 22571
 $42 = HEAP32[$0 + 76 >> 2] | 0; //@line 22573
 $44 = HEAP8[$0 + 80 >> 0] | 0; //@line 22575
 $46 = HEAP8[$0 + 81 >> 0] & 1; //@line 22578
 $48 = HEAP32[$0 + 84 >> 2] | 0; //@line 22580
 $50 = HEAP16[$0 + 88 >> 1] | 0; //@line 22582
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  _mbed_tracef(2, 12866, 12917, HEAP32[$0 + 12 >> 2] | 0); //@line 22587
  HEAP32[$2 + 2020 >> 2] = 12; //@line 22589
  HEAP8[$2 + 2012 >> 0] = 0; //@line 22591
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(88) | 0; //@line 22595
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 22596
 if (!___async) {
  ___async_unwind = 0; //@line 22599
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 22601
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 22603
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 22605
 HEAP8[$ReallocAsyncCtx5 + 12 >> 0] = $10; //@line 22607
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $12; //@line 22609
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $14; //@line 22611
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $16; //@line 22613
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 22615
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $2; //@line 22617
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 22619
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 22621
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 22623
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 22625
 HEAP8[$ReallocAsyncCtx5 + 52 >> 0] = $28; //@line 22627
 HEAP8[$ReallocAsyncCtx5 + 53 >> 0] = $30; //@line 22629
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $32; //@line 22631
 HEAP8[$ReallocAsyncCtx5 + 60 >> 0] = $34; //@line 22633
 HEAP16[$ReallocAsyncCtx5 + 62 >> 1] = $36; //@line 22635
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $38; //@line 22637
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $40; //@line 22639
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $42; //@line 22641
 HEAP8[$ReallocAsyncCtx5 + 76 >> 0] = $44; //@line 22643
 HEAP8[$ReallocAsyncCtx5 + 77 >> 0] = $46 & 1; //@line 22646
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $48; //@line 22648
 HEAP16[$ReallocAsyncCtx5 + 84 >> 1] = $50; //@line 22650
 sp = STACKTOP; //@line 22651
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $13 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7687
 STACKTOP = STACKTOP + 16 | 0; //@line 7688
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7688
 $3 = sp; //@line 7689
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 7692
 $4 = $3 + 12 | 0; //@line 7693
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 7694
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 7696
 HEAP32[$3 + 8 >> 2] = $1; //@line 7698
 HEAP32[$4 >> 2] = 824; //@line 7699
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7700
 $5 = _equeue_alloc($0, 16) | 0; //@line 7701
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 266; //@line 7704
  HEAP32[$AsyncCtx8 + 4 >> 2] = $4; //@line 7706
  HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 7708
  HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 7710
  sp = STACKTOP; //@line 7711
  STACKTOP = sp; //@line 7712
  return 0; //@line 7712
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7714
 do {
  if (!$5) {
   $$0$i = 0; //@line 7718
  } else {
   $10 = HEAP32[$4 >> 2] | 0; //@line 7720
   do {
    if (!$10) {
     $19 = 0; //@line 7724
    } else {
     $13 = HEAP32[$10 + 4 >> 2] | 0; //@line 7727
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7728
     FUNCTION_TABLE_vii[$13 & 15]($5, $3); //@line 7729
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 267; //@line 7732
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 7734
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 7736
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7738
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 7740
      sp = STACKTOP; //@line 7741
      STACKTOP = sp; //@line 7742
      return 0; //@line 7742
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 7744
      $19 = HEAP32[$4 >> 2] | 0; //@line 7746
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $19; //@line 7752
   _equeue_event_dtor($5, 268); //@line 7753
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7754
   $20 = _equeue_post($0, 269, $5) | 0; //@line 7755
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 270; //@line 7758
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 7760
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 7762
    sp = STACKTOP; //@line 7763
    STACKTOP = sp; //@line 7764
    return 0; //@line 7764
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7766
    $$0$i = $20; //@line 7767
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$4 >> 2] | 0; //@line 7772
 if (!$23) {
  STACKTOP = sp; //@line 7775
  return $$0$i | 0; //@line 7775
 }
 $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 7778
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7779
 FUNCTION_TABLE_vi[$26 & 1023]($3); //@line 7780
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 271; //@line 7783
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 7785
  sp = STACKTOP; //@line 7786
  STACKTOP = sp; //@line 7787
  return 0; //@line 7787
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7789
 STACKTOP = sp; //@line 7790
 return $$0$i | 0; //@line 7790
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 16027
 STACKTOP = STACKTOP + 48 | 0; //@line 16028
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 16028
 $vararg_buffer10 = sp + 32 | 0; //@line 16029
 $vararg_buffer7 = sp + 24 | 0; //@line 16030
 $vararg_buffer3 = sp + 16 | 0; //@line 16031
 $vararg_buffer = sp; //@line 16032
 $0 = sp + 36 | 0; //@line 16033
 $1 = ___cxa_get_globals_fast() | 0; //@line 16034
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 16037
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 16042
   $9 = HEAP32[$7 >> 2] | 0; //@line 16044
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 16047
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 17728; //@line 16053
    _abort_message(17678, $vararg_buffer7); //@line 16054
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 16063
   } else {
    $22 = $3 + 80 | 0; //@line 16065
   }
   HEAP32[$0 >> 2] = $22; //@line 16067
   $23 = HEAP32[$3 >> 2] | 0; //@line 16068
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 16070
   $28 = HEAP32[(HEAP32[94] | 0) + 16 >> 2] | 0; //@line 16073
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16074
   $29 = FUNCTION_TABLE_iiii[$28 & 31](376, $23, $0) | 0; //@line 16075
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 669; //@line 16078
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16080
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 16082
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 16084
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 16086
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 16088
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 16090
    sp = STACKTOP; //@line 16091
    STACKTOP = sp; //@line 16092
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 16094
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 17728; //@line 16096
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 16098
    _abort_message(17637, $vararg_buffer3); //@line 16099
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 16102
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 16105
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16106
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 16107
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 670; //@line 16110
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 16112
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 16114
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 16116
    sp = STACKTOP; //@line 16117
    STACKTOP = sp; //@line 16118
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16120
    HEAP32[$vararg_buffer >> 2] = 17728; //@line 16121
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 16123
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 16125
    _abort_message(17592, $vararg_buffer); //@line 16126
   }
  }
 }
 _abort_message(17716, $vararg_buffer10); //@line 16131
}
function __ZN7LoRaPHY11add_channelEPK16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$125$off0 = 0, $$026 = 0, $$4$off0 = 0, $$5$off039 = 0, $$5$off040$ph = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $21 = 0, $37 = 0, $43 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $6 = 0, $62 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20640
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$026 = -1003; //@line 20645
  return $$026 | 0; //@line 20646
 }
 $6 = $2 & 255; //@line 20648
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$026 = -1003; //@line 20653
  return $$026 | 0; //@line 20654
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 20657
 $12 = $11 & 15; //@line 20658
 $14 = HEAP8[$0 + 26 >> 0] | 0; //@line 20660
 $16 = HEAP8[$0 + 27 >> 0] | 0; //@line 20662
 $19 = ($11 & 255) >>> 4; //@line 20666
 $21 = $19 << 24 >> 24 <= $16 << 24 >> 24; //@line 20668
 $$$125$off0 = ($12 & 255) > ($19 & 255) | (($12 << 24 >> 24 < $14 << 24 >> 24 ? 1 : $12 << 24 >> 24 > $16 << 24 >> 24) | $19 << 24 >> 24 >= $14 << 24 >> 24 & $21 ^ 1); //@line 20673
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($12 & 255) > ($14 & 255) | $$$125$off0 | $21 & $19 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 20685
  if ((HEAP32[$1 >> 2] | 0) == (HEAP32[(HEAP32[$0 + 124 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 20693
   label = 5; //@line 20694
  } else {
   $$5$off040$ph = $$4$off0; //@line 20696
  }
 } else {
  $$5$off039 = $$$125$off0; //@line 20699
  label = 5; //@line 20700
 }
 if ((label | 0) == 5) {
  $37 = HEAP8[$1 + 9 >> 0] | 0; //@line 20704
  if (($37 & 255) < (HEAPU8[$0 + 76 >> 0] | 0)) {
   $43 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 20711
   $44 = HEAP32[$1 >> 2] | 0; //@line 20712
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 20713
   $45 = FUNCTION_TABLE_iiii[$43 & 31]($0, $44, $37) | 0; //@line 20714
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 522; //@line 20717
    HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 20720
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 20722
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 20724
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 20726
    sp = STACKTOP; //@line 20727
    return 0; //@line 20728
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 20730
   if ($45) {
    if ($$5$off039) {
     $$026 = $$5$off039 ? -1005 : -1004; //@line 20734
     return $$026 | 0; //@line 20735
    }
    $50 = $0 + 124 | 0; //@line 20737
    $52 = (HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 20739
    HEAP32[$52 >> 2] = HEAP32[$1 >> 2]; //@line 20740
    HEAP32[$52 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20740
    HEAP32[$52 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 20740
    HEAP8[(HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 20745
    $62 = (HEAP32[$0 + 116 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 20751
    HEAP16[$62 >> 1] = 1 << ($6 & 15) | HEAPU16[$62 >> 1]; //@line 20756
    $$026 = 0; //@line 20757
    return $$026 | 0; //@line 20758
   } else {
    $$5$off040$ph = $$5$off039; //@line 20760
   }
  } else {
   $$5$off040$ph = $$5$off039; //@line 20763
  }
 }
 $$026 = $$5$off040$ph ? -1006 : -1004; //@line 20767
 return $$026 | 0; //@line 20768
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16202
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 16206
  return $39 | 0; //@line 16207
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16210
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 16212
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 16214
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 16217
  return $39 | 0; //@line 16218
 }
 $10 = $4 & 255; //@line 16220
 $indvars$iv = 0; //@line 16221
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 16232
     label = 15; //@line 16233
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 16241
     label = 15; //@line 16242
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 16245
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 16248
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16250
    $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv & 255) | 0; //@line 16251
    if (___async) {
     label = 9; //@line 16254
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16257
    if (!$26) {
     $39 = -1003; //@line 16259
     label = 15; //@line 16260
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 16263
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16264
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 16265
    if (___async) {
     label = 12; //@line 16268
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16271
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 16274
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 16277
  } else {
   $39 = 0; //@line 16279
   label = 15; //@line 16280
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 470; //@line 16285
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16287
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 16289
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 16291
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 16293
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 16295
  sp = STACKTOP; //@line 16296
  return 0; //@line 16297
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 471; //@line 16300
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 16302
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 16304
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 16306
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 16308
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 16310
  sp = STACKTOP; //@line 16311
  return 0; //@line 16312
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 16315
 }
 return 0; //@line 16317
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb($0) {
 $0 = $0 | 0;
 var $$69 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30328
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 30330
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 30334
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 30336
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 30338
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 30340
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 30342
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 30344
 $18 = HEAP8[$0 + 32 >> 0] | 0; //@line 30346
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 30348
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 30350
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 30352
 $$69 = (HEAP32[___async_retval >> 2] | 0) == 0 ? 0 : -1014; //@line 30356
 $31 = (HEAPU16[$6 >> 1] | 0) + (HEAPU8[$0 + 5 >> 0] | 0) & 65535; //@line 30361
 HEAP16[$6 >> 1] = $31; //@line 30362
 $34 = HEAP32[$10 >> 2] | 0; //@line 30365
 $35 = HEAP32[$12 >> 2] | 0; //@line 30366
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 30367
 $36 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($8 + 756 | 0, $14, $31, $8 + 1716 | 0, 128, $34, 0, $35, $16) | 0; //@line 30368
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 415; //@line 30371
  $37 = $ReallocAsyncCtx2 + 4 | 0; //@line 30372
  HEAP32[$37 >> 2] = $$69; //@line 30373
  $38 = $ReallocAsyncCtx2 + 8 | 0; //@line 30374
  HEAP32[$38 >> 2] = $16; //@line 30375
  $39 = $ReallocAsyncCtx2 + 12 | 0; //@line 30376
  HEAP32[$39 >> 2] = $6; //@line 30377
  $40 = $ReallocAsyncCtx2 + 16 | 0; //@line 30378
  HEAP32[$40 >> 2] = $8; //@line 30379
  $41 = $ReallocAsyncCtx2 + 20 | 0; //@line 30380
  HEAP8[$41 >> 0] = $18; //@line 30381
  $42 = $ReallocAsyncCtx2 + 21 | 0; //@line 30382
  HEAP8[$42 >> 0] = $2; //@line 30383
  $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 30384
  HEAP32[$43 >> 2] = $20; //@line 30385
  $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 30386
  HEAP32[$44 >> 2] = $22; //@line 30387
  $45 = $ReallocAsyncCtx2 + 32 | 0; //@line 30388
  HEAP32[$45 >> 2] = $24; //@line 30389
  sp = STACKTOP; //@line 30390
  return;
 }
 HEAP32[___async_retval >> 2] = $36; //@line 30394
 ___async_unwind = 0; //@line 30395
 HEAP32[$ReallocAsyncCtx2 >> 2] = 415; //@line 30396
 $37 = $ReallocAsyncCtx2 + 4 | 0; //@line 30397
 HEAP32[$37 >> 2] = $$69; //@line 30398
 $38 = $ReallocAsyncCtx2 + 8 | 0; //@line 30399
 HEAP32[$38 >> 2] = $16; //@line 30400
 $39 = $ReallocAsyncCtx2 + 12 | 0; //@line 30401
 HEAP32[$39 >> 2] = $6; //@line 30402
 $40 = $ReallocAsyncCtx2 + 16 | 0; //@line 30403
 HEAP32[$40 >> 2] = $8; //@line 30404
 $41 = $ReallocAsyncCtx2 + 20 | 0; //@line 30405
 HEAP8[$41 >> 0] = $18; //@line 30406
 $42 = $ReallocAsyncCtx2 + 21 | 0; //@line 30407
 HEAP8[$42 >> 0] = $2; //@line 30408
 $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 30409
 HEAP32[$43 >> 2] = $20; //@line 30410
 $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 30411
 HEAP32[$44 >> 2] = $22; //@line 30412
 $45 = $ReallocAsyncCtx2 + 32 | 0; //@line 30413
 HEAP32[$45 >> 2] = $24; //@line 30414
 sp = STACKTOP; //@line 30415
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_266($0) {
 $0 = $0 | 0;
 var $$038 = 0, $10 = 0, $17 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20182
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20184
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20186
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 20188
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20190
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20192
 if (!(HEAP8[$0 + 24 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 20199
  return;
 }
 if (!(HEAP32[$4 + 20 >> 2] | 0)) {
  $17 = HEAP32[$10 + 124 >> 2] | 0; //@line 20207
  $19 = HEAPU8[$4 >> 0] | 0; //@line 20209
  $23 = HEAP32[$17 + ($19 * 12 | 0) + 4 >> 2] | 0; //@line 20213
  $$038 = ($23 | 0) == 0 ? HEAP32[$17 + ($19 * 12 | 0) >> 2] | 0 : $23; //@line 20216
 } else {
  $$038 = $8; //@line 20218
 }
 $28 = HEAP32[$10 + 96 >> 2] | 0; //@line 20223
 $30 = HEAP32[$10 + 104 >> 2] | 0; //@line 20225
 $31 = $6 & 255; //@line 20226
 $33 = HEAP8[(HEAP32[$10 + 88 >> 2] | 0) + $31 >> 0] | 0; //@line 20228
 $34 = HEAP32[$2 >> 2] | 0; //@line 20229
 $37 = HEAP32[(HEAP32[$34 >> 2] | 0) + 72 >> 2] | 0; //@line 20232
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 20233
 FUNCTION_TABLE_vi[$37 & 1023]($34); //@line 20234
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 506; //@line 20237
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 20238
  HEAP32[$38 >> 2] = $2; //@line 20239
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 20240
  HEAP32[$39 >> 2] = $$038; //@line 20241
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 20242
  HEAP8[$40 >> 0] = $6; //@line 20243
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 20244
  HEAP32[$41 >> 2] = $10; //@line 20245
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 20246
  HEAP32[$42 >> 2] = $4; //@line 20247
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 20248
  HEAP8[$43 >> 0] = $33; //@line 20249
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 20250
  HEAP32[$44 >> 2] = $28; //@line 20251
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 20252
  HEAP32[$45 >> 2] = $30; //@line 20253
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 20254
  HEAP32[$46 >> 2] = $31; //@line 20255
  sp = STACKTOP; //@line 20256
  return;
 }
 ___async_unwind = 0; //@line 20259
 HEAP32[$ReallocAsyncCtx4 >> 2] = 506; //@line 20260
 $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 20261
 HEAP32[$38 >> 2] = $2; //@line 20262
 $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 20263
 HEAP32[$39 >> 2] = $$038; //@line 20264
 $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 20265
 HEAP8[$40 >> 0] = $6; //@line 20266
 $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 20267
 HEAP32[$41 >> 2] = $10; //@line 20268
 $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 20269
 HEAP32[$42 >> 2] = $4; //@line 20270
 $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 20271
 HEAP8[$43 >> 0] = $33; //@line 20272
 $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 20273
 HEAP32[$44 >> 2] = $28; //@line 20274
 $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 20275
 HEAP32[$45 >> 2] = $30; //@line 20276
 $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 20277
 HEAP32[$46 >> 2] = $31; //@line 20278
 sp = STACKTOP; //@line 20279
 return;
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_373($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28262
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28264
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28266
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28268
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 28270
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28272
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28274
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28276
 if (HEAP8[___async_retval >> 0] & 1) {
  $34 = $2; //@line 28281
 } else {
  $20 = $2 + 1 | 0; //@line 28283
  if (($20 | 0) < (HEAPU8[$10 >> 0] | 0 | 0)) {
   $18 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 28290
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 28292
   $21 = FUNCTION_TABLE_iiii[$18 & 31]($6, $14, $20 & 255) | 0; //@line 28293
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 498; //@line 28296
    $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 28297
    HEAP32[$22 >> 2] = $20; //@line 28298
    $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 28299
    HEAP32[$23 >> 2] = $4; //@line 28300
    $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 28301
    HEAP32[$24 >> 2] = $6; //@line 28302
    $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 28303
    HEAP8[$25 >> 0] = $8; //@line 28304
    $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 28305
    HEAP32[$26 >> 2] = $10; //@line 28306
    $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 28307
    HEAP32[$27 >> 2] = $12; //@line 28308
    $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 28309
    HEAP32[$28 >> 2] = $14; //@line 28310
    sp = STACKTOP; //@line 28311
    return;
   }
   HEAP8[___async_retval >> 0] = $21 & 1; //@line 28316
   ___async_unwind = 0; //@line 28317
   HEAP32[$ReallocAsyncCtx3 >> 2] = 498; //@line 28318
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 28319
   HEAP32[$22 >> 2] = $20; //@line 28320
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 28321
   HEAP32[$23 >> 2] = $4; //@line 28322
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 28323
   HEAP32[$24 >> 2] = $6; //@line 28324
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 28325
   HEAP8[$25 >> 0] = $8; //@line 28326
   $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 28327
   HEAP32[$26 >> 2] = $10; //@line 28328
   $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 28329
   HEAP32[$27 >> 2] = $12; //@line 28330
   $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 28331
   HEAP32[$28 >> 2] = $14; //@line 28332
   sp = STACKTOP; //@line 28333
   return;
  } else {
   $34 = -1; //@line 28336
  }
 }
 HEAP8[$4 + 9 >> 0] = $34; //@line 28341
 $38 = HEAP32[(HEAP32[$6 >> 2] | 0) + 60 >> 2] | 0; //@line 28344
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 28345
 $39 = FUNCTION_TABLE_iiii[$38 & 31]($6, $4, $8) | 0; //@line 28346
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 499; //@line 28349
  sp = STACKTOP; //@line 28350
  return;
 }
 HEAP32[___async_retval >> 2] = $39; //@line 28354
 ___async_unwind = 0; //@line 28355
 HEAP32[$ReallocAsyncCtx4 >> 2] = 499; //@line 28356
 sp = STACKTOP; //@line 28357
 return;
}
function _initialize__async_cb_21($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19755
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19757
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19759
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19761
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 19763
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19765
 $12 = 7 << 32 + -4; //@line 19767
 $13 = ___muldi3($12 | 0, 0, 1e6, 0) | 0; //@line 19768
 $14 = tempRet0; //@line 19769
 $15 = _i64Add($6 | 0, 0, -1, -1) | 0; //@line 19770
 $17 = _i64Add($15 | 0, tempRet0 | 0, $13 | 0, $14 | 0) | 0; //@line 19772
 $19 = ___udivdi3($17 | 0, tempRet0 | 0, $6 | 0, 0) | 0; //@line 19774
 $20 = tempRet0; //@line 19775
 $21 = HEAP32[$2 >> 2] | 0; //@line 19776
 HEAP32[$21 >> 2] = 0; //@line 19777
 HEAP32[$21 + 4 >> 2] = 0; //@line 19779
 $25 = HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] | 0; //@line 19782
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 19783
 $26 = FUNCTION_TABLE_i[$25 & 7]() | 0; //@line 19784
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 19787
  $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 19788
  HEAP32[$27 >> 2] = $2; //@line 19789
  $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 19790
  HEAP32[$28 >> 2] = $6; //@line 19791
  $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 19792
  HEAP8[$29 >> 0] = $8; //@line 19793
  $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 19794
  HEAP32[$30 >> 2] = 32; //@line 19795
  $31 = $ReallocAsyncCtx3 + 20 | 0; //@line 19796
  HEAP32[$31 >> 2] = $12; //@line 19797
  $32 = $ReallocAsyncCtx3 + 24 | 0; //@line 19798
  $33 = $32; //@line 19799
  $34 = $33; //@line 19800
  HEAP32[$34 >> 2] = $19; //@line 19801
  $35 = $33 + 4 | 0; //@line 19802
  $36 = $35; //@line 19803
  HEAP32[$36 >> 2] = $20; //@line 19804
  $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 19805
  HEAP32[$37 >> 2] = $10; //@line 19806
  $38 = $ReallocAsyncCtx3 + 36 | 0; //@line 19807
  HEAP32[$38 >> 2] = $4; //@line 19808
  sp = STACKTOP; //@line 19809
  return;
 }
 HEAP32[___async_retval >> 2] = $26; //@line 19813
 ___async_unwind = 0; //@line 19814
 HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 19815
 $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 19816
 HEAP32[$27 >> 2] = $2; //@line 19817
 $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 19818
 HEAP32[$28 >> 2] = $6; //@line 19819
 $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 19820
 HEAP8[$29 >> 0] = $8; //@line 19821
 $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 19822
 HEAP32[$30 >> 2] = 32; //@line 19823
 $31 = $ReallocAsyncCtx3 + 20 | 0; //@line 19824
 HEAP32[$31 >> 2] = $12; //@line 19825
 $32 = $ReallocAsyncCtx3 + 24 | 0; //@line 19826
 $33 = $32; //@line 19827
 $34 = $33; //@line 19828
 HEAP32[$34 >> 2] = $19; //@line 19829
 $35 = $33 + 4 | 0; //@line 19830
 $36 = $35; //@line 19831
 HEAP32[$36 >> 2] = $20; //@line 19832
 $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 19833
 HEAP32[$37 >> 2] = $10; //@line 19834
 $38 = $ReallocAsyncCtx3 + 36 | 0; //@line 19835
 HEAP32[$38 >> 2] = $4; //@line 19836
 sp = STACKTOP; //@line 19837
 return;
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26402
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26404
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26406
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26408
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[4889] | 0)) {
  _serial_init(19560, 2, 3); //@line 26416
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 26418
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26424
  _serial_putc(19560, $9 << 24 >> 24); //@line 26425
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 26428
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 26429
   HEAP32[$18 >> 2] = 0; //@line 26430
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 26431
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 26432
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 26433
   HEAP32[$20 >> 2] = $2; //@line 26434
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 26435
   HEAP8[$21 >> 0] = $9; //@line 26436
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 26437
   HEAP32[$22 >> 2] = $4; //@line 26438
   sp = STACKTOP; //@line 26439
   return;
  }
  ___async_unwind = 0; //@line 26442
  HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 26443
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 26444
  HEAP32[$18 >> 2] = 0; //@line 26445
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 26446
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 26447
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 26448
  HEAP32[$20 >> 2] = $2; //@line 26449
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 26450
  HEAP8[$21 >> 0] = $9; //@line 26451
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 26452
  HEAP32[$22 >> 2] = $4; //@line 26453
  sp = STACKTOP; //@line 26454
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 26457
  _serial_putc(19560, 13); //@line 26458
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 639; //@line 26461
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 26462
   HEAP8[$12 >> 0] = $9; //@line 26463
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 26464
   HEAP32[$13 >> 2] = 0; //@line 26465
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 26466
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 26467
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 26468
   HEAP32[$15 >> 2] = $2; //@line 26469
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 26470
   HEAP32[$16 >> 2] = $4; //@line 26471
   sp = STACKTOP; //@line 26472
   return;
  }
  ___async_unwind = 0; //@line 26475
  HEAP32[$ReallocAsyncCtx3 >> 2] = 639; //@line 26476
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 26477
  HEAP8[$12 >> 0] = $9; //@line 26478
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 26479
  HEAP32[$13 >> 2] = 0; //@line 26480
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 26481
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 26482
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 26483
  HEAP32[$15 >> 2] = $2; //@line 26484
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 26485
  HEAP32[$16 >> 2] = $4; //@line 26486
  sp = STACKTOP; //@line 26487
  return;
 }
}
function _mbed_error_vfprintf__async_cb_337($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26495
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26499
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26501
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26505
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 26506
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 26512
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26518
  _serial_putc(19560, $13 << 24 >> 24); //@line 26519
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 26522
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 26523
   HEAP32[$22 >> 2] = $12; //@line 26524
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 26525
   HEAP32[$23 >> 2] = $4; //@line 26526
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 26527
   HEAP32[$24 >> 2] = $6; //@line 26528
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 26529
   HEAP8[$25 >> 0] = $13; //@line 26530
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 26531
   HEAP32[$26 >> 2] = $10; //@line 26532
   sp = STACKTOP; //@line 26533
   return;
  }
  ___async_unwind = 0; //@line 26536
  HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 26537
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 26538
  HEAP32[$22 >> 2] = $12; //@line 26539
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 26540
  HEAP32[$23 >> 2] = $4; //@line 26541
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 26542
  HEAP32[$24 >> 2] = $6; //@line 26543
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 26544
  HEAP8[$25 >> 0] = $13; //@line 26545
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 26546
  HEAP32[$26 >> 2] = $10; //@line 26547
  sp = STACKTOP; //@line 26548
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 26551
  _serial_putc(19560, 13); //@line 26552
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 639; //@line 26555
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 26556
   HEAP8[$16 >> 0] = $13; //@line 26557
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 26558
   HEAP32[$17 >> 2] = $12; //@line 26559
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 26560
   HEAP32[$18 >> 2] = $4; //@line 26561
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 26562
   HEAP32[$19 >> 2] = $6; //@line 26563
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 26564
   HEAP32[$20 >> 2] = $10; //@line 26565
   sp = STACKTOP; //@line 26566
   return;
  }
  ___async_unwind = 0; //@line 26569
  HEAP32[$ReallocAsyncCtx3 >> 2] = 639; //@line 26570
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 26571
  HEAP8[$16 >> 0] = $13; //@line 26572
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 26573
  HEAP32[$17 >> 2] = $12; //@line 26574
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 26575
  HEAP32[$18 >> 2] = $4; //@line 26576
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 26577
  HEAP32[$19 >> 2] = $6; //@line 26578
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 26579
  HEAP32[$20 >> 2] = $10; //@line 26580
  sp = STACKTOP; //@line 26581
  return;
 }
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_241($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 18561
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18565
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18567
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18569
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18571
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 18572
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 18574
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 18577
   label = 11; //@line 18578
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 18584
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 18596
  HEAP32[$34 >> 2] = $35; //@line 18597
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 18603
  $34 = ___async_retval; //@line 18604
  HEAP32[$34 >> 2] = $35; //@line 18605
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 18613
  $34 = ___async_retval; //@line 18614
  HEAP32[$34 >> 2] = $35; //@line 18615
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 18618
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 18621
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 18623
 $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 18624
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 470; //@line 18627
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 18628
  HEAP32[$27 >> 2] = $6; //@line 18629
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 18630
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 18631
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 18632
  HEAP32[$29 >> 2] = $4; //@line 18633
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 18634
  HEAP32[$30 >> 2] = $8; //@line 18635
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 18636
  HEAP32[$31 >> 2] = $10; //@line 18637
  sp = STACKTOP; //@line 18638
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 18643
 ___async_unwind = 0; //@line 18644
 HEAP32[$ReallocAsyncCtx >> 2] = 470; //@line 18645
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 18646
 HEAP32[$27 >> 2] = $6; //@line 18647
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 18648
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 18649
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 18650
 HEAP32[$29 >> 2] = $4; //@line 18651
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 18652
 HEAP32[$30 >> 2] = $8; //@line 18653
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 18654
 HEAP32[$31 >> 2] = $10; //@line 18655
 sp = STACKTOP; //@line 18656
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $18 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 1707
 STACKTOP = STACKTOP + 32 | 0; //@line 1708
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1708
 $vararg_buffer = sp; //@line 1709
 $2 = sp + 8 | 0; //@line 1710
 HEAP32[$vararg_buffer >> 2] = $1; //@line 1711
 _mbed_tracef(16, 11016, 11418, $vararg_buffer); //@line 1712
 HEAP8[$0 + 688 >> 0] = 2; //@line 1714
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1715
 $4 = $0 + 1240 | 0; //@line 1716
 $5 = $2 + 12 | 0; //@line 1717
 HEAP32[$2 >> 2] = 89; //@line 1718
 HEAP32[$2 + 4 >> 2] = 0; //@line 1720
 HEAP32[$2 + 8 >> 2] = $0; //@line 1722
 HEAP32[$5 >> 2] = 584; //@line 1723
 $6 = $0 + 1280 | 0; //@line 1724
 if (($6 | 0) != ($2 | 0)) {
  $8 = $0 + 1292 | 0; //@line 1727
  $9 = HEAP32[$8 >> 2] | 0; //@line 1728
  do {
   if ($9 | 0) {
    $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 1733
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 1734
    FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 1735
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 90; //@line 1738
     HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 1740
     HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 1742
     HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 1744
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 1746
     HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 1748
     sp = STACKTOP; //@line 1749
     STACKTOP = sp; //@line 1750
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 1752
     break;
    }
   }
  } while (0);
  $18 = HEAP32[$5 >> 2] | 0; //@line 1757
  do {
   if (!$18) {
    $26 = 0; //@line 1761
   } else {
    $21 = HEAP32[$18 + 4 >> 2] | 0; //@line 1764
    $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1765
    FUNCTION_TABLE_vii[$21 & 15]($6, $2); //@line 1766
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 91; //@line 1769
     HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 1771
     HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 1773
     HEAP32[$AsyncCtx2 + 12 >> 2] = $4; //@line 1775
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 1777
     sp = STACKTOP; //@line 1778
     STACKTOP = sp; //@line 1779
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1781
     $26 = HEAP32[$5 >> 2] | 0; //@line 1783
     break;
    }
   }
  } while (0);
  HEAP32[$8 >> 2] = $26; //@line 1788
 }
 __ZN4mbed6Ticker5setupEy($4, 1e5, 0); //@line 1790
 $27 = HEAP32[$5 >> 2] | 0; //@line 1791
 if (!$27) {
  STACKTOP = sp; //@line 1794
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 1797
 $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1798
 FUNCTION_TABLE_vi[$30 & 1023]($2); //@line 1799
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 92; //@line 1802
  sp = STACKTOP; //@line 1803
  STACKTOP = sp; //@line 1804
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 1806
 STACKTOP = sp; //@line 1807
 return;
}
function __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$$sroa_idx14 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18680
 STACKTOP = STACKTOP + 16 | 0; //@line 18681
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18681
 $7 = sp; //@line 18682
 $8 = $0 + 64 | 0; //@line 18683
 _mbedtls_aes_init($8); //@line 18684
 $9 = _mbedtls_aes_setkey_enc($8, $1, $2) | 0; //@line 18685
 if (!$9) {
  $11 = $7 + 9 | 0; //@line 18688
  HEAP8[$11 >> 0] = 0; //@line 18689
  HEAP8[$11 + 1 >> 0] = 0; //@line 18689
  HEAP8[$11 + 2 >> 0] = 0; //@line 18689
  HEAP8[$11 + 3 >> 0] = 0; //@line 18689
  HEAP8[$11 + 4 >> 0] = 0; //@line 18689
  HEAP8[$11 + 5 >> 0] = 0; //@line 18689
  HEAP8[$11 + 6 >> 0] = 0; //@line 18689
  HEAP8[$7 >> 0] = 1; //@line 18690
  $12 = $7 + 1 | 0; //@line 18691
  HEAP8[$12 >> 0] = HEAP8[$3 >> 0] | 0; //@line 18692
  HEAP8[$12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0; //@line 18692
  HEAP8[$12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0; //@line 18692
  HEAP8[$12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0; //@line 18692
  HEAP8[$12 + 4 >> 0] = HEAP8[$3 + 4 >> 0] | 0; //@line 18692
  HEAP8[$12 + 5 >> 0] = HEAP8[$3 + 5 >> 0] | 0; //@line 18692
  $$0$$sroa_idx14 = $7 + 7 | 0; //@line 18693
  HEAP8[$$0$$sroa_idx14 >> 0] = $4; //@line 18694
  HEAP8[$$0$$sroa_idx14 + 1 >> 0] = $4 >> 8; //@line 18694
  $13 = _mbedtls_aes_crypt_ecb($8, 1, $7, $5) | 0; //@line 18695
  if (!$13) {
   $15 = $7 + 9 | 0; //@line 18698
   HEAP8[$15 >> 0] = 0; //@line 18699
   HEAP8[$15 + 1 >> 0] = 0; //@line 18699
   HEAP8[$15 + 2 >> 0] = 0; //@line 18699
   HEAP8[$15 + 3 >> 0] = 0; //@line 18699
   HEAP8[$15 + 4 >> 0] = 0; //@line 18699
   HEAP8[$15 + 5 >> 0] = 0; //@line 18699
   HEAP8[$15 + 6 >> 0] = 0; //@line 18699
   HEAP8[$7 >> 0] = 2; //@line 18700
   HEAP8[$12 >> 0] = HEAP8[$3 >> 0] | 0; //@line 18701
   HEAP8[$12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0; //@line 18701
   HEAP8[$12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0; //@line 18701
   HEAP8[$12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0; //@line 18701
   HEAP8[$12 + 4 >> 0] = HEAP8[$3 + 4 >> 0] | 0; //@line 18701
   HEAP8[$12 + 5 >> 0] = HEAP8[$3 + 5 >> 0] | 0; //@line 18701
   HEAP8[$$0$$sroa_idx14 >> 0] = $4; //@line 18702
   HEAP8[$$0$$sroa_idx14 + 1 >> 0] = $4 >> 8; //@line 18702
   $$0 = _mbedtls_aes_crypt_ecb($8, 1, $7, $6) | 0; //@line 18704
  } else {
   $$0 = $13; //@line 18706
  }
 } else {
  $$0 = $9; //@line 18709
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 18711
 _mbedtls_aes_free($8); //@line 18712
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 496; //@line 18715
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 18717
  HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 18719
  sp = STACKTOP; //@line 18720
  STACKTOP = sp; //@line 18721
  return 0; //@line 18721
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18723
  STACKTOP = sp; //@line 18724
  return $$0 | 0; //@line 18724
 }
 return 0; //@line 18726
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11005
 STACKTOP = STACKTOP + 48 | 0; //@line 11006
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11006
 $vararg_buffer3 = sp + 16 | 0; //@line 11007
 $vararg_buffer = sp; //@line 11008
 $3 = sp + 32 | 0; //@line 11009
 $4 = $0 + 28 | 0; //@line 11010
 $5 = HEAP32[$4 >> 2] | 0; //@line 11011
 HEAP32[$3 >> 2] = $5; //@line 11012
 $7 = $0 + 20 | 0; //@line 11014
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 11016
 HEAP32[$3 + 4 >> 2] = $9; //@line 11017
 HEAP32[$3 + 8 >> 2] = $1; //@line 11019
 HEAP32[$3 + 12 >> 2] = $2; //@line 11021
 $12 = $9 + $2 | 0; //@line 11022
 $13 = $0 + 60 | 0; //@line 11023
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 11026
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 11028
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 11030
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 11032
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 11036
  } else {
   $$04756 = 2; //@line 11038
   $$04855 = $12; //@line 11038
   $$04954 = $3; //@line 11038
   $27 = $17; //@line 11038
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 11044
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 11046
    $38 = $27 >>> 0 > $37 >>> 0; //@line 11047
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 11049
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 11051
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 11053
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 11056
    $44 = $$150 + 4 | 0; //@line 11057
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 11060
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 11063
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 11065
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 11067
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 11069
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 11072
     break L1;
    } else {
     $$04756 = $$1; //@line 11075
     $$04954 = $$150; //@line 11075
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 11079
   HEAP32[$4 >> 2] = 0; //@line 11080
   HEAP32[$7 >> 2] = 0; //@line 11081
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 11084
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 11087
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 11092
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 11098
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11103
  $25 = $20; //@line 11104
  HEAP32[$4 >> 2] = $25; //@line 11105
  HEAP32[$7 >> 2] = $25; //@line 11106
  $$051 = $2; //@line 11107
 }
 STACKTOP = sp; //@line 11109
 return $$051 | 0; //@line 11109
}
function __ZN7LoRaMacD2Ev__async_cb_178($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13477
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13479
 $4 = HEAP32[$2 + 1848 >> 2] | 0; //@line 13481
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 13486
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 13487
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1836 | 0); //@line 13488
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 363; //@line 13491
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 13492
   HEAP32[$9 >> 2] = $2; //@line 13493
   sp = STACKTOP; //@line 13494
   return;
  }
  ___async_unwind = 0; //@line 13497
  HEAP32[$ReallocAsyncCtx3 >> 2] = 363; //@line 13498
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 13499
  HEAP32[$9 >> 2] = $2; //@line 13500
  sp = STACKTOP; //@line 13501
  return;
 }
 $11 = HEAP32[$2 + 1828 >> 2] | 0; //@line 13505
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 13510
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 13511
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1816 | 0); //@line 13512
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 13515
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 13516
   HEAP32[$16 >> 2] = $2; //@line 13517
   sp = STACKTOP; //@line 13518
   return;
  }
  ___async_unwind = 0; //@line 13521
  HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 13522
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 13523
  HEAP32[$16 >> 2] = $2; //@line 13524
  sp = STACKTOP; //@line 13525
  return;
 }
 $18 = HEAP32[$2 + 1808 >> 2] | 0; //@line 13529
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 13534
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13535
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 1796 | 0); //@line 13536
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 13539
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 13540
   HEAP32[$23 >> 2] = $2; //@line 13541
   sp = STACKTOP; //@line 13542
   return;
  }
  ___async_unwind = 0; //@line 13545
  HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 13546
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 13547
  HEAP32[$23 >> 2] = $2; //@line 13548
  sp = STACKTOP; //@line 13549
  return;
 }
 $25 = HEAP32[$2 + 748 >> 2] | 0; //@line 13553
 if (!$25) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 13557
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 13562
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 13563
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 736 | 0); //@line 13564
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 13567
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 13568
  HEAP32[$30 >> 2] = $2; //@line 13569
  sp = STACKTOP; //@line 13570
  return;
 }
 ___async_unwind = 0; //@line 13573
 HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 13574
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 13575
 HEAP32[$30 >> 2] = $2; //@line 13576
 sp = STACKTOP; //@line 13577
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_400($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30892
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30894
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30896
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30898
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30900
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30902
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 30904
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30906
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30908
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30910
 $19 = $2 + 1748 | 0; //@line 30912
 HEAP16[$19 >> 1] = $AsyncRetVal; //@line 30913
 $21 = HEAP16[$4 >> 1] | 0; //@line 30915
 HEAP16[$4 >> 1] = $21 + 1 << 16 >> 16; //@line 30917
 HEAP8[($21 & 65535) + ($2 + 1185) >> 0] = $AsyncRetVal; //@line 30920
 $27 = (HEAPU16[$19 >> 1] | 0) >>> 8 & 255; //@line 30923
 $28 = HEAP16[$4 >> 1] | 0; //@line 30924
 HEAP16[$4 >> 1] = $28 + 1 << 16 >> 16; //@line 30926
 HEAP8[($28 & 65535) + ($2 + 1185) >> 0] = $27; //@line 30929
 $34 = HEAP16[$4 >> 1] & 255; //@line 30932
 $36 = HEAP32[$2 + 1712 >> 2] | 0; //@line 30934
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 30935
 $37 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($2 + 756 | 0, $6, $34, $36, 128, $8) | 0; //@line 30936
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 30939
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 30940
  HEAP32[$38 >> 2] = $8; //@line 30941
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 30942
  HEAP32[$39 >> 2] = $4; //@line 30943
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 30944
  HEAP32[$40 >> 2] = $2; //@line 30945
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 30946
  HEAP32[$41 >> 2] = $10; //@line 30947
  $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 30948
  HEAP8[$42 >> 0] = $12; //@line 30949
  $43 = $ReallocAsyncCtx3 + 24 | 0; //@line 30950
  HEAP32[$43 >> 2] = $14; //@line 30951
  $44 = $ReallocAsyncCtx3 + 28 | 0; //@line 30952
  HEAP32[$44 >> 2] = $16; //@line 30953
  sp = STACKTOP; //@line 30954
  return;
 }
 HEAP32[___async_retval >> 2] = $37; //@line 30958
 ___async_unwind = 0; //@line 30959
 HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 30960
 $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 30961
 HEAP32[$38 >> 2] = $8; //@line 30962
 $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 30963
 HEAP32[$39 >> 2] = $4; //@line 30964
 $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 30965
 HEAP32[$40 >> 2] = $2; //@line 30966
 $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 30967
 HEAP32[$41 >> 2] = $10; //@line 30968
 $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 30969
 HEAP8[$42 >> 0] = $12; //@line 30970
 $43 = $ReallocAsyncCtx3 + 24 | 0; //@line 30971
 HEAP32[$43 >> 2] = $14; //@line 30972
 $44 = $ReallocAsyncCtx3 + 28 | 0; //@line 30973
 HEAP32[$44 >> 2] = $16; //@line 30974
 sp = STACKTOP; //@line 30975
 return;
}
function __ZN7LoRaMac18prepare_ongoing_txEhPKhthh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $19 = 0, $20 = 0, $32 = 0, $48 = 0, $53 = 0, $55 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP; //@line 14601
 STACKTOP = STACKTOP + 32 | 0; //@line 14602
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14602
 $vararg_buffer2 = sp + 8 | 0; //@line 14603
 $vararg_buffer = sp; //@line 14604
 HEAP8[$0 + 2105 >> 0] = $1; //@line 14606
 $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 14608
 $8 = __ZN7LoRaMac24get_max_possible_tx_sizeEh($0, $3 & 255) | 0; //@line 14609
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 433; //@line 14612
  HEAP16[$AsyncCtx + 4 >> 1] = $3; //@line 14614
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14616
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 14618
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 14620
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 14622
  HEAP8[$AsyncCtx + 24 >> 0] = $4; //@line 14624
  HEAP8[$AsyncCtx + 25 >> 0] = $1; //@line 14626
  HEAP8[$AsyncCtx + 26 >> 0] = $5; //@line 14628
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer2; //@line 14630
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer2; //@line 14632
  sp = STACKTOP; //@line 14633
  STACKTOP = sp; //@line 14634
  return 0; //@line 14634
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14636
 $19 = $8 & 255; //@line 14637
 $20 = $3 & 65535; //@line 14638
 if ($20 >>> 0 > $19 >>> 0) {
  HEAP32[$vararg_buffer >> 2] = $20; //@line 14641
  HEAP32[$vararg_buffer + 4 >> 2] = $19; //@line 14643
  _mbed_tracef(8, 12866, 13365, $vararg_buffer); //@line 14644
  HEAP16[$0 + 2372 >> 1] = $20 - $19; //@line 14648
  HEAP16[$0 + 2370 >> 1] = $8 & 255; //@line 14651
  _memcpy($0 + 2115 | 0, $2 | 0, $19 | 0) | 0; //@line 14653
 } else {
  HEAP16[$0 + 2370 >> 1] = $3; //@line 14656
  HEAP16[$0 + 2372 >> 1] = 0; //@line 14658
  if ($3 << 16 >> 16) {
   _memcpy($0 + 2115 | 0, $2 | 0, $20 | 0) | 0; //@line 14662
  }
 }
 $32 = $4 & 255; //@line 14665
 if ($32 & 1 | 0) {
  HEAP32[$0 + 2108 >> 2] = 0; //@line 14670
  HEAP8[$0 + 2112 >> 0] = $1; //@line 14672
  HEAP8[$0 + 2114 >> 0] = 1; //@line 14674
 }
 if ($32 & 2 | 0) {
  HEAP32[$0 + 2108 >> 2] = 1; //@line 14680
  HEAP8[$0 + 2112 >> 0] = $1; //@line 14682
  HEAP8[$0 + 2114 >> 0] = $5; //@line 14684
 }
 if (!($32 & 8)) {
  $55 = HEAP8[$0 + 2112 >> 0] | 0; //@line 14691
 } else {
  HEAP32[$0 + 2108 >> 2] = 3; //@line 14694
  HEAP8[$0 + 2112 >> 0] = $1; //@line 14696
  HEAP8[$0 + 2114 >> 0] = 1; //@line 14698
  $55 = $1; //@line 14699
 }
 $48 = $0 + 2370 | 0; //@line 14701
 $53 = HEAPU16[$0 + 2372 >> 1] | 0; //@line 14706
 HEAP32[$vararg_buffer2 >> 2] = HEAPU16[$48 >> 1]; //@line 14708
 HEAP32[$vararg_buffer2 + 4 >> 2] = $53; //@line 14710
 HEAP32[$vararg_buffer2 + 8 >> 2] = $55 & 255; //@line 14712
 _mbed_tracef(8, 12866, 13420, $vararg_buffer2); //@line 14713
 STACKTOP = sp; //@line 14715
 return HEAP16[$48 >> 1] | 0; //@line 14715
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$013 = 0, $$079$i = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $27 = 0, $32 = 0, $36 = 0, $37 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18751
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$013 = 0; //@line 18756
  return $$013 | 0; //@line 18757
 }
 $6 = HEAP32[$2 >> 2] | 0; //@line 18759
 if (!$6) {
  $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 18764
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18765
  $11 = FUNCTION_TABLE_iii[$10 & 31]($0, $1) | 0; //@line 18766
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 497; //@line 18769
   sp = STACKTOP; //@line 18770
   return 0; //@line 18771
  } else {
   _emscripten_free_async_context($AsyncCtx | 0); //@line 18773
   return ($11 ? 3 : 0) | 0; //@line 18775
  }
 }
 $12 = $0 + 76 | 0; //@line 18778
 L10 : do {
  if (!(HEAP8[$12 >> 0] | 0)) {
   $32 = -1; //@line 18783
  } else {
   $$079$i = 0; //@line 18785
   while (1) {
    $17 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 18789
    $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18791
    $19 = FUNCTION_TABLE_iiii[$17 & 31]($0, $6, $$079$i & 255) | 0; //@line 18792
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18797
    if ($19) {
     $32 = $$079$i; //@line 18799
     break L10;
    }
    $27 = $$079$i + 1 | 0; //@line 18802
    if (($27 | 0) < (HEAPU8[$12 >> 0] | 0)) {
     $$079$i = $27; //@line 18807
    } else {
     $32 = -1; //@line 18809
     break L10;
    }
   }
   HEAP32[$AsyncCtx3 >> 2] = 498; //@line 18813
   HEAP32[$AsyncCtx3 + 4 >> 2] = $$079$i; //@line 18815
   HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 18817
   HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 18819
   HEAP8[$AsyncCtx3 + 16 >> 0] = $1; //@line 18821
   HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 18823
   HEAP32[$AsyncCtx3 + 24 >> 2] = $0; //@line 18825
   HEAP32[$AsyncCtx3 + 28 >> 2] = $6; //@line 18827
   sp = STACKTOP; //@line 18828
   return 0; //@line 18829
  }
 } while (0);
 HEAP8[$2 + 9 >> 0] = $32; //@line 18834
 $36 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 18837
 $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 18838
 $37 = FUNCTION_TABLE_iiii[$36 & 31]($0, $2, $1) | 0; //@line 18839
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 499; //@line 18842
  sp = STACKTOP; //@line 18843
  return 0; //@line 18844
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 18846
 switch ($37 | 0) {
 case -1004:
  {
   $$013 = 2; //@line 18849
   return $$013 | 0; //@line 18850
  }
 case -1005:
  {
   $$013 = 1; //@line 18854
   return $$013 | 0; //@line 18855
  }
 case -1006:
  {
   $$013 = 0; //@line 18859
   return $$013 | 0; //@line 18860
  }
 case 0:
  {
   $$013 = 3; //@line 18864
   return $$013 | 0; //@line 18865
  }
 default:
  {
   $$013 = 0; //@line 18869
   return $$013 | 0; //@line 18870
  }
 }
 return 0; //@line 18873
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $21 = 0, $24 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 8804
 STACKTOP = STACKTOP + 32 | 0; //@line 8805
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8805
 $1 = sp + 8 | 0; //@line 8807
 if ((HEAP32[(__ZNK7LoRaMac19get_mlme_indicationEv($0) | 0) >> 2] | 0) != 4) {
  _mbed_tracef(2, 12187, 12460, sp); //@line 8812
  STACKTOP = sp; //@line 8813
  return;
 }
 $5 = $0 + 2512 | 0; //@line 8815
 $6 = HEAP32[$5 >> 2] | 0; //@line 8816
 do {
  if ($6 | 0) {
   $10 = HEAP32[$0 + 3168 >> 2] | 0; //@line 8822
   $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 8824
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 8825
   FUNCTION_TABLE_vii[$12 & 15]($1, $0 + 2500 | 0); //@line 8826
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 305; //@line 8829
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 8831
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8833
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 8835
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 8837
    sp = STACKTOP; //@line 8838
    STACKTOP = sp; //@line 8839
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8841
   $17 = $1 + 12 | 0; //@line 8843
   HEAP32[$17 >> 2] = HEAP32[$5 >> 2]; //@line 8844
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8845
   $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($10, $1, 11) | 0; //@line 8846
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 306; //@line 8849
    HEAP32[$AsyncCtx5 + 4 >> 2] = $17; //@line 8851
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 8853
    sp = STACKTOP; //@line 8854
    STACKTOP = sp; //@line 8855
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8857
   $21 = HEAP32[$17 >> 2] | 0; //@line 8858
   do {
    if ($21 | 0) {
     $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 8863
     $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8864
     FUNCTION_TABLE_vi[$24 & 1023]($1); //@line 8865
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 307; //@line 8868
      HEAP32[$AsyncCtx2 + 4 >> 2] = $18; //@line 8870
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 8872
      sp = STACKTOP; //@line 8873
      STACKTOP = sp; //@line 8874
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8876
      break;
     }
    }
   } while (0);
   if (!$18) {
    $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8883
    _mbed_assert_internal(12080, 12089, 775); //@line 8884
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 308; //@line 8887
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 8889
     sp = STACKTOP; //@line 8890
     STACKTOP = sp; //@line 8891
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 8893
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 8899
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_281($0) {
 $0 = $0 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21805
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 21808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21810
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21812
 $7 = $4 + 1168 | 0; //@line 21813
 $12 = (HEAP8[$4 + 1177 >> 0] | 0) != 0; //@line 21818
 if (!(HEAP32[$7 >> 2] | 0)) {
  if ($12) {
   $14 = $2 ? 3 : 5; //@line 21822
   HEAP32[$4 + 2056 >> 2] = $14; //@line 21823
   $$pre$phiZ2D = $14; //@line 21824
  } else {
   $$pre$phiZ2D = $2 ? 3 : 5; //@line 21827
  }
  HEAP32[$4 + 2092 >> 2] = $$pre$phiZ2D; //@line 21830
  if ((HEAP32[$6 >> 2] | 0) != 2) {
   $20 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($4, HEAP32[$4 + 1780 >> 2] | 0) | 0; //@line 21836
   if ($20 >>> 0 < (HEAP32[$4 + 1776 >> 2] | 0) >>> 0) {
    label = 16; //@line 21841
   } else {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 21844
    __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $4 + 1836 | 0); //@line 21845
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 405; //@line 21848
     $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 21849
     HEAP32[$25 >> 2] = $6; //@line 21850
     $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 21851
     HEAP32[$26 >> 2] = $4; //@line 21852
     $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 21853
     HEAP32[$27 >> 2] = $7; //@line 21854
     sp = STACKTOP; //@line 21855
     return;
    }
    ___async_unwind = 0; //@line 21858
    HEAP32[$ReallocAsyncCtx3 >> 2] = 405; //@line 21859
    $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 21860
    HEAP32[$25 >> 2] = $6; //@line 21861
    $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 21862
    HEAP32[$26 >> 2] = $4; //@line 21863
    $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 21864
    HEAP32[$27 >> 2] = $7; //@line 21865
    sp = STACKTOP; //@line 21866
    return;
   }
  }
 } else {
  if ($12) {
   $29 = $2 ? 4 : 6; //@line 21873
   HEAP32[$4 + 2056 >> 2] = $29; //@line 21874
   $$pre$phi6Z2D = $29; //@line 21875
  } else {
   $$pre$phi6Z2D = $2 ? 4 : 6; //@line 21878
  }
  HEAP32[$4 + 2092 >> 2] = $$pre$phi6Z2D; //@line 21881
  label = 16; //@line 21882
 }
 if ((label | 0) == 16) {
  if ((HEAP32[$6 >> 2] | 0) != 2) {
   HEAP32[___async_retval >> 2] = HEAP32[$7 >> 2]; //@line 21890
   return;
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 21894
 __ZN7LoRaMac15open_rx2_windowEv($4); //@line 21895
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 406; //@line 21898
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 21899
  HEAP32[$32 >> 2] = $7; //@line 21900
  sp = STACKTOP; //@line 21901
  return;
 }
 ___async_unwind = 0; //@line 21904
 HEAP32[$ReallocAsyncCtx >> 2] = 406; //@line 21905
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 21906
 HEAP32[$32 >> 2] = $7; //@line 21907
 sp = STACKTOP; //@line 21908
 return;
}
function __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $21 = 0, $22 = 0, $25 = 0, $27 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $5 = 0, $7 = 0, dest = 0, src = 0, stop = 0;
 if (!$1) {
  HEAP32[$0 + 1752 >> 2] = 0; //@line 15142
  HEAP32[$0 + 1756 >> 2] = 0; //@line 15144
  dest = $0 + 1716 | 0; //@line 15146
  stop = dest + 32 | 0; //@line 15146
  do {
   HEAP8[dest >> 0] = 0; //@line 15146
   dest = dest + 1 | 0; //@line 15146
  } while ((dest | 0) < (stop | 0));
  $$0 = 0; //@line 15147
  return $$0 | 0; //@line 15148
 }
 $4 = $1 + 4 | 0; //@line 15150
 if ($2) {
  $5 = HEAP32[$4 >> 2] | 0; //@line 15152
  if (!$5) {
   $$0 = -1003; //@line 15155
   return $$0 | 0; //@line 15156
  }
  $7 = $1 + 8 | 0; //@line 15158
  if (!(HEAP32[$7 >> 2] | 0)) {
   $$0 = -1003; //@line 15162
   return $$0 | 0; //@line 15163
  }
  $10 = $1 + 12 | 0; //@line 15165
  if (!(HEAP32[$10 >> 2] | 0)) {
   $$0 = -1003; //@line 15169
   return $$0 | 0; //@line 15170
  }
  $13 = $1 + 16 | 0; //@line 15172
  if (!(HEAP8[$13 >> 0] | 0)) {
   $$0 = -1003; //@line 15176
   return $$0 | 0; //@line 15177
  }
  HEAP32[$0 + 1704 >> 2] = $5; //@line 15180
  HEAP32[$0 + 1708 >> 2] = HEAP32[$7 >> 2]; //@line 15183
  HEAP32[$0 + 1712 >> 2] = HEAP32[$10 >> 2]; //@line 15186
  $21 = HEAP8[$13 >> 0] | 0; //@line 15187
  $22 = $0 + 1700 | 0; //@line 15188
  HEAP8[$22 >> 0] = $21; //@line 15189
  $25 = __ZN7LoRaPHY21verify_nb_join_trialsEh($0 + 4 | 0, HEAP8[$13 >> 0] | 0) | 0; //@line 15192
  HEAP8[$22 >> 0] = $25 ? $21 : 12; //@line 15194
  HEAP8[$0 + 1701 >> 0] = 0; //@line 15196
  $$0 = 0; //@line 15197
  return $$0 | 0; //@line 15198
 } else {
  $27 = $1 + 8 | 0; //@line 15200
  if (!(HEAP32[$27 >> 2] | 0)) {
   $$0 = -1003; //@line 15204
   return $$0 | 0; //@line 15205
  }
  $30 = HEAP32[$4 >> 2] | 0; //@line 15207
  if (!$30) {
   $$0 = -1003; //@line 15210
   return $$0 | 0; //@line 15211
  }
  $32 = $1 + 12 | 0; //@line 15213
  if (!(HEAP32[$32 >> 2] | 0)) {
   $$0 = -1003; //@line 15217
   return $$0 | 0; //@line 15218
  }
  $35 = $1 + 16 | 0; //@line 15220
  if (!(HEAP32[$35 >> 2] | 0)) {
   $$0 = -1003; //@line 15224
   return $$0 | 0; //@line 15225
  }
  HEAP32[$0 + 1752 >> 2] = $30; //@line 15228
  HEAP32[$0 + 1756 >> 2] = HEAP32[$27 >> 2]; //@line 15231
  dest = $0 + 1716 | 0; //@line 15234
  src = HEAP32[$32 >> 2] | 0; //@line 15234
  stop = dest + 16 | 0; //@line 15234
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 15234
   dest = dest + 1 | 0; //@line 15234
   src = src + 1 | 0; //@line 15234
  } while ((dest | 0) < (stop | 0));
  dest = $0 + 1732 | 0; //@line 15237
  src = HEAP32[$35 >> 2] | 0; //@line 15237
  stop = dest + 16 | 0; //@line 15237
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 15237
   dest = dest + 1 | 0; //@line 15237
   src = src + 1 | 0; //@line 15237
  } while ((dest | 0) < (stop | 0));
  $$0 = 0; //@line 15238
  return $$0 | 0; //@line 15239
 }
 return 0; //@line 15241
}
function __ZN7LoRaMac15open_rx1_windowEv($0) {
 $0 = $0 | 0;
 var $17 = 0, $22 = 0, $34 = 0, $36 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14174
 STACKTOP = STACKTOP + 16 | 0; //@line 14175
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14175
 _mbed_tracef(16, 12866, 13218, sp); //@line 14177
 HEAP8[$0 + 2377 >> 0] = 0; //@line 14179
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14181
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 14182
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 421; //@line 14185
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 14187
  sp = STACKTOP; //@line 14188
  STACKTOP = sp; //@line 14189
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 14191
 HEAP32[$0 + 1168 >> 2] = 0; //@line 14193
 $7 = $0 + 1940 | 0; //@line 14196
 HEAP8[$7 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 14197
 HEAP8[$0 + 1943 >> 0] = HEAP8[$0 + 1909 >> 0] | 0; //@line 14201
 HEAP8[$0 + 1956 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 14205
 HEAP8[$0 + 1957 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 14209
 $17 = $0 + 1958 | 0; //@line 14210
 HEAP8[$17 >> 0] = 0; //@line 14211
 HEAP32[$0 + 1960 >> 2] = 0; //@line 14213
 $22 = $0 + 4 | 0; //@line 14217
 do {
  if ((HEAP32[$0 + 2380 >> 2] | 0) == 2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14220
   __ZN7LoRaPHY20put_radio_to_standbyEv($22); //@line 14221
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 422; //@line 14224
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 14226
    HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 14228
    HEAP32[$AsyncCtx2 + 12 >> 2] = $7; //@line 14230
    HEAP32[$AsyncCtx2 + 16 >> 2] = $17; //@line 14232
    sp = STACKTOP; //@line 14233
    STACKTOP = sp; //@line 14234
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14236
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 2026 >> 0] = HEAP8[$0 + 1941 >> 0] | 0; //@line 14244
 $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14245
 __ZN7LoRaPHY9rx_configEP18rx_config_params_t($22, $7) | 0; //@line 14246
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 423; //@line 14249
  HEAP32[$AsyncCtx6 + 4 >> 2] = $17; //@line 14251
  HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 14253
  HEAP32[$AsyncCtx6 + 12 >> 2] = $22; //@line 14255
  sp = STACKTOP; //@line 14256
  STACKTOP = sp; //@line 14257
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 14259
 $34 = (HEAP8[$17 >> 0] | 0) != 0; //@line 14261
 $36 = HEAP32[$0 + 1888 >> 2] | 0; //@line 14263
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14264
 __ZN7LoRaPHY15setup_rx_windowEbj($22, $34, $36); //@line 14265
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 424; //@line 14268
  sp = STACKTOP; //@line 14269
  STACKTOP = sp; //@line 14270
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14272
  STACKTOP = sp; //@line 14273
  return;
 }
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $31 = 0, $35 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12972
 $2 = $0 + 2380 | 0; //@line 12973
 do {
  if ((HEAP32[$2 >> 2] | 0) != 2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12979
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 12980
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 404; //@line 12983
    HEAP8[$AsyncCtx2 + 4 >> 0] = $1 & 1; //@line 12986
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 12988
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 12990
    sp = STACKTOP; //@line 12991
    return 0; //@line 12992
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12994
    break;
   }
  }
 } while (0);
 $9 = $0 + 1168 | 0; //@line 12999
 $14 = (HEAP8[$0 + 1177 >> 0] | 0) != 0; //@line 13004
 do {
  if (!(HEAP32[$9 >> 2] | 0)) {
   if ($14) {
    $16 = $1 ? 3 : 5; //@line 13009
    HEAP32[$0 + 2056 >> 2] = $16; //@line 13010
    $$pre$phiZ2D = $16; //@line 13011
   } else {
    $$pre$phiZ2D = $1 ? 3 : 5; //@line 13014
   }
   HEAP32[$0 + 2092 >> 2] = $$pre$phiZ2D; //@line 13017
   if ((HEAP32[$2 >> 2] | 0) != 2) {
    $22 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, HEAP32[$0 + 1780 >> 2] | 0) | 0; //@line 13023
    if ($22 >>> 0 < (HEAP32[$0 + 1776 >> 2] | 0) >>> 0) {
     label = 18; //@line 13028
    } else {
     $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13031
     __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 13032
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 405; //@line 13035
      HEAP32[$AsyncCtx6 + 4 >> 2] = $2; //@line 13037
      HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 13039
      HEAP32[$AsyncCtx6 + 12 >> 2] = $9; //@line 13041
      sp = STACKTOP; //@line 13042
      return 0; //@line 13043
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 13045
      label = 18; //@line 13046
      break;
     }
    }
   }
  } else {
   if ($14) {
    $31 = $1 ? 4 : 6; //@line 13054
    HEAP32[$0 + 2056 >> 2] = $31; //@line 13055
    $$pre$phi6Z2D = $31; //@line 13056
   } else {
    $$pre$phi6Z2D = $1 ? 4 : 6; //@line 13059
   }
   HEAP32[$0 + 2092 >> 2] = $$pre$phi6Z2D; //@line 13062
   label = 18; //@line 13063
  }
 } while (0);
 if ((label | 0) == 18) {
  if ((HEAP32[$2 >> 2] | 0) != 2) {
   $35 = HEAP32[$9 >> 2] | 0; //@line 13070
   return $35 | 0; //@line 13071
  }
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13074
 __ZN7LoRaMac15open_rx2_windowEv($0); //@line 13075
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 406; //@line 13078
  HEAP32[$AsyncCtx + 4 >> 2] = $9; //@line 13080
  sp = STACKTOP; //@line 13081
  return 0; //@line 13082
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13084
 $35 = HEAP32[$9 >> 2] | 0; //@line 13085
 return $35 | 0; //@line 13086
}
function __ZN12LoRaWANStack20process_transmissionEv($0) {
 $0 = $0 | 0;
 var $26 = 0, $30 = 0, $31 = 0, $33 = 0, $41 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 9385
 STACKTOP = STACKTOP + 16 | 0; //@line 9386
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9386
 $vararg_buffer1 = sp + 8 | 0; //@line 9387
 _mbed_tracef(16, 12187, 12528, sp); //@line 9389
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9390
 __ZN7LoRaMac16on_radio_tx_doneEv($0); //@line 9391
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 326; //@line 9394
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9396
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 9398
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 9400
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 9402
  sp = STACKTOP; //@line 9403
  STACKTOP = sp; //@line 9404
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9406
 HEAP8[$0 + 2895 >> 0] = 0; //@line 9408
 HEAP32[$0 + 2888 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 20 >> 2]; //@line 9413
 HEAP8[$0 + 2893 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 8 >> 0] | 0; //@line 9418
 HEAP8[$0 + 2892 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 9 >> 0] | 0; //@line 9423
 HEAP32[$0 + 2884 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 12 >> 2]; //@line 9428
 HEAP8[$0 + 2894 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 11 >> 0] | 0; //@line 9433
 $26 = $0 + 2496 | 0; //@line 9434
 switch (HEAP32[$26 >> 2] | 0) {
 case 1:
  {
   HEAP32[$26 >> 2] = 4; //@line 9438
   STACKTOP = sp; //@line 9439
   return;
  }
 case 8:
  {
   $30 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1; //@line 9445
   $31 = $0 + 2904 | 0; //@line 9446
   $33 = HEAP32[$31 >> 2] & -18; //@line 9448
   if ($30) {
    HEAP32[$31 >> 2] = $33 | 1; //@line 9451
    _mbed_tracef(16, 12187, 12551, $vararg_buffer1); //@line 9452
    HEAP32[$26 >> 2] = 9; //@line 9453
    STACKTOP = sp; //@line 9454
    return;
   }
   HEAP32[$31 >> 2] = $33 | 16; //@line 9457
   if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) != 2) {
    STACKTOP = sp; //@line 9461
    return;
   }
   __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 9463
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9464
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9465
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 327; //@line 9468
    HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 9470
    HEAP32[$AsyncCtx5 + 8 >> 2] = $26; //@line 9472
    sp = STACKTOP; //@line 9473
    STACKTOP = sp; //@line 9474
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9476
   $41 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 9478
   HEAP32[$26 >> 2] = $41 ? 5 : 2; //@line 9480
   STACKTOP = sp; //@line 9481
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 9485
   return;
  }
 }
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_236($0) {
 $0 = $0 | 0;
 var $16 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18316
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18318
 HEAP32[$2 + 1168 >> 2] = 0; //@line 18320
 $6 = $2 + 1940 | 0; //@line 18323
 HEAP8[$6 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 18324
 HEAP8[$2 + 1943 >> 0] = HEAP8[$2 + 1909 >> 0] | 0; //@line 18328
 HEAP8[$2 + 1956 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 18332
 HEAP8[$2 + 1957 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 18336
 $16 = $2 + 1958 | 0; //@line 18337
 HEAP8[$16 >> 0] = 0; //@line 18338
 HEAP32[$2 + 1960 >> 2] = 0; //@line 18340
 $21 = $2 + 4 | 0; //@line 18344
 if ((HEAP32[$2 + 2380 >> 2] | 0) == 2) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 18346
  __ZN7LoRaPHY20put_radio_to_standbyEv($21); //@line 18347
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 422; //@line 18350
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 18351
   HEAP32[$22 >> 2] = $2; //@line 18352
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 18353
   HEAP32[$23 >> 2] = $21; //@line 18354
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 18355
   HEAP32[$24 >> 2] = $6; //@line 18356
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 18357
   HEAP32[$25 >> 2] = $16; //@line 18358
   sp = STACKTOP; //@line 18359
   return;
  }
  ___async_unwind = 0; //@line 18362
  HEAP32[$ReallocAsyncCtx2 >> 2] = 422; //@line 18363
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 18364
  HEAP32[$22 >> 2] = $2; //@line 18365
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 18366
  HEAP32[$23 >> 2] = $21; //@line 18367
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 18368
  HEAP32[$24 >> 2] = $6; //@line 18369
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 18370
  HEAP32[$25 >> 2] = $16; //@line 18371
  sp = STACKTOP; //@line 18372
  return;
 } else {
  HEAP8[$2 + 2026 >> 0] = HEAP8[$2 + 1941 >> 0] | 0; //@line 18378
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 18379
  __ZN7LoRaPHY9rx_configEP18rx_config_params_t($21, $6) | 0; //@line 18380
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 423; //@line 18383
   $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 18384
   HEAP32[$29 >> 2] = $16; //@line 18385
   $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 18386
   HEAP32[$30 >> 2] = $2; //@line 18387
   $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 18388
   HEAP32[$31 >> 2] = $21; //@line 18389
   sp = STACKTOP; //@line 18390
   return;
  }
  ___async_unwind = 0; //@line 18393
  HEAP32[$ReallocAsyncCtx3 >> 2] = 423; //@line 18394
  $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 18395
  HEAP32[$29 >> 2] = $16; //@line 18396
  $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 18397
  HEAP32[$30 >> 2] = $2; //@line 18398
  $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 18399
  HEAP32[$31 >> 2] = $21; //@line 18400
  sp = STACKTOP; //@line 18401
  return;
 }
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2447
 STACKTOP = STACKTOP + 16 | 0; //@line 2448
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2448
 $1 = sp; //@line 2449
 $2 = $0 + 52 | 0; //@line 2450
 $3 = HEAP32[$2 >> 2] | 0; //@line 2451
 do {
  if (!$3) {
   $13 = 0; //@line 2455
  } else {
   $7 = HEAP32[$3 + 4 >> 2] | 0; //@line 2459
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 2460
   FUNCTION_TABLE_vii[$7 & 15]($1, $0 + 40 | 0); //@line 2461
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 108; //@line 2464
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 2466
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2468
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 2470
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2472
    sp = STACKTOP; //@line 2473
    STACKTOP = sp; //@line 2474
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2476
    $13 = HEAP32[$2 >> 2] | 0; //@line 2478
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 2483
 HEAP32[$12 >> 2] = $13; //@line 2484
 __ZN4mbed6Ticker6detachEv($0); //@line 2485
 $14 = HEAP32[$12 >> 2] | 0; //@line 2486
 do {
  if (!$14) {
   $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2490
   _mbed_assert_internal(14946, 14951, 528); //@line 2491
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 109; //@line 2494
    HEAP32[$AsyncCtx9 + 4 >> 2] = $12; //@line 2496
    HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 2498
    sp = STACKTOP; //@line 2499
    STACKTOP = sp; //@line 2500
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 2502
    $19 = HEAP32[$12 >> 2] | 0; //@line 2504
    break;
   }
  } else {
   $19 = $14; //@line 2508
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 2511
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2512
 FUNCTION_TABLE_vi[$18 & 1023]($1); //@line 2513
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 110; //@line 2516
  HEAP32[$AsyncCtx2 + 4 >> 2] = $12; //@line 2518
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 2520
  sp = STACKTOP; //@line 2521
  STACKTOP = sp; //@line 2522
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2524
 $22 = HEAP32[$12 >> 2] | 0; //@line 2525
 if (!$22) {
  STACKTOP = sp; //@line 2528
  return;
 }
 $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 2531
 $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2532
 FUNCTION_TABLE_vi[$25 & 1023]($1); //@line 2533
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 111; //@line 2536
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 2538
  sp = STACKTOP; //@line 2539
  STACKTOP = sp; //@line 2540
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 2542
 STACKTOP = sp; //@line 2543
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_305($0) {
 $0 = $0 | 0;
 var $$pre$i$i70 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 24917
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24923
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24925
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24927
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24929
 $$pre$i$i70 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24930
 $13 = $$pre$i$i70; //@line 24931
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i70; //@line 24932
 if (!$$pre$i$i70) {
  __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($8, $10); //@line 24935
  $23 = HEAP32[(HEAP32[$10 >> 2] | 0) + 72 >> 2] | 0; //@line 24938
  $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 24939
  FUNCTION_TABLE_vi[$23 & 1023]($10); //@line 24940
  if (___async) {
   HEAP32[$ReallocAsyncCtx16 >> 2] = 185; //@line 24943
   $24 = $ReallocAsyncCtx16 + 4 | 0; //@line 24944
   HEAP32[$24 >> 2] = $10; //@line 24945
   $25 = $ReallocAsyncCtx16 + 8 | 0; //@line 24946
   HEAP32[$25 >> 2] = $12; //@line 24947
   $26 = $ReallocAsyncCtx16 + 12 | 0; //@line 24948
   HEAP32[$26 >> 2] = $10; //@line 24949
   sp = STACKTOP; //@line 24950
   return;
  }
  ___async_unwind = 0; //@line 24953
  HEAP32[$ReallocAsyncCtx16 >> 2] = 185; //@line 24954
  $24 = $ReallocAsyncCtx16 + 4 | 0; //@line 24955
  HEAP32[$24 >> 2] = $10; //@line 24956
  $25 = $ReallocAsyncCtx16 + 8 | 0; //@line 24957
  HEAP32[$25 >> 2] = $12; //@line 24958
  $26 = $ReallocAsyncCtx16 + 12 | 0; //@line 24959
  HEAP32[$26 >> 2] = $10; //@line 24960
  sp = STACKTOP; //@line 24961
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 24965
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 24966
  FUNCTION_TABLE_vi[$16 & 1023]($6); //@line 24967
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 24970
   $17 = $ReallocAsyncCtx15 + 4 | 0; //@line 24971
   HEAP32[$17 >> 2] = $6; //@line 24972
   $18 = $ReallocAsyncCtx15 + 8 | 0; //@line 24973
   HEAP32[$18 >> 2] = $8; //@line 24974
   $19 = $ReallocAsyncCtx15 + 12 | 0; //@line 24975
   HEAP32[$19 >> 2] = $10; //@line 24976
   $20 = $ReallocAsyncCtx15 + 16 | 0; //@line 24977
   HEAP32[$20 >> 2] = $12; //@line 24978
   sp = STACKTOP; //@line 24979
   return;
  }
  ___async_unwind = 0; //@line 24982
  HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 24983
  $17 = $ReallocAsyncCtx15 + 4 | 0; //@line 24984
  HEAP32[$17 >> 2] = $6; //@line 24985
  $18 = $ReallocAsyncCtx15 + 8 | 0; //@line 24986
  HEAP32[$18 >> 2] = $8; //@line 24987
  $19 = $ReallocAsyncCtx15 + 12 | 0; //@line 24988
  HEAP32[$19 >> 2] = $10; //@line 24989
  $20 = $ReallocAsyncCtx15 + 16 | 0; //@line 24990
  HEAP32[$20 >> 2] = $12; //@line 24991
  sp = STACKTOP; //@line 24992
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $15 = 0, $30 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12855
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12857
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 12858
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 399; //@line 12861
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12863
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 12865
  sp = STACKTOP; //@line 12866
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12869
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12871
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 12872
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 400; //@line 12875
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12877
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 12879
  sp = STACKTOP; //@line 12880
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12883
 $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12885
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 12886
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 401; //@line 12889
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12891
  sp = STACKTOP; //@line 12892
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12895
 do {
  if ((HEAP32[$0 + 2380 >> 2] | 0) == 2) {
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12901
   __ZN7LoRaMac15open_rx2_windowEv($0); //@line 12902
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 402; //@line 12905
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12907
    sp = STACKTOP; //@line 12908
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12911
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12916
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 12917
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 403; //@line 12920
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12922
    sp = STACKTOP; //@line 12923
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12926
    break;
   }
  }
 } while (0);
 $15 = $0 + 2056 | 0; //@line 12931
 HEAP32[$15 >> 2] = 2; //@line 12932
 HEAP32[$0 + 2092 >> 2] = 2; //@line 12934
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 12936
 HEAP8[$0 + 2063 >> 0] = HEAP8[$0 + 1699 >> 0] | 0; //@line 12940
 HEAP8[$0 + 2062 >> 0] = 0; //@line 12942
 HEAP32[$0 + 2064 >> 2] = 0; //@line 12944
 HEAP8[$0 + 1180 >> 0] = 0; //@line 12946
 HEAP32[$15 >> 2] = 0; //@line 12947
 if ((HEAP32[$0 + 2052 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$0 + 1174 >> 0] | 0) {
  return;
 }
 $30 = $0 + 1760 | 0; //@line 12960
 HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 12963
 return;
}
function _mbedtls_cipher_update__async_cb_275($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20679
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20681
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20683
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20685
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20687
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20689
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20691
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20693
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20695
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20697
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20699
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20701
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 20704
  $55 = ___async_retval; //@line 20705
  HEAP32[$55 >> 2] = $$1; //@line 20706
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 20711
 $25 = $6 + $4 | 0; //@line 20712
 HEAP32[$8 >> 2] = 0; //@line 20713
 $26 = $10 + $12 | 0; //@line 20714
 $27 = $14 - $12 | 0; //@line 20715
 if (!$27) {
  $$1 = 0; //@line 20718
  $55 = ___async_retval; //@line 20719
  HEAP32[$55 >> 2] = $$1; //@line 20720
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 20723
 if (!$29) {
  if (!(HEAP32[$16 >> 2] | 0)) {
   $$0 = (HEAP32[$18 + 12 >> 2] | 0) == 0 ? 0 : $4; //@line 20733
  } else {
   $$0 = 0; //@line 20735
  }
 } else {
  $$0 = $29; //@line 20738
 }
 $37 = $27 - $$0 | 0; //@line 20741
 _memcpy($18 + 20 | 0, $26 + $37 | 0, $$0 | 0) | 0; //@line 20743
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 20746
 if (!$37) {
  $$1 = 0; //@line 20749
  $55 = ___async_retval; //@line 20750
  HEAP32[$55 >> 2] = $$1; //@line 20751
  return;
 }
 $46 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 20758
 $48 = HEAP32[$18 + 60 >> 2] | 0; //@line 20760
 $49 = HEAP32[$16 >> 2] | 0; //@line 20761
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 20763
 $51 = FUNCTION_TABLE_iiiiiii[$46 & 3]($48, $49, $37, $18 + 40 | 0, $26, $25) | 0; //@line 20764
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 571; //@line 20767
  $52 = $ReallocAsyncCtx3 + 4 | 0; //@line 20768
  HEAP32[$52 >> 2] = $2; //@line 20769
  $53 = $ReallocAsyncCtx3 + 8 | 0; //@line 20770
  HEAP32[$53 >> 2] = $37; //@line 20771
  sp = STACKTOP; //@line 20772
  return;
 }
 HEAP32[___async_retval >> 2] = $51; //@line 20776
 ___async_unwind = 0; //@line 20777
 HEAP32[$ReallocAsyncCtx3 >> 2] = 571; //@line 20778
 $52 = $ReallocAsyncCtx3 + 4 | 0; //@line 20779
 HEAP32[$52 >> 2] = $2; //@line 20780
 $53 = $ReallocAsyncCtx3 + 8 | 0; //@line 20781
 HEAP32[$53 >> 2] = $37; //@line 20782
 sp = STACKTOP; //@line 20783
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_362($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27702
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27704
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 27706
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 27711
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 27712
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 27713
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 27716
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 27717
   HEAP32[$9 >> 2] = $2; //@line 27718
   sp = STACKTOP; //@line 27719
   return;
  }
  ___async_unwind = 0; //@line 27722
  HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 27723
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 27724
  HEAP32[$9 >> 2] = $2; //@line 27725
  sp = STACKTOP; //@line 27726
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 27730
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 27735
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27736
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 27737
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 27740
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 27741
   HEAP32[$16 >> 2] = $2; //@line 27742
   sp = STACKTOP; //@line 27743
   return;
  }
  ___async_unwind = 0; //@line 27746
  HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 27747
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 27748
  HEAP32[$16 >> 2] = $2; //@line 27749
  sp = STACKTOP; //@line 27750
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 27754
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 27759
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27760
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 27761
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 27764
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 27765
   HEAP32[$23 >> 2] = $2; //@line 27766
   sp = STACKTOP; //@line 27767
   return;
  }
  ___async_unwind = 0; //@line 27770
  HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 27771
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 27772
  HEAP32[$23 >> 2] = $2; //@line 27773
  sp = STACKTOP; //@line 27774
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 27778
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 27784
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27785
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 27786
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 27789
  sp = STACKTOP; //@line 27790
  return;
 }
 ___async_unwind = 0; //@line 27793
 HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 27794
 sp = STACKTOP; //@line 27795
 return;
}
function __ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb($0) {
 $0 = $0 | 0;
 var $$0$off0 = 0, $$031 = 0, $$1 = 0, $$pre$phi39Z2D = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $40 = 0, $45 = 0, $6 = 0, $8 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16040
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16045
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16047
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 16049
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16051
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16053
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16055
 $18 = HEAP8[$2 + 2853 >> 0] | 0; //@line 16057
 if (HEAP8[$0 + 8 >> 0] & 1) {
  if ($18 << 24 >> 24 != (HEAP8[$6 >> 0] | 0)) {
   $$1 = -1001; //@line 16062
   $45 = ___async_retval; //@line 16063
   HEAP16[$45 >> 1] = $$1; //@line 16064
   return;
  }
  if (!(HEAP32[$8 >> 2] & 1)) {
   $$1 = -1001; //@line 16071
   $45 = ___async_retval; //@line 16072
   HEAP16[$45 >> 1] = $$1; //@line 16073
   return;
  }
 }
 HEAP8[$6 >> 0] = $18; //@line 16077
 HEAP32[$8 >> 2] = 1; //@line 16078
 $24 = $2 + 2856 | 0; //@line 16079
 $25 = HEAP32[$24 >> 2] | 0; //@line 16080
 $26 = $2 + 2860 | 0; //@line 16081
 $27 = HEAP16[$26 >> 1] | 0; //@line 16082
 $28 = $27 & 65535; //@line 16083
 $30 = $2 + 2882 | 0; //@line 16085
 $32 = (HEAP16[$30 >> 1] | 0) == 0; //@line 16087
 if (($27 & 65535) > ($10 & 65535)) {
  if ($32) {
   $35 = $2 + 2880 | 0; //@line 16092
   HEAP16[$35 >> 1] = $28 - $16; //@line 16093
   HEAP16[$30 >> 1] = $10; //@line 16094
   _memcpy($12 | 0, $25 | 0, $16 | 0) | 0; //@line 16095
   $$0$off0 = 0; //@line 16096
   $$031 = $10; //@line 16096
   $$pre$phi39Z2D = $35; //@line 16096
  } else {
   label = 10; //@line 16098
  }
 } else {
  if ($32) {
   $36 = $2 + 2880 | 0; //@line 16102
   HEAP16[$36 >> 1] = 0; //@line 16103
   HEAP16[$30 >> 1] = 0; //@line 16104
   _memcpy($12 | 0, $25 | 0, $28 | 0) | 0; //@line 16105
   $$0$off0 = 1; //@line 16106
   $$031 = $27; //@line 16106
   $$pre$phi39Z2D = $36; //@line 16106
  } else {
   label = 10; //@line 16108
  }
 }
 if ((label | 0) == 10) {
  $$0$off0 = 0; //@line 16113
  $$031 = $27; //@line 16113
  $$pre$phi39Z2D = $2 + 2880 | 0; //@line 16113
 }
 if (HEAP16[$$pre$phi39Z2D >> 1] | 0) {
  $40 = HEAP16[$2 + 2882 >> 1] | 0; //@line 16119
  if ($40 << 16 >> 16) {
   _memcpy($12 | 0, $25 + ($40 & 65535) | 0, $$031 & 65535 | 0) | 0; //@line 16125
  }
 }
 if (!$$0$off0) {
  $$1 = $$031; //@line 16129
  $45 = ___async_retval; //@line 16130
  HEAP16[$45 >> 1] = $$1; //@line 16131
  return;
 }
 HEAP32[$24 >> 2] = 0; //@line 16134
 HEAP16[$26 >> 1] = 0; //@line 16135
 HEAP8[$14 >> 0] = 0; //@line 16136
 $$1 = $$031; //@line 16137
 $45 = ___async_retval; //@line 16138
 HEAP16[$45 >> 1] = $$1; //@line 16139
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $2 = 0, $21 = 0, $28 = 0, $31 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 13119
 STACKTOP = STACKTOP + 16 | 0; //@line 13120
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13120
 $vararg_buffer = sp; //@line 13121
 $1 = sp + 5 | 0; //@line 13122
 $2 = sp + 4 | 0; //@line 13123
 if (!(HEAP8[$0 + 2376 >> 0] | 0)) {
  if (!(HEAP32[$0 + 2088 >> 2] | 0)) {
   HEAP8[$0 + 1877 >> 0] = __ZN7LoRaPHY16get_alternate_DREh($0 + 4 | 0, (HEAPU8[$0 + 1701 >> 0] | 0) + 1 & 255) | 0; //@line 13140
   HEAP8[$1 >> 0] = 0; //@line 13141
   HEAP8[$2 >> 0] = HEAP8[$0 + 1936 >> 0] << 7; //@line 13145
   HEAP8[$0 + 1180 >> 0] = 1; //@line 13147
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 13148
   $21 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $1, $2, 0, 0, 0) | 0; //@line 13149
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 408; //@line 13152
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13154
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 13156
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 13158
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 13160
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 13162
    sp = STACKTOP; //@line 13163
    STACKTOP = sp; //@line 13164
    return 0; //@line 13164
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13166
   do {
    if (!$21) {
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13170
     $28 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 13171
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 409; //@line 13174
      HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 13176
      HEAP32[$AsyncCtx7 + 8 >> 2] = $1; //@line 13178
      sp = STACKTOP; //@line 13179
      STACKTOP = sp; //@line 13180
      return 0; //@line 13180
     } else {
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13182
      $$0$i = $28; //@line 13183
      break;
     }
    } else {
     HEAP32[$vararg_buffer >> 2] = $21; //@line 13187
     _mbed_tracef(2, 12866, 12955, $vararg_buffer); //@line 13188
     $$0$i = $21; //@line 13189
    }
   } while (0);
   $$0 = $$0$i; //@line 13192
   STACKTOP = sp; //@line 13193
   return $$0 | 0; //@line 13193
  }
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13196
 $31 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 13197
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 410; //@line 13200
  sp = STACKTOP; //@line 13201
  STACKTOP = sp; //@line 13202
  return 0; //@line 13202
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13204
 $$0 = $31; //@line 13205
 STACKTOP = sp; //@line 13206
 return $$0 | 0; //@line 13206
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_370($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28102
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28104
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28106
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28108
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28110
 if ((HEAP32[___async_retval >> 2] | 0) < ($2 | 0)) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 28115
  $10 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 28116
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 62; //@line 28119
   $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 28120
   HEAP32[$11 >> 2] = $2; //@line 28121
   $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 28122
   HEAP32[$12 >> 2] = $4; //@line 28123
   $13 = $ReallocAsyncCtx5 + 12 | 0; //@line 28124
   HEAP32[$13 >> 2] = $6; //@line 28125
   $14 = $ReallocAsyncCtx5 + 16 | 0; //@line 28126
   HEAP32[$14 >> 2] = $8; //@line 28127
   sp = STACKTOP; //@line 28128
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 28132
  ___async_unwind = 0; //@line 28133
  HEAP32[$ReallocAsyncCtx5 >> 2] = 62; //@line 28134
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 28135
  HEAP32[$11 >> 2] = $2; //@line 28136
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 28137
  HEAP32[$12 >> 2] = $4; //@line 28138
  $13 = $ReallocAsyncCtx5 + 12 | 0; //@line 28139
  HEAP32[$13 >> 2] = $6; //@line 28140
  $14 = $ReallocAsyncCtx5 + 16 | 0; //@line 28141
  HEAP32[$14 >> 2] = $8; //@line 28142
  sp = STACKTOP; //@line 28143
  return;
 } else {
  $19 = HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0; //@line 28148
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 28149
  FUNCTION_TABLE_vi[$19 & 1023]($6); //@line 28150
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 28153
   $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 28154
   HEAP32[$20 >> 2] = $4; //@line 28155
   $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 28156
   HEAP32[$21 >> 2] = $8; //@line 28157
   $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 28158
   $$expand_i1_val = 1; //@line 28159
   HEAP8[$22 >> 0] = $$expand_i1_val; //@line 28160
   sp = STACKTOP; //@line 28161
   return;
  }
  ___async_unwind = 0; //@line 28164
  HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 28165
  $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 28166
  HEAP32[$20 >> 2] = $4; //@line 28167
  $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 28168
  HEAP32[$21 >> 2] = $8; //@line 28169
  $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 28170
  $$expand_i1_val = 1; //@line 28171
  HEAP8[$22 >> 0] = $$expand_i1_val; //@line 28172
  sp = STACKTOP; //@line 28173
  return;
 }
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20827
 $6 = HEAP32[$0 + 124 >> 2] | 0; //@line 20831
 $7 = $1 + 2 | 0; //@line 20832
 $8 = HEAP8[$7 >> 0] | 0; //@line 20833
 $10 = HEAPU8[$1 >> 0] | 0; //@line 20835
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 20840
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 20843
  $27 = $15; //@line 20844
 } else {
  $27 = $8; //@line 20846
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 20852
 } else {
  $$0 = $2; //@line 20854
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 20857
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 20861
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 20871
  } else {
   $$026 = $27; //@line 20873
  }
 } else {
  $$026 = $27; //@line 20876
 }
 $34 = $0 + 4 | 0; //@line 20878
 $35 = HEAP32[$34 >> 2] | 0; //@line 20879
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 20882
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 20883
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 20884
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 523; //@line 20887
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 20889
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 20891
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 20893
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 20895
  sp = STACKTOP; //@line 20896
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20899
 $43 = HEAP32[$34 >> 2] | 0; //@line 20900
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 20903
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 20905
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20906
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 20907
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 524; //@line 20910
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 20912
  sp = STACKTOP; //@line 20913
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20916
 $50 = HEAP32[$34 >> 2] | 0; //@line 20917
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 20920
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 20921
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 20922
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 525; //@line 20925
  sp = STACKTOP; //@line 20926
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 20929
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_167($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12392
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12396
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12398
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12400
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12402
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12403
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 12407
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 12408
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 12409
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 320; //@line 12412
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 12413
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 12414
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 12415
   HEAP32[$15 >> 2] = $4; //@line 12416
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 12417
   HEAP32[$16 >> 2] = $6; //@line 12418
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 12419
   HEAP32[$17 >> 2] = $8; //@line 12420
   sp = STACKTOP; //@line 12421
   return;
  }
  ___async_unwind = 0; //@line 12424
  HEAP32[$ReallocAsyncCtx2 >> 2] = 320; //@line 12425
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 12426
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 12427
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 12428
  HEAP32[$15 >> 2] = $4; //@line 12429
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 12430
  HEAP32[$16 >> 2] = $6; //@line 12431
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 12432
  HEAP32[$17 >> 2] = $8; //@line 12433
  sp = STACKTOP; //@line 12434
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4; //@line 12441
  HEAP32[$8 + 2496 >> 2] = 2; //@line 12443
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 12446
 _mbed_assert_internal(12080, 12089, 775); //@line 12447
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 321; //@line 12450
  $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 12451
  HEAP32[$19 >> 2] = $4; //@line 12452
  $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 12453
  HEAP32[$20 >> 2] = $6; //@line 12454
  $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 12455
  HEAP32[$21 >> 2] = $8; //@line 12456
  sp = STACKTOP; //@line 12457
  return;
 }
 ___async_unwind = 0; //@line 12460
 HEAP32[$ReallocAsyncCtx4 >> 2] = 321; //@line 12461
 $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 12462
 HEAP32[$19 >> 2] = $4; //@line 12463
 $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 12464
 HEAP32[$20 >> 2] = $6; //@line 12465
 $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 12466
 HEAP32[$21 >> 2] = $8; //@line 12467
 sp = STACKTOP; //@line 12468
 return;
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 7259
 STACKTOP = STACKTOP + 128 | 0; //@line 7260
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 7260
 $2 = sp; //@line 7261
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7262
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 7263
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 638; //@line 7266
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 7268
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7270
  sp = STACKTOP; //@line 7271
  STACKTOP = sp; //@line 7272
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7274
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 7277
  return;
 }
 if (!(HEAP32[4889] | 0)) {
  _serial_init(19560, 2, 3); //@line 7282
  $$01213 = 0; //@line 7283
  $$014 = 0; //@line 7283
 } else {
  $$01213 = 0; //@line 7285
  $$014 = 0; //@line 7285
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 7289
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7294
   _serial_putc(19560, 13); //@line 7295
   if (___async) {
    label = 8; //@line 7298
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7301
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7304
  _serial_putc(19560, $$01213 << 24 >> 24); //@line 7305
  if (___async) {
   label = 11; //@line 7308
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7311
  $24 = $$014 + 1 | 0; //@line 7312
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 7315
   break;
  } else {
   $$014 = $24; //@line 7318
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 639; //@line 7322
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 7324
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 7326
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 7328
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 7330
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 7332
  sp = STACKTOP; //@line 7333
  STACKTOP = sp; //@line 7334
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 640; //@line 7337
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 7339
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 7341
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 7343
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 7345
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 7347
  sp = STACKTOP; //@line 7348
  STACKTOP = sp; //@line 7349
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 7352
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_396($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30205
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30209
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30211
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 30213
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30215
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 30217
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30219
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30221
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30223
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30225
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 30228
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30230
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 30234
   $27 = $6 + 24 | 0; //@line 30235
   $28 = $4 + 8 | 0; //@line 30236
   $29 = $6 + 54 | 0; //@line 30237
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 30267
    HEAP8[$14 >> 0] = 0; //@line 30268
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 30269
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 30270
    if (!___async) {
     ___async_unwind = 0; //@line 30273
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 684; //@line 30275
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 30277
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 30279
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 30281
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 30283
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 30285
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 30287
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 30289
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 30291
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 30293
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 30295
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 30297
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 30299
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 30301
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 30304
    sp = STACKTOP; //@line 30305
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 30310
 HEAP8[$14 >> 0] = $12; //@line 30311
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30089
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30093
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30095
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 30097
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30099
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 30101
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30103
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30105
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30107
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30109
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30111
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30113
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30115
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 30118
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 30119
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 30152
    HEAP8[$14 >> 0] = 0; //@line 30153
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 30154
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 30155
    if (!___async) {
     ___async_unwind = 0; //@line 30158
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 684; //@line 30160
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 30162
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 30164
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 30166
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 30168
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 30170
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 30172
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 30174
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 30176
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 30178
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 30180
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 30182
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 30184
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 30186
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 30189
    sp = STACKTOP; //@line 30190
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 30195
 HEAP8[$14 >> 0] = $12; //@line 30196
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 31394
 }
 ret = dest | 0; //@line 31397
 dest_end = dest + num | 0; //@line 31398
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 31402
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 31403
   dest = dest + 1 | 0; //@line 31404
   src = src + 1 | 0; //@line 31405
   num = num - 1 | 0; //@line 31406
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 31408
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 31409
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 31411
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 31412
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 31413
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 31414
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 31415
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 31416
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 31417
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 31418
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 31419
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 31420
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 31421
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 31422
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 31423
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 31424
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 31425
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 31426
   dest = dest + 64 | 0; //@line 31427
   src = src + 64 | 0; //@line 31428
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 31431
   dest = dest + 4 | 0; //@line 31432
   src = src + 4 | 0; //@line 31433
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 31437
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 31439
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 31440
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 31441
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 31442
   dest = dest + 4 | 0; //@line 31443
   src = src + 4 | 0; //@line 31444
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 31449
  dest = dest + 1 | 0; //@line 31450
  src = src + 1 | 0; //@line 31451
 }
 return ret | 0; //@line 31453
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_223($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17662
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17664
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17666
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17668
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17670
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 17672
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 17674
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 17676
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 17678
 $19 = $4 + 12 | 0; //@line 17682
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 32 >> 2] >> 2]; //@line 17683
 $20 = $4 + 16 | 0; //@line 17684
 HEAP32[$20 >> 2] = $8; //@line 17685
 HEAP16[$4 + 20 >> 1] = $10; //@line 17687
 HEAP16[$4 + 22 >> 1] = $12; //@line 17689
 HEAP8[$4 + 24 >> 0] = $14; //@line 17691
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 17692
 $24 = _equeue_alloc($16, 28) | 0; //@line 17693
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 285; //@line 17696
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 17697
  HEAP32[$25 >> 2] = $2; //@line 17698
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 17699
  HEAP32[$26 >> 2] = $19; //@line 17700
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 17701
  HEAP32[$27 >> 2] = $20; //@line 17702
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 17703
  HEAP32[$28 >> 2] = $16; //@line 17704
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 17705
  HEAP32[$29 >> 2] = $19; //@line 17706
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 17707
  HEAP32[$30 >> 2] = $6; //@line 17708
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 17709
  HEAP32[$31 >> 2] = $4; //@line 17710
  sp = STACKTOP; //@line 17711
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 17715
 ___async_unwind = 0; //@line 17716
 HEAP32[$ReallocAsyncCtx7 >> 2] = 285; //@line 17717
 $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 17718
 HEAP32[$25 >> 2] = $2; //@line 17719
 $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 17720
 HEAP32[$26 >> 2] = $19; //@line 17721
 $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 17722
 HEAP32[$27 >> 2] = $20; //@line 17723
 $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 17724
 HEAP32[$28 >> 2] = $16; //@line 17725
 $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 17726
 HEAP32[$29 >> 2] = $19; //@line 17727
 $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 17728
 HEAP32[$30 >> 2] = $6; //@line 17729
 $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 17730
 HEAP32[$31 >> 2] = $4; //@line 17731
 sp = STACKTOP; //@line 17732
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2980
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2986
   _wait_ms(10); //@line 2987
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 120; //@line 2990
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2992
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2994
    sp = STACKTOP; //@line 2995
    return 0; //@line 2996
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2998
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 3004
 $9 = $0 + 156 | 0; //@line 3005
 _equeue_mutex_lock($9); //@line 3006
 $10 = $0 + 24 | 0; //@line 3007
 $11 = HEAP32[$10 >> 2] | 0; //@line 3008
 L7 : do {
  if (!$11) {
   label = 11; //@line 3012
  } else {
   $$03842$i = $10; //@line 3014
   $14 = $11; //@line 3014
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 3021
    $21 = HEAP32[$20 >> 2] | 0; //@line 3022
    if (!$21) {
     label = 11; //@line 3025
     break L7;
    } else {
     $$03842$i = $20; //@line 3028
     $14 = $21; //@line 3028
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 3032
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 3035
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 3037
    $$038$sink$i = $17 + 8 | 0; //@line 3039
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 3043
   _equeue_mutex_unlock($9); //@line 3044
   $$1$i9 = $14; //@line 3045
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 3050
   $24 = HEAP32[$23 >> 2] | 0; //@line 3051
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 3054
    $$0 = 0; //@line 3055
    return $$0 | 0; //@line 3056
   } else {
    $26 = $0 + 32 | 0; //@line 3058
    $27 = HEAP32[$26 >> 2] | 0; //@line 3059
    HEAP32[$26 >> 2] = $27 + $8; //@line 3061
    HEAP32[$23 >> 2] = $24 - $8; //@line 3063
    HEAP32[$27 >> 2] = $8; //@line 3064
    HEAP8[$27 + 4 >> 0] = 1; //@line 3066
    _equeue_mutex_unlock($9); //@line 3067
    if (!$27) {
     $$0 = 0; //@line 3070
    } else {
     $$1$i9 = $27; //@line 3072
     break;
    }
    return $$0 | 0; //@line 3075
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 3080
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 3082
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 3084
 $$0 = $$1$i9 + 36 | 0; //@line 3086
 return $$0 | 0; //@line 3087
}
function __ZN7LoRaMac4joinEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i = 0, $2 = 0, $20 = 0, $27 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15248
 STACKTOP = STACKTOP + 16 | 0; //@line 15249
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15249
 $vararg_buffer = sp; //@line 15250
 $2 = sp + 5 | 0; //@line 15251
 $3 = sp + 4 | 0; //@line 15252
 if (!$1) {
  HEAP8[$0 + 2376 >> 0] = 1; //@line 15255
  $$0 = 0; //@line 15256
  STACKTOP = sp; //@line 15257
  return $$0 | 0; //@line 15257
 }
 $5 = $0 + 2084 | 0; //@line 15259
 HEAP32[$5 >> 2] = 0; //@line 15260
 HEAP32[$5 + 4 >> 2] = 0; //@line 15260
 HEAP32[$5 + 8 >> 2] = 0; //@line 15260
 HEAP32[$5 + 12 >> 2] = 0; //@line 15260
 HEAP32[$5 + 16 >> 2] = 0; //@line 15260
 HEAP32[$0 + 2092 >> 2] = 1; //@line 15262
 HEAP32[$0 + 2088 >> 2] = 0; //@line 15264
 HEAP8[$0 + 1877 >> 0] = __ZN7LoRaPHY16get_alternate_DREh($0 + 4 | 0, (HEAPU8[$0 + 1701 >> 0] | 0) + 1 & 255) | 0; //@line 15273
 HEAP8[$2 >> 0] = 0; //@line 15274
 HEAP8[$3 >> 0] = HEAP8[$0 + 1936 >> 0] << 7; //@line 15278
 HEAP8[$0 + 1180 >> 0] = 1; //@line 15280
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15281
 $20 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $2, $3, 0, 0, 0) | 0; //@line 15282
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 442; //@line 15285
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15287
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15289
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 15291
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 15293
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15295
  sp = STACKTOP; //@line 15296
  STACKTOP = sp; //@line 15297
  return 0; //@line 15297
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15299
 do {
  if (!$20) {
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15303
   $27 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15304
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 443; //@line 15307
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 15309
    HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 15311
    sp = STACKTOP; //@line 15312
    STACKTOP = sp; //@line 15313
    return 0; //@line 15313
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15315
    $$0$i = $27; //@line 15316
    break;
   }
  } else {
   HEAP32[$vararg_buffer >> 2] = $20; //@line 15320
   _mbed_tracef(2, 12866, 12955, $vararg_buffer); //@line 15321
   $$0$i = $20; //@line 15322
  }
 } while (0);
 $$0 = $$0$i; //@line 15325
 STACKTOP = sp; //@line 15326
 return $$0 | 0; //@line 15326
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$1$i$i = 0, $$1$lcssa$i$i = 0, $$18$i$i = 0, $$19$i$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $34 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $60 = 0, $63 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 13
 $8 = $0 + 25 | 0; //@line 14
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 17
 $14 = $0 + 26 | 0; //@line 20
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 25
  $$0 = 0; //@line 26
  return $$0 | 0; //@line 27
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 32
  return $$0 | 0; //@line 33
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 37
 $22 = HEAP32[$4 >> 2] | 0; //@line 38
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 41
  return $$0 | 0; //@line 42
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 49
  return $$0 | 0; //@line 50
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 52
 $34 = $0 + 88 | 0; //@line 60
 $35 = $28 & 255; //@line 61
 $36 = HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 62
 $$18$i$i = ($35 | 0) == ($36 | 0) ? $28 : $35 + 255 & 255; //@line 66
 L14 : do {
  if (($$18$i$i & 255 | 0) == ($36 | 0)) {
   $$1$lcssa$i$i = $$18$i$i; //@line 71
  } else {
   $44 = HEAPU8[$0 + 92 >> 0] | 0; //@line 75
   $$19$i$i = $$18$i$i; //@line 76
   while (1) {
    $45 = $$19$i$i << 24 >> 24; //@line 78
    if (($45 | 0) < ($44 | 0)) {
     if (HEAP8[(HEAP32[$34 >> 2] | 0) + $45 >> 0] | 0) {
      $$1$lcssa$i$i = $$19$i$i; //@line 86
      break L14;
     }
    }
    $47 = $$19$i$i & 255; //@line 90
    $$1$i$i = ($47 | 0) == ($36 | 0) ? $$19$i$i : $47 + 255 & 255; //@line 94
    if (($$1$i$i & 255 | 0) == ($36 | 0)) {
     $$1$lcssa$i$i = $$1$i$i; //@line 98
     break;
    } else {
     $$19$i$i = $$1$i$i; //@line 101
    }
   }
  }
 } while (0);
 HEAP8[$2 >> 0] = $$1$lcssa$i$i; //@line 106
 $60 = ($$1$lcssa$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 110
 if ($60 | $1 ^ 1) {
  $$0 = $60; //@line 114
  return $$0 | 0; //@line 115
 }
 $63 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 119
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 120
 FUNCTION_TABLE_vi[$63 & 1023]($0); //@line 121
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 545; //@line 124
  sp = STACKTOP; //@line 125
  return 0; //@line 126
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 128
 $$0 = 0; //@line 129
 return $$0 | 0; //@line 130
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_57($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22192
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22196
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22198
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22200
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  $13 = HEAP32[$4 + 1776 >> 2] | 0; //@line 22206
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 22207
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $4 + 1836 | 0, $13); //@line 22208
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 370; //@line 22211
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 22212
   HEAP32[$14 >> 2] = $4; //@line 22213
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 22214
   HEAP32[$15 >> 2] = $8; //@line 22215
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 22216
   HEAP32[$16 >> 2] = $6; //@line 22217
   sp = STACKTOP; //@line 22218
   return;
  }
  ___async_unwind = 0; //@line 22221
  HEAP32[$ReallocAsyncCtx2 >> 2] = 370; //@line 22222
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 22223
  HEAP32[$14 >> 2] = $4; //@line 22224
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 22225
  HEAP32[$15 >> 2] = $8; //@line 22226
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 22227
  HEAP32[$16 >> 2] = $6; //@line 22228
  sp = STACKTOP; //@line 22229
  return;
 }
 if (!(HEAP8[$4 + 1177 >> 0] | 0)) {
  $29 = HEAP8[$4 + 1182 >> 0] | 0; //@line 22237
  HEAP8[$4 + 1183 >> 0] = $29; //@line 22239
  __ZN7LoRaPHY16set_last_tx_doneEhbj($4 + 4 | 0, $29, (HEAP8[$4 + 2376 >> 0] | 0) != 0, $8); //@line 22244
  HEAP32[$4 + 1780 >> 2] = $8; //@line 22246
  return;
 }
 $22 = HEAP32[$4 + 1776 >> 2] | 0; //@line 22251
 $25 = (__ZN7LoRaPHY15get_ack_timeoutEv($4 + 4 | 0) | 0) + $22 | 0; //@line 22254
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 22255
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $4 + 1856 | 0, $25); //@line 22256
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 371; //@line 22259
  $26 = $ReallocAsyncCtx + 4 | 0; //@line 22260
  HEAP32[$26 >> 2] = $4; //@line 22261
  $27 = $ReallocAsyncCtx + 8 | 0; //@line 22262
  HEAP32[$27 >> 2] = $8; //@line 22263
  sp = STACKTOP; //@line 22264
  return;
 }
 ___async_unwind = 0; //@line 22267
 HEAP32[$ReallocAsyncCtx >> 2] = 371; //@line 22268
 $26 = $ReallocAsyncCtx + 4 | 0; //@line 22269
 HEAP32[$26 >> 2] = $4; //@line 22270
 $27 = $ReallocAsyncCtx + 8 | 0; //@line 22271
 HEAP32[$27 >> 2] = $8; //@line 22272
 sp = STACKTOP; //@line 22273
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv($0) {
 $0 = $0 | 0;
 var $$sink4 = 0, $20 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11450
 STACKTOP = STACKTOP + 16 | 0; //@line 11451
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11451
 _mbed_tracef(16, 12866, 12879, sp); //@line 11453
 $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11455
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 11456
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 372; //@line 11459
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11461
  sp = STACKTOP; //@line 11462
  STACKTOP = sp; //@line 11463
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11465
 $5 = $0 + 1964 | 0; //@line 11468
 HEAP8[$5 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 11469
 HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 11473
 HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 11477
 HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 11481
 HEAP32[$0 + 1984 >> 2] = 1; //@line 11483
 $$sink4 = (HEAP32[$0 + 2380 >> 2] | 0) == 2 & 1; //@line 11487
 HEAP8[$0 + 2377 >> 0] = $$sink4; //@line 11489
 $20 = $0 + 1982 | 0; //@line 11490
 HEAP8[$20 >> 0] = $$sink4; //@line 11491
 HEAP8[$0 + 2026 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 11495
 $24 = $0 + 4 | 0; //@line 11496
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11497
 $25 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($24, $5) | 0; //@line 11498
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 373; //@line 11501
  HEAP32[$AsyncCtx3 + 4 >> 2] = $20; //@line 11503
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11505
  HEAP32[$AsyncCtx3 + 12 >> 2] = $24; //@line 11507
  sp = STACKTOP; //@line 11508
  STACKTOP = sp; //@line 11509
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11511
 if (!$25) {
  STACKTOP = sp; //@line 11513
  return;
 }
 $30 = (HEAP8[$20 >> 0] | 0) != 0; //@line 11516
 $32 = HEAP32[$0 + 1888 >> 2] | 0; //@line 11518
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11519
 __ZN7LoRaPHY15setup_rx_windowEbj($24, $30, $32); //@line 11520
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 374; //@line 11523
  HEAP32[$AsyncCtx + 4 >> 2] = $20; //@line 11525
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11527
  sp = STACKTOP; //@line 11528
  STACKTOP = sp; //@line 11529
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11531
 HEAP32[$0 + 1168 >> 2] = HEAP8[$20 >> 0] | 0 ? 2 : 1; //@line 11536
 STACKTOP = sp; //@line 11537
 return;
}
function __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1_($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11810
 STACKTOP = STACKTOP + 16 | 0; //@line 11811
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11811
 $7 = sp; //@line 11812
 HEAP32[$7 >> 2] = 0; //@line 11813
 $8 = HEAP8[$3 >> 0] | 0; //@line 11814
 $9 = $8 + 1 << 24 >> 24; //@line 11815
 HEAP8[$3 >> 0] = $9; //@line 11816
 $12 = HEAP8[$1 + ($8 & 255) >> 0] | 0; //@line 11819
 HEAP8[$3 >> 0] = $8 + 2 << 24 >> 24; //@line 11821
 $20 = (HEAPU8[$1 + ($9 & 255) >> 0] | 0) << 8 | $12 & 255; //@line 11828
 $21 = $2 & 65535; //@line 11829
 $22 = $21 + -4 | 0; //@line 11830
 $43 = (HEAPU8[$1 + ($21 + -3) >> 0] | 0) << 8 | (HEAPU8[$1 + $22 >> 0] | 0) | (HEAPU8[$1 + ($21 + -2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($21 + -1) >> 0] | 0) << 24; //@line 11851
 $44 = HEAP32[$5 >> 2] | 0; //@line 11852
 $47 = $20 - $44 & 65535; //@line 11855
 $48 = $47 + $44 | 0; //@line 11856
 $$ = $20 >>> 0 < ($44 & 65535) >>> 0 ? $48 + 65536 | 0 : $48; //@line 11859
 HEAP32[$5 >> 2] = $$; //@line 11860
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 11863
 __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0 + 756 | 0, $1, $22 & 65535, $6, 128, $4, 1, $$, $7) | 0; //@line 11864
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 380; //@line 11867
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 11869
  HEAP32[$AsyncCtx + 8 >> 2] = $43; //@line 11871
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 11873
  HEAP32[$AsyncCtx + 16 >> 2] = $47; //@line 11875
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 11877
  HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 11879
  sp = STACKTOP; //@line 11880
  STACKTOP = sp; //@line 11881
  return 0; //@line 11881
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11883
 if (($43 | 0) != (HEAP32[$7 >> 2] | 0)) {
  HEAP32[$0 + 2020 >> 2] = 12; //@line 11888
  $$0 = 0; //@line 11889
  STACKTOP = sp; //@line 11890
  return $$0 | 0; //@line 11890
 }
 if ($47 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0 + 4 | 0) | 0) & 65535) >>> 0) {
  $$0 = 1; //@line 11897
  STACKTOP = sp; //@line 11898
  return $$0 | 0; //@line 11898
 }
 HEAP32[$0 + 2020 >> 2] = 10; //@line 11901
 HEAP32[$0 + 2048 >> 2] = HEAP32[$5 >> 2]; //@line 11904
 $$0 = 0; //@line 11905
 STACKTOP = sp; //@line 11906
 return $$0 | 0; //@line 11906
}
function __ZN12LoRaWANStackD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $19 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 4697
 $1 = $0 + 2500 | 0; //@line 4698
 $3 = HEAP32[$0 + 2544 >> 2] | 0; //@line 4700
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 4706
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4707
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 2532 | 0); //@line 4708
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 153; //@line 4711
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4713
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 4715
    sp = STACKTOP; //@line 4716
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4719
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 2528 >> 2] | 0; //@line 4725
 do {
  if ($11 | 0) {
   $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 4731
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4732
   FUNCTION_TABLE_vi[$15 & 1023]($0 + 2516 | 0); //@line 4733
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 154; //@line 4736
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 4738
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 4740
    sp = STACKTOP; //@line 4741
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4744
    break;
   }
  }
 } while (0);
 $19 = HEAP32[$0 + 2512 >> 2] | 0; //@line 4750
 do {
  if ($19 | 0) {
   $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 4755
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4756
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 4757
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 155; //@line 4760
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4762
    sp = STACKTOP; //@line 4763
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4766
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4772
 __ZN12radio_eventsD2Ev($0 + 2384 | 0); //@line 4773
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 156; //@line 4776
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 4778
  sp = STACKTOP; //@line 4779
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 4782
 $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4783
 __ZN7LoRaMacD2Ev($0); //@line 4784
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 157; //@line 4787
  sp = STACKTOP; //@line 4788
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx10 | 0); //@line 4791
  return;
 }
}
function __ZN12LoRaWANStack25process_reception_timeoutEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $19 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6009
 STACKTOP = STACKTOP + 16 | 0; //@line 6010
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6010
 $vararg_buffer = sp; //@line 6011
 $2 = sp + 4 | 0; //@line 6012
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6013
 $3 = __ZN7LoRaMac19on_radio_rx_timeoutEb($0, $1) | 0; //@line 6014
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 203; //@line 6017
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6019
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6021
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6023
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 6025
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 6027
  sp = STACKTOP; //@line 6028
  STACKTOP = sp; //@line 6029
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6031
 if (($3 | 0) != 1) {
  STACKTOP = sp; //@line 6034
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  HEAP32[$2 >> 2] = 0; //@line 6038
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6039
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $2); //@line 6040
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 204; //@line 6043
   HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 6045
   sp = STACKTOP; //@line 6046
   STACKTOP = sp; //@line 6047
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6049
  STACKTOP = sp; //@line 6050
  return;
 }
 __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 6052
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1) {
   if (__ZN7LoRaMac24continue_sending_processEv($0) | 0) {
    STACKTOP = sp; //@line 6060
    return;
   } else {
    _mbed_tracef(2, 12187, 12192, $vararg_buffer); //@line 6062
    break;
   }
  }
 } while (0);
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6067
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 6068
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 205; //@line 6071
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6073
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 6075
  sp = STACKTOP; //@line 6076
  STACKTOP = sp; //@line 6077
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6079
 $19 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 6081
 HEAP32[$0 + 2496 >> 2] = $19 ? 5 : 2; //@line 6084
 STACKTOP = sp; //@line 6085
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_173($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 12817
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12819
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12821
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12823
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12825
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12827
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12829
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12831
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12833
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12835
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12837
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12839
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12841
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12843
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12845
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12847
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 12849
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 12853
 $39 = HEAP32[(HEAP32[HEAP32[$0 + 68 >> 2] >> 2] | 0) + 24 >> 2] | 0; //@line 12856
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(72) | 0; //@line 12857
 $40 = _mbedtls_cipher_update($16, $26, $39, $26, $36) | 0; //@line 12858
 if (!___async) {
  HEAP32[___async_retval >> 2] = $40; //@line 12862
  ___async_unwind = 0; //@line 12863
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 587; //@line 12865
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $12; //@line 12867
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 12869
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $14; //@line 12871
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $16; //@line 12873
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $18; //@line 12875
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $6; //@line 12877
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $8; //@line 12879
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $2; //@line 12881
 HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $10; //@line 12883
 HEAP32[$ReallocAsyncCtx10 + 40 >> 2] = $20; //@line 12885
 HEAP32[$ReallocAsyncCtx10 + 44 >> 2] = $22; //@line 12887
 HEAP32[$ReallocAsyncCtx10 + 48 >> 2] = $24; //@line 12889
 HEAP32[$ReallocAsyncCtx10 + 52 >> 2] = $26; //@line 12891
 HEAP32[$ReallocAsyncCtx10 + 56 >> 2] = $39; //@line 12893
 HEAP32[$ReallocAsyncCtx10 + 60 >> 2] = $28; //@line 12895
 HEAP32[$ReallocAsyncCtx10 + 64 >> 2] = $30; //@line 12897
 HEAP32[$ReallocAsyncCtx10 + 68 >> 2] = $32; //@line 12899
 sp = STACKTOP; //@line 12900
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEhj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$079$i = 0, $$1 = 0, $11 = 0, $13 = 0, $20 = 0, $25 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20298
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$0 = 0; //@line 20303
  return $$0 | 0; //@line 20304
 }
 $6 = $0 + 76 | 0; //@line 20306
 L4 : do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $25 = -1; //@line 20311
  } else {
   $$079$i = 0; //@line 20313
   while (1) {
    $11 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 20317
    $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 20319
    $13 = FUNCTION_TABLE_iiii[$11 & 31]($0, $2, $$079$i & 255) | 0; //@line 20320
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 20325
    if ($13) {
     $25 = $$079$i; //@line 20327
     break L4;
    }
    $20 = $$079$i + 1 | 0; //@line 20330
    if (($20 | 0) < (HEAPU8[$6 >> 0] | 0)) {
     $$079$i = $20; //@line 20335
    } else {
     $25 = -1; //@line 20337
     break L4;
    }
   }
   HEAP32[$AsyncCtx >> 2] = 520; //@line 20341
   HEAP32[$AsyncCtx + 4 >> 2] = $$079$i; //@line 20343
   HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 20345
   HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 20347
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 20349
   HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 20351
   HEAP8[$AsyncCtx + 24 >> 0] = $1; //@line 20353
   sp = STACKTOP; //@line 20354
   return 0; //@line 20355
  }
 } while (0);
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 20361
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 20362
 $29 = FUNCTION_TABLE_iiii[$28 & 31]($0, $2, $25 & 255) | 0; //@line 20363
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 521; //@line 20366
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 20368
  HEAP8[$AsyncCtx2 + 8 >> 0] = $1; //@line 20370
  HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 20372
  sp = STACKTOP; //@line 20373
  return 0; //@line 20374
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20376
 $$ = $29 ? 3 : 2; //@line 20377
 $34 = HEAP32[$0 + 124 >> 2] | 0; //@line 20379
 $35 = $1 & 255; //@line 20380
 $$1 = (HEAP32[$34 + ($35 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 20385
 if ($$1 << 24 >> 24 != 3) {
  $$0 = $$1; //@line 20388
  return $$0 | 0; //@line 20389
 }
 HEAP32[$34 + ($35 * 12 | 0) + 4 >> 2] = $2; //@line 20392
 $$0 = 3; //@line 20393
 return $$0 | 0; //@line 20394
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_11($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18588
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18590
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18592
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18594
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18596
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18598
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18600
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18602
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18604
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2092 >> 2] = 13; //@line 18610
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 1442) >> 0] | 0) << 8 | (HEAPU8[$2 + 1442 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 1442) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 1442) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[$2 + 2092 >> 2] = 7; //@line 18638
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 18642
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 18643
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 377; //@line 18646
  $44 = $ReallocAsyncCtx5 + 4 | 0; //@line 18647
  HEAP32[$44 >> 2] = $12; //@line 18648
  $45 = $ReallocAsyncCtx5 + 8 | 0; //@line 18649
  HEAP32[$45 >> 2] = $2; //@line 18650
  $46 = $ReallocAsyncCtx5 + 12 | 0; //@line 18651
  HEAP32[$46 >> 2] = $14; //@line 18652
  $47 = $ReallocAsyncCtx5 + 16 | 0; //@line 18653
  HEAP32[$47 >> 2] = $16; //@line 18654
  $48 = $ReallocAsyncCtx5 + 20 | 0; //@line 18655
  HEAP32[$48 >> 2] = $6; //@line 18656
  $49 = $ReallocAsyncCtx5 + 24 | 0; //@line 18657
  HEAP32[$49 >> 2] = $10; //@line 18658
  sp = STACKTOP; //@line 18659
  return;
 }
 ___async_unwind = 0; //@line 18662
 HEAP32[$ReallocAsyncCtx5 >> 2] = 377; //@line 18663
 $44 = $ReallocAsyncCtx5 + 4 | 0; //@line 18664
 HEAP32[$44 >> 2] = $12; //@line 18665
 $45 = $ReallocAsyncCtx5 + 8 | 0; //@line 18666
 HEAP32[$45 >> 2] = $2; //@line 18667
 $46 = $ReallocAsyncCtx5 + 12 | 0; //@line 18668
 HEAP32[$46 >> 2] = $14; //@line 18669
 $47 = $ReallocAsyncCtx5 + 16 | 0; //@line 18670
 HEAP32[$47 >> 2] = $16; //@line 18671
 $48 = $ReallocAsyncCtx5 + 20 | 0; //@line 18672
 HEAP32[$48 >> 2] = $6; //@line 18673
 $49 = $ReallocAsyncCtx5 + 24 | 0; //@line 18674
 HEAP32[$49 >> 2] = $10; //@line 18675
 sp = STACKTOP; //@line 18676
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_343($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $31 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26855
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26857
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26859
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26861
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 26863
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26865
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26867
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26869
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26871
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26873
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26875
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26877
 HEAP32[$2 + 2092 >> 2] = 1; //@line 26879
 HEAP32[$2 + 2056 >> 2] = 1; //@line 26881
 HEAP8[$2 + 2060 >> 0] = HEAP8[$4 >> 0] | 0; //@line 26884
 HEAP8[$2 + 2061 >> 0] = HEAP8[$6 >> 0] | 0; //@line 26887
 HEAP32[$2 + 2072 >> 2] = $8 & 255; //@line 26890
 $31 = HEAP32[$10 >> 2] | 0; //@line 26891
 HEAP32[$2 + 2064 >> 2] = $31; //@line 26893
 HEAP32[$2 + 2096 >> 2] = $31; //@line 26895
 if (!(HEAP8[$12 >> 0] | 0)) {
  $36 = $2 + 1701 | 0; //@line 26899
  HEAP8[$36 >> 0] = (HEAP8[$36 >> 0] | 0) + 1 << 24 >> 24; //@line 26902
 }
 $41 = HEAP16[$14 >> 1] & 255; //@line 26906
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 26907
 __ZN7LoRaPHY11handle_sendEPhh($16, $2 + 1185 | 0, $41); //@line 26908
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 418; //@line 26911
  $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 26912
  HEAP32[$42 >> 2] = $6; //@line 26913
  $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 26914
  HEAP32[$43 >> 2] = $18; //@line 26915
  $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 26916
  HEAP32[$44 >> 2] = $20; //@line 26917
  $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 26918
  HEAP32[$45 >> 2] = $22; //@line 26919
  sp = STACKTOP; //@line 26920
  return;
 }
 ___async_unwind = 0; //@line 26923
 HEAP32[$ReallocAsyncCtx2 >> 2] = 418; //@line 26924
 $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 26925
 HEAP32[$42 >> 2] = $6; //@line 26926
 $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 26927
 HEAP32[$43 >> 2] = $18; //@line 26928
 $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 26929
 HEAP32[$44 >> 2] = $20; //@line 26930
 $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 26931
 HEAP32[$45 >> 2] = $22; //@line 26932
 sp = STACKTOP; //@line 26933
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16216
 STACKTOP = STACKTOP + 64 | 0; //@line 16217
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16217
 $3 = sp; //@line 16218
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 16221
 } else {
  if (!$1) {
   $$2 = 0; //@line 16225
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16227
   $6 = ___dynamic_cast($1, 400, 384, 0) | 0; //@line 16228
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 673; //@line 16231
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 16233
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16235
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 16237
    sp = STACKTOP; //@line 16238
    STACKTOP = sp; //@line 16239
    return 0; //@line 16239
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16241
   if (!$6) {
    $$2 = 0; //@line 16244
   } else {
    dest = $3 + 4 | 0; //@line 16247
    stop = dest + 52 | 0; //@line 16247
    do {
     HEAP32[dest >> 2] = 0; //@line 16247
     dest = dest + 4 | 0; //@line 16247
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 16248
    HEAP32[$3 + 8 >> 2] = $0; //@line 16250
    HEAP32[$3 + 12 >> 2] = -1; //@line 16252
    HEAP32[$3 + 48 >> 2] = 1; //@line 16254
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 16257
    $18 = HEAP32[$2 >> 2] | 0; //@line 16258
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16259
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 16260
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 674; //@line 16263
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16265
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16267
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 16269
     sp = STACKTOP; //@line 16270
     STACKTOP = sp; //@line 16271
     return 0; //@line 16271
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16273
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 16280
     $$0 = 1; //@line 16281
    } else {
     $$0 = 0; //@line 16283
    }
    $$2 = $$0; //@line 16285
   }
  }
 }
 STACKTOP = sp; //@line 16289
 return $$2 | 0; //@line 16289
}
function __ZN12LoRaWANStackD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28466
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28468
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28470
 $6 = HEAP32[$2 + 2528 >> 2] | 0; //@line 28472
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 28477
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 28478
  FUNCTION_TABLE_vi[$10 & 1023]($2 + 2516 | 0); //@line 28479
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 154; //@line 28482
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 28483
   HEAP32[$11 >> 2] = $2; //@line 28484
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 28485
   HEAP32[$12 >> 2] = $4; //@line 28486
   sp = STACKTOP; //@line 28487
   return;
  }
  ___async_unwind = 0; //@line 28490
  HEAP32[$ReallocAsyncCtx2 >> 2] = 154; //@line 28491
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 28492
  HEAP32[$11 >> 2] = $2; //@line 28493
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 28494
  HEAP32[$12 >> 2] = $4; //@line 28495
  sp = STACKTOP; //@line 28496
  return;
 }
 $14 = HEAP32[$2 + 2512 >> 2] | 0; //@line 28500
 if (!$14) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 28504
  __ZN12radio_eventsD2Ev($2 + 2384 | 0); //@line 28505
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 156; //@line 28508
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 28509
   HEAP32[$20 >> 2] = $2; //@line 28510
   sp = STACKTOP; //@line 28511
   return;
  }
  ___async_unwind = 0; //@line 28514
  HEAP32[$ReallocAsyncCtx5 >> 2] = 156; //@line 28515
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 28516
  HEAP32[$20 >> 2] = $2; //@line 28517
  sp = STACKTOP; //@line 28518
  return;
 } else {
  $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 28522
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 28523
  FUNCTION_TABLE_vi[$17 & 1023]($4); //@line 28524
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 28527
   $18 = $ReallocAsyncCtx3 + 4 | 0; //@line 28528
   HEAP32[$18 >> 2] = $2; //@line 28529
   sp = STACKTOP; //@line 28530
   return;
  }
  ___async_unwind = 0; //@line 28533
  HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 28534
  $18 = $ReallocAsyncCtx3 + 4 | 0; //@line 28535
  HEAP32[$18 >> 2] = $2; //@line 28536
  sp = STACKTOP; //@line 28537
  return;
 }
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $21 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5758
 STACKTOP = STACKTOP + 16 | 0; //@line 5759
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5759
 $5 = sp; //@line 5760
 $6 = $0 + 2911 | 0; //@line 5761
 if (($2 & 65535) > 255 | (HEAP8[$6 >> 0] | 0) == 0) {
  STACKTOP = sp; //@line 5767
  return;
 }
 HEAP8[$6 >> 0] = 0; //@line 5770
 $11 = $0 + 2912 | 0; //@line 5771
 _memcpy($11 | 0, $1 | 0, $2 & 65535 | 0) | 0; //@line 5772
 $13 = HEAP32[$0 + 3168 >> 2] | 0; //@line 5774
 $14 = $5 + 12 | 0; //@line 5775
 HEAP32[$5 >> 2] = 7; //@line 5776
 HEAP32[$5 + 4 >> 2] = 0; //@line 5778
 HEAP32[$5 + 8 >> 2] = $0; //@line 5780
 HEAP32[$14 >> 2] = 836; //@line 5781
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5782
 $15 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3_($13, $5, $11, $2, $3, $4) | 0; //@line 5783
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 191; //@line 5786
  HEAP32[$AsyncCtx3 + 4 >> 2] = $14; //@line 5788
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 5790
  sp = STACKTOP; //@line 5791
  STACKTOP = sp; //@line 5792
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5794
 $18 = HEAP32[$14 >> 2] | 0; //@line 5795
 do {
  if ($18 | 0) {
   $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 5800
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5801
   FUNCTION_TABLE_vi[$21 & 1023]($5); //@line 5802
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 192; //@line 5805
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 5807
    HEAP32[$AsyncCtx + 8 >> 2] = $15; //@line 5809
    sp = STACKTOP; //@line 5810
    STACKTOP = sp; //@line 5811
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5813
    break;
   }
  }
 } while (0);
 if ($15 | 0) {
  STACKTOP = sp; //@line 5820
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5822
 _mbed_assert_internal(12080, 12089, 524); //@line 5823
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 193; //@line 5826
  sp = STACKTOP; //@line 5827
  STACKTOP = sp; //@line 5828
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5830
 STACKTOP = sp; //@line 5831
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_109($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 26467
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26469
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26473
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26475
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26477
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 26479
 $$pr = HEAP32[$2 >> 2] | 0; //@line 26480
 if (!$$pr) {
  $17 = $8 + 12 | 0; //@line 26483
  HEAP32[$17 >> 2] = 0; //@line 26484
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 26485
  __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $8); //@line 26486
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 345; //@line 26489
   $18 = $ReallocAsyncCtx9 + 4 | 0; //@line 26490
   HEAP32[$18 >> 2] = $17; //@line 26491
   $19 = $ReallocAsyncCtx9 + 8 | 0; //@line 26492
   HEAP32[$19 >> 2] = $8; //@line 26493
   sp = STACKTOP; //@line 26494
   return;
  }
  ___async_unwind = 0; //@line 26497
  HEAP32[$ReallocAsyncCtx9 >> 2] = 345; //@line 26498
  $18 = $ReallocAsyncCtx9 + 4 | 0; //@line 26499
  HEAP32[$18 >> 2] = $17; //@line 26500
  $19 = $ReallocAsyncCtx9 + 8 | 0; //@line 26501
  HEAP32[$19 >> 2] = $8; //@line 26502
  sp = STACKTOP; //@line 26503
  return;
 } else {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 26507
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 26508
  FUNCTION_TABLE_vii[$13 & 15]($8, $10); //@line 26509
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 26512
   $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 26513
   HEAP32[$14 >> 2] = $2; //@line 26514
   $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 26515
   HEAP32[$15 >> 2] = $6; //@line 26516
   $16 = $ReallocAsyncCtx7 + 12 | 0; //@line 26517
   HEAP32[$16 >> 2] = $8; //@line 26518
   sp = STACKTOP; //@line 26519
   return;
  }
  ___async_unwind = 0; //@line 26522
  HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 26523
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 26524
  HEAP32[$14 >> 2] = $2; //@line 26525
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 26526
  HEAP32[$15 >> 2] = $6; //@line 26527
  $16 = $ReallocAsyncCtx7 + 12 | 0; //@line 26528
  HEAP32[$16 >> 2] = $8; //@line 26529
  sp = STACKTOP; //@line 26530
  return;
 }
}
function __ZN12LoRaWANStack20process_transmissionEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $30 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20417
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20419
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20421
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20423
 HEAP8[$2 + 2895 >> 0] = 0; //@line 20427
 HEAP32[$2 + 2888 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 20 >> 2]; //@line 20432
 HEAP8[$2 + 2893 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 8 >> 0] | 0; //@line 20437
 HEAP8[$2 + 2892 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 9 >> 0] | 0; //@line 20442
 HEAP32[$2 + 2884 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 12 >> 2]; //@line 20447
 HEAP8[$2 + 2894 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 11 >> 0] | 0; //@line 20452
 $30 = $2 + 2496 | 0; //@line 20453
 switch (HEAP32[$30 >> 2] | 0) {
 case 1:
  {
   HEAP32[$30 >> 2] = 4; //@line 20457
   return;
  }
 case 8:
  {
   $34 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) >> 2] | 0) == 1; //@line 20464
   $35 = $2 + 2904 | 0; //@line 20465
   $37 = HEAP32[$35 >> 2] & -18; //@line 20467
   if ($34) {
    HEAP32[$35 >> 2] = $37 | 1; //@line 20470
    _mbed_tracef(16, 12187, 12551, $6); //@line 20471
    HEAP32[$30 >> 2] = 9; //@line 20472
    return;
   }
   HEAP32[$35 >> 2] = $37 | 16; //@line 20476
   if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
    return;
   }
   __ZN7LoRaMac21post_process_mcps_reqEv($4); //@line 20482
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 20483
   __ZN12LoRaWANStack26process_status_check_stateEv($2); //@line 20484
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 327; //@line 20487
    $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 20488
    HEAP32[$42 >> 2] = $4; //@line 20489
    $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 20490
    HEAP32[$43 >> 2] = $30; //@line 20491
    sp = STACKTOP; //@line 20492
    return;
   }
   ___async_unwind = 0; //@line 20495
   HEAP32[$ReallocAsyncCtx2 >> 2] = 327; //@line 20496
   $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 20497
   HEAP32[$42 >> 2] = $4; //@line 20498
   $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 20499
   HEAP32[$43 >> 2] = $30; //@line 20500
   sp = STACKTOP; //@line 20501
   return;
  }
 default:
  {
   return;
  }
 }
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 15726
 STACKTOP = STACKTOP + 128 | 0; //@line 15727
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 15727
 $4 = sp + 124 | 0; //@line 15728
 $5 = sp; //@line 15729
 dest = $5; //@line 15730
 src = 10768; //@line 15730
 stop = dest + 124 | 0; //@line 15730
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 15730
  dest = dest + 4 | 0; //@line 15730
  src = src + 4 | 0; //@line 15730
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 15736
   $$015 = 1; //@line 15736
   label = 4; //@line 15737
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 15740
   $$0 = -1; //@line 15741
  }
 } else {
  $$014 = $0; //@line 15744
  $$015 = $1; //@line 15744
  label = 4; //@line 15745
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 15749
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 15751
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 15753
  $14 = $5 + 20 | 0; //@line 15754
  HEAP32[$14 >> 2] = $$014; //@line 15755
  HEAP32[$5 + 44 >> 2] = $$014; //@line 15757
  $16 = $$014 + $$$015 | 0; //@line 15758
  $17 = $5 + 16 | 0; //@line 15759
  HEAP32[$17 >> 2] = $16; //@line 15760
  HEAP32[$5 + 28 >> 2] = $16; //@line 15762
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15763
  $19 = _vfprintf($5, $2, $3) | 0; //@line 15764
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 665; //@line 15767
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 15769
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 15771
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 15773
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 15775
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 15777
   sp = STACKTOP; //@line 15778
   STACKTOP = sp; //@line 15779
   return 0; //@line 15779
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15781
  if (!$$$015) {
   $$0 = $19; //@line 15784
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 15786
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 15791
   $$0 = $19; //@line 15792
  }
 }
 STACKTOP = sp; //@line 15795
 return $$0 | 0; //@line 15795
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28833
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 28835
 $7 = $4 + 156 | 0; //@line 28836
 _equeue_mutex_lock($7); //@line 28837
 $8 = $4 + 24 | 0; //@line 28838
 $9 = HEAP32[$8 >> 2] | 0; //@line 28839
 L3 : do {
  if (!$9) {
   label = 9; //@line 28843
  } else {
   $$03842$i = $8; //@line 28845
   $12 = $9; //@line 28845
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 28852
    $19 = HEAP32[$18 >> 2] | 0; //@line 28853
    if (!$19) {
     label = 9; //@line 28856
     break L3;
    } else {
     $$03842$i = $18; //@line 28859
     $12 = $19; //@line 28859
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 28863
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 28866
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 28868
    $$038$sink$i = $15 + 8 | 0; //@line 28870
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 28874
   _equeue_mutex_unlock($7); //@line 28875
   $$1$i9 = $12; //@line 28876
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 28881
   $22 = HEAP32[$21 >> 2] | 0; //@line 28882
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 28885
    $$0 = 0; //@line 28886
    $34 = ___async_retval; //@line 28887
    HEAP32[$34 >> 2] = $$0; //@line 28888
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 28891
    $25 = HEAP32[$24 >> 2] | 0; //@line 28892
    HEAP32[$24 >> 2] = $25 + $6; //@line 28894
    HEAP32[$21 >> 2] = $22 - $6; //@line 28896
    HEAP32[$25 >> 2] = $6; //@line 28897
    HEAP8[$25 + 4 >> 0] = 1; //@line 28899
    _equeue_mutex_unlock($7); //@line 28900
    if (!$25) {
     $$0 = 0; //@line 28903
    } else {
     $$1$i9 = $25; //@line 28905
     break;
    }
    $34 = ___async_retval; //@line 28908
    HEAP32[$34 >> 2] = $$0; //@line 28909
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 28915
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 28917
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 28919
 $$0 = $$1$i9 + 36 | 0; //@line 28921
 $34 = ___async_retval; //@line 28922
 HEAP32[$34 >> 2] = $$0; //@line 28923
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17548
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 17554
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 17558
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 17559
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17560
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 17561
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 690; //@line 17564
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 17566
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17568
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 17570
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 17572
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 17574
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 17576
    sp = STACKTOP; //@line 17577
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17580
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 17584
    $$0 = $0 + 24 | 0; //@line 17585
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17587
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 17588
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17593
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 17599
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 17602
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 691; //@line 17607
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 17609
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 17611
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 17613
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 17615
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 17617
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 17619
    sp = STACKTOP; //@line 17620
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_179($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13584
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13586
 $4 = HEAP32[$2 + 1828 >> 2] | 0; //@line 13588
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 13593
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 13594
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1816 | 0); //@line 13595
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 13598
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 13599
   HEAP32[$9 >> 2] = $2; //@line 13600
   sp = STACKTOP; //@line 13601
   return;
  }
  ___async_unwind = 0; //@line 13604
  HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 13605
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 13606
  HEAP32[$9 >> 2] = $2; //@line 13607
  sp = STACKTOP; //@line 13608
  return;
 }
 $11 = HEAP32[$2 + 1808 >> 2] | 0; //@line 13612
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 13617
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13618
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1796 | 0); //@line 13619
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 13622
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 13623
   HEAP32[$16 >> 2] = $2; //@line 13624
   sp = STACKTOP; //@line 13625
   return;
  }
  ___async_unwind = 0; //@line 13628
  HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 13629
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 13630
  HEAP32[$16 >> 2] = $2; //@line 13631
  sp = STACKTOP; //@line 13632
  return;
 }
 $18 = HEAP32[$2 + 748 >> 2] | 0; //@line 13636
 if (!$18) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 13640
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 13645
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 13646
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 736 | 0); //@line 13647
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 13650
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 13651
  HEAP32[$23 >> 2] = $2; //@line 13652
  sp = STACKTOP; //@line 13653
  return;
 }
 ___async_unwind = 0; //@line 13656
 HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 13657
 $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 13658
 HEAP32[$23 >> 2] = $2; //@line 13659
 sp = STACKTOP; //@line 13660
 return;
}
function _mbedtls_cipher_cmac_update__async_cb_192($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14591
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14593
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14595
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14597
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14599
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14601
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14603
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14605
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14607
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14609
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14611
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14613
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 14616
  $42 = ___async_retval; //@line 14617
  HEAP32[$42 >> 2] = $$0; //@line 14618
  return;
 }
 $24 = $2 + 1 | 0; //@line 14621
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 14624
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 14625
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 14629
   ___async_unwind = 0; //@line 14630
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 582; //@line 14632
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 14634
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 14636
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 14638
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 14640
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 14642
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 14644
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 14646
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 14648
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 14650
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 14652
  sp = STACKTOP; //@line 14653
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 14658
  $42 = ___async_retval; //@line 14659
  HEAP32[$42 >> 2] = $$0; //@line 14660
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 14665
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 14668
 $$0 = 0; //@line 14669
 $42 = ___async_retval; //@line 14670
 HEAP32[$42 >> 2] = $$0; //@line 14671
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 9537
 STACKTOP = STACKTOP + 16 | 0; //@line 9538
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9538
 $vararg_buffer1 = sp + 8 | 0; //@line 9539
 $vararg_buffer = sp; //@line 9540
 $2 = $0 + 2496 | 0; //@line 9541
 switch (HEAP32[$2 >> 2] | 0) {
 case 11:
 case 2:
  {
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = -1e3; //@line 9548
   STACKTOP = sp; //@line 9549
   return;
  }
 }
 $5 = HEAP32[$0 + 2904 >> 2] | 0; //@line 9553
 if ($5 & 4 | 0) {
  _mbed_tracef(16, 12187, 12587, $vararg_buffer); //@line 9557
  HEAP32[$1 >> 2] = 0; //@line 9558
  STACKTOP = sp; //@line 9559
  return;
 }
 HEAP32[$2 >> 2] = 3; //@line 9561
 if ($5 & 8 | 0) {
  $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9565
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $1); //@line 9566
  if (___async) {
   HEAP32[$AsyncCtx8 >> 2] = 329; //@line 9569
   sp = STACKTOP; //@line 9570
   STACKTOP = sp; //@line 9571
   return;
  }
  _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9573
  STACKTOP = sp; //@line 9574
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9576
 $10 = __ZN7LoRaMac4joinEb($0, 0) | 0; //@line 9577
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 330; //@line 9580
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 9582
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 9584
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 9586
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 9588
  sp = STACKTOP; //@line 9589
  STACKTOP = sp; //@line 9590
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9592
 HEAP32[$1 >> 2] = $10; //@line 9593
 _mbed_tracef(16, 12187, 12605, $vararg_buffer1); //@line 9594
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9595
 __ZN12LoRaWANStack23process_connected_stateEv($0); //@line 9596
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 331; //@line 9599
  sp = STACKTOP; //@line 9600
  STACKTOP = sp; //@line 9601
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 9603
 STACKTOP = sp; //@line 9604
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_174($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12908
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12910
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12912
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12914
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12916
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12918
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12920
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12922
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12924
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12926
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12928
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12930
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12932
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12934
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12936
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12938
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 12940
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(76) | 0; //@line 12941
 _mbedtls_platform_zeroize($28, 16); //@line 12942
 if (!___async) {
  ___async_unwind = 0; //@line 12945
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 586; //@line 12947
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 12949
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 12951
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 12953
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 12955
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 12957
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 12959
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 12961
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 12963
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 12965
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 12967
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 12969
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 12971
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $28; //@line 12973
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $26; //@line 12975
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $28; //@line 12977
 HEAP32[$ReallocAsyncCtx6 + 64 >> 2] = $32; //@line 12979
 HEAP32[$ReallocAsyncCtx6 + 68 >> 2] = $30; //@line 12981
 HEAP32[$ReallocAsyncCtx6 + 72 >> 2] = $32; //@line 12983
 sp = STACKTOP; //@line 12984
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_227($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17843
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17847
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17849
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17851
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17853
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17854
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 17858
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 17859
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 17860
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 17863
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 17864
   HEAP32[$14 >> 2] = $4; //@line 17865
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 17866
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 17867
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 17868
   HEAP32[$16 >> 2] = $8; //@line 17869
   sp = STACKTOP; //@line 17870
   return;
  }
  ___async_unwind = 0; //@line 17873
  HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 17874
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 17875
  HEAP32[$14 >> 2] = $4; //@line 17876
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 17877
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 17878
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 17879
  HEAP32[$16 >> 2] = $8; //@line 17880
  sp = STACKTOP; //@line 17881
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 17884
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 17888
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 17892
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17893
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 17894
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 17897
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 17898
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 17899
  sp = STACKTOP; //@line 17900
  return;
 }
 ___async_unwind = 0; //@line 17903
 HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 17904
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 17905
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 17906
 sp = STACKTOP; //@line 17907
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_126($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27407
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27411
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27413
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27415
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27417
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27418
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 27422
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27423
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 27424
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 27427
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 27428
   HEAP32[$14 >> 2] = $4; //@line 27429
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 27430
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 27431
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 27432
   HEAP32[$16 >> 2] = $8; //@line 27433
   sp = STACKTOP; //@line 27434
   return;
  }
  ___async_unwind = 0; //@line 27437
  HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 27438
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 27439
  HEAP32[$14 >> 2] = $4; //@line 27440
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 27441
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 27442
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 27443
  HEAP32[$16 >> 2] = $8; //@line 27444
  sp = STACKTOP; //@line 27445
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 27448
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 27452
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 27456
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27457
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 27458
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 27461
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 27462
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 27463
  sp = STACKTOP; //@line 27464
  return;
 }
 ___async_unwind = 0; //@line 27467
 HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 27468
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 27469
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 27470
 sp = STACKTOP; //@line 27471
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_143($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28443
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28447
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28449
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28451
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28453
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28454
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 28458
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 28459
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 28460
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 316; //@line 28463
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 28464
   HEAP32[$14 >> 2] = $4; //@line 28465
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 28466
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 28467
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 28468
   HEAP32[$16 >> 2] = $8; //@line 28469
   sp = STACKTOP; //@line 28470
   return;
  }
  ___async_unwind = 0; //@line 28473
  HEAP32[$ReallocAsyncCtx4 >> 2] = 316; //@line 28474
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 28475
  HEAP32[$14 >> 2] = $4; //@line 28476
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 28477
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 28478
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 28479
  HEAP32[$16 >> 2] = $8; //@line 28480
  sp = STACKTOP; //@line 28481
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 28484
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28488
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 28492
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 28493
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 28494
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 317; //@line 28497
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 28498
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 28499
  sp = STACKTOP; //@line 28500
  return;
 }
 ___async_unwind = 0; //@line 28503
 HEAP32[$ReallocAsyncCtx5 >> 2] = 317; //@line 28504
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 28505
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 28506
 sp = STACKTOP; //@line 28507
 return;
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 11715
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 11718
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 11721
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 11724
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 11730
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 11739
     $24 = $13 >>> 2; //@line 11740
     $$090 = 0; //@line 11741
     $$094 = $7; //@line 11741
     while (1) {
      $25 = $$094 >>> 1; //@line 11743
      $26 = $$090 + $25 | 0; //@line 11744
      $27 = $26 << 1; //@line 11745
      $28 = $27 + $23 | 0; //@line 11746
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 11749
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11753
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 11759
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 11767
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 11771
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 11777
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 11782
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 11785
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 11785
      }
     }
     $46 = $27 + $24 | 0; //@line 11788
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 11791
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11795
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 11807
     } else {
      $$4 = 0; //@line 11809
     }
    } else {
     $$4 = 0; //@line 11812
    }
   } else {
    $$4 = 0; //@line 11815
   }
  } else {
   $$4 = 0; //@line 11818
  }
 } while (0);
 return $$4 | 0; //@line 11821
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_33($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20741
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20745
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20747
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20749
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20751
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20753
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20754
 if (!$13) {
  HEAP32[$6 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv($4) | 0; //@line 20759
  HEAP8[$6 + 1936 >> 0] = 1; //@line 20761
  HEAP8[$8 >> 0] = 1; //@line 20762
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 20763
  __ZN7LoRaPHY25setup_public_network_modeEb($10, 1); //@line 20764
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 459; //@line 20767
   sp = STACKTOP; //@line 20768
   return;
  }
  ___async_unwind = 0; //@line 20771
  HEAP32[$ReallocAsyncCtx10 >> 2] = 459; //@line 20772
  sp = STACKTOP; //@line 20773
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 20777
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 20778
  FUNCTION_TABLE_vi[$16 & 1023]($12); //@line 20779
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 458; //@line 20782
   $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 20783
   HEAP32[$17 >> 2] = $4; //@line 20784
   $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 20785
   HEAP32[$18 >> 2] = $6; //@line 20786
   $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 20787
   HEAP32[$19 >> 2] = $8; //@line 20788
   $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 20789
   HEAP32[$20 >> 2] = $10; //@line 20790
   sp = STACKTOP; //@line 20791
   return;
  }
  ___async_unwind = 0; //@line 20794
  HEAP32[$ReallocAsyncCtx4 >> 2] = 458; //@line 20795
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 20796
  HEAP32[$17 >> 2] = $4; //@line 20797
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 20798
  HEAP32[$18 >> 2] = $6; //@line 20799
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 20800
  HEAP32[$19 >> 2] = $8; //@line 20801
  $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 20802
  HEAP32[$20 >> 2] = $10; //@line 20803
  sp = STACKTOP; //@line 20804
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_189($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14140
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14144
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14146
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14148
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14150
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14151
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 14155
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 14156
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 14157
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 213; //@line 14160
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 14161
   HEAP32[$14 >> 2] = $4; //@line 14162
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 14163
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 14164
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 14165
   HEAP32[$16 >> 2] = $8; //@line 14166
   sp = STACKTOP; //@line 14167
   return;
  }
  ___async_unwind = 0; //@line 14170
  HEAP32[$ReallocAsyncCtx4 >> 2] = 213; //@line 14171
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 14172
  HEAP32[$14 >> 2] = $4; //@line 14173
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 14174
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 14175
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 14176
  HEAP32[$16 >> 2] = $8; //@line 14177
  sp = STACKTOP; //@line 14178
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 14181
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 14185
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 14189
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 14190
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 14191
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 214; //@line 14194
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 14195
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 14196
  sp = STACKTOP; //@line 14197
  return;
 }
 ___async_unwind = 0; //@line 14200
 HEAP32[$ReallocAsyncCtx5 >> 2] = 214; //@line 14201
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 14202
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 14203
 sp = STACKTOP; //@line 14204
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_54($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22009
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22013
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22015
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22017
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22018
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 22022
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 22023
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 22024
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 223; //@line 22027
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 22028
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 22029
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 22030
   HEAP32[$13 >> 2] = $4; //@line 22031
   $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 22032
   HEAP32[$14 >> 2] = $6; //@line 22033
   sp = STACKTOP; //@line 22034
   return;
  }
  ___async_unwind = 0; //@line 22037
  HEAP32[$ReallocAsyncCtx2 >> 2] = 223; //@line 22038
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 22039
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 22040
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 22041
  HEAP32[$13 >> 2] = $4; //@line 22042
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 22043
  HEAP32[$14 >> 2] = $6; //@line 22044
  sp = STACKTOP; //@line 22045
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 2; //@line 22050
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 22053
 _mbed_assert_internal(12080, 12089, 775); //@line 22054
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 224; //@line 22057
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 22058
  HEAP32[$16 >> 2] = $4; //@line 22059
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 22060
  HEAP32[$17 >> 2] = $6; //@line 22061
  sp = STACKTOP; //@line 22062
  return;
 }
 ___async_unwind = 0; //@line 22065
 HEAP32[$ReallocAsyncCtx6 >> 2] = 224; //@line 22066
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 22067
 HEAP32[$16 >> 2] = $4; //@line 22068
 $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 22069
 HEAP32[$17 >> 2] = $6; //@line 22070
 sp = STACKTOP; //@line 22071
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_7($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18263
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18265
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18267
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18269
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18271
 if (!$AsyncRetVal) {
  $9 = $2 + 16 | 0; //@line 18274
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 18275
  $10 = _mbedtls_cipher_cmac_finish($4, $9) | 0; //@line 18276
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 493; //@line 18279
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 18280
   HEAP32[$11 >> 2] = $2; //@line 18281
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 18282
   HEAP32[$12 >> 2] = $9; //@line 18283
   $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 18284
   HEAP32[$13 >> 2] = $6; //@line 18285
   $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 18286
   HEAP32[$14 >> 2] = $4; //@line 18287
   sp = STACKTOP; //@line 18288
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 18292
  ___async_unwind = 0; //@line 18293
  HEAP32[$ReallocAsyncCtx2 >> 2] = 493; //@line 18294
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 18295
  HEAP32[$11 >> 2] = $2; //@line 18296
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 18297
  HEAP32[$12 >> 2] = $9; //@line 18298
  $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 18299
  HEAP32[$13 >> 2] = $6; //@line 18300
  $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 18301
  HEAP32[$14 >> 2] = $4; //@line 18302
  sp = STACKTOP; //@line 18303
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 18306
  _mbedtls_cipher_free($4); //@line 18307
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 18310
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 18311
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 18312
   sp = STACKTOP; //@line 18313
   return;
  }
  ___async_unwind = 0; //@line 18316
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 18317
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 18318
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 18319
  sp = STACKTOP; //@line 18320
  return;
 }
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28395
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28399
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28401
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28403
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28405
 $12 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 28407
 if ($AsyncRetVal | 0) {
  $30 = $AsyncRetVal; //@line 28409
  $29 = ___async_retval; //@line 28410
  HEAP32[$29 >> 2] = $30; //@line 28411
  return;
 }
 if (($12 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $30 = 0; //@line 28417
  $29 = ___async_retval; //@line 28418
  HEAP32[$29 >> 2] = $30; //@line 28419
  return;
 }
 $13 = $12 & 255; //@line 28422
 $14 = HEAP32[$6 >> 2] | 0; //@line 28423
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 28426
 $18 = HEAP32[$8 >> 2] | 0; //@line 28427
 $21 = HEAP8[$18 + ($13 << 4) >> 0] | 0; //@line 28430
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 28431
 $22 = FUNCTION_TABLE_iiii[$17 & 31]($14, $18 + ($13 << 4) + 4 | 0, $21) | 0; //@line 28432
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 469; //@line 28435
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 28436
  HEAP8[$23 >> 0] = $12; //@line 28437
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 28438
  HEAP32[$24 >> 2] = $4; //@line 28439
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 28440
  HEAP32[$25 >> 2] = $6; //@line 28441
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 28442
  HEAP32[$26 >> 2] = $8; //@line 28443
  sp = STACKTOP; //@line 28444
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 28448
 ___async_unwind = 0; //@line 28449
 HEAP32[$ReallocAsyncCtx >> 2] = 469; //@line 28450
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 28451
 HEAP8[$23 >> 0] = $12; //@line 28452
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 28453
 HEAP32[$24 >> 2] = $4; //@line 28454
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 28455
 HEAP32[$25 >> 2] = $6; //@line 28456
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 28457
 HEAP32[$26 >> 2] = $8; //@line 28458
 sp = STACKTOP; //@line 28459
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29856
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29858
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29860
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29862
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29864
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29866
 $11 = HEAP32[$2 >> 2] | 0; //@line 29867
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 29871
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 29872
  FUNCTION_TABLE_vii[$14 & 15]($6, $8); //@line 29873
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 91; //@line 29876
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 29877
   HEAP32[$15 >> 2] = $2; //@line 29878
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 29879
   HEAP32[$16 >> 2] = $4; //@line 29880
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 29881
   HEAP32[$17 >> 2] = $10; //@line 29882
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 29883
   HEAP32[$18 >> 2] = $8; //@line 29884
   sp = STACKTOP; //@line 29885
   return;
  }
  ___async_unwind = 0; //@line 29888
  HEAP32[$ReallocAsyncCtx2 >> 2] = 91; //@line 29889
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 29890
  HEAP32[$15 >> 2] = $2; //@line 29891
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 29892
  HEAP32[$16 >> 2] = $4; //@line 29893
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 29894
  HEAP32[$17 >> 2] = $10; //@line 29895
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 29896
  HEAP32[$18 >> 2] = $8; //@line 29897
  sp = STACKTOP; //@line 29898
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 29901
 __ZN4mbed6Ticker5setupEy($10, 1e5, 0); //@line 29902
 $19 = HEAP32[$2 >> 2] | 0; //@line 29903
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 29909
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29910
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 29911
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 29914
  sp = STACKTOP; //@line 29915
  return;
 }
 ___async_unwind = 0; //@line 29918
 HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 29919
 sp = STACKTOP; //@line 29920
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19141
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19143
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19145
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19147
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19149
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19151
 $11 = HEAP32[$2 >> 2] | 0; //@line 19152
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 19156
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 19157
  FUNCTION_TABLE_vii[$14 & 15]($6, $8); //@line 19158
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 50; //@line 19161
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 19162
   HEAP32[$15 >> 2] = $2; //@line 19163
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 19164
   HEAP32[$16 >> 2] = $4; //@line 19165
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 19166
   HEAP32[$17 >> 2] = $10; //@line 19167
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 19168
   HEAP32[$18 >> 2] = $8; //@line 19169
   sp = STACKTOP; //@line 19170
   return;
  }
  ___async_unwind = 0; //@line 19173
  HEAP32[$ReallocAsyncCtx2 >> 2] = 50; //@line 19174
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 19175
  HEAP32[$15 >> 2] = $2; //@line 19176
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 19177
  HEAP32[$16 >> 2] = $4; //@line 19178
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 19179
  HEAP32[$17 >> 2] = $10; //@line 19180
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 19181
  HEAP32[$18 >> 2] = $8; //@line 19182
  sp = STACKTOP; //@line 19183
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 19186
 __ZN4mbed6Ticker5setupEy($10, 2e5, 0); //@line 19187
 $19 = HEAP32[$2 >> 2] | 0; //@line 19188
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 19194
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 19195
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 19196
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 19199
  sp = STACKTOP; //@line 19200
  return;
 }
 ___async_unwind = 0; //@line 19203
 HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 19204
 sp = STACKTOP; //@line 19205
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15858
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 15863
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 15868
  } else {
   $20 = $0 & 255; //@line 15870
   $21 = $0 & 255; //@line 15871
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 15877
   } else {
    $26 = $1 + 20 | 0; //@line 15879
    $27 = HEAP32[$26 >> 2] | 0; //@line 15880
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 15886
     HEAP8[$27 >> 0] = $20; //@line 15887
     $34 = $21; //@line 15888
    } else {
     label = 12; //@line 15890
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15895
     $32 = ___overflow($1, $0) | 0; //@line 15896
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 667; //@line 15899
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 15901
      sp = STACKTOP; //@line 15902
      return 0; //@line 15903
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 15905
      $34 = $32; //@line 15906
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 15911
   $$0 = $34; //@line 15912
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 15917
   $8 = $0 & 255; //@line 15918
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 15924
    $14 = HEAP32[$13 >> 2] | 0; //@line 15925
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 15931
     HEAP8[$14 >> 0] = $7; //@line 15932
     $$0 = $8; //@line 15933
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15937
   $19 = ___overflow($1, $0) | 0; //@line 15938
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 666; //@line 15941
    sp = STACKTOP; //@line 15942
    return 0; //@line 15943
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15945
    $$0 = $19; //@line 15946
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 15951
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK16channel_params_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$037$lcssa = 0, $$03739 = 0, $$038 = 0, $$1 = 0, $10 = 0, $13 = 0, $14 = 0, $20 = 0, $26 = 0, $33 = 0, $39 = 0, $6 = 0, $8 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$038 = -1002; //@line 16122
  return $$038 | 0; //@line 16123
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16126
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 16128
 if (!($6 << 24 >> 24)) {
  $$037$lcssa = 0; //@line 16131
 } else {
  $10 = $1 + 4 | 0; //@line 16133
  $wide$trip$count = $6 & 255; //@line 16134
  $$03739 = 0; //@line 16135
  $indvars$iv = 0; //@line 16135
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0) {
    $13 = HEAP32[$10 >> 2] | 0; //@line 16140
    $14 = $$03739 & 255; //@line 16141
    HEAP8[$13 + ($14 << 4) >> 0] = $indvars$iv; //@line 16144
    HEAP32[$13 + ($14 << 4) + 4 >> 2] = HEAP32[$2 + ($indvars$iv * 12 | 0) >> 2]; //@line 16148
    $20 = $2 + ($indvars$iv * 12 | 0) + 8 | 0; //@line 16149
    HEAP8[$13 + ($14 << 4) + 12 >> 0] = HEAP8[$20 >> 0] | 0; //@line 16152
    $26 = (HEAP32[$10 >> 2] | 0) + ($14 << 4) + 12 | 0; //@line 16156
    HEAP8[$26 >> 0] = HEAP8[$26 >> 0] & -16 | HEAP8[$20 >> 0] & 15; //@line 16160
    $33 = (HEAP32[$10 >> 2] | 0) + ($14 << 4) + 12 | 0; //@line 16164
    HEAP8[$33 >> 0] = HEAP8[$33 >> 0] & 15 | HEAP8[$20 >> 0] & -16; //@line 16168
    $39 = HEAP32[$10 >> 2] | 0; //@line 16171
    HEAP8[$39 + ($14 << 4) + 13 >> 0] = HEAP8[$2 + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 16173
    HEAP32[$39 + ($14 << 4) + 8 >> 2] = HEAP32[$2 + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 16177
    $$1 = $$03739 + 1 << 24 >> 24; //@line 16179
   } else {
    $$1 = $$03739; //@line 16181
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 16183
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$037$lcssa = $$1; //@line 16186
    break;
   } else {
    $$03739 = $$1; //@line 16189
   }
  }
 }
 HEAP8[$1 >> 0] = $$037$lcssa; //@line 16193
 $$038 = 0; //@line 16194
 return $$038 | 0; //@line 16195
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_116($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26780
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26782
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26784
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26786
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26788
 if (!$AsyncRetVal) {
  $9 = $2 + 16 | 0; //@line 26791
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 26792
  $10 = _mbedtls_cipher_cmac_finish($4, $9) | 0; //@line 26793
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 486; //@line 26796
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 26797
   HEAP32[$11 >> 2] = $2; //@line 26798
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 26799
   HEAP32[$12 >> 2] = $9; //@line 26800
   $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 26801
   HEAP32[$13 >> 2] = $6; //@line 26802
   $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 26803
   HEAP32[$14 >> 2] = $4; //@line 26804
   sp = STACKTOP; //@line 26805
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 26809
  ___async_unwind = 0; //@line 26810
  HEAP32[$ReallocAsyncCtx2 >> 2] = 486; //@line 26811
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 26812
  HEAP32[$11 >> 2] = $2; //@line 26813
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 26814
  HEAP32[$12 >> 2] = $9; //@line 26815
  $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 26816
  HEAP32[$13 >> 2] = $6; //@line 26817
  $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 26818
  HEAP32[$14 >> 2] = $4; //@line 26819
  sp = STACKTOP; //@line 26820
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 26823
  _mbedtls_cipher_free($4); //@line 26824
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 487; //@line 26827
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 26828
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 26829
   sp = STACKTOP; //@line 26830
   return;
  }
  ___async_unwind = 0; //@line 26833
  HEAP32[$ReallocAsyncCtx6 >> 2] = 487; //@line 26834
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 26835
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 26836
  sp = STACKTOP; //@line 26837
  return;
 }
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11380
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 11385
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 11390
  } else {
   $20 = $0 & 255; //@line 11392
   $21 = $0 & 255; //@line 11393
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 11399
   } else {
    $26 = $1 + 20 | 0; //@line 11401
    $27 = HEAP32[$26 >> 2] | 0; //@line 11402
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 11408
     HEAP8[$27 >> 0] = $20; //@line 11409
     $34 = $21; //@line 11410
    } else {
     label = 12; //@line 11412
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11417
     $32 = ___overflow($1, $0) | 0; //@line 11418
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 655; //@line 11421
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11423
      sp = STACKTOP; //@line 11424
      return 0; //@line 11425
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11427
      $34 = $32; //@line 11428
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 11433
   $$0 = $34; //@line 11434
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 11439
   $8 = $0 & 255; //@line 11440
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 11446
    $14 = HEAP32[$13 >> 2] | 0; //@line 11447
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 11453
     HEAP8[$14 >> 0] = $7; //@line 11454
     $$0 = $8; //@line 11455
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11459
   $19 = ___overflow($1, $0) | 0; //@line 11460
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 654; //@line 11463
    sp = STACKTOP; //@line 11464
    return 0; //@line 11465
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11467
    $$0 = $19; //@line 11468
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 11473
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12100
 $1 = $0 + 20 | 0; //@line 12101
 $3 = $0 + 28 | 0; //@line 12103
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 12109
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12110
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 12111
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 661; //@line 12114
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12116
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12118
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 12120
    sp = STACKTOP; //@line 12121
    return 0; //@line 12122
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12124
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 12128
     break;
    } else {
     label = 5; //@line 12131
     break;
    }
   }
  } else {
   label = 5; //@line 12136
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 12140
  $14 = HEAP32[$13 >> 2] | 0; //@line 12141
  $15 = $0 + 8 | 0; //@line 12142
  $16 = HEAP32[$15 >> 2] | 0; //@line 12143
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 12151
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12152
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 12153
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 662; //@line 12156
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12158
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 12160
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 12162
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 12164
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 12166
     sp = STACKTOP; //@line 12167
     return 0; //@line 12168
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12170
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 12176
  HEAP32[$3 >> 2] = 0; //@line 12177
  HEAP32[$1 >> 2] = 0; //@line 12178
  HEAP32[$15 >> 2] = 0; //@line 12179
  HEAP32[$13 >> 2] = 0; //@line 12180
  $$0 = 0; //@line 12181
 }
 return $$0 | 0; //@line 12183
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12603
 STACKTOP = STACKTOP + 16 | 0; //@line 12604
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12604
 $2 = sp; //@line 12605
 $3 = $0 + 476 | 0; //@line 12606
 $4 = $1 + 12 | 0; //@line 12607
 $5 = HEAP32[$4 >> 2] | 0; //@line 12608
 do {
  if (!$5) {
   $13 = 0; //@line 12612
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 12615
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12616
   FUNCTION_TABLE_vii[$8 & 15]($2, $1); //@line 12617
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 390; //@line 12620
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 12622
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 12624
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 12626
    sp = STACKTOP; //@line 12627
    STACKTOP = sp; //@line 12628
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12630
    $13 = HEAP32[$4 >> 2] | 0; //@line 12632
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 12637
 HEAP32[$12 >> 2] = $13; //@line 12638
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12639
 __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($3, $2); //@line 12640
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 391; //@line 12643
  HEAP32[$AsyncCtx6 + 4 >> 2] = $12; //@line 12645
  HEAP32[$AsyncCtx6 + 8 >> 2] = $2; //@line 12647
  sp = STACKTOP; //@line 12648
  STACKTOP = sp; //@line 12649
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 12651
 $16 = HEAP32[$12 >> 2] | 0; //@line 12652
 if (!$16) {
  STACKTOP = sp; //@line 12655
  return;
 }
 $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 12658
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12659
 FUNCTION_TABLE_vi[$19 & 1023]($2); //@line 12660
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 392; //@line 12663
  sp = STACKTOP; //@line 12664
  STACKTOP = sp; //@line 12665
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12667
 STACKTOP = sp; //@line 12668
 return;
}
function __ZN12LoRaWANStack7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 10162
 STACKTOP = STACKTOP + 32 | 0; //@line 10163
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10163
 $vararg_buffer3 = sp + 16 | 0; //@line 10164
 $2 = sp + 24 | 0; //@line 10167
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$1 = -1012; //@line 10172
  STACKTOP = sp; //@line 10173
  return $$1 | 0; //@line 10173
 }
 $6 = HEAP8[$1 >> 0] | 0; //@line 10175
 if (($6 & 255) >= 2) {
  $$1 = -1003; //@line 10178
  STACKTOP = sp; //@line 10179
  return $$1 | 0; //@line 10179
 }
 $7 = $6 << 24 >> 24 == 0; //@line 10181
 $8 = __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, $1, $7) | 0; //@line 10182
 if ($8 | 0) {
  $$1 = $8; //@line 10185
  STACKTOP = sp; //@line 10186
  return $$1 | 0; //@line 10186
 }
 if ($7) {
  _mbed_tracef(16, 12187, 12678, sp); //@line 10189
  HEAP32[$0 + 2556 >> 2] = 0; //@line 10191
  HEAP32[$0 + 2552 >> 2] = 0; //@line 10193
  $12 = $0 + 2904 | 0; //@line 10194
  HEAP32[$12 >> 2] = HEAP32[$12 >> 2] | 8; //@line 10197
 } else {
  _mbed_tracef(16, 12187, 12624, sp + 8 | 0); //@line 10199
  $18 = HEAP32[$0 + 2556 >> 2] | 0; //@line 10203
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[$0 + 2552 >> 2]; //@line 10204
  HEAP32[$vararg_buffer3 + 4 >> 2] = $18; //@line 10206
  _mbed_tracef(16, 12187, 12639, $vararg_buffer3); //@line 10207
  $19 = $0 + 2904 | 0; //@line 10208
  HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -9; //@line 10211
 }
 HEAP32[$2 >> 2] = 0; //@line 10213
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10214
 __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $2); //@line 10215
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 348; //@line 10218
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 10220
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 10222
  sp = STACKTOP; //@line 10223
  STACKTOP = sp; //@line 10224
  return 0; //@line 10224
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10226
 $$1 = HEAP32[$2 >> 2] | 0; //@line 10228
 STACKTOP = sp; //@line 10229
 return $$1 | 0; //@line 10229
}
function _mbedtls_cipher_cmac_finish__async_cb_175($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12992
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12994
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12996
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12998
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13000
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13002
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13004
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13006
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13008
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13010
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13012
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13014
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13016
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13018
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13020
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13022
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13024
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 13025
 _mbedtls_platform_zeroize($2, 16); //@line 13026
 if (!___async) {
  ___async_unwind = 0; //@line 13029
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 585; //@line 13031
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 13033
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 13035
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 13037
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 13039
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 13041
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 13043
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 13045
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 13047
 HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 13049
 HEAP32[$ReallocAsyncCtx7 + 40 >> 2] = $20; //@line 13051
 HEAP32[$ReallocAsyncCtx7 + 44 >> 2] = $22; //@line 13053
 HEAP32[$ReallocAsyncCtx7 + 48 >> 2] = $24; //@line 13055
 HEAP32[$ReallocAsyncCtx7 + 52 >> 2] = $26; //@line 13057
 HEAP32[$ReallocAsyncCtx7 + 56 >> 2] = $28; //@line 13059
 HEAP32[$ReallocAsyncCtx7 + 60 >> 2] = $30; //@line 13061
 HEAP32[$ReallocAsyncCtx7 + 64 >> 2] = $32; //@line 13063
 sp = STACKTOP; //@line 13064
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb($0) {
 $0 = $0 | 0;
 var $14 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13770
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13772
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13774
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13776
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13778
 if ((HEAP32[___async_retval >> 2] | 0) != 1) {
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 13789
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 13790
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($6, $4); //@line 13791
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 204; //@line 13794
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 13795
   HEAP32[$14 >> 2] = $4; //@line 13796
   sp = STACKTOP; //@line 13797
   return;
  }
  ___async_unwind = 0; //@line 13800
  HEAP32[$ReallocAsyncCtx3 >> 2] = 204; //@line 13801
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 13802
  HEAP32[$14 >> 2] = $4; //@line 13803
  sp = STACKTOP; //@line 13804
  return;
 }
 __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 13807
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) == 1) {
   if (__ZN7LoRaMac24continue_sending_processEv($2) | 0) {
    return;
   } else {
    _mbed_tracef(2, 12187, 12192, $8); //@line 13817
    break;
   }
  }
 } while (0);
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 13822
 __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 13823
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 205; //@line 13826
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 13827
  HEAP32[$19 >> 2] = $2; //@line 13828
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 13829
  HEAP32[$20 >> 2] = $6; //@line 13830
  sp = STACKTOP; //@line 13831
  return;
 }
 ___async_unwind = 0; //@line 13834
 HEAP32[$ReallocAsyncCtx2 >> 2] = 205; //@line 13835
 $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 13836
 HEAP32[$19 >> 2] = $2; //@line 13837
 $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 13838
 HEAP32[$20 >> 2] = $6; //@line 13839
 sp = STACKTOP; //@line 13840
 return;
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 1867
 STACKTOP = STACKTOP + 48 | 0; //@line 1868
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1868
 $vararg_buffer12 = sp + 32 | 0; //@line 1869
 $vararg_buffer8 = sp + 24 | 0; //@line 1870
 $vararg_buffer4 = sp + 16 | 0; //@line 1871
 $vararg_buffer = sp; //@line 1872
 $6 = $4 & 255; //@line 1873
 $7 = $5 & 255; //@line 1874
 HEAP32[$vararg_buffer >> 2] = $2; //@line 1875
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 1877
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 1879
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 1881
 _mbed_tracef(16, 11016, 11500, $vararg_buffer); //@line 1882
 _emscripten_asm_const_i(6) | 0; //@line 1883
 $10 = HEAP32[$0 + 752 >> 2] | 0; //@line 1885
 if (($10 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $10; //@line 1888
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 1890
  _mbed_tracef(16, 11016, 11582, $vararg_buffer4); //@line 1891
  STACKTOP = sp; //@line 1892
  return;
 }
 $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 1895
 if (($13 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $13; //@line 1898
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 1900
  _mbed_tracef(16, 11016, 11629, $vararg_buffer8); //@line 1901
  STACKTOP = sp; //@line 1902
  return;
 }
 $16 = HEAP32[$0 + 692 >> 2] | 0; //@line 1905
 if (($16 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 1909
  HEAP8[$0 + 782 >> 0] = $2; //@line 1912
  HEAP8[$0 + 781 >> 0] = -35; //@line 1914
  HEAP8[$0 + 780 >> 0] = -5; //@line 1916
  HEAP8[$0 + 783 >> 0] = 1; //@line 1918
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(3) | 0; //@line 1921
  STACKTOP = sp; //@line 1922
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $16; //@line 1924
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 1926
  _mbed_tracef(16, 11016, 11676, $vararg_buffer12); //@line 1927
  STACKTOP = sp; //@line 1928
  return;
 }
}
function __ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $35 = 0, $4 = 0, $51 = 0, $56 = 0, $58 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 11982
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11984
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11988
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11990
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 11992
 $14 = HEAP8[$0 + 25 >> 0] | 0; //@line 11994
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 11996
 $18 = HEAP32[$0 + 28 >> 2] | 0; //@line 11998
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 12002
 $22 = $AsyncRetVal & 255; //@line 12003
 $23 = $2 & 65535; //@line 12004
 if ($23 >>> 0 > $22 >>> 0) {
  HEAP32[$4 >> 2] = $23; //@line 12007
  HEAP32[$4 + 4 >> 2] = $22; //@line 12009
  _mbed_tracef(8, 12866, 13365, $4); //@line 12010
  HEAP16[$8 + 2372 >> 1] = $23 - $22; //@line 12014
  HEAP16[$8 + 2370 >> 1] = $AsyncRetVal & 255; //@line 12017
  _memcpy($8 + 2115 | 0, $10 | 0, $22 | 0) | 0; //@line 12019
 } else {
  HEAP16[$8 + 2370 >> 1] = $2; //@line 12022
  HEAP16[$8 + 2372 >> 1] = 0; //@line 12024
  if ($2 << 16 >> 16) {
   _memcpy($8 + 2115 | 0, $10 | 0, $23 | 0) | 0; //@line 12028
  }
 }
 $35 = $12 & 255; //@line 12031
 if ($35 & 1 | 0) {
  HEAP32[$8 + 2108 >> 2] = 0; //@line 12036
  HEAP8[$8 + 2112 >> 0] = $14; //@line 12038
  HEAP8[$8 + 2114 >> 0] = 1; //@line 12040
 }
 if ($35 & 2 | 0) {
  HEAP32[$8 + 2108 >> 2] = 1; //@line 12046
  HEAP8[$8 + 2112 >> 0] = $14; //@line 12048
  HEAP8[$8 + 2114 >> 0] = $16; //@line 12050
 }
 if (!($35 & 8)) {
  $58 = HEAP8[$8 + 2112 >> 0] | 0; //@line 12057
 } else {
  HEAP32[$8 + 2108 >> 2] = 3; //@line 12060
  HEAP8[$8 + 2112 >> 0] = $14; //@line 12062
  HEAP8[$8 + 2114 >> 0] = 1; //@line 12064
  $58 = $14; //@line 12065
 }
 $51 = $8 + 2370 | 0; //@line 12067
 $56 = HEAPU16[$8 + 2372 >> 1] | 0; //@line 12072
 HEAP32[$18 >> 2] = HEAPU16[$51 >> 1]; //@line 12074
 HEAP32[$18 + 4 >> 2] = $56; //@line 12076
 HEAP32[$18 + 8 >> 2] = $58 & 255; //@line 12078
 _mbed_tracef(8, 12866, 13420, $18); //@line 12079
 HEAP16[___async_retval >> 1] = HEAP16[$51 >> 1] | 0; //@line 12082
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21398
 $3 = $0 + 4 | 0; //@line 21399
 $4 = HEAP32[$3 >> 2] | 0; //@line 21400
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 21403
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 21404
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 21405
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 535; //@line 21408
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 21410
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 21413
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 21415
  sp = STACKTOP; //@line 21416
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21419
 $11 = HEAP32[$3 >> 2] | 0; //@line 21420
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 21423
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21426
   FUNCTION_TABLE_vii[$14 & 15]($11, 0); //@line 21427
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 537; //@line 21430
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 21432
    sp = STACKTOP; //@line 21433
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 21436
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21440
   FUNCTION_TABLE_vii[$14 & 15]($11, $2); //@line 21441
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 536; //@line 21444
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 21446
    sp = STACKTOP; //@line 21447
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 21450
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 21455
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 21458
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21459
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 21460
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 538; //@line 21463
  sp = STACKTOP; //@line 21464
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 21467
  return;
 }
}
function __ZN12LoRaWANStack26process_status_check_stateEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $16 = 0, $3 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6592
 switch (HEAP32[$0 + 2496 >> 2] | 0) {
 case 9:
 case 8:
  {
   $3 = $0 + 2904 | 0; //@line 6597
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -18; //@line 6600
   __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 6601
   __ZN7LoRaMac16reset_ongoing_txEb($0, 0); //@line 6602
   $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6603
   __ZN12LoRaWANStack20mcps_confirm_handlerEv($0); //@line 6604
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 225; //@line 6607
    sp = STACKTOP; //@line 6608
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6611
   return;
  }
 case 5:
  {
   $6 = $0 + 2904 | 0; //@line 6616
   $7 = HEAP32[$6 >> 2] | 0; //@line 6617
   do {
    if ($7 & 17 | 0) {
     HEAP32[$6 >> 2] = $7 & -18; //@line 6623
     __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 6624
     __ZN7LoRaMac16reset_ongoing_txEb($0, 0); //@line 6625
     $11 = $0 + 2910 | 0; //@line 6626
     if (HEAP8[$11 >> 0] | 0) {
      HEAP8[$11 >> 0] = 0; //@line 6630
      break;
     }
     $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6633
     __ZN12LoRaWANStack20mcps_confirm_handlerEv($0); //@line 6634
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 226; //@line 6637
      HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 6639
      HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 6641
      sp = STACKTOP; //@line 6642
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6645
      break;
     }
    }
   } while (0);
   $16 = HEAP32[$6 >> 2] | 0; //@line 6650
   if (!($16 & 2)) {
    return;
   }
   HEAP32[$6 >> 2] = $16 & -3; //@line 6657
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6658
   __ZN12LoRaWANStack23mcps_indication_handlerEv($0); //@line 6659
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 227; //@line 6662
    sp = STACKTOP; //@line 6663
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6666
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18141
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18145
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18147
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18149
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18151
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18153
 if (!$AsyncRetVal) {
  $14 = HEAP16[$0 + 4 >> 1] & 255; //@line 18157
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 18158
  $15 = _mbedtls_cipher_cmac_update($4, $6, $14) | 0; //@line 18159
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 18162
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 18163
   HEAP32[$16 >> 2] = $8; //@line 18164
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 18165
   HEAP32[$17 >> 2] = $4; //@line 18166
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 18167
   HEAP32[$18 >> 2] = $10; //@line 18168
   sp = STACKTOP; //@line 18169
   return;
  }
  HEAP32[___async_retval >> 2] = $15; //@line 18173
  ___async_unwind = 0; //@line 18174
  HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 18175
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 18176
  HEAP32[$16 >> 2] = $8; //@line 18177
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 18178
  HEAP32[$17 >> 2] = $4; //@line 18179
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 18180
  HEAP32[$18 >> 2] = $10; //@line 18181
  sp = STACKTOP; //@line 18182
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 18185
  _mbedtls_cipher_free($4); //@line 18186
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 18189
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 18190
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 18191
   sp = STACKTOP; //@line 18192
   return;
  }
  ___async_unwind = 0; //@line 18195
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 18196
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 18197
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 18198
  sp = STACKTOP; //@line 18199
  return;
 }
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_117($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26845
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26847
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26851
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26853
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26855
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26857
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 26860
  $13 = _mbedtls_cipher_cmac_update($2, $4, $6) | 0; //@line 26861
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 485; //@line 26864
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 26865
   HEAP32[$14 >> 2] = $8; //@line 26866
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 26867
   HEAP32[$15 >> 2] = $2; //@line 26868
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 26869
   HEAP32[$16 >> 2] = $10; //@line 26870
   sp = STACKTOP; //@line 26871
   return;
  }
  HEAP32[___async_retval >> 2] = $13; //@line 26875
  ___async_unwind = 0; //@line 26876
  HEAP32[$ReallocAsyncCtx3 >> 2] = 485; //@line 26877
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 26878
  HEAP32[$14 >> 2] = $8; //@line 26879
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 26880
  HEAP32[$15 >> 2] = $2; //@line 26881
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 26882
  HEAP32[$16 >> 2] = $10; //@line 26883
  sp = STACKTOP; //@line 26884
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 26887
  _mbedtls_cipher_free($2); //@line 26888
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 487; //@line 26891
   $18 = $ReallocAsyncCtx6 + 4 | 0; //@line 26892
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 26893
   sp = STACKTOP; //@line 26894
   return;
  }
  ___async_unwind = 0; //@line 26897
  HEAP32[$ReallocAsyncCtx6 >> 2] = 487; //@line 26898
  $18 = $ReallocAsyncCtx6 + 4 | 0; //@line 26899
  HEAP32[$18 >> 2] = $AsyncRetVal; //@line 26900
  sp = STACKTOP; //@line 26901
  return;
 }
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $40 = 0, label = 0;
 $15 = $8 & 1; //@line 129
 $16 = $10 & 1; //@line 130
 $17 = $11 & 1; //@line 131
 $18 = $13 & 1; //@line 132
 $19 = $14 & 1; //@line 133
 HEAP8[$0 + 689 >> 0] = $1; //@line 136
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 140
   HEAP32[$0 + 712 >> 2] = $3; //@line 142
   HEAP32[$0 + 708 >> 2] = $5; //@line 144
   HEAP8[$0 + 718 >> 0] = $15; //@line 146
   HEAP8[$0 + 719 >> 0] = $9; //@line 148
   HEAP8[$0 + 720 >> 0] = $16; //@line 150
   HEAP8[$0 + 721 >> 0] = $18; //@line 152
   HEAP8[$0 + 722 >> 0] = $19; //@line 154
   HEAP16[$0 + 716 >> 1] = $6; //@line 156
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 165
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $40 = $2 + 7 | 0; //@line 175
   HEAP32[$0 + 752 >> 2] = $40; //@line 177
   HEAP32[$0 + 756 >> 2] = $3; //@line 179
   HEAP8[$0 + 761 >> 0] = $4; //@line 181
   HEAP16[$0 + 762 >> 1] = $6; //@line 183
   HEAP8[$0 + 764 >> 0] = $15; //@line 185
   HEAP8[$0 + 765 >> 0] = $9; //@line 187
   HEAP8[$0 + 766 >> 0] = $16; //@line 189
   HEAP8[$0 + 767 >> 0] = $17; //@line 191
   HEAP8[$0 + 768 >> 0] = $12; //@line 193
   HEAP8[$0 + 769 >> 0] = $18; //@line 195
   HEAP8[$0 + 770 >> 0] = $19; //@line 197
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 199
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 207
   } else {
    if (($40 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 213
    } else {
     $$sink = 0; //@line 215
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 219
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 222
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_245($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18949
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18951
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18953
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18955
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18957
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18959
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18961
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18963
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18965
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18967
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18969
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18971
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18973
 $25 = $4 + 1088 | 0; //@line 18974
 HEAP32[$25 >> 2] = 0; //@line 18975
 HEAP32[$25 + 4 >> 2] = 0; //@line 18975
 HEAP32[$25 + 8 >> 2] = 0; //@line 18975
 HEAP32[$25 + 12 >> 2] = 0; //@line 18975
 HEAP8[$4 + 1104 >> 0] = 1; //@line 18977
 HEAP32[$2 >> 2] = 620; //@line 18978
 $27 = $4 + 1112 | 0; //@line 18979
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 18980
 __ZN4mbed10TimerEventC2Ev($27); //@line 18981
 if (!___async) {
  ___async_unwind = 0; //@line 18984
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 18986
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $27; //@line 18988
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 18990
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 18992
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 18994
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 18996
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 18998
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 19000
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 19002
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 19004
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 19006
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 19008
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 19010
 sp = STACKTOP; //@line 19011
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_244($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18879
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18881
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18883
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18885
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18887
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18889
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18891
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18893
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18895
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18897
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18899
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18901
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18903
 $25 = $4 + 1152 | 0; //@line 18904
 HEAP32[$25 >> 2] = 0; //@line 18905
 HEAP32[$25 + 4 >> 2] = 0; //@line 18905
 HEAP32[$25 + 8 >> 2] = 0; //@line 18905
 HEAP32[$25 + 12 >> 2] = 0; //@line 18905
 HEAP8[$4 + 1168 >> 0] = 1; //@line 18907
 HEAP32[$2 >> 2] = 620; //@line 18908
 $27 = $4 + 1176 | 0; //@line 18909
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 18910
 __ZN4mbed10TimerEventC2Ev($27); //@line 18911
 if (!___async) {
  ___async_unwind = 0; //@line 18914
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 96; //@line 18916
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 18918
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 18920
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 18922
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 18924
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 18926
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 18928
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 18930
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 18932
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 18934
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 18936
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 18938
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 18940
 sp = STACKTOP; //@line 18941
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_363($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27802
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27804
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 27806
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 27811
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27812
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 27813
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 27816
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 27817
   HEAP32[$9 >> 2] = $2; //@line 27818
   sp = STACKTOP; //@line 27819
   return;
  }
  ___async_unwind = 0; //@line 27822
  HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 27823
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 27824
  HEAP32[$9 >> 2] = $2; //@line 27825
  sp = STACKTOP; //@line 27826
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 27830
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 27835
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27836
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 27837
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 27840
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 27841
   HEAP32[$16 >> 2] = $2; //@line 27842
   sp = STACKTOP; //@line 27843
   return;
  }
  ___async_unwind = 0; //@line 27846
  HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 27847
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 27848
  HEAP32[$16 >> 2] = $2; //@line 27849
  sp = STACKTOP; //@line 27850
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 27854
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 27860
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27861
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 27862
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 27865
  sp = STACKTOP; //@line 27866
  return;
 }
 ___async_unwind = 0; //@line 27869
 HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 27870
 sp = STACKTOP; //@line 27871
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_243($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18809
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18811
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18813
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18815
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18817
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18819
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18821
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18823
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18825
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18827
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18829
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18831
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18833
 $25 = $4 + 1216 | 0; //@line 18834
 HEAP32[$25 >> 2] = 0; //@line 18835
 HEAP32[$25 + 4 >> 2] = 0; //@line 18835
 HEAP32[$25 + 8 >> 2] = 0; //@line 18835
 HEAP32[$25 + 12 >> 2] = 0; //@line 18835
 HEAP8[$4 + 1232 >> 0] = 1; //@line 18837
 HEAP32[$2 >> 2] = 620; //@line 18838
 $27 = $4 + 1240 | 0; //@line 18839
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 18840
 __ZN4mbed10TimerEventC2Ev($27); //@line 18841
 if (!___async) {
  ___async_unwind = 0; //@line 18844
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 97; //@line 18846
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 18848
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 18850
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 18852
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 18854
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 18856
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 18858
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 18860
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 18862
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 18864
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 18866
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 18868
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 18870
 sp = STACKTOP; //@line 18871
 return;
}
function __ZN7LoRaMac24get_max_possible_tx_sizeEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$09 = 0, $$pre = 0, $$pre11 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $or$cond$i = 0, sp = 0;
 sp = STACKTOP; //@line 14723
 $2 = $0 + 476 | 0; //@line 14724
 $4 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($2) | 0) & 255; //@line 14726
 $7 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($2) | 0) & 255) + $4 | 0; //@line 14729
 $$pre = $0 + 4 | 0; //@line 14733
 $$pre11 = $0 + 1877 | 0; //@line 14734
 do {
  if (HEAP8[$0 + 1936 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14739
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($$pre, 0, $$pre11, $0 + 1876 | 0, $0 + 1768 | 0) | 0; //@line 14740
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 434; //@line 14743
    HEAP32[$AsyncCtx + 4 >> 2] = $$pre11; //@line 14745
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 14747
    HEAP32[$AsyncCtx + 12 >> 2] = $$pre; //@line 14749
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 14751
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 14753
    HEAP8[$AsyncCtx + 24 >> 0] = $1; //@line 14755
    sp = STACKTOP; //@line 14756
    return 0; //@line 14757
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14759
    break;
   }
  }
 } while (0);
 $20 = $0 + 1173 | 0; //@line 14765
 $23 = __ZN7LoRaPHY15get_max_payloadEhb($$pre, HEAP8[$$pre11 >> 0] | 0, (HEAP8[$20 >> 0] | 0) != 0) | 0; //@line 14768
 $24 = $23 & 255; //@line 14769
 $25 = $7 & 255; //@line 14770
 if ($25 >>> 0 > $24 >>> 0) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($2); //@line 14773
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($2); //@line 14774
  $$0 = 0; //@line 14775
  $$09 = $23; //@line 14775
 } else {
  $$0 = $25; //@line 14779
  $$09 = $24 - $7 & 255; //@line 14779
 }
 $34 = $$0 + ($1 & 255) | 0; //@line 14786
 $or$cond$i = $34 >>> 0 < 256 & $34 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($$pre, HEAP8[$$pre11 >> 0] | 0, (HEAP8[$20 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 14790
 return ($or$cond$i ? $23 : $$09) | 0; //@line 14792
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_63($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $33 = 0, $4 = 0, $41 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22659
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22661
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22663
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 22665
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22667
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22669
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22671
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22673
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22675
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22677
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22679
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22681
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22683
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0) {
   HEAP32[$8 + 2076 >> 2] = 4; //@line 22691
   HEAP8[$8 + 2080 >> 0] = 1; //@line 22693
   __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 22694
  }
 } else {
  HEAP32[$4 >> 2] = 1; //@line 22697
 }
 if ($6 << 24 >> 24 == 7) {
  $31 = $8 + 1442 | 0; //@line 22701
  $33 = HEAPU8[$10 >> 0] | 0; //@line 22703
  _memcpy($31 | 0, $12 + $33 | 0, $14 | 0) | 0; //@line 22705
  HEAP32[$8 + 2016 >> 2] = 3; //@line 22707
  HEAP32[$4 >> 2] = 0; //@line 22708
  HEAP32[$16 >> 2] = $31; //@line 22709
  HEAP16[$18 >> 1] = $14 - $33; //@line 22712
 }
 if (!(HEAP8[$20 >> 0] | 0)) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 22720
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($24, $8 + 1856 | 0); //@line 22721
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 389; //@line 22724
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 22725
  HEAP32[$41 >> 2] = $22; //@line 22726
  sp = STACKTOP; //@line 22727
  return;
 }
 ___async_unwind = 0; //@line 22730
 HEAP32[$ReallocAsyncCtx4 >> 2] = 389; //@line 22731
 $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 22732
 HEAP32[$41 >> 2] = $22; //@line 22733
 sp = STACKTOP; //@line 22734
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22211
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22217
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22219
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 22221
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22222
 __ZN4mbed6Ticker6detachEv($6); //@line 22223
 $10 = HEAP32[$9 >> 2] | 0; //@line 22224
 if (!$10) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22227
  _mbed_assert_internal(14946, 14951, 528); //@line 22228
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 109; //@line 22231
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 22232
   HEAP32[$12 >> 2] = $9; //@line 22233
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 22234
   HEAP32[$13 >> 2] = $8; //@line 22235
   sp = STACKTOP; //@line 22236
   return;
  }
  ___async_unwind = 0; //@line 22239
  HEAP32[$ReallocAsyncCtx4 >> 2] = 109; //@line 22240
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 22241
  HEAP32[$12 >> 2] = $9; //@line 22242
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 22243
  HEAP32[$13 >> 2] = $8; //@line 22244
  sp = STACKTOP; //@line 22245
  return;
 } else {
  $14 = HEAP32[$10 >> 2] | 0; //@line 22248
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 22249
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 22250
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 110; //@line 22253
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 22254
   HEAP32[$15 >> 2] = $9; //@line 22255
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 22256
   HEAP32[$16 >> 2] = $8; //@line 22257
   sp = STACKTOP; //@line 22258
   return;
  }
  ___async_unwind = 0; //@line 22261
  HEAP32[$ReallocAsyncCtx2 >> 2] = 110; //@line 22262
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 22263
  HEAP32[$15 >> 2] = $9; //@line 22264
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 22265
  HEAP32[$16 >> 2] = $8; //@line 22266
  sp = STACKTOP; //@line 22267
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_224($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17739
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17743
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17745
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17747
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17749
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17751
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17753
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17755
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 17758
 $18 = $4 + 16 | 0; //@line 17759
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 17760
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 17760
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 17760
 _equeue_event_dtor($4, 287); //@line 17761
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 17762
 $19 = _equeue_post($8, 288, $4) | 0; //@line 17763
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 17766
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 17767
  HEAP32[$20 >> 2] = $10; //@line 17768
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 17769
  HEAP32[$21 >> 2] = $12; //@line 17770
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 17771
  HEAP32[$22 >> 2] = $14; //@line 17772
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 17773
  HEAP32[$23 >> 2] = $16; //@line 17774
  sp = STACKTOP; //@line 17775
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 17779
 ___async_unwind = 0; //@line 17780
 HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 17781
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 17782
 HEAP32[$20 >> 2] = $10; //@line 17783
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 17784
 HEAP32[$21 >> 2] = $12; //@line 17785
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 17786
 HEAP32[$22 >> 2] = $14; //@line 17787
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 17788
 HEAP32[$23 >> 2] = $16; //@line 17789
 sp = STACKTOP; //@line 17790
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_136($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27981
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27983
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27985
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27987
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27989
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27991
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27993
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27995
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27997
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2020 >> 2] = 1; //@line 28003
  return;
 }
 if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0) {
  HEAP32[$4 + 2076 >> 2] = 4; //@line 28009
  HEAP8[$4 + 2080 >> 0] = 1; //@line 28011
  __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 28012
 }
 $26 = $10 & 255; //@line 28017
 $27 = $4 + 1442 | 0; //@line 28018
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 28019
 $28 = __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($4 + 756 | 0, $6 + $8 | 0, $26, $12, 128, $14, 1, $16, $27) | 0; //@line 28020
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 384; //@line 28023
  $29 = $ReallocAsyncCtx + 4 | 0; //@line 28024
  HEAP32[$29 >> 2] = $4; //@line 28025
  $30 = $ReallocAsyncCtx + 8 | 0; //@line 28026
  HEAP32[$30 >> 2] = $27; //@line 28027
  $31 = $ReallocAsyncCtx + 12 | 0; //@line 28028
  HEAP16[$31 >> 1] = $26; //@line 28029
  sp = STACKTOP; //@line 28030
  return;
 }
 HEAP32[___async_retval >> 2] = $28; //@line 28034
 ___async_unwind = 0; //@line 28035
 HEAP32[$ReallocAsyncCtx >> 2] = 384; //@line 28036
 $29 = $ReallocAsyncCtx + 4 | 0; //@line 28037
 HEAP32[$29 >> 2] = $4; //@line 28038
 $30 = $ReallocAsyncCtx + 8 | 0; //@line 28039
 HEAP32[$30 >> 2] = $27; //@line 28040
 $31 = $ReallocAsyncCtx + 12 | 0; //@line 28041
 HEAP16[$31 >> 1] = $26; //@line 28042
 sp = STACKTOP; //@line 28043
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_103($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $21 = 0, $22 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25457
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25459
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25463
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25465
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25467
 if ((__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2) {
  label = 6; //@line 25471
 } else {
  if (!(HEAP8[$6 + 15 >> 0] | 0)) {
   label = 6; //@line 25477
  }
 }
 if ((label | 0) == 6) {
  if ((__ZNK7LoRaMac16get_device_classEv($2) | 0) != 2) {
   return;
  }
  if ((HEAP32[$6 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $21 = $10 + 2512 | 0; //@line 25493
 $22 = HEAP32[$21 >> 2] | 0; //@line 25494
 if (!$22) {
  return;
 }
 $26 = HEAP32[$10 + 3168 >> 2] | 0; //@line 25501
 $28 = HEAP32[$22 + 4 >> 2] | 0; //@line 25503
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 25504
 FUNCTION_TABLE_vii[$28 & 15]($8, $10 + 2500 | 0); //@line 25505
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 25508
  $29 = $ReallocAsyncCtx5 + 4 | 0; //@line 25509
  HEAP32[$29 >> 2] = $21; //@line 25510
  $30 = $ReallocAsyncCtx5 + 8 | 0; //@line 25511
  HEAP32[$30 >> 2] = $8; //@line 25512
  $31 = $ReallocAsyncCtx5 + 12 | 0; //@line 25513
  HEAP32[$31 >> 2] = $26; //@line 25514
  $32 = $ReallocAsyncCtx5 + 16 | 0; //@line 25515
  HEAP32[$32 >> 2] = $8; //@line 25516
  sp = STACKTOP; //@line 25517
  return;
 }
 ___async_unwind = 0; //@line 25520
 HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 25521
 $29 = $ReallocAsyncCtx5 + 4 | 0; //@line 25522
 HEAP32[$29 >> 2] = $21; //@line 25523
 $30 = $ReallocAsyncCtx5 + 8 | 0; //@line 25524
 HEAP32[$30 >> 2] = $8; //@line 25525
 $31 = $ReallocAsyncCtx5 + 12 | 0; //@line 25526
 HEAP32[$31 >> 2] = $26; //@line 25527
 $32 = $ReallocAsyncCtx5 + 16 | 0; //@line 25528
 HEAP32[$32 >> 2] = $8; //@line 25529
 sp = STACKTOP; //@line 25530
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5941
 STACKTOP = STACKTOP + 16 | 0; //@line 5942
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5942
 $1 = sp; //@line 5943
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 5945
 $4 = $1 + 12 | 0; //@line 5946
 HEAP32[$1 >> 2] = 12; //@line 5947
 HEAP32[$1 + 4 >> 2] = 0; //@line 5949
 HEAP32[$1 + 8 >> 2] = $0; //@line 5951
 HEAP32[$4 >> 2] = 848; //@line 5952
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5953
 $5 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($3, $1, 1) | 0; //@line 5954
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 200; //@line 5957
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 5959
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 5961
  sp = STACKTOP; //@line 5962
  STACKTOP = sp; //@line 5963
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5965
 $8 = HEAP32[$4 >> 2] | 0; //@line 5966
 do {
  if ($8 | 0) {
   $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 5971
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5972
   FUNCTION_TABLE_vi[$11 & 1023]($1); //@line 5973
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 201; //@line 5976
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5978
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5980
    sp = STACKTOP; //@line 5981
    STACKTOP = sp; //@line 5982
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5984
    break;
   }
  }
 } while (0);
 if ($5 | 0) {
  STACKTOP = sp; //@line 5991
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5993
 _mbed_assert_internal(12080, 12089, 547); //@line 5994
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 202; //@line 5997
  sp = STACKTOP; //@line 5998
  STACKTOP = sp; //@line 5999
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6001
 STACKTOP = sp; //@line 6002
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5837
 STACKTOP = STACKTOP + 16 | 0; //@line 5838
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5838
 $1 = sp; //@line 5839
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 5841
 $4 = $1 + 12 | 0; //@line 5842
 HEAP32[$1 >> 2] = 12; //@line 5843
 HEAP32[$1 + 4 >> 2] = 0; //@line 5845
 HEAP32[$1 + 8 >> 2] = $0; //@line 5847
 HEAP32[$4 >> 2] = 848; //@line 5848
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5849
 $5 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($3, $1, 0) | 0; //@line 5850
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 194; //@line 5853
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 5855
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 5857
  sp = STACKTOP; //@line 5858
  STACKTOP = sp; //@line 5859
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5861
 $8 = HEAP32[$4 >> 2] | 0; //@line 5862
 do {
  if ($8 | 0) {
   $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 5867
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5868
   FUNCTION_TABLE_vi[$11 & 1023]($1); //@line 5869
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 195; //@line 5872
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5874
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5876
    sp = STACKTOP; //@line 5877
    STACKTOP = sp; //@line 5878
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5880
    break;
   }
  }
 } while (0);
 if ($5 | 0) {
  STACKTOP = sp; //@line 5887
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5889
 _mbed_assert_internal(12080, 12089, 532); //@line 5890
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 196; //@line 5893
  sp = STACKTOP; //@line 5894
  STACKTOP = sp; //@line 5895
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5897
 STACKTOP = sp; //@line 5898
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $28 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16036
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $28 = -1002; //@line 16040
  return $28 | 0; //@line 16041
 }
 $5 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16044
 $6 = HEAP8[$1 >> 0] | 0; //@line 16045
 if (($6 & 255) > ($5 & 255)) {
  $28 = -1003; //@line 16048
  return $28 | 0; //@line 16049
 }
 if (!($6 << 24 >> 24)) {
  $28 = 0; //@line 16053
  return $28 | 0; //@line 16054
 }
 $9 = $1 + 4 | 0; //@line 16056
 $$016 = 0; //@line 16057
 while (1) {
  $13 = $$016 & 255; //@line 16059
  $14 = HEAP32[$0 >> 2] | 0; //@line 16060
  $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 16063
  $18 = HEAP32[$9 >> 2] | 0; //@line 16064
  $21 = HEAP8[$18 + ($13 << 4) >> 0] | 0; //@line 16067
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 16068
  $22 = FUNCTION_TABLE_iiii[$17 & 31]($14, $18 + ($13 << 4) + 4 | 0, $21) | 0; //@line 16069
  if (___async) {
   label = 7; //@line 16072
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16075
  $12 = $$016 + 1 << 24 >> 24; //@line 16077
  if ($22 | 0) {
   $28 = $22; //@line 16079
   label = 9; //@line 16080
   break;
  }
  if (($12 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$016 = $12; //@line 16086
  } else {
   $28 = 0; //@line 16088
   label = 9; //@line 16089
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 469; //@line 16094
  HEAP8[$AsyncCtx + 4 >> 0] = $$016; //@line 16096
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 16098
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 16100
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 16102
  sp = STACKTOP; //@line 16103
  return 0; //@line 16104
 } else if ((label | 0) == 9) {
  return $28 | 0; //@line 16107
 }
 return 0; //@line 16109
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 11864
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 11870
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 11876
   } else {
    $7 = $1 & 255; //@line 11878
    $$03039 = $0; //@line 11879
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 11881
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 11886
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 11889
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 11894
      break;
     } else {
      $$03039 = $13; //@line 11897
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 11901
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 11902
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 11910
     $25 = $18; //@line 11910
     while (1) {
      $24 = $25 ^ $17; //@line 11912
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 11919
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 11922
      $25 = HEAP32[$31 >> 2] | 0; //@line 11923
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 11932
       break;
      } else {
       $$02936 = $31; //@line 11930
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 11937
    }
   } while (0);
   $38 = $1 & 255; //@line 11940
   $$1 = $$029$lcssa; //@line 11941
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 11943
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 11949
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 11952
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 11957
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $31 = 0, label = 0;
 $14 = $8 & 1; //@line 250
 $15 = $9 & 1; //@line 251
 $16 = $10 & 1; //@line 252
 $17 = $12 & 1; //@line 253
 HEAP8[$0 + 689 >> 0] = $1; //@line 256
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 260
   HEAP32[$0 + 700 >> 2] = $3; //@line 262
   HEAP32[$0 + 704 >> 2] = $4; //@line 264
   HEAP32[$0 + 712 >> 2] = $5; //@line 266
   HEAP16[$0 + 716 >> 1] = $7; //@line 268
   HEAP8[$0 + 718 >> 0] = $14; //@line 270
   HEAP8[$0 + 720 >> 0] = $15; //@line 272
   HEAP8[$0 + 721 >> 0] = $17; //@line 274
   HEAP32[$0 + 724 >> 2] = $13; //@line 276
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 282
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $31 = $4 + 7 | 0; //@line 288
   HEAP32[$0 + 752 >> 2] = $31; //@line 290
   HEAP32[$0 + 756 >> 2] = $5; //@line 292
   HEAP8[$0 + 761 >> 0] = $6; //@line 294
   HEAP16[$0 + 762 >> 1] = $7; //@line 296
   HEAP8[$0 + 764 >> 0] = $14; //@line 298
   HEAP8[$0 + 767 >> 0] = $16; //@line 300
   HEAP8[$0 + 768 >> 0] = $11; //@line 302
   HEAP8[$0 + 766 >> 0] = $15; //@line 304
   HEAP8[$0 + 769 >> 0] = $17; //@line 306
   HEAP32[$0 + 772 >> 2] = $13; //@line 308
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 310
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 318
   } else {
    if (($31 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 324
    } else {
     $$sink = 0; //@line 326
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 330
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 333
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 16405
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 16408
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 16409
  $$sink = $26 & 1; //@line 16410
  HEAP8[$0 >> 0] = $$sink; //@line 16411
  $27 = $0 + 3 | 0; //@line 16412
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 16413
  return;
 } else {
  $$01315 = 0; //@line 16416
  $$016 = 0; //@line 16416
  $5 = 0; //@line 16416
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 16420
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 16423
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 16427
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 16434
    $$1 = $$016 + 2 << 24 >> 24; //@line 16435
    $$114 = $7; //@line 16435
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 16442
    $$1 = $$016 + 1 << 24 >> 24; //@line 16443
    $$114 = $$01315; //@line 16443
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 16449
    $$114 = $5 + 2 & 255; //@line 16449
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 16454
    $$114 = $$01315 + 1 << 24 >> 24; //@line 16454
    break;
   }
  default:
   {
    $$1 = $$016; //@line 16458
    $$114 = $$01315; //@line 16458
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 16461
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 16465
   $$016 = $$1; //@line 16465
   $5 = $23 & 255; //@line 16465
  } else {
   $$0$lcssa = $$1; //@line 16467
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 16471
 $$sink = $26 & 1; //@line 16472
 HEAP8[$0 >> 0] = $$sink; //@line 16473
 $27 = $0 + 3 | 0; //@line 16474
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 16475
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 11606
 $4 = HEAP32[$3 >> 2] | 0; //@line 11607
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 11614
   label = 5; //@line 11615
  } else {
   $$1 = 0; //@line 11617
  }
 } else {
  $12 = $4; //@line 11621
  label = 5; //@line 11622
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 11626
   $10 = HEAP32[$9 >> 2] | 0; //@line 11627
   $14 = $10; //@line 11630
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 11635
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 11643
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 11647
       $$141 = $0; //@line 11647
       $$143 = $1; //@line 11647
       $31 = $14; //@line 11647
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 11650
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 11657
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 11662
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 11665
      break L5;
     }
     $$139 = $$038; //@line 11671
     $$141 = $0 + $$038 | 0; //@line 11671
     $$143 = $1 - $$038 | 0; //@line 11671
     $31 = HEAP32[$9 >> 2] | 0; //@line 11671
    } else {
     $$139 = 0; //@line 11673
     $$141 = $0; //@line 11673
     $$143 = $1; //@line 11673
     $31 = $14; //@line 11673
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 11676
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 11679
   $$1 = $$139 + $$143 | 0; //@line 11681
  }
 } while (0);
 return $$1 | 0; //@line 11684
}
function __ZN7LoRaMac13clear_tx_pipeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14462
 STACKTOP = STACKTOP + 16 | 0; //@line 14463
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14463
 $vararg_buffer = sp; //@line 14464
 if ((__ZN6events10EventQueue9time_leftEi(HEAP32[$0 + 1992 >> 2] | 0, HEAP32[$0 + 1812 >> 2] | 0) | 0) <= 0) {
  $$0 = -1e3; //@line 14472
  STACKTOP = sp; //@line 14473
  return $$0 | 0; //@line 14473
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14476
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1796 | 0); //@line 14477
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 431; //@line 14480
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 14482
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14484
  HEAP32[$AsyncCtx3 + 12 >> 2] = $vararg_buffer; //@line 14486
  HEAP32[$AsyncCtx3 + 16 >> 2] = $vararg_buffer; //@line 14488
  sp = STACKTOP; //@line 14489
  STACKTOP = sp; //@line 14490
  return 0; //@line 14490
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14492
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14494
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 14495
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 432; //@line 14498
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14500
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14502
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 14504
  sp = STACKTOP; //@line 14505
  STACKTOP = sp; //@line 14506
  return 0; //@line 14506
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14508
 HEAP8[$0 + 2104 >> 0] = 0; //@line 14511
 _memset($0 + 1185 | 0, 0, 257) | 0; //@line 14513
 _memset($0 + 2115 | 0, 0, 259) | 0; //@line 14514
 _mbed_tracef(16, 12866, 13298, $vararg_buffer); //@line 14515
 $$0 = 0; //@line 14516
 STACKTOP = sp; //@line 14517
 return $$0 | 0; //@line 14517
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_41($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21443
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21445
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21449
 $8 = $0 + 16 | 0; //@line 21451
 $10 = HEAP32[$8 >> 2] | 0; //@line 21453
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 21456
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 21458
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 21460
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 21462
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 21463
 $18 = HEAP32[$2 >> 2] | 0; //@line 21464
 if ($18 | 0) {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 21468
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 21469
  FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 21470
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 21473
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 21474
   HEAP32[$22 >> 2] = $15; //@line 21475
   sp = STACKTOP; //@line 21476
   return;
  }
  ___async_unwind = 0; //@line 21479
  HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 21480
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 21481
  HEAP32[$22 >> 2] = $15; //@line 21482
  sp = STACKTOP; //@line 21483
  return;
 }
 $24 = HEAP32[$15 + 788 >> 2] | 0; //@line 21487
 if (!$24) {
  return;
 }
 $27 = HEAP32[$24 + 60 >> 2] | 0; //@line 21493
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 >> 2] | 0; //@line 21499
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 21500
 FUNCTION_TABLE_vi[$30 & 1023]($24 + 48 | 0); //@line 21501
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 21504
  sp = STACKTOP; //@line 21505
  return;
 }
 ___async_unwind = 0; //@line 21508
 HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 21509
 sp = STACKTOP; //@line 21510
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_46($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21639
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21641
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21643
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21645
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21647
 HEAP8[$2 + 2548 >> 0] = 0; //@line 21649
 HEAP32[$4 >> 2] = 11; //@line 21650
 HEAP32[$6 >> 2] = -1011; //@line 21651
 $10 = $2 + 2904 | 0; //@line 21652
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -5; //@line 21655
 $13 = $2 + 2512 | 0; //@line 21656
 $14 = HEAP32[$13 >> 2] | 0; //@line 21657
 if (!$14) {
  return;
 }
 $18 = HEAP32[$2 + 3168 >> 2] | 0; //@line 21664
 $20 = HEAP32[$14 + 4 >> 2] | 0; //@line 21666
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 21667
 FUNCTION_TABLE_vii[$20 & 15]($8, $2 + 2500 | 0); //@line 21668
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 334; //@line 21671
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 21672
  HEAP32[$21 >> 2] = $13; //@line 21673
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 21674
  HEAP32[$22 >> 2] = $8; //@line 21675
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 21676
  HEAP32[$23 >> 2] = $18; //@line 21677
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 21678
  HEAP32[$24 >> 2] = $8; //@line 21679
  sp = STACKTOP; //@line 21680
  return;
 }
 ___async_unwind = 0; //@line 21683
 HEAP32[$ReallocAsyncCtx >> 2] = 334; //@line 21684
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 21685
 HEAP32[$21 >> 2] = $13; //@line 21686
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 21687
 HEAP32[$22 >> 2] = $8; //@line 21688
 $23 = $ReallocAsyncCtx + 12 | 0; //@line 21689
 HEAP32[$23 >> 2] = $18; //@line 21690
 $24 = $ReallocAsyncCtx + 16 | 0; //@line 21691
 HEAP32[$24 >> 2] = $8; //@line 21692
 sp = STACKTOP; //@line 21693
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_59($0) {
 $0 = $0 | 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22346
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22348
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22350
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22352
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22354
 if (!(HEAP8[$2 + 1175 >> 0] | 0)) {
  HEAP32[$2 + 2056 >> 2] = 0; //@line 22360
  HEAP32[$2 + 2092 >> 2] = 4; //@line 22362
  $22 = HEAP8[$2 + 1182 >> 0] | 0; //@line 22364
  HEAP8[$2 + 1183 >> 0] = $22; //@line 22366
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $22, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $8); //@line 22371
  HEAP32[$2 + 1780 >> 2] = $8; //@line 22373
  return;
 }
 $14 = HEAP32[$2 + 1772 >> 2] | 0; //@line 22378
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 22379
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($4, $2 + 1816 | 0, $14); //@line 22380
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 369; //@line 22383
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 22384
  HEAP32[$15 >> 2] = $6; //@line 22385
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 22386
  HEAP32[$16 >> 2] = $2; //@line 22387
  $17 = $ReallocAsyncCtx3 + 12 | 0; //@line 22388
  HEAP32[$17 >> 2] = $4; //@line 22389
  $18 = $ReallocAsyncCtx3 + 16 | 0; //@line 22390
  HEAP32[$18 >> 2] = $8; //@line 22391
  sp = STACKTOP; //@line 22392
  return;
 }
 ___async_unwind = 0; //@line 22395
 HEAP32[$ReallocAsyncCtx3 >> 2] = 369; //@line 22396
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 22397
 HEAP32[$15 >> 2] = $6; //@line 22398
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 22399
 HEAP32[$16 >> 2] = $2; //@line 22400
 $17 = $ReallocAsyncCtx3 + 12 | 0; //@line 22401
 HEAP32[$17 >> 2] = $4; //@line 22402
 $18 = $ReallocAsyncCtx3 + 16 | 0; //@line 22403
 HEAP32[$18 >> 2] = $8; //@line 22404
 sp = STACKTOP; //@line 22405
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_58($0) {
 $0 = $0 | 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22280
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22282
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22284
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22286
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22288
 if (!(HEAP8[$2 + 1175 >> 0] | 0)) {
  HEAP32[$2 + 2056 >> 2] = 0; //@line 22294
  HEAP32[$2 + 2092 >> 2] = 4; //@line 22296
  $22 = HEAP8[$2 + 1182 >> 0] | 0; //@line 22298
  HEAP8[$2 + 1183 >> 0] = $22; //@line 22300
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $22, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $8); //@line 22305
  HEAP32[$2 + 1780 >> 2] = $8; //@line 22307
  return;
 }
 $14 = HEAP32[$2 + 1772 >> 2] | 0; //@line 22312
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 22313
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($4, $2 + 1816 | 0, $14); //@line 22314
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 369; //@line 22317
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 22318
  HEAP32[$15 >> 2] = $6; //@line 22319
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 22320
  HEAP32[$16 >> 2] = $2; //@line 22321
  $17 = $ReallocAsyncCtx3 + 12 | 0; //@line 22322
  HEAP32[$17 >> 2] = $4; //@line 22323
  $18 = $ReallocAsyncCtx3 + 16 | 0; //@line 22324
  HEAP32[$18 >> 2] = $8; //@line 22325
  sp = STACKTOP; //@line 22326
  return;
 }
 ___async_unwind = 0; //@line 22329
 HEAP32[$ReallocAsyncCtx3 >> 2] = 369; //@line 22330
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 22331
 HEAP32[$15 >> 2] = $6; //@line 22332
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 22333
 HEAP32[$16 >> 2] = $2; //@line 22334
 $17 = $ReallocAsyncCtx3 + 12 | 0; //@line 22335
 HEAP32[$17 >> 2] = $4; //@line 22336
 $18 = $ReallocAsyncCtx3 + 16 | 0; //@line 22337
 HEAP32[$18 >> 2] = $8; //@line 22338
 sp = STACKTOP; //@line 22339
 return;
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2998
 if (!$0) {
  $$0 = -24832; //@line 3001
  return $$0 | 0; //@line 3002
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3004
 if (!$5) {
  $$0 = -24832; //@line 3007
  return $$0 | 0; //@line 3008
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 3019
   return $$0 | 0; //@line 3020
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 3024
 HEAP32[$0 + 8 >> 2] = $3; //@line 3026
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 3042
    return $$0 | 0; //@line 3043
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 3048
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 3050
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3051
   $33 = FUNCTION_TABLE_iiii[$30 & 31]($32, $1, $2) | 0; //@line 3052
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 567; //@line 3055
    sp = STACKTOP; //@line 3056
    return 0; //@line 3057
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3059
   $$0 = $33; //@line 3060
   return $$0 | 0; //@line 3061
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 3067
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 3069
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3070
 $25 = FUNCTION_TABLE_iiii[$22 & 31]($24, $1, $2) | 0; //@line 3071
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 566; //@line 3074
  sp = STACKTOP; //@line 3075
  return 0; //@line 3076
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3078
 $$0 = $25; //@line 3079
 return $$0 | 0; //@line 3080
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_52($0) {
 $0 = $0 | 0;
 var $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21936
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21938
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21940
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21942
 if (HEAP8[___async_retval >> 0] & 1) {
  return;
 }
 $8 = $4 + 2512 | 0; //@line 21949
 $9 = HEAP32[$8 >> 2] | 0; //@line 21950
 if (!$9) {
  HEAP32[$6 >> 2] = 2; //@line 21953
  return;
 }
 $13 = HEAP32[$4 + 3168 >> 2] | 0; //@line 21958
 $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 21960
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 21961
 FUNCTION_TABLE_vii[$15 & 15]($2, $4 + 2500 | 0); //@line 21962
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 221; //@line 21965
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 21966
  HEAP32[$16 >> 2] = $8; //@line 21967
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 21968
  HEAP32[$17 >> 2] = $2; //@line 21969
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 21970
  HEAP32[$18 >> 2] = $13; //@line 21971
  $19 = $ReallocAsyncCtx + 16 | 0; //@line 21972
  HEAP32[$19 >> 2] = $2; //@line 21973
  $20 = $ReallocAsyncCtx + 20 | 0; //@line 21974
  HEAP32[$20 >> 2] = $6; //@line 21975
  sp = STACKTOP; //@line 21976
  return;
 }
 ___async_unwind = 0; //@line 21979
 HEAP32[$ReallocAsyncCtx >> 2] = 221; //@line 21980
 $16 = $ReallocAsyncCtx + 4 | 0; //@line 21981
 HEAP32[$16 >> 2] = $8; //@line 21982
 $17 = $ReallocAsyncCtx + 8 | 0; //@line 21983
 HEAP32[$17 >> 2] = $2; //@line 21984
 $18 = $ReallocAsyncCtx + 12 | 0; //@line 21985
 HEAP32[$18 >> 2] = $13; //@line 21986
 $19 = $ReallocAsyncCtx + 16 | 0; //@line 21987
 HEAP32[$19 >> 2] = $2; //@line 21988
 $20 = $ReallocAsyncCtx + 20 | 0; //@line 21989
 HEAP32[$20 >> 2] = $6; //@line 21990
 sp = STACKTOP; //@line 21991
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25098
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25100
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25106
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25108
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 25111
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 25114
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 25116
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 25118
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 25120
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 25122
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 25124
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 25126
 $27 = HEAP32[$2 >> 2] | 0; //@line 25127
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 25130
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 25134
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 25135
 FUNCTION_TABLE_vii[$30 & 15]($27, $34); //@line 25136
 if (!___async) {
  ___async_unwind = 0; //@line 25139
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 513; //@line 25141
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 25143
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 25145
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 25147
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 25150
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 25153
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 25155
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 25157
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 25159
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 25161
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 25163
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 25165
 sp = STACKTOP; //@line 25166
 return;
}
function _mbedtls_gcm_setkey__async_cb_147($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 29553
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29555
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29557
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29559
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29561
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29563
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29567
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 29570
 dest = $2; //@line 29571
 stop = dest + 16 | 0; //@line 29571
 do {
  HEAP8[dest >> 0] = 0; //@line 29571
  dest = dest + 1 | 0; //@line 29571
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 29572
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 29573
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 597; //@line 29576
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 29577
  HEAP32[$12 >> 2] = $2; //@line 29578
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 29579
  HEAP32[$13 >> 2] = $2; //@line 29580
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 29581
  HEAP32[$14 >> 2] = $8; //@line 29582
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 29583
  HEAP32[$15 >> 2] = $4; //@line 29584
  sp = STACKTOP; //@line 29585
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 29589
 ___async_unwind = 0; //@line 29590
 HEAP32[$ReallocAsyncCtx >> 2] = 597; //@line 29591
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 29592
 HEAP32[$12 >> 2] = $2; //@line 29593
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 29594
 HEAP32[$13 >> 2] = $2; //@line 29595
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 29596
 HEAP32[$14 >> 2] = $8; //@line 29597
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 29598
 HEAP32[$15 >> 2] = $4; //@line 29599
 sp = STACKTOP; //@line 29600
 return;
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $2 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10805
 STACKTOP = STACKTOP + 16 | 0; //@line 10806
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10806
 $2 = sp; //@line 10807
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10812
  STACKTOP = sp; //@line 10813
  return $$0 | 0; //@line 10813
 }
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  $$0 = -1013; //@line 10818
  STACKTOP = sp; //@line 10819
  return $$0 | 0; //@line 10819
 }
 $8 = $2 + 12 | 0; //@line 10821
 HEAP32[$2 >> 2] = 357; //@line 10822
 HEAP32[$2 + 4 >> 2] = 0; //@line 10824
 HEAP32[$2 + 8 >> 2] = $0; //@line 10826
 HEAP32[$8 >> 2] = 824; //@line 10827
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10828
 __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE($0, $1, $2); //@line 10829
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 358; //@line 10832
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 10834
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 10836
  sp = STACKTOP; //@line 10837
  STACKTOP = sp; //@line 10838
  return 0; //@line 10838
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10840
 $11 = HEAP32[$8 >> 2] | 0; //@line 10841
 if (!$11) {
  $$0 = 0; //@line 10844
  STACKTOP = sp; //@line 10845
  return $$0 | 0; //@line 10845
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 10848
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10849
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 10850
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 359; //@line 10853
  sp = STACKTOP; //@line 10854
  STACKTOP = sp; //@line 10855
  return 0; //@line 10855
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10857
 $$0 = 0; //@line 10858
 STACKTOP = sp; //@line 10859
 return $$0 | 0; //@line 10859
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_10($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $44 = 0, $54 = 0, $58 = 0, $6 = 0, $65 = 0, $66 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18485
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18487
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18489
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18491
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2092 >> 2] = 13; //@line 18497
  return;
 }
 HEAP32[$2 + 1752 >> 2] = (HEAPU8[$2 + 1448 >> 0] | 0) << 16 | ((HEAPU8[$2 + 1447 >> 0] | 0) << 8 | (HEAPU8[$2 + 1446 >> 0] | 0)); //@line 18514
 HEAP32[$2 + 1756 >> 2] = (HEAPU8[$2 + 1452 >> 0] | 0) << 24 | ((HEAPU8[$2 + 1451 >> 0] | 0) << 16 | ((HEAPU8[$2 + 1450 >> 0] | 0) << 8 | (HEAPU8[$2 + 1449 >> 0] | 0))); //@line 18534
 $44 = HEAP8[$2 + 1453 >> 0] | 0; //@line 18536
 HEAP8[$2 + 1909 >> 0] = ($44 & 255) >>> 4 & 7; //@line 18542
 HEAP8[$2 + 1916 >> 0] = $44 & 15; //@line 18545
 $54 = HEAP8[$2 + 1454 >> 0] & 15; //@line 18548
 $58 = $54 << 24 >> 24 == 0 ? 1e3 : ($54 & 255) * 1e3 | 0; //@line 18553
 HEAP32[$2 + 1892 >> 2] = $58; //@line 18554
 HEAP32[$2 + 1896 >> 2] = $58 + 1e3; //@line 18557
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 18562
 __ZN7LoRaPHY13apply_cf_listEPKhh($2 + 4 | 0, $2 + 1455 | 0, $4 + 239 & 255); //@line 18563
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 18566
  $65 = $ReallocAsyncCtx4 + 4 | 0; //@line 18567
  HEAP32[$65 >> 2] = $2; //@line 18568
  $66 = $ReallocAsyncCtx4 + 8 | 0; //@line 18569
  HEAP32[$66 >> 2] = $6; //@line 18570
  sp = STACKTOP; //@line 18571
  return;
 }
 ___async_unwind = 0; //@line 18574
 HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 18575
 $65 = $ReallocAsyncCtx4 + 4 | 0; //@line 18576
 HEAP32[$65 >> 2] = $2; //@line 18577
 $66 = $ReallocAsyncCtx4 + 8 | 0; //@line 18578
 HEAP32[$66 >> 2] = $6; //@line 18579
 sp = STACKTOP; //@line 18580
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_123($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27302
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27306
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27308
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27310
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27312
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27314
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27316
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27318
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27321
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 27324
 _equeue_event_dtor($4, 256); //@line 27325
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27326
 $20 = _equeue_post($8, 257, $4) | 0; //@line 27327
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 27330
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 27331
  HEAP32[$21 >> 2] = $10; //@line 27332
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 27333
  HEAP32[$22 >> 2] = $12; //@line 27334
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 27335
  HEAP32[$23 >> 2] = $14; //@line 27336
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 27337
  HEAP32[$24 >> 2] = $16; //@line 27338
  sp = STACKTOP; //@line 27339
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 27343
 ___async_unwind = 0; //@line 27344
 HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 27345
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 27346
 HEAP32[$21 >> 2] = $10; //@line 27347
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 27348
 HEAP32[$22 >> 2] = $12; //@line 27349
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 27350
 HEAP32[$23 >> 2] = $14; //@line 27351
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 27352
 HEAP32[$24 >> 2] = $16; //@line 27353
 sp = STACKTOP; //@line 27354
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_140($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28338
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28342
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28344
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28346
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28348
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28350
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28352
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28354
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28357
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 28360
 _equeue_event_dtor($4, 313); //@line 28361
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28362
 $20 = _equeue_post($8, 314, $4) | 0; //@line 28363
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 315; //@line 28366
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 28367
  HEAP32[$21 >> 2] = $10; //@line 28368
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 28369
  HEAP32[$22 >> 2] = $12; //@line 28370
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 28371
  HEAP32[$23 >> 2] = $14; //@line 28372
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 28373
  HEAP32[$24 >> 2] = $16; //@line 28374
  sp = STACKTOP; //@line 28375
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 28379
 ___async_unwind = 0; //@line 28380
 HEAP32[$ReallocAsyncCtx6 >> 2] = 315; //@line 28381
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 28382
 HEAP32[$21 >> 2] = $10; //@line 28383
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 28384
 HEAP32[$22 >> 2] = $12; //@line 28385
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 28386
 HEAP32[$23 >> 2] = $14; //@line 28387
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 28388
 HEAP32[$24 >> 2] = $16; //@line 28389
 sp = STACKTOP; //@line 28390
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_186($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14035
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14039
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14041
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14043
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14045
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14047
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14049
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14051
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14054
 HEAP8[$4 + 16 >> 0] = HEAP8[$6 >> 0] | 0; //@line 14057
 _equeue_event_dtor($4, 210); //@line 14058
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 14059
 $20 = _equeue_post($8, 211, $4) | 0; //@line 14060
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 212; //@line 14063
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 14064
  HEAP32[$21 >> 2] = $10; //@line 14065
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 14066
  HEAP32[$22 >> 2] = $12; //@line 14067
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 14068
  HEAP32[$23 >> 2] = $14; //@line 14069
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 14070
  HEAP32[$24 >> 2] = $16; //@line 14071
  sp = STACKTOP; //@line 14072
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 14076
 ___async_unwind = 0; //@line 14077
 HEAP32[$ReallocAsyncCtx6 >> 2] = 212; //@line 14078
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 14079
 HEAP32[$21 >> 2] = $10; //@line 14080
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 14081
 HEAP32[$22 >> 2] = $12; //@line 14082
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 14083
 HEAP32[$23 >> 2] = $14; //@line 14084
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 14085
 HEAP32[$24 >> 2] = $16; //@line 14086
 sp = STACKTOP; //@line 14087
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_8($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18328
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18330
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18332
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18334
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 18336
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18338
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18340
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18342
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18344
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 18347
  $17 = _mbedtls_cipher_cmac_starts($2, $4, $6) | 0; //@line 18348
  if (!___async) {
   HEAP32[___async_retval >> 2] = $17; //@line 18352
   ___async_unwind = 0; //@line 18353
  }
  HEAP32[$ReallocAsyncCtx >> 2] = 491; //@line 18355
  HEAP16[$ReallocAsyncCtx + 4 >> 1] = $8; //@line 18357
  HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 18359
  HEAP32[$ReallocAsyncCtx + 12 >> 2] = $10; //@line 18361
  HEAP32[$ReallocAsyncCtx + 16 >> 2] = $12; //@line 18363
  HEAP32[$ReallocAsyncCtx + 20 >> 2] = $14; //@line 18365
  sp = STACKTOP; //@line 18366
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 18369
 _mbedtls_cipher_free($2); //@line 18370
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 18373
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 18374
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 18375
  sp = STACKTOP; //@line 18376
  return;
 }
 ___async_unwind = 0; //@line 18379
 HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 18380
 $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 18381
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 18382
 sp = STACKTOP; //@line 18383
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_118($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26909
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26911
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26913
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26915
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26917
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26919
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26921
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26923
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26925
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 26928
  $17 = _mbedtls_cipher_cmac_starts($2, $12, $14) | 0; //@line 26929
  if (!___async) {
   HEAP32[___async_retval >> 2] = $17; //@line 26933
   ___async_unwind = 0; //@line 26934
  }
  HEAP32[$ReallocAsyncCtx >> 2] = 483; //@line 26936
  HEAP32[$ReallocAsyncCtx + 4 >> 2] = $8; //@line 26938
  HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 26940
  HEAP32[$ReallocAsyncCtx + 12 >> 2] = $4; //@line 26942
  HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 26944
  HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 26946
  sp = STACKTOP; //@line 26947
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 26950
 _mbedtls_cipher_free($2); //@line 26951
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 487; //@line 26954
  $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 26955
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 26956
  sp = STACKTOP; //@line 26957
  return;
 }
 ___async_unwind = 0; //@line 26960
 HEAP32[$ReallocAsyncCtx6 >> 2] = 487; //@line 26961
 $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 26962
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 26963
 sp = STACKTOP; //@line 26964
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb_2($0) {
 $0 = $0 | 0;
 var $$sink4 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17943
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17945
 $5 = $2 + 1964 | 0; //@line 17948
 HEAP8[$5 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 17949
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 17953
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 17957
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 17961
 HEAP32[$2 + 1984 >> 2] = 1; //@line 17963
 $$sink4 = (HEAP32[$2 + 2380 >> 2] | 0) == 2 & 1; //@line 17967
 HEAP8[$2 + 2377 >> 0] = $$sink4; //@line 17969
 $20 = $2 + 1982 | 0; //@line 17970
 HEAP8[$20 >> 0] = $$sink4; //@line 17971
 HEAP8[$2 + 2026 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 17975
 $24 = $2 + 4 | 0; //@line 17976
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 17977
 $25 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($24, $5) | 0; //@line 17978
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 373; //@line 17981
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 17982
  HEAP32[$26 >> 2] = $20; //@line 17983
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 17984
  HEAP32[$27 >> 2] = $2; //@line 17985
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 17986
  HEAP32[$28 >> 2] = $24; //@line 17987
  sp = STACKTOP; //@line 17988
  return;
 }
 HEAP8[___async_retval >> 0] = $25 & 1; //@line 17993
 ___async_unwind = 0; //@line 17994
 HEAP32[$ReallocAsyncCtx2 >> 2] = 373; //@line 17995
 $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 17996
 HEAP32[$26 >> 2] = $20; //@line 17997
 $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 17998
 HEAP32[$27 >> 2] = $2; //@line 17999
 $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 18000
 HEAP32[$28 >> 2] = $24; //@line 18001
 sp = STACKTOP; //@line 18002
 return;
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2605
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 2606
 if (!$4) {
  $$0 = -13; //@line 2609
  return $$0 | 0; //@line 2610
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 2616
  return $$0 | 0; //@line 2617
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2619
 _mbedtls_cipher_free($0); //@line 2620
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 557; //@line 2623
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 2625
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 2627
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 2629
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 2631
  sp = STACKTOP; //@line 2632
  return 0; //@line 2633
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2635
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2636
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 2637
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 558; //@line 2640
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2642
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 2644
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2646
  sp = STACKTOP; //@line 2647
  return 0; //@line 2648
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2650
 if ($13 | 0) {
  $$0 = $13; //@line 2653
  return $$0 | 0; //@line 2654
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2656
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 2657
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 559; //@line 2660
  sp = STACKTOP; //@line 2661
  return 0; //@line 2662
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2664
 $$0 = $18; //@line 2665
 return $$0 | 0; //@line 2666
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$031 = 0.0, $10 = 0.0, $45 = 0.0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 722
 STACKTOP = STACKTOP + 16 | 0; //@line 723
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 723
 $vararg_buffer = sp; //@line 724
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 727
   HEAP32[$vararg_buffer >> 2] = $$0; //@line 728
   _mbed_tracef(16, 11016, 11021, $vararg_buffer); //@line 729
   STACKTOP = sp; //@line 730
   return $$0 | 0; //@line 730
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 738
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 742
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 746
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 750
    }
   }
   $6 = HEAP32[$0 + 756 >> 2] | 0; //@line 754
   $10 = 1.0 / ($$031 / +(1 << $6 | 0)); //@line 758
   $45 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($6 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($6 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 794
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $10 + $10 * (($45 > 0.0 ? $45 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 804
   HEAP32[$vararg_buffer >> 2] = $$0; //@line 805
   _mbed_tracef(16, 11016, 11021, $vararg_buffer); //@line 806
   STACKTOP = sp; //@line 807
   return $$0 | 0; //@line 807
  }
 default:
  {
   $$0 = 0; //@line 811
   HEAP32[$vararg_buffer >> 2] = $$0; //@line 812
   _mbed_tracef(16, 11016, 11021, $vararg_buffer); //@line 813
   STACKTOP = sp; //@line 814
   return $$0 | 0; //@line 814
  }
 }
 return 0; //@line 817
}
function __ZN7LoRaMac15send_ongoing_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15900
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15902
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15904
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15906
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15908
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15910
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 15914
  return;
 }
 HEAP8[$2 + 2063 >> 0] = 0; //@line 15918
 HEAP8[$2 + 2062 >> 0] = 0; //@line 15920
 HEAP32[$2 + 2068 >> 2] = HEAP32[$2 + 1760 >> 2]; //@line 15924
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 15925
 $16 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 15926
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 436; //@line 15929
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 15930
  HEAP32[$17 >> 2] = $4; //@line 15931
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 15932
  HEAP32[$18 >> 2] = $8; //@line 15933
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 15934
  HEAP32[$19 >> 2] = $2; //@line 15935
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 15936
  HEAP32[$20 >> 2] = $6; //@line 15937
  sp = STACKTOP; //@line 15938
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 15942
 ___async_unwind = 0; //@line 15943
 HEAP32[$ReallocAsyncCtx2 >> 2] = 436; //@line 15944
 $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 15945
 HEAP32[$17 >> 2] = $4; //@line 15946
 $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 15947
 HEAP32[$18 >> 2] = $8; //@line 15948
 $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 15949
 HEAP32[$19 >> 2] = $2; //@line 15950
 $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 15951
 HEAP32[$20 >> 2] = $6; //@line 15952
 sp = STACKTOP; //@line 15953
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_219($0) {
 $0 = $0 | 0;
 var $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17393
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17395
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17397
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17399
 $9 = HEAP8[$2 >> 0] | 0; //@line 17402
 if (!($9 & 1)) {
  $20 = $9; //@line 17406
 } else {
  if (!(HEAP8[$4 + 1936 >> 0] | 0)) {
   $20 = $9; //@line 17412
  } else {
   _mbed_tracef(16, 12866, 13271, $6); //@line 17414
   $16 = $4 + 1877 | 0; //@line 17416
   HEAP8[$16 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa($4 + 4 | 0, HEAP8[$16 >> 0] | 0) | 0; //@line 17419
   $20 = HEAP8[$2 >> 0] | 0; //@line 17421
  }
 }
 $19 = $4 + 2063 | 0; //@line 17424
 HEAP8[$19 >> 0] = $20; //@line 17425
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 17426
 $21 = __ZN7LoRaMac21handle_retransmissionEv($4) | 0; //@line 17427
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 428; //@line 17430
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 17431
  HEAP32[$22 >> 2] = $2; //@line 17432
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 17433
  HEAP32[$23 >> 2] = $4; //@line 17434
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 17435
  HEAP32[$24 >> 2] = $19; //@line 17436
  sp = STACKTOP; //@line 17437
  return;
 }
 HEAP32[___async_retval >> 2] = $21; //@line 17441
 ___async_unwind = 0; //@line 17442
 HEAP32[$ReallocAsyncCtx3 >> 2] = 428; //@line 17443
 $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 17444
 HEAP32[$22 >> 2] = $2; //@line 17445
 $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 17446
 HEAP32[$23 >> 2] = $4; //@line 17447
 $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 17448
 HEAP32[$24 >> 2] = $19; //@line 17449
 sp = STACKTOP; //@line 17450
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_381($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28864
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28868
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28870
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28872
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28874
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28876
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28878
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28880
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 28883
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 28884
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 28900
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 28901
    if (!___async) {
     ___async_unwind = 0; //@line 28904
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 688; //@line 28906
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 28908
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 28910
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 28912
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 28914
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 28916
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 28918
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 28920
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 28922
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 28925
    sp = STACKTOP; //@line 28926
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_48($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21731
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21735
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21737
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21738
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 21742
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 21743
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 21744
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 336; //@line 21747
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 21748
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21749
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 21750
   HEAP32[$11 >> 2] = $4; //@line 21751
   sp = STACKTOP; //@line 21752
   return;
  }
  ___async_unwind = 0; //@line 21755
  HEAP32[$ReallocAsyncCtx2 >> 2] = 336; //@line 21756
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 21757
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21758
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 21759
  HEAP32[$11 >> 2] = $4; //@line 21760
  sp = STACKTOP; //@line 21761
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21768
 _mbed_assert_internal(12080, 12089, 775); //@line 21769
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 21772
  $13 = $ReallocAsyncCtx6 + 4 | 0; //@line 21773
  HEAP32[$13 >> 2] = $4; //@line 21774
  sp = STACKTOP; //@line 21775
  return;
 }
 ___async_unwind = 0; //@line 21778
 HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 21779
 $13 = $ReallocAsyncCtx6 + 4 | 0; //@line 21780
 HEAP32[$13 >> 2] = $4; //@line 21781
 sp = STACKTOP; //@line 21782
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 365
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 368
  HEAP32[$21 >> 2] = 0; //@line 369
  return;
 }
 $4 = $1 + 12 | 0; //@line 372
 $5 = HEAP32[$4 >> 2] | 0; //@line 373
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 378
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 379
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 380
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 546; //@line 383
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 385
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 387
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 389
    sp = STACKTOP; //@line 390
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 393
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 398
 $13 = HEAP32[$12 >> 2] | 0; //@line 399
 do {
  if (!$13) {
   $20 = 0; //@line 403
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 406
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 407
   FUNCTION_TABLE_vii[$16 & 15]($1, $2); //@line 408
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 547; //@line 411
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 413
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 415
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 417
    sp = STACKTOP; //@line 418
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 421
    $20 = HEAP32[$12 >> 2] | 0; //@line 423
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 428
 $21 = $1 + 16 | 0; //@line 429
 HEAP32[$21 >> 2] = 0; //@line 430
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_101($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25391
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25395
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25397
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25398
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 25402
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 25403
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 25404
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 242; //@line 25407
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 25408
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25409
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 25410
   HEAP32[$11 >> 2] = $4; //@line 25411
   sp = STACKTOP; //@line 25412
   return;
  }
  ___async_unwind = 0; //@line 25415
  HEAP32[$ReallocAsyncCtx2 >> 2] = 242; //@line 25416
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 25417
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25418
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 25419
  HEAP32[$11 >> 2] = $4; //@line 25420
  sp = STACKTOP; //@line 25421
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 25428
 _mbed_assert_internal(12080, 12089, 775); //@line 25429
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 243; //@line 25432
  $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 25433
  HEAP32[$13 >> 2] = $4; //@line 25434
  sp = STACKTOP; //@line 25435
  return;
 }
 ___async_unwind = 0; //@line 25438
 HEAP32[$ReallocAsyncCtx12 >> 2] = 243; //@line 25439
 $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 25440
 HEAP32[$13 >> 2] = $4; //@line 25441
 sp = STACKTOP; //@line 25442
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_99($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25172
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25176
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25178
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25179
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 25183
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 25184
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 25185
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 250; //@line 25188
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 25189
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25190
   $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 25191
   HEAP32[$11 >> 2] = $4; //@line 25192
   sp = STACKTOP; //@line 25193
   return;
  }
  ___async_unwind = 0; //@line 25196
  HEAP32[$ReallocAsyncCtx6 >> 2] = 250; //@line 25197
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 25198
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25199
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 25200
  HEAP32[$11 >> 2] = $4; //@line 25201
  sp = STACKTOP; //@line 25202
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 25209
 _mbed_assert_internal(12080, 12089, 775); //@line 25210
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 251; //@line 25213
  $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 25214
  HEAP32[$13 >> 2] = $4; //@line 25215
  sp = STACKTOP; //@line 25216
  return;
 }
 ___async_unwind = 0; //@line 25219
 HEAP32[$ReallocAsyncCtx10 >> 2] = 251; //@line 25220
 $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 25221
 HEAP32[$13 >> 2] = $4; //@line 25222
 sp = STACKTOP; //@line 25223
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_75($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23449
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23453
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23455
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23456
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 23460
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 23461
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 23462
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 230; //@line 23465
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 23466
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23467
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 23468
   HEAP32[$11 >> 2] = $4; //@line 23469
   sp = STACKTOP; //@line 23470
   return;
  }
  ___async_unwind = 0; //@line 23473
  HEAP32[$ReallocAsyncCtx2 >> 2] = 230; //@line 23474
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 23475
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23476
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 23477
  HEAP32[$11 >> 2] = $4; //@line 23478
  sp = STACKTOP; //@line 23479
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 23486
 _mbed_assert_internal(12080, 12089, 775); //@line 23487
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 231; //@line 23490
  $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 23491
  HEAP32[$13 >> 2] = $4; //@line 23492
  sp = STACKTOP; //@line 23493
  return;
 }
 ___async_unwind = 0; //@line 23496
 HEAP32[$ReallocAsyncCtx12 >> 2] = 231; //@line 23497
 $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 23498
 HEAP32[$13 >> 2] = $4; //@line 23499
 sp = STACKTOP; //@line 23500
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_74($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23392
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23396
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23398
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23399
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 23403
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23404
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 23405
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 234; //@line 23408
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 23409
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23410
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 23411
   HEAP32[$11 >> 2] = $4; //@line 23412
   sp = STACKTOP; //@line 23413
   return;
  }
  ___async_unwind = 0; //@line 23416
  HEAP32[$ReallocAsyncCtx4 >> 2] = 234; //@line 23417
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 23418
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23419
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 23420
  HEAP32[$11 >> 2] = $4; //@line 23421
  sp = STACKTOP; //@line 23422
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 23429
 _mbed_assert_internal(12080, 12089, 775); //@line 23430
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 235; //@line 23433
  $13 = $ReallocAsyncCtx11 + 4 | 0; //@line 23434
  HEAP32[$13 >> 2] = $4; //@line 23435
  sp = STACKTOP; //@line 23436
  return;
 }
 ___async_unwind = 0; //@line 23439
 HEAP32[$ReallocAsyncCtx11 >> 2] = 235; //@line 23440
 $13 = $ReallocAsyncCtx11 + 4 | 0; //@line 23441
 HEAP32[$13 >> 2] = $4; //@line 23442
 sp = STACKTOP; //@line 23443
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_73($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23335
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23339
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23341
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23342
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 23346
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 23347
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 23348
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 238; //@line 23351
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 23352
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23353
   $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 23354
   HEAP32[$11 >> 2] = $4; //@line 23355
   sp = STACKTOP; //@line 23356
   return;
  }
  ___async_unwind = 0; //@line 23359
  HEAP32[$ReallocAsyncCtx6 >> 2] = 238; //@line 23360
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 23361
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23362
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 23363
  HEAP32[$11 >> 2] = $4; //@line 23364
  sp = STACKTOP; //@line 23365
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 23372
 _mbed_assert_internal(12080, 12089, 775); //@line 23373
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 239; //@line 23376
  $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 23377
  HEAP32[$13 >> 2] = $4; //@line 23378
  sp = STACKTOP; //@line 23379
  return;
 }
 ___async_unwind = 0; //@line 23382
 HEAP32[$ReallocAsyncCtx10 >> 2] = 239; //@line 23383
 $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 23384
 HEAP32[$13 >> 2] = $4; //@line 23385
 sp = STACKTOP; //@line 23386
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_151($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29761
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29765
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29767
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29768
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 29772
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 29773
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 29774
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 307; //@line 29777
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 29778
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29779
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 29780
   HEAP32[$11 >> 2] = $4; //@line 29781
   sp = STACKTOP; //@line 29782
   return;
  }
  ___async_unwind = 0; //@line 29785
  HEAP32[$ReallocAsyncCtx2 >> 2] = 307; //@line 29786
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 29787
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29788
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 29789
  HEAP32[$11 >> 2] = $4; //@line 29790
  sp = STACKTOP; //@line 29791
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 29798
 _mbed_assert_internal(12080, 12089, 775); //@line 29799
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 308; //@line 29802
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 29803
  HEAP32[$13 >> 2] = $4; //@line 29804
  sp = STACKTOP; //@line 29805
  return;
 }
 ___async_unwind = 0; //@line 29808
 HEAP32[$ReallocAsyncCtx4 >> 2] = 308; //@line 29809
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 29810
 HEAP32[$13 >> 2] = $4; //@line 29811
 sp = STACKTOP; //@line 29812
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_260($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 19916
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19920
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19922
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19923
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19927
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 19928
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 19929
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 302; //@line 19932
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19933
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19934
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 19935
   HEAP32[$11 >> 2] = $4; //@line 19936
   sp = STACKTOP; //@line 19937
   return;
  }
  ___async_unwind = 0; //@line 19940
  HEAP32[$ReallocAsyncCtx4 >> 2] = 302; //@line 19941
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19942
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19943
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 19944
  HEAP32[$11 >> 2] = $4; //@line 19945
  sp = STACKTOP; //@line 19946
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 19953
 _mbed_assert_internal(12080, 12089, 775); //@line 19954
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 303; //@line 19957
  $13 = $ReallocAsyncCtx9 + 4 | 0; //@line 19958
  HEAP32[$13 >> 2] = $4; //@line 19959
  sp = STACKTOP; //@line 19960
  return;
 }
 ___async_unwind = 0; //@line 19963
 HEAP32[$ReallocAsyncCtx9 >> 2] = 303; //@line 19964
 $13 = $ReallocAsyncCtx9 + 4 | 0; //@line 19965
 HEAP32[$13 >> 2] = $4; //@line 19966
 sp = STACKTOP; //@line 19967
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_392($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29710
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29712
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29714
 $AsyncRetVal = HEAP16[___async_retval >> 1] | 0; //@line 29716
 $6 = $2 + 2496 | 0; //@line 29717
 switch (HEAP32[$6 >> 2] | 0) {
 case 5:
 case 2:
  {
   break;
  }
 default:
  {
   if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
    HEAP16[___async_retval >> 1] = -1e3 == 0 ? $AsyncRetVal : -1e3 & 65535; //@line 29731
    return;
   }
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 29736
 $10 = __ZN7LoRaMac15send_ongoing_txEv($4) | 0; //@line 29737
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 354; //@line 29740
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 29741
  HEAP32[$11 >> 2] = $2; //@line 29742
  $12 = $ReallocAsyncCtx + 8 | 0; //@line 29743
  HEAP32[$12 >> 2] = $4; //@line 29744
  $13 = $ReallocAsyncCtx + 12 | 0; //@line 29745
  HEAP32[$13 >> 2] = $6; //@line 29746
  $14 = $ReallocAsyncCtx + 16 | 0; //@line 29747
  HEAP16[$14 >> 1] = $AsyncRetVal; //@line 29748
  sp = STACKTOP; //@line 29749
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 29753
 ___async_unwind = 0; //@line 29754
 HEAP32[$ReallocAsyncCtx >> 2] = 354; //@line 29755
 $11 = $ReallocAsyncCtx + 4 | 0; //@line 29756
 HEAP32[$11 >> 2] = $2; //@line 29757
 $12 = $ReallocAsyncCtx + 8 | 0; //@line 29758
 HEAP32[$12 >> 2] = $4; //@line 29759
 $13 = $ReallocAsyncCtx + 12 | 0; //@line 29760
 HEAP32[$13 >> 2] = $6; //@line 29761
 $14 = $ReallocAsyncCtx + 16 | 0; //@line 29762
 HEAP16[$14 >> 1] = $AsyncRetVal; //@line 29763
 sp = STACKTOP; //@line 29764
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_313($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25373
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25375
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25379
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25381
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25383
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25385
 $13 = HEAP32[$2 >> 2] | 0; //@line 25386
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 25389
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 25391
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 25392
 $19 = FUNCTION_TABLE_iiii[$16 & 31]($13, $6, $18) | 0; //@line 25393
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 517; //@line 25396
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 25397
  HEAP32[$20 >> 2] = $8; //@line 25398
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 25399
  HEAP32[$21 >> 2] = $2; //@line 25400
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 25401
  HEAP32[$22 >> 2] = $10; //@line 25402
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 25403
  HEAP32[$23 >> 2] = $12; //@line 25404
  sp = STACKTOP; //@line 25405
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 25409
 ___async_unwind = 0; //@line 25410
 HEAP32[$ReallocAsyncCtx6 >> 2] = 517; //@line 25411
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 25412
 HEAP32[$20 >> 2] = $8; //@line 25413
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 25414
 HEAP32[$21 >> 2] = $2; //@line 25415
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 25416
 HEAP32[$22 >> 2] = $10; //@line 25417
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 25418
 HEAP32[$23 >> 2] = $12; //@line 25419
 sp = STACKTOP; //@line 25420
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_328($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26206
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26208
 $3 = $2 + 1176 | 0; //@line 26209
 HEAP32[$3 >> 2] = 10244; //@line 26210
 __ZN4mbed6Ticker6detachEv($3); //@line 26211
 $5 = HEAP32[$2 + 1228 >> 2] | 0; //@line 26213
 if (!$5) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 26216
  __ZN4mbed10TimerEventD2Ev($3); //@line 26217
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 69; //@line 26220
   $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 26221
   HEAP32[$12 >> 2] = $2; //@line 26222
   sp = STACKTOP; //@line 26223
   return;
  }
  ___async_unwind = 0; //@line 26226
  HEAP32[$ReallocAsyncCtx7 >> 2] = 69; //@line 26227
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 26228
  HEAP32[$12 >> 2] = $2; //@line 26229
  sp = STACKTOP; //@line 26230
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 26235
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 26236
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1216 | 0); //@line 26237
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 26240
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 26241
   HEAP32[$10 >> 2] = $2; //@line 26242
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 26243
   HEAP32[$11 >> 2] = $3; //@line 26244
   sp = STACKTOP; //@line 26245
   return;
  }
  ___async_unwind = 0; //@line 26248
  HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 26249
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 26250
  HEAP32[$10 >> 2] = $2; //@line 26251
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 26252
  HEAP32[$11 >> 2] = $3; //@line 26253
  sp = STACKTOP; //@line 26254
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_327($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26151
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26153
 $3 = $2 + 1112 | 0; //@line 26154
 HEAP32[$3 >> 2] = 10244; //@line 26155
 __ZN4mbed6Ticker6detachEv($3); //@line 26156
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 26158
 if (!$5) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 26161
  __ZN4mbed10TimerEventD2Ev($3); //@line 26162
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 71; //@line 26165
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 26166
   HEAP32[$12 >> 2] = $2; //@line 26167
   sp = STACKTOP; //@line 26168
   return;
  }
  ___async_unwind = 0; //@line 26171
  HEAP32[$ReallocAsyncCtx6 >> 2] = 71; //@line 26172
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 26173
  HEAP32[$12 >> 2] = $2; //@line 26174
  sp = STACKTOP; //@line 26175
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 26180
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 26181
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 26182
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 70; //@line 26185
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 26186
   HEAP32[$10 >> 2] = $2; //@line 26187
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 26188
   HEAP32[$11 >> 2] = $3; //@line 26189
   sp = STACKTOP; //@line 26190
   return;
  }
  ___async_unwind = 0; //@line 26193
  HEAP32[$ReallocAsyncCtx3 >> 2] = 70; //@line 26194
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 26195
  HEAP32[$10 >> 2] = $2; //@line 26196
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 26197
  HEAP32[$11 >> 2] = $3; //@line 26198
  sp = STACKTOP; //@line 26199
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_326($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26096
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26098
 $3 = $2 + 1048 | 0; //@line 26099
 HEAP32[$3 >> 2] = 10244; //@line 26100
 __ZN4mbed6Ticker6detachEv($3); //@line 26101
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 26103
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26106
  __ZN4mbed10TimerEventD2Ev($3); //@line 26107
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 73; //@line 26110
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 26111
   HEAP32[$12 >> 2] = $2; //@line 26112
   sp = STACKTOP; //@line 26113
   return;
  }
  ___async_unwind = 0; //@line 26116
  HEAP32[$ReallocAsyncCtx5 >> 2] = 73; //@line 26117
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 26118
  HEAP32[$12 >> 2] = $2; //@line 26119
  sp = STACKTOP; //@line 26120
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 26125
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26126
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 26127
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 72; //@line 26130
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 26131
   HEAP32[$10 >> 2] = $3; //@line 26132
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 26133
   HEAP32[$11 >> 2] = $2; //@line 26134
   sp = STACKTOP; //@line 26135
   return;
  }
  ___async_unwind = 0; //@line 26138
  HEAP32[$ReallocAsyncCtx4 >> 2] = 72; //@line 26139
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 26140
  HEAP32[$10 >> 2] = $3; //@line 26141
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 26142
  HEAP32[$11 >> 2] = $2; //@line 26143
  sp = STACKTOP; //@line 26144
  return;
 }
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26666
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26668
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26670
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26672
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26674
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26676
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26678
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 26681
  $13 = _mbedtls_cipher_cmac_update($4, $2, 16) | 0; //@line 26682
  if (!___async) {
   HEAP32[___async_retval >> 2] = $13; //@line 26686
   ___async_unwind = 0; //@line 26687
  }
  HEAP32[$ReallocAsyncCtx4 >> 2] = 484; //@line 26689
  HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $4; //@line 26691
  HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $6; //@line 26693
  HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $8; //@line 26695
  HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $2; //@line 26697
  HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 26699
  sp = STACKTOP; //@line 26700
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 26703
 _mbedtls_cipher_free($4); //@line 26704
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 487; //@line 26707
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 26708
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 26709
  sp = STACKTOP; //@line 26710
  return;
 }
 ___async_unwind = 0; //@line 26713
 HEAP32[$ReallocAsyncCtx6 >> 2] = 487; //@line 26714
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 26715
 HEAP32[$20 >> 2] = $AsyncRetVal; //@line 26716
 sp = STACKTOP; //@line 26717
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18746
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18748
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18750
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18752
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18754
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18756
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18758
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18760
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18762
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18764
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18766
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18768
 $25 = $4 + 1280 | 0; //@line 18769
 HEAP32[$25 >> 2] = 0; //@line 18770
 HEAP32[$25 + 4 >> 2] = 0; //@line 18770
 HEAP32[$25 + 8 >> 2] = 0; //@line 18770
 HEAP32[$25 + 12 >> 2] = 0; //@line 18770
 HEAP8[$4 + 1296 >> 0] = 1; //@line 18772
 HEAP32[$2 >> 2] = 620; //@line 18773
 HEAP32[$4 + 668 >> 2] = $6; //@line 18775
 HEAP32[$4 + 672 >> 2] = $8; //@line 18777
 HEAP32[$4 + 652 >> 2] = $10; //@line 18779
 HEAP32[$4 + 656 >> 2] = $12; //@line 18781
 HEAP32[$4 + 664 >> 2] = $14; //@line 18783
 HEAP32[$4 + 660 >> 2] = $16; //@line 18785
 HEAP32[$4 + 676 >> 2] = $18; //@line 18787
 HEAP32[$4 + 680 >> 2] = $20; //@line 18789
 HEAP32[$4 + 684 >> 2] = $22; //@line 18791
 HEAP32[$4 + 788 >> 2] = 0; //@line 18793
 if (($18 | 0) == -1) {
  $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 18796
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 18800
 $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 18801
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11492
 STACKTOP = STACKTOP + 16 | 0; //@line 11493
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11493
 $2 = sp; //@line 11494
 $3 = $1 & 255; //@line 11495
 HEAP8[$2 >> 0] = $3; //@line 11496
 $4 = $0 + 16 | 0; //@line 11497
 $5 = HEAP32[$4 >> 2] | 0; //@line 11498
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 11505
   label = 4; //@line 11506
  } else {
   $$0 = -1; //@line 11508
  }
 } else {
  $12 = $5; //@line 11511
  label = 4; //@line 11512
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 11516
   $10 = HEAP32[$9 >> 2] | 0; //@line 11517
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 11520
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 11527
     HEAP8[$10 >> 0] = $3; //@line 11528
     $$0 = $13; //@line 11529
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 11534
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11535
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 11536
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 656; //@line 11539
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 11541
    sp = STACKTOP; //@line 11542
    STACKTOP = sp; //@line 11543
    return 0; //@line 11543
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11545
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 11550
   } else {
    $$0 = -1; //@line 11552
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11556
 return $$0 | 0; //@line 11556
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18419
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18421
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18423
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18425
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18427
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18429
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18431
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18433
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18435
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18437
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2092 >> 2] = 13; //@line 18443
  return;
 }
 HEAP8[$16 >> 0] = HEAP8[$14 >> 0] | 0; //@line 18447
 $23 = $6 + -4 | 0; //@line 18448
 $25 = HEAP32[$8 >> 2] | 0; //@line 18450
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 18451
 $26 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($10, $16, $23 & 65535, $25, 128, $18) | 0; //@line 18452
 if (!___async) {
  HEAP32[___async_retval >> 2] = $26; //@line 18456
  ___async_unwind = 0; //@line 18457
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 376; //@line 18459
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 18461
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $23; //@line 18463
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 18465
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $18; //@line 18467
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $2; //@line 18469
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 18471
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $10; //@line 18473
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $12; //@line 18475
 sp = STACKTOP; //@line 18476
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_318($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 25564
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25566
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25568
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 25570
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 25572
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 25574
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 25576
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$4 + 2376 >> 0] | 0) {
    HEAP8[$4 + 2084 >> 0] = 0; //@line 25585
    return;
   }
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25588
   __ZN7LoRaMac24handle_join_accept_frameEPKht($4, $2, $6); //@line 25589
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 397; //@line 25592
    $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 25593
    HEAP32[$16 >> 2] = $4; //@line 25594
    sp = STACKTOP; //@line 25595
    return;
   }
   ___async_unwind = 0; //@line 25598
   HEAP32[$ReallocAsyncCtx2 >> 2] = 397; //@line 25599
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 25600
   HEAP32[$16 >> 2] = $4; //@line 25601
   sp = STACKTOP; //@line 25602
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25607
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($4, $2, $6, 1, $trunc, $8, $10); //@line 25608
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 398; //@line 25611
    sp = STACKTOP; //@line 25612
    return;
   }
   ___async_unwind = 0; //@line 25615
   HEAP32[$ReallocAsyncCtx >> 2] = 398; //@line 25616
   sp = STACKTOP; //@line 25617
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_317($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 25498
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25500
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25502
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 25504
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 25506
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 25508
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 25510
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$4 + 2376 >> 0] | 0) {
    HEAP8[$4 + 2084 >> 0] = 0; //@line 25519
    return;
   }
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25522
   __ZN7LoRaMac24handle_join_accept_frameEPKht($4, $2, $6); //@line 25523
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 397; //@line 25526
    $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 25527
    HEAP32[$16 >> 2] = $4; //@line 25528
    sp = STACKTOP; //@line 25529
    return;
   }
   ___async_unwind = 0; //@line 25532
   HEAP32[$ReallocAsyncCtx2 >> 2] = 397; //@line 25533
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 25534
   HEAP32[$16 >> 2] = $4; //@line 25535
   sp = STACKTOP; //@line 25536
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25541
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($4, $2, $6, 1, $trunc, $8, $10); //@line 25542
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 398; //@line 25545
    sp = STACKTOP; //@line 25546
    return;
   }
   ___async_unwind = 0; //@line 25549
   HEAP32[$ReallocAsyncCtx >> 2] = 398; //@line 25550
   sp = STACKTOP; //@line 25551
   return;
  }
 default:
  {
   return;
  }
 }
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19998
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20000
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20002
 $7 = $2 + 156 | 0; //@line 20003
 _equeue_mutex_lock($7); //@line 20004
 $8 = $2 + 24 | 0; //@line 20005
 $9 = HEAP32[$8 >> 2] | 0; //@line 20006
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 20010
   label = 9; //@line 20011
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 20013
   $$025$i$i = $8; //@line 20014
   $13 = $9; //@line 20014
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 20016
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 20021
    $16 = HEAP32[$15 >> 2] | 0; //@line 20022
    if (!$16) {
     $$02329$i$i = $15; //@line 20025
     label = 9; //@line 20026
     break L3;
    } else {
     $$025$i$i = $15; //@line 20029
     $13 = $16; //@line 20029
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 20035
    $$02330$i$i = $$025$i$i; //@line 20038
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 20038
   } else {
    $$02329$i$i = $$025$i$i; //@line 20040
    label = 9; //@line 20041
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 20047
  $$02330$i$i = $$02329$i$i; //@line 20048
  $$sink$in$i$i = $$02329$i$i; //@line 20048
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 20052
 HEAP32[$$02330$i$i >> 2] = $6; //@line 20053
 _equeue_mutex_unlock($7); //@line 20054
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21475
 $1 = $0 + 4 | 0; //@line 21476
 $2 = HEAP32[$1 >> 2] | 0; //@line 21477
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 21480
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 21481
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 21482
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 539; //@line 21485
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 21487
  sp = STACKTOP; //@line 21488
  return 0; //@line 21489
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21491
 $7 = HEAP32[$1 >> 2] | 0; //@line 21492
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 21495
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21496
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 21497
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 540; //@line 21500
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 21502
  sp = STACKTOP; //@line 21503
  return 0; //@line 21504
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21506
 $13 = HEAP32[$1 >> 2] | 0; //@line 21507
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 21510
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21511
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 21512
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 541; //@line 21515
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 21517
  sp = STACKTOP; //@line 21518
  return 0; //@line 21519
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21521
  return $11 | 0; //@line 21522
 }
 return 0; //@line 21524
}
function __ZN12LoRaWANStack7connectEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 10109
 STACKTOP = STACKTOP + 16 | 0; //@line 10110
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10110
 $vararg_buffer1 = sp + 8 | 0; //@line 10111
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$1 = -1012; //@line 10117
  STACKTOP = sp; //@line 10118
  return $$1 | 0; //@line 10118
 }
 $4 = __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, 0, 0) | 0; //@line 10120
 if ($4 | 0) {
  $$1 = $4; //@line 10123
  STACKTOP = sp; //@line 10124
  return $$1 | 0; //@line 10124
 }
 _mbed_tracef(16, 12187, 12624, sp); //@line 10126
 $9 = HEAP32[$0 + 2556 >> 2] | 0; //@line 10130
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$0 + 2552 >> 2]; //@line 10131
 HEAP32[$vararg_buffer1 + 4 >> 2] = $9; //@line 10133
 _mbed_tracef(16, 12187, 12639, $vararg_buffer1); //@line 10134
 $10 = $0 + 2904 | 0; //@line 10135
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -9; //@line 10138
 HEAP32[$vararg_buffer1 >> 2] = 0; //@line 10139
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10140
 __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $vararg_buffer1); //@line 10141
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 347; //@line 10144
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer1; //@line 10146
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 10148
  sp = STACKTOP; //@line 10149
  STACKTOP = sp; //@line 10150
  return 0; //@line 10150
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10152
 $$1 = HEAP32[$vararg_buffer1 >> 2] | 0; //@line 10154
 STACKTOP = sp; //@line 10155
 return $$1 | 0; //@line 10155
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17865
 $2 = $0 + 260 | 0; //@line 17866
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 272 | 0; //@line 17871
 $5 = HEAP32[$4 >> 2] | 0; //@line 17872
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 17877
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 17878
   FUNCTION_TABLE_vi[$8 & 1023]($2); //@line 17879
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 480; //@line 17882
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 17884
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 17886
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 17888
    sp = STACKTOP; //@line 17889
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17892
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 17897
 $13 = HEAP32[$12 >> 2] | 0; //@line 17898
 do {
  if (!$13) {
   $19 = 0; //@line 17902
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 17905
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17906
   FUNCTION_TABLE_vii[$16 & 15]($2, $1); //@line 17907
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 481; //@line 17910
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 17912
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 17914
    sp = STACKTOP; //@line 17915
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17918
    $19 = HEAP32[$12 >> 2] | 0; //@line 17920
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 17925
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $16 = 0, $19 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21532
 $3 = $0 + 4 | 0; //@line 21533
 $4 = HEAP32[$3 >> 2] | 0; //@line 21534
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 21537
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 21538
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 21539
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 542; //@line 21542
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 21544
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 21546
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 21548
  sp = STACKTOP; //@line 21549
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21552
 $11 = HEAP32[$3 >> 2] | 0; //@line 21553
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 24 >> 2] | 0; //@line 21556
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21557
 FUNCTION_TABLE_viii[$14 & 7]($11, $1, $2); //@line 21558
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 543; //@line 21561
  HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 21563
  sp = STACKTOP; //@line 21564
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21567
 $16 = HEAP32[$3 >> 2] | 0; //@line 21568
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 76 >> 2] | 0; //@line 21571
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21572
 FUNCTION_TABLE_vi[$19 & 1023]($16); //@line 21573
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 544; //@line 21576
  sp = STACKTOP; //@line 21577
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21580
  return;
 }
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3622
 L1 : do {
  if (!$0) {
   $$0 = -24832; //@line 3626
  } else {
   if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
    $$0 = -24832; //@line 3633
   } else {
    $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3635
    $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 3636
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 579; //@line 3639
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 3641
     HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 3643
     sp = STACKTOP; //@line 3644
     return 0; //@line 3645
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3647
    if (!$7) {
     switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
     case 36:
     case 4:
     case 3:
     case 2:
      {
       break;
      }
     default:
      {
       $$0 = -24832; //@line 3657
       break L1;
      }
     }
     $13 = _calloc(1, 36) | 0; //@line 3661
     if (!$13) {
      $$0 = -24960; //@line 3664
     } else {
      HEAP32[$0 + 64 >> 2] = $13; //@line 3667
      $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3668
      _mbedtls_platform_zeroize($13, 16); //@line 3669
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 580; //@line 3672
       sp = STACKTOP; //@line 3673
       return 0; //@line 3674
      } else {
       _emscripten_free_async_context($AsyncCtx | 0); //@line 3676
       $$0 = 0; //@line 3677
       break;
      }
     }
    } else {
     $$0 = $7; //@line 3682
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 3687
}
function _fflush__async_cb_388($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29446
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29448
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 29450
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 29454
  } else {
   $$02327 = $$02325; //@line 29456
   $$02426 = $AsyncRetVal; //@line 29456
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 29463
    } else {
     $16 = 0; //@line 29465
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 29477
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 29480
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 29483
     break L3;
    } else {
     $$02327 = $$023; //@line 29486
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 29489
   $13 = ___fflush_unlocked($$02327) | 0; //@line 29490
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 29494
    ___async_unwind = 0; //@line 29495
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 660; //@line 29497
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 29499
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 29501
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 29503
   sp = STACKTOP; //@line 29504
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 29508
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 29510
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 31458
 value = value & 255; //@line 31460
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 31463
   ptr = ptr + 1 | 0; //@line 31464
  }
  aligned_end = end & -4 | 0; //@line 31467
  block_aligned_end = aligned_end - 64 | 0; //@line 31468
  value4 = value | value << 8 | value << 16 | value << 24; //@line 31469
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 31472
   HEAP32[ptr + 4 >> 2] = value4; //@line 31473
   HEAP32[ptr + 8 >> 2] = value4; //@line 31474
   HEAP32[ptr + 12 >> 2] = value4; //@line 31475
   HEAP32[ptr + 16 >> 2] = value4; //@line 31476
   HEAP32[ptr + 20 >> 2] = value4; //@line 31477
   HEAP32[ptr + 24 >> 2] = value4; //@line 31478
   HEAP32[ptr + 28 >> 2] = value4; //@line 31479
   HEAP32[ptr + 32 >> 2] = value4; //@line 31480
   HEAP32[ptr + 36 >> 2] = value4; //@line 31481
   HEAP32[ptr + 40 >> 2] = value4; //@line 31482
   HEAP32[ptr + 44 >> 2] = value4; //@line 31483
   HEAP32[ptr + 48 >> 2] = value4; //@line 31484
   HEAP32[ptr + 52 >> 2] = value4; //@line 31485
   HEAP32[ptr + 56 >> 2] = value4; //@line 31486
   HEAP32[ptr + 60 >> 2] = value4; //@line 31487
   ptr = ptr + 64 | 0; //@line 31488
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 31492
   ptr = ptr + 4 | 0; //@line 31493
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 31498
  ptr = ptr + 1 | 0; //@line 31499
 }
 return end - num | 0; //@line 31501
}
function __ZN7LoRaMacD2Ev__async_cb_180($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13667
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13669
 $4 = HEAP32[$2 + 1808 >> 2] | 0; //@line 13671
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 13676
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13677
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1796 | 0); //@line 13678
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 13681
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 13682
   HEAP32[$9 >> 2] = $2; //@line 13683
   sp = STACKTOP; //@line 13684
   return;
  }
  ___async_unwind = 0; //@line 13687
  HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 13688
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 13689
  HEAP32[$9 >> 2] = $2; //@line 13690
  sp = STACKTOP; //@line 13691
  return;
 }
 $11 = HEAP32[$2 + 748 >> 2] | 0; //@line 13695
 if (!$11) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 13699
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 13704
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 13705
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 736 | 0); //@line 13706
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 13709
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 13710
  HEAP32[$16 >> 2] = $2; //@line 13711
  sp = STACKTOP; //@line 13712
  return;
 }
 ___async_unwind = 0; //@line 13715
 HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 13716
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 13717
 HEAP32[$16 >> 2] = $2; //@line 13718
 sp = STACKTOP; //@line 13719
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_40($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21258
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21260
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21262
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21264
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21266
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21268
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21270
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21272
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21274
 $18 = $16 + 12 | 0; //@line 21276
 HEAP32[$16 >> 2] = 447; //@line 21277
 HEAP32[$16 + 4 >> 2] = 0; //@line 21279
 HEAP32[$16 + 8 >> 2] = $2; //@line 21281
 HEAP32[$18 >> 2] = 860; //@line 21282
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(40) | 0; //@line 21283
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1796 | 0, $16); //@line 21284
 if (!___async) {
  ___async_unwind = 0; //@line 21287
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 448; //@line 21289
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $18; //@line 21291
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $2; //@line 21293
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $4; //@line 21295
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $6; //@line 21297
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $8; //@line 21299
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $10; //@line 21301
 HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $12; //@line 21303
 HEAP32[$ReallocAsyncCtx8 + 32 >> 2] = $14; //@line 21305
 HEAP32[$ReallocAsyncCtx8 + 36 >> 2] = $16; //@line 21307
 sp = STACKTOP; //@line 21308
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8497
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 8499
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 8501
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 8503
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 8505
 $9 = $0 + 12 | 0; //@line 8506
 $10 = HEAP32[$9 >> 2] | 0; //@line 8507
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8511
   _mbed_assert_internal(14946, 14951, 2830); //@line 8512
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 293; //@line 8515
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 8517
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8519
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 8521
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 8523
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 8525
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 8527
    sp = STACKTOP; //@line 8528
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8531
    $19 = HEAP32[$9 >> 2] | 0; //@line 8533
    break;
   }
  } else {
   $19 = $10; //@line 8537
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 8540
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8541
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 8542
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 294; //@line 8545
  sp = STACKTOP; //@line 8546
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8549
  return;
 }
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21341
 $2 = $0 + 4 | 0; //@line 21342
 $3 = HEAP32[$2 >> 2] | 0; //@line 21343
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 21346
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 21347
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 21348
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 532; //@line 21351
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 21353
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 21356
  sp = STACKTOP; //@line 21357
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21360
 $9 = HEAP32[$2 >> 2] | 0; //@line 21361
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 21364
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21365
 FUNCTION_TABLE_vii[$12 & 15]($9, $1); //@line 21366
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 533; //@line 21369
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 21371
  sp = STACKTOP; //@line 21372
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21375
 $14 = HEAP32[$2 >> 2] | 0; //@line 21376
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 21379
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21380
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 21381
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 534; //@line 21384
  sp = STACKTOP; //@line 21385
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21388
  return;
 }
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_161($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12128
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12132
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12134
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12135
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 12139
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 12140
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 12141
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 201; //@line 12144
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 12145
   HEAP32[$10 >> 2] = $4; //@line 12146
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 12147
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 12148
   sp = STACKTOP; //@line 12149
   return;
  }
  ___async_unwind = 0; //@line 12152
  HEAP32[$ReallocAsyncCtx >> 2] = 201; //@line 12153
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 12154
  HEAP32[$10 >> 2] = $4; //@line 12155
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 12156
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 12157
  sp = STACKTOP; //@line 12158
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12165
 _mbed_assert_internal(12080, 12089, 547); //@line 12166
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 202; //@line 12169
  sp = STACKTOP; //@line 12170
  return;
 }
 ___async_unwind = 0; //@line 12173
 HEAP32[$ReallocAsyncCtx3 >> 2] = 202; //@line 12174
 sp = STACKTOP; //@line 12175
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_196($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 14976
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14980
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14982
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14984
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14986
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14988
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14990
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14993
 _equeue_event_delay($4, $6); //@line 14994
 _equeue_event_dtor($4, 268); //@line 14995
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 14996
 $16 = _equeue_post($8, 269, $4) | 0; //@line 14997
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 551; //@line 15000
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 15001
  HEAP32[$17 >> 2] = $10; //@line 15002
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 15003
  HEAP32[$18 >> 2] = $12; //@line 15004
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 15005
  HEAP32[$19 >> 2] = $14; //@line 15006
  sp = STACKTOP; //@line 15007
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 15011
 ___async_unwind = 0; //@line 15012
 HEAP32[$ReallocAsyncCtx4 >> 2] = 551; //@line 15013
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 15014
 HEAP32[$17 >> 2] = $10; //@line 15015
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 15016
 HEAP32[$18 >> 2] = $12; //@line 15017
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 15018
 HEAP32[$19 >> 2] = $14; //@line 15019
 sp = STACKTOP; //@line 15020
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_145($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28719
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28723
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28725
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28726
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 28730
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 28731
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 28732
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 195; //@line 28735
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 28736
   HEAP32[$10 >> 2] = $4; //@line 28737
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 28738
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 28739
   sp = STACKTOP; //@line 28740
   return;
  }
  ___async_unwind = 0; //@line 28743
  HEAP32[$ReallocAsyncCtx >> 2] = 195; //@line 28744
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 28745
  HEAP32[$10 >> 2] = $4; //@line 28746
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 28747
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 28748
  sp = STACKTOP; //@line 28749
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 28756
 _mbed_assert_internal(12080, 12089, 532); //@line 28757
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 196; //@line 28760
  sp = STACKTOP; //@line 28761
  return;
 }
 ___async_unwind = 0; //@line 28764
 HEAP32[$ReallocAsyncCtx3 >> 2] = 196; //@line 28765
 sp = STACKTOP; //@line 28766
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_273($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20607
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20611
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20613
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20614
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 20618
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 20619
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 20620
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 192; //@line 20623
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 20624
   HEAP32[$10 >> 2] = $4; //@line 20625
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 20626
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 20627
   sp = STACKTOP; //@line 20628
   return;
  }
  ___async_unwind = 0; //@line 20631
  HEAP32[$ReallocAsyncCtx >> 2] = 192; //@line 20632
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 20633
  HEAP32[$10 >> 2] = $4; //@line 20634
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 20635
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 20636
  sp = STACKTOP; //@line 20637
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 20644
 _mbed_assert_internal(12080, 12089, 524); //@line 20645
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 20648
  sp = STACKTOP; //@line 20649
  return;
 }
 ___async_unwind = 0; //@line 20652
 HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 20653
 sp = STACKTOP; //@line 20654
 return;
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0, $3 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2791
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 2796
 $3 = HEAP32[$2 >> 2] | 0; //@line 2797
 do {
  if ($3 | 0) {
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2801
   _mbedtls_platform_zeroize($3, 36); //@line 2802
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 562; //@line 2805
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 2807
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 2809
    sp = STACKTOP; //@line 2810
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2813
    _free(HEAP32[$2 >> 2] | 0); //@line 2815
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 60 >> 2] | 0; //@line 2821
 do {
  if ($9 | 0) {
   $15 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 28 >> 2] | 0; //@line 2829
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2830
   FUNCTION_TABLE_vi[$15 & 1023]($9); //@line 2831
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 563; //@line 2834
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2836
    sp = STACKTOP; //@line 2837
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2840
    break;
   }
  }
 } while (0);
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2845
 _mbedtls_platform_zeroize($0, 68); //@line 2846
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 564; //@line 2849
  sp = STACKTOP; //@line 2850
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2853
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $34 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22463
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22467
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22473
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22475
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22477
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22479
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22481
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22483
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22485
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  $24 = $4 + 1442 | 0; //@line 22488
  $26 = HEAPU8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 22490
  _memcpy($24 | 0, (HEAP32[$0 + 16 >> 2] | 0) + $26 | 0, $10 | 0) | 0; //@line 22492
  HEAP32[$4 + 2016 >> 2] = 3; //@line 22494
  HEAP32[$12 >> 2] = 0; //@line 22495
  HEAP32[$14 >> 2] = $24; //@line 22496
  HEAP16[$16 >> 1] = $10 - $26; //@line 22499
 }
 if (!(HEAP8[$18 >> 0] | 0)) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 22507
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($22, $4 + 1856 | 0); //@line 22508
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 389; //@line 22511
  $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 22512
  HEAP32[$34 >> 2] = $20; //@line 22513
  sp = STACKTOP; //@line 22514
  return;
 }
 ___async_unwind = 0; //@line 22517
 HEAP32[$ReallocAsyncCtx4 >> 2] = 389; //@line 22518
 $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 22519
 HEAP32[$34 >> 2] = $20; //@line 22520
 sp = STACKTOP; //@line 22521
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_369($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28044
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28048
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28050
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28052
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28054
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28057
  $12 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 28058
  if (!___async) {
   HEAP32[___async_retval >> 2] = $12; //@line 28062
   ___async_unwind = 0; //@line 28063
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 61; //@line 28065
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $6; //@line 28067
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $8; //@line 28069
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $4; //@line 28071
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $10; //@line 28073
  sp = STACKTOP; //@line 28074
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 28077
  $18 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 28078
  if (!___async) {
   HEAP32[___async_retval >> 2] = $18; //@line 28082
   ___async_unwind = 0; //@line 28083
  }
  HEAP32[$ReallocAsyncCtx5 >> 2] = 62; //@line 28085
  HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $6; //@line 28087
  HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 28089
  HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $8; //@line 28091
  HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 28093
  sp = STACKTOP; //@line 28094
  return;
 }
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_13($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18701
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18705
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18707
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18709
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18711
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18713
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18714
 $15 = HEAP16[$4 + 1748 >> 1] | 0; //@line 18716
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 18719
 $18 = __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($6, $13, 128, $8, $15, $4 + 1716 | 0, $4 + 1732 | 0) | 0; //@line 18720
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 378; //@line 18723
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 18724
  HEAP32[$19 >> 2] = $4; //@line 18725
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 18726
  HEAP32[$20 >> 2] = $10; //@line 18727
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 18728
  HEAP32[$21 >> 2] = $12; //@line 18729
  sp = STACKTOP; //@line 18730
  return;
 }
 HEAP32[___async_retval >> 2] = $18; //@line 18734
 ___async_unwind = 0; //@line 18735
 HEAP32[$ReallocAsyncCtx2 >> 2] = 378; //@line 18736
 $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 18737
 HEAP32[$19 >> 2] = $4; //@line 18738
 $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 18739
 HEAP32[$20 >> 2] = $10; //@line 18740
 $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 18741
 HEAP32[$21 >> 2] = $12; //@line 18742
 sp = STACKTOP; //@line 18743
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28801
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28805
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28807
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28809
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28811
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28813
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28815
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 28818
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 28819
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 28828
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 28829
    if (!___async) {
     ___async_unwind = 0; //@line 28832
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 689; //@line 28834
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 28836
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 28838
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 28840
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 28842
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 28844
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 28846
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 28848
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 28851
    sp = STACKTOP; //@line 28852
    return;
   }
  }
 }
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2651
 $2 = $0 + 16 | 0; //@line 2653
 $4 = HEAP32[$2 >> 2] | 0; //@line 2655
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 2658
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 2662
  $30 = 0; //@line 2662
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2663
  $32 = tempRet0; //@line 2664
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2665
  $34 = tempRet0; //@line 2666
  return $33 | 0; //@line 2667
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 2670
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2671
 $12 = _ticker_read_us($11) | 0; //@line 2672
 $13 = tempRet0; //@line 2673
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 114; //@line 2676
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2678
  $16 = $AsyncCtx + 8 | 0; //@line 2680
  HEAP32[$16 >> 2] = $4; //@line 2682
  HEAP32[$16 + 4 >> 2] = $7; //@line 2685
  sp = STACKTOP; //@line 2686
  return 0; //@line 2687
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2689
 $21 = $0 + 8 | 0; //@line 2691
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 2697
 $29 = $27; //@line 2699
 $30 = tempRet0; //@line 2699
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2700
 $32 = tempRet0; //@line 2701
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2702
 $34 = tempRet0; //@line 2703
 return $33 | 0; //@line 2704
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29347
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 29357
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 29357
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 29357
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 29361
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 29364
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 29367
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 29375
  } else {
   $20 = 0; //@line 29377
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 29387
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 29391
  HEAP32[___async_retval >> 2] = $$1; //@line 29393
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 29396
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 29397
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 29401
  ___async_unwind = 0; //@line 29402
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 660; //@line 29404
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 29406
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 29408
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 29410
 sp = STACKTOP; //@line 29411
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_198($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15051
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15055
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15057
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15059
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 15060
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 15061
 $9 = HEAP32[$4 >> 2] | 0; //@line 15062
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 15066
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 15067
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 15068
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 15071
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 15072
   HEAP32[$13 >> 2] = $8; //@line 15073
   sp = STACKTOP; //@line 15074
   return;
  }
  ___async_unwind = 0; //@line 15077
  HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 15078
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 15079
  HEAP32[$13 >> 2] = $8; //@line 15080
  sp = STACKTOP; //@line 15081
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 15088
 _mbed_assert_internal(13623, 13641, 57); //@line 15089
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 553; //@line 15092
  sp = STACKTOP; //@line 15093
  return;
 }
 ___async_unwind = 0; //@line 15096
 HEAP32[$ReallocAsyncCtx6 >> 2] = 553; //@line 15097
 sp = STACKTOP; //@line 15098
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29589
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29591
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29593
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29595
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 29600
  } else {
   $9 = $4 + 4 | 0; //@line 29602
   $10 = HEAP32[$9 >> 2] | 0; //@line 29603
   $11 = $4 + 8 | 0; //@line 29604
   $12 = HEAP32[$11 >> 2] | 0; //@line 29605
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 29609
    HEAP32[$6 >> 2] = 0; //@line 29610
    HEAP32[$2 >> 2] = 0; //@line 29611
    HEAP32[$11 >> 2] = 0; //@line 29612
    HEAP32[$9 >> 2] = 0; //@line 29613
    $$0 = 0; //@line 29614
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 29621
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 29622
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 29623
   if (!___async) {
    ___async_unwind = 0; //@line 29626
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 662; //@line 29628
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 29630
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 29632
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 29634
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 29636
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 29638
   sp = STACKTOP; //@line 29639
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 29644
 return;
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 2831
 if (!$2) {
  $$0 = -1; //@line 2834
  return $$0 | 0; //@line 2835
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 2838
 $5 = $0 + 20 | 0; //@line 2839
 HEAP32[$5 >> 2] = 0; //@line 2840
 $6 = $0 + 16 | 0; //@line 2841
 HEAP32[$6 >> 2] = 0; //@line 2842
 if ($1 | 0) {
  $$034$i = $1; //@line 2845
  $23 = 0; //@line 2845
  do {
   $23 = $23 + 1 | 0; //@line 2847
   $$034$i = $$034$i >>> 1; //@line 2848
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 2856
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 2859
 HEAP32[$0 + 28 >> 2] = $1; //@line 2861
 HEAP32[$0 + 32 >> 2] = $2; //@line 2863
 HEAP32[$0 >> 2] = 0; //@line 2864
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 2867
 HEAP8[$0 + 9 >> 0] = 0; //@line 2869
 HEAP8[$0 + 8 >> 0] = 0; //@line 2871
 HEAP8[$0 + 36 >> 0] = 0; //@line 2873
 HEAP32[$0 + 40 >> 2] = 0; //@line 2875
 HEAP32[$0 + 44 >> 2] = 0; //@line 2877
 HEAP8[$0 + 184 >> 0] = 0; //@line 2879
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 2881
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 2884
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 2887
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 2890
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 2893
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 2896
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 2899
 $$0 = $$033$i; //@line 2900
 return $$0 | 0; //@line 2901
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27803
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27805
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27810
 $7 = HEAP32[$2 >> 2] | 0; //@line 27811
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 27814
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27816
  FUNCTION_TABLE_vii[$10 & 15]($7, 0); //@line 27817
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 537; //@line 27820
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 27821
   HEAP32[$12 >> 2] = $2; //@line 27822
   sp = STACKTOP; //@line 27823
   return;
  }
  ___async_unwind = 0; //@line 27826
  HEAP32[$ReallocAsyncCtx3 >> 2] = 537; //@line 27827
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 27828
  HEAP32[$12 >> 2] = $2; //@line 27829
  sp = STACKTOP; //@line 27830
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27833
  FUNCTION_TABLE_vii[$10 & 15]($7, $6); //@line 27834
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 536; //@line 27837
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 27838
   HEAP32[$11 >> 2] = $2; //@line 27839
   sp = STACKTOP; //@line 27840
   return;
  }
  ___async_unwind = 0; //@line 27843
  HEAP32[$ReallocAsyncCtx2 >> 2] = 536; //@line 27844
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 27845
  HEAP32[$11 >> 2] = $2; //@line 27846
  sp = STACKTOP; //@line 27847
  return;
 }
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21288
 $1 = $0 + 4 | 0; //@line 21289
 $2 = HEAP32[$1 >> 2] | 0; //@line 21290
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 21293
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 21294
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 21295
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 529; //@line 21298
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 21300
  sp = STACKTOP; //@line 21301
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21304
 $7 = HEAP32[$1 >> 2] | 0; //@line 21305
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 21308
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21309
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 21310
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 530; //@line 21313
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 21315
  sp = STACKTOP; //@line 21316
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21319
 $12 = HEAP32[$1 >> 2] | 0; //@line 21320
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 21323
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21324
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 21325
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 531; //@line 21328
  sp = STACKTOP; //@line 21329
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21332
  return;
 }
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21236
 $1 = $0 + 4 | 0; //@line 21237
 $2 = HEAP32[$1 >> 2] | 0; //@line 21238
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 21241
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 21242
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 21243
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 526; //@line 21246
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 21248
  sp = STACKTOP; //@line 21249
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21252
 $7 = HEAP32[$1 >> 2] | 0; //@line 21253
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 21256
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21257
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 21258
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 527; //@line 21261
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 21263
  sp = STACKTOP; //@line 21264
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21267
 $12 = HEAP32[$1 >> 2] | 0; //@line 21268
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 21271
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21272
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 21273
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 528; //@line 21276
  sp = STACKTOP; //@line 21277
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21280
  return;
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19725
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19729
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19731
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19733
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19735
 $11 = $4 + 12 | 0; //@line 19737
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19738
 $14 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($6) | 0) + 16 >> 0] | 0; //@line 19741
 $17 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($6) | 0) + 17 >> 0] | 0; //@line 19744
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 19745
 $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $14, $17) | 0; //@line 19746
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 296; //@line 19749
  $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 19750
  HEAP32[$19 >> 2] = $11; //@line 19751
  $20 = $ReallocAsyncCtx6 + 8 | 0; //@line 19752
  HEAP32[$20 >> 2] = $10; //@line 19753
  sp = STACKTOP; //@line 19754
  return;
 }
 HEAP32[___async_retval >> 2] = $18; //@line 19758
 ___async_unwind = 0; //@line 19759
 HEAP32[$ReallocAsyncCtx6 >> 2] = 296; //@line 19760
 $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 19761
 HEAP32[$19 >> 2] = $11; //@line 19762
 $20 = $ReallocAsyncCtx6 + 8 | 0; //@line 19763
 HEAP32[$20 >> 2] = $10; //@line 19764
 sp = STACKTOP; //@line 19765
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_375($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28544
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28546
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28548
 $6 = HEAP32[$2 + 2512 >> 2] | 0; //@line 28550
 if (!$6) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 28554
  __ZN12radio_eventsD2Ev($2 + 2384 | 0); //@line 28555
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 156; //@line 28558
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 28559
   HEAP32[$12 >> 2] = $2; //@line 28560
   sp = STACKTOP; //@line 28561
   return;
  }
  ___async_unwind = 0; //@line 28564
  HEAP32[$ReallocAsyncCtx5 >> 2] = 156; //@line 28565
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 28566
  HEAP32[$12 >> 2] = $2; //@line 28567
  sp = STACKTOP; //@line 28568
  return;
 } else {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 28572
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 28573
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 28574
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 28577
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 28578
   HEAP32[$10 >> 2] = $2; //@line 28579
   sp = STACKTOP; //@line 28580
   return;
  }
  ___async_unwind = 0; //@line 28583
  HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 28584
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 28585
  HEAP32[$10 >> 2] = $2; //@line 28586
  sp = STACKTOP; //@line 28587
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20563
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20565
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20567
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20569
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20571
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20573
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20575
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20577
 $16 = $8 + 12 | 0; //@line 20579
 HEAP32[$8 >> 2] = 450; //@line 20580
 HEAP32[$8 + 4 >> 2] = 0; //@line 20582
 HEAP32[$8 + 8 >> 2] = $2; //@line 20584
 HEAP32[$16 >> 2] = 860; //@line 20585
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 20586
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1816 | 0, $8); //@line 20587
 if (!___async) {
  ___async_unwind = 0; //@line 20590
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 451; //@line 20592
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 20594
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $14; //@line 20596
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 20598
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $4; //@line 20600
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 20602
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 20604
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $16; //@line 20606
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $8; //@line 20608
 sp = STACKTOP; //@line 20609
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_398($0) {
 $0 = $0 | 0;
 var $$059 = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $37 = 0, $4 = 0, $42 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30490
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30492
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30494
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 30498
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30500
 if (HEAP32[___async_retval >> 2] | 0) {
  $$059 = -1014; //@line 30507
  $42 = ___async_retval; //@line 30508
  HEAP32[$42 >> 2] = $$059; //@line 30509
  return;
 }
 $17 = HEAP32[$2 >> 2] | 0; //@line 30512
 $19 = HEAP16[$4 >> 1] | 0; //@line 30514
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 30516
 HEAP8[($19 & 65535) + ($6 + 1185) >> 0] = $17; //@line 30519
 $25 = HEAP16[$4 >> 1] | 0; //@line 30522
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 30524
 HEAP8[($25 & 65535) + ($6 + 1185) >> 0] = $17 >>> 8; //@line 30527
 $31 = HEAP16[$4 >> 1] | 0; //@line 30530
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 30532
 HEAP8[($31 & 65535) + ($6 + 1185) >> 0] = $17 >>> 16; //@line 30535
 $37 = HEAP16[$4 >> 1] | 0; //@line 30538
 HEAP16[$4 >> 1] = $37 + 1 << 16 >> 16; //@line 30540
 HEAP8[($37 & 65535) + ($6 + 1185) >> 0] = $17 >>> 24; //@line 30543
 HEAP32[$12 >> 2] = $10 & 255; //@line 30545
 _mbed_tracef(16, 12866, 13051, $12); //@line 30546
 $$059 = 0; //@line 30547
 $42 = ___async_retval; //@line 30548
 HEAP32[$42 >> 2] = $$059; //@line 30549
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_56($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22136
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22138
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22140
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22142
 if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
  $19 = HEAP8[$2 + 1182 >> 0] | 0; //@line 22148
  HEAP8[$2 + 1183 >> 0] = $19; //@line 22150
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $19, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $4); //@line 22155
  HEAP32[$2 + 1780 >> 2] = $4; //@line 22157
  return;
 }
 $12 = HEAP32[$2 + 1776 >> 2] | 0; //@line 22162
 $15 = (__ZN7LoRaPHY15get_ack_timeoutEv($2 + 4 | 0) | 0) + $12 | 0; //@line 22165
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 22166
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 1856 | 0, $15); //@line 22167
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 371; //@line 22170
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 22171
  HEAP32[$16 >> 2] = $2; //@line 22172
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 22173
  HEAP32[$17 >> 2] = $4; //@line 22174
  sp = STACKTOP; //@line 22175
  return;
 }
 ___async_unwind = 0; //@line 22178
 HEAP32[$ReallocAsyncCtx >> 2] = 371; //@line 22179
 $16 = $ReallocAsyncCtx + 4 | 0; //@line 22180
 HEAP32[$16 >> 2] = $2; //@line 22181
 $17 = $ReallocAsyncCtx + 8 | 0; //@line 22182
 HEAP32[$17 >> 2] = $4; //@line 22183
 sp = STACKTOP; //@line 22184
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_267($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20286
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20288
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20290
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 20292
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20294
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20296
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 20298
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20300
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20302
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20304
 $19 = HEAP32[$2 >> 2] | 0; //@line 20305
 $22 = HEAP32[(HEAP32[$19 >> 2] | 0) + 32 >> 2] | 0; //@line 20308
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 20309
 FUNCTION_TABLE_vii[$22 & 15]($19, $4); //@line 20310
 if (!___async) {
  ___async_unwind = 0; //@line 20313
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 507; //@line 20315
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 20317
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 20319
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 20321
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 20323
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 20325
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 20327
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 20329
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 20331
 sp = STACKTOP; //@line 20332
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14385
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14387
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14389
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14391
 $7 = $2 + 12 | 0; //@line 14392
 $8 = HEAP32[$7 >> 2] | 0; //@line 14393
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 14396
  HEAP32[$6 + 16 >> 2] = 0; //@line 14398
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 14402
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 14403
 FUNCTION_TABLE_vii[$11 & 15]($6, $2); //@line 14404
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 547; //@line 14407
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 14408
  HEAP32[$12 >> 2] = $7; //@line 14409
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 14410
  HEAP32[$13 >> 2] = $4; //@line 14411
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 14412
  HEAP32[$14 >> 2] = $6; //@line 14413
  sp = STACKTOP; //@line 14414
  return;
 }
 ___async_unwind = 0; //@line 14417
 HEAP32[$ReallocAsyncCtx2 >> 2] = 547; //@line 14418
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 14419
 HEAP32[$12 >> 2] = $7; //@line 14420
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 14421
 HEAP32[$13 >> 2] = $4; //@line 14422
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 14423
 HEAP32[$14 >> 2] = $6; //@line 14424
 sp = STACKTOP; //@line 14425
 return;
}
function _mbedtls_aes_crypt_ctr($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$lcssa = 0, $$023 = 0, $$024 = 0, $$02529 = 0, $$02628 = 0, $$030 = 0, $$in = 0, $14 = 0, $16 = 0, $25 = 0, $7 = 0;
 $7 = HEAP32[$2 >> 2] | 0; //@line 2532
 if ($7 >>> 0 > 15) {
  $$024 = -33; //@line 2535
  return $$024 | 0; //@line 2536
 }
 if (!$1) {
  $$0$lcssa = $7; //@line 2540
 } else {
  $$02529 = $6; //@line 2542
  $$02628 = $5; //@line 2542
  $$030 = $7; //@line 2542
  $$in = $1; //@line 2542
  while (1) {
   $$in = $$in + -1 | 0; //@line 2544
   L7 : do {
    if (!$$030) {
     _mbedtls_internal_aes_encrypt($0, $3, $4) | 0; //@line 2548
     $$023 = 16; //@line 2549
     do {
      if (($$023 | 0) <= 0) {
       break L7;
      }
      $$023 = $$023 + -1 | 0; //@line 2555
      $14 = $3 + $$023 | 0; //@line 2556
      $16 = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24; //@line 2558
      HEAP8[$14 >> 0] = $16; //@line 2559
     } while (!($16 << 24 >> 24));
    }
   } while (0);
   HEAP8[$$02529 >> 0] = HEAP8[$4 + $$030 >> 0] ^ HEAP8[$$02628 >> 0]; //@line 2575
   $25 = $$030 + 1 & 15; //@line 2577
   if (!$$in) {
    $$0$lcssa = $25; //@line 2580
    break;
   } else {
    $$02529 = $$02529 + 1 | 0; //@line 2583
    $$02628 = $$02628 + 1 | 0; //@line 2583
    $$030 = $25; //@line 2583
   }
  }
 }
 HEAP32[$2 >> 2] = $$0$lcssa; //@line 2587
 $$024 = 0; //@line 2588
 return $$024 | 0; //@line 2589
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 14872
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 14877
    $$0 = 1; //@line 14878
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 14891
     $$0 = 1; //@line 14892
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14896
     $$0 = -1; //@line 14897
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 14907
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 14911
    $$0 = 2; //@line 14912
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 14924
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 14930
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 14934
    $$0 = 3; //@line 14935
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 14945
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 14951
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 14957
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 14961
    $$0 = 4; //@line 14962
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14966
    $$0 = -1; //@line 14967
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14972
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_16($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 18836
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18838
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18840
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18842
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18844
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 18849
  return;
 }
 dest = $2 + 4 | 0; //@line 18853
 stop = dest + 52 | 0; //@line 18853
 do {
  HEAP32[dest >> 2] = 0; //@line 18853
  dest = dest + 4 | 0; //@line 18853
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 18854
 HEAP32[$2 + 8 >> 2] = $4; //@line 18856
 HEAP32[$2 + 12 >> 2] = -1; //@line 18858
 HEAP32[$2 + 48 >> 2] = 1; //@line 18860
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 18863
 $16 = HEAP32[$6 >> 2] | 0; //@line 18864
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 18865
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 18866
 if (!___async) {
  ___async_unwind = 0; //@line 18869
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 674; //@line 18871
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 18873
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 18875
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 18877
 sp = STACKTOP; //@line 18878
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16323
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 16327
  return $$0 | 0; //@line 16328
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 16334
  return $$0 | 0; //@line 16335
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 16337
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 16340
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16341
 $11 = FUNCTION_TABLE_iii[$10 & 31]($7, $1) | 0; //@line 16342
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 472; //@line 16345
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16347
  sp = STACKTOP; //@line 16348
  return 0; //@line 16349
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16351
 if (!$11) {
  $$0 = -1003; //@line 16353
  return $$0 | 0; //@line 16354
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 16356
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16357
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 16358
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 473; //@line 16361
  sp = STACKTOP; //@line 16362
  return 0; //@line 16363
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16365
 $$0 = 0; //@line 16366
 return $$0 | 0; //@line 16367
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_139($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28286
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28288
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28290
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28294
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 28296
 $12 = HEAP8[$0 + 21 >> 0] | 0; //@line 28298
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 28300
 $15 = $2 + 12 | 0; //@line 28302
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 28303
 $16 = $2 + 16 | 0; //@line 28304
 HEAP8[$16 >> 0] = $10; //@line 28305
 HEAP8[$2 + 17 >> 0] = $12; //@line 28307
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 28308
 $18 = _equeue_alloc($14, 20) | 0; //@line 28309
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 28313
  ___async_unwind = 0; //@line 28314
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 311; //@line 28316
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $15; //@line 28318
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $16; //@line 28320
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $14; //@line 28322
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $15; //@line 28324
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $8; //@line 28326
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $2; //@line 28328
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $4; //@line 28330
 sp = STACKTOP; //@line 28331
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_213($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $21 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16838
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16842
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16844
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16846
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16848
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16852
 if (!(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] & 1)) {
  $21 = (__ZNK7LoRaMac16get_device_classEv($4) | 0) == 2; //@line 16860
  HEAP32[$6 >> 2] = $21 ? 5 : 2; //@line 16862
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($4) | 0) + 4 >> 0] | 0)) {
  HEAP8[$8 + 2911 >> 0] = 1; //@line 16870
  return;
 }
 _mbed_tracef(16, 12187, 12409, $10); //@line 16873
 __ZN7LoRaMac21post_process_mlme_indEv($4); //@line 16874
 _mbed_tracef(16, 12187, 12433, $14); //@line 16875
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16876
 __ZN12LoRaWANStack23mlme_indication_handlerEv($8); //@line 16877
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 16880
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 16881
  HEAP32[$26 >> 2] = $8; //@line 16882
  sp = STACKTOP; //@line 16883
  return;
 }
 ___async_unwind = 0; //@line 16886
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 16887
 $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 16888
 HEAP32[$26 >> 2] = $8; //@line 16889
 sp = STACKTOP; //@line 16890
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_176($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13071
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13075
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13079
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13081
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13083
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13085
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13087
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13089
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13091
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 4 >> 2] | 0, $4 | 0, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 13094
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 13096
 _mbedtls_platform_zeroize($8, 16); //@line 13097
 if (!___async) {
  ___async_unwind = 0; //@line 13100
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 590; //@line 13102
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $10; //@line 13104
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $12; //@line 13106
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $14; //@line 13108
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $4; //@line 13110
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $AsyncRetVal; //@line 13112
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $16; //@line 13114
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $18; //@line 13116
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $8; //@line 13118
 sp = STACKTOP; //@line 13119
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_382($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28937
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28941
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28943
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28945
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28947
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28949
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 28952
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 28953
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 28959
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 28960
   if (!___async) {
    ___async_unwind = 0; //@line 28963
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 687; //@line 28965
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 28967
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 28969
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 28971
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 28973
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 28975
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 28977
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 28980
   sp = STACKTOP; //@line 28981
   return;
  }
 }
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7637
 STACKTOP = STACKTOP + 16 | 0; //@line 7638
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7638
 _mbed_tracef(16, 12187, 12378, sp); //@line 7640
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7641
 __ZN7LoRaMac19on_radio_tx_timeoutEv($0); //@line 7642
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 264; //@line 7645
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7647
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 7649
  sp = STACKTOP; //@line 7650
  STACKTOP = sp; //@line 7651
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7653
 $3 = $0 + 2904 | 0; //@line 7654
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -18 | 1; //@line 7658
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7659
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 7660
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 265; //@line 7663
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 7665
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7667
  sp = STACKTOP; //@line 7668
  STACKTOP = sp; //@line 7669
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7671
  $10 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 7673
  HEAP32[$0 + 2496 >> 2] = $10 ? 5 : 2; //@line 7676
  STACKTOP = sp; //@line 7677
  return;
 }
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_135($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27934
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27936
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27938
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 27940
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 27942
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2020 >> 2] = 13; //@line 27948
 }
 $12 = $2 + 476 | 0; //@line 27950
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27954
 $16 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($12, $4, 0, $6, $8, $2 + 2084 | 0, $2 + 1876 | 0, $2 + 4 | 0) | 0; //@line 27955
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 382; //@line 27958
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 27959
  HEAP32[$17 >> 2] = $12; //@line 27960
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 27961
  HEAP32[$18 >> 2] = $2; //@line 27962
  sp = STACKTOP; //@line 27963
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 27967
 ___async_unwind = 0; //@line 27968
 HEAP32[$ReallocAsyncCtx4 >> 2] = 382; //@line 27969
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 27970
 HEAP32[$17 >> 2] = $12; //@line 27971
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 27972
 HEAP32[$18 >> 2] = $2; //@line 27973
 sp = STACKTOP; //@line 27974
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27680
 HEAP8[$2 + 2376 >> 0] = 0; //@line 27682
 HEAP8[$2 + 1181 >> 0] = 0; //@line 27684
 HEAP8[$2 + 1175 >> 0] = 1; //@line 27686
 HEAP8[$2 + 1177 >> 0] = 0; //@line 27688
 HEAP8[$2 + 1178 >> 0] = 0; //@line 27690
 $8 = $2 + 476 | 0; //@line 27691
 __ZN14LoRaMacCommand20clear_command_bufferEv($8); //@line 27692
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($8); //@line 27693
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($8); //@line 27694
 $9 = $2 + 2052 | 0; //@line 27695
 HEAP32[$9 >> 2] = 0; //@line 27696
 HEAP32[$9 + 4 >> 2] = 0; //@line 27696
 HEAP32[$9 + 8 >> 2] = 0; //@line 27696
 HEAP32[$9 + 12 >> 2] = 0; //@line 27696
 HEAP32[$9 + 16 >> 2] = 0; //@line 27696
 HEAP32[$9 + 20 >> 2] = 0; //@line 27696
 HEAP32[$2 + 2056 >> 2] = 1; //@line 27698
 $11 = $2 + 2084 | 0; //@line 27699
 HEAP32[$11 >> 2] = 0; //@line 27700
 HEAP32[$11 + 4 >> 2] = 0; //@line 27700
 HEAP32[$11 + 8 >> 2] = 0; //@line 27700
 HEAP32[$11 + 12 >> 2] = 0; //@line 27700
 HEAP32[$11 + 16 >> 2] = 0; //@line 27700
 HEAP32[$2 + 2092 >> 2] = 1; //@line 27702
 dest = $2 + 2012 | 0; //@line 27704
 stop = dest + 40 | 0; //@line 27704
 do {
  HEAP32[dest >> 2] = 0; //@line 27704
  dest = dest + 4 | 0; //@line 27704
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 + 2020 >> 2] = 1; //@line 27706
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_259($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19867
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19871
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19873
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19874
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19878
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19879
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 19880
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 19883
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 19884
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19885
   sp = STACKTOP; //@line 19886
   return;
  }
  ___async_unwind = 0; //@line 19889
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 19890
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 19891
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19892
  sp = STACKTOP; //@line 19893
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 19900
 _mbed_assert_internal(12080, 12089, 881); //@line 19901
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 298; //@line 19904
  sp = STACKTOP; //@line 19905
  return;
 }
 ___async_unwind = 0; //@line 19908
 HEAP32[$ReallocAsyncCtx10 >> 2] = 298; //@line 19909
 sp = STACKTOP; //@line 19910
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29517
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29519
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29521
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29525
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29527
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29529
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 29532
  _mbed_tracef(2, 12866, 12955, $4); //@line 29533
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29535
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 29538
 $13 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 29539
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 409; //@line 29542
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 29543
  HEAP32[$14 >> 2] = $8; //@line 29544
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 29545
  HEAP32[$15 >> 2] = $10; //@line 29546
  sp = STACKTOP; //@line 29547
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 29551
 ___async_unwind = 0; //@line 29552
 HEAP32[$ReallocAsyncCtx3 >> 2] = 409; //@line 29553
 $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 29554
 HEAP32[$14 >> 2] = $8; //@line 29555
 $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 29556
 HEAP32[$15 >> 2] = $10; //@line 29557
 sp = STACKTOP; //@line 29558
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_37($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 21153
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21155
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21157
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21159
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21161
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21163
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21165
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21167
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 21170
 $16 = $2 + 1172 | 0; //@line 21171
 HEAP8[$16 >> 0] = 1; //@line 21172
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(36) | 0; //@line 21173
 __ZN7LoRaPHY25setup_public_network_modeEb($10, 1); //@line 21174
 if (!___async) {
  ___async_unwind = 0; //@line 21177
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 445; //@line 21179
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 21181
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 21183
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 21185
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 21187
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $16; //@line 21189
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $10; //@line 21191
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $12; //@line 21193
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $14; //@line 21195
 sp = STACKTOP; //@line 21196
 return;
}
function __ZN7LoRaMac4joinEb__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21809
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21811
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21813
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21817
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21819
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21821
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 21824
  _mbed_tracef(2, 12866, 12955, $4); //@line 21825
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 21827
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 21830
 $13 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 21831
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 443; //@line 21834
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 21835
  HEAP32[$14 >> 2] = $8; //@line 21836
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 21837
  HEAP32[$15 >> 2] = $10; //@line 21838
  sp = STACKTOP; //@line 21839
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 21843
 ___async_unwind = 0; //@line 21844
 HEAP32[$ReallocAsyncCtx2 >> 2] = 443; //@line 21845
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 21846
 HEAP32[$14 >> 2] = $8; //@line 21847
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 21848
 HEAP32[$15 >> 2] = $10; //@line 21849
 sp = STACKTOP; //@line 21850
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5903
 STACKTOP = STACKTOP + 16 | 0; //@line 5904
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5904
 $$byval_copy = sp + 8 | 0; //@line 5905
 $1 = sp; //@line 5906
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 5908
 HEAP32[$1 >> 2] = 197; //@line 5909
 HEAP32[$1 + 4 >> 2] = 0; //@line 5911
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5912
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 5913
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 5913
 $4 = __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 5914
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 198; //@line 5917
  sp = STACKTOP; //@line 5918
  STACKTOP = sp; //@line 5919
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5921
 if ($4 | 0) {
  STACKTOP = sp; //@line 5924
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5926
 _mbed_assert_internal(12080, 12089, 539); //@line 5927
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 199; //@line 5930
  sp = STACKTOP; //@line 5931
  STACKTOP = sp; //@line 5932
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5934
 STACKTOP = sp; //@line 5935
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_30($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20616
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20618
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20620
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20622
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20624
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20626
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20628
 $14 = $4 + 12 | 0; //@line 20630
 HEAP32[$4 >> 2] = 453; //@line 20631
 HEAP32[$4 + 4 >> 2] = 0; //@line 20633
 HEAP32[$4 + 8 >> 2] = $2; //@line 20635
 HEAP32[$14 >> 2] = 860; //@line 20636
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 20637
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1836 | 0, $4); //@line 20638
 if (!___async) {
  ___async_unwind = 0; //@line 20641
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 454; //@line 20643
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $14; //@line 20645
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $2; //@line 20647
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $8; //@line 20649
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $6; //@line 20651
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $4; //@line 20653
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $10; //@line 20655
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $12; //@line 20657
 sp = STACKTOP; //@line 20658
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5716
 STACKTOP = STACKTOP + 16 | 0; //@line 5717
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5717
 $$byval_copy = sp + 8 | 0; //@line 5718
 $1 = sp; //@line 5719
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 5721
 HEAP32[$1 >> 2] = 188; //@line 5722
 HEAP32[$1 + 4 >> 2] = 0; //@line 5724
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5725
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 5726
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 5726
 $4 = __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 5727
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 189; //@line 5730
  sp = STACKTOP; //@line 5731
  STACKTOP = sp; //@line 5732
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5734
 if ($4 | 0) {
  STACKTOP = sp; //@line 5737
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5739
 _mbed_assert_internal(12080, 12089, 507); //@line 5740
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 190; //@line 5743
  sp = STACKTOP; //@line 5744
  STACKTOP = sp; //@line 5745
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5747
 STACKTOP = sp; //@line 5748
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9284
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 9286
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 9288
 $5 = $0 + 12 | 0; //@line 9289
 $6 = HEAP32[$5 >> 2] | 0; //@line 9290
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9294
   _mbed_assert_internal(14946, 14951, 1677); //@line 9295
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 323; //@line 9298
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 9300
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 9302
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 9304
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 9306
    sp = STACKTOP; //@line 9307
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9310
    $13 = HEAP32[$5 >> 2] | 0; //@line 9312
    break;
   }
  } else {
   $13 = $6; //@line 9316
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 9319
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9320
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 9321
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 324; //@line 9324
  sp = STACKTOP; //@line 9325
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9328
  return;
 }
}
function __ZN12radio_eventsD2Ev__async_cb_364($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27877
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27879
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 27881
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 27886
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27887
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 27888
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 27891
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 27892
   HEAP32[$9 >> 2] = $2; //@line 27893
   sp = STACKTOP; //@line 27894
   return;
  }
  ___async_unwind = 0; //@line 27897
  HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 27898
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 27899
  HEAP32[$9 >> 2] = $2; //@line 27900
  sp = STACKTOP; //@line 27901
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 27905
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 27911
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27912
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 27913
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 27916
  sp = STACKTOP; //@line 27917
  return;
 }
 ___async_unwind = 0; //@line 27920
 HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 27921
 sp = STACKTOP; //@line 27922
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_284($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22033
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22035
 if ((HEAP32[$2 + 2380 >> 2] | 0) == 2) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 22040
  __ZN7LoRaMac15open_rx2_windowEv($2); //@line 22041
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 402; //@line 22044
   $6 = $ReallocAsyncCtx + 4 | 0; //@line 22045
   HEAP32[$6 >> 2] = $2; //@line 22046
   sp = STACKTOP; //@line 22047
   return;
  }
  ___async_unwind = 0; //@line 22050
  HEAP32[$ReallocAsyncCtx >> 2] = 402; //@line 22051
  $6 = $ReallocAsyncCtx + 4 | 0; //@line 22052
  HEAP32[$6 >> 2] = $2; //@line 22053
  sp = STACKTOP; //@line 22054
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 22058
  __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 22059
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 403; //@line 22062
   $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 22063
   HEAP32[$8 >> 2] = $2; //@line 22064
   sp = STACKTOP; //@line 22065
   return;
  }
  ___async_unwind = 0; //@line 22068
  HEAP32[$ReallocAsyncCtx2 >> 2] = 403; //@line 22069
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 22070
  HEAP32[$8 >> 2] = $2; //@line 22071
  sp = STACKTOP; //@line 22072
  return;
 }
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 2911
 HEAP32[$0 + 20 >> 2] = 0; //@line 2913
 $5 = $0 + 16 | 0; //@line 2914
 HEAP32[$5 >> 2] = 0; //@line 2915
 if ($1 | 0) {
  $$034 = $1; //@line 2918
  $22 = 0; //@line 2918
  do {
   $22 = $22 + 1 | 0; //@line 2920
   $$034 = $$034 >>> 1; //@line 2921
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 2929
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 2932
 HEAP32[$0 + 28 >> 2] = $1; //@line 2934
 HEAP32[$0 + 32 >> 2] = $2; //@line 2936
 HEAP32[$0 >> 2] = 0; //@line 2937
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 2940
 HEAP8[$0 + 9 >> 0] = 0; //@line 2942
 HEAP8[$0 + 8 >> 0] = 0; //@line 2944
 HEAP8[$0 + 36 >> 0] = 0; //@line 2946
 HEAP32[$0 + 40 >> 2] = 0; //@line 2948
 HEAP32[$0 + 44 >> 2] = 0; //@line 2950
 HEAP8[$0 + 184 >> 0] = 0; //@line 2952
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 2954
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 2957
  return $$033 | 0; //@line 2958
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 2961
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 2964
  return $$033 | 0; //@line 2965
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 2968
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 2971
 return $$033 | 0; //@line 2972
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 13756
  $8 = $0; //@line 13756
  $9 = $1; //@line 13756
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13758
   $$0914 = $$0914 + -1 | 0; //@line 13762
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 13763
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13764
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 13772
   }
  }
  $$010$lcssa$off0 = $8; //@line 13777
  $$09$lcssa = $$0914; //@line 13777
 } else {
  $$010$lcssa$off0 = $0; //@line 13779
  $$09$lcssa = $2; //@line 13779
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 13783
 } else {
  $$012 = $$010$lcssa$off0; //@line 13785
  $$111 = $$09$lcssa; //@line 13785
  while (1) {
   $26 = $$111 + -1 | 0; //@line 13790
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 13791
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 13795
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 13798
    $$111 = $26; //@line 13798
   }
  }
 }
 return $$1$lcssa | 0; //@line 13802
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_95($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24940
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24942
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24944
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24946
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24948
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24950
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24954
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24956
 $17 = $14 + 12 | 0; //@line 24958
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 24959
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 24960
 $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($16, $14, 7) | 0; //@line 24961
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 24965
  ___async_unwind = 0; //@line 24966
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 245; //@line 24968
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 24970
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 24972
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 24974
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $17; //@line 24976
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $8; //@line 24978
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $10; //@line 24980
 sp = STACKTOP; //@line 24981
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_166($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12345
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12349
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12351
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12353
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4; //@line 12358
  HEAP32[$8 + 2496 >> 2] = 2; //@line 12360
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 12363
 _mbed_assert_internal(12080, 12089, 775); //@line 12364
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 321; //@line 12367
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 12368
  HEAP32[$10 >> 2] = $4; //@line 12369
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 12370
  HEAP32[$11 >> 2] = $6; //@line 12371
  $12 = $ReallocAsyncCtx4 + 12 | 0; //@line 12372
  HEAP32[$12 >> 2] = $8; //@line 12373
  sp = STACKTOP; //@line 12374
  return;
 }
 ___async_unwind = 0; //@line 12377
 HEAP32[$ReallocAsyncCtx4 >> 2] = 321; //@line 12378
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 12379
 HEAP32[$10 >> 2] = $4; //@line 12380
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 12381
 HEAP32[$11 >> 2] = $6; //@line 12382
 $12 = $ReallocAsyncCtx4 + 12 | 0; //@line 12383
 HEAP32[$12 >> 2] = $8; //@line 12384
 sp = STACKTOP; //@line 12385
 return;
}
function _mbedtls_cipher_free__async_cb_360($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27377
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27381
 _free(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0); //@line 27383
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 27385
 if (!$7) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 27388
  _mbedtls_platform_zeroize($4, 68); //@line 27389
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 564; //@line 27392
   sp = STACKTOP; //@line 27393
   return;
  }
  ___async_unwind = 0; //@line 27396
  HEAP32[$ReallocAsyncCtx2 >> 2] = 564; //@line 27397
  sp = STACKTOP; //@line 27398
  return;
 } else {
  $13 = HEAP32[(HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0) + 28 >> 2] | 0; //@line 27405
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 27406
  FUNCTION_TABLE_vi[$13 & 1023]($7); //@line 27407
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 563; //@line 27410
   $14 = $ReallocAsyncCtx + 4 | 0; //@line 27411
   HEAP32[$14 >> 2] = $4; //@line 27412
   sp = STACKTOP; //@line 27413
   return;
  }
  ___async_unwind = 0; //@line 27416
  HEAP32[$ReallocAsyncCtx >> 2] = 563; //@line 27417
  $14 = $ReallocAsyncCtx + 4 | 0; //@line 27418
  HEAP32[$14 >> 2] = $4; //@line 27419
  sp = STACKTOP; //@line 27420
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_122($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27254
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27256
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27258
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27260
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27262
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27264
 $13 = $4 + 12 | 0; //@line 27268
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 27269
 $14 = $4 + 16 | 0; //@line 27270
 HEAP32[$14 >> 2] = $8; //@line 27271
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 27272
 $15 = _equeue_alloc($10, 20) | 0; //@line 27273
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 27277
  ___async_unwind = 0; //@line 27278
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 254; //@line 27280
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 27282
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $6; //@line 27284
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $13; //@line 27286
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $14; //@line 27288
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 27290
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $13; //@line 27292
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $4; //@line 27294
 sp = STACKTOP; //@line 27295
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 19538
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 19540
 $8 = $7 & 255; //@line 19541
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 19543
 $10 = $$ & 255; //@line 19544
 HEAP8[$4 + 1 >> 0] = $10; //@line 19546
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 19548
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 19551
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 19557
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 19564
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 19570
 } else {
  $28 = $$ & 255; //@line 19572
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 19583
 }
 $41 = $2 & 255; //@line 19587
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 19597
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 19599
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 19600
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 19609
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_249($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19357
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19359
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19363
 $8 = $0 + 16 | 0; //@line 19365
 $10 = HEAP32[$8 >> 2] | 0; //@line 19367
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 19370
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 19372
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 19374
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 19376
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 19377
 $18 = HEAP32[$2 >> 2] | 0; //@line 19378
 if (!$18) {
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($15); //@line 19381
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 19385
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19386
 FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 19387
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 55; //@line 19390
  $22 = $ReallocAsyncCtx6 + 4 | 0; //@line 19391
  HEAP32[$22 >> 2] = $15; //@line 19392
  sp = STACKTOP; //@line 19393
  return;
 }
 ___async_unwind = 0; //@line 19396
 HEAP32[$ReallocAsyncCtx6 >> 2] = 55; //@line 19397
 $22 = $ReallocAsyncCtx6 + 4 | 0; //@line 19398
 HEAP32[$22 >> 2] = $15; //@line 19399
 sp = STACKTOP; //@line 19400
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_185($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13987
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 13991
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13993
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13995
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13997
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13999
 $13 = $8 + 12 | 0; //@line 14001
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14002
 $14 = $8 + 16 | 0; //@line 14003
 HEAP8[$14 >> 0] = $4; //@line 14004
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 14005
 $15 = _equeue_alloc($10, 20) | 0; //@line 14006
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 14010
  ___async_unwind = 0; //@line 14011
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 208; //@line 14013
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $13; //@line 14015
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $14; //@line 14017
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $10; //@line 14019
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $13; //@line 14021
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $6; //@line 14023
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $8; //@line 14025
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $12; //@line 14027
 sp = STACKTOP; //@line 14028
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_234($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18247
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18249
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18251
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18253
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18255
 HEAP8[$2 + 2026 >> 0] = HEAP8[$2 + 1941 >> 0] | 0; //@line 18259
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 18260
 __ZN7LoRaPHY9rx_configEP18rx_config_params_t($4, $6) | 0; //@line 18261
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 423; //@line 18264
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 18265
  HEAP32[$12 >> 2] = $8; //@line 18266
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 18267
  HEAP32[$13 >> 2] = $2; //@line 18268
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 18269
  HEAP32[$14 >> 2] = $4; //@line 18270
  sp = STACKTOP; //@line 18271
  return;
 }
 ___async_unwind = 0; //@line 18274
 HEAP32[$ReallocAsyncCtx3 >> 2] = 423; //@line 18275
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 18276
 HEAP32[$12 >> 2] = $8; //@line 18277
 $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 18278
 HEAP32[$13 >> 2] = $2; //@line 18279
 $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 18280
 HEAP32[$14 >> 2] = $4; //@line 18281
 sp = STACKTOP; //@line 18282
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_306($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 24999
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25005
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25007
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio(HEAP32[$0 + 8 >> 2] | 0, $6); //@line 25008
 $11 = HEAP32[(HEAP32[$6 >> 2] | 0) + 72 >> 2] | 0; //@line 25011
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 25012
 FUNCTION_TABLE_vi[$11 & 1023]($6); //@line 25013
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 185; //@line 25016
  $12 = $ReallocAsyncCtx16 + 4 | 0; //@line 25017
  HEAP32[$12 >> 2] = $6; //@line 25018
  $13 = $ReallocAsyncCtx16 + 8 | 0; //@line 25019
  HEAP32[$13 >> 2] = $8; //@line 25020
  $14 = $ReallocAsyncCtx16 + 12 | 0; //@line 25021
  HEAP32[$14 >> 2] = $6; //@line 25022
  sp = STACKTOP; //@line 25023
  return;
 }
 ___async_unwind = 0; //@line 25026
 HEAP32[$ReallocAsyncCtx16 >> 2] = 185; //@line 25027
 $12 = $ReallocAsyncCtx16 + 4 | 0; //@line 25028
 HEAP32[$12 >> 2] = $6; //@line 25029
 $13 = $ReallocAsyncCtx16 + 8 | 0; //@line 25030
 HEAP32[$13 >> 2] = $8; //@line 25031
 $14 = $ReallocAsyncCtx16 + 12 | 0; //@line 25032
 HEAP32[$14 >> 2] = $6; //@line 25033
 sp = STACKTOP; //@line 25034
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_39($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 21211
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21213
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21215
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21217
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21219
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21221
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21223
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21225
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21227
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 21228
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 21229
 if (!___async) {
  ___async_unwind = 0; //@line 21232
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 446; //@line 21234
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 21236
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 21238
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 21240
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 21242
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 21244
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 21246
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 21248
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 21250
 sp = STACKTOP; //@line 21251
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28673
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28675
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28679
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28681
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28683
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28685
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 28689
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 28692
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 28693
   if (!___async) {
    ___async_unwind = 0; //@line 28696
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 691; //@line 28698
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 28700
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 28702
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 28704
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 28706
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 28708
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 28710
   sp = STACKTOP; //@line 28711
   return;
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 11258
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 11263
   label = 4; //@line 11264
  } else {
   $$01519 = $0; //@line 11266
   $23 = $1; //@line 11266
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 11271
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 11274
    $23 = $6; //@line 11275
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 11279
     label = 4; //@line 11280
     break;
    } else {
     $$01519 = $6; //@line 11283
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 11289
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 11291
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 11299
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 11307
  } else {
   $$pn = $$0; //@line 11309
   while (1) {
    $19 = $$pn + 1 | 0; //@line 11311
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 11315
     break;
    } else {
     $$pn = $19; //@line 11318
    }
   }
  }
  $$sink = $$1$lcssa; //@line 11323
 }
 return $$sink - $1 | 0; //@line 11326
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2306
 $2 = $0; //@line 2307
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 2312
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 2316
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2317
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 2318
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 102; //@line 2321
      sp = STACKTOP; //@line 2322
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2325
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 2333
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 2337
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2338
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 2339
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 103; //@line 2342
      sp = STACKTOP; //@line 2343
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2346
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 16463
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 16470
   $10 = $1 + 16 | 0; //@line 16471
   $11 = HEAP32[$10 >> 2] | 0; //@line 16472
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 16475
    HEAP32[$1 + 24 >> 2] = $4; //@line 16477
    HEAP32[$1 + 36 >> 2] = 1; //@line 16479
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 16489
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 16494
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 16497
    HEAP8[$1 + 54 >> 0] = 1; //@line 16499
    break;
   }
   $21 = $1 + 24 | 0; //@line 16502
   $22 = HEAP32[$21 >> 2] | 0; //@line 16503
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 16506
    $28 = $4; //@line 16507
   } else {
    $28 = $22; //@line 16509
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 16518
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7590
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 7592
 $3 = $0 + 12 | 0; //@line 7593
 $4 = HEAP32[$3 >> 2] | 0; //@line 7594
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7598
   _mbed_assert_internal(14946, 14951, 1102); //@line 7599
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 262; //@line 7602
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 7604
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7606
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 7608
    sp = STACKTOP; //@line 7609
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7612
    $10 = HEAP32[$3 >> 2] | 0; //@line 7614
    break;
   }
  } else {
   $10 = $4; //@line 7618
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 7621
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7622
 FUNCTION_TABLE_vii[$9 & 15]($0, $2); //@line 7623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 263; //@line 7626
  sp = STACKTOP; //@line 7627
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7630
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6341
 $3 = (HEAP8[$0 + 16 >> 0] | 0) != 0; //@line 6344
 $4 = $0 + 12 | 0; //@line 6345
 $5 = HEAP32[$4 >> 2] | 0; //@line 6346
 do {
  if (!$5) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6350
   _mbed_assert_internal(14946, 14951, 1102); //@line 6351
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 216; //@line 6354
    HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 6356
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 6358
    HEAP8[$AsyncCtx2 + 12 >> 0] = $3 & 1; //@line 6361
    sp = STACKTOP; //@line 6362
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6365
    $11 = HEAP32[$4 >> 2] | 0; //@line 6367
    break;
   }
  } else {
   $11 = $5; //@line 6371
  }
 } while (0);
 $10 = HEAP32[$11 >> 2] | 0; //@line 6374
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6375
 FUNCTION_TABLE_vii[$10 & 15]($0, $3); //@line 6376
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 217; //@line 6379
  sp = STACKTOP; //@line 6380
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6383
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb_171($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12591
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12593
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12595
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12597
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12599
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12601
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12603
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12605
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12607
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 12608
 _mbedtls_platform_zeroize($2, 16); //@line 12609
 if (!___async) {
  ___async_unwind = 0; //@line 12612
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 591; //@line 12614
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 12616
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 12618
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 12620
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 12622
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 12624
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 12626
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $2; //@line 12628
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 12630
 sp = STACKTOP; //@line 12631
 return;
}
function __ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$026 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 17239
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17241
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17243
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17245
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $$026 = $2 ? -1006 : -1004; //@line 17251
  $27 = ___async_retval; //@line 17252
  HEAP32[$27 >> 2] = $$026; //@line 17253
  return;
 }
 if ($2) {
  $$026 = $2 ? -1005 : -1004; //@line 17258
  $27 = ___async_retval; //@line 17259
  HEAP32[$27 >> 2] = $$026; //@line 17260
  return;
 }
 $10 = $4 + 124 | 0; //@line 17263
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 17265
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 17266
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 17266
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 17266
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 17271
 $22 = (HEAP32[$4 + 116 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 17277
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 17282
 $$026 = 0; //@line 17283
 $27 = ___async_retval; //@line 17284
 HEAP32[$27 >> 2] = $$026; //@line 17285
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1006
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 1009
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1010
 FUNCTION_TABLE_vii[$6 & 15]($0, $1); //@line 1011
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 64; //@line 1014
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1016
  HEAP16[$AsyncCtx + 8 >> 1] = $3; //@line 1018
  HEAP8[$AsyncCtx + 10 >> 0] = $2; //@line 1020
  sp = STACKTOP; //@line 1021
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1024
 $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 1027
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1029
 FUNCTION_TABLE_viiiiiiiiiiiiii[$12 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $3 & 65535); //@line 1030
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 65; //@line 1033
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 1035
  sp = STACKTOP; //@line 1036
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1039
  HEAP8[$0 + 688 >> 0] = 2; //@line 1041
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1042
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_31($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20665
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20667
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20669
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20671
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20673
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20675
 $12 = $4 + 12 | 0; //@line 20677
 HEAP32[$4 >> 2] = 456; //@line 20678
 HEAP32[$4 + 4 >> 2] = 0; //@line 20680
 HEAP32[$4 + 8 >> 2] = $2; //@line 20682
 HEAP32[$12 >> 2] = 860; //@line 20683
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 20684
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1856 | 0, $4); //@line 20685
 if (!___async) {
  ___async_unwind = 0; //@line 20688
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 457; //@line 20690
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $12; //@line 20692
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 20694
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 20696
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 20698
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 20700
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $4; //@line 20702
 sp = STACKTOP; //@line 20703
 return;
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2861
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 2866
  return $$0 | 0; //@line 2867
 }
 dest = $0; //@line 2869
 stop = dest + 68 | 0; //@line 2869
 do {
  HEAP32[dest >> 2] = 0; //@line 2869
  dest = dest + 4 | 0; //@line 2869
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 2873
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2874
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 2875
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 565; //@line 2878
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2880
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2882
  sp = STACKTOP; //@line 2883
  return 0; //@line 2884
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2886
 HEAP32[$0 + 60 >> 2] = $8; //@line 2888
 if (!$8) {
  $$0 = -24960; //@line 2891
  return $$0 | 0; //@line 2892
 }
 HEAP32[$0 >> 2] = $1; //@line 2894
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 2899
  return $$0 | 0; //@line 2900
 }
 HEAP32[$0 + 12 >> 2] = 5; //@line 2903
 HEAP32[$0 + 16 >> 2] = 18; //@line 2905
 $$0 = 0; //@line 2906
 return $$0 | 0; //@line 2907
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21571
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21575
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21577
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21579
 $9 = $4 + 12 | 0; //@line 21581
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21582
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 21583
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 21584
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 335; //@line 21587
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 21588
  HEAP32[$11 >> 2] = $9; //@line 21589
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 21590
  HEAP32[$12 >> 2] = $8; //@line 21591
  sp = STACKTOP; //@line 21592
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 21596
 ___async_unwind = 0; //@line 21597
 HEAP32[$ReallocAsyncCtx5 >> 2] = 335; //@line 21598
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 21599
 HEAP32[$11 >> 2] = $9; //@line 21600
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 21601
 HEAP32[$12 >> 2] = $8; //@line 21602
 sp = STACKTOP; //@line 21603
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15957
 $1 = HEAP32[2598] | 0; //@line 15958
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 15964
 } else {
  $19 = 0; //@line 15966
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 15972
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 15978
    $12 = HEAP32[$11 >> 2] | 0; //@line 15979
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 15985
     HEAP8[$12 >> 0] = 10; //@line 15986
     $22 = 0; //@line 15987
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15991
   $17 = ___overflow($1, 10) | 0; //@line 15992
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 668; //@line 15995
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15997
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 15999
    sp = STACKTOP; //@line 16000
    return 0; //@line 16001
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16003
    $22 = $17 >> 31; //@line 16005
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 16012
 }
 return $22 | 0; //@line 16014
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2237
 HEAP32[$0 >> 2] = 604; //@line 2238
 _gpio_irq_free($0 + 28 | 0); //@line 2240
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2242
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2248
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2249
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2250
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 100; //@line 2253
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2255
    sp = STACKTOP; //@line 2256
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2259
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2265
 if (!$10) {
  __ZdlPv($0); //@line 2268
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2273
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2274
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2275
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 101; //@line 2278
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2280
  sp = STACKTOP; //@line 2281
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2284
 __ZdlPv($0); //@line 2285
 return;
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12187
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12189
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12191
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12193
 $7 = $2 + 12 | 0; //@line 12194
 $8 = HEAP32[$7 >> 2] | 0; //@line 12195
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 12198
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 12202
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 12203
 FUNCTION_TABLE_vii[$11 & 15]($6, $2); //@line 12204
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 481; //@line 12207
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 12208
  HEAP32[$12 >> 2] = $7; //@line 12209
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 12210
  HEAP32[$13 >> 2] = $4; //@line 12211
  sp = STACKTOP; //@line 12212
  return;
 }
 ___async_unwind = 0; //@line 12215
 HEAP32[$ReallocAsyncCtx2 >> 2] = 481; //@line 12216
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 12217
 HEAP32[$12 >> 2] = $7; //@line 12218
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 12219
 HEAP32[$13 >> 2] = $4; //@line 12220
 sp = STACKTOP; //@line 12221
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_97($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25105
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25109
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25111
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25113
 $9 = $4 + 12 | 0; //@line 25115
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 25116
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 25117
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 11) | 0; //@line 25118
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 249; //@line 25121
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 25122
  HEAP32[$11 >> 2] = $9; //@line 25123
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 25124
  HEAP32[$12 >> 2] = $8; //@line 25125
  sp = STACKTOP; //@line 25126
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 25130
 ___async_unwind = 0; //@line 25131
 HEAP32[$ReallocAsyncCtx7 >> 2] = 249; //@line 25132
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 25133
 HEAP32[$11 >> 2] = $9; //@line 25134
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 25135
 HEAP32[$12 >> 2] = $8; //@line 25136
 sp = STACKTOP; //@line 25137
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_218($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17346
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17348
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17350
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17352
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = (HEAP8[$2 >> 0] | 0) + 1 << 24 >> 24; //@line 17359
  return;
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 476 | 0); //@line 17363
 HEAP8[$4 + 1177 >> 0] = 0; //@line 17365
 HEAP8[$4 + 2062 >> 0] = 0; //@line 17367
 HEAP8[$6 >> 0] = HEAP8[$2 >> 0] | 0; //@line 17369
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 17370
 $13 = __ZN7LoRaMac21handle_retransmissionEv($4) | 0; //@line 17371
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 429; //@line 17374
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 17375
  HEAP32[$14 >> 2] = $2; //@line 17376
  sp = STACKTOP; //@line 17377
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 17381
 ___async_unwind = 0; //@line 17382
 HEAP32[$ReallocAsyncCtx2 >> 2] = 429; //@line 17383
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 17384
 HEAP32[$14 >> 2] = $2; //@line 17385
 sp = STACKTOP; //@line 17386
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29694
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29698
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29700
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29702
 $9 = $4 + 12 | 0; //@line 29704
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29705
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 29706
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 11) | 0; //@line 29707
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 306; //@line 29710
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 29711
  HEAP32[$11 >> 2] = $9; //@line 29712
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 29713
  HEAP32[$12 >> 2] = $8; //@line 29714
  sp = STACKTOP; //@line 29715
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 29719
 ___async_unwind = 0; //@line 29720
 HEAP32[$ReallocAsyncCtx3 >> 2] = 306; //@line 29721
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 29722
 HEAP32[$11 >> 2] = $9; //@line 29723
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 29724
 HEAP32[$12 >> 2] = $8; //@line 29725
 sp = STACKTOP; //@line 29726
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_256($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19794
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19798
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19800
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19802
 $9 = $4 + 12 | 0; //@line 19804
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19805
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 19806
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 5) | 0; //@line 19807
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 301; //@line 19810
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 19811
  HEAP32[$11 >> 2] = $9; //@line 19812
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 19813
  HEAP32[$12 >> 2] = $8; //@line 19814
  sp = STACKTOP; //@line 19815
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 19819
 ___async_unwind = 0; //@line 19820
 HEAP32[$ReallocAsyncCtx7 >> 2] = 301; //@line 19821
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 19822
 HEAP32[$11 >> 2] = $9; //@line 19823
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 19824
 HEAP32[$12 >> 2] = $8; //@line 19825
 sp = STACKTOP; //@line 19826
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24872
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24876
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24878
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24880
 $9 = $4 + 12 | 0; //@line 24882
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24883
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 24884
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 24885
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 241; //@line 24888
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 24889
  HEAP32[$11 >> 2] = $9; //@line 24890
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 24891
  HEAP32[$12 >> 2] = $8; //@line 24892
  sp = STACKTOP; //@line 24893
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 24897
 ___async_unwind = 0; //@line 24898
 HEAP32[$ReallocAsyncCtx9 >> 2] = 241; //@line 24899
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 24900
 HEAP32[$11 >> 2] = $9; //@line 24901
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 24902
 HEAP32[$12 >> 2] = $8; //@line 24903
 sp = STACKTOP; //@line 24904
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_71($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23268
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23272
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23274
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23276
 $9 = $4 + 12 | 0; //@line 23278
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23279
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 23280
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 23281
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 237; //@line 23284
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 23285
  HEAP32[$11 >> 2] = $9; //@line 23286
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 23287
  HEAP32[$12 >> 2] = $8; //@line 23288
  sp = STACKTOP; //@line 23289
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 23293
 ___async_unwind = 0; //@line 23294
 HEAP32[$ReallocAsyncCtx7 >> 2] = 237; //@line 23295
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 23296
 HEAP32[$11 >> 2] = $9; //@line 23297
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 23298
 HEAP32[$12 >> 2] = $8; //@line 23299
 sp = STACKTOP; //@line 23300
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_69($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 23201
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23205
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23207
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23209
 $9 = $4 + 12 | 0; //@line 23211
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23212
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 23213
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 23214
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 233; //@line 23217
  $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 23218
  HEAP32[$11 >> 2] = $9; //@line 23219
  $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 23220
  HEAP32[$12 >> 2] = $8; //@line 23221
  sp = STACKTOP; //@line 23222
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 23226
 ___async_unwind = 0; //@line 23227
 HEAP32[$ReallocAsyncCtx8 >> 2] = 233; //@line 23228
 $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 23229
 HEAP32[$11 >> 2] = $9; //@line 23230
 $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 23231
 HEAP32[$12 >> 2] = $8; //@line 23232
 sp = STACKTOP; //@line 23233
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26632
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26634
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26636
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26638
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26640
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 26643
 _equeue_event_dtor($4, 268); //@line 26644
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 26645
 $10 = _equeue_post($6, 269, $4) | 0; //@line 26646
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 270; //@line 26649
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 26650
  HEAP32[$11 >> 2] = $2; //@line 26651
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 26652
  HEAP32[$12 >> 2] = $8; //@line 26653
  sp = STACKTOP; //@line 26654
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 26658
 ___async_unwind = 0; //@line 26659
 HEAP32[$ReallocAsyncCtx3 >> 2] = 270; //@line 26660
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 26661
 HEAP32[$11 >> 2] = $2; //@line 26662
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 26663
 HEAP32[$12 >> 2] = $8; //@line 26664
 sp = STACKTOP; //@line 26665
 return;
}
function _mbed_vtracef__async_cb_87($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24446
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24448
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24450
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24452
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 24457
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24459
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 24464
 $16 = _snprintf($4, $6, 11964, $2) | 0; //@line 24465
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 24467
 $19 = $4 + $$18 | 0; //@line 24469
 $20 = $6 - $$18 | 0; //@line 24470
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 12042, $12) | 0; //@line 24478
  }
 }
 $23 = HEAP32[174] | 0; //@line 24481
 $24 = HEAP32[167] | 0; //@line 24482
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 24483
 FUNCTION_TABLE_vi[$23 & 1023]($24); //@line 24484
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 24487
  sp = STACKTOP; //@line 24488
  return;
 }
 ___async_unwind = 0; //@line 24491
 HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 24492
 sp = STACKTOP; //@line 24493
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23134
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23138
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23140
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23142
 $9 = $4 + 12 | 0; //@line 23144
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23145
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 23146
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 23147
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 23150
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 23151
  HEAP32[$11 >> 2] = $9; //@line 23152
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 23153
  HEAP32[$12 >> 2] = $8; //@line 23154
  sp = STACKTOP; //@line 23155
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 23159
 ___async_unwind = 0; //@line 23160
 HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 23161
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 23162
 HEAP32[$11 >> 2] = $9; //@line 23163
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 23164
 HEAP32[$12 >> 2] = $8; //@line 23165
 sp = STACKTOP; //@line 23166
 return;
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 11 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 21628
  HEAP32[$1 + 720 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 21633
  HEAP32[$1 + 724 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 21638
  HEAP32[$1 + 728 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 21643
  HEAP32[$1 + 732 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 21648
  HEAP32[$1 + 736 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 21653
  $26 = $0 + 128 | 0; //@line 21654
  HEAP8[$1 + 753 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 21659
  $$pre$phiZ2D = $26; //@line 21660
 } else {
  $$pre$phiZ2D = $0 + 128 | 0; //@line 21663
 }
 HEAP8[$1 + 708 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 21668
 HEAP8[$1 + 709 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 21672
 HEAP8[$1 + 741 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 21676
 HEAP32[$1 + 744 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 21680
 HEAP8[$1 + 748 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 21684
 HEAP8[$1 + 752 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 21688
 HEAP32[$1 + 756 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 21692
 HEAP32[$1 + 760 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 21696
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_314($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25426
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25430
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25432
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25434
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 25437
 $10 = HEAP32[$4 >> 2] | 0; //@line 25438
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 25441
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 25442
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 25443
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 518; //@line 25446
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 25447
  HEAP32[$14 >> 2] = $6; //@line 25448
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 25449
  HEAP32[$15 >> 2] = $8; //@line 25450
  sp = STACKTOP; //@line 25451
  return;
 }
 ___async_unwind = 0; //@line 25454
 HEAP32[$ReallocAsyncCtx7 >> 2] = 518; //@line 25455
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 25456
 HEAP32[$14 >> 2] = $6; //@line 25457
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 25458
 HEAP32[$15 >> 2] = $8; //@line 25459
 sp = STACKTOP; //@line 25460
 return;
}
function __ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $28 = 0, $6 = 0, $8 = 0, $or$cond$i = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28781
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28785
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28787
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28789
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 28791
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 1173 | 0; //@line 28793
 $17 = __ZN7LoRaPHY15get_max_payloadEhb($6, HEAP8[$2 >> 0] | 0, (HEAP8[$14 >> 0] | 0) != 0) | 0; //@line 28796
 $18 = $17 & 255; //@line 28797
 $19 = $8 & 255; //@line 28798
 if ($19 >>> 0 > $18 >>> 0) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 28801
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 28802
  $$0 = 0; //@line 28803
  $$09 = $17; //@line 28803
 } else {
  $$0 = $19; //@line 28807
  $$09 = $18 - $8 & 255; //@line 28807
 }
 $28 = $$0 + ($12 & 255) | 0; //@line 28814
 $or$cond$i = $28 >>> 0 < 256 & $28 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($6, HEAP8[$2 >> 0] | 0, (HEAP8[$14 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 28818
 HEAP8[___async_retval >> 0] = $or$cond$i ? $17 : $$09; //@line 28821
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9493
 STACKTOP = STACKTOP + 16 | 0; //@line 9494
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9494
 if (!$1) {
  $$0 = -1003; //@line 9498
 } else {
  _mbed_tracef(16, 12187, 12564, sp); //@line 9500
  HEAP32[$0 + 3168 >> 2] = $1; //@line 9502
  $4 = $0 + 2496 | 0; //@line 9503
  $6 = (HEAP32[$4 >> 2] | 0) == 0; //@line 9505
  HEAP32[$4 >> 2] = 2; //@line 9506
  if ($6) {
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9508
   $7 = __ZN7LoRaMac10initializeEPN6events10EventQueueE($0, $1) | 0; //@line 9509
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 328; //@line 9512
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 9514
    sp = STACKTOP; //@line 9515
    STACKTOP = sp; //@line 9516
    return 0; //@line 9516
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9518
   if (!$7) {
    HEAP32[$4 >> 2] = 2; //@line 9521
    $$0 = 0; //@line 9522
   } else {
    $$0 = $7; //@line 9524
   }
  } else {
   $$0 = 0; //@line 9527
  }
 }
 STACKTOP = sp; //@line 9530
 return $$0 | 0; //@line 9530
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_379($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28721
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28727
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28729
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28731
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28733
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 28738
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 28740
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 28741
 if (!___async) {
  ___async_unwind = 0; //@line 28744
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 691; //@line 28746
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 28748
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 28750
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 28752
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 28754
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 28756
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 28758
 sp = STACKTOP; //@line 28759
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_312($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25329
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25331
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25335
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25337
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25339
 $11 = HEAP32[$2 >> 2] | 0; //@line 25340
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 25343
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 25344
 $17 = HEAP16[$15 >> 1] & 255; //@line 25346
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 25347
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 25348
 if (!___async) {
  ___async_unwind = 0; //@line 25351
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 516; //@line 25353
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 25355
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 25357
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 25359
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 25361
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 25363
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 25365
 sp = STACKTOP; //@line 25366
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_311($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25285
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25287
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25291
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25293
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25295
 $11 = HEAP32[$2 >> 2] | 0; //@line 25296
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 25299
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 25300
 $17 = HEAP16[$15 >> 1] & 255; //@line 25302
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 25303
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 25304
 if (!___async) {
  ___async_unwind = 0; //@line 25307
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 516; //@line 25309
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 25311
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 25313
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 25315
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 25317
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 25319
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 25321
 sp = STACKTOP; //@line 25322
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_265($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20136
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20138
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20140
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 20142
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20144
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20146
 $12 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 20149
 $13 = HEAP32[$2 >> 2] | 0; //@line 20150
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 20153
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 20154
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 20155
 if (!___async) {
  ___async_unwind = 0; //@line 20158
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 505; //@line 20160
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 20162
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 20164
 HEAP8[$ReallocAsyncCtx3 + 12 >> 0] = $6; //@line 20166
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 20168
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 20170
 HEAP8[$ReallocAsyncCtx3 + 24 >> 0] = $12 & 1; //@line 20173
 sp = STACKTOP; //@line 20174
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$1 = 0, $12 = 0, $21 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20219
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 20221
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0; //@line 20224
 $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 20226
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 20227
 $9 = FUNCTION_TABLE_iii[$6 & 31]($3, $8) | 0; //@line 20228
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 519; //@line 20231
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 20233
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 20235
  sp = STACKTOP; //@line 20236
  return 0; //@line 20237
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 20239
  $$ = $9 ? 7 : 6; //@line 20240
  $12 = HEAP8[$1 >> 0] | 0; //@line 20241
  $$1 = ($12 << 24 >> 24 >= (HEAP8[$0 + 28 >> 0] | 0) ? $12 << 24 >> 24 <= (HEAP8[$0 + 29 >> 0] | 0) : 0) ? $$ : $$ & 5; //@line 20250
  $21 = HEAP8[$1 + 1 >> 0] | 0; //@line 20252
  return (($21 << 24 >> 24 >= (HEAP8[$0 + 32 >> 0] | 0) ? $21 << 24 >> 24 <= (HEAP8[$0 + 33 >> 0] | 0) : 0) ? $$1 : $$1 & 3) | 0; //@line 20262
 }
 return 0; //@line 20264
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$i = 0, $$1$lcssa$i = 0, $$18$i = 0, $$19$i = 0, $10 = 0, $18 = 0, $19 = 0, $21 = 0, $8 = 0, $9 = 0, label = 0;
 $8 = $0 + 88 | 0; //@line 21713
 $9 = $1 & 255; //@line 21714
 $10 = HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 21715
 $$18$i = ($9 | 0) == ($10 | 0) ? $1 : $9 + 255 & 255; //@line 21719
 if (($$18$i & 255 | 0) == ($10 | 0)) {
  $$1$lcssa$i = $$18$i; //@line 21723
  return $$1$lcssa$i | 0; //@line 21724
 }
 $18 = HEAPU8[$0 + 92 >> 0] | 0; //@line 21728
 $$19$i = $$18$i; //@line 21729
 while (1) {
  $19 = $$19$i << 24 >> 24; //@line 21731
  if (($19 | 0) < ($18 | 0)) {
   if (HEAP8[(HEAP32[$8 >> 2] | 0) + $19 >> 0] | 0) {
    $$1$lcssa$i = $$19$i; //@line 21739
    label = 6; //@line 21740
    break;
   }
  }
  $21 = $$19$i & 255; //@line 21744
  $$1$i = ($21 | 0) == ($10 | 0) ? $$19$i : $21 + 255 & 255; //@line 21748
  if (($$1$i & 255 | 0) == ($10 | 0)) {
   $$1$lcssa$i = $$1$i; //@line 21752
   label = 6; //@line 21753
   break;
  } else {
   $$19$i = $$1$i; //@line 21756
  }
 }
 if ((label | 0) == 6) {
  return $$1$lcssa$i | 0; //@line 21760
 }
 return 0; //@line 21762
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2549
 HEAP32[$0 >> 2] = 0; //@line 2550
 $1 = $0 + 8 | 0; //@line 2551
 $2 = $0 + 16 | 0; //@line 2552
 HEAP32[$1 >> 2] = 0; //@line 2553
 HEAP32[$1 + 4 >> 2] = 0; //@line 2553
 HEAP32[$1 + 8 >> 2] = 0; //@line 2553
 HEAP32[$1 + 12 >> 2] = 0; //@line 2553
 $4 = $0 + 24 | 0; //@line 2555
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 2556
 HEAP8[$0 + 28 >> 0] = 1; //@line 2558
 $6 = HEAP32[$4 >> 2] | 0; //@line 2559
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2560
 $7 = _ticker_read_us($6) | 0; //@line 2561
 $8 = tempRet0; //@line 2562
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 112; //@line 2565
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2567
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2569
  sp = STACKTOP; //@line 2570
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2573
  $11 = $1; //@line 2574
  HEAP32[$11 >> 2] = $7; //@line 2576
  HEAP32[$11 + 4 >> 2] = $8; //@line 2579
  $15 = $2; //@line 2580
  HEAP32[$15 >> 2] = 0; //@line 2582
  HEAP32[$15 + 4 >> 2] = 0; //@line 2585
  return;
 }
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30022
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30024
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30026
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30028
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 30030
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 30032
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 17728; //@line 30037
  HEAP32[$4 + 4 >> 2] = $6; //@line 30039
  _abort_message(17637, $4); //@line 30040
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 30043
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 30046
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 30047
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 30048
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 30052
  ___async_unwind = 0; //@line 30053
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 670; //@line 30055
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 30057
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 30059
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 30061
 sp = STACKTOP; //@line 30062
 return;
}
function _mbedtls_gcm_setkey__async_cb_148($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29607
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29609
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29611
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29613
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29615
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29617
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29619
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29621
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29625
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 29628
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 29629
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 29633
  ___async_unwind = 0; //@line 29634
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 29636
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 29638
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 29640
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 29642
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 29644
 sp = STACKTOP; //@line 29645
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1383
 STACKTOP = STACKTOP + 16 | 0; //@line 1384
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1384
 _mbed_tracef(16, 11016, 11287, sp); //@line 1386
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 1388
 HEAP8[$0 + 688 >> 0] = 0; //@line 1390
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 1392
 if (!$4) {
  STACKTOP = sp; //@line 1395
  return;
 }
 $7 = HEAP32[$4 + 44 >> 2] | 0; //@line 1398
 if (!$7) {
  STACKTOP = sp; //@line 1401
  return;
 }
 $13 = HEAPU8[$0 + 782 >> 0] | 0; //@line 1407
 $16 = HEAP8[$0 + 781 >> 0] | 0; //@line 1410
 $18 = HEAP8[$0 + 780 >> 0] | 0; //@line 1412
 $19 = HEAP32[$7 >> 2] | 0; //@line 1413
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1414
 FUNCTION_TABLE_viiiii[$19 & 7]($4 + 32 | 0, $0 + 792 | 0, $13, $16, $18); //@line 1415
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 81; //@line 1418
  sp = STACKTOP; //@line 1419
  STACKTOP = sp; //@line 1420
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1422
 STACKTOP = sp; //@line 1423
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15256
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15258
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15260
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15264
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 15268
  label = 4; //@line 15269
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 15274
   label = 4; //@line 15275
  } else {
   $$037$off039 = 3; //@line 15277
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 15281
  $17 = $8 + 40 | 0; //@line 15282
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 15285
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 15295
    $$037$off039 = $$037$off038; //@line 15296
   } else {
    $$037$off039 = $$037$off038; //@line 15298
   }
  } else {
   $$037$off039 = $$037$off038; //@line 15301
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 15304
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb_1($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17901
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17903
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17905
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17907
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $9 = (HEAP8[$2 >> 0] | 0) != 0; //@line 17915
 $11 = HEAP32[$4 + 1888 >> 2] | 0; //@line 17917
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 17918
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $9, $11); //@line 17919
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 374; //@line 17922
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 17923
  HEAP32[$12 >> 2] = $2; //@line 17924
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 17925
  HEAP32[$13 >> 2] = $4; //@line 17926
  sp = STACKTOP; //@line 17927
  return;
 }
 ___async_unwind = 0; //@line 17930
 HEAP32[$ReallocAsyncCtx >> 2] = 374; //@line 17931
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 17932
 HEAP32[$12 >> 2] = $2; //@line 17933
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 17934
 HEAP32[$13 >> 2] = $4; //@line 17935
 sp = STACKTOP; //@line 17936
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb_202($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15324
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15328
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15330
 L2 : do {
  if (!$AsyncRetVal) {
   switch (HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0) {
   case 36:
   case 4:
   case 3:
   case 2:
    {
     break;
    }
   default:
    {
     $$0 = -24832; //@line 15341
     break L2;
    }
   }
   $9 = _calloc(1, 36) | 0; //@line 15345
   if (!$9) {
    $$0 = -24960; //@line 15348
   } else {
    HEAP32[$4 + 64 >> 2] = $9; //@line 15351
    $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 15352
    _mbedtls_platform_zeroize($9, 16); //@line 15353
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 580; //@line 15356
     sp = STACKTOP; //@line 15357
     return;
    }
    ___async_unwind = 0; //@line 15360
    HEAP32[$ReallocAsyncCtx >> 2] = 580; //@line 15361
    sp = STACKTOP; //@line 15362
    return;
   }
  } else {
   $$0 = $AsyncRetVal; //@line 15366
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 15370
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 14992
 while (1) {
  if ((HEAPU8[15700 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 14999
   break;
  }
  $7 = $$016 + 1 | 0; //@line 15002
  if (($7 | 0) == 87) {
   $$01214 = 15788; //@line 15005
   $$115 = 87; //@line 15005
   label = 5; //@line 15006
   break;
  } else {
   $$016 = $7; //@line 15009
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 15788; //@line 15015
  } else {
   $$01214 = 15788; //@line 15017
   $$115 = $$016; //@line 15017
   label = 5; //@line 15018
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 15023
   $$113 = $$01214; //@line 15024
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 15028
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 15035
   if (!$$115) {
    $$012$lcssa = $$113; //@line 15038
    break;
   } else {
    $$01214 = $$113; //@line 15041
    label = 5; //@line 15042
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 15049
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16322
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 16331
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 16336
      HEAP32[$13 >> 2] = $2; //@line 16337
      $19 = $1 + 40 | 0; //@line 16338
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 16341
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16351
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 16355
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 16362
    }
   }
  }
 } while (0);
 return;
}
function _mbedtls_gcm_setkey__async_cb_149($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29652
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29654
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29656
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29658
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29660
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29662
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29664
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29666
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 29667
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 29668
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 29672
  ___async_unwind = 0; //@line 29673
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 595; //@line 29675
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 29677
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 29679
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 29681
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 29683
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 29685
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 29687
 sp = STACKTOP; //@line 29688
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_6($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $28 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18207
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18209
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18215
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18217
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = (HEAPU8[$2 + 18 >> 0] | 0) << 16 | (HEAPU8[$2 + 19 >> 0] | 0) << 24 | (HEAPU8[$2 + 17 >> 0] | 0) << 8 | (HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0); //@line 18237
  $$0 = 0; //@line 18238
 } else {
  $$0 = $AsyncRetVal; //@line 18240
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 18242
 _mbedtls_cipher_free($8); //@line 18243
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 18246
  $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 18247
  HEAP32[$28 >> 2] = $$0; //@line 18248
  sp = STACKTOP; //@line 18249
  return;
 }
 ___async_unwind = 0; //@line 18252
 HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 18253
 $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 18254
 HEAP32[$28 >> 2] = $$0; //@line 18255
 sp = STACKTOP; //@line 18256
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_170($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12547
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12551
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12553
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12555
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12557
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12559
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12561
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12563
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 12564
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 12565
 _mbedtls_platform_zeroize($4, 16); //@line 12566
 if (!___async) {
  ___async_unwind = 0; //@line 12569
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 592; //@line 12571
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 12573
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 12575
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 12577
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 12579
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 12581
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $16; //@line 12583
 sp = STACKTOP; //@line 12584
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_115($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $28 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26724
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26726
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26732
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26734
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = (HEAPU8[$2 + 18 >> 0] | 0) << 16 | (HEAPU8[$2 + 19 >> 0] | 0) << 24 | (HEAPU8[$2 + 17 >> 0] | 0) << 8 | (HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0); //@line 26754
  $$0 = 0; //@line 26755
 } else {
  $$0 = $AsyncRetVal; //@line 26757
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 26759
 _mbedtls_cipher_free($8); //@line 26760
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 487; //@line 26763
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 26764
  HEAP32[$28 >> 2] = $$0; //@line 26765
  sp = STACKTOP; //@line 26766
  return;
 }
 ___async_unwind = 0; //@line 26769
 HEAP32[$ReallocAsyncCtx6 >> 2] = 487; //@line 26770
 $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 26771
 HEAP32[$28 >> 2] = $$0; //@line 26772
 sp = STACKTOP; //@line 26773
 return;
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2186
 HEAP32[$0 >> 2] = 604; //@line 2187
 _gpio_irq_free($0 + 28 | 0); //@line 2189
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2191
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2197
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2198
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2199
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 98; //@line 2202
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2204
    sp = STACKTOP; //@line 2205
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2208
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2214
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2221
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2222
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2223
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 99; //@line 2226
  sp = STACKTOP; //@line 2227
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2230
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20095
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20097
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20099
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 20101
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20103
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20105
 $11 = HEAP32[$2 >> 2] | 0; //@line 20106
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 40 >> 2] | 0; //@line 20109
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 20110
 $15 = FUNCTION_TABLE_ii[$14 & 15]($11) | 0; //@line 20111
 if (!___async) {
  HEAP8[___async_retval >> 0] = $15; //@line 20115
  ___async_unwind = 0; //@line 20116
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 504; //@line 20118
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 20120
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 20122
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = $6; //@line 20124
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 20126
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 20128
 sp = STACKTOP; //@line 20129
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 15065
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 15069
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 15072
   if (!$5) {
    $$0 = 0; //@line 15075
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 15081
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 15087
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 15094
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 15101
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 15108
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 15115
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 15122
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 15126
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 15136
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7818
 $1 = $0 + 12 | 0; //@line 7819
 $2 = HEAP32[$1 >> 2] | 0; //@line 7820
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7824
   _mbed_assert_internal(14946, 14951, 528); //@line 7825
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 273; //@line 7828
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 7830
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7832
    sp = STACKTOP; //@line 7833
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7836
    $7 = HEAP32[$1 >> 2] | 0; //@line 7838
    break;
   }
  } else {
   $7 = $2; //@line 7842
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 7845
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7846
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 7847
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 274; //@line 7850
  sp = STACKTOP; //@line 7851
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7854
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12306
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12310
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12312
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12314
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12316
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12318
 $13 = $4 + 12 | 0; //@line 12320
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12321
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 12322
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 12323
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 12327
  ___async_unwind = 0; //@line 12328
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 319; //@line 12330
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $13; //@line 12332
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 12334
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 12336
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 12338
 sp = STACKTOP; //@line 12339
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14934
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14938
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14940
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14942
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14944
 $11 = $4 + 12 | 0; //@line 14946
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14947
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 14948
 $12 = _equeue_alloc($6, 16) | 0; //@line 14949
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 14953
  ___async_unwind = 0; //@line 14954
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 549; //@line 14956
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 14958
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $11; //@line 14960
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $11; //@line 14962
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 14964
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $6; //@line 14966
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 14968
 sp = STACKTOP; //@line 14969
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7596
 HEAP32[$0 >> 2] = 10244; //@line 7597
 $1 = $0 + 40 | 0; //@line 7598
 _emscripten_asm_const_ii(14, $1 | 0) | 0; //@line 7599
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 7601
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7606
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7607
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7608
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 646; //@line 7611
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7613
    sp = STACKTOP; //@line 7614
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7617
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7622
 __ZN4mbed10TimerEventD2Ev($0); //@line 7623
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 647; //@line 7626
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 7628
  sp = STACKTOP; //@line 7629
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7632
  __ZdlPv($0); //@line 7633
  return;
 }
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23628
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23632
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23634
 $7 = $4 + 12 | 0; //@line 23636
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23637
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 23638
 __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $4); //@line 23639
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 391; //@line 23642
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 23643
  HEAP32[$8 >> 2] = $7; //@line 23644
  $9 = $ReallocAsyncCtx3 + 8 | 0; //@line 23645
  HEAP32[$9 >> 2] = $4; //@line 23646
  sp = STACKTOP; //@line 23647
  return;
 }
 ___async_unwind = 0; //@line 23650
 HEAP32[$ReallocAsyncCtx3 >> 2] = 391; //@line 23651
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 23652
 HEAP32[$8 >> 2] = $7; //@line 23653
 $9 = $ReallocAsyncCtx3 + 8 | 0; //@line 23654
 HEAP32[$9 >> 2] = $4; //@line 23655
 sp = STACKTOP; //@line 23656
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_110($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 26537
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26541
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26543
 $7 = $6 + 12 | 0; //@line 26545
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26546
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 26547
 __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($4, $6); //@line 26548
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 345; //@line 26551
  $8 = $ReallocAsyncCtx9 + 4 | 0; //@line 26552
  HEAP32[$8 >> 2] = $7; //@line 26553
  $9 = $ReallocAsyncCtx9 + 8 | 0; //@line 26554
  HEAP32[$9 >> 2] = $6; //@line 26555
  sp = STACKTOP; //@line 26556
  return;
 }
 ___async_unwind = 0; //@line 26559
 HEAP32[$ReallocAsyncCtx9 >> 2] = 345; //@line 26560
 $8 = $ReallocAsyncCtx9 + 4 | 0; //@line 26561
 HEAP32[$8 >> 2] = $7; //@line 26562
 $9 = $ReallocAsyncCtx9 + 8 | 0; //@line 26563
 HEAP32[$9 >> 2] = $6; //@line 26564
 sp = STACKTOP; //@line 26565
 return;
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 15261
 $32 = $0 + 3 | 0; //@line 15275
 $33 = HEAP8[$32 >> 0] | 0; //@line 15276
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 15278
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 15283
  $$sink21$lcssa = $32; //@line 15283
 } else {
  $$sink2123 = $32; //@line 15285
  $39 = $35; //@line 15285
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 15288
   $41 = HEAP8[$40 >> 0] | 0; //@line 15289
   $39 = $39 << 8 | $41 & 255; //@line 15291
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 15296
    $$sink21$lcssa = $40; //@line 15296
    break;
   } else {
    $$sink2123 = $40; //@line 15299
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 15306
}
function _mbed_vtracef__async_cb_93($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 24831
 $3 = HEAP32[175] | 0; //@line 24835
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[167] | 0; //@line 24839
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 24840
  FUNCTION_TABLE_vi[$3 & 1023]($5); //@line 24841
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 128; //@line 24844
   sp = STACKTOP; //@line 24845
   return;
  }
  ___async_unwind = 0; //@line 24848
  HEAP32[$ReallocAsyncCtx2 >> 2] = 128; //@line 24849
  sp = STACKTOP; //@line 24850
  return;
 } else {
  $6 = HEAP32[174] | 0; //@line 24853
  $7 = HEAP32[167] | 0; //@line 24854
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 24855
  FUNCTION_TABLE_vi[$6 & 1023]($7); //@line 24856
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 130; //@line 24859
   sp = STACKTOP; //@line 24860
   return;
  }
  ___async_unwind = 0; //@line 24863
  HEAP32[$ReallocAsyncCtx4 >> 2] = 130; //@line 24864
  sp = STACKTOP; //@line 24865
  return;
 }
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18516
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18518
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18520
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18522
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18524
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18526
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 18532
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 18535
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 18536
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 18537
 if (!___async) {
  ___async_unwind = 0; //@line 18540
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 471; //@line 18542
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 18544
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 18546
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 18548
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 18550
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 18552
 sp = STACKTOP; //@line 18553
 return;
}
function __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$expand_i1_val = 0, $12 = 0, $23 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27093
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27095
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27099
 if ((HEAP32[$0 + 8 >> 2] | 0) != (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0)) {
  HEAP32[$6 + 2020 >> 2] = 12; //@line 27104
  $$0 = 0; //@line 27105
  $23 = ___async_retval; //@line 27106
  $$0$expand_i1_val = $$0 & 1; //@line 27107
  HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 27108
  return;
 }
 if ($8 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv($6 + 4 | 0) | 0) & 65535) >>> 0) {
  $$0 = 1; //@line 27116
  $23 = ___async_retval; //@line 27117
  $$0$expand_i1_val = $$0 & 1; //@line 27118
  HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 27119
  return;
 }
 HEAP32[$6 + 2020 >> 2] = 10; //@line 27123
 HEAP32[$6 + 2048 >> 2] = HEAP32[$12 >> 2]; //@line 27126
 $$0 = 0; //@line 27127
 $23 = ___async_retval; //@line 27128
 $$0$expand_i1_val = $$0 & 1; //@line 27129
 HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 27130
 return;
}
function _ticker_read_us__async_cb_394($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29987
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29989
 $3 = $2 + 4 | 0; //@line 29990
 $4 = HEAP32[$3 >> 2] | 0; //@line 29991
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 29994
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 29995
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 29996
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 619; //@line 29999
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 30000
  HEAP32[$9 >> 2] = $3; //@line 30001
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 30002
  HEAP32[$10 >> 2] = $4; //@line 30003
  sp = STACKTOP; //@line 30004
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 30008
 ___async_unwind = 0; //@line 30009
 HEAP32[$ReallocAsyncCtx >> 2] = 619; //@line 30010
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 30011
 HEAP32[$9 >> 2] = $3; //@line 30012
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 30013
 HEAP32[$10 >> 2] = $4; //@line 30014
 sp = STACKTOP; //@line 30015
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7663
 $2 = $0 + 12 | 0; //@line 7665
 $3 = HEAP32[$2 >> 2] | 0; //@line 7666
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7670
   _mbed_assert_internal(14946, 14951, 528); //@line 7671
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 649; //@line 7674
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 7676
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7678
    sp = STACKTOP; //@line 7679
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7682
    $8 = HEAP32[$2 >> 2] | 0; //@line 7684
    break;
   }
  } else {
   $8 = $3; //@line 7688
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 7691
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7693
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 7694
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 650; //@line 7697
  sp = STACKTOP; //@line 7698
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7701
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2402
 HEAP32[$0 >> 2] = 10244; //@line 2403
 __ZN4mbed6Ticker6detachEv($0); //@line 2404
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2406
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2412
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2413
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2414
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 106; //@line 2417
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2419
    sp = STACKTOP; //@line 2420
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2423
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2428
 __ZN4mbed10TimerEventD2Ev($0); //@line 2429
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 107; //@line 2432
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 2434
  sp = STACKTOP; //@line 2435
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2438
  __ZdlPv($0); //@line 2439
  return;
 }
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25938
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25940
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25942
 $5 = $2 + 2904 | 0; //@line 25943
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] & -18 | 1; //@line 25947
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 25948
 __ZN12LoRaWANStack26process_status_check_stateEv($2); //@line 25949
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 265; //@line 25952
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 25953
  HEAP32[$9 >> 2] = $4; //@line 25954
  $10 = $ReallocAsyncCtx2 + 8 | 0; //@line 25955
  HEAP32[$10 >> 2] = $2; //@line 25956
  sp = STACKTOP; //@line 25957
  return;
 }
 ___async_unwind = 0; //@line 25960
 HEAP32[$ReallocAsyncCtx2 >> 2] = 265; //@line 25961
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 25962
 HEAP32[$9 >> 2] = $4; //@line 25963
 $10 = $ReallocAsyncCtx2 + 8 | 0; //@line 25964
 HEAP32[$10 >> 2] = $2; //@line 25965
 sp = STACKTOP; //@line 25966
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16155
 STACKTOP = STACKTOP + 16 | 0; //@line 16156
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16156
 $1 = sp; //@line 16157
 HEAP32[$1 >> 2] = $varargs; //@line 16158
 $2 = HEAP32[2566] | 0; //@line 16159
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16160
 _vfprintf($2, $0, $1) | 0; //@line 16161
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 671; //@line 16164
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 16166
  sp = STACKTOP; //@line 16167
  STACKTOP = sp; //@line 16168
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16170
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16171
 _fputc(10, $2) | 0; //@line 16172
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 672; //@line 16175
  sp = STACKTOP; //@line 16176
  STACKTOP = sp; //@line 16177
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16179
  _abort(); //@line 16180
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_270($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20506
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20516
 $14 = HEAP32[$10 >> 2] | 0; //@line 20523
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] | 0; //@line 20526
 $20 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 20529
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 20530
 FUNCTION_TABLE_viii[$17 & 7]($14, 1, $20); //@line 20531
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 510; //@line 20534
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 20535
  HEAP32[$21 >> 2] = $10; //@line 20536
  sp = STACKTOP; //@line 20537
  return;
 }
 ___async_unwind = 0; //@line 20540
 HEAP32[$ReallocAsyncCtx8 >> 2] = 510; //@line 20541
 $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 20542
 HEAP32[$21 >> 2] = $10; //@line 20543
 sp = STACKTOP; //@line 20544
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_269($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20461
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20471
 $14 = HEAP32[$10 >> 2] | 0; //@line 20478
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] | 0; //@line 20481
 $20 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 20484
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 20485
 FUNCTION_TABLE_viii[$17 & 7]($14, 0, $20); //@line 20486
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 510; //@line 20489
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 20490
  HEAP32[$21 >> 2] = $10; //@line 20491
  sp = STACKTOP; //@line 20492
  return;
 }
 ___async_unwind = 0; //@line 20495
 HEAP32[$ReallocAsyncCtx8 >> 2] = 510; //@line 20496
 $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 20497
 HEAP32[$21 >> 2] = $10; //@line 20498
 sp = STACKTOP; //@line 20499
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18408
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18410
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18414
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 18416
 $9 = HEAP32[$2 >> 2] | 0; //@line 18417
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 18420
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 18422
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18423
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 18424
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 524; //@line 18427
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 18428
  HEAP32[$15 >> 2] = $2; //@line 18429
  sp = STACKTOP; //@line 18430
  return;
 }
 ___async_unwind = 0; //@line 18433
 HEAP32[$ReallocAsyncCtx2 >> 2] = 524; //@line 18434
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 18435
 HEAP32[$15 >> 2] = $2; //@line 18436
 sp = STACKTOP; //@line 18437
 return;
}
function __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18635
 $6 = $0 + 64 | 0; //@line 18636
 _mbedtls_aes_init($6); //@line 18637
 $7 = _mbedtls_aes_setkey_enc($6, $3, $4) | 0; //@line 18638
 if (!$7) {
  $9 = _mbedtls_aes_crypt_ecb($6, 1, $1, $5) | 0; //@line 18641
  if (($2 & 65535) > 15 & ($9 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb($6, 1, $1 + 16 | 0, $5 + 16 | 0) | 0; //@line 18649
  } else {
   $$0 = $9; //@line 18651
  }
 } else {
  $$0 = $7; //@line 18654
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 18656
 _mbedtls_aes_free($6); //@line 18657
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 495; //@line 18660
  HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 18662
  sp = STACKTOP; //@line 18663
  return 0; //@line 18664
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18666
  return $$0 | 0; //@line 18667
 }
 return 0; //@line 18669
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 15195
 $23 = $0 + 2 | 0; //@line 15204
 $24 = HEAP8[$23 >> 0] | 0; //@line 15205
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 15208
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 15213
  $$lcssa = $24; //@line 15213
 } else {
  $$01618 = $23; //@line 15215
  $$019 = $27; //@line 15215
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 15217
   $31 = HEAP8[$30 >> 0] | 0; //@line 15218
   $$019 = ($$019 | $31 & 255) << 8; //@line 15221
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 15226
    $$lcssa = $31; //@line 15226
    break;
   } else {
    $$01618 = $30; //@line 15229
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 15236
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7555
 HEAP32[$0 >> 2] = 10244; //@line 7556
 $1 = $0 + 40 | 0; //@line 7557
 _emscripten_asm_const_ii(14, $1 | 0) | 0; //@line 7558
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 7560
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7565
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7566
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7567
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 644; //@line 7570
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7572
    sp = STACKTOP; //@line 7573
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7576
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7581
 __ZN4mbed10TimerEventD2Ev($0); //@line 7582
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 645; //@line 7585
  sp = STACKTOP; //@line 7586
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7589
  return;
 }
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_340($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26681
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26685
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26687
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26688
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26692
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 26696
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26697
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 26698
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 26701
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 26702
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 26703
  sp = STACKTOP; //@line 26704
  return;
 }
 ___async_unwind = 0; //@line 26707
 HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 26708
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 26709
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 26710
 sp = STACKTOP; //@line 26711
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14823
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14823
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14824
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 14825
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 14834
    $$016 = $9; //@line 14837
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 14837
   } else {
    $$016 = $0; //@line 14839
    $storemerge = 0; //@line 14839
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 14841
   $$0 = $$016; //@line 14842
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 14846
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 14852
   HEAP32[tempDoublePtr >> 2] = $2; //@line 14855
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 14855
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 14856
  }
 }
 return +$$0;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21871
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21875
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21877
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21879
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21881
 $11 = $4 + 12 | 0; //@line 21883
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21884
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 21885
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 21886
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 21890
  ___async_unwind = 0; //@line 21891
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 222; //@line 21893
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $11; //@line 21895
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 21897
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 21899
 sp = STACKTOP; //@line 21900
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17758
 STACKTOP = STACKTOP + 16 | 0; //@line 17759
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17759
 $3 = sp; //@line 17760
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 17762
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 17765
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 17766
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 17767
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 695; //@line 17770
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 17772
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 17774
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 17776
  sp = STACKTOP; //@line 17777
  STACKTOP = sp; //@line 17778
  return 0; //@line 17778
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17780
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 17784
 }
 STACKTOP = sp; //@line 17786
 return $8 & 1 | 0; //@line 17786
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 20992
  return $$011 | 0; //@line 20993
 }
 $wide$trip$count = $3 & 255; //@line 20996
 $$01012 = 0; //@line 20997
 $indvars$iv = $2 & 255; //@line 20997
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 21000
  $9 = $8 & 65535; //@line 21001
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 21050
  $indvars$iv = $indvars$iv + 1 | 0; //@line 21051
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 21060
 return $$011 | 0; //@line 21061
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_397($0) {
 $0 = $0 | 0;
 var $$1$ = 0, $10 = 0, $12 = 0, $19 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30429
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30431
 $10 = HEAP8[$0 + 21 >> 0] | 0; //@line 30433
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30435
 $$1$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 30443
 $19 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 30444
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 1185) >> 0] = $19; //@line 30449
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 1185) >> 0] = $19 >>> 8; //@line 30456
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 1185) >> 0] = $19 >>> 16; //@line 30463
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 1185) >> 0] = $19 >>> 24; //@line 30470
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 30475
 HEAP32[$12 >> 2] = $10 & 255; //@line 30477
 _mbed_tracef(16, 12866, 13051, $12); //@line 30478
 HEAP32[___async_retval >> 2] = $$1$; //@line 30480
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_225($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17796
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17800
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17802
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17803
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 17807
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 17811
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17812
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 17813
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 17816
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 17817
  HEAP32[$11 >> 2] = $4; //@line 17818
  sp = STACKTOP; //@line 17819
  return;
 }
 ___async_unwind = 0; //@line 17822
 HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 17823
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 17824
 HEAP32[$11 >> 2] = $4; //@line 17825
 sp = STACKTOP; //@line 17826
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17832
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17840
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17842
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17844
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17846
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17848
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17850
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17852
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 17863
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 17864
 HEAP32[$10 >> 2] = 0; //@line 17865
 HEAP32[$12 >> 2] = 0; //@line 17866
 HEAP32[$14 >> 2] = 0; //@line 17867
 HEAP32[$2 >> 2] = 0; //@line 17868
 $33 = HEAP32[$16 >> 2] | 0; //@line 17869
 HEAP32[$16 >> 2] = $33 | $18; //@line 17874
 if ($20 | 0) {
  ___unlockfile($22); //@line 17877
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 17880
 return;
}
function _schedule_interrupt__async_cb_26($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20348
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20352
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20354
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20356
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20357
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 20376
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 20377
 FUNCTION_TABLE_v[$16 & 7](); //@line 20378
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 615; //@line 20381
  sp = STACKTOP; //@line 20382
  return;
 }
 ___async_unwind = 0; //@line 20385
 HEAP32[$ReallocAsyncCtx6 >> 2] = 615; //@line 20386
 sp = STACKTOP; //@line 20387
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2361
 HEAP32[$0 >> 2] = 10244; //@line 2362
 __ZN4mbed6Ticker6detachEv($0); //@line 2363
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2365
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2371
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2372
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2373
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 104; //@line 2376
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2378
    sp = STACKTOP; //@line 2379
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2382
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2387
 __ZN4mbed10TimerEventD2Ev($0); //@line 2388
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 105; //@line 2391
  sp = STACKTOP; //@line 2392
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2395
  return;
 }
}
function _mbed_vtracef__async_cb_90($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24562
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24566
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 24571
 $$pre = HEAP32[177] | 0; //@line 24572
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 24573
 FUNCTION_TABLE_v[$$pre & 7](); //@line 24574
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 137; //@line 24577
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 24578
  HEAP32[$6 >> 2] = $4; //@line 24579
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 24580
  HEAP32[$7 >> 2] = $5; //@line 24581
  sp = STACKTOP; //@line 24582
  return;
 }
 ___async_unwind = 0; //@line 24585
 HEAP32[$ReallocAsyncCtx9 >> 2] = 137; //@line 24586
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 24587
 HEAP32[$6 >> 2] = $4; //@line 24588
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 24589
 HEAP32[$7 >> 2] = $5; //@line 24590
 sp = STACKTOP; //@line 24591
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_124($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27360
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27364
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27366
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27367
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 27371
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 27375
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27376
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 27377
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 27380
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 27381
  HEAP32[$11 >> 2] = $4; //@line 27382
  sp = STACKTOP; //@line 27383
  return;
 }
 ___async_unwind = 0; //@line 27386
 HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 27387
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 27388
 HEAP32[$11 >> 2] = $4; //@line 27389
 sp = STACKTOP; //@line 27390
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16678
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16684
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 16687
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 16690
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16691
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 16692
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 677; //@line 16695
    sp = STACKTOP; //@line 16696
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16699
    break;
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_141($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28396
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28400
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28402
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28403
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 28407
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 28411
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 28412
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 28413
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 317; //@line 28416
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 28417
  HEAP32[$11 >> 2] = $4; //@line 28418
  sp = STACKTOP; //@line 28419
  return;
 }
 ___async_unwind = 0; //@line 28422
 HEAP32[$ReallocAsyncCtx5 >> 2] = 317; //@line 28423
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 28424
 HEAP32[$11 >> 2] = $4; //@line 28425
 sp = STACKTOP; //@line 28426
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_187($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14093
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14097
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14099
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14100
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 14104
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 14108
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 14109
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 14110
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 214; //@line 14113
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 14114
  HEAP32[$11 >> 2] = $4; //@line 14115
  sp = STACKTOP; //@line 14116
  return;
 }
 ___async_unwind = 0; //@line 14119
 HEAP32[$ReallocAsyncCtx5 >> 2] = 214; //@line 14120
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 14121
 HEAP32[$11 >> 2] = $4; //@line 14122
 sp = STACKTOP; //@line 14123
 return;
}
function _mbed_vtracef__async_cb_89($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24529
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24531
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 24536
 $$pre = HEAP32[177] | 0; //@line 24537
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 24538
 FUNCTION_TABLE_v[$$pre & 7](); //@line 24539
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 137; //@line 24542
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 24543
  HEAP32[$5 >> 2] = $2; //@line 24544
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 24545
  HEAP32[$6 >> 2] = $4; //@line 24546
  sp = STACKTOP; //@line 24547
  return;
 }
 ___async_unwind = 0; //@line 24550
 HEAP32[$ReallocAsyncCtx9 >> 2] = 137; //@line 24551
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 24552
 HEAP32[$5 >> 2] = $2; //@line 24553
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 24554
 HEAP32[$6 >> 2] = $4; //@line 24555
 sp = STACKTOP; //@line 24556
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10772
 STACKTOP = STACKTOP + 16 | 0; //@line 10773
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10773
 $1 = sp; //@line 10774
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10779
  STACKTOP = sp; //@line 10780
  return $$0 | 0; //@line 10780
 }
 HEAP32[$1 >> 2] = 0; //@line 10782
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10783
 __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status($0, $1); //@line 10784
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 356; //@line 10787
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10789
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10791
  sp = STACKTOP; //@line 10792
  STACKTOP = sp; //@line 10793
  return 0; //@line 10793
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10795
 $$0 = HEAP32[$1 >> 2] | 0; //@line 10797
 STACKTOP = sp; //@line 10798
 return $$0 | 0; //@line 10798
}
function _mbedtls_cipher_cmac_finish__async_cb_169($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12510
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12512
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12514
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12516
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12518
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12520
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12522
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 12523
 _mbedtls_platform_zeroize($2, 16); //@line 12524
 if (!___async) {
  ___async_unwind = 0; //@line 12527
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 593; //@line 12529
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $4; //@line 12531
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 12533
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 12535
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 12537
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 12539
 sp = STACKTOP; //@line 12540
 return;
}
function __ZN12LoRaWANStack12stop_sendingEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10375
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10376
 $1 = __ZN7LoRaMac13clear_tx_pipeEv($0) | 0; //@line 10377
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 352; //@line 10380
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10382
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 10384
  sp = STACKTOP; //@line 10385
  return 0; //@line 10386
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10388
 if ($1 | 0) {
  $$0 = -1e3; //@line 10391
  return $$0 | 0; //@line 10392
 }
 $5 = $0 + 2496 | 0; //@line 10394
 if ((HEAP32[$5 >> 2] | 0) != 8) {
  $$0 = -1e3; //@line 10398
  return $$0 | 0; //@line 10399
 }
 $8 = $0 + 2904 | 0; //@line 10401
 HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -18; //@line 10404
 __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 10405
 HEAP32[$5 >> 2] = 2; //@line 10406
 $$0 = 0; //@line 10407
 return $$0 | 0; //@line 10408
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_205($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15684
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15686
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15690
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15692
 __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t(HEAP32[$0 + 8 >> 2] | 0, HEAP8[$2 + 1916 >> 0] | 0, HEAP8[$2 + 1884 >> 0] | 0, HEAP32[$2 + 1880 >> 2] | 0, $2 + 1964 | 0); //@line 15702
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  return;
 }
 _mbed_tracef(16, 12866, 13492, $8); //@line 15708
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 15709
 __ZN7LoRaMac15open_rx2_windowEv($2); //@line 15710
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 441; //@line 15713
  sp = STACKTOP; //@line 15714
  return;
 }
 ___async_unwind = 0; //@line 15717
 HEAP32[$ReallocAsyncCtx3 >> 2] = 441; //@line 15718
 sp = STACKTOP; //@line 15719
 return;
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 2948
  return $$028 | 0; //@line 2949
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 2953
 $8 = $7 & 255; //@line 2954
 $9 = $1 - $8 | 0; //@line 2955
 HEAP32[$2 >> 2] = $9; //@line 2956
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 2960
 if (!$1) {
  $$0$lcssa = $13; //@line 2963
 } else {
  $$02930 = 0; //@line 2965
  $$031 = $13; //@line 2965
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 2975
   $$02930 = $$02930 + 1 | 0; //@line 2976
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 2979
    break;
   } else {
    $$031 = $23; //@line 2982
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 2988
 return $$028 | 0; //@line 2989
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1812
 STACKTOP = STACKTOP + 16 | 0; //@line 1813
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1813
 __ZN4mbed6Ticker6detachEv($0 + 1240 | 0); //@line 1816
 HEAP8[$0 + 688 >> 0] = 0; //@line 1818
 _mbed_tracef(8, 11016, 11440, sp); //@line 1819
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 1821
 if (!$4) {
  STACKTOP = sp; //@line 1824
  return;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 1827
 if (!$7) {
  STACKTOP = sp; //@line 1830
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 1832
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1833
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 1834
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 93; //@line 1837
  sp = STACKTOP; //@line 1838
  STACKTOP = sp; //@line 1839
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1841
 STACKTOP = sp; //@line 1842
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15994
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15996
 $6 = HEAP8[$0 + 10 >> 0] | 0; //@line 16000
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 16003
 $10 = HEAPU16[$0 + 8 >> 1] | 0; //@line 16004
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16005
 FUNCTION_TABLE_viiiiiiiiiiiiii[$9 & 1]($2, 0, $6, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $10); //@line 16006
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 16009
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 16010
  HEAP32[$11 >> 2] = $2; //@line 16011
  sp = STACKTOP; //@line 16012
  return;
 }
 ___async_unwind = 0; //@line 16015
 HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 16016
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 16017
 HEAP32[$11 >> 2] = $2; //@line 16018
 sp = STACKTOP; //@line 16019
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_368($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28009
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28011
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 28013
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28015
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28017
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28019
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 28020
 __ZN4mbed5Timer5startEv($2); //@line 28021
 if (!___async) {
  ___async_unwind = 0; //@line 28024
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 60; //@line 28026
 HEAP16[$ReallocAsyncCtx4 + 4 >> 1] = $4; //@line 28028
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $2; //@line 28030
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 28032
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 28034
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 28036
 sp = STACKTOP; //@line 28037
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17677
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 17679
 $8 = $7 >> 8; //@line 17680
 if (!($7 & 1)) {
  $$0 = $8; //@line 17684
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 17689
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 17691
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 17694
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17699
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 17700
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 693; //@line 17703
  sp = STACKTOP; //@line 17704
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17707
  return;
 }
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18749
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18751
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18753
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 18755
 $7 = HEAP32[$2 >> 2] | 0; //@line 18756
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 18759
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18760
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 18761
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 543; //@line 18764
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 18765
  HEAP32[$11 >> 2] = $2; //@line 18766
  sp = STACKTOP; //@line 18767
  return;
 }
 ___async_unwind = 0; //@line 18770
 HEAP32[$ReallocAsyncCtx2 >> 2] = 543; //@line 18771
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 18772
 HEAP32[$11 >> 2] = $2; //@line 18773
 sp = STACKTOP; //@line 18774
 return;
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7767
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7768
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(18232, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 7769
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 652; //@line 7772
  sp = STACKTOP; //@line 7773
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7776
  __ZN5Sht31C2E7PinNameS0_(23652, 10, 11); //@line 7777
  __ZN4mbed11InterruptInC2E7PinName(19568, 1337); //@line 7778
  __ZN6events10EventQueueC2EjPh(19640, 1664, 0); //@line 7779
  __ZN16LoRaWANInterfaceC2ER9LoRaRadio(19844, 18232); //@line 7780
  dest = 23020; //@line 7781
  stop = dest + 48 | 0; //@line 7781
  do {
   HEAP32[dest >> 2] = 0; //@line 7781
   dest = dest + 4 | 0; //@line 7781
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16847
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16853
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 16856
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 16859
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16860
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 16861
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 680; //@line 16864
    sp = STACKTOP; //@line 16865
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16868
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_error_vfprintf__async_cb_338($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26588
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 26590
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26592
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26594
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26596
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26598
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26600
 _serial_putc(19560, $2 << 24 >> 24); //@line 26601
 if (!___async) {
  ___async_unwind = 0; //@line 26604
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 26606
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 26608
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 26610
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 26612
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 26614
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 26616
 sp = STACKTOP; //@line 26617
 return;
}
function ___dynamic_cast__async_cb_207($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15781
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15783
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15785
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15791
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 15806
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 15822
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 15827
    break;
   }
  default:
   {
    $$0 = 0; //@line 15831
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 15836
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7865
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7868
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7870
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 7872
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 7877
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7882
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7884
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 7885
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 275; //@line 7888
  sp = STACKTOP; //@line 7889
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7892
  return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17719
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 17721
 $7 = $6 >> 8; //@line 17722
 if (!($6 & 1)) {
  $$0 = $7; //@line 17726
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 17731
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 17733
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 17736
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17741
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 17742
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 694; //@line 17745
  sp = STACKTOP; //@line 17746
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17749
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6660
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 6663
 $5 = HEAP32[$4 >> 2] | 0; //@line 6664
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6669
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6670
  _schedule_interrupt($0); //@line 6671
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 617; //@line 6674
   sp = STACKTOP; //@line 6675
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6678
  return;
 } else {
  $$0 = $5; //@line 6681
 }
 do {
  if (!$$0) {
   label = 8; //@line 6686
   break;
  }
  $10 = $$0 + 12 | 0; //@line 6689
  $$0 = HEAP32[$10 >> 2] | 0; //@line 6690
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6703
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_371($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28181
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28185
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28187
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28189
 $10 = (HEAP32[___async_retval >> 2] | 0) >= (HEAP32[$0 + 4 >> 2] | 0); //@line 28192
 $13 = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0; //@line 28195
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 28196
 FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 28197
 if (!___async) {
  ___async_unwind = 0; //@line 28200
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 28202
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 28204
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 28206
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = $10 & 1; //@line 28209
 sp = STACKTOP; //@line 28210
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17634
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 17636
 $6 = $5 >> 8; //@line 17637
 if (!($5 & 1)) {
  $$0 = $6; //@line 17641
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 17646
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 17648
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 17651
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17656
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 17657
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 692; //@line 17660
  sp = STACKTOP; //@line 17661
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17664
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_253($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19614
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19618
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19620
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 19622
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 19624
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 19626
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 19628
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 19629
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 19630
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 294; //@line 19633
  sp = STACKTOP; //@line 19634
  return;
 }
 ___async_unwind = 0; //@line 19637
 HEAP32[$ReallocAsyncCtx >> 2] = 294; //@line 19638
 sp = STACKTOP; //@line 19639
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_47($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21699
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21701
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21703
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21705
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21707
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21709
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 21710
 __ZN7LoRaMac10disconnectEv($4); //@line 21711
 if (!___async) {
  ___async_unwind = 0; //@line 21714
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 333; //@line 21716
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 21718
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 21720
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 21722
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 21724
 sp = STACKTOP; //@line 21725
 return;
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sink$in = 0, $$sink6 = 0, $3 = 0;
 $3 = $1 << 24 >> 24; //@line 21862
 if (($3 | 0) >= (HEAPU8[$0 + 92 >> 0] | 0)) {
  $$0 = 0; //@line 21868
  return $$0 | 0; //@line 21869
 }
 if (!(HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $3 >> 0] | 0)) {
  $$0 = 0; //@line 21877
  return $$0 | 0; //@line 21878
 }
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 21884
   $$sink6 = $0 + 31 | 0; //@line 21884
  } else {
   if (!(HEAP8[$0 + 128 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 21893
    $$sink6 = $0 + 27 | 0; //@line 21893
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 21898
    $$sink6 = $0 + 27 | 0; //@line 21898
    break;
   }
  }
 } while (0);
 $$0 = (HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink6 >> 0] | 0) >= $1 << 24 >> 24 : 0; //@line 21908
 return $$0 | 0; //@line 21909
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_372($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28216
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28218
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 28220
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28222
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28224
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 28225
 __ZN4mbed5TimerC2Ev($2); //@line 28226
 if (!___async) {
  ___async_unwind = 0; //@line 28229
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 59; //@line 28231
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 28233
 HEAP16[$ReallocAsyncCtx3 + 8 >> 1] = $4; //@line 28235
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 28237
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 28239
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $2; //@line 28241
 sp = STACKTOP; //@line 28242
 return;
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4526
 STACKTOP = STACKTOP + 16 | 0; //@line 4527
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4527
 $5 = sp + 4 | 0; //@line 4528
 $6 = sp; //@line 4529
 HEAP8[$5 >> 0] = $1; //@line 4530
 HEAP32[$6 >> 2] = $4; //@line 4531
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4533
 $8 = __ZN12LoRaWANStack9handle_rxEPhtRhRib($0 + 4 | 0, $2, $3, $5, $6, 1) | 0; //@line 4534
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 146; //@line 4537
  sp = STACKTOP; //@line 4538
  STACKTOP = sp; //@line 4539
  return 0; //@line 4539
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4541
  STACKTOP = sp; //@line 4542
  return $8 | 0; //@line 4542
 }
 return 0; //@line 4544
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 348
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 363
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 377
   break;
  }
 default:
  {}
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 383
 __ZN16SX1276_LoRaRadio8transmitEj($0, 0); //@line 384
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 47; //@line 387
  sp = STACKTOP; //@line 388
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 391
  return;
 }
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 20778
 $5 = $4 >>> 4; //@line 20779
 $10 = 1 << ($4 & 15); //@line 20784
 if ($10 & (HEAPU16[(HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 20788
  return $$0 | 0; //@line 20789
 }
 $15 = (HEAP32[$0 + 124 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 20793
 HEAP32[$15 >> 2] = 0; //@line 20794
 HEAP32[$15 + 4 >> 2] = 0; //@line 20794
 HEAP32[$15 + 8 >> 2] = 0; //@line 20794
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 113 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 20804
  return $$0 | 0; //@line 20805
 }
 $25 = (HEAP32[$0 + 116 >> 2] | 0) + ($5 << 1) | 0; //@line 20810
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 20815
 $$0 = 1; //@line 20816
 return $$0 | 0; //@line 20817
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_120($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27009
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27013
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27014
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 27017
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27018
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 27019
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 541; //@line 27022
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 27023
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 27024
  sp = STACKTOP; //@line 27025
  return;
 }
 ___async_unwind = 0; //@line 27028
 HEAP32[$ReallocAsyncCtx3 >> 2] = 541; //@line 27029
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 27030
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 27031
 sp = STACKTOP; //@line 27032
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27961
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27963
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27965
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 27967
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27969
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 27970
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 27971
 _wait_ms(1); //@line 27972
 if (!___async) {
  ___async_unwind = 0; //@line 27975
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 58; //@line 27977
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $4; //@line 27979
 HEAP16[$ReallocAsyncCtx7 + 8 >> 1] = $6; //@line 27981
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $8; //@line 27983
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $2; //@line 27985
 sp = STACKTOP; //@line 27986
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_282($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21914
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21918
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21920
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  HEAP32[___async_retval >> 2] = HEAP32[$6 >> 2]; //@line 21926
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 21929
 __ZN7LoRaMac15open_rx2_windowEv($4); //@line 21930
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 406; //@line 21933
  $8 = $ReallocAsyncCtx + 4 | 0; //@line 21934
  HEAP32[$8 >> 2] = $6; //@line 21935
  sp = STACKTOP; //@line 21936
  return;
 }
 ___async_unwind = 0; //@line 21939
 HEAP32[$ReallocAsyncCtx >> 2] = 406; //@line 21940
 $8 = $ReallocAsyncCtx + 4 | 0; //@line 21941
 HEAP32[$8 >> 2] = $6; //@line 21942
 sp = STACKTOP; //@line 21943
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23536
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23538
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 23541
 $5 = HEAP32[$2 >> 2] | 0; //@line 23542
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 23545
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23546
 FUNCTION_TABLE_vii[$8 & 15]($5, $4); //@line 23547
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 533; //@line 23550
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 23551
  HEAP32[$9 >> 2] = $2; //@line 23552
  sp = STACKTOP; //@line 23553
  return;
 }
 ___async_unwind = 0; //@line 23556
 HEAP32[$ReallocAsyncCtx2 >> 2] = 533; //@line 23557
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 23558
 HEAP32[$9 >> 2] = $2; //@line 23559
 sp = STACKTOP; //@line 23560
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26980
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26982
 $3 = HEAP32[$2 >> 2] | 0; //@line 26983
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 26986
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26987
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 26988
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 540; //@line 26991
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 26992
  HEAP32[$8 >> 2] = $2; //@line 26993
  sp = STACKTOP; //@line 26994
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 26998
 ___async_unwind = 0; //@line 26999
 HEAP32[$ReallocAsyncCtx2 >> 2] = 540; //@line 27000
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 27001
 HEAP32[$8 >> 2] = $2; //@line 27002
 sp = STACKTOP; //@line 27003
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_181($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13725
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13727
 $4 = HEAP32[$2 + 748 >> 2] | 0; //@line 13729
 if (!$4) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 13733
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 13738
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 13739
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 736 | 0); //@line 13740
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 13743
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 13744
  HEAP32[$9 >> 2] = $2; //@line 13745
  sp = STACKTOP; //@line 13746
  return;
 }
 ___async_unwind = 0; //@line 13749
 HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 13750
 $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 13751
 HEAP32[$9 >> 2] = $2; //@line 13752
 sp = STACKTOP; //@line 13753
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_154($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29926
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29928
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29932
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29934
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 29936
 __ZN4mbed6Ticker5setupEy($6, 1e5, 0); //@line 29937
 $9 = HEAP32[$2 >> 2] | 0; //@line 29938
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 29944
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29945
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 29946
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 29949
  sp = STACKTOP; //@line 29950
  return;
 }
 ___async_unwind = 0; //@line 29953
 HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 29954
 sp = STACKTOP; //@line 29955
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_246($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19211
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19213
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19217
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19219
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 19221
 __ZN4mbed6Ticker5setupEy($6, 2e5, 0); //@line 19222
 $9 = HEAP32[$2 >> 2] | 0; //@line 19223
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 19229
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 19230
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 19231
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 19234
  sp = STACKTOP; //@line 19235
  return;
 }
 ___async_unwind = 0; //@line 19238
 HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 19239
 sp = STACKTOP; //@line 19240
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 13821
 STACKTOP = STACKTOP + 256 | 0; //@line 13822
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 13822
 $5 = sp; //@line 13823
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 13829
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 13833
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 13836
   $$011 = $9; //@line 13837
   do {
    _out_670($0, $5, 256); //@line 13839
    $$011 = $$011 + -256 | 0; //@line 13840
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 13849
  } else {
   $$0$lcssa = $9; //@line 13851
  }
  _out_670($0, $5, $$0$lcssa); //@line 13853
 }
 STACKTOP = sp; //@line 13855
 return;
}
function _mbedtls_ccm_setkey__async_cb_3($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18018
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18020
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18022
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18024
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18026
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 18030
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 18033
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 18034
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 559; //@line 18037
  sp = STACKTOP; //@line 18038
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 18042
 ___async_unwind = 0; //@line 18043
 HEAP32[$ReallocAsyncCtx >> 2] = 559; //@line 18044
 sp = STACKTOP; //@line 18045
 return;
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19566
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19568
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 19570
 if (!$4) {
  __ZdlPv($2); //@line 19573
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19578
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19579
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 19580
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 19583
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 19584
  HEAP32[$9 >> 2] = $2; //@line 19585
  sp = STACKTOP; //@line 19586
  return;
 }
 ___async_unwind = 0; //@line 19589
 HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 19590
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 19591
 HEAP32[$9 >> 2] = $2; //@line 19592
 sp = STACKTOP; //@line 19593
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_32($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 20709
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20713
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20715
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20717
 HEAP32[$4 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 20720
 HEAP8[$4 + 1936 >> 0] = 1; //@line 20722
 HEAP8[$6 >> 0] = 1; //@line 20723
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 20724
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 20725
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 459; //@line 20728
  sp = STACKTOP; //@line 20729
  return;
 }
 ___async_unwind = 0; //@line 20732
 HEAP32[$ReallocAsyncCtx10 >> 2] = 459; //@line 20733
 sp = STACKTOP; //@line 20734
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11116
 STACKTOP = STACKTOP + 32 | 0; //@line 11117
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11117
 $vararg_buffer = sp; //@line 11118
 $3 = sp + 20 | 0; //@line 11119
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 11123
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 11125
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 11127
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 11129
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 11131
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 11136
  $10 = -1; //@line 11137
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 11140
 }
 STACKTOP = sp; //@line 11142
 return $10 | 0; //@line 11142
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_217($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17313
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17315
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = (HEAP8[$2 >> 0] | 0) + 1 << 24 >> 24; //@line 17322
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17325
 _mbed_assert_internal(13085, 13111, 958); //@line 17326
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 430; //@line 17329
  $5 = $ReallocAsyncCtx5 + 4 | 0; //@line 17330
  HEAP32[$5 >> 2] = $2; //@line 17331
  sp = STACKTOP; //@line 17332
  return;
 }
 ___async_unwind = 0; //@line 17335
 HEAP32[$ReallocAsyncCtx5 >> 2] = 430; //@line 17336
 $5 = $ReallocAsyncCtx5 + 4 | 0; //@line 17337
 HEAP32[$5 >> 2] = $2; //@line 17338
 sp = STACKTOP; //@line 17339
 return;
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2609
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {
  _sleep_manager_lock_deep_sleep_internal(); //@line 2619
 }
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 2622
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2623
 $8 = _ticker_read_us($7) | 0; //@line 2624
 $9 = tempRet0; //@line 2625
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 113; //@line 2628
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2630
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2632
  sp = STACKTOP; //@line 2633
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2636
 $13 = $0 + 8 | 0; //@line 2638
 HEAP32[$13 >> 2] = $8; //@line 2640
 HEAP32[$13 + 4 >> 2] = $9; //@line 2643
 HEAP32[$0 >> 2] = 1; //@line 2644
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_289($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22274
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22278
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22279
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 22285
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22286
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 22287
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 111; //@line 22290
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 22291
  HEAP32[$9 >> 2] = $4; //@line 22292
  sp = STACKTOP; //@line 22293
  return;
 }
 ___async_unwind = 0; //@line 22296
 HEAP32[$ReallocAsyncCtx3 >> 2] = 111; //@line 22297
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 22298
 HEAP32[$9 >> 2] = $4; //@line 22299
 sp = STACKTOP; //@line 22300
 return;
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $13 = 0;
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 1335
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 1343
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 1351
 }
 $13 = $0 + 660 | 0; //@line 1353
 if ((HEAP32[$13 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 1359
  if ((HEAP32[$13 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(5, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 1365
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 1376
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6391
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 6394
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 6396
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 6398
 if (!($$unpack2$i & 1)) {
  $12 = $$unpack$i; //@line 6403
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 6408
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6410
 FUNCTION_TABLE_vii[$12 & 15]($5, $1); //@line 6411
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 218; //@line 6414
  sp = STACKTOP; //@line 6415
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6418
  return;
 }
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6908
 STACKTOP = STACKTOP + 16 | 0; //@line 6909
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6909
 $vararg_buffer = sp; //@line 6910
 HEAP32[$vararg_buffer >> 2] = $0; //@line 6911
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 6913
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 6915
 _mbed_error_printf(14526, $vararg_buffer); //@line 6916
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6917
 _mbed_die(); //@line 6918
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 620; //@line 6921
  sp = STACKTOP; //@line 6922
  STACKTOP = sp; //@line 6923
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6925
  STACKTOP = sp; //@line 6926
  return;
 }
}
function _schedule_interrupt__async_cb_25($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20316
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20318
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20320
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20322
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 20325
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 20326
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 20327
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 20331
  ___async_unwind = 0; //@line 20332
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 614; //@line 20334
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 20336
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 20338
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 20340
 sp = STACKTOP; //@line 20341
 return;
}
function __ZN12LoRaWANStack12stop_sendingEv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30983
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30985
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -1e3; //@line 30990
  $13 = ___async_retval; //@line 30991
  HEAP32[$13 >> 2] = $$0; //@line 30992
  return;
 }
 $7 = $2 + 2496 | 0; //@line 30995
 if ((HEAP32[$7 >> 2] | 0) != 8) {
  $$0 = -1e3; //@line 30999
  $13 = ___async_retval; //@line 31000
  HEAP32[$13 >> 2] = $$0; //@line 31001
  return;
 }
 $10 = $2 + 2904 | 0; //@line 31004
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -18; //@line 31007
 __ZN7LoRaMac14set_tx_ongoingEb($4, 0); //@line 31008
 HEAP32[$7 >> 2] = 2; //@line 31009
 $$0 = 0; //@line 31010
 $13 = ___async_retval; //@line 31011
 HEAP32[$13 >> 2] = $$0; //@line 31012
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26609
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26611
 $3 = HEAP32[$2 >> 2] | 0; //@line 26612
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 26615
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26616
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 26617
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 530; //@line 26620
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 26621
  HEAP32[$7 >> 2] = $2; //@line 26622
  sp = STACKTOP; //@line 26623
  return;
 }
 ___async_unwind = 0; //@line 26626
 HEAP32[$ReallocAsyncCtx2 >> 2] = 530; //@line 26627
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 26628
 HEAP32[$7 >> 2] = $2; //@line 26629
 sp = STACKTOP; //@line 26630
 return;
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15700
 STACKTOP = STACKTOP + 16 | 0; //@line 15701
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15701
 $3 = sp; //@line 15702
 HEAP32[$3 >> 2] = $varargs; //@line 15703
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15704
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 15705
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 664; //@line 15708
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15710
  sp = STACKTOP; //@line 15711
  STACKTOP = sp; //@line 15712
  return 0; //@line 15712
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15714
  STACKTOP = sp; //@line 15715
  return $4 | 0; //@line 15715
 }
 return 0; //@line 15717
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18884
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18886
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18888
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18890
 $9 = HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] | 0; //@line 18893
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 18894
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 18895
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 18899
  ___async_unwind = 0; //@line 18900
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 604; //@line 18902
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 18904
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 18906
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 18908
 sp = STACKTOP; //@line 18909
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12239
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12241
 $3 = HEAP32[$2 >> 2] | 0; //@line 12242
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 12245
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 12246
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 12247
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 527; //@line 12250
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 12251
  HEAP32[$7 >> 2] = $2; //@line 12252
  sp = STACKTOP; //@line 12253
  return;
 }
 ___async_unwind = 0; //@line 12256
 HEAP32[$ReallocAsyncCtx2 >> 2] = 527; //@line 12257
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 12258
 HEAP32[$7 >> 2] = $2; //@line 12259
 sp = STACKTOP; //@line 12260
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15771
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 15774
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 15776
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 15778
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 15783
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 15788
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15790
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 15791
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 460; //@line 15794
  sp = STACKTOP; //@line 15795
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15798
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1656
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 1659
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 1661
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 1663
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 1668
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 1673
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1675
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 1676
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 88; //@line 1679
  sp = STACKTOP; //@line 1680
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1683
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9335
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 9338
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 9340
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 9342
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 9347
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 9352
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9354
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 9355
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 325; //@line 9358
  sp = STACKTOP; //@line 9359
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9362
  return;
 }
}
function _mbedtls_ccm_setkey__async_cb_4($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18051
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18053
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18055
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18057
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18059
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 18060
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 18061
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 18065
  ___async_unwind = 0; //@line 18066
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 558; //@line 18068
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 18070
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 18072
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 18074
 sp = STACKTOP; //@line 18075
 return;
}
function _mbed_vtracef__async_cb_88($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24499
 HEAP32[171] = HEAP32[169]; //@line 24501
 $2 = HEAP32[177] | 0; //@line 24502
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 24507
 HEAP32[178] = 0; //@line 24508
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 24509
 FUNCTION_TABLE_v[$2 & 7](); //@line 24510
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 24513
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 24514
  HEAP32[$5 >> 2] = $4; //@line 24515
  sp = STACKTOP; //@line 24516
  return;
 }
 ___async_unwind = 0; //@line 24519
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 24520
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 24521
 HEAP32[$5 >> 2] = $4; //@line 24522
 sp = STACKTOP; //@line 24523
 return;
}
function _mbed_vtracef__async_cb_85($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24235
 HEAP32[171] = HEAP32[169]; //@line 24237
 $2 = HEAP32[177] | 0; //@line 24238
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 24243
 HEAP32[178] = 0; //@line 24244
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 24245
 FUNCTION_TABLE_v[$2 & 7](); //@line 24246
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 24249
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 24250
  HEAP32[$5 >> 2] = $4; //@line 24251
  sp = STACKTOP; //@line 24252
  return;
 }
 ___async_unwind = 0; //@line 24255
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 24256
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 24257
 HEAP32[$5 >> 2] = $4; //@line 24258
 sp = STACKTOP; //@line 24259
 return;
}
function _mbed_vtracef__async_cb_84($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24205
 HEAP32[171] = HEAP32[169]; //@line 24207
 $2 = HEAP32[177] | 0; //@line 24208
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 24213
 HEAP32[178] = 0; //@line 24214
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 24215
 FUNCTION_TABLE_v[$2 & 7](); //@line 24216
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 24219
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 24220
  HEAP32[$5 >> 2] = $4; //@line 24221
  sp = STACKTOP; //@line 24222
  return;
 }
 ___async_unwind = 0; //@line 24225
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 24226
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 24227
 HEAP32[$5 >> 2] = $4; //@line 24228
 sp = STACKTOP; //@line 24229
 return;
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2374] | 0; //@line 2735
 if (!$3) {
  $$010 = 0; //@line 2738
  return $$010 | 0; //@line 2739
 } else {
  $$011 = 9492; //@line 2741
  $6 = $3; //@line 2741
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 2757
     label = 6; //@line 2758
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 2765
  if (!$6) {
   $$010 = 0; //@line 2768
   label = 6; //@line 2769
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 2772
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 2776
 }
 return 0; //@line 2778
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_285($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22079
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22081
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22083
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22085
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 22086
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 22089
  $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 22090
  HEAP32[$6 >> 2] = $2; //@line 22091
  sp = STACKTOP; //@line 22092
  return;
 }
 ___async_unwind = 0; //@line 22095
 HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 22096
 $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 22097
 HEAP32[$6 >> 2] = $2; //@line 22098
 sp = STACKTOP; //@line 22099
 return;
}
function __ZN16LoRaWANInterface16set_device_classE14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4591
 STACKTOP = STACKTOP + 16 | 0; //@line 4592
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4592
 $2 = sp; //@line 4593
 HEAP32[$2 >> 2] = $1; //@line 4594
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4596
 $4 = __ZN12LoRaWANStack16set_device_classERK14device_class_t($0 + 4 | 0, $2) | 0; //@line 4597
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 149; //@line 4600
  sp = STACKTOP; //@line 4601
  STACKTOP = sp; //@line 4602
  return 0; //@line 4602
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4604
  STACKTOP = sp; //@line 4605
  return $4 | 0; //@line 4605
 }
 return 0; //@line 4607
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 16400
 $5 = HEAP32[$4 >> 2] | 0; //@line 16401
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 16405
   HEAP32[$1 + 24 >> 2] = $3; //@line 16407
   HEAP32[$1 + 36 >> 2] = 1; //@line 16409
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 16413
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 16416
    HEAP32[$1 + 24 >> 2] = 2; //@line 16418
    HEAP8[$1 + 54 >> 0] = 1; //@line 16420
    break;
   }
   $10 = $1 + 24 | 0; //@line 16423
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 16427
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac13clear_tx_pipeEv__async_cb_254($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19695
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19697
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19699
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19701
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19703
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 19705
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 19706
 if (!___async) {
  ___async_unwind = 0; //@line 19709
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 432; //@line 19711
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 19713
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 19715
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 19717
 sp = STACKTOP; //@line 19718
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_129($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27731
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27733
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27735
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27737
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 27738
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 464; //@line 27741
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 27742
  HEAP32[$6 >> 2] = $2; //@line 27743
  sp = STACKTOP; //@line 27744
  return;
 }
 ___async_unwind = 0; //@line 27747
 HEAP32[$ReallocAsyncCtx2 >> 2] = 464; //@line 27748
 $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 27749
 HEAP32[$6 >> 2] = $2; //@line 27750
 sp = STACKTOP; //@line 27751
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_45($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21609
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21613
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21618
 _mbed_assert_internal(12080, 12089, 775); //@line 21619
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 21622
  $6 = $ReallocAsyncCtx6 + 4 | 0; //@line 21623
  HEAP32[$6 >> 2] = $4; //@line 21624
  sp = STACKTOP; //@line 21625
  return;
 }
 ___async_unwind = 0; //@line 21628
 HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 21629
 $6 = $ReallocAsyncCtx6 + 4 | 0; //@line 21630
 HEAP32[$6 >> 2] = $4; //@line 21631
 sp = STACKTOP; //@line 21632
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_98($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 25143
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25147
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 25152
 _mbed_assert_internal(12080, 12089, 775); //@line 25153
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 251; //@line 25156
  $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 25157
  HEAP32[$6 >> 2] = $4; //@line 25158
  sp = STACKTOP; //@line 25159
  return;
 }
 ___async_unwind = 0; //@line 25162
 HEAP32[$ReallocAsyncCtx10 >> 2] = 251; //@line 25163
 $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 25164
 HEAP32[$6 >> 2] = $4; //@line 25165
 sp = STACKTOP; //@line 25166
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_94($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 24910
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24914
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 24919
 _mbed_assert_internal(12080, 12089, 775); //@line 24920
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 243; //@line 24923
  $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 24924
  HEAP32[$6 >> 2] = $4; //@line 24925
  sp = STACKTOP; //@line 24926
  return;
 }
 ___async_unwind = 0; //@line 24929
 HEAP32[$ReallocAsyncCtx12 >> 2] = 243; //@line 24930
 $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 24931
 HEAP32[$6 >> 2] = $4; //@line 24932
 sp = STACKTOP; //@line 24933
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_72($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 23306
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23310
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 23315
 _mbed_assert_internal(12080, 12089, 775); //@line 23316
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 239; //@line 23319
  $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 23320
  HEAP32[$6 >> 2] = $4; //@line 23321
  sp = STACKTOP; //@line 23322
  return;
 }
 ___async_unwind = 0; //@line 23325
 HEAP32[$ReallocAsyncCtx10 >> 2] = 239; //@line 23326
 $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 23327
 HEAP32[$6 >> 2] = $4; //@line 23328
 sp = STACKTOP; //@line 23329
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_70($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 23239
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23243
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 23248
 _mbed_assert_internal(12080, 12089, 775); //@line 23249
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 235; //@line 23252
  $6 = $ReallocAsyncCtx11 + 4 | 0; //@line 23253
  HEAP32[$6 >> 2] = $4; //@line 23254
  sp = STACKTOP; //@line 23255
  return;
 }
 ___async_unwind = 0; //@line 23258
 HEAP32[$ReallocAsyncCtx11 >> 2] = 235; //@line 23259
 $6 = $ReallocAsyncCtx11 + 4 | 0; //@line 23260
 HEAP32[$6 >> 2] = $4; //@line 23261
 sp = STACKTOP; //@line 23262
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_68($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 23172
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23176
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 23181
 _mbed_assert_internal(12080, 12089, 775); //@line 23182
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 231; //@line 23185
  $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 23186
  HEAP32[$6 >> 2] = $4; //@line 23187
  sp = STACKTOP; //@line 23188
  return;
 }
 ___async_unwind = 0; //@line 23191
 HEAP32[$ReallocAsyncCtx12 >> 2] = 231; //@line 23192
 $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 23193
 HEAP32[$6 >> 2] = $4; //@line 23194
 sp = STACKTOP; //@line 23195
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_150($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29732
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29736
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 29741
 _mbed_assert_internal(12080, 12089, 775); //@line 29742
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 308; //@line 29745
  $6 = $ReallocAsyncCtx4 + 4 | 0; //@line 29746
  HEAP32[$6 >> 2] = $4; //@line 29747
  sp = STACKTOP; //@line 29748
  return;
 }
 ___async_unwind = 0; //@line 29751
 HEAP32[$ReallocAsyncCtx4 >> 2] = 308; //@line 29752
 $6 = $ReallocAsyncCtx4 + 4 | 0; //@line 29753
 HEAP32[$6 >> 2] = $4; //@line 29754
 sp = STACKTOP; //@line 29755
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3094
 $4 = _equeue_tick() | 0; //@line 3096
 HEAP32[$2 + -4 >> 2] = $1; //@line 3098
 $6 = $2 + -16 | 0; //@line 3099
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 3102
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3103
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 3104
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 121; //@line 3107
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3109
  sp = STACKTOP; //@line 3110
  return 0; //@line 3111
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3113
  _equeue_sema_signal($0 + 48 | 0); //@line 3115
  return $9 | 0; //@line 3116
 }
 return 0; //@line 3118
}
function __ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10864
 STACKTOP = STACKTOP + 16 | 0; //@line 10865
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10865
 $1 = $0 + 2904 | 0; //@line 10867
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -18 | 1; //@line 10871
 _mbed_tracef(2, 12187, 12829, sp); //@line 10872
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10873
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 10874
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 360; //@line 10877
  sp = STACKTOP; //@line 10878
  STACKTOP = sp; //@line 10879
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10881
  STACKTOP = sp; //@line 10882
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_195($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14900
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14904
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 14906
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 14908
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 14910
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 14911
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 14912
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 324; //@line 14915
  sp = STACKTOP; //@line 14916
  return;
 }
 ___async_unwind = 0; //@line 14919
 HEAP32[$ReallocAsyncCtx >> 2] = 324; //@line 14920
 sp = STACKTOP; //@line 14921
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_257($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 19832
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19836
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 19841
 _mbed_assert_internal(12080, 12089, 775); //@line 19842
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 303; //@line 19845
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 19846
  HEAP32[$6 >> 2] = $4; //@line 19847
  sp = STACKTOP; //@line 19848
  return;
 }
 ___async_unwind = 0; //@line 19851
 HEAP32[$ReallocAsyncCtx9 >> 2] = 303; //@line 19852
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 19853
 HEAP32[$6 >> 2] = $4; //@line 19854
 sp = STACKTOP; //@line 19855
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 11223
 $3 = HEAP8[$1 >> 0] | 0; //@line 11224
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 11229
  $$lcssa8 = $2; //@line 11229
 } else {
  $$011 = $1; //@line 11231
  $$0710 = $0; //@line 11231
  do {
   $$0710 = $$0710 + 1 | 0; //@line 11233
   $$011 = $$011 + 1 | 0; //@line 11234
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 11235
   $9 = HEAP8[$$011 >> 0] | 0; //@line 11236
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 11241
  $$lcssa8 = $8; //@line 11241
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 11251
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 16950
 STACKTOP = STACKTOP + 16 | 0; //@line 16951
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16951
 $vararg_buffer = sp; //@line 16952
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 16953
 FUNCTION_TABLE_v[$0 & 7](); //@line 16954
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 682; //@line 16957
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 16959
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 16961
  sp = STACKTOP; //@line 16962
  STACKTOP = sp; //@line 16963
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16965
  _abort_message(18019, $vararg_buffer); //@line 16966
 }
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 10565
 STACKTOP = STACKTOP + 16 | 0; //@line 10566
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10566
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10572
  STACKTOP = sp; //@line 10573
  return $$0 | 0; //@line 10573
 }
 HEAP8[$0 + 2909 >> 0] = 1; //@line 10576
 if (!(HEAP32[$0 + 2528 >> 2] | 0)) {
  _mbed_tracef(2, 12187, 12694, sp); //@line 10581
  $$0 = -1003; //@line 10582
  STACKTOP = sp; //@line 10583
  return $$0 | 0; //@line 10583
 } else {
  __ZN7LoRaMac24setup_link_check_requestEv($0); //@line 10585
  $$0 = 0; //@line 10586
  STACKTOP = sp; //@line 10587
  return $$0 | 0; //@line 10587
 }
 return 0; //@line 10589
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22411
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22415
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22419
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 22422
 _mbed_tracef(16, 12187, 12605, $4); //@line 22423
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22424
 __ZN12LoRaWANStack23process_connected_stateEv($8); //@line 22425
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 331; //@line 22428
  sp = STACKTOP; //@line 22429
  return;
 }
 ___async_unwind = 0; //@line 22432
 HEAP32[$ReallocAsyncCtx2 >> 2] = 331; //@line 22433
 sp = STACKTOP; //@line 22434
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_112($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 26579
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26583
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26584
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 26588
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 26592
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(4) | 0; //@line 26593
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 26594
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 346; //@line 26597
  sp = STACKTOP; //@line 26598
  return;
 }
 ___async_unwind = 0; //@line 26601
 HEAP32[$ReallocAsyncCtx8 >> 2] = 346; //@line 26602
 sp = STACKTOP; //@line 26603
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7496
 $2 = HEAP32[2598] | 0; //@line 7497
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7498
 _putc($1, $2) | 0; //@line 7499
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 642; //@line 7502
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 7504
  sp = STACKTOP; //@line 7505
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7508
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7509
 _fflush($2) | 0; //@line 7510
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 643; //@line 7513
  sp = STACKTOP; //@line 7514
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7517
  return;
 }
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 15665
  } else {
   $$01318 = $0; //@line 15667
   $$01417 = $2; //@line 15667
   $$019 = $1; //@line 15667
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 15669
    $5 = HEAP8[$$019 >> 0] | 0; //@line 15670
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 15675
    if (!$$01417) {
     $14 = 0; //@line 15680
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 15683
     $$019 = $$019 + 1 | 0; //@line 15683
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 15689
  }
 } while (0);
 return $14 | 0; //@line 15692
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11175
 STACKTOP = STACKTOP + 32 | 0; //@line 11176
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11176
 $vararg_buffer = sp; //@line 11177
 HEAP32[$0 + 36 >> 2] = 13; //@line 11180
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 11188
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 11190
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 11192
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 11197
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 11200
 STACKTOP = sp; //@line 11201
 return $14 | 0; //@line 11201
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14144
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14145
 $1 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14146
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 419; //@line 14149
  sp = STACKTOP; //@line 14150
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14153
 if (!$1) {
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14158
 _mbed_assert_internal(13085, 13111, 855); //@line 14159
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 420; //@line 14162
  sp = STACKTOP; //@line 14163
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14166
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_283($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21994
 $3 = $2 + 2056 | 0; //@line 21995
 HEAP32[$3 >> 2] = 2; //@line 21996
 HEAP32[$2 + 2092 >> 2] = 2; //@line 21998
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 476 | 0); //@line 22000
 HEAP8[$2 + 2063 >> 0] = HEAP8[$2 + 1699 >> 0] | 0; //@line 22004
 HEAP8[$2 + 2062 >> 0] = 0; //@line 22006
 HEAP32[$2 + 2064 >> 2] = 0; //@line 22008
 HEAP8[$2 + 1180 >> 0] = 0; //@line 22010
 HEAP32[$3 >> 2] = 0; //@line 22011
 if ((HEAP32[$2 + 2052 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$2 + 1174 >> 0] | 0) {
  return;
 }
 $18 = $2 + 1760 | 0; //@line 22024
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1; //@line 22027
 return;
}
function _mbed_die__async_cb_357($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 27290
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27292
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27294
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 27295
 _wait_ms(150); //@line 27296
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 623; //@line 27299
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 27300
  HEAP32[$4 >> 2] = $2; //@line 27301
  sp = STACKTOP; //@line 27302
  return;
 }
 ___async_unwind = 0; //@line 27305
 HEAP32[$ReallocAsyncCtx14 >> 2] = 623; //@line 27306
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 27307
 HEAP32[$4 >> 2] = $2; //@line 27308
 sp = STACKTOP; //@line 27309
 return;
}
function _mbed_die__async_cb_356($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 27265
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27267
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27269
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 27270
 _wait_ms(150); //@line 27271
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 624; //@line 27274
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 27275
  HEAP32[$4 >> 2] = $2; //@line 27276
  sp = STACKTOP; //@line 27277
  return;
 }
 ___async_unwind = 0; //@line 27280
 HEAP32[$ReallocAsyncCtx13 >> 2] = 624; //@line 27281
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 27282
 HEAP32[$4 >> 2] = $2; //@line 27283
 sp = STACKTOP; //@line 27284
 return;
}
function _mbed_die__async_cb_355($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 27240
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27242
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27244
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 27245
 _wait_ms(150); //@line 27246
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 625; //@line 27249
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 27250
  HEAP32[$4 >> 2] = $2; //@line 27251
  sp = STACKTOP; //@line 27252
  return;
 }
 ___async_unwind = 0; //@line 27255
 HEAP32[$ReallocAsyncCtx12 >> 2] = 625; //@line 27256
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 27257
 HEAP32[$4 >> 2] = $2; //@line 27258
 sp = STACKTOP; //@line 27259
 return;
}
function _mbed_die__async_cb_354($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 27215
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27217
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27219
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 27220
 _wait_ms(150); //@line 27221
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 626; //@line 27224
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 27225
  HEAP32[$4 >> 2] = $2; //@line 27226
  sp = STACKTOP; //@line 27227
  return;
 }
 ___async_unwind = 0; //@line 27230
 HEAP32[$ReallocAsyncCtx11 >> 2] = 626; //@line 27231
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 27232
 HEAP32[$4 >> 2] = $2; //@line 27233
 sp = STACKTOP; //@line 27234
 return;
}
function _mbed_die__async_cb_353($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 27190
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27192
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27194
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 27195
 _wait_ms(150); //@line 27196
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 627; //@line 27199
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 27200
  HEAP32[$4 >> 2] = $2; //@line 27201
  sp = STACKTOP; //@line 27202
  return;
 }
 ___async_unwind = 0; //@line 27205
 HEAP32[$ReallocAsyncCtx10 >> 2] = 627; //@line 27206
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 27207
 HEAP32[$4 >> 2] = $2; //@line 27208
 sp = STACKTOP; //@line 27209
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_307($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 25040
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25042
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25044
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25046
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 25048
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 25049
 FUNCTION_TABLE_vii[$8 & 15]($2, $4); //@line 25050
 if (!___async) {
  ___async_unwind = 0; //@line 25053
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 186; //@line 25055
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $6; //@line 25057
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $2; //@line 25059
 sp = STACKTOP; //@line 25060
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21952
 $3 = $2 + 2056 | 0; //@line 21953
 HEAP32[$3 >> 2] = 2; //@line 21954
 HEAP32[$2 + 2092 >> 2] = 2; //@line 21956
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 476 | 0); //@line 21958
 HEAP8[$2 + 2063 >> 0] = HEAP8[$2 + 1699 >> 0] | 0; //@line 21962
 HEAP8[$2 + 2062 >> 0] = 0; //@line 21964
 HEAP32[$2 + 2064 >> 2] = 0; //@line 21966
 HEAP8[$2 + 1180 >> 0] = 0; //@line 21968
 HEAP32[$3 >> 2] = 0; //@line 21969
 if ((HEAP32[$2 + 2052 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$2 + 1174 >> 0] | 0) {
  return;
 }
 $18 = $2 + 1760 | 0; //@line 21982
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1; //@line 21985
 return;
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb_222($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17498
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17502
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17503
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 17507
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 17511
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 17512
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 17513
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 359; //@line 17516
  sp = STACKTOP; //@line 17517
  return;
 }
 ___async_unwind = 0; //@line 17520
 HEAP32[$ReallocAsyncCtx >> 2] = 359; //@line 17521
 sp = STACKTOP; //@line 17522
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3614
 STACKTOP = STACKTOP + 16 | 0; //@line 3615
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3615
 $3 = sp; //@line 3616
 HEAP32[$3 >> 2] = $varargs; //@line 3617
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3618
 _mbed_vtracef($0, $1, $2, $3); //@line 3619
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 125; //@line 3622
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3624
  sp = STACKTOP; //@line 3625
  STACKTOP = sp; //@line 3626
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3628
  STACKTOP = sp; //@line 3629
  return;
 }
}
function _mbed_die__async_cb_352($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27165
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27167
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27169
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 27170
 _wait_ms(150); //@line 27171
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 628; //@line 27174
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 27175
  HEAP32[$4 >> 2] = $2; //@line 27176
  sp = STACKTOP; //@line 27177
  return;
 }
 ___async_unwind = 0; //@line 27180
 HEAP32[$ReallocAsyncCtx9 >> 2] = 628; //@line 27181
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 27182
 HEAP32[$4 >> 2] = $2; //@line 27183
 sp = STACKTOP; //@line 27184
 return;
}
function _mbed_die__async_cb_351($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 27140
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27142
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27144
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 27145
 _wait_ms(400); //@line 27146
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 629; //@line 27149
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 27150
  HEAP32[$4 >> 2] = $2; //@line 27151
  sp = STACKTOP; //@line 27152
  return;
 }
 ___async_unwind = 0; //@line 27155
 HEAP32[$ReallocAsyncCtx8 >> 2] = 629; //@line 27156
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 27157
 HEAP32[$4 >> 2] = $2; //@line 27158
 sp = STACKTOP; //@line 27159
 return;
}
function _mbed_die__async_cb_350($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27115
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27117
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27119
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 27120
 _wait_ms(400); //@line 27121
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 630; //@line 27124
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 27125
  HEAP32[$4 >> 2] = $2; //@line 27126
  sp = STACKTOP; //@line 27127
  return;
 }
 ___async_unwind = 0; //@line 27130
 HEAP32[$ReallocAsyncCtx7 >> 2] = 630; //@line 27131
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 27132
 HEAP32[$4 >> 2] = $2; //@line 27133
 sp = STACKTOP; //@line 27134
 return;
}
function _mbed_die__async_cb_349($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27090
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27092
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27094
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27095
 _wait_ms(400); //@line 27096
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 631; //@line 27099
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 27100
  HEAP32[$4 >> 2] = $2; //@line 27101
  sp = STACKTOP; //@line 27102
  return;
 }
 ___async_unwind = 0; //@line 27105
 HEAP32[$ReallocAsyncCtx6 >> 2] = 631; //@line 27106
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 27107
 HEAP32[$4 >> 2] = $2; //@line 27108
 sp = STACKTOP; //@line 27109
 return;
}
function _mbed_die__async_cb_348($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27065
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27067
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27069
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27070
 _wait_ms(400); //@line 27071
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 632; //@line 27074
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 27075
  HEAP32[$4 >> 2] = $2; //@line 27076
  sp = STACKTOP; //@line 27077
  return;
 }
 ___async_unwind = 0; //@line 27080
 HEAP32[$ReallocAsyncCtx5 >> 2] = 632; //@line 27081
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 27082
 HEAP32[$4 >> 2] = $2; //@line 27083
 sp = STACKTOP; //@line 27084
 return;
}
function _mbed_die__async_cb_347($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27040
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27042
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27044
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 27045
 _wait_ms(400); //@line 27046
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 633; //@line 27049
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 27050
  HEAP32[$4 >> 2] = $2; //@line 27051
  sp = STACKTOP; //@line 27052
  return;
 }
 ___async_unwind = 0; //@line 27055
 HEAP32[$ReallocAsyncCtx4 >> 2] = 633; //@line 27056
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 27057
 HEAP32[$4 >> 2] = $2; //@line 27058
 sp = STACKTOP; //@line 27059
 return;
}
function _mbed_die__async_cb_346($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27015
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27017
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27019
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27020
 _wait_ms(400); //@line 27021
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 634; //@line 27024
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 27025
  HEAP32[$4 >> 2] = $2; //@line 27026
  sp = STACKTOP; //@line 27027
  return;
 }
 ___async_unwind = 0; //@line 27030
 HEAP32[$ReallocAsyncCtx3 >> 2] = 634; //@line 27031
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 27032
 HEAP32[$4 >> 2] = $2; //@line 27033
 sp = STACKTOP; //@line 27034
 return;
}
function _mbed_die__async_cb_345($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26990
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26992
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 26994
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26995
 _wait_ms(400); //@line 26996
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 635; //@line 26999
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 27000
  HEAP32[$4 >> 2] = $2; //@line 27001
  sp = STACKTOP; //@line 27002
  return;
 }
 ___async_unwind = 0; //@line 27005
 HEAP32[$ReallocAsyncCtx2 >> 2] = 635; //@line 27006
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 27007
 HEAP32[$4 >> 2] = $2; //@line 27008
 sp = STACKTOP; //@line 27009
 return;
}
function _mbed_die__async_cb_344($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26965
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26967
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 26969
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 26970
 _wait_ms(400); //@line 26971
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 636; //@line 26974
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 26975
  HEAP32[$4 >> 2] = $2; //@line 26976
  sp = STACKTOP; //@line 26977
  return;
 }
 ___async_unwind = 0; //@line 26980
 HEAP32[$ReallocAsyncCtx >> 2] = 636; //@line 26981
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 26982
 HEAP32[$4 >> 2] = $2; //@line 26983
 sp = STACKTOP; //@line 26984
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb_66($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23099
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23101
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23103
 $5 = HEAP32[$2 >> 2] | 0; //@line 23104
 if (!($5 & 2)) {
  return;
 }
 HEAP32[$2 >> 2] = $5 & -3; //@line 23111
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 23112
 __ZN12LoRaWANStack23mcps_indication_handlerEv($4); //@line 23113
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 227; //@line 23116
  sp = STACKTOP; //@line 23117
  return;
 }
 ___async_unwind = 0; //@line 23120
 HEAP32[$ReallocAsyncCtx >> 2] = 227; //@line 23121
 sp = STACKTOP; //@line 23122
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_42($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21516
 $4 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 788 >> 2] | 0; //@line 21520
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 21526
 if (!$7) {
  return;
 }
 $10 = HEAP32[$7 >> 2] | 0; //@line 21532
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 21533
 FUNCTION_TABLE_vi[$10 & 1023]($4 + 48 | 0); //@line 21534
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 21537
  sp = STACKTOP; //@line 21538
  return;
 }
 ___async_unwind = 0; //@line 21541
 HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 21542
 sp = STACKTOP; //@line 21543
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_292($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22363
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22367
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22369
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 22371
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 22372
 FUNCTION_TABLE_vii[$7 & 15]($4, $6); //@line 22373
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 263; //@line 22376
  sp = STACKTOP; //@line 22377
  return;
 }
 ___async_unwind = 0; //@line 22380
 HEAP32[$ReallocAsyncCtx >> 2] = 263; //@line 22381
 sp = STACKTOP; //@line 22382
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEhj__async_cb_251($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $10 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19530
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 19534
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 124 >> 2] | 0; //@line 19536
 $10 = HEAPU8[$0 + 8 >> 0] | 0; //@line 19537
 $$1 = (HEAP32[$9 + ($10 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 19542
 if ($$1 << 24 >> 24 != 3) {
  $$0 = $$1; //@line 19545
  $17 = ___async_retval; //@line 19546
  HEAP8[$17 >> 0] = $$0; //@line 19547
  return;
 }
 HEAP32[$9 + ($10 * 12 | 0) + 4 >> 2] = $6; //@line 19551
 $$0 = 3; //@line 19552
 $17 = ___async_retval; //@line 19553
 HEAP8[$17 >> 0] = $$0; //@line 19554
 return;
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5446
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5447
 _mbedtls_cipher_free($0); //@line 5448
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 599; //@line 5451
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5453
  sp = STACKTOP; //@line 5454
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5457
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5458
 _mbedtls_platform_zeroize($0, 400); //@line 5459
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 600; //@line 5462
  sp = STACKTOP; //@line 5463
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5466
  return;
 }
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2671
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2672
 _mbedtls_cipher_free($0); //@line 2673
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 560; //@line 2676
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2678
  sp = STACKTOP; //@line 2679
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2682
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2683
 _mbedtls_platform_zeroize($0, 68); //@line 2684
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 561; //@line 2687
  sp = STACKTOP; //@line 2688
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2691
  return;
 }
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_51($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21906
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21910
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21912
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 2; //@line 21915
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 21918
 _mbed_assert_internal(12080, 12089, 775); //@line 21919
 if (!___async) {
  ___async_unwind = 0; //@line 21922
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 224; //@line 21924
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $4; //@line 21926
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $6; //@line 21928
 sp = STACKTOP; //@line 21929
 return;
}
function _equeue_timeleft($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$014 = 0, $10 = 0, $11 = 0, $19 = 0, $21 = 0, $5 = 0;
 if (!$1) {
  $$0 = -1; //@line 3470
  return $$0 | 0; //@line 3471
 }
 $5 = $0 + 16 | 0; //@line 3475
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 3480
 $11 = $0 + 128 | 0; //@line 3481
 _equeue_mutex_lock($11); //@line 3482
 if (($1 >> HEAP32[$5 >> 2] | 0) == (HEAPU8[$10 + 4 >> 0] | 0 | 0)) {
  $19 = HEAP32[$10 + 20 >> 2] | 0; //@line 3491
  $21 = $19 - (_equeue_tick() | 0) | 0; //@line 3493
  $$014 = $21 & ~($21 >> 31); //@line 3497
 } else {
  $$014 = -1; //@line 3499
 }
 _equeue_mutex_unlock($11); //@line 3501
 $$0 = $$014; //@line 3502
 return $$0 | 0; //@line 3503
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_208($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15848
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15852
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 15855
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 15857
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 15858
 FUNCTION_TABLE_vii[$7 & 15]($4, $6); //@line 15859
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 217; //@line 15862
  sp = STACKTOP; //@line 15863
  return;
 }
 ___async_unwind = 0; //@line 15866
 HEAP32[$ReallocAsyncCtx >> 2] = 217; //@line 15867
 sp = STACKTOP; //@line 15868
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7236
 STACKTOP = STACKTOP + 16 | 0; //@line 7237
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7237
 $1 = sp; //@line 7238
 HEAP32[$1 >> 2] = $varargs; //@line 7239
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7240
 _mbed_error_vfprintf($0, $1); //@line 7241
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 637; //@line 7244
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7246
  sp = STACKTOP; //@line 7247
  STACKTOP = sp; //@line 7248
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7250
  STACKTOP = sp; //@line 7251
  return;
 }
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_206($0) {
 $0 = $0 | 0;
 var $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15725
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15733
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  return;
 }
 _mbed_tracef(16, 12866, 13492, HEAP32[$0 + 8 >> 2] | 0); //@line 15739
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 15740
 __ZN7LoRaMac15open_rx2_windowEv($8); //@line 15741
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 441; //@line 15744
  sp = STACKTOP; //@line 15745
  return;
 }
 ___async_unwind = 0; //@line 15748
 HEAP32[$ReallocAsyncCtx3 >> 2] = 441; //@line 15749
 sp = STACKTOP; //@line 15750
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29679
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29681
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 29683
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29685
 if (!$AsyncRetVal) {
  $11 = (HEAP32[$0 + 4 >> 2] | 0) + 2904 | 0; //@line 29688
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] & -18 | 1; //@line 29692
  __ZN7LoRaMac14set_tx_ongoingEb($4, 1); //@line 29693
  HEAP32[$6 >> 2] = 8; //@line 29694
  $$0 = 0; //@line 29695
 } else {
  $$0 = $AsyncRetVal; //@line 29697
 }
 HEAP16[___async_retval >> 1] = ($$0 | 0) == 0 ? $8 : $$0 & 65535; //@line 29703
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18134
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18136
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 18142
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 18145
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18146
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 18147
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 18150
  sp = STACKTOP; //@line 18151
  return;
 }
 ___async_unwind = 0; //@line 18154
 HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 18155
 sp = STACKTOP; //@line 18156
 return;
}
function __ZN7LoRaMac21post_process_mcps_reqEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $20 = 0, $6 = 0;
 HEAP8[$0 + 1180 >> 0] = 0; //@line 11227
 HEAP32[$0 + 2056 >> 2] = 0; //@line 11229
 if ((HEAP32[$0 + 2052 >> 2] | 0) != 1) {
  if (HEAP8[$0 + 1174 >> 0] | 0) {
   return;
  }
  $20 = $0 + 1760 | 0; //@line 11240
  HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1; //@line 11243
  return;
 }
 $6 = $0 + 2062 | 0; //@line 11246
 if (!(HEAP8[$6 >> 0] | 0)) {
  return;
 }
 HEAP8[$0 + 1177 >> 0] = 0; //@line 11253
 HEAP8[$6 >> 0] = 0; //@line 11254
 HEAP8[$0 + 2044 >> 0] = 0; //@line 11256
 if (HEAP8[$0 + 1174 >> 0] | 0) {
  return;
 }
 $14 = $0 + 1760 | 0; //@line 11263
 HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1; //@line 11266
 return;
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_82($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23668
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23672
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23673
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 23679
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23680
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 23681
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 392; //@line 23684
  sp = STACKTOP; //@line 23685
  return;
 }
 ___async_unwind = 0; //@line 23688
 HEAP32[$ReallocAsyncCtx2 >> 2] = 392; //@line 23689
 sp = STACKTOP; //@line 23690
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2736
 HEAP32[$0 >> 2] = 640; //@line 2737
 $1 = $0 + 8 | 0; //@line 2738
 HEAP32[$1 >> 2] = 0; //@line 2739
 HEAP32[$1 + 4 >> 2] = 0; //@line 2739
 HEAP32[$1 + 8 >> 2] = 0; //@line 2739
 HEAP32[$1 + 12 >> 2] = 0; //@line 2739
 $2 = _get_us_ticker_data() | 0; //@line 2740
 HEAP32[$0 + 24 >> 2] = $2; //@line 2742
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2743
 _ticker_set_handler($2, 116); //@line 2744
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 117; //@line 2747
  sp = STACKTOP; //@line 2748
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2751
  return;
 }
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_235($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18288
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18294
 $8 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 18296
 $10 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1888 >> 2] | 0; //@line 18298
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 18299
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $8, $10); //@line 18300
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 424; //@line 18303
  sp = STACKTOP; //@line 18304
  return;
 }
 ___async_unwind = 0; //@line 18307
 HEAP32[$ReallocAsyncCtx >> 2] = 424; //@line 18308
 sp = STACKTOP; //@line 18309
 return;
}
function __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18462
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18463
 $9 = __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) | 0; //@line 18464
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 489; //@line 18467
  sp = STACKTOP; //@line 18468
  return 0; //@line 18469
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18471
  return $9 | 0; //@line 18472
 }
 return 0; //@line 18474
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 31517
 newDynamicTop = oldDynamicTop + increment | 0; //@line 31518
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 31522
  ___setErrNo(12); //@line 31523
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 31527
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 31531
   ___setErrNo(12); //@line 31532
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 31536
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 11346
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 11348
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 11354
  $11 = ___fwritex($0, $4, $3) | 0; //@line 11355
  if ($phitmp) {
   $13 = $11; //@line 11357
  } else {
   ___unlockfile($3); //@line 11359
   $13 = $11; //@line 11360
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 11364
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 11368
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 11371
 }
 return $15 | 0; //@line 11373
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 13682
 } else {
  $$056 = $2; //@line 13684
  $15 = $1; //@line 13684
  $8 = $0; //@line 13684
  while (1) {
   $14 = $$056 + -1 | 0; //@line 13692
   HEAP8[$14 >> 0] = HEAPU8[15682 + ($8 & 15) >> 0] | 0 | $3; //@line 13693
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 13694
   $15 = tempRet0; //@line 13695
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 13700
    break;
   } else {
    $$056 = $14; //@line 13703
   }
  }
 }
 return $$05$lcssa | 0; //@line 13707
}
function __ZN7LoRaMac21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14549
 STACKTOP = STACKTOP + 16 | 0; //@line 14550
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14550
 $vararg_buffer = sp; //@line 14551
 if (!(HEAP8[$0 + 1936 >> 0] | 0)) {
  if (__ZN7LoRaPHY18verify_tx_datarateEhb($0 + 4 | 0, $1, 0) | 0) {
   HEAP8[$0 + 1877 >> 0] = $1; //@line 14560
   $$0 = 0; //@line 14561
  } else {
   $$0 = -1003; //@line 14563
  }
 } else {
  _mbed_tracef(2, 12866, 13316, $vararg_buffer); //@line 14566
  $$0 = -1003; //@line 14567
 }
 STACKTOP = sp; //@line 14569
 return $$0 | 0; //@line 14569
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 16915
 $0 = ___cxa_get_globals_fast() | 0; //@line 16916
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 16919
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 16923
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 16935
    _emscripten_alloc_async_context(4, sp) | 0; //@line 16936
    __ZSt11__terminatePFvvE($16); //@line 16937
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 16942
 _emscripten_alloc_async_context(4, sp) | 0; //@line 16943
 __ZSt11__terminatePFvvE($17); //@line 16944
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 11563
 $3 = HEAP8[$1 >> 0] | 0; //@line 11565
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 11569
 $7 = HEAP32[$0 >> 2] | 0; //@line 11570
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 11575
  HEAP32[$0 + 4 >> 2] = 0; //@line 11577
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 11579
  HEAP32[$0 + 28 >> 2] = $14; //@line 11581
  HEAP32[$0 + 20 >> 2] = $14; //@line 11583
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11589
  $$0 = 0; //@line 11590
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 11593
  $$0 = -1; //@line 11594
 }
 return $$0 | 0; //@line 11596
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18665
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18667
 $$ = HEAP8[___async_retval >> 0] & 1 ? 7 : 6; //@line 18671
 $6 = HEAP8[$2 >> 0] | 0; //@line 18672
 $$1 = ($6 << 24 >> 24 >= (HEAP8[$4 + 28 >> 0] | 0) ? $6 << 24 >> 24 <= (HEAP8[$4 + 29 >> 0] | 0) : 0) ? $$ : $$ & 5; //@line 18681
 $15 = HEAP8[$2 + 1 >> 0] | 0; //@line 18683
 HEAP8[___async_retval >> 0] = ($15 << 24 >> 24 >= (HEAP8[$4 + 32 >> 0] | 0) ? $15 << 24 >> 24 <= (HEAP8[$4 + 33 >> 0] | 0) : 0) ? $$1 : $$1 & 3; //@line 18694
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_291($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22314
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22316
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22318
 $5 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 22320
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 22321
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 22322
 if (!___async) {
  ___async_unwind = 0; //@line 22325
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 110; //@line 22327
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 22329
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 22331
 sp = STACKTOP; //@line 22332
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20060
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20062
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 20064
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 20071
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20072
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 20073
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 20076
  sp = STACKTOP; //@line 20077
  return;
 }
 ___async_unwind = 0; //@line 20080
 HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 20081
 sp = STACKTOP; //@line 20082
 return;
}
function __ZN12LoRaWANStack24acquire_backoff_metadataERi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $5 = 0, $storemerge = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$1 = -1012; //@line 10944
  return $$1 | 0; //@line 10945
 }
 $5 = __ZN7LoRaMac26get_backoff_timer_event_idEv($0) | 0; //@line 10947
 if ((__ZN7LoRaMac26get_backoff_timer_event_idEv($0) | 0) > 0) {
  $$0 = 0; //@line 10954
  $storemerge = __ZN6events10EventQueue9time_leftEi(HEAP32[$0 + 3168 >> 2] | 0, $5) | 0; //@line 10954
 } else {
  $$0 = -1023; //@line 10956
  $storemerge = -1; //@line 10956
 }
 HEAP32[$1 >> 2] = $storemerge; //@line 10958
 $$1 = $$0; //@line 10959
 return $$1 | 0; //@line 10960
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 27053
 $6 = HEAP32[$4 >> 2] | 0; //@line 27055
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 27058
 $11 = ___async_retval; //@line 27060
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 27067
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 27073
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 27075
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 27077
 HEAP32[___async_retval >> 2] = $28; //@line 27080
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_365($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27928
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27930
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 27932
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 27938
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27939
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 27940
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 27943
  sp = STACKTOP; //@line 27944
  return;
 }
 ___async_unwind = 0; //@line 27947
 HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 27948
 sp = STACKTOP; //@line 27949
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_237($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18443
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18446
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 18449
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 18450
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 18451
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 525; //@line 18454
  sp = STACKTOP; //@line 18455
  return;
 }
 ___async_unwind = 0; //@line 18458
 HEAP32[$ReallocAsyncCtx3 >> 2] = 525; //@line 18459
 sp = STACKTOP; //@line 18460
 return;
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15920
 if (HEAP8[$0 + 2104 >> 0] | 0) {
  $$0 = -1e3; //@line 15925
  return $$0 | 0; //@line 15926
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15929
 $6 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 752 | 0, $1) | 0; //@line 15930
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 466; //@line 15933
  sp = STACKTOP; //@line 15934
  return 0; //@line 15935
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15937
 $$0 = $6; //@line 15938
 return $$0 | 0; //@line 15939
}
function __ZN7LoRaPHY17calculate_backoffEbbbhjj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $14 = 0, $16 = 0, $24 = 0, $8 = 0;
 $8 = HEAP32[$0 + 72 >> 2] | 0; //@line 144
 $14 = HEAPU8[(HEAP32[$0 + 124 >> 2] | 0) + (($4 & 255) * 12 | 0) + 9 >> 0] | 0; //@line 150
 $16 = HEAP16[$8 + ($14 * 24 | 0) >> 1] | 0; //@line 152
 $$0 = $5 >>> 0 < 36e5 ? 100 : $5 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 157
 $24 = (Math_imul((($16 & 65535) > ($$0 & 65535) | $1 ? $16 : $$0) & 65535, $6) | 0) - $6 | 0; //@line 164
 HEAP32[$8 + ($14 * 24 | 0) + 12 >> 2] = $2 | $3 ? $24 : 0; //@line 166
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 49
 HEAP32[$0 + 788 >> 2] = $1; //@line 51
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 54
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 55
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 56
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 46; //@line 59
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 61
  sp = STACKTOP; //@line 62
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 65
  HEAP8[$0 + 689 >> 0] = 0; //@line 67
  HEAP8[$0 + 688 >> 0] = 0; //@line 69
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_308($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 25066
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25070
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 25073
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(4) | 0; //@line 25074
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 25075
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 187; //@line 25078
  sp = STACKTOP; //@line 25079
  return;
 }
 ___async_unwind = 0; //@line 25082
 HEAP32[$ReallocAsyncCtx18 >> 2] = 187; //@line 25083
 sp = STACKTOP; //@line 25084
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10235
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10240
  return $$0 | 0; //@line 10241
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10243
 $5 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) | 0; //@line 10244
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 349; //@line 10247
  sp = STACKTOP; //@line 10248
  return 0; //@line 10249
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10251
 $$0 = $5; //@line 10252
 return $$0 | 0; //@line 10253
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_286($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22105
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22107
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22109
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22111
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1836 | 0); //@line 22112
 if (!___async) {
  ___async_unwind = 0; //@line 22115
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 400; //@line 22117
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 22119
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 22121
 sp = STACKTOP; //@line 22122
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_380($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28771
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28775
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 28777
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 28778
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 28779
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 274; //@line 28782
  sp = STACKTOP; //@line 28783
  return;
 }
 ___async_unwind = 0; //@line 28786
 HEAP32[$ReallocAsyncCtx >> 2] = 274; //@line 28787
 sp = STACKTOP; //@line 28788
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 614
 $2 = HEAP32[$0 >> 2] | 0; //@line 615
 $3 = $1 + 16 | 0; //@line 616
 $4 = HEAP32[$3 >> 2] | 0; //@line 617
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 618
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 619
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 554; //@line 622
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 624
  sp = STACKTOP; //@line 625
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 628
  HEAP32[$3 >> 2] = 0; //@line 629
  return;
 }
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28640
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28642
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28644
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 28646
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 28649
 } else {
  HEAP32[$2 >> 2] = $4; //@line 28651
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 5; //@line 28657
   HEAP32[$2 + 16 >> 2] = 18; //@line 28659
   $$0 = 0; //@line 28660
  } else {
   $$0 = 0; //@line 28662
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 28666
 return;
}
function __ZN12LoRaWANStack19acquire_rx_metadataER19lorawan_rx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $8 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10919
  return $$0 | 0; //@line 10920
 }
 $5 = $0 + 2900 | 0; //@line 10922
 if (HEAP8[$5 >> 0] | 0) {
  $$0 = -1023; //@line 10926
  return $$0 | 0; //@line 10927
 }
 $8 = $0 + 2896 | 0; //@line 10929
 HEAP16[$1 >> 1] = HEAP16[$8 >> 1] | 0; //@line 10930
 HEAP16[$1 + 2 >> 1] = HEAP16[$8 + 2 >> 1] | 0; //@line 10930
 HEAP16[$1 + 4 >> 1] = HEAP16[$8 + 4 >> 1] | 0; //@line 10930
 HEAP8[$5 >> 0] = 1; //@line 10931
 $$0 = 0; //@line 10932
 return $$0 | 0; //@line 10933
}
function __ZN7LoRaMac24continue_joining_processEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13091
 if ((HEAPU8[$0 + 1701 >> 0] | 0) >= (HEAPU8[$0 + 1700 >> 0] | 0)) {
  $$0 = 0; //@line 13098
  return $$0 | 0; //@line 13099
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13101
 $6 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 13102
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 407; //@line 13105
  sp = STACKTOP; //@line 13106
  return 0; //@line 13107
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13109
 $$0 = ($6 | 0) == 0; //@line 13111
 return $$0 | 0; //@line 13112
}
function __ZN7LoRaMac10disconnectEv__async_cb_131($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27780
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27782
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27784
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27786
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1816 | 0); //@line 27787
 if (!___async) {
  ___async_unwind = 0; //@line 27790
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 462; //@line 27792
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 27794
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 27796
 sp = STACKTOP; //@line 27797
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_130($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27757
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27759
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27761
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 27763
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1836 | 0); //@line 27764
 if (!___async) {
  ___async_unwind = 0; //@line 27767
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 463; //@line 27769
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 27771
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 27773
 sp = STACKTOP; //@line 27774
 return;
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 15150
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 15153
 $$sink17$sink = $0; //@line 15153
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 15155
  $12 = HEAP8[$11 >> 0] | 0; //@line 15156
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 15164
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 15169
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 15174
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_271($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20550
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20553
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 20556
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 20557
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 20558
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 511; //@line 20561
  sp = STACKTOP; //@line 20562
  return;
 }
 ___async_unwind = 0; //@line 20565
 HEAP32[$ReallocAsyncCtx9 >> 2] = 511; //@line 20566
 sp = STACKTOP; //@line 20567
 return;
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15980
 if (HEAP8[$0 + 2104 >> 0] | 0) {
  $$0 = -1e3; //@line 15985
  return $$0 | 0; //@line 15986
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15989
 $6 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 752 | 0, $1) | 0; //@line 15990
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 468; //@line 15993
  sp = STACKTOP; //@line 15994
  return 0; //@line 15995
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15997
 $$0 = $6; //@line 15998
 return $$0 | 0; //@line 15999
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 13719
 } else {
  $$06 = $2; //@line 13721
  $11 = $1; //@line 13721
  $7 = $0; //@line 13721
  while (1) {
   $10 = $$06 + -1 | 0; //@line 13726
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 13727
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 13728
   $11 = tempRet0; //@line 13729
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 13734
    break;
   } else {
    $$06 = $10; //@line 13737
   }
  }
 }
 return $$0$lcssa | 0; //@line 13741
}
function __ZN12LoRaWANStack19acquire_tx_metadataER19lorawan_tx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $8 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10894
  return $$0 | 0; //@line 10895
 }
 $5 = $0 + 2895 | 0; //@line 10897
 if (HEAP8[$5 >> 0] | 0) {
  $$0 = -1023; //@line 10901
  return $$0 | 0; //@line 10902
 }
 $8 = $0 + 2884 | 0; //@line 10904
 HEAP32[$1 >> 2] = HEAP32[$8 >> 2]; //@line 10905
 HEAP32[$1 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 10905
 HEAP32[$1 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 10905
 HEAP8[$5 >> 0] = 1; //@line 10906
 $$0 = 0; //@line 10907
 return $$0 | 0; //@line 10908
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_79($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23566
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23569
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 23572
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 23573
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 23574
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 534; //@line 23577
  sp = STACKTOP; //@line 23578
  return;
 }
 ___async_unwind = 0; //@line 23581
 HEAP32[$ReallocAsyncCtx3 >> 2] = 534; //@line 23582
 sp = STACKTOP; //@line 23583
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_113($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26636
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26639
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 26642
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26643
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 26644
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 531; //@line 26647
  sp = STACKTOP; //@line 26648
  return;
 }
 ___async_unwind = 0; //@line 26651
 HEAP32[$ReallocAsyncCtx3 >> 2] = 531; //@line 26652
 sp = STACKTOP; //@line 26653
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_164($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12266
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12269
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 12272
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12273
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 12274
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 528; //@line 12277
  sp = STACKTOP; //@line 12278
  return;
 }
 ___async_unwind = 0; //@line 12281
 HEAP32[$ReallocAsyncCtx3 >> 2] = 528; //@line 12282
 sp = STACKTOP; //@line 12283
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_133($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27877
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27880
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 27883
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 27884
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 27885
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 538; //@line 27888
  sp = STACKTOP; //@line 27889
  return;
 }
 ___async_unwind = 0; //@line 27892
 HEAP32[$ReallocAsyncCtx4 >> 2] = 538; //@line 27893
 sp = STACKTOP; //@line 27894
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_132($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27854
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27857
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 27860
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 27861
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 27862
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 538; //@line 27865
  sp = STACKTOP; //@line 27866
  return;
 }
 ___async_unwind = 0; //@line 27869
 HEAP32[$ReallocAsyncCtx4 >> 2] = 538; //@line 27870
 sp = STACKTOP; //@line 27871
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_221($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17467
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17471
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 17473
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 17474
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 17475
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 426; //@line 17478
  sp = STACKTOP; //@line 17479
  return;
 }
 ___async_unwind = 0; //@line 17482
 HEAP32[$ReallocAsyncCtx >> 2] = 426; //@line 17483
 sp = STACKTOP; //@line 17484
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 664
 $1 = _emscripten_asm_const_i(4) | 0; //@line 665
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 668
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 669
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 670
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 56; //@line 673
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 675
  sp = STACKTOP; //@line 676
  return 0; //@line 677
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 679
  return $1 | 0; //@line 680
 }
 return 0; //@line 682
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_14($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18780
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18783
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 18786
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 18787
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 18788
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 544; //@line 18791
  sp = STACKTOP; //@line 18792
  return;
 }
 ___async_unwind = 0; //@line 18795
 HEAP32[$ReallocAsyncCtx3 >> 2] = 544; //@line 18796
 sp = STACKTOP; //@line 18797
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10259
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10264
  return $$0 | 0; //@line 10265
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10267
 $5 = __ZN7LoRaMac21remove_single_channelEh($0, $1) | 0; //@line 10268
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 350; //@line 10271
  sp = STACKTOP; //@line 10272
  return 0; //@line 10273
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10275
 $$0 = $5; //@line 10276
 return $$0 | 0; //@line 10277
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 20402
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 20405
 $8 = ($3 & 255) + 1 | 0; //@line 20407
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 20411
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 20415
   return $$0 | 0; //@line 20416
  }
 case 0:
  {
   $$0 = $6; //@line 20420
   return $$0 | 0; //@line 20421
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 20427
   return $$0 | 0; //@line 20428
  }
 }
 return 0; //@line 20431
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15944
 if (HEAP8[$0 + 2104 >> 0] | 0) {
  $$0 = -1e3; //@line 15949
  return $$0 | 0; //@line 15950
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15953
 $5 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 752 | 0) | 0; //@line 15954
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 467; //@line 15957
  sp = STACKTOP; //@line 15958
  return 0; //@line 15959
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15961
 $$0 = $5; //@line 15962
 return $$0 | 0; //@line 15963
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17791
 do {
  if (!$0) {
   $3 = 0; //@line 17795
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17797
   $2 = ___dynamic_cast($0, 400, 456, 0) | 0; //@line 17798
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 696; //@line 17801
    sp = STACKTOP; //@line 17802
    return 0; //@line 17803
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17805
    $3 = ($2 | 0) != 0 & 1; //@line 17808
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 17813
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 113 >> 0] | 0; //@line 18904
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 120 >> 2] | 0; //@line 18910
 $7 = HEAP32[$0 + 116 >> 2] | 0; //@line 18912
 $8 = $2 & 255; //@line 18913
 $indvars$iv = 0; //@line 18914
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 18918
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 18921
  $indvars$iv = $indvars$iv + 1 | 0; //@line 18922
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10282
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10287
  return $$0 | 0; //@line 10288
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10290
 $4 = __ZN7LoRaMac19remove_channel_planEv($0) | 0; //@line 10291
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 351; //@line 10294
  sp = STACKTOP; //@line 10295
  return 0; //@line 10296
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10298
 $$0 = $4; //@line 10299
 return $$0 | 0; //@line 10300
}
function _invoke_ticker__async_cb_242($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18718
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 18724
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 18725
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 18726
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 18727
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 650; //@line 18730
  sp = STACKTOP; //@line 18731
  return;
 }
 ___async_unwind = 0; //@line 18734
 HEAP32[$ReallocAsyncCtx >> 2] = 650; //@line 18735
 sp = STACKTOP; //@line 18736
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4503
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4506
 $7 = __ZN12LoRaWANStack9handle_txEhPKhthbb($0 + 4 | 0, $1, $2, $3, $4 & 255, 0, 0) | 0; //@line 4507
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 145; //@line 4510
  sp = STACKTOP; //@line 4511
  return 0; //@line 4512
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4514
  return $7 | 0; //@line 4515
 }
 return 0; //@line 4517
}
function __ZN16LoRaWANInterface7receiveEPhtRhRi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4553
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4555
 $6 = __ZN12LoRaWANStack9handle_rxEPhtRhRib($0 + 4 | 0, $1, $2, $3, $4, 0) | 0; //@line 4556
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 147; //@line 4559
  sp = STACKTOP; //@line 4560
  return 0; //@line 4561
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4563
  return $6 | 0; //@line 4564
 }
 return 0; //@line 4566
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 13363
 } else {
  $$04 = 0; //@line 13365
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 13368
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 13372
   $12 = $7 + 1 | 0; //@line 13373
   HEAP32[$0 >> 2] = $12; //@line 13374
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 13380
    break;
   } else {
    $$04 = $11; //@line 13383
   }
  }
 }
 return $$0$lcssa | 0; //@line 13387
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7567
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7569
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7575
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7576
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7577
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 261; //@line 7580
  sp = STACKTOP; //@line 7581
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7584
 return;
}
function __ZN7LoRaMac15send_ongoing_txEv__async_cb_209($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15963
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15965
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15969
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 15972
  $13 = ___async_retval; //@line 15973
  HEAP32[$13 >> 2] = $$0; //@line 15974
  return;
 }
 HEAP32[$6 + 2052 >> 2] = HEAP32[$4 >> 2]; //@line 15979
 $$0 = 0; //@line 15980
 $13 = ___async_retval; //@line 15981
 HEAP32[$13 >> 2] = $$0; //@line 15982
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8473
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8475
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8481
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8482
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8483
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 292; //@line 8486
  sp = STACKTOP; //@line 8487
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8490
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4572
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4574
 $3 = __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t($0 + 4 | 0, $1) | 0; //@line 4575
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 148; //@line 4578
  sp = STACKTOP; //@line 4579
  return 0; //@line 4580
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4582
  return $3 | 0; //@line 4583
 }
 return 0; //@line 4585
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 31042
 $y_sroa_0_0_extract_trunc = $b$0; //@line 31043
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 31044
 $1$1 = tempRet0; //@line 31045
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 31047
}
function _mbedtls_cipher_update__async_cb_276($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20791
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20793
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20795
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 20798
  $9 = ___async_retval; //@line 20799
  HEAP32[$9 >> 2] = $$1; //@line 20800
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 20805
 $$1 = 0; //@line 20806
 $9 = ___async_retval; //@line 20807
 HEAP32[$9 >> 2] = $$1; //@line 20808
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9261
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 9263
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 9269
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9270
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 9271
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 322; //@line 9274
  sp = STACKTOP; //@line 9275
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9278
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6318
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 6320
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 6326
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6327
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 6328
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 215; //@line 6331
  sp = STACKTOP; //@line 6332
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6335
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_197($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15026
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 15034
 _mbed_assert_internal(13623, 13641, 57); //@line 15035
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 553; //@line 15038
  sp = STACKTOP; //@line 15039
  return;
 }
 ___async_unwind = 0; //@line 15042
 HEAP32[$ReallocAsyncCtx6 >> 2] = 553; //@line 15043
 sp = STACKTOP; //@line 15044
 return;
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4311
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4313
 $3 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0 + 4 | 0, $1) | 0; //@line 4314
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 138; //@line 4317
  sp = STACKTOP; //@line 4318
  return 0; //@line 4319
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4321
  return $3 | 0; //@line 4322
 }
 return 0; //@line 4324
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4963
 HEAP32[$0 >> 2] = 724; //@line 4964
 $2 = $0 + 4 | 0; //@line 4965
 __ZN12LoRaWANStackC2Ev($2); //@line 4966
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4967
 __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($2, $1); //@line 4968
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 165; //@line 4971
  sp = STACKTOP; //@line 4972
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4975
  return;
 }
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29826
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 29833
 _mbed_assert_internal(12080, 12089, 539); //@line 29834
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 199; //@line 29837
  sp = STACKTOP; //@line 29838
  return;
 }
 ___async_unwind = 0; //@line 29841
 HEAP32[$ReallocAsyncCtx2 >> 2] = 199; //@line 29842
 sp = STACKTOP; //@line 29843
 return;
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4435
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4437
 $3 = __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 4438
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 142; //@line 4441
  sp = STACKTOP; //@line 4442
  return 0; //@line 4443
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4445
  return $3 | 0; //@line 4446
 }
 return 0; //@line 4448
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2374] | 0; //@line 2699
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 2703
  } else {
   $$06 = 9492; //@line 2705
   $9 = $1; //@line 2705
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 2710
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 2715
    if (!$9) {
     $$05 = 0; //@line 2718
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 2721
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 2726
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18105
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18112
 _mbed_assert_internal(13085, 13111, 855); //@line 18113
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 420; //@line 18116
  sp = STACKTOP; //@line 18117
  return;
 }
 ___async_unwind = 0; //@line 18120
 HEAP32[$ReallocAsyncCtx2 >> 2] = 420; //@line 18121
 sp = STACKTOP; //@line 18122
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22181
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22188
 _mbed_assert_internal(12080, 12089, 507); //@line 22189
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 190; //@line 22192
  sp = STACKTOP; //@line 22193
  return;
 }
 ___async_unwind = 0; //@line 22196
 HEAP32[$ReallocAsyncCtx2 >> 2] = 190; //@line 22197
 sp = STACKTOP; //@line 22198
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12103
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12112
 _mbed_assert_internal(12080, 12089, 547); //@line 12113
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 202; //@line 12116
  sp = STACKTOP; //@line 12117
  return;
 }
 ___async_unwind = 0; //@line 12120
 HEAP32[$ReallocAsyncCtx3 >> 2] = 202; //@line 12121
 sp = STACKTOP; //@line 12122
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_255($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 19771
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 19778
 _mbed_assert_internal(12080, 12089, 881); //@line 19779
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 298; //@line 19782
  sp = STACKTOP; //@line 19783
  return;
 }
 ___async_unwind = 0; //@line 19786
 HEAP32[$ReallocAsyncCtx10 >> 2] = 298; //@line 19787
 sp = STACKTOP; //@line 19788
 return;
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 31027
 $2 = $b & 65535; //@line 31028
 $3 = Math_imul($2, $1) | 0; //@line 31029
 $6 = $a >>> 16; //@line 31030
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 31031
 $11 = $b >>> 16; //@line 31032
 $12 = Math_imul($11, $1) | 0; //@line 31033
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 31034
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7795
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7797
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7803
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7804
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7805
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 272; //@line 7808
  sp = STACKTOP; //@line 7809
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7812
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28694
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 28703
 _mbed_assert_internal(12080, 12089, 532); //@line 28704
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 196; //@line 28707
  sp = STACKTOP; //@line 28708
  return;
 }
 ___async_unwind = 0; //@line 28711
 HEAP32[$ReallocAsyncCtx3 >> 2] = 196; //@line 28712
 sp = STACKTOP; //@line 28713
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20582
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 20591
 _mbed_assert_internal(12080, 12089, 524); //@line 20592
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 20595
  sp = STACKTOP; //@line 20596
  return;
 }
 ___async_unwind = 0; //@line 20599
 HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 20600
 sp = STACKTOP; //@line 20601
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_324($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26057
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26059
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26061
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26062
 __ZN4mbed10TimerEventD2Ev($2); //@line 26063
 if (!___async) {
  ___async_unwind = 0; //@line 26066
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 73; //@line 26068
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 26070
 sp = STACKTOP; //@line 26071
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_323($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26037
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26039
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26041
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 26042
 __ZN4mbed10TimerEventD2Ev($4); //@line 26043
 if (!___async) {
  ___async_unwind = 0; //@line 26046
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 71; //@line 26048
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 26050
 sp = STACKTOP; //@line 26051
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_322($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26017
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26019
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26021
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 26022
 __ZN4mbed10TimerEventD2Ev($4); //@line 26023
 if (!___async) {
  ___async_unwind = 0; //@line 26026
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 69; //@line 26028
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 26030
 sp = STACKTOP; //@line 26031
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 10954
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 10956
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 10963
  } else {
   $$0 = $3; //@line 10965
  }
 }
 $8 = _malloc($$0) | 0; //@line 10968
 if (!$8) {
  return $8 | 0; //@line 10971
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 10978
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 10980
 return $8 | 0; //@line 10981
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25997
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25999
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26001
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 26002
 __ZN4mbed10TimerEventD2Ev($4); //@line 26003
 if (!___async) {
  ___async_unwind = 0; //@line 26006
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 67; //@line 26008
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 26010
 sp = STACKTOP; //@line 26011
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4348
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4350
 $3 = __ZN12LoRaWANStack7connectERK15lorawan_connect($0 + 4 | 0, $1) | 0; //@line 4351
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 140; //@line 4354
  sp = STACKTOP; //@line 4355
  return 0; //@line 4356
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4358
  return $3 | 0; //@line 4359
 }
 return 0; //@line 4361
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_330($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 26267
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 26270
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 26271
 __ZN4mbed11InterruptInD2Ev($3); //@line 26272
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 79; //@line 26275
  sp = STACKTOP; //@line 26276
  return;
 }
 ___async_unwind = 0; //@line 26279
 HEAP32[$ReallocAsyncCtx9 >> 2] = 79; //@line 26280
 sp = STACKTOP; //@line 26281
 return;
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5492
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5493
 _initialize($0); //@line 5494
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 602; //@line 5497
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5499
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5501
  sp = STACKTOP; //@line 5502
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5505
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 5508
  return;
 }
}
function _mbed_die__async_cb_358($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 27315
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27317
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27319
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 27320
 _wait_ms(150); //@line 27321
 if (!___async) {
  ___async_unwind = 0; //@line 27324
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 622; //@line 27326
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 27328
 sp = STACKTOP; //@line 27329
 return;
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 26945
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26947
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 26949
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 26950
 _wait_ms(150); //@line 26951
 if (!___async) {
  ___async_unwind = 0; //@line 26954
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 621; //@line 26956
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 26958
 sp = STACKTOP; //@line 26959
 return;
}
function ___fflush_unlocked__async_cb_391($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29654
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29656
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29658
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29660
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 29662
 HEAP32[$4 >> 2] = 0; //@line 29663
 HEAP32[$6 >> 2] = 0; //@line 29664
 HEAP32[$8 >> 2] = 0; //@line 29665
 HEAP32[$10 >> 2] = 0; //@line 29666
 HEAP32[___async_retval >> 2] = 0; //@line 29668
 return;
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27352
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27354
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 27355
 _mbedtls_platform_zeroize($2, 68); //@line 27356
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 564; //@line 27359
  sp = STACKTOP; //@line 27360
  return;
 }
 ___async_unwind = 0; //@line 27363
 HEAP32[$ReallocAsyncCtx2 >> 2] = 564; //@line 27364
 sp = STACKTOP; //@line 27365
 return;
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4481
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4483
 $3 = __ZN12LoRaWANStack16remove_a_channelEh($0 + 4 | 0, $1) | 0; //@line 4484
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 144; //@line 4487
  sp = STACKTOP; //@line 4488
  return 0; //@line 4489
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4491
  return $3 | 0; //@line 4492
 }
 return 0; //@line 4494
}
function _mbedtls_gcm_free__async_cb_138($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28090
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28092
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 28093
 _mbedtls_platform_zeroize($2, 400); //@line 28094
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 600; //@line 28097
  sp = STACKTOP; //@line 28098
  return;
 }
 ___async_unwind = 0; //@line 28101
 HEAP32[$ReallocAsyncCtx >> 2] = 600; //@line 28102
 sp = STACKTOP; //@line 28103
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_137($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28051
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28053
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2020 >> 2] = 1; //@line 28059
  return;
 }
 if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0)) {
  return;
 }
 HEAP32[$4 + 2076 >> 2] = 4; //@line 28067
 HEAP8[$4 + 2080 >> 0] = 1; //@line 28069
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 28070
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29784
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29786
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 29787
 __ZN4mbed10TimerEventD2Ev($2); //@line 29788
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 105; //@line 29791
  sp = STACKTOP; //@line 29792
  return;
 }
 ___async_unwind = 0; //@line 29795
 HEAP32[$ReallocAsyncCtx2 >> 2] = 105; //@line 29796
 sp = STACKTOP; //@line 29797
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18080
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18082
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18083
 __ZN4mbed10TimerEventD2Ev($2); //@line 18084
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 645; //@line 18087
  sp = STACKTOP; //@line 18088
  return;
 }
 ___async_unwind = 0; //@line 18091
 HEAP32[$ReallocAsyncCtx2 >> 2] = 645; //@line 18092
 sp = STACKTOP; //@line 18093
 return;
}
function _mbedtls_ccm_free__async_cb_5($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18087
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18089
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 18090
 _mbedtls_platform_zeroize($2, 68); //@line 18091
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 561; //@line 18094
  sp = STACKTOP; //@line 18095
  return;
 }
 ___async_unwind = 0; //@line 18098
 HEAP32[$ReallocAsyncCtx >> 2] = 561; //@line 18099
 sp = STACKTOP; //@line 18100
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_378($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28619
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28621
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 28622
 __ZN7LoRaMacD2Ev($2); //@line 28623
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 28626
  sp = STACKTOP; //@line 28627
  return;
 }
 ___async_unwind = 0; //@line 28630
 HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 28631
 sp = STACKTOP; //@line 28632
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7640
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 7642
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 7648
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7649
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 7650
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 648; //@line 7653
  sp = STACKTOP; //@line 7654
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7657
 return;
}
function _mbed_vtracef__async_cb_83($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24187
 $1 = HEAP32[175] | 0; //@line 24188
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 24189
 FUNCTION_TABLE_vi[$1 & 1023](11932); //@line 24190
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 129; //@line 24193
  sp = STACKTOP; //@line 24194
  return;
 }
 ___async_unwind = 0; //@line 24197
 HEAP32[$ReallocAsyncCtx3 >> 2] = 129; //@line 24198
 sp = STACKTOP; //@line 24199
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 21599
 $indvars$iv = 0; //@line 21600
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 21605
  $indvars$iv = $indvars$iv + 1 | 0; //@line 21606
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 31655
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4675
 HEAP32[$0 >> 2] = 724; //@line 4676
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4678
 __ZN12LoRaWANStackD2Ev($0 + 4 | 0); //@line 4679
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 152; //@line 4682
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4684
  sp = STACKTOP; //@line 4685
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4688
  __ZdlPv($0); //@line 4689
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_334($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 26344
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26346
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 26348
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 26349
 if (!___async) {
  ___async_unwind = 0; //@line 26352
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 75; //@line 26354
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 26356
 sp = STACKTOP; //@line 26357
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_333($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 26325
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26327
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 26329
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 26330
 if (!___async) {
  ___async_unwind = 0; //@line 26333
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 76; //@line 26335
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 26337
 sp = STACKTOP; //@line 26338
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_332($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 26306
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26308
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 26310
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 26311
 if (!___async) {
  ___async_unwind = 0; //@line 26314
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 77; //@line 26316
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 26318
 sp = STACKTOP; //@line 26319
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_331($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 26287
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26289
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 26291
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 26292
 if (!___async) {
  ___async_unwind = 0; //@line 26295
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 78; //@line 26297
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 26299
 sp = STACKTOP; //@line 26300
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_325($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 26077
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26079
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 26081
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 26082
 if (!___async) {
  ___async_unwind = 0; //@line 26085
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 74; //@line 26087
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 26089
 sp = STACKTOP; //@line 26090
 return;
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4462
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4464
 $2 = __ZN12LoRaWANStack17drop_channel_listEv($0 + 4 | 0) | 0; //@line 4465
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 143; //@line 4468
  sp = STACKTOP; //@line 4469
  return 0; //@line 4470
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4472
  return $2 | 0; //@line 4473
 }
 return 0; //@line 4475
}
function __ZN7LoRaMac10disconnectEv__async_cb_128($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27712
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27714
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 27716
 __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 27717
 if (!___async) {
  ___async_unwind = 0; //@line 27720
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 465; //@line 27722
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 27724
 sp = STACKTOP; //@line 27725
 return;
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 __ZN5Sht31C2E7PinNameS0_(23652, 10, 11); //@line 27336
 __ZN4mbed11InterruptInC2E7PinName(19568, 1337); //@line 27337
 __ZN6events10EventQueueC2EjPh(19640, 1664, 0); //@line 27338
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(19844, 18232); //@line 27339
 dest = 23020; //@line 27340
 stop = dest + 48 | 0; //@line 27340
 do {
  HEAP32[dest >> 2] = 0; //@line 27340
  dest = dest + 4 | 0; //@line 27340
 } while ((dest | 0) < (stop | 0));
 return;
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3570
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3571
 $3 = _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 3572
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 577; //@line 3575
  sp = STACKTOP; //@line 3576
  return 0; //@line 3577
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3579
  return $3 | 0; //@line 3580
 }
 return 0; //@line 3582
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3478
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3479
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 3480
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 575; //@line 3483
  sp = STACKTOP; //@line 3484
  return 0; //@line 3485
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3487
  return $3 | 0; //@line 3488
 }
 return 0; //@line 3490
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3430
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3431
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 3432
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 573; //@line 3435
  sp = STACKTOP; //@line 3436
  return 0; //@line 3437
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3439
  return $3 | 0; //@line 3440
 }
 return 0; //@line 3442
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 604; //@line 2293
 $2 = $0 + 4 | 0; //@line 2294
 $3 = $0 + 28 | 0; //@line 2295
 $4 = $0; //@line 2296
 dest = $2; //@line 2297
 stop = dest + 68 | 0; //@line 2297
 do {
  HEAP32[dest >> 2] = 0; //@line 2297
  dest = dest + 4 | 0; //@line 2297
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 11, $4) | 0; //@line 2298
 _gpio_init_in($2, $1); //@line 2299
 return;
}
function _serial_putc__async_cb_239($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18484
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18486
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 18487
 _fflush($2) | 0; //@line 18488
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 643; //@line 18491
  sp = STACKTOP; //@line 18492
  return;
 }
 ___async_unwind = 0; //@line 18495
 HEAP32[$ReallocAsyncCtx >> 2] = 643; //@line 18496
 sp = STACKTOP; //@line 18497
 return;
}
function __ZN7LoRaMac24setup_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 2084 | 0; //@line 15120
 HEAP32[$1 >> 2] = 0; //@line 15121
 HEAP32[$1 + 4 >> 2] = 0; //@line 15121
 HEAP32[$1 + 8 >> 2] = 0; //@line 15121
 HEAP32[$1 + 12 >> 2] = 0; //@line 15121
 HEAP32[$1 + 16 >> 2] = 0; //@line 15121
 HEAP32[$0 + 2092 >> 2] = 1; //@line 15123
 HEAP32[$0 + 2088 >> 2] = 1; //@line 15125
 HEAP8[$1 >> 0] = 1; //@line 15126
 __ZN14LoRaMacCommand18add_link_check_reqEv($0 + 476 | 0) | 0; //@line 15128
 return;
}
function __ZN16LoRaWANInterface14cancel_sendingEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4639
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4641
 $2 = __ZN12LoRaWANStack12stop_sendingEv($0 + 4 | 0) | 0; //@line 4642
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 150; //@line 4645
  sp = STACKTOP; //@line 4646
  return 0; //@line 4647
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4649
  return $2 | 0; //@line 4650
 }
 return 0; //@line 4652
}
function __ZN12LoRaWANStackD2Ev__async_cb_376($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28594
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28596
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 28598
 __ZN12radio_eventsD2Ev($2 + 2384 | 0); //@line 28599
 if (!___async) {
  ___async_unwind = 0; //@line 28602
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 156; //@line 28604
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 28606
 sp = STACKTOP; //@line 28607
 return;
}
function __ZN14LoRaMacCommand18add_link_check_reqEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 2 | 0; //@line 17936
 $6 = HEAP8[$5 >> 0] | 0; //@line 17937
 $7 = $6 & 255; //@line 17938
 if ((128 - (HEAPU8[$0 + 3 >> 0] | 0) | 0) <= ($7 | 0)) {
  $$0 = -1010; //@line 17941
  return $$0 | 0; //@line 17942
 }
 HEAP8[$5 >> 0] = $6 + 1 << 24 >> 24; //@line 17946
 HEAP8[$0 + 4 + $7 >> 0] = 2; //@line 17947
 HEAP8[$0 >> 0] = 1; //@line 17948
 $$0 = 0; //@line 17949
 return $$0 | 0; //@line 17950
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaMacC2Ev($0); //@line 4983
 _memset($0 + 2384 | 0, 0, 518) | 0; //@line 4986
 HEAP8[$0 + 2902 >> 0] = 1; //@line 4987
 HEAP32[$0 + 2904 >> 2] = 0; //@line 4989
 HEAP8[$0 + 2909 >> 0] = 0; //@line 4992
 HEAP8[$0 + 2910 >> 0] = 0; //@line 4994
 HEAP8[$0 + 2911 >> 0] = 1; //@line 4996
 HEAP32[$0 + 3168 >> 2] = 0; //@line 4998
 HEAP8[$0 + 2895 >> 0] = 1; //@line 5000
 HEAP8[$0 + 2900 >> 0] = 1; //@line 5002
 HEAP8[$0 + 2908 >> 0] = 15; //@line 5003
 return;
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4366
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4368
 $2 = __ZN12LoRaWANStack8shutdownEv($0 + 4 | 0) | 0; //@line 4369
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 141; //@line 4372
  sp = STACKTOP; //@line 4373
  return 0; //@line 4374
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4376
  return $2 | 0; //@line 4377
 }
 return 0; //@line 4379
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2709
 HEAP32[$0 >> 2] = 640; //@line 2710
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 2712
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2714
 _ticker_remove_event($2, $0 + 8 | 0); //@line 2715
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 115; //@line 2718
  sp = STACKTOP; //@line 2719
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2722
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29319
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29321
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29322
 __ZN4mbed10TimerEventD2Ev($2); //@line 29323
 if (!___async) {
  ___async_unwind = 0; //@line 29326
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 29328
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 29330
 sp = STACKTOP; //@line 29331
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18193
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18195
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18196
 __ZN4mbed10TimerEventD2Ev($2); //@line 18197
 if (!___async) {
  ___async_unwind = 0; //@line 18200
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 647; //@line 18202
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 18204
 sp = STACKTOP; //@line 18205
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4329
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4331
 $2 = __ZN12LoRaWANStack7connectEv($0 + 4 | 0) | 0; //@line 4332
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 139; //@line 4335
  sp = STACKTOP; //@line 4336
  return 0; //@line 4337
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4339
  return $2 | 0; //@line 4340
 }
 return 0; //@line 4342
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 31648
}
function _emscripten_async_resume() {
 ___async = 0; //@line 31360
 ___async_unwind = 1; //@line 31361
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 31367
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 31371
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 31375
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 31377
 }
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_374($0) {
 $0 = $0 | 0;
 var $$013 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$013 = 3; //@line 28368
   break;
  }
 case -1004:
  {
   $$013 = 2; //@line 28372
   break;
  }
 case -1005:
  {
   $$013 = 1; //@line 28376
   break;
  }
 case -1006:
  {
   $$013 = 0; //@line 28380
   break;
  }
 default:
  {
   $$013 = 0; //@line 28384
  }
 }
 HEAP8[___async_retval >> 0] = $$013; //@line 28388
 return;
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 19544; //@line 15833
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 15839
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 15841
 $9 = tempRet0; //@line 15842
 $10 = 19544; //@line 15843
 HEAP32[$10 >> 2] = $8; //@line 15845
 HEAP32[$10 + 4 >> 2] = $9; //@line 15848
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 15849
 return $14 | 0; //@line 15851
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10986
 STACKTOP = STACKTOP + 16 | 0; //@line 10987
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10987
 $vararg_buffer = sp; //@line 10988
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 10992
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 10994
 STACKTOP = sp; //@line 10995
 return $5 | 0; //@line 10995
}
function _mbedtls_platform_zeroize($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5474
 $2 = HEAP32[2549] | 0; //@line 5475
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5476
 FUNCTION_TABLE_iiii[$2 & 31]($0, 0, $1) | 0; //@line 5477
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 601; //@line 5480
  sp = STACKTOP; //@line 5481
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5484
  return;
 }
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1299
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1300
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 1301
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 80; //@line 1304
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1306
  sp = STACKTOP; //@line 1307
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1310
  __ZdlPv($0); //@line 1311
  return;
 }
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2758
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 2763
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2764
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 2765
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 118; //@line 2768
  sp = STACKTOP; //@line 2769
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2772
  return;
 }
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20850
 $6 = ___async_retval; //@line 20852
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 20857
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 20858
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 20860
 HEAP32[$12 + 4 >> 2] = $11; //@line 20863
 $16 = $4; //@line 20864
 HEAP32[$16 >> 2] = 0; //@line 20866
 HEAP32[$16 + 4 >> 2] = 0; //@line 20869
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27908
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 27912
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP32[$2 + 2028 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 27918
  HEAP16[$2 + 2032 >> 1] = $6; //@line 27920
  HEAP8[$2 + 2034 >> 0] = 1; //@line 27922
  return;
 } else {
  HEAP32[$2 + 2020 >> 2] = 13; //@line 27926
  return;
 }
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7423
 $2 = HEAP32[4888] | 0; //@line 7424
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7425
 FUNCTION_TABLE_vii[$2 & 15]($0, $1); //@line 7426
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 641; //@line 7429
  sp = STACKTOP; //@line 7430
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7433
  return;
 }
}
function __ZNK7LoRaPHY25verify_frequency_for_bandEjh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0, $5 = 0;
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 20961
 $5 = $2 & 255; //@line 20962
 if ((HEAP32[$4 + ($5 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
  if ((HEAP32[$4 + ($5 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
   $$0 = 1; //@line 20971
   return $$0 | 0; //@line 20972
  }
 }
 $$0 = 0; //@line 20975
 return $$0 | 0; //@line 20976
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 643
 do {
  if ($0 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 647
   _mbedtls_platform_zeroize($0, 280); //@line 648
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 555; //@line 651
    sp = STACKTOP; //@line 652
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 655
    break;
   }
  }
 } while (0);
 return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 31302
 STACKTOP = STACKTOP + 16 | 0; //@line 31303
 $rem = __stackBase__ | 0; //@line 31304
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 31305
 STACKTOP = __stackBase__; //@line 31306
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 31307
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 85
 STACKTOP = STACKTOP + 16 | 0; //@line 86
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 86
 _mbed_tracef(16, 11016, 11452, sp); //@line 88
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 90
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 92
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 93
 STACKTOP = sp; //@line 94
 return;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 31072
 if ((ret | 0) < 8) return ret | 0; //@line 31073
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 31074
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 31075
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 31076
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 31077
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 31078
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $4 = 0, $6 = 0;
 $4 = HEAP8[$0 + 13 >> 0] | 0; //@line 20273
 if (!($4 << 24 >> 24)) {
  $14 = $4 << 24 >> 24 != 0; //@line 20276
  return $14 | 0; //@line 20277
 }
 $6 = $0 + 128 | 0; //@line 20279
 HEAP8[$6 >> 0] = $2 << 1 & 2 | $1 & 1 | HEAP8[$6 >> 0] & -4; //@line 20287
 $14 = $4 << 24 >> 24 != 0; //@line 20288
 return $14 | 0; //@line 20289
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3505
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3506
 _mbedtls_gcm_free($0); //@line 3507
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 576; //@line 3510
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3512
  sp = STACKTOP; //@line 3513
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3516
  _free($0); //@line 3517
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3457
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3458
 _mbedtls_ccm_free($0); //@line 3459
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 574; //@line 3462
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3464
  sp = STACKTOP; //@line 3465
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3468
  _free($0); //@line 3469
  return;
 }
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3600
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3601
 _mbedtls_aes_free($0); //@line 3602
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 578; //@line 3605
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3607
  sp = STACKTOP; //@line 3608
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3611
  _free($0); //@line 3612
  return;
 }
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 16136
 STACKTOP = STACKTOP + 16 | 0; //@line 16137
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16137
 if (!(_pthread_once(23644, 7) | 0)) {
  $3 = _pthread_getspecific(HEAP32[5912] | 0) | 0; //@line 16143
  STACKTOP = sp; //@line 16144
  return $3 | 0; //@line 16144
 } else {
  _abort_message(17867, sp); //@line 16146
 }
 return 0; //@line 16149
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4657
 HEAP32[$0 >> 2] = 724; //@line 4658
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4660
 __ZN12LoRaWANStackD2Ev($0 + 4 | 0); //@line 4661
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 151; //@line 4664
  sp = STACKTOP; //@line 4665
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4668
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16304
 }
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1428
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1429
 __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0); //@line 1430
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 82; //@line 1433
  sp = STACKTOP; //@line 1434
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1437
  return;
 }
}
function __ZN7LoRaMac24continue_sending_processEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $7 = 0;
 if ((HEAPU8[$0 + 1699 >> 0] | 0) <= (HEAPU8[$0 + 1698 >> 0] | 0)) {
  $$0 = 1; //@line 14129
  return $$0 | 0; //@line 14130
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 14133
 $7 = $0 + 1768 | 0; //@line 14134
 HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1; //@line 14137
 $$0 = 0; //@line 14138
 return $$0 | 0; //@line 14139
}
function __ZL25default_terminate_handlerv__async_cb_395($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30070
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30072
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30074
 HEAP32[$2 >> 2] = 17728; //@line 30075
 HEAP32[$2 + 4 >> 2] = $4; //@line 30077
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 30079
 _abort_message(17592, $2); //@line 30080
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22116
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22118
 $6 = HEAP8[$2 + 1182 >> 0] | 0; //@line 22120
 HEAP8[$2 + 1183 >> 0] = $6; //@line 22122
 __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $6, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $4); //@line 22127
 HEAP32[$2 + 1780 >> 2] = $4; //@line 22129
 return;
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 15805
 $6 = HEAP32[$5 >> 2] | 0; //@line 15806
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 15807
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 15809
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 15811
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 15814
 return $2 | 0; //@line 15815
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 2782
 HEAP32[$3 >> 2] = 0; //@line 2783
 HEAP32[$3 + 4 >> 2] = 0; //@line 2783
 HEAP32[$3 + 8 >> 2] = 0; //@line 2783
 HEAP32[$3 + 12 >> 2] = 0; //@line 2783
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 2786
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 2789
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14871
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14873
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 14874
 _fputc(10, $2) | 0; //@line 14875
 if (!___async) {
  ___async_unwind = 0; //@line 14878
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 672; //@line 14880
 sp = STACKTOP; //@line 14881
 return;
}
function __ZN7LoRaMac13clear_tx_pipeEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19676
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19678
 HEAP8[$2 + 2104 >> 0] = 0; //@line 19683
 _memset($2 + 1185 | 0, 0, 257) | 0; //@line 19685
 _memset($2 + 2115 | 0, 0, 259) | 0; //@line 19686
 _mbed_tracef(16, 12866, 13298, $4); //@line 19687
 HEAP32[___async_retval >> 2] = 0; //@line 19689
 return;
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2804
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2805
 _equeue_cancel($0, $1); //@line 2806
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 119; //@line 2809
  sp = STACKTOP; //@line 2810
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2813
  return;
 }
}
function __ZN7LoRaPHY16set_last_tx_doneEhbj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $5 = 0;
 $5 = HEAP32[$0 + 72 >> 2] | 0; //@line 18883
 $11 = HEAPU8[(HEAP32[$0 + 124 >> 2] | 0) + (($1 & 255) * 12 | 0) + 9 >> 0] | 0; //@line 18889
 HEAP32[$5 + ($11 * 24 | 0) + 8 >> 2] = $3; //@line 18891
 if ($2) {
  return;
 }
 HEAP32[$5 + ($11 * 24 | 0) + 4 >> 2] = $3; //@line 18896
 return;
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 880; //@line 21198
 HEAP32[$0 + 4 >> 2] = 0; //@line 21200
 HEAP32[$0 + 8 >> 2] = $1; //@line 21202
 dest = $0 + 12 | 0; //@line 21204
 stop = dest + 120 | 0; //@line 21204
 do {
  HEAP32[dest >> 2] = 0; //@line 21204
  dest = dest + 4 | 0; //@line 21204
 } while ((dest | 0) < (stop | 0));
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 2915
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 2920
 $$09 = 0; //@line 2921
 $7 = 0; //@line 2921
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 2925
  $$09 = $$09 + 1 << 24 >> 24; //@line 2926
  $7 = $$09 & 255; //@line 2927
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25917
 $6 = ___async_retval; //@line 25919
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 25924
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 25926
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 25928
 HEAP32[$13 + 4 >> 2] = $11; //@line 25931
 HEAP32[$4 >> 2] = 1; //@line 25932
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 7446
  return $$0 | 0; //@line 7447
 }
 HEAP32[4888] = $2; //@line 7449
 HEAP32[$0 >> 2] = $1; //@line 7450
 HEAP32[$0 + 4 >> 2] = $1; //@line 7452
 _emscripten_asm_const_iii(12, $3 | 0, $1 | 0) | 0; //@line 7453
 $$0 = 0; //@line 7454
 return $$0 | 0; //@line 7455
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18811
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 18822
  $$0 = 1; //@line 18823
 } else {
  $$0 = 0; //@line 18825
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 18829
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19100
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 19103
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 19108
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 19111
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16898
 STACKTOP = STACKTOP + 16 | 0; //@line 16899
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16899
 _free($0); //@line 16901
 if (!(_pthread_setspecific(HEAP32[5912] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 16906
  return;
 } else {
  _abort_message(17966, sp); //@line 16908
 }
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 7475
 HEAP32[$0 >> 2] = $1; //@line 7476
 HEAP32[4889] = 1; //@line 7477
 $4 = $0; //@line 7478
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 7483
 $10 = 19560; //@line 7484
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 7486
 HEAP32[$10 + 4 >> 2] = $9; //@line 7489
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18403
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 2; //@line 18406
  $$0 = 0; //@line 18407
 } else {
  $$0 = $AsyncRetVal; //@line 18409
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 18412
 return;
}
function _main() {
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7787
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7788
 _puts(15130) | 0; //@line 7789
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 653; //@line 7792
  sp = STACKTOP; //@line 7793
  return 0; //@line 7794
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7796
  return -1;
 }
 return 0; //@line 7799
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16380
 }
 return;
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3595
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3596
 _puts($0) | 0; //@line 3597
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 124; //@line 3600
  sp = STACKTOP; //@line 3601
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3604
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 3562
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 3566
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 3570
   $$0 = 0; //@line 3571
  } else {
   $$0 = $4; //@line 3573
  }
 } else {
  $$0 = $1; //@line 3576
 }
 return $$0 | 0; //@line 3578
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7743
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7744
 _emscripten_sleep($0 | 0); //@line 7745
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 651; //@line 7748
  sp = STACKTOP; //@line 7749
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7752
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 3525
 STACKTOP = STACKTOP + 16 | 0; //@line 3526
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3526
 $0 = sp; //@line 3527
 _gettimeofday($0 | 0, 0) | 0; //@line 3528
 STACKTOP = sp; //@line 3535
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 3535
}
function _mbedtls_cipher_update__async_cb_277($0) {
 $0 = $0 | 0;
 var $$1 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20820
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$0 + 4 >> 2]; //@line 20823
  $$1 = 0; //@line 20824
 } else {
  $$1 = $AsyncRetVal; //@line 20826
 }
 HEAP32[___async_retval >> 2] = $$1; //@line 20829
 return;
}
function __ZN13LoRaMacCryptoC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, dest = 0, stop = 0;
 $1 = $0 + 32 | 0; //@line 17956
 dest = $0; //@line 17957
 stop = dest + 64 | 0; //@line 17957
 do {
  HEAP32[dest >> 2] = 0; //@line 17957
  dest = dest + 4 | 0; //@line 17957
 } while ((dest | 0) < (stop | 0));
 HEAP8[$0 >> 0] = 73; //@line 17958
 HEAP8[$1 >> 0] = 1; //@line 17959
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 16883
 STACKTOP = STACKTOP + 16 | 0; //@line 16884
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16884
 if (!(_pthread_key_create(23648, 681) | 0)) {
  STACKTOP = sp; //@line 16889
  return;
 } else {
  _abort_message(17916, sp); //@line 16891
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 16444
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 16448
  }
 }
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10327
 } else {
  if ($1 << 24 >> 24 == -1) {
   $$0 = -1003; //@line 10331
  } else {
   HEAP8[$0 + 2902 >> 0] = $1; //@line 10334
   $$0 = 0; //@line 10335
  }
 }
 return $$0 | 0; //@line 10338
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 31336
 HEAP32[new_frame + 4 >> 2] = sp; //@line 31338
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 31340
 ___async_cur_frame = new_frame; //@line 31341
 return ___async_cur_frame + 8 | 0; //@line 31342
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 16490
 $3 = HEAPU8[$1 >> 0] | 0; //@line 16492
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 16497
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 16498
 HEAP8[$1 >> 0] = $3 + $8; //@line 16501
 return;
}
function b405(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 532
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10311
  return $$0 | 0; //@line 10312
 }
 $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) | 0; //@line 10315
 return $$0 | 0; //@line 10316
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 20941
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 20946
  return $$0 | 0; //@line 20947
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 20951
 return $$0 | 0; //@line 20952
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7409
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7415
 _emscripten_asm_const_iiiiii(11, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 7416
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10365
  return $$0 | 0; //@line 10366
 }
 __ZN7LoRaMac24enable_adaptive_datarateEb($0, $1); //@line 10368
 $$0 = 0; //@line 10369
 return $$0 | 0; //@line 10370
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 18115
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18119
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 18122
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_12($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18684
 HEAP32[$2 + 2092 >> 2] = 0; //@line 18688
 HEAP8[$2 + 2376 >> 0] = 1; //@line 18690
 HEAP32[$2 + 1760 >> 2] = 0; //@line 18692
 HEAP8[$2 + 1184 >> 0] = 0; //@line 18694
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7901
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7901
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7901
 return;
}
function b403(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 529
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 31325
  return low << bits; //@line 31326
 }
 tempRet0 = low << bits - 32; //@line 31328
 return 0; //@line 31329
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 31314
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 31315
 }
 tempRet0 = 0; //@line 31317
 return high >>> bits - 32 | 0; //@line 31318
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 1692
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 1692
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 1692
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 9371
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9371
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9371
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6427
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6427
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6427
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_321($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25976
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 25978
 HEAP32[$4 + 2496 >> 2] = $6 ? 5 : 2; //@line 25981
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 15807
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15807
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 15807
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10349
  return $$0 | 0; //@line 10350
 }
 $$0 = __ZN7LoRaMac21set_channel_data_rateEh($0, $1) | 0; //@line 10353
 return $$0 | 0; //@line 10354
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_183($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13850
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 13852
 HEAP32[$4 + 2496 >> 2] = $6 ? 5 : 2; //@line 13855
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 76
 STACKTOP = STACKTOP + 16 | 0; //@line 77
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 77
 _mbed_tracef(16, 11016, 11458, sp); //@line 79
 STACKTOP = sp; //@line 80
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_168($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12478
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12480
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; //@line 12483
 HEAP32[$6 + 2496 >> 2] = 2; //@line 12485
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_191($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14437
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14439
 HEAP32[$6 + 16 >> 2] = 0; //@line 14441
 return;
}
function _fflush__async_cb_386($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29424
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 29426
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29429
 return;
}
function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0; //@line 31592
}
function __ZN12LoRaWANStack20process_transmissionEv__async_cb_29($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20517
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 20519
 HEAP32[$4 >> 2] = $6 ? 5 : 2; //@line 20521
 return;
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 2120
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 2122
 }
 return 0; //@line 2124
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_367($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 27999
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 28000
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 28003
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 101
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 103
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 104
 HEAP8[$0 + 688 >> 0] = 0; //@line 106
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11967
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 11969
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 11971
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 22345
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 22348
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 22351
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7391
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7397
 _emscripten_asm_const_iiii(10, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 7398
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 19076
 } else {
  $$0 = -1; //@line 19078
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 19081
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 31585
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK16channel_params_t($0 + 752 | 0, $1, __ZN7LoRaPHY16get_phy_channelsEv($0 + 4 | 0) | 0) | 0; //@line 15974
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_210($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16027
 HEAP8[$2 + 688 >> 0] = 2; //@line 16029
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 16030
 return;
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 11693
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 11699
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 11703
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2784
 stop = dest + 68 | 0; //@line 2784
 do {
  HEAP32[dest >> 2] = 0; //@line 2784
  dest = dest + 4 | 0; //@line 2784
 } while ((dest | 0) < (stop | 0));
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 31641
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 31348
 stackRestore(___async_cur_frame | 0); //@line 31349
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 31350
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2595
 stop = dest + 68 | 0; //@line 2595
 do {
  HEAP32[dest >> 2] = 0; //@line 2595
  dest = dest + 4 | 0; //@line 2595
 } while ((dest | 0) < (stop | 0));
 return;
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22162
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 22163
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 22165
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18174
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 18175
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 18177
 return;
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 21809
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 21810
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 21817
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14804
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14804
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14806
 return $1 | 0; //@line 14807
}
function __ZN7LoRaMac16reset_ongoing_txEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 2104 >> 0] = 0; //@line 14525
 _memset($0 + 2115 | 0, 0, 257) | 0; //@line 14527
 if (!$1) {
  return;
 }
 HEAP16[$0 + 2372 >> 1] = 0; //@line 14532
 return;
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 11152
  $$0 = -1; //@line 11153
 } else {
  $$0 = $0; //@line 11155
 }
 return $$0 | 0; //@line 11157
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7375
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7381
 _emscripten_asm_const_iii(9, $0 | 0, $1 | 0) | 0; //@line 7382
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7360
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7366
 _emscripten_asm_const_iii(8, $0 | 0, $1 | 0) | 0; //@line 7367
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 3584
 HEAP8[$0 + 76 >> 0] = 1; //@line 3586
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 3588
 _pthread_mutex_unlock($0 | 0) | 0; //@line 3589
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 31065
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 31066
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 31067
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 31578
}
function __ZN4mbed6Ticker5setupEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = ___udivdi3($1 | 0, $2 | 0, 1e3, 0) | 0; //@line 7712
 _emscripten_asm_const_iii(15, $0 + 40 | 0, $4 | 0) | 0; //@line 7714
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28684
 HEAP8[$2 + 689 >> 0] = 0; //@line 28686
 HEAP8[$2 + 688 >> 0] = 0; //@line 28688
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_315($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 25472
 HEAP8[___async_retval >> 0] = 1; //@line 25475
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19121
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 19122
 HEAP32[___async_retval >> 2] = $4; //@line 19124
 return;
}
function _aes_crypt_ctr_wrap($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return _mbedtls_aes_crypt_ctr($0, $1, $2, $3, $4, $5, $6) | 0; //@line 3554
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1318
 ___cxa_begin_catch($0 | 0) | 0; //@line 1319
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1320
 __ZSt9terminatev(); //@line 1321
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 31634
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 3587
 if (!$0) {
  $$0 = 0; //@line 3590
 } else {
  _mbedtls_aes_init($0); //@line 3592
  $$0 = $0; //@line 3593
 }
 return $$0 | 0; //@line 3595
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 1855
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_220($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17458
 HEAP8[$2 >> 0] = (HEAP8[$2 >> 0] | 0) + 1 << 24 >> 24; //@line 17461
 return;
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {
   _sleep_manager_unlock_deep_sleep_internal(); //@line 2600
  }
 }
 HEAP32[$0 >> 2] = 0; //@line 2603
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 31571
}
function __ZN16LoRaWANInterface15get_tx_metadataER19lorawan_tx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack19acquire_tx_metadataER19lorawan_tx_metadata($0 + 4 | 0, $1) | 0; //@line 4616
}
function __ZN16LoRaWANInterface15get_rx_metadataER19lorawan_rx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack19acquire_rx_metadataER19lorawan_rx_metadata($0 + 4 | 0, $1) | 0; //@line 4625
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 3541
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 4457
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 31057
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 31059
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_163($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12233
 return;
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 31627
}
function b53(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(0); //@line 31797
 return 0; //@line 31797
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 21791
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 11838
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 11843
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_226($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 17836
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 13864
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 13867
 }
 return $$0 | 0; //@line 13869
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 21221
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_125($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27400
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19134
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_53($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 22002
 return;
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 28254
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 31564
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1168 >> 2] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0 ? 2 : 1; //@line 17895
 return;
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0 + 4 | 0, $1) | 0; //@line 4429
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 11333
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 11337
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 31294
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12299
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 15767
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_142($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 28436
 return;
}
function __ZN16LoRaWANInterface20get_backoff_metadataERi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack24acquire_backoff_metadataERi($0 + 4 | 0, $1) | 0; //@line 4634
}
function b51(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 31794
 return 0; //@line 31794
}
function b50(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 31791
 return 0; //@line 31791
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 689 >> 0] = 1; //@line 710
 HEAP8[$0 + 776 >> 0] = $1 & 1; //@line 712
 return;
}
function __ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19040
 return;
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 23612
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 31355
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 31356
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_188($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 14133
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_339($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26675
 return;
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 357
}
function __ZN7LoRaMac24continue_joining_processEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = (HEAP32[___async_retval >> 2] | 0) == 0 & 1; //@line 22394
 return;
}
function __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 21802
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27672
 return;
}
function __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 4 | 0, $1); //@line 16007
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 31620
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 23622
 return;
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP8[$0 + 689 >> 0] = $1; //@line 700
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21565
 return;
}
function __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28137
 return;
}
function __ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28150
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(16, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 7762
 return;
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh($0 + 4 | 0, $1) | 0; //@line 4404
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_9($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 18393
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_250($0) {
 $0 = $0 | 0;
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv(HEAP32[$0 + 4 >> 2] | 0); //@line 19409
 return;
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 21776
}
function __ZN16LoRaWANInterface19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29128
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 11829
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 11831
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb($0 + 4 | 0, 0) | 0; //@line 4420
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16983
 __ZdlPv($0); //@line 16984
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 3529
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb($0 + 4 | 0, 1) | 0; //@line 4412
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_111($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 26573
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16666
 __ZdlPv($0); //@line 16667
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 19544; //@line 15822
 HEAP32[$2 >> 2] = $0 + -1; //@line 15824
 HEAP32[$2 + 4 >> 2] = 0; //@line 15827
 return;
}
function __ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 19649
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 3495
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 3498
 }
 return $0 | 0; //@line 3500
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb_390($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29582
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb_389($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29568
 return;
}
function __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 20409
 return;
}
function __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27650
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_119($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26974
 return;
}
function b48(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 31788
 return 0; //@line 31788
}
function b47(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 31785
 return 0; //@line 31785
}
function b46(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 31782
 return 0; //@line 31782
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 3447
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 3450
 }
 return $0 | 0; //@line 3452
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 338
 return;
}
function __ZN16LoRaWANInterface7receiveEhPhti__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 17822
 return;
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 __ZN12LoRaWANStack25remove_link_check_requestEv($0 + 4 | 0); //@line 4394
 return;
}
function __ZN16LoRaWANInterface14remove_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19659
 return;
}
function __ZN16LoRaWANInterface14cancel_sendingEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16149
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16194
 __ZdlPv($0); //@line 16195
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21797
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_55($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 2; //@line 22082
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22152
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 22092
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22142
 return;
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 20550
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 13349
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 28121
 return;
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 25991
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_211($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 2911 >> 0] = 1; //@line 16537
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack22set_link_check_requestEv($0 + 4 | 0) | 0; //@line 4387
}
function __ZN16LoRaWANInterface10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20531
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0; //@line 31557
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22456
 return;
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 16028
 return;
}
function b401(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 526
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18227
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 16391
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22108
 return;
}
function __ZN12LoRaWANStack7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23602
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 120 | 0 : $0 + 116 | 0) >> 2] | 0; //@line 21828
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_316($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 2084 >> 0] = 1; //@line 25491
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2723] | 0; //@line 16973
 HEAP32[2723] = $0 + 0; //@line 16975
 return $0 | 0; //@line 16977
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 17492
 return;
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(13, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 7465
 return;
}
function _mbedtls_cipher_update__async_cb_278($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20839
 return;
}
function _mbedtls_cipher_setkey__async_cb_335($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26377
 return;
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 347
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_231($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 18164
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 15](a1 | 0, a2 | 0); //@line 31613
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_121($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27042
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 3563
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_38($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 21204
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 12097
 return;
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20670
 return;
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26367
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac4joinEb__async_cb_50($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21864
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 17301
 return;
}
function b44(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 31779
 return 0; //@line 31779
}
function b43(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 31776
 return 0; //@line 31776
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19030
 return;
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22132
 return;
}
function _aes_setkey_dec_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15887
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_272($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 1; //@line 20576
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18012
 return;
}
function __ZN7LoRaMac24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 1936 >> 0] = $1 & 1; //@line 14542
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 12503
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_182($0) {
 $0 = $0 | 0;
 __ZN12LoRaPHYEU868D2Ev((HEAP32[$0 + 4 >> 2] | 0) + 4 | 0); //@line 13763
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 31382
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_201($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 21229
 return;
}
function _memset__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 return _memset(p0 | 0, p1 | 0, p2 | 0) | 0; //@line 31734
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b399(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 523
}
function _mbedtls_aes_setkey_dec__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 11957
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _fflush__async_cb_387($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29439
 return;
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 21853
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 13812
}
function _fputc__async_cb_287($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22175
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 692 >> 2] = $1; //@line 658
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15382
 return;
}
function _putc__async_cb_232($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18187
 return;
}
function __ZN7LoRaMac14set_tx_ongoingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 2104 >> 0] = $1 & 1; //@line 14587
 return;
}
function __ZN6events10EventQueue9time_leftEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _equeue_timeleft($0, $1) | 0; //@line 2823
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 16525
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 880; //@line 18732
 HEAP32[$0 + 4 >> 2] = 0; //@line 18734
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 31550
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 19020
 return;
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 16542
}
function __ZN7LoRaMac11schedule_txEv__async_cb_342($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 26847
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function b41(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 31773
 return 0; //@line 31773
}
function b40(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 31770
 return 0; //@line 31770
}
function b39(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 31767
 return 0; //@line 31767
}
function b38(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 31764
 return 0; //@line 31764
}
function b37(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 31761
 return 0; //@line 31761
}
function b36(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 31758
 return 0; //@line 31758
}
function b35(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 31755
 return 0; //@line 31755
}
function b34(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 31752
 return 0; //@line 31752
}
function b33(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 31749
 return 0; //@line 31749
}
function b32(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 31746
 return 0; //@line 31746
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 31743
 return 0; //@line 31743
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 31740
 return 0; //@line 31740
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 31737
 return 0; //@line 31737
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 21917
}
function __ZN4mbed11InterruptInD0Ev__async_cb_252($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 19602
 return;
}
function __ZN12LoRaWANStack25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2909 >> 0] = 0; //@line 10766
 return;
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 31731
 return 0; //@line 31731
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 16510
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 16516
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(18019, HEAP32[$0 + 4 >> 2] | 0); //@line 26626
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 15318
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 26831
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(14, $0 + 40 | 0) | 0; //@line 7722
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_204($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 27139
 return;
}
function __ZN16LoRaWANInterfaceD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 30320
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 31606
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 21799
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_385($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 29340
 return;
}
function __ZN7LoRaMac26get_backoff_timer_event_idEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 1812 >> 2] | 0; //@line 14456
}
function __ZN7LoRaMac25post_process_mlme_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2084 >> 0] = 0; //@line 11218
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb_233($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 18214
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 16532
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 16381
 return;
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 180
 __ZdlPv($0); //@line 181
 return;
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 16483
 return;
}
function b397(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 520
}
function b396(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 517
}
function b395(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 514
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 16390
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 3511
 return;
}
function __ZN7LoRaMac21post_process_mlme_indEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2080 >> 0] = 0; //@line 11282
 return;
}
function __ZN7LoRaMac21post_process_mcps_indEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2012 >> 0] = 0; //@line 11274
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_238($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 3520
 return;
}
function __ZN7LoRaMac10tx_ongoingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 2104 >> 0] | 0) != 0 | 0; //@line 14578
}
function __ZN7LoRaMac10nwk_joinedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 2376 >> 0] | 0) != 0 | 0; //@line 12848
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 998
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_81($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_61($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_60($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK7LoRaMac16get_device_classEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 2380 >> 2] | 0; //@line 14282
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 21836
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 690
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_49($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 124 >> 2] | 0; //@line 21844
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 16397
}
function b26(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(31); //@line 31728
 return 0; //@line 31728
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(30); //@line 31725
 return 0; //@line 31725
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(29); //@line 31722
 return 0; //@line 31722
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(28); //@line 31719
 return 0; //@line 31719
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(27); //@line 31716
 return 0; //@line 31716
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(26); //@line 31713
 return 0; //@line 31713
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(25); //@line 31710
 return 0; //@line 31710
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(24); //@line 31707
 return 0; //@line 31707
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(23); //@line 31704
 return 0; //@line 31704
}
function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(22); //@line 31701
 return 0; //@line 31701
}
function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(21); //@line 31698
 return 0; //@line 31698
}
function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(20); //@line 31695
 return 0; //@line 31695
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(19); //@line 31692
 return 0; //@line 31692
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(18); //@line 31689
 return 0; //@line 31689
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 19055
 return;
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 19668
 return;
}
function _aes_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 15877
 return;
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 15057
}
function b12(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 31686
 return 0; //@line 31686
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 3555
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 3542
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_240($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 276) | 0; //@line 16373
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 31543
}
function __ZNK7LoRaMac21get_mlme_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 2084 | 0; //@line 11204
}
function __ZNK7LoRaMac21get_mcps_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 2052 | 0; //@line 11190
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 29778
 return;
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 3548
 return;
}
function __ZNK7LoRaMac19get_mlme_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 2076 | 0; //@line 11211
}
function __ZNK7LoRaMac19get_mcps_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 2012 | 0; //@line 11197
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 16014
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_153($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_162($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_309($0) {
 $0 = $0 | 0;
 return;
}
function b393(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 511
}
function b392(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 508
}
function b391(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 505
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 2798
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 324
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_200($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_146($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb_67($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_184($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_274($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 4529
 return;
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 637
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_152($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_104($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_102($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_44($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_43($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 173
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_288($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_263($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_262($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_261($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_258($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7](); //@line 31599
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_78($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_77($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_76($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_80($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_230($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_64($0) {
 $0 = $0 | 0;
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 11210
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 31683
 return 0; //@line 31683
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 31680
 return 0; //@line 31680
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 31677
 return 0; //@line 31677
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 31674
 return 0; //@line 31674
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(11); //@line 31671
 return 0; //@line 31671
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_114($0) {
 $0 = $0 | 0;
 return;
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 31668
 return 0; //@line 31668
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_165($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_155($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(23632); //@line 11848
 return 23640; //@line 11849
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_134($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_247($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b389(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(15); //@line 502
}
function b388(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(14); //@line 499
}
function b387(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(13); //@line 496
}
function _abort_message__async_cb_194($0) {
 $0 = $0 | 0;
 _abort(); //@line 14888
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 18741
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 2730
}
function b386(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 493
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_15($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 31803
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_290($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb_264($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_329($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 14978
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 14984
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_366($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_377($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_platform_zeroize__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb_393($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 31509
}
function _mbedtls_cipher_free__async_cb_359($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb_229($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 16020
 return;
}
function b3() {
 nullFunc_i(7); //@line 31665
 return 0; //@line 31665
}
function b2() {
 nullFunc_i(6); //@line 31662
 return 0; //@line 31662
}
function b1() {
 nullFunc_i(0); //@line 31659
 return 0; //@line 31659
}
function _schedule_interrupt__async_cb_28($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_27($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_24($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_23($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 31505
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(23632); //@line 11854
 return;
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 32295
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 32292
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 32289
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 32286
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 32283
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 32280
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 32277
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 32274
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 32271
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 32268
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 32265
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 32262
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 32259
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 32256
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 32253
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 32250
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 32247
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 32244
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 32241
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 32238
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 32235
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 32232
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 32229
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 32226
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 32223
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 32220
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 32217
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 32214
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 32211
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 32208
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 32205
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 32202
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 32199
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 32196
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 32193
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 32190
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 32187
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 32184
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 32181
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 32178
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 32175
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(818); //@line 32172
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(817); //@line 32169
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(816); //@line 32166
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(815); //@line 32163
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(814); //@line 32160
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(813); //@line 32157
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(812); //@line 32154
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(811); //@line 32151
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(810); //@line 32148
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(809); //@line 32145
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(808); //@line 32142
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(807); //@line 32139
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(806); //@line 32136
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(805); //@line 32133
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(804); //@line 32130
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(803); //@line 32127
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(802); //@line 32124
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(801); //@line 32121
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(800); //@line 32118
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(799); //@line 32115
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(798); //@line 32112
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(797); //@line 32109
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(796); //@line 32106
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(795); //@line 32103
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(794); //@line 32100
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(793); //@line 32097
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(792); //@line 32094
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(791); //@line 32091
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(790); //@line 32088
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(789); //@line 32085
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(788); //@line 32082
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(787); //@line 32079
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(786); //@line 32076
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(785); //@line 32073
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(784); //@line 32070
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(783); //@line 32067
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(782); //@line 32064
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(781); //@line 32061
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(780); //@line 32058
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(779); //@line 32055
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(778); //@line 32052
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(777); //@line 32049
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(776); //@line 32046
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(775); //@line 32043
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(774); //@line 32040
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(773); //@line 32037
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(772); //@line 32034
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(771); //@line 32031
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(770); //@line 32028
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(769); //@line 32025
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(768); //@line 32022
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(767); //@line 32019
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(766); //@line 32016
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(765); //@line 32013
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(764); //@line 32010
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(763); //@line 32007
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(762); //@line 32004
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(761); //@line 32001
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(760); //@line 31998
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(759); //@line 31995
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(758); //@line 31992
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(757); //@line 31989
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(756); //@line 31986
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(755); //@line 31983
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(754); //@line 31980
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(753); //@line 31977
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(752); //@line 31974
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(751); //@line 31971
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(750); //@line 31968
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(749); //@line 31965
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(748); //@line 31962
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(747); //@line 31959
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(746); //@line 31956
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(745); //@line 31953
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(744); //@line 31950
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(743); //@line 31947
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(742); //@line 31944
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(741); //@line 31941
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(740); //@line 31938
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(739); //@line 31935
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(738); //@line 31932
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(737); //@line 31929
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(736); //@line 31926
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(735); //@line 31923
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(734); //@line 31920
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(733); //@line 31917
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(732); //@line 31914
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(731); //@line 31911
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(730); //@line 31908
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(729); //@line 31905
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(728); //@line 31902
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(727); //@line 31899
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(726); //@line 31896
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(725); //@line 31893
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(724); //@line 31890
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(723); //@line 31887
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(722); //@line 31884
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(721); //@line 31881
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(720); //@line 31878
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(719); //@line 31875
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(718); //@line 31872
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(717); //@line 31869
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(716); //@line 31866
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(715); //@line 31863
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(714); //@line 31860
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(713); //@line 31857
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(712); //@line 31854
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(711); //@line 31851
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(710); //@line 31848
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(709); //@line 31845
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(708); //@line 31842
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(707); //@line 31839
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(706); //@line 31836
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(705); //@line 31833
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(704); //@line 31830
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(703); //@line 31827
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(702); //@line 31824
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(701); //@line 31821
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(700); //@line 31818
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(699); //@line 31815
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(698); //@line 31812
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(697); //@line 31809
}
function b384(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 490
}
function b383(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 487
}
function b382(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 484
}
function b381(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 481
}
function b380(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 478
}
function b379(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 475
}
function b378(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 472
}
function b377(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 469
}
function b376(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 466
}
function b375(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 463
}
function b374(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 460
}
function b373(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 457
}
function b372(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 454
}
function b371(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 451
}
function b370(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 448
}
function b369(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 445
}
function b368(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 442
}
function b367(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 439
}
function b366(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 436
}
function b365(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 433
}
function b364(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 430
}
function b363(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 427
}
function b362(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 424
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_aes_free__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 11168
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 11485
}
function b361(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 421
}
function b360(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 418
}
function b359(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 415
}
function b358(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 412
}
function b357(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 409
}
function b356(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 406
}
function b355(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 403
}
function b354(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 400
}
function b353(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 397
}
function b352(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 394
}
function b351(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 391
}
function b350(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 388
}
function b349(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 385
}
function b348(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 382
}
function b347(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 379
}
function b346(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 376
}
function b345(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 373
}
function b344(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 370
}
function b343(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 367
}
function b342(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 364
}
function b341(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 361
}
function b340(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 358
}
function b339(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 355
}
function b338(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 352
}
function b337(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 349
}
function b336(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 346
}
function b335(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 343
}
function b334(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 340
}
function b333(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 337
}
function b332(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 334
}
function b331(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 331
}
function b330(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 328
}
function b329(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 325
}
function b328(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 322
}
function b327(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 319
}
function b326(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 316
}
function b325(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 313
}
function b324(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 310
}
function b323(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 307
}
function b322(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 304
}
function b321(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 301
}
function b320(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 298
}
function b319(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 295
}
function b318(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 292
}
function b317(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 289
}
function b316(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 286
}
function b315(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 283
}
function b314(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 280
}
function b313(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 277
}
function b312(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 274
}
function b311(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 271
}
function b310(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 268
}
function b309(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 265
}
function b308(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 262
}
function b307(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 259
}
function b306(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 256
}
function b305(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 253
}
function b304(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 250
}
function b303(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 247
}
function b302(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 244
}
function b301(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 241
}
function b300(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 238
}
function b299(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 235
}
function b298(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 232
}
function b297(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 229
}
function b296(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 226
}
function b295(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 223
}
function b294(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 220
}
function b293(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 217
}
function b292(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 214
}
function b291(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 211
}
function b290(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 208
}
function b289(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 205
}
function b288(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 202
}
function b287(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 199
}
function b286(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 196
}
function b285(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 193
}
function b284(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 190
}
function b283(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 187
}
function b282(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 184
}
function b281(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 181
}
function b280(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 178
}
function b279(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 175
}
function b278(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 172
}
function b277(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 169
}
function b276(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 166
}
function b275(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 163
}
function b274(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 160
}
function b273(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 157
}
function b272(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 154
}
function b271(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 151
}
function b270(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 148
}
function b269(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 145
}
function b268(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 142
}
function b267(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 139
}
function b266(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 136
}
function b265(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 133
}
function b264(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 130
}
function b263(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 127
}
function b262(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 124
}
function b261(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 121
}
function b260(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 118
}
function b259(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 115
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 112
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 109
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 106
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 103
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 100
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 31806
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 97
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 94
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 91
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 88
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 85
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 82
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 79
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 76
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 73
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 70
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 67
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 64
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 61
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 58
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 55
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 52
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 49
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 46
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 43
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 40
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 37
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 34
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 31
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 28
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 25
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 22
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 19
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 16
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 13
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 10
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 7
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 4
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 1
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _initialize__async_cb_20($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function _us_ticker_get_info() {
 return 10256; //@line 7738
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10200; //@line 6901
}
function ___errno_location() {
 return 23628; //@line 11162
}
function __ZSt9terminatev__async_cb_336($0) {
 $0 = $0 | 0;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10524; //@line 11215
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 7529
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function _us_ticker_fire_interrupt() {
 return;
}
function b55() {
 nullFunc_v(0); //@line 31800
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,__ZN16LoRaWANInterface14cancel_sendingEv,___stdio_close,b6,b7,b8,b9,b10];
var FUNCTION_TABLE_iii = [b12,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN16LoRaWANInterface16set_device_classE14device_class_t,__ZN16LoRaWANInterface15get_tx_metadataER19lorawan_tx_metadata,__ZN16LoRaWANInterface15get_rx_metadataER19lorawan_rx_metadata,__ZN16LoRaWANInterface20get_backoff_metadataERi,__ZN7LoRaPHY9rx_configEP18rx_config_params_t,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23
,b24,b25,b26];
var FUNCTION_TABLE_iiii = [b28,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t,__ZN7LoRaPHY25accept_tx_param_setup_reqEhh,__ZN7LoRaPHY18dl_channel_requestEhj,__ZN7LoRaPHY11add_channelEPK16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,__ZNK7LoRaPHY25verify_frequency_for_bandEjh,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,_memset__wrapper,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38
,b39,b40,b41];
var FUNCTION_TABLE_iiiii = [b43,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b44];
var FUNCTION_TABLE_iiiiii = [b46,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN16LoRaWANInterface7receiveEPhtRhRi,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b47,b48];
var FUNCTION_TABLE_iiiiiii = [b50,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b51];
var FUNCTION_TABLE_iiiiiiii = [b53,_aes_crypt_ctr_wrap];
var FUNCTION_TABLE_v = [b55,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_vi = [b57,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,_mbed_trace_default_print,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv,__ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN7LoRaPHYD2Ev
,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_246,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_247,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_248,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_249,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_250,__ZN16SX1276_LoRaRadio6randomEv__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_372
,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_368,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_369,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_371,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_370,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_367,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_210,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_328,__ZN16SX1276_LoRaRadioD2Ev__async_cb_322,__ZN16SX1276_LoRaRadioD2Ev__async_cb_327,__ZN16SX1276_LoRaRadioD2Ev__async_cb_323,__ZN16SX1276_LoRaRadioD2Ev__async_cb_326,__ZN16SX1276_LoRaRadioD2Ev__async_cb_324,__ZN16SX1276_LoRaRadioD2Ev__async_cb_325,__ZN16SX1276_LoRaRadioD2Ev__async_cb_334,__ZN16SX1276_LoRaRadioD2Ev__async_cb_333,__ZN16SX1276_LoRaRadioD2Ev__async_cb_332,__ZN16SX1276_LoRaRadioD2Ev__async_cb_331,__ZN16SX1276_LoRaRadioD2Ev__async_cb_330,__ZN16SX1276_LoRaRadioD2Ev__async_cb_329,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_41,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_42,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_43,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_44,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb
,__ZN16SX1276_LoRaRadio11tx_done_irqEv,__ZN16SX1276_LoRaRadio8transmitEj__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_154,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_155,__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_245,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_244,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_243,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_264,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_252,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_240,__ZN4mbed7TimeoutD2Ev__async_cb,__ZN4mbed7TimeoutD2Ev__async_cb_393,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_385,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed7Timeout7handlerEv__async_cb_291,__ZN4mbed7Timeout7handlerEv__async_cb_289,__ZN4mbed7Timeout7handlerEv__async_cb_290,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed10TimerEventC2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj__async_cb
,__ZN6events10EventQueue6cancelEi__async_cb,_equeue_alloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_equeue_cancel__async_cb,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_93,_mbed_vtracef__async_cb_83,_mbed_vtracef__async_cb_84,_mbed_vtracef__async_cb_85,_mbed_vtracef__async_cb_92,_mbed_vtracef__async_cb_86,_mbed_vtracef__async_cb_91,_mbed_vtracef__async_cb_87,_mbed_vtracef__async_cb_88,_mbed_vtracef__async_cb_89,_mbed_vtracef__async_cb_90,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb,__ZN16LoRaWANInterface10disconnectEv__async_cb,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb,__ZN16LoRaWANInterface19remove_channel_planEv__async_cb,__ZN16LoRaWANInterface14remove_channelEh__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterface7receiveEhPhti__async_cb,__ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb
,__ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb,__ZN16LoRaWANInterface14cancel_sendingEv__async_cb,__ZN16LoRaWANInterfaceD2Ev__async_cb,__ZN16LoRaWANInterfaceD0Ev__async_cb,__ZN12LoRaWANStackD2Ev__async_cb,__ZN12LoRaWANStackD2Ev__async_cb_375,__ZN12LoRaWANStackD2Ev__async_cb_376,__ZN12LoRaWANStackD2Ev__async_cb_378,__ZN12LoRaWANStackD2Ev__async_cb_377,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_361,__ZN12radio_eventsD2Ev__async_cb_362,__ZN12radio_eventsD2Ev__async_cb_363,__ZN12radio_eventsD2Ev__async_cb_364,__ZN12radio_eventsD2Ev__async_cb_365,__ZN12radio_eventsD2Ev__async_cb_366,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN12LoRaWANStack20tx_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_293,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_294,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_295,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_296,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_297,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_298,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_299,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_300,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_301
,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_302,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_303,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_304,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_305,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_306,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_307,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_308,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_309,__ZN12LoRaWANStack20process_transmissionEv,__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_288,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_273,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_274,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_145,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_146,__ZN12LoRaWANStack28process_transmission_timeoutEv,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_153,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_161,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_162,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_184,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_183,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_185,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_190
,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_186,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_189,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_187,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_188,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_208,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb,__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_53,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_52,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_54,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_51,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_55,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_67,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_66,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_75,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_68,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_78,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_69,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_74,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_70,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_77,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_71,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_73,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_72
,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_76,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_101,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_94,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_104,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_95,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_100,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_96,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_103,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_97,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_99,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_98,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_102,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_122,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_127,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_123,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_126,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_124,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_125,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_292,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb,__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_321,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_341,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv
,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_340,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_339,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_380,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_212,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_216,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_215,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_214,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_213,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_211,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_223,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_228,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_224,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_227,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_225,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_226,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_253,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_259,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_255,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_263
,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_258,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_256,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_260,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_257,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_262,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_261,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_151,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_150,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_152,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_139,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_144,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_140,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_143,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_141,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_142,__ZN12LoRaWANStack23process_connected_stateEv__async_cb,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_167,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_166,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_168,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_195,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb,__ZN12LoRaWANStack20process_transmissionEv__async_cb,__ZN12LoRaWANStack20process_transmissionEv__async_cb_29,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb
,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_61,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_60,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_47,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_46,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_48,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_45,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_49,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_105,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_106,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_107,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_108,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_109,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_110,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_112,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_111,__ZN12LoRaWANStack7connectEv__async_cb,__ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb,__ZN12LoRaWANStack16remove_a_channelEh__async_cb,__ZN12LoRaWANStack17drop_channel_listEv__async_cb,__ZN12LoRaWANStack12stop_sendingEv__async_cb,__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_392,__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb,__ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv,__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb_222
,__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb,__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv__async_cb,__ZN7LoRaMacD2Ev__async_cb,__ZN7LoRaMacD2Ev__async_cb_178,__ZN7LoRaMacD2Ev__async_cb_179,__ZN7LoRaMacD2Ev__async_cb_180,__ZN7LoRaMacD2Ev__async_cb_181,__ZN7LoRaMacD2Ev__async_cb_182,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_59,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_58,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_57,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_56,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb,__ZN7LoRaMac15open_rx2_windowEv__async_cb_2,__ZN7LoRaMac15open_rx2_windowEv__async_cb_1,__ZN7LoRaMac15open_rx2_windowEv__async_cb,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_11,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_13,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_10,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_12,__ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_135,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_137,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_136,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_62,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_65,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_63
,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_64,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_82,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_81,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_320,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_319,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_317,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_318,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_316,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_286,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_285,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_284,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_283,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_281,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_282,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb,__ZN7LoRaMac24continue_joining_processEv__async_cb,__ZN7LoRaMac21handle_retransmissionEv__async_cb,__ZN7LoRaMac21handle_retransmissionEv__async_cb_390,__ZN7LoRaMac21handle_retransmissionEv__async_cb_389,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_400,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_398,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_399,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_397,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_343,__ZN7LoRaMac11schedule_txEv__async_cb_342
,__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb,__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_230,__ZN7LoRaMac15open_rx1_windowEv__async_cb_236,__ZN7LoRaMac15open_rx1_windowEv__async_cb_234,__ZN7LoRaMac15open_rx1_windowEv__async_cb_235,__ZN7LoRaMac15open_rx1_windowEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_221,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_219,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_218,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_217,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_220,__ZN7LoRaMac13clear_tx_pipeEv__async_cb_254,__ZN7LoRaMac13clear_tx_pipeEv__async_cb,__ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb,__ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb,__ZN7LoRaMac15send_ongoing_txEv__async_cb,__ZN7LoRaMac15send_ongoing_txEv__async_cb_209,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_203,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_206,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_205,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_204,__ZN7LoRaMac4joinEb__async_cb,__ZN7LoRaMac4joinEb__async_cb_50,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_37,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_39,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_40,__ZN7LoRaMac23on_backoff_timer_expiryEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_36
,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb,__ZN7LoRaMac15open_rx1_windowEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_35,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_30,__ZN7LoRaMac15open_rx2_windowEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_34,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_31,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_33,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_32,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_38,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb,__ZN7LoRaMac10disconnectEv__async_cb_131,__ZN7LoRaMac10disconnectEv__async_cb_130,__ZN7LoRaMac10disconnectEv__async_cb_129,__ZN7LoRaMac10disconnectEv__async_cb_128,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_241,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_231,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_156,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_157,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_158,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_159
,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_160,__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb,__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_163,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_118,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_117,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_116,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_115,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_119,__ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh__async_cb,__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh__async_cb,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_8,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_7,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_6,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_9,__ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh__async_cb,__ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2___async_cb,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_373,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_374,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_279,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_280,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_265,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_266,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_267,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_268,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_269
,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_270,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_271,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_272,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_310,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_311,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_312,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_313,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_314,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_315,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY18dl_channel_requestEhj__async_cb,__ZN7LoRaPHY18dl_channel_requestEhj__async_cb_251,__ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_237,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_238,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_164,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_165,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_113,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_114,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_79,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_80,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_132,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_133,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_134
,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_120,__ZN7LoRaPHY13get_radio_rngEv__async_cb_121,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_14,__ZN7LoRaPHY11handle_sendEPhh__async_cb_15,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_191,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_199,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_196,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_198,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_197,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_200,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_aes_free__async_cb,_mbedtls_aes_setkey_dec__async_cb,_mbedtls_ccm_setkey__async_cb_4,_mbedtls_ccm_setkey__async_cb_3,_mbedtls_ccm_setkey__async_cb,_mbedtls_ccm_free__async_cb_5,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb_360,_mbedtls_cipher_free__async_cb,_mbedtls_cipher_free__async_cb_359,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_335,_mbedtls_cipher_update__async_cb
,_mbedtls_cipher_update__async_cb_278,_mbedtls_cipher_update__async_cb_275,_mbedtls_cipher_update__async_cb_276,_mbedtls_cipher_update__async_cb_277,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb,_aes_setkey_dec_wrap__async_cb,_aes_ctx_free__async_cb,_mbedtls_cipher_cmac_starts__async_cb_202,_mbedtls_cipher_cmac_starts__async_cb,_mbedtls_cipher_cmac_update__async_cb_193,_mbedtls_cipher_cmac_update__async_cb_192,_mbedtls_cipher_cmac_update__async_cb,_mbedtls_cipher_cmac_finish__async_cb_175,_mbedtls_cipher_cmac_finish__async_cb_174,_mbedtls_cipher_cmac_finish__async_cb_173,_mbedtls_cipher_cmac_finish__async_cb_177,_mbedtls_cipher_cmac_finish__async_cb_172,_mbedtls_cipher_cmac_finish__async_cb_176,_mbedtls_cipher_cmac_finish__async_cb_171,_mbedtls_cipher_cmac_finish__async_cb_170,_mbedtls_cipher_cmac_finish__async_cb_169,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_149,_mbedtls_gcm_setkey__async_cb_148,_mbedtls_gcm_setkey__async_cb_147,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb
,_mbedtls_gcm_free__async_cb_138,_mbedtls_gcm_free__async_cb,_mbedtls_platform_zeroize__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_17,_initialize__async_cb_22,_initialize__async_cb_21,_initialize__async_cb_18,_initialize__async_cb_19,_initialize__async_cb_20,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_23,_schedule_interrupt__async_cb_24,_schedule_interrupt__async_cb_25,_schedule_interrupt__async_cb_26,_schedule_interrupt__async_cb_27,_schedule_interrupt__async_cb_28,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_394,_ticker_read_us__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_358,_mbed_die__async_cb_357,_mbed_die__async_cb_356,_mbed_die__async_cb_355,_mbed_die__async_cb_354,_mbed_die__async_cb_353,_mbed_die__async_cb_352,_mbed_die__async_cb_351
,_mbed_die__async_cb_350,_mbed_die__async_cb_349,_mbed_die__async_cb_348,_mbed_die__async_cb_347,_mbed_die__async_cb_346,_mbed_die__async_cb_345,_mbed_die__async_cb_344,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_338,_mbed_error_vfprintf__async_cb_337,_handle_interrupt_in__async_cb,_serial_putc__async_cb_239,_serial_putc__async_cb,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_229,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_233,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_242,_invoke_ticker__async_cb,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,_main__async_cb,_putc__async_cb_232,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_387,_fflush__async_cb_386
,_fflush__async_cb_388,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_391,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_fputc__async_cb_287,_fputc__async_cb,_puts__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_395,_abort_message__async_cb,_abort_message__async_cb_194,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_16,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_207,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_201,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_396,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_384,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_383,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_382,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_381
,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_379,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79
,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109
,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139
,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169
,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199
,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221,b222,b223,b224,b225,b226,b227,b228,b229
,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252,b253,b254,b255,b256,b257,b258,b259
,b260,b261,b262,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272,b273,b274,b275,b276,b277,b278,b279,b280,b281,b282,b283,b284,b285,b286,b287,b288,b289
,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302,b303,b304,b305,b306,b307,b308,b309,b310,b311,b312,b313,b314,b315,b316,b317,b318,b319
,b320,b321,b322,b323,b324,b325,b326,b327,b328,b329,b330,b331,b332,b333,b334,b335,b336,b337,b338,b339,b340,b341,b342,b343,b344,b345,b346,b347,b348,b349
,b350,b351,b352,b353,b354,b355,b356,b357,b358,b359,b360,b361,b362,b363,b364,b365,b366,b367,b368,b369,b370,b371,b372,b373,b374,b375,b376,b377,b378,b379
,b380,b381,b382,b383,b384];
var FUNCTION_TABLE_vii = [b386,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv,__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb,__ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack25process_reception_timeoutEb,b387,b388,b389];
var FUNCTION_TABLE_viii = [b391,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY13apply_cf_listEPKhh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b392,b393];
var FUNCTION_TABLE_viiii = [b395,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZN7LoRaPHY16set_last_tx_doneEhbj,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b396,b397];
var FUNCTION_TABLE_viiiii = [b399,__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa,__ZN12LoRaWANStack17process_receptionEPKhtsa];
var FUNCTION_TABLE_viiiiii = [b401,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b403,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b405,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan-abp.js.map