// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function() { return Date.now(); },
 function() { return Math.random() * 0x8000000 | 0; },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0) { window.MbedJSHal.lora.init($0); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1) { window.MbedJSHal.timers.ticker_setup($0, $1); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 24544;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan-abp.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 

  function _sleep_manager_lock_deep_sleep_internal() {
  Module['printErr']('missing function: sleep_manager_lock_deep_sleep_internal'); abort(-1);
  }

  function _sleep_manager_unlock_deep_sleep_internal() {
  Module['printErr']('missing function: sleep_manager_unlock_deep_sleep_internal'); abort(-1);
  }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "__ZN16LoRaWANInterface14cancel_sendingEv", "___stdio_close", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN16LoRaWANInterface16set_device_classE14device_class_t", "__ZN16LoRaWANInterface15get_tx_metadataER19lorawan_tx_metadata", "__ZN16LoRaWANInterface15get_rx_metadataER19lorawan_rx_metadata", "__ZN16LoRaWANInterface20get_backoff_metadataERi", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t", "__ZN7LoRaPHY25accept_tx_param_setup_reqEhh", "__ZN7LoRaPHY18dl_channel_requestEhj", "__ZN7LoRaPHY11add_channelEPK16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "__ZNK7LoRaPHY25verify_frequency_for_bandEjh", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "_memset", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN16LoRaWANInterface7receiveEPhtRhRi", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_iiiiiiii = ["0", "_aes_crypt_ctr_wrap"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "_mbed_trace_default_print", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv", "__ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_17", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_18", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_19", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_20", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_21", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_125", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_121", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_122", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_124", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_123", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_120", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_7", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_238", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_232", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_237", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_233", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_236", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_234", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_235", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_244", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_243", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_242", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_241", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_240", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_239", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_357", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_358", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_359", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb", "__ZN16SX1276_LoRaRadio11tx_done_irqEv", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_317", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_318", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_319", "__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_16", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_15", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_14", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_9", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_3", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_163", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_107", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_108", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed7Timeout7handlerEv__async_cb_91", "__ZN4mbed7Timeout7handlerEv__async_cb_89", "__ZN4mbed7Timeout7handlerEv__async_cb_90", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_alloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_376", "_mbed_vtracef__async_cb_366", "_mbed_vtracef__async_cb_367", "_mbed_vtracef__async_cb_368", "_mbed_vtracef__async_cb_375", "_mbed_vtracef__async_cb_369", "_mbed_vtracef__async_cb_374", "_mbed_vtracef__async_cb_370", "_mbed_vtracef__async_cb_371", "_mbed_vtracef__async_cb_372", "_mbed_vtracef__async_cb_373", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb", "__ZN16LoRaWANInterface10disconnectEv__async_cb", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb", "__ZN16LoRaWANInterface19remove_channel_planEv__async_cb", "__ZN16LoRaWANInterface14remove_channelEh__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterface7receiveEhPhti__async_cb", "__ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb", "__ZN16LoRaWANInterface14cancel_sendingEv__async_cb", "__ZN16LoRaWANInterfaceD2Ev__async_cb", "__ZN16LoRaWANInterfaceD0Ev__async_cb", "__ZN12LoRaWANStackD2Ev__async_cb", "__ZN12LoRaWANStackD2Ev__async_cb_23", "__ZN12LoRaWANStackD2Ev__async_cb_24", "__ZN12LoRaWANStackD2Ev__async_cb_26", "__ZN12LoRaWANStackD2Ev__async_cb_25", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_62", "__ZN12radio_eventsD2Ev__async_cb_63", "__ZN12radio_eventsD2Ev__async_cb_64", "__ZN12radio_eventsD2Ev__async_cb_65", "__ZN12radio_eventsD2Ev__async_cb_66", "__ZN12radio_eventsD2Ev__async_cb_67", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20tx_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_320", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_321", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_322", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_323", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_324", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_325", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_326", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_327", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_328", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_329", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_330", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_331", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_332", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_333", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_334", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_335", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_336", "__ZN12LoRaWANStack20process_transmissionEv", "__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_302", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_352", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_353", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_344", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_345", "__ZN12LoRaWANStack28process_transmission_timeoutEv", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_365", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_355", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_356", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_392", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_391", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_378", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_383", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_379", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_382", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_380", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_381", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_182", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_299", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_298", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_300", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_297", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_301", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_288", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_287", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_116", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_109", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_119", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_110", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_115", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_111", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_118", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_112", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_114", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_113", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_117", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_140", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_133", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_143", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_134", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_139", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_135", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_142", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_136", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_138", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_137", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_141", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_79", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_84", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_80", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_83", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_81", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_82", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_160", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb", "__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_166", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_149", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_148", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_147", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_10", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_57", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_61", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_60", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_59", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_58", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_56", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_28", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_33", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_29", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_32", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_30", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_31", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_354", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_312", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_308", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_316", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_311", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_309", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_313", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_310", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_315", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_314", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_340", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_339", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_341", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_384", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_389", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_385", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_388", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_386", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_387", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_394", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_393", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_395", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_377", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb", "__ZN12LoRaWANStack20process_transmissionEv__async_cb", "__ZN12LoRaWANStack20process_transmissionEv__async_cb_186", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_290", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_289", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_229", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_228", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_230", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_227", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_231", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_249", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_250", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_251", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_252", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_253", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_254", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_256", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_255", "__ZN12LoRaWANStack7connectEv__async_cb", "__ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack12stop_sendingEv__async_cb", "__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_4", "__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb", "__ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv", "__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb_43", "__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb", "__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv__async_cb", "__ZN7LoRaMacD2Ev__async_cb", "__ZN7LoRaMacD2Ev__async_cb_396", "__ZN7LoRaMacD2Ev__async_cb_397", "__ZN7LoRaMacD2Ev__async_cb_398", "__ZN7LoRaMacD2Ev__async_cb_399", "__ZN7LoRaMacD2Ev__async_cb_400", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_260", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_262", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_259", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_261", "__ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_150", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_152", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_151", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_154", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_157", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_155", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_156", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_162", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_161", "__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_177", "__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_178", "__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_176", "__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_175", "__ZN7LoRaMac16on_radio_tx_doneEj__async_cb", "__ZN7LoRaMac15open_rx2_windowEv__async_cb_88", "__ZN7LoRaMac15open_rx2_windowEv__async_cb_87", "__ZN7LoRaMac15open_rx2_windowEv__async_cb", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_103", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_105", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_104", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_102", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_129", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_128", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_127", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_126", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_144", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_145", "__ZN7LoRaMac24continue_joining_processEv__async_cb", "__ZN7LoRaMac21handle_retransmissionEv__async_cb", "__ZN7LoRaMac21handle_retransmissionEv__async_cb_36", "__ZN7LoRaMac21handle_retransmissionEv__async_cb_35", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_51", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_49", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_50", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_48", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_77", "__ZN7LoRaMac11schedule_txEv__async_cb_76", "__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb", "__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_8", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_13", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_11", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_12", "__ZN7LoRaMac15open_rx1_windowEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_364", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_362", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_361", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_360", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_363", "__ZN7LoRaMac13clear_tx_pipeEv__async_cb_390", "__ZN7LoRaMac13clear_tx_pipeEv__async_cb", "__ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb", "__ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb", "__ZN7LoRaMac15send_ongoing_txEv__async_cb", "__ZN7LoRaMac15send_ongoing_txEv__async_cb_264", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_283", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_286", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_285", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_284", "__ZN7LoRaMac4joinEb__async_cb", "__ZN7LoRaMac4joinEb__async_cb_190", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_202", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_204", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_205", "__ZN7LoRaMac23on_backoff_timer_expiryEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_201", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb", "__ZN7LoRaMac15open_rx1_windowEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_200", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_195", "__ZN7LoRaMac15open_rx2_windowEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_199", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_196", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_198", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_197", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_203", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac10disconnectEv__async_cb_170", "__ZN7LoRaMac10disconnectEv__async_cb_169", "__ZN7LoRaMac10disconnectEv__async_cb_168", "__ZN7LoRaMac10disconnectEv__async_cb_167", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_1", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_2", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_292", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_293", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_294", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_295", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_296", "__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb", "__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_282", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_218", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_217", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_216", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_215", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_219", "__ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh__async_cb", "__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh__async_cb", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_173", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_172", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_171", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_174", "__ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh__async_cb", "__ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2___async_cb", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_85", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_86", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_46", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_47", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_68", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_69", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_70", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_71", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_72", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_73", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_74", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_75", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_37", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_38", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_39", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_40", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_41", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_42", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb_22", "__ZN7LoRaPHY18dl_channel_requestEhj__async_cb", "__ZN7LoRaPHY18dl_channel_requestEhj__async_cb_5", "__ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_350", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_351", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_193", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_194", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_213", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_214", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_183", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_184", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_187", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_188", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_189", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_164", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_165", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_158", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_159", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_343", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_306", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_303", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_305", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_304", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_307", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_aes_free__async_cb", "_mbedtls_aes_setkey_dec__async_cb", "_mbedtls_ccm_setkey__async_cb_192", "_mbedtls_ccm_setkey__async_cb_191", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb_206", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb_281", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_free__async_cb_280", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_342", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_349", "_mbedtls_cipher_update__async_cb_346", "_mbedtls_cipher_update__async_cb_347", "_mbedtls_cipher_update__async_cb_348", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_aes_setkey_dec_wrap__async_cb", "_aes_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb_44", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_55", "_mbedtls_cipher_cmac_update__async_cb_54", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_98", "_mbedtls_cipher_cmac_finish__async_cb_97", "_mbedtls_cipher_cmac_finish__async_cb_96", "_mbedtls_cipher_cmac_finish__async_cb_100", "_mbedtls_cipher_cmac_finish__async_cb_95", "_mbedtls_cipher_cmac_finish__async_cb_99", "_mbedtls_cipher_cmac_finish__async_cb_94", "_mbedtls_cipher_cmac_finish__async_cb_93", "_mbedtls_cipher_cmac_finish__async_cb_92", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_132", "_mbedtls_gcm_setkey__async_cb_131", "_mbedtls_gcm_setkey__async_cb_130", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb_146", "_mbedtls_gcm_free__async_cb", "_mbedtls_platform_zeroize__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_207", "_initialize__async_cb_212", "_initialize__async_cb_211", "_initialize__async_cb_208", "_initialize__async_cb_209", "_initialize__async_cb_210", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_220", "_schedule_interrupt__async_cb_221", "_schedule_interrupt__async_cb_222", "_schedule_interrupt__async_cb_223", "_schedule_interrupt__async_cb_224", "_schedule_interrupt__async_cb_225", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_263", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_279", "_mbed_die__async_cb_278", "_mbed_die__async_cb_277", "_mbed_die__async_cb_276", "_mbed_die__async_cb_275", "_mbed_die__async_cb_274", "_mbed_die__async_cb_273", "_mbed_die__async_cb_272", "_mbed_die__async_cb_271", "_mbed_die__async_cb_270", "_mbed_die__async_cb_269", "_mbed_die__async_cb_268", "_mbed_die__async_cb_267", "_mbed_die__async_cb_266", "_mbed_die__async_cb_265", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_338", "_mbed_error_vfprintf__async_cb_337", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_6", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_78", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_45", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_106", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "_main__async_cb", "_putc__async_cb_34", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_180", "_fflush__async_cb_179", "_fflush__async_cb_181", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_185", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_fputc__async_cb_153", "_fputc__async_cb", "_puts__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_258", "_abort_message__async_cb", "_abort_message__async_cb_53", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_226", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_27", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_52", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_257", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_248", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_247", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_246", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_245", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_291", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv", "__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb", "__ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack25process_reception_timeoutEb", "0", "0", "0"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY13apply_cf_listEPKhh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZN7LoRaPHY16set_last_tx_doneEhbj", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa", "__ZN12LoRaWANStack17process_receptionEPKhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_sleep_manager_lock_deep_sleep_internal": _sleep_manager_lock_deep_sleep_internal, "_sleep_manager_unlock_deep_sleep_internal": _sleep_manager_unlock_deep_sleep_internal, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var _sleep_manager_lock_deep_sleep_internal=env._sleep_manager_lock_deep_sleep_internal;
  var _sleep_manager_unlock_deep_sleep_internal=env._sleep_manager_unlock_deep_sleep_internal;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$0107$be = 0, $$0109129 = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $121 = 0, $132 = 0, $133 = 0, $14 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $211 = 0, $214 = 0, $219 = 0, $22 = 0, $220 = 0, $226 = 0, $230 = 0, $233 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $337 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $403 = 0, $404 = 0, $418 = 0, $42 = 0, $439 = 0, $44 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $507 = 0, $511 = 0, $515 = 0, $52 = 0, $520 = 0, $521 = 0, $525 = 0, $529 = 0, $531 = 0, $533 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $604 = 0, $617 = 0, $62 = 0, $624 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $689 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10289
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 10291
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10293
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 10295
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 10297
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 10299
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 10301
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 10303
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 10305
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 10307
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 10309
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 10311
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 10313
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 10315
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 10317
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 10319
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 10321
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 10323
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 10325
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 10327
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 10329
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 10331
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 10333
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 10335
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 10337
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 10339
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 10341
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 10343
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 10345
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 10347
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 10349
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 10351
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 10353
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 10355
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 10357
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 10359
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 10361
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 10363
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 10365
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 10367
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 10369
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 10371
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 10373
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 10375
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 10377
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 10379
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 10381
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 10383
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 10385
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 10387
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 10389
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 10391
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 10393
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 10395
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 10397
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 10399
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 10401
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 10403
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 10405
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 10407
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 10409
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$96 >> 0] = HEAP8[$56 >> 0] | 0; //@line 10414
  HEAP8[$106 >> 0] = HEAP8[$88 >> 0] | 0; //@line 10416
  HEAP8[$108 >> 0] = HEAP8[$92 >> 0] | 0; //@line 10418
 }
 $211 = HEAP8[$66 >> 0] | 0; //@line 10420
 if (($211 & 255) > 4) {
  $div = ($211 & 255) / 5 | 0; //@line 10423
  $214 = 128 - (HEAPU8[$12 >> 0] | 0) | 0; //@line 10427
  $$0109129 = 0; //@line 10428
  $220 = HEAP8[$24 >> 0] | 0; //@line 10428
  while (1) {
   $219 = $220 & 255; //@line 10430
   if (($214 - $219 | 0) > 1) {
    $226 = $220 + 2 << 24 >> 24; //@line 10437
    HEAP8[$10 + 4 + $219 >> 0] = 3; //@line 10439
    HEAP8[$24 >> 0] = $226; //@line 10440
    HEAP8[($220 + 1 & 255) + ($10 + 4) >> 0] = $AsyncRetVal; //@line 10441
    HEAP8[$42 >> 0] = 1; //@line 10442
    $$0$i = 0; //@line 10443
    $689 = $226; //@line 10443
   } else {
    $$0$i = -1010; //@line 10445
    $689 = $220; //@line 10445
   }
   $$0109129 = $$0109129 + 1 << 24 >> 24; //@line 10447
   if (($$0109129 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 10452
    break;
   } else {
    $220 = $689; //@line 10450
   }
  }
 } else {
  $$1$lcssa = $32; //@line 10457
 }
 $$0$be = $44 + 255 + ($211 & 255) & 255; //@line 10463
 $$0107$be = $$1$lcssa; //@line 10463
 L13 : while (1) {
  if (($$0$be & 255) >= ($8 & 255)) {
   label = 38; //@line 10467
   break;
  }
  $121 = $$0$be + 1 << 24 >> 24; //@line 10471
  switch (HEAP8[$14 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 10476
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 10481
    break L13;
    break;
   }
  case 7:
   {
    label = 26; //@line 10486
    break L13;
    break;
   }
  case 9:
   {
    label = 32; //@line 10491
    break L13;
    break;
   }
  case 10:
   {
    label = 35; //@line 10496
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$116 >> 2] = 0; //@line 10501
    HEAP8[$4 >> 0] = HEAP8[$14 + ($121 & 255) >> 0] | 0; //@line 10506
    HEAP8[$30 >> 0] = HEAP8[$14 + ($$0$be + 2 & 255) >> 0] | 0; //@line 10511
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 10512
    continue L13;
    break;
   }
  case 4:
   {
    $230 = $$0$be + 2 << 24 >> 24; //@line 10517
    $233 = HEAP8[$14 + ($121 & 255) >> 0] | 0; //@line 10520
    HEAP8[$38 >> 0] = $233; //@line 10521
    HEAP16[$54 >> 1] = 1 << ($233 & 255); //@line 10525
    $240 = HEAP8[$24 >> 0] | 0; //@line 10529
    $241 = $240 & 255; //@line 10530
    if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) <= ($241 | 0)) {
     $$0$be = $230; //@line 10533
     $$0107$be = -1010; //@line 10533
     continue L13;
    }
    HEAP8[$24 >> 0] = $240 + 1 << 24 >> 24; //@line 10538
    HEAP8[$10 + 4 + $241 >> 0] = 4; //@line 10539
    HEAP8[$42 >> 0] = 1; //@line 10540
    $$0$be = $230; //@line 10541
    $$0107$be = 0; //@line 10541
    continue L13;
    break;
   }
  case 6:
   {
    $337 = HEAP32[$16 >> 2] | 0; //@line 10546
    if ($337 | 0) {
     label = 21; //@line 10549
     break L13;
    }
    $403 = HEAP8[$24 >> 0] | 0; //@line 10555
    $404 = $403 & 255; //@line 10556
    if ((128 - (HEAPU8[$12 >> 0] | 0) - $404 | 0) <= 2) {
     $$0$be = $121; //@line 10560
     $$0107$be = -1010; //@line 10560
     continue L13;
    }
    HEAP8[$10 + 4 + $404 >> 0] = 6; //@line 10565
    HEAP8[($403 + 1 & 255) + ($10 + 4) >> 0] = -1; //@line 10569
    HEAP8[$24 >> 0] = $403 + 3 << 24 >> 24; //@line 10571
    HEAP8[($403 + 2 & 255) + ($10 + 4) >> 0] = $2; //@line 10574
    HEAP8[$42 >> 0] = 1; //@line 10575
    $$0$be = $121; //@line 10576
    $$0107$be = 0; //@line 10576
    continue L13;
    break;
   }
  case 8:
   {
    $507 = $$0$be + 2 << 24 >> 24; //@line 10581
    $511 = HEAP8[$14 + ($121 & 255) >> 0] & 15; //@line 10585
    $515 = ($511 + ($511 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 10590
    HEAP32[$94 >> 2] = $515; //@line 10591
    HEAP32[$68 >> 2] = $515 + 1e3; //@line 10593
    $520 = HEAP8[$24 >> 0] | 0; //@line 10597
    $521 = $520 & 255; //@line 10598
    if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) <= ($521 | 0)) {
     $$0$be = $507; //@line 10601
     $$0107$be = -1010; //@line 10601
     continue L13;
    }
    HEAP8[$24 >> 0] = $520 + 1 << 24 >> 24; //@line 10606
    HEAP8[$10 + 4 + $521 >> 0] = 8; //@line 10607
    HEAP8[$112 >> 0] = 1; //@line 10608
    HEAP8[$42 >> 0] = 1; //@line 10609
    $$0$be = $507; //@line 10610
    $$0107$be = 0; //@line 10610
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $121; //@line 10615
    $$0107$be = -1013; //@line 10615
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$56 >> 0] = 0; //@line 10621
  HEAP8[$88 >> 0] = 0; //@line 10622
  HEAP8[$92 >> 0] = 0; //@line 10623
  HEAP8[$66 >> 0] = 0; //@line 10624
  $132 = $121 & 255; //@line 10625
  $133 = $132 + -1 | 0; //@line 10626
  HEAP32[$34 >> 2] = $14 + $133; //@line 10628
  HEAP8[$36 >> 0] = $102 - $133; //@line 10631
  HEAP8[$60 >> 0] = HEAP8[$52 >> 0] | 0; //@line 10633
  HEAP8[$72 >> 0] = HEAP8[$76 >> 0] | 0; //@line 10635
  HEAP8[$86 >> 0] = HEAP8[$96 >> 0] | 0; //@line 10637
  HEAP8[$104 >> 0] = HEAP8[$106 >> 0] | 0; //@line 10639
  HEAP8[$18 >> 0] = HEAP8[$108 >> 0] | 0; //@line 10641
  $144 = HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] | 0; //@line 10644
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 10645
  $145 = FUNCTION_TABLE_iiiiiii[$144 & 3]($28, $50, $56, $88, $92, $66) | 0; //@line 10646
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 473; //@line 10649
   $146 = $ReallocAsyncCtx + 4 | 0; //@line 10650
   HEAP8[$146 >> 0] = $2; //@line 10651
   $147 = $ReallocAsyncCtx + 8 | 0; //@line 10652
   HEAP32[$147 >> 2] = $4; //@line 10653
   $148 = $ReallocAsyncCtx + 12 | 0; //@line 10654
   HEAP8[$148 >> 0] = $6; //@line 10655
   $149 = $ReallocAsyncCtx + 13 | 0; //@line 10656
   HEAP8[$149 >> 0] = $8; //@line 10657
   $150 = $ReallocAsyncCtx + 16 | 0; //@line 10658
   HEAP32[$150 >> 2] = $10; //@line 10659
   $151 = $ReallocAsyncCtx + 20 | 0; //@line 10660
   HEAP32[$151 >> 2] = $12; //@line 10661
   $152 = $ReallocAsyncCtx + 24 | 0; //@line 10662
   HEAP32[$152 >> 2] = $14; //@line 10663
   $153 = $ReallocAsyncCtx + 28 | 0; //@line 10664
   HEAP32[$153 >> 2] = $16; //@line 10665
   $154 = $ReallocAsyncCtx + 32 | 0; //@line 10666
   HEAP32[$154 >> 2] = $18; //@line 10667
   $155 = $ReallocAsyncCtx + 36 | 0; //@line 10668
   HEAP32[$155 >> 2] = $20; //@line 10669
   $156 = $ReallocAsyncCtx + 40 | 0; //@line 10670
   HEAP32[$156 >> 2] = $22; //@line 10671
   $157 = $ReallocAsyncCtx + 44 | 0; //@line 10672
   HEAP32[$157 >> 2] = $24; //@line 10673
   $158 = $ReallocAsyncCtx + 48 | 0; //@line 10674
   HEAP32[$158 >> 2] = $26; //@line 10675
   $159 = $ReallocAsyncCtx + 52 | 0; //@line 10676
   HEAP32[$159 >> 2] = $28; //@line 10677
   $160 = $ReallocAsyncCtx + 56 | 0; //@line 10678
   HEAP32[$160 >> 2] = $30; //@line 10679
   $161 = $ReallocAsyncCtx + 60 | 0; //@line 10680
   HEAP32[$161 >> 2] = $$0107$be; //@line 10681
   $162 = $ReallocAsyncCtx + 64 | 0; //@line 10682
   HEAP32[$162 >> 2] = $34; //@line 10683
   $163 = $ReallocAsyncCtx + 68 | 0; //@line 10684
   HEAP32[$163 >> 2] = $36; //@line 10685
   $164 = $ReallocAsyncCtx + 72 | 0; //@line 10686
   HEAP32[$164 >> 2] = $38; //@line 10687
   $165 = $ReallocAsyncCtx + 76 | 0; //@line 10688
   HEAP32[$165 >> 2] = $40; //@line 10689
   $166 = $ReallocAsyncCtx + 80 | 0; //@line 10690
   HEAP32[$166 >> 2] = $42; //@line 10691
   $167 = $ReallocAsyncCtx + 84 | 0; //@line 10692
   HEAP32[$167 >> 2] = $132; //@line 10693
   $168 = $ReallocAsyncCtx + 88 | 0; //@line 10694
   HEAP32[$168 >> 2] = $46; //@line 10695
   $169 = $ReallocAsyncCtx + 92 | 0; //@line 10696
   HEAP32[$169 >> 2] = $48; //@line 10697
   $170 = $ReallocAsyncCtx + 96 | 0; //@line 10698
   HEAP32[$170 >> 2] = $50; //@line 10699
   $171 = $ReallocAsyncCtx + 100 | 0; //@line 10700
   HEAP32[$171 >> 2] = $52; //@line 10701
   $172 = $ReallocAsyncCtx + 104 | 0; //@line 10702
   HEAP32[$172 >> 2] = $54; //@line 10703
   $173 = $ReallocAsyncCtx + 108 | 0; //@line 10704
   HEAP32[$173 >> 2] = $56; //@line 10705
   $174 = $ReallocAsyncCtx + 112 | 0; //@line 10706
   HEAP32[$174 >> 2] = $58; //@line 10707
   $175 = $ReallocAsyncCtx + 116 | 0; //@line 10708
   HEAP32[$175 >> 2] = $60; //@line 10709
   $176 = $ReallocAsyncCtx + 120 | 0; //@line 10710
   HEAP32[$176 >> 2] = $62; //@line 10711
   $177 = $ReallocAsyncCtx + 124 | 0; //@line 10712
   HEAP32[$177 >> 2] = $64; //@line 10713
   $178 = $ReallocAsyncCtx + 128 | 0; //@line 10714
   HEAP32[$178 >> 2] = $66; //@line 10715
   $179 = $ReallocAsyncCtx + 132 | 0; //@line 10716
   HEAP32[$179 >> 2] = $68; //@line 10717
   $180 = $ReallocAsyncCtx + 136 | 0; //@line 10718
   HEAP32[$180 >> 2] = $70; //@line 10719
   $181 = $ReallocAsyncCtx + 140 | 0; //@line 10720
   HEAP32[$181 >> 2] = $72; //@line 10721
   $182 = $ReallocAsyncCtx + 144 | 0; //@line 10722
   HEAP32[$182 >> 2] = $74; //@line 10723
   $183 = $ReallocAsyncCtx + 148 | 0; //@line 10724
   HEAP32[$183 >> 2] = $76; //@line 10725
   $184 = $ReallocAsyncCtx + 152 | 0; //@line 10726
   HEAP32[$184 >> 2] = $78; //@line 10727
   $185 = $ReallocAsyncCtx + 156 | 0; //@line 10728
   HEAP32[$185 >> 2] = $80; //@line 10729
   $186 = $ReallocAsyncCtx + 160 | 0; //@line 10730
   HEAP32[$186 >> 2] = $82; //@line 10731
   $187 = $ReallocAsyncCtx + 164 | 0; //@line 10732
   HEAP32[$187 >> 2] = $84; //@line 10733
   $188 = $ReallocAsyncCtx + 168 | 0; //@line 10734
   HEAP32[$188 >> 2] = $86; //@line 10735
   $189 = $ReallocAsyncCtx + 172 | 0; //@line 10736
   HEAP32[$189 >> 2] = $88; //@line 10737
   $190 = $ReallocAsyncCtx + 176 | 0; //@line 10738
   HEAP32[$190 >> 2] = $90; //@line 10739
   $191 = $ReallocAsyncCtx + 180 | 0; //@line 10740
   HEAP32[$191 >> 2] = $92; //@line 10741
   $192 = $ReallocAsyncCtx + 184 | 0; //@line 10742
   HEAP32[$192 >> 2] = $94; //@line 10743
   $193 = $ReallocAsyncCtx + 188 | 0; //@line 10744
   HEAP32[$193 >> 2] = $96; //@line 10745
   $194 = $ReallocAsyncCtx + 192 | 0; //@line 10746
   HEAP32[$194 >> 2] = $98; //@line 10747
   $195 = $ReallocAsyncCtx + 196 | 0; //@line 10748
   HEAP32[$195 >> 2] = $100; //@line 10749
   $196 = $ReallocAsyncCtx + 200 | 0; //@line 10750
   HEAP32[$196 >> 2] = $102; //@line 10751
   $197 = $ReallocAsyncCtx + 204 | 0; //@line 10752
   HEAP32[$197 >> 2] = $104; //@line 10753
   $198 = $ReallocAsyncCtx + 208 | 0; //@line 10754
   HEAP32[$198 >> 2] = $106; //@line 10755
   $199 = $ReallocAsyncCtx + 212 | 0; //@line 10756
   HEAP32[$199 >> 2] = $108; //@line 10757
   $200 = $ReallocAsyncCtx + 216 | 0; //@line 10758
   HEAP32[$200 >> 2] = $110; //@line 10759
   $201 = $ReallocAsyncCtx + 220 | 0; //@line 10760
   HEAP32[$201 >> 2] = $112; //@line 10761
   $202 = $ReallocAsyncCtx + 224 | 0; //@line 10762
   HEAP32[$202 >> 2] = $114; //@line 10763
   $203 = $ReallocAsyncCtx + 228 | 0; //@line 10764
   HEAP32[$203 >> 2] = $116; //@line 10765
   $204 = $ReallocAsyncCtx + 232 | 0; //@line 10766
   HEAP32[$204 >> 2] = $118; //@line 10767
   sp = STACKTOP; //@line 10768
   return;
  }
  HEAP8[___async_retval >> 0] = $145; //@line 10772
  ___async_unwind = 0; //@line 10773
  HEAP32[$ReallocAsyncCtx >> 2] = 473; //@line 10774
  $146 = $ReallocAsyncCtx + 4 | 0; //@line 10775
  HEAP8[$146 >> 0] = $2; //@line 10776
  $147 = $ReallocAsyncCtx + 8 | 0; //@line 10777
  HEAP32[$147 >> 2] = $4; //@line 10778
  $148 = $ReallocAsyncCtx + 12 | 0; //@line 10779
  HEAP8[$148 >> 0] = $6; //@line 10780
  $149 = $ReallocAsyncCtx + 13 | 0; //@line 10781
  HEAP8[$149 >> 0] = $8; //@line 10782
  $150 = $ReallocAsyncCtx + 16 | 0; //@line 10783
  HEAP32[$150 >> 2] = $10; //@line 10784
  $151 = $ReallocAsyncCtx + 20 | 0; //@line 10785
  HEAP32[$151 >> 2] = $12; //@line 10786
  $152 = $ReallocAsyncCtx + 24 | 0; //@line 10787
  HEAP32[$152 >> 2] = $14; //@line 10788
  $153 = $ReallocAsyncCtx + 28 | 0; //@line 10789
  HEAP32[$153 >> 2] = $16; //@line 10790
  $154 = $ReallocAsyncCtx + 32 | 0; //@line 10791
  HEAP32[$154 >> 2] = $18; //@line 10792
  $155 = $ReallocAsyncCtx + 36 | 0; //@line 10793
  HEAP32[$155 >> 2] = $20; //@line 10794
  $156 = $ReallocAsyncCtx + 40 | 0; //@line 10795
  HEAP32[$156 >> 2] = $22; //@line 10796
  $157 = $ReallocAsyncCtx + 44 | 0; //@line 10797
  HEAP32[$157 >> 2] = $24; //@line 10798
  $158 = $ReallocAsyncCtx + 48 | 0; //@line 10799
  HEAP32[$158 >> 2] = $26; //@line 10800
  $159 = $ReallocAsyncCtx + 52 | 0; //@line 10801
  HEAP32[$159 >> 2] = $28; //@line 10802
  $160 = $ReallocAsyncCtx + 56 | 0; //@line 10803
  HEAP32[$160 >> 2] = $30; //@line 10804
  $161 = $ReallocAsyncCtx + 60 | 0; //@line 10805
  HEAP32[$161 >> 2] = $$0107$be; //@line 10806
  $162 = $ReallocAsyncCtx + 64 | 0; //@line 10807
  HEAP32[$162 >> 2] = $34; //@line 10808
  $163 = $ReallocAsyncCtx + 68 | 0; //@line 10809
  HEAP32[$163 >> 2] = $36; //@line 10810
  $164 = $ReallocAsyncCtx + 72 | 0; //@line 10811
  HEAP32[$164 >> 2] = $38; //@line 10812
  $165 = $ReallocAsyncCtx + 76 | 0; //@line 10813
  HEAP32[$165 >> 2] = $40; //@line 10814
  $166 = $ReallocAsyncCtx + 80 | 0; //@line 10815
  HEAP32[$166 >> 2] = $42; //@line 10816
  $167 = $ReallocAsyncCtx + 84 | 0; //@line 10817
  HEAP32[$167 >> 2] = $132; //@line 10818
  $168 = $ReallocAsyncCtx + 88 | 0; //@line 10819
  HEAP32[$168 >> 2] = $46; //@line 10820
  $169 = $ReallocAsyncCtx + 92 | 0; //@line 10821
  HEAP32[$169 >> 2] = $48; //@line 10822
  $170 = $ReallocAsyncCtx + 96 | 0; //@line 10823
  HEAP32[$170 >> 2] = $50; //@line 10824
  $171 = $ReallocAsyncCtx + 100 | 0; //@line 10825
  HEAP32[$171 >> 2] = $52; //@line 10826
  $172 = $ReallocAsyncCtx + 104 | 0; //@line 10827
  HEAP32[$172 >> 2] = $54; //@line 10828
  $173 = $ReallocAsyncCtx + 108 | 0; //@line 10829
  HEAP32[$173 >> 2] = $56; //@line 10830
  $174 = $ReallocAsyncCtx + 112 | 0; //@line 10831
  HEAP32[$174 >> 2] = $58; //@line 10832
  $175 = $ReallocAsyncCtx + 116 | 0; //@line 10833
  HEAP32[$175 >> 2] = $60; //@line 10834
  $176 = $ReallocAsyncCtx + 120 | 0; //@line 10835
  HEAP32[$176 >> 2] = $62; //@line 10836
  $177 = $ReallocAsyncCtx + 124 | 0; //@line 10837
  HEAP32[$177 >> 2] = $64; //@line 10838
  $178 = $ReallocAsyncCtx + 128 | 0; //@line 10839
  HEAP32[$178 >> 2] = $66; //@line 10840
  $179 = $ReallocAsyncCtx + 132 | 0; //@line 10841
  HEAP32[$179 >> 2] = $68; //@line 10842
  $180 = $ReallocAsyncCtx + 136 | 0; //@line 10843
  HEAP32[$180 >> 2] = $70; //@line 10844
  $181 = $ReallocAsyncCtx + 140 | 0; //@line 10845
  HEAP32[$181 >> 2] = $72; //@line 10846
  $182 = $ReallocAsyncCtx + 144 | 0; //@line 10847
  HEAP32[$182 >> 2] = $74; //@line 10848
  $183 = $ReallocAsyncCtx + 148 | 0; //@line 10849
  HEAP32[$183 >> 2] = $76; //@line 10850
  $184 = $ReallocAsyncCtx + 152 | 0; //@line 10851
  HEAP32[$184 >> 2] = $78; //@line 10852
  $185 = $ReallocAsyncCtx + 156 | 0; //@line 10853
  HEAP32[$185 >> 2] = $80; //@line 10854
  $186 = $ReallocAsyncCtx + 160 | 0; //@line 10855
  HEAP32[$186 >> 2] = $82; //@line 10856
  $187 = $ReallocAsyncCtx + 164 | 0; //@line 10857
  HEAP32[$187 >> 2] = $84; //@line 10858
  $188 = $ReallocAsyncCtx + 168 | 0; //@line 10859
  HEAP32[$188 >> 2] = $86; //@line 10860
  $189 = $ReallocAsyncCtx + 172 | 0; //@line 10861
  HEAP32[$189 >> 2] = $88; //@line 10862
  $190 = $ReallocAsyncCtx + 176 | 0; //@line 10863
  HEAP32[$190 >> 2] = $90; //@line 10864
  $191 = $ReallocAsyncCtx + 180 | 0; //@line 10865
  HEAP32[$191 >> 2] = $92; //@line 10866
  $192 = $ReallocAsyncCtx + 184 | 0; //@line 10867
  HEAP32[$192 >> 2] = $94; //@line 10868
  $193 = $ReallocAsyncCtx + 188 | 0; //@line 10869
  HEAP32[$193 >> 2] = $96; //@line 10870
  $194 = $ReallocAsyncCtx + 192 | 0; //@line 10871
  HEAP32[$194 >> 2] = $98; //@line 10872
  $195 = $ReallocAsyncCtx + 196 | 0; //@line 10873
  HEAP32[$195 >> 2] = $100; //@line 10874
  $196 = $ReallocAsyncCtx + 200 | 0; //@line 10875
  HEAP32[$196 >> 2] = $102; //@line 10876
  $197 = $ReallocAsyncCtx + 204 | 0; //@line 10877
  HEAP32[$197 >> 2] = $104; //@line 10878
  $198 = $ReallocAsyncCtx + 208 | 0; //@line 10879
  HEAP32[$198 >> 2] = $106; //@line 10880
  $199 = $ReallocAsyncCtx + 212 | 0; //@line 10881
  HEAP32[$199 >> 2] = $108; //@line 10882
  $200 = $ReallocAsyncCtx + 216 | 0; //@line 10883
  HEAP32[$200 >> 2] = $110; //@line 10884
  $201 = $ReallocAsyncCtx + 220 | 0; //@line 10885
  HEAP32[$201 >> 2] = $112; //@line 10886
  $202 = $ReallocAsyncCtx + 224 | 0; //@line 10887
  HEAP32[$202 >> 2] = $114; //@line 10888
  $203 = $ReallocAsyncCtx + 228 | 0; //@line 10889
  HEAP32[$203 >> 2] = $116; //@line 10890
  $204 = $ReallocAsyncCtx + 232 | 0; //@line 10891
  HEAP32[$204 >> 2] = $118; //@line 10892
  sp = STACKTOP; //@line 10893
  return;
 } else if ((label | 0) == 17) {
  $247 = HEAP8[$14 + ($121 & 255) >> 0] | 0; //@line 10899
  HEAP8[$74 >> 0] = ($247 & 255) >>> 4 & 7; //@line 10904
  HEAP8[$62 >> 0] = $247 & 15; //@line 10906
  $266 = $$0$be + 5 << 24 >> 24; //@line 10920
  HEAP32[$64 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 10928
  $276 = HEAP32[(HEAP32[$90 >> 2] | 0) + 40 >> 2] | 0; //@line 10931
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 10932
  $277 = FUNCTION_TABLE_iii[$276 & 31]($28, $70) | 0; //@line 10933
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 10936
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 10937
   HEAP8[$278 >> 0] = $2; //@line 10938
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 10939
   HEAP32[$279 >> 2] = $4; //@line 10940
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 10941
   HEAP8[$280 >> 0] = $6; //@line 10942
   $281 = $ReallocAsyncCtx2 + 13 | 0; //@line 10943
   HEAP8[$281 >> 0] = $8; //@line 10944
   $282 = $ReallocAsyncCtx2 + 16 | 0; //@line 10945
   HEAP32[$282 >> 2] = $10; //@line 10946
   $283 = $ReallocAsyncCtx2 + 20 | 0; //@line 10947
   HEAP32[$283 >> 2] = $12; //@line 10948
   $284 = $ReallocAsyncCtx2 + 24 | 0; //@line 10949
   HEAP32[$284 >> 2] = $14; //@line 10950
   $285 = $ReallocAsyncCtx2 + 28 | 0; //@line 10951
   HEAP32[$285 >> 2] = $16; //@line 10952
   $286 = $ReallocAsyncCtx2 + 32 | 0; //@line 10953
   HEAP32[$286 >> 2] = $18; //@line 10954
   $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 10955
   HEAP32[$287 >> 2] = $20; //@line 10956
   $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 10957
   HEAP32[$288 >> 2] = $22; //@line 10958
   $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 10959
   HEAP32[$289 >> 2] = $24; //@line 10960
   $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 10961
   HEAP32[$290 >> 2] = $26; //@line 10962
   $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 10963
   HEAP32[$291 >> 2] = $28; //@line 10964
   $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 10965
   HEAP32[$292 >> 2] = $30; //@line 10966
   $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 10967
   HEAP32[$293 >> 2] = $34; //@line 10968
   $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 10969
   HEAP32[$294 >> 2] = $36; //@line 10970
   $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 10971
   HEAP32[$295 >> 2] = $38; //@line 10972
   $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 10973
   HEAP8[$296 >> 0] = $266; //@line 10974
   $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 10975
   HEAP32[$297 >> 2] = $40; //@line 10976
   $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 10977
   HEAP32[$298 >> 2] = $42; //@line 10978
   $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 10979
   HEAP32[$299 >> 2] = $46; //@line 10980
   $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 10981
   HEAP32[$300 >> 2] = $48; //@line 10982
   $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 10983
   HEAP32[$301 >> 2] = $50; //@line 10984
   $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 10985
   HEAP32[$302 >> 2] = $52; //@line 10986
   $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 10987
   HEAP32[$303 >> 2] = $54; //@line 10988
   $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 10989
   HEAP32[$304 >> 2] = $56; //@line 10990
   $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 10991
   HEAP32[$305 >> 2] = $58; //@line 10992
   $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 10993
   HEAP32[$306 >> 2] = $60; //@line 10994
   $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 10995
   HEAP32[$307 >> 2] = $62; //@line 10996
   $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 10997
   HEAP32[$308 >> 2] = $64; //@line 10998
   $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 10999
   HEAP32[$309 >> 2] = $66; //@line 11000
   $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 11001
   HEAP32[$310 >> 2] = $68; //@line 11002
   $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 11003
   HEAP32[$311 >> 2] = $70; //@line 11004
   $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 11005
   HEAP32[$312 >> 2] = $72; //@line 11006
   $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 11007
   HEAP32[$313 >> 2] = $74; //@line 11008
   $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 11009
   HEAP32[$314 >> 2] = $76; //@line 11010
   $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 11011
   HEAP32[$315 >> 2] = $78; //@line 11012
   $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 11013
   HEAP32[$316 >> 2] = $80; //@line 11014
   $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 11015
   HEAP32[$317 >> 2] = $82; //@line 11016
   $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 11017
   HEAP32[$318 >> 2] = $84; //@line 11018
   $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 11019
   HEAP32[$319 >> 2] = $86; //@line 11020
   $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 11021
   HEAP32[$320 >> 2] = $88; //@line 11022
   $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 11023
   HEAP32[$321 >> 2] = $90; //@line 11024
   $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 11025
   HEAP32[$322 >> 2] = $92; //@line 11026
   $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 11027
   HEAP32[$323 >> 2] = $94; //@line 11028
   $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 11029
   HEAP32[$324 >> 2] = $96; //@line 11030
   $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 11031
   HEAP32[$325 >> 2] = $98; //@line 11032
   $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 11033
   HEAP32[$326 >> 2] = $100; //@line 11034
   $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 11035
   HEAP32[$327 >> 2] = $102; //@line 11036
   $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 11037
   HEAP32[$328 >> 2] = $104; //@line 11038
   $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 11039
   HEAP32[$329 >> 2] = $106; //@line 11040
   $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 11041
   HEAP32[$330 >> 2] = $108; //@line 11042
   $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 11043
   HEAP32[$331 >> 2] = $110; //@line 11044
   $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 11045
   HEAP32[$332 >> 2] = $112; //@line 11046
   $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 11047
   HEAP32[$333 >> 2] = $114; //@line 11048
   $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 11049
   HEAP32[$334 >> 2] = $116; //@line 11050
   $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 11051
   HEAP32[$335 >> 2] = $118; //@line 11052
   sp = STACKTOP; //@line 11053
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 11057
  ___async_unwind = 0; //@line 11058
  HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 11059
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 11060
  HEAP8[$278 >> 0] = $2; //@line 11061
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 11062
  HEAP32[$279 >> 2] = $4; //@line 11063
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 11064
  HEAP8[$280 >> 0] = $6; //@line 11065
  $281 = $ReallocAsyncCtx2 + 13 | 0; //@line 11066
  HEAP8[$281 >> 0] = $8; //@line 11067
  $282 = $ReallocAsyncCtx2 + 16 | 0; //@line 11068
  HEAP32[$282 >> 2] = $10; //@line 11069
  $283 = $ReallocAsyncCtx2 + 20 | 0; //@line 11070
  HEAP32[$283 >> 2] = $12; //@line 11071
  $284 = $ReallocAsyncCtx2 + 24 | 0; //@line 11072
  HEAP32[$284 >> 2] = $14; //@line 11073
  $285 = $ReallocAsyncCtx2 + 28 | 0; //@line 11074
  HEAP32[$285 >> 2] = $16; //@line 11075
  $286 = $ReallocAsyncCtx2 + 32 | 0; //@line 11076
  HEAP32[$286 >> 2] = $18; //@line 11077
  $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 11078
  HEAP32[$287 >> 2] = $20; //@line 11079
  $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 11080
  HEAP32[$288 >> 2] = $22; //@line 11081
  $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 11082
  HEAP32[$289 >> 2] = $24; //@line 11083
  $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 11084
  HEAP32[$290 >> 2] = $26; //@line 11085
  $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 11086
  HEAP32[$291 >> 2] = $28; //@line 11087
  $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 11088
  HEAP32[$292 >> 2] = $30; //@line 11089
  $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 11090
  HEAP32[$293 >> 2] = $34; //@line 11091
  $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 11092
  HEAP32[$294 >> 2] = $36; //@line 11093
  $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 11094
  HEAP32[$295 >> 2] = $38; //@line 11095
  $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 11096
  HEAP8[$296 >> 0] = $266; //@line 11097
  $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 11098
  HEAP32[$297 >> 2] = $40; //@line 11099
  $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 11100
  HEAP32[$298 >> 2] = $42; //@line 11101
  $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 11102
  HEAP32[$299 >> 2] = $46; //@line 11103
  $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 11104
  HEAP32[$300 >> 2] = $48; //@line 11105
  $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 11106
  HEAP32[$301 >> 2] = $50; //@line 11107
  $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 11108
  HEAP32[$302 >> 2] = $52; //@line 11109
  $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 11110
  HEAP32[$303 >> 2] = $54; //@line 11111
  $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 11112
  HEAP32[$304 >> 2] = $56; //@line 11113
  $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 11114
  HEAP32[$305 >> 2] = $58; //@line 11115
  $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 11116
  HEAP32[$306 >> 2] = $60; //@line 11117
  $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 11118
  HEAP32[$307 >> 2] = $62; //@line 11119
  $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 11120
  HEAP32[$308 >> 2] = $64; //@line 11121
  $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 11122
  HEAP32[$309 >> 2] = $66; //@line 11123
  $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 11124
  HEAP32[$310 >> 2] = $68; //@line 11125
  $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 11126
  HEAP32[$311 >> 2] = $70; //@line 11127
  $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 11128
  HEAP32[$312 >> 2] = $72; //@line 11129
  $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 11130
  HEAP32[$313 >> 2] = $74; //@line 11131
  $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 11132
  HEAP32[$314 >> 2] = $76; //@line 11133
  $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 11134
  HEAP32[$315 >> 2] = $78; //@line 11135
  $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 11136
  HEAP32[$316 >> 2] = $80; //@line 11137
  $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 11138
  HEAP32[$317 >> 2] = $82; //@line 11139
  $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 11140
  HEAP32[$318 >> 2] = $84; //@line 11141
  $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 11142
  HEAP32[$319 >> 2] = $86; //@line 11143
  $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 11144
  HEAP32[$320 >> 2] = $88; //@line 11145
  $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 11146
  HEAP32[$321 >> 2] = $90; //@line 11147
  $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 11148
  HEAP32[$322 >> 2] = $92; //@line 11149
  $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 11150
  HEAP32[$323 >> 2] = $94; //@line 11151
  $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 11152
  HEAP32[$324 >> 2] = $96; //@line 11153
  $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 11154
  HEAP32[$325 >> 2] = $98; //@line 11155
  $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 11156
  HEAP32[$326 >> 2] = $100; //@line 11157
  $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 11158
  HEAP32[$327 >> 2] = $102; //@line 11159
  $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 11160
  HEAP32[$328 >> 2] = $104; //@line 11161
  $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 11162
  HEAP32[$329 >> 2] = $106; //@line 11163
  $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 11164
  HEAP32[$330 >> 2] = $108; //@line 11165
  $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 11166
  HEAP32[$331 >> 2] = $110; //@line 11167
  $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 11168
  HEAP32[$332 >> 2] = $112; //@line 11169
  $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 11170
  HEAP32[$333 >> 2] = $114; //@line 11171
  $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 11172
  HEAP32[$334 >> 2] = $116; //@line 11173
  $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 11174
  HEAP32[$335 >> 2] = $118; //@line 11175
  sp = STACKTOP; //@line 11176
  return;
 } else if ((label | 0) == 21) {
  $339 = HEAP32[$337 >> 2] | 0; //@line 11180
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 11181
  $340 = FUNCTION_TABLE_ii[$339 & 15]($26) | 0; //@line 11182
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 11185
   $341 = $ReallocAsyncCtx3 + 4 | 0; //@line 11186
   HEAP8[$341 >> 0] = $2; //@line 11187
   $342 = $ReallocAsyncCtx3 + 8 | 0; //@line 11188
   HEAP32[$342 >> 2] = $4; //@line 11189
   $343 = $ReallocAsyncCtx3 + 12 | 0; //@line 11190
   HEAP8[$343 >> 0] = $6; //@line 11191
   $344 = $ReallocAsyncCtx3 + 13 | 0; //@line 11192
   HEAP8[$344 >> 0] = $8; //@line 11193
   $345 = $ReallocAsyncCtx3 + 16 | 0; //@line 11194
   HEAP32[$345 >> 2] = $10; //@line 11195
   $346 = $ReallocAsyncCtx3 + 20 | 0; //@line 11196
   HEAP32[$346 >> 2] = $12; //@line 11197
   $347 = $ReallocAsyncCtx3 + 24 | 0; //@line 11198
   HEAP32[$347 >> 2] = $14; //@line 11199
   $348 = $ReallocAsyncCtx3 + 28 | 0; //@line 11200
   HEAP32[$348 >> 2] = $16; //@line 11201
   $349 = $ReallocAsyncCtx3 + 32 | 0; //@line 11202
   HEAP32[$349 >> 2] = $18; //@line 11203
   $350 = $ReallocAsyncCtx3 + 36 | 0; //@line 11204
   HEAP32[$350 >> 2] = $20; //@line 11205
   $351 = $ReallocAsyncCtx3 + 40 | 0; //@line 11206
   HEAP32[$351 >> 2] = $22; //@line 11207
   $352 = $ReallocAsyncCtx3 + 44 | 0; //@line 11208
   HEAP32[$352 >> 2] = $24; //@line 11209
   $353 = $ReallocAsyncCtx3 + 48 | 0; //@line 11210
   HEAP32[$353 >> 2] = $26; //@line 11211
   $354 = $ReallocAsyncCtx3 + 52 | 0; //@line 11212
   HEAP32[$354 >> 2] = $28; //@line 11213
   $355 = $ReallocAsyncCtx3 + 56 | 0; //@line 11214
   HEAP32[$355 >> 2] = $30; //@line 11215
   $356 = $ReallocAsyncCtx3 + 60 | 0; //@line 11216
   HEAP32[$356 >> 2] = $34; //@line 11217
   $357 = $ReallocAsyncCtx3 + 64 | 0; //@line 11218
   HEAP32[$357 >> 2] = $36; //@line 11219
   $358 = $ReallocAsyncCtx3 + 68 | 0; //@line 11220
   HEAP32[$358 >> 2] = $38; //@line 11221
   $359 = $ReallocAsyncCtx3 + 72 | 0; //@line 11222
   HEAP32[$359 >> 2] = $40; //@line 11223
   $360 = $ReallocAsyncCtx3 + 76 | 0; //@line 11224
   HEAP32[$360 >> 2] = $42; //@line 11225
   $361 = $ReallocAsyncCtx3 + 80 | 0; //@line 11226
   HEAP32[$361 >> 2] = $46; //@line 11227
   $362 = $ReallocAsyncCtx3 + 84 | 0; //@line 11228
   HEAP32[$362 >> 2] = $48; //@line 11229
   $363 = $ReallocAsyncCtx3 + 88 | 0; //@line 11230
   HEAP32[$363 >> 2] = $50; //@line 11231
   $364 = $ReallocAsyncCtx3 + 92 | 0; //@line 11232
   HEAP32[$364 >> 2] = $52; //@line 11233
   $365 = $ReallocAsyncCtx3 + 96 | 0; //@line 11234
   HEAP32[$365 >> 2] = $54; //@line 11235
   $366 = $ReallocAsyncCtx3 + 100 | 0; //@line 11236
   HEAP32[$366 >> 2] = $56; //@line 11237
   $367 = $ReallocAsyncCtx3 + 104 | 0; //@line 11238
   HEAP8[$367 >> 0] = $121; //@line 11239
   $368 = $ReallocAsyncCtx3 + 108 | 0; //@line 11240
   HEAP32[$368 >> 2] = $58; //@line 11241
   $369 = $ReallocAsyncCtx3 + 112 | 0; //@line 11242
   HEAP32[$369 >> 2] = $60; //@line 11243
   $370 = $ReallocAsyncCtx3 + 116 | 0; //@line 11244
   HEAP32[$370 >> 2] = $62; //@line 11245
   $371 = $ReallocAsyncCtx3 + 120 | 0; //@line 11246
   HEAP32[$371 >> 2] = $64; //@line 11247
   $372 = $ReallocAsyncCtx3 + 124 | 0; //@line 11248
   HEAP32[$372 >> 2] = $66; //@line 11249
   $373 = $ReallocAsyncCtx3 + 128 | 0; //@line 11250
   HEAP32[$373 >> 2] = $68; //@line 11251
   $374 = $ReallocAsyncCtx3 + 132 | 0; //@line 11252
   HEAP32[$374 >> 2] = $70; //@line 11253
   $375 = $ReallocAsyncCtx3 + 136 | 0; //@line 11254
   HEAP32[$375 >> 2] = $72; //@line 11255
   $376 = $ReallocAsyncCtx3 + 140 | 0; //@line 11256
   HEAP32[$376 >> 2] = $74; //@line 11257
   $377 = $ReallocAsyncCtx3 + 144 | 0; //@line 11258
   HEAP32[$377 >> 2] = $76; //@line 11259
   $378 = $ReallocAsyncCtx3 + 148 | 0; //@line 11260
   HEAP32[$378 >> 2] = $78; //@line 11261
   $379 = $ReallocAsyncCtx3 + 152 | 0; //@line 11262
   HEAP32[$379 >> 2] = $80; //@line 11263
   $380 = $ReallocAsyncCtx3 + 156 | 0; //@line 11264
   HEAP32[$380 >> 2] = $82; //@line 11265
   $381 = $ReallocAsyncCtx3 + 160 | 0; //@line 11266
   HEAP32[$381 >> 2] = $84; //@line 11267
   $382 = $ReallocAsyncCtx3 + 164 | 0; //@line 11268
   HEAP32[$382 >> 2] = $86; //@line 11269
   $383 = $ReallocAsyncCtx3 + 168 | 0; //@line 11270
   HEAP32[$383 >> 2] = $88; //@line 11271
   $384 = $ReallocAsyncCtx3 + 172 | 0; //@line 11272
   HEAP32[$384 >> 2] = $90; //@line 11273
   $385 = $ReallocAsyncCtx3 + 176 | 0; //@line 11274
   HEAP32[$385 >> 2] = $92; //@line 11275
   $386 = $ReallocAsyncCtx3 + 180 | 0; //@line 11276
   HEAP32[$386 >> 2] = $94; //@line 11277
   $387 = $ReallocAsyncCtx3 + 184 | 0; //@line 11278
   HEAP32[$387 >> 2] = $96; //@line 11279
   $388 = $ReallocAsyncCtx3 + 188 | 0; //@line 11280
   HEAP32[$388 >> 2] = $98; //@line 11281
   $389 = $ReallocAsyncCtx3 + 192 | 0; //@line 11282
   HEAP32[$389 >> 2] = $100; //@line 11283
   $390 = $ReallocAsyncCtx3 + 196 | 0; //@line 11284
   HEAP32[$390 >> 2] = $102; //@line 11285
   $391 = $ReallocAsyncCtx3 + 200 | 0; //@line 11286
   HEAP32[$391 >> 2] = $104; //@line 11287
   $392 = $ReallocAsyncCtx3 + 204 | 0; //@line 11288
   HEAP32[$392 >> 2] = $106; //@line 11289
   $393 = $ReallocAsyncCtx3 + 208 | 0; //@line 11290
   HEAP32[$393 >> 2] = $108; //@line 11291
   $394 = $ReallocAsyncCtx3 + 212 | 0; //@line 11292
   HEAP32[$394 >> 2] = $110; //@line 11293
   $395 = $ReallocAsyncCtx3 + 216 | 0; //@line 11294
   HEAP32[$395 >> 2] = $112; //@line 11295
   $396 = $ReallocAsyncCtx3 + 220 | 0; //@line 11296
   HEAP32[$396 >> 2] = $114; //@line 11297
   $397 = $ReallocAsyncCtx3 + 224 | 0; //@line 11298
   HEAP32[$397 >> 2] = $116; //@line 11299
   $398 = $ReallocAsyncCtx3 + 228 | 0; //@line 11300
   HEAP32[$398 >> 2] = $118; //@line 11301
   sp = STACKTOP; //@line 11302
   return;
  }
  HEAP8[___async_retval >> 0] = $340; //@line 11306
  ___async_unwind = 0; //@line 11307
  HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 11308
  $341 = $ReallocAsyncCtx3 + 4 | 0; //@line 11309
  HEAP8[$341 >> 0] = $2; //@line 11310
  $342 = $ReallocAsyncCtx3 + 8 | 0; //@line 11311
  HEAP32[$342 >> 2] = $4; //@line 11312
  $343 = $ReallocAsyncCtx3 + 12 | 0; //@line 11313
  HEAP8[$343 >> 0] = $6; //@line 11314
  $344 = $ReallocAsyncCtx3 + 13 | 0; //@line 11315
  HEAP8[$344 >> 0] = $8; //@line 11316
  $345 = $ReallocAsyncCtx3 + 16 | 0; //@line 11317
  HEAP32[$345 >> 2] = $10; //@line 11318
  $346 = $ReallocAsyncCtx3 + 20 | 0; //@line 11319
  HEAP32[$346 >> 2] = $12; //@line 11320
  $347 = $ReallocAsyncCtx3 + 24 | 0; //@line 11321
  HEAP32[$347 >> 2] = $14; //@line 11322
  $348 = $ReallocAsyncCtx3 + 28 | 0; //@line 11323
  HEAP32[$348 >> 2] = $16; //@line 11324
  $349 = $ReallocAsyncCtx3 + 32 | 0; //@line 11325
  HEAP32[$349 >> 2] = $18; //@line 11326
  $350 = $ReallocAsyncCtx3 + 36 | 0; //@line 11327
  HEAP32[$350 >> 2] = $20; //@line 11328
  $351 = $ReallocAsyncCtx3 + 40 | 0; //@line 11329
  HEAP32[$351 >> 2] = $22; //@line 11330
  $352 = $ReallocAsyncCtx3 + 44 | 0; //@line 11331
  HEAP32[$352 >> 2] = $24; //@line 11332
  $353 = $ReallocAsyncCtx3 + 48 | 0; //@line 11333
  HEAP32[$353 >> 2] = $26; //@line 11334
  $354 = $ReallocAsyncCtx3 + 52 | 0; //@line 11335
  HEAP32[$354 >> 2] = $28; //@line 11336
  $355 = $ReallocAsyncCtx3 + 56 | 0; //@line 11337
  HEAP32[$355 >> 2] = $30; //@line 11338
  $356 = $ReallocAsyncCtx3 + 60 | 0; //@line 11339
  HEAP32[$356 >> 2] = $34; //@line 11340
  $357 = $ReallocAsyncCtx3 + 64 | 0; //@line 11341
  HEAP32[$357 >> 2] = $36; //@line 11342
  $358 = $ReallocAsyncCtx3 + 68 | 0; //@line 11343
  HEAP32[$358 >> 2] = $38; //@line 11344
  $359 = $ReallocAsyncCtx3 + 72 | 0; //@line 11345
  HEAP32[$359 >> 2] = $40; //@line 11346
  $360 = $ReallocAsyncCtx3 + 76 | 0; //@line 11347
  HEAP32[$360 >> 2] = $42; //@line 11348
  $361 = $ReallocAsyncCtx3 + 80 | 0; //@line 11349
  HEAP32[$361 >> 2] = $46; //@line 11350
  $362 = $ReallocAsyncCtx3 + 84 | 0; //@line 11351
  HEAP32[$362 >> 2] = $48; //@line 11352
  $363 = $ReallocAsyncCtx3 + 88 | 0; //@line 11353
  HEAP32[$363 >> 2] = $50; //@line 11354
  $364 = $ReallocAsyncCtx3 + 92 | 0; //@line 11355
  HEAP32[$364 >> 2] = $52; //@line 11356
  $365 = $ReallocAsyncCtx3 + 96 | 0; //@line 11357
  HEAP32[$365 >> 2] = $54; //@line 11358
  $366 = $ReallocAsyncCtx3 + 100 | 0; //@line 11359
  HEAP32[$366 >> 2] = $56; //@line 11360
  $367 = $ReallocAsyncCtx3 + 104 | 0; //@line 11361
  HEAP8[$367 >> 0] = $121; //@line 11362
  $368 = $ReallocAsyncCtx3 + 108 | 0; //@line 11363
  HEAP32[$368 >> 2] = $58; //@line 11364
  $369 = $ReallocAsyncCtx3 + 112 | 0; //@line 11365
  HEAP32[$369 >> 2] = $60; //@line 11366
  $370 = $ReallocAsyncCtx3 + 116 | 0; //@line 11367
  HEAP32[$370 >> 2] = $62; //@line 11368
  $371 = $ReallocAsyncCtx3 + 120 | 0; //@line 11369
  HEAP32[$371 >> 2] = $64; //@line 11370
  $372 = $ReallocAsyncCtx3 + 124 | 0; //@line 11371
  HEAP32[$372 >> 2] = $66; //@line 11372
  $373 = $ReallocAsyncCtx3 + 128 | 0; //@line 11373
  HEAP32[$373 >> 2] = $68; //@line 11374
  $374 = $ReallocAsyncCtx3 + 132 | 0; //@line 11375
  HEAP32[$374 >> 2] = $70; //@line 11376
  $375 = $ReallocAsyncCtx3 + 136 | 0; //@line 11377
  HEAP32[$375 >> 2] = $72; //@line 11378
  $376 = $ReallocAsyncCtx3 + 140 | 0; //@line 11379
  HEAP32[$376 >> 2] = $74; //@line 11380
  $377 = $ReallocAsyncCtx3 + 144 | 0; //@line 11381
  HEAP32[$377 >> 2] = $76; //@line 11382
  $378 = $ReallocAsyncCtx3 + 148 | 0; //@line 11383
  HEAP32[$378 >> 2] = $78; //@line 11384
  $379 = $ReallocAsyncCtx3 + 152 | 0; //@line 11385
  HEAP32[$379 >> 2] = $80; //@line 11386
  $380 = $ReallocAsyncCtx3 + 156 | 0; //@line 11387
  HEAP32[$380 >> 2] = $82; //@line 11388
  $381 = $ReallocAsyncCtx3 + 160 | 0; //@line 11389
  HEAP32[$381 >> 2] = $84; //@line 11390
  $382 = $ReallocAsyncCtx3 + 164 | 0; //@line 11391
  HEAP32[$382 >> 2] = $86; //@line 11392
  $383 = $ReallocAsyncCtx3 + 168 | 0; //@line 11393
  HEAP32[$383 >> 2] = $88; //@line 11394
  $384 = $ReallocAsyncCtx3 + 172 | 0; //@line 11395
  HEAP32[$384 >> 2] = $90; //@line 11396
  $385 = $ReallocAsyncCtx3 + 176 | 0; //@line 11397
  HEAP32[$385 >> 2] = $92; //@line 11398
  $386 = $ReallocAsyncCtx3 + 180 | 0; //@line 11399
  HEAP32[$386 >> 2] = $94; //@line 11400
  $387 = $ReallocAsyncCtx3 + 184 | 0; //@line 11401
  HEAP32[$387 >> 2] = $96; //@line 11402
  $388 = $ReallocAsyncCtx3 + 188 | 0; //@line 11403
  HEAP32[$388 >> 2] = $98; //@line 11404
  $389 = $ReallocAsyncCtx3 + 192 | 0; //@line 11405
  HEAP32[$389 >> 2] = $100; //@line 11406
  $390 = $ReallocAsyncCtx3 + 196 | 0; //@line 11407
  HEAP32[$390 >> 2] = $102; //@line 11408
  $391 = $ReallocAsyncCtx3 + 200 | 0; //@line 11409
  HEAP32[$391 >> 2] = $104; //@line 11410
  $392 = $ReallocAsyncCtx3 + 204 | 0; //@line 11411
  HEAP32[$392 >> 2] = $106; //@line 11412
  $393 = $ReallocAsyncCtx3 + 208 | 0; //@line 11413
  HEAP32[$393 >> 2] = $108; //@line 11414
  $394 = $ReallocAsyncCtx3 + 212 | 0; //@line 11415
  HEAP32[$394 >> 2] = $110; //@line 11416
  $395 = $ReallocAsyncCtx3 + 216 | 0; //@line 11417
  HEAP32[$395 >> 2] = $112; //@line 11418
  $396 = $ReallocAsyncCtx3 + 220 | 0; //@line 11419
  HEAP32[$396 >> 2] = $114; //@line 11420
  $397 = $ReallocAsyncCtx3 + 224 | 0; //@line 11421
  HEAP32[$397 >> 2] = $116; //@line 11422
  $398 = $ReallocAsyncCtx3 + 228 | 0; //@line 11423
  HEAP32[$398 >> 2] = $118; //@line 11424
  sp = STACKTOP; //@line 11425
  return;
 } else if ((label | 0) == 26) {
  $418 = HEAP8[$14 + ($121 & 255) >> 0] | 0; //@line 11432
  HEAP32[$40 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 11453
  HEAP32[$58 >> 2] = 0; //@line 11454
  $439 = $$0$be + 6 << 24 >> 24; //@line 11455
  HEAP8[$48 >> 0] = HEAP8[$14 + ($$0$be + 5 & 255) >> 0] | 0; //@line 11459
  $445 = HEAP32[(HEAP32[$84 >> 2] | 0) + 8 >> 2] | 0; //@line 11462
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 11463
  $446 = FUNCTION_TABLE_iiii[$445 & 31]($28, $418, $80) | 0; //@line 11464
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 11467
   $447 = $ReallocAsyncCtx4 + 4 | 0; //@line 11468
   HEAP8[$447 >> 0] = $2; //@line 11469
   $448 = $ReallocAsyncCtx4 + 8 | 0; //@line 11470
   HEAP32[$448 >> 2] = $4; //@line 11471
   $449 = $ReallocAsyncCtx4 + 12 | 0; //@line 11472
   HEAP8[$449 >> 0] = $6; //@line 11473
   $450 = $ReallocAsyncCtx4 + 13 | 0; //@line 11474
   HEAP8[$450 >> 0] = $8; //@line 11475
   $451 = $ReallocAsyncCtx4 + 16 | 0; //@line 11476
   HEAP32[$451 >> 2] = $10; //@line 11477
   $452 = $ReallocAsyncCtx4 + 20 | 0; //@line 11478
   HEAP32[$452 >> 2] = $12; //@line 11479
   $453 = $ReallocAsyncCtx4 + 24 | 0; //@line 11480
   HEAP32[$453 >> 2] = $14; //@line 11481
   $454 = $ReallocAsyncCtx4 + 28 | 0; //@line 11482
   HEAP32[$454 >> 2] = $16; //@line 11483
   $455 = $ReallocAsyncCtx4 + 32 | 0; //@line 11484
   HEAP32[$455 >> 2] = $18; //@line 11485
   $456 = $ReallocAsyncCtx4 + 36 | 0; //@line 11486
   HEAP32[$456 >> 2] = $20; //@line 11487
   $457 = $ReallocAsyncCtx4 + 40 | 0; //@line 11488
   HEAP32[$457 >> 2] = $22; //@line 11489
   $458 = $ReallocAsyncCtx4 + 44 | 0; //@line 11490
   HEAP32[$458 >> 2] = $24; //@line 11491
   $459 = $ReallocAsyncCtx4 + 48 | 0; //@line 11492
   HEAP32[$459 >> 2] = $26; //@line 11493
   $460 = $ReallocAsyncCtx4 + 52 | 0; //@line 11494
   HEAP32[$460 >> 2] = $28; //@line 11495
   $461 = $ReallocAsyncCtx4 + 56 | 0; //@line 11496
   HEAP32[$461 >> 2] = $30; //@line 11497
   $462 = $ReallocAsyncCtx4 + 60 | 0; //@line 11498
   HEAP32[$462 >> 2] = $34; //@line 11499
   $463 = $ReallocAsyncCtx4 + 64 | 0; //@line 11500
   HEAP32[$463 >> 2] = $36; //@line 11501
   $464 = $ReallocAsyncCtx4 + 68 | 0; //@line 11502
   HEAP32[$464 >> 2] = $38; //@line 11503
   $465 = $ReallocAsyncCtx4 + 72 | 0; //@line 11504
   HEAP8[$465 >> 0] = $439; //@line 11505
   $466 = $ReallocAsyncCtx4 + 76 | 0; //@line 11506
   HEAP32[$466 >> 2] = $40; //@line 11507
   $467 = $ReallocAsyncCtx4 + 80 | 0; //@line 11508
   HEAP32[$467 >> 2] = $42; //@line 11509
   $468 = $ReallocAsyncCtx4 + 84 | 0; //@line 11510
   HEAP32[$468 >> 2] = $46; //@line 11511
   $469 = $ReallocAsyncCtx4 + 88 | 0; //@line 11512
   HEAP32[$469 >> 2] = $48; //@line 11513
   $470 = $ReallocAsyncCtx4 + 92 | 0; //@line 11514
   HEAP32[$470 >> 2] = $50; //@line 11515
   $471 = $ReallocAsyncCtx4 + 96 | 0; //@line 11516
   HEAP32[$471 >> 2] = $52; //@line 11517
   $472 = $ReallocAsyncCtx4 + 100 | 0; //@line 11518
   HEAP32[$472 >> 2] = $54; //@line 11519
   $473 = $ReallocAsyncCtx4 + 104 | 0; //@line 11520
   HEAP32[$473 >> 2] = $56; //@line 11521
   $474 = $ReallocAsyncCtx4 + 108 | 0; //@line 11522
   HEAP32[$474 >> 2] = $58; //@line 11523
   $475 = $ReallocAsyncCtx4 + 112 | 0; //@line 11524
   HEAP32[$475 >> 2] = $60; //@line 11525
   $476 = $ReallocAsyncCtx4 + 116 | 0; //@line 11526
   HEAP32[$476 >> 2] = $62; //@line 11527
   $477 = $ReallocAsyncCtx4 + 120 | 0; //@line 11528
   HEAP32[$477 >> 2] = $64; //@line 11529
   $478 = $ReallocAsyncCtx4 + 124 | 0; //@line 11530
   HEAP32[$478 >> 2] = $66; //@line 11531
   $479 = $ReallocAsyncCtx4 + 128 | 0; //@line 11532
   HEAP32[$479 >> 2] = $68; //@line 11533
   $480 = $ReallocAsyncCtx4 + 132 | 0; //@line 11534
   HEAP32[$480 >> 2] = $70; //@line 11535
   $481 = $ReallocAsyncCtx4 + 136 | 0; //@line 11536
   HEAP32[$481 >> 2] = $72; //@line 11537
   $482 = $ReallocAsyncCtx4 + 140 | 0; //@line 11538
   HEAP32[$482 >> 2] = $74; //@line 11539
   $483 = $ReallocAsyncCtx4 + 144 | 0; //@line 11540
   HEAP32[$483 >> 2] = $76; //@line 11541
   $484 = $ReallocAsyncCtx4 + 148 | 0; //@line 11542
   HEAP32[$484 >> 2] = $78; //@line 11543
   $485 = $ReallocAsyncCtx4 + 152 | 0; //@line 11544
   HEAP32[$485 >> 2] = $80; //@line 11545
   $486 = $ReallocAsyncCtx4 + 156 | 0; //@line 11546
   HEAP32[$486 >> 2] = $82; //@line 11547
   $487 = $ReallocAsyncCtx4 + 160 | 0; //@line 11548
   HEAP32[$487 >> 2] = $84; //@line 11549
   $488 = $ReallocAsyncCtx4 + 164 | 0; //@line 11550
   HEAP32[$488 >> 2] = $86; //@line 11551
   $489 = $ReallocAsyncCtx4 + 168 | 0; //@line 11552
   HEAP32[$489 >> 2] = $88; //@line 11553
   $490 = $ReallocAsyncCtx4 + 172 | 0; //@line 11554
   HEAP32[$490 >> 2] = $90; //@line 11555
   $491 = $ReallocAsyncCtx4 + 176 | 0; //@line 11556
   HEAP32[$491 >> 2] = $92; //@line 11557
   $492 = $ReallocAsyncCtx4 + 180 | 0; //@line 11558
   HEAP32[$492 >> 2] = $94; //@line 11559
   $493 = $ReallocAsyncCtx4 + 184 | 0; //@line 11560
   HEAP32[$493 >> 2] = $96; //@line 11561
   $494 = $ReallocAsyncCtx4 + 188 | 0; //@line 11562
   HEAP32[$494 >> 2] = $98; //@line 11563
   $495 = $ReallocAsyncCtx4 + 192 | 0; //@line 11564
   HEAP32[$495 >> 2] = $100; //@line 11565
   $496 = $ReallocAsyncCtx4 + 196 | 0; //@line 11566
   HEAP32[$496 >> 2] = $102; //@line 11567
   $497 = $ReallocAsyncCtx4 + 200 | 0; //@line 11568
   HEAP32[$497 >> 2] = $104; //@line 11569
   $498 = $ReallocAsyncCtx4 + 204 | 0; //@line 11570
   HEAP32[$498 >> 2] = $106; //@line 11571
   $499 = $ReallocAsyncCtx4 + 208 | 0; //@line 11572
   HEAP32[$499 >> 2] = $108; //@line 11573
   $500 = $ReallocAsyncCtx4 + 212 | 0; //@line 11574
   HEAP32[$500 >> 2] = $110; //@line 11575
   $501 = $ReallocAsyncCtx4 + 216 | 0; //@line 11576
   HEAP32[$501 >> 2] = $112; //@line 11577
   $502 = $ReallocAsyncCtx4 + 220 | 0; //@line 11578
   HEAP32[$502 >> 2] = $114; //@line 11579
   $503 = $ReallocAsyncCtx4 + 224 | 0; //@line 11580
   HEAP32[$503 >> 2] = $116; //@line 11581
   $504 = $ReallocAsyncCtx4 + 228 | 0; //@line 11582
   HEAP32[$504 >> 2] = $118; //@line 11583
   sp = STACKTOP; //@line 11584
   return;
  }
  HEAP8[___async_retval >> 0] = $446; //@line 11588
  ___async_unwind = 0; //@line 11589
  HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 11590
  $447 = $ReallocAsyncCtx4 + 4 | 0; //@line 11591
  HEAP8[$447 >> 0] = $2; //@line 11592
  $448 = $ReallocAsyncCtx4 + 8 | 0; //@line 11593
  HEAP32[$448 >> 2] = $4; //@line 11594
  $449 = $ReallocAsyncCtx4 + 12 | 0; //@line 11595
  HEAP8[$449 >> 0] = $6; //@line 11596
  $450 = $ReallocAsyncCtx4 + 13 | 0; //@line 11597
  HEAP8[$450 >> 0] = $8; //@line 11598
  $451 = $ReallocAsyncCtx4 + 16 | 0; //@line 11599
  HEAP32[$451 >> 2] = $10; //@line 11600
  $452 = $ReallocAsyncCtx4 + 20 | 0; //@line 11601
  HEAP32[$452 >> 2] = $12; //@line 11602
  $453 = $ReallocAsyncCtx4 + 24 | 0; //@line 11603
  HEAP32[$453 >> 2] = $14; //@line 11604
  $454 = $ReallocAsyncCtx4 + 28 | 0; //@line 11605
  HEAP32[$454 >> 2] = $16; //@line 11606
  $455 = $ReallocAsyncCtx4 + 32 | 0; //@line 11607
  HEAP32[$455 >> 2] = $18; //@line 11608
  $456 = $ReallocAsyncCtx4 + 36 | 0; //@line 11609
  HEAP32[$456 >> 2] = $20; //@line 11610
  $457 = $ReallocAsyncCtx4 + 40 | 0; //@line 11611
  HEAP32[$457 >> 2] = $22; //@line 11612
  $458 = $ReallocAsyncCtx4 + 44 | 0; //@line 11613
  HEAP32[$458 >> 2] = $24; //@line 11614
  $459 = $ReallocAsyncCtx4 + 48 | 0; //@line 11615
  HEAP32[$459 >> 2] = $26; //@line 11616
  $460 = $ReallocAsyncCtx4 + 52 | 0; //@line 11617
  HEAP32[$460 >> 2] = $28; //@line 11618
  $461 = $ReallocAsyncCtx4 + 56 | 0; //@line 11619
  HEAP32[$461 >> 2] = $30; //@line 11620
  $462 = $ReallocAsyncCtx4 + 60 | 0; //@line 11621
  HEAP32[$462 >> 2] = $34; //@line 11622
  $463 = $ReallocAsyncCtx4 + 64 | 0; //@line 11623
  HEAP32[$463 >> 2] = $36; //@line 11624
  $464 = $ReallocAsyncCtx4 + 68 | 0; //@line 11625
  HEAP32[$464 >> 2] = $38; //@line 11626
  $465 = $ReallocAsyncCtx4 + 72 | 0; //@line 11627
  HEAP8[$465 >> 0] = $439; //@line 11628
  $466 = $ReallocAsyncCtx4 + 76 | 0; //@line 11629
  HEAP32[$466 >> 2] = $40; //@line 11630
  $467 = $ReallocAsyncCtx4 + 80 | 0; //@line 11631
  HEAP32[$467 >> 2] = $42; //@line 11632
  $468 = $ReallocAsyncCtx4 + 84 | 0; //@line 11633
  HEAP32[$468 >> 2] = $46; //@line 11634
  $469 = $ReallocAsyncCtx4 + 88 | 0; //@line 11635
  HEAP32[$469 >> 2] = $48; //@line 11636
  $470 = $ReallocAsyncCtx4 + 92 | 0; //@line 11637
  HEAP32[$470 >> 2] = $50; //@line 11638
  $471 = $ReallocAsyncCtx4 + 96 | 0; //@line 11639
  HEAP32[$471 >> 2] = $52; //@line 11640
  $472 = $ReallocAsyncCtx4 + 100 | 0; //@line 11641
  HEAP32[$472 >> 2] = $54; //@line 11642
  $473 = $ReallocAsyncCtx4 + 104 | 0; //@line 11643
  HEAP32[$473 >> 2] = $56; //@line 11644
  $474 = $ReallocAsyncCtx4 + 108 | 0; //@line 11645
  HEAP32[$474 >> 2] = $58; //@line 11646
  $475 = $ReallocAsyncCtx4 + 112 | 0; //@line 11647
  HEAP32[$475 >> 2] = $60; //@line 11648
  $476 = $ReallocAsyncCtx4 + 116 | 0; //@line 11649
  HEAP32[$476 >> 2] = $62; //@line 11650
  $477 = $ReallocAsyncCtx4 + 120 | 0; //@line 11651
  HEAP32[$477 >> 2] = $64; //@line 11652
  $478 = $ReallocAsyncCtx4 + 124 | 0; //@line 11653
  HEAP32[$478 >> 2] = $66; //@line 11654
  $479 = $ReallocAsyncCtx4 + 128 | 0; //@line 11655
  HEAP32[$479 >> 2] = $68; //@line 11656
  $480 = $ReallocAsyncCtx4 + 132 | 0; //@line 11657
  HEAP32[$480 >> 2] = $70; //@line 11658
  $481 = $ReallocAsyncCtx4 + 136 | 0; //@line 11659
  HEAP32[$481 >> 2] = $72; //@line 11660
  $482 = $ReallocAsyncCtx4 + 140 | 0; //@line 11661
  HEAP32[$482 >> 2] = $74; //@line 11662
  $483 = $ReallocAsyncCtx4 + 144 | 0; //@line 11663
  HEAP32[$483 >> 2] = $76; //@line 11664
  $484 = $ReallocAsyncCtx4 + 148 | 0; //@line 11665
  HEAP32[$484 >> 2] = $78; //@line 11666
  $485 = $ReallocAsyncCtx4 + 152 | 0; //@line 11667
  HEAP32[$485 >> 2] = $80; //@line 11668
  $486 = $ReallocAsyncCtx4 + 156 | 0; //@line 11669
  HEAP32[$486 >> 2] = $82; //@line 11670
  $487 = $ReallocAsyncCtx4 + 160 | 0; //@line 11671
  HEAP32[$487 >> 2] = $84; //@line 11672
  $488 = $ReallocAsyncCtx4 + 164 | 0; //@line 11673
  HEAP32[$488 >> 2] = $86; //@line 11674
  $489 = $ReallocAsyncCtx4 + 168 | 0; //@line 11675
  HEAP32[$489 >> 2] = $88; //@line 11676
  $490 = $ReallocAsyncCtx4 + 172 | 0; //@line 11677
  HEAP32[$490 >> 2] = $90; //@line 11678
  $491 = $ReallocAsyncCtx4 + 176 | 0; //@line 11679
  HEAP32[$491 >> 2] = $92; //@line 11680
  $492 = $ReallocAsyncCtx4 + 180 | 0; //@line 11681
  HEAP32[$492 >> 2] = $94; //@line 11682
  $493 = $ReallocAsyncCtx4 + 184 | 0; //@line 11683
  HEAP32[$493 >> 2] = $96; //@line 11684
  $494 = $ReallocAsyncCtx4 + 188 | 0; //@line 11685
  HEAP32[$494 >> 2] = $98; //@line 11686
  $495 = $ReallocAsyncCtx4 + 192 | 0; //@line 11687
  HEAP32[$495 >> 2] = $100; //@line 11688
  $496 = $ReallocAsyncCtx4 + 196 | 0; //@line 11689
  HEAP32[$496 >> 2] = $102; //@line 11690
  $497 = $ReallocAsyncCtx4 + 200 | 0; //@line 11691
  HEAP32[$497 >> 2] = $104; //@line 11692
  $498 = $ReallocAsyncCtx4 + 204 | 0; //@line 11693
  HEAP32[$498 >> 2] = $106; //@line 11694
  $499 = $ReallocAsyncCtx4 + 208 | 0; //@line 11695
  HEAP32[$499 >> 2] = $108; //@line 11696
  $500 = $ReallocAsyncCtx4 + 212 | 0; //@line 11697
  HEAP32[$500 >> 2] = $110; //@line 11698
  $501 = $ReallocAsyncCtx4 + 216 | 0; //@line 11699
  HEAP32[$501 >> 2] = $112; //@line 11700
  $502 = $ReallocAsyncCtx4 + 220 | 0; //@line 11701
  HEAP32[$502 >> 2] = $114; //@line 11702
  $503 = $ReallocAsyncCtx4 + 224 | 0; //@line 11703
  HEAP32[$503 >> 2] = $116; //@line 11704
  $504 = $ReallocAsyncCtx4 + 228 | 0; //@line 11705
  HEAP32[$504 >> 2] = $118; //@line 11706
  sp = STACKTOP; //@line 11707
  return;
 } else if ((label | 0) == 32) {
  $525 = $$0$be + 2 << 24 >> 24; //@line 11711
  $529 = HEAPU8[$14 + ($121 & 255) >> 0] | 0; //@line 11715
  $531 = $529 >>> 5 & 1; //@line 11718
  $533 = $529 >>> 4 & 1; //@line 11721
  $536 = HEAP32[(HEAP32[$78 >> 2] | 0) + 44 >> 2] | 0; //@line 11724
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 11725
  $537 = FUNCTION_TABLE_iiii[$536 & 31]($28, $533, $531) | 0; //@line 11726
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 11729
   $538 = $ReallocAsyncCtx5 + 4 | 0; //@line 11730
   HEAP8[$538 >> 0] = $2; //@line 11731
   $539 = $ReallocAsyncCtx5 + 8 | 0; //@line 11732
   HEAP32[$539 >> 2] = $4; //@line 11733
   $540 = $ReallocAsyncCtx5 + 12 | 0; //@line 11734
   HEAP8[$540 >> 0] = $6; //@line 11735
   $541 = $ReallocAsyncCtx5 + 13 | 0; //@line 11736
   HEAP8[$541 >> 0] = $8; //@line 11737
   $542 = $ReallocAsyncCtx5 + 16 | 0; //@line 11738
   HEAP32[$542 >> 2] = $10; //@line 11739
   $543 = $ReallocAsyncCtx5 + 20 | 0; //@line 11740
   HEAP32[$543 >> 2] = $12; //@line 11741
   $544 = $ReallocAsyncCtx5 + 24 | 0; //@line 11742
   HEAP32[$544 >> 2] = $14; //@line 11743
   $545 = $ReallocAsyncCtx5 + 28 | 0; //@line 11744
   HEAP8[$545 >> 0] = $531; //@line 11745
   $546 = $ReallocAsyncCtx5 + 32 | 0; //@line 11746
   HEAP32[$546 >> 2] = $16; //@line 11747
   $547 = $ReallocAsyncCtx5 + 36 | 0; //@line 11748
   HEAP32[$547 >> 2] = $18; //@line 11749
   $548 = $ReallocAsyncCtx5 + 40 | 0; //@line 11750
   HEAP32[$548 >> 2] = $20; //@line 11751
   $549 = $ReallocAsyncCtx5 + 44 | 0; //@line 11752
   HEAP32[$549 >> 2] = $22; //@line 11753
   $550 = $ReallocAsyncCtx5 + 48 | 0; //@line 11754
   HEAP32[$550 >> 2] = $24; //@line 11755
   $551 = $ReallocAsyncCtx5 + 52 | 0; //@line 11756
   HEAP32[$551 >> 2] = $26; //@line 11757
   $552 = $ReallocAsyncCtx5 + 56 | 0; //@line 11758
   HEAP32[$552 >> 2] = $28; //@line 11759
   $553 = $ReallocAsyncCtx5 + 60 | 0; //@line 11760
   HEAP32[$553 >> 2] = $$0107$be; //@line 11761
   $554 = $ReallocAsyncCtx5 + 64 | 0; //@line 11762
   HEAP32[$554 >> 2] = $30; //@line 11763
   $555 = $ReallocAsyncCtx5 + 68 | 0; //@line 11764
   HEAP32[$555 >> 2] = $34; //@line 11765
   $556 = $ReallocAsyncCtx5 + 72 | 0; //@line 11766
   HEAP32[$556 >> 2] = $36; //@line 11767
   $557 = $ReallocAsyncCtx5 + 76 | 0; //@line 11768
   HEAP32[$557 >> 2] = $38; //@line 11769
   $558 = $ReallocAsyncCtx5 + 80 | 0; //@line 11770
   HEAP32[$558 >> 2] = $40; //@line 11771
   $559 = $ReallocAsyncCtx5 + 84 | 0; //@line 11772
   HEAP8[$559 >> 0] = $525; //@line 11773
   $560 = $ReallocAsyncCtx5 + 88 | 0; //@line 11774
   HEAP32[$560 >> 2] = $42; //@line 11775
   $561 = $ReallocAsyncCtx5 + 92 | 0; //@line 11776
   HEAP32[$561 >> 2] = $46; //@line 11777
   $562 = $ReallocAsyncCtx5 + 96 | 0; //@line 11778
   HEAP32[$562 >> 2] = $48; //@line 11779
   $563 = $ReallocAsyncCtx5 + 100 | 0; //@line 11780
   HEAP32[$563 >> 2] = $50; //@line 11781
   $564 = $ReallocAsyncCtx5 + 104 | 0; //@line 11782
   HEAP32[$564 >> 2] = $52; //@line 11783
   $565 = $ReallocAsyncCtx5 + 108 | 0; //@line 11784
   HEAP32[$565 >> 2] = $54; //@line 11785
   $566 = $ReallocAsyncCtx5 + 112 | 0; //@line 11786
   HEAP32[$566 >> 2] = $56; //@line 11787
   $567 = $ReallocAsyncCtx5 + 116 | 0; //@line 11788
   HEAP32[$567 >> 2] = $58; //@line 11789
   $568 = $ReallocAsyncCtx5 + 120 | 0; //@line 11790
   HEAP32[$568 >> 2] = $60; //@line 11791
   $569 = $ReallocAsyncCtx5 + 124 | 0; //@line 11792
   HEAP32[$569 >> 2] = $62; //@line 11793
   $570 = $ReallocAsyncCtx5 + 128 | 0; //@line 11794
   HEAP32[$570 >> 2] = $64; //@line 11795
   $571 = $ReallocAsyncCtx5 + 132 | 0; //@line 11796
   HEAP32[$571 >> 2] = $66; //@line 11797
   $572 = $ReallocAsyncCtx5 + 136 | 0; //@line 11798
   HEAP32[$572 >> 2] = $68; //@line 11799
   $573 = $ReallocAsyncCtx5 + 140 | 0; //@line 11800
   HEAP32[$573 >> 2] = $70; //@line 11801
   $574 = $ReallocAsyncCtx5 + 144 | 0; //@line 11802
   HEAP32[$574 >> 2] = $72; //@line 11803
   $575 = $ReallocAsyncCtx5 + 148 | 0; //@line 11804
   HEAP32[$575 >> 2] = $74; //@line 11805
   $576 = $ReallocAsyncCtx5 + 152 | 0; //@line 11806
   HEAP32[$576 >> 2] = $76; //@line 11807
   $577 = $ReallocAsyncCtx5 + 156 | 0; //@line 11808
   HEAP32[$577 >> 2] = $78; //@line 11809
   $578 = $ReallocAsyncCtx5 + 160 | 0; //@line 11810
   HEAP32[$578 >> 2] = $80; //@line 11811
   $579 = $ReallocAsyncCtx5 + 164 | 0; //@line 11812
   HEAP32[$579 >> 2] = $82; //@line 11813
   $580 = $ReallocAsyncCtx5 + 168 | 0; //@line 11814
   HEAP32[$580 >> 2] = $84; //@line 11815
   $581 = $ReallocAsyncCtx5 + 172 | 0; //@line 11816
   HEAP32[$581 >> 2] = $86; //@line 11817
   $582 = $ReallocAsyncCtx5 + 176 | 0; //@line 11818
   HEAP32[$582 >> 2] = $88; //@line 11819
   $583 = $ReallocAsyncCtx5 + 180 | 0; //@line 11820
   HEAP32[$583 >> 2] = $90; //@line 11821
   $584 = $ReallocAsyncCtx5 + 184 | 0; //@line 11822
   HEAP32[$584 >> 2] = $92; //@line 11823
   $585 = $ReallocAsyncCtx5 + 188 | 0; //@line 11824
   HEAP8[$585 >> 0] = $533; //@line 11825
   $586 = $ReallocAsyncCtx5 + 192 | 0; //@line 11826
   HEAP32[$586 >> 2] = $94; //@line 11827
   $587 = $ReallocAsyncCtx5 + 196 | 0; //@line 11828
   HEAP32[$587 >> 2] = $96; //@line 11829
   $588 = $ReallocAsyncCtx5 + 200 | 0; //@line 11830
   HEAP32[$588 >> 2] = $98; //@line 11831
   $589 = $ReallocAsyncCtx5 + 204 | 0; //@line 11832
   HEAP32[$589 >> 2] = $100; //@line 11833
   $590 = $ReallocAsyncCtx5 + 208 | 0; //@line 11834
   HEAP32[$590 >> 2] = $102; //@line 11835
   $591 = $ReallocAsyncCtx5 + 212 | 0; //@line 11836
   HEAP32[$591 >> 2] = $104; //@line 11837
   $592 = $ReallocAsyncCtx5 + 216 | 0; //@line 11838
   HEAP32[$592 >> 2] = $529; //@line 11839
   $593 = $ReallocAsyncCtx5 + 220 | 0; //@line 11840
   HEAP32[$593 >> 2] = $106; //@line 11841
   $594 = $ReallocAsyncCtx5 + 224 | 0; //@line 11842
   HEAP32[$594 >> 2] = $108; //@line 11843
   $595 = $ReallocAsyncCtx5 + 228 | 0; //@line 11844
   HEAP32[$595 >> 2] = $110; //@line 11845
   $596 = $ReallocAsyncCtx5 + 232 | 0; //@line 11846
   HEAP32[$596 >> 2] = $112; //@line 11847
   $597 = $ReallocAsyncCtx5 + 236 | 0; //@line 11848
   HEAP32[$597 >> 2] = $114; //@line 11849
   $598 = $ReallocAsyncCtx5 + 240 | 0; //@line 11850
   HEAP32[$598 >> 2] = $116; //@line 11851
   $599 = $ReallocAsyncCtx5 + 244 | 0; //@line 11852
   HEAP32[$599 >> 2] = $118; //@line 11853
   sp = STACKTOP; //@line 11854
   return;
  }
  HEAP8[___async_retval >> 0] = $537 & 1; //@line 11859
  ___async_unwind = 0; //@line 11860
  HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 11861
  $538 = $ReallocAsyncCtx5 + 4 | 0; //@line 11862
  HEAP8[$538 >> 0] = $2; //@line 11863
  $539 = $ReallocAsyncCtx5 + 8 | 0; //@line 11864
  HEAP32[$539 >> 2] = $4; //@line 11865
  $540 = $ReallocAsyncCtx5 + 12 | 0; //@line 11866
  HEAP8[$540 >> 0] = $6; //@line 11867
  $541 = $ReallocAsyncCtx5 + 13 | 0; //@line 11868
  HEAP8[$541 >> 0] = $8; //@line 11869
  $542 = $ReallocAsyncCtx5 + 16 | 0; //@line 11870
  HEAP32[$542 >> 2] = $10; //@line 11871
  $543 = $ReallocAsyncCtx5 + 20 | 0; //@line 11872
  HEAP32[$543 >> 2] = $12; //@line 11873
  $544 = $ReallocAsyncCtx5 + 24 | 0; //@line 11874
  HEAP32[$544 >> 2] = $14; //@line 11875
  $545 = $ReallocAsyncCtx5 + 28 | 0; //@line 11876
  HEAP8[$545 >> 0] = $531; //@line 11877
  $546 = $ReallocAsyncCtx5 + 32 | 0; //@line 11878
  HEAP32[$546 >> 2] = $16; //@line 11879
  $547 = $ReallocAsyncCtx5 + 36 | 0; //@line 11880
  HEAP32[$547 >> 2] = $18; //@line 11881
  $548 = $ReallocAsyncCtx5 + 40 | 0; //@line 11882
  HEAP32[$548 >> 2] = $20; //@line 11883
  $549 = $ReallocAsyncCtx5 + 44 | 0; //@line 11884
  HEAP32[$549 >> 2] = $22; //@line 11885
  $550 = $ReallocAsyncCtx5 + 48 | 0; //@line 11886
  HEAP32[$550 >> 2] = $24; //@line 11887
  $551 = $ReallocAsyncCtx5 + 52 | 0; //@line 11888
  HEAP32[$551 >> 2] = $26; //@line 11889
  $552 = $ReallocAsyncCtx5 + 56 | 0; //@line 11890
  HEAP32[$552 >> 2] = $28; //@line 11891
  $553 = $ReallocAsyncCtx5 + 60 | 0; //@line 11892
  HEAP32[$553 >> 2] = $$0107$be; //@line 11893
  $554 = $ReallocAsyncCtx5 + 64 | 0; //@line 11894
  HEAP32[$554 >> 2] = $30; //@line 11895
  $555 = $ReallocAsyncCtx5 + 68 | 0; //@line 11896
  HEAP32[$555 >> 2] = $34; //@line 11897
  $556 = $ReallocAsyncCtx5 + 72 | 0; //@line 11898
  HEAP32[$556 >> 2] = $36; //@line 11899
  $557 = $ReallocAsyncCtx5 + 76 | 0; //@line 11900
  HEAP32[$557 >> 2] = $38; //@line 11901
  $558 = $ReallocAsyncCtx5 + 80 | 0; //@line 11902
  HEAP32[$558 >> 2] = $40; //@line 11903
  $559 = $ReallocAsyncCtx5 + 84 | 0; //@line 11904
  HEAP8[$559 >> 0] = $525; //@line 11905
  $560 = $ReallocAsyncCtx5 + 88 | 0; //@line 11906
  HEAP32[$560 >> 2] = $42; //@line 11907
  $561 = $ReallocAsyncCtx5 + 92 | 0; //@line 11908
  HEAP32[$561 >> 2] = $46; //@line 11909
  $562 = $ReallocAsyncCtx5 + 96 | 0; //@line 11910
  HEAP32[$562 >> 2] = $48; //@line 11911
  $563 = $ReallocAsyncCtx5 + 100 | 0; //@line 11912
  HEAP32[$563 >> 2] = $50; //@line 11913
  $564 = $ReallocAsyncCtx5 + 104 | 0; //@line 11914
  HEAP32[$564 >> 2] = $52; //@line 11915
  $565 = $ReallocAsyncCtx5 + 108 | 0; //@line 11916
  HEAP32[$565 >> 2] = $54; //@line 11917
  $566 = $ReallocAsyncCtx5 + 112 | 0; //@line 11918
  HEAP32[$566 >> 2] = $56; //@line 11919
  $567 = $ReallocAsyncCtx5 + 116 | 0; //@line 11920
  HEAP32[$567 >> 2] = $58; //@line 11921
  $568 = $ReallocAsyncCtx5 + 120 | 0; //@line 11922
  HEAP32[$568 >> 2] = $60; //@line 11923
  $569 = $ReallocAsyncCtx5 + 124 | 0; //@line 11924
  HEAP32[$569 >> 2] = $62; //@line 11925
  $570 = $ReallocAsyncCtx5 + 128 | 0; //@line 11926
  HEAP32[$570 >> 2] = $64; //@line 11927
  $571 = $ReallocAsyncCtx5 + 132 | 0; //@line 11928
  HEAP32[$571 >> 2] = $66; //@line 11929
  $572 = $ReallocAsyncCtx5 + 136 | 0; //@line 11930
  HEAP32[$572 >> 2] = $68; //@line 11931
  $573 = $ReallocAsyncCtx5 + 140 | 0; //@line 11932
  HEAP32[$573 >> 2] = $70; //@line 11933
  $574 = $ReallocAsyncCtx5 + 144 | 0; //@line 11934
  HEAP32[$574 >> 2] = $72; //@line 11935
  $575 = $ReallocAsyncCtx5 + 148 | 0; //@line 11936
  HEAP32[$575 >> 2] = $74; //@line 11937
  $576 = $ReallocAsyncCtx5 + 152 | 0; //@line 11938
  HEAP32[$576 >> 2] = $76; //@line 11939
  $577 = $ReallocAsyncCtx5 + 156 | 0; //@line 11940
  HEAP32[$577 >> 2] = $78; //@line 11941
  $578 = $ReallocAsyncCtx5 + 160 | 0; //@line 11942
  HEAP32[$578 >> 2] = $80; //@line 11943
  $579 = $ReallocAsyncCtx5 + 164 | 0; //@line 11944
  HEAP32[$579 >> 2] = $82; //@line 11945
  $580 = $ReallocAsyncCtx5 + 168 | 0; //@line 11946
  HEAP32[$580 >> 2] = $84; //@line 11947
  $581 = $ReallocAsyncCtx5 + 172 | 0; //@line 11948
  HEAP32[$581 >> 2] = $86; //@line 11949
  $582 = $ReallocAsyncCtx5 + 176 | 0; //@line 11950
  HEAP32[$582 >> 2] = $88; //@line 11951
  $583 = $ReallocAsyncCtx5 + 180 | 0; //@line 11952
  HEAP32[$583 >> 2] = $90; //@line 11953
  $584 = $ReallocAsyncCtx5 + 184 | 0; //@line 11954
  HEAP32[$584 >> 2] = $92; //@line 11955
  $585 = $ReallocAsyncCtx5 + 188 | 0; //@line 11956
  HEAP8[$585 >> 0] = $533; //@line 11957
  $586 = $ReallocAsyncCtx5 + 192 | 0; //@line 11958
  HEAP32[$586 >> 2] = $94; //@line 11959
  $587 = $ReallocAsyncCtx5 + 196 | 0; //@line 11960
  HEAP32[$587 >> 2] = $96; //@line 11961
  $588 = $ReallocAsyncCtx5 + 200 | 0; //@line 11962
  HEAP32[$588 >> 2] = $98; //@line 11963
  $589 = $ReallocAsyncCtx5 + 204 | 0; //@line 11964
  HEAP32[$589 >> 2] = $100; //@line 11965
  $590 = $ReallocAsyncCtx5 + 208 | 0; //@line 11966
  HEAP32[$590 >> 2] = $102; //@line 11967
  $591 = $ReallocAsyncCtx5 + 212 | 0; //@line 11968
  HEAP32[$591 >> 2] = $104; //@line 11969
  $592 = $ReallocAsyncCtx5 + 216 | 0; //@line 11970
  HEAP32[$592 >> 2] = $529; //@line 11971
  $593 = $ReallocAsyncCtx5 + 220 | 0; //@line 11972
  HEAP32[$593 >> 2] = $106; //@line 11973
  $594 = $ReallocAsyncCtx5 + 224 | 0; //@line 11974
  HEAP32[$594 >> 2] = $108; //@line 11975
  $595 = $ReallocAsyncCtx5 + 228 | 0; //@line 11976
  HEAP32[$595 >> 2] = $110; //@line 11977
  $596 = $ReallocAsyncCtx5 + 232 | 0; //@line 11978
  HEAP32[$596 >> 2] = $112; //@line 11979
  $597 = $ReallocAsyncCtx5 + 236 | 0; //@line 11980
  HEAP32[$597 >> 2] = $114; //@line 11981
  $598 = $ReallocAsyncCtx5 + 240 | 0; //@line 11982
  HEAP32[$598 >> 2] = $116; //@line 11983
  $599 = $ReallocAsyncCtx5 + 244 | 0; //@line 11984
  HEAP32[$599 >> 2] = $118; //@line 11985
  sp = STACKTOP; //@line 11986
  return;
 } else if ((label | 0) == 35) {
  $604 = HEAP8[$14 + ($121 & 255) >> 0] | 0; //@line 11993
  $617 = $$0$be + 5 << 24 >> 24; //@line 12006
  $624 = (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 12013
  $627 = HEAP32[(HEAP32[$98 >> 2] | 0) + 48 >> 2] | 0; //@line 12016
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 12017
  $628 = FUNCTION_TABLE_iiii[$627 & 31]($28, $604, $624) | 0; //@line 12018
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 12021
   $629 = $ReallocAsyncCtx6 + 4 | 0; //@line 12022
   HEAP8[$629 >> 0] = $2; //@line 12023
   $630 = $ReallocAsyncCtx6 + 8 | 0; //@line 12024
   HEAP32[$630 >> 2] = $4; //@line 12025
   $631 = $ReallocAsyncCtx6 + 12 | 0; //@line 12026
   HEAP8[$631 >> 0] = $6; //@line 12027
   $632 = $ReallocAsyncCtx6 + 13 | 0; //@line 12028
   HEAP8[$632 >> 0] = $8; //@line 12029
   $633 = $ReallocAsyncCtx6 + 16 | 0; //@line 12030
   HEAP32[$633 >> 2] = $10; //@line 12031
   $634 = $ReallocAsyncCtx6 + 20 | 0; //@line 12032
   HEAP32[$634 >> 2] = $12; //@line 12033
   $635 = $ReallocAsyncCtx6 + 24 | 0; //@line 12034
   HEAP32[$635 >> 2] = $14; //@line 12035
   $636 = $ReallocAsyncCtx6 + 28 | 0; //@line 12036
   HEAP8[$636 >> 0] = $617; //@line 12037
   $637 = $ReallocAsyncCtx6 + 32 | 0; //@line 12038
   HEAP32[$637 >> 2] = $16; //@line 12039
   $638 = $ReallocAsyncCtx6 + 36 | 0; //@line 12040
   HEAP32[$638 >> 2] = $18; //@line 12041
   $639 = $ReallocAsyncCtx6 + 40 | 0; //@line 12042
   HEAP32[$639 >> 2] = $20; //@line 12043
   $640 = $ReallocAsyncCtx6 + 44 | 0; //@line 12044
   HEAP32[$640 >> 2] = $22; //@line 12045
   $641 = $ReallocAsyncCtx6 + 48 | 0; //@line 12046
   HEAP32[$641 >> 2] = $24; //@line 12047
   $642 = $ReallocAsyncCtx6 + 52 | 0; //@line 12048
   HEAP32[$642 >> 2] = $26; //@line 12049
   $643 = $ReallocAsyncCtx6 + 56 | 0; //@line 12050
   HEAP32[$643 >> 2] = $28; //@line 12051
   $644 = $ReallocAsyncCtx6 + 60 | 0; //@line 12052
   HEAP32[$644 >> 2] = $30; //@line 12053
   $645 = $ReallocAsyncCtx6 + 64 | 0; //@line 12054
   HEAP32[$645 >> 2] = $34; //@line 12055
   $646 = $ReallocAsyncCtx6 + 68 | 0; //@line 12056
   HEAP32[$646 >> 2] = $36; //@line 12057
   $647 = $ReallocAsyncCtx6 + 72 | 0; //@line 12058
   HEAP32[$647 >> 2] = $38; //@line 12059
   $648 = $ReallocAsyncCtx6 + 76 | 0; //@line 12060
   HEAP32[$648 >> 2] = $40; //@line 12061
   $649 = $ReallocAsyncCtx6 + 80 | 0; //@line 12062
   HEAP32[$649 >> 2] = $42; //@line 12063
   $650 = $ReallocAsyncCtx6 + 84 | 0; //@line 12064
   HEAP32[$650 >> 2] = $46; //@line 12065
   $651 = $ReallocAsyncCtx6 + 88 | 0; //@line 12066
   HEAP32[$651 >> 2] = $48; //@line 12067
   $652 = $ReallocAsyncCtx6 + 92 | 0; //@line 12068
   HEAP32[$652 >> 2] = $50; //@line 12069
   $653 = $ReallocAsyncCtx6 + 96 | 0; //@line 12070
   HEAP32[$653 >> 2] = $52; //@line 12071
   $654 = $ReallocAsyncCtx6 + 100 | 0; //@line 12072
   HEAP32[$654 >> 2] = $54; //@line 12073
   $655 = $ReallocAsyncCtx6 + 104 | 0; //@line 12074
   HEAP32[$655 >> 2] = $56; //@line 12075
   $656 = $ReallocAsyncCtx6 + 108 | 0; //@line 12076
   HEAP32[$656 >> 2] = $58; //@line 12077
   $657 = $ReallocAsyncCtx6 + 112 | 0; //@line 12078
   HEAP32[$657 >> 2] = $60; //@line 12079
   $658 = $ReallocAsyncCtx6 + 116 | 0; //@line 12080
   HEAP32[$658 >> 2] = $62; //@line 12081
   $659 = $ReallocAsyncCtx6 + 120 | 0; //@line 12082
   HEAP32[$659 >> 2] = $64; //@line 12083
   $660 = $ReallocAsyncCtx6 + 124 | 0; //@line 12084
   HEAP32[$660 >> 2] = $66; //@line 12085
   $661 = $ReallocAsyncCtx6 + 128 | 0; //@line 12086
   HEAP32[$661 >> 2] = $68; //@line 12087
   $662 = $ReallocAsyncCtx6 + 132 | 0; //@line 12088
   HEAP32[$662 >> 2] = $70; //@line 12089
   $663 = $ReallocAsyncCtx6 + 136 | 0; //@line 12090
   HEAP32[$663 >> 2] = $72; //@line 12091
   $664 = $ReallocAsyncCtx6 + 140 | 0; //@line 12092
   HEAP32[$664 >> 2] = $74; //@line 12093
   $665 = $ReallocAsyncCtx6 + 144 | 0; //@line 12094
   HEAP32[$665 >> 2] = $76; //@line 12095
   $666 = $ReallocAsyncCtx6 + 148 | 0; //@line 12096
   HEAP32[$666 >> 2] = $78; //@line 12097
   $667 = $ReallocAsyncCtx6 + 152 | 0; //@line 12098
   HEAP32[$667 >> 2] = $80; //@line 12099
   $668 = $ReallocAsyncCtx6 + 156 | 0; //@line 12100
   HEAP32[$668 >> 2] = $82; //@line 12101
   $669 = $ReallocAsyncCtx6 + 160 | 0; //@line 12102
   HEAP32[$669 >> 2] = $84; //@line 12103
   $670 = $ReallocAsyncCtx6 + 164 | 0; //@line 12104
   HEAP32[$670 >> 2] = $86; //@line 12105
   $671 = $ReallocAsyncCtx6 + 168 | 0; //@line 12106
   HEAP32[$671 >> 2] = $88; //@line 12107
   $672 = $ReallocAsyncCtx6 + 172 | 0; //@line 12108
   HEAP32[$672 >> 2] = $90; //@line 12109
   $673 = $ReallocAsyncCtx6 + 176 | 0; //@line 12110
   HEAP32[$673 >> 2] = $92; //@line 12111
   $674 = $ReallocAsyncCtx6 + 180 | 0; //@line 12112
   HEAP32[$674 >> 2] = $94; //@line 12113
   $675 = $ReallocAsyncCtx6 + 184 | 0; //@line 12114
   HEAP32[$675 >> 2] = $96; //@line 12115
   $676 = $ReallocAsyncCtx6 + 188 | 0; //@line 12116
   HEAP32[$676 >> 2] = $98; //@line 12117
   $677 = $ReallocAsyncCtx6 + 192 | 0; //@line 12118
   HEAP32[$677 >> 2] = $100; //@line 12119
   $678 = $ReallocAsyncCtx6 + 196 | 0; //@line 12120
   HEAP32[$678 >> 2] = $102; //@line 12121
   $679 = $ReallocAsyncCtx6 + 200 | 0; //@line 12122
   HEAP32[$679 >> 2] = $104; //@line 12123
   $680 = $ReallocAsyncCtx6 + 204 | 0; //@line 12124
   HEAP32[$680 >> 2] = $106; //@line 12125
   $681 = $ReallocAsyncCtx6 + 208 | 0; //@line 12126
   HEAP32[$681 >> 2] = $108; //@line 12127
   $682 = $ReallocAsyncCtx6 + 212 | 0; //@line 12128
   HEAP32[$682 >> 2] = $110; //@line 12129
   $683 = $ReallocAsyncCtx6 + 216 | 0; //@line 12130
   HEAP32[$683 >> 2] = $112; //@line 12131
   $684 = $ReallocAsyncCtx6 + 220 | 0; //@line 12132
   HEAP32[$684 >> 2] = $114; //@line 12133
   $685 = $ReallocAsyncCtx6 + 224 | 0; //@line 12134
   HEAP32[$685 >> 2] = $116; //@line 12135
   $686 = $ReallocAsyncCtx6 + 228 | 0; //@line 12136
   HEAP32[$686 >> 2] = $118; //@line 12137
   sp = STACKTOP; //@line 12138
   return;
  }
  HEAP8[___async_retval >> 0] = $628; //@line 12142
  ___async_unwind = 0; //@line 12143
  HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 12144
  $629 = $ReallocAsyncCtx6 + 4 | 0; //@line 12145
  HEAP8[$629 >> 0] = $2; //@line 12146
  $630 = $ReallocAsyncCtx6 + 8 | 0; //@line 12147
  HEAP32[$630 >> 2] = $4; //@line 12148
  $631 = $ReallocAsyncCtx6 + 12 | 0; //@line 12149
  HEAP8[$631 >> 0] = $6; //@line 12150
  $632 = $ReallocAsyncCtx6 + 13 | 0; //@line 12151
  HEAP8[$632 >> 0] = $8; //@line 12152
  $633 = $ReallocAsyncCtx6 + 16 | 0; //@line 12153
  HEAP32[$633 >> 2] = $10; //@line 12154
  $634 = $ReallocAsyncCtx6 + 20 | 0; //@line 12155
  HEAP32[$634 >> 2] = $12; //@line 12156
  $635 = $ReallocAsyncCtx6 + 24 | 0; //@line 12157
  HEAP32[$635 >> 2] = $14; //@line 12158
  $636 = $ReallocAsyncCtx6 + 28 | 0; //@line 12159
  HEAP8[$636 >> 0] = $617; //@line 12160
  $637 = $ReallocAsyncCtx6 + 32 | 0; //@line 12161
  HEAP32[$637 >> 2] = $16; //@line 12162
  $638 = $ReallocAsyncCtx6 + 36 | 0; //@line 12163
  HEAP32[$638 >> 2] = $18; //@line 12164
  $639 = $ReallocAsyncCtx6 + 40 | 0; //@line 12165
  HEAP32[$639 >> 2] = $20; //@line 12166
  $640 = $ReallocAsyncCtx6 + 44 | 0; //@line 12167
  HEAP32[$640 >> 2] = $22; //@line 12168
  $641 = $ReallocAsyncCtx6 + 48 | 0; //@line 12169
  HEAP32[$641 >> 2] = $24; //@line 12170
  $642 = $ReallocAsyncCtx6 + 52 | 0; //@line 12171
  HEAP32[$642 >> 2] = $26; //@line 12172
  $643 = $ReallocAsyncCtx6 + 56 | 0; //@line 12173
  HEAP32[$643 >> 2] = $28; //@line 12174
  $644 = $ReallocAsyncCtx6 + 60 | 0; //@line 12175
  HEAP32[$644 >> 2] = $30; //@line 12176
  $645 = $ReallocAsyncCtx6 + 64 | 0; //@line 12177
  HEAP32[$645 >> 2] = $34; //@line 12178
  $646 = $ReallocAsyncCtx6 + 68 | 0; //@line 12179
  HEAP32[$646 >> 2] = $36; //@line 12180
  $647 = $ReallocAsyncCtx6 + 72 | 0; //@line 12181
  HEAP32[$647 >> 2] = $38; //@line 12182
  $648 = $ReallocAsyncCtx6 + 76 | 0; //@line 12183
  HEAP32[$648 >> 2] = $40; //@line 12184
  $649 = $ReallocAsyncCtx6 + 80 | 0; //@line 12185
  HEAP32[$649 >> 2] = $42; //@line 12186
  $650 = $ReallocAsyncCtx6 + 84 | 0; //@line 12187
  HEAP32[$650 >> 2] = $46; //@line 12188
  $651 = $ReallocAsyncCtx6 + 88 | 0; //@line 12189
  HEAP32[$651 >> 2] = $48; //@line 12190
  $652 = $ReallocAsyncCtx6 + 92 | 0; //@line 12191
  HEAP32[$652 >> 2] = $50; //@line 12192
  $653 = $ReallocAsyncCtx6 + 96 | 0; //@line 12193
  HEAP32[$653 >> 2] = $52; //@line 12194
  $654 = $ReallocAsyncCtx6 + 100 | 0; //@line 12195
  HEAP32[$654 >> 2] = $54; //@line 12196
  $655 = $ReallocAsyncCtx6 + 104 | 0; //@line 12197
  HEAP32[$655 >> 2] = $56; //@line 12198
  $656 = $ReallocAsyncCtx6 + 108 | 0; //@line 12199
  HEAP32[$656 >> 2] = $58; //@line 12200
  $657 = $ReallocAsyncCtx6 + 112 | 0; //@line 12201
  HEAP32[$657 >> 2] = $60; //@line 12202
  $658 = $ReallocAsyncCtx6 + 116 | 0; //@line 12203
  HEAP32[$658 >> 2] = $62; //@line 12204
  $659 = $ReallocAsyncCtx6 + 120 | 0; //@line 12205
  HEAP32[$659 >> 2] = $64; //@line 12206
  $660 = $ReallocAsyncCtx6 + 124 | 0; //@line 12207
  HEAP32[$660 >> 2] = $66; //@line 12208
  $661 = $ReallocAsyncCtx6 + 128 | 0; //@line 12209
  HEAP32[$661 >> 2] = $68; //@line 12210
  $662 = $ReallocAsyncCtx6 + 132 | 0; //@line 12211
  HEAP32[$662 >> 2] = $70; //@line 12212
  $663 = $ReallocAsyncCtx6 + 136 | 0; //@line 12213
  HEAP32[$663 >> 2] = $72; //@line 12214
  $664 = $ReallocAsyncCtx6 + 140 | 0; //@line 12215
  HEAP32[$664 >> 2] = $74; //@line 12216
  $665 = $ReallocAsyncCtx6 + 144 | 0; //@line 12217
  HEAP32[$665 >> 2] = $76; //@line 12218
  $666 = $ReallocAsyncCtx6 + 148 | 0; //@line 12219
  HEAP32[$666 >> 2] = $78; //@line 12220
  $667 = $ReallocAsyncCtx6 + 152 | 0; //@line 12221
  HEAP32[$667 >> 2] = $80; //@line 12222
  $668 = $ReallocAsyncCtx6 + 156 | 0; //@line 12223
  HEAP32[$668 >> 2] = $82; //@line 12224
  $669 = $ReallocAsyncCtx6 + 160 | 0; //@line 12225
  HEAP32[$669 >> 2] = $84; //@line 12226
  $670 = $ReallocAsyncCtx6 + 164 | 0; //@line 12227
  HEAP32[$670 >> 2] = $86; //@line 12228
  $671 = $ReallocAsyncCtx6 + 168 | 0; //@line 12229
  HEAP32[$671 >> 2] = $88; //@line 12230
  $672 = $ReallocAsyncCtx6 + 172 | 0; //@line 12231
  HEAP32[$672 >> 2] = $90; //@line 12232
  $673 = $ReallocAsyncCtx6 + 176 | 0; //@line 12233
  HEAP32[$673 >> 2] = $92; //@line 12234
  $674 = $ReallocAsyncCtx6 + 180 | 0; //@line 12235
  HEAP32[$674 >> 2] = $94; //@line 12236
  $675 = $ReallocAsyncCtx6 + 184 | 0; //@line 12237
  HEAP32[$675 >> 2] = $96; //@line 12238
  $676 = $ReallocAsyncCtx6 + 188 | 0; //@line 12239
  HEAP32[$676 >> 2] = $98; //@line 12240
  $677 = $ReallocAsyncCtx6 + 192 | 0; //@line 12241
  HEAP32[$677 >> 2] = $100; //@line 12242
  $678 = $ReallocAsyncCtx6 + 196 | 0; //@line 12243
  HEAP32[$678 >> 2] = $102; //@line 12244
  $679 = $ReallocAsyncCtx6 + 200 | 0; //@line 12245
  HEAP32[$679 >> 2] = $104; //@line 12246
  $680 = $ReallocAsyncCtx6 + 204 | 0; //@line 12247
  HEAP32[$680 >> 2] = $106; //@line 12248
  $681 = $ReallocAsyncCtx6 + 208 | 0; //@line 12249
  HEAP32[$681 >> 2] = $108; //@line 12250
  $682 = $ReallocAsyncCtx6 + 212 | 0; //@line 12251
  HEAP32[$682 >> 2] = $110; //@line 12252
  $683 = $ReallocAsyncCtx6 + 216 | 0; //@line 12253
  HEAP32[$683 >> 2] = $112; //@line 12254
  $684 = $ReallocAsyncCtx6 + 220 | 0; //@line 12255
  HEAP32[$684 >> 2] = $114; //@line 12256
  $685 = $ReallocAsyncCtx6 + 224 | 0; //@line 12257
  HEAP32[$685 >> 2] = $116; //@line 12258
  $686 = $ReallocAsyncCtx6 + 228 | 0; //@line 12259
  HEAP32[$686 >> 2] = $118; //@line 12260
  sp = STACKTOP; //@line 12261
  return;
 } else if ((label | 0) == 38) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 12266
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_295($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $138 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $212 = 0, $215 = 0, $22 = 0, $222 = 0, $223 = 0, $229 = 0, $24 = 0, $248 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $319 = 0, $32 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $385 = 0, $386 = 0, $4 = 0, $40 = 0, $400 = 0, $42 = 0, $421 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $489 = 0, $493 = 0, $497 = 0, $50 = 0, $502 = 0, $503 = 0, $507 = 0, $511 = 0, $513 = 0, $515 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $583 = 0, $590 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $611 = 0, $618 = 0, $62 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18255
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 18257
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18259
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 18261
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 18263
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 18265
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 18267
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 18269
 $16 = HEAP8[$0 + 28 >> 0] | 0; //@line 18271
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 18273
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 18275
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 18277
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 18279
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 18281
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 18283
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 18285
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 18287
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 18289
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 18291
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 18293
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 18295
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 18297
 $44 = HEAP8[$0 + 84 >> 0] | 0; //@line 18299
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 18301
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 18303
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 18305
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 18307
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 18309
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 18311
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 18313
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 18315
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 18317
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 18319
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 18321
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 18323
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 18325
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 18327
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 18329
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 18331
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 18333
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 18335
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 18337
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 18339
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 18341
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 18343
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 18345
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 18347
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 18349
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 18353
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 18355
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 18357
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 18359
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 18361
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 18363
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 18367
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 18369
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 18371
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 18373
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 18375
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 18377
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 18379
 if (HEAP8[___async_retval >> 0] & 1) {
  $583 = HEAP32[$0 + 216 >> 2] & 15; //@line 18384
  HEAP8[$78 >> 0] = HEAP8[$0 + 188 >> 0] | 0; //@line 18385
  HEAP8[$116 >> 0] = $16; //@line 18386
  HEAPF32[$120 >> 2] = +(HEAPU8[13357 + $583 >> 0] | 0); //@line 18390
  $590 = HEAP8[$26 >> 0] | 0; //@line 18394
  $591 = $590 & 255; //@line 18395
  if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) > ($591 | 0)) {
   HEAP8[$26 >> 0] = $590 + 1 << 24 >> 24; //@line 18400
   HEAP8[$10 + 4 + $591 >> 0] = 9; //@line 18401
   HEAP8[$46 >> 0] = 1; //@line 18402
   $$0$be = $44; //@line 18403
   $$0107$be = 0; //@line 18403
  } else {
   $$0$be = $44; //@line 18405
   $$0107$be = -1010; //@line 18405
  }
 } else {
  $$0$be = $44; //@line 18408
  $$0107$be = $32; //@line 18408
 }
 L5 : while (1) {
  if (($$0$be & 255) >= ($8 & 255)) {
   label = 33; //@line 18413
   break;
  }
  $127 = $$0$be + 1 << 24 >> 24; //@line 18417
  switch (HEAP8[$14 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 18422
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 18427
    break L5;
    break;
   }
  case 7:
   {
    label = 18; //@line 18432
    break L5;
    break;
   }
  case 9:
   {
    label = 24; //@line 18437
    break L5;
    break;
   }
  case 10:
   {
    label = 30; //@line 18442
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$122 >> 2] = 0; //@line 18447
    HEAP8[$4 >> 0] = HEAP8[$14 + ($127 & 255) >> 0] | 0; //@line 18452
    HEAP8[$34 >> 0] = HEAP8[$14 + ($$0$be + 2 & 255) >> 0] | 0; //@line 18457
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 18458
    continue L5;
    break;
   }
  case 4:
   {
    $212 = $$0$be + 2 << 24 >> 24; //@line 18463
    $215 = HEAP8[$14 + ($127 & 255) >> 0] | 0; //@line 18466
    HEAP8[$40 >> 0] = $215; //@line 18467
    HEAP16[$56 >> 1] = 1 << ($215 & 255); //@line 18471
    $222 = HEAP8[$26 >> 0] | 0; //@line 18475
    $223 = $222 & 255; //@line 18476
    if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) <= ($223 | 0)) {
     $$0$be = $212; //@line 18479
     $$0107$be = -1010; //@line 18479
     continue L5;
    }
    HEAP8[$26 >> 0] = $222 + 1 << 24 >> 24; //@line 18484
    HEAP8[$10 + 4 + $223 >> 0] = 4; //@line 18485
    HEAP8[$46 >> 0] = 1; //@line 18486
    $$0$be = $212; //@line 18487
    $$0107$be = 0; //@line 18487
    continue L5;
    break;
   }
  case 6:
   {
    $319 = HEAP32[$18 >> 2] | 0; //@line 18492
    if ($319 | 0) {
     label = 13; //@line 18495
     break L5;
    }
    $385 = HEAP8[$26 >> 0] | 0; //@line 18501
    $386 = $385 & 255; //@line 18502
    if ((128 - (HEAPU8[$12 >> 0] | 0) - $386 | 0) <= 2) {
     $$0$be = $127; //@line 18506
     $$0107$be = -1010; //@line 18506
     continue L5;
    }
    HEAP8[$10 + 4 + $386 >> 0] = 6; //@line 18511
    HEAP8[($385 + 1 & 255) + ($10 + 4) >> 0] = -1; //@line 18515
    HEAP8[$26 >> 0] = $385 + 3 << 24 >> 24; //@line 18517
    HEAP8[($385 + 2 & 255) + ($10 + 4) >> 0] = $2; //@line 18520
    HEAP8[$46 >> 0] = 1; //@line 18521
    $$0$be = $127; //@line 18522
    $$0107$be = 0; //@line 18522
    continue L5;
    break;
   }
  case 8:
   {
    $489 = $$0$be + 2 << 24 >> 24; //@line 18527
    $493 = HEAP8[$14 + ($127 & 255) >> 0] & 15; //@line 18531
    $497 = ($493 + ($493 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 18536
    HEAP32[$98 >> 2] = $497; //@line 18537
    HEAP32[$70 >> 2] = $497 + 1e3; //@line 18539
    $502 = HEAP8[$26 >> 0] | 0; //@line 18543
    $503 = $502 & 255; //@line 18544
    if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) <= ($503 | 0)) {
     $$0$be = $489; //@line 18547
     $$0107$be = -1010; //@line 18547
     continue L5;
    }
    HEAP8[$26 >> 0] = $502 + 1 << 24 >> 24; //@line 18552
    HEAP8[$10 + 4 + $503 >> 0] = 8; //@line 18553
    HEAP8[$118 >> 0] = 1; //@line 18554
    HEAP8[$46 >> 0] = 1; //@line 18555
    $$0$be = $489; //@line 18556
    $$0107$be = 0; //@line 18556
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $127; //@line 18561
    $$0107$be = -1013; //@line 18561
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$58 >> 0] = 0; //@line 18567
  HEAP8[$90 >> 0] = 0; //@line 18568
  HEAP8[$94 >> 0] = 0; //@line 18569
  HEAP8[$68 >> 0] = 0; //@line 18570
  $138 = $127 & 255; //@line 18571
  $139 = $138 + -1 | 0; //@line 18572
  HEAP32[$36 >> 2] = $14 + $139; //@line 18574
  HEAP8[$38 >> 0] = $106 - $139; //@line 18577
  HEAP8[$62 >> 0] = HEAP8[$54 >> 0] | 0; //@line 18579
  HEAP8[$74 >> 0] = HEAP8[$78 >> 0] | 0; //@line 18581
  HEAP8[$88 >> 0] = HEAP8[$100 >> 0] | 0; //@line 18583
  HEAP8[$108 >> 0] = HEAP8[$112 >> 0] | 0; //@line 18585
  HEAP8[$20 >> 0] = HEAP8[$114 >> 0] | 0; //@line 18587
  $150 = HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] | 0; //@line 18590
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 18591
  $151 = FUNCTION_TABLE_iiiiiii[$150 & 3]($30, $52, $58, $90, $94, $68) | 0; //@line 18592
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 473; //@line 18595
   $152 = $ReallocAsyncCtx + 4 | 0; //@line 18596
   HEAP8[$152 >> 0] = $2; //@line 18597
   $153 = $ReallocAsyncCtx + 8 | 0; //@line 18598
   HEAP32[$153 >> 2] = $4; //@line 18599
   $154 = $ReallocAsyncCtx + 12 | 0; //@line 18600
   HEAP8[$154 >> 0] = $6; //@line 18601
   $155 = $ReallocAsyncCtx + 13 | 0; //@line 18602
   HEAP8[$155 >> 0] = $8; //@line 18603
   $156 = $ReallocAsyncCtx + 16 | 0; //@line 18604
   HEAP32[$156 >> 2] = $10; //@line 18605
   $157 = $ReallocAsyncCtx + 20 | 0; //@line 18606
   HEAP32[$157 >> 2] = $12; //@line 18607
   $158 = $ReallocAsyncCtx + 24 | 0; //@line 18608
   HEAP32[$158 >> 2] = $14; //@line 18609
   $159 = $ReallocAsyncCtx + 28 | 0; //@line 18610
   HEAP32[$159 >> 2] = $18; //@line 18611
   $160 = $ReallocAsyncCtx + 32 | 0; //@line 18612
   HEAP32[$160 >> 2] = $20; //@line 18613
   $161 = $ReallocAsyncCtx + 36 | 0; //@line 18614
   HEAP32[$161 >> 2] = $22; //@line 18615
   $162 = $ReallocAsyncCtx + 40 | 0; //@line 18616
   HEAP32[$162 >> 2] = $24; //@line 18617
   $163 = $ReallocAsyncCtx + 44 | 0; //@line 18618
   HEAP32[$163 >> 2] = $26; //@line 18619
   $164 = $ReallocAsyncCtx + 48 | 0; //@line 18620
   HEAP32[$164 >> 2] = $28; //@line 18621
   $165 = $ReallocAsyncCtx + 52 | 0; //@line 18622
   HEAP32[$165 >> 2] = $30; //@line 18623
   $166 = $ReallocAsyncCtx + 56 | 0; //@line 18624
   HEAP32[$166 >> 2] = $34; //@line 18625
   $167 = $ReallocAsyncCtx + 60 | 0; //@line 18626
   HEAP32[$167 >> 2] = $$0107$be; //@line 18627
   $168 = $ReallocAsyncCtx + 64 | 0; //@line 18628
   HEAP32[$168 >> 2] = $36; //@line 18629
   $169 = $ReallocAsyncCtx + 68 | 0; //@line 18630
   HEAP32[$169 >> 2] = $38; //@line 18631
   $170 = $ReallocAsyncCtx + 72 | 0; //@line 18632
   HEAP32[$170 >> 2] = $40; //@line 18633
   $171 = $ReallocAsyncCtx + 76 | 0; //@line 18634
   HEAP32[$171 >> 2] = $42; //@line 18635
   $172 = $ReallocAsyncCtx + 80 | 0; //@line 18636
   HEAP32[$172 >> 2] = $46; //@line 18637
   $173 = $ReallocAsyncCtx + 84 | 0; //@line 18638
   HEAP32[$173 >> 2] = $138; //@line 18639
   $174 = $ReallocAsyncCtx + 88 | 0; //@line 18640
   HEAP32[$174 >> 2] = $48; //@line 18641
   $175 = $ReallocAsyncCtx + 92 | 0; //@line 18642
   HEAP32[$175 >> 2] = $50; //@line 18643
   $176 = $ReallocAsyncCtx + 96 | 0; //@line 18644
   HEAP32[$176 >> 2] = $52; //@line 18645
   $177 = $ReallocAsyncCtx + 100 | 0; //@line 18646
   HEAP32[$177 >> 2] = $54; //@line 18647
   $178 = $ReallocAsyncCtx + 104 | 0; //@line 18648
   HEAP32[$178 >> 2] = $56; //@line 18649
   $179 = $ReallocAsyncCtx + 108 | 0; //@line 18650
   HEAP32[$179 >> 2] = $58; //@line 18651
   $180 = $ReallocAsyncCtx + 112 | 0; //@line 18652
   HEAP32[$180 >> 2] = $60; //@line 18653
   $181 = $ReallocAsyncCtx + 116 | 0; //@line 18654
   HEAP32[$181 >> 2] = $62; //@line 18655
   $182 = $ReallocAsyncCtx + 120 | 0; //@line 18656
   HEAP32[$182 >> 2] = $64; //@line 18657
   $183 = $ReallocAsyncCtx + 124 | 0; //@line 18658
   HEAP32[$183 >> 2] = $66; //@line 18659
   $184 = $ReallocAsyncCtx + 128 | 0; //@line 18660
   HEAP32[$184 >> 2] = $68; //@line 18661
   $185 = $ReallocAsyncCtx + 132 | 0; //@line 18662
   HEAP32[$185 >> 2] = $70; //@line 18663
   $186 = $ReallocAsyncCtx + 136 | 0; //@line 18664
   HEAP32[$186 >> 2] = $72; //@line 18665
   $187 = $ReallocAsyncCtx + 140 | 0; //@line 18666
   HEAP32[$187 >> 2] = $74; //@line 18667
   $188 = $ReallocAsyncCtx + 144 | 0; //@line 18668
   HEAP32[$188 >> 2] = $76; //@line 18669
   $189 = $ReallocAsyncCtx + 148 | 0; //@line 18670
   HEAP32[$189 >> 2] = $78; //@line 18671
   $190 = $ReallocAsyncCtx + 152 | 0; //@line 18672
   HEAP32[$190 >> 2] = $80; //@line 18673
   $191 = $ReallocAsyncCtx + 156 | 0; //@line 18674
   HEAP32[$191 >> 2] = $82; //@line 18675
   $192 = $ReallocAsyncCtx + 160 | 0; //@line 18676
   HEAP32[$192 >> 2] = $84; //@line 18677
   $193 = $ReallocAsyncCtx + 164 | 0; //@line 18678
   HEAP32[$193 >> 2] = $86; //@line 18679
   $194 = $ReallocAsyncCtx + 168 | 0; //@line 18680
   HEAP32[$194 >> 2] = $88; //@line 18681
   $195 = $ReallocAsyncCtx + 172 | 0; //@line 18682
   HEAP32[$195 >> 2] = $90; //@line 18683
   $196 = $ReallocAsyncCtx + 176 | 0; //@line 18684
   HEAP32[$196 >> 2] = $92; //@line 18685
   $197 = $ReallocAsyncCtx + 180 | 0; //@line 18686
   HEAP32[$197 >> 2] = $94; //@line 18687
   $198 = $ReallocAsyncCtx + 184 | 0; //@line 18688
   HEAP32[$198 >> 2] = $98; //@line 18689
   $199 = $ReallocAsyncCtx + 188 | 0; //@line 18690
   HEAP32[$199 >> 2] = $100; //@line 18691
   $200 = $ReallocAsyncCtx + 192 | 0; //@line 18692
   HEAP32[$200 >> 2] = $102; //@line 18693
   $201 = $ReallocAsyncCtx + 196 | 0; //@line 18694
   HEAP32[$201 >> 2] = $104; //@line 18695
   $202 = $ReallocAsyncCtx + 200 | 0; //@line 18696
   HEAP32[$202 >> 2] = $106; //@line 18697
   $203 = $ReallocAsyncCtx + 204 | 0; //@line 18698
   HEAP32[$203 >> 2] = $108; //@line 18699
   $204 = $ReallocAsyncCtx + 208 | 0; //@line 18700
   HEAP32[$204 >> 2] = $112; //@line 18701
   $205 = $ReallocAsyncCtx + 212 | 0; //@line 18702
   HEAP32[$205 >> 2] = $114; //@line 18703
   $206 = $ReallocAsyncCtx + 216 | 0; //@line 18704
   HEAP32[$206 >> 2] = $116; //@line 18705
   $207 = $ReallocAsyncCtx + 220 | 0; //@line 18706
   HEAP32[$207 >> 2] = $118; //@line 18707
   $208 = $ReallocAsyncCtx + 224 | 0; //@line 18708
   HEAP32[$208 >> 2] = $120; //@line 18709
   $209 = $ReallocAsyncCtx + 228 | 0; //@line 18710
   HEAP32[$209 >> 2] = $122; //@line 18711
   $210 = $ReallocAsyncCtx + 232 | 0; //@line 18712
   HEAP32[$210 >> 2] = $124; //@line 18713
   sp = STACKTOP; //@line 18714
   return;
  }
  HEAP8[___async_retval >> 0] = $151; //@line 18718
  ___async_unwind = 0; //@line 18719
  HEAP32[$ReallocAsyncCtx >> 2] = 473; //@line 18720
  $152 = $ReallocAsyncCtx + 4 | 0; //@line 18721
  HEAP8[$152 >> 0] = $2; //@line 18722
  $153 = $ReallocAsyncCtx + 8 | 0; //@line 18723
  HEAP32[$153 >> 2] = $4; //@line 18724
  $154 = $ReallocAsyncCtx + 12 | 0; //@line 18725
  HEAP8[$154 >> 0] = $6; //@line 18726
  $155 = $ReallocAsyncCtx + 13 | 0; //@line 18727
  HEAP8[$155 >> 0] = $8; //@line 18728
  $156 = $ReallocAsyncCtx + 16 | 0; //@line 18729
  HEAP32[$156 >> 2] = $10; //@line 18730
  $157 = $ReallocAsyncCtx + 20 | 0; //@line 18731
  HEAP32[$157 >> 2] = $12; //@line 18732
  $158 = $ReallocAsyncCtx + 24 | 0; //@line 18733
  HEAP32[$158 >> 2] = $14; //@line 18734
  $159 = $ReallocAsyncCtx + 28 | 0; //@line 18735
  HEAP32[$159 >> 2] = $18; //@line 18736
  $160 = $ReallocAsyncCtx + 32 | 0; //@line 18737
  HEAP32[$160 >> 2] = $20; //@line 18738
  $161 = $ReallocAsyncCtx + 36 | 0; //@line 18739
  HEAP32[$161 >> 2] = $22; //@line 18740
  $162 = $ReallocAsyncCtx + 40 | 0; //@line 18741
  HEAP32[$162 >> 2] = $24; //@line 18742
  $163 = $ReallocAsyncCtx + 44 | 0; //@line 18743
  HEAP32[$163 >> 2] = $26; //@line 18744
  $164 = $ReallocAsyncCtx + 48 | 0; //@line 18745
  HEAP32[$164 >> 2] = $28; //@line 18746
  $165 = $ReallocAsyncCtx + 52 | 0; //@line 18747
  HEAP32[$165 >> 2] = $30; //@line 18748
  $166 = $ReallocAsyncCtx + 56 | 0; //@line 18749
  HEAP32[$166 >> 2] = $34; //@line 18750
  $167 = $ReallocAsyncCtx + 60 | 0; //@line 18751
  HEAP32[$167 >> 2] = $$0107$be; //@line 18752
  $168 = $ReallocAsyncCtx + 64 | 0; //@line 18753
  HEAP32[$168 >> 2] = $36; //@line 18754
  $169 = $ReallocAsyncCtx + 68 | 0; //@line 18755
  HEAP32[$169 >> 2] = $38; //@line 18756
  $170 = $ReallocAsyncCtx + 72 | 0; //@line 18757
  HEAP32[$170 >> 2] = $40; //@line 18758
  $171 = $ReallocAsyncCtx + 76 | 0; //@line 18759
  HEAP32[$171 >> 2] = $42; //@line 18760
  $172 = $ReallocAsyncCtx + 80 | 0; //@line 18761
  HEAP32[$172 >> 2] = $46; //@line 18762
  $173 = $ReallocAsyncCtx + 84 | 0; //@line 18763
  HEAP32[$173 >> 2] = $138; //@line 18764
  $174 = $ReallocAsyncCtx + 88 | 0; //@line 18765
  HEAP32[$174 >> 2] = $48; //@line 18766
  $175 = $ReallocAsyncCtx + 92 | 0; //@line 18767
  HEAP32[$175 >> 2] = $50; //@line 18768
  $176 = $ReallocAsyncCtx + 96 | 0; //@line 18769
  HEAP32[$176 >> 2] = $52; //@line 18770
  $177 = $ReallocAsyncCtx + 100 | 0; //@line 18771
  HEAP32[$177 >> 2] = $54; //@line 18772
  $178 = $ReallocAsyncCtx + 104 | 0; //@line 18773
  HEAP32[$178 >> 2] = $56; //@line 18774
  $179 = $ReallocAsyncCtx + 108 | 0; //@line 18775
  HEAP32[$179 >> 2] = $58; //@line 18776
  $180 = $ReallocAsyncCtx + 112 | 0; //@line 18777
  HEAP32[$180 >> 2] = $60; //@line 18778
  $181 = $ReallocAsyncCtx + 116 | 0; //@line 18779
  HEAP32[$181 >> 2] = $62; //@line 18780
  $182 = $ReallocAsyncCtx + 120 | 0; //@line 18781
  HEAP32[$182 >> 2] = $64; //@line 18782
  $183 = $ReallocAsyncCtx + 124 | 0; //@line 18783
  HEAP32[$183 >> 2] = $66; //@line 18784
  $184 = $ReallocAsyncCtx + 128 | 0; //@line 18785
  HEAP32[$184 >> 2] = $68; //@line 18786
  $185 = $ReallocAsyncCtx + 132 | 0; //@line 18787
  HEAP32[$185 >> 2] = $70; //@line 18788
  $186 = $ReallocAsyncCtx + 136 | 0; //@line 18789
  HEAP32[$186 >> 2] = $72; //@line 18790
  $187 = $ReallocAsyncCtx + 140 | 0; //@line 18791
  HEAP32[$187 >> 2] = $74; //@line 18792
  $188 = $ReallocAsyncCtx + 144 | 0; //@line 18793
  HEAP32[$188 >> 2] = $76; //@line 18794
  $189 = $ReallocAsyncCtx + 148 | 0; //@line 18795
  HEAP32[$189 >> 2] = $78; //@line 18796
  $190 = $ReallocAsyncCtx + 152 | 0; //@line 18797
  HEAP32[$190 >> 2] = $80; //@line 18798
  $191 = $ReallocAsyncCtx + 156 | 0; //@line 18799
  HEAP32[$191 >> 2] = $82; //@line 18800
  $192 = $ReallocAsyncCtx + 160 | 0; //@line 18801
  HEAP32[$192 >> 2] = $84; //@line 18802
  $193 = $ReallocAsyncCtx + 164 | 0; //@line 18803
  HEAP32[$193 >> 2] = $86; //@line 18804
  $194 = $ReallocAsyncCtx + 168 | 0; //@line 18805
  HEAP32[$194 >> 2] = $88; //@line 18806
  $195 = $ReallocAsyncCtx + 172 | 0; //@line 18807
  HEAP32[$195 >> 2] = $90; //@line 18808
  $196 = $ReallocAsyncCtx + 176 | 0; //@line 18809
  HEAP32[$196 >> 2] = $92; //@line 18810
  $197 = $ReallocAsyncCtx + 180 | 0; //@line 18811
  HEAP32[$197 >> 2] = $94; //@line 18812
  $198 = $ReallocAsyncCtx + 184 | 0; //@line 18813
  HEAP32[$198 >> 2] = $98; //@line 18814
  $199 = $ReallocAsyncCtx + 188 | 0; //@line 18815
  HEAP32[$199 >> 2] = $100; //@line 18816
  $200 = $ReallocAsyncCtx + 192 | 0; //@line 18817
  HEAP32[$200 >> 2] = $102; //@line 18818
  $201 = $ReallocAsyncCtx + 196 | 0; //@line 18819
  HEAP32[$201 >> 2] = $104; //@line 18820
  $202 = $ReallocAsyncCtx + 200 | 0; //@line 18821
  HEAP32[$202 >> 2] = $106; //@line 18822
  $203 = $ReallocAsyncCtx + 204 | 0; //@line 18823
  HEAP32[$203 >> 2] = $108; //@line 18824
  $204 = $ReallocAsyncCtx + 208 | 0; //@line 18825
  HEAP32[$204 >> 2] = $112; //@line 18826
  $205 = $ReallocAsyncCtx + 212 | 0; //@line 18827
  HEAP32[$205 >> 2] = $114; //@line 18828
  $206 = $ReallocAsyncCtx + 216 | 0; //@line 18829
  HEAP32[$206 >> 2] = $116; //@line 18830
  $207 = $ReallocAsyncCtx + 220 | 0; //@line 18831
  HEAP32[$207 >> 2] = $118; //@line 18832
  $208 = $ReallocAsyncCtx + 224 | 0; //@line 18833
  HEAP32[$208 >> 2] = $120; //@line 18834
  $209 = $ReallocAsyncCtx + 228 | 0; //@line 18835
  HEAP32[$209 >> 2] = $122; //@line 18836
  $210 = $ReallocAsyncCtx + 232 | 0; //@line 18837
  HEAP32[$210 >> 2] = $124; //@line 18838
  sp = STACKTOP; //@line 18839
  return;
 } else if ((label | 0) == 9) {
  $229 = HEAP8[$14 + ($127 & 255) >> 0] | 0; //@line 18845
  HEAP8[$76 >> 0] = ($229 & 255) >>> 4 & 7; //@line 18850
  HEAP8[$64 >> 0] = $229 & 15; //@line 18852
  $248 = $$0$be + 5 << 24 >> 24; //@line 18866
  HEAP32[$66 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 18874
  $258 = HEAP32[(HEAP32[$92 >> 2] | 0) + 40 >> 2] | 0; //@line 18877
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 18878
  $259 = FUNCTION_TABLE_iii[$258 & 31]($30, $72) | 0; //@line 18879
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 18882
   $260 = $ReallocAsyncCtx2 + 4 | 0; //@line 18883
   HEAP8[$260 >> 0] = $2; //@line 18884
   $261 = $ReallocAsyncCtx2 + 8 | 0; //@line 18885
   HEAP32[$261 >> 2] = $4; //@line 18886
   $262 = $ReallocAsyncCtx2 + 12 | 0; //@line 18887
   HEAP8[$262 >> 0] = $6; //@line 18888
   $263 = $ReallocAsyncCtx2 + 13 | 0; //@line 18889
   HEAP8[$263 >> 0] = $8; //@line 18890
   $264 = $ReallocAsyncCtx2 + 16 | 0; //@line 18891
   HEAP32[$264 >> 2] = $10; //@line 18892
   $265 = $ReallocAsyncCtx2 + 20 | 0; //@line 18893
   HEAP32[$265 >> 2] = $12; //@line 18894
   $266 = $ReallocAsyncCtx2 + 24 | 0; //@line 18895
   HEAP32[$266 >> 2] = $14; //@line 18896
   $267 = $ReallocAsyncCtx2 + 28 | 0; //@line 18897
   HEAP32[$267 >> 2] = $18; //@line 18898
   $268 = $ReallocAsyncCtx2 + 32 | 0; //@line 18899
   HEAP32[$268 >> 2] = $20; //@line 18900
   $269 = $ReallocAsyncCtx2 + 36 | 0; //@line 18901
   HEAP32[$269 >> 2] = $22; //@line 18902
   $270 = $ReallocAsyncCtx2 + 40 | 0; //@line 18903
   HEAP32[$270 >> 2] = $24; //@line 18904
   $271 = $ReallocAsyncCtx2 + 44 | 0; //@line 18905
   HEAP32[$271 >> 2] = $26; //@line 18906
   $272 = $ReallocAsyncCtx2 + 48 | 0; //@line 18907
   HEAP32[$272 >> 2] = $28; //@line 18908
   $273 = $ReallocAsyncCtx2 + 52 | 0; //@line 18909
   HEAP32[$273 >> 2] = $30; //@line 18910
   $274 = $ReallocAsyncCtx2 + 56 | 0; //@line 18911
   HEAP32[$274 >> 2] = $34; //@line 18912
   $275 = $ReallocAsyncCtx2 + 60 | 0; //@line 18913
   HEAP32[$275 >> 2] = $36; //@line 18914
   $276 = $ReallocAsyncCtx2 + 64 | 0; //@line 18915
   HEAP32[$276 >> 2] = $38; //@line 18916
   $277 = $ReallocAsyncCtx2 + 68 | 0; //@line 18917
   HEAP32[$277 >> 2] = $40; //@line 18918
   $278 = $ReallocAsyncCtx2 + 72 | 0; //@line 18919
   HEAP8[$278 >> 0] = $248; //@line 18920
   $279 = $ReallocAsyncCtx2 + 76 | 0; //@line 18921
   HEAP32[$279 >> 2] = $42; //@line 18922
   $280 = $ReallocAsyncCtx2 + 80 | 0; //@line 18923
   HEAP32[$280 >> 2] = $46; //@line 18924
   $281 = $ReallocAsyncCtx2 + 84 | 0; //@line 18925
   HEAP32[$281 >> 2] = $48; //@line 18926
   $282 = $ReallocAsyncCtx2 + 88 | 0; //@line 18927
   HEAP32[$282 >> 2] = $50; //@line 18928
   $283 = $ReallocAsyncCtx2 + 92 | 0; //@line 18929
   HEAP32[$283 >> 2] = $52; //@line 18930
   $284 = $ReallocAsyncCtx2 + 96 | 0; //@line 18931
   HEAP32[$284 >> 2] = $54; //@line 18932
   $285 = $ReallocAsyncCtx2 + 100 | 0; //@line 18933
   HEAP32[$285 >> 2] = $56; //@line 18934
   $286 = $ReallocAsyncCtx2 + 104 | 0; //@line 18935
   HEAP32[$286 >> 2] = $58; //@line 18936
   $287 = $ReallocAsyncCtx2 + 108 | 0; //@line 18937
   HEAP32[$287 >> 2] = $60; //@line 18938
   $288 = $ReallocAsyncCtx2 + 112 | 0; //@line 18939
   HEAP32[$288 >> 2] = $62; //@line 18940
   $289 = $ReallocAsyncCtx2 + 116 | 0; //@line 18941
   HEAP32[$289 >> 2] = $64; //@line 18942
   $290 = $ReallocAsyncCtx2 + 120 | 0; //@line 18943
   HEAP32[$290 >> 2] = $66; //@line 18944
   $291 = $ReallocAsyncCtx2 + 124 | 0; //@line 18945
   HEAP32[$291 >> 2] = $68; //@line 18946
   $292 = $ReallocAsyncCtx2 + 128 | 0; //@line 18947
   HEAP32[$292 >> 2] = $70; //@line 18948
   $293 = $ReallocAsyncCtx2 + 132 | 0; //@line 18949
   HEAP32[$293 >> 2] = $72; //@line 18950
   $294 = $ReallocAsyncCtx2 + 136 | 0; //@line 18951
   HEAP32[$294 >> 2] = $74; //@line 18952
   $295 = $ReallocAsyncCtx2 + 140 | 0; //@line 18953
   HEAP32[$295 >> 2] = $76; //@line 18954
   $296 = $ReallocAsyncCtx2 + 144 | 0; //@line 18955
   HEAP32[$296 >> 2] = $78; //@line 18956
   $297 = $ReallocAsyncCtx2 + 148 | 0; //@line 18957
   HEAP32[$297 >> 2] = $80; //@line 18958
   $298 = $ReallocAsyncCtx2 + 152 | 0; //@line 18959
   HEAP32[$298 >> 2] = $82; //@line 18960
   $299 = $ReallocAsyncCtx2 + 156 | 0; //@line 18961
   HEAP32[$299 >> 2] = $84; //@line 18962
   $300 = $ReallocAsyncCtx2 + 160 | 0; //@line 18963
   HEAP32[$300 >> 2] = $86; //@line 18964
   $301 = $ReallocAsyncCtx2 + 164 | 0; //@line 18965
   HEAP32[$301 >> 2] = $88; //@line 18966
   $302 = $ReallocAsyncCtx2 + 168 | 0; //@line 18967
   HEAP32[$302 >> 2] = $90; //@line 18968
   $303 = $ReallocAsyncCtx2 + 172 | 0; //@line 18969
   HEAP32[$303 >> 2] = $92; //@line 18970
   $304 = $ReallocAsyncCtx2 + 176 | 0; //@line 18971
   HEAP32[$304 >> 2] = $94; //@line 18972
   $305 = $ReallocAsyncCtx2 + 180 | 0; //@line 18973
   HEAP32[$305 >> 2] = $98; //@line 18974
   $306 = $ReallocAsyncCtx2 + 184 | 0; //@line 18975
   HEAP32[$306 >> 2] = $100; //@line 18976
   $307 = $ReallocAsyncCtx2 + 188 | 0; //@line 18977
   HEAP32[$307 >> 2] = $102; //@line 18978
   $308 = $ReallocAsyncCtx2 + 192 | 0; //@line 18979
   HEAP32[$308 >> 2] = $104; //@line 18980
   $309 = $ReallocAsyncCtx2 + 196 | 0; //@line 18981
   HEAP32[$309 >> 2] = $106; //@line 18982
   $310 = $ReallocAsyncCtx2 + 200 | 0; //@line 18983
   HEAP32[$310 >> 2] = $108; //@line 18984
   $311 = $ReallocAsyncCtx2 + 204 | 0; //@line 18985
   HEAP32[$311 >> 2] = $112; //@line 18986
   $312 = $ReallocAsyncCtx2 + 208 | 0; //@line 18987
   HEAP32[$312 >> 2] = $114; //@line 18988
   $313 = $ReallocAsyncCtx2 + 212 | 0; //@line 18989
   HEAP32[$313 >> 2] = $116; //@line 18990
   $314 = $ReallocAsyncCtx2 + 216 | 0; //@line 18991
   HEAP32[$314 >> 2] = $118; //@line 18992
   $315 = $ReallocAsyncCtx2 + 220 | 0; //@line 18993
   HEAP32[$315 >> 2] = $120; //@line 18994
   $316 = $ReallocAsyncCtx2 + 224 | 0; //@line 18995
   HEAP32[$316 >> 2] = $122; //@line 18996
   $317 = $ReallocAsyncCtx2 + 228 | 0; //@line 18997
   HEAP32[$317 >> 2] = $124; //@line 18998
   sp = STACKTOP; //@line 18999
   return;
  }
  HEAP8[___async_retval >> 0] = $259; //@line 19003
  ___async_unwind = 0; //@line 19004
  HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 19005
  $260 = $ReallocAsyncCtx2 + 4 | 0; //@line 19006
  HEAP8[$260 >> 0] = $2; //@line 19007
  $261 = $ReallocAsyncCtx2 + 8 | 0; //@line 19008
  HEAP32[$261 >> 2] = $4; //@line 19009
  $262 = $ReallocAsyncCtx2 + 12 | 0; //@line 19010
  HEAP8[$262 >> 0] = $6; //@line 19011
  $263 = $ReallocAsyncCtx2 + 13 | 0; //@line 19012
  HEAP8[$263 >> 0] = $8; //@line 19013
  $264 = $ReallocAsyncCtx2 + 16 | 0; //@line 19014
  HEAP32[$264 >> 2] = $10; //@line 19015
  $265 = $ReallocAsyncCtx2 + 20 | 0; //@line 19016
  HEAP32[$265 >> 2] = $12; //@line 19017
  $266 = $ReallocAsyncCtx2 + 24 | 0; //@line 19018
  HEAP32[$266 >> 2] = $14; //@line 19019
  $267 = $ReallocAsyncCtx2 + 28 | 0; //@line 19020
  HEAP32[$267 >> 2] = $18; //@line 19021
  $268 = $ReallocAsyncCtx2 + 32 | 0; //@line 19022
  HEAP32[$268 >> 2] = $20; //@line 19023
  $269 = $ReallocAsyncCtx2 + 36 | 0; //@line 19024
  HEAP32[$269 >> 2] = $22; //@line 19025
  $270 = $ReallocAsyncCtx2 + 40 | 0; //@line 19026
  HEAP32[$270 >> 2] = $24; //@line 19027
  $271 = $ReallocAsyncCtx2 + 44 | 0; //@line 19028
  HEAP32[$271 >> 2] = $26; //@line 19029
  $272 = $ReallocAsyncCtx2 + 48 | 0; //@line 19030
  HEAP32[$272 >> 2] = $28; //@line 19031
  $273 = $ReallocAsyncCtx2 + 52 | 0; //@line 19032
  HEAP32[$273 >> 2] = $30; //@line 19033
  $274 = $ReallocAsyncCtx2 + 56 | 0; //@line 19034
  HEAP32[$274 >> 2] = $34; //@line 19035
  $275 = $ReallocAsyncCtx2 + 60 | 0; //@line 19036
  HEAP32[$275 >> 2] = $36; //@line 19037
  $276 = $ReallocAsyncCtx2 + 64 | 0; //@line 19038
  HEAP32[$276 >> 2] = $38; //@line 19039
  $277 = $ReallocAsyncCtx2 + 68 | 0; //@line 19040
  HEAP32[$277 >> 2] = $40; //@line 19041
  $278 = $ReallocAsyncCtx2 + 72 | 0; //@line 19042
  HEAP8[$278 >> 0] = $248; //@line 19043
  $279 = $ReallocAsyncCtx2 + 76 | 0; //@line 19044
  HEAP32[$279 >> 2] = $42; //@line 19045
  $280 = $ReallocAsyncCtx2 + 80 | 0; //@line 19046
  HEAP32[$280 >> 2] = $46; //@line 19047
  $281 = $ReallocAsyncCtx2 + 84 | 0; //@line 19048
  HEAP32[$281 >> 2] = $48; //@line 19049
  $282 = $ReallocAsyncCtx2 + 88 | 0; //@line 19050
  HEAP32[$282 >> 2] = $50; //@line 19051
  $283 = $ReallocAsyncCtx2 + 92 | 0; //@line 19052
  HEAP32[$283 >> 2] = $52; //@line 19053
  $284 = $ReallocAsyncCtx2 + 96 | 0; //@line 19054
  HEAP32[$284 >> 2] = $54; //@line 19055
  $285 = $ReallocAsyncCtx2 + 100 | 0; //@line 19056
  HEAP32[$285 >> 2] = $56; //@line 19057
  $286 = $ReallocAsyncCtx2 + 104 | 0; //@line 19058
  HEAP32[$286 >> 2] = $58; //@line 19059
  $287 = $ReallocAsyncCtx2 + 108 | 0; //@line 19060
  HEAP32[$287 >> 2] = $60; //@line 19061
  $288 = $ReallocAsyncCtx2 + 112 | 0; //@line 19062
  HEAP32[$288 >> 2] = $62; //@line 19063
  $289 = $ReallocAsyncCtx2 + 116 | 0; //@line 19064
  HEAP32[$289 >> 2] = $64; //@line 19065
  $290 = $ReallocAsyncCtx2 + 120 | 0; //@line 19066
  HEAP32[$290 >> 2] = $66; //@line 19067
  $291 = $ReallocAsyncCtx2 + 124 | 0; //@line 19068
  HEAP32[$291 >> 2] = $68; //@line 19069
  $292 = $ReallocAsyncCtx2 + 128 | 0; //@line 19070
  HEAP32[$292 >> 2] = $70; //@line 19071
  $293 = $ReallocAsyncCtx2 + 132 | 0; //@line 19072
  HEAP32[$293 >> 2] = $72; //@line 19073
  $294 = $ReallocAsyncCtx2 + 136 | 0; //@line 19074
  HEAP32[$294 >> 2] = $74; //@line 19075
  $295 = $ReallocAsyncCtx2 + 140 | 0; //@line 19076
  HEAP32[$295 >> 2] = $76; //@line 19077
  $296 = $ReallocAsyncCtx2 + 144 | 0; //@line 19078
  HEAP32[$296 >> 2] = $78; //@line 19079
  $297 = $ReallocAsyncCtx2 + 148 | 0; //@line 19080
  HEAP32[$297 >> 2] = $80; //@line 19081
  $298 = $ReallocAsyncCtx2 + 152 | 0; //@line 19082
  HEAP32[$298 >> 2] = $82; //@line 19083
  $299 = $ReallocAsyncCtx2 + 156 | 0; //@line 19084
  HEAP32[$299 >> 2] = $84; //@line 19085
  $300 = $ReallocAsyncCtx2 + 160 | 0; //@line 19086
  HEAP32[$300 >> 2] = $86; //@line 19087
  $301 = $ReallocAsyncCtx2 + 164 | 0; //@line 19088
  HEAP32[$301 >> 2] = $88; //@line 19089
  $302 = $ReallocAsyncCtx2 + 168 | 0; //@line 19090
  HEAP32[$302 >> 2] = $90; //@line 19091
  $303 = $ReallocAsyncCtx2 + 172 | 0; //@line 19092
  HEAP32[$303 >> 2] = $92; //@line 19093
  $304 = $ReallocAsyncCtx2 + 176 | 0; //@line 19094
  HEAP32[$304 >> 2] = $94; //@line 19095
  $305 = $ReallocAsyncCtx2 + 180 | 0; //@line 19096
  HEAP32[$305 >> 2] = $98; //@line 19097
  $306 = $ReallocAsyncCtx2 + 184 | 0; //@line 19098
  HEAP32[$306 >> 2] = $100; //@line 19099
  $307 = $ReallocAsyncCtx2 + 188 | 0; //@line 19100
  HEAP32[$307 >> 2] = $102; //@line 19101
  $308 = $ReallocAsyncCtx2 + 192 | 0; //@line 19102
  HEAP32[$308 >> 2] = $104; //@line 19103
  $309 = $ReallocAsyncCtx2 + 196 | 0; //@line 19104
  HEAP32[$309 >> 2] = $106; //@line 19105
  $310 = $ReallocAsyncCtx2 + 200 | 0; //@line 19106
  HEAP32[$310 >> 2] = $108; //@line 19107
  $311 = $ReallocAsyncCtx2 + 204 | 0; //@line 19108
  HEAP32[$311 >> 2] = $112; //@line 19109
  $312 = $ReallocAsyncCtx2 + 208 | 0; //@line 19110
  HEAP32[$312 >> 2] = $114; //@line 19111
  $313 = $ReallocAsyncCtx2 + 212 | 0; //@line 19112
  HEAP32[$313 >> 2] = $116; //@line 19113
  $314 = $ReallocAsyncCtx2 + 216 | 0; //@line 19114
  HEAP32[$314 >> 2] = $118; //@line 19115
  $315 = $ReallocAsyncCtx2 + 220 | 0; //@line 19116
  HEAP32[$315 >> 2] = $120; //@line 19117
  $316 = $ReallocAsyncCtx2 + 224 | 0; //@line 19118
  HEAP32[$316 >> 2] = $122; //@line 19119
  $317 = $ReallocAsyncCtx2 + 228 | 0; //@line 19120
  HEAP32[$317 >> 2] = $124; //@line 19121
  sp = STACKTOP; //@line 19122
  return;
 } else if ((label | 0) == 13) {
  $321 = HEAP32[$319 >> 2] | 0; //@line 19126
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 19127
  $322 = FUNCTION_TABLE_ii[$321 & 15]($28) | 0; //@line 19128
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 19131
   $323 = $ReallocAsyncCtx3 + 4 | 0; //@line 19132
   HEAP8[$323 >> 0] = $2; //@line 19133
   $324 = $ReallocAsyncCtx3 + 8 | 0; //@line 19134
   HEAP32[$324 >> 2] = $4; //@line 19135
   $325 = $ReallocAsyncCtx3 + 12 | 0; //@line 19136
   HEAP8[$325 >> 0] = $6; //@line 19137
   $326 = $ReallocAsyncCtx3 + 13 | 0; //@line 19138
   HEAP8[$326 >> 0] = $8; //@line 19139
   $327 = $ReallocAsyncCtx3 + 16 | 0; //@line 19140
   HEAP32[$327 >> 2] = $10; //@line 19141
   $328 = $ReallocAsyncCtx3 + 20 | 0; //@line 19142
   HEAP32[$328 >> 2] = $12; //@line 19143
   $329 = $ReallocAsyncCtx3 + 24 | 0; //@line 19144
   HEAP32[$329 >> 2] = $14; //@line 19145
   $330 = $ReallocAsyncCtx3 + 28 | 0; //@line 19146
   HEAP32[$330 >> 2] = $18; //@line 19147
   $331 = $ReallocAsyncCtx3 + 32 | 0; //@line 19148
   HEAP32[$331 >> 2] = $20; //@line 19149
   $332 = $ReallocAsyncCtx3 + 36 | 0; //@line 19150
   HEAP32[$332 >> 2] = $22; //@line 19151
   $333 = $ReallocAsyncCtx3 + 40 | 0; //@line 19152
   HEAP32[$333 >> 2] = $24; //@line 19153
   $334 = $ReallocAsyncCtx3 + 44 | 0; //@line 19154
   HEAP32[$334 >> 2] = $26; //@line 19155
   $335 = $ReallocAsyncCtx3 + 48 | 0; //@line 19156
   HEAP32[$335 >> 2] = $28; //@line 19157
   $336 = $ReallocAsyncCtx3 + 52 | 0; //@line 19158
   HEAP32[$336 >> 2] = $30; //@line 19159
   $337 = $ReallocAsyncCtx3 + 56 | 0; //@line 19160
   HEAP32[$337 >> 2] = $34; //@line 19161
   $338 = $ReallocAsyncCtx3 + 60 | 0; //@line 19162
   HEAP32[$338 >> 2] = $36; //@line 19163
   $339 = $ReallocAsyncCtx3 + 64 | 0; //@line 19164
   HEAP32[$339 >> 2] = $38; //@line 19165
   $340 = $ReallocAsyncCtx3 + 68 | 0; //@line 19166
   HEAP32[$340 >> 2] = $40; //@line 19167
   $341 = $ReallocAsyncCtx3 + 72 | 0; //@line 19168
   HEAP32[$341 >> 2] = $42; //@line 19169
   $342 = $ReallocAsyncCtx3 + 76 | 0; //@line 19170
   HEAP32[$342 >> 2] = $46; //@line 19171
   $343 = $ReallocAsyncCtx3 + 80 | 0; //@line 19172
   HEAP32[$343 >> 2] = $48; //@line 19173
   $344 = $ReallocAsyncCtx3 + 84 | 0; //@line 19174
   HEAP32[$344 >> 2] = $50; //@line 19175
   $345 = $ReallocAsyncCtx3 + 88 | 0; //@line 19176
   HEAP32[$345 >> 2] = $52; //@line 19177
   $346 = $ReallocAsyncCtx3 + 92 | 0; //@line 19178
   HEAP32[$346 >> 2] = $54; //@line 19179
   $347 = $ReallocAsyncCtx3 + 96 | 0; //@line 19180
   HEAP32[$347 >> 2] = $56; //@line 19181
   $348 = $ReallocAsyncCtx3 + 100 | 0; //@line 19182
   HEAP32[$348 >> 2] = $58; //@line 19183
   $349 = $ReallocAsyncCtx3 + 104 | 0; //@line 19184
   HEAP8[$349 >> 0] = $127; //@line 19185
   $350 = $ReallocAsyncCtx3 + 108 | 0; //@line 19186
   HEAP32[$350 >> 2] = $60; //@line 19187
   $351 = $ReallocAsyncCtx3 + 112 | 0; //@line 19188
   HEAP32[$351 >> 2] = $62; //@line 19189
   $352 = $ReallocAsyncCtx3 + 116 | 0; //@line 19190
   HEAP32[$352 >> 2] = $64; //@line 19191
   $353 = $ReallocAsyncCtx3 + 120 | 0; //@line 19192
   HEAP32[$353 >> 2] = $66; //@line 19193
   $354 = $ReallocAsyncCtx3 + 124 | 0; //@line 19194
   HEAP32[$354 >> 2] = $68; //@line 19195
   $355 = $ReallocAsyncCtx3 + 128 | 0; //@line 19196
   HEAP32[$355 >> 2] = $70; //@line 19197
   $356 = $ReallocAsyncCtx3 + 132 | 0; //@line 19198
   HEAP32[$356 >> 2] = $72; //@line 19199
   $357 = $ReallocAsyncCtx3 + 136 | 0; //@line 19200
   HEAP32[$357 >> 2] = $74; //@line 19201
   $358 = $ReallocAsyncCtx3 + 140 | 0; //@line 19202
   HEAP32[$358 >> 2] = $76; //@line 19203
   $359 = $ReallocAsyncCtx3 + 144 | 0; //@line 19204
   HEAP32[$359 >> 2] = $78; //@line 19205
   $360 = $ReallocAsyncCtx3 + 148 | 0; //@line 19206
   HEAP32[$360 >> 2] = $80; //@line 19207
   $361 = $ReallocAsyncCtx3 + 152 | 0; //@line 19208
   HEAP32[$361 >> 2] = $82; //@line 19209
   $362 = $ReallocAsyncCtx3 + 156 | 0; //@line 19210
   HEAP32[$362 >> 2] = $84; //@line 19211
   $363 = $ReallocAsyncCtx3 + 160 | 0; //@line 19212
   HEAP32[$363 >> 2] = $86; //@line 19213
   $364 = $ReallocAsyncCtx3 + 164 | 0; //@line 19214
   HEAP32[$364 >> 2] = $88; //@line 19215
   $365 = $ReallocAsyncCtx3 + 168 | 0; //@line 19216
   HEAP32[$365 >> 2] = $90; //@line 19217
   $366 = $ReallocAsyncCtx3 + 172 | 0; //@line 19218
   HEAP32[$366 >> 2] = $92; //@line 19219
   $367 = $ReallocAsyncCtx3 + 176 | 0; //@line 19220
   HEAP32[$367 >> 2] = $94; //@line 19221
   $368 = $ReallocAsyncCtx3 + 180 | 0; //@line 19222
   HEAP32[$368 >> 2] = $98; //@line 19223
   $369 = $ReallocAsyncCtx3 + 184 | 0; //@line 19224
   HEAP32[$369 >> 2] = $100; //@line 19225
   $370 = $ReallocAsyncCtx3 + 188 | 0; //@line 19226
   HEAP32[$370 >> 2] = $102; //@line 19227
   $371 = $ReallocAsyncCtx3 + 192 | 0; //@line 19228
   HEAP32[$371 >> 2] = $104; //@line 19229
   $372 = $ReallocAsyncCtx3 + 196 | 0; //@line 19230
   HEAP32[$372 >> 2] = $106; //@line 19231
   $373 = $ReallocAsyncCtx3 + 200 | 0; //@line 19232
   HEAP32[$373 >> 2] = $108; //@line 19233
   $374 = $ReallocAsyncCtx3 + 204 | 0; //@line 19234
   HEAP32[$374 >> 2] = $112; //@line 19235
   $375 = $ReallocAsyncCtx3 + 208 | 0; //@line 19236
   HEAP32[$375 >> 2] = $114; //@line 19237
   $376 = $ReallocAsyncCtx3 + 212 | 0; //@line 19238
   HEAP32[$376 >> 2] = $116; //@line 19239
   $377 = $ReallocAsyncCtx3 + 216 | 0; //@line 19240
   HEAP32[$377 >> 2] = $118; //@line 19241
   $378 = $ReallocAsyncCtx3 + 220 | 0; //@line 19242
   HEAP32[$378 >> 2] = $120; //@line 19243
   $379 = $ReallocAsyncCtx3 + 224 | 0; //@line 19244
   HEAP32[$379 >> 2] = $122; //@line 19245
   $380 = $ReallocAsyncCtx3 + 228 | 0; //@line 19246
   HEAP32[$380 >> 2] = $124; //@line 19247
   sp = STACKTOP; //@line 19248
   return;
  }
  HEAP8[___async_retval >> 0] = $322; //@line 19252
  ___async_unwind = 0; //@line 19253
  HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 19254
  $323 = $ReallocAsyncCtx3 + 4 | 0; //@line 19255
  HEAP8[$323 >> 0] = $2; //@line 19256
  $324 = $ReallocAsyncCtx3 + 8 | 0; //@line 19257
  HEAP32[$324 >> 2] = $4; //@line 19258
  $325 = $ReallocAsyncCtx3 + 12 | 0; //@line 19259
  HEAP8[$325 >> 0] = $6; //@line 19260
  $326 = $ReallocAsyncCtx3 + 13 | 0; //@line 19261
  HEAP8[$326 >> 0] = $8; //@line 19262
  $327 = $ReallocAsyncCtx3 + 16 | 0; //@line 19263
  HEAP32[$327 >> 2] = $10; //@line 19264
  $328 = $ReallocAsyncCtx3 + 20 | 0; //@line 19265
  HEAP32[$328 >> 2] = $12; //@line 19266
  $329 = $ReallocAsyncCtx3 + 24 | 0; //@line 19267
  HEAP32[$329 >> 2] = $14; //@line 19268
  $330 = $ReallocAsyncCtx3 + 28 | 0; //@line 19269
  HEAP32[$330 >> 2] = $18; //@line 19270
  $331 = $ReallocAsyncCtx3 + 32 | 0; //@line 19271
  HEAP32[$331 >> 2] = $20; //@line 19272
  $332 = $ReallocAsyncCtx3 + 36 | 0; //@line 19273
  HEAP32[$332 >> 2] = $22; //@line 19274
  $333 = $ReallocAsyncCtx3 + 40 | 0; //@line 19275
  HEAP32[$333 >> 2] = $24; //@line 19276
  $334 = $ReallocAsyncCtx3 + 44 | 0; //@line 19277
  HEAP32[$334 >> 2] = $26; //@line 19278
  $335 = $ReallocAsyncCtx3 + 48 | 0; //@line 19279
  HEAP32[$335 >> 2] = $28; //@line 19280
  $336 = $ReallocAsyncCtx3 + 52 | 0; //@line 19281
  HEAP32[$336 >> 2] = $30; //@line 19282
  $337 = $ReallocAsyncCtx3 + 56 | 0; //@line 19283
  HEAP32[$337 >> 2] = $34; //@line 19284
  $338 = $ReallocAsyncCtx3 + 60 | 0; //@line 19285
  HEAP32[$338 >> 2] = $36; //@line 19286
  $339 = $ReallocAsyncCtx3 + 64 | 0; //@line 19287
  HEAP32[$339 >> 2] = $38; //@line 19288
  $340 = $ReallocAsyncCtx3 + 68 | 0; //@line 19289
  HEAP32[$340 >> 2] = $40; //@line 19290
  $341 = $ReallocAsyncCtx3 + 72 | 0; //@line 19291
  HEAP32[$341 >> 2] = $42; //@line 19292
  $342 = $ReallocAsyncCtx3 + 76 | 0; //@line 19293
  HEAP32[$342 >> 2] = $46; //@line 19294
  $343 = $ReallocAsyncCtx3 + 80 | 0; //@line 19295
  HEAP32[$343 >> 2] = $48; //@line 19296
  $344 = $ReallocAsyncCtx3 + 84 | 0; //@line 19297
  HEAP32[$344 >> 2] = $50; //@line 19298
  $345 = $ReallocAsyncCtx3 + 88 | 0; //@line 19299
  HEAP32[$345 >> 2] = $52; //@line 19300
  $346 = $ReallocAsyncCtx3 + 92 | 0; //@line 19301
  HEAP32[$346 >> 2] = $54; //@line 19302
  $347 = $ReallocAsyncCtx3 + 96 | 0; //@line 19303
  HEAP32[$347 >> 2] = $56; //@line 19304
  $348 = $ReallocAsyncCtx3 + 100 | 0; //@line 19305
  HEAP32[$348 >> 2] = $58; //@line 19306
  $349 = $ReallocAsyncCtx3 + 104 | 0; //@line 19307
  HEAP8[$349 >> 0] = $127; //@line 19308
  $350 = $ReallocAsyncCtx3 + 108 | 0; //@line 19309
  HEAP32[$350 >> 2] = $60; //@line 19310
  $351 = $ReallocAsyncCtx3 + 112 | 0; //@line 19311
  HEAP32[$351 >> 2] = $62; //@line 19312
  $352 = $ReallocAsyncCtx3 + 116 | 0; //@line 19313
  HEAP32[$352 >> 2] = $64; //@line 19314
  $353 = $ReallocAsyncCtx3 + 120 | 0; //@line 19315
  HEAP32[$353 >> 2] = $66; //@line 19316
  $354 = $ReallocAsyncCtx3 + 124 | 0; //@line 19317
  HEAP32[$354 >> 2] = $68; //@line 19318
  $355 = $ReallocAsyncCtx3 + 128 | 0; //@line 19319
  HEAP32[$355 >> 2] = $70; //@line 19320
  $356 = $ReallocAsyncCtx3 + 132 | 0; //@line 19321
  HEAP32[$356 >> 2] = $72; //@line 19322
  $357 = $ReallocAsyncCtx3 + 136 | 0; //@line 19323
  HEAP32[$357 >> 2] = $74; //@line 19324
  $358 = $ReallocAsyncCtx3 + 140 | 0; //@line 19325
  HEAP32[$358 >> 2] = $76; //@line 19326
  $359 = $ReallocAsyncCtx3 + 144 | 0; //@line 19327
  HEAP32[$359 >> 2] = $78; //@line 19328
  $360 = $ReallocAsyncCtx3 + 148 | 0; //@line 19329
  HEAP32[$360 >> 2] = $80; //@line 19330
  $361 = $ReallocAsyncCtx3 + 152 | 0; //@line 19331
  HEAP32[$361 >> 2] = $82; //@line 19332
  $362 = $ReallocAsyncCtx3 + 156 | 0; //@line 19333
  HEAP32[$362 >> 2] = $84; //@line 19334
  $363 = $ReallocAsyncCtx3 + 160 | 0; //@line 19335
  HEAP32[$363 >> 2] = $86; //@line 19336
  $364 = $ReallocAsyncCtx3 + 164 | 0; //@line 19337
  HEAP32[$364 >> 2] = $88; //@line 19338
  $365 = $ReallocAsyncCtx3 + 168 | 0; //@line 19339
  HEAP32[$365 >> 2] = $90; //@line 19340
  $366 = $ReallocAsyncCtx3 + 172 | 0; //@line 19341
  HEAP32[$366 >> 2] = $92; //@line 19342
  $367 = $ReallocAsyncCtx3 + 176 | 0; //@line 19343
  HEAP32[$367 >> 2] = $94; //@line 19344
  $368 = $ReallocAsyncCtx3 + 180 | 0; //@line 19345
  HEAP32[$368 >> 2] = $98; //@line 19346
  $369 = $ReallocAsyncCtx3 + 184 | 0; //@line 19347
  HEAP32[$369 >> 2] = $100; //@line 19348
  $370 = $ReallocAsyncCtx3 + 188 | 0; //@line 19349
  HEAP32[$370 >> 2] = $102; //@line 19350
  $371 = $ReallocAsyncCtx3 + 192 | 0; //@line 19351
  HEAP32[$371 >> 2] = $104; //@line 19352
  $372 = $ReallocAsyncCtx3 + 196 | 0; //@line 19353
  HEAP32[$372 >> 2] = $106; //@line 19354
  $373 = $ReallocAsyncCtx3 + 200 | 0; //@line 19355
  HEAP32[$373 >> 2] = $108; //@line 19356
  $374 = $ReallocAsyncCtx3 + 204 | 0; //@line 19357
  HEAP32[$374 >> 2] = $112; //@line 19358
  $375 = $ReallocAsyncCtx3 + 208 | 0; //@line 19359
  HEAP32[$375 >> 2] = $114; //@line 19360
  $376 = $ReallocAsyncCtx3 + 212 | 0; //@line 19361
  HEAP32[$376 >> 2] = $116; //@line 19362
  $377 = $ReallocAsyncCtx3 + 216 | 0; //@line 19363
  HEAP32[$377 >> 2] = $118; //@line 19364
  $378 = $ReallocAsyncCtx3 + 220 | 0; //@line 19365
  HEAP32[$378 >> 2] = $120; //@line 19366
  $379 = $ReallocAsyncCtx3 + 224 | 0; //@line 19367
  HEAP32[$379 >> 2] = $122; //@line 19368
  $380 = $ReallocAsyncCtx3 + 228 | 0; //@line 19369
  HEAP32[$380 >> 2] = $124; //@line 19370
  sp = STACKTOP; //@line 19371
  return;
 } else if ((label | 0) == 18) {
  $400 = HEAP8[$14 + ($127 & 255) >> 0] | 0; //@line 19378
  HEAP32[$42 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 19399
  HEAP32[$60 >> 2] = 0; //@line 19400
  $421 = $$0$be + 6 << 24 >> 24; //@line 19401
  HEAP8[$50 >> 0] = HEAP8[$14 + ($$0$be + 5 & 255) >> 0] | 0; //@line 19405
  $427 = HEAP32[(HEAP32[$86 >> 2] | 0) + 8 >> 2] | 0; //@line 19408
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 19409
  $428 = FUNCTION_TABLE_iiii[$427 & 31]($30, $400, $82) | 0; //@line 19410
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 19413
   $429 = $ReallocAsyncCtx4 + 4 | 0; //@line 19414
   HEAP8[$429 >> 0] = $2; //@line 19415
   $430 = $ReallocAsyncCtx4 + 8 | 0; //@line 19416
   HEAP32[$430 >> 2] = $4; //@line 19417
   $431 = $ReallocAsyncCtx4 + 12 | 0; //@line 19418
   HEAP8[$431 >> 0] = $6; //@line 19419
   $432 = $ReallocAsyncCtx4 + 13 | 0; //@line 19420
   HEAP8[$432 >> 0] = $8; //@line 19421
   $433 = $ReallocAsyncCtx4 + 16 | 0; //@line 19422
   HEAP32[$433 >> 2] = $10; //@line 19423
   $434 = $ReallocAsyncCtx4 + 20 | 0; //@line 19424
   HEAP32[$434 >> 2] = $12; //@line 19425
   $435 = $ReallocAsyncCtx4 + 24 | 0; //@line 19426
   HEAP32[$435 >> 2] = $14; //@line 19427
   $436 = $ReallocAsyncCtx4 + 28 | 0; //@line 19428
   HEAP32[$436 >> 2] = $18; //@line 19429
   $437 = $ReallocAsyncCtx4 + 32 | 0; //@line 19430
   HEAP32[$437 >> 2] = $20; //@line 19431
   $438 = $ReallocAsyncCtx4 + 36 | 0; //@line 19432
   HEAP32[$438 >> 2] = $22; //@line 19433
   $439 = $ReallocAsyncCtx4 + 40 | 0; //@line 19434
   HEAP32[$439 >> 2] = $24; //@line 19435
   $440 = $ReallocAsyncCtx4 + 44 | 0; //@line 19436
   HEAP32[$440 >> 2] = $26; //@line 19437
   $441 = $ReallocAsyncCtx4 + 48 | 0; //@line 19438
   HEAP32[$441 >> 2] = $28; //@line 19439
   $442 = $ReallocAsyncCtx4 + 52 | 0; //@line 19440
   HEAP32[$442 >> 2] = $30; //@line 19441
   $443 = $ReallocAsyncCtx4 + 56 | 0; //@line 19442
   HEAP32[$443 >> 2] = $34; //@line 19443
   $444 = $ReallocAsyncCtx4 + 60 | 0; //@line 19444
   HEAP32[$444 >> 2] = $36; //@line 19445
   $445 = $ReallocAsyncCtx4 + 64 | 0; //@line 19446
   HEAP32[$445 >> 2] = $38; //@line 19447
   $446 = $ReallocAsyncCtx4 + 68 | 0; //@line 19448
   HEAP32[$446 >> 2] = $40; //@line 19449
   $447 = $ReallocAsyncCtx4 + 72 | 0; //@line 19450
   HEAP8[$447 >> 0] = $421; //@line 19451
   $448 = $ReallocAsyncCtx4 + 76 | 0; //@line 19452
   HEAP32[$448 >> 2] = $42; //@line 19453
   $449 = $ReallocAsyncCtx4 + 80 | 0; //@line 19454
   HEAP32[$449 >> 2] = $46; //@line 19455
   $450 = $ReallocAsyncCtx4 + 84 | 0; //@line 19456
   HEAP32[$450 >> 2] = $48; //@line 19457
   $451 = $ReallocAsyncCtx4 + 88 | 0; //@line 19458
   HEAP32[$451 >> 2] = $50; //@line 19459
   $452 = $ReallocAsyncCtx4 + 92 | 0; //@line 19460
   HEAP32[$452 >> 2] = $52; //@line 19461
   $453 = $ReallocAsyncCtx4 + 96 | 0; //@line 19462
   HEAP32[$453 >> 2] = $54; //@line 19463
   $454 = $ReallocAsyncCtx4 + 100 | 0; //@line 19464
   HEAP32[$454 >> 2] = $56; //@line 19465
   $455 = $ReallocAsyncCtx4 + 104 | 0; //@line 19466
   HEAP32[$455 >> 2] = $58; //@line 19467
   $456 = $ReallocAsyncCtx4 + 108 | 0; //@line 19468
   HEAP32[$456 >> 2] = $60; //@line 19469
   $457 = $ReallocAsyncCtx4 + 112 | 0; //@line 19470
   HEAP32[$457 >> 2] = $62; //@line 19471
   $458 = $ReallocAsyncCtx4 + 116 | 0; //@line 19472
   HEAP32[$458 >> 2] = $64; //@line 19473
   $459 = $ReallocAsyncCtx4 + 120 | 0; //@line 19474
   HEAP32[$459 >> 2] = $66; //@line 19475
   $460 = $ReallocAsyncCtx4 + 124 | 0; //@line 19476
   HEAP32[$460 >> 2] = $68; //@line 19477
   $461 = $ReallocAsyncCtx4 + 128 | 0; //@line 19478
   HEAP32[$461 >> 2] = $70; //@line 19479
   $462 = $ReallocAsyncCtx4 + 132 | 0; //@line 19480
   HEAP32[$462 >> 2] = $72; //@line 19481
   $463 = $ReallocAsyncCtx4 + 136 | 0; //@line 19482
   HEAP32[$463 >> 2] = $74; //@line 19483
   $464 = $ReallocAsyncCtx4 + 140 | 0; //@line 19484
   HEAP32[$464 >> 2] = $76; //@line 19485
   $465 = $ReallocAsyncCtx4 + 144 | 0; //@line 19486
   HEAP32[$465 >> 2] = $78; //@line 19487
   $466 = $ReallocAsyncCtx4 + 148 | 0; //@line 19488
   HEAP32[$466 >> 2] = $80; //@line 19489
   $467 = $ReallocAsyncCtx4 + 152 | 0; //@line 19490
   HEAP32[$467 >> 2] = $82; //@line 19491
   $468 = $ReallocAsyncCtx4 + 156 | 0; //@line 19492
   HEAP32[$468 >> 2] = $84; //@line 19493
   $469 = $ReallocAsyncCtx4 + 160 | 0; //@line 19494
   HEAP32[$469 >> 2] = $86; //@line 19495
   $470 = $ReallocAsyncCtx4 + 164 | 0; //@line 19496
   HEAP32[$470 >> 2] = $88; //@line 19497
   $471 = $ReallocAsyncCtx4 + 168 | 0; //@line 19498
   HEAP32[$471 >> 2] = $90; //@line 19499
   $472 = $ReallocAsyncCtx4 + 172 | 0; //@line 19500
   HEAP32[$472 >> 2] = $92; //@line 19501
   $473 = $ReallocAsyncCtx4 + 176 | 0; //@line 19502
   HEAP32[$473 >> 2] = $94; //@line 19503
   $474 = $ReallocAsyncCtx4 + 180 | 0; //@line 19504
   HEAP32[$474 >> 2] = $98; //@line 19505
   $475 = $ReallocAsyncCtx4 + 184 | 0; //@line 19506
   HEAP32[$475 >> 2] = $100; //@line 19507
   $476 = $ReallocAsyncCtx4 + 188 | 0; //@line 19508
   HEAP32[$476 >> 2] = $102; //@line 19509
   $477 = $ReallocAsyncCtx4 + 192 | 0; //@line 19510
   HEAP32[$477 >> 2] = $104; //@line 19511
   $478 = $ReallocAsyncCtx4 + 196 | 0; //@line 19512
   HEAP32[$478 >> 2] = $106; //@line 19513
   $479 = $ReallocAsyncCtx4 + 200 | 0; //@line 19514
   HEAP32[$479 >> 2] = $108; //@line 19515
   $480 = $ReallocAsyncCtx4 + 204 | 0; //@line 19516
   HEAP32[$480 >> 2] = $112; //@line 19517
   $481 = $ReallocAsyncCtx4 + 208 | 0; //@line 19518
   HEAP32[$481 >> 2] = $114; //@line 19519
   $482 = $ReallocAsyncCtx4 + 212 | 0; //@line 19520
   HEAP32[$482 >> 2] = $116; //@line 19521
   $483 = $ReallocAsyncCtx4 + 216 | 0; //@line 19522
   HEAP32[$483 >> 2] = $118; //@line 19523
   $484 = $ReallocAsyncCtx4 + 220 | 0; //@line 19524
   HEAP32[$484 >> 2] = $120; //@line 19525
   $485 = $ReallocAsyncCtx4 + 224 | 0; //@line 19526
   HEAP32[$485 >> 2] = $122; //@line 19527
   $486 = $ReallocAsyncCtx4 + 228 | 0; //@line 19528
   HEAP32[$486 >> 2] = $124; //@line 19529
   sp = STACKTOP; //@line 19530
   return;
  }
  HEAP8[___async_retval >> 0] = $428; //@line 19534
  ___async_unwind = 0; //@line 19535
  HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 19536
  $429 = $ReallocAsyncCtx4 + 4 | 0; //@line 19537
  HEAP8[$429 >> 0] = $2; //@line 19538
  $430 = $ReallocAsyncCtx4 + 8 | 0; //@line 19539
  HEAP32[$430 >> 2] = $4; //@line 19540
  $431 = $ReallocAsyncCtx4 + 12 | 0; //@line 19541
  HEAP8[$431 >> 0] = $6; //@line 19542
  $432 = $ReallocAsyncCtx4 + 13 | 0; //@line 19543
  HEAP8[$432 >> 0] = $8; //@line 19544
  $433 = $ReallocAsyncCtx4 + 16 | 0; //@line 19545
  HEAP32[$433 >> 2] = $10; //@line 19546
  $434 = $ReallocAsyncCtx4 + 20 | 0; //@line 19547
  HEAP32[$434 >> 2] = $12; //@line 19548
  $435 = $ReallocAsyncCtx4 + 24 | 0; //@line 19549
  HEAP32[$435 >> 2] = $14; //@line 19550
  $436 = $ReallocAsyncCtx4 + 28 | 0; //@line 19551
  HEAP32[$436 >> 2] = $18; //@line 19552
  $437 = $ReallocAsyncCtx4 + 32 | 0; //@line 19553
  HEAP32[$437 >> 2] = $20; //@line 19554
  $438 = $ReallocAsyncCtx4 + 36 | 0; //@line 19555
  HEAP32[$438 >> 2] = $22; //@line 19556
  $439 = $ReallocAsyncCtx4 + 40 | 0; //@line 19557
  HEAP32[$439 >> 2] = $24; //@line 19558
  $440 = $ReallocAsyncCtx4 + 44 | 0; //@line 19559
  HEAP32[$440 >> 2] = $26; //@line 19560
  $441 = $ReallocAsyncCtx4 + 48 | 0; //@line 19561
  HEAP32[$441 >> 2] = $28; //@line 19562
  $442 = $ReallocAsyncCtx4 + 52 | 0; //@line 19563
  HEAP32[$442 >> 2] = $30; //@line 19564
  $443 = $ReallocAsyncCtx4 + 56 | 0; //@line 19565
  HEAP32[$443 >> 2] = $34; //@line 19566
  $444 = $ReallocAsyncCtx4 + 60 | 0; //@line 19567
  HEAP32[$444 >> 2] = $36; //@line 19568
  $445 = $ReallocAsyncCtx4 + 64 | 0; //@line 19569
  HEAP32[$445 >> 2] = $38; //@line 19570
  $446 = $ReallocAsyncCtx4 + 68 | 0; //@line 19571
  HEAP32[$446 >> 2] = $40; //@line 19572
  $447 = $ReallocAsyncCtx4 + 72 | 0; //@line 19573
  HEAP8[$447 >> 0] = $421; //@line 19574
  $448 = $ReallocAsyncCtx4 + 76 | 0; //@line 19575
  HEAP32[$448 >> 2] = $42; //@line 19576
  $449 = $ReallocAsyncCtx4 + 80 | 0; //@line 19577
  HEAP32[$449 >> 2] = $46; //@line 19578
  $450 = $ReallocAsyncCtx4 + 84 | 0; //@line 19579
  HEAP32[$450 >> 2] = $48; //@line 19580
  $451 = $ReallocAsyncCtx4 + 88 | 0; //@line 19581
  HEAP32[$451 >> 2] = $50; //@line 19582
  $452 = $ReallocAsyncCtx4 + 92 | 0; //@line 19583
  HEAP32[$452 >> 2] = $52; //@line 19584
  $453 = $ReallocAsyncCtx4 + 96 | 0; //@line 19585
  HEAP32[$453 >> 2] = $54; //@line 19586
  $454 = $ReallocAsyncCtx4 + 100 | 0; //@line 19587
  HEAP32[$454 >> 2] = $56; //@line 19588
  $455 = $ReallocAsyncCtx4 + 104 | 0; //@line 19589
  HEAP32[$455 >> 2] = $58; //@line 19590
  $456 = $ReallocAsyncCtx4 + 108 | 0; //@line 19591
  HEAP32[$456 >> 2] = $60; //@line 19592
  $457 = $ReallocAsyncCtx4 + 112 | 0; //@line 19593
  HEAP32[$457 >> 2] = $62; //@line 19594
  $458 = $ReallocAsyncCtx4 + 116 | 0; //@line 19595
  HEAP32[$458 >> 2] = $64; //@line 19596
  $459 = $ReallocAsyncCtx4 + 120 | 0; //@line 19597
  HEAP32[$459 >> 2] = $66; //@line 19598
  $460 = $ReallocAsyncCtx4 + 124 | 0; //@line 19599
  HEAP32[$460 >> 2] = $68; //@line 19600
  $461 = $ReallocAsyncCtx4 + 128 | 0; //@line 19601
  HEAP32[$461 >> 2] = $70; //@line 19602
  $462 = $ReallocAsyncCtx4 + 132 | 0; //@line 19603
  HEAP32[$462 >> 2] = $72; //@line 19604
  $463 = $ReallocAsyncCtx4 + 136 | 0; //@line 19605
  HEAP32[$463 >> 2] = $74; //@line 19606
  $464 = $ReallocAsyncCtx4 + 140 | 0; //@line 19607
  HEAP32[$464 >> 2] = $76; //@line 19608
  $465 = $ReallocAsyncCtx4 + 144 | 0; //@line 19609
  HEAP32[$465 >> 2] = $78; //@line 19610
  $466 = $ReallocAsyncCtx4 + 148 | 0; //@line 19611
  HEAP32[$466 >> 2] = $80; //@line 19612
  $467 = $ReallocAsyncCtx4 + 152 | 0; //@line 19613
  HEAP32[$467 >> 2] = $82; //@line 19614
  $468 = $ReallocAsyncCtx4 + 156 | 0; //@line 19615
  HEAP32[$468 >> 2] = $84; //@line 19616
  $469 = $ReallocAsyncCtx4 + 160 | 0; //@line 19617
  HEAP32[$469 >> 2] = $86; //@line 19618
  $470 = $ReallocAsyncCtx4 + 164 | 0; //@line 19619
  HEAP32[$470 >> 2] = $88; //@line 19620
  $471 = $ReallocAsyncCtx4 + 168 | 0; //@line 19621
  HEAP32[$471 >> 2] = $90; //@line 19622
  $472 = $ReallocAsyncCtx4 + 172 | 0; //@line 19623
  HEAP32[$472 >> 2] = $92; //@line 19624
  $473 = $ReallocAsyncCtx4 + 176 | 0; //@line 19625
  HEAP32[$473 >> 2] = $94; //@line 19626
  $474 = $ReallocAsyncCtx4 + 180 | 0; //@line 19627
  HEAP32[$474 >> 2] = $98; //@line 19628
  $475 = $ReallocAsyncCtx4 + 184 | 0; //@line 19629
  HEAP32[$475 >> 2] = $100; //@line 19630
  $476 = $ReallocAsyncCtx4 + 188 | 0; //@line 19631
  HEAP32[$476 >> 2] = $102; //@line 19632
  $477 = $ReallocAsyncCtx4 + 192 | 0; //@line 19633
  HEAP32[$477 >> 2] = $104; //@line 19634
  $478 = $ReallocAsyncCtx4 + 196 | 0; //@line 19635
  HEAP32[$478 >> 2] = $106; //@line 19636
  $479 = $ReallocAsyncCtx4 + 200 | 0; //@line 19637
  HEAP32[$479 >> 2] = $108; //@line 19638
  $480 = $ReallocAsyncCtx4 + 204 | 0; //@line 19639
  HEAP32[$480 >> 2] = $112; //@line 19640
  $481 = $ReallocAsyncCtx4 + 208 | 0; //@line 19641
  HEAP32[$481 >> 2] = $114; //@line 19642
  $482 = $ReallocAsyncCtx4 + 212 | 0; //@line 19643
  HEAP32[$482 >> 2] = $116; //@line 19644
  $483 = $ReallocAsyncCtx4 + 216 | 0; //@line 19645
  HEAP32[$483 >> 2] = $118; //@line 19646
  $484 = $ReallocAsyncCtx4 + 220 | 0; //@line 19647
  HEAP32[$484 >> 2] = $120; //@line 19648
  $485 = $ReallocAsyncCtx4 + 224 | 0; //@line 19649
  HEAP32[$485 >> 2] = $122; //@line 19650
  $486 = $ReallocAsyncCtx4 + 228 | 0; //@line 19651
  HEAP32[$486 >> 2] = $124; //@line 19652
  sp = STACKTOP; //@line 19653
  return;
 } else if ((label | 0) == 24) {
  $507 = $$0$be + 2 << 24 >> 24; //@line 19657
  $511 = HEAPU8[$14 + ($127 & 255) >> 0] | 0; //@line 19661
  $513 = $511 >>> 5 & 1; //@line 19664
  $515 = $511 >>> 4 & 1; //@line 19667
  $518 = HEAP32[(HEAP32[$80 >> 2] | 0) + 44 >> 2] | 0; //@line 19670
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 19671
  $519 = FUNCTION_TABLE_iiii[$518 & 31]($30, $515, $513) | 0; //@line 19672
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 19675
   $520 = $ReallocAsyncCtx5 + 4 | 0; //@line 19676
   HEAP8[$520 >> 0] = $2; //@line 19677
   $521 = $ReallocAsyncCtx5 + 8 | 0; //@line 19678
   HEAP32[$521 >> 2] = $4; //@line 19679
   $522 = $ReallocAsyncCtx5 + 12 | 0; //@line 19680
   HEAP8[$522 >> 0] = $6; //@line 19681
   $523 = $ReallocAsyncCtx5 + 13 | 0; //@line 19682
   HEAP8[$523 >> 0] = $8; //@line 19683
   $524 = $ReallocAsyncCtx5 + 16 | 0; //@line 19684
   HEAP32[$524 >> 2] = $10; //@line 19685
   $525 = $ReallocAsyncCtx5 + 20 | 0; //@line 19686
   HEAP32[$525 >> 2] = $12; //@line 19687
   $526 = $ReallocAsyncCtx5 + 24 | 0; //@line 19688
   HEAP32[$526 >> 2] = $14; //@line 19689
   $527 = $ReallocAsyncCtx5 + 28 | 0; //@line 19690
   HEAP8[$527 >> 0] = $513; //@line 19691
   $528 = $ReallocAsyncCtx5 + 32 | 0; //@line 19692
   HEAP32[$528 >> 2] = $18; //@line 19693
   $529 = $ReallocAsyncCtx5 + 36 | 0; //@line 19694
   HEAP32[$529 >> 2] = $20; //@line 19695
   $530 = $ReallocAsyncCtx5 + 40 | 0; //@line 19696
   HEAP32[$530 >> 2] = $22; //@line 19697
   $531 = $ReallocAsyncCtx5 + 44 | 0; //@line 19698
   HEAP32[$531 >> 2] = $24; //@line 19699
   $532 = $ReallocAsyncCtx5 + 48 | 0; //@line 19700
   HEAP32[$532 >> 2] = $26; //@line 19701
   $533 = $ReallocAsyncCtx5 + 52 | 0; //@line 19702
   HEAP32[$533 >> 2] = $28; //@line 19703
   $534 = $ReallocAsyncCtx5 + 56 | 0; //@line 19704
   HEAP32[$534 >> 2] = $30; //@line 19705
   $535 = $ReallocAsyncCtx5 + 60 | 0; //@line 19706
   HEAP32[$535 >> 2] = $$0107$be; //@line 19707
   $536 = $ReallocAsyncCtx5 + 64 | 0; //@line 19708
   HEAP32[$536 >> 2] = $34; //@line 19709
   $537 = $ReallocAsyncCtx5 + 68 | 0; //@line 19710
   HEAP32[$537 >> 2] = $36; //@line 19711
   $538 = $ReallocAsyncCtx5 + 72 | 0; //@line 19712
   HEAP32[$538 >> 2] = $38; //@line 19713
   $539 = $ReallocAsyncCtx5 + 76 | 0; //@line 19714
   HEAP32[$539 >> 2] = $40; //@line 19715
   $540 = $ReallocAsyncCtx5 + 80 | 0; //@line 19716
   HEAP32[$540 >> 2] = $42; //@line 19717
   $541 = $ReallocAsyncCtx5 + 84 | 0; //@line 19718
   HEAP8[$541 >> 0] = $507; //@line 19719
   $542 = $ReallocAsyncCtx5 + 88 | 0; //@line 19720
   HEAP32[$542 >> 2] = $46; //@line 19721
   $543 = $ReallocAsyncCtx5 + 92 | 0; //@line 19722
   HEAP32[$543 >> 2] = $48; //@line 19723
   $544 = $ReallocAsyncCtx5 + 96 | 0; //@line 19724
   HEAP32[$544 >> 2] = $50; //@line 19725
   $545 = $ReallocAsyncCtx5 + 100 | 0; //@line 19726
   HEAP32[$545 >> 2] = $52; //@line 19727
   $546 = $ReallocAsyncCtx5 + 104 | 0; //@line 19728
   HEAP32[$546 >> 2] = $54; //@line 19729
   $547 = $ReallocAsyncCtx5 + 108 | 0; //@line 19730
   HEAP32[$547 >> 2] = $56; //@line 19731
   $548 = $ReallocAsyncCtx5 + 112 | 0; //@line 19732
   HEAP32[$548 >> 2] = $58; //@line 19733
   $549 = $ReallocAsyncCtx5 + 116 | 0; //@line 19734
   HEAP32[$549 >> 2] = $60; //@line 19735
   $550 = $ReallocAsyncCtx5 + 120 | 0; //@line 19736
   HEAP32[$550 >> 2] = $62; //@line 19737
   $551 = $ReallocAsyncCtx5 + 124 | 0; //@line 19738
   HEAP32[$551 >> 2] = $64; //@line 19739
   $552 = $ReallocAsyncCtx5 + 128 | 0; //@line 19740
   HEAP32[$552 >> 2] = $66; //@line 19741
   $553 = $ReallocAsyncCtx5 + 132 | 0; //@line 19742
   HEAP32[$553 >> 2] = $68; //@line 19743
   $554 = $ReallocAsyncCtx5 + 136 | 0; //@line 19744
   HEAP32[$554 >> 2] = $70; //@line 19745
   $555 = $ReallocAsyncCtx5 + 140 | 0; //@line 19746
   HEAP32[$555 >> 2] = $72; //@line 19747
   $556 = $ReallocAsyncCtx5 + 144 | 0; //@line 19748
   HEAP32[$556 >> 2] = $74; //@line 19749
   $557 = $ReallocAsyncCtx5 + 148 | 0; //@line 19750
   HEAP32[$557 >> 2] = $76; //@line 19751
   $558 = $ReallocAsyncCtx5 + 152 | 0; //@line 19752
   HEAP32[$558 >> 2] = $78; //@line 19753
   $559 = $ReallocAsyncCtx5 + 156 | 0; //@line 19754
   HEAP32[$559 >> 2] = $80; //@line 19755
   $560 = $ReallocAsyncCtx5 + 160 | 0; //@line 19756
   HEAP32[$560 >> 2] = $82; //@line 19757
   $561 = $ReallocAsyncCtx5 + 164 | 0; //@line 19758
   HEAP32[$561 >> 2] = $84; //@line 19759
   $562 = $ReallocAsyncCtx5 + 168 | 0; //@line 19760
   HEAP32[$562 >> 2] = $86; //@line 19761
   $563 = $ReallocAsyncCtx5 + 172 | 0; //@line 19762
   HEAP32[$563 >> 2] = $88; //@line 19763
   $564 = $ReallocAsyncCtx5 + 176 | 0; //@line 19764
   HEAP32[$564 >> 2] = $90; //@line 19765
   $565 = $ReallocAsyncCtx5 + 180 | 0; //@line 19766
   HEAP32[$565 >> 2] = $92; //@line 19767
   $566 = $ReallocAsyncCtx5 + 184 | 0; //@line 19768
   HEAP32[$566 >> 2] = $94; //@line 19769
   $567 = $ReallocAsyncCtx5 + 188 | 0; //@line 19770
   HEAP8[$567 >> 0] = $515; //@line 19771
   $568 = $ReallocAsyncCtx5 + 192 | 0; //@line 19772
   HEAP32[$568 >> 2] = $98; //@line 19773
   $569 = $ReallocAsyncCtx5 + 196 | 0; //@line 19774
   HEAP32[$569 >> 2] = $100; //@line 19775
   $570 = $ReallocAsyncCtx5 + 200 | 0; //@line 19776
   HEAP32[$570 >> 2] = $102; //@line 19777
   $571 = $ReallocAsyncCtx5 + 204 | 0; //@line 19778
   HEAP32[$571 >> 2] = $104; //@line 19779
   $572 = $ReallocAsyncCtx5 + 208 | 0; //@line 19780
   HEAP32[$572 >> 2] = $106; //@line 19781
   $573 = $ReallocAsyncCtx5 + 212 | 0; //@line 19782
   HEAP32[$573 >> 2] = $108; //@line 19783
   $574 = $ReallocAsyncCtx5 + 216 | 0; //@line 19784
   HEAP32[$574 >> 2] = $511; //@line 19785
   $575 = $ReallocAsyncCtx5 + 220 | 0; //@line 19786
   HEAP32[$575 >> 2] = $112; //@line 19787
   $576 = $ReallocAsyncCtx5 + 224 | 0; //@line 19788
   HEAP32[$576 >> 2] = $114; //@line 19789
   $577 = $ReallocAsyncCtx5 + 228 | 0; //@line 19790
   HEAP32[$577 >> 2] = $116; //@line 19791
   $578 = $ReallocAsyncCtx5 + 232 | 0; //@line 19792
   HEAP32[$578 >> 2] = $118; //@line 19793
   $579 = $ReallocAsyncCtx5 + 236 | 0; //@line 19794
   HEAP32[$579 >> 2] = $120; //@line 19795
   $580 = $ReallocAsyncCtx5 + 240 | 0; //@line 19796
   HEAP32[$580 >> 2] = $122; //@line 19797
   $581 = $ReallocAsyncCtx5 + 244 | 0; //@line 19798
   HEAP32[$581 >> 2] = $124; //@line 19799
   sp = STACKTOP; //@line 19800
   return;
  }
  HEAP8[___async_retval >> 0] = $519 & 1; //@line 19805
  ___async_unwind = 0; //@line 19806
  HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 19807
  $520 = $ReallocAsyncCtx5 + 4 | 0; //@line 19808
  HEAP8[$520 >> 0] = $2; //@line 19809
  $521 = $ReallocAsyncCtx5 + 8 | 0; //@line 19810
  HEAP32[$521 >> 2] = $4; //@line 19811
  $522 = $ReallocAsyncCtx5 + 12 | 0; //@line 19812
  HEAP8[$522 >> 0] = $6; //@line 19813
  $523 = $ReallocAsyncCtx5 + 13 | 0; //@line 19814
  HEAP8[$523 >> 0] = $8; //@line 19815
  $524 = $ReallocAsyncCtx5 + 16 | 0; //@line 19816
  HEAP32[$524 >> 2] = $10; //@line 19817
  $525 = $ReallocAsyncCtx5 + 20 | 0; //@line 19818
  HEAP32[$525 >> 2] = $12; //@line 19819
  $526 = $ReallocAsyncCtx5 + 24 | 0; //@line 19820
  HEAP32[$526 >> 2] = $14; //@line 19821
  $527 = $ReallocAsyncCtx5 + 28 | 0; //@line 19822
  HEAP8[$527 >> 0] = $513; //@line 19823
  $528 = $ReallocAsyncCtx5 + 32 | 0; //@line 19824
  HEAP32[$528 >> 2] = $18; //@line 19825
  $529 = $ReallocAsyncCtx5 + 36 | 0; //@line 19826
  HEAP32[$529 >> 2] = $20; //@line 19827
  $530 = $ReallocAsyncCtx5 + 40 | 0; //@line 19828
  HEAP32[$530 >> 2] = $22; //@line 19829
  $531 = $ReallocAsyncCtx5 + 44 | 0; //@line 19830
  HEAP32[$531 >> 2] = $24; //@line 19831
  $532 = $ReallocAsyncCtx5 + 48 | 0; //@line 19832
  HEAP32[$532 >> 2] = $26; //@line 19833
  $533 = $ReallocAsyncCtx5 + 52 | 0; //@line 19834
  HEAP32[$533 >> 2] = $28; //@line 19835
  $534 = $ReallocAsyncCtx5 + 56 | 0; //@line 19836
  HEAP32[$534 >> 2] = $30; //@line 19837
  $535 = $ReallocAsyncCtx5 + 60 | 0; //@line 19838
  HEAP32[$535 >> 2] = $$0107$be; //@line 19839
  $536 = $ReallocAsyncCtx5 + 64 | 0; //@line 19840
  HEAP32[$536 >> 2] = $34; //@line 19841
  $537 = $ReallocAsyncCtx5 + 68 | 0; //@line 19842
  HEAP32[$537 >> 2] = $36; //@line 19843
  $538 = $ReallocAsyncCtx5 + 72 | 0; //@line 19844
  HEAP32[$538 >> 2] = $38; //@line 19845
  $539 = $ReallocAsyncCtx5 + 76 | 0; //@line 19846
  HEAP32[$539 >> 2] = $40; //@line 19847
  $540 = $ReallocAsyncCtx5 + 80 | 0; //@line 19848
  HEAP32[$540 >> 2] = $42; //@line 19849
  $541 = $ReallocAsyncCtx5 + 84 | 0; //@line 19850
  HEAP8[$541 >> 0] = $507; //@line 19851
  $542 = $ReallocAsyncCtx5 + 88 | 0; //@line 19852
  HEAP32[$542 >> 2] = $46; //@line 19853
  $543 = $ReallocAsyncCtx5 + 92 | 0; //@line 19854
  HEAP32[$543 >> 2] = $48; //@line 19855
  $544 = $ReallocAsyncCtx5 + 96 | 0; //@line 19856
  HEAP32[$544 >> 2] = $50; //@line 19857
  $545 = $ReallocAsyncCtx5 + 100 | 0; //@line 19858
  HEAP32[$545 >> 2] = $52; //@line 19859
  $546 = $ReallocAsyncCtx5 + 104 | 0; //@line 19860
  HEAP32[$546 >> 2] = $54; //@line 19861
  $547 = $ReallocAsyncCtx5 + 108 | 0; //@line 19862
  HEAP32[$547 >> 2] = $56; //@line 19863
  $548 = $ReallocAsyncCtx5 + 112 | 0; //@line 19864
  HEAP32[$548 >> 2] = $58; //@line 19865
  $549 = $ReallocAsyncCtx5 + 116 | 0; //@line 19866
  HEAP32[$549 >> 2] = $60; //@line 19867
  $550 = $ReallocAsyncCtx5 + 120 | 0; //@line 19868
  HEAP32[$550 >> 2] = $62; //@line 19869
  $551 = $ReallocAsyncCtx5 + 124 | 0; //@line 19870
  HEAP32[$551 >> 2] = $64; //@line 19871
  $552 = $ReallocAsyncCtx5 + 128 | 0; //@line 19872
  HEAP32[$552 >> 2] = $66; //@line 19873
  $553 = $ReallocAsyncCtx5 + 132 | 0; //@line 19874
  HEAP32[$553 >> 2] = $68; //@line 19875
  $554 = $ReallocAsyncCtx5 + 136 | 0; //@line 19876
  HEAP32[$554 >> 2] = $70; //@line 19877
  $555 = $ReallocAsyncCtx5 + 140 | 0; //@line 19878
  HEAP32[$555 >> 2] = $72; //@line 19879
  $556 = $ReallocAsyncCtx5 + 144 | 0; //@line 19880
  HEAP32[$556 >> 2] = $74; //@line 19881
  $557 = $ReallocAsyncCtx5 + 148 | 0; //@line 19882
  HEAP32[$557 >> 2] = $76; //@line 19883
  $558 = $ReallocAsyncCtx5 + 152 | 0; //@line 19884
  HEAP32[$558 >> 2] = $78; //@line 19885
  $559 = $ReallocAsyncCtx5 + 156 | 0; //@line 19886
  HEAP32[$559 >> 2] = $80; //@line 19887
  $560 = $ReallocAsyncCtx5 + 160 | 0; //@line 19888
  HEAP32[$560 >> 2] = $82; //@line 19889
  $561 = $ReallocAsyncCtx5 + 164 | 0; //@line 19890
  HEAP32[$561 >> 2] = $84; //@line 19891
  $562 = $ReallocAsyncCtx5 + 168 | 0; //@line 19892
  HEAP32[$562 >> 2] = $86; //@line 19893
  $563 = $ReallocAsyncCtx5 + 172 | 0; //@line 19894
  HEAP32[$563 >> 2] = $88; //@line 19895
  $564 = $ReallocAsyncCtx5 + 176 | 0; //@line 19896
  HEAP32[$564 >> 2] = $90; //@line 19897
  $565 = $ReallocAsyncCtx5 + 180 | 0; //@line 19898
  HEAP32[$565 >> 2] = $92; //@line 19899
  $566 = $ReallocAsyncCtx5 + 184 | 0; //@line 19900
  HEAP32[$566 >> 2] = $94; //@line 19901
  $567 = $ReallocAsyncCtx5 + 188 | 0; //@line 19902
  HEAP8[$567 >> 0] = $515; //@line 19903
  $568 = $ReallocAsyncCtx5 + 192 | 0; //@line 19904
  HEAP32[$568 >> 2] = $98; //@line 19905
  $569 = $ReallocAsyncCtx5 + 196 | 0; //@line 19906
  HEAP32[$569 >> 2] = $100; //@line 19907
  $570 = $ReallocAsyncCtx5 + 200 | 0; //@line 19908
  HEAP32[$570 >> 2] = $102; //@line 19909
  $571 = $ReallocAsyncCtx5 + 204 | 0; //@line 19910
  HEAP32[$571 >> 2] = $104; //@line 19911
  $572 = $ReallocAsyncCtx5 + 208 | 0; //@line 19912
  HEAP32[$572 >> 2] = $106; //@line 19913
  $573 = $ReallocAsyncCtx5 + 212 | 0; //@line 19914
  HEAP32[$573 >> 2] = $108; //@line 19915
  $574 = $ReallocAsyncCtx5 + 216 | 0; //@line 19916
  HEAP32[$574 >> 2] = $511; //@line 19917
  $575 = $ReallocAsyncCtx5 + 220 | 0; //@line 19918
  HEAP32[$575 >> 2] = $112; //@line 19919
  $576 = $ReallocAsyncCtx5 + 224 | 0; //@line 19920
  HEAP32[$576 >> 2] = $114; //@line 19921
  $577 = $ReallocAsyncCtx5 + 228 | 0; //@line 19922
  HEAP32[$577 >> 2] = $116; //@line 19923
  $578 = $ReallocAsyncCtx5 + 232 | 0; //@line 19924
  HEAP32[$578 >> 2] = $118; //@line 19925
  $579 = $ReallocAsyncCtx5 + 236 | 0; //@line 19926
  HEAP32[$579 >> 2] = $120; //@line 19927
  $580 = $ReallocAsyncCtx5 + 240 | 0; //@line 19928
  HEAP32[$580 >> 2] = $122; //@line 19929
  $581 = $ReallocAsyncCtx5 + 244 | 0; //@line 19930
  HEAP32[$581 >> 2] = $124; //@line 19931
  sp = STACKTOP; //@line 19932
  return;
 } else if ((label | 0) == 30) {
  $598 = HEAP8[$14 + ($127 & 255) >> 0] | 0; //@line 19939
  $611 = $$0$be + 5 << 24 >> 24; //@line 19952
  $618 = (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 19959
  $621 = HEAP32[(HEAP32[$102 >> 2] | 0) + 48 >> 2] | 0; //@line 19962
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 19963
  $622 = FUNCTION_TABLE_iiii[$621 & 31]($30, $598, $618) | 0; //@line 19964
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 19967
   $623 = $ReallocAsyncCtx6 + 4 | 0; //@line 19968
   HEAP8[$623 >> 0] = $2; //@line 19969
   $624 = $ReallocAsyncCtx6 + 8 | 0; //@line 19970
   HEAP32[$624 >> 2] = $4; //@line 19971
   $625 = $ReallocAsyncCtx6 + 12 | 0; //@line 19972
   HEAP8[$625 >> 0] = $6; //@line 19973
   $626 = $ReallocAsyncCtx6 + 13 | 0; //@line 19974
   HEAP8[$626 >> 0] = $8; //@line 19975
   $627 = $ReallocAsyncCtx6 + 16 | 0; //@line 19976
   HEAP32[$627 >> 2] = $10; //@line 19977
   $628 = $ReallocAsyncCtx6 + 20 | 0; //@line 19978
   HEAP32[$628 >> 2] = $12; //@line 19979
   $629 = $ReallocAsyncCtx6 + 24 | 0; //@line 19980
   HEAP32[$629 >> 2] = $14; //@line 19981
   $630 = $ReallocAsyncCtx6 + 28 | 0; //@line 19982
   HEAP8[$630 >> 0] = $611; //@line 19983
   $631 = $ReallocAsyncCtx6 + 32 | 0; //@line 19984
   HEAP32[$631 >> 2] = $18; //@line 19985
   $632 = $ReallocAsyncCtx6 + 36 | 0; //@line 19986
   HEAP32[$632 >> 2] = $20; //@line 19987
   $633 = $ReallocAsyncCtx6 + 40 | 0; //@line 19988
   HEAP32[$633 >> 2] = $22; //@line 19989
   $634 = $ReallocAsyncCtx6 + 44 | 0; //@line 19990
   HEAP32[$634 >> 2] = $24; //@line 19991
   $635 = $ReallocAsyncCtx6 + 48 | 0; //@line 19992
   HEAP32[$635 >> 2] = $26; //@line 19993
   $636 = $ReallocAsyncCtx6 + 52 | 0; //@line 19994
   HEAP32[$636 >> 2] = $28; //@line 19995
   $637 = $ReallocAsyncCtx6 + 56 | 0; //@line 19996
   HEAP32[$637 >> 2] = $30; //@line 19997
   $638 = $ReallocAsyncCtx6 + 60 | 0; //@line 19998
   HEAP32[$638 >> 2] = $34; //@line 19999
   $639 = $ReallocAsyncCtx6 + 64 | 0; //@line 20000
   HEAP32[$639 >> 2] = $36; //@line 20001
   $640 = $ReallocAsyncCtx6 + 68 | 0; //@line 20002
   HEAP32[$640 >> 2] = $38; //@line 20003
   $641 = $ReallocAsyncCtx6 + 72 | 0; //@line 20004
   HEAP32[$641 >> 2] = $40; //@line 20005
   $642 = $ReallocAsyncCtx6 + 76 | 0; //@line 20006
   HEAP32[$642 >> 2] = $42; //@line 20007
   $643 = $ReallocAsyncCtx6 + 80 | 0; //@line 20008
   HEAP32[$643 >> 2] = $46; //@line 20009
   $644 = $ReallocAsyncCtx6 + 84 | 0; //@line 20010
   HEAP32[$644 >> 2] = $48; //@line 20011
   $645 = $ReallocAsyncCtx6 + 88 | 0; //@line 20012
   HEAP32[$645 >> 2] = $50; //@line 20013
   $646 = $ReallocAsyncCtx6 + 92 | 0; //@line 20014
   HEAP32[$646 >> 2] = $52; //@line 20015
   $647 = $ReallocAsyncCtx6 + 96 | 0; //@line 20016
   HEAP32[$647 >> 2] = $54; //@line 20017
   $648 = $ReallocAsyncCtx6 + 100 | 0; //@line 20018
   HEAP32[$648 >> 2] = $56; //@line 20019
   $649 = $ReallocAsyncCtx6 + 104 | 0; //@line 20020
   HEAP32[$649 >> 2] = $58; //@line 20021
   $650 = $ReallocAsyncCtx6 + 108 | 0; //@line 20022
   HEAP32[$650 >> 2] = $60; //@line 20023
   $651 = $ReallocAsyncCtx6 + 112 | 0; //@line 20024
   HEAP32[$651 >> 2] = $62; //@line 20025
   $652 = $ReallocAsyncCtx6 + 116 | 0; //@line 20026
   HEAP32[$652 >> 2] = $64; //@line 20027
   $653 = $ReallocAsyncCtx6 + 120 | 0; //@line 20028
   HEAP32[$653 >> 2] = $66; //@line 20029
   $654 = $ReallocAsyncCtx6 + 124 | 0; //@line 20030
   HEAP32[$654 >> 2] = $68; //@line 20031
   $655 = $ReallocAsyncCtx6 + 128 | 0; //@line 20032
   HEAP32[$655 >> 2] = $70; //@line 20033
   $656 = $ReallocAsyncCtx6 + 132 | 0; //@line 20034
   HEAP32[$656 >> 2] = $72; //@line 20035
   $657 = $ReallocAsyncCtx6 + 136 | 0; //@line 20036
   HEAP32[$657 >> 2] = $74; //@line 20037
   $658 = $ReallocAsyncCtx6 + 140 | 0; //@line 20038
   HEAP32[$658 >> 2] = $76; //@line 20039
   $659 = $ReallocAsyncCtx6 + 144 | 0; //@line 20040
   HEAP32[$659 >> 2] = $78; //@line 20041
   $660 = $ReallocAsyncCtx6 + 148 | 0; //@line 20042
   HEAP32[$660 >> 2] = $80; //@line 20043
   $661 = $ReallocAsyncCtx6 + 152 | 0; //@line 20044
   HEAP32[$661 >> 2] = $82; //@line 20045
   $662 = $ReallocAsyncCtx6 + 156 | 0; //@line 20046
   HEAP32[$662 >> 2] = $84; //@line 20047
   $663 = $ReallocAsyncCtx6 + 160 | 0; //@line 20048
   HEAP32[$663 >> 2] = $86; //@line 20049
   $664 = $ReallocAsyncCtx6 + 164 | 0; //@line 20050
   HEAP32[$664 >> 2] = $88; //@line 20051
   $665 = $ReallocAsyncCtx6 + 168 | 0; //@line 20052
   HEAP32[$665 >> 2] = $90; //@line 20053
   $666 = $ReallocAsyncCtx6 + 172 | 0; //@line 20054
   HEAP32[$666 >> 2] = $92; //@line 20055
   $667 = $ReallocAsyncCtx6 + 176 | 0; //@line 20056
   HEAP32[$667 >> 2] = $94; //@line 20057
   $668 = $ReallocAsyncCtx6 + 180 | 0; //@line 20058
   HEAP32[$668 >> 2] = $98; //@line 20059
   $669 = $ReallocAsyncCtx6 + 184 | 0; //@line 20060
   HEAP32[$669 >> 2] = $100; //@line 20061
   $670 = $ReallocAsyncCtx6 + 188 | 0; //@line 20062
   HEAP32[$670 >> 2] = $102; //@line 20063
   $671 = $ReallocAsyncCtx6 + 192 | 0; //@line 20064
   HEAP32[$671 >> 2] = $104; //@line 20065
   $672 = $ReallocAsyncCtx6 + 196 | 0; //@line 20066
   HEAP32[$672 >> 2] = $106; //@line 20067
   $673 = $ReallocAsyncCtx6 + 200 | 0; //@line 20068
   HEAP32[$673 >> 2] = $108; //@line 20069
   $674 = $ReallocAsyncCtx6 + 204 | 0; //@line 20070
   HEAP32[$674 >> 2] = $112; //@line 20071
   $675 = $ReallocAsyncCtx6 + 208 | 0; //@line 20072
   HEAP32[$675 >> 2] = $114; //@line 20073
   $676 = $ReallocAsyncCtx6 + 212 | 0; //@line 20074
   HEAP32[$676 >> 2] = $116; //@line 20075
   $677 = $ReallocAsyncCtx6 + 216 | 0; //@line 20076
   HEAP32[$677 >> 2] = $118; //@line 20077
   $678 = $ReallocAsyncCtx6 + 220 | 0; //@line 20078
   HEAP32[$678 >> 2] = $120; //@line 20079
   $679 = $ReallocAsyncCtx6 + 224 | 0; //@line 20080
   HEAP32[$679 >> 2] = $122; //@line 20081
   $680 = $ReallocAsyncCtx6 + 228 | 0; //@line 20082
   HEAP32[$680 >> 2] = $124; //@line 20083
   sp = STACKTOP; //@line 20084
   return;
  }
  HEAP8[___async_retval >> 0] = $622; //@line 20088
  ___async_unwind = 0; //@line 20089
  HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 20090
  $623 = $ReallocAsyncCtx6 + 4 | 0; //@line 20091
  HEAP8[$623 >> 0] = $2; //@line 20092
  $624 = $ReallocAsyncCtx6 + 8 | 0; //@line 20093
  HEAP32[$624 >> 2] = $4; //@line 20094
  $625 = $ReallocAsyncCtx6 + 12 | 0; //@line 20095
  HEAP8[$625 >> 0] = $6; //@line 20096
  $626 = $ReallocAsyncCtx6 + 13 | 0; //@line 20097
  HEAP8[$626 >> 0] = $8; //@line 20098
  $627 = $ReallocAsyncCtx6 + 16 | 0; //@line 20099
  HEAP32[$627 >> 2] = $10; //@line 20100
  $628 = $ReallocAsyncCtx6 + 20 | 0; //@line 20101
  HEAP32[$628 >> 2] = $12; //@line 20102
  $629 = $ReallocAsyncCtx6 + 24 | 0; //@line 20103
  HEAP32[$629 >> 2] = $14; //@line 20104
  $630 = $ReallocAsyncCtx6 + 28 | 0; //@line 20105
  HEAP8[$630 >> 0] = $611; //@line 20106
  $631 = $ReallocAsyncCtx6 + 32 | 0; //@line 20107
  HEAP32[$631 >> 2] = $18; //@line 20108
  $632 = $ReallocAsyncCtx6 + 36 | 0; //@line 20109
  HEAP32[$632 >> 2] = $20; //@line 20110
  $633 = $ReallocAsyncCtx6 + 40 | 0; //@line 20111
  HEAP32[$633 >> 2] = $22; //@line 20112
  $634 = $ReallocAsyncCtx6 + 44 | 0; //@line 20113
  HEAP32[$634 >> 2] = $24; //@line 20114
  $635 = $ReallocAsyncCtx6 + 48 | 0; //@line 20115
  HEAP32[$635 >> 2] = $26; //@line 20116
  $636 = $ReallocAsyncCtx6 + 52 | 0; //@line 20117
  HEAP32[$636 >> 2] = $28; //@line 20118
  $637 = $ReallocAsyncCtx6 + 56 | 0; //@line 20119
  HEAP32[$637 >> 2] = $30; //@line 20120
  $638 = $ReallocAsyncCtx6 + 60 | 0; //@line 20121
  HEAP32[$638 >> 2] = $34; //@line 20122
  $639 = $ReallocAsyncCtx6 + 64 | 0; //@line 20123
  HEAP32[$639 >> 2] = $36; //@line 20124
  $640 = $ReallocAsyncCtx6 + 68 | 0; //@line 20125
  HEAP32[$640 >> 2] = $38; //@line 20126
  $641 = $ReallocAsyncCtx6 + 72 | 0; //@line 20127
  HEAP32[$641 >> 2] = $40; //@line 20128
  $642 = $ReallocAsyncCtx6 + 76 | 0; //@line 20129
  HEAP32[$642 >> 2] = $42; //@line 20130
  $643 = $ReallocAsyncCtx6 + 80 | 0; //@line 20131
  HEAP32[$643 >> 2] = $46; //@line 20132
  $644 = $ReallocAsyncCtx6 + 84 | 0; //@line 20133
  HEAP32[$644 >> 2] = $48; //@line 20134
  $645 = $ReallocAsyncCtx6 + 88 | 0; //@line 20135
  HEAP32[$645 >> 2] = $50; //@line 20136
  $646 = $ReallocAsyncCtx6 + 92 | 0; //@line 20137
  HEAP32[$646 >> 2] = $52; //@line 20138
  $647 = $ReallocAsyncCtx6 + 96 | 0; //@line 20139
  HEAP32[$647 >> 2] = $54; //@line 20140
  $648 = $ReallocAsyncCtx6 + 100 | 0; //@line 20141
  HEAP32[$648 >> 2] = $56; //@line 20142
  $649 = $ReallocAsyncCtx6 + 104 | 0; //@line 20143
  HEAP32[$649 >> 2] = $58; //@line 20144
  $650 = $ReallocAsyncCtx6 + 108 | 0; //@line 20145
  HEAP32[$650 >> 2] = $60; //@line 20146
  $651 = $ReallocAsyncCtx6 + 112 | 0; //@line 20147
  HEAP32[$651 >> 2] = $62; //@line 20148
  $652 = $ReallocAsyncCtx6 + 116 | 0; //@line 20149
  HEAP32[$652 >> 2] = $64; //@line 20150
  $653 = $ReallocAsyncCtx6 + 120 | 0; //@line 20151
  HEAP32[$653 >> 2] = $66; //@line 20152
  $654 = $ReallocAsyncCtx6 + 124 | 0; //@line 20153
  HEAP32[$654 >> 2] = $68; //@line 20154
  $655 = $ReallocAsyncCtx6 + 128 | 0; //@line 20155
  HEAP32[$655 >> 2] = $70; //@line 20156
  $656 = $ReallocAsyncCtx6 + 132 | 0; //@line 20157
  HEAP32[$656 >> 2] = $72; //@line 20158
  $657 = $ReallocAsyncCtx6 + 136 | 0; //@line 20159
  HEAP32[$657 >> 2] = $74; //@line 20160
  $658 = $ReallocAsyncCtx6 + 140 | 0; //@line 20161
  HEAP32[$658 >> 2] = $76; //@line 20162
  $659 = $ReallocAsyncCtx6 + 144 | 0; //@line 20163
  HEAP32[$659 >> 2] = $78; //@line 20164
  $660 = $ReallocAsyncCtx6 + 148 | 0; //@line 20165
  HEAP32[$660 >> 2] = $80; //@line 20166
  $661 = $ReallocAsyncCtx6 + 152 | 0; //@line 20167
  HEAP32[$661 >> 2] = $82; //@line 20168
  $662 = $ReallocAsyncCtx6 + 156 | 0; //@line 20169
  HEAP32[$662 >> 2] = $84; //@line 20170
  $663 = $ReallocAsyncCtx6 + 160 | 0; //@line 20171
  HEAP32[$663 >> 2] = $86; //@line 20172
  $664 = $ReallocAsyncCtx6 + 164 | 0; //@line 20173
  HEAP32[$664 >> 2] = $88; //@line 20174
  $665 = $ReallocAsyncCtx6 + 168 | 0; //@line 20175
  HEAP32[$665 >> 2] = $90; //@line 20176
  $666 = $ReallocAsyncCtx6 + 172 | 0; //@line 20177
  HEAP32[$666 >> 2] = $92; //@line 20178
  $667 = $ReallocAsyncCtx6 + 176 | 0; //@line 20179
  HEAP32[$667 >> 2] = $94; //@line 20180
  $668 = $ReallocAsyncCtx6 + 180 | 0; //@line 20181
  HEAP32[$668 >> 2] = $98; //@line 20182
  $669 = $ReallocAsyncCtx6 + 184 | 0; //@line 20183
  HEAP32[$669 >> 2] = $100; //@line 20184
  $670 = $ReallocAsyncCtx6 + 188 | 0; //@line 20185
  HEAP32[$670 >> 2] = $102; //@line 20186
  $671 = $ReallocAsyncCtx6 + 192 | 0; //@line 20187
  HEAP32[$671 >> 2] = $104; //@line 20188
  $672 = $ReallocAsyncCtx6 + 196 | 0; //@line 20189
  HEAP32[$672 >> 2] = $106; //@line 20190
  $673 = $ReallocAsyncCtx6 + 200 | 0; //@line 20191
  HEAP32[$673 >> 2] = $108; //@line 20192
  $674 = $ReallocAsyncCtx6 + 204 | 0; //@line 20193
  HEAP32[$674 >> 2] = $112; //@line 20194
  $675 = $ReallocAsyncCtx6 + 208 | 0; //@line 20195
  HEAP32[$675 >> 2] = $114; //@line 20196
  $676 = $ReallocAsyncCtx6 + 212 | 0; //@line 20197
  HEAP32[$676 >> 2] = $116; //@line 20198
  $677 = $ReallocAsyncCtx6 + 216 | 0; //@line 20199
  HEAP32[$677 >> 2] = $118; //@line 20200
  $678 = $ReallocAsyncCtx6 + 220 | 0; //@line 20201
  HEAP32[$678 >> 2] = $120; //@line 20202
  $679 = $ReallocAsyncCtx6 + 224 | 0; //@line 20203
  HEAP32[$679 >> 2] = $122; //@line 20204
  $680 = $ReallocAsyncCtx6 + 228 | 0; //@line 20205
  HEAP32[$680 >> 2] = $124; //@line 20206
  sp = STACKTOP; //@line 20207
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 20212
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_292($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i116 = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $319 = 0, $32 = 0, $320 = 0, $328 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $394 = 0, $395 = 0, $4 = 0, $40 = 0, $409 = 0, $42 = 0, $430 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $498 = 0, $50 = 0, $502 = 0, $506 = 0, $511 = 0, $512 = 0, $516 = 0, $52 = 0, $520 = 0, $522 = 0, $524 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $595 = 0, $6 = 0, $60 = 0, $608 = 0, $615 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12308
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 12310
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12312
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 12314
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 12316
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 12318
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 12320
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 12322
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 12324
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 12326
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 12328
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 12330
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 12332
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 12334
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 12336
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 12338
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 12340
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 12342
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 12344
 $38 = HEAP8[$0 + 72 >> 0] | 0; //@line 12346
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 12348
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 12350
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 12352
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 12354
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 12356
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 12358
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 12360
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 12362
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 12364
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 12366
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 12368
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 12370
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 12372
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 12374
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 12376
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 12378
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 12380
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 12382
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 12384
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 12386
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 12388
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 12390
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 12392
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 12394
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 12396
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 12398
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 12400
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 12402
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 12404
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 12406
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 12408
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 12410
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 12412
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 12414
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 12416
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 12418
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 12420
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 12422
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 12424
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 12426
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$80 >> 0] = HEAP8[$60 >> 0] | 0; //@line 12431
  HEAP32[$98 >> 2] = HEAP32[$62 >> 2]; //@line 12433
  HEAP8[$116 >> 0] = HEAP8[$72 >> 0] | 0; //@line 12435
 }
 $319 = HEAP8[$24 >> 0] | 0; //@line 12440
 $320 = $319 & 255; //@line 12441
 if ((128 - (HEAPU8[$12 >> 0] | 0) - $320 | 0) > 1) {
  HEAP8[$10 + 4 + $320 >> 0] = 5; //@line 12447
  HEAP8[$24 >> 0] = $319 + 2 << 24 >> 24; //@line 12449
  HEAP8[($319 + 1 & 255) + ($10 + 4) >> 0] = $AsyncRetVal; //@line 12452
  HEAP8[$110 >> 0] = 1; //@line 12453
  HEAP8[$42 >> 0] = 1; //@line 12454
  $$0$i116 = 0; //@line 12455
 } else {
  $$0$i116 = -1010; //@line 12457
 }
 $$0$be = $38; //@line 12459
 $$0107$be = $$0$i116; //@line 12459
 L8 : while (1) {
  if (($$0$be & 255) >= ($8 & 255)) {
   label = 35; //@line 12463
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 12467
  switch (HEAP8[$14 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 12472
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 12477
    break L8;
    break;
   }
  case 7:
   {
    label = 23; //@line 12482
    break L8;
    break;
   }
  case 9:
   {
    label = 29; //@line 12487
    break L8;
    break;
   }
  case 10:
   {
    label = 32; //@line 12492
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$114 >> 2] = 0; //@line 12497
    HEAP8[$4 >> 0] = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 12502
    HEAP8[$30 >> 0] = HEAP8[$14 + ($$0$be + 2 & 255) >> 0] | 0; //@line 12507
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 12508
    continue L8;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 12513
    $207 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 12516
    HEAP8[$36 >> 0] = $207; //@line 12517
    HEAP16[$52 >> 1] = 1 << ($207 & 255); //@line 12521
    $214 = HEAP8[$24 >> 0] | 0; //@line 12525
    $215 = $214 & 255; //@line 12526
    if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 12529
     $$0107$be = -1010; //@line 12529
     continue L8;
    }
    HEAP8[$24 >> 0] = $214 + 1 << 24 >> 24; //@line 12534
    HEAP8[$10 + 4 + $215 >> 0] = 4; //@line 12535
    HEAP8[$42 >> 0] = 1; //@line 12536
    $$0$be = $204; //@line 12537
    $$0107$be = 0; //@line 12537
    continue L8;
    break;
   }
  case 6:
   {
    $328 = HEAP32[$16 >> 2] | 0; //@line 12542
    if ($328 | 0) {
     label = 18; //@line 12545
     break L8;
    }
    $394 = HEAP8[$24 >> 0] | 0; //@line 12551
    $395 = $394 & 255; //@line 12552
    if ((128 - (HEAPU8[$12 >> 0] | 0) - $395 | 0) <= 2) {
     $$0$be = $119; //@line 12556
     $$0107$be = -1010; //@line 12556
     continue L8;
    }
    HEAP8[$10 + 4 + $395 >> 0] = 6; //@line 12561
    HEAP8[($394 + 1 & 255) + ($10 + 4) >> 0] = -1; //@line 12565
    HEAP8[$24 >> 0] = $394 + 3 << 24 >> 24; //@line 12567
    HEAP8[($394 + 2 & 255) + ($10 + 4) >> 0] = $2; //@line 12570
    HEAP8[$42 >> 0] = 1; //@line 12571
    $$0$be = $119; //@line 12572
    $$0107$be = 0; //@line 12572
    continue L8;
    break;
   }
  case 8:
   {
    $498 = $$0$be + 2 << 24 >> 24; //@line 12577
    $502 = HEAP8[$14 + ($119 & 255) >> 0] & 15; //@line 12581
    $506 = ($502 + ($502 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 12586
    HEAP32[$92 >> 2] = $506; //@line 12587
    HEAP32[$66 >> 2] = $506 + 1e3; //@line 12589
    $511 = HEAP8[$24 >> 0] | 0; //@line 12593
    $512 = $511 & 255; //@line 12594
    if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) <= ($512 | 0)) {
     $$0$be = $498; //@line 12597
     $$0107$be = -1010; //@line 12597
     continue L8;
    }
    HEAP8[$24 >> 0] = $511 + 1 << 24 >> 24; //@line 12602
    HEAP8[$10 + 4 + $512 >> 0] = 8; //@line 12603
    HEAP8[$110 >> 0] = 1; //@line 12604
    HEAP8[$42 >> 0] = 1; //@line 12605
    $$0$be = $498; //@line 12606
    $$0107$be = 0; //@line 12606
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 12611
    $$0107$be = -1013; //@line 12611
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$54 >> 0] = 0; //@line 12617
  HEAP8[$86 >> 0] = 0; //@line 12618
  HEAP8[$90 >> 0] = 0; //@line 12619
  HEAP8[$64 >> 0] = 0; //@line 12620
  $130 = $119 & 255; //@line 12621
  $131 = $130 + -1 | 0; //@line 12622
  HEAP32[$32 >> 2] = $14 + $131; //@line 12624
  HEAP8[$34 >> 0] = $100 - $131; //@line 12627
  HEAP8[$58 >> 0] = HEAP8[$50 >> 0] | 0; //@line 12629
  HEAP8[$70 >> 0] = HEAP8[$74 >> 0] | 0; //@line 12631
  HEAP8[$84 >> 0] = HEAP8[$94 >> 0] | 0; //@line 12633
  HEAP8[$102 >> 0] = HEAP8[$104 >> 0] | 0; //@line 12635
  HEAP8[$18 >> 0] = HEAP8[$106 >> 0] | 0; //@line 12637
  $142 = HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] | 0; //@line 12640
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 12641
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($28, $48, $54, $86, $90, $64) | 0; //@line 12642
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 473; //@line 12645
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 12646
   HEAP8[$144 >> 0] = $2; //@line 12647
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 12648
   HEAP32[$145 >> 2] = $4; //@line 12649
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 12650
   HEAP8[$146 >> 0] = $6; //@line 12651
   $147 = $ReallocAsyncCtx + 13 | 0; //@line 12652
   HEAP8[$147 >> 0] = $8; //@line 12653
   $148 = $ReallocAsyncCtx + 16 | 0; //@line 12654
   HEAP32[$148 >> 2] = $10; //@line 12655
   $149 = $ReallocAsyncCtx + 20 | 0; //@line 12656
   HEAP32[$149 >> 2] = $12; //@line 12657
   $150 = $ReallocAsyncCtx + 24 | 0; //@line 12658
   HEAP32[$150 >> 2] = $14; //@line 12659
   $151 = $ReallocAsyncCtx + 28 | 0; //@line 12660
   HEAP32[$151 >> 2] = $16; //@line 12661
   $152 = $ReallocAsyncCtx + 32 | 0; //@line 12662
   HEAP32[$152 >> 2] = $18; //@line 12663
   $153 = $ReallocAsyncCtx + 36 | 0; //@line 12664
   HEAP32[$153 >> 2] = $20; //@line 12665
   $154 = $ReallocAsyncCtx + 40 | 0; //@line 12666
   HEAP32[$154 >> 2] = $22; //@line 12667
   $155 = $ReallocAsyncCtx + 44 | 0; //@line 12668
   HEAP32[$155 >> 2] = $24; //@line 12669
   $156 = $ReallocAsyncCtx + 48 | 0; //@line 12670
   HEAP32[$156 >> 2] = $26; //@line 12671
   $157 = $ReallocAsyncCtx + 52 | 0; //@line 12672
   HEAP32[$157 >> 2] = $28; //@line 12673
   $158 = $ReallocAsyncCtx + 56 | 0; //@line 12674
   HEAP32[$158 >> 2] = $30; //@line 12675
   $159 = $ReallocAsyncCtx + 60 | 0; //@line 12676
   HEAP32[$159 >> 2] = $$0107$be; //@line 12677
   $160 = $ReallocAsyncCtx + 64 | 0; //@line 12678
   HEAP32[$160 >> 2] = $32; //@line 12679
   $161 = $ReallocAsyncCtx + 68 | 0; //@line 12680
   HEAP32[$161 >> 2] = $34; //@line 12681
   $162 = $ReallocAsyncCtx + 72 | 0; //@line 12682
   HEAP32[$162 >> 2] = $36; //@line 12683
   $163 = $ReallocAsyncCtx + 76 | 0; //@line 12684
   HEAP32[$163 >> 2] = $40; //@line 12685
   $164 = $ReallocAsyncCtx + 80 | 0; //@line 12686
   HEAP32[$164 >> 2] = $42; //@line 12687
   $165 = $ReallocAsyncCtx + 84 | 0; //@line 12688
   HEAP32[$165 >> 2] = $130; //@line 12689
   $166 = $ReallocAsyncCtx + 88 | 0; //@line 12690
   HEAP32[$166 >> 2] = $44; //@line 12691
   $167 = $ReallocAsyncCtx + 92 | 0; //@line 12692
   HEAP32[$167 >> 2] = $46; //@line 12693
   $168 = $ReallocAsyncCtx + 96 | 0; //@line 12694
   HEAP32[$168 >> 2] = $48; //@line 12695
   $169 = $ReallocAsyncCtx + 100 | 0; //@line 12696
   HEAP32[$169 >> 2] = $50; //@line 12697
   $170 = $ReallocAsyncCtx + 104 | 0; //@line 12698
   HEAP32[$170 >> 2] = $52; //@line 12699
   $171 = $ReallocAsyncCtx + 108 | 0; //@line 12700
   HEAP32[$171 >> 2] = $54; //@line 12701
   $172 = $ReallocAsyncCtx + 112 | 0; //@line 12702
   HEAP32[$172 >> 2] = $56; //@line 12703
   $173 = $ReallocAsyncCtx + 116 | 0; //@line 12704
   HEAP32[$173 >> 2] = $58; //@line 12705
   $174 = $ReallocAsyncCtx + 120 | 0; //@line 12706
   HEAP32[$174 >> 2] = $60; //@line 12707
   $175 = $ReallocAsyncCtx + 124 | 0; //@line 12708
   HEAP32[$175 >> 2] = $62; //@line 12709
   $176 = $ReallocAsyncCtx + 128 | 0; //@line 12710
   HEAP32[$176 >> 2] = $64; //@line 12711
   $177 = $ReallocAsyncCtx + 132 | 0; //@line 12712
   HEAP32[$177 >> 2] = $66; //@line 12713
   $178 = $ReallocAsyncCtx + 136 | 0; //@line 12714
   HEAP32[$178 >> 2] = $68; //@line 12715
   $179 = $ReallocAsyncCtx + 140 | 0; //@line 12716
   HEAP32[$179 >> 2] = $70; //@line 12717
   $180 = $ReallocAsyncCtx + 144 | 0; //@line 12718
   HEAP32[$180 >> 2] = $72; //@line 12719
   $181 = $ReallocAsyncCtx + 148 | 0; //@line 12720
   HEAP32[$181 >> 2] = $74; //@line 12721
   $182 = $ReallocAsyncCtx + 152 | 0; //@line 12722
   HEAP32[$182 >> 2] = $76; //@line 12723
   $183 = $ReallocAsyncCtx + 156 | 0; //@line 12724
   HEAP32[$183 >> 2] = $78; //@line 12725
   $184 = $ReallocAsyncCtx + 160 | 0; //@line 12726
   HEAP32[$184 >> 2] = $80; //@line 12727
   $185 = $ReallocAsyncCtx + 164 | 0; //@line 12728
   HEAP32[$185 >> 2] = $82; //@line 12729
   $186 = $ReallocAsyncCtx + 168 | 0; //@line 12730
   HEAP32[$186 >> 2] = $84; //@line 12731
   $187 = $ReallocAsyncCtx + 172 | 0; //@line 12732
   HEAP32[$187 >> 2] = $86; //@line 12733
   $188 = $ReallocAsyncCtx + 176 | 0; //@line 12734
   HEAP32[$188 >> 2] = $88; //@line 12735
   $189 = $ReallocAsyncCtx + 180 | 0; //@line 12736
   HEAP32[$189 >> 2] = $90; //@line 12737
   $190 = $ReallocAsyncCtx + 184 | 0; //@line 12738
   HEAP32[$190 >> 2] = $92; //@line 12739
   $191 = $ReallocAsyncCtx + 188 | 0; //@line 12740
   HEAP32[$191 >> 2] = $94; //@line 12741
   $192 = $ReallocAsyncCtx + 192 | 0; //@line 12742
   HEAP32[$192 >> 2] = $96; //@line 12743
   $193 = $ReallocAsyncCtx + 196 | 0; //@line 12744
   HEAP32[$193 >> 2] = $98; //@line 12745
   $194 = $ReallocAsyncCtx + 200 | 0; //@line 12746
   HEAP32[$194 >> 2] = $100; //@line 12747
   $195 = $ReallocAsyncCtx + 204 | 0; //@line 12748
   HEAP32[$195 >> 2] = $102; //@line 12749
   $196 = $ReallocAsyncCtx + 208 | 0; //@line 12750
   HEAP32[$196 >> 2] = $104; //@line 12751
   $197 = $ReallocAsyncCtx + 212 | 0; //@line 12752
   HEAP32[$197 >> 2] = $106; //@line 12753
   $198 = $ReallocAsyncCtx + 216 | 0; //@line 12754
   HEAP32[$198 >> 2] = $108; //@line 12755
   $199 = $ReallocAsyncCtx + 220 | 0; //@line 12756
   HEAP32[$199 >> 2] = $110; //@line 12757
   $200 = $ReallocAsyncCtx + 224 | 0; //@line 12758
   HEAP32[$200 >> 2] = $112; //@line 12759
   $201 = $ReallocAsyncCtx + 228 | 0; //@line 12760
   HEAP32[$201 >> 2] = $114; //@line 12761
   $202 = $ReallocAsyncCtx + 232 | 0; //@line 12762
   HEAP32[$202 >> 2] = $116; //@line 12763
   sp = STACKTOP; //@line 12764
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 12768
  ___async_unwind = 0; //@line 12769
  HEAP32[$ReallocAsyncCtx >> 2] = 473; //@line 12770
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 12771
  HEAP8[$144 >> 0] = $2; //@line 12772
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 12773
  HEAP32[$145 >> 2] = $4; //@line 12774
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 12775
  HEAP8[$146 >> 0] = $6; //@line 12776
  $147 = $ReallocAsyncCtx + 13 | 0; //@line 12777
  HEAP8[$147 >> 0] = $8; //@line 12778
  $148 = $ReallocAsyncCtx + 16 | 0; //@line 12779
  HEAP32[$148 >> 2] = $10; //@line 12780
  $149 = $ReallocAsyncCtx + 20 | 0; //@line 12781
  HEAP32[$149 >> 2] = $12; //@line 12782
  $150 = $ReallocAsyncCtx + 24 | 0; //@line 12783
  HEAP32[$150 >> 2] = $14; //@line 12784
  $151 = $ReallocAsyncCtx + 28 | 0; //@line 12785
  HEAP32[$151 >> 2] = $16; //@line 12786
  $152 = $ReallocAsyncCtx + 32 | 0; //@line 12787
  HEAP32[$152 >> 2] = $18; //@line 12788
  $153 = $ReallocAsyncCtx + 36 | 0; //@line 12789
  HEAP32[$153 >> 2] = $20; //@line 12790
  $154 = $ReallocAsyncCtx + 40 | 0; //@line 12791
  HEAP32[$154 >> 2] = $22; //@line 12792
  $155 = $ReallocAsyncCtx + 44 | 0; //@line 12793
  HEAP32[$155 >> 2] = $24; //@line 12794
  $156 = $ReallocAsyncCtx + 48 | 0; //@line 12795
  HEAP32[$156 >> 2] = $26; //@line 12796
  $157 = $ReallocAsyncCtx + 52 | 0; //@line 12797
  HEAP32[$157 >> 2] = $28; //@line 12798
  $158 = $ReallocAsyncCtx + 56 | 0; //@line 12799
  HEAP32[$158 >> 2] = $30; //@line 12800
  $159 = $ReallocAsyncCtx + 60 | 0; //@line 12801
  HEAP32[$159 >> 2] = $$0107$be; //@line 12802
  $160 = $ReallocAsyncCtx + 64 | 0; //@line 12803
  HEAP32[$160 >> 2] = $32; //@line 12804
  $161 = $ReallocAsyncCtx + 68 | 0; //@line 12805
  HEAP32[$161 >> 2] = $34; //@line 12806
  $162 = $ReallocAsyncCtx + 72 | 0; //@line 12807
  HEAP32[$162 >> 2] = $36; //@line 12808
  $163 = $ReallocAsyncCtx + 76 | 0; //@line 12809
  HEAP32[$163 >> 2] = $40; //@line 12810
  $164 = $ReallocAsyncCtx + 80 | 0; //@line 12811
  HEAP32[$164 >> 2] = $42; //@line 12812
  $165 = $ReallocAsyncCtx + 84 | 0; //@line 12813
  HEAP32[$165 >> 2] = $130; //@line 12814
  $166 = $ReallocAsyncCtx + 88 | 0; //@line 12815
  HEAP32[$166 >> 2] = $44; //@line 12816
  $167 = $ReallocAsyncCtx + 92 | 0; //@line 12817
  HEAP32[$167 >> 2] = $46; //@line 12818
  $168 = $ReallocAsyncCtx + 96 | 0; //@line 12819
  HEAP32[$168 >> 2] = $48; //@line 12820
  $169 = $ReallocAsyncCtx + 100 | 0; //@line 12821
  HEAP32[$169 >> 2] = $50; //@line 12822
  $170 = $ReallocAsyncCtx + 104 | 0; //@line 12823
  HEAP32[$170 >> 2] = $52; //@line 12824
  $171 = $ReallocAsyncCtx + 108 | 0; //@line 12825
  HEAP32[$171 >> 2] = $54; //@line 12826
  $172 = $ReallocAsyncCtx + 112 | 0; //@line 12827
  HEAP32[$172 >> 2] = $56; //@line 12828
  $173 = $ReallocAsyncCtx + 116 | 0; //@line 12829
  HEAP32[$173 >> 2] = $58; //@line 12830
  $174 = $ReallocAsyncCtx + 120 | 0; //@line 12831
  HEAP32[$174 >> 2] = $60; //@line 12832
  $175 = $ReallocAsyncCtx + 124 | 0; //@line 12833
  HEAP32[$175 >> 2] = $62; //@line 12834
  $176 = $ReallocAsyncCtx + 128 | 0; //@line 12835
  HEAP32[$176 >> 2] = $64; //@line 12836
  $177 = $ReallocAsyncCtx + 132 | 0; //@line 12837
  HEAP32[$177 >> 2] = $66; //@line 12838
  $178 = $ReallocAsyncCtx + 136 | 0; //@line 12839
  HEAP32[$178 >> 2] = $68; //@line 12840
  $179 = $ReallocAsyncCtx + 140 | 0; //@line 12841
  HEAP32[$179 >> 2] = $70; //@line 12842
  $180 = $ReallocAsyncCtx + 144 | 0; //@line 12843
  HEAP32[$180 >> 2] = $72; //@line 12844
  $181 = $ReallocAsyncCtx + 148 | 0; //@line 12845
  HEAP32[$181 >> 2] = $74; //@line 12846
  $182 = $ReallocAsyncCtx + 152 | 0; //@line 12847
  HEAP32[$182 >> 2] = $76; //@line 12848
  $183 = $ReallocAsyncCtx + 156 | 0; //@line 12849
  HEAP32[$183 >> 2] = $78; //@line 12850
  $184 = $ReallocAsyncCtx + 160 | 0; //@line 12851
  HEAP32[$184 >> 2] = $80; //@line 12852
  $185 = $ReallocAsyncCtx + 164 | 0; //@line 12853
  HEAP32[$185 >> 2] = $82; //@line 12854
  $186 = $ReallocAsyncCtx + 168 | 0; //@line 12855
  HEAP32[$186 >> 2] = $84; //@line 12856
  $187 = $ReallocAsyncCtx + 172 | 0; //@line 12857
  HEAP32[$187 >> 2] = $86; //@line 12858
  $188 = $ReallocAsyncCtx + 176 | 0; //@line 12859
  HEAP32[$188 >> 2] = $88; //@line 12860
  $189 = $ReallocAsyncCtx + 180 | 0; //@line 12861
  HEAP32[$189 >> 2] = $90; //@line 12862
  $190 = $ReallocAsyncCtx + 184 | 0; //@line 12863
  HEAP32[$190 >> 2] = $92; //@line 12864
  $191 = $ReallocAsyncCtx + 188 | 0; //@line 12865
  HEAP32[$191 >> 2] = $94; //@line 12866
  $192 = $ReallocAsyncCtx + 192 | 0; //@line 12867
  HEAP32[$192 >> 2] = $96; //@line 12868
  $193 = $ReallocAsyncCtx + 196 | 0; //@line 12869
  HEAP32[$193 >> 2] = $98; //@line 12870
  $194 = $ReallocAsyncCtx + 200 | 0; //@line 12871
  HEAP32[$194 >> 2] = $100; //@line 12872
  $195 = $ReallocAsyncCtx + 204 | 0; //@line 12873
  HEAP32[$195 >> 2] = $102; //@line 12874
  $196 = $ReallocAsyncCtx + 208 | 0; //@line 12875
  HEAP32[$196 >> 2] = $104; //@line 12876
  $197 = $ReallocAsyncCtx + 212 | 0; //@line 12877
  HEAP32[$197 >> 2] = $106; //@line 12878
  $198 = $ReallocAsyncCtx + 216 | 0; //@line 12879
  HEAP32[$198 >> 2] = $108; //@line 12880
  $199 = $ReallocAsyncCtx + 220 | 0; //@line 12881
  HEAP32[$199 >> 2] = $110; //@line 12882
  $200 = $ReallocAsyncCtx + 224 | 0; //@line 12883
  HEAP32[$200 >> 2] = $112; //@line 12884
  $201 = $ReallocAsyncCtx + 228 | 0; //@line 12885
  HEAP32[$201 >> 2] = $114; //@line 12886
  $202 = $ReallocAsyncCtx + 232 | 0; //@line 12887
  HEAP32[$202 >> 2] = $116; //@line 12888
  sp = STACKTOP; //@line 12889
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 12895
  HEAP8[$72 >> 0] = ($221 & 255) >>> 4 & 7; //@line 12900
  HEAP8[$60 >> 0] = $221 & 15; //@line 12902
  $240 = $$0$be + 5 << 24 >> 24; //@line 12916
  HEAP32[$62 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 12924
  $250 = HEAP32[(HEAP32[$88 >> 2] | 0) + 40 >> 2] | 0; //@line 12927
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 12928
  $251 = FUNCTION_TABLE_iii[$250 & 31]($28, $68) | 0; //@line 12929
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 12932
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 12933
   HEAP8[$252 >> 0] = $2; //@line 12934
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 12935
   HEAP32[$253 >> 2] = $4; //@line 12936
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 12937
   HEAP8[$254 >> 0] = $6; //@line 12938
   $255 = $ReallocAsyncCtx2 + 13 | 0; //@line 12939
   HEAP8[$255 >> 0] = $8; //@line 12940
   $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 12941
   HEAP32[$256 >> 2] = $10; //@line 12942
   $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 12943
   HEAP32[$257 >> 2] = $12; //@line 12944
   $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 12945
   HEAP32[$258 >> 2] = $14; //@line 12946
   $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 12947
   HEAP32[$259 >> 2] = $16; //@line 12948
   $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 12949
   HEAP32[$260 >> 2] = $18; //@line 12950
   $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 12951
   HEAP32[$261 >> 2] = $20; //@line 12952
   $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 12953
   HEAP32[$262 >> 2] = $22; //@line 12954
   $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 12955
   HEAP32[$263 >> 2] = $24; //@line 12956
   $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 12957
   HEAP32[$264 >> 2] = $26; //@line 12958
   $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 12959
   HEAP32[$265 >> 2] = $28; //@line 12960
   $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 12961
   HEAP32[$266 >> 2] = $30; //@line 12962
   $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 12963
   HEAP32[$267 >> 2] = $32; //@line 12964
   $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 12965
   HEAP32[$268 >> 2] = $34; //@line 12966
   $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 12967
   HEAP32[$269 >> 2] = $36; //@line 12968
   $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 12969
   HEAP8[$270 >> 0] = $240; //@line 12970
   $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 12971
   HEAP32[$271 >> 2] = $40; //@line 12972
   $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 12973
   HEAP32[$272 >> 2] = $42; //@line 12974
   $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 12975
   HEAP32[$273 >> 2] = $44; //@line 12976
   $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 12977
   HEAP32[$274 >> 2] = $46; //@line 12978
   $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 12979
   HEAP32[$275 >> 2] = $48; //@line 12980
   $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 12981
   HEAP32[$276 >> 2] = $50; //@line 12982
   $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 12983
   HEAP32[$277 >> 2] = $52; //@line 12984
   $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 12985
   HEAP32[$278 >> 2] = $54; //@line 12986
   $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 12987
   HEAP32[$279 >> 2] = $56; //@line 12988
   $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 12989
   HEAP32[$280 >> 2] = $58; //@line 12990
   $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 12991
   HEAP32[$281 >> 2] = $60; //@line 12992
   $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 12993
   HEAP32[$282 >> 2] = $62; //@line 12994
   $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 12995
   HEAP32[$283 >> 2] = $64; //@line 12996
   $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 12997
   HEAP32[$284 >> 2] = $66; //@line 12998
   $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 12999
   HEAP32[$285 >> 2] = $68; //@line 13000
   $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 13001
   HEAP32[$286 >> 2] = $70; //@line 13002
   $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 13003
   HEAP32[$287 >> 2] = $72; //@line 13004
   $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 13005
   HEAP32[$288 >> 2] = $74; //@line 13006
   $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 13007
   HEAP32[$289 >> 2] = $76; //@line 13008
   $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 13009
   HEAP32[$290 >> 2] = $78; //@line 13010
   $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 13011
   HEAP32[$291 >> 2] = $80; //@line 13012
   $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 13013
   HEAP32[$292 >> 2] = $82; //@line 13014
   $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 13015
   HEAP32[$293 >> 2] = $84; //@line 13016
   $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 13017
   HEAP32[$294 >> 2] = $86; //@line 13018
   $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 13019
   HEAP32[$295 >> 2] = $88; //@line 13020
   $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 13021
   HEAP32[$296 >> 2] = $90; //@line 13022
   $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 13023
   HEAP32[$297 >> 2] = $92; //@line 13024
   $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 13025
   HEAP32[$298 >> 2] = $94; //@line 13026
   $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 13027
   HEAP32[$299 >> 2] = $96; //@line 13028
   $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 13029
   HEAP32[$300 >> 2] = $98; //@line 13030
   $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 13031
   HEAP32[$301 >> 2] = $100; //@line 13032
   $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 13033
   HEAP32[$302 >> 2] = $102; //@line 13034
   $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 13035
   HEAP32[$303 >> 2] = $104; //@line 13036
   $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 13037
   HEAP32[$304 >> 2] = $106; //@line 13038
   $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 13039
   HEAP32[$305 >> 2] = $108; //@line 13040
   $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 13041
   HEAP32[$306 >> 2] = $110; //@line 13042
   $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 13043
   HEAP32[$307 >> 2] = $112; //@line 13044
   $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 13045
   HEAP32[$308 >> 2] = $114; //@line 13046
   $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 13047
   HEAP32[$309 >> 2] = $116; //@line 13048
   sp = STACKTOP; //@line 13049
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 13053
  ___async_unwind = 0; //@line 13054
  HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 13055
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 13056
  HEAP8[$252 >> 0] = $2; //@line 13057
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 13058
  HEAP32[$253 >> 2] = $4; //@line 13059
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 13060
  HEAP8[$254 >> 0] = $6; //@line 13061
  $255 = $ReallocAsyncCtx2 + 13 | 0; //@line 13062
  HEAP8[$255 >> 0] = $8; //@line 13063
  $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 13064
  HEAP32[$256 >> 2] = $10; //@line 13065
  $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 13066
  HEAP32[$257 >> 2] = $12; //@line 13067
  $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 13068
  HEAP32[$258 >> 2] = $14; //@line 13069
  $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 13070
  HEAP32[$259 >> 2] = $16; //@line 13071
  $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 13072
  HEAP32[$260 >> 2] = $18; //@line 13073
  $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 13074
  HEAP32[$261 >> 2] = $20; //@line 13075
  $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 13076
  HEAP32[$262 >> 2] = $22; //@line 13077
  $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 13078
  HEAP32[$263 >> 2] = $24; //@line 13079
  $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 13080
  HEAP32[$264 >> 2] = $26; //@line 13081
  $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 13082
  HEAP32[$265 >> 2] = $28; //@line 13083
  $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 13084
  HEAP32[$266 >> 2] = $30; //@line 13085
  $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 13086
  HEAP32[$267 >> 2] = $32; //@line 13087
  $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 13088
  HEAP32[$268 >> 2] = $34; //@line 13089
  $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 13090
  HEAP32[$269 >> 2] = $36; //@line 13091
  $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 13092
  HEAP8[$270 >> 0] = $240; //@line 13093
  $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 13094
  HEAP32[$271 >> 2] = $40; //@line 13095
  $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 13096
  HEAP32[$272 >> 2] = $42; //@line 13097
  $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 13098
  HEAP32[$273 >> 2] = $44; //@line 13099
  $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 13100
  HEAP32[$274 >> 2] = $46; //@line 13101
  $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 13102
  HEAP32[$275 >> 2] = $48; //@line 13103
  $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 13104
  HEAP32[$276 >> 2] = $50; //@line 13105
  $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 13106
  HEAP32[$277 >> 2] = $52; //@line 13107
  $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 13108
  HEAP32[$278 >> 2] = $54; //@line 13109
  $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 13110
  HEAP32[$279 >> 2] = $56; //@line 13111
  $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 13112
  HEAP32[$280 >> 2] = $58; //@line 13113
  $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 13114
  HEAP32[$281 >> 2] = $60; //@line 13115
  $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 13116
  HEAP32[$282 >> 2] = $62; //@line 13117
  $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 13118
  HEAP32[$283 >> 2] = $64; //@line 13119
  $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 13120
  HEAP32[$284 >> 2] = $66; //@line 13121
  $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 13122
  HEAP32[$285 >> 2] = $68; //@line 13123
  $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 13124
  HEAP32[$286 >> 2] = $70; //@line 13125
  $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 13126
  HEAP32[$287 >> 2] = $72; //@line 13127
  $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 13128
  HEAP32[$288 >> 2] = $74; //@line 13129
  $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 13130
  HEAP32[$289 >> 2] = $76; //@line 13131
  $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 13132
  HEAP32[$290 >> 2] = $78; //@line 13133
  $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 13134
  HEAP32[$291 >> 2] = $80; //@line 13135
  $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 13136
  HEAP32[$292 >> 2] = $82; //@line 13137
  $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 13138
  HEAP32[$293 >> 2] = $84; //@line 13139
  $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 13140
  HEAP32[$294 >> 2] = $86; //@line 13141
  $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 13142
  HEAP32[$295 >> 2] = $88; //@line 13143
  $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 13144
  HEAP32[$296 >> 2] = $90; //@line 13145
  $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 13146
  HEAP32[$297 >> 2] = $92; //@line 13147
  $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 13148
  HEAP32[$298 >> 2] = $94; //@line 13149
  $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 13150
  HEAP32[$299 >> 2] = $96; //@line 13151
  $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 13152
  HEAP32[$300 >> 2] = $98; //@line 13153
  $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 13154
  HEAP32[$301 >> 2] = $100; //@line 13155
  $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 13156
  HEAP32[$302 >> 2] = $102; //@line 13157
  $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 13158
  HEAP32[$303 >> 2] = $104; //@line 13159
  $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 13160
  HEAP32[$304 >> 2] = $106; //@line 13161
  $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 13162
  HEAP32[$305 >> 2] = $108; //@line 13163
  $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 13164
  HEAP32[$306 >> 2] = $110; //@line 13165
  $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 13166
  HEAP32[$307 >> 2] = $112; //@line 13167
  $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 13168
  HEAP32[$308 >> 2] = $114; //@line 13169
  $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 13170
  HEAP32[$309 >> 2] = $116; //@line 13171
  sp = STACKTOP; //@line 13172
  return;
 } else if ((label | 0) == 18) {
  $330 = HEAP32[$328 >> 2] | 0; //@line 13176
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 13177
  $331 = FUNCTION_TABLE_ii[$330 & 15]($26) | 0; //@line 13178
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 13181
   $332 = $ReallocAsyncCtx3 + 4 | 0; //@line 13182
   HEAP8[$332 >> 0] = $2; //@line 13183
   $333 = $ReallocAsyncCtx3 + 8 | 0; //@line 13184
   HEAP32[$333 >> 2] = $4; //@line 13185
   $334 = $ReallocAsyncCtx3 + 12 | 0; //@line 13186
   HEAP8[$334 >> 0] = $6; //@line 13187
   $335 = $ReallocAsyncCtx3 + 13 | 0; //@line 13188
   HEAP8[$335 >> 0] = $8; //@line 13189
   $336 = $ReallocAsyncCtx3 + 16 | 0; //@line 13190
   HEAP32[$336 >> 2] = $10; //@line 13191
   $337 = $ReallocAsyncCtx3 + 20 | 0; //@line 13192
   HEAP32[$337 >> 2] = $12; //@line 13193
   $338 = $ReallocAsyncCtx3 + 24 | 0; //@line 13194
   HEAP32[$338 >> 2] = $14; //@line 13195
   $339 = $ReallocAsyncCtx3 + 28 | 0; //@line 13196
   HEAP32[$339 >> 2] = $16; //@line 13197
   $340 = $ReallocAsyncCtx3 + 32 | 0; //@line 13198
   HEAP32[$340 >> 2] = $18; //@line 13199
   $341 = $ReallocAsyncCtx3 + 36 | 0; //@line 13200
   HEAP32[$341 >> 2] = $20; //@line 13201
   $342 = $ReallocAsyncCtx3 + 40 | 0; //@line 13202
   HEAP32[$342 >> 2] = $22; //@line 13203
   $343 = $ReallocAsyncCtx3 + 44 | 0; //@line 13204
   HEAP32[$343 >> 2] = $24; //@line 13205
   $344 = $ReallocAsyncCtx3 + 48 | 0; //@line 13206
   HEAP32[$344 >> 2] = $26; //@line 13207
   $345 = $ReallocAsyncCtx3 + 52 | 0; //@line 13208
   HEAP32[$345 >> 2] = $28; //@line 13209
   $346 = $ReallocAsyncCtx3 + 56 | 0; //@line 13210
   HEAP32[$346 >> 2] = $30; //@line 13211
   $347 = $ReallocAsyncCtx3 + 60 | 0; //@line 13212
   HEAP32[$347 >> 2] = $32; //@line 13213
   $348 = $ReallocAsyncCtx3 + 64 | 0; //@line 13214
   HEAP32[$348 >> 2] = $34; //@line 13215
   $349 = $ReallocAsyncCtx3 + 68 | 0; //@line 13216
   HEAP32[$349 >> 2] = $36; //@line 13217
   $350 = $ReallocAsyncCtx3 + 72 | 0; //@line 13218
   HEAP32[$350 >> 2] = $40; //@line 13219
   $351 = $ReallocAsyncCtx3 + 76 | 0; //@line 13220
   HEAP32[$351 >> 2] = $42; //@line 13221
   $352 = $ReallocAsyncCtx3 + 80 | 0; //@line 13222
   HEAP32[$352 >> 2] = $44; //@line 13223
   $353 = $ReallocAsyncCtx3 + 84 | 0; //@line 13224
   HEAP32[$353 >> 2] = $46; //@line 13225
   $354 = $ReallocAsyncCtx3 + 88 | 0; //@line 13226
   HEAP32[$354 >> 2] = $48; //@line 13227
   $355 = $ReallocAsyncCtx3 + 92 | 0; //@line 13228
   HEAP32[$355 >> 2] = $50; //@line 13229
   $356 = $ReallocAsyncCtx3 + 96 | 0; //@line 13230
   HEAP32[$356 >> 2] = $52; //@line 13231
   $357 = $ReallocAsyncCtx3 + 100 | 0; //@line 13232
   HEAP32[$357 >> 2] = $54; //@line 13233
   $358 = $ReallocAsyncCtx3 + 104 | 0; //@line 13234
   HEAP8[$358 >> 0] = $119; //@line 13235
   $359 = $ReallocAsyncCtx3 + 108 | 0; //@line 13236
   HEAP32[$359 >> 2] = $56; //@line 13237
   $360 = $ReallocAsyncCtx3 + 112 | 0; //@line 13238
   HEAP32[$360 >> 2] = $58; //@line 13239
   $361 = $ReallocAsyncCtx3 + 116 | 0; //@line 13240
   HEAP32[$361 >> 2] = $60; //@line 13241
   $362 = $ReallocAsyncCtx3 + 120 | 0; //@line 13242
   HEAP32[$362 >> 2] = $62; //@line 13243
   $363 = $ReallocAsyncCtx3 + 124 | 0; //@line 13244
   HEAP32[$363 >> 2] = $64; //@line 13245
   $364 = $ReallocAsyncCtx3 + 128 | 0; //@line 13246
   HEAP32[$364 >> 2] = $66; //@line 13247
   $365 = $ReallocAsyncCtx3 + 132 | 0; //@line 13248
   HEAP32[$365 >> 2] = $68; //@line 13249
   $366 = $ReallocAsyncCtx3 + 136 | 0; //@line 13250
   HEAP32[$366 >> 2] = $70; //@line 13251
   $367 = $ReallocAsyncCtx3 + 140 | 0; //@line 13252
   HEAP32[$367 >> 2] = $72; //@line 13253
   $368 = $ReallocAsyncCtx3 + 144 | 0; //@line 13254
   HEAP32[$368 >> 2] = $74; //@line 13255
   $369 = $ReallocAsyncCtx3 + 148 | 0; //@line 13256
   HEAP32[$369 >> 2] = $76; //@line 13257
   $370 = $ReallocAsyncCtx3 + 152 | 0; //@line 13258
   HEAP32[$370 >> 2] = $78; //@line 13259
   $371 = $ReallocAsyncCtx3 + 156 | 0; //@line 13260
   HEAP32[$371 >> 2] = $80; //@line 13261
   $372 = $ReallocAsyncCtx3 + 160 | 0; //@line 13262
   HEAP32[$372 >> 2] = $82; //@line 13263
   $373 = $ReallocAsyncCtx3 + 164 | 0; //@line 13264
   HEAP32[$373 >> 2] = $84; //@line 13265
   $374 = $ReallocAsyncCtx3 + 168 | 0; //@line 13266
   HEAP32[$374 >> 2] = $86; //@line 13267
   $375 = $ReallocAsyncCtx3 + 172 | 0; //@line 13268
   HEAP32[$375 >> 2] = $88; //@line 13269
   $376 = $ReallocAsyncCtx3 + 176 | 0; //@line 13270
   HEAP32[$376 >> 2] = $90; //@line 13271
   $377 = $ReallocAsyncCtx3 + 180 | 0; //@line 13272
   HEAP32[$377 >> 2] = $92; //@line 13273
   $378 = $ReallocAsyncCtx3 + 184 | 0; //@line 13274
   HEAP32[$378 >> 2] = $94; //@line 13275
   $379 = $ReallocAsyncCtx3 + 188 | 0; //@line 13276
   HEAP32[$379 >> 2] = $96; //@line 13277
   $380 = $ReallocAsyncCtx3 + 192 | 0; //@line 13278
   HEAP32[$380 >> 2] = $98; //@line 13279
   $381 = $ReallocAsyncCtx3 + 196 | 0; //@line 13280
   HEAP32[$381 >> 2] = $100; //@line 13281
   $382 = $ReallocAsyncCtx3 + 200 | 0; //@line 13282
   HEAP32[$382 >> 2] = $102; //@line 13283
   $383 = $ReallocAsyncCtx3 + 204 | 0; //@line 13284
   HEAP32[$383 >> 2] = $104; //@line 13285
   $384 = $ReallocAsyncCtx3 + 208 | 0; //@line 13286
   HEAP32[$384 >> 2] = $106; //@line 13287
   $385 = $ReallocAsyncCtx3 + 212 | 0; //@line 13288
   HEAP32[$385 >> 2] = $108; //@line 13289
   $386 = $ReallocAsyncCtx3 + 216 | 0; //@line 13290
   HEAP32[$386 >> 2] = $110; //@line 13291
   $387 = $ReallocAsyncCtx3 + 220 | 0; //@line 13292
   HEAP32[$387 >> 2] = $112; //@line 13293
   $388 = $ReallocAsyncCtx3 + 224 | 0; //@line 13294
   HEAP32[$388 >> 2] = $114; //@line 13295
   $389 = $ReallocAsyncCtx3 + 228 | 0; //@line 13296
   HEAP32[$389 >> 2] = $116; //@line 13297
   sp = STACKTOP; //@line 13298
   return;
  }
  HEAP8[___async_retval >> 0] = $331; //@line 13302
  ___async_unwind = 0; //@line 13303
  HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 13304
  $332 = $ReallocAsyncCtx3 + 4 | 0; //@line 13305
  HEAP8[$332 >> 0] = $2; //@line 13306
  $333 = $ReallocAsyncCtx3 + 8 | 0; //@line 13307
  HEAP32[$333 >> 2] = $4; //@line 13308
  $334 = $ReallocAsyncCtx3 + 12 | 0; //@line 13309
  HEAP8[$334 >> 0] = $6; //@line 13310
  $335 = $ReallocAsyncCtx3 + 13 | 0; //@line 13311
  HEAP8[$335 >> 0] = $8; //@line 13312
  $336 = $ReallocAsyncCtx3 + 16 | 0; //@line 13313
  HEAP32[$336 >> 2] = $10; //@line 13314
  $337 = $ReallocAsyncCtx3 + 20 | 0; //@line 13315
  HEAP32[$337 >> 2] = $12; //@line 13316
  $338 = $ReallocAsyncCtx3 + 24 | 0; //@line 13317
  HEAP32[$338 >> 2] = $14; //@line 13318
  $339 = $ReallocAsyncCtx3 + 28 | 0; //@line 13319
  HEAP32[$339 >> 2] = $16; //@line 13320
  $340 = $ReallocAsyncCtx3 + 32 | 0; //@line 13321
  HEAP32[$340 >> 2] = $18; //@line 13322
  $341 = $ReallocAsyncCtx3 + 36 | 0; //@line 13323
  HEAP32[$341 >> 2] = $20; //@line 13324
  $342 = $ReallocAsyncCtx3 + 40 | 0; //@line 13325
  HEAP32[$342 >> 2] = $22; //@line 13326
  $343 = $ReallocAsyncCtx3 + 44 | 0; //@line 13327
  HEAP32[$343 >> 2] = $24; //@line 13328
  $344 = $ReallocAsyncCtx3 + 48 | 0; //@line 13329
  HEAP32[$344 >> 2] = $26; //@line 13330
  $345 = $ReallocAsyncCtx3 + 52 | 0; //@line 13331
  HEAP32[$345 >> 2] = $28; //@line 13332
  $346 = $ReallocAsyncCtx3 + 56 | 0; //@line 13333
  HEAP32[$346 >> 2] = $30; //@line 13334
  $347 = $ReallocAsyncCtx3 + 60 | 0; //@line 13335
  HEAP32[$347 >> 2] = $32; //@line 13336
  $348 = $ReallocAsyncCtx3 + 64 | 0; //@line 13337
  HEAP32[$348 >> 2] = $34; //@line 13338
  $349 = $ReallocAsyncCtx3 + 68 | 0; //@line 13339
  HEAP32[$349 >> 2] = $36; //@line 13340
  $350 = $ReallocAsyncCtx3 + 72 | 0; //@line 13341
  HEAP32[$350 >> 2] = $40; //@line 13342
  $351 = $ReallocAsyncCtx3 + 76 | 0; //@line 13343
  HEAP32[$351 >> 2] = $42; //@line 13344
  $352 = $ReallocAsyncCtx3 + 80 | 0; //@line 13345
  HEAP32[$352 >> 2] = $44; //@line 13346
  $353 = $ReallocAsyncCtx3 + 84 | 0; //@line 13347
  HEAP32[$353 >> 2] = $46; //@line 13348
  $354 = $ReallocAsyncCtx3 + 88 | 0; //@line 13349
  HEAP32[$354 >> 2] = $48; //@line 13350
  $355 = $ReallocAsyncCtx3 + 92 | 0; //@line 13351
  HEAP32[$355 >> 2] = $50; //@line 13352
  $356 = $ReallocAsyncCtx3 + 96 | 0; //@line 13353
  HEAP32[$356 >> 2] = $52; //@line 13354
  $357 = $ReallocAsyncCtx3 + 100 | 0; //@line 13355
  HEAP32[$357 >> 2] = $54; //@line 13356
  $358 = $ReallocAsyncCtx3 + 104 | 0; //@line 13357
  HEAP8[$358 >> 0] = $119; //@line 13358
  $359 = $ReallocAsyncCtx3 + 108 | 0; //@line 13359
  HEAP32[$359 >> 2] = $56; //@line 13360
  $360 = $ReallocAsyncCtx3 + 112 | 0; //@line 13361
  HEAP32[$360 >> 2] = $58; //@line 13362
  $361 = $ReallocAsyncCtx3 + 116 | 0; //@line 13363
  HEAP32[$361 >> 2] = $60; //@line 13364
  $362 = $ReallocAsyncCtx3 + 120 | 0; //@line 13365
  HEAP32[$362 >> 2] = $62; //@line 13366
  $363 = $ReallocAsyncCtx3 + 124 | 0; //@line 13367
  HEAP32[$363 >> 2] = $64; //@line 13368
  $364 = $ReallocAsyncCtx3 + 128 | 0; //@line 13369
  HEAP32[$364 >> 2] = $66; //@line 13370
  $365 = $ReallocAsyncCtx3 + 132 | 0; //@line 13371
  HEAP32[$365 >> 2] = $68; //@line 13372
  $366 = $ReallocAsyncCtx3 + 136 | 0; //@line 13373
  HEAP32[$366 >> 2] = $70; //@line 13374
  $367 = $ReallocAsyncCtx3 + 140 | 0; //@line 13375
  HEAP32[$367 >> 2] = $72; //@line 13376
  $368 = $ReallocAsyncCtx3 + 144 | 0; //@line 13377
  HEAP32[$368 >> 2] = $74; //@line 13378
  $369 = $ReallocAsyncCtx3 + 148 | 0; //@line 13379
  HEAP32[$369 >> 2] = $76; //@line 13380
  $370 = $ReallocAsyncCtx3 + 152 | 0; //@line 13381
  HEAP32[$370 >> 2] = $78; //@line 13382
  $371 = $ReallocAsyncCtx3 + 156 | 0; //@line 13383
  HEAP32[$371 >> 2] = $80; //@line 13384
  $372 = $ReallocAsyncCtx3 + 160 | 0; //@line 13385
  HEAP32[$372 >> 2] = $82; //@line 13386
  $373 = $ReallocAsyncCtx3 + 164 | 0; //@line 13387
  HEAP32[$373 >> 2] = $84; //@line 13388
  $374 = $ReallocAsyncCtx3 + 168 | 0; //@line 13389
  HEAP32[$374 >> 2] = $86; //@line 13390
  $375 = $ReallocAsyncCtx3 + 172 | 0; //@line 13391
  HEAP32[$375 >> 2] = $88; //@line 13392
  $376 = $ReallocAsyncCtx3 + 176 | 0; //@line 13393
  HEAP32[$376 >> 2] = $90; //@line 13394
  $377 = $ReallocAsyncCtx3 + 180 | 0; //@line 13395
  HEAP32[$377 >> 2] = $92; //@line 13396
  $378 = $ReallocAsyncCtx3 + 184 | 0; //@line 13397
  HEAP32[$378 >> 2] = $94; //@line 13398
  $379 = $ReallocAsyncCtx3 + 188 | 0; //@line 13399
  HEAP32[$379 >> 2] = $96; //@line 13400
  $380 = $ReallocAsyncCtx3 + 192 | 0; //@line 13401
  HEAP32[$380 >> 2] = $98; //@line 13402
  $381 = $ReallocAsyncCtx3 + 196 | 0; //@line 13403
  HEAP32[$381 >> 2] = $100; //@line 13404
  $382 = $ReallocAsyncCtx3 + 200 | 0; //@line 13405
  HEAP32[$382 >> 2] = $102; //@line 13406
  $383 = $ReallocAsyncCtx3 + 204 | 0; //@line 13407
  HEAP32[$383 >> 2] = $104; //@line 13408
  $384 = $ReallocAsyncCtx3 + 208 | 0; //@line 13409
  HEAP32[$384 >> 2] = $106; //@line 13410
  $385 = $ReallocAsyncCtx3 + 212 | 0; //@line 13411
  HEAP32[$385 >> 2] = $108; //@line 13412
  $386 = $ReallocAsyncCtx3 + 216 | 0; //@line 13413
  HEAP32[$386 >> 2] = $110; //@line 13414
  $387 = $ReallocAsyncCtx3 + 220 | 0; //@line 13415
  HEAP32[$387 >> 2] = $112; //@line 13416
  $388 = $ReallocAsyncCtx3 + 224 | 0; //@line 13417
  HEAP32[$388 >> 2] = $114; //@line 13418
  $389 = $ReallocAsyncCtx3 + 228 | 0; //@line 13419
  HEAP32[$389 >> 2] = $116; //@line 13420
  sp = STACKTOP; //@line 13421
  return;
 } else if ((label | 0) == 23) {
  $409 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 13428
  HEAP32[$40 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 13449
  HEAP32[$56 >> 2] = 0; //@line 13450
  $430 = $$0$be + 6 << 24 >> 24; //@line 13451
  HEAP8[$46 >> 0] = HEAP8[$14 + ($$0$be + 5 & 255) >> 0] | 0; //@line 13455
  $436 = HEAP32[(HEAP32[$82 >> 2] | 0) + 8 >> 2] | 0; //@line 13458
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 13459
  $437 = FUNCTION_TABLE_iiii[$436 & 31]($28, $409, $78) | 0; //@line 13460
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 13463
   $438 = $ReallocAsyncCtx4 + 4 | 0; //@line 13464
   HEAP8[$438 >> 0] = $2; //@line 13465
   $439 = $ReallocAsyncCtx4 + 8 | 0; //@line 13466
   HEAP32[$439 >> 2] = $4; //@line 13467
   $440 = $ReallocAsyncCtx4 + 12 | 0; //@line 13468
   HEAP8[$440 >> 0] = $6; //@line 13469
   $441 = $ReallocAsyncCtx4 + 13 | 0; //@line 13470
   HEAP8[$441 >> 0] = $8; //@line 13471
   $442 = $ReallocAsyncCtx4 + 16 | 0; //@line 13472
   HEAP32[$442 >> 2] = $10; //@line 13473
   $443 = $ReallocAsyncCtx4 + 20 | 0; //@line 13474
   HEAP32[$443 >> 2] = $12; //@line 13475
   $444 = $ReallocAsyncCtx4 + 24 | 0; //@line 13476
   HEAP32[$444 >> 2] = $14; //@line 13477
   $445 = $ReallocAsyncCtx4 + 28 | 0; //@line 13478
   HEAP32[$445 >> 2] = $16; //@line 13479
   $446 = $ReallocAsyncCtx4 + 32 | 0; //@line 13480
   HEAP32[$446 >> 2] = $18; //@line 13481
   $447 = $ReallocAsyncCtx4 + 36 | 0; //@line 13482
   HEAP32[$447 >> 2] = $20; //@line 13483
   $448 = $ReallocAsyncCtx4 + 40 | 0; //@line 13484
   HEAP32[$448 >> 2] = $22; //@line 13485
   $449 = $ReallocAsyncCtx4 + 44 | 0; //@line 13486
   HEAP32[$449 >> 2] = $24; //@line 13487
   $450 = $ReallocAsyncCtx4 + 48 | 0; //@line 13488
   HEAP32[$450 >> 2] = $26; //@line 13489
   $451 = $ReallocAsyncCtx4 + 52 | 0; //@line 13490
   HEAP32[$451 >> 2] = $28; //@line 13491
   $452 = $ReallocAsyncCtx4 + 56 | 0; //@line 13492
   HEAP32[$452 >> 2] = $30; //@line 13493
   $453 = $ReallocAsyncCtx4 + 60 | 0; //@line 13494
   HEAP32[$453 >> 2] = $32; //@line 13495
   $454 = $ReallocAsyncCtx4 + 64 | 0; //@line 13496
   HEAP32[$454 >> 2] = $34; //@line 13497
   $455 = $ReallocAsyncCtx4 + 68 | 0; //@line 13498
   HEAP32[$455 >> 2] = $36; //@line 13499
   $456 = $ReallocAsyncCtx4 + 72 | 0; //@line 13500
   HEAP8[$456 >> 0] = $430; //@line 13501
   $457 = $ReallocAsyncCtx4 + 76 | 0; //@line 13502
   HEAP32[$457 >> 2] = $40; //@line 13503
   $458 = $ReallocAsyncCtx4 + 80 | 0; //@line 13504
   HEAP32[$458 >> 2] = $42; //@line 13505
   $459 = $ReallocAsyncCtx4 + 84 | 0; //@line 13506
   HEAP32[$459 >> 2] = $44; //@line 13507
   $460 = $ReallocAsyncCtx4 + 88 | 0; //@line 13508
   HEAP32[$460 >> 2] = $46; //@line 13509
   $461 = $ReallocAsyncCtx4 + 92 | 0; //@line 13510
   HEAP32[$461 >> 2] = $48; //@line 13511
   $462 = $ReallocAsyncCtx4 + 96 | 0; //@line 13512
   HEAP32[$462 >> 2] = $50; //@line 13513
   $463 = $ReallocAsyncCtx4 + 100 | 0; //@line 13514
   HEAP32[$463 >> 2] = $52; //@line 13515
   $464 = $ReallocAsyncCtx4 + 104 | 0; //@line 13516
   HEAP32[$464 >> 2] = $54; //@line 13517
   $465 = $ReallocAsyncCtx4 + 108 | 0; //@line 13518
   HEAP32[$465 >> 2] = $56; //@line 13519
   $466 = $ReallocAsyncCtx4 + 112 | 0; //@line 13520
   HEAP32[$466 >> 2] = $58; //@line 13521
   $467 = $ReallocAsyncCtx4 + 116 | 0; //@line 13522
   HEAP32[$467 >> 2] = $60; //@line 13523
   $468 = $ReallocAsyncCtx4 + 120 | 0; //@line 13524
   HEAP32[$468 >> 2] = $62; //@line 13525
   $469 = $ReallocAsyncCtx4 + 124 | 0; //@line 13526
   HEAP32[$469 >> 2] = $64; //@line 13527
   $470 = $ReallocAsyncCtx4 + 128 | 0; //@line 13528
   HEAP32[$470 >> 2] = $66; //@line 13529
   $471 = $ReallocAsyncCtx4 + 132 | 0; //@line 13530
   HEAP32[$471 >> 2] = $68; //@line 13531
   $472 = $ReallocAsyncCtx4 + 136 | 0; //@line 13532
   HEAP32[$472 >> 2] = $70; //@line 13533
   $473 = $ReallocAsyncCtx4 + 140 | 0; //@line 13534
   HEAP32[$473 >> 2] = $72; //@line 13535
   $474 = $ReallocAsyncCtx4 + 144 | 0; //@line 13536
   HEAP32[$474 >> 2] = $74; //@line 13537
   $475 = $ReallocAsyncCtx4 + 148 | 0; //@line 13538
   HEAP32[$475 >> 2] = $76; //@line 13539
   $476 = $ReallocAsyncCtx4 + 152 | 0; //@line 13540
   HEAP32[$476 >> 2] = $78; //@line 13541
   $477 = $ReallocAsyncCtx4 + 156 | 0; //@line 13542
   HEAP32[$477 >> 2] = $80; //@line 13543
   $478 = $ReallocAsyncCtx4 + 160 | 0; //@line 13544
   HEAP32[$478 >> 2] = $82; //@line 13545
   $479 = $ReallocAsyncCtx4 + 164 | 0; //@line 13546
   HEAP32[$479 >> 2] = $84; //@line 13547
   $480 = $ReallocAsyncCtx4 + 168 | 0; //@line 13548
   HEAP32[$480 >> 2] = $86; //@line 13549
   $481 = $ReallocAsyncCtx4 + 172 | 0; //@line 13550
   HEAP32[$481 >> 2] = $88; //@line 13551
   $482 = $ReallocAsyncCtx4 + 176 | 0; //@line 13552
   HEAP32[$482 >> 2] = $90; //@line 13553
   $483 = $ReallocAsyncCtx4 + 180 | 0; //@line 13554
   HEAP32[$483 >> 2] = $92; //@line 13555
   $484 = $ReallocAsyncCtx4 + 184 | 0; //@line 13556
   HEAP32[$484 >> 2] = $94; //@line 13557
   $485 = $ReallocAsyncCtx4 + 188 | 0; //@line 13558
   HEAP32[$485 >> 2] = $96; //@line 13559
   $486 = $ReallocAsyncCtx4 + 192 | 0; //@line 13560
   HEAP32[$486 >> 2] = $98; //@line 13561
   $487 = $ReallocAsyncCtx4 + 196 | 0; //@line 13562
   HEAP32[$487 >> 2] = $100; //@line 13563
   $488 = $ReallocAsyncCtx4 + 200 | 0; //@line 13564
   HEAP32[$488 >> 2] = $102; //@line 13565
   $489 = $ReallocAsyncCtx4 + 204 | 0; //@line 13566
   HEAP32[$489 >> 2] = $104; //@line 13567
   $490 = $ReallocAsyncCtx4 + 208 | 0; //@line 13568
   HEAP32[$490 >> 2] = $106; //@line 13569
   $491 = $ReallocAsyncCtx4 + 212 | 0; //@line 13570
   HEAP32[$491 >> 2] = $108; //@line 13571
   $492 = $ReallocAsyncCtx4 + 216 | 0; //@line 13572
   HEAP32[$492 >> 2] = $110; //@line 13573
   $493 = $ReallocAsyncCtx4 + 220 | 0; //@line 13574
   HEAP32[$493 >> 2] = $112; //@line 13575
   $494 = $ReallocAsyncCtx4 + 224 | 0; //@line 13576
   HEAP32[$494 >> 2] = $114; //@line 13577
   $495 = $ReallocAsyncCtx4 + 228 | 0; //@line 13578
   HEAP32[$495 >> 2] = $116; //@line 13579
   sp = STACKTOP; //@line 13580
   return;
  }
  HEAP8[___async_retval >> 0] = $437; //@line 13584
  ___async_unwind = 0; //@line 13585
  HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 13586
  $438 = $ReallocAsyncCtx4 + 4 | 0; //@line 13587
  HEAP8[$438 >> 0] = $2; //@line 13588
  $439 = $ReallocAsyncCtx4 + 8 | 0; //@line 13589
  HEAP32[$439 >> 2] = $4; //@line 13590
  $440 = $ReallocAsyncCtx4 + 12 | 0; //@line 13591
  HEAP8[$440 >> 0] = $6; //@line 13592
  $441 = $ReallocAsyncCtx4 + 13 | 0; //@line 13593
  HEAP8[$441 >> 0] = $8; //@line 13594
  $442 = $ReallocAsyncCtx4 + 16 | 0; //@line 13595
  HEAP32[$442 >> 2] = $10; //@line 13596
  $443 = $ReallocAsyncCtx4 + 20 | 0; //@line 13597
  HEAP32[$443 >> 2] = $12; //@line 13598
  $444 = $ReallocAsyncCtx4 + 24 | 0; //@line 13599
  HEAP32[$444 >> 2] = $14; //@line 13600
  $445 = $ReallocAsyncCtx4 + 28 | 0; //@line 13601
  HEAP32[$445 >> 2] = $16; //@line 13602
  $446 = $ReallocAsyncCtx4 + 32 | 0; //@line 13603
  HEAP32[$446 >> 2] = $18; //@line 13604
  $447 = $ReallocAsyncCtx4 + 36 | 0; //@line 13605
  HEAP32[$447 >> 2] = $20; //@line 13606
  $448 = $ReallocAsyncCtx4 + 40 | 0; //@line 13607
  HEAP32[$448 >> 2] = $22; //@line 13608
  $449 = $ReallocAsyncCtx4 + 44 | 0; //@line 13609
  HEAP32[$449 >> 2] = $24; //@line 13610
  $450 = $ReallocAsyncCtx4 + 48 | 0; //@line 13611
  HEAP32[$450 >> 2] = $26; //@line 13612
  $451 = $ReallocAsyncCtx4 + 52 | 0; //@line 13613
  HEAP32[$451 >> 2] = $28; //@line 13614
  $452 = $ReallocAsyncCtx4 + 56 | 0; //@line 13615
  HEAP32[$452 >> 2] = $30; //@line 13616
  $453 = $ReallocAsyncCtx4 + 60 | 0; //@line 13617
  HEAP32[$453 >> 2] = $32; //@line 13618
  $454 = $ReallocAsyncCtx4 + 64 | 0; //@line 13619
  HEAP32[$454 >> 2] = $34; //@line 13620
  $455 = $ReallocAsyncCtx4 + 68 | 0; //@line 13621
  HEAP32[$455 >> 2] = $36; //@line 13622
  $456 = $ReallocAsyncCtx4 + 72 | 0; //@line 13623
  HEAP8[$456 >> 0] = $430; //@line 13624
  $457 = $ReallocAsyncCtx4 + 76 | 0; //@line 13625
  HEAP32[$457 >> 2] = $40; //@line 13626
  $458 = $ReallocAsyncCtx4 + 80 | 0; //@line 13627
  HEAP32[$458 >> 2] = $42; //@line 13628
  $459 = $ReallocAsyncCtx4 + 84 | 0; //@line 13629
  HEAP32[$459 >> 2] = $44; //@line 13630
  $460 = $ReallocAsyncCtx4 + 88 | 0; //@line 13631
  HEAP32[$460 >> 2] = $46; //@line 13632
  $461 = $ReallocAsyncCtx4 + 92 | 0; //@line 13633
  HEAP32[$461 >> 2] = $48; //@line 13634
  $462 = $ReallocAsyncCtx4 + 96 | 0; //@line 13635
  HEAP32[$462 >> 2] = $50; //@line 13636
  $463 = $ReallocAsyncCtx4 + 100 | 0; //@line 13637
  HEAP32[$463 >> 2] = $52; //@line 13638
  $464 = $ReallocAsyncCtx4 + 104 | 0; //@line 13639
  HEAP32[$464 >> 2] = $54; //@line 13640
  $465 = $ReallocAsyncCtx4 + 108 | 0; //@line 13641
  HEAP32[$465 >> 2] = $56; //@line 13642
  $466 = $ReallocAsyncCtx4 + 112 | 0; //@line 13643
  HEAP32[$466 >> 2] = $58; //@line 13644
  $467 = $ReallocAsyncCtx4 + 116 | 0; //@line 13645
  HEAP32[$467 >> 2] = $60; //@line 13646
  $468 = $ReallocAsyncCtx4 + 120 | 0; //@line 13647
  HEAP32[$468 >> 2] = $62; //@line 13648
  $469 = $ReallocAsyncCtx4 + 124 | 0; //@line 13649
  HEAP32[$469 >> 2] = $64; //@line 13650
  $470 = $ReallocAsyncCtx4 + 128 | 0; //@line 13651
  HEAP32[$470 >> 2] = $66; //@line 13652
  $471 = $ReallocAsyncCtx4 + 132 | 0; //@line 13653
  HEAP32[$471 >> 2] = $68; //@line 13654
  $472 = $ReallocAsyncCtx4 + 136 | 0; //@line 13655
  HEAP32[$472 >> 2] = $70; //@line 13656
  $473 = $ReallocAsyncCtx4 + 140 | 0; //@line 13657
  HEAP32[$473 >> 2] = $72; //@line 13658
  $474 = $ReallocAsyncCtx4 + 144 | 0; //@line 13659
  HEAP32[$474 >> 2] = $74; //@line 13660
  $475 = $ReallocAsyncCtx4 + 148 | 0; //@line 13661
  HEAP32[$475 >> 2] = $76; //@line 13662
  $476 = $ReallocAsyncCtx4 + 152 | 0; //@line 13663
  HEAP32[$476 >> 2] = $78; //@line 13664
  $477 = $ReallocAsyncCtx4 + 156 | 0; //@line 13665
  HEAP32[$477 >> 2] = $80; //@line 13666
  $478 = $ReallocAsyncCtx4 + 160 | 0; //@line 13667
  HEAP32[$478 >> 2] = $82; //@line 13668
  $479 = $ReallocAsyncCtx4 + 164 | 0; //@line 13669
  HEAP32[$479 >> 2] = $84; //@line 13670
  $480 = $ReallocAsyncCtx4 + 168 | 0; //@line 13671
  HEAP32[$480 >> 2] = $86; //@line 13672
  $481 = $ReallocAsyncCtx4 + 172 | 0; //@line 13673
  HEAP32[$481 >> 2] = $88; //@line 13674
  $482 = $ReallocAsyncCtx4 + 176 | 0; //@line 13675
  HEAP32[$482 >> 2] = $90; //@line 13676
  $483 = $ReallocAsyncCtx4 + 180 | 0; //@line 13677
  HEAP32[$483 >> 2] = $92; //@line 13678
  $484 = $ReallocAsyncCtx4 + 184 | 0; //@line 13679
  HEAP32[$484 >> 2] = $94; //@line 13680
  $485 = $ReallocAsyncCtx4 + 188 | 0; //@line 13681
  HEAP32[$485 >> 2] = $96; //@line 13682
  $486 = $ReallocAsyncCtx4 + 192 | 0; //@line 13683
  HEAP32[$486 >> 2] = $98; //@line 13684
  $487 = $ReallocAsyncCtx4 + 196 | 0; //@line 13685
  HEAP32[$487 >> 2] = $100; //@line 13686
  $488 = $ReallocAsyncCtx4 + 200 | 0; //@line 13687
  HEAP32[$488 >> 2] = $102; //@line 13688
  $489 = $ReallocAsyncCtx4 + 204 | 0; //@line 13689
  HEAP32[$489 >> 2] = $104; //@line 13690
  $490 = $ReallocAsyncCtx4 + 208 | 0; //@line 13691
  HEAP32[$490 >> 2] = $106; //@line 13692
  $491 = $ReallocAsyncCtx4 + 212 | 0; //@line 13693
  HEAP32[$491 >> 2] = $108; //@line 13694
  $492 = $ReallocAsyncCtx4 + 216 | 0; //@line 13695
  HEAP32[$492 >> 2] = $110; //@line 13696
  $493 = $ReallocAsyncCtx4 + 220 | 0; //@line 13697
  HEAP32[$493 >> 2] = $112; //@line 13698
  $494 = $ReallocAsyncCtx4 + 224 | 0; //@line 13699
  HEAP32[$494 >> 2] = $114; //@line 13700
  $495 = $ReallocAsyncCtx4 + 228 | 0; //@line 13701
  HEAP32[$495 >> 2] = $116; //@line 13702
  sp = STACKTOP; //@line 13703
  return;
 } else if ((label | 0) == 29) {
  $516 = $$0$be + 2 << 24 >> 24; //@line 13707
  $520 = HEAPU8[$14 + ($119 & 255) >> 0] | 0; //@line 13711
  $522 = $520 >>> 5 & 1; //@line 13714
  $524 = $520 >>> 4 & 1; //@line 13717
  $527 = HEAP32[(HEAP32[$76 >> 2] | 0) + 44 >> 2] | 0; //@line 13720
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 13721
  $528 = FUNCTION_TABLE_iiii[$527 & 31]($28, $524, $522) | 0; //@line 13722
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 13725
   $529 = $ReallocAsyncCtx5 + 4 | 0; //@line 13726
   HEAP8[$529 >> 0] = $2; //@line 13727
   $530 = $ReallocAsyncCtx5 + 8 | 0; //@line 13728
   HEAP32[$530 >> 2] = $4; //@line 13729
   $531 = $ReallocAsyncCtx5 + 12 | 0; //@line 13730
   HEAP8[$531 >> 0] = $6; //@line 13731
   $532 = $ReallocAsyncCtx5 + 13 | 0; //@line 13732
   HEAP8[$532 >> 0] = $8; //@line 13733
   $533 = $ReallocAsyncCtx5 + 16 | 0; //@line 13734
   HEAP32[$533 >> 2] = $10; //@line 13735
   $534 = $ReallocAsyncCtx5 + 20 | 0; //@line 13736
   HEAP32[$534 >> 2] = $12; //@line 13737
   $535 = $ReallocAsyncCtx5 + 24 | 0; //@line 13738
   HEAP32[$535 >> 2] = $14; //@line 13739
   $536 = $ReallocAsyncCtx5 + 28 | 0; //@line 13740
   HEAP8[$536 >> 0] = $522; //@line 13741
   $537 = $ReallocAsyncCtx5 + 32 | 0; //@line 13742
   HEAP32[$537 >> 2] = $16; //@line 13743
   $538 = $ReallocAsyncCtx5 + 36 | 0; //@line 13744
   HEAP32[$538 >> 2] = $18; //@line 13745
   $539 = $ReallocAsyncCtx5 + 40 | 0; //@line 13746
   HEAP32[$539 >> 2] = $20; //@line 13747
   $540 = $ReallocAsyncCtx5 + 44 | 0; //@line 13748
   HEAP32[$540 >> 2] = $22; //@line 13749
   $541 = $ReallocAsyncCtx5 + 48 | 0; //@line 13750
   HEAP32[$541 >> 2] = $24; //@line 13751
   $542 = $ReallocAsyncCtx5 + 52 | 0; //@line 13752
   HEAP32[$542 >> 2] = $26; //@line 13753
   $543 = $ReallocAsyncCtx5 + 56 | 0; //@line 13754
   HEAP32[$543 >> 2] = $28; //@line 13755
   $544 = $ReallocAsyncCtx5 + 60 | 0; //@line 13756
   HEAP32[$544 >> 2] = $$0107$be; //@line 13757
   $545 = $ReallocAsyncCtx5 + 64 | 0; //@line 13758
   HEAP32[$545 >> 2] = $30; //@line 13759
   $546 = $ReallocAsyncCtx5 + 68 | 0; //@line 13760
   HEAP32[$546 >> 2] = $32; //@line 13761
   $547 = $ReallocAsyncCtx5 + 72 | 0; //@line 13762
   HEAP32[$547 >> 2] = $34; //@line 13763
   $548 = $ReallocAsyncCtx5 + 76 | 0; //@line 13764
   HEAP32[$548 >> 2] = $36; //@line 13765
   $549 = $ReallocAsyncCtx5 + 80 | 0; //@line 13766
   HEAP32[$549 >> 2] = $40; //@line 13767
   $550 = $ReallocAsyncCtx5 + 84 | 0; //@line 13768
   HEAP8[$550 >> 0] = $516; //@line 13769
   $551 = $ReallocAsyncCtx5 + 88 | 0; //@line 13770
   HEAP32[$551 >> 2] = $42; //@line 13771
   $552 = $ReallocAsyncCtx5 + 92 | 0; //@line 13772
   HEAP32[$552 >> 2] = $44; //@line 13773
   $553 = $ReallocAsyncCtx5 + 96 | 0; //@line 13774
   HEAP32[$553 >> 2] = $46; //@line 13775
   $554 = $ReallocAsyncCtx5 + 100 | 0; //@line 13776
   HEAP32[$554 >> 2] = $48; //@line 13777
   $555 = $ReallocAsyncCtx5 + 104 | 0; //@line 13778
   HEAP32[$555 >> 2] = $50; //@line 13779
   $556 = $ReallocAsyncCtx5 + 108 | 0; //@line 13780
   HEAP32[$556 >> 2] = $52; //@line 13781
   $557 = $ReallocAsyncCtx5 + 112 | 0; //@line 13782
   HEAP32[$557 >> 2] = $54; //@line 13783
   $558 = $ReallocAsyncCtx5 + 116 | 0; //@line 13784
   HEAP32[$558 >> 2] = $56; //@line 13785
   $559 = $ReallocAsyncCtx5 + 120 | 0; //@line 13786
   HEAP32[$559 >> 2] = $58; //@line 13787
   $560 = $ReallocAsyncCtx5 + 124 | 0; //@line 13788
   HEAP32[$560 >> 2] = $60; //@line 13789
   $561 = $ReallocAsyncCtx5 + 128 | 0; //@line 13790
   HEAP32[$561 >> 2] = $62; //@line 13791
   $562 = $ReallocAsyncCtx5 + 132 | 0; //@line 13792
   HEAP32[$562 >> 2] = $64; //@line 13793
   $563 = $ReallocAsyncCtx5 + 136 | 0; //@line 13794
   HEAP32[$563 >> 2] = $66; //@line 13795
   $564 = $ReallocAsyncCtx5 + 140 | 0; //@line 13796
   HEAP32[$564 >> 2] = $68; //@line 13797
   $565 = $ReallocAsyncCtx5 + 144 | 0; //@line 13798
   HEAP32[$565 >> 2] = $70; //@line 13799
   $566 = $ReallocAsyncCtx5 + 148 | 0; //@line 13800
   HEAP32[$566 >> 2] = $72; //@line 13801
   $567 = $ReallocAsyncCtx5 + 152 | 0; //@line 13802
   HEAP32[$567 >> 2] = $74; //@line 13803
   $568 = $ReallocAsyncCtx5 + 156 | 0; //@line 13804
   HEAP32[$568 >> 2] = $76; //@line 13805
   $569 = $ReallocAsyncCtx5 + 160 | 0; //@line 13806
   HEAP32[$569 >> 2] = $78; //@line 13807
   $570 = $ReallocAsyncCtx5 + 164 | 0; //@line 13808
   HEAP32[$570 >> 2] = $80; //@line 13809
   $571 = $ReallocAsyncCtx5 + 168 | 0; //@line 13810
   HEAP32[$571 >> 2] = $82; //@line 13811
   $572 = $ReallocAsyncCtx5 + 172 | 0; //@line 13812
   HEAP32[$572 >> 2] = $84; //@line 13813
   $573 = $ReallocAsyncCtx5 + 176 | 0; //@line 13814
   HEAP32[$573 >> 2] = $86; //@line 13815
   $574 = $ReallocAsyncCtx5 + 180 | 0; //@line 13816
   HEAP32[$574 >> 2] = $88; //@line 13817
   $575 = $ReallocAsyncCtx5 + 184 | 0; //@line 13818
   HEAP32[$575 >> 2] = $90; //@line 13819
   $576 = $ReallocAsyncCtx5 + 188 | 0; //@line 13820
   HEAP8[$576 >> 0] = $524; //@line 13821
   $577 = $ReallocAsyncCtx5 + 192 | 0; //@line 13822
   HEAP32[$577 >> 2] = $92; //@line 13823
   $578 = $ReallocAsyncCtx5 + 196 | 0; //@line 13824
   HEAP32[$578 >> 2] = $94; //@line 13825
   $579 = $ReallocAsyncCtx5 + 200 | 0; //@line 13826
   HEAP32[$579 >> 2] = $96; //@line 13827
   $580 = $ReallocAsyncCtx5 + 204 | 0; //@line 13828
   HEAP32[$580 >> 2] = $98; //@line 13829
   $581 = $ReallocAsyncCtx5 + 208 | 0; //@line 13830
   HEAP32[$581 >> 2] = $100; //@line 13831
   $582 = $ReallocAsyncCtx5 + 212 | 0; //@line 13832
   HEAP32[$582 >> 2] = $102; //@line 13833
   $583 = $ReallocAsyncCtx5 + 216 | 0; //@line 13834
   HEAP32[$583 >> 2] = $520; //@line 13835
   $584 = $ReallocAsyncCtx5 + 220 | 0; //@line 13836
   HEAP32[$584 >> 2] = $104; //@line 13837
   $585 = $ReallocAsyncCtx5 + 224 | 0; //@line 13838
   HEAP32[$585 >> 2] = $106; //@line 13839
   $586 = $ReallocAsyncCtx5 + 228 | 0; //@line 13840
   HEAP32[$586 >> 2] = $108; //@line 13841
   $587 = $ReallocAsyncCtx5 + 232 | 0; //@line 13842
   HEAP32[$587 >> 2] = $110; //@line 13843
   $588 = $ReallocAsyncCtx5 + 236 | 0; //@line 13844
   HEAP32[$588 >> 2] = $112; //@line 13845
   $589 = $ReallocAsyncCtx5 + 240 | 0; //@line 13846
   HEAP32[$589 >> 2] = $114; //@line 13847
   $590 = $ReallocAsyncCtx5 + 244 | 0; //@line 13848
   HEAP32[$590 >> 2] = $116; //@line 13849
   sp = STACKTOP; //@line 13850
   return;
  }
  HEAP8[___async_retval >> 0] = $528 & 1; //@line 13855
  ___async_unwind = 0; //@line 13856
  HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 13857
  $529 = $ReallocAsyncCtx5 + 4 | 0; //@line 13858
  HEAP8[$529 >> 0] = $2; //@line 13859
  $530 = $ReallocAsyncCtx5 + 8 | 0; //@line 13860
  HEAP32[$530 >> 2] = $4; //@line 13861
  $531 = $ReallocAsyncCtx5 + 12 | 0; //@line 13862
  HEAP8[$531 >> 0] = $6; //@line 13863
  $532 = $ReallocAsyncCtx5 + 13 | 0; //@line 13864
  HEAP8[$532 >> 0] = $8; //@line 13865
  $533 = $ReallocAsyncCtx5 + 16 | 0; //@line 13866
  HEAP32[$533 >> 2] = $10; //@line 13867
  $534 = $ReallocAsyncCtx5 + 20 | 0; //@line 13868
  HEAP32[$534 >> 2] = $12; //@line 13869
  $535 = $ReallocAsyncCtx5 + 24 | 0; //@line 13870
  HEAP32[$535 >> 2] = $14; //@line 13871
  $536 = $ReallocAsyncCtx5 + 28 | 0; //@line 13872
  HEAP8[$536 >> 0] = $522; //@line 13873
  $537 = $ReallocAsyncCtx5 + 32 | 0; //@line 13874
  HEAP32[$537 >> 2] = $16; //@line 13875
  $538 = $ReallocAsyncCtx5 + 36 | 0; //@line 13876
  HEAP32[$538 >> 2] = $18; //@line 13877
  $539 = $ReallocAsyncCtx5 + 40 | 0; //@line 13878
  HEAP32[$539 >> 2] = $20; //@line 13879
  $540 = $ReallocAsyncCtx5 + 44 | 0; //@line 13880
  HEAP32[$540 >> 2] = $22; //@line 13881
  $541 = $ReallocAsyncCtx5 + 48 | 0; //@line 13882
  HEAP32[$541 >> 2] = $24; //@line 13883
  $542 = $ReallocAsyncCtx5 + 52 | 0; //@line 13884
  HEAP32[$542 >> 2] = $26; //@line 13885
  $543 = $ReallocAsyncCtx5 + 56 | 0; //@line 13886
  HEAP32[$543 >> 2] = $28; //@line 13887
  $544 = $ReallocAsyncCtx5 + 60 | 0; //@line 13888
  HEAP32[$544 >> 2] = $$0107$be; //@line 13889
  $545 = $ReallocAsyncCtx5 + 64 | 0; //@line 13890
  HEAP32[$545 >> 2] = $30; //@line 13891
  $546 = $ReallocAsyncCtx5 + 68 | 0; //@line 13892
  HEAP32[$546 >> 2] = $32; //@line 13893
  $547 = $ReallocAsyncCtx5 + 72 | 0; //@line 13894
  HEAP32[$547 >> 2] = $34; //@line 13895
  $548 = $ReallocAsyncCtx5 + 76 | 0; //@line 13896
  HEAP32[$548 >> 2] = $36; //@line 13897
  $549 = $ReallocAsyncCtx5 + 80 | 0; //@line 13898
  HEAP32[$549 >> 2] = $40; //@line 13899
  $550 = $ReallocAsyncCtx5 + 84 | 0; //@line 13900
  HEAP8[$550 >> 0] = $516; //@line 13901
  $551 = $ReallocAsyncCtx5 + 88 | 0; //@line 13902
  HEAP32[$551 >> 2] = $42; //@line 13903
  $552 = $ReallocAsyncCtx5 + 92 | 0; //@line 13904
  HEAP32[$552 >> 2] = $44; //@line 13905
  $553 = $ReallocAsyncCtx5 + 96 | 0; //@line 13906
  HEAP32[$553 >> 2] = $46; //@line 13907
  $554 = $ReallocAsyncCtx5 + 100 | 0; //@line 13908
  HEAP32[$554 >> 2] = $48; //@line 13909
  $555 = $ReallocAsyncCtx5 + 104 | 0; //@line 13910
  HEAP32[$555 >> 2] = $50; //@line 13911
  $556 = $ReallocAsyncCtx5 + 108 | 0; //@line 13912
  HEAP32[$556 >> 2] = $52; //@line 13913
  $557 = $ReallocAsyncCtx5 + 112 | 0; //@line 13914
  HEAP32[$557 >> 2] = $54; //@line 13915
  $558 = $ReallocAsyncCtx5 + 116 | 0; //@line 13916
  HEAP32[$558 >> 2] = $56; //@line 13917
  $559 = $ReallocAsyncCtx5 + 120 | 0; //@line 13918
  HEAP32[$559 >> 2] = $58; //@line 13919
  $560 = $ReallocAsyncCtx5 + 124 | 0; //@line 13920
  HEAP32[$560 >> 2] = $60; //@line 13921
  $561 = $ReallocAsyncCtx5 + 128 | 0; //@line 13922
  HEAP32[$561 >> 2] = $62; //@line 13923
  $562 = $ReallocAsyncCtx5 + 132 | 0; //@line 13924
  HEAP32[$562 >> 2] = $64; //@line 13925
  $563 = $ReallocAsyncCtx5 + 136 | 0; //@line 13926
  HEAP32[$563 >> 2] = $66; //@line 13927
  $564 = $ReallocAsyncCtx5 + 140 | 0; //@line 13928
  HEAP32[$564 >> 2] = $68; //@line 13929
  $565 = $ReallocAsyncCtx5 + 144 | 0; //@line 13930
  HEAP32[$565 >> 2] = $70; //@line 13931
  $566 = $ReallocAsyncCtx5 + 148 | 0; //@line 13932
  HEAP32[$566 >> 2] = $72; //@line 13933
  $567 = $ReallocAsyncCtx5 + 152 | 0; //@line 13934
  HEAP32[$567 >> 2] = $74; //@line 13935
  $568 = $ReallocAsyncCtx5 + 156 | 0; //@line 13936
  HEAP32[$568 >> 2] = $76; //@line 13937
  $569 = $ReallocAsyncCtx5 + 160 | 0; //@line 13938
  HEAP32[$569 >> 2] = $78; //@line 13939
  $570 = $ReallocAsyncCtx5 + 164 | 0; //@line 13940
  HEAP32[$570 >> 2] = $80; //@line 13941
  $571 = $ReallocAsyncCtx5 + 168 | 0; //@line 13942
  HEAP32[$571 >> 2] = $82; //@line 13943
  $572 = $ReallocAsyncCtx5 + 172 | 0; //@line 13944
  HEAP32[$572 >> 2] = $84; //@line 13945
  $573 = $ReallocAsyncCtx5 + 176 | 0; //@line 13946
  HEAP32[$573 >> 2] = $86; //@line 13947
  $574 = $ReallocAsyncCtx5 + 180 | 0; //@line 13948
  HEAP32[$574 >> 2] = $88; //@line 13949
  $575 = $ReallocAsyncCtx5 + 184 | 0; //@line 13950
  HEAP32[$575 >> 2] = $90; //@line 13951
  $576 = $ReallocAsyncCtx5 + 188 | 0; //@line 13952
  HEAP8[$576 >> 0] = $524; //@line 13953
  $577 = $ReallocAsyncCtx5 + 192 | 0; //@line 13954
  HEAP32[$577 >> 2] = $92; //@line 13955
  $578 = $ReallocAsyncCtx5 + 196 | 0; //@line 13956
  HEAP32[$578 >> 2] = $94; //@line 13957
  $579 = $ReallocAsyncCtx5 + 200 | 0; //@line 13958
  HEAP32[$579 >> 2] = $96; //@line 13959
  $580 = $ReallocAsyncCtx5 + 204 | 0; //@line 13960
  HEAP32[$580 >> 2] = $98; //@line 13961
  $581 = $ReallocAsyncCtx5 + 208 | 0; //@line 13962
  HEAP32[$581 >> 2] = $100; //@line 13963
  $582 = $ReallocAsyncCtx5 + 212 | 0; //@line 13964
  HEAP32[$582 >> 2] = $102; //@line 13965
  $583 = $ReallocAsyncCtx5 + 216 | 0; //@line 13966
  HEAP32[$583 >> 2] = $520; //@line 13967
  $584 = $ReallocAsyncCtx5 + 220 | 0; //@line 13968
  HEAP32[$584 >> 2] = $104; //@line 13969
  $585 = $ReallocAsyncCtx5 + 224 | 0; //@line 13970
  HEAP32[$585 >> 2] = $106; //@line 13971
  $586 = $ReallocAsyncCtx5 + 228 | 0; //@line 13972
  HEAP32[$586 >> 2] = $108; //@line 13973
  $587 = $ReallocAsyncCtx5 + 232 | 0; //@line 13974
  HEAP32[$587 >> 2] = $110; //@line 13975
  $588 = $ReallocAsyncCtx5 + 236 | 0; //@line 13976
  HEAP32[$588 >> 2] = $112; //@line 13977
  $589 = $ReallocAsyncCtx5 + 240 | 0; //@line 13978
  HEAP32[$589 >> 2] = $114; //@line 13979
  $590 = $ReallocAsyncCtx5 + 244 | 0; //@line 13980
  HEAP32[$590 >> 2] = $116; //@line 13981
  sp = STACKTOP; //@line 13982
  return;
 } else if ((label | 0) == 32) {
  $595 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 13989
  $608 = $$0$be + 5 << 24 >> 24; //@line 14002
  $615 = (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 14009
  $618 = HEAP32[(HEAP32[$96 >> 2] | 0) + 48 >> 2] | 0; //@line 14012
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 14013
  $619 = FUNCTION_TABLE_iiii[$618 & 31]($28, $595, $615) | 0; //@line 14014
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 14017
   $620 = $ReallocAsyncCtx6 + 4 | 0; //@line 14018
   HEAP8[$620 >> 0] = $2; //@line 14019
   $621 = $ReallocAsyncCtx6 + 8 | 0; //@line 14020
   HEAP32[$621 >> 2] = $4; //@line 14021
   $622 = $ReallocAsyncCtx6 + 12 | 0; //@line 14022
   HEAP8[$622 >> 0] = $6; //@line 14023
   $623 = $ReallocAsyncCtx6 + 13 | 0; //@line 14024
   HEAP8[$623 >> 0] = $8; //@line 14025
   $624 = $ReallocAsyncCtx6 + 16 | 0; //@line 14026
   HEAP32[$624 >> 2] = $10; //@line 14027
   $625 = $ReallocAsyncCtx6 + 20 | 0; //@line 14028
   HEAP32[$625 >> 2] = $12; //@line 14029
   $626 = $ReallocAsyncCtx6 + 24 | 0; //@line 14030
   HEAP32[$626 >> 2] = $14; //@line 14031
   $627 = $ReallocAsyncCtx6 + 28 | 0; //@line 14032
   HEAP8[$627 >> 0] = $608; //@line 14033
   $628 = $ReallocAsyncCtx6 + 32 | 0; //@line 14034
   HEAP32[$628 >> 2] = $16; //@line 14035
   $629 = $ReallocAsyncCtx6 + 36 | 0; //@line 14036
   HEAP32[$629 >> 2] = $18; //@line 14037
   $630 = $ReallocAsyncCtx6 + 40 | 0; //@line 14038
   HEAP32[$630 >> 2] = $20; //@line 14039
   $631 = $ReallocAsyncCtx6 + 44 | 0; //@line 14040
   HEAP32[$631 >> 2] = $22; //@line 14041
   $632 = $ReallocAsyncCtx6 + 48 | 0; //@line 14042
   HEAP32[$632 >> 2] = $24; //@line 14043
   $633 = $ReallocAsyncCtx6 + 52 | 0; //@line 14044
   HEAP32[$633 >> 2] = $26; //@line 14045
   $634 = $ReallocAsyncCtx6 + 56 | 0; //@line 14046
   HEAP32[$634 >> 2] = $28; //@line 14047
   $635 = $ReallocAsyncCtx6 + 60 | 0; //@line 14048
   HEAP32[$635 >> 2] = $30; //@line 14049
   $636 = $ReallocAsyncCtx6 + 64 | 0; //@line 14050
   HEAP32[$636 >> 2] = $32; //@line 14051
   $637 = $ReallocAsyncCtx6 + 68 | 0; //@line 14052
   HEAP32[$637 >> 2] = $34; //@line 14053
   $638 = $ReallocAsyncCtx6 + 72 | 0; //@line 14054
   HEAP32[$638 >> 2] = $36; //@line 14055
   $639 = $ReallocAsyncCtx6 + 76 | 0; //@line 14056
   HEAP32[$639 >> 2] = $40; //@line 14057
   $640 = $ReallocAsyncCtx6 + 80 | 0; //@line 14058
   HEAP32[$640 >> 2] = $42; //@line 14059
   $641 = $ReallocAsyncCtx6 + 84 | 0; //@line 14060
   HEAP32[$641 >> 2] = $44; //@line 14061
   $642 = $ReallocAsyncCtx6 + 88 | 0; //@line 14062
   HEAP32[$642 >> 2] = $46; //@line 14063
   $643 = $ReallocAsyncCtx6 + 92 | 0; //@line 14064
   HEAP32[$643 >> 2] = $48; //@line 14065
   $644 = $ReallocAsyncCtx6 + 96 | 0; //@line 14066
   HEAP32[$644 >> 2] = $50; //@line 14067
   $645 = $ReallocAsyncCtx6 + 100 | 0; //@line 14068
   HEAP32[$645 >> 2] = $52; //@line 14069
   $646 = $ReallocAsyncCtx6 + 104 | 0; //@line 14070
   HEAP32[$646 >> 2] = $54; //@line 14071
   $647 = $ReallocAsyncCtx6 + 108 | 0; //@line 14072
   HEAP32[$647 >> 2] = $56; //@line 14073
   $648 = $ReallocAsyncCtx6 + 112 | 0; //@line 14074
   HEAP32[$648 >> 2] = $58; //@line 14075
   $649 = $ReallocAsyncCtx6 + 116 | 0; //@line 14076
   HEAP32[$649 >> 2] = $60; //@line 14077
   $650 = $ReallocAsyncCtx6 + 120 | 0; //@line 14078
   HEAP32[$650 >> 2] = $62; //@line 14079
   $651 = $ReallocAsyncCtx6 + 124 | 0; //@line 14080
   HEAP32[$651 >> 2] = $64; //@line 14081
   $652 = $ReallocAsyncCtx6 + 128 | 0; //@line 14082
   HEAP32[$652 >> 2] = $66; //@line 14083
   $653 = $ReallocAsyncCtx6 + 132 | 0; //@line 14084
   HEAP32[$653 >> 2] = $68; //@line 14085
   $654 = $ReallocAsyncCtx6 + 136 | 0; //@line 14086
   HEAP32[$654 >> 2] = $70; //@line 14087
   $655 = $ReallocAsyncCtx6 + 140 | 0; //@line 14088
   HEAP32[$655 >> 2] = $72; //@line 14089
   $656 = $ReallocAsyncCtx6 + 144 | 0; //@line 14090
   HEAP32[$656 >> 2] = $74; //@line 14091
   $657 = $ReallocAsyncCtx6 + 148 | 0; //@line 14092
   HEAP32[$657 >> 2] = $76; //@line 14093
   $658 = $ReallocAsyncCtx6 + 152 | 0; //@line 14094
   HEAP32[$658 >> 2] = $78; //@line 14095
   $659 = $ReallocAsyncCtx6 + 156 | 0; //@line 14096
   HEAP32[$659 >> 2] = $80; //@line 14097
   $660 = $ReallocAsyncCtx6 + 160 | 0; //@line 14098
   HEAP32[$660 >> 2] = $82; //@line 14099
   $661 = $ReallocAsyncCtx6 + 164 | 0; //@line 14100
   HEAP32[$661 >> 2] = $84; //@line 14101
   $662 = $ReallocAsyncCtx6 + 168 | 0; //@line 14102
   HEAP32[$662 >> 2] = $86; //@line 14103
   $663 = $ReallocAsyncCtx6 + 172 | 0; //@line 14104
   HEAP32[$663 >> 2] = $88; //@line 14105
   $664 = $ReallocAsyncCtx6 + 176 | 0; //@line 14106
   HEAP32[$664 >> 2] = $90; //@line 14107
   $665 = $ReallocAsyncCtx6 + 180 | 0; //@line 14108
   HEAP32[$665 >> 2] = $92; //@line 14109
   $666 = $ReallocAsyncCtx6 + 184 | 0; //@line 14110
   HEAP32[$666 >> 2] = $94; //@line 14111
   $667 = $ReallocAsyncCtx6 + 188 | 0; //@line 14112
   HEAP32[$667 >> 2] = $96; //@line 14113
   $668 = $ReallocAsyncCtx6 + 192 | 0; //@line 14114
   HEAP32[$668 >> 2] = $98; //@line 14115
   $669 = $ReallocAsyncCtx6 + 196 | 0; //@line 14116
   HEAP32[$669 >> 2] = $100; //@line 14117
   $670 = $ReallocAsyncCtx6 + 200 | 0; //@line 14118
   HEAP32[$670 >> 2] = $102; //@line 14119
   $671 = $ReallocAsyncCtx6 + 204 | 0; //@line 14120
   HEAP32[$671 >> 2] = $104; //@line 14121
   $672 = $ReallocAsyncCtx6 + 208 | 0; //@line 14122
   HEAP32[$672 >> 2] = $106; //@line 14123
   $673 = $ReallocAsyncCtx6 + 212 | 0; //@line 14124
   HEAP32[$673 >> 2] = $108; //@line 14125
   $674 = $ReallocAsyncCtx6 + 216 | 0; //@line 14126
   HEAP32[$674 >> 2] = $110; //@line 14127
   $675 = $ReallocAsyncCtx6 + 220 | 0; //@line 14128
   HEAP32[$675 >> 2] = $112; //@line 14129
   $676 = $ReallocAsyncCtx6 + 224 | 0; //@line 14130
   HEAP32[$676 >> 2] = $114; //@line 14131
   $677 = $ReallocAsyncCtx6 + 228 | 0; //@line 14132
   HEAP32[$677 >> 2] = $116; //@line 14133
   sp = STACKTOP; //@line 14134
   return;
  }
  HEAP8[___async_retval >> 0] = $619; //@line 14138
  ___async_unwind = 0; //@line 14139
  HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 14140
  $620 = $ReallocAsyncCtx6 + 4 | 0; //@line 14141
  HEAP8[$620 >> 0] = $2; //@line 14142
  $621 = $ReallocAsyncCtx6 + 8 | 0; //@line 14143
  HEAP32[$621 >> 2] = $4; //@line 14144
  $622 = $ReallocAsyncCtx6 + 12 | 0; //@line 14145
  HEAP8[$622 >> 0] = $6; //@line 14146
  $623 = $ReallocAsyncCtx6 + 13 | 0; //@line 14147
  HEAP8[$623 >> 0] = $8; //@line 14148
  $624 = $ReallocAsyncCtx6 + 16 | 0; //@line 14149
  HEAP32[$624 >> 2] = $10; //@line 14150
  $625 = $ReallocAsyncCtx6 + 20 | 0; //@line 14151
  HEAP32[$625 >> 2] = $12; //@line 14152
  $626 = $ReallocAsyncCtx6 + 24 | 0; //@line 14153
  HEAP32[$626 >> 2] = $14; //@line 14154
  $627 = $ReallocAsyncCtx6 + 28 | 0; //@line 14155
  HEAP8[$627 >> 0] = $608; //@line 14156
  $628 = $ReallocAsyncCtx6 + 32 | 0; //@line 14157
  HEAP32[$628 >> 2] = $16; //@line 14158
  $629 = $ReallocAsyncCtx6 + 36 | 0; //@line 14159
  HEAP32[$629 >> 2] = $18; //@line 14160
  $630 = $ReallocAsyncCtx6 + 40 | 0; //@line 14161
  HEAP32[$630 >> 2] = $20; //@line 14162
  $631 = $ReallocAsyncCtx6 + 44 | 0; //@line 14163
  HEAP32[$631 >> 2] = $22; //@line 14164
  $632 = $ReallocAsyncCtx6 + 48 | 0; //@line 14165
  HEAP32[$632 >> 2] = $24; //@line 14166
  $633 = $ReallocAsyncCtx6 + 52 | 0; //@line 14167
  HEAP32[$633 >> 2] = $26; //@line 14168
  $634 = $ReallocAsyncCtx6 + 56 | 0; //@line 14169
  HEAP32[$634 >> 2] = $28; //@line 14170
  $635 = $ReallocAsyncCtx6 + 60 | 0; //@line 14171
  HEAP32[$635 >> 2] = $30; //@line 14172
  $636 = $ReallocAsyncCtx6 + 64 | 0; //@line 14173
  HEAP32[$636 >> 2] = $32; //@line 14174
  $637 = $ReallocAsyncCtx6 + 68 | 0; //@line 14175
  HEAP32[$637 >> 2] = $34; //@line 14176
  $638 = $ReallocAsyncCtx6 + 72 | 0; //@line 14177
  HEAP32[$638 >> 2] = $36; //@line 14178
  $639 = $ReallocAsyncCtx6 + 76 | 0; //@line 14179
  HEAP32[$639 >> 2] = $40; //@line 14180
  $640 = $ReallocAsyncCtx6 + 80 | 0; //@line 14181
  HEAP32[$640 >> 2] = $42; //@line 14182
  $641 = $ReallocAsyncCtx6 + 84 | 0; //@line 14183
  HEAP32[$641 >> 2] = $44; //@line 14184
  $642 = $ReallocAsyncCtx6 + 88 | 0; //@line 14185
  HEAP32[$642 >> 2] = $46; //@line 14186
  $643 = $ReallocAsyncCtx6 + 92 | 0; //@line 14187
  HEAP32[$643 >> 2] = $48; //@line 14188
  $644 = $ReallocAsyncCtx6 + 96 | 0; //@line 14189
  HEAP32[$644 >> 2] = $50; //@line 14190
  $645 = $ReallocAsyncCtx6 + 100 | 0; //@line 14191
  HEAP32[$645 >> 2] = $52; //@line 14192
  $646 = $ReallocAsyncCtx6 + 104 | 0; //@line 14193
  HEAP32[$646 >> 2] = $54; //@line 14194
  $647 = $ReallocAsyncCtx6 + 108 | 0; //@line 14195
  HEAP32[$647 >> 2] = $56; //@line 14196
  $648 = $ReallocAsyncCtx6 + 112 | 0; //@line 14197
  HEAP32[$648 >> 2] = $58; //@line 14198
  $649 = $ReallocAsyncCtx6 + 116 | 0; //@line 14199
  HEAP32[$649 >> 2] = $60; //@line 14200
  $650 = $ReallocAsyncCtx6 + 120 | 0; //@line 14201
  HEAP32[$650 >> 2] = $62; //@line 14202
  $651 = $ReallocAsyncCtx6 + 124 | 0; //@line 14203
  HEAP32[$651 >> 2] = $64; //@line 14204
  $652 = $ReallocAsyncCtx6 + 128 | 0; //@line 14205
  HEAP32[$652 >> 2] = $66; //@line 14206
  $653 = $ReallocAsyncCtx6 + 132 | 0; //@line 14207
  HEAP32[$653 >> 2] = $68; //@line 14208
  $654 = $ReallocAsyncCtx6 + 136 | 0; //@line 14209
  HEAP32[$654 >> 2] = $70; //@line 14210
  $655 = $ReallocAsyncCtx6 + 140 | 0; //@line 14211
  HEAP32[$655 >> 2] = $72; //@line 14212
  $656 = $ReallocAsyncCtx6 + 144 | 0; //@line 14213
  HEAP32[$656 >> 2] = $74; //@line 14214
  $657 = $ReallocAsyncCtx6 + 148 | 0; //@line 14215
  HEAP32[$657 >> 2] = $76; //@line 14216
  $658 = $ReallocAsyncCtx6 + 152 | 0; //@line 14217
  HEAP32[$658 >> 2] = $78; //@line 14218
  $659 = $ReallocAsyncCtx6 + 156 | 0; //@line 14219
  HEAP32[$659 >> 2] = $80; //@line 14220
  $660 = $ReallocAsyncCtx6 + 160 | 0; //@line 14221
  HEAP32[$660 >> 2] = $82; //@line 14222
  $661 = $ReallocAsyncCtx6 + 164 | 0; //@line 14223
  HEAP32[$661 >> 2] = $84; //@line 14224
  $662 = $ReallocAsyncCtx6 + 168 | 0; //@line 14225
  HEAP32[$662 >> 2] = $86; //@line 14226
  $663 = $ReallocAsyncCtx6 + 172 | 0; //@line 14227
  HEAP32[$663 >> 2] = $88; //@line 14228
  $664 = $ReallocAsyncCtx6 + 176 | 0; //@line 14229
  HEAP32[$664 >> 2] = $90; //@line 14230
  $665 = $ReallocAsyncCtx6 + 180 | 0; //@line 14231
  HEAP32[$665 >> 2] = $92; //@line 14232
  $666 = $ReallocAsyncCtx6 + 184 | 0; //@line 14233
  HEAP32[$666 >> 2] = $94; //@line 14234
  $667 = $ReallocAsyncCtx6 + 188 | 0; //@line 14235
  HEAP32[$667 >> 2] = $96; //@line 14236
  $668 = $ReallocAsyncCtx6 + 192 | 0; //@line 14237
  HEAP32[$668 >> 2] = $98; //@line 14238
  $669 = $ReallocAsyncCtx6 + 196 | 0; //@line 14239
  HEAP32[$669 >> 2] = $100; //@line 14240
  $670 = $ReallocAsyncCtx6 + 200 | 0; //@line 14241
  HEAP32[$670 >> 2] = $102; //@line 14242
  $671 = $ReallocAsyncCtx6 + 204 | 0; //@line 14243
  HEAP32[$671 >> 2] = $104; //@line 14244
  $672 = $ReallocAsyncCtx6 + 208 | 0; //@line 14245
  HEAP32[$672 >> 2] = $106; //@line 14246
  $673 = $ReallocAsyncCtx6 + 212 | 0; //@line 14247
  HEAP32[$673 >> 2] = $108; //@line 14248
  $674 = $ReallocAsyncCtx6 + 216 | 0; //@line 14249
  HEAP32[$674 >> 2] = $110; //@line 14250
  $675 = $ReallocAsyncCtx6 + 220 | 0; //@line 14251
  HEAP32[$675 >> 2] = $112; //@line 14252
  $676 = $ReallocAsyncCtx6 + 224 | 0; //@line 14253
  HEAP32[$676 >> 2] = $114; //@line 14254
  $677 = $ReallocAsyncCtx6 + 228 | 0; //@line 14255
  HEAP32[$677 >> 2] = $116; //@line 14256
  sp = STACKTOP; //@line 14257
  return;
 } else if ((label | 0) == 35) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 14262
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_296($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $481 = 0, $485 = 0, $489 = 0, $494 = 0, $495 = 0, $499 = 0, $50 = 0, $503 = 0, $505 = 0, $507 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $578 = 0, $58 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $665 = 0, $666 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20253
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 20255
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20257
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 20259
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 20261
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 20263
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 20265
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 20267
 $16 = HEAP8[$0 + 28 >> 0] | 0; //@line 20269
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 20271
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 20273
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 20275
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 20277
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 20279
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 20281
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 20283
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 20285
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 20287
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 20289
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 20291
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 20293
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 20295
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 20297
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 20299
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 20301
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 20303
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 20305
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 20307
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 20309
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 20311
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 20313
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 20315
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 20317
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 20319
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 20321
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 20323
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 20325
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 20327
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 20329
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 20331
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 20333
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 20335
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 20337
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 20339
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 20341
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 20343
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 20345
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 20347
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 20349
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 20351
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 20353
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 20355
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 20357
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 20359
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 20361
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 20363
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 20365
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 20367
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 20369
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 20371
 $665 = HEAP8[$26 >> 0] | 0; //@line 20375
 $666 = $665 & 255; //@line 20376
 if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) > ($666 | 0)) {
  HEAP8[$10 + 4 + $666 >> 0] = 10; //@line 20381
  HEAP8[$26 >> 0] = $665 + 2 << 24 >> 24; //@line 20383
  HEAP8[($665 + 1 & 255) + ($10 + 4) >> 0] = $AsyncRetVal; //@line 20386
  HEAP8[$110 >> 0] = 1; //@line 20387
  HEAP8[$42 >> 0] = 1; //@line 20388
  $$0$be = $16; //@line 20389
  $$0107$be = 0; //@line 20389
 } else {
  $$0$be = $16; //@line 20391
  $$0107$be = -1010; //@line 20391
 }
 L4 : while (1) {
  if (($$0$be & 255) >= ($8 & 255)) {
   label = 32; //@line 20396
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 20400
  switch (HEAP8[$14 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 20405
    break L4;
    break;
   }
  case 5:
   {
    label = 9; //@line 20410
    break L4;
    break;
   }
  case 7:
   {
    label = 18; //@line 20415
    break L4;
    break;
   }
  case 9:
   {
    label = 24; //@line 20420
    break L4;
    break;
   }
  case 10:
   {
    label = 27; //@line 20425
    break L4;
    break;
   }
  case 2:
   {
    HEAP32[$114 >> 2] = 0; //@line 20430
    HEAP8[$4 >> 0] = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 20435
    HEAP8[$32 >> 0] = HEAP8[$14 + ($$0$be + 2 & 255) >> 0] | 0; //@line 20440
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 20441
    continue L4;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 20446
    $207 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 20449
    HEAP8[$38 >> 0] = $207; //@line 20450
    HEAP16[$52 >> 1] = 1 << ($207 & 255); //@line 20454
    $214 = HEAP8[$26 >> 0] | 0; //@line 20458
    $215 = $214 & 255; //@line 20459
    if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 20462
     $$0107$be = -1010; //@line 20462
     continue L4;
    }
    HEAP8[$26 >> 0] = $214 + 1 << 24 >> 24; //@line 20467
    HEAP8[$10 + 4 + $215 >> 0] = 4; //@line 20468
    HEAP8[$42 >> 0] = 1; //@line 20469
    $$0$be = $204; //@line 20470
    $$0107$be = 0; //@line 20470
    continue L4;
    break;
   }
  case 6:
   {
    $311 = HEAP32[$18 >> 2] | 0; //@line 20475
    if ($311 | 0) {
     label = 13; //@line 20478
     break L4;
    }
    $377 = HEAP8[$26 >> 0] | 0; //@line 20484
    $378 = $377 & 255; //@line 20485
    if ((128 - (HEAPU8[$12 >> 0] | 0) - $378 | 0) <= 2) {
     $$0$be = $119; //@line 20489
     $$0107$be = -1010; //@line 20489
     continue L4;
    }
    HEAP8[$10 + 4 + $378 >> 0] = 6; //@line 20494
    HEAP8[($377 + 1 & 255) + ($10 + 4) >> 0] = -1; //@line 20498
    HEAP8[$26 >> 0] = $377 + 3 << 24 >> 24; //@line 20500
    HEAP8[($377 + 2 & 255) + ($10 + 4) >> 0] = $2; //@line 20503
    HEAP8[$42 >> 0] = 1; //@line 20504
    $$0$be = $119; //@line 20505
    $$0107$be = 0; //@line 20505
    continue L4;
    break;
   }
  case 8:
   {
    $481 = $$0$be + 2 << 24 >> 24; //@line 20510
    $485 = HEAP8[$14 + ($119 & 255) >> 0] & 15; //@line 20514
    $489 = ($485 + ($485 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 20519
    HEAP32[$92 >> 2] = $489; //@line 20520
    HEAP32[$66 >> 2] = $489 + 1e3; //@line 20522
    $494 = HEAP8[$26 >> 0] | 0; //@line 20526
    $495 = $494 & 255; //@line 20527
    if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) <= ($495 | 0)) {
     $$0$be = $481; //@line 20530
     $$0107$be = -1010; //@line 20530
     continue L4;
    }
    HEAP8[$26 >> 0] = $494 + 1 << 24 >> 24; //@line 20535
    HEAP8[$10 + 4 + $495 >> 0] = 8; //@line 20536
    HEAP8[$110 >> 0] = 1; //@line 20537
    HEAP8[$42 >> 0] = 1; //@line 20538
    $$0$be = $481; //@line 20539
    $$0107$be = 0; //@line 20539
    continue L4;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 20544
    $$0107$be = -1013; //@line 20544
    continue L4;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$54 >> 0] = 0; //@line 20550
  HEAP8[$86 >> 0] = 0; //@line 20551
  HEAP8[$90 >> 0] = 0; //@line 20552
  HEAP8[$64 >> 0] = 0; //@line 20553
  $130 = $119 & 255; //@line 20554
  $131 = $130 + -1 | 0; //@line 20555
  HEAP32[$34 >> 2] = $14 + $131; //@line 20557
  HEAP8[$36 >> 0] = $100 - $131; //@line 20560
  HEAP8[$58 >> 0] = HEAP8[$50 >> 0] | 0; //@line 20562
  HEAP8[$70 >> 0] = HEAP8[$74 >> 0] | 0; //@line 20564
  HEAP8[$84 >> 0] = HEAP8[$94 >> 0] | 0; //@line 20566
  HEAP8[$102 >> 0] = HEAP8[$104 >> 0] | 0; //@line 20568
  HEAP8[$20 >> 0] = HEAP8[$106 >> 0] | 0; //@line 20570
  $142 = HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] | 0; //@line 20573
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 20574
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($30, $48, $54, $86, $90, $64) | 0; //@line 20575
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 473; //@line 20578
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 20579
   HEAP8[$144 >> 0] = $2; //@line 20580
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 20581
   HEAP32[$145 >> 2] = $4; //@line 20582
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 20583
   HEAP8[$146 >> 0] = $6; //@line 20584
   $147 = $ReallocAsyncCtx + 13 | 0; //@line 20585
   HEAP8[$147 >> 0] = $8; //@line 20586
   $148 = $ReallocAsyncCtx + 16 | 0; //@line 20587
   HEAP32[$148 >> 2] = $10; //@line 20588
   $149 = $ReallocAsyncCtx + 20 | 0; //@line 20589
   HEAP32[$149 >> 2] = $12; //@line 20590
   $150 = $ReallocAsyncCtx + 24 | 0; //@line 20591
   HEAP32[$150 >> 2] = $14; //@line 20592
   $151 = $ReallocAsyncCtx + 28 | 0; //@line 20593
   HEAP32[$151 >> 2] = $18; //@line 20594
   $152 = $ReallocAsyncCtx + 32 | 0; //@line 20595
   HEAP32[$152 >> 2] = $20; //@line 20596
   $153 = $ReallocAsyncCtx + 36 | 0; //@line 20597
   HEAP32[$153 >> 2] = $22; //@line 20598
   $154 = $ReallocAsyncCtx + 40 | 0; //@line 20599
   HEAP32[$154 >> 2] = $24; //@line 20600
   $155 = $ReallocAsyncCtx + 44 | 0; //@line 20601
   HEAP32[$155 >> 2] = $26; //@line 20602
   $156 = $ReallocAsyncCtx + 48 | 0; //@line 20603
   HEAP32[$156 >> 2] = $28; //@line 20604
   $157 = $ReallocAsyncCtx + 52 | 0; //@line 20605
   HEAP32[$157 >> 2] = $30; //@line 20606
   $158 = $ReallocAsyncCtx + 56 | 0; //@line 20607
   HEAP32[$158 >> 2] = $32; //@line 20608
   $159 = $ReallocAsyncCtx + 60 | 0; //@line 20609
   HEAP32[$159 >> 2] = $$0107$be; //@line 20610
   $160 = $ReallocAsyncCtx + 64 | 0; //@line 20611
   HEAP32[$160 >> 2] = $34; //@line 20612
   $161 = $ReallocAsyncCtx + 68 | 0; //@line 20613
   HEAP32[$161 >> 2] = $36; //@line 20614
   $162 = $ReallocAsyncCtx + 72 | 0; //@line 20615
   HEAP32[$162 >> 2] = $38; //@line 20616
   $163 = $ReallocAsyncCtx + 76 | 0; //@line 20617
   HEAP32[$163 >> 2] = $40; //@line 20618
   $164 = $ReallocAsyncCtx + 80 | 0; //@line 20619
   HEAP32[$164 >> 2] = $42; //@line 20620
   $165 = $ReallocAsyncCtx + 84 | 0; //@line 20621
   HEAP32[$165 >> 2] = $130; //@line 20622
   $166 = $ReallocAsyncCtx + 88 | 0; //@line 20623
   HEAP32[$166 >> 2] = $44; //@line 20624
   $167 = $ReallocAsyncCtx + 92 | 0; //@line 20625
   HEAP32[$167 >> 2] = $46; //@line 20626
   $168 = $ReallocAsyncCtx + 96 | 0; //@line 20627
   HEAP32[$168 >> 2] = $48; //@line 20628
   $169 = $ReallocAsyncCtx + 100 | 0; //@line 20629
   HEAP32[$169 >> 2] = $50; //@line 20630
   $170 = $ReallocAsyncCtx + 104 | 0; //@line 20631
   HEAP32[$170 >> 2] = $52; //@line 20632
   $171 = $ReallocAsyncCtx + 108 | 0; //@line 20633
   HEAP32[$171 >> 2] = $54; //@line 20634
   $172 = $ReallocAsyncCtx + 112 | 0; //@line 20635
   HEAP32[$172 >> 2] = $56; //@line 20636
   $173 = $ReallocAsyncCtx + 116 | 0; //@line 20637
   HEAP32[$173 >> 2] = $58; //@line 20638
   $174 = $ReallocAsyncCtx + 120 | 0; //@line 20639
   HEAP32[$174 >> 2] = $60; //@line 20640
   $175 = $ReallocAsyncCtx + 124 | 0; //@line 20641
   HEAP32[$175 >> 2] = $62; //@line 20642
   $176 = $ReallocAsyncCtx + 128 | 0; //@line 20643
   HEAP32[$176 >> 2] = $64; //@line 20644
   $177 = $ReallocAsyncCtx + 132 | 0; //@line 20645
   HEAP32[$177 >> 2] = $66; //@line 20646
   $178 = $ReallocAsyncCtx + 136 | 0; //@line 20647
   HEAP32[$178 >> 2] = $68; //@line 20648
   $179 = $ReallocAsyncCtx + 140 | 0; //@line 20649
   HEAP32[$179 >> 2] = $70; //@line 20650
   $180 = $ReallocAsyncCtx + 144 | 0; //@line 20651
   HEAP32[$180 >> 2] = $72; //@line 20652
   $181 = $ReallocAsyncCtx + 148 | 0; //@line 20653
   HEAP32[$181 >> 2] = $74; //@line 20654
   $182 = $ReallocAsyncCtx + 152 | 0; //@line 20655
   HEAP32[$182 >> 2] = $76; //@line 20656
   $183 = $ReallocAsyncCtx + 156 | 0; //@line 20657
   HEAP32[$183 >> 2] = $78; //@line 20658
   $184 = $ReallocAsyncCtx + 160 | 0; //@line 20659
   HEAP32[$184 >> 2] = $80; //@line 20660
   $185 = $ReallocAsyncCtx + 164 | 0; //@line 20661
   HEAP32[$185 >> 2] = $82; //@line 20662
   $186 = $ReallocAsyncCtx + 168 | 0; //@line 20663
   HEAP32[$186 >> 2] = $84; //@line 20664
   $187 = $ReallocAsyncCtx + 172 | 0; //@line 20665
   HEAP32[$187 >> 2] = $86; //@line 20666
   $188 = $ReallocAsyncCtx + 176 | 0; //@line 20667
   HEAP32[$188 >> 2] = $88; //@line 20668
   $189 = $ReallocAsyncCtx + 180 | 0; //@line 20669
   HEAP32[$189 >> 2] = $90; //@line 20670
   $190 = $ReallocAsyncCtx + 184 | 0; //@line 20671
   HEAP32[$190 >> 2] = $92; //@line 20672
   $191 = $ReallocAsyncCtx + 188 | 0; //@line 20673
   HEAP32[$191 >> 2] = $94; //@line 20674
   $192 = $ReallocAsyncCtx + 192 | 0; //@line 20675
   HEAP32[$192 >> 2] = $96; //@line 20676
   $193 = $ReallocAsyncCtx + 196 | 0; //@line 20677
   HEAP32[$193 >> 2] = $98; //@line 20678
   $194 = $ReallocAsyncCtx + 200 | 0; //@line 20679
   HEAP32[$194 >> 2] = $100; //@line 20680
   $195 = $ReallocAsyncCtx + 204 | 0; //@line 20681
   HEAP32[$195 >> 2] = $102; //@line 20682
   $196 = $ReallocAsyncCtx + 208 | 0; //@line 20683
   HEAP32[$196 >> 2] = $104; //@line 20684
   $197 = $ReallocAsyncCtx + 212 | 0; //@line 20685
   HEAP32[$197 >> 2] = $106; //@line 20686
   $198 = $ReallocAsyncCtx + 216 | 0; //@line 20687
   HEAP32[$198 >> 2] = $108; //@line 20688
   $199 = $ReallocAsyncCtx + 220 | 0; //@line 20689
   HEAP32[$199 >> 2] = $110; //@line 20690
   $200 = $ReallocAsyncCtx + 224 | 0; //@line 20691
   HEAP32[$200 >> 2] = $112; //@line 20692
   $201 = $ReallocAsyncCtx + 228 | 0; //@line 20693
   HEAP32[$201 >> 2] = $114; //@line 20694
   $202 = $ReallocAsyncCtx + 232 | 0; //@line 20695
   HEAP32[$202 >> 2] = $116; //@line 20696
   sp = STACKTOP; //@line 20697
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 20701
  ___async_unwind = 0; //@line 20702
  HEAP32[$ReallocAsyncCtx >> 2] = 473; //@line 20703
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 20704
  HEAP8[$144 >> 0] = $2; //@line 20705
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 20706
  HEAP32[$145 >> 2] = $4; //@line 20707
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 20708
  HEAP8[$146 >> 0] = $6; //@line 20709
  $147 = $ReallocAsyncCtx + 13 | 0; //@line 20710
  HEAP8[$147 >> 0] = $8; //@line 20711
  $148 = $ReallocAsyncCtx + 16 | 0; //@line 20712
  HEAP32[$148 >> 2] = $10; //@line 20713
  $149 = $ReallocAsyncCtx + 20 | 0; //@line 20714
  HEAP32[$149 >> 2] = $12; //@line 20715
  $150 = $ReallocAsyncCtx + 24 | 0; //@line 20716
  HEAP32[$150 >> 2] = $14; //@line 20717
  $151 = $ReallocAsyncCtx + 28 | 0; //@line 20718
  HEAP32[$151 >> 2] = $18; //@line 20719
  $152 = $ReallocAsyncCtx + 32 | 0; //@line 20720
  HEAP32[$152 >> 2] = $20; //@line 20721
  $153 = $ReallocAsyncCtx + 36 | 0; //@line 20722
  HEAP32[$153 >> 2] = $22; //@line 20723
  $154 = $ReallocAsyncCtx + 40 | 0; //@line 20724
  HEAP32[$154 >> 2] = $24; //@line 20725
  $155 = $ReallocAsyncCtx + 44 | 0; //@line 20726
  HEAP32[$155 >> 2] = $26; //@line 20727
  $156 = $ReallocAsyncCtx + 48 | 0; //@line 20728
  HEAP32[$156 >> 2] = $28; //@line 20729
  $157 = $ReallocAsyncCtx + 52 | 0; //@line 20730
  HEAP32[$157 >> 2] = $30; //@line 20731
  $158 = $ReallocAsyncCtx + 56 | 0; //@line 20732
  HEAP32[$158 >> 2] = $32; //@line 20733
  $159 = $ReallocAsyncCtx + 60 | 0; //@line 20734
  HEAP32[$159 >> 2] = $$0107$be; //@line 20735
  $160 = $ReallocAsyncCtx + 64 | 0; //@line 20736
  HEAP32[$160 >> 2] = $34; //@line 20737
  $161 = $ReallocAsyncCtx + 68 | 0; //@line 20738
  HEAP32[$161 >> 2] = $36; //@line 20739
  $162 = $ReallocAsyncCtx + 72 | 0; //@line 20740
  HEAP32[$162 >> 2] = $38; //@line 20741
  $163 = $ReallocAsyncCtx + 76 | 0; //@line 20742
  HEAP32[$163 >> 2] = $40; //@line 20743
  $164 = $ReallocAsyncCtx + 80 | 0; //@line 20744
  HEAP32[$164 >> 2] = $42; //@line 20745
  $165 = $ReallocAsyncCtx + 84 | 0; //@line 20746
  HEAP32[$165 >> 2] = $130; //@line 20747
  $166 = $ReallocAsyncCtx + 88 | 0; //@line 20748
  HEAP32[$166 >> 2] = $44; //@line 20749
  $167 = $ReallocAsyncCtx + 92 | 0; //@line 20750
  HEAP32[$167 >> 2] = $46; //@line 20751
  $168 = $ReallocAsyncCtx + 96 | 0; //@line 20752
  HEAP32[$168 >> 2] = $48; //@line 20753
  $169 = $ReallocAsyncCtx + 100 | 0; //@line 20754
  HEAP32[$169 >> 2] = $50; //@line 20755
  $170 = $ReallocAsyncCtx + 104 | 0; //@line 20756
  HEAP32[$170 >> 2] = $52; //@line 20757
  $171 = $ReallocAsyncCtx + 108 | 0; //@line 20758
  HEAP32[$171 >> 2] = $54; //@line 20759
  $172 = $ReallocAsyncCtx + 112 | 0; //@line 20760
  HEAP32[$172 >> 2] = $56; //@line 20761
  $173 = $ReallocAsyncCtx + 116 | 0; //@line 20762
  HEAP32[$173 >> 2] = $58; //@line 20763
  $174 = $ReallocAsyncCtx + 120 | 0; //@line 20764
  HEAP32[$174 >> 2] = $60; //@line 20765
  $175 = $ReallocAsyncCtx + 124 | 0; //@line 20766
  HEAP32[$175 >> 2] = $62; //@line 20767
  $176 = $ReallocAsyncCtx + 128 | 0; //@line 20768
  HEAP32[$176 >> 2] = $64; //@line 20769
  $177 = $ReallocAsyncCtx + 132 | 0; //@line 20770
  HEAP32[$177 >> 2] = $66; //@line 20771
  $178 = $ReallocAsyncCtx + 136 | 0; //@line 20772
  HEAP32[$178 >> 2] = $68; //@line 20773
  $179 = $ReallocAsyncCtx + 140 | 0; //@line 20774
  HEAP32[$179 >> 2] = $70; //@line 20775
  $180 = $ReallocAsyncCtx + 144 | 0; //@line 20776
  HEAP32[$180 >> 2] = $72; //@line 20777
  $181 = $ReallocAsyncCtx + 148 | 0; //@line 20778
  HEAP32[$181 >> 2] = $74; //@line 20779
  $182 = $ReallocAsyncCtx + 152 | 0; //@line 20780
  HEAP32[$182 >> 2] = $76; //@line 20781
  $183 = $ReallocAsyncCtx + 156 | 0; //@line 20782
  HEAP32[$183 >> 2] = $78; //@line 20783
  $184 = $ReallocAsyncCtx + 160 | 0; //@line 20784
  HEAP32[$184 >> 2] = $80; //@line 20785
  $185 = $ReallocAsyncCtx + 164 | 0; //@line 20786
  HEAP32[$185 >> 2] = $82; //@line 20787
  $186 = $ReallocAsyncCtx + 168 | 0; //@line 20788
  HEAP32[$186 >> 2] = $84; //@line 20789
  $187 = $ReallocAsyncCtx + 172 | 0; //@line 20790
  HEAP32[$187 >> 2] = $86; //@line 20791
  $188 = $ReallocAsyncCtx + 176 | 0; //@line 20792
  HEAP32[$188 >> 2] = $88; //@line 20793
  $189 = $ReallocAsyncCtx + 180 | 0; //@line 20794
  HEAP32[$189 >> 2] = $90; //@line 20795
  $190 = $ReallocAsyncCtx + 184 | 0; //@line 20796
  HEAP32[$190 >> 2] = $92; //@line 20797
  $191 = $ReallocAsyncCtx + 188 | 0; //@line 20798
  HEAP32[$191 >> 2] = $94; //@line 20799
  $192 = $ReallocAsyncCtx + 192 | 0; //@line 20800
  HEAP32[$192 >> 2] = $96; //@line 20801
  $193 = $ReallocAsyncCtx + 196 | 0; //@line 20802
  HEAP32[$193 >> 2] = $98; //@line 20803
  $194 = $ReallocAsyncCtx + 200 | 0; //@line 20804
  HEAP32[$194 >> 2] = $100; //@line 20805
  $195 = $ReallocAsyncCtx + 204 | 0; //@line 20806
  HEAP32[$195 >> 2] = $102; //@line 20807
  $196 = $ReallocAsyncCtx + 208 | 0; //@line 20808
  HEAP32[$196 >> 2] = $104; //@line 20809
  $197 = $ReallocAsyncCtx + 212 | 0; //@line 20810
  HEAP32[$197 >> 2] = $106; //@line 20811
  $198 = $ReallocAsyncCtx + 216 | 0; //@line 20812
  HEAP32[$198 >> 2] = $108; //@line 20813
  $199 = $ReallocAsyncCtx + 220 | 0; //@line 20814
  HEAP32[$199 >> 2] = $110; //@line 20815
  $200 = $ReallocAsyncCtx + 224 | 0; //@line 20816
  HEAP32[$200 >> 2] = $112; //@line 20817
  $201 = $ReallocAsyncCtx + 228 | 0; //@line 20818
  HEAP32[$201 >> 2] = $114; //@line 20819
  $202 = $ReallocAsyncCtx + 232 | 0; //@line 20820
  HEAP32[$202 >> 2] = $116; //@line 20821
  sp = STACKTOP; //@line 20822
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 20828
  HEAP8[$72 >> 0] = ($221 & 255) >>> 4 & 7; //@line 20833
  HEAP8[$60 >> 0] = $221 & 15; //@line 20835
  $240 = $$0$be + 5 << 24 >> 24; //@line 20849
  HEAP32[$62 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 20857
  $250 = HEAP32[(HEAP32[$88 >> 2] | 0) + 40 >> 2] | 0; //@line 20860
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 20861
  $251 = FUNCTION_TABLE_iii[$250 & 31]($30, $68) | 0; //@line 20862
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 20865
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 20866
   HEAP8[$252 >> 0] = $2; //@line 20867
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 20868
   HEAP32[$253 >> 2] = $4; //@line 20869
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 20870
   HEAP8[$254 >> 0] = $6; //@line 20871
   $255 = $ReallocAsyncCtx2 + 13 | 0; //@line 20872
   HEAP8[$255 >> 0] = $8; //@line 20873
   $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 20874
   HEAP32[$256 >> 2] = $10; //@line 20875
   $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 20876
   HEAP32[$257 >> 2] = $12; //@line 20877
   $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 20878
   HEAP32[$258 >> 2] = $14; //@line 20879
   $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 20880
   HEAP32[$259 >> 2] = $18; //@line 20881
   $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 20882
   HEAP32[$260 >> 2] = $20; //@line 20883
   $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 20884
   HEAP32[$261 >> 2] = $22; //@line 20885
   $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 20886
   HEAP32[$262 >> 2] = $24; //@line 20887
   $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 20888
   HEAP32[$263 >> 2] = $26; //@line 20889
   $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 20890
   HEAP32[$264 >> 2] = $28; //@line 20891
   $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 20892
   HEAP32[$265 >> 2] = $30; //@line 20893
   $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 20894
   HEAP32[$266 >> 2] = $32; //@line 20895
   $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 20896
   HEAP32[$267 >> 2] = $34; //@line 20897
   $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 20898
   HEAP32[$268 >> 2] = $36; //@line 20899
   $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 20900
   HEAP32[$269 >> 2] = $38; //@line 20901
   $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 20902
   HEAP8[$270 >> 0] = $240; //@line 20903
   $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 20904
   HEAP32[$271 >> 2] = $40; //@line 20905
   $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 20906
   HEAP32[$272 >> 2] = $42; //@line 20907
   $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 20908
   HEAP32[$273 >> 2] = $44; //@line 20909
   $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 20910
   HEAP32[$274 >> 2] = $46; //@line 20911
   $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 20912
   HEAP32[$275 >> 2] = $48; //@line 20913
   $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 20914
   HEAP32[$276 >> 2] = $50; //@line 20915
   $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 20916
   HEAP32[$277 >> 2] = $52; //@line 20917
   $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 20918
   HEAP32[$278 >> 2] = $54; //@line 20919
   $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 20920
   HEAP32[$279 >> 2] = $56; //@line 20921
   $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 20922
   HEAP32[$280 >> 2] = $58; //@line 20923
   $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 20924
   HEAP32[$281 >> 2] = $60; //@line 20925
   $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 20926
   HEAP32[$282 >> 2] = $62; //@line 20927
   $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 20928
   HEAP32[$283 >> 2] = $64; //@line 20929
   $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 20930
   HEAP32[$284 >> 2] = $66; //@line 20931
   $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 20932
   HEAP32[$285 >> 2] = $68; //@line 20933
   $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 20934
   HEAP32[$286 >> 2] = $70; //@line 20935
   $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 20936
   HEAP32[$287 >> 2] = $72; //@line 20937
   $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 20938
   HEAP32[$288 >> 2] = $74; //@line 20939
   $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 20940
   HEAP32[$289 >> 2] = $76; //@line 20941
   $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 20942
   HEAP32[$290 >> 2] = $78; //@line 20943
   $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 20944
   HEAP32[$291 >> 2] = $80; //@line 20945
   $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 20946
   HEAP32[$292 >> 2] = $82; //@line 20947
   $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 20948
   HEAP32[$293 >> 2] = $84; //@line 20949
   $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 20950
   HEAP32[$294 >> 2] = $86; //@line 20951
   $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 20952
   HEAP32[$295 >> 2] = $88; //@line 20953
   $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 20954
   HEAP32[$296 >> 2] = $90; //@line 20955
   $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 20956
   HEAP32[$297 >> 2] = $92; //@line 20957
   $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 20958
   HEAP32[$298 >> 2] = $94; //@line 20959
   $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 20960
   HEAP32[$299 >> 2] = $96; //@line 20961
   $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 20962
   HEAP32[$300 >> 2] = $98; //@line 20963
   $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 20964
   HEAP32[$301 >> 2] = $100; //@line 20965
   $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 20966
   HEAP32[$302 >> 2] = $102; //@line 20967
   $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 20968
   HEAP32[$303 >> 2] = $104; //@line 20969
   $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 20970
   HEAP32[$304 >> 2] = $106; //@line 20971
   $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 20972
   HEAP32[$305 >> 2] = $108; //@line 20973
   $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 20974
   HEAP32[$306 >> 2] = $110; //@line 20975
   $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 20976
   HEAP32[$307 >> 2] = $112; //@line 20977
   $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 20978
   HEAP32[$308 >> 2] = $114; //@line 20979
   $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 20980
   HEAP32[$309 >> 2] = $116; //@line 20981
   sp = STACKTOP; //@line 20982
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 20986
  ___async_unwind = 0; //@line 20987
  HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 20988
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 20989
  HEAP8[$252 >> 0] = $2; //@line 20990
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 20991
  HEAP32[$253 >> 2] = $4; //@line 20992
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 20993
  HEAP8[$254 >> 0] = $6; //@line 20994
  $255 = $ReallocAsyncCtx2 + 13 | 0; //@line 20995
  HEAP8[$255 >> 0] = $8; //@line 20996
  $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 20997
  HEAP32[$256 >> 2] = $10; //@line 20998
  $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 20999
  HEAP32[$257 >> 2] = $12; //@line 21000
  $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 21001
  HEAP32[$258 >> 2] = $14; //@line 21002
  $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 21003
  HEAP32[$259 >> 2] = $18; //@line 21004
  $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 21005
  HEAP32[$260 >> 2] = $20; //@line 21006
  $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 21007
  HEAP32[$261 >> 2] = $22; //@line 21008
  $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 21009
  HEAP32[$262 >> 2] = $24; //@line 21010
  $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 21011
  HEAP32[$263 >> 2] = $26; //@line 21012
  $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 21013
  HEAP32[$264 >> 2] = $28; //@line 21014
  $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 21015
  HEAP32[$265 >> 2] = $30; //@line 21016
  $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 21017
  HEAP32[$266 >> 2] = $32; //@line 21018
  $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 21019
  HEAP32[$267 >> 2] = $34; //@line 21020
  $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 21021
  HEAP32[$268 >> 2] = $36; //@line 21022
  $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 21023
  HEAP32[$269 >> 2] = $38; //@line 21024
  $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 21025
  HEAP8[$270 >> 0] = $240; //@line 21026
  $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 21027
  HEAP32[$271 >> 2] = $40; //@line 21028
  $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 21029
  HEAP32[$272 >> 2] = $42; //@line 21030
  $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 21031
  HEAP32[$273 >> 2] = $44; //@line 21032
  $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 21033
  HEAP32[$274 >> 2] = $46; //@line 21034
  $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 21035
  HEAP32[$275 >> 2] = $48; //@line 21036
  $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 21037
  HEAP32[$276 >> 2] = $50; //@line 21038
  $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 21039
  HEAP32[$277 >> 2] = $52; //@line 21040
  $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 21041
  HEAP32[$278 >> 2] = $54; //@line 21042
  $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 21043
  HEAP32[$279 >> 2] = $56; //@line 21044
  $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 21045
  HEAP32[$280 >> 2] = $58; //@line 21046
  $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 21047
  HEAP32[$281 >> 2] = $60; //@line 21048
  $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 21049
  HEAP32[$282 >> 2] = $62; //@line 21050
  $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 21051
  HEAP32[$283 >> 2] = $64; //@line 21052
  $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 21053
  HEAP32[$284 >> 2] = $66; //@line 21054
  $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 21055
  HEAP32[$285 >> 2] = $68; //@line 21056
  $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 21057
  HEAP32[$286 >> 2] = $70; //@line 21058
  $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 21059
  HEAP32[$287 >> 2] = $72; //@line 21060
  $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 21061
  HEAP32[$288 >> 2] = $74; //@line 21062
  $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 21063
  HEAP32[$289 >> 2] = $76; //@line 21064
  $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 21065
  HEAP32[$290 >> 2] = $78; //@line 21066
  $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 21067
  HEAP32[$291 >> 2] = $80; //@line 21068
  $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 21069
  HEAP32[$292 >> 2] = $82; //@line 21070
  $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 21071
  HEAP32[$293 >> 2] = $84; //@line 21072
  $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 21073
  HEAP32[$294 >> 2] = $86; //@line 21074
  $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 21075
  HEAP32[$295 >> 2] = $88; //@line 21076
  $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 21077
  HEAP32[$296 >> 2] = $90; //@line 21078
  $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 21079
  HEAP32[$297 >> 2] = $92; //@line 21080
  $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 21081
  HEAP32[$298 >> 2] = $94; //@line 21082
  $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 21083
  HEAP32[$299 >> 2] = $96; //@line 21084
  $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 21085
  HEAP32[$300 >> 2] = $98; //@line 21086
  $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 21087
  HEAP32[$301 >> 2] = $100; //@line 21088
  $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 21089
  HEAP32[$302 >> 2] = $102; //@line 21090
  $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 21091
  HEAP32[$303 >> 2] = $104; //@line 21092
  $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 21093
  HEAP32[$304 >> 2] = $106; //@line 21094
  $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 21095
  HEAP32[$305 >> 2] = $108; //@line 21096
  $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 21097
  HEAP32[$306 >> 2] = $110; //@line 21098
  $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 21099
  HEAP32[$307 >> 2] = $112; //@line 21100
  $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 21101
  HEAP32[$308 >> 2] = $114; //@line 21102
  $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 21103
  HEAP32[$309 >> 2] = $116; //@line 21104
  sp = STACKTOP; //@line 21105
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 21109
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 21110
  $314 = FUNCTION_TABLE_ii[$313 & 15]($28) | 0; //@line 21111
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 21114
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 21115
   HEAP8[$315 >> 0] = $2; //@line 21116
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 21117
   HEAP32[$316 >> 2] = $4; //@line 21118
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 21119
   HEAP8[$317 >> 0] = $6; //@line 21120
   $318 = $ReallocAsyncCtx3 + 13 | 0; //@line 21121
   HEAP8[$318 >> 0] = $8; //@line 21122
   $319 = $ReallocAsyncCtx3 + 16 | 0; //@line 21123
   HEAP32[$319 >> 2] = $10; //@line 21124
   $320 = $ReallocAsyncCtx3 + 20 | 0; //@line 21125
   HEAP32[$320 >> 2] = $12; //@line 21126
   $321 = $ReallocAsyncCtx3 + 24 | 0; //@line 21127
   HEAP32[$321 >> 2] = $14; //@line 21128
   $322 = $ReallocAsyncCtx3 + 28 | 0; //@line 21129
   HEAP32[$322 >> 2] = $18; //@line 21130
   $323 = $ReallocAsyncCtx3 + 32 | 0; //@line 21131
   HEAP32[$323 >> 2] = $20; //@line 21132
   $324 = $ReallocAsyncCtx3 + 36 | 0; //@line 21133
   HEAP32[$324 >> 2] = $22; //@line 21134
   $325 = $ReallocAsyncCtx3 + 40 | 0; //@line 21135
   HEAP32[$325 >> 2] = $24; //@line 21136
   $326 = $ReallocAsyncCtx3 + 44 | 0; //@line 21137
   HEAP32[$326 >> 2] = $26; //@line 21138
   $327 = $ReallocAsyncCtx3 + 48 | 0; //@line 21139
   HEAP32[$327 >> 2] = $28; //@line 21140
   $328 = $ReallocAsyncCtx3 + 52 | 0; //@line 21141
   HEAP32[$328 >> 2] = $30; //@line 21142
   $329 = $ReallocAsyncCtx3 + 56 | 0; //@line 21143
   HEAP32[$329 >> 2] = $32; //@line 21144
   $330 = $ReallocAsyncCtx3 + 60 | 0; //@line 21145
   HEAP32[$330 >> 2] = $34; //@line 21146
   $331 = $ReallocAsyncCtx3 + 64 | 0; //@line 21147
   HEAP32[$331 >> 2] = $36; //@line 21148
   $332 = $ReallocAsyncCtx3 + 68 | 0; //@line 21149
   HEAP32[$332 >> 2] = $38; //@line 21150
   $333 = $ReallocAsyncCtx3 + 72 | 0; //@line 21151
   HEAP32[$333 >> 2] = $40; //@line 21152
   $334 = $ReallocAsyncCtx3 + 76 | 0; //@line 21153
   HEAP32[$334 >> 2] = $42; //@line 21154
   $335 = $ReallocAsyncCtx3 + 80 | 0; //@line 21155
   HEAP32[$335 >> 2] = $44; //@line 21156
   $336 = $ReallocAsyncCtx3 + 84 | 0; //@line 21157
   HEAP32[$336 >> 2] = $46; //@line 21158
   $337 = $ReallocAsyncCtx3 + 88 | 0; //@line 21159
   HEAP32[$337 >> 2] = $48; //@line 21160
   $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 21161
   HEAP32[$338 >> 2] = $50; //@line 21162
   $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 21163
   HEAP32[$339 >> 2] = $52; //@line 21164
   $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 21165
   HEAP32[$340 >> 2] = $54; //@line 21166
   $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 21167
   HEAP8[$341 >> 0] = $119; //@line 21168
   $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 21169
   HEAP32[$342 >> 2] = $56; //@line 21170
   $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 21171
   HEAP32[$343 >> 2] = $58; //@line 21172
   $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 21173
   HEAP32[$344 >> 2] = $60; //@line 21174
   $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 21175
   HEAP32[$345 >> 2] = $62; //@line 21176
   $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 21177
   HEAP32[$346 >> 2] = $64; //@line 21178
   $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 21179
   HEAP32[$347 >> 2] = $66; //@line 21180
   $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 21181
   HEAP32[$348 >> 2] = $68; //@line 21182
   $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 21183
   HEAP32[$349 >> 2] = $70; //@line 21184
   $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 21185
   HEAP32[$350 >> 2] = $72; //@line 21186
   $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 21187
   HEAP32[$351 >> 2] = $74; //@line 21188
   $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 21189
   HEAP32[$352 >> 2] = $76; //@line 21190
   $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 21191
   HEAP32[$353 >> 2] = $78; //@line 21192
   $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 21193
   HEAP32[$354 >> 2] = $80; //@line 21194
   $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 21195
   HEAP32[$355 >> 2] = $82; //@line 21196
   $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 21197
   HEAP32[$356 >> 2] = $84; //@line 21198
   $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 21199
   HEAP32[$357 >> 2] = $86; //@line 21200
   $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 21201
   HEAP32[$358 >> 2] = $88; //@line 21202
   $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 21203
   HEAP32[$359 >> 2] = $90; //@line 21204
   $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 21205
   HEAP32[$360 >> 2] = $92; //@line 21206
   $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 21207
   HEAP32[$361 >> 2] = $94; //@line 21208
   $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 21209
   HEAP32[$362 >> 2] = $96; //@line 21210
   $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 21211
   HEAP32[$363 >> 2] = $98; //@line 21212
   $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 21213
   HEAP32[$364 >> 2] = $100; //@line 21214
   $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 21215
   HEAP32[$365 >> 2] = $102; //@line 21216
   $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 21217
   HEAP32[$366 >> 2] = $104; //@line 21218
   $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 21219
   HEAP32[$367 >> 2] = $106; //@line 21220
   $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 21221
   HEAP32[$368 >> 2] = $108; //@line 21222
   $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 21223
   HEAP32[$369 >> 2] = $110; //@line 21224
   $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 21225
   HEAP32[$370 >> 2] = $112; //@line 21226
   $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 21227
   HEAP32[$371 >> 2] = $114; //@line 21228
   $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 21229
   HEAP32[$372 >> 2] = $116; //@line 21230
   sp = STACKTOP; //@line 21231
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 21235
  ___async_unwind = 0; //@line 21236
  HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 21237
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 21238
  HEAP8[$315 >> 0] = $2; //@line 21239
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 21240
  HEAP32[$316 >> 2] = $4; //@line 21241
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 21242
  HEAP8[$317 >> 0] = $6; //@line 21243
  $318 = $ReallocAsyncCtx3 + 13 | 0; //@line 21244
  HEAP8[$318 >> 0] = $8; //@line 21245
  $319 = $ReallocAsyncCtx3 + 16 | 0; //@line 21246
  HEAP32[$319 >> 2] = $10; //@line 21247
  $320 = $ReallocAsyncCtx3 + 20 | 0; //@line 21248
  HEAP32[$320 >> 2] = $12; //@line 21249
  $321 = $ReallocAsyncCtx3 + 24 | 0; //@line 21250
  HEAP32[$321 >> 2] = $14; //@line 21251
  $322 = $ReallocAsyncCtx3 + 28 | 0; //@line 21252
  HEAP32[$322 >> 2] = $18; //@line 21253
  $323 = $ReallocAsyncCtx3 + 32 | 0; //@line 21254
  HEAP32[$323 >> 2] = $20; //@line 21255
  $324 = $ReallocAsyncCtx3 + 36 | 0; //@line 21256
  HEAP32[$324 >> 2] = $22; //@line 21257
  $325 = $ReallocAsyncCtx3 + 40 | 0; //@line 21258
  HEAP32[$325 >> 2] = $24; //@line 21259
  $326 = $ReallocAsyncCtx3 + 44 | 0; //@line 21260
  HEAP32[$326 >> 2] = $26; //@line 21261
  $327 = $ReallocAsyncCtx3 + 48 | 0; //@line 21262
  HEAP32[$327 >> 2] = $28; //@line 21263
  $328 = $ReallocAsyncCtx3 + 52 | 0; //@line 21264
  HEAP32[$328 >> 2] = $30; //@line 21265
  $329 = $ReallocAsyncCtx3 + 56 | 0; //@line 21266
  HEAP32[$329 >> 2] = $32; //@line 21267
  $330 = $ReallocAsyncCtx3 + 60 | 0; //@line 21268
  HEAP32[$330 >> 2] = $34; //@line 21269
  $331 = $ReallocAsyncCtx3 + 64 | 0; //@line 21270
  HEAP32[$331 >> 2] = $36; //@line 21271
  $332 = $ReallocAsyncCtx3 + 68 | 0; //@line 21272
  HEAP32[$332 >> 2] = $38; //@line 21273
  $333 = $ReallocAsyncCtx3 + 72 | 0; //@line 21274
  HEAP32[$333 >> 2] = $40; //@line 21275
  $334 = $ReallocAsyncCtx3 + 76 | 0; //@line 21276
  HEAP32[$334 >> 2] = $42; //@line 21277
  $335 = $ReallocAsyncCtx3 + 80 | 0; //@line 21278
  HEAP32[$335 >> 2] = $44; //@line 21279
  $336 = $ReallocAsyncCtx3 + 84 | 0; //@line 21280
  HEAP32[$336 >> 2] = $46; //@line 21281
  $337 = $ReallocAsyncCtx3 + 88 | 0; //@line 21282
  HEAP32[$337 >> 2] = $48; //@line 21283
  $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 21284
  HEAP32[$338 >> 2] = $50; //@line 21285
  $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 21286
  HEAP32[$339 >> 2] = $52; //@line 21287
  $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 21288
  HEAP32[$340 >> 2] = $54; //@line 21289
  $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 21290
  HEAP8[$341 >> 0] = $119; //@line 21291
  $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 21292
  HEAP32[$342 >> 2] = $56; //@line 21293
  $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 21294
  HEAP32[$343 >> 2] = $58; //@line 21295
  $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 21296
  HEAP32[$344 >> 2] = $60; //@line 21297
  $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 21298
  HEAP32[$345 >> 2] = $62; //@line 21299
  $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 21300
  HEAP32[$346 >> 2] = $64; //@line 21301
  $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 21302
  HEAP32[$347 >> 2] = $66; //@line 21303
  $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 21304
  HEAP32[$348 >> 2] = $68; //@line 21305
  $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 21306
  HEAP32[$349 >> 2] = $70; //@line 21307
  $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 21308
  HEAP32[$350 >> 2] = $72; //@line 21309
  $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 21310
  HEAP32[$351 >> 2] = $74; //@line 21311
  $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 21312
  HEAP32[$352 >> 2] = $76; //@line 21313
  $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 21314
  HEAP32[$353 >> 2] = $78; //@line 21315
  $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 21316
  HEAP32[$354 >> 2] = $80; //@line 21317
  $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 21318
  HEAP32[$355 >> 2] = $82; //@line 21319
  $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 21320
  HEAP32[$356 >> 2] = $84; //@line 21321
  $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 21322
  HEAP32[$357 >> 2] = $86; //@line 21323
  $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 21324
  HEAP32[$358 >> 2] = $88; //@line 21325
  $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 21326
  HEAP32[$359 >> 2] = $90; //@line 21327
  $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 21328
  HEAP32[$360 >> 2] = $92; //@line 21329
  $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 21330
  HEAP32[$361 >> 2] = $94; //@line 21331
  $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 21332
  HEAP32[$362 >> 2] = $96; //@line 21333
  $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 21334
  HEAP32[$363 >> 2] = $98; //@line 21335
  $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 21336
  HEAP32[$364 >> 2] = $100; //@line 21337
  $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 21338
  HEAP32[$365 >> 2] = $102; //@line 21339
  $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 21340
  HEAP32[$366 >> 2] = $104; //@line 21341
  $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 21342
  HEAP32[$367 >> 2] = $106; //@line 21343
  $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 21344
  HEAP32[$368 >> 2] = $108; //@line 21345
  $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 21346
  HEAP32[$369 >> 2] = $110; //@line 21347
  $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 21348
  HEAP32[$370 >> 2] = $112; //@line 21349
  $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 21350
  HEAP32[$371 >> 2] = $114; //@line 21351
  $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 21352
  HEAP32[$372 >> 2] = $116; //@line 21353
  sp = STACKTOP; //@line 21354
  return;
 } else if ((label | 0) == 18) {
  $392 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 21361
  HEAP32[$40 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 21382
  HEAP32[$56 >> 2] = 0; //@line 21383
  $413 = $$0$be + 6 << 24 >> 24; //@line 21384
  HEAP8[$46 >> 0] = HEAP8[$14 + ($$0$be + 5 & 255) >> 0] | 0; //@line 21388
  $419 = HEAP32[(HEAP32[$82 >> 2] | 0) + 8 >> 2] | 0; //@line 21391
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 21392
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($30, $392, $78) | 0; //@line 21393
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 21396
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 21397
   HEAP8[$421 >> 0] = $2; //@line 21398
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 21399
   HEAP32[$422 >> 2] = $4; //@line 21400
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 21401
   HEAP8[$423 >> 0] = $6; //@line 21402
   $424 = $ReallocAsyncCtx4 + 13 | 0; //@line 21403
   HEAP8[$424 >> 0] = $8; //@line 21404
   $425 = $ReallocAsyncCtx4 + 16 | 0; //@line 21405
   HEAP32[$425 >> 2] = $10; //@line 21406
   $426 = $ReallocAsyncCtx4 + 20 | 0; //@line 21407
   HEAP32[$426 >> 2] = $12; //@line 21408
   $427 = $ReallocAsyncCtx4 + 24 | 0; //@line 21409
   HEAP32[$427 >> 2] = $14; //@line 21410
   $428 = $ReallocAsyncCtx4 + 28 | 0; //@line 21411
   HEAP32[$428 >> 2] = $18; //@line 21412
   $429 = $ReallocAsyncCtx4 + 32 | 0; //@line 21413
   HEAP32[$429 >> 2] = $20; //@line 21414
   $430 = $ReallocAsyncCtx4 + 36 | 0; //@line 21415
   HEAP32[$430 >> 2] = $22; //@line 21416
   $431 = $ReallocAsyncCtx4 + 40 | 0; //@line 21417
   HEAP32[$431 >> 2] = $24; //@line 21418
   $432 = $ReallocAsyncCtx4 + 44 | 0; //@line 21419
   HEAP32[$432 >> 2] = $26; //@line 21420
   $433 = $ReallocAsyncCtx4 + 48 | 0; //@line 21421
   HEAP32[$433 >> 2] = $28; //@line 21422
   $434 = $ReallocAsyncCtx4 + 52 | 0; //@line 21423
   HEAP32[$434 >> 2] = $30; //@line 21424
   $435 = $ReallocAsyncCtx4 + 56 | 0; //@line 21425
   HEAP32[$435 >> 2] = $32; //@line 21426
   $436 = $ReallocAsyncCtx4 + 60 | 0; //@line 21427
   HEAP32[$436 >> 2] = $34; //@line 21428
   $437 = $ReallocAsyncCtx4 + 64 | 0; //@line 21429
   HEAP32[$437 >> 2] = $36; //@line 21430
   $438 = $ReallocAsyncCtx4 + 68 | 0; //@line 21431
   HEAP32[$438 >> 2] = $38; //@line 21432
   $439 = $ReallocAsyncCtx4 + 72 | 0; //@line 21433
   HEAP8[$439 >> 0] = $413; //@line 21434
   $440 = $ReallocAsyncCtx4 + 76 | 0; //@line 21435
   HEAP32[$440 >> 2] = $40; //@line 21436
   $441 = $ReallocAsyncCtx4 + 80 | 0; //@line 21437
   HEAP32[$441 >> 2] = $42; //@line 21438
   $442 = $ReallocAsyncCtx4 + 84 | 0; //@line 21439
   HEAP32[$442 >> 2] = $44; //@line 21440
   $443 = $ReallocAsyncCtx4 + 88 | 0; //@line 21441
   HEAP32[$443 >> 2] = $46; //@line 21442
   $444 = $ReallocAsyncCtx4 + 92 | 0; //@line 21443
   HEAP32[$444 >> 2] = $48; //@line 21444
   $445 = $ReallocAsyncCtx4 + 96 | 0; //@line 21445
   HEAP32[$445 >> 2] = $50; //@line 21446
   $446 = $ReallocAsyncCtx4 + 100 | 0; //@line 21447
   HEAP32[$446 >> 2] = $52; //@line 21448
   $447 = $ReallocAsyncCtx4 + 104 | 0; //@line 21449
   HEAP32[$447 >> 2] = $54; //@line 21450
   $448 = $ReallocAsyncCtx4 + 108 | 0; //@line 21451
   HEAP32[$448 >> 2] = $56; //@line 21452
   $449 = $ReallocAsyncCtx4 + 112 | 0; //@line 21453
   HEAP32[$449 >> 2] = $58; //@line 21454
   $450 = $ReallocAsyncCtx4 + 116 | 0; //@line 21455
   HEAP32[$450 >> 2] = $60; //@line 21456
   $451 = $ReallocAsyncCtx4 + 120 | 0; //@line 21457
   HEAP32[$451 >> 2] = $62; //@line 21458
   $452 = $ReallocAsyncCtx4 + 124 | 0; //@line 21459
   HEAP32[$452 >> 2] = $64; //@line 21460
   $453 = $ReallocAsyncCtx4 + 128 | 0; //@line 21461
   HEAP32[$453 >> 2] = $66; //@line 21462
   $454 = $ReallocAsyncCtx4 + 132 | 0; //@line 21463
   HEAP32[$454 >> 2] = $68; //@line 21464
   $455 = $ReallocAsyncCtx4 + 136 | 0; //@line 21465
   HEAP32[$455 >> 2] = $70; //@line 21466
   $456 = $ReallocAsyncCtx4 + 140 | 0; //@line 21467
   HEAP32[$456 >> 2] = $72; //@line 21468
   $457 = $ReallocAsyncCtx4 + 144 | 0; //@line 21469
   HEAP32[$457 >> 2] = $74; //@line 21470
   $458 = $ReallocAsyncCtx4 + 148 | 0; //@line 21471
   HEAP32[$458 >> 2] = $76; //@line 21472
   $459 = $ReallocAsyncCtx4 + 152 | 0; //@line 21473
   HEAP32[$459 >> 2] = $78; //@line 21474
   $460 = $ReallocAsyncCtx4 + 156 | 0; //@line 21475
   HEAP32[$460 >> 2] = $80; //@line 21476
   $461 = $ReallocAsyncCtx4 + 160 | 0; //@line 21477
   HEAP32[$461 >> 2] = $82; //@line 21478
   $462 = $ReallocAsyncCtx4 + 164 | 0; //@line 21479
   HEAP32[$462 >> 2] = $84; //@line 21480
   $463 = $ReallocAsyncCtx4 + 168 | 0; //@line 21481
   HEAP32[$463 >> 2] = $86; //@line 21482
   $464 = $ReallocAsyncCtx4 + 172 | 0; //@line 21483
   HEAP32[$464 >> 2] = $88; //@line 21484
   $465 = $ReallocAsyncCtx4 + 176 | 0; //@line 21485
   HEAP32[$465 >> 2] = $90; //@line 21486
   $466 = $ReallocAsyncCtx4 + 180 | 0; //@line 21487
   HEAP32[$466 >> 2] = $92; //@line 21488
   $467 = $ReallocAsyncCtx4 + 184 | 0; //@line 21489
   HEAP32[$467 >> 2] = $94; //@line 21490
   $468 = $ReallocAsyncCtx4 + 188 | 0; //@line 21491
   HEAP32[$468 >> 2] = $96; //@line 21492
   $469 = $ReallocAsyncCtx4 + 192 | 0; //@line 21493
   HEAP32[$469 >> 2] = $98; //@line 21494
   $470 = $ReallocAsyncCtx4 + 196 | 0; //@line 21495
   HEAP32[$470 >> 2] = $100; //@line 21496
   $471 = $ReallocAsyncCtx4 + 200 | 0; //@line 21497
   HEAP32[$471 >> 2] = $102; //@line 21498
   $472 = $ReallocAsyncCtx4 + 204 | 0; //@line 21499
   HEAP32[$472 >> 2] = $104; //@line 21500
   $473 = $ReallocAsyncCtx4 + 208 | 0; //@line 21501
   HEAP32[$473 >> 2] = $106; //@line 21502
   $474 = $ReallocAsyncCtx4 + 212 | 0; //@line 21503
   HEAP32[$474 >> 2] = $108; //@line 21504
   $475 = $ReallocAsyncCtx4 + 216 | 0; //@line 21505
   HEAP32[$475 >> 2] = $110; //@line 21506
   $476 = $ReallocAsyncCtx4 + 220 | 0; //@line 21507
   HEAP32[$476 >> 2] = $112; //@line 21508
   $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 21509
   HEAP32[$477 >> 2] = $114; //@line 21510
   $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 21511
   HEAP32[$478 >> 2] = $116; //@line 21512
   sp = STACKTOP; //@line 21513
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 21517
  ___async_unwind = 0; //@line 21518
  HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 21519
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 21520
  HEAP8[$421 >> 0] = $2; //@line 21521
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 21522
  HEAP32[$422 >> 2] = $4; //@line 21523
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 21524
  HEAP8[$423 >> 0] = $6; //@line 21525
  $424 = $ReallocAsyncCtx4 + 13 | 0; //@line 21526
  HEAP8[$424 >> 0] = $8; //@line 21527
  $425 = $ReallocAsyncCtx4 + 16 | 0; //@line 21528
  HEAP32[$425 >> 2] = $10; //@line 21529
  $426 = $ReallocAsyncCtx4 + 20 | 0; //@line 21530
  HEAP32[$426 >> 2] = $12; //@line 21531
  $427 = $ReallocAsyncCtx4 + 24 | 0; //@line 21532
  HEAP32[$427 >> 2] = $14; //@line 21533
  $428 = $ReallocAsyncCtx4 + 28 | 0; //@line 21534
  HEAP32[$428 >> 2] = $18; //@line 21535
  $429 = $ReallocAsyncCtx4 + 32 | 0; //@line 21536
  HEAP32[$429 >> 2] = $20; //@line 21537
  $430 = $ReallocAsyncCtx4 + 36 | 0; //@line 21538
  HEAP32[$430 >> 2] = $22; //@line 21539
  $431 = $ReallocAsyncCtx4 + 40 | 0; //@line 21540
  HEAP32[$431 >> 2] = $24; //@line 21541
  $432 = $ReallocAsyncCtx4 + 44 | 0; //@line 21542
  HEAP32[$432 >> 2] = $26; //@line 21543
  $433 = $ReallocAsyncCtx4 + 48 | 0; //@line 21544
  HEAP32[$433 >> 2] = $28; //@line 21545
  $434 = $ReallocAsyncCtx4 + 52 | 0; //@line 21546
  HEAP32[$434 >> 2] = $30; //@line 21547
  $435 = $ReallocAsyncCtx4 + 56 | 0; //@line 21548
  HEAP32[$435 >> 2] = $32; //@line 21549
  $436 = $ReallocAsyncCtx4 + 60 | 0; //@line 21550
  HEAP32[$436 >> 2] = $34; //@line 21551
  $437 = $ReallocAsyncCtx4 + 64 | 0; //@line 21552
  HEAP32[$437 >> 2] = $36; //@line 21553
  $438 = $ReallocAsyncCtx4 + 68 | 0; //@line 21554
  HEAP32[$438 >> 2] = $38; //@line 21555
  $439 = $ReallocAsyncCtx4 + 72 | 0; //@line 21556
  HEAP8[$439 >> 0] = $413; //@line 21557
  $440 = $ReallocAsyncCtx4 + 76 | 0; //@line 21558
  HEAP32[$440 >> 2] = $40; //@line 21559
  $441 = $ReallocAsyncCtx4 + 80 | 0; //@line 21560
  HEAP32[$441 >> 2] = $42; //@line 21561
  $442 = $ReallocAsyncCtx4 + 84 | 0; //@line 21562
  HEAP32[$442 >> 2] = $44; //@line 21563
  $443 = $ReallocAsyncCtx4 + 88 | 0; //@line 21564
  HEAP32[$443 >> 2] = $46; //@line 21565
  $444 = $ReallocAsyncCtx4 + 92 | 0; //@line 21566
  HEAP32[$444 >> 2] = $48; //@line 21567
  $445 = $ReallocAsyncCtx4 + 96 | 0; //@line 21568
  HEAP32[$445 >> 2] = $50; //@line 21569
  $446 = $ReallocAsyncCtx4 + 100 | 0; //@line 21570
  HEAP32[$446 >> 2] = $52; //@line 21571
  $447 = $ReallocAsyncCtx4 + 104 | 0; //@line 21572
  HEAP32[$447 >> 2] = $54; //@line 21573
  $448 = $ReallocAsyncCtx4 + 108 | 0; //@line 21574
  HEAP32[$448 >> 2] = $56; //@line 21575
  $449 = $ReallocAsyncCtx4 + 112 | 0; //@line 21576
  HEAP32[$449 >> 2] = $58; //@line 21577
  $450 = $ReallocAsyncCtx4 + 116 | 0; //@line 21578
  HEAP32[$450 >> 2] = $60; //@line 21579
  $451 = $ReallocAsyncCtx4 + 120 | 0; //@line 21580
  HEAP32[$451 >> 2] = $62; //@line 21581
  $452 = $ReallocAsyncCtx4 + 124 | 0; //@line 21582
  HEAP32[$452 >> 2] = $64; //@line 21583
  $453 = $ReallocAsyncCtx4 + 128 | 0; //@line 21584
  HEAP32[$453 >> 2] = $66; //@line 21585
  $454 = $ReallocAsyncCtx4 + 132 | 0; //@line 21586
  HEAP32[$454 >> 2] = $68; //@line 21587
  $455 = $ReallocAsyncCtx4 + 136 | 0; //@line 21588
  HEAP32[$455 >> 2] = $70; //@line 21589
  $456 = $ReallocAsyncCtx4 + 140 | 0; //@line 21590
  HEAP32[$456 >> 2] = $72; //@line 21591
  $457 = $ReallocAsyncCtx4 + 144 | 0; //@line 21592
  HEAP32[$457 >> 2] = $74; //@line 21593
  $458 = $ReallocAsyncCtx4 + 148 | 0; //@line 21594
  HEAP32[$458 >> 2] = $76; //@line 21595
  $459 = $ReallocAsyncCtx4 + 152 | 0; //@line 21596
  HEAP32[$459 >> 2] = $78; //@line 21597
  $460 = $ReallocAsyncCtx4 + 156 | 0; //@line 21598
  HEAP32[$460 >> 2] = $80; //@line 21599
  $461 = $ReallocAsyncCtx4 + 160 | 0; //@line 21600
  HEAP32[$461 >> 2] = $82; //@line 21601
  $462 = $ReallocAsyncCtx4 + 164 | 0; //@line 21602
  HEAP32[$462 >> 2] = $84; //@line 21603
  $463 = $ReallocAsyncCtx4 + 168 | 0; //@line 21604
  HEAP32[$463 >> 2] = $86; //@line 21605
  $464 = $ReallocAsyncCtx4 + 172 | 0; //@line 21606
  HEAP32[$464 >> 2] = $88; //@line 21607
  $465 = $ReallocAsyncCtx4 + 176 | 0; //@line 21608
  HEAP32[$465 >> 2] = $90; //@line 21609
  $466 = $ReallocAsyncCtx4 + 180 | 0; //@line 21610
  HEAP32[$466 >> 2] = $92; //@line 21611
  $467 = $ReallocAsyncCtx4 + 184 | 0; //@line 21612
  HEAP32[$467 >> 2] = $94; //@line 21613
  $468 = $ReallocAsyncCtx4 + 188 | 0; //@line 21614
  HEAP32[$468 >> 2] = $96; //@line 21615
  $469 = $ReallocAsyncCtx4 + 192 | 0; //@line 21616
  HEAP32[$469 >> 2] = $98; //@line 21617
  $470 = $ReallocAsyncCtx4 + 196 | 0; //@line 21618
  HEAP32[$470 >> 2] = $100; //@line 21619
  $471 = $ReallocAsyncCtx4 + 200 | 0; //@line 21620
  HEAP32[$471 >> 2] = $102; //@line 21621
  $472 = $ReallocAsyncCtx4 + 204 | 0; //@line 21622
  HEAP32[$472 >> 2] = $104; //@line 21623
  $473 = $ReallocAsyncCtx4 + 208 | 0; //@line 21624
  HEAP32[$473 >> 2] = $106; //@line 21625
  $474 = $ReallocAsyncCtx4 + 212 | 0; //@line 21626
  HEAP32[$474 >> 2] = $108; //@line 21627
  $475 = $ReallocAsyncCtx4 + 216 | 0; //@line 21628
  HEAP32[$475 >> 2] = $110; //@line 21629
  $476 = $ReallocAsyncCtx4 + 220 | 0; //@line 21630
  HEAP32[$476 >> 2] = $112; //@line 21631
  $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 21632
  HEAP32[$477 >> 2] = $114; //@line 21633
  $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 21634
  HEAP32[$478 >> 2] = $116; //@line 21635
  sp = STACKTOP; //@line 21636
  return;
 } else if ((label | 0) == 24) {
  $499 = $$0$be + 2 << 24 >> 24; //@line 21640
  $503 = HEAPU8[$14 + ($119 & 255) >> 0] | 0; //@line 21644
  $505 = $503 >>> 5 & 1; //@line 21647
  $507 = $503 >>> 4 & 1; //@line 21650
  $510 = HEAP32[(HEAP32[$76 >> 2] | 0) + 44 >> 2] | 0; //@line 21653
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 21654
  $511 = FUNCTION_TABLE_iiii[$510 & 31]($30, $507, $505) | 0; //@line 21655
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 21658
   $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 21659
   HEAP8[$512 >> 0] = $2; //@line 21660
   $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 21661
   HEAP32[$513 >> 2] = $4; //@line 21662
   $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 21663
   HEAP8[$514 >> 0] = $6; //@line 21664
   $515 = $ReallocAsyncCtx5 + 13 | 0; //@line 21665
   HEAP8[$515 >> 0] = $8; //@line 21666
   $516 = $ReallocAsyncCtx5 + 16 | 0; //@line 21667
   HEAP32[$516 >> 2] = $10; //@line 21668
   $517 = $ReallocAsyncCtx5 + 20 | 0; //@line 21669
   HEAP32[$517 >> 2] = $12; //@line 21670
   $518 = $ReallocAsyncCtx5 + 24 | 0; //@line 21671
   HEAP32[$518 >> 2] = $14; //@line 21672
   $519 = $ReallocAsyncCtx5 + 28 | 0; //@line 21673
   HEAP8[$519 >> 0] = $505; //@line 21674
   $520 = $ReallocAsyncCtx5 + 32 | 0; //@line 21675
   HEAP32[$520 >> 2] = $18; //@line 21676
   $521 = $ReallocAsyncCtx5 + 36 | 0; //@line 21677
   HEAP32[$521 >> 2] = $20; //@line 21678
   $522 = $ReallocAsyncCtx5 + 40 | 0; //@line 21679
   HEAP32[$522 >> 2] = $22; //@line 21680
   $523 = $ReallocAsyncCtx5 + 44 | 0; //@line 21681
   HEAP32[$523 >> 2] = $24; //@line 21682
   $524 = $ReallocAsyncCtx5 + 48 | 0; //@line 21683
   HEAP32[$524 >> 2] = $26; //@line 21684
   $525 = $ReallocAsyncCtx5 + 52 | 0; //@line 21685
   HEAP32[$525 >> 2] = $28; //@line 21686
   $526 = $ReallocAsyncCtx5 + 56 | 0; //@line 21687
   HEAP32[$526 >> 2] = $30; //@line 21688
   $527 = $ReallocAsyncCtx5 + 60 | 0; //@line 21689
   HEAP32[$527 >> 2] = $$0107$be; //@line 21690
   $528 = $ReallocAsyncCtx5 + 64 | 0; //@line 21691
   HEAP32[$528 >> 2] = $32; //@line 21692
   $529 = $ReallocAsyncCtx5 + 68 | 0; //@line 21693
   HEAP32[$529 >> 2] = $34; //@line 21694
   $530 = $ReallocAsyncCtx5 + 72 | 0; //@line 21695
   HEAP32[$530 >> 2] = $36; //@line 21696
   $531 = $ReallocAsyncCtx5 + 76 | 0; //@line 21697
   HEAP32[$531 >> 2] = $38; //@line 21698
   $532 = $ReallocAsyncCtx5 + 80 | 0; //@line 21699
   HEAP32[$532 >> 2] = $40; //@line 21700
   $533 = $ReallocAsyncCtx5 + 84 | 0; //@line 21701
   HEAP8[$533 >> 0] = $499; //@line 21702
   $534 = $ReallocAsyncCtx5 + 88 | 0; //@line 21703
   HEAP32[$534 >> 2] = $42; //@line 21704
   $535 = $ReallocAsyncCtx5 + 92 | 0; //@line 21705
   HEAP32[$535 >> 2] = $44; //@line 21706
   $536 = $ReallocAsyncCtx5 + 96 | 0; //@line 21707
   HEAP32[$536 >> 2] = $46; //@line 21708
   $537 = $ReallocAsyncCtx5 + 100 | 0; //@line 21709
   HEAP32[$537 >> 2] = $48; //@line 21710
   $538 = $ReallocAsyncCtx5 + 104 | 0; //@line 21711
   HEAP32[$538 >> 2] = $50; //@line 21712
   $539 = $ReallocAsyncCtx5 + 108 | 0; //@line 21713
   HEAP32[$539 >> 2] = $52; //@line 21714
   $540 = $ReallocAsyncCtx5 + 112 | 0; //@line 21715
   HEAP32[$540 >> 2] = $54; //@line 21716
   $541 = $ReallocAsyncCtx5 + 116 | 0; //@line 21717
   HEAP32[$541 >> 2] = $56; //@line 21718
   $542 = $ReallocAsyncCtx5 + 120 | 0; //@line 21719
   HEAP32[$542 >> 2] = $58; //@line 21720
   $543 = $ReallocAsyncCtx5 + 124 | 0; //@line 21721
   HEAP32[$543 >> 2] = $60; //@line 21722
   $544 = $ReallocAsyncCtx5 + 128 | 0; //@line 21723
   HEAP32[$544 >> 2] = $62; //@line 21724
   $545 = $ReallocAsyncCtx5 + 132 | 0; //@line 21725
   HEAP32[$545 >> 2] = $64; //@line 21726
   $546 = $ReallocAsyncCtx5 + 136 | 0; //@line 21727
   HEAP32[$546 >> 2] = $66; //@line 21728
   $547 = $ReallocAsyncCtx5 + 140 | 0; //@line 21729
   HEAP32[$547 >> 2] = $68; //@line 21730
   $548 = $ReallocAsyncCtx5 + 144 | 0; //@line 21731
   HEAP32[$548 >> 2] = $70; //@line 21732
   $549 = $ReallocAsyncCtx5 + 148 | 0; //@line 21733
   HEAP32[$549 >> 2] = $72; //@line 21734
   $550 = $ReallocAsyncCtx5 + 152 | 0; //@line 21735
   HEAP32[$550 >> 2] = $74; //@line 21736
   $551 = $ReallocAsyncCtx5 + 156 | 0; //@line 21737
   HEAP32[$551 >> 2] = $76; //@line 21738
   $552 = $ReallocAsyncCtx5 + 160 | 0; //@line 21739
   HEAP32[$552 >> 2] = $78; //@line 21740
   $553 = $ReallocAsyncCtx5 + 164 | 0; //@line 21741
   HEAP32[$553 >> 2] = $80; //@line 21742
   $554 = $ReallocAsyncCtx5 + 168 | 0; //@line 21743
   HEAP32[$554 >> 2] = $82; //@line 21744
   $555 = $ReallocAsyncCtx5 + 172 | 0; //@line 21745
   HEAP32[$555 >> 2] = $84; //@line 21746
   $556 = $ReallocAsyncCtx5 + 176 | 0; //@line 21747
   HEAP32[$556 >> 2] = $86; //@line 21748
   $557 = $ReallocAsyncCtx5 + 180 | 0; //@line 21749
   HEAP32[$557 >> 2] = $88; //@line 21750
   $558 = $ReallocAsyncCtx5 + 184 | 0; //@line 21751
   HEAP32[$558 >> 2] = $90; //@line 21752
   $559 = $ReallocAsyncCtx5 + 188 | 0; //@line 21753
   HEAP8[$559 >> 0] = $507; //@line 21754
   $560 = $ReallocAsyncCtx5 + 192 | 0; //@line 21755
   HEAP32[$560 >> 2] = $92; //@line 21756
   $561 = $ReallocAsyncCtx5 + 196 | 0; //@line 21757
   HEAP32[$561 >> 2] = $94; //@line 21758
   $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 21759
   HEAP32[$562 >> 2] = $96; //@line 21760
   $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 21761
   HEAP32[$563 >> 2] = $98; //@line 21762
   $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 21763
   HEAP32[$564 >> 2] = $100; //@line 21764
   $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 21765
   HEAP32[$565 >> 2] = $102; //@line 21766
   $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 21767
   HEAP32[$566 >> 2] = $503; //@line 21768
   $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 21769
   HEAP32[$567 >> 2] = $104; //@line 21770
   $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 21771
   HEAP32[$568 >> 2] = $106; //@line 21772
   $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 21773
   HEAP32[$569 >> 2] = $108; //@line 21774
   $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 21775
   HEAP32[$570 >> 2] = $110; //@line 21776
   $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 21777
   HEAP32[$571 >> 2] = $112; //@line 21778
   $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 21779
   HEAP32[$572 >> 2] = $114; //@line 21780
   $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 21781
   HEAP32[$573 >> 2] = $116; //@line 21782
   sp = STACKTOP; //@line 21783
   return;
  }
  HEAP8[___async_retval >> 0] = $511 & 1; //@line 21788
  ___async_unwind = 0; //@line 21789
  HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 21790
  $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 21791
  HEAP8[$512 >> 0] = $2; //@line 21792
  $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 21793
  HEAP32[$513 >> 2] = $4; //@line 21794
  $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 21795
  HEAP8[$514 >> 0] = $6; //@line 21796
  $515 = $ReallocAsyncCtx5 + 13 | 0; //@line 21797
  HEAP8[$515 >> 0] = $8; //@line 21798
  $516 = $ReallocAsyncCtx5 + 16 | 0; //@line 21799
  HEAP32[$516 >> 2] = $10; //@line 21800
  $517 = $ReallocAsyncCtx5 + 20 | 0; //@line 21801
  HEAP32[$517 >> 2] = $12; //@line 21802
  $518 = $ReallocAsyncCtx5 + 24 | 0; //@line 21803
  HEAP32[$518 >> 2] = $14; //@line 21804
  $519 = $ReallocAsyncCtx5 + 28 | 0; //@line 21805
  HEAP8[$519 >> 0] = $505; //@line 21806
  $520 = $ReallocAsyncCtx5 + 32 | 0; //@line 21807
  HEAP32[$520 >> 2] = $18; //@line 21808
  $521 = $ReallocAsyncCtx5 + 36 | 0; //@line 21809
  HEAP32[$521 >> 2] = $20; //@line 21810
  $522 = $ReallocAsyncCtx5 + 40 | 0; //@line 21811
  HEAP32[$522 >> 2] = $22; //@line 21812
  $523 = $ReallocAsyncCtx5 + 44 | 0; //@line 21813
  HEAP32[$523 >> 2] = $24; //@line 21814
  $524 = $ReallocAsyncCtx5 + 48 | 0; //@line 21815
  HEAP32[$524 >> 2] = $26; //@line 21816
  $525 = $ReallocAsyncCtx5 + 52 | 0; //@line 21817
  HEAP32[$525 >> 2] = $28; //@line 21818
  $526 = $ReallocAsyncCtx5 + 56 | 0; //@line 21819
  HEAP32[$526 >> 2] = $30; //@line 21820
  $527 = $ReallocAsyncCtx5 + 60 | 0; //@line 21821
  HEAP32[$527 >> 2] = $$0107$be; //@line 21822
  $528 = $ReallocAsyncCtx5 + 64 | 0; //@line 21823
  HEAP32[$528 >> 2] = $32; //@line 21824
  $529 = $ReallocAsyncCtx5 + 68 | 0; //@line 21825
  HEAP32[$529 >> 2] = $34; //@line 21826
  $530 = $ReallocAsyncCtx5 + 72 | 0; //@line 21827
  HEAP32[$530 >> 2] = $36; //@line 21828
  $531 = $ReallocAsyncCtx5 + 76 | 0; //@line 21829
  HEAP32[$531 >> 2] = $38; //@line 21830
  $532 = $ReallocAsyncCtx5 + 80 | 0; //@line 21831
  HEAP32[$532 >> 2] = $40; //@line 21832
  $533 = $ReallocAsyncCtx5 + 84 | 0; //@line 21833
  HEAP8[$533 >> 0] = $499; //@line 21834
  $534 = $ReallocAsyncCtx5 + 88 | 0; //@line 21835
  HEAP32[$534 >> 2] = $42; //@line 21836
  $535 = $ReallocAsyncCtx5 + 92 | 0; //@line 21837
  HEAP32[$535 >> 2] = $44; //@line 21838
  $536 = $ReallocAsyncCtx5 + 96 | 0; //@line 21839
  HEAP32[$536 >> 2] = $46; //@line 21840
  $537 = $ReallocAsyncCtx5 + 100 | 0; //@line 21841
  HEAP32[$537 >> 2] = $48; //@line 21842
  $538 = $ReallocAsyncCtx5 + 104 | 0; //@line 21843
  HEAP32[$538 >> 2] = $50; //@line 21844
  $539 = $ReallocAsyncCtx5 + 108 | 0; //@line 21845
  HEAP32[$539 >> 2] = $52; //@line 21846
  $540 = $ReallocAsyncCtx5 + 112 | 0; //@line 21847
  HEAP32[$540 >> 2] = $54; //@line 21848
  $541 = $ReallocAsyncCtx5 + 116 | 0; //@line 21849
  HEAP32[$541 >> 2] = $56; //@line 21850
  $542 = $ReallocAsyncCtx5 + 120 | 0; //@line 21851
  HEAP32[$542 >> 2] = $58; //@line 21852
  $543 = $ReallocAsyncCtx5 + 124 | 0; //@line 21853
  HEAP32[$543 >> 2] = $60; //@line 21854
  $544 = $ReallocAsyncCtx5 + 128 | 0; //@line 21855
  HEAP32[$544 >> 2] = $62; //@line 21856
  $545 = $ReallocAsyncCtx5 + 132 | 0; //@line 21857
  HEAP32[$545 >> 2] = $64; //@line 21858
  $546 = $ReallocAsyncCtx5 + 136 | 0; //@line 21859
  HEAP32[$546 >> 2] = $66; //@line 21860
  $547 = $ReallocAsyncCtx5 + 140 | 0; //@line 21861
  HEAP32[$547 >> 2] = $68; //@line 21862
  $548 = $ReallocAsyncCtx5 + 144 | 0; //@line 21863
  HEAP32[$548 >> 2] = $70; //@line 21864
  $549 = $ReallocAsyncCtx5 + 148 | 0; //@line 21865
  HEAP32[$549 >> 2] = $72; //@line 21866
  $550 = $ReallocAsyncCtx5 + 152 | 0; //@line 21867
  HEAP32[$550 >> 2] = $74; //@line 21868
  $551 = $ReallocAsyncCtx5 + 156 | 0; //@line 21869
  HEAP32[$551 >> 2] = $76; //@line 21870
  $552 = $ReallocAsyncCtx5 + 160 | 0; //@line 21871
  HEAP32[$552 >> 2] = $78; //@line 21872
  $553 = $ReallocAsyncCtx5 + 164 | 0; //@line 21873
  HEAP32[$553 >> 2] = $80; //@line 21874
  $554 = $ReallocAsyncCtx5 + 168 | 0; //@line 21875
  HEAP32[$554 >> 2] = $82; //@line 21876
  $555 = $ReallocAsyncCtx5 + 172 | 0; //@line 21877
  HEAP32[$555 >> 2] = $84; //@line 21878
  $556 = $ReallocAsyncCtx5 + 176 | 0; //@line 21879
  HEAP32[$556 >> 2] = $86; //@line 21880
  $557 = $ReallocAsyncCtx5 + 180 | 0; //@line 21881
  HEAP32[$557 >> 2] = $88; //@line 21882
  $558 = $ReallocAsyncCtx5 + 184 | 0; //@line 21883
  HEAP32[$558 >> 2] = $90; //@line 21884
  $559 = $ReallocAsyncCtx5 + 188 | 0; //@line 21885
  HEAP8[$559 >> 0] = $507; //@line 21886
  $560 = $ReallocAsyncCtx5 + 192 | 0; //@line 21887
  HEAP32[$560 >> 2] = $92; //@line 21888
  $561 = $ReallocAsyncCtx5 + 196 | 0; //@line 21889
  HEAP32[$561 >> 2] = $94; //@line 21890
  $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 21891
  HEAP32[$562 >> 2] = $96; //@line 21892
  $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 21893
  HEAP32[$563 >> 2] = $98; //@line 21894
  $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 21895
  HEAP32[$564 >> 2] = $100; //@line 21896
  $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 21897
  HEAP32[$565 >> 2] = $102; //@line 21898
  $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 21899
  HEAP32[$566 >> 2] = $503; //@line 21900
  $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 21901
  HEAP32[$567 >> 2] = $104; //@line 21902
  $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 21903
  HEAP32[$568 >> 2] = $106; //@line 21904
  $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 21905
  HEAP32[$569 >> 2] = $108; //@line 21906
  $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 21907
  HEAP32[$570 >> 2] = $110; //@line 21908
  $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 21909
  HEAP32[$571 >> 2] = $112; //@line 21910
  $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 21911
  HEAP32[$572 >> 2] = $114; //@line 21912
  $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 21913
  HEAP32[$573 >> 2] = $116; //@line 21914
  sp = STACKTOP; //@line 21915
  return;
 } else if ((label | 0) == 27) {
  $578 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 21922
  $591 = $$0$be + 5 << 24 >> 24; //@line 21935
  $598 = (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 21942
  $601 = HEAP32[(HEAP32[$96 >> 2] | 0) + 48 >> 2] | 0; //@line 21945
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 21946
  $602 = FUNCTION_TABLE_iiii[$601 & 31]($30, $578, $598) | 0; //@line 21947
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 21950
   $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 21951
   HEAP8[$603 >> 0] = $2; //@line 21952
   $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 21953
   HEAP32[$604 >> 2] = $4; //@line 21954
   $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 21955
   HEAP8[$605 >> 0] = $6; //@line 21956
   $606 = $ReallocAsyncCtx6 + 13 | 0; //@line 21957
   HEAP8[$606 >> 0] = $8; //@line 21958
   $607 = $ReallocAsyncCtx6 + 16 | 0; //@line 21959
   HEAP32[$607 >> 2] = $10; //@line 21960
   $608 = $ReallocAsyncCtx6 + 20 | 0; //@line 21961
   HEAP32[$608 >> 2] = $12; //@line 21962
   $609 = $ReallocAsyncCtx6 + 24 | 0; //@line 21963
   HEAP32[$609 >> 2] = $14; //@line 21964
   $610 = $ReallocAsyncCtx6 + 28 | 0; //@line 21965
   HEAP8[$610 >> 0] = $591; //@line 21966
   $611 = $ReallocAsyncCtx6 + 32 | 0; //@line 21967
   HEAP32[$611 >> 2] = $18; //@line 21968
   $612 = $ReallocAsyncCtx6 + 36 | 0; //@line 21969
   HEAP32[$612 >> 2] = $20; //@line 21970
   $613 = $ReallocAsyncCtx6 + 40 | 0; //@line 21971
   HEAP32[$613 >> 2] = $22; //@line 21972
   $614 = $ReallocAsyncCtx6 + 44 | 0; //@line 21973
   HEAP32[$614 >> 2] = $24; //@line 21974
   $615 = $ReallocAsyncCtx6 + 48 | 0; //@line 21975
   HEAP32[$615 >> 2] = $26; //@line 21976
   $616 = $ReallocAsyncCtx6 + 52 | 0; //@line 21977
   HEAP32[$616 >> 2] = $28; //@line 21978
   $617 = $ReallocAsyncCtx6 + 56 | 0; //@line 21979
   HEAP32[$617 >> 2] = $30; //@line 21980
   $618 = $ReallocAsyncCtx6 + 60 | 0; //@line 21981
   HEAP32[$618 >> 2] = $32; //@line 21982
   $619 = $ReallocAsyncCtx6 + 64 | 0; //@line 21983
   HEAP32[$619 >> 2] = $34; //@line 21984
   $620 = $ReallocAsyncCtx6 + 68 | 0; //@line 21985
   HEAP32[$620 >> 2] = $36; //@line 21986
   $621 = $ReallocAsyncCtx6 + 72 | 0; //@line 21987
   HEAP32[$621 >> 2] = $38; //@line 21988
   $622 = $ReallocAsyncCtx6 + 76 | 0; //@line 21989
   HEAP32[$622 >> 2] = $40; //@line 21990
   $623 = $ReallocAsyncCtx6 + 80 | 0; //@line 21991
   HEAP32[$623 >> 2] = $42; //@line 21992
   $624 = $ReallocAsyncCtx6 + 84 | 0; //@line 21993
   HEAP32[$624 >> 2] = $44; //@line 21994
   $625 = $ReallocAsyncCtx6 + 88 | 0; //@line 21995
   HEAP32[$625 >> 2] = $46; //@line 21996
   $626 = $ReallocAsyncCtx6 + 92 | 0; //@line 21997
   HEAP32[$626 >> 2] = $48; //@line 21998
   $627 = $ReallocAsyncCtx6 + 96 | 0; //@line 21999
   HEAP32[$627 >> 2] = $50; //@line 22000
   $628 = $ReallocAsyncCtx6 + 100 | 0; //@line 22001
   HEAP32[$628 >> 2] = $52; //@line 22002
   $629 = $ReallocAsyncCtx6 + 104 | 0; //@line 22003
   HEAP32[$629 >> 2] = $54; //@line 22004
   $630 = $ReallocAsyncCtx6 + 108 | 0; //@line 22005
   HEAP32[$630 >> 2] = $56; //@line 22006
   $631 = $ReallocAsyncCtx6 + 112 | 0; //@line 22007
   HEAP32[$631 >> 2] = $58; //@line 22008
   $632 = $ReallocAsyncCtx6 + 116 | 0; //@line 22009
   HEAP32[$632 >> 2] = $60; //@line 22010
   $633 = $ReallocAsyncCtx6 + 120 | 0; //@line 22011
   HEAP32[$633 >> 2] = $62; //@line 22012
   $634 = $ReallocAsyncCtx6 + 124 | 0; //@line 22013
   HEAP32[$634 >> 2] = $64; //@line 22014
   $635 = $ReallocAsyncCtx6 + 128 | 0; //@line 22015
   HEAP32[$635 >> 2] = $66; //@line 22016
   $636 = $ReallocAsyncCtx6 + 132 | 0; //@line 22017
   HEAP32[$636 >> 2] = $68; //@line 22018
   $637 = $ReallocAsyncCtx6 + 136 | 0; //@line 22019
   HEAP32[$637 >> 2] = $70; //@line 22020
   $638 = $ReallocAsyncCtx6 + 140 | 0; //@line 22021
   HEAP32[$638 >> 2] = $72; //@line 22022
   $639 = $ReallocAsyncCtx6 + 144 | 0; //@line 22023
   HEAP32[$639 >> 2] = $74; //@line 22024
   $640 = $ReallocAsyncCtx6 + 148 | 0; //@line 22025
   HEAP32[$640 >> 2] = $76; //@line 22026
   $641 = $ReallocAsyncCtx6 + 152 | 0; //@line 22027
   HEAP32[$641 >> 2] = $78; //@line 22028
   $642 = $ReallocAsyncCtx6 + 156 | 0; //@line 22029
   HEAP32[$642 >> 2] = $80; //@line 22030
   $643 = $ReallocAsyncCtx6 + 160 | 0; //@line 22031
   HEAP32[$643 >> 2] = $82; //@line 22032
   $644 = $ReallocAsyncCtx6 + 164 | 0; //@line 22033
   HEAP32[$644 >> 2] = $84; //@line 22034
   $645 = $ReallocAsyncCtx6 + 168 | 0; //@line 22035
   HEAP32[$645 >> 2] = $86; //@line 22036
   $646 = $ReallocAsyncCtx6 + 172 | 0; //@line 22037
   HEAP32[$646 >> 2] = $88; //@line 22038
   $647 = $ReallocAsyncCtx6 + 176 | 0; //@line 22039
   HEAP32[$647 >> 2] = $90; //@line 22040
   $648 = $ReallocAsyncCtx6 + 180 | 0; //@line 22041
   HEAP32[$648 >> 2] = $92; //@line 22042
   $649 = $ReallocAsyncCtx6 + 184 | 0; //@line 22043
   HEAP32[$649 >> 2] = $94; //@line 22044
   $650 = $ReallocAsyncCtx6 + 188 | 0; //@line 22045
   HEAP32[$650 >> 2] = $96; //@line 22046
   $651 = $ReallocAsyncCtx6 + 192 | 0; //@line 22047
   HEAP32[$651 >> 2] = $98; //@line 22048
   $652 = $ReallocAsyncCtx6 + 196 | 0; //@line 22049
   HEAP32[$652 >> 2] = $100; //@line 22050
   $653 = $ReallocAsyncCtx6 + 200 | 0; //@line 22051
   HEAP32[$653 >> 2] = $102; //@line 22052
   $654 = $ReallocAsyncCtx6 + 204 | 0; //@line 22053
   HEAP32[$654 >> 2] = $104; //@line 22054
   $655 = $ReallocAsyncCtx6 + 208 | 0; //@line 22055
   HEAP32[$655 >> 2] = $106; //@line 22056
   $656 = $ReallocAsyncCtx6 + 212 | 0; //@line 22057
   HEAP32[$656 >> 2] = $108; //@line 22058
   $657 = $ReallocAsyncCtx6 + 216 | 0; //@line 22059
   HEAP32[$657 >> 2] = $110; //@line 22060
   $658 = $ReallocAsyncCtx6 + 220 | 0; //@line 22061
   HEAP32[$658 >> 2] = $112; //@line 22062
   $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 22063
   HEAP32[$659 >> 2] = $114; //@line 22064
   $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 22065
   HEAP32[$660 >> 2] = $116; //@line 22066
   sp = STACKTOP; //@line 22067
   return;
  }
  HEAP8[___async_retval >> 0] = $602; //@line 22071
  ___async_unwind = 0; //@line 22072
  HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 22073
  $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 22074
  HEAP8[$603 >> 0] = $2; //@line 22075
  $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 22076
  HEAP32[$604 >> 2] = $4; //@line 22077
  $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 22078
  HEAP8[$605 >> 0] = $6; //@line 22079
  $606 = $ReallocAsyncCtx6 + 13 | 0; //@line 22080
  HEAP8[$606 >> 0] = $8; //@line 22081
  $607 = $ReallocAsyncCtx6 + 16 | 0; //@line 22082
  HEAP32[$607 >> 2] = $10; //@line 22083
  $608 = $ReallocAsyncCtx6 + 20 | 0; //@line 22084
  HEAP32[$608 >> 2] = $12; //@line 22085
  $609 = $ReallocAsyncCtx6 + 24 | 0; //@line 22086
  HEAP32[$609 >> 2] = $14; //@line 22087
  $610 = $ReallocAsyncCtx6 + 28 | 0; //@line 22088
  HEAP8[$610 >> 0] = $591; //@line 22089
  $611 = $ReallocAsyncCtx6 + 32 | 0; //@line 22090
  HEAP32[$611 >> 2] = $18; //@line 22091
  $612 = $ReallocAsyncCtx6 + 36 | 0; //@line 22092
  HEAP32[$612 >> 2] = $20; //@line 22093
  $613 = $ReallocAsyncCtx6 + 40 | 0; //@line 22094
  HEAP32[$613 >> 2] = $22; //@line 22095
  $614 = $ReallocAsyncCtx6 + 44 | 0; //@line 22096
  HEAP32[$614 >> 2] = $24; //@line 22097
  $615 = $ReallocAsyncCtx6 + 48 | 0; //@line 22098
  HEAP32[$615 >> 2] = $26; //@line 22099
  $616 = $ReallocAsyncCtx6 + 52 | 0; //@line 22100
  HEAP32[$616 >> 2] = $28; //@line 22101
  $617 = $ReallocAsyncCtx6 + 56 | 0; //@line 22102
  HEAP32[$617 >> 2] = $30; //@line 22103
  $618 = $ReallocAsyncCtx6 + 60 | 0; //@line 22104
  HEAP32[$618 >> 2] = $32; //@line 22105
  $619 = $ReallocAsyncCtx6 + 64 | 0; //@line 22106
  HEAP32[$619 >> 2] = $34; //@line 22107
  $620 = $ReallocAsyncCtx6 + 68 | 0; //@line 22108
  HEAP32[$620 >> 2] = $36; //@line 22109
  $621 = $ReallocAsyncCtx6 + 72 | 0; //@line 22110
  HEAP32[$621 >> 2] = $38; //@line 22111
  $622 = $ReallocAsyncCtx6 + 76 | 0; //@line 22112
  HEAP32[$622 >> 2] = $40; //@line 22113
  $623 = $ReallocAsyncCtx6 + 80 | 0; //@line 22114
  HEAP32[$623 >> 2] = $42; //@line 22115
  $624 = $ReallocAsyncCtx6 + 84 | 0; //@line 22116
  HEAP32[$624 >> 2] = $44; //@line 22117
  $625 = $ReallocAsyncCtx6 + 88 | 0; //@line 22118
  HEAP32[$625 >> 2] = $46; //@line 22119
  $626 = $ReallocAsyncCtx6 + 92 | 0; //@line 22120
  HEAP32[$626 >> 2] = $48; //@line 22121
  $627 = $ReallocAsyncCtx6 + 96 | 0; //@line 22122
  HEAP32[$627 >> 2] = $50; //@line 22123
  $628 = $ReallocAsyncCtx6 + 100 | 0; //@line 22124
  HEAP32[$628 >> 2] = $52; //@line 22125
  $629 = $ReallocAsyncCtx6 + 104 | 0; //@line 22126
  HEAP32[$629 >> 2] = $54; //@line 22127
  $630 = $ReallocAsyncCtx6 + 108 | 0; //@line 22128
  HEAP32[$630 >> 2] = $56; //@line 22129
  $631 = $ReallocAsyncCtx6 + 112 | 0; //@line 22130
  HEAP32[$631 >> 2] = $58; //@line 22131
  $632 = $ReallocAsyncCtx6 + 116 | 0; //@line 22132
  HEAP32[$632 >> 2] = $60; //@line 22133
  $633 = $ReallocAsyncCtx6 + 120 | 0; //@line 22134
  HEAP32[$633 >> 2] = $62; //@line 22135
  $634 = $ReallocAsyncCtx6 + 124 | 0; //@line 22136
  HEAP32[$634 >> 2] = $64; //@line 22137
  $635 = $ReallocAsyncCtx6 + 128 | 0; //@line 22138
  HEAP32[$635 >> 2] = $66; //@line 22139
  $636 = $ReallocAsyncCtx6 + 132 | 0; //@line 22140
  HEAP32[$636 >> 2] = $68; //@line 22141
  $637 = $ReallocAsyncCtx6 + 136 | 0; //@line 22142
  HEAP32[$637 >> 2] = $70; //@line 22143
  $638 = $ReallocAsyncCtx6 + 140 | 0; //@line 22144
  HEAP32[$638 >> 2] = $72; //@line 22145
  $639 = $ReallocAsyncCtx6 + 144 | 0; //@line 22146
  HEAP32[$639 >> 2] = $74; //@line 22147
  $640 = $ReallocAsyncCtx6 + 148 | 0; //@line 22148
  HEAP32[$640 >> 2] = $76; //@line 22149
  $641 = $ReallocAsyncCtx6 + 152 | 0; //@line 22150
  HEAP32[$641 >> 2] = $78; //@line 22151
  $642 = $ReallocAsyncCtx6 + 156 | 0; //@line 22152
  HEAP32[$642 >> 2] = $80; //@line 22153
  $643 = $ReallocAsyncCtx6 + 160 | 0; //@line 22154
  HEAP32[$643 >> 2] = $82; //@line 22155
  $644 = $ReallocAsyncCtx6 + 164 | 0; //@line 22156
  HEAP32[$644 >> 2] = $84; //@line 22157
  $645 = $ReallocAsyncCtx6 + 168 | 0; //@line 22158
  HEAP32[$645 >> 2] = $86; //@line 22159
  $646 = $ReallocAsyncCtx6 + 172 | 0; //@line 22160
  HEAP32[$646 >> 2] = $88; //@line 22161
  $647 = $ReallocAsyncCtx6 + 176 | 0; //@line 22162
  HEAP32[$647 >> 2] = $90; //@line 22163
  $648 = $ReallocAsyncCtx6 + 180 | 0; //@line 22164
  HEAP32[$648 >> 2] = $92; //@line 22165
  $649 = $ReallocAsyncCtx6 + 184 | 0; //@line 22166
  HEAP32[$649 >> 2] = $94; //@line 22167
  $650 = $ReallocAsyncCtx6 + 188 | 0; //@line 22168
  HEAP32[$650 >> 2] = $96; //@line 22169
  $651 = $ReallocAsyncCtx6 + 192 | 0; //@line 22170
  HEAP32[$651 >> 2] = $98; //@line 22171
  $652 = $ReallocAsyncCtx6 + 196 | 0; //@line 22172
  HEAP32[$652 >> 2] = $100; //@line 22173
  $653 = $ReallocAsyncCtx6 + 200 | 0; //@line 22174
  HEAP32[$653 >> 2] = $102; //@line 22175
  $654 = $ReallocAsyncCtx6 + 204 | 0; //@line 22176
  HEAP32[$654 >> 2] = $104; //@line 22177
  $655 = $ReallocAsyncCtx6 + 208 | 0; //@line 22178
  HEAP32[$655 >> 2] = $106; //@line 22179
  $656 = $ReallocAsyncCtx6 + 212 | 0; //@line 22180
  HEAP32[$656 >> 2] = $108; //@line 22181
  $657 = $ReallocAsyncCtx6 + 216 | 0; //@line 22182
  HEAP32[$657 >> 2] = $110; //@line 22183
  $658 = $ReallocAsyncCtx6 + 220 | 0; //@line 22184
  HEAP32[$658 >> 2] = $112; //@line 22185
  $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 22186
  HEAP32[$659 >> 2] = $114; //@line 22187
  $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 22188
  HEAP32[$660 >> 2] = $116; //@line 22189
  sp = STACKTOP; //@line 22190
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 22195
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_294($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i118 = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $483 = 0, $484 = 0, $493 = 0, $497 = 0, $50 = 0, $501 = 0, $506 = 0, $507 = 0, $511 = 0, $515 = 0, $517 = 0, $519 = 0, $52 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $590 = 0, $6 = 0, $60 = 0, $603 = 0, $610 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16270
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 16272
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16274
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 16276
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 16278
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 16280
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 16282
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 16284
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 16286
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 16288
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 16290
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 16292
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 16294
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 16296
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 16298
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 16300
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 16302
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 16304
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 16306
 $38 = HEAP8[$0 + 72 >> 0] | 0; //@line 16308
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 16310
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 16312
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 16314
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 16316
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 16318
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 16320
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 16322
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 16324
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 16326
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 16328
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 16330
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 16332
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 16334
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 16336
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 16338
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 16340
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 16342
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 16344
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 16346
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 16348
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 16350
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 16352
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 16354
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 16356
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 16358
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 16360
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 16362
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 16364
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 16366
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 16368
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 16370
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 16372
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 16374
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 16376
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 16378
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 16380
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 16382
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 16384
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 16386
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 16388
 $483 = HEAP8[$24 >> 0] | 0; //@line 16392
 $484 = $483 & 255; //@line 16393
 if ((128 - (HEAPU8[$12 >> 0] | 0) - $484 | 0) > 1) {
  HEAP8[$10 + 4 + $484 >> 0] = 7; //@line 16402
  HEAP8[$24 >> 0] = $483 + 2 << 24 >> 24; //@line 16403
  HEAP8[($483 + 1 & 255) + ($10 + 4) >> 0] = $AsyncRetVal; //@line 16404
  HEAP8[$42 >> 0] = 1; //@line 16405
  $$0$i118 = 0; //@line 16406
 } else {
  $$0$i118 = -1010; //@line 16408
 }
 $$0$be = $38; //@line 16410
 $$0107$be = $$0$i118; //@line 16410
 L5 : while (1) {
  if (($$0$be & 255) >= ($8 & 255)) {
   label = 33; //@line 16414
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 16418
  switch (HEAP8[$14 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 16423
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 16428
    break L5;
    break;
   }
  case 7:
   {
    label = 18; //@line 16433
    break L5;
    break;
   }
  case 9:
   {
    label = 27; //@line 16438
    break L5;
    break;
   }
  case 10:
   {
    label = 30; //@line 16443
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$114 >> 2] = 0; //@line 16448
    HEAP8[$4 >> 0] = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 16453
    HEAP8[$30 >> 0] = HEAP8[$14 + ($$0$be + 2 & 255) >> 0] | 0; //@line 16458
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 16459
    continue L5;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 16464
    $207 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 16467
    HEAP8[$36 >> 0] = $207; //@line 16468
    HEAP16[$52 >> 1] = 1 << ($207 & 255); //@line 16472
    $214 = HEAP8[$24 >> 0] | 0; //@line 16476
    $215 = $214 & 255; //@line 16477
    if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 16480
     $$0107$be = -1010; //@line 16480
     continue L5;
    }
    HEAP8[$24 >> 0] = $214 + 1 << 24 >> 24; //@line 16485
    HEAP8[$10 + 4 + $215 >> 0] = 4; //@line 16486
    HEAP8[$42 >> 0] = 1; //@line 16487
    $$0$be = $204; //@line 16488
    $$0107$be = 0; //@line 16488
    continue L5;
    break;
   }
  case 6:
   {
    $311 = HEAP32[$16 >> 2] | 0; //@line 16493
    if ($311 | 0) {
     label = 13; //@line 16496
     break L5;
    }
    $377 = HEAP8[$24 >> 0] | 0; //@line 16502
    $378 = $377 & 255; //@line 16503
    if ((128 - (HEAPU8[$12 >> 0] | 0) - $378 | 0) <= 2) {
     $$0$be = $119; //@line 16507
     $$0107$be = -1010; //@line 16507
     continue L5;
    }
    HEAP8[$10 + 4 + $378 >> 0] = 6; //@line 16512
    HEAP8[($377 + 1 & 255) + ($10 + 4) >> 0] = -1; //@line 16516
    HEAP8[$24 >> 0] = $377 + 3 << 24 >> 24; //@line 16518
    HEAP8[($377 + 2 & 255) + ($10 + 4) >> 0] = $2; //@line 16521
    HEAP8[$42 >> 0] = 1; //@line 16522
    $$0$be = $119; //@line 16523
    $$0107$be = 0; //@line 16523
    continue L5;
    break;
   }
  case 8:
   {
    $493 = $$0$be + 2 << 24 >> 24; //@line 16528
    $497 = HEAP8[$14 + ($119 & 255) >> 0] & 15; //@line 16532
    $501 = ($497 + ($497 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 16537
    HEAP32[$92 >> 2] = $501; //@line 16538
    HEAP32[$66 >> 2] = $501 + 1e3; //@line 16540
    $506 = HEAP8[$24 >> 0] | 0; //@line 16544
    $507 = $506 & 255; //@line 16545
    if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) <= ($507 | 0)) {
     $$0$be = $493; //@line 16548
     $$0107$be = -1010; //@line 16548
     continue L5;
    }
    HEAP8[$24 >> 0] = $506 + 1 << 24 >> 24; //@line 16553
    HEAP8[$10 + 4 + $507 >> 0] = 8; //@line 16554
    HEAP8[$110 >> 0] = 1; //@line 16555
    HEAP8[$42 >> 0] = 1; //@line 16556
    $$0$be = $493; //@line 16557
    $$0107$be = 0; //@line 16557
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 16562
    $$0107$be = -1013; //@line 16562
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$54 >> 0] = 0; //@line 16568
  HEAP8[$86 >> 0] = 0; //@line 16569
  HEAP8[$90 >> 0] = 0; //@line 16570
  HEAP8[$64 >> 0] = 0; //@line 16571
  $130 = $119 & 255; //@line 16572
  $131 = $130 + -1 | 0; //@line 16573
  HEAP32[$32 >> 2] = $14 + $131; //@line 16575
  HEAP8[$34 >> 0] = $100 - $131; //@line 16578
  HEAP8[$58 >> 0] = HEAP8[$50 >> 0] | 0; //@line 16580
  HEAP8[$70 >> 0] = HEAP8[$74 >> 0] | 0; //@line 16582
  HEAP8[$84 >> 0] = HEAP8[$94 >> 0] | 0; //@line 16584
  HEAP8[$102 >> 0] = HEAP8[$104 >> 0] | 0; //@line 16586
  HEAP8[$18 >> 0] = HEAP8[$106 >> 0] | 0; //@line 16588
  $142 = HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] | 0; //@line 16591
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 16592
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($28, $48, $54, $86, $90, $64) | 0; //@line 16593
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 473; //@line 16596
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 16597
   HEAP8[$144 >> 0] = $2; //@line 16598
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 16599
   HEAP32[$145 >> 2] = $4; //@line 16600
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 16601
   HEAP8[$146 >> 0] = $6; //@line 16602
   $147 = $ReallocAsyncCtx + 13 | 0; //@line 16603
   HEAP8[$147 >> 0] = $8; //@line 16604
   $148 = $ReallocAsyncCtx + 16 | 0; //@line 16605
   HEAP32[$148 >> 2] = $10; //@line 16606
   $149 = $ReallocAsyncCtx + 20 | 0; //@line 16607
   HEAP32[$149 >> 2] = $12; //@line 16608
   $150 = $ReallocAsyncCtx + 24 | 0; //@line 16609
   HEAP32[$150 >> 2] = $14; //@line 16610
   $151 = $ReallocAsyncCtx + 28 | 0; //@line 16611
   HEAP32[$151 >> 2] = $16; //@line 16612
   $152 = $ReallocAsyncCtx + 32 | 0; //@line 16613
   HEAP32[$152 >> 2] = $18; //@line 16614
   $153 = $ReallocAsyncCtx + 36 | 0; //@line 16615
   HEAP32[$153 >> 2] = $20; //@line 16616
   $154 = $ReallocAsyncCtx + 40 | 0; //@line 16617
   HEAP32[$154 >> 2] = $22; //@line 16618
   $155 = $ReallocAsyncCtx + 44 | 0; //@line 16619
   HEAP32[$155 >> 2] = $24; //@line 16620
   $156 = $ReallocAsyncCtx + 48 | 0; //@line 16621
   HEAP32[$156 >> 2] = $26; //@line 16622
   $157 = $ReallocAsyncCtx + 52 | 0; //@line 16623
   HEAP32[$157 >> 2] = $28; //@line 16624
   $158 = $ReallocAsyncCtx + 56 | 0; //@line 16625
   HEAP32[$158 >> 2] = $30; //@line 16626
   $159 = $ReallocAsyncCtx + 60 | 0; //@line 16627
   HEAP32[$159 >> 2] = $$0107$be; //@line 16628
   $160 = $ReallocAsyncCtx + 64 | 0; //@line 16629
   HEAP32[$160 >> 2] = $32; //@line 16630
   $161 = $ReallocAsyncCtx + 68 | 0; //@line 16631
   HEAP32[$161 >> 2] = $34; //@line 16632
   $162 = $ReallocAsyncCtx + 72 | 0; //@line 16633
   HEAP32[$162 >> 2] = $36; //@line 16634
   $163 = $ReallocAsyncCtx + 76 | 0; //@line 16635
   HEAP32[$163 >> 2] = $40; //@line 16636
   $164 = $ReallocAsyncCtx + 80 | 0; //@line 16637
   HEAP32[$164 >> 2] = $42; //@line 16638
   $165 = $ReallocAsyncCtx + 84 | 0; //@line 16639
   HEAP32[$165 >> 2] = $130; //@line 16640
   $166 = $ReallocAsyncCtx + 88 | 0; //@line 16641
   HEAP32[$166 >> 2] = $44; //@line 16642
   $167 = $ReallocAsyncCtx + 92 | 0; //@line 16643
   HEAP32[$167 >> 2] = $46; //@line 16644
   $168 = $ReallocAsyncCtx + 96 | 0; //@line 16645
   HEAP32[$168 >> 2] = $48; //@line 16646
   $169 = $ReallocAsyncCtx + 100 | 0; //@line 16647
   HEAP32[$169 >> 2] = $50; //@line 16648
   $170 = $ReallocAsyncCtx + 104 | 0; //@line 16649
   HEAP32[$170 >> 2] = $52; //@line 16650
   $171 = $ReallocAsyncCtx + 108 | 0; //@line 16651
   HEAP32[$171 >> 2] = $54; //@line 16652
   $172 = $ReallocAsyncCtx + 112 | 0; //@line 16653
   HEAP32[$172 >> 2] = $56; //@line 16654
   $173 = $ReallocAsyncCtx + 116 | 0; //@line 16655
   HEAP32[$173 >> 2] = $58; //@line 16656
   $174 = $ReallocAsyncCtx + 120 | 0; //@line 16657
   HEAP32[$174 >> 2] = $60; //@line 16658
   $175 = $ReallocAsyncCtx + 124 | 0; //@line 16659
   HEAP32[$175 >> 2] = $62; //@line 16660
   $176 = $ReallocAsyncCtx + 128 | 0; //@line 16661
   HEAP32[$176 >> 2] = $64; //@line 16662
   $177 = $ReallocAsyncCtx + 132 | 0; //@line 16663
   HEAP32[$177 >> 2] = $66; //@line 16664
   $178 = $ReallocAsyncCtx + 136 | 0; //@line 16665
   HEAP32[$178 >> 2] = $68; //@line 16666
   $179 = $ReallocAsyncCtx + 140 | 0; //@line 16667
   HEAP32[$179 >> 2] = $70; //@line 16668
   $180 = $ReallocAsyncCtx + 144 | 0; //@line 16669
   HEAP32[$180 >> 2] = $72; //@line 16670
   $181 = $ReallocAsyncCtx + 148 | 0; //@line 16671
   HEAP32[$181 >> 2] = $74; //@line 16672
   $182 = $ReallocAsyncCtx + 152 | 0; //@line 16673
   HEAP32[$182 >> 2] = $76; //@line 16674
   $183 = $ReallocAsyncCtx + 156 | 0; //@line 16675
   HEAP32[$183 >> 2] = $78; //@line 16676
   $184 = $ReallocAsyncCtx + 160 | 0; //@line 16677
   HEAP32[$184 >> 2] = $80; //@line 16678
   $185 = $ReallocAsyncCtx + 164 | 0; //@line 16679
   HEAP32[$185 >> 2] = $82; //@line 16680
   $186 = $ReallocAsyncCtx + 168 | 0; //@line 16681
   HEAP32[$186 >> 2] = $84; //@line 16682
   $187 = $ReallocAsyncCtx + 172 | 0; //@line 16683
   HEAP32[$187 >> 2] = $86; //@line 16684
   $188 = $ReallocAsyncCtx + 176 | 0; //@line 16685
   HEAP32[$188 >> 2] = $88; //@line 16686
   $189 = $ReallocAsyncCtx + 180 | 0; //@line 16687
   HEAP32[$189 >> 2] = $90; //@line 16688
   $190 = $ReallocAsyncCtx + 184 | 0; //@line 16689
   HEAP32[$190 >> 2] = $92; //@line 16690
   $191 = $ReallocAsyncCtx + 188 | 0; //@line 16691
   HEAP32[$191 >> 2] = $94; //@line 16692
   $192 = $ReallocAsyncCtx + 192 | 0; //@line 16693
   HEAP32[$192 >> 2] = $96; //@line 16694
   $193 = $ReallocAsyncCtx + 196 | 0; //@line 16695
   HEAP32[$193 >> 2] = $98; //@line 16696
   $194 = $ReallocAsyncCtx + 200 | 0; //@line 16697
   HEAP32[$194 >> 2] = $100; //@line 16698
   $195 = $ReallocAsyncCtx + 204 | 0; //@line 16699
   HEAP32[$195 >> 2] = $102; //@line 16700
   $196 = $ReallocAsyncCtx + 208 | 0; //@line 16701
   HEAP32[$196 >> 2] = $104; //@line 16702
   $197 = $ReallocAsyncCtx + 212 | 0; //@line 16703
   HEAP32[$197 >> 2] = $106; //@line 16704
   $198 = $ReallocAsyncCtx + 216 | 0; //@line 16705
   HEAP32[$198 >> 2] = $108; //@line 16706
   $199 = $ReallocAsyncCtx + 220 | 0; //@line 16707
   HEAP32[$199 >> 2] = $110; //@line 16708
   $200 = $ReallocAsyncCtx + 224 | 0; //@line 16709
   HEAP32[$200 >> 2] = $112; //@line 16710
   $201 = $ReallocAsyncCtx + 228 | 0; //@line 16711
   HEAP32[$201 >> 2] = $114; //@line 16712
   $202 = $ReallocAsyncCtx + 232 | 0; //@line 16713
   HEAP32[$202 >> 2] = $116; //@line 16714
   sp = STACKTOP; //@line 16715
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 16719
  ___async_unwind = 0; //@line 16720
  HEAP32[$ReallocAsyncCtx >> 2] = 473; //@line 16721
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 16722
  HEAP8[$144 >> 0] = $2; //@line 16723
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 16724
  HEAP32[$145 >> 2] = $4; //@line 16725
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 16726
  HEAP8[$146 >> 0] = $6; //@line 16727
  $147 = $ReallocAsyncCtx + 13 | 0; //@line 16728
  HEAP8[$147 >> 0] = $8; //@line 16729
  $148 = $ReallocAsyncCtx + 16 | 0; //@line 16730
  HEAP32[$148 >> 2] = $10; //@line 16731
  $149 = $ReallocAsyncCtx + 20 | 0; //@line 16732
  HEAP32[$149 >> 2] = $12; //@line 16733
  $150 = $ReallocAsyncCtx + 24 | 0; //@line 16734
  HEAP32[$150 >> 2] = $14; //@line 16735
  $151 = $ReallocAsyncCtx + 28 | 0; //@line 16736
  HEAP32[$151 >> 2] = $16; //@line 16737
  $152 = $ReallocAsyncCtx + 32 | 0; //@line 16738
  HEAP32[$152 >> 2] = $18; //@line 16739
  $153 = $ReallocAsyncCtx + 36 | 0; //@line 16740
  HEAP32[$153 >> 2] = $20; //@line 16741
  $154 = $ReallocAsyncCtx + 40 | 0; //@line 16742
  HEAP32[$154 >> 2] = $22; //@line 16743
  $155 = $ReallocAsyncCtx + 44 | 0; //@line 16744
  HEAP32[$155 >> 2] = $24; //@line 16745
  $156 = $ReallocAsyncCtx + 48 | 0; //@line 16746
  HEAP32[$156 >> 2] = $26; //@line 16747
  $157 = $ReallocAsyncCtx + 52 | 0; //@line 16748
  HEAP32[$157 >> 2] = $28; //@line 16749
  $158 = $ReallocAsyncCtx + 56 | 0; //@line 16750
  HEAP32[$158 >> 2] = $30; //@line 16751
  $159 = $ReallocAsyncCtx + 60 | 0; //@line 16752
  HEAP32[$159 >> 2] = $$0107$be; //@line 16753
  $160 = $ReallocAsyncCtx + 64 | 0; //@line 16754
  HEAP32[$160 >> 2] = $32; //@line 16755
  $161 = $ReallocAsyncCtx + 68 | 0; //@line 16756
  HEAP32[$161 >> 2] = $34; //@line 16757
  $162 = $ReallocAsyncCtx + 72 | 0; //@line 16758
  HEAP32[$162 >> 2] = $36; //@line 16759
  $163 = $ReallocAsyncCtx + 76 | 0; //@line 16760
  HEAP32[$163 >> 2] = $40; //@line 16761
  $164 = $ReallocAsyncCtx + 80 | 0; //@line 16762
  HEAP32[$164 >> 2] = $42; //@line 16763
  $165 = $ReallocAsyncCtx + 84 | 0; //@line 16764
  HEAP32[$165 >> 2] = $130; //@line 16765
  $166 = $ReallocAsyncCtx + 88 | 0; //@line 16766
  HEAP32[$166 >> 2] = $44; //@line 16767
  $167 = $ReallocAsyncCtx + 92 | 0; //@line 16768
  HEAP32[$167 >> 2] = $46; //@line 16769
  $168 = $ReallocAsyncCtx + 96 | 0; //@line 16770
  HEAP32[$168 >> 2] = $48; //@line 16771
  $169 = $ReallocAsyncCtx + 100 | 0; //@line 16772
  HEAP32[$169 >> 2] = $50; //@line 16773
  $170 = $ReallocAsyncCtx + 104 | 0; //@line 16774
  HEAP32[$170 >> 2] = $52; //@line 16775
  $171 = $ReallocAsyncCtx + 108 | 0; //@line 16776
  HEAP32[$171 >> 2] = $54; //@line 16777
  $172 = $ReallocAsyncCtx + 112 | 0; //@line 16778
  HEAP32[$172 >> 2] = $56; //@line 16779
  $173 = $ReallocAsyncCtx + 116 | 0; //@line 16780
  HEAP32[$173 >> 2] = $58; //@line 16781
  $174 = $ReallocAsyncCtx + 120 | 0; //@line 16782
  HEAP32[$174 >> 2] = $60; //@line 16783
  $175 = $ReallocAsyncCtx + 124 | 0; //@line 16784
  HEAP32[$175 >> 2] = $62; //@line 16785
  $176 = $ReallocAsyncCtx + 128 | 0; //@line 16786
  HEAP32[$176 >> 2] = $64; //@line 16787
  $177 = $ReallocAsyncCtx + 132 | 0; //@line 16788
  HEAP32[$177 >> 2] = $66; //@line 16789
  $178 = $ReallocAsyncCtx + 136 | 0; //@line 16790
  HEAP32[$178 >> 2] = $68; //@line 16791
  $179 = $ReallocAsyncCtx + 140 | 0; //@line 16792
  HEAP32[$179 >> 2] = $70; //@line 16793
  $180 = $ReallocAsyncCtx + 144 | 0; //@line 16794
  HEAP32[$180 >> 2] = $72; //@line 16795
  $181 = $ReallocAsyncCtx + 148 | 0; //@line 16796
  HEAP32[$181 >> 2] = $74; //@line 16797
  $182 = $ReallocAsyncCtx + 152 | 0; //@line 16798
  HEAP32[$182 >> 2] = $76; //@line 16799
  $183 = $ReallocAsyncCtx + 156 | 0; //@line 16800
  HEAP32[$183 >> 2] = $78; //@line 16801
  $184 = $ReallocAsyncCtx + 160 | 0; //@line 16802
  HEAP32[$184 >> 2] = $80; //@line 16803
  $185 = $ReallocAsyncCtx + 164 | 0; //@line 16804
  HEAP32[$185 >> 2] = $82; //@line 16805
  $186 = $ReallocAsyncCtx + 168 | 0; //@line 16806
  HEAP32[$186 >> 2] = $84; //@line 16807
  $187 = $ReallocAsyncCtx + 172 | 0; //@line 16808
  HEAP32[$187 >> 2] = $86; //@line 16809
  $188 = $ReallocAsyncCtx + 176 | 0; //@line 16810
  HEAP32[$188 >> 2] = $88; //@line 16811
  $189 = $ReallocAsyncCtx + 180 | 0; //@line 16812
  HEAP32[$189 >> 2] = $90; //@line 16813
  $190 = $ReallocAsyncCtx + 184 | 0; //@line 16814
  HEAP32[$190 >> 2] = $92; //@line 16815
  $191 = $ReallocAsyncCtx + 188 | 0; //@line 16816
  HEAP32[$191 >> 2] = $94; //@line 16817
  $192 = $ReallocAsyncCtx + 192 | 0; //@line 16818
  HEAP32[$192 >> 2] = $96; //@line 16819
  $193 = $ReallocAsyncCtx + 196 | 0; //@line 16820
  HEAP32[$193 >> 2] = $98; //@line 16821
  $194 = $ReallocAsyncCtx + 200 | 0; //@line 16822
  HEAP32[$194 >> 2] = $100; //@line 16823
  $195 = $ReallocAsyncCtx + 204 | 0; //@line 16824
  HEAP32[$195 >> 2] = $102; //@line 16825
  $196 = $ReallocAsyncCtx + 208 | 0; //@line 16826
  HEAP32[$196 >> 2] = $104; //@line 16827
  $197 = $ReallocAsyncCtx + 212 | 0; //@line 16828
  HEAP32[$197 >> 2] = $106; //@line 16829
  $198 = $ReallocAsyncCtx + 216 | 0; //@line 16830
  HEAP32[$198 >> 2] = $108; //@line 16831
  $199 = $ReallocAsyncCtx + 220 | 0; //@line 16832
  HEAP32[$199 >> 2] = $110; //@line 16833
  $200 = $ReallocAsyncCtx + 224 | 0; //@line 16834
  HEAP32[$200 >> 2] = $112; //@line 16835
  $201 = $ReallocAsyncCtx + 228 | 0; //@line 16836
  HEAP32[$201 >> 2] = $114; //@line 16837
  $202 = $ReallocAsyncCtx + 232 | 0; //@line 16838
  HEAP32[$202 >> 2] = $116; //@line 16839
  sp = STACKTOP; //@line 16840
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 16846
  HEAP8[$72 >> 0] = ($221 & 255) >>> 4 & 7; //@line 16851
  HEAP8[$60 >> 0] = $221 & 15; //@line 16853
  $240 = $$0$be + 5 << 24 >> 24; //@line 16867
  HEAP32[$62 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 16875
  $250 = HEAP32[(HEAP32[$88 >> 2] | 0) + 40 >> 2] | 0; //@line 16878
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 16879
  $251 = FUNCTION_TABLE_iii[$250 & 31]($28, $68) | 0; //@line 16880
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 16883
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 16884
   HEAP8[$252 >> 0] = $2; //@line 16885
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 16886
   HEAP32[$253 >> 2] = $4; //@line 16887
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 16888
   HEAP8[$254 >> 0] = $6; //@line 16889
   $255 = $ReallocAsyncCtx2 + 13 | 0; //@line 16890
   HEAP8[$255 >> 0] = $8; //@line 16891
   $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 16892
   HEAP32[$256 >> 2] = $10; //@line 16893
   $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 16894
   HEAP32[$257 >> 2] = $12; //@line 16895
   $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 16896
   HEAP32[$258 >> 2] = $14; //@line 16897
   $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 16898
   HEAP32[$259 >> 2] = $16; //@line 16899
   $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 16900
   HEAP32[$260 >> 2] = $18; //@line 16901
   $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 16902
   HEAP32[$261 >> 2] = $20; //@line 16903
   $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 16904
   HEAP32[$262 >> 2] = $22; //@line 16905
   $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 16906
   HEAP32[$263 >> 2] = $24; //@line 16907
   $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 16908
   HEAP32[$264 >> 2] = $26; //@line 16909
   $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 16910
   HEAP32[$265 >> 2] = $28; //@line 16911
   $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 16912
   HEAP32[$266 >> 2] = $30; //@line 16913
   $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 16914
   HEAP32[$267 >> 2] = $32; //@line 16915
   $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 16916
   HEAP32[$268 >> 2] = $34; //@line 16917
   $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 16918
   HEAP32[$269 >> 2] = $36; //@line 16919
   $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 16920
   HEAP8[$270 >> 0] = $240; //@line 16921
   $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 16922
   HEAP32[$271 >> 2] = $40; //@line 16923
   $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 16924
   HEAP32[$272 >> 2] = $42; //@line 16925
   $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 16926
   HEAP32[$273 >> 2] = $44; //@line 16927
   $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 16928
   HEAP32[$274 >> 2] = $46; //@line 16929
   $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 16930
   HEAP32[$275 >> 2] = $48; //@line 16931
   $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 16932
   HEAP32[$276 >> 2] = $50; //@line 16933
   $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 16934
   HEAP32[$277 >> 2] = $52; //@line 16935
   $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 16936
   HEAP32[$278 >> 2] = $54; //@line 16937
   $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 16938
   HEAP32[$279 >> 2] = $56; //@line 16939
   $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 16940
   HEAP32[$280 >> 2] = $58; //@line 16941
   $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 16942
   HEAP32[$281 >> 2] = $60; //@line 16943
   $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 16944
   HEAP32[$282 >> 2] = $62; //@line 16945
   $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 16946
   HEAP32[$283 >> 2] = $64; //@line 16947
   $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 16948
   HEAP32[$284 >> 2] = $66; //@line 16949
   $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 16950
   HEAP32[$285 >> 2] = $68; //@line 16951
   $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 16952
   HEAP32[$286 >> 2] = $70; //@line 16953
   $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 16954
   HEAP32[$287 >> 2] = $72; //@line 16955
   $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 16956
   HEAP32[$288 >> 2] = $74; //@line 16957
   $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 16958
   HEAP32[$289 >> 2] = $76; //@line 16959
   $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 16960
   HEAP32[$290 >> 2] = $78; //@line 16961
   $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 16962
   HEAP32[$291 >> 2] = $80; //@line 16963
   $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 16964
   HEAP32[$292 >> 2] = $82; //@line 16965
   $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 16966
   HEAP32[$293 >> 2] = $84; //@line 16967
   $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 16968
   HEAP32[$294 >> 2] = $86; //@line 16969
   $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 16970
   HEAP32[$295 >> 2] = $88; //@line 16971
   $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 16972
   HEAP32[$296 >> 2] = $90; //@line 16973
   $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 16974
   HEAP32[$297 >> 2] = $92; //@line 16975
   $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 16976
   HEAP32[$298 >> 2] = $94; //@line 16977
   $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 16978
   HEAP32[$299 >> 2] = $96; //@line 16979
   $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 16980
   HEAP32[$300 >> 2] = $98; //@line 16981
   $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 16982
   HEAP32[$301 >> 2] = $100; //@line 16983
   $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 16984
   HEAP32[$302 >> 2] = $102; //@line 16985
   $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 16986
   HEAP32[$303 >> 2] = $104; //@line 16987
   $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 16988
   HEAP32[$304 >> 2] = $106; //@line 16989
   $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 16990
   HEAP32[$305 >> 2] = $108; //@line 16991
   $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 16992
   HEAP32[$306 >> 2] = $110; //@line 16993
   $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 16994
   HEAP32[$307 >> 2] = $112; //@line 16995
   $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 16996
   HEAP32[$308 >> 2] = $114; //@line 16997
   $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 16998
   HEAP32[$309 >> 2] = $116; //@line 16999
   sp = STACKTOP; //@line 17000
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 17004
  ___async_unwind = 0; //@line 17005
  HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 17006
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 17007
  HEAP8[$252 >> 0] = $2; //@line 17008
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 17009
  HEAP32[$253 >> 2] = $4; //@line 17010
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 17011
  HEAP8[$254 >> 0] = $6; //@line 17012
  $255 = $ReallocAsyncCtx2 + 13 | 0; //@line 17013
  HEAP8[$255 >> 0] = $8; //@line 17014
  $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 17015
  HEAP32[$256 >> 2] = $10; //@line 17016
  $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 17017
  HEAP32[$257 >> 2] = $12; //@line 17018
  $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 17019
  HEAP32[$258 >> 2] = $14; //@line 17020
  $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 17021
  HEAP32[$259 >> 2] = $16; //@line 17022
  $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 17023
  HEAP32[$260 >> 2] = $18; //@line 17024
  $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 17025
  HEAP32[$261 >> 2] = $20; //@line 17026
  $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 17027
  HEAP32[$262 >> 2] = $22; //@line 17028
  $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 17029
  HEAP32[$263 >> 2] = $24; //@line 17030
  $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 17031
  HEAP32[$264 >> 2] = $26; //@line 17032
  $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 17033
  HEAP32[$265 >> 2] = $28; //@line 17034
  $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 17035
  HEAP32[$266 >> 2] = $30; //@line 17036
  $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 17037
  HEAP32[$267 >> 2] = $32; //@line 17038
  $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 17039
  HEAP32[$268 >> 2] = $34; //@line 17040
  $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 17041
  HEAP32[$269 >> 2] = $36; //@line 17042
  $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 17043
  HEAP8[$270 >> 0] = $240; //@line 17044
  $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 17045
  HEAP32[$271 >> 2] = $40; //@line 17046
  $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 17047
  HEAP32[$272 >> 2] = $42; //@line 17048
  $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 17049
  HEAP32[$273 >> 2] = $44; //@line 17050
  $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 17051
  HEAP32[$274 >> 2] = $46; //@line 17052
  $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 17053
  HEAP32[$275 >> 2] = $48; //@line 17054
  $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 17055
  HEAP32[$276 >> 2] = $50; //@line 17056
  $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 17057
  HEAP32[$277 >> 2] = $52; //@line 17058
  $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 17059
  HEAP32[$278 >> 2] = $54; //@line 17060
  $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 17061
  HEAP32[$279 >> 2] = $56; //@line 17062
  $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 17063
  HEAP32[$280 >> 2] = $58; //@line 17064
  $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 17065
  HEAP32[$281 >> 2] = $60; //@line 17066
  $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 17067
  HEAP32[$282 >> 2] = $62; //@line 17068
  $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 17069
  HEAP32[$283 >> 2] = $64; //@line 17070
  $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 17071
  HEAP32[$284 >> 2] = $66; //@line 17072
  $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 17073
  HEAP32[$285 >> 2] = $68; //@line 17074
  $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 17075
  HEAP32[$286 >> 2] = $70; //@line 17076
  $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 17077
  HEAP32[$287 >> 2] = $72; //@line 17078
  $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 17079
  HEAP32[$288 >> 2] = $74; //@line 17080
  $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 17081
  HEAP32[$289 >> 2] = $76; //@line 17082
  $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 17083
  HEAP32[$290 >> 2] = $78; //@line 17084
  $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 17085
  HEAP32[$291 >> 2] = $80; //@line 17086
  $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 17087
  HEAP32[$292 >> 2] = $82; //@line 17088
  $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 17089
  HEAP32[$293 >> 2] = $84; //@line 17090
  $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 17091
  HEAP32[$294 >> 2] = $86; //@line 17092
  $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 17093
  HEAP32[$295 >> 2] = $88; //@line 17094
  $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 17095
  HEAP32[$296 >> 2] = $90; //@line 17096
  $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 17097
  HEAP32[$297 >> 2] = $92; //@line 17098
  $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 17099
  HEAP32[$298 >> 2] = $94; //@line 17100
  $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 17101
  HEAP32[$299 >> 2] = $96; //@line 17102
  $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 17103
  HEAP32[$300 >> 2] = $98; //@line 17104
  $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 17105
  HEAP32[$301 >> 2] = $100; //@line 17106
  $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 17107
  HEAP32[$302 >> 2] = $102; //@line 17108
  $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 17109
  HEAP32[$303 >> 2] = $104; //@line 17110
  $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 17111
  HEAP32[$304 >> 2] = $106; //@line 17112
  $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 17113
  HEAP32[$305 >> 2] = $108; //@line 17114
  $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 17115
  HEAP32[$306 >> 2] = $110; //@line 17116
  $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 17117
  HEAP32[$307 >> 2] = $112; //@line 17118
  $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 17119
  HEAP32[$308 >> 2] = $114; //@line 17120
  $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 17121
  HEAP32[$309 >> 2] = $116; //@line 17122
  sp = STACKTOP; //@line 17123
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 17127
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 17128
  $314 = FUNCTION_TABLE_ii[$313 & 15]($26) | 0; //@line 17129
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 17132
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 17133
   HEAP8[$315 >> 0] = $2; //@line 17134
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 17135
   HEAP32[$316 >> 2] = $4; //@line 17136
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 17137
   HEAP8[$317 >> 0] = $6; //@line 17138
   $318 = $ReallocAsyncCtx3 + 13 | 0; //@line 17139
   HEAP8[$318 >> 0] = $8; //@line 17140
   $319 = $ReallocAsyncCtx3 + 16 | 0; //@line 17141
   HEAP32[$319 >> 2] = $10; //@line 17142
   $320 = $ReallocAsyncCtx3 + 20 | 0; //@line 17143
   HEAP32[$320 >> 2] = $12; //@line 17144
   $321 = $ReallocAsyncCtx3 + 24 | 0; //@line 17145
   HEAP32[$321 >> 2] = $14; //@line 17146
   $322 = $ReallocAsyncCtx3 + 28 | 0; //@line 17147
   HEAP32[$322 >> 2] = $16; //@line 17148
   $323 = $ReallocAsyncCtx3 + 32 | 0; //@line 17149
   HEAP32[$323 >> 2] = $18; //@line 17150
   $324 = $ReallocAsyncCtx3 + 36 | 0; //@line 17151
   HEAP32[$324 >> 2] = $20; //@line 17152
   $325 = $ReallocAsyncCtx3 + 40 | 0; //@line 17153
   HEAP32[$325 >> 2] = $22; //@line 17154
   $326 = $ReallocAsyncCtx3 + 44 | 0; //@line 17155
   HEAP32[$326 >> 2] = $24; //@line 17156
   $327 = $ReallocAsyncCtx3 + 48 | 0; //@line 17157
   HEAP32[$327 >> 2] = $26; //@line 17158
   $328 = $ReallocAsyncCtx3 + 52 | 0; //@line 17159
   HEAP32[$328 >> 2] = $28; //@line 17160
   $329 = $ReallocAsyncCtx3 + 56 | 0; //@line 17161
   HEAP32[$329 >> 2] = $30; //@line 17162
   $330 = $ReallocAsyncCtx3 + 60 | 0; //@line 17163
   HEAP32[$330 >> 2] = $32; //@line 17164
   $331 = $ReallocAsyncCtx3 + 64 | 0; //@line 17165
   HEAP32[$331 >> 2] = $34; //@line 17166
   $332 = $ReallocAsyncCtx3 + 68 | 0; //@line 17167
   HEAP32[$332 >> 2] = $36; //@line 17168
   $333 = $ReallocAsyncCtx3 + 72 | 0; //@line 17169
   HEAP32[$333 >> 2] = $40; //@line 17170
   $334 = $ReallocAsyncCtx3 + 76 | 0; //@line 17171
   HEAP32[$334 >> 2] = $42; //@line 17172
   $335 = $ReallocAsyncCtx3 + 80 | 0; //@line 17173
   HEAP32[$335 >> 2] = $44; //@line 17174
   $336 = $ReallocAsyncCtx3 + 84 | 0; //@line 17175
   HEAP32[$336 >> 2] = $46; //@line 17176
   $337 = $ReallocAsyncCtx3 + 88 | 0; //@line 17177
   HEAP32[$337 >> 2] = $48; //@line 17178
   $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 17179
   HEAP32[$338 >> 2] = $50; //@line 17180
   $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 17181
   HEAP32[$339 >> 2] = $52; //@line 17182
   $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 17183
   HEAP32[$340 >> 2] = $54; //@line 17184
   $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 17185
   HEAP8[$341 >> 0] = $119; //@line 17186
   $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 17187
   HEAP32[$342 >> 2] = $56; //@line 17188
   $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 17189
   HEAP32[$343 >> 2] = $58; //@line 17190
   $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 17191
   HEAP32[$344 >> 2] = $60; //@line 17192
   $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 17193
   HEAP32[$345 >> 2] = $62; //@line 17194
   $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 17195
   HEAP32[$346 >> 2] = $64; //@line 17196
   $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 17197
   HEAP32[$347 >> 2] = $66; //@line 17198
   $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 17199
   HEAP32[$348 >> 2] = $68; //@line 17200
   $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 17201
   HEAP32[$349 >> 2] = $70; //@line 17202
   $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 17203
   HEAP32[$350 >> 2] = $72; //@line 17204
   $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 17205
   HEAP32[$351 >> 2] = $74; //@line 17206
   $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 17207
   HEAP32[$352 >> 2] = $76; //@line 17208
   $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 17209
   HEAP32[$353 >> 2] = $78; //@line 17210
   $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 17211
   HEAP32[$354 >> 2] = $80; //@line 17212
   $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 17213
   HEAP32[$355 >> 2] = $82; //@line 17214
   $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 17215
   HEAP32[$356 >> 2] = $84; //@line 17216
   $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 17217
   HEAP32[$357 >> 2] = $86; //@line 17218
   $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 17219
   HEAP32[$358 >> 2] = $88; //@line 17220
   $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 17221
   HEAP32[$359 >> 2] = $90; //@line 17222
   $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 17223
   HEAP32[$360 >> 2] = $92; //@line 17224
   $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 17225
   HEAP32[$361 >> 2] = $94; //@line 17226
   $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 17227
   HEAP32[$362 >> 2] = $96; //@line 17228
   $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 17229
   HEAP32[$363 >> 2] = $98; //@line 17230
   $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 17231
   HEAP32[$364 >> 2] = $100; //@line 17232
   $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 17233
   HEAP32[$365 >> 2] = $102; //@line 17234
   $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 17235
   HEAP32[$366 >> 2] = $104; //@line 17236
   $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 17237
   HEAP32[$367 >> 2] = $106; //@line 17238
   $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 17239
   HEAP32[$368 >> 2] = $108; //@line 17240
   $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 17241
   HEAP32[$369 >> 2] = $110; //@line 17242
   $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 17243
   HEAP32[$370 >> 2] = $112; //@line 17244
   $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 17245
   HEAP32[$371 >> 2] = $114; //@line 17246
   $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 17247
   HEAP32[$372 >> 2] = $116; //@line 17248
   sp = STACKTOP; //@line 17249
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 17253
  ___async_unwind = 0; //@line 17254
  HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 17255
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 17256
  HEAP8[$315 >> 0] = $2; //@line 17257
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 17258
  HEAP32[$316 >> 2] = $4; //@line 17259
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 17260
  HEAP8[$317 >> 0] = $6; //@line 17261
  $318 = $ReallocAsyncCtx3 + 13 | 0; //@line 17262
  HEAP8[$318 >> 0] = $8; //@line 17263
  $319 = $ReallocAsyncCtx3 + 16 | 0; //@line 17264
  HEAP32[$319 >> 2] = $10; //@line 17265
  $320 = $ReallocAsyncCtx3 + 20 | 0; //@line 17266
  HEAP32[$320 >> 2] = $12; //@line 17267
  $321 = $ReallocAsyncCtx3 + 24 | 0; //@line 17268
  HEAP32[$321 >> 2] = $14; //@line 17269
  $322 = $ReallocAsyncCtx3 + 28 | 0; //@line 17270
  HEAP32[$322 >> 2] = $16; //@line 17271
  $323 = $ReallocAsyncCtx3 + 32 | 0; //@line 17272
  HEAP32[$323 >> 2] = $18; //@line 17273
  $324 = $ReallocAsyncCtx3 + 36 | 0; //@line 17274
  HEAP32[$324 >> 2] = $20; //@line 17275
  $325 = $ReallocAsyncCtx3 + 40 | 0; //@line 17276
  HEAP32[$325 >> 2] = $22; //@line 17277
  $326 = $ReallocAsyncCtx3 + 44 | 0; //@line 17278
  HEAP32[$326 >> 2] = $24; //@line 17279
  $327 = $ReallocAsyncCtx3 + 48 | 0; //@line 17280
  HEAP32[$327 >> 2] = $26; //@line 17281
  $328 = $ReallocAsyncCtx3 + 52 | 0; //@line 17282
  HEAP32[$328 >> 2] = $28; //@line 17283
  $329 = $ReallocAsyncCtx3 + 56 | 0; //@line 17284
  HEAP32[$329 >> 2] = $30; //@line 17285
  $330 = $ReallocAsyncCtx3 + 60 | 0; //@line 17286
  HEAP32[$330 >> 2] = $32; //@line 17287
  $331 = $ReallocAsyncCtx3 + 64 | 0; //@line 17288
  HEAP32[$331 >> 2] = $34; //@line 17289
  $332 = $ReallocAsyncCtx3 + 68 | 0; //@line 17290
  HEAP32[$332 >> 2] = $36; //@line 17291
  $333 = $ReallocAsyncCtx3 + 72 | 0; //@line 17292
  HEAP32[$333 >> 2] = $40; //@line 17293
  $334 = $ReallocAsyncCtx3 + 76 | 0; //@line 17294
  HEAP32[$334 >> 2] = $42; //@line 17295
  $335 = $ReallocAsyncCtx3 + 80 | 0; //@line 17296
  HEAP32[$335 >> 2] = $44; //@line 17297
  $336 = $ReallocAsyncCtx3 + 84 | 0; //@line 17298
  HEAP32[$336 >> 2] = $46; //@line 17299
  $337 = $ReallocAsyncCtx3 + 88 | 0; //@line 17300
  HEAP32[$337 >> 2] = $48; //@line 17301
  $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 17302
  HEAP32[$338 >> 2] = $50; //@line 17303
  $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 17304
  HEAP32[$339 >> 2] = $52; //@line 17305
  $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 17306
  HEAP32[$340 >> 2] = $54; //@line 17307
  $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 17308
  HEAP8[$341 >> 0] = $119; //@line 17309
  $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 17310
  HEAP32[$342 >> 2] = $56; //@line 17311
  $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 17312
  HEAP32[$343 >> 2] = $58; //@line 17313
  $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 17314
  HEAP32[$344 >> 2] = $60; //@line 17315
  $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 17316
  HEAP32[$345 >> 2] = $62; //@line 17317
  $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 17318
  HEAP32[$346 >> 2] = $64; //@line 17319
  $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 17320
  HEAP32[$347 >> 2] = $66; //@line 17321
  $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 17322
  HEAP32[$348 >> 2] = $68; //@line 17323
  $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 17324
  HEAP32[$349 >> 2] = $70; //@line 17325
  $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 17326
  HEAP32[$350 >> 2] = $72; //@line 17327
  $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 17328
  HEAP32[$351 >> 2] = $74; //@line 17329
  $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 17330
  HEAP32[$352 >> 2] = $76; //@line 17331
  $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 17332
  HEAP32[$353 >> 2] = $78; //@line 17333
  $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 17334
  HEAP32[$354 >> 2] = $80; //@line 17335
  $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 17336
  HEAP32[$355 >> 2] = $82; //@line 17337
  $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 17338
  HEAP32[$356 >> 2] = $84; //@line 17339
  $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 17340
  HEAP32[$357 >> 2] = $86; //@line 17341
  $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 17342
  HEAP32[$358 >> 2] = $88; //@line 17343
  $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 17344
  HEAP32[$359 >> 2] = $90; //@line 17345
  $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 17346
  HEAP32[$360 >> 2] = $92; //@line 17347
  $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 17348
  HEAP32[$361 >> 2] = $94; //@line 17349
  $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 17350
  HEAP32[$362 >> 2] = $96; //@line 17351
  $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 17352
  HEAP32[$363 >> 2] = $98; //@line 17353
  $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 17354
  HEAP32[$364 >> 2] = $100; //@line 17355
  $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 17356
  HEAP32[$365 >> 2] = $102; //@line 17357
  $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 17358
  HEAP32[$366 >> 2] = $104; //@line 17359
  $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 17360
  HEAP32[$367 >> 2] = $106; //@line 17361
  $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 17362
  HEAP32[$368 >> 2] = $108; //@line 17363
  $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 17364
  HEAP32[$369 >> 2] = $110; //@line 17365
  $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 17366
  HEAP32[$370 >> 2] = $112; //@line 17367
  $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 17368
  HEAP32[$371 >> 2] = $114; //@line 17369
  $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 17370
  HEAP32[$372 >> 2] = $116; //@line 17371
  sp = STACKTOP; //@line 17372
  return;
 } else if ((label | 0) == 18) {
  $392 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 17379
  HEAP32[$40 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 17400
  HEAP32[$56 >> 2] = 0; //@line 17401
  $413 = $$0$be + 6 << 24 >> 24; //@line 17402
  HEAP8[$46 >> 0] = HEAP8[$14 + ($$0$be + 5 & 255) >> 0] | 0; //@line 17406
  $419 = HEAP32[(HEAP32[$82 >> 2] | 0) + 8 >> 2] | 0; //@line 17409
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 17410
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($28, $392, $78) | 0; //@line 17411
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 17414
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 17415
   HEAP8[$421 >> 0] = $2; //@line 17416
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 17417
   HEAP32[$422 >> 2] = $4; //@line 17418
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 17419
   HEAP8[$423 >> 0] = $6; //@line 17420
   $424 = $ReallocAsyncCtx4 + 13 | 0; //@line 17421
   HEAP8[$424 >> 0] = $8; //@line 17422
   $425 = $ReallocAsyncCtx4 + 16 | 0; //@line 17423
   HEAP32[$425 >> 2] = $10; //@line 17424
   $426 = $ReallocAsyncCtx4 + 20 | 0; //@line 17425
   HEAP32[$426 >> 2] = $12; //@line 17426
   $427 = $ReallocAsyncCtx4 + 24 | 0; //@line 17427
   HEAP32[$427 >> 2] = $14; //@line 17428
   $428 = $ReallocAsyncCtx4 + 28 | 0; //@line 17429
   HEAP32[$428 >> 2] = $16; //@line 17430
   $429 = $ReallocAsyncCtx4 + 32 | 0; //@line 17431
   HEAP32[$429 >> 2] = $18; //@line 17432
   $430 = $ReallocAsyncCtx4 + 36 | 0; //@line 17433
   HEAP32[$430 >> 2] = $20; //@line 17434
   $431 = $ReallocAsyncCtx4 + 40 | 0; //@line 17435
   HEAP32[$431 >> 2] = $22; //@line 17436
   $432 = $ReallocAsyncCtx4 + 44 | 0; //@line 17437
   HEAP32[$432 >> 2] = $24; //@line 17438
   $433 = $ReallocAsyncCtx4 + 48 | 0; //@line 17439
   HEAP32[$433 >> 2] = $26; //@line 17440
   $434 = $ReallocAsyncCtx4 + 52 | 0; //@line 17441
   HEAP32[$434 >> 2] = $28; //@line 17442
   $435 = $ReallocAsyncCtx4 + 56 | 0; //@line 17443
   HEAP32[$435 >> 2] = $30; //@line 17444
   $436 = $ReallocAsyncCtx4 + 60 | 0; //@line 17445
   HEAP32[$436 >> 2] = $32; //@line 17446
   $437 = $ReallocAsyncCtx4 + 64 | 0; //@line 17447
   HEAP32[$437 >> 2] = $34; //@line 17448
   $438 = $ReallocAsyncCtx4 + 68 | 0; //@line 17449
   HEAP32[$438 >> 2] = $36; //@line 17450
   $439 = $ReallocAsyncCtx4 + 72 | 0; //@line 17451
   HEAP8[$439 >> 0] = $413; //@line 17452
   $440 = $ReallocAsyncCtx4 + 76 | 0; //@line 17453
   HEAP32[$440 >> 2] = $40; //@line 17454
   $441 = $ReallocAsyncCtx4 + 80 | 0; //@line 17455
   HEAP32[$441 >> 2] = $42; //@line 17456
   $442 = $ReallocAsyncCtx4 + 84 | 0; //@line 17457
   HEAP32[$442 >> 2] = $44; //@line 17458
   $443 = $ReallocAsyncCtx4 + 88 | 0; //@line 17459
   HEAP32[$443 >> 2] = $46; //@line 17460
   $444 = $ReallocAsyncCtx4 + 92 | 0; //@line 17461
   HEAP32[$444 >> 2] = $48; //@line 17462
   $445 = $ReallocAsyncCtx4 + 96 | 0; //@line 17463
   HEAP32[$445 >> 2] = $50; //@line 17464
   $446 = $ReallocAsyncCtx4 + 100 | 0; //@line 17465
   HEAP32[$446 >> 2] = $52; //@line 17466
   $447 = $ReallocAsyncCtx4 + 104 | 0; //@line 17467
   HEAP32[$447 >> 2] = $54; //@line 17468
   $448 = $ReallocAsyncCtx4 + 108 | 0; //@line 17469
   HEAP32[$448 >> 2] = $56; //@line 17470
   $449 = $ReallocAsyncCtx4 + 112 | 0; //@line 17471
   HEAP32[$449 >> 2] = $58; //@line 17472
   $450 = $ReallocAsyncCtx4 + 116 | 0; //@line 17473
   HEAP32[$450 >> 2] = $60; //@line 17474
   $451 = $ReallocAsyncCtx4 + 120 | 0; //@line 17475
   HEAP32[$451 >> 2] = $62; //@line 17476
   $452 = $ReallocAsyncCtx4 + 124 | 0; //@line 17477
   HEAP32[$452 >> 2] = $64; //@line 17478
   $453 = $ReallocAsyncCtx4 + 128 | 0; //@line 17479
   HEAP32[$453 >> 2] = $66; //@line 17480
   $454 = $ReallocAsyncCtx4 + 132 | 0; //@line 17481
   HEAP32[$454 >> 2] = $68; //@line 17482
   $455 = $ReallocAsyncCtx4 + 136 | 0; //@line 17483
   HEAP32[$455 >> 2] = $70; //@line 17484
   $456 = $ReallocAsyncCtx4 + 140 | 0; //@line 17485
   HEAP32[$456 >> 2] = $72; //@line 17486
   $457 = $ReallocAsyncCtx4 + 144 | 0; //@line 17487
   HEAP32[$457 >> 2] = $74; //@line 17488
   $458 = $ReallocAsyncCtx4 + 148 | 0; //@line 17489
   HEAP32[$458 >> 2] = $76; //@line 17490
   $459 = $ReallocAsyncCtx4 + 152 | 0; //@line 17491
   HEAP32[$459 >> 2] = $78; //@line 17492
   $460 = $ReallocAsyncCtx4 + 156 | 0; //@line 17493
   HEAP32[$460 >> 2] = $80; //@line 17494
   $461 = $ReallocAsyncCtx4 + 160 | 0; //@line 17495
   HEAP32[$461 >> 2] = $82; //@line 17496
   $462 = $ReallocAsyncCtx4 + 164 | 0; //@line 17497
   HEAP32[$462 >> 2] = $84; //@line 17498
   $463 = $ReallocAsyncCtx4 + 168 | 0; //@line 17499
   HEAP32[$463 >> 2] = $86; //@line 17500
   $464 = $ReallocAsyncCtx4 + 172 | 0; //@line 17501
   HEAP32[$464 >> 2] = $88; //@line 17502
   $465 = $ReallocAsyncCtx4 + 176 | 0; //@line 17503
   HEAP32[$465 >> 2] = $90; //@line 17504
   $466 = $ReallocAsyncCtx4 + 180 | 0; //@line 17505
   HEAP32[$466 >> 2] = $92; //@line 17506
   $467 = $ReallocAsyncCtx4 + 184 | 0; //@line 17507
   HEAP32[$467 >> 2] = $94; //@line 17508
   $468 = $ReallocAsyncCtx4 + 188 | 0; //@line 17509
   HEAP32[$468 >> 2] = $96; //@line 17510
   $469 = $ReallocAsyncCtx4 + 192 | 0; //@line 17511
   HEAP32[$469 >> 2] = $98; //@line 17512
   $470 = $ReallocAsyncCtx4 + 196 | 0; //@line 17513
   HEAP32[$470 >> 2] = $100; //@line 17514
   $471 = $ReallocAsyncCtx4 + 200 | 0; //@line 17515
   HEAP32[$471 >> 2] = $102; //@line 17516
   $472 = $ReallocAsyncCtx4 + 204 | 0; //@line 17517
   HEAP32[$472 >> 2] = $104; //@line 17518
   $473 = $ReallocAsyncCtx4 + 208 | 0; //@line 17519
   HEAP32[$473 >> 2] = $106; //@line 17520
   $474 = $ReallocAsyncCtx4 + 212 | 0; //@line 17521
   HEAP32[$474 >> 2] = $108; //@line 17522
   $475 = $ReallocAsyncCtx4 + 216 | 0; //@line 17523
   HEAP32[$475 >> 2] = $110; //@line 17524
   $476 = $ReallocAsyncCtx4 + 220 | 0; //@line 17525
   HEAP32[$476 >> 2] = $112; //@line 17526
   $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 17527
   HEAP32[$477 >> 2] = $114; //@line 17528
   $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 17529
   HEAP32[$478 >> 2] = $116; //@line 17530
   sp = STACKTOP; //@line 17531
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 17535
  ___async_unwind = 0; //@line 17536
  HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 17537
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 17538
  HEAP8[$421 >> 0] = $2; //@line 17539
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 17540
  HEAP32[$422 >> 2] = $4; //@line 17541
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 17542
  HEAP8[$423 >> 0] = $6; //@line 17543
  $424 = $ReallocAsyncCtx4 + 13 | 0; //@line 17544
  HEAP8[$424 >> 0] = $8; //@line 17545
  $425 = $ReallocAsyncCtx4 + 16 | 0; //@line 17546
  HEAP32[$425 >> 2] = $10; //@line 17547
  $426 = $ReallocAsyncCtx4 + 20 | 0; //@line 17548
  HEAP32[$426 >> 2] = $12; //@line 17549
  $427 = $ReallocAsyncCtx4 + 24 | 0; //@line 17550
  HEAP32[$427 >> 2] = $14; //@line 17551
  $428 = $ReallocAsyncCtx4 + 28 | 0; //@line 17552
  HEAP32[$428 >> 2] = $16; //@line 17553
  $429 = $ReallocAsyncCtx4 + 32 | 0; //@line 17554
  HEAP32[$429 >> 2] = $18; //@line 17555
  $430 = $ReallocAsyncCtx4 + 36 | 0; //@line 17556
  HEAP32[$430 >> 2] = $20; //@line 17557
  $431 = $ReallocAsyncCtx4 + 40 | 0; //@line 17558
  HEAP32[$431 >> 2] = $22; //@line 17559
  $432 = $ReallocAsyncCtx4 + 44 | 0; //@line 17560
  HEAP32[$432 >> 2] = $24; //@line 17561
  $433 = $ReallocAsyncCtx4 + 48 | 0; //@line 17562
  HEAP32[$433 >> 2] = $26; //@line 17563
  $434 = $ReallocAsyncCtx4 + 52 | 0; //@line 17564
  HEAP32[$434 >> 2] = $28; //@line 17565
  $435 = $ReallocAsyncCtx4 + 56 | 0; //@line 17566
  HEAP32[$435 >> 2] = $30; //@line 17567
  $436 = $ReallocAsyncCtx4 + 60 | 0; //@line 17568
  HEAP32[$436 >> 2] = $32; //@line 17569
  $437 = $ReallocAsyncCtx4 + 64 | 0; //@line 17570
  HEAP32[$437 >> 2] = $34; //@line 17571
  $438 = $ReallocAsyncCtx4 + 68 | 0; //@line 17572
  HEAP32[$438 >> 2] = $36; //@line 17573
  $439 = $ReallocAsyncCtx4 + 72 | 0; //@line 17574
  HEAP8[$439 >> 0] = $413; //@line 17575
  $440 = $ReallocAsyncCtx4 + 76 | 0; //@line 17576
  HEAP32[$440 >> 2] = $40; //@line 17577
  $441 = $ReallocAsyncCtx4 + 80 | 0; //@line 17578
  HEAP32[$441 >> 2] = $42; //@line 17579
  $442 = $ReallocAsyncCtx4 + 84 | 0; //@line 17580
  HEAP32[$442 >> 2] = $44; //@line 17581
  $443 = $ReallocAsyncCtx4 + 88 | 0; //@line 17582
  HEAP32[$443 >> 2] = $46; //@line 17583
  $444 = $ReallocAsyncCtx4 + 92 | 0; //@line 17584
  HEAP32[$444 >> 2] = $48; //@line 17585
  $445 = $ReallocAsyncCtx4 + 96 | 0; //@line 17586
  HEAP32[$445 >> 2] = $50; //@line 17587
  $446 = $ReallocAsyncCtx4 + 100 | 0; //@line 17588
  HEAP32[$446 >> 2] = $52; //@line 17589
  $447 = $ReallocAsyncCtx4 + 104 | 0; //@line 17590
  HEAP32[$447 >> 2] = $54; //@line 17591
  $448 = $ReallocAsyncCtx4 + 108 | 0; //@line 17592
  HEAP32[$448 >> 2] = $56; //@line 17593
  $449 = $ReallocAsyncCtx4 + 112 | 0; //@line 17594
  HEAP32[$449 >> 2] = $58; //@line 17595
  $450 = $ReallocAsyncCtx4 + 116 | 0; //@line 17596
  HEAP32[$450 >> 2] = $60; //@line 17597
  $451 = $ReallocAsyncCtx4 + 120 | 0; //@line 17598
  HEAP32[$451 >> 2] = $62; //@line 17599
  $452 = $ReallocAsyncCtx4 + 124 | 0; //@line 17600
  HEAP32[$452 >> 2] = $64; //@line 17601
  $453 = $ReallocAsyncCtx4 + 128 | 0; //@line 17602
  HEAP32[$453 >> 2] = $66; //@line 17603
  $454 = $ReallocAsyncCtx4 + 132 | 0; //@line 17604
  HEAP32[$454 >> 2] = $68; //@line 17605
  $455 = $ReallocAsyncCtx4 + 136 | 0; //@line 17606
  HEAP32[$455 >> 2] = $70; //@line 17607
  $456 = $ReallocAsyncCtx4 + 140 | 0; //@line 17608
  HEAP32[$456 >> 2] = $72; //@line 17609
  $457 = $ReallocAsyncCtx4 + 144 | 0; //@line 17610
  HEAP32[$457 >> 2] = $74; //@line 17611
  $458 = $ReallocAsyncCtx4 + 148 | 0; //@line 17612
  HEAP32[$458 >> 2] = $76; //@line 17613
  $459 = $ReallocAsyncCtx4 + 152 | 0; //@line 17614
  HEAP32[$459 >> 2] = $78; //@line 17615
  $460 = $ReallocAsyncCtx4 + 156 | 0; //@line 17616
  HEAP32[$460 >> 2] = $80; //@line 17617
  $461 = $ReallocAsyncCtx4 + 160 | 0; //@line 17618
  HEAP32[$461 >> 2] = $82; //@line 17619
  $462 = $ReallocAsyncCtx4 + 164 | 0; //@line 17620
  HEAP32[$462 >> 2] = $84; //@line 17621
  $463 = $ReallocAsyncCtx4 + 168 | 0; //@line 17622
  HEAP32[$463 >> 2] = $86; //@line 17623
  $464 = $ReallocAsyncCtx4 + 172 | 0; //@line 17624
  HEAP32[$464 >> 2] = $88; //@line 17625
  $465 = $ReallocAsyncCtx4 + 176 | 0; //@line 17626
  HEAP32[$465 >> 2] = $90; //@line 17627
  $466 = $ReallocAsyncCtx4 + 180 | 0; //@line 17628
  HEAP32[$466 >> 2] = $92; //@line 17629
  $467 = $ReallocAsyncCtx4 + 184 | 0; //@line 17630
  HEAP32[$467 >> 2] = $94; //@line 17631
  $468 = $ReallocAsyncCtx4 + 188 | 0; //@line 17632
  HEAP32[$468 >> 2] = $96; //@line 17633
  $469 = $ReallocAsyncCtx4 + 192 | 0; //@line 17634
  HEAP32[$469 >> 2] = $98; //@line 17635
  $470 = $ReallocAsyncCtx4 + 196 | 0; //@line 17636
  HEAP32[$470 >> 2] = $100; //@line 17637
  $471 = $ReallocAsyncCtx4 + 200 | 0; //@line 17638
  HEAP32[$471 >> 2] = $102; //@line 17639
  $472 = $ReallocAsyncCtx4 + 204 | 0; //@line 17640
  HEAP32[$472 >> 2] = $104; //@line 17641
  $473 = $ReallocAsyncCtx4 + 208 | 0; //@line 17642
  HEAP32[$473 >> 2] = $106; //@line 17643
  $474 = $ReallocAsyncCtx4 + 212 | 0; //@line 17644
  HEAP32[$474 >> 2] = $108; //@line 17645
  $475 = $ReallocAsyncCtx4 + 216 | 0; //@line 17646
  HEAP32[$475 >> 2] = $110; //@line 17647
  $476 = $ReallocAsyncCtx4 + 220 | 0; //@line 17648
  HEAP32[$476 >> 2] = $112; //@line 17649
  $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 17650
  HEAP32[$477 >> 2] = $114; //@line 17651
  $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 17652
  HEAP32[$478 >> 2] = $116; //@line 17653
  sp = STACKTOP; //@line 17654
  return;
 } else if ((label | 0) == 27) {
  $511 = $$0$be + 2 << 24 >> 24; //@line 17658
  $515 = HEAPU8[$14 + ($119 & 255) >> 0] | 0; //@line 17662
  $517 = $515 >>> 5 & 1; //@line 17665
  $519 = $515 >>> 4 & 1; //@line 17668
  $522 = HEAP32[(HEAP32[$76 >> 2] | 0) + 44 >> 2] | 0; //@line 17671
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 17672
  $523 = FUNCTION_TABLE_iiii[$522 & 31]($28, $519, $517) | 0; //@line 17673
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 17676
   $524 = $ReallocAsyncCtx5 + 4 | 0; //@line 17677
   HEAP8[$524 >> 0] = $2; //@line 17678
   $525 = $ReallocAsyncCtx5 + 8 | 0; //@line 17679
   HEAP32[$525 >> 2] = $4; //@line 17680
   $526 = $ReallocAsyncCtx5 + 12 | 0; //@line 17681
   HEAP8[$526 >> 0] = $6; //@line 17682
   $527 = $ReallocAsyncCtx5 + 13 | 0; //@line 17683
   HEAP8[$527 >> 0] = $8; //@line 17684
   $528 = $ReallocAsyncCtx5 + 16 | 0; //@line 17685
   HEAP32[$528 >> 2] = $10; //@line 17686
   $529 = $ReallocAsyncCtx5 + 20 | 0; //@line 17687
   HEAP32[$529 >> 2] = $12; //@line 17688
   $530 = $ReallocAsyncCtx5 + 24 | 0; //@line 17689
   HEAP32[$530 >> 2] = $14; //@line 17690
   $531 = $ReallocAsyncCtx5 + 28 | 0; //@line 17691
   HEAP8[$531 >> 0] = $517; //@line 17692
   $532 = $ReallocAsyncCtx5 + 32 | 0; //@line 17693
   HEAP32[$532 >> 2] = $16; //@line 17694
   $533 = $ReallocAsyncCtx5 + 36 | 0; //@line 17695
   HEAP32[$533 >> 2] = $18; //@line 17696
   $534 = $ReallocAsyncCtx5 + 40 | 0; //@line 17697
   HEAP32[$534 >> 2] = $20; //@line 17698
   $535 = $ReallocAsyncCtx5 + 44 | 0; //@line 17699
   HEAP32[$535 >> 2] = $22; //@line 17700
   $536 = $ReallocAsyncCtx5 + 48 | 0; //@line 17701
   HEAP32[$536 >> 2] = $24; //@line 17702
   $537 = $ReallocAsyncCtx5 + 52 | 0; //@line 17703
   HEAP32[$537 >> 2] = $26; //@line 17704
   $538 = $ReallocAsyncCtx5 + 56 | 0; //@line 17705
   HEAP32[$538 >> 2] = $28; //@line 17706
   $539 = $ReallocAsyncCtx5 + 60 | 0; //@line 17707
   HEAP32[$539 >> 2] = $$0107$be; //@line 17708
   $540 = $ReallocAsyncCtx5 + 64 | 0; //@line 17709
   HEAP32[$540 >> 2] = $30; //@line 17710
   $541 = $ReallocAsyncCtx5 + 68 | 0; //@line 17711
   HEAP32[$541 >> 2] = $32; //@line 17712
   $542 = $ReallocAsyncCtx5 + 72 | 0; //@line 17713
   HEAP32[$542 >> 2] = $34; //@line 17714
   $543 = $ReallocAsyncCtx5 + 76 | 0; //@line 17715
   HEAP32[$543 >> 2] = $36; //@line 17716
   $544 = $ReallocAsyncCtx5 + 80 | 0; //@line 17717
   HEAP32[$544 >> 2] = $40; //@line 17718
   $545 = $ReallocAsyncCtx5 + 84 | 0; //@line 17719
   HEAP8[$545 >> 0] = $511; //@line 17720
   $546 = $ReallocAsyncCtx5 + 88 | 0; //@line 17721
   HEAP32[$546 >> 2] = $42; //@line 17722
   $547 = $ReallocAsyncCtx5 + 92 | 0; //@line 17723
   HEAP32[$547 >> 2] = $44; //@line 17724
   $548 = $ReallocAsyncCtx5 + 96 | 0; //@line 17725
   HEAP32[$548 >> 2] = $46; //@line 17726
   $549 = $ReallocAsyncCtx5 + 100 | 0; //@line 17727
   HEAP32[$549 >> 2] = $48; //@line 17728
   $550 = $ReallocAsyncCtx5 + 104 | 0; //@line 17729
   HEAP32[$550 >> 2] = $50; //@line 17730
   $551 = $ReallocAsyncCtx5 + 108 | 0; //@line 17731
   HEAP32[$551 >> 2] = $52; //@line 17732
   $552 = $ReallocAsyncCtx5 + 112 | 0; //@line 17733
   HEAP32[$552 >> 2] = $54; //@line 17734
   $553 = $ReallocAsyncCtx5 + 116 | 0; //@line 17735
   HEAP32[$553 >> 2] = $56; //@line 17736
   $554 = $ReallocAsyncCtx5 + 120 | 0; //@line 17737
   HEAP32[$554 >> 2] = $58; //@line 17738
   $555 = $ReallocAsyncCtx5 + 124 | 0; //@line 17739
   HEAP32[$555 >> 2] = $60; //@line 17740
   $556 = $ReallocAsyncCtx5 + 128 | 0; //@line 17741
   HEAP32[$556 >> 2] = $62; //@line 17742
   $557 = $ReallocAsyncCtx5 + 132 | 0; //@line 17743
   HEAP32[$557 >> 2] = $64; //@line 17744
   $558 = $ReallocAsyncCtx5 + 136 | 0; //@line 17745
   HEAP32[$558 >> 2] = $66; //@line 17746
   $559 = $ReallocAsyncCtx5 + 140 | 0; //@line 17747
   HEAP32[$559 >> 2] = $68; //@line 17748
   $560 = $ReallocAsyncCtx5 + 144 | 0; //@line 17749
   HEAP32[$560 >> 2] = $70; //@line 17750
   $561 = $ReallocAsyncCtx5 + 148 | 0; //@line 17751
   HEAP32[$561 >> 2] = $72; //@line 17752
   $562 = $ReallocAsyncCtx5 + 152 | 0; //@line 17753
   HEAP32[$562 >> 2] = $74; //@line 17754
   $563 = $ReallocAsyncCtx5 + 156 | 0; //@line 17755
   HEAP32[$563 >> 2] = $76; //@line 17756
   $564 = $ReallocAsyncCtx5 + 160 | 0; //@line 17757
   HEAP32[$564 >> 2] = $78; //@line 17758
   $565 = $ReallocAsyncCtx5 + 164 | 0; //@line 17759
   HEAP32[$565 >> 2] = $80; //@line 17760
   $566 = $ReallocAsyncCtx5 + 168 | 0; //@line 17761
   HEAP32[$566 >> 2] = $82; //@line 17762
   $567 = $ReallocAsyncCtx5 + 172 | 0; //@line 17763
   HEAP32[$567 >> 2] = $84; //@line 17764
   $568 = $ReallocAsyncCtx5 + 176 | 0; //@line 17765
   HEAP32[$568 >> 2] = $86; //@line 17766
   $569 = $ReallocAsyncCtx5 + 180 | 0; //@line 17767
   HEAP32[$569 >> 2] = $88; //@line 17768
   $570 = $ReallocAsyncCtx5 + 184 | 0; //@line 17769
   HEAP32[$570 >> 2] = $90; //@line 17770
   $571 = $ReallocAsyncCtx5 + 188 | 0; //@line 17771
   HEAP8[$571 >> 0] = $519; //@line 17772
   $572 = $ReallocAsyncCtx5 + 192 | 0; //@line 17773
   HEAP32[$572 >> 2] = $92; //@line 17774
   $573 = $ReallocAsyncCtx5 + 196 | 0; //@line 17775
   HEAP32[$573 >> 2] = $94; //@line 17776
   $574 = $ReallocAsyncCtx5 + 200 | 0; //@line 17777
   HEAP32[$574 >> 2] = $96; //@line 17778
   $575 = $ReallocAsyncCtx5 + 204 | 0; //@line 17779
   HEAP32[$575 >> 2] = $98; //@line 17780
   $576 = $ReallocAsyncCtx5 + 208 | 0; //@line 17781
   HEAP32[$576 >> 2] = $100; //@line 17782
   $577 = $ReallocAsyncCtx5 + 212 | 0; //@line 17783
   HEAP32[$577 >> 2] = $102; //@line 17784
   $578 = $ReallocAsyncCtx5 + 216 | 0; //@line 17785
   HEAP32[$578 >> 2] = $515; //@line 17786
   $579 = $ReallocAsyncCtx5 + 220 | 0; //@line 17787
   HEAP32[$579 >> 2] = $104; //@line 17788
   $580 = $ReallocAsyncCtx5 + 224 | 0; //@line 17789
   HEAP32[$580 >> 2] = $106; //@line 17790
   $581 = $ReallocAsyncCtx5 + 228 | 0; //@line 17791
   HEAP32[$581 >> 2] = $108; //@line 17792
   $582 = $ReallocAsyncCtx5 + 232 | 0; //@line 17793
   HEAP32[$582 >> 2] = $110; //@line 17794
   $583 = $ReallocAsyncCtx5 + 236 | 0; //@line 17795
   HEAP32[$583 >> 2] = $112; //@line 17796
   $584 = $ReallocAsyncCtx5 + 240 | 0; //@line 17797
   HEAP32[$584 >> 2] = $114; //@line 17798
   $585 = $ReallocAsyncCtx5 + 244 | 0; //@line 17799
   HEAP32[$585 >> 2] = $116; //@line 17800
   sp = STACKTOP; //@line 17801
   return;
  }
  HEAP8[___async_retval >> 0] = $523 & 1; //@line 17806
  ___async_unwind = 0; //@line 17807
  HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 17808
  $524 = $ReallocAsyncCtx5 + 4 | 0; //@line 17809
  HEAP8[$524 >> 0] = $2; //@line 17810
  $525 = $ReallocAsyncCtx5 + 8 | 0; //@line 17811
  HEAP32[$525 >> 2] = $4; //@line 17812
  $526 = $ReallocAsyncCtx5 + 12 | 0; //@line 17813
  HEAP8[$526 >> 0] = $6; //@line 17814
  $527 = $ReallocAsyncCtx5 + 13 | 0; //@line 17815
  HEAP8[$527 >> 0] = $8; //@line 17816
  $528 = $ReallocAsyncCtx5 + 16 | 0; //@line 17817
  HEAP32[$528 >> 2] = $10; //@line 17818
  $529 = $ReallocAsyncCtx5 + 20 | 0; //@line 17819
  HEAP32[$529 >> 2] = $12; //@line 17820
  $530 = $ReallocAsyncCtx5 + 24 | 0; //@line 17821
  HEAP32[$530 >> 2] = $14; //@line 17822
  $531 = $ReallocAsyncCtx5 + 28 | 0; //@line 17823
  HEAP8[$531 >> 0] = $517; //@line 17824
  $532 = $ReallocAsyncCtx5 + 32 | 0; //@line 17825
  HEAP32[$532 >> 2] = $16; //@line 17826
  $533 = $ReallocAsyncCtx5 + 36 | 0; //@line 17827
  HEAP32[$533 >> 2] = $18; //@line 17828
  $534 = $ReallocAsyncCtx5 + 40 | 0; //@line 17829
  HEAP32[$534 >> 2] = $20; //@line 17830
  $535 = $ReallocAsyncCtx5 + 44 | 0; //@line 17831
  HEAP32[$535 >> 2] = $22; //@line 17832
  $536 = $ReallocAsyncCtx5 + 48 | 0; //@line 17833
  HEAP32[$536 >> 2] = $24; //@line 17834
  $537 = $ReallocAsyncCtx5 + 52 | 0; //@line 17835
  HEAP32[$537 >> 2] = $26; //@line 17836
  $538 = $ReallocAsyncCtx5 + 56 | 0; //@line 17837
  HEAP32[$538 >> 2] = $28; //@line 17838
  $539 = $ReallocAsyncCtx5 + 60 | 0; //@line 17839
  HEAP32[$539 >> 2] = $$0107$be; //@line 17840
  $540 = $ReallocAsyncCtx5 + 64 | 0; //@line 17841
  HEAP32[$540 >> 2] = $30; //@line 17842
  $541 = $ReallocAsyncCtx5 + 68 | 0; //@line 17843
  HEAP32[$541 >> 2] = $32; //@line 17844
  $542 = $ReallocAsyncCtx5 + 72 | 0; //@line 17845
  HEAP32[$542 >> 2] = $34; //@line 17846
  $543 = $ReallocAsyncCtx5 + 76 | 0; //@line 17847
  HEAP32[$543 >> 2] = $36; //@line 17848
  $544 = $ReallocAsyncCtx5 + 80 | 0; //@line 17849
  HEAP32[$544 >> 2] = $40; //@line 17850
  $545 = $ReallocAsyncCtx5 + 84 | 0; //@line 17851
  HEAP8[$545 >> 0] = $511; //@line 17852
  $546 = $ReallocAsyncCtx5 + 88 | 0; //@line 17853
  HEAP32[$546 >> 2] = $42; //@line 17854
  $547 = $ReallocAsyncCtx5 + 92 | 0; //@line 17855
  HEAP32[$547 >> 2] = $44; //@line 17856
  $548 = $ReallocAsyncCtx5 + 96 | 0; //@line 17857
  HEAP32[$548 >> 2] = $46; //@line 17858
  $549 = $ReallocAsyncCtx5 + 100 | 0; //@line 17859
  HEAP32[$549 >> 2] = $48; //@line 17860
  $550 = $ReallocAsyncCtx5 + 104 | 0; //@line 17861
  HEAP32[$550 >> 2] = $50; //@line 17862
  $551 = $ReallocAsyncCtx5 + 108 | 0; //@line 17863
  HEAP32[$551 >> 2] = $52; //@line 17864
  $552 = $ReallocAsyncCtx5 + 112 | 0; //@line 17865
  HEAP32[$552 >> 2] = $54; //@line 17866
  $553 = $ReallocAsyncCtx5 + 116 | 0; //@line 17867
  HEAP32[$553 >> 2] = $56; //@line 17868
  $554 = $ReallocAsyncCtx5 + 120 | 0; //@line 17869
  HEAP32[$554 >> 2] = $58; //@line 17870
  $555 = $ReallocAsyncCtx5 + 124 | 0; //@line 17871
  HEAP32[$555 >> 2] = $60; //@line 17872
  $556 = $ReallocAsyncCtx5 + 128 | 0; //@line 17873
  HEAP32[$556 >> 2] = $62; //@line 17874
  $557 = $ReallocAsyncCtx5 + 132 | 0; //@line 17875
  HEAP32[$557 >> 2] = $64; //@line 17876
  $558 = $ReallocAsyncCtx5 + 136 | 0; //@line 17877
  HEAP32[$558 >> 2] = $66; //@line 17878
  $559 = $ReallocAsyncCtx5 + 140 | 0; //@line 17879
  HEAP32[$559 >> 2] = $68; //@line 17880
  $560 = $ReallocAsyncCtx5 + 144 | 0; //@line 17881
  HEAP32[$560 >> 2] = $70; //@line 17882
  $561 = $ReallocAsyncCtx5 + 148 | 0; //@line 17883
  HEAP32[$561 >> 2] = $72; //@line 17884
  $562 = $ReallocAsyncCtx5 + 152 | 0; //@line 17885
  HEAP32[$562 >> 2] = $74; //@line 17886
  $563 = $ReallocAsyncCtx5 + 156 | 0; //@line 17887
  HEAP32[$563 >> 2] = $76; //@line 17888
  $564 = $ReallocAsyncCtx5 + 160 | 0; //@line 17889
  HEAP32[$564 >> 2] = $78; //@line 17890
  $565 = $ReallocAsyncCtx5 + 164 | 0; //@line 17891
  HEAP32[$565 >> 2] = $80; //@line 17892
  $566 = $ReallocAsyncCtx5 + 168 | 0; //@line 17893
  HEAP32[$566 >> 2] = $82; //@line 17894
  $567 = $ReallocAsyncCtx5 + 172 | 0; //@line 17895
  HEAP32[$567 >> 2] = $84; //@line 17896
  $568 = $ReallocAsyncCtx5 + 176 | 0; //@line 17897
  HEAP32[$568 >> 2] = $86; //@line 17898
  $569 = $ReallocAsyncCtx5 + 180 | 0; //@line 17899
  HEAP32[$569 >> 2] = $88; //@line 17900
  $570 = $ReallocAsyncCtx5 + 184 | 0; //@line 17901
  HEAP32[$570 >> 2] = $90; //@line 17902
  $571 = $ReallocAsyncCtx5 + 188 | 0; //@line 17903
  HEAP8[$571 >> 0] = $519; //@line 17904
  $572 = $ReallocAsyncCtx5 + 192 | 0; //@line 17905
  HEAP32[$572 >> 2] = $92; //@line 17906
  $573 = $ReallocAsyncCtx5 + 196 | 0; //@line 17907
  HEAP32[$573 >> 2] = $94; //@line 17908
  $574 = $ReallocAsyncCtx5 + 200 | 0; //@line 17909
  HEAP32[$574 >> 2] = $96; //@line 17910
  $575 = $ReallocAsyncCtx5 + 204 | 0; //@line 17911
  HEAP32[$575 >> 2] = $98; //@line 17912
  $576 = $ReallocAsyncCtx5 + 208 | 0; //@line 17913
  HEAP32[$576 >> 2] = $100; //@line 17914
  $577 = $ReallocAsyncCtx5 + 212 | 0; //@line 17915
  HEAP32[$577 >> 2] = $102; //@line 17916
  $578 = $ReallocAsyncCtx5 + 216 | 0; //@line 17917
  HEAP32[$578 >> 2] = $515; //@line 17918
  $579 = $ReallocAsyncCtx5 + 220 | 0; //@line 17919
  HEAP32[$579 >> 2] = $104; //@line 17920
  $580 = $ReallocAsyncCtx5 + 224 | 0; //@line 17921
  HEAP32[$580 >> 2] = $106; //@line 17922
  $581 = $ReallocAsyncCtx5 + 228 | 0; //@line 17923
  HEAP32[$581 >> 2] = $108; //@line 17924
  $582 = $ReallocAsyncCtx5 + 232 | 0; //@line 17925
  HEAP32[$582 >> 2] = $110; //@line 17926
  $583 = $ReallocAsyncCtx5 + 236 | 0; //@line 17927
  HEAP32[$583 >> 2] = $112; //@line 17928
  $584 = $ReallocAsyncCtx5 + 240 | 0; //@line 17929
  HEAP32[$584 >> 2] = $114; //@line 17930
  $585 = $ReallocAsyncCtx5 + 244 | 0; //@line 17931
  HEAP32[$585 >> 2] = $116; //@line 17932
  sp = STACKTOP; //@line 17933
  return;
 } else if ((label | 0) == 30) {
  $590 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 17940
  $603 = $$0$be + 5 << 24 >> 24; //@line 17953
  $610 = (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 17960
  $613 = HEAP32[(HEAP32[$96 >> 2] | 0) + 48 >> 2] | 0; //@line 17963
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 17964
  $614 = FUNCTION_TABLE_iiii[$613 & 31]($28, $590, $610) | 0; //@line 17965
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 17968
   $615 = $ReallocAsyncCtx6 + 4 | 0; //@line 17969
   HEAP8[$615 >> 0] = $2; //@line 17970
   $616 = $ReallocAsyncCtx6 + 8 | 0; //@line 17971
   HEAP32[$616 >> 2] = $4; //@line 17972
   $617 = $ReallocAsyncCtx6 + 12 | 0; //@line 17973
   HEAP8[$617 >> 0] = $6; //@line 17974
   $618 = $ReallocAsyncCtx6 + 13 | 0; //@line 17975
   HEAP8[$618 >> 0] = $8; //@line 17976
   $619 = $ReallocAsyncCtx6 + 16 | 0; //@line 17977
   HEAP32[$619 >> 2] = $10; //@line 17978
   $620 = $ReallocAsyncCtx6 + 20 | 0; //@line 17979
   HEAP32[$620 >> 2] = $12; //@line 17980
   $621 = $ReallocAsyncCtx6 + 24 | 0; //@line 17981
   HEAP32[$621 >> 2] = $14; //@line 17982
   $622 = $ReallocAsyncCtx6 + 28 | 0; //@line 17983
   HEAP8[$622 >> 0] = $603; //@line 17984
   $623 = $ReallocAsyncCtx6 + 32 | 0; //@line 17985
   HEAP32[$623 >> 2] = $16; //@line 17986
   $624 = $ReallocAsyncCtx6 + 36 | 0; //@line 17987
   HEAP32[$624 >> 2] = $18; //@line 17988
   $625 = $ReallocAsyncCtx6 + 40 | 0; //@line 17989
   HEAP32[$625 >> 2] = $20; //@line 17990
   $626 = $ReallocAsyncCtx6 + 44 | 0; //@line 17991
   HEAP32[$626 >> 2] = $22; //@line 17992
   $627 = $ReallocAsyncCtx6 + 48 | 0; //@line 17993
   HEAP32[$627 >> 2] = $24; //@line 17994
   $628 = $ReallocAsyncCtx6 + 52 | 0; //@line 17995
   HEAP32[$628 >> 2] = $26; //@line 17996
   $629 = $ReallocAsyncCtx6 + 56 | 0; //@line 17997
   HEAP32[$629 >> 2] = $28; //@line 17998
   $630 = $ReallocAsyncCtx6 + 60 | 0; //@line 17999
   HEAP32[$630 >> 2] = $30; //@line 18000
   $631 = $ReallocAsyncCtx6 + 64 | 0; //@line 18001
   HEAP32[$631 >> 2] = $32; //@line 18002
   $632 = $ReallocAsyncCtx6 + 68 | 0; //@line 18003
   HEAP32[$632 >> 2] = $34; //@line 18004
   $633 = $ReallocAsyncCtx6 + 72 | 0; //@line 18005
   HEAP32[$633 >> 2] = $36; //@line 18006
   $634 = $ReallocAsyncCtx6 + 76 | 0; //@line 18007
   HEAP32[$634 >> 2] = $40; //@line 18008
   $635 = $ReallocAsyncCtx6 + 80 | 0; //@line 18009
   HEAP32[$635 >> 2] = $42; //@line 18010
   $636 = $ReallocAsyncCtx6 + 84 | 0; //@line 18011
   HEAP32[$636 >> 2] = $44; //@line 18012
   $637 = $ReallocAsyncCtx6 + 88 | 0; //@line 18013
   HEAP32[$637 >> 2] = $46; //@line 18014
   $638 = $ReallocAsyncCtx6 + 92 | 0; //@line 18015
   HEAP32[$638 >> 2] = $48; //@line 18016
   $639 = $ReallocAsyncCtx6 + 96 | 0; //@line 18017
   HEAP32[$639 >> 2] = $50; //@line 18018
   $640 = $ReallocAsyncCtx6 + 100 | 0; //@line 18019
   HEAP32[$640 >> 2] = $52; //@line 18020
   $641 = $ReallocAsyncCtx6 + 104 | 0; //@line 18021
   HEAP32[$641 >> 2] = $54; //@line 18022
   $642 = $ReallocAsyncCtx6 + 108 | 0; //@line 18023
   HEAP32[$642 >> 2] = $56; //@line 18024
   $643 = $ReallocAsyncCtx6 + 112 | 0; //@line 18025
   HEAP32[$643 >> 2] = $58; //@line 18026
   $644 = $ReallocAsyncCtx6 + 116 | 0; //@line 18027
   HEAP32[$644 >> 2] = $60; //@line 18028
   $645 = $ReallocAsyncCtx6 + 120 | 0; //@line 18029
   HEAP32[$645 >> 2] = $62; //@line 18030
   $646 = $ReallocAsyncCtx6 + 124 | 0; //@line 18031
   HEAP32[$646 >> 2] = $64; //@line 18032
   $647 = $ReallocAsyncCtx6 + 128 | 0; //@line 18033
   HEAP32[$647 >> 2] = $66; //@line 18034
   $648 = $ReallocAsyncCtx6 + 132 | 0; //@line 18035
   HEAP32[$648 >> 2] = $68; //@line 18036
   $649 = $ReallocAsyncCtx6 + 136 | 0; //@line 18037
   HEAP32[$649 >> 2] = $70; //@line 18038
   $650 = $ReallocAsyncCtx6 + 140 | 0; //@line 18039
   HEAP32[$650 >> 2] = $72; //@line 18040
   $651 = $ReallocAsyncCtx6 + 144 | 0; //@line 18041
   HEAP32[$651 >> 2] = $74; //@line 18042
   $652 = $ReallocAsyncCtx6 + 148 | 0; //@line 18043
   HEAP32[$652 >> 2] = $76; //@line 18044
   $653 = $ReallocAsyncCtx6 + 152 | 0; //@line 18045
   HEAP32[$653 >> 2] = $78; //@line 18046
   $654 = $ReallocAsyncCtx6 + 156 | 0; //@line 18047
   HEAP32[$654 >> 2] = $80; //@line 18048
   $655 = $ReallocAsyncCtx6 + 160 | 0; //@line 18049
   HEAP32[$655 >> 2] = $82; //@line 18050
   $656 = $ReallocAsyncCtx6 + 164 | 0; //@line 18051
   HEAP32[$656 >> 2] = $84; //@line 18052
   $657 = $ReallocAsyncCtx6 + 168 | 0; //@line 18053
   HEAP32[$657 >> 2] = $86; //@line 18054
   $658 = $ReallocAsyncCtx6 + 172 | 0; //@line 18055
   HEAP32[$658 >> 2] = $88; //@line 18056
   $659 = $ReallocAsyncCtx6 + 176 | 0; //@line 18057
   HEAP32[$659 >> 2] = $90; //@line 18058
   $660 = $ReallocAsyncCtx6 + 180 | 0; //@line 18059
   HEAP32[$660 >> 2] = $92; //@line 18060
   $661 = $ReallocAsyncCtx6 + 184 | 0; //@line 18061
   HEAP32[$661 >> 2] = $94; //@line 18062
   $662 = $ReallocAsyncCtx6 + 188 | 0; //@line 18063
   HEAP32[$662 >> 2] = $96; //@line 18064
   $663 = $ReallocAsyncCtx6 + 192 | 0; //@line 18065
   HEAP32[$663 >> 2] = $98; //@line 18066
   $664 = $ReallocAsyncCtx6 + 196 | 0; //@line 18067
   HEAP32[$664 >> 2] = $100; //@line 18068
   $665 = $ReallocAsyncCtx6 + 200 | 0; //@line 18069
   HEAP32[$665 >> 2] = $102; //@line 18070
   $666 = $ReallocAsyncCtx6 + 204 | 0; //@line 18071
   HEAP32[$666 >> 2] = $104; //@line 18072
   $667 = $ReallocAsyncCtx6 + 208 | 0; //@line 18073
   HEAP32[$667 >> 2] = $106; //@line 18074
   $668 = $ReallocAsyncCtx6 + 212 | 0; //@line 18075
   HEAP32[$668 >> 2] = $108; //@line 18076
   $669 = $ReallocAsyncCtx6 + 216 | 0; //@line 18077
   HEAP32[$669 >> 2] = $110; //@line 18078
   $670 = $ReallocAsyncCtx6 + 220 | 0; //@line 18079
   HEAP32[$670 >> 2] = $112; //@line 18080
   $671 = $ReallocAsyncCtx6 + 224 | 0; //@line 18081
   HEAP32[$671 >> 2] = $114; //@line 18082
   $672 = $ReallocAsyncCtx6 + 228 | 0; //@line 18083
   HEAP32[$672 >> 2] = $116; //@line 18084
   sp = STACKTOP; //@line 18085
   return;
  }
  HEAP8[___async_retval >> 0] = $614; //@line 18089
  ___async_unwind = 0; //@line 18090
  HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 18091
  $615 = $ReallocAsyncCtx6 + 4 | 0; //@line 18092
  HEAP8[$615 >> 0] = $2; //@line 18093
  $616 = $ReallocAsyncCtx6 + 8 | 0; //@line 18094
  HEAP32[$616 >> 2] = $4; //@line 18095
  $617 = $ReallocAsyncCtx6 + 12 | 0; //@line 18096
  HEAP8[$617 >> 0] = $6; //@line 18097
  $618 = $ReallocAsyncCtx6 + 13 | 0; //@line 18098
  HEAP8[$618 >> 0] = $8; //@line 18099
  $619 = $ReallocAsyncCtx6 + 16 | 0; //@line 18100
  HEAP32[$619 >> 2] = $10; //@line 18101
  $620 = $ReallocAsyncCtx6 + 20 | 0; //@line 18102
  HEAP32[$620 >> 2] = $12; //@line 18103
  $621 = $ReallocAsyncCtx6 + 24 | 0; //@line 18104
  HEAP32[$621 >> 2] = $14; //@line 18105
  $622 = $ReallocAsyncCtx6 + 28 | 0; //@line 18106
  HEAP8[$622 >> 0] = $603; //@line 18107
  $623 = $ReallocAsyncCtx6 + 32 | 0; //@line 18108
  HEAP32[$623 >> 2] = $16; //@line 18109
  $624 = $ReallocAsyncCtx6 + 36 | 0; //@line 18110
  HEAP32[$624 >> 2] = $18; //@line 18111
  $625 = $ReallocAsyncCtx6 + 40 | 0; //@line 18112
  HEAP32[$625 >> 2] = $20; //@line 18113
  $626 = $ReallocAsyncCtx6 + 44 | 0; //@line 18114
  HEAP32[$626 >> 2] = $22; //@line 18115
  $627 = $ReallocAsyncCtx6 + 48 | 0; //@line 18116
  HEAP32[$627 >> 2] = $24; //@line 18117
  $628 = $ReallocAsyncCtx6 + 52 | 0; //@line 18118
  HEAP32[$628 >> 2] = $26; //@line 18119
  $629 = $ReallocAsyncCtx6 + 56 | 0; //@line 18120
  HEAP32[$629 >> 2] = $28; //@line 18121
  $630 = $ReallocAsyncCtx6 + 60 | 0; //@line 18122
  HEAP32[$630 >> 2] = $30; //@line 18123
  $631 = $ReallocAsyncCtx6 + 64 | 0; //@line 18124
  HEAP32[$631 >> 2] = $32; //@line 18125
  $632 = $ReallocAsyncCtx6 + 68 | 0; //@line 18126
  HEAP32[$632 >> 2] = $34; //@line 18127
  $633 = $ReallocAsyncCtx6 + 72 | 0; //@line 18128
  HEAP32[$633 >> 2] = $36; //@line 18129
  $634 = $ReallocAsyncCtx6 + 76 | 0; //@line 18130
  HEAP32[$634 >> 2] = $40; //@line 18131
  $635 = $ReallocAsyncCtx6 + 80 | 0; //@line 18132
  HEAP32[$635 >> 2] = $42; //@line 18133
  $636 = $ReallocAsyncCtx6 + 84 | 0; //@line 18134
  HEAP32[$636 >> 2] = $44; //@line 18135
  $637 = $ReallocAsyncCtx6 + 88 | 0; //@line 18136
  HEAP32[$637 >> 2] = $46; //@line 18137
  $638 = $ReallocAsyncCtx6 + 92 | 0; //@line 18138
  HEAP32[$638 >> 2] = $48; //@line 18139
  $639 = $ReallocAsyncCtx6 + 96 | 0; //@line 18140
  HEAP32[$639 >> 2] = $50; //@line 18141
  $640 = $ReallocAsyncCtx6 + 100 | 0; //@line 18142
  HEAP32[$640 >> 2] = $52; //@line 18143
  $641 = $ReallocAsyncCtx6 + 104 | 0; //@line 18144
  HEAP32[$641 >> 2] = $54; //@line 18145
  $642 = $ReallocAsyncCtx6 + 108 | 0; //@line 18146
  HEAP32[$642 >> 2] = $56; //@line 18147
  $643 = $ReallocAsyncCtx6 + 112 | 0; //@line 18148
  HEAP32[$643 >> 2] = $58; //@line 18149
  $644 = $ReallocAsyncCtx6 + 116 | 0; //@line 18150
  HEAP32[$644 >> 2] = $60; //@line 18151
  $645 = $ReallocAsyncCtx6 + 120 | 0; //@line 18152
  HEAP32[$645 >> 2] = $62; //@line 18153
  $646 = $ReallocAsyncCtx6 + 124 | 0; //@line 18154
  HEAP32[$646 >> 2] = $64; //@line 18155
  $647 = $ReallocAsyncCtx6 + 128 | 0; //@line 18156
  HEAP32[$647 >> 2] = $66; //@line 18157
  $648 = $ReallocAsyncCtx6 + 132 | 0; //@line 18158
  HEAP32[$648 >> 2] = $68; //@line 18159
  $649 = $ReallocAsyncCtx6 + 136 | 0; //@line 18160
  HEAP32[$649 >> 2] = $70; //@line 18161
  $650 = $ReallocAsyncCtx6 + 140 | 0; //@line 18162
  HEAP32[$650 >> 2] = $72; //@line 18163
  $651 = $ReallocAsyncCtx6 + 144 | 0; //@line 18164
  HEAP32[$651 >> 2] = $74; //@line 18165
  $652 = $ReallocAsyncCtx6 + 148 | 0; //@line 18166
  HEAP32[$652 >> 2] = $76; //@line 18167
  $653 = $ReallocAsyncCtx6 + 152 | 0; //@line 18168
  HEAP32[$653 >> 2] = $78; //@line 18169
  $654 = $ReallocAsyncCtx6 + 156 | 0; //@line 18170
  HEAP32[$654 >> 2] = $80; //@line 18171
  $655 = $ReallocAsyncCtx6 + 160 | 0; //@line 18172
  HEAP32[$655 >> 2] = $82; //@line 18173
  $656 = $ReallocAsyncCtx6 + 164 | 0; //@line 18174
  HEAP32[$656 >> 2] = $84; //@line 18175
  $657 = $ReallocAsyncCtx6 + 168 | 0; //@line 18176
  HEAP32[$657 >> 2] = $86; //@line 18177
  $658 = $ReallocAsyncCtx6 + 172 | 0; //@line 18178
  HEAP32[$658 >> 2] = $88; //@line 18179
  $659 = $ReallocAsyncCtx6 + 176 | 0; //@line 18180
  HEAP32[$659 >> 2] = $90; //@line 18181
  $660 = $ReallocAsyncCtx6 + 180 | 0; //@line 18182
  HEAP32[$660 >> 2] = $92; //@line 18183
  $661 = $ReallocAsyncCtx6 + 184 | 0; //@line 18184
  HEAP32[$661 >> 2] = $94; //@line 18185
  $662 = $ReallocAsyncCtx6 + 188 | 0; //@line 18186
  HEAP32[$662 >> 2] = $96; //@line 18187
  $663 = $ReallocAsyncCtx6 + 192 | 0; //@line 18188
  HEAP32[$663 >> 2] = $98; //@line 18189
  $664 = $ReallocAsyncCtx6 + 196 | 0; //@line 18190
  HEAP32[$664 >> 2] = $100; //@line 18191
  $665 = $ReallocAsyncCtx6 + 200 | 0; //@line 18192
  HEAP32[$665 >> 2] = $102; //@line 18193
  $666 = $ReallocAsyncCtx6 + 204 | 0; //@line 18194
  HEAP32[$666 >> 2] = $104; //@line 18195
  $667 = $ReallocAsyncCtx6 + 208 | 0; //@line 18196
  HEAP32[$667 >> 2] = $106; //@line 18197
  $668 = $ReallocAsyncCtx6 + 212 | 0; //@line 18198
  HEAP32[$668 >> 2] = $108; //@line 18199
  $669 = $ReallocAsyncCtx6 + 216 | 0; //@line 18200
  HEAP32[$669 >> 2] = $110; //@line 18201
  $670 = $ReallocAsyncCtx6 + 220 | 0; //@line 18202
  HEAP32[$670 >> 2] = $112; //@line 18203
  $671 = $ReallocAsyncCtx6 + 224 | 0; //@line 18204
  HEAP32[$671 >> 2] = $114; //@line 18205
  $672 = $ReallocAsyncCtx6 + 228 | 0; //@line 18206
  HEAP32[$672 >> 2] = $116; //@line 18207
  sp = STACKTOP; //@line 18208
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 18213
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_293($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $$0111 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $481 = 0, $485 = 0, $489 = 0, $494 = 0, $495 = 0, $499 = 0, $50 = 0, $503 = 0, $505 = 0, $507 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $578 = 0, $58 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14303
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 14305
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14307
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 14309
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 14311
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 14313
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 14315
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 14317
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 14319
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 14321
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 14323
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 14325
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 14327
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 14329
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 14331
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 14333
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 14335
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 14337
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 14339
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 14341
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 14343
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 14345
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 14347
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 14349
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 14351
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 14353
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 14355
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 14359
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 14361
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 14363
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 14365
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 14367
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 14369
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 14371
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 14373
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 14375
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 14377
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 14379
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 14381
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 14383
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 14385
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 14387
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 14389
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 14391
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 14393
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 14395
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 14397
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 14399
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 14401
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 14403
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 14405
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 14407
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 14409
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 14411
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 14413
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 14415
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 14417
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 14419
 $$0111 = HEAP8[___async_retval >> 0] | 0; //@line 14422
 $$reg2mem$0 = HEAP8[$0 + 104 >> 0] | 0; //@line 14422
 L2 : while (1) {
  $377 = HEAP8[$24 >> 0] | 0; //@line 14427
  $378 = $377 & 255; //@line 14428
  if ((128 - (HEAPU8[$12 >> 0] | 0) - $378 | 0) > 2) {
   HEAP8[$10 + 4 + $378 >> 0] = 6; //@line 14434
   HEAP8[($377 + 1 & 255) + ($10 + 4) >> 0] = $$0111; //@line 14438
   HEAP8[$24 >> 0] = $377 + 3 << 24 >> 24; //@line 14440
   HEAP8[($377 + 2 & 255) + ($10 + 4) >> 0] = $2; //@line 14443
   HEAP8[$40 >> 0] = 1; //@line 14444
   $$0$be = $$reg2mem$0; //@line 14445
   $$0107$be = 0; //@line 14445
  } else {
   $$0$be = $$reg2mem$0; //@line 14447
   $$0107$be = -1010; //@line 14447
  }
  L6 : while (1) {
   if (($$0$be & 255) >= ($8 & 255)) {
    label = 31; //@line 14452
    break L2;
   }
   $119 = $$0$be + 1 << 24 >> 24; //@line 14456
   switch (HEAP8[$14 + ($$0$be & 255) >> 0] | 0) {
   case 3:
    {
     label = 4; //@line 14461
     break L2;
     break;
    }
   case 5:
    {
     label = 9; //@line 14466
     break L2;
     break;
    }
   case 7:
    {
     label = 19; //@line 14471
     break L2;
     break;
    }
   case 9:
    {
     label = 25; //@line 14476
     break L2;
     break;
    }
   case 10:
    {
     label = 28; //@line 14481
     break L2;
     break;
    }
   case 6:
    {
     break L6;
     break;
    }
   case 2:
    {
     HEAP32[$114 >> 2] = 0; //@line 14490
     HEAP8[$4 >> 0] = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 14495
     HEAP8[$30 >> 0] = HEAP8[$14 + ($$0$be + 2 & 255) >> 0] | 0; //@line 14500
     $$0$be = $$0$be + 3 << 24 >> 24; //@line 14501
     continue L6;
     break;
    }
   case 4:
    {
     $204 = $$0$be + 2 << 24 >> 24; //@line 14506
     $207 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 14509
     HEAP8[$36 >> 0] = $207; //@line 14510
     HEAP16[$50 >> 1] = 1 << ($207 & 255); //@line 14514
     $214 = HEAP8[$24 >> 0] | 0; //@line 14518
     $215 = $214 & 255; //@line 14519
     if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) <= ($215 | 0)) {
      $$0$be = $204; //@line 14522
      $$0107$be = -1010; //@line 14522
      continue L6;
     }
     HEAP8[$24 >> 0] = $214 + 1 << 24 >> 24; //@line 14527
     HEAP8[$10 + 4 + $215 >> 0] = 4; //@line 14528
     HEAP8[$40 >> 0] = 1; //@line 14529
     $$0$be = $204; //@line 14530
     $$0107$be = 0; //@line 14530
     continue L6;
     break;
    }
   case 8:
    {
     $481 = $$0$be + 2 << 24 >> 24; //@line 14535
     $485 = HEAP8[$14 + ($119 & 255) >> 0] & 15; //@line 14539
     $489 = ($485 + ($485 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 14544
     HEAP32[$92 >> 2] = $489; //@line 14545
     HEAP32[$66 >> 2] = $489 + 1e3; //@line 14547
     $494 = HEAP8[$24 >> 0] | 0; //@line 14551
     $495 = $494 & 255; //@line 14552
     if ((128 - (HEAPU8[$12 >> 0] | 0) | 0) <= ($495 | 0)) {
      $$0$be = $481; //@line 14555
      $$0107$be = -1010; //@line 14555
      continue L6;
     }
     HEAP8[$24 >> 0] = $494 + 1 << 24 >> 24; //@line 14560
     HEAP8[$10 + 4 + $495 >> 0] = 8; //@line 14561
     HEAP8[$110 >> 0] = 1; //@line 14562
     HEAP8[$40 >> 0] = 1; //@line 14563
     $$0$be = $481; //@line 14564
     $$0107$be = 0; //@line 14564
     continue L6;
     break;
    }
   default:
    {
     $$0$be = $119; //@line 14569
     $$0107$be = -1013; //@line 14569
     continue L6;
    }
   }
  }
  $311 = HEAP32[$16 >> 2] | 0; //@line 14574
  if (!$311) {
   $$0111 = -1; //@line 14577
   $$reg2mem$0 = $119; //@line 14577
  } else {
   label = 13; //@line 14579
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$52 >> 0] = 0; //@line 14584
  HEAP8[$86 >> 0] = 0; //@line 14585
  HEAP8[$90 >> 0] = 0; //@line 14586
  HEAP8[$64 >> 0] = 0; //@line 14587
  $130 = $119 & 255; //@line 14588
  $131 = $130 + -1 | 0; //@line 14589
  HEAP32[$32 >> 2] = $14 + $131; //@line 14591
  HEAP8[$34 >> 0] = $100 - $131; //@line 14594
  HEAP8[$58 >> 0] = HEAP8[$48 >> 0] | 0; //@line 14596
  HEAP8[$70 >> 0] = HEAP8[$74 >> 0] | 0; //@line 14598
  HEAP8[$84 >> 0] = HEAP8[$94 >> 0] | 0; //@line 14600
  HEAP8[$102 >> 0] = HEAP8[$104 >> 0] | 0; //@line 14602
  HEAP8[$18 >> 0] = HEAP8[$106 >> 0] | 0; //@line 14604
  $142 = HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] | 0; //@line 14607
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 14608
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($28, $46, $52, $86, $90, $64) | 0; //@line 14609
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 473; //@line 14612
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 14613
   HEAP8[$144 >> 0] = $2; //@line 14614
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 14615
   HEAP32[$145 >> 2] = $4; //@line 14616
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 14617
   HEAP8[$146 >> 0] = $6; //@line 14618
   $147 = $ReallocAsyncCtx + 13 | 0; //@line 14619
   HEAP8[$147 >> 0] = $8; //@line 14620
   $148 = $ReallocAsyncCtx + 16 | 0; //@line 14621
   HEAP32[$148 >> 2] = $10; //@line 14622
   $149 = $ReallocAsyncCtx + 20 | 0; //@line 14623
   HEAP32[$149 >> 2] = $12; //@line 14624
   $150 = $ReallocAsyncCtx + 24 | 0; //@line 14625
   HEAP32[$150 >> 2] = $14; //@line 14626
   $151 = $ReallocAsyncCtx + 28 | 0; //@line 14627
   HEAP32[$151 >> 2] = $16; //@line 14628
   $152 = $ReallocAsyncCtx + 32 | 0; //@line 14629
   HEAP32[$152 >> 2] = $18; //@line 14630
   $153 = $ReallocAsyncCtx + 36 | 0; //@line 14631
   HEAP32[$153 >> 2] = $20; //@line 14632
   $154 = $ReallocAsyncCtx + 40 | 0; //@line 14633
   HEAP32[$154 >> 2] = $22; //@line 14634
   $155 = $ReallocAsyncCtx + 44 | 0; //@line 14635
   HEAP32[$155 >> 2] = $24; //@line 14636
   $156 = $ReallocAsyncCtx + 48 | 0; //@line 14637
   HEAP32[$156 >> 2] = $26; //@line 14638
   $157 = $ReallocAsyncCtx + 52 | 0; //@line 14639
   HEAP32[$157 >> 2] = $28; //@line 14640
   $158 = $ReallocAsyncCtx + 56 | 0; //@line 14641
   HEAP32[$158 >> 2] = $30; //@line 14642
   $159 = $ReallocAsyncCtx + 60 | 0; //@line 14643
   HEAP32[$159 >> 2] = $$0107$be; //@line 14644
   $160 = $ReallocAsyncCtx + 64 | 0; //@line 14645
   HEAP32[$160 >> 2] = $32; //@line 14646
   $161 = $ReallocAsyncCtx + 68 | 0; //@line 14647
   HEAP32[$161 >> 2] = $34; //@line 14648
   $162 = $ReallocAsyncCtx + 72 | 0; //@line 14649
   HEAP32[$162 >> 2] = $36; //@line 14650
   $163 = $ReallocAsyncCtx + 76 | 0; //@line 14651
   HEAP32[$163 >> 2] = $38; //@line 14652
   $164 = $ReallocAsyncCtx + 80 | 0; //@line 14653
   HEAP32[$164 >> 2] = $40; //@line 14654
   $165 = $ReallocAsyncCtx + 84 | 0; //@line 14655
   HEAP32[$165 >> 2] = $130; //@line 14656
   $166 = $ReallocAsyncCtx + 88 | 0; //@line 14657
   HEAP32[$166 >> 2] = $42; //@line 14658
   $167 = $ReallocAsyncCtx + 92 | 0; //@line 14659
   HEAP32[$167 >> 2] = $44; //@line 14660
   $168 = $ReallocAsyncCtx + 96 | 0; //@line 14661
   HEAP32[$168 >> 2] = $46; //@line 14662
   $169 = $ReallocAsyncCtx + 100 | 0; //@line 14663
   HEAP32[$169 >> 2] = $48; //@line 14664
   $170 = $ReallocAsyncCtx + 104 | 0; //@line 14665
   HEAP32[$170 >> 2] = $50; //@line 14666
   $171 = $ReallocAsyncCtx + 108 | 0; //@line 14667
   HEAP32[$171 >> 2] = $52; //@line 14668
   $172 = $ReallocAsyncCtx + 112 | 0; //@line 14669
   HEAP32[$172 >> 2] = $56; //@line 14670
   $173 = $ReallocAsyncCtx + 116 | 0; //@line 14671
   HEAP32[$173 >> 2] = $58; //@line 14672
   $174 = $ReallocAsyncCtx + 120 | 0; //@line 14673
   HEAP32[$174 >> 2] = $60; //@line 14674
   $175 = $ReallocAsyncCtx + 124 | 0; //@line 14675
   HEAP32[$175 >> 2] = $62; //@line 14676
   $176 = $ReallocAsyncCtx + 128 | 0; //@line 14677
   HEAP32[$176 >> 2] = $64; //@line 14678
   $177 = $ReallocAsyncCtx + 132 | 0; //@line 14679
   HEAP32[$177 >> 2] = $66; //@line 14680
   $178 = $ReallocAsyncCtx + 136 | 0; //@line 14681
   HEAP32[$178 >> 2] = $68; //@line 14682
   $179 = $ReallocAsyncCtx + 140 | 0; //@line 14683
   HEAP32[$179 >> 2] = $70; //@line 14684
   $180 = $ReallocAsyncCtx + 144 | 0; //@line 14685
   HEAP32[$180 >> 2] = $72; //@line 14686
   $181 = $ReallocAsyncCtx + 148 | 0; //@line 14687
   HEAP32[$181 >> 2] = $74; //@line 14688
   $182 = $ReallocAsyncCtx + 152 | 0; //@line 14689
   HEAP32[$182 >> 2] = $76; //@line 14690
   $183 = $ReallocAsyncCtx + 156 | 0; //@line 14691
   HEAP32[$183 >> 2] = $78; //@line 14692
   $184 = $ReallocAsyncCtx + 160 | 0; //@line 14693
   HEAP32[$184 >> 2] = $80; //@line 14694
   $185 = $ReallocAsyncCtx + 164 | 0; //@line 14695
   HEAP32[$185 >> 2] = $82; //@line 14696
   $186 = $ReallocAsyncCtx + 168 | 0; //@line 14697
   HEAP32[$186 >> 2] = $84; //@line 14698
   $187 = $ReallocAsyncCtx + 172 | 0; //@line 14699
   HEAP32[$187 >> 2] = $86; //@line 14700
   $188 = $ReallocAsyncCtx + 176 | 0; //@line 14701
   HEAP32[$188 >> 2] = $88; //@line 14702
   $189 = $ReallocAsyncCtx + 180 | 0; //@line 14703
   HEAP32[$189 >> 2] = $90; //@line 14704
   $190 = $ReallocAsyncCtx + 184 | 0; //@line 14705
   HEAP32[$190 >> 2] = $92; //@line 14706
   $191 = $ReallocAsyncCtx + 188 | 0; //@line 14707
   HEAP32[$191 >> 2] = $94; //@line 14708
   $192 = $ReallocAsyncCtx + 192 | 0; //@line 14709
   HEAP32[$192 >> 2] = $96; //@line 14710
   $193 = $ReallocAsyncCtx + 196 | 0; //@line 14711
   HEAP32[$193 >> 2] = $98; //@line 14712
   $194 = $ReallocAsyncCtx + 200 | 0; //@line 14713
   HEAP32[$194 >> 2] = $100; //@line 14714
   $195 = $ReallocAsyncCtx + 204 | 0; //@line 14715
   HEAP32[$195 >> 2] = $102; //@line 14716
   $196 = $ReallocAsyncCtx + 208 | 0; //@line 14717
   HEAP32[$196 >> 2] = $104; //@line 14718
   $197 = $ReallocAsyncCtx + 212 | 0; //@line 14719
   HEAP32[$197 >> 2] = $106; //@line 14720
   $198 = $ReallocAsyncCtx + 216 | 0; //@line 14721
   HEAP32[$198 >> 2] = $108; //@line 14722
   $199 = $ReallocAsyncCtx + 220 | 0; //@line 14723
   HEAP32[$199 >> 2] = $110; //@line 14724
   $200 = $ReallocAsyncCtx + 224 | 0; //@line 14725
   HEAP32[$200 >> 2] = $112; //@line 14726
   $201 = $ReallocAsyncCtx + 228 | 0; //@line 14727
   HEAP32[$201 >> 2] = $114; //@line 14728
   $202 = $ReallocAsyncCtx + 232 | 0; //@line 14729
   HEAP32[$202 >> 2] = $116; //@line 14730
   sp = STACKTOP; //@line 14731
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 14735
  ___async_unwind = 0; //@line 14736
  HEAP32[$ReallocAsyncCtx >> 2] = 473; //@line 14737
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 14738
  HEAP8[$144 >> 0] = $2; //@line 14739
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 14740
  HEAP32[$145 >> 2] = $4; //@line 14741
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 14742
  HEAP8[$146 >> 0] = $6; //@line 14743
  $147 = $ReallocAsyncCtx + 13 | 0; //@line 14744
  HEAP8[$147 >> 0] = $8; //@line 14745
  $148 = $ReallocAsyncCtx + 16 | 0; //@line 14746
  HEAP32[$148 >> 2] = $10; //@line 14747
  $149 = $ReallocAsyncCtx + 20 | 0; //@line 14748
  HEAP32[$149 >> 2] = $12; //@line 14749
  $150 = $ReallocAsyncCtx + 24 | 0; //@line 14750
  HEAP32[$150 >> 2] = $14; //@line 14751
  $151 = $ReallocAsyncCtx + 28 | 0; //@line 14752
  HEAP32[$151 >> 2] = $16; //@line 14753
  $152 = $ReallocAsyncCtx + 32 | 0; //@line 14754
  HEAP32[$152 >> 2] = $18; //@line 14755
  $153 = $ReallocAsyncCtx + 36 | 0; //@line 14756
  HEAP32[$153 >> 2] = $20; //@line 14757
  $154 = $ReallocAsyncCtx + 40 | 0; //@line 14758
  HEAP32[$154 >> 2] = $22; //@line 14759
  $155 = $ReallocAsyncCtx + 44 | 0; //@line 14760
  HEAP32[$155 >> 2] = $24; //@line 14761
  $156 = $ReallocAsyncCtx + 48 | 0; //@line 14762
  HEAP32[$156 >> 2] = $26; //@line 14763
  $157 = $ReallocAsyncCtx + 52 | 0; //@line 14764
  HEAP32[$157 >> 2] = $28; //@line 14765
  $158 = $ReallocAsyncCtx + 56 | 0; //@line 14766
  HEAP32[$158 >> 2] = $30; //@line 14767
  $159 = $ReallocAsyncCtx + 60 | 0; //@line 14768
  HEAP32[$159 >> 2] = $$0107$be; //@line 14769
  $160 = $ReallocAsyncCtx + 64 | 0; //@line 14770
  HEAP32[$160 >> 2] = $32; //@line 14771
  $161 = $ReallocAsyncCtx + 68 | 0; //@line 14772
  HEAP32[$161 >> 2] = $34; //@line 14773
  $162 = $ReallocAsyncCtx + 72 | 0; //@line 14774
  HEAP32[$162 >> 2] = $36; //@line 14775
  $163 = $ReallocAsyncCtx + 76 | 0; //@line 14776
  HEAP32[$163 >> 2] = $38; //@line 14777
  $164 = $ReallocAsyncCtx + 80 | 0; //@line 14778
  HEAP32[$164 >> 2] = $40; //@line 14779
  $165 = $ReallocAsyncCtx + 84 | 0; //@line 14780
  HEAP32[$165 >> 2] = $130; //@line 14781
  $166 = $ReallocAsyncCtx + 88 | 0; //@line 14782
  HEAP32[$166 >> 2] = $42; //@line 14783
  $167 = $ReallocAsyncCtx + 92 | 0; //@line 14784
  HEAP32[$167 >> 2] = $44; //@line 14785
  $168 = $ReallocAsyncCtx + 96 | 0; //@line 14786
  HEAP32[$168 >> 2] = $46; //@line 14787
  $169 = $ReallocAsyncCtx + 100 | 0; //@line 14788
  HEAP32[$169 >> 2] = $48; //@line 14789
  $170 = $ReallocAsyncCtx + 104 | 0; //@line 14790
  HEAP32[$170 >> 2] = $50; //@line 14791
  $171 = $ReallocAsyncCtx + 108 | 0; //@line 14792
  HEAP32[$171 >> 2] = $52; //@line 14793
  $172 = $ReallocAsyncCtx + 112 | 0; //@line 14794
  HEAP32[$172 >> 2] = $56; //@line 14795
  $173 = $ReallocAsyncCtx + 116 | 0; //@line 14796
  HEAP32[$173 >> 2] = $58; //@line 14797
  $174 = $ReallocAsyncCtx + 120 | 0; //@line 14798
  HEAP32[$174 >> 2] = $60; //@line 14799
  $175 = $ReallocAsyncCtx + 124 | 0; //@line 14800
  HEAP32[$175 >> 2] = $62; //@line 14801
  $176 = $ReallocAsyncCtx + 128 | 0; //@line 14802
  HEAP32[$176 >> 2] = $64; //@line 14803
  $177 = $ReallocAsyncCtx + 132 | 0; //@line 14804
  HEAP32[$177 >> 2] = $66; //@line 14805
  $178 = $ReallocAsyncCtx + 136 | 0; //@line 14806
  HEAP32[$178 >> 2] = $68; //@line 14807
  $179 = $ReallocAsyncCtx + 140 | 0; //@line 14808
  HEAP32[$179 >> 2] = $70; //@line 14809
  $180 = $ReallocAsyncCtx + 144 | 0; //@line 14810
  HEAP32[$180 >> 2] = $72; //@line 14811
  $181 = $ReallocAsyncCtx + 148 | 0; //@line 14812
  HEAP32[$181 >> 2] = $74; //@line 14813
  $182 = $ReallocAsyncCtx + 152 | 0; //@line 14814
  HEAP32[$182 >> 2] = $76; //@line 14815
  $183 = $ReallocAsyncCtx + 156 | 0; //@line 14816
  HEAP32[$183 >> 2] = $78; //@line 14817
  $184 = $ReallocAsyncCtx + 160 | 0; //@line 14818
  HEAP32[$184 >> 2] = $80; //@line 14819
  $185 = $ReallocAsyncCtx + 164 | 0; //@line 14820
  HEAP32[$185 >> 2] = $82; //@line 14821
  $186 = $ReallocAsyncCtx + 168 | 0; //@line 14822
  HEAP32[$186 >> 2] = $84; //@line 14823
  $187 = $ReallocAsyncCtx + 172 | 0; //@line 14824
  HEAP32[$187 >> 2] = $86; //@line 14825
  $188 = $ReallocAsyncCtx + 176 | 0; //@line 14826
  HEAP32[$188 >> 2] = $88; //@line 14827
  $189 = $ReallocAsyncCtx + 180 | 0; //@line 14828
  HEAP32[$189 >> 2] = $90; //@line 14829
  $190 = $ReallocAsyncCtx + 184 | 0; //@line 14830
  HEAP32[$190 >> 2] = $92; //@line 14831
  $191 = $ReallocAsyncCtx + 188 | 0; //@line 14832
  HEAP32[$191 >> 2] = $94; //@line 14833
  $192 = $ReallocAsyncCtx + 192 | 0; //@line 14834
  HEAP32[$192 >> 2] = $96; //@line 14835
  $193 = $ReallocAsyncCtx + 196 | 0; //@line 14836
  HEAP32[$193 >> 2] = $98; //@line 14837
  $194 = $ReallocAsyncCtx + 200 | 0; //@line 14838
  HEAP32[$194 >> 2] = $100; //@line 14839
  $195 = $ReallocAsyncCtx + 204 | 0; //@line 14840
  HEAP32[$195 >> 2] = $102; //@line 14841
  $196 = $ReallocAsyncCtx + 208 | 0; //@line 14842
  HEAP32[$196 >> 2] = $104; //@line 14843
  $197 = $ReallocAsyncCtx + 212 | 0; //@line 14844
  HEAP32[$197 >> 2] = $106; //@line 14845
  $198 = $ReallocAsyncCtx + 216 | 0; //@line 14846
  HEAP32[$198 >> 2] = $108; //@line 14847
  $199 = $ReallocAsyncCtx + 220 | 0; //@line 14848
  HEAP32[$199 >> 2] = $110; //@line 14849
  $200 = $ReallocAsyncCtx + 224 | 0; //@line 14850
  HEAP32[$200 >> 2] = $112; //@line 14851
  $201 = $ReallocAsyncCtx + 228 | 0; //@line 14852
  HEAP32[$201 >> 2] = $114; //@line 14853
  $202 = $ReallocAsyncCtx + 232 | 0; //@line 14854
  HEAP32[$202 >> 2] = $116; //@line 14855
  sp = STACKTOP; //@line 14856
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 14862
  HEAP8[$72 >> 0] = ($221 & 255) >>> 4 & 7; //@line 14867
  HEAP8[$60 >> 0] = $221 & 15; //@line 14869
  $240 = $$0$be + 5 << 24 >> 24; //@line 14883
  HEAP32[$62 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 14891
  $250 = HEAP32[(HEAP32[$88 >> 2] | 0) + 40 >> 2] | 0; //@line 14894
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 14895
  $251 = FUNCTION_TABLE_iii[$250 & 31]($28, $68) | 0; //@line 14896
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 14899
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 14900
   HEAP8[$252 >> 0] = $2; //@line 14901
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 14902
   HEAP32[$253 >> 2] = $4; //@line 14903
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 14904
   HEAP8[$254 >> 0] = $6; //@line 14905
   $255 = $ReallocAsyncCtx2 + 13 | 0; //@line 14906
   HEAP8[$255 >> 0] = $8; //@line 14907
   $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 14908
   HEAP32[$256 >> 2] = $10; //@line 14909
   $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 14910
   HEAP32[$257 >> 2] = $12; //@line 14911
   $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 14912
   HEAP32[$258 >> 2] = $14; //@line 14913
   $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 14914
   HEAP32[$259 >> 2] = $16; //@line 14915
   $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 14916
   HEAP32[$260 >> 2] = $18; //@line 14917
   $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 14918
   HEAP32[$261 >> 2] = $20; //@line 14919
   $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 14920
   HEAP32[$262 >> 2] = $22; //@line 14921
   $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 14922
   HEAP32[$263 >> 2] = $24; //@line 14923
   $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 14924
   HEAP32[$264 >> 2] = $26; //@line 14925
   $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 14926
   HEAP32[$265 >> 2] = $28; //@line 14927
   $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 14928
   HEAP32[$266 >> 2] = $30; //@line 14929
   $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 14930
   HEAP32[$267 >> 2] = $32; //@line 14931
   $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 14932
   HEAP32[$268 >> 2] = $34; //@line 14933
   $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 14934
   HEAP32[$269 >> 2] = $36; //@line 14935
   $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 14936
   HEAP8[$270 >> 0] = $240; //@line 14937
   $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 14938
   HEAP32[$271 >> 2] = $38; //@line 14939
   $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 14940
   HEAP32[$272 >> 2] = $40; //@line 14941
   $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 14942
   HEAP32[$273 >> 2] = $42; //@line 14943
   $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 14944
   HEAP32[$274 >> 2] = $44; //@line 14945
   $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 14946
   HEAP32[$275 >> 2] = $46; //@line 14947
   $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 14948
   HEAP32[$276 >> 2] = $48; //@line 14949
   $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 14950
   HEAP32[$277 >> 2] = $50; //@line 14951
   $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 14952
   HEAP32[$278 >> 2] = $52; //@line 14953
   $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 14954
   HEAP32[$279 >> 2] = $56; //@line 14955
   $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 14956
   HEAP32[$280 >> 2] = $58; //@line 14957
   $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 14958
   HEAP32[$281 >> 2] = $60; //@line 14959
   $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 14960
   HEAP32[$282 >> 2] = $62; //@line 14961
   $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 14962
   HEAP32[$283 >> 2] = $64; //@line 14963
   $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 14964
   HEAP32[$284 >> 2] = $66; //@line 14965
   $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 14966
   HEAP32[$285 >> 2] = $68; //@line 14967
   $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 14968
   HEAP32[$286 >> 2] = $70; //@line 14969
   $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 14970
   HEAP32[$287 >> 2] = $72; //@line 14971
   $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 14972
   HEAP32[$288 >> 2] = $74; //@line 14973
   $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 14974
   HEAP32[$289 >> 2] = $76; //@line 14975
   $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 14976
   HEAP32[$290 >> 2] = $78; //@line 14977
   $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 14978
   HEAP32[$291 >> 2] = $80; //@line 14979
   $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 14980
   HEAP32[$292 >> 2] = $82; //@line 14981
   $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 14982
   HEAP32[$293 >> 2] = $84; //@line 14983
   $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 14984
   HEAP32[$294 >> 2] = $86; //@line 14985
   $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 14986
   HEAP32[$295 >> 2] = $88; //@line 14987
   $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 14988
   HEAP32[$296 >> 2] = $90; //@line 14989
   $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 14990
   HEAP32[$297 >> 2] = $92; //@line 14991
   $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 14992
   HEAP32[$298 >> 2] = $94; //@line 14993
   $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 14994
   HEAP32[$299 >> 2] = $96; //@line 14995
   $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 14996
   HEAP32[$300 >> 2] = $98; //@line 14997
   $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 14998
   HEAP32[$301 >> 2] = $100; //@line 14999
   $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 15000
   HEAP32[$302 >> 2] = $102; //@line 15001
   $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 15002
   HEAP32[$303 >> 2] = $104; //@line 15003
   $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 15004
   HEAP32[$304 >> 2] = $106; //@line 15005
   $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 15006
   HEAP32[$305 >> 2] = $108; //@line 15007
   $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 15008
   HEAP32[$306 >> 2] = $110; //@line 15009
   $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 15010
   HEAP32[$307 >> 2] = $112; //@line 15011
   $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 15012
   HEAP32[$308 >> 2] = $114; //@line 15013
   $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 15014
   HEAP32[$309 >> 2] = $116; //@line 15015
   sp = STACKTOP; //@line 15016
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 15020
  ___async_unwind = 0; //@line 15021
  HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 15022
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 15023
  HEAP8[$252 >> 0] = $2; //@line 15024
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 15025
  HEAP32[$253 >> 2] = $4; //@line 15026
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 15027
  HEAP8[$254 >> 0] = $6; //@line 15028
  $255 = $ReallocAsyncCtx2 + 13 | 0; //@line 15029
  HEAP8[$255 >> 0] = $8; //@line 15030
  $256 = $ReallocAsyncCtx2 + 16 | 0; //@line 15031
  HEAP32[$256 >> 2] = $10; //@line 15032
  $257 = $ReallocAsyncCtx2 + 20 | 0; //@line 15033
  HEAP32[$257 >> 2] = $12; //@line 15034
  $258 = $ReallocAsyncCtx2 + 24 | 0; //@line 15035
  HEAP32[$258 >> 2] = $14; //@line 15036
  $259 = $ReallocAsyncCtx2 + 28 | 0; //@line 15037
  HEAP32[$259 >> 2] = $16; //@line 15038
  $260 = $ReallocAsyncCtx2 + 32 | 0; //@line 15039
  HEAP32[$260 >> 2] = $18; //@line 15040
  $261 = $ReallocAsyncCtx2 + 36 | 0; //@line 15041
  HEAP32[$261 >> 2] = $20; //@line 15042
  $262 = $ReallocAsyncCtx2 + 40 | 0; //@line 15043
  HEAP32[$262 >> 2] = $22; //@line 15044
  $263 = $ReallocAsyncCtx2 + 44 | 0; //@line 15045
  HEAP32[$263 >> 2] = $24; //@line 15046
  $264 = $ReallocAsyncCtx2 + 48 | 0; //@line 15047
  HEAP32[$264 >> 2] = $26; //@line 15048
  $265 = $ReallocAsyncCtx2 + 52 | 0; //@line 15049
  HEAP32[$265 >> 2] = $28; //@line 15050
  $266 = $ReallocAsyncCtx2 + 56 | 0; //@line 15051
  HEAP32[$266 >> 2] = $30; //@line 15052
  $267 = $ReallocAsyncCtx2 + 60 | 0; //@line 15053
  HEAP32[$267 >> 2] = $32; //@line 15054
  $268 = $ReallocAsyncCtx2 + 64 | 0; //@line 15055
  HEAP32[$268 >> 2] = $34; //@line 15056
  $269 = $ReallocAsyncCtx2 + 68 | 0; //@line 15057
  HEAP32[$269 >> 2] = $36; //@line 15058
  $270 = $ReallocAsyncCtx2 + 72 | 0; //@line 15059
  HEAP8[$270 >> 0] = $240; //@line 15060
  $271 = $ReallocAsyncCtx2 + 76 | 0; //@line 15061
  HEAP32[$271 >> 2] = $38; //@line 15062
  $272 = $ReallocAsyncCtx2 + 80 | 0; //@line 15063
  HEAP32[$272 >> 2] = $40; //@line 15064
  $273 = $ReallocAsyncCtx2 + 84 | 0; //@line 15065
  HEAP32[$273 >> 2] = $42; //@line 15066
  $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 15067
  HEAP32[$274 >> 2] = $44; //@line 15068
  $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 15069
  HEAP32[$275 >> 2] = $46; //@line 15070
  $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 15071
  HEAP32[$276 >> 2] = $48; //@line 15072
  $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 15073
  HEAP32[$277 >> 2] = $50; //@line 15074
  $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 15075
  HEAP32[$278 >> 2] = $52; //@line 15076
  $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 15077
  HEAP32[$279 >> 2] = $56; //@line 15078
  $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 15079
  HEAP32[$280 >> 2] = $58; //@line 15080
  $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 15081
  HEAP32[$281 >> 2] = $60; //@line 15082
  $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 15083
  HEAP32[$282 >> 2] = $62; //@line 15084
  $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 15085
  HEAP32[$283 >> 2] = $64; //@line 15086
  $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 15087
  HEAP32[$284 >> 2] = $66; //@line 15088
  $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 15089
  HEAP32[$285 >> 2] = $68; //@line 15090
  $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 15091
  HEAP32[$286 >> 2] = $70; //@line 15092
  $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 15093
  HEAP32[$287 >> 2] = $72; //@line 15094
  $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 15095
  HEAP32[$288 >> 2] = $74; //@line 15096
  $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 15097
  HEAP32[$289 >> 2] = $76; //@line 15098
  $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 15099
  HEAP32[$290 >> 2] = $78; //@line 15100
  $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 15101
  HEAP32[$291 >> 2] = $80; //@line 15102
  $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 15103
  HEAP32[$292 >> 2] = $82; //@line 15104
  $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 15105
  HEAP32[$293 >> 2] = $84; //@line 15106
  $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 15107
  HEAP32[$294 >> 2] = $86; //@line 15108
  $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 15109
  HEAP32[$295 >> 2] = $88; //@line 15110
  $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 15111
  HEAP32[$296 >> 2] = $90; //@line 15112
  $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 15113
  HEAP32[$297 >> 2] = $92; //@line 15114
  $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 15115
  HEAP32[$298 >> 2] = $94; //@line 15116
  $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 15117
  HEAP32[$299 >> 2] = $96; //@line 15118
  $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 15119
  HEAP32[$300 >> 2] = $98; //@line 15120
  $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 15121
  HEAP32[$301 >> 2] = $100; //@line 15122
  $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 15123
  HEAP32[$302 >> 2] = $102; //@line 15124
  $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 15125
  HEAP32[$303 >> 2] = $104; //@line 15126
  $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 15127
  HEAP32[$304 >> 2] = $106; //@line 15128
  $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 15129
  HEAP32[$305 >> 2] = $108; //@line 15130
  $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 15131
  HEAP32[$306 >> 2] = $110; //@line 15132
  $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 15133
  HEAP32[$307 >> 2] = $112; //@line 15134
  $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 15135
  HEAP32[$308 >> 2] = $114; //@line 15136
  $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 15137
  HEAP32[$309 >> 2] = $116; //@line 15138
  sp = STACKTOP; //@line 15139
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 15143
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 15144
  $314 = FUNCTION_TABLE_ii[$313 & 15]($26) | 0; //@line 15145
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 15148
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 15149
   HEAP8[$315 >> 0] = $2; //@line 15150
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 15151
   HEAP32[$316 >> 2] = $4; //@line 15152
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 15153
   HEAP8[$317 >> 0] = $6; //@line 15154
   $318 = $ReallocAsyncCtx3 + 13 | 0; //@line 15155
   HEAP8[$318 >> 0] = $8; //@line 15156
   $319 = $ReallocAsyncCtx3 + 16 | 0; //@line 15157
   HEAP32[$319 >> 2] = $10; //@line 15158
   $320 = $ReallocAsyncCtx3 + 20 | 0; //@line 15159
   HEAP32[$320 >> 2] = $12; //@line 15160
   $321 = $ReallocAsyncCtx3 + 24 | 0; //@line 15161
   HEAP32[$321 >> 2] = $14; //@line 15162
   $322 = $ReallocAsyncCtx3 + 28 | 0; //@line 15163
   HEAP32[$322 >> 2] = $16; //@line 15164
   $323 = $ReallocAsyncCtx3 + 32 | 0; //@line 15165
   HEAP32[$323 >> 2] = $18; //@line 15166
   $324 = $ReallocAsyncCtx3 + 36 | 0; //@line 15167
   HEAP32[$324 >> 2] = $20; //@line 15168
   $325 = $ReallocAsyncCtx3 + 40 | 0; //@line 15169
   HEAP32[$325 >> 2] = $22; //@line 15170
   $326 = $ReallocAsyncCtx3 + 44 | 0; //@line 15171
   HEAP32[$326 >> 2] = $24; //@line 15172
   $327 = $ReallocAsyncCtx3 + 48 | 0; //@line 15173
   HEAP32[$327 >> 2] = $26; //@line 15174
   $328 = $ReallocAsyncCtx3 + 52 | 0; //@line 15175
   HEAP32[$328 >> 2] = $28; //@line 15176
   $329 = $ReallocAsyncCtx3 + 56 | 0; //@line 15177
   HEAP32[$329 >> 2] = $30; //@line 15178
   $330 = $ReallocAsyncCtx3 + 60 | 0; //@line 15179
   HEAP32[$330 >> 2] = $32; //@line 15180
   $331 = $ReallocAsyncCtx3 + 64 | 0; //@line 15181
   HEAP32[$331 >> 2] = $34; //@line 15182
   $332 = $ReallocAsyncCtx3 + 68 | 0; //@line 15183
   HEAP32[$332 >> 2] = $36; //@line 15184
   $333 = $ReallocAsyncCtx3 + 72 | 0; //@line 15185
   HEAP32[$333 >> 2] = $38; //@line 15186
   $334 = $ReallocAsyncCtx3 + 76 | 0; //@line 15187
   HEAP32[$334 >> 2] = $40; //@line 15188
   $335 = $ReallocAsyncCtx3 + 80 | 0; //@line 15189
   HEAP32[$335 >> 2] = $42; //@line 15190
   $336 = $ReallocAsyncCtx3 + 84 | 0; //@line 15191
   HEAP32[$336 >> 2] = $44; //@line 15192
   $337 = $ReallocAsyncCtx3 + 88 | 0; //@line 15193
   HEAP32[$337 >> 2] = $46; //@line 15194
   $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 15195
   HEAP32[$338 >> 2] = $48; //@line 15196
   $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 15197
   HEAP32[$339 >> 2] = $50; //@line 15198
   $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 15199
   HEAP32[$340 >> 2] = $52; //@line 15200
   $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 15201
   HEAP8[$341 >> 0] = $119; //@line 15202
   $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 15203
   HEAP32[$342 >> 2] = $56; //@line 15204
   $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 15205
   HEAP32[$343 >> 2] = $58; //@line 15206
   $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 15207
   HEAP32[$344 >> 2] = $60; //@line 15208
   $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 15209
   HEAP32[$345 >> 2] = $62; //@line 15210
   $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 15211
   HEAP32[$346 >> 2] = $64; //@line 15212
   $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 15213
   HEAP32[$347 >> 2] = $66; //@line 15214
   $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 15215
   HEAP32[$348 >> 2] = $68; //@line 15216
   $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 15217
   HEAP32[$349 >> 2] = $70; //@line 15218
   $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 15219
   HEAP32[$350 >> 2] = $72; //@line 15220
   $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 15221
   HEAP32[$351 >> 2] = $74; //@line 15222
   $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 15223
   HEAP32[$352 >> 2] = $76; //@line 15224
   $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 15225
   HEAP32[$353 >> 2] = $78; //@line 15226
   $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 15227
   HEAP32[$354 >> 2] = $80; //@line 15228
   $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 15229
   HEAP32[$355 >> 2] = $82; //@line 15230
   $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 15231
   HEAP32[$356 >> 2] = $84; //@line 15232
   $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 15233
   HEAP32[$357 >> 2] = $86; //@line 15234
   $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 15235
   HEAP32[$358 >> 2] = $88; //@line 15236
   $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 15237
   HEAP32[$359 >> 2] = $90; //@line 15238
   $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 15239
   HEAP32[$360 >> 2] = $92; //@line 15240
   $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 15241
   HEAP32[$361 >> 2] = $94; //@line 15242
   $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 15243
   HEAP32[$362 >> 2] = $96; //@line 15244
   $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 15245
   HEAP32[$363 >> 2] = $98; //@line 15246
   $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 15247
   HEAP32[$364 >> 2] = $100; //@line 15248
   $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 15249
   HEAP32[$365 >> 2] = $102; //@line 15250
   $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 15251
   HEAP32[$366 >> 2] = $104; //@line 15252
   $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 15253
   HEAP32[$367 >> 2] = $106; //@line 15254
   $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 15255
   HEAP32[$368 >> 2] = $108; //@line 15256
   $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 15257
   HEAP32[$369 >> 2] = $110; //@line 15258
   $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 15259
   HEAP32[$370 >> 2] = $112; //@line 15260
   $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 15261
   HEAP32[$371 >> 2] = $114; //@line 15262
   $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 15263
   HEAP32[$372 >> 2] = $116; //@line 15264
   sp = STACKTOP; //@line 15265
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 15269
  ___async_unwind = 0; //@line 15270
  HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 15271
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 15272
  HEAP8[$315 >> 0] = $2; //@line 15273
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 15274
  HEAP32[$316 >> 2] = $4; //@line 15275
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 15276
  HEAP8[$317 >> 0] = $6; //@line 15277
  $318 = $ReallocAsyncCtx3 + 13 | 0; //@line 15278
  HEAP8[$318 >> 0] = $8; //@line 15279
  $319 = $ReallocAsyncCtx3 + 16 | 0; //@line 15280
  HEAP32[$319 >> 2] = $10; //@line 15281
  $320 = $ReallocAsyncCtx3 + 20 | 0; //@line 15282
  HEAP32[$320 >> 2] = $12; //@line 15283
  $321 = $ReallocAsyncCtx3 + 24 | 0; //@line 15284
  HEAP32[$321 >> 2] = $14; //@line 15285
  $322 = $ReallocAsyncCtx3 + 28 | 0; //@line 15286
  HEAP32[$322 >> 2] = $16; //@line 15287
  $323 = $ReallocAsyncCtx3 + 32 | 0; //@line 15288
  HEAP32[$323 >> 2] = $18; //@line 15289
  $324 = $ReallocAsyncCtx3 + 36 | 0; //@line 15290
  HEAP32[$324 >> 2] = $20; //@line 15291
  $325 = $ReallocAsyncCtx3 + 40 | 0; //@line 15292
  HEAP32[$325 >> 2] = $22; //@line 15293
  $326 = $ReallocAsyncCtx3 + 44 | 0; //@line 15294
  HEAP32[$326 >> 2] = $24; //@line 15295
  $327 = $ReallocAsyncCtx3 + 48 | 0; //@line 15296
  HEAP32[$327 >> 2] = $26; //@line 15297
  $328 = $ReallocAsyncCtx3 + 52 | 0; //@line 15298
  HEAP32[$328 >> 2] = $28; //@line 15299
  $329 = $ReallocAsyncCtx3 + 56 | 0; //@line 15300
  HEAP32[$329 >> 2] = $30; //@line 15301
  $330 = $ReallocAsyncCtx3 + 60 | 0; //@line 15302
  HEAP32[$330 >> 2] = $32; //@line 15303
  $331 = $ReallocAsyncCtx3 + 64 | 0; //@line 15304
  HEAP32[$331 >> 2] = $34; //@line 15305
  $332 = $ReallocAsyncCtx3 + 68 | 0; //@line 15306
  HEAP32[$332 >> 2] = $36; //@line 15307
  $333 = $ReallocAsyncCtx3 + 72 | 0; //@line 15308
  HEAP32[$333 >> 2] = $38; //@line 15309
  $334 = $ReallocAsyncCtx3 + 76 | 0; //@line 15310
  HEAP32[$334 >> 2] = $40; //@line 15311
  $335 = $ReallocAsyncCtx3 + 80 | 0; //@line 15312
  HEAP32[$335 >> 2] = $42; //@line 15313
  $336 = $ReallocAsyncCtx3 + 84 | 0; //@line 15314
  HEAP32[$336 >> 2] = $44; //@line 15315
  $337 = $ReallocAsyncCtx3 + 88 | 0; //@line 15316
  HEAP32[$337 >> 2] = $46; //@line 15317
  $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 15318
  HEAP32[$338 >> 2] = $48; //@line 15319
  $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 15320
  HEAP32[$339 >> 2] = $50; //@line 15321
  $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 15322
  HEAP32[$340 >> 2] = $52; //@line 15323
  $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 15324
  HEAP8[$341 >> 0] = $119; //@line 15325
  $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 15326
  HEAP32[$342 >> 2] = $56; //@line 15327
  $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 15328
  HEAP32[$343 >> 2] = $58; //@line 15329
  $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 15330
  HEAP32[$344 >> 2] = $60; //@line 15331
  $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 15332
  HEAP32[$345 >> 2] = $62; //@line 15333
  $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 15334
  HEAP32[$346 >> 2] = $64; //@line 15335
  $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 15336
  HEAP32[$347 >> 2] = $66; //@line 15337
  $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 15338
  HEAP32[$348 >> 2] = $68; //@line 15339
  $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 15340
  HEAP32[$349 >> 2] = $70; //@line 15341
  $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 15342
  HEAP32[$350 >> 2] = $72; //@line 15343
  $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 15344
  HEAP32[$351 >> 2] = $74; //@line 15345
  $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 15346
  HEAP32[$352 >> 2] = $76; //@line 15347
  $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 15348
  HEAP32[$353 >> 2] = $78; //@line 15349
  $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 15350
  HEAP32[$354 >> 2] = $80; //@line 15351
  $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 15352
  HEAP32[$355 >> 2] = $82; //@line 15353
  $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 15354
  HEAP32[$356 >> 2] = $84; //@line 15355
  $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 15356
  HEAP32[$357 >> 2] = $86; //@line 15357
  $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 15358
  HEAP32[$358 >> 2] = $88; //@line 15359
  $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 15360
  HEAP32[$359 >> 2] = $90; //@line 15361
  $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 15362
  HEAP32[$360 >> 2] = $92; //@line 15363
  $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 15364
  HEAP32[$361 >> 2] = $94; //@line 15365
  $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 15366
  HEAP32[$362 >> 2] = $96; //@line 15367
  $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 15368
  HEAP32[$363 >> 2] = $98; //@line 15369
  $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 15370
  HEAP32[$364 >> 2] = $100; //@line 15371
  $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 15372
  HEAP32[$365 >> 2] = $102; //@line 15373
  $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 15374
  HEAP32[$366 >> 2] = $104; //@line 15375
  $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 15376
  HEAP32[$367 >> 2] = $106; //@line 15377
  $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 15378
  HEAP32[$368 >> 2] = $108; //@line 15379
  $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 15380
  HEAP32[$369 >> 2] = $110; //@line 15381
  $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 15382
  HEAP32[$370 >> 2] = $112; //@line 15383
  $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 15384
  HEAP32[$371 >> 2] = $114; //@line 15385
  $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 15386
  HEAP32[$372 >> 2] = $116; //@line 15387
  sp = STACKTOP; //@line 15388
  return;
 } else if ((label | 0) == 19) {
  $392 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 15395
  HEAP32[$38 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 15416
  HEAP32[$56 >> 2] = 0; //@line 15417
  $413 = $$0$be + 6 << 24 >> 24; //@line 15418
  HEAP8[$44 >> 0] = HEAP8[$14 + ($$0$be + 5 & 255) >> 0] | 0; //@line 15422
  $419 = HEAP32[(HEAP32[$82 >> 2] | 0) + 8 >> 2] | 0; //@line 15425
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 15426
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($28, $392, $78) | 0; //@line 15427
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 15430
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 15431
   HEAP8[$421 >> 0] = $2; //@line 15432
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 15433
   HEAP32[$422 >> 2] = $4; //@line 15434
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 15435
   HEAP8[$423 >> 0] = $6; //@line 15436
   $424 = $ReallocAsyncCtx4 + 13 | 0; //@line 15437
   HEAP8[$424 >> 0] = $8; //@line 15438
   $425 = $ReallocAsyncCtx4 + 16 | 0; //@line 15439
   HEAP32[$425 >> 2] = $10; //@line 15440
   $426 = $ReallocAsyncCtx4 + 20 | 0; //@line 15441
   HEAP32[$426 >> 2] = $12; //@line 15442
   $427 = $ReallocAsyncCtx4 + 24 | 0; //@line 15443
   HEAP32[$427 >> 2] = $14; //@line 15444
   $428 = $ReallocAsyncCtx4 + 28 | 0; //@line 15445
   HEAP32[$428 >> 2] = $16; //@line 15446
   $429 = $ReallocAsyncCtx4 + 32 | 0; //@line 15447
   HEAP32[$429 >> 2] = $18; //@line 15448
   $430 = $ReallocAsyncCtx4 + 36 | 0; //@line 15449
   HEAP32[$430 >> 2] = $20; //@line 15450
   $431 = $ReallocAsyncCtx4 + 40 | 0; //@line 15451
   HEAP32[$431 >> 2] = $22; //@line 15452
   $432 = $ReallocAsyncCtx4 + 44 | 0; //@line 15453
   HEAP32[$432 >> 2] = $24; //@line 15454
   $433 = $ReallocAsyncCtx4 + 48 | 0; //@line 15455
   HEAP32[$433 >> 2] = $26; //@line 15456
   $434 = $ReallocAsyncCtx4 + 52 | 0; //@line 15457
   HEAP32[$434 >> 2] = $28; //@line 15458
   $435 = $ReallocAsyncCtx4 + 56 | 0; //@line 15459
   HEAP32[$435 >> 2] = $30; //@line 15460
   $436 = $ReallocAsyncCtx4 + 60 | 0; //@line 15461
   HEAP32[$436 >> 2] = $32; //@line 15462
   $437 = $ReallocAsyncCtx4 + 64 | 0; //@line 15463
   HEAP32[$437 >> 2] = $34; //@line 15464
   $438 = $ReallocAsyncCtx4 + 68 | 0; //@line 15465
   HEAP32[$438 >> 2] = $36; //@line 15466
   $439 = $ReallocAsyncCtx4 + 72 | 0; //@line 15467
   HEAP8[$439 >> 0] = $413; //@line 15468
   $440 = $ReallocAsyncCtx4 + 76 | 0; //@line 15469
   HEAP32[$440 >> 2] = $38; //@line 15470
   $441 = $ReallocAsyncCtx4 + 80 | 0; //@line 15471
   HEAP32[$441 >> 2] = $40; //@line 15472
   $442 = $ReallocAsyncCtx4 + 84 | 0; //@line 15473
   HEAP32[$442 >> 2] = $42; //@line 15474
   $443 = $ReallocAsyncCtx4 + 88 | 0; //@line 15475
   HEAP32[$443 >> 2] = $44; //@line 15476
   $444 = $ReallocAsyncCtx4 + 92 | 0; //@line 15477
   HEAP32[$444 >> 2] = $46; //@line 15478
   $445 = $ReallocAsyncCtx4 + 96 | 0; //@line 15479
   HEAP32[$445 >> 2] = $48; //@line 15480
   $446 = $ReallocAsyncCtx4 + 100 | 0; //@line 15481
   HEAP32[$446 >> 2] = $50; //@line 15482
   $447 = $ReallocAsyncCtx4 + 104 | 0; //@line 15483
   HEAP32[$447 >> 2] = $52; //@line 15484
   $448 = $ReallocAsyncCtx4 + 108 | 0; //@line 15485
   HEAP32[$448 >> 2] = $56; //@line 15486
   $449 = $ReallocAsyncCtx4 + 112 | 0; //@line 15487
   HEAP32[$449 >> 2] = $58; //@line 15488
   $450 = $ReallocAsyncCtx4 + 116 | 0; //@line 15489
   HEAP32[$450 >> 2] = $60; //@line 15490
   $451 = $ReallocAsyncCtx4 + 120 | 0; //@line 15491
   HEAP32[$451 >> 2] = $62; //@line 15492
   $452 = $ReallocAsyncCtx4 + 124 | 0; //@line 15493
   HEAP32[$452 >> 2] = $64; //@line 15494
   $453 = $ReallocAsyncCtx4 + 128 | 0; //@line 15495
   HEAP32[$453 >> 2] = $66; //@line 15496
   $454 = $ReallocAsyncCtx4 + 132 | 0; //@line 15497
   HEAP32[$454 >> 2] = $68; //@line 15498
   $455 = $ReallocAsyncCtx4 + 136 | 0; //@line 15499
   HEAP32[$455 >> 2] = $70; //@line 15500
   $456 = $ReallocAsyncCtx4 + 140 | 0; //@line 15501
   HEAP32[$456 >> 2] = $72; //@line 15502
   $457 = $ReallocAsyncCtx4 + 144 | 0; //@line 15503
   HEAP32[$457 >> 2] = $74; //@line 15504
   $458 = $ReallocAsyncCtx4 + 148 | 0; //@line 15505
   HEAP32[$458 >> 2] = $76; //@line 15506
   $459 = $ReallocAsyncCtx4 + 152 | 0; //@line 15507
   HEAP32[$459 >> 2] = $78; //@line 15508
   $460 = $ReallocAsyncCtx4 + 156 | 0; //@line 15509
   HEAP32[$460 >> 2] = $80; //@line 15510
   $461 = $ReallocAsyncCtx4 + 160 | 0; //@line 15511
   HEAP32[$461 >> 2] = $82; //@line 15512
   $462 = $ReallocAsyncCtx4 + 164 | 0; //@line 15513
   HEAP32[$462 >> 2] = $84; //@line 15514
   $463 = $ReallocAsyncCtx4 + 168 | 0; //@line 15515
   HEAP32[$463 >> 2] = $86; //@line 15516
   $464 = $ReallocAsyncCtx4 + 172 | 0; //@line 15517
   HEAP32[$464 >> 2] = $88; //@line 15518
   $465 = $ReallocAsyncCtx4 + 176 | 0; //@line 15519
   HEAP32[$465 >> 2] = $90; //@line 15520
   $466 = $ReallocAsyncCtx4 + 180 | 0; //@line 15521
   HEAP32[$466 >> 2] = $92; //@line 15522
   $467 = $ReallocAsyncCtx4 + 184 | 0; //@line 15523
   HEAP32[$467 >> 2] = $94; //@line 15524
   $468 = $ReallocAsyncCtx4 + 188 | 0; //@line 15525
   HEAP32[$468 >> 2] = $96; //@line 15526
   $469 = $ReallocAsyncCtx4 + 192 | 0; //@line 15527
   HEAP32[$469 >> 2] = $98; //@line 15528
   $470 = $ReallocAsyncCtx4 + 196 | 0; //@line 15529
   HEAP32[$470 >> 2] = $100; //@line 15530
   $471 = $ReallocAsyncCtx4 + 200 | 0; //@line 15531
   HEAP32[$471 >> 2] = $102; //@line 15532
   $472 = $ReallocAsyncCtx4 + 204 | 0; //@line 15533
   HEAP32[$472 >> 2] = $104; //@line 15534
   $473 = $ReallocAsyncCtx4 + 208 | 0; //@line 15535
   HEAP32[$473 >> 2] = $106; //@line 15536
   $474 = $ReallocAsyncCtx4 + 212 | 0; //@line 15537
   HEAP32[$474 >> 2] = $108; //@line 15538
   $475 = $ReallocAsyncCtx4 + 216 | 0; //@line 15539
   HEAP32[$475 >> 2] = $110; //@line 15540
   $476 = $ReallocAsyncCtx4 + 220 | 0; //@line 15541
   HEAP32[$476 >> 2] = $112; //@line 15542
   $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 15543
   HEAP32[$477 >> 2] = $114; //@line 15544
   $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 15545
   HEAP32[$478 >> 2] = $116; //@line 15546
   sp = STACKTOP; //@line 15547
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 15551
  ___async_unwind = 0; //@line 15552
  HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 15553
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 15554
  HEAP8[$421 >> 0] = $2; //@line 15555
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 15556
  HEAP32[$422 >> 2] = $4; //@line 15557
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 15558
  HEAP8[$423 >> 0] = $6; //@line 15559
  $424 = $ReallocAsyncCtx4 + 13 | 0; //@line 15560
  HEAP8[$424 >> 0] = $8; //@line 15561
  $425 = $ReallocAsyncCtx4 + 16 | 0; //@line 15562
  HEAP32[$425 >> 2] = $10; //@line 15563
  $426 = $ReallocAsyncCtx4 + 20 | 0; //@line 15564
  HEAP32[$426 >> 2] = $12; //@line 15565
  $427 = $ReallocAsyncCtx4 + 24 | 0; //@line 15566
  HEAP32[$427 >> 2] = $14; //@line 15567
  $428 = $ReallocAsyncCtx4 + 28 | 0; //@line 15568
  HEAP32[$428 >> 2] = $16; //@line 15569
  $429 = $ReallocAsyncCtx4 + 32 | 0; //@line 15570
  HEAP32[$429 >> 2] = $18; //@line 15571
  $430 = $ReallocAsyncCtx4 + 36 | 0; //@line 15572
  HEAP32[$430 >> 2] = $20; //@line 15573
  $431 = $ReallocAsyncCtx4 + 40 | 0; //@line 15574
  HEAP32[$431 >> 2] = $22; //@line 15575
  $432 = $ReallocAsyncCtx4 + 44 | 0; //@line 15576
  HEAP32[$432 >> 2] = $24; //@line 15577
  $433 = $ReallocAsyncCtx4 + 48 | 0; //@line 15578
  HEAP32[$433 >> 2] = $26; //@line 15579
  $434 = $ReallocAsyncCtx4 + 52 | 0; //@line 15580
  HEAP32[$434 >> 2] = $28; //@line 15581
  $435 = $ReallocAsyncCtx4 + 56 | 0; //@line 15582
  HEAP32[$435 >> 2] = $30; //@line 15583
  $436 = $ReallocAsyncCtx4 + 60 | 0; //@line 15584
  HEAP32[$436 >> 2] = $32; //@line 15585
  $437 = $ReallocAsyncCtx4 + 64 | 0; //@line 15586
  HEAP32[$437 >> 2] = $34; //@line 15587
  $438 = $ReallocAsyncCtx4 + 68 | 0; //@line 15588
  HEAP32[$438 >> 2] = $36; //@line 15589
  $439 = $ReallocAsyncCtx4 + 72 | 0; //@line 15590
  HEAP8[$439 >> 0] = $413; //@line 15591
  $440 = $ReallocAsyncCtx4 + 76 | 0; //@line 15592
  HEAP32[$440 >> 2] = $38; //@line 15593
  $441 = $ReallocAsyncCtx4 + 80 | 0; //@line 15594
  HEAP32[$441 >> 2] = $40; //@line 15595
  $442 = $ReallocAsyncCtx4 + 84 | 0; //@line 15596
  HEAP32[$442 >> 2] = $42; //@line 15597
  $443 = $ReallocAsyncCtx4 + 88 | 0; //@line 15598
  HEAP32[$443 >> 2] = $44; //@line 15599
  $444 = $ReallocAsyncCtx4 + 92 | 0; //@line 15600
  HEAP32[$444 >> 2] = $46; //@line 15601
  $445 = $ReallocAsyncCtx4 + 96 | 0; //@line 15602
  HEAP32[$445 >> 2] = $48; //@line 15603
  $446 = $ReallocAsyncCtx4 + 100 | 0; //@line 15604
  HEAP32[$446 >> 2] = $50; //@line 15605
  $447 = $ReallocAsyncCtx4 + 104 | 0; //@line 15606
  HEAP32[$447 >> 2] = $52; //@line 15607
  $448 = $ReallocAsyncCtx4 + 108 | 0; //@line 15608
  HEAP32[$448 >> 2] = $56; //@line 15609
  $449 = $ReallocAsyncCtx4 + 112 | 0; //@line 15610
  HEAP32[$449 >> 2] = $58; //@line 15611
  $450 = $ReallocAsyncCtx4 + 116 | 0; //@line 15612
  HEAP32[$450 >> 2] = $60; //@line 15613
  $451 = $ReallocAsyncCtx4 + 120 | 0; //@line 15614
  HEAP32[$451 >> 2] = $62; //@line 15615
  $452 = $ReallocAsyncCtx4 + 124 | 0; //@line 15616
  HEAP32[$452 >> 2] = $64; //@line 15617
  $453 = $ReallocAsyncCtx4 + 128 | 0; //@line 15618
  HEAP32[$453 >> 2] = $66; //@line 15619
  $454 = $ReallocAsyncCtx4 + 132 | 0; //@line 15620
  HEAP32[$454 >> 2] = $68; //@line 15621
  $455 = $ReallocAsyncCtx4 + 136 | 0; //@line 15622
  HEAP32[$455 >> 2] = $70; //@line 15623
  $456 = $ReallocAsyncCtx4 + 140 | 0; //@line 15624
  HEAP32[$456 >> 2] = $72; //@line 15625
  $457 = $ReallocAsyncCtx4 + 144 | 0; //@line 15626
  HEAP32[$457 >> 2] = $74; //@line 15627
  $458 = $ReallocAsyncCtx4 + 148 | 0; //@line 15628
  HEAP32[$458 >> 2] = $76; //@line 15629
  $459 = $ReallocAsyncCtx4 + 152 | 0; //@line 15630
  HEAP32[$459 >> 2] = $78; //@line 15631
  $460 = $ReallocAsyncCtx4 + 156 | 0; //@line 15632
  HEAP32[$460 >> 2] = $80; //@line 15633
  $461 = $ReallocAsyncCtx4 + 160 | 0; //@line 15634
  HEAP32[$461 >> 2] = $82; //@line 15635
  $462 = $ReallocAsyncCtx4 + 164 | 0; //@line 15636
  HEAP32[$462 >> 2] = $84; //@line 15637
  $463 = $ReallocAsyncCtx4 + 168 | 0; //@line 15638
  HEAP32[$463 >> 2] = $86; //@line 15639
  $464 = $ReallocAsyncCtx4 + 172 | 0; //@line 15640
  HEAP32[$464 >> 2] = $88; //@line 15641
  $465 = $ReallocAsyncCtx4 + 176 | 0; //@line 15642
  HEAP32[$465 >> 2] = $90; //@line 15643
  $466 = $ReallocAsyncCtx4 + 180 | 0; //@line 15644
  HEAP32[$466 >> 2] = $92; //@line 15645
  $467 = $ReallocAsyncCtx4 + 184 | 0; //@line 15646
  HEAP32[$467 >> 2] = $94; //@line 15647
  $468 = $ReallocAsyncCtx4 + 188 | 0; //@line 15648
  HEAP32[$468 >> 2] = $96; //@line 15649
  $469 = $ReallocAsyncCtx4 + 192 | 0; //@line 15650
  HEAP32[$469 >> 2] = $98; //@line 15651
  $470 = $ReallocAsyncCtx4 + 196 | 0; //@line 15652
  HEAP32[$470 >> 2] = $100; //@line 15653
  $471 = $ReallocAsyncCtx4 + 200 | 0; //@line 15654
  HEAP32[$471 >> 2] = $102; //@line 15655
  $472 = $ReallocAsyncCtx4 + 204 | 0; //@line 15656
  HEAP32[$472 >> 2] = $104; //@line 15657
  $473 = $ReallocAsyncCtx4 + 208 | 0; //@line 15658
  HEAP32[$473 >> 2] = $106; //@line 15659
  $474 = $ReallocAsyncCtx4 + 212 | 0; //@line 15660
  HEAP32[$474 >> 2] = $108; //@line 15661
  $475 = $ReallocAsyncCtx4 + 216 | 0; //@line 15662
  HEAP32[$475 >> 2] = $110; //@line 15663
  $476 = $ReallocAsyncCtx4 + 220 | 0; //@line 15664
  HEAP32[$476 >> 2] = $112; //@line 15665
  $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 15666
  HEAP32[$477 >> 2] = $114; //@line 15667
  $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 15668
  HEAP32[$478 >> 2] = $116; //@line 15669
  sp = STACKTOP; //@line 15670
  return;
 } else if ((label | 0) == 25) {
  $499 = $$0$be + 2 << 24 >> 24; //@line 15674
  $503 = HEAPU8[$14 + ($119 & 255) >> 0] | 0; //@line 15678
  $505 = $503 >>> 5 & 1; //@line 15681
  $507 = $503 >>> 4 & 1; //@line 15684
  $510 = HEAP32[(HEAP32[$76 >> 2] | 0) + 44 >> 2] | 0; //@line 15687
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 15688
  $511 = FUNCTION_TABLE_iiii[$510 & 31]($28, $507, $505) | 0; //@line 15689
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 15692
   $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 15693
   HEAP8[$512 >> 0] = $2; //@line 15694
   $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 15695
   HEAP32[$513 >> 2] = $4; //@line 15696
   $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 15697
   HEAP8[$514 >> 0] = $6; //@line 15698
   $515 = $ReallocAsyncCtx5 + 13 | 0; //@line 15699
   HEAP8[$515 >> 0] = $8; //@line 15700
   $516 = $ReallocAsyncCtx5 + 16 | 0; //@line 15701
   HEAP32[$516 >> 2] = $10; //@line 15702
   $517 = $ReallocAsyncCtx5 + 20 | 0; //@line 15703
   HEAP32[$517 >> 2] = $12; //@line 15704
   $518 = $ReallocAsyncCtx5 + 24 | 0; //@line 15705
   HEAP32[$518 >> 2] = $14; //@line 15706
   $519 = $ReallocAsyncCtx5 + 28 | 0; //@line 15707
   HEAP8[$519 >> 0] = $505; //@line 15708
   $520 = $ReallocAsyncCtx5 + 32 | 0; //@line 15709
   HEAP32[$520 >> 2] = $16; //@line 15710
   $521 = $ReallocAsyncCtx5 + 36 | 0; //@line 15711
   HEAP32[$521 >> 2] = $18; //@line 15712
   $522 = $ReallocAsyncCtx5 + 40 | 0; //@line 15713
   HEAP32[$522 >> 2] = $20; //@line 15714
   $523 = $ReallocAsyncCtx5 + 44 | 0; //@line 15715
   HEAP32[$523 >> 2] = $22; //@line 15716
   $524 = $ReallocAsyncCtx5 + 48 | 0; //@line 15717
   HEAP32[$524 >> 2] = $24; //@line 15718
   $525 = $ReallocAsyncCtx5 + 52 | 0; //@line 15719
   HEAP32[$525 >> 2] = $26; //@line 15720
   $526 = $ReallocAsyncCtx5 + 56 | 0; //@line 15721
   HEAP32[$526 >> 2] = $28; //@line 15722
   $527 = $ReallocAsyncCtx5 + 60 | 0; //@line 15723
   HEAP32[$527 >> 2] = $$0107$be; //@line 15724
   $528 = $ReallocAsyncCtx5 + 64 | 0; //@line 15725
   HEAP32[$528 >> 2] = $30; //@line 15726
   $529 = $ReallocAsyncCtx5 + 68 | 0; //@line 15727
   HEAP32[$529 >> 2] = $32; //@line 15728
   $530 = $ReallocAsyncCtx5 + 72 | 0; //@line 15729
   HEAP32[$530 >> 2] = $34; //@line 15730
   $531 = $ReallocAsyncCtx5 + 76 | 0; //@line 15731
   HEAP32[$531 >> 2] = $36; //@line 15732
   $532 = $ReallocAsyncCtx5 + 80 | 0; //@line 15733
   HEAP32[$532 >> 2] = $38; //@line 15734
   $533 = $ReallocAsyncCtx5 + 84 | 0; //@line 15735
   HEAP8[$533 >> 0] = $499; //@line 15736
   $534 = $ReallocAsyncCtx5 + 88 | 0; //@line 15737
   HEAP32[$534 >> 2] = $40; //@line 15738
   $535 = $ReallocAsyncCtx5 + 92 | 0; //@line 15739
   HEAP32[$535 >> 2] = $42; //@line 15740
   $536 = $ReallocAsyncCtx5 + 96 | 0; //@line 15741
   HEAP32[$536 >> 2] = $44; //@line 15742
   $537 = $ReallocAsyncCtx5 + 100 | 0; //@line 15743
   HEAP32[$537 >> 2] = $46; //@line 15744
   $538 = $ReallocAsyncCtx5 + 104 | 0; //@line 15745
   HEAP32[$538 >> 2] = $48; //@line 15746
   $539 = $ReallocAsyncCtx5 + 108 | 0; //@line 15747
   HEAP32[$539 >> 2] = $50; //@line 15748
   $540 = $ReallocAsyncCtx5 + 112 | 0; //@line 15749
   HEAP32[$540 >> 2] = $52; //@line 15750
   $541 = $ReallocAsyncCtx5 + 116 | 0; //@line 15751
   HEAP32[$541 >> 2] = $56; //@line 15752
   $542 = $ReallocAsyncCtx5 + 120 | 0; //@line 15753
   HEAP32[$542 >> 2] = $58; //@line 15754
   $543 = $ReallocAsyncCtx5 + 124 | 0; //@line 15755
   HEAP32[$543 >> 2] = $60; //@line 15756
   $544 = $ReallocAsyncCtx5 + 128 | 0; //@line 15757
   HEAP32[$544 >> 2] = $62; //@line 15758
   $545 = $ReallocAsyncCtx5 + 132 | 0; //@line 15759
   HEAP32[$545 >> 2] = $64; //@line 15760
   $546 = $ReallocAsyncCtx5 + 136 | 0; //@line 15761
   HEAP32[$546 >> 2] = $66; //@line 15762
   $547 = $ReallocAsyncCtx5 + 140 | 0; //@line 15763
   HEAP32[$547 >> 2] = $68; //@line 15764
   $548 = $ReallocAsyncCtx5 + 144 | 0; //@line 15765
   HEAP32[$548 >> 2] = $70; //@line 15766
   $549 = $ReallocAsyncCtx5 + 148 | 0; //@line 15767
   HEAP32[$549 >> 2] = $72; //@line 15768
   $550 = $ReallocAsyncCtx5 + 152 | 0; //@line 15769
   HEAP32[$550 >> 2] = $74; //@line 15770
   $551 = $ReallocAsyncCtx5 + 156 | 0; //@line 15771
   HEAP32[$551 >> 2] = $76; //@line 15772
   $552 = $ReallocAsyncCtx5 + 160 | 0; //@line 15773
   HEAP32[$552 >> 2] = $78; //@line 15774
   $553 = $ReallocAsyncCtx5 + 164 | 0; //@line 15775
   HEAP32[$553 >> 2] = $80; //@line 15776
   $554 = $ReallocAsyncCtx5 + 168 | 0; //@line 15777
   HEAP32[$554 >> 2] = $82; //@line 15778
   $555 = $ReallocAsyncCtx5 + 172 | 0; //@line 15779
   HEAP32[$555 >> 2] = $84; //@line 15780
   $556 = $ReallocAsyncCtx5 + 176 | 0; //@line 15781
   HEAP32[$556 >> 2] = $86; //@line 15782
   $557 = $ReallocAsyncCtx5 + 180 | 0; //@line 15783
   HEAP32[$557 >> 2] = $88; //@line 15784
   $558 = $ReallocAsyncCtx5 + 184 | 0; //@line 15785
   HEAP32[$558 >> 2] = $90; //@line 15786
   $559 = $ReallocAsyncCtx5 + 188 | 0; //@line 15787
   HEAP8[$559 >> 0] = $507; //@line 15788
   $560 = $ReallocAsyncCtx5 + 192 | 0; //@line 15789
   HEAP32[$560 >> 2] = $92; //@line 15790
   $561 = $ReallocAsyncCtx5 + 196 | 0; //@line 15791
   HEAP32[$561 >> 2] = $94; //@line 15792
   $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 15793
   HEAP32[$562 >> 2] = $96; //@line 15794
   $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 15795
   HEAP32[$563 >> 2] = $98; //@line 15796
   $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 15797
   HEAP32[$564 >> 2] = $100; //@line 15798
   $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 15799
   HEAP32[$565 >> 2] = $102; //@line 15800
   $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 15801
   HEAP32[$566 >> 2] = $503; //@line 15802
   $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 15803
   HEAP32[$567 >> 2] = $104; //@line 15804
   $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 15805
   HEAP32[$568 >> 2] = $106; //@line 15806
   $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 15807
   HEAP32[$569 >> 2] = $108; //@line 15808
   $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 15809
   HEAP32[$570 >> 2] = $110; //@line 15810
   $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 15811
   HEAP32[$571 >> 2] = $112; //@line 15812
   $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 15813
   HEAP32[$572 >> 2] = $114; //@line 15814
   $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 15815
   HEAP32[$573 >> 2] = $116; //@line 15816
   sp = STACKTOP; //@line 15817
   return;
  }
  HEAP8[___async_retval >> 0] = $511 & 1; //@line 15822
  ___async_unwind = 0; //@line 15823
  HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 15824
  $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 15825
  HEAP8[$512 >> 0] = $2; //@line 15826
  $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 15827
  HEAP32[$513 >> 2] = $4; //@line 15828
  $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 15829
  HEAP8[$514 >> 0] = $6; //@line 15830
  $515 = $ReallocAsyncCtx5 + 13 | 0; //@line 15831
  HEAP8[$515 >> 0] = $8; //@line 15832
  $516 = $ReallocAsyncCtx5 + 16 | 0; //@line 15833
  HEAP32[$516 >> 2] = $10; //@line 15834
  $517 = $ReallocAsyncCtx5 + 20 | 0; //@line 15835
  HEAP32[$517 >> 2] = $12; //@line 15836
  $518 = $ReallocAsyncCtx5 + 24 | 0; //@line 15837
  HEAP32[$518 >> 2] = $14; //@line 15838
  $519 = $ReallocAsyncCtx5 + 28 | 0; //@line 15839
  HEAP8[$519 >> 0] = $505; //@line 15840
  $520 = $ReallocAsyncCtx5 + 32 | 0; //@line 15841
  HEAP32[$520 >> 2] = $16; //@line 15842
  $521 = $ReallocAsyncCtx5 + 36 | 0; //@line 15843
  HEAP32[$521 >> 2] = $18; //@line 15844
  $522 = $ReallocAsyncCtx5 + 40 | 0; //@line 15845
  HEAP32[$522 >> 2] = $20; //@line 15846
  $523 = $ReallocAsyncCtx5 + 44 | 0; //@line 15847
  HEAP32[$523 >> 2] = $22; //@line 15848
  $524 = $ReallocAsyncCtx5 + 48 | 0; //@line 15849
  HEAP32[$524 >> 2] = $24; //@line 15850
  $525 = $ReallocAsyncCtx5 + 52 | 0; //@line 15851
  HEAP32[$525 >> 2] = $26; //@line 15852
  $526 = $ReallocAsyncCtx5 + 56 | 0; //@line 15853
  HEAP32[$526 >> 2] = $28; //@line 15854
  $527 = $ReallocAsyncCtx5 + 60 | 0; //@line 15855
  HEAP32[$527 >> 2] = $$0107$be; //@line 15856
  $528 = $ReallocAsyncCtx5 + 64 | 0; //@line 15857
  HEAP32[$528 >> 2] = $30; //@line 15858
  $529 = $ReallocAsyncCtx5 + 68 | 0; //@line 15859
  HEAP32[$529 >> 2] = $32; //@line 15860
  $530 = $ReallocAsyncCtx5 + 72 | 0; //@line 15861
  HEAP32[$530 >> 2] = $34; //@line 15862
  $531 = $ReallocAsyncCtx5 + 76 | 0; //@line 15863
  HEAP32[$531 >> 2] = $36; //@line 15864
  $532 = $ReallocAsyncCtx5 + 80 | 0; //@line 15865
  HEAP32[$532 >> 2] = $38; //@line 15866
  $533 = $ReallocAsyncCtx5 + 84 | 0; //@line 15867
  HEAP8[$533 >> 0] = $499; //@line 15868
  $534 = $ReallocAsyncCtx5 + 88 | 0; //@line 15869
  HEAP32[$534 >> 2] = $40; //@line 15870
  $535 = $ReallocAsyncCtx5 + 92 | 0; //@line 15871
  HEAP32[$535 >> 2] = $42; //@line 15872
  $536 = $ReallocAsyncCtx5 + 96 | 0; //@line 15873
  HEAP32[$536 >> 2] = $44; //@line 15874
  $537 = $ReallocAsyncCtx5 + 100 | 0; //@line 15875
  HEAP32[$537 >> 2] = $46; //@line 15876
  $538 = $ReallocAsyncCtx5 + 104 | 0; //@line 15877
  HEAP32[$538 >> 2] = $48; //@line 15878
  $539 = $ReallocAsyncCtx5 + 108 | 0; //@line 15879
  HEAP32[$539 >> 2] = $50; //@line 15880
  $540 = $ReallocAsyncCtx5 + 112 | 0; //@line 15881
  HEAP32[$540 >> 2] = $52; //@line 15882
  $541 = $ReallocAsyncCtx5 + 116 | 0; //@line 15883
  HEAP32[$541 >> 2] = $56; //@line 15884
  $542 = $ReallocAsyncCtx5 + 120 | 0; //@line 15885
  HEAP32[$542 >> 2] = $58; //@line 15886
  $543 = $ReallocAsyncCtx5 + 124 | 0; //@line 15887
  HEAP32[$543 >> 2] = $60; //@line 15888
  $544 = $ReallocAsyncCtx5 + 128 | 0; //@line 15889
  HEAP32[$544 >> 2] = $62; //@line 15890
  $545 = $ReallocAsyncCtx5 + 132 | 0; //@line 15891
  HEAP32[$545 >> 2] = $64; //@line 15892
  $546 = $ReallocAsyncCtx5 + 136 | 0; //@line 15893
  HEAP32[$546 >> 2] = $66; //@line 15894
  $547 = $ReallocAsyncCtx5 + 140 | 0; //@line 15895
  HEAP32[$547 >> 2] = $68; //@line 15896
  $548 = $ReallocAsyncCtx5 + 144 | 0; //@line 15897
  HEAP32[$548 >> 2] = $70; //@line 15898
  $549 = $ReallocAsyncCtx5 + 148 | 0; //@line 15899
  HEAP32[$549 >> 2] = $72; //@line 15900
  $550 = $ReallocAsyncCtx5 + 152 | 0; //@line 15901
  HEAP32[$550 >> 2] = $74; //@line 15902
  $551 = $ReallocAsyncCtx5 + 156 | 0; //@line 15903
  HEAP32[$551 >> 2] = $76; //@line 15904
  $552 = $ReallocAsyncCtx5 + 160 | 0; //@line 15905
  HEAP32[$552 >> 2] = $78; //@line 15906
  $553 = $ReallocAsyncCtx5 + 164 | 0; //@line 15907
  HEAP32[$553 >> 2] = $80; //@line 15908
  $554 = $ReallocAsyncCtx5 + 168 | 0; //@line 15909
  HEAP32[$554 >> 2] = $82; //@line 15910
  $555 = $ReallocAsyncCtx5 + 172 | 0; //@line 15911
  HEAP32[$555 >> 2] = $84; //@line 15912
  $556 = $ReallocAsyncCtx5 + 176 | 0; //@line 15913
  HEAP32[$556 >> 2] = $86; //@line 15914
  $557 = $ReallocAsyncCtx5 + 180 | 0; //@line 15915
  HEAP32[$557 >> 2] = $88; //@line 15916
  $558 = $ReallocAsyncCtx5 + 184 | 0; //@line 15917
  HEAP32[$558 >> 2] = $90; //@line 15918
  $559 = $ReallocAsyncCtx5 + 188 | 0; //@line 15919
  HEAP8[$559 >> 0] = $507; //@line 15920
  $560 = $ReallocAsyncCtx5 + 192 | 0; //@line 15921
  HEAP32[$560 >> 2] = $92; //@line 15922
  $561 = $ReallocAsyncCtx5 + 196 | 0; //@line 15923
  HEAP32[$561 >> 2] = $94; //@line 15924
  $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 15925
  HEAP32[$562 >> 2] = $96; //@line 15926
  $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 15927
  HEAP32[$563 >> 2] = $98; //@line 15928
  $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 15929
  HEAP32[$564 >> 2] = $100; //@line 15930
  $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 15931
  HEAP32[$565 >> 2] = $102; //@line 15932
  $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 15933
  HEAP32[$566 >> 2] = $503; //@line 15934
  $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 15935
  HEAP32[$567 >> 2] = $104; //@line 15936
  $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 15937
  HEAP32[$568 >> 2] = $106; //@line 15938
  $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 15939
  HEAP32[$569 >> 2] = $108; //@line 15940
  $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 15941
  HEAP32[$570 >> 2] = $110; //@line 15942
  $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 15943
  HEAP32[$571 >> 2] = $112; //@line 15944
  $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 15945
  HEAP32[$572 >> 2] = $114; //@line 15946
  $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 15947
  HEAP32[$573 >> 2] = $116; //@line 15948
  sp = STACKTOP; //@line 15949
  return;
 } else if ((label | 0) == 28) {
  $578 = HEAP8[$14 + ($119 & 255) >> 0] | 0; //@line 15956
  $591 = $$0$be + 5 << 24 >> 24; //@line 15969
  $598 = (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 15976
  $601 = HEAP32[(HEAP32[$96 >> 2] | 0) + 48 >> 2] | 0; //@line 15979
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 15980
  $602 = FUNCTION_TABLE_iiii[$601 & 31]($28, $578, $598) | 0; //@line 15981
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 15984
   $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 15985
   HEAP8[$603 >> 0] = $2; //@line 15986
   $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 15987
   HEAP32[$604 >> 2] = $4; //@line 15988
   $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 15989
   HEAP8[$605 >> 0] = $6; //@line 15990
   $606 = $ReallocAsyncCtx6 + 13 | 0; //@line 15991
   HEAP8[$606 >> 0] = $8; //@line 15992
   $607 = $ReallocAsyncCtx6 + 16 | 0; //@line 15993
   HEAP32[$607 >> 2] = $10; //@line 15994
   $608 = $ReallocAsyncCtx6 + 20 | 0; //@line 15995
   HEAP32[$608 >> 2] = $12; //@line 15996
   $609 = $ReallocAsyncCtx6 + 24 | 0; //@line 15997
   HEAP32[$609 >> 2] = $14; //@line 15998
   $610 = $ReallocAsyncCtx6 + 28 | 0; //@line 15999
   HEAP8[$610 >> 0] = $591; //@line 16000
   $611 = $ReallocAsyncCtx6 + 32 | 0; //@line 16001
   HEAP32[$611 >> 2] = $16; //@line 16002
   $612 = $ReallocAsyncCtx6 + 36 | 0; //@line 16003
   HEAP32[$612 >> 2] = $18; //@line 16004
   $613 = $ReallocAsyncCtx6 + 40 | 0; //@line 16005
   HEAP32[$613 >> 2] = $20; //@line 16006
   $614 = $ReallocAsyncCtx6 + 44 | 0; //@line 16007
   HEAP32[$614 >> 2] = $22; //@line 16008
   $615 = $ReallocAsyncCtx6 + 48 | 0; //@line 16009
   HEAP32[$615 >> 2] = $24; //@line 16010
   $616 = $ReallocAsyncCtx6 + 52 | 0; //@line 16011
   HEAP32[$616 >> 2] = $26; //@line 16012
   $617 = $ReallocAsyncCtx6 + 56 | 0; //@line 16013
   HEAP32[$617 >> 2] = $28; //@line 16014
   $618 = $ReallocAsyncCtx6 + 60 | 0; //@line 16015
   HEAP32[$618 >> 2] = $30; //@line 16016
   $619 = $ReallocAsyncCtx6 + 64 | 0; //@line 16017
   HEAP32[$619 >> 2] = $32; //@line 16018
   $620 = $ReallocAsyncCtx6 + 68 | 0; //@line 16019
   HEAP32[$620 >> 2] = $34; //@line 16020
   $621 = $ReallocAsyncCtx6 + 72 | 0; //@line 16021
   HEAP32[$621 >> 2] = $36; //@line 16022
   $622 = $ReallocAsyncCtx6 + 76 | 0; //@line 16023
   HEAP32[$622 >> 2] = $38; //@line 16024
   $623 = $ReallocAsyncCtx6 + 80 | 0; //@line 16025
   HEAP32[$623 >> 2] = $40; //@line 16026
   $624 = $ReallocAsyncCtx6 + 84 | 0; //@line 16027
   HEAP32[$624 >> 2] = $42; //@line 16028
   $625 = $ReallocAsyncCtx6 + 88 | 0; //@line 16029
   HEAP32[$625 >> 2] = $44; //@line 16030
   $626 = $ReallocAsyncCtx6 + 92 | 0; //@line 16031
   HEAP32[$626 >> 2] = $46; //@line 16032
   $627 = $ReallocAsyncCtx6 + 96 | 0; //@line 16033
   HEAP32[$627 >> 2] = $48; //@line 16034
   $628 = $ReallocAsyncCtx6 + 100 | 0; //@line 16035
   HEAP32[$628 >> 2] = $50; //@line 16036
   $629 = $ReallocAsyncCtx6 + 104 | 0; //@line 16037
   HEAP32[$629 >> 2] = $52; //@line 16038
   $630 = $ReallocAsyncCtx6 + 108 | 0; //@line 16039
   HEAP32[$630 >> 2] = $56; //@line 16040
   $631 = $ReallocAsyncCtx6 + 112 | 0; //@line 16041
   HEAP32[$631 >> 2] = $58; //@line 16042
   $632 = $ReallocAsyncCtx6 + 116 | 0; //@line 16043
   HEAP32[$632 >> 2] = $60; //@line 16044
   $633 = $ReallocAsyncCtx6 + 120 | 0; //@line 16045
   HEAP32[$633 >> 2] = $62; //@line 16046
   $634 = $ReallocAsyncCtx6 + 124 | 0; //@line 16047
   HEAP32[$634 >> 2] = $64; //@line 16048
   $635 = $ReallocAsyncCtx6 + 128 | 0; //@line 16049
   HEAP32[$635 >> 2] = $66; //@line 16050
   $636 = $ReallocAsyncCtx6 + 132 | 0; //@line 16051
   HEAP32[$636 >> 2] = $68; //@line 16052
   $637 = $ReallocAsyncCtx6 + 136 | 0; //@line 16053
   HEAP32[$637 >> 2] = $70; //@line 16054
   $638 = $ReallocAsyncCtx6 + 140 | 0; //@line 16055
   HEAP32[$638 >> 2] = $72; //@line 16056
   $639 = $ReallocAsyncCtx6 + 144 | 0; //@line 16057
   HEAP32[$639 >> 2] = $74; //@line 16058
   $640 = $ReallocAsyncCtx6 + 148 | 0; //@line 16059
   HEAP32[$640 >> 2] = $76; //@line 16060
   $641 = $ReallocAsyncCtx6 + 152 | 0; //@line 16061
   HEAP32[$641 >> 2] = $78; //@line 16062
   $642 = $ReallocAsyncCtx6 + 156 | 0; //@line 16063
   HEAP32[$642 >> 2] = $80; //@line 16064
   $643 = $ReallocAsyncCtx6 + 160 | 0; //@line 16065
   HEAP32[$643 >> 2] = $82; //@line 16066
   $644 = $ReallocAsyncCtx6 + 164 | 0; //@line 16067
   HEAP32[$644 >> 2] = $84; //@line 16068
   $645 = $ReallocAsyncCtx6 + 168 | 0; //@line 16069
   HEAP32[$645 >> 2] = $86; //@line 16070
   $646 = $ReallocAsyncCtx6 + 172 | 0; //@line 16071
   HEAP32[$646 >> 2] = $88; //@line 16072
   $647 = $ReallocAsyncCtx6 + 176 | 0; //@line 16073
   HEAP32[$647 >> 2] = $90; //@line 16074
   $648 = $ReallocAsyncCtx6 + 180 | 0; //@line 16075
   HEAP32[$648 >> 2] = $92; //@line 16076
   $649 = $ReallocAsyncCtx6 + 184 | 0; //@line 16077
   HEAP32[$649 >> 2] = $94; //@line 16078
   $650 = $ReallocAsyncCtx6 + 188 | 0; //@line 16079
   HEAP32[$650 >> 2] = $96; //@line 16080
   $651 = $ReallocAsyncCtx6 + 192 | 0; //@line 16081
   HEAP32[$651 >> 2] = $98; //@line 16082
   $652 = $ReallocAsyncCtx6 + 196 | 0; //@line 16083
   HEAP32[$652 >> 2] = $100; //@line 16084
   $653 = $ReallocAsyncCtx6 + 200 | 0; //@line 16085
   HEAP32[$653 >> 2] = $102; //@line 16086
   $654 = $ReallocAsyncCtx6 + 204 | 0; //@line 16087
   HEAP32[$654 >> 2] = $104; //@line 16088
   $655 = $ReallocAsyncCtx6 + 208 | 0; //@line 16089
   HEAP32[$655 >> 2] = $106; //@line 16090
   $656 = $ReallocAsyncCtx6 + 212 | 0; //@line 16091
   HEAP32[$656 >> 2] = $108; //@line 16092
   $657 = $ReallocAsyncCtx6 + 216 | 0; //@line 16093
   HEAP32[$657 >> 2] = $110; //@line 16094
   $658 = $ReallocAsyncCtx6 + 220 | 0; //@line 16095
   HEAP32[$658 >> 2] = $112; //@line 16096
   $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 16097
   HEAP32[$659 >> 2] = $114; //@line 16098
   $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 16099
   HEAP32[$660 >> 2] = $116; //@line 16100
   sp = STACKTOP; //@line 16101
   return;
  }
  HEAP8[___async_retval >> 0] = $602; //@line 16105
  ___async_unwind = 0; //@line 16106
  HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 16107
  $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 16108
  HEAP8[$603 >> 0] = $2; //@line 16109
  $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 16110
  HEAP32[$604 >> 2] = $4; //@line 16111
  $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 16112
  HEAP8[$605 >> 0] = $6; //@line 16113
  $606 = $ReallocAsyncCtx6 + 13 | 0; //@line 16114
  HEAP8[$606 >> 0] = $8; //@line 16115
  $607 = $ReallocAsyncCtx6 + 16 | 0; //@line 16116
  HEAP32[$607 >> 2] = $10; //@line 16117
  $608 = $ReallocAsyncCtx6 + 20 | 0; //@line 16118
  HEAP32[$608 >> 2] = $12; //@line 16119
  $609 = $ReallocAsyncCtx6 + 24 | 0; //@line 16120
  HEAP32[$609 >> 2] = $14; //@line 16121
  $610 = $ReallocAsyncCtx6 + 28 | 0; //@line 16122
  HEAP8[$610 >> 0] = $591; //@line 16123
  $611 = $ReallocAsyncCtx6 + 32 | 0; //@line 16124
  HEAP32[$611 >> 2] = $16; //@line 16125
  $612 = $ReallocAsyncCtx6 + 36 | 0; //@line 16126
  HEAP32[$612 >> 2] = $18; //@line 16127
  $613 = $ReallocAsyncCtx6 + 40 | 0; //@line 16128
  HEAP32[$613 >> 2] = $20; //@line 16129
  $614 = $ReallocAsyncCtx6 + 44 | 0; //@line 16130
  HEAP32[$614 >> 2] = $22; //@line 16131
  $615 = $ReallocAsyncCtx6 + 48 | 0; //@line 16132
  HEAP32[$615 >> 2] = $24; //@line 16133
  $616 = $ReallocAsyncCtx6 + 52 | 0; //@line 16134
  HEAP32[$616 >> 2] = $26; //@line 16135
  $617 = $ReallocAsyncCtx6 + 56 | 0; //@line 16136
  HEAP32[$617 >> 2] = $28; //@line 16137
  $618 = $ReallocAsyncCtx6 + 60 | 0; //@line 16138
  HEAP32[$618 >> 2] = $30; //@line 16139
  $619 = $ReallocAsyncCtx6 + 64 | 0; //@line 16140
  HEAP32[$619 >> 2] = $32; //@line 16141
  $620 = $ReallocAsyncCtx6 + 68 | 0; //@line 16142
  HEAP32[$620 >> 2] = $34; //@line 16143
  $621 = $ReallocAsyncCtx6 + 72 | 0; //@line 16144
  HEAP32[$621 >> 2] = $36; //@line 16145
  $622 = $ReallocAsyncCtx6 + 76 | 0; //@line 16146
  HEAP32[$622 >> 2] = $38; //@line 16147
  $623 = $ReallocAsyncCtx6 + 80 | 0; //@line 16148
  HEAP32[$623 >> 2] = $40; //@line 16149
  $624 = $ReallocAsyncCtx6 + 84 | 0; //@line 16150
  HEAP32[$624 >> 2] = $42; //@line 16151
  $625 = $ReallocAsyncCtx6 + 88 | 0; //@line 16152
  HEAP32[$625 >> 2] = $44; //@line 16153
  $626 = $ReallocAsyncCtx6 + 92 | 0; //@line 16154
  HEAP32[$626 >> 2] = $46; //@line 16155
  $627 = $ReallocAsyncCtx6 + 96 | 0; //@line 16156
  HEAP32[$627 >> 2] = $48; //@line 16157
  $628 = $ReallocAsyncCtx6 + 100 | 0; //@line 16158
  HEAP32[$628 >> 2] = $50; //@line 16159
  $629 = $ReallocAsyncCtx6 + 104 | 0; //@line 16160
  HEAP32[$629 >> 2] = $52; //@line 16161
  $630 = $ReallocAsyncCtx6 + 108 | 0; //@line 16162
  HEAP32[$630 >> 2] = $56; //@line 16163
  $631 = $ReallocAsyncCtx6 + 112 | 0; //@line 16164
  HEAP32[$631 >> 2] = $58; //@line 16165
  $632 = $ReallocAsyncCtx6 + 116 | 0; //@line 16166
  HEAP32[$632 >> 2] = $60; //@line 16167
  $633 = $ReallocAsyncCtx6 + 120 | 0; //@line 16168
  HEAP32[$633 >> 2] = $62; //@line 16169
  $634 = $ReallocAsyncCtx6 + 124 | 0; //@line 16170
  HEAP32[$634 >> 2] = $64; //@line 16171
  $635 = $ReallocAsyncCtx6 + 128 | 0; //@line 16172
  HEAP32[$635 >> 2] = $66; //@line 16173
  $636 = $ReallocAsyncCtx6 + 132 | 0; //@line 16174
  HEAP32[$636 >> 2] = $68; //@line 16175
  $637 = $ReallocAsyncCtx6 + 136 | 0; //@line 16176
  HEAP32[$637 >> 2] = $70; //@line 16177
  $638 = $ReallocAsyncCtx6 + 140 | 0; //@line 16178
  HEAP32[$638 >> 2] = $72; //@line 16179
  $639 = $ReallocAsyncCtx6 + 144 | 0; //@line 16180
  HEAP32[$639 >> 2] = $74; //@line 16181
  $640 = $ReallocAsyncCtx6 + 148 | 0; //@line 16182
  HEAP32[$640 >> 2] = $76; //@line 16183
  $641 = $ReallocAsyncCtx6 + 152 | 0; //@line 16184
  HEAP32[$641 >> 2] = $78; //@line 16185
  $642 = $ReallocAsyncCtx6 + 156 | 0; //@line 16186
  HEAP32[$642 >> 2] = $80; //@line 16187
  $643 = $ReallocAsyncCtx6 + 160 | 0; //@line 16188
  HEAP32[$643 >> 2] = $82; //@line 16189
  $644 = $ReallocAsyncCtx6 + 164 | 0; //@line 16190
  HEAP32[$644 >> 2] = $84; //@line 16191
  $645 = $ReallocAsyncCtx6 + 168 | 0; //@line 16192
  HEAP32[$645 >> 2] = $86; //@line 16193
  $646 = $ReallocAsyncCtx6 + 172 | 0; //@line 16194
  HEAP32[$646 >> 2] = $88; //@line 16195
  $647 = $ReallocAsyncCtx6 + 176 | 0; //@line 16196
  HEAP32[$647 >> 2] = $90; //@line 16197
  $648 = $ReallocAsyncCtx6 + 180 | 0; //@line 16198
  HEAP32[$648 >> 2] = $92; //@line 16199
  $649 = $ReallocAsyncCtx6 + 184 | 0; //@line 16200
  HEAP32[$649 >> 2] = $94; //@line 16201
  $650 = $ReallocAsyncCtx6 + 188 | 0; //@line 16202
  HEAP32[$650 >> 2] = $96; //@line 16203
  $651 = $ReallocAsyncCtx6 + 192 | 0; //@line 16204
  HEAP32[$651 >> 2] = $98; //@line 16205
  $652 = $ReallocAsyncCtx6 + 196 | 0; //@line 16206
  HEAP32[$652 >> 2] = $100; //@line 16207
  $653 = $ReallocAsyncCtx6 + 200 | 0; //@line 16208
  HEAP32[$653 >> 2] = $102; //@line 16209
  $654 = $ReallocAsyncCtx6 + 204 | 0; //@line 16210
  HEAP32[$654 >> 2] = $104; //@line 16211
  $655 = $ReallocAsyncCtx6 + 208 | 0; //@line 16212
  HEAP32[$655 >> 2] = $106; //@line 16213
  $656 = $ReallocAsyncCtx6 + 212 | 0; //@line 16214
  HEAP32[$656 >> 2] = $108; //@line 16215
  $657 = $ReallocAsyncCtx6 + 216 | 0; //@line 16216
  HEAP32[$657 >> 2] = $110; //@line 16217
  $658 = $ReallocAsyncCtx6 + 220 | 0; //@line 16218
  HEAP32[$658 >> 2] = $112; //@line 16219
  $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 16220
  HEAP32[$659 >> 2] = $114; //@line 16221
  $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 16222
  HEAP32[$660 >> 2] = $116; //@line 16223
  sp = STACKTOP; //@line 16224
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 16229
  return;
 }
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 7862
 STACKTOP = STACKTOP + 16 | 0; //@line 7863
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7863
 $1 = sp; //@line 7864
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 7871
   $7 = $6 >>> 3; //@line 7872
   $8 = HEAP32[5726] | 0; //@line 7873
   $9 = $8 >>> $7; //@line 7874
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 7880
    $16 = 22944 + ($14 << 1 << 2) | 0; //@line 7882
    $17 = $16 + 8 | 0; //@line 7883
    $18 = HEAP32[$17 >> 2] | 0; //@line 7884
    $19 = $18 + 8 | 0; //@line 7885
    $20 = HEAP32[$19 >> 2] | 0; //@line 7886
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5726] = $8 & ~(1 << $14); //@line 7893
     } else {
      if ((HEAP32[5730] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 7898
      }
      $27 = $20 + 12 | 0; //@line 7901
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 7905
       HEAP32[$17 >> 2] = $20; //@line 7906
       break;
      } else {
       _abort(); //@line 7909
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 7914
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 7917
    $34 = $18 + $30 + 4 | 0; //@line 7919
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 7922
    $$0 = $19; //@line 7923
    STACKTOP = sp; //@line 7924
    return $$0 | 0; //@line 7924
   }
   $37 = HEAP32[5728] | 0; //@line 7926
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 7932
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 7935
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 7938
     $49 = $47 >>> 12 & 16; //@line 7940
     $50 = $47 >>> $49; //@line 7941
     $52 = $50 >>> 5 & 8; //@line 7943
     $54 = $50 >>> $52; //@line 7945
     $56 = $54 >>> 2 & 4; //@line 7947
     $58 = $54 >>> $56; //@line 7949
     $60 = $58 >>> 1 & 2; //@line 7951
     $62 = $58 >>> $60; //@line 7953
     $64 = $62 >>> 1 & 1; //@line 7955
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 7958
     $69 = 22944 + ($67 << 1 << 2) | 0; //@line 7960
     $70 = $69 + 8 | 0; //@line 7961
     $71 = HEAP32[$70 >> 2] | 0; //@line 7962
     $72 = $71 + 8 | 0; //@line 7963
     $73 = HEAP32[$72 >> 2] | 0; //@line 7964
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 7970
       HEAP32[5726] = $77; //@line 7971
       $98 = $77; //@line 7972
      } else {
       if ((HEAP32[5730] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 7977
       }
       $80 = $73 + 12 | 0; //@line 7980
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 7984
        HEAP32[$70 >> 2] = $73; //@line 7985
        $98 = $8; //@line 7986
        break;
       } else {
        _abort(); //@line 7989
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 7994
     $84 = $83 - $6 | 0; //@line 7995
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 7998
     $87 = $71 + $6 | 0; //@line 7999
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 8002
     HEAP32[$71 + $83 >> 2] = $84; //@line 8004
     if ($37 | 0) {
      $92 = HEAP32[5731] | 0; //@line 8007
      $93 = $37 >>> 3; //@line 8008
      $95 = 22944 + ($93 << 1 << 2) | 0; //@line 8010
      $96 = 1 << $93; //@line 8011
      if (!($98 & $96)) {
       HEAP32[5726] = $98 | $96; //@line 8016
       $$0199 = $95; //@line 8018
       $$pre$phiZ2D = $95 + 8 | 0; //@line 8018
      } else {
       $101 = $95 + 8 | 0; //@line 8020
       $102 = HEAP32[$101 >> 2] | 0; //@line 8021
       if ((HEAP32[5730] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 8025
       } else {
        $$0199 = $102; //@line 8028
        $$pre$phiZ2D = $101; //@line 8028
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 8031
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 8033
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 8035
      HEAP32[$92 + 12 >> 2] = $95; //@line 8037
     }
     HEAP32[5728] = $84; //@line 8039
     HEAP32[5731] = $87; //@line 8040
     $$0 = $72; //@line 8041
     STACKTOP = sp; //@line 8042
     return $$0 | 0; //@line 8042
    }
    $108 = HEAP32[5727] | 0; //@line 8044
    if (!$108) {
     $$0197 = $6; //@line 8047
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 8051
     $114 = $112 >>> 12 & 16; //@line 8053
     $115 = $112 >>> $114; //@line 8054
     $117 = $115 >>> 5 & 8; //@line 8056
     $119 = $115 >>> $117; //@line 8058
     $121 = $119 >>> 2 & 4; //@line 8060
     $123 = $119 >>> $121; //@line 8062
     $125 = $123 >>> 1 & 2; //@line 8064
     $127 = $123 >>> $125; //@line 8066
     $129 = $127 >>> 1 & 1; //@line 8068
     $134 = HEAP32[23208 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 8073
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 8077
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8083
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 8086
      $$0193$lcssa$i = $138; //@line 8086
     } else {
      $$01926$i = $134; //@line 8088
      $$01935$i = $138; //@line 8088
      $146 = $143; //@line 8088
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 8093
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 8094
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 8095
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 8096
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8102
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 8105
        $$0193$lcssa$i = $$$0193$i; //@line 8105
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 8108
        $$01935$i = $$$0193$i; //@line 8108
       }
      }
     }
     $157 = HEAP32[5730] | 0; //@line 8112
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 8115
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 8118
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 8121
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 8125
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 8127
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 8131
       $176 = HEAP32[$175 >> 2] | 0; //@line 8132
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 8135
        $179 = HEAP32[$178 >> 2] | 0; //@line 8136
        if (!$179) {
         $$3$i = 0; //@line 8139
         break;
        } else {
         $$1196$i = $179; //@line 8142
         $$1198$i = $178; //@line 8142
        }
       } else {
        $$1196$i = $176; //@line 8145
        $$1198$i = $175; //@line 8145
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 8148
        $182 = HEAP32[$181 >> 2] | 0; //@line 8149
        if ($182 | 0) {
         $$1196$i = $182; //@line 8152
         $$1198$i = $181; //@line 8152
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 8155
        $185 = HEAP32[$184 >> 2] | 0; //@line 8156
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 8161
         $$1198$i = $184; //@line 8161
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 8166
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 8169
        $$3$i = $$1196$i; //@line 8170
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 8175
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 8178
       }
       $169 = $167 + 12 | 0; //@line 8181
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 8185
       }
       $172 = $164 + 8 | 0; //@line 8188
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 8192
        HEAP32[$172 >> 2] = $167; //@line 8193
        $$3$i = $164; //@line 8194
        break;
       } else {
        _abort(); //@line 8197
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 8206
       $191 = 23208 + ($190 << 2) | 0; //@line 8207
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 8212
         if (!$$3$i) {
          HEAP32[5727] = $108 & ~(1 << $190); //@line 8218
          break L73;
         }
        } else {
         if ((HEAP32[5730] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 8225
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 8233
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5730] | 0; //@line 8243
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 8246
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 8250
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 8252
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 8258
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 8262
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 8264
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 8270
       if ($214 | 0) {
        if ((HEAP32[5730] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 8276
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 8280
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 8282
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 8290
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 8293
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 8295
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 8298
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 8302
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 8305
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 8307
      if ($37 | 0) {
       $234 = HEAP32[5731] | 0; //@line 8310
       $235 = $37 >>> 3; //@line 8311
       $237 = 22944 + ($235 << 1 << 2) | 0; //@line 8313
       $238 = 1 << $235; //@line 8314
       if (!($8 & $238)) {
        HEAP32[5726] = $8 | $238; //@line 8319
        $$0189$i = $237; //@line 8321
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 8321
       } else {
        $242 = $237 + 8 | 0; //@line 8323
        $243 = HEAP32[$242 >> 2] | 0; //@line 8324
        if ((HEAP32[5730] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 8328
        } else {
         $$0189$i = $243; //@line 8331
         $$pre$phi$iZ2D = $242; //@line 8331
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 8334
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 8336
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 8338
       HEAP32[$234 + 12 >> 2] = $237; //@line 8340
      }
      HEAP32[5728] = $$0193$lcssa$i; //@line 8342
      HEAP32[5731] = $159; //@line 8343
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 8346
     STACKTOP = sp; //@line 8347
     return $$0 | 0; //@line 8347
    }
   } else {
    $$0197 = $6; //@line 8350
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 8355
   } else {
    $251 = $0 + 11 | 0; //@line 8357
    $252 = $251 & -8; //@line 8358
    $253 = HEAP32[5727] | 0; //@line 8359
    if (!$253) {
     $$0197 = $252; //@line 8362
    } else {
     $255 = 0 - $252 | 0; //@line 8364
     $256 = $251 >>> 8; //@line 8365
     if (!$256) {
      $$0358$i = 0; //@line 8368
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 8372
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 8376
       $262 = $256 << $261; //@line 8377
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 8380
       $267 = $262 << $265; //@line 8382
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 8385
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 8390
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 8396
      }
     }
     $282 = HEAP32[23208 + ($$0358$i << 2) >> 2] | 0; //@line 8400
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 8404
       $$3$i203 = 0; //@line 8404
       $$3350$i = $255; //@line 8404
       label = 81; //@line 8405
      } else {
       $$0342$i = 0; //@line 8412
       $$0347$i = $255; //@line 8412
       $$0353$i = $282; //@line 8412
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 8412
       $$0362$i = 0; //@line 8412
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 8417
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 8422
          $$435113$i = 0; //@line 8422
          $$435712$i = $$0353$i; //@line 8422
          label = 85; //@line 8423
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 8426
          $$1348$i = $292; //@line 8426
         }
        } else {
         $$1343$i = $$0342$i; //@line 8429
         $$1348$i = $$0347$i; //@line 8429
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 8432
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 8435
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 8439
        $302 = ($$0353$i | 0) == 0; //@line 8440
        if ($302) {
         $$2355$i = $$1363$i; //@line 8445
         $$3$i203 = $$1343$i; //@line 8445
         $$3350$i = $$1348$i; //@line 8445
         label = 81; //@line 8446
         break;
        } else {
         $$0342$i = $$1343$i; //@line 8449
         $$0347$i = $$1348$i; //@line 8449
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 8449
         $$0362$i = $$1363$i; //@line 8449
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 8459
       $309 = $253 & ($306 | 0 - $306); //@line 8462
       if (!$309) {
        $$0197 = $252; //@line 8465
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 8470
       $315 = $313 >>> 12 & 16; //@line 8472
       $316 = $313 >>> $315; //@line 8473
       $318 = $316 >>> 5 & 8; //@line 8475
       $320 = $316 >>> $318; //@line 8477
       $322 = $320 >>> 2 & 4; //@line 8479
       $324 = $320 >>> $322; //@line 8481
       $326 = $324 >>> 1 & 2; //@line 8483
       $328 = $324 >>> $326; //@line 8485
       $330 = $328 >>> 1 & 1; //@line 8487
       $$4$ph$i = 0; //@line 8493
       $$4357$ph$i = HEAP32[23208 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 8493
      } else {
       $$4$ph$i = $$3$i203; //@line 8495
       $$4357$ph$i = $$2355$i; //@line 8495
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 8499
       $$4351$lcssa$i = $$3350$i; //@line 8499
      } else {
       $$414$i = $$4$ph$i; //@line 8501
       $$435113$i = $$3350$i; //@line 8501
       $$435712$i = $$4357$ph$i; //@line 8501
       label = 85; //@line 8502
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 8507
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 8511
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 8512
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 8513
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 8514
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8520
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 8523
        $$4351$lcssa$i = $$$4351$i; //@line 8523
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 8526
        $$435113$i = $$$4351$i; //@line 8526
        label = 85; //@line 8527
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 8533
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5728] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5730] | 0; //@line 8539
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 8542
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 8545
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 8548
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 8552
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 8554
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 8558
         $371 = HEAP32[$370 >> 2] | 0; //@line 8559
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 8562
          $374 = HEAP32[$373 >> 2] | 0; //@line 8563
          if (!$374) {
           $$3372$i = 0; //@line 8566
           break;
          } else {
           $$1370$i = $374; //@line 8569
           $$1374$i = $373; //@line 8569
          }
         } else {
          $$1370$i = $371; //@line 8572
          $$1374$i = $370; //@line 8572
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 8575
          $377 = HEAP32[$376 >> 2] | 0; //@line 8576
          if ($377 | 0) {
           $$1370$i = $377; //@line 8579
           $$1374$i = $376; //@line 8579
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 8582
          $380 = HEAP32[$379 >> 2] | 0; //@line 8583
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 8588
           $$1374$i = $379; //@line 8588
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 8593
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 8596
          $$3372$i = $$1370$i; //@line 8597
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 8602
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 8605
         }
         $364 = $362 + 12 | 0; //@line 8608
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 8612
         }
         $367 = $359 + 8 | 0; //@line 8615
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 8619
          HEAP32[$367 >> 2] = $362; //@line 8620
          $$3372$i = $359; //@line 8621
          break;
         } else {
          _abort(); //@line 8624
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 8632
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 8635
         $386 = 23208 + ($385 << 2) | 0; //@line 8636
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 8641
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 8646
            HEAP32[5727] = $391; //@line 8647
            $475 = $391; //@line 8648
            break L164;
           }
          } else {
           if ((HEAP32[5730] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 8655
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 8663
            if (!$$3372$i) {
             $475 = $253; //@line 8666
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5730] | 0; //@line 8674
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 8677
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 8681
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 8683
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 8689
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 8693
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 8695
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 8701
         if (!$409) {
          $475 = $253; //@line 8704
         } else {
          if ((HEAP32[5730] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 8709
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 8713
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 8715
           $475 = $253; //@line 8716
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 8725
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 8728
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 8730
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 8733
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 8737
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 8740
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 8742
         $428 = $$4351$lcssa$i >>> 3; //@line 8743
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 22944 + ($428 << 1 << 2) | 0; //@line 8747
          $432 = HEAP32[5726] | 0; //@line 8748
          $433 = 1 << $428; //@line 8749
          if (!($432 & $433)) {
           HEAP32[5726] = $432 | $433; //@line 8754
           $$0368$i = $431; //@line 8756
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 8756
          } else {
           $437 = $431 + 8 | 0; //@line 8758
           $438 = HEAP32[$437 >> 2] | 0; //@line 8759
           if ((HEAP32[5730] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 8763
           } else {
            $$0368$i = $438; //@line 8766
            $$pre$phi$i211Z2D = $437; //@line 8766
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 8769
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 8771
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 8773
          HEAP32[$354 + 12 >> 2] = $431; //@line 8775
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 8778
         if (!$444) {
          $$0361$i = 0; //@line 8781
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 8785
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 8789
           $450 = $444 << $449; //@line 8790
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 8793
           $455 = $450 << $453; //@line 8795
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 8798
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 8803
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 8809
          }
         }
         $469 = 23208 + ($$0361$i << 2) | 0; //@line 8812
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 8814
         $471 = $354 + 16 | 0; //@line 8815
         HEAP32[$471 + 4 >> 2] = 0; //@line 8817
         HEAP32[$471 >> 2] = 0; //@line 8818
         $473 = 1 << $$0361$i; //@line 8819
         if (!($475 & $473)) {
          HEAP32[5727] = $475 | $473; //@line 8824
          HEAP32[$469 >> 2] = $354; //@line 8825
          HEAP32[$354 + 24 >> 2] = $469; //@line 8827
          HEAP32[$354 + 12 >> 2] = $354; //@line 8829
          HEAP32[$354 + 8 >> 2] = $354; //@line 8831
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 8840
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 8840
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 8847
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 8851
          $494 = HEAP32[$492 >> 2] | 0; //@line 8853
          if (!$494) {
           label = 136; //@line 8856
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 8859
           $$0345$i = $494; //@line 8859
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5730] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 8866
          } else {
           HEAP32[$492 >> 2] = $354; //@line 8869
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 8871
           HEAP32[$354 + 12 >> 2] = $354; //@line 8873
           HEAP32[$354 + 8 >> 2] = $354; //@line 8875
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 8880
          $502 = HEAP32[$501 >> 2] | 0; //@line 8881
          $503 = HEAP32[5730] | 0; //@line 8882
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 8888
           HEAP32[$501 >> 2] = $354; //@line 8889
           HEAP32[$354 + 8 >> 2] = $502; //@line 8891
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 8893
           HEAP32[$354 + 24 >> 2] = 0; //@line 8895
           break;
          } else {
           _abort(); //@line 8898
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 8905
       STACKTOP = sp; //@line 8906
       return $$0 | 0; //@line 8906
      } else {
       $$0197 = $252; //@line 8908
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5728] | 0; //@line 8915
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 8918
  $515 = HEAP32[5731] | 0; //@line 8919
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 8922
   HEAP32[5731] = $517; //@line 8923
   HEAP32[5728] = $514; //@line 8924
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 8927
   HEAP32[$515 + $512 >> 2] = $514; //@line 8929
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 8932
  } else {
   HEAP32[5728] = 0; //@line 8934
   HEAP32[5731] = 0; //@line 8935
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 8938
   $526 = $515 + $512 + 4 | 0; //@line 8940
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 8943
  }
  $$0 = $515 + 8 | 0; //@line 8946
  STACKTOP = sp; //@line 8947
  return $$0 | 0; //@line 8947
 }
 $530 = HEAP32[5729] | 0; //@line 8949
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 8952
  HEAP32[5729] = $532; //@line 8953
  $533 = HEAP32[5732] | 0; //@line 8954
  $534 = $533 + $$0197 | 0; //@line 8955
  HEAP32[5732] = $534; //@line 8956
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 8959
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 8962
  $$0 = $533 + 8 | 0; //@line 8964
  STACKTOP = sp; //@line 8965
  return $$0 | 0; //@line 8965
 }
 if (!(HEAP32[5844] | 0)) {
  HEAP32[5846] = 4096; //@line 8970
  HEAP32[5845] = 4096; //@line 8971
  HEAP32[5847] = -1; //@line 8972
  HEAP32[5848] = -1; //@line 8973
  HEAP32[5849] = 0; //@line 8974
  HEAP32[5837] = 0; //@line 8975
  HEAP32[5844] = $1 & -16 ^ 1431655768; //@line 8979
  $548 = 4096; //@line 8980
 } else {
  $548 = HEAP32[5846] | 0; //@line 8983
 }
 $545 = $$0197 + 48 | 0; //@line 8985
 $546 = $$0197 + 47 | 0; //@line 8986
 $547 = $548 + $546 | 0; //@line 8987
 $549 = 0 - $548 | 0; //@line 8988
 $550 = $547 & $549; //@line 8989
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 8992
  STACKTOP = sp; //@line 8993
  return $$0 | 0; //@line 8993
 }
 $552 = HEAP32[5836] | 0; //@line 8995
 if ($552 | 0) {
  $554 = HEAP32[5834] | 0; //@line 8998
  $555 = $554 + $550 | 0; //@line 8999
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 9004
   STACKTOP = sp; //@line 9005
   return $$0 | 0; //@line 9005
  }
 }
 L244 : do {
  if (!(HEAP32[5837] & 4)) {
   $561 = HEAP32[5732] | 0; //@line 9013
   L246 : do {
    if (!$561) {
     label = 163; //@line 9017
    } else {
     $$0$i$i = 23352; //@line 9019
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 9021
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 9024
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 9033
      if (!$570) {
       label = 163; //@line 9036
       break L246;
      } else {
       $$0$i$i = $570; //@line 9039
      }
     }
     $595 = $547 - $530 & $549; //@line 9043
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 9046
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 9054
       } else {
        $$723947$i = $595; //@line 9056
        $$748$i = $597; //@line 9056
        label = 180; //@line 9057
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 9061
       $$2253$ph$i = $595; //@line 9061
       label = 171; //@line 9062
      }
     } else {
      $$2234243136$i = 0; //@line 9065
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 9071
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 9074
     } else {
      $574 = $572; //@line 9076
      $575 = HEAP32[5845] | 0; //@line 9077
      $576 = $575 + -1 | 0; //@line 9078
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 9086
      $584 = HEAP32[5834] | 0; //@line 9087
      $585 = $$$i + $584 | 0; //@line 9088
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[5836] | 0; //@line 9093
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 9100
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 9104
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 9107
        $$748$i = $572; //@line 9107
        label = 180; //@line 9108
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 9111
        $$2253$ph$i = $$$i; //@line 9111
        label = 171; //@line 9112
       }
      } else {
       $$2234243136$i = 0; //@line 9115
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 9122
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 9131
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 9134
       $$748$i = $$2247$ph$i; //@line 9134
       label = 180; //@line 9135
       break L244;
      }
     }
     $607 = HEAP32[5846] | 0; //@line 9139
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 9143
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 9146
      $$748$i = $$2247$ph$i; //@line 9146
      label = 180; //@line 9147
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 9153
      $$2234243136$i = 0; //@line 9154
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 9158
      $$748$i = $$2247$ph$i; //@line 9158
      label = 180; //@line 9159
      break L244;
     }
    }
   } while (0);
   HEAP32[5837] = HEAP32[5837] | 4; //@line 9166
   $$4236$i = $$2234243136$i; //@line 9167
   label = 178; //@line 9168
  } else {
   $$4236$i = 0; //@line 9170
   label = 178; //@line 9171
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 9177
   $621 = _sbrk(0) | 0; //@line 9178
   $627 = $621 - $620 | 0; //@line 9186
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 9188
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 9196
    $$748$i = $620; //@line 9196
    label = 180; //@line 9197
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[5834] | 0) + $$723947$i | 0; //@line 9203
  HEAP32[5834] = $633; //@line 9204
  if ($633 >>> 0 > (HEAP32[5835] | 0) >>> 0) {
   HEAP32[5835] = $633; //@line 9208
  }
  $636 = HEAP32[5732] | 0; //@line 9210
  do {
   if (!$636) {
    $638 = HEAP32[5730] | 0; //@line 9214
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5730] = $$748$i; //@line 9219
    }
    HEAP32[5838] = $$748$i; //@line 9221
    HEAP32[5839] = $$723947$i; //@line 9222
    HEAP32[5841] = 0; //@line 9223
    HEAP32[5735] = HEAP32[5844]; //@line 9225
    HEAP32[5734] = -1; //@line 9226
    HEAP32[5739] = 22944; //@line 9227
    HEAP32[5738] = 22944; //@line 9228
    HEAP32[5741] = 22952; //@line 9229
    HEAP32[5740] = 22952; //@line 9230
    HEAP32[5743] = 22960; //@line 9231
    HEAP32[5742] = 22960; //@line 9232
    HEAP32[5745] = 22968; //@line 9233
    HEAP32[5744] = 22968; //@line 9234
    HEAP32[5747] = 22976; //@line 9235
    HEAP32[5746] = 22976; //@line 9236
    HEAP32[5749] = 22984; //@line 9237
    HEAP32[5748] = 22984; //@line 9238
    HEAP32[5751] = 22992; //@line 9239
    HEAP32[5750] = 22992; //@line 9240
    HEAP32[5753] = 23e3; //@line 9241
    HEAP32[5752] = 23e3; //@line 9242
    HEAP32[5755] = 23008; //@line 9243
    HEAP32[5754] = 23008; //@line 9244
    HEAP32[5757] = 23016; //@line 9245
    HEAP32[5756] = 23016; //@line 9246
    HEAP32[5759] = 23024; //@line 9247
    HEAP32[5758] = 23024; //@line 9248
    HEAP32[5761] = 23032; //@line 9249
    HEAP32[5760] = 23032; //@line 9250
    HEAP32[5763] = 23040; //@line 9251
    HEAP32[5762] = 23040; //@line 9252
    HEAP32[5765] = 23048; //@line 9253
    HEAP32[5764] = 23048; //@line 9254
    HEAP32[5767] = 23056; //@line 9255
    HEAP32[5766] = 23056; //@line 9256
    HEAP32[5769] = 23064; //@line 9257
    HEAP32[5768] = 23064; //@line 9258
    HEAP32[5771] = 23072; //@line 9259
    HEAP32[5770] = 23072; //@line 9260
    HEAP32[5773] = 23080; //@line 9261
    HEAP32[5772] = 23080; //@line 9262
    HEAP32[5775] = 23088; //@line 9263
    HEAP32[5774] = 23088; //@line 9264
    HEAP32[5777] = 23096; //@line 9265
    HEAP32[5776] = 23096; //@line 9266
    HEAP32[5779] = 23104; //@line 9267
    HEAP32[5778] = 23104; //@line 9268
    HEAP32[5781] = 23112; //@line 9269
    HEAP32[5780] = 23112; //@line 9270
    HEAP32[5783] = 23120; //@line 9271
    HEAP32[5782] = 23120; //@line 9272
    HEAP32[5785] = 23128; //@line 9273
    HEAP32[5784] = 23128; //@line 9274
    HEAP32[5787] = 23136; //@line 9275
    HEAP32[5786] = 23136; //@line 9276
    HEAP32[5789] = 23144; //@line 9277
    HEAP32[5788] = 23144; //@line 9278
    HEAP32[5791] = 23152; //@line 9279
    HEAP32[5790] = 23152; //@line 9280
    HEAP32[5793] = 23160; //@line 9281
    HEAP32[5792] = 23160; //@line 9282
    HEAP32[5795] = 23168; //@line 9283
    HEAP32[5794] = 23168; //@line 9284
    HEAP32[5797] = 23176; //@line 9285
    HEAP32[5796] = 23176; //@line 9286
    HEAP32[5799] = 23184; //@line 9287
    HEAP32[5798] = 23184; //@line 9288
    HEAP32[5801] = 23192; //@line 9289
    HEAP32[5800] = 23192; //@line 9290
    $642 = $$723947$i + -40 | 0; //@line 9291
    $644 = $$748$i + 8 | 0; //@line 9293
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 9298
    $650 = $$748$i + $649 | 0; //@line 9299
    $651 = $642 - $649 | 0; //@line 9300
    HEAP32[5732] = $650; //@line 9301
    HEAP32[5729] = $651; //@line 9302
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 9305
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 9308
    HEAP32[5733] = HEAP32[5848]; //@line 9310
   } else {
    $$024367$i = 23352; //@line 9312
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 9314
     $658 = $$024367$i + 4 | 0; //@line 9315
     $659 = HEAP32[$658 >> 2] | 0; //@line 9316
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 9320
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 9324
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 9329
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 9343
       $673 = (HEAP32[5729] | 0) + $$723947$i | 0; //@line 9345
       $675 = $636 + 8 | 0; //@line 9347
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 9352
       $681 = $636 + $680 | 0; //@line 9353
       $682 = $673 - $680 | 0; //@line 9354
       HEAP32[5732] = $681; //@line 9355
       HEAP32[5729] = $682; //@line 9356
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 9359
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 9362
       HEAP32[5733] = HEAP32[5848]; //@line 9364
       break;
      }
     }
    }
    $688 = HEAP32[5730] | 0; //@line 9369
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5730] = $$748$i; //@line 9372
     $753 = $$748$i; //@line 9373
    } else {
     $753 = $688; //@line 9375
    }
    $690 = $$748$i + $$723947$i | 0; //@line 9377
    $$124466$i = 23352; //@line 9378
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 9383
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 9387
     if (!$694) {
      $$0$i$i$i = 23352; //@line 9390
      break;
     } else {
      $$124466$i = $694; //@line 9393
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 9402
      $700 = $$124466$i + 4 | 0; //@line 9403
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 9406
      $704 = $$748$i + 8 | 0; //@line 9408
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 9414
      $712 = $690 + 8 | 0; //@line 9416
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 9422
      $722 = $710 + $$0197 | 0; //@line 9426
      $723 = $718 - $710 - $$0197 | 0; //@line 9427
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 9430
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5729] | 0) + $723 | 0; //@line 9435
        HEAP32[5729] = $728; //@line 9436
        HEAP32[5732] = $722; //@line 9437
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 9440
       } else {
        if ((HEAP32[5731] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5728] | 0) + $723 | 0; //@line 9446
         HEAP32[5728] = $734; //@line 9447
         HEAP32[5731] = $722; //@line 9448
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 9451
         HEAP32[$722 + $734 >> 2] = $734; //@line 9453
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 9457
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 9461
         $743 = $739 >>> 3; //@line 9462
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 9467
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 9469
           $750 = 22944 + ($743 << 1 << 2) | 0; //@line 9471
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 9477
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 9486
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5726] = HEAP32[5726] & ~(1 << $743); //@line 9496
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 9503
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 9507
             }
             $764 = $748 + 8 | 0; //@line 9510
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 9514
              break;
             }
             _abort(); //@line 9517
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 9522
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 9523
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 9526
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 9528
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 9532
             $783 = $782 + 4 | 0; //@line 9533
             $784 = HEAP32[$783 >> 2] | 0; //@line 9534
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 9537
              if (!$786) {
               $$3$i$i = 0; //@line 9540
               break;
              } else {
               $$1291$i$i = $786; //@line 9543
               $$1293$i$i = $782; //@line 9543
              }
             } else {
              $$1291$i$i = $784; //@line 9546
              $$1293$i$i = $783; //@line 9546
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 9549
              $789 = HEAP32[$788 >> 2] | 0; //@line 9550
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 9553
               $$1293$i$i = $788; //@line 9553
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 9556
              $792 = HEAP32[$791 >> 2] | 0; //@line 9557
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 9562
               $$1293$i$i = $791; //@line 9562
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 9567
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 9570
              $$3$i$i = $$1291$i$i; //@line 9571
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 9576
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 9579
             }
             $776 = $774 + 12 | 0; //@line 9582
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 9586
             }
             $779 = $771 + 8 | 0; //@line 9589
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 9593
              HEAP32[$779 >> 2] = $774; //@line 9594
              $$3$i$i = $771; //@line 9595
              break;
             } else {
              _abort(); //@line 9598
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 9608
           $798 = 23208 + ($797 << 2) | 0; //@line 9609
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 9614
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5727] = HEAP32[5727] & ~(1 << $797); //@line 9623
             break L311;
            } else {
             if ((HEAP32[5730] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 9629
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 9637
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5730] | 0; //@line 9647
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 9650
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 9654
           $815 = $718 + 16 | 0; //@line 9655
           $816 = HEAP32[$815 >> 2] | 0; //@line 9656
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 9662
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 9666
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 9668
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 9674
           if (!$822) {
            break;
           }
           if ((HEAP32[5730] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 9682
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 9686
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 9688
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 9695
         $$0287$i$i = $742 + $723 | 0; //@line 9695
        } else {
         $$0$i17$i = $718; //@line 9697
         $$0287$i$i = $723; //@line 9697
        }
        $830 = $$0$i17$i + 4 | 0; //@line 9699
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 9702
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 9705
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 9707
        $836 = $$0287$i$i >>> 3; //@line 9708
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 22944 + ($836 << 1 << 2) | 0; //@line 9712
         $840 = HEAP32[5726] | 0; //@line 9713
         $841 = 1 << $836; //@line 9714
         do {
          if (!($840 & $841)) {
           HEAP32[5726] = $840 | $841; //@line 9720
           $$0295$i$i = $839; //@line 9722
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 9722
          } else {
           $845 = $839 + 8 | 0; //@line 9724
           $846 = HEAP32[$845 >> 2] | 0; //@line 9725
           if ((HEAP32[5730] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 9729
            $$pre$phi$i19$iZ2D = $845; //@line 9729
            break;
           }
           _abort(); //@line 9732
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 9736
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 9738
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 9740
         HEAP32[$722 + 12 >> 2] = $839; //@line 9742
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 9745
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 9749
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 9753
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 9758
          $858 = $852 << $857; //@line 9759
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 9762
          $863 = $858 << $861; //@line 9764
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 9767
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 9772
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 9778
         }
        } while (0);
        $877 = 23208 + ($$0296$i$i << 2) | 0; //@line 9781
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 9783
        $879 = $722 + 16 | 0; //@line 9784
        HEAP32[$879 + 4 >> 2] = 0; //@line 9786
        HEAP32[$879 >> 2] = 0; //@line 9787
        $881 = HEAP32[5727] | 0; //@line 9788
        $882 = 1 << $$0296$i$i; //@line 9789
        if (!($881 & $882)) {
         HEAP32[5727] = $881 | $882; //@line 9794
         HEAP32[$877 >> 2] = $722; //@line 9795
         HEAP32[$722 + 24 >> 2] = $877; //@line 9797
         HEAP32[$722 + 12 >> 2] = $722; //@line 9799
         HEAP32[$722 + 8 >> 2] = $722; //@line 9801
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 9810
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 9810
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 9817
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 9821
         $902 = HEAP32[$900 >> 2] | 0; //@line 9823
         if (!$902) {
          label = 260; //@line 9826
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 9829
          $$0289$i$i = $902; //@line 9829
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5730] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 9836
         } else {
          HEAP32[$900 >> 2] = $722; //@line 9839
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 9841
          HEAP32[$722 + 12 >> 2] = $722; //@line 9843
          HEAP32[$722 + 8 >> 2] = $722; //@line 9845
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 9850
         $910 = HEAP32[$909 >> 2] | 0; //@line 9851
         $911 = HEAP32[5730] | 0; //@line 9852
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 9858
          HEAP32[$909 >> 2] = $722; //@line 9859
          HEAP32[$722 + 8 >> 2] = $910; //@line 9861
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 9863
          HEAP32[$722 + 24 >> 2] = 0; //@line 9865
          break;
         } else {
          _abort(); //@line 9868
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 9875
      STACKTOP = sp; //@line 9876
      return $$0 | 0; //@line 9876
     } else {
      $$0$i$i$i = 23352; //@line 9878
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 9882
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 9887
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 9895
    }
    $927 = $923 + -47 | 0; //@line 9897
    $929 = $927 + 8 | 0; //@line 9899
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 9905
    $936 = $636 + 16 | 0; //@line 9906
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 9908
    $939 = $938 + 8 | 0; //@line 9909
    $940 = $938 + 24 | 0; //@line 9910
    $941 = $$723947$i + -40 | 0; //@line 9911
    $943 = $$748$i + 8 | 0; //@line 9913
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 9918
    $949 = $$748$i + $948 | 0; //@line 9919
    $950 = $941 - $948 | 0; //@line 9920
    HEAP32[5732] = $949; //@line 9921
    HEAP32[5729] = $950; //@line 9922
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 9925
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 9928
    HEAP32[5733] = HEAP32[5848]; //@line 9930
    $956 = $938 + 4 | 0; //@line 9931
    HEAP32[$956 >> 2] = 27; //@line 9932
    HEAP32[$939 >> 2] = HEAP32[5838]; //@line 9933
    HEAP32[$939 + 4 >> 2] = HEAP32[5839]; //@line 9933
    HEAP32[$939 + 8 >> 2] = HEAP32[5840]; //@line 9933
    HEAP32[$939 + 12 >> 2] = HEAP32[5841]; //@line 9933
    HEAP32[5838] = $$748$i; //@line 9934
    HEAP32[5839] = $$723947$i; //@line 9935
    HEAP32[5841] = 0; //@line 9936
    HEAP32[5840] = $939; //@line 9937
    $958 = $940; //@line 9938
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 9940
     HEAP32[$958 >> 2] = 7; //@line 9941
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 9954
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 9957
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 9960
     HEAP32[$938 >> 2] = $964; //@line 9961
     $969 = $964 >>> 3; //@line 9962
     if ($964 >>> 0 < 256) {
      $972 = 22944 + ($969 << 1 << 2) | 0; //@line 9966
      $973 = HEAP32[5726] | 0; //@line 9967
      $974 = 1 << $969; //@line 9968
      if (!($973 & $974)) {
       HEAP32[5726] = $973 | $974; //@line 9973
       $$0211$i$i = $972; //@line 9975
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 9975
      } else {
       $978 = $972 + 8 | 0; //@line 9977
       $979 = HEAP32[$978 >> 2] | 0; //@line 9978
       if ((HEAP32[5730] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 9982
       } else {
        $$0211$i$i = $979; //@line 9985
        $$pre$phi$i$iZ2D = $978; //@line 9985
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 9988
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 9990
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 9992
      HEAP32[$636 + 12 >> 2] = $972; //@line 9994
      break;
     }
     $985 = $964 >>> 8; //@line 9997
     if (!$985) {
      $$0212$i$i = 0; //@line 10000
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 10004
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 10008
       $991 = $985 << $990; //@line 10009
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 10012
       $996 = $991 << $994; //@line 10014
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 10017
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 10022
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 10028
      }
     }
     $1010 = 23208 + ($$0212$i$i << 2) | 0; //@line 10031
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 10033
     HEAP32[$636 + 20 >> 2] = 0; //@line 10035
     HEAP32[$936 >> 2] = 0; //@line 10036
     $1013 = HEAP32[5727] | 0; //@line 10037
     $1014 = 1 << $$0212$i$i; //@line 10038
     if (!($1013 & $1014)) {
      HEAP32[5727] = $1013 | $1014; //@line 10043
      HEAP32[$1010 >> 2] = $636; //@line 10044
      HEAP32[$636 + 24 >> 2] = $1010; //@line 10046
      HEAP32[$636 + 12 >> 2] = $636; //@line 10048
      HEAP32[$636 + 8 >> 2] = $636; //@line 10050
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 10059
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 10059
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 10066
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 10070
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 10072
      if (!$1034) {
       label = 286; //@line 10075
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 10078
       $$0207$i$i = $1034; //@line 10078
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5730] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 10085
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 10088
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 10090
       HEAP32[$636 + 12 >> 2] = $636; //@line 10092
       HEAP32[$636 + 8 >> 2] = $636; //@line 10094
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 10099
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 10100
      $1043 = HEAP32[5730] | 0; //@line 10101
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 10107
       HEAP32[$1041 >> 2] = $636; //@line 10108
       HEAP32[$636 + 8 >> 2] = $1042; //@line 10110
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 10112
       HEAP32[$636 + 24 >> 2] = 0; //@line 10114
       break;
      } else {
       _abort(); //@line 10117
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5729] | 0; //@line 10124
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 10127
   HEAP32[5729] = $1054; //@line 10128
   $1055 = HEAP32[5732] | 0; //@line 10129
   $1056 = $1055 + $$0197 | 0; //@line 10130
   HEAP32[5732] = $1056; //@line 10131
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 10134
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 10137
   $$0 = $1055 + 8 | 0; //@line 10139
   STACKTOP = sp; //@line 10140
   return $$0 | 0; //@line 10140
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 10144
 $$0 = 0; //@line 10145
 STACKTOP = sp; //@line 10146
 return $$0 | 0; //@line 10146
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i116 = 0, $$0$i118 = 0, $$0107$be = 0, $$0107$lcssa = 0, $$0107131 = 0, $$0109129 = 0, $$0111 = 0, $$0132 = 0, $$1$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $137 = 0, $140 = 0, $145 = 0, $146 = 0, $15 = 0, $152 = 0, $156 = 0, $159 = 0, $16 = 0, $166 = 0, $167 = 0, $17 = 0, $173 = 0, $18 = 0, $19 = 0, $192 = 0, $20 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $270 = 0, $271 = 0, $279 = 0, $28 = 0, $281 = 0, $282 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $344 = 0, $345 = 0, $35 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $380 = 0, $386 = 0, $387 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $449 = 0, $45 = 0, $450 = 0, $459 = 0, $46 = 0, $463 = 0, $467 = 0, $472 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $483 = 0, $485 = 0, $488 = 0, $489 = 0, $559 = 0, $560 = 0, $567 = 0, $580 = 0, $587 = 0, $59 = 0, $590 = 0, $591 = 0, $60 = 0, $653 = 0, $654 = 0, $661 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16625
 STACKTOP = STACKTOP + 16 | 0; //@line 16626
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16626
 $8 = sp; //@line 16627
 $9 = sp + 15 | 0; //@line 16628
 $10 = sp + 14 | 0; //@line 16629
 $11 = sp + 13 | 0; //@line 16630
 $12 = sp + 12 | 0; //@line 16631
 $13 = $3 & 255; //@line 16632
 if (($2 & 255) >= ($3 & 255)) {
  $$0107$lcssa = 0; //@line 16635
  STACKTOP = sp; //@line 16636
  return $$0107$lcssa | 0; //@line 16636
 }
 $15 = $5 + 8 | 0; //@line 16638
 $16 = $5 + 16 | 0; //@line 16639
 $17 = $5 + 17 | 0; //@line 16640
 $18 = $8 + 4 | 0; //@line 16641
 $19 = $6 + 60 | 0; //@line 16642
 $20 = $8 + 6 | 0; //@line 16643
 $21 = $6 + 44 | 0; //@line 16644
 $22 = $8 + 5 | 0; //@line 16645
 $23 = $6 + 1 | 0; //@line 16646
 $24 = $8 + 7 | 0; //@line 16647
 $25 = $8 + 8 | 0; //@line 16648
 $26 = $6 + 32 | 0; //@line 16649
 $27 = $8 + 9 | 0; //@line 16650
 $28 = $0 + 3 | 0; //@line 16651
 $29 = $0 + 2 | 0; //@line 16652
 $30 = $6 + 56 | 0; //@line 16653
 $31 = $6 + 58 | 0; //@line 16654
 $32 = $8 + 1 | 0; //@line 16655
 $33 = $8 + 4 | 0; //@line 16656
 $34 = $6 + 40 | 0; //@line 16657
 $35 = $6 + 36 | 0; //@line 16658
 $36 = $6 + 33 | 0; //@line 16659
 $37 = $0 + 1 | 0; //@line 16660
 $38 = $0 + 272 | 0; //@line 16661
 $39 = $4 & 63; //@line 16662
 $40 = $0 + 260 | 0; //@line 16663
 $41 = $8 + 4 | 0; //@line 16664
 $42 = $8 + 8 | 0; //@line 16665
 $43 = $6 + 16 | 0; //@line 16666
 $44 = $6 + 20 | 0; //@line 16667
 $45 = $6 + 45 | 0; //@line 16668
 $46 = $6 + 48 | 0; //@line 16669
 $$0107131 = 0; //@line 16670
 $$0132 = $2; //@line 16670
 L4 : while (1) {
  $48 = $$0132 + 1 << 24 >> 24; //@line 16673
  switch (HEAP8[$1 + ($$0132 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 16678
    HEAP8[$16 >> 0] = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 16683
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0132 + 2 & 255) >> 0] | 0; //@line 16688
    $$0$be = $$0132 + 3 << 24 >> 24; //@line 16689
    $$0107$be = $$0107131; //@line 16689
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 16693
    HEAP8[$10 >> 0] = 0; //@line 16694
    HEAP8[$11 >> 0] = 0; //@line 16695
    HEAP8[$12 >> 0] = 0; //@line 16696
    $59 = $48 & 255; //@line 16697
    $60 = $59 + -1 | 0; //@line 16698
    HEAP32[$8 >> 2] = $1 + $60; //@line 16700
    HEAP8[$18 >> 0] = $13 - $60; //@line 16703
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 16705
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 16707
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 16709
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 16711
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 16713
    $71 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 16716
    $AsyncCtx = _emscripten_alloc_async_context(236, sp) | 0; //@line 16717
    $72 = FUNCTION_TABLE_iiiiiii[$71 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 16718
    if (___async) {
     label = 6; //@line 16721
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16724
    if (($72 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 16729
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 16731
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 16733
    }
    $137 = HEAP8[$12 >> 0] | 0; //@line 16735
    if (($137 & 255) > 4) {
     $div = ($137 & 255) / 5 | 0; //@line 16738
     $140 = 128 - (HEAPU8[$28 >> 0] | 0) | 0; //@line 16742
     $$0109129 = 0; //@line 16743
     $146 = HEAP8[$29 >> 0] | 0; //@line 16743
     while (1) {
      $145 = $146 & 255; //@line 16745
      if (($140 - $145 | 0) > 1) {
       $152 = $146 + 2 << 24 >> 24; //@line 16752
       HEAP8[$0 + 4 + $145 >> 0] = 3; //@line 16754
       HEAP8[$29 >> 0] = $152; //@line 16755
       HEAP8[($146 + 1 & 255) + ($0 + 4) >> 0] = $72; //@line 16756
       HEAP8[$0 >> 0] = 1; //@line 16757
       $$0$i = 0; //@line 16758
       $661 = $152; //@line 16758
      } else {
       $$0$i = -1010; //@line 16760
       $661 = $146; //@line 16760
      }
      $$0109129 = $$0109129 + 1 << 24 >> 24; //@line 16762
      if (($$0109129 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 16767
       break;
      } else {
       $146 = $661; //@line 16765
      }
     }
    } else {
     $$1$lcssa = $$0107131; //@line 16772
    }
    $$0$be = $59 + 255 + ($137 & 255) & 255; //@line 16778
    $$0107$be = $$1$lcssa; //@line 16778
    break;
   }
  case 4:
   {
    $156 = $$0132 + 2 << 24 >> 24; //@line 16782
    $159 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 16785
    HEAP8[$30 >> 0] = $159; //@line 16786
    HEAP16[$31 >> 1] = 1 << ($159 & 255); //@line 16790
    $166 = HEAP8[$29 >> 0] | 0; //@line 16794
    $167 = $166 & 255; //@line 16795
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($167 | 0)) {
     HEAP8[$29 >> 0] = $166 + 1 << 24 >> 24; //@line 16800
     HEAP8[$0 + 4 + $167 >> 0] = 4; //@line 16801
     HEAP8[$0 >> 0] = 1; //@line 16802
     $$0$be = $156; //@line 16803
     $$0107$be = 0; //@line 16803
    } else {
     $$0$be = $156; //@line 16805
     $$0107$be = -1010; //@line 16805
    }
    break;
   }
  case 5:
   {
    $173 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 16812
    HEAP8[$32 >> 0] = ($173 & 255) >>> 4 & 7; //@line 16817
    HEAP8[$8 >> 0] = $173 & 15; //@line 16819
    $192 = $$0132 + 5 << 24 >> 24; //@line 16833
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0])) * 100; //@line 16841
    $202 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 16844
    $AsyncCtx3 = _emscripten_alloc_async_context(232, sp) | 0; //@line 16845
    $203 = FUNCTION_TABLE_iii[$202 & 31]($7, $8) | 0; //@line 16846
    if (___async) {
     label = 18; //@line 16849
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16852
    if (($203 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 16857
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 16859
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 16861
    }
    $270 = HEAP8[$29 >> 0] | 0; //@line 16866
    $271 = $270 & 255; //@line 16867
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $271 | 0) > 1) {
     HEAP8[$0 + 4 + $271 >> 0] = 5; //@line 16873
     HEAP8[$29 >> 0] = $270 + 2 << 24 >> 24; //@line 16875
     HEAP8[($270 + 1 & 255) + ($0 + 4) >> 0] = $203; //@line 16878
     HEAP8[$37 >> 0] = 1; //@line 16879
     HEAP8[$0 >> 0] = 1; //@line 16880
     $$0$i116 = 0; //@line 16881
    } else {
     $$0$i116 = -1010; //@line 16883
    }
    $$0$be = $192; //@line 16885
    $$0107$be = $$0$i116; //@line 16885
    break;
   }
  case 6:
   {
    $279 = HEAP32[$38 >> 2] | 0; //@line 16889
    if (!$279) {
     $$0111 = -1; //@line 16892
    } else {
     $281 = HEAP32[$279 >> 2] | 0; //@line 16894
     $AsyncCtx6 = _emscripten_alloc_async_context(232, sp) | 0; //@line 16895
     $282 = FUNCTION_TABLE_ii[$281 & 15]($40) | 0; //@line 16896
     if (___async) {
      label = 26; //@line 16899
      break L4;
     }
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 16902
     $$0111 = $282; //@line 16903
    }
    $344 = HEAP8[$29 >> 0] | 0; //@line 16908
    $345 = $344 & 255; //@line 16909
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $345 | 0) > 2) {
     HEAP8[$0 + 4 + $345 >> 0] = 6; //@line 16915
     HEAP8[($344 + 1 & 255) + ($0 + 4) >> 0] = $$0111; //@line 16919
     HEAP8[$29 >> 0] = $344 + 3 << 24 >> 24; //@line 16921
     HEAP8[($344 + 2 & 255) + ($0 + 4) >> 0] = $39; //@line 16924
     HEAP8[$0 >> 0] = 1; //@line 16925
     $$0$be = $48; //@line 16926
     $$0107$be = 0; //@line 16926
    } else {
     $$0$be = $48; //@line 16928
     $$0107$be = -1010; //@line 16928
    }
    break;
   }
  case 7:
   {
    $359 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 16936
    HEAP32[$8 >> 2] = (HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0])) * 100; //@line 16957
    HEAP32[$41 >> 2] = 0; //@line 16958
    $380 = $$0132 + 6 << 24 >> 24; //@line 16959
    HEAP8[$42 >> 0] = HEAP8[$1 + ($$0132 + 5 & 255) >> 0] | 0; //@line 16963
    $386 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 16966
    $AsyncCtx10 = _emscripten_alloc_async_context(232, sp) | 0; //@line 16967
    $387 = FUNCTION_TABLE_iiii[$386 & 31]($7, $359, $8) | 0; //@line 16968
    if (___async) {
     label = 31; //@line 16971
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 16974
    $449 = HEAP8[$29 >> 0] | 0; //@line 16978
    $450 = $449 & 255; //@line 16979
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $450 | 0) > 1) {
     HEAP8[$0 + 4 + $450 >> 0] = 7; //@line 16988
     HEAP8[$29 >> 0] = $449 + 2 << 24 >> 24; //@line 16989
     HEAP8[($449 + 1 & 255) + ($0 + 4) >> 0] = $387; //@line 16990
     HEAP8[$0 >> 0] = 1; //@line 16991
     $$0$i118 = 0; //@line 16992
    } else {
     $$0$i118 = -1010; //@line 16994
    }
    $$0$be = $380; //@line 16996
    $$0107$be = $$0$i118; //@line 16996
    break;
   }
  case 8:
   {
    $459 = $$0132 + 2 << 24 >> 24; //@line 17000
    $463 = HEAP8[$1 + ($48 & 255) >> 0] & 15; //@line 17004
    $467 = ($463 + ($463 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 17009
    HEAP32[$43 >> 2] = $467; //@line 17010
    HEAP32[$44 >> 2] = $467 + 1e3; //@line 17012
    $472 = HEAP8[$29 >> 0] | 0; //@line 17016
    $473 = $472 & 255; //@line 17017
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($473 | 0)) {
     HEAP8[$29 >> 0] = $472 + 1 << 24 >> 24; //@line 17022
     HEAP8[$0 + 4 + $473 >> 0] = 8; //@line 17023
     HEAP8[$37 >> 0] = 1; //@line 17024
     HEAP8[$0 >> 0] = 1; //@line 17025
     $$0$be = $459; //@line 17026
     $$0107$be = 0; //@line 17026
    } else {
     $$0$be = $459; //@line 17028
     $$0107$be = -1010; //@line 17028
    }
    break;
   }
  case 9:
   {
    $477 = $$0132 + 2 << 24 >> 24; //@line 17033
    $481 = HEAPU8[$1 + ($48 & 255) >> 0] | 0; //@line 17037
    $483 = $481 >>> 5 & 1; //@line 17040
    $485 = $481 >>> 4 & 1; //@line 17043
    $488 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 17046
    $AsyncCtx14 = _emscripten_alloc_async_context(248, sp) | 0; //@line 17047
    $489 = FUNCTION_TABLE_iiii[$488 & 31]($7, $485, $483) | 0; //@line 17048
    if (___async) {
     label = 39; //@line 17051
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 17054
    if ($489) {
     HEAP8[$21 >> 0] = $485; //@line 17057
     HEAP8[$45 >> 0] = $483; //@line 17058
     HEAPF32[$46 >> 2] = +(HEAPU8[13357 + ($481 & 15) >> 0] | 0); //@line 17062
     $559 = HEAP8[$29 >> 0] | 0; //@line 17066
     $560 = $559 & 255; //@line 17067
     if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($560 | 0)) {
      HEAP8[$29 >> 0] = $559 + 1 << 24 >> 24; //@line 17072
      HEAP8[$0 + 4 + $560 >> 0] = 9; //@line 17073
      HEAP8[$0 >> 0] = 1; //@line 17074
      $$0$be = $477; //@line 17075
      $$0107$be = 0; //@line 17075
     } else {
      $$0$be = $477; //@line 17077
      $$0107$be = -1010; //@line 17077
     }
    } else {
     $$0$be = $477; //@line 17080
     $$0107$be = $$0107131; //@line 17080
    }
    break;
   }
  case 10:
   {
    $567 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17088
    $580 = $$0132 + 5 << 24 >> 24; //@line 17101
    $587 = (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0] | HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16) * 100 | 0; //@line 17108
    $590 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 17111
    $AsyncCtx18 = _emscripten_alloc_async_context(232, sp) | 0; //@line 17112
    $591 = FUNCTION_TABLE_iiii[$590 & 31]($7, $567, $587) | 0; //@line 17113
    if (___async) {
     label = 44; //@line 17116
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx18 | 0); //@line 17119
    $653 = HEAP8[$29 >> 0] | 0; //@line 17123
    $654 = $653 & 255; //@line 17124
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($654 | 0)) {
     HEAP8[$0 + 4 + $654 >> 0] = 10; //@line 17129
     HEAP8[$29 >> 0] = $653 + 2 << 24 >> 24; //@line 17131
     HEAP8[($653 + 1 & 255) + ($0 + 4) >> 0] = $591; //@line 17134
     HEAP8[$37 >> 0] = 1; //@line 17135
     HEAP8[$0 >> 0] = 1; //@line 17136
     $$0$be = $580; //@line 17137
     $$0107$be = 0; //@line 17137
    } else {
     $$0$be = $580; //@line 17139
     $$0107$be = -1010; //@line 17139
    }
    break;
   }
  default:
   {
    $$0$be = $48; //@line 17144
    $$0107$be = -1013; //@line 17144
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0107131 = $$0107$be; //@line 17149
   $$0132 = $$0$be; //@line 17149
  } else {
   $$0107$lcssa = $$0107$be; //@line 17151
   label = 47; //@line 17152
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 473; //@line 17157
  HEAP8[$AsyncCtx + 4 >> 0] = $39; //@line 17159
  HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 17161
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 17163
  HEAP8[$AsyncCtx + 13 >> 0] = $3; //@line 17165
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 17167
  HEAP32[$AsyncCtx + 20 >> 2] = $28; //@line 17169
  HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 17171
  HEAP32[$AsyncCtx + 28 >> 2] = $38; //@line 17173
  HEAP32[$AsyncCtx + 32 >> 2] = $27; //@line 17175
  HEAP32[$AsyncCtx + 36 >> 2] = $7; //@line 17177
  HEAP32[$AsyncCtx + 40 >> 2] = $8; //@line 17179
  HEAP32[$AsyncCtx + 44 >> 2] = $29; //@line 17181
  HEAP32[$AsyncCtx + 48 >> 2] = $40; //@line 17183
  HEAP32[$AsyncCtx + 52 >> 2] = $7; //@line 17185
  HEAP32[$AsyncCtx + 56 >> 2] = $17; //@line 17187
  HEAP32[$AsyncCtx + 60 >> 2] = $$0107131; //@line 17189
  HEAP32[$AsyncCtx + 64 >> 2] = $8; //@line 17191
  HEAP32[$AsyncCtx + 68 >> 2] = $18; //@line 17193
  HEAP32[$AsyncCtx + 72 >> 2] = $30; //@line 17195
  HEAP32[$AsyncCtx + 76 >> 2] = $8; //@line 17197
  HEAP32[$AsyncCtx + 80 >> 2] = $0; //@line 17199
  HEAP32[$AsyncCtx + 84 >> 2] = $59; //@line 17201
  HEAP32[$AsyncCtx + 88 >> 2] = $8; //@line 17203
  HEAP32[$AsyncCtx + 92 >> 2] = $42; //@line 17205
  HEAP32[$AsyncCtx + 96 >> 2] = $8; //@line 17207
  HEAP32[$AsyncCtx + 100 >> 2] = $19; //@line 17209
  HEAP32[$AsyncCtx + 104 >> 2] = $31; //@line 17211
  HEAP32[$AsyncCtx + 108 >> 2] = $9; //@line 17213
  HEAP32[$AsyncCtx + 112 >> 2] = $41; //@line 17215
  HEAP32[$AsyncCtx + 116 >> 2] = $20; //@line 17217
  HEAP32[$AsyncCtx + 120 >> 2] = $8; //@line 17219
  HEAP32[$AsyncCtx + 124 >> 2] = $33; //@line 17221
  HEAP32[$AsyncCtx + 128 >> 2] = $12; //@line 17223
  HEAP32[$AsyncCtx + 132 >> 2] = $44; //@line 17225
  HEAP32[$AsyncCtx + 136 >> 2] = $8; //@line 17227
  HEAP32[$AsyncCtx + 140 >> 2] = $22; //@line 17229
  HEAP32[$AsyncCtx + 144 >> 2] = $32; //@line 17231
  HEAP32[$AsyncCtx + 148 >> 2] = $21; //@line 17233
  HEAP32[$AsyncCtx + 152 >> 2] = $7; //@line 17235
  HEAP32[$AsyncCtx + 156 >> 2] = $8; //@line 17237
  HEAP32[$AsyncCtx + 160 >> 2] = $34; //@line 17239
  HEAP32[$AsyncCtx + 164 >> 2] = $7; //@line 17241
  HEAP32[$AsyncCtx + 168 >> 2] = $24; //@line 17243
  HEAP32[$AsyncCtx + 172 >> 2] = $10; //@line 17245
  HEAP32[$AsyncCtx + 176 >> 2] = $7; //@line 17247
  HEAP32[$AsyncCtx + 180 >> 2] = $11; //@line 17249
  HEAP32[$AsyncCtx + 184 >> 2] = $43; //@line 17251
  HEAP32[$AsyncCtx + 188 >> 2] = $23; //@line 17253
  HEAP32[$AsyncCtx + 192 >> 2] = $7; //@line 17255
  HEAP32[$AsyncCtx + 196 >> 2] = $35; //@line 17257
  HEAP32[$AsyncCtx + 200 >> 2] = $13; //@line 17259
  HEAP32[$AsyncCtx + 204 >> 2] = $25; //@line 17261
  HEAP32[$AsyncCtx + 208 >> 2] = $6; //@line 17263
  HEAP32[$AsyncCtx + 212 >> 2] = $26; //@line 17265
  HEAP32[$AsyncCtx + 216 >> 2] = $45; //@line 17267
  HEAP32[$AsyncCtx + 220 >> 2] = $37; //@line 17269
  HEAP32[$AsyncCtx + 224 >> 2] = $46; //@line 17271
  HEAP32[$AsyncCtx + 228 >> 2] = $15; //@line 17273
  HEAP32[$AsyncCtx + 232 >> 2] = $36; //@line 17275
  sp = STACKTOP; //@line 17276
  STACKTOP = sp; //@line 17277
  return 0; //@line 17277
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 474; //@line 17280
  HEAP8[$AsyncCtx3 + 4 >> 0] = $39; //@line 17282
  HEAP32[$AsyncCtx3 + 8 >> 2] = $16; //@line 17284
  HEAP8[$AsyncCtx3 + 12 >> 0] = $2; //@line 17286
  HEAP8[$AsyncCtx3 + 13 >> 0] = $3; //@line 17288
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 17290
  HEAP32[$AsyncCtx3 + 20 >> 2] = $28; //@line 17292
  HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 17294
  HEAP32[$AsyncCtx3 + 28 >> 2] = $38; //@line 17296
  HEAP32[$AsyncCtx3 + 32 >> 2] = $27; //@line 17298
  HEAP32[$AsyncCtx3 + 36 >> 2] = $7; //@line 17300
  HEAP32[$AsyncCtx3 + 40 >> 2] = $8; //@line 17302
  HEAP32[$AsyncCtx3 + 44 >> 2] = $29; //@line 17304
  HEAP32[$AsyncCtx3 + 48 >> 2] = $40; //@line 17306
  HEAP32[$AsyncCtx3 + 52 >> 2] = $7; //@line 17308
  HEAP32[$AsyncCtx3 + 56 >> 2] = $17; //@line 17310
  HEAP32[$AsyncCtx3 + 60 >> 2] = $8; //@line 17312
  HEAP32[$AsyncCtx3 + 64 >> 2] = $18; //@line 17314
  HEAP32[$AsyncCtx3 + 68 >> 2] = $30; //@line 17316
  HEAP8[$AsyncCtx3 + 72 >> 0] = $192; //@line 17318
  HEAP32[$AsyncCtx3 + 76 >> 2] = $8; //@line 17320
  HEAP32[$AsyncCtx3 + 80 >> 2] = $0; //@line 17322
  HEAP32[$AsyncCtx3 + 84 >> 2] = $8; //@line 17324
  HEAP32[$AsyncCtx3 + 88 >> 2] = $42; //@line 17326
  HEAP32[$AsyncCtx3 + 92 >> 2] = $8; //@line 17328
  HEAP32[$AsyncCtx3 + 96 >> 2] = $19; //@line 17330
  HEAP32[$AsyncCtx3 + 100 >> 2] = $31; //@line 17332
  HEAP32[$AsyncCtx3 + 104 >> 2] = $9; //@line 17334
  HEAP32[$AsyncCtx3 + 108 >> 2] = $41; //@line 17336
  HEAP32[$AsyncCtx3 + 112 >> 2] = $20; //@line 17338
  HEAP32[$AsyncCtx3 + 116 >> 2] = $8; //@line 17340
  HEAP32[$AsyncCtx3 + 120 >> 2] = $33; //@line 17342
  HEAP32[$AsyncCtx3 + 124 >> 2] = $12; //@line 17344
  HEAP32[$AsyncCtx3 + 128 >> 2] = $44; //@line 17346
  HEAP32[$AsyncCtx3 + 132 >> 2] = $8; //@line 17348
  HEAP32[$AsyncCtx3 + 136 >> 2] = $22; //@line 17350
  HEAP32[$AsyncCtx3 + 140 >> 2] = $32; //@line 17352
  HEAP32[$AsyncCtx3 + 144 >> 2] = $21; //@line 17354
  HEAP32[$AsyncCtx3 + 148 >> 2] = $7; //@line 17356
  HEAP32[$AsyncCtx3 + 152 >> 2] = $8; //@line 17358
  HEAP32[$AsyncCtx3 + 156 >> 2] = $34; //@line 17360
  HEAP32[$AsyncCtx3 + 160 >> 2] = $7; //@line 17362
  HEAP32[$AsyncCtx3 + 164 >> 2] = $24; //@line 17364
  HEAP32[$AsyncCtx3 + 168 >> 2] = $10; //@line 17366
  HEAP32[$AsyncCtx3 + 172 >> 2] = $7; //@line 17368
  HEAP32[$AsyncCtx3 + 176 >> 2] = $11; //@line 17370
  HEAP32[$AsyncCtx3 + 180 >> 2] = $43; //@line 17372
  HEAP32[$AsyncCtx3 + 184 >> 2] = $23; //@line 17374
  HEAP32[$AsyncCtx3 + 188 >> 2] = $7; //@line 17376
  HEAP32[$AsyncCtx3 + 192 >> 2] = $35; //@line 17378
  HEAP32[$AsyncCtx3 + 196 >> 2] = $13; //@line 17380
  HEAP32[$AsyncCtx3 + 200 >> 2] = $25; //@line 17382
  HEAP32[$AsyncCtx3 + 204 >> 2] = $6; //@line 17384
  HEAP32[$AsyncCtx3 + 208 >> 2] = $26; //@line 17386
  HEAP32[$AsyncCtx3 + 212 >> 2] = $45; //@line 17388
  HEAP32[$AsyncCtx3 + 216 >> 2] = $37; //@line 17390
  HEAP32[$AsyncCtx3 + 220 >> 2] = $46; //@line 17392
  HEAP32[$AsyncCtx3 + 224 >> 2] = $15; //@line 17394
  HEAP32[$AsyncCtx3 + 228 >> 2] = $36; //@line 17396
  sp = STACKTOP; //@line 17397
  STACKTOP = sp; //@line 17398
  return 0; //@line 17398
 } else if ((label | 0) == 26) {
  HEAP32[$AsyncCtx6 >> 2] = 475; //@line 17401
  HEAP8[$AsyncCtx6 + 4 >> 0] = $39; //@line 17403
  HEAP32[$AsyncCtx6 + 8 >> 2] = $16; //@line 17405
  HEAP8[$AsyncCtx6 + 12 >> 0] = $2; //@line 17407
  HEAP8[$AsyncCtx6 + 13 >> 0] = $3; //@line 17409
  HEAP32[$AsyncCtx6 + 16 >> 2] = $0; //@line 17411
  HEAP32[$AsyncCtx6 + 20 >> 2] = $28; //@line 17413
  HEAP32[$AsyncCtx6 + 24 >> 2] = $1; //@line 17415
  HEAP32[$AsyncCtx6 + 28 >> 2] = $38; //@line 17417
  HEAP32[$AsyncCtx6 + 32 >> 2] = $27; //@line 17419
  HEAP32[$AsyncCtx6 + 36 >> 2] = $7; //@line 17421
  HEAP32[$AsyncCtx6 + 40 >> 2] = $8; //@line 17423
  HEAP32[$AsyncCtx6 + 44 >> 2] = $29; //@line 17425
  HEAP32[$AsyncCtx6 + 48 >> 2] = $40; //@line 17427
  HEAP32[$AsyncCtx6 + 52 >> 2] = $7; //@line 17429
  HEAP32[$AsyncCtx6 + 56 >> 2] = $17; //@line 17431
  HEAP32[$AsyncCtx6 + 60 >> 2] = $8; //@line 17433
  HEAP32[$AsyncCtx6 + 64 >> 2] = $18; //@line 17435
  HEAP32[$AsyncCtx6 + 68 >> 2] = $30; //@line 17437
  HEAP32[$AsyncCtx6 + 72 >> 2] = $8; //@line 17439
  HEAP32[$AsyncCtx6 + 76 >> 2] = $0; //@line 17441
  HEAP32[$AsyncCtx6 + 80 >> 2] = $8; //@line 17443
  HEAP32[$AsyncCtx6 + 84 >> 2] = $42; //@line 17445
  HEAP32[$AsyncCtx6 + 88 >> 2] = $8; //@line 17447
  HEAP32[$AsyncCtx6 + 92 >> 2] = $19; //@line 17449
  HEAP32[$AsyncCtx6 + 96 >> 2] = $31; //@line 17451
  HEAP32[$AsyncCtx6 + 100 >> 2] = $9; //@line 17453
  HEAP8[$AsyncCtx6 + 104 >> 0] = $48; //@line 17455
  HEAP32[$AsyncCtx6 + 108 >> 2] = $41; //@line 17457
  HEAP32[$AsyncCtx6 + 112 >> 2] = $20; //@line 17459
  HEAP32[$AsyncCtx6 + 116 >> 2] = $8; //@line 17461
  HEAP32[$AsyncCtx6 + 120 >> 2] = $33; //@line 17463
  HEAP32[$AsyncCtx6 + 124 >> 2] = $12; //@line 17465
  HEAP32[$AsyncCtx6 + 128 >> 2] = $44; //@line 17467
  HEAP32[$AsyncCtx6 + 132 >> 2] = $8; //@line 17469
  HEAP32[$AsyncCtx6 + 136 >> 2] = $22; //@line 17471
  HEAP32[$AsyncCtx6 + 140 >> 2] = $32; //@line 17473
  HEAP32[$AsyncCtx6 + 144 >> 2] = $21; //@line 17475
  HEAP32[$AsyncCtx6 + 148 >> 2] = $7; //@line 17477
  HEAP32[$AsyncCtx6 + 152 >> 2] = $8; //@line 17479
  HEAP32[$AsyncCtx6 + 156 >> 2] = $34; //@line 17481
  HEAP32[$AsyncCtx6 + 160 >> 2] = $7; //@line 17483
  HEAP32[$AsyncCtx6 + 164 >> 2] = $24; //@line 17485
  HEAP32[$AsyncCtx6 + 168 >> 2] = $10; //@line 17487
  HEAP32[$AsyncCtx6 + 172 >> 2] = $7; //@line 17489
  HEAP32[$AsyncCtx6 + 176 >> 2] = $11; //@line 17491
  HEAP32[$AsyncCtx6 + 180 >> 2] = $43; //@line 17493
  HEAP32[$AsyncCtx6 + 184 >> 2] = $23; //@line 17495
  HEAP32[$AsyncCtx6 + 188 >> 2] = $7; //@line 17497
  HEAP32[$AsyncCtx6 + 192 >> 2] = $35; //@line 17499
  HEAP32[$AsyncCtx6 + 196 >> 2] = $13; //@line 17501
  HEAP32[$AsyncCtx6 + 200 >> 2] = $25; //@line 17503
  HEAP32[$AsyncCtx6 + 204 >> 2] = $6; //@line 17505
  HEAP32[$AsyncCtx6 + 208 >> 2] = $26; //@line 17507
  HEAP32[$AsyncCtx6 + 212 >> 2] = $45; //@line 17509
  HEAP32[$AsyncCtx6 + 216 >> 2] = $37; //@line 17511
  HEAP32[$AsyncCtx6 + 220 >> 2] = $46; //@line 17513
  HEAP32[$AsyncCtx6 + 224 >> 2] = $15; //@line 17515
  HEAP32[$AsyncCtx6 + 228 >> 2] = $36; //@line 17517
  sp = STACKTOP; //@line 17518
  STACKTOP = sp; //@line 17519
  return 0; //@line 17519
 } else if ((label | 0) == 31) {
  HEAP32[$AsyncCtx10 >> 2] = 476; //@line 17522
  HEAP8[$AsyncCtx10 + 4 >> 0] = $39; //@line 17524
  HEAP32[$AsyncCtx10 + 8 >> 2] = $16; //@line 17526
  HEAP8[$AsyncCtx10 + 12 >> 0] = $2; //@line 17528
  HEAP8[$AsyncCtx10 + 13 >> 0] = $3; //@line 17530
  HEAP32[$AsyncCtx10 + 16 >> 2] = $0; //@line 17532
  HEAP32[$AsyncCtx10 + 20 >> 2] = $28; //@line 17534
  HEAP32[$AsyncCtx10 + 24 >> 2] = $1; //@line 17536
  HEAP32[$AsyncCtx10 + 28 >> 2] = $38; //@line 17538
  HEAP32[$AsyncCtx10 + 32 >> 2] = $27; //@line 17540
  HEAP32[$AsyncCtx10 + 36 >> 2] = $7; //@line 17542
  HEAP32[$AsyncCtx10 + 40 >> 2] = $8; //@line 17544
  HEAP32[$AsyncCtx10 + 44 >> 2] = $29; //@line 17546
  HEAP32[$AsyncCtx10 + 48 >> 2] = $40; //@line 17548
  HEAP32[$AsyncCtx10 + 52 >> 2] = $7; //@line 17550
  HEAP32[$AsyncCtx10 + 56 >> 2] = $17; //@line 17552
  HEAP32[$AsyncCtx10 + 60 >> 2] = $8; //@line 17554
  HEAP32[$AsyncCtx10 + 64 >> 2] = $18; //@line 17556
  HEAP32[$AsyncCtx10 + 68 >> 2] = $30; //@line 17558
  HEAP8[$AsyncCtx10 + 72 >> 0] = $380; //@line 17560
  HEAP32[$AsyncCtx10 + 76 >> 2] = $8; //@line 17562
  HEAP32[$AsyncCtx10 + 80 >> 2] = $0; //@line 17564
  HEAP32[$AsyncCtx10 + 84 >> 2] = $8; //@line 17566
  HEAP32[$AsyncCtx10 + 88 >> 2] = $42; //@line 17568
  HEAP32[$AsyncCtx10 + 92 >> 2] = $8; //@line 17570
  HEAP32[$AsyncCtx10 + 96 >> 2] = $19; //@line 17572
  HEAP32[$AsyncCtx10 + 100 >> 2] = $31; //@line 17574
  HEAP32[$AsyncCtx10 + 104 >> 2] = $9; //@line 17576
  HEAP32[$AsyncCtx10 + 108 >> 2] = $41; //@line 17578
  HEAP32[$AsyncCtx10 + 112 >> 2] = $20; //@line 17580
  HEAP32[$AsyncCtx10 + 116 >> 2] = $8; //@line 17582
  HEAP32[$AsyncCtx10 + 120 >> 2] = $33; //@line 17584
  HEAP32[$AsyncCtx10 + 124 >> 2] = $12; //@line 17586
  HEAP32[$AsyncCtx10 + 128 >> 2] = $44; //@line 17588
  HEAP32[$AsyncCtx10 + 132 >> 2] = $8; //@line 17590
  HEAP32[$AsyncCtx10 + 136 >> 2] = $22; //@line 17592
  HEAP32[$AsyncCtx10 + 140 >> 2] = $32; //@line 17594
  HEAP32[$AsyncCtx10 + 144 >> 2] = $21; //@line 17596
  HEAP32[$AsyncCtx10 + 148 >> 2] = $7; //@line 17598
  HEAP32[$AsyncCtx10 + 152 >> 2] = $8; //@line 17600
  HEAP32[$AsyncCtx10 + 156 >> 2] = $34; //@line 17602
  HEAP32[$AsyncCtx10 + 160 >> 2] = $7; //@line 17604
  HEAP32[$AsyncCtx10 + 164 >> 2] = $24; //@line 17606
  HEAP32[$AsyncCtx10 + 168 >> 2] = $10; //@line 17608
  HEAP32[$AsyncCtx10 + 172 >> 2] = $7; //@line 17610
  HEAP32[$AsyncCtx10 + 176 >> 2] = $11; //@line 17612
  HEAP32[$AsyncCtx10 + 180 >> 2] = $43; //@line 17614
  HEAP32[$AsyncCtx10 + 184 >> 2] = $23; //@line 17616
  HEAP32[$AsyncCtx10 + 188 >> 2] = $7; //@line 17618
  HEAP32[$AsyncCtx10 + 192 >> 2] = $35; //@line 17620
  HEAP32[$AsyncCtx10 + 196 >> 2] = $13; //@line 17622
  HEAP32[$AsyncCtx10 + 200 >> 2] = $25; //@line 17624
  HEAP32[$AsyncCtx10 + 204 >> 2] = $6; //@line 17626
  HEAP32[$AsyncCtx10 + 208 >> 2] = $26; //@line 17628
  HEAP32[$AsyncCtx10 + 212 >> 2] = $45; //@line 17630
  HEAP32[$AsyncCtx10 + 216 >> 2] = $37; //@line 17632
  HEAP32[$AsyncCtx10 + 220 >> 2] = $46; //@line 17634
  HEAP32[$AsyncCtx10 + 224 >> 2] = $15; //@line 17636
  HEAP32[$AsyncCtx10 + 228 >> 2] = $36; //@line 17638
  sp = STACKTOP; //@line 17639
  STACKTOP = sp; //@line 17640
  return 0; //@line 17640
 } else if ((label | 0) == 39) {
  HEAP32[$AsyncCtx14 >> 2] = 477; //@line 17643
  HEAP8[$AsyncCtx14 + 4 >> 0] = $39; //@line 17645
  HEAP32[$AsyncCtx14 + 8 >> 2] = $16; //@line 17647
  HEAP8[$AsyncCtx14 + 12 >> 0] = $2; //@line 17649
  HEAP8[$AsyncCtx14 + 13 >> 0] = $3; //@line 17651
  HEAP32[$AsyncCtx14 + 16 >> 2] = $0; //@line 17653
  HEAP32[$AsyncCtx14 + 20 >> 2] = $28; //@line 17655
  HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 17657
  HEAP8[$AsyncCtx14 + 28 >> 0] = $483; //@line 17659
  HEAP32[$AsyncCtx14 + 32 >> 2] = $38; //@line 17661
  HEAP32[$AsyncCtx14 + 36 >> 2] = $27; //@line 17663
  HEAP32[$AsyncCtx14 + 40 >> 2] = $7; //@line 17665
  HEAP32[$AsyncCtx14 + 44 >> 2] = $8; //@line 17667
  HEAP32[$AsyncCtx14 + 48 >> 2] = $29; //@line 17669
  HEAP32[$AsyncCtx14 + 52 >> 2] = $40; //@line 17671
  HEAP32[$AsyncCtx14 + 56 >> 2] = $7; //@line 17673
  HEAP32[$AsyncCtx14 + 60 >> 2] = $$0107131; //@line 17675
  HEAP32[$AsyncCtx14 + 64 >> 2] = $17; //@line 17677
  HEAP32[$AsyncCtx14 + 68 >> 2] = $8; //@line 17679
  HEAP32[$AsyncCtx14 + 72 >> 2] = $18; //@line 17681
  HEAP32[$AsyncCtx14 + 76 >> 2] = $30; //@line 17683
  HEAP32[$AsyncCtx14 + 80 >> 2] = $8; //@line 17685
  HEAP8[$AsyncCtx14 + 84 >> 0] = $477; //@line 17687
  HEAP32[$AsyncCtx14 + 88 >> 2] = $0; //@line 17689
  HEAP32[$AsyncCtx14 + 92 >> 2] = $8; //@line 17691
  HEAP32[$AsyncCtx14 + 96 >> 2] = $42; //@line 17693
  HEAP32[$AsyncCtx14 + 100 >> 2] = $8; //@line 17695
  HEAP32[$AsyncCtx14 + 104 >> 2] = $19; //@line 17697
  HEAP32[$AsyncCtx14 + 108 >> 2] = $31; //@line 17699
  HEAP32[$AsyncCtx14 + 112 >> 2] = $9; //@line 17701
  HEAP32[$AsyncCtx14 + 116 >> 2] = $41; //@line 17703
  HEAP32[$AsyncCtx14 + 120 >> 2] = $20; //@line 17705
  HEAP32[$AsyncCtx14 + 124 >> 2] = $8; //@line 17707
  HEAP32[$AsyncCtx14 + 128 >> 2] = $33; //@line 17709
  HEAP32[$AsyncCtx14 + 132 >> 2] = $12; //@line 17711
  HEAP32[$AsyncCtx14 + 136 >> 2] = $44; //@line 17713
  HEAP32[$AsyncCtx14 + 140 >> 2] = $8; //@line 17715
  HEAP32[$AsyncCtx14 + 144 >> 2] = $22; //@line 17717
  HEAP32[$AsyncCtx14 + 148 >> 2] = $32; //@line 17719
  HEAP32[$AsyncCtx14 + 152 >> 2] = $21; //@line 17721
  HEAP32[$AsyncCtx14 + 156 >> 2] = $7; //@line 17723
  HEAP32[$AsyncCtx14 + 160 >> 2] = $8; //@line 17725
  HEAP32[$AsyncCtx14 + 164 >> 2] = $34; //@line 17727
  HEAP32[$AsyncCtx14 + 168 >> 2] = $7; //@line 17729
  HEAP32[$AsyncCtx14 + 172 >> 2] = $24; //@line 17731
  HEAP32[$AsyncCtx14 + 176 >> 2] = $10; //@line 17733
  HEAP32[$AsyncCtx14 + 180 >> 2] = $7; //@line 17735
  HEAP32[$AsyncCtx14 + 184 >> 2] = $11; //@line 17737
  HEAP8[$AsyncCtx14 + 188 >> 0] = $485; //@line 17739
  HEAP32[$AsyncCtx14 + 192 >> 2] = $43; //@line 17741
  HEAP32[$AsyncCtx14 + 196 >> 2] = $23; //@line 17743
  HEAP32[$AsyncCtx14 + 200 >> 2] = $7; //@line 17745
  HEAP32[$AsyncCtx14 + 204 >> 2] = $35; //@line 17747
  HEAP32[$AsyncCtx14 + 208 >> 2] = $13; //@line 17749
  HEAP32[$AsyncCtx14 + 212 >> 2] = $25; //@line 17751
  HEAP32[$AsyncCtx14 + 216 >> 2] = $481; //@line 17753
  HEAP32[$AsyncCtx14 + 220 >> 2] = $6; //@line 17755
  HEAP32[$AsyncCtx14 + 224 >> 2] = $26; //@line 17757
  HEAP32[$AsyncCtx14 + 228 >> 2] = $45; //@line 17759
  HEAP32[$AsyncCtx14 + 232 >> 2] = $37; //@line 17761
  HEAP32[$AsyncCtx14 + 236 >> 2] = $46; //@line 17763
  HEAP32[$AsyncCtx14 + 240 >> 2] = $15; //@line 17765
  HEAP32[$AsyncCtx14 + 244 >> 2] = $36; //@line 17767
  sp = STACKTOP; //@line 17768
  STACKTOP = sp; //@line 17769
  return 0; //@line 17769
 } else if ((label | 0) == 44) {
  HEAP32[$AsyncCtx18 >> 2] = 478; //@line 17772
  HEAP8[$AsyncCtx18 + 4 >> 0] = $39; //@line 17774
  HEAP32[$AsyncCtx18 + 8 >> 2] = $16; //@line 17776
  HEAP8[$AsyncCtx18 + 12 >> 0] = $2; //@line 17778
  HEAP8[$AsyncCtx18 + 13 >> 0] = $3; //@line 17780
  HEAP32[$AsyncCtx18 + 16 >> 2] = $0; //@line 17782
  HEAP32[$AsyncCtx18 + 20 >> 2] = $28; //@line 17784
  HEAP32[$AsyncCtx18 + 24 >> 2] = $1; //@line 17786
  HEAP8[$AsyncCtx18 + 28 >> 0] = $580; //@line 17788
  HEAP32[$AsyncCtx18 + 32 >> 2] = $38; //@line 17790
  HEAP32[$AsyncCtx18 + 36 >> 2] = $27; //@line 17792
  HEAP32[$AsyncCtx18 + 40 >> 2] = $7; //@line 17794
  HEAP32[$AsyncCtx18 + 44 >> 2] = $8; //@line 17796
  HEAP32[$AsyncCtx18 + 48 >> 2] = $29; //@line 17798
  HEAP32[$AsyncCtx18 + 52 >> 2] = $40; //@line 17800
  HEAP32[$AsyncCtx18 + 56 >> 2] = $7; //@line 17802
  HEAP32[$AsyncCtx18 + 60 >> 2] = $17; //@line 17804
  HEAP32[$AsyncCtx18 + 64 >> 2] = $8; //@line 17806
  HEAP32[$AsyncCtx18 + 68 >> 2] = $18; //@line 17808
  HEAP32[$AsyncCtx18 + 72 >> 2] = $30; //@line 17810
  HEAP32[$AsyncCtx18 + 76 >> 2] = $8; //@line 17812
  HEAP32[$AsyncCtx18 + 80 >> 2] = $0; //@line 17814
  HEAP32[$AsyncCtx18 + 84 >> 2] = $8; //@line 17816
  HEAP32[$AsyncCtx18 + 88 >> 2] = $42; //@line 17818
  HEAP32[$AsyncCtx18 + 92 >> 2] = $8; //@line 17820
  HEAP32[$AsyncCtx18 + 96 >> 2] = $19; //@line 17822
  HEAP32[$AsyncCtx18 + 100 >> 2] = $31; //@line 17824
  HEAP32[$AsyncCtx18 + 104 >> 2] = $9; //@line 17826
  HEAP32[$AsyncCtx18 + 108 >> 2] = $41; //@line 17828
  HEAP32[$AsyncCtx18 + 112 >> 2] = $20; //@line 17830
  HEAP32[$AsyncCtx18 + 116 >> 2] = $8; //@line 17832
  HEAP32[$AsyncCtx18 + 120 >> 2] = $33; //@line 17834
  HEAP32[$AsyncCtx18 + 124 >> 2] = $12; //@line 17836
  HEAP32[$AsyncCtx18 + 128 >> 2] = $44; //@line 17838
  HEAP32[$AsyncCtx18 + 132 >> 2] = $8; //@line 17840
  HEAP32[$AsyncCtx18 + 136 >> 2] = $22; //@line 17842
  HEAP32[$AsyncCtx18 + 140 >> 2] = $32; //@line 17844
  HEAP32[$AsyncCtx18 + 144 >> 2] = $21; //@line 17846
  HEAP32[$AsyncCtx18 + 148 >> 2] = $7; //@line 17848
  HEAP32[$AsyncCtx18 + 152 >> 2] = $8; //@line 17850
  HEAP32[$AsyncCtx18 + 156 >> 2] = $34; //@line 17852
  HEAP32[$AsyncCtx18 + 160 >> 2] = $7; //@line 17854
  HEAP32[$AsyncCtx18 + 164 >> 2] = $24; //@line 17856
  HEAP32[$AsyncCtx18 + 168 >> 2] = $10; //@line 17858
  HEAP32[$AsyncCtx18 + 172 >> 2] = $7; //@line 17860
  HEAP32[$AsyncCtx18 + 176 >> 2] = $11; //@line 17862
  HEAP32[$AsyncCtx18 + 180 >> 2] = $43; //@line 17864
  HEAP32[$AsyncCtx18 + 184 >> 2] = $23; //@line 17866
  HEAP32[$AsyncCtx18 + 188 >> 2] = $7; //@line 17868
  HEAP32[$AsyncCtx18 + 192 >> 2] = $35; //@line 17870
  HEAP32[$AsyncCtx18 + 196 >> 2] = $13; //@line 17872
  HEAP32[$AsyncCtx18 + 200 >> 2] = $25; //@line 17874
  HEAP32[$AsyncCtx18 + 204 >> 2] = $6; //@line 17876
  HEAP32[$AsyncCtx18 + 208 >> 2] = $26; //@line 17878
  HEAP32[$AsyncCtx18 + 212 >> 2] = $45; //@line 17880
  HEAP32[$AsyncCtx18 + 216 >> 2] = $37; //@line 17882
  HEAP32[$AsyncCtx18 + 220 >> 2] = $46; //@line 17884
  HEAP32[$AsyncCtx18 + 224 >> 2] = $15; //@line 17886
  HEAP32[$AsyncCtx18 + 228 >> 2] = $36; //@line 17888
  sp = STACKTOP; //@line 17889
  STACKTOP = sp; //@line 17890
  return 0; //@line 17890
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 17893
  return $$0107$lcssa | 0; //@line 17893
 }
 return 0; //@line 17895
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13904
 STACKTOP = STACKTOP + 560 | 0; //@line 13905
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 13905
 $6 = sp + 8 | 0; //@line 13906
 $7 = sp; //@line 13907
 $8 = sp + 524 | 0; //@line 13908
 $9 = $8; //@line 13909
 $10 = sp + 512 | 0; //@line 13910
 HEAP32[$7 >> 2] = 0; //@line 13911
 $11 = $10 + 12 | 0; //@line 13912
 ___DOUBLE_BITS_677($1) | 0; //@line 13913
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 13918
  $$0520 = 1; //@line 13918
  $$0521 = 15476; //@line 13918
 } else {
  $$0471 = $1; //@line 13929
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 13929
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 15477 : 15482 : 15479; //@line 13929
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 13931
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 13940
   $31 = $$0520 + 3 | 0; //@line 13945
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 13947
   _out_670($0, $$0521, $$0520); //@line 13948
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 15503 : 15507 : $27 ? 15495 : 15499, 3); //@line 13949
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 13951
   $$sink560 = $31; //@line 13952
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 13955
   $36 = $35 != 0.0; //@line 13956
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 13960
   }
   $39 = $5 | 32; //@line 13962
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 13965
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 13968
    $44 = $$0520 | 2; //@line 13969
    $46 = 12 - $3 | 0; //@line 13971
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 13976
     } else {
      $$0509585 = 8.0; //@line 13978
      $$1508586 = $46; //@line 13978
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 13980
       $$0509585 = $$0509585 * 16.0; //@line 13981
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 13996
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 14001
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 14006
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 14009
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14012
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 14015
     HEAP8[$68 >> 0] = 48; //@line 14016
     $$0511 = $68; //@line 14017
    } else {
     $$0511 = $66; //@line 14019
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 14026
    $76 = $$0511 + -2 | 0; //@line 14029
    HEAP8[$76 >> 0] = $5 + 15; //@line 14030
    $77 = ($3 | 0) < 1; //@line 14031
    $79 = ($4 & 8 | 0) == 0; //@line 14033
    $$0523 = $8; //@line 14034
    $$2473 = $$1472; //@line 14034
    while (1) {
     $80 = ~~$$2473; //@line 14036
     $86 = $$0523 + 1 | 0; //@line 14042
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[15511 + $80 >> 0]; //@line 14043
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 14046
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 14055
      } else {
       HEAP8[$86 >> 0] = 46; //@line 14058
       $$1524 = $$0523 + 2 | 0; //@line 14059
      }
     } else {
      $$1524 = $86; //@line 14062
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 14066
     }
    }
    $$pre693 = $$1524; //@line 14072
    if (!$3) {
     label = 24; //@line 14074
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 14082
      $$sink = $3 + 2 | 0; //@line 14082
     } else {
      label = 24; //@line 14084
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 14088
     $$pre$phi691Z2D = $101; //@line 14089
     $$sink = $101; //@line 14089
    }
    $104 = $11 - $76 | 0; //@line 14093
    $106 = $104 + $44 + $$sink | 0; //@line 14095
    _pad_676($0, 32, $2, $106, $4); //@line 14096
    _out_670($0, $$0521$, $44); //@line 14097
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 14099
    _out_670($0, $8, $$pre$phi691Z2D); //@line 14100
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 14102
    _out_670($0, $76, $104); //@line 14103
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 14105
    $$sink560 = $106; //@line 14106
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 14110
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 14114
    HEAP32[$7 >> 2] = $113; //@line 14115
    $$3 = $35 * 268435456.0; //@line 14116
    $$pr = $113; //@line 14116
   } else {
    $$3 = $35; //@line 14119
    $$pr = HEAP32[$7 >> 2] | 0; //@line 14119
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 14123
   $$0498 = $$561; //@line 14124
   $$4 = $$3; //@line 14124
   do {
    $116 = ~~$$4 >>> 0; //@line 14126
    HEAP32[$$0498 >> 2] = $116; //@line 14127
    $$0498 = $$0498 + 4 | 0; //@line 14128
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 14131
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 14141
    $$1499662 = $$0498; //@line 14141
    $124 = $$pr; //@line 14141
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 14144
     $$0488655 = $$1499662 + -4 | 0; //@line 14145
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 14148
     } else {
      $$0488657 = $$0488655; //@line 14150
      $$0497656 = 0; //@line 14150
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 14153
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 14155
       $131 = tempRet0; //@line 14156
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 14157
       HEAP32[$$0488657 >> 2] = $132; //@line 14159
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 14160
       $$0488657 = $$0488657 + -4 | 0; //@line 14162
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 14172
      } else {
       $138 = $$1482663 + -4 | 0; //@line 14174
       HEAP32[$138 >> 2] = $$0497656; //@line 14175
       $$2483$ph = $138; //@line 14176
      }
     }
     $$2500 = $$1499662; //@line 14179
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 14185
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 14189
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 14195
     HEAP32[$7 >> 2] = $144; //@line 14196
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 14199
      $$1499662 = $$2500; //@line 14199
      $124 = $144; //@line 14199
     } else {
      $$1482$lcssa = $$2483$ph; //@line 14201
      $$1499$lcssa = $$2500; //@line 14201
      $$pr566 = $144; //@line 14201
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 14206
    $$1499$lcssa = $$0498; //@line 14206
    $$pr566 = $$pr; //@line 14206
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 14212
    $150 = ($39 | 0) == 102; //@line 14213
    $$3484650 = $$1482$lcssa; //@line 14214
    $$3501649 = $$1499$lcssa; //@line 14214
    $152 = $$pr566; //@line 14214
    while (1) {
     $151 = 0 - $152 | 0; //@line 14216
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 14218
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 14222
      $161 = 1e9 >>> $154; //@line 14223
      $$0487644 = 0; //@line 14224
      $$1489643 = $$3484650; //@line 14224
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 14226
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 14230
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 14231
       $$1489643 = $$1489643 + 4 | 0; //@line 14232
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14243
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 14246
       $$4502 = $$3501649; //@line 14246
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 14249
       $$$3484700 = $$$3484; //@line 14250
       $$4502 = $$3501649 + 4 | 0; //@line 14250
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14257
      $$4502 = $$3501649; //@line 14257
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 14259
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 14266
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 14268
     HEAP32[$7 >> 2] = $152; //@line 14269
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 14274
      $$3501$lcssa = $$$4502; //@line 14274
      break;
     } else {
      $$3484650 = $$$3484700; //@line 14272
      $$3501649 = $$$4502; //@line 14272
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 14279
    $$3501$lcssa = $$1499$lcssa; //@line 14279
   }
   $185 = $$561; //@line 14282
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 14287
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 14288
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 14291
    } else {
     $$0514639 = $189; //@line 14293
     $$0530638 = 10; //@line 14293
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 14295
      $193 = $$0514639 + 1 | 0; //@line 14296
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 14299
       break;
      } else {
       $$0514639 = $193; //@line 14302
      }
     }
    }
   } else {
    $$1515 = 0; //@line 14307
   }
   $198 = ($39 | 0) == 103; //@line 14312
   $199 = ($$540 | 0) != 0; //@line 14313
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 14316
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 14325
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 14328
    $213 = ($209 | 0) % 9 | 0; //@line 14329
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 14332
     $$1531632 = 10; //@line 14332
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 14335
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 14338
       $$1531632 = $215; //@line 14338
      } else {
       $$1531$lcssa = $215; //@line 14340
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 14345
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 14347
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 14348
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 14351
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 14354
     $$4518 = $$1515; //@line 14354
     $$8 = $$3484$lcssa; //@line 14354
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 14359
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 14360
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 14365
     if (!$$0520) {
      $$1467 = $$$564; //@line 14368
      $$1469 = $$543; //@line 14368
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 14371
      $$1467 = $230 ? -$$$564 : $$$564; //@line 14376
      $$1469 = $230 ? -$$543 : $$543; //@line 14376
     }
     $233 = $217 - $218 | 0; //@line 14378
     HEAP32[$212 >> 2] = $233; //@line 14379
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 14383
      HEAP32[$212 >> 2] = $236; //@line 14384
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 14387
       $$sink547625 = $212; //@line 14387
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 14389
        HEAP32[$$sink547625 >> 2] = 0; //@line 14390
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 14393
         HEAP32[$240 >> 2] = 0; //@line 14394
         $$6 = $240; //@line 14395
        } else {
         $$6 = $$5486626; //@line 14397
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 14400
        HEAP32[$238 >> 2] = $242; //@line 14401
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 14404
         $$sink547625 = $238; //@line 14404
        } else {
         $$5486$lcssa = $$6; //@line 14406
         $$sink547$lcssa = $238; //@line 14406
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 14411
       $$sink547$lcssa = $212; //@line 14411
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 14416
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 14417
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 14420
       $$4518 = $247; //@line 14420
       $$8 = $$5486$lcssa; //@line 14420
      } else {
       $$2516621 = $247; //@line 14422
       $$2532620 = 10; //@line 14422
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 14424
        $251 = $$2516621 + 1 | 0; //@line 14425
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 14428
         $$4518 = $251; //@line 14428
         $$8 = $$5486$lcssa; //@line 14428
         break;
        } else {
         $$2516621 = $251; //@line 14431
        }
       }
      }
     } else {
      $$4492 = $212; //@line 14436
      $$4518 = $$1515; //@line 14436
      $$8 = $$3484$lcssa; //@line 14436
     }
    }
    $253 = $$4492 + 4 | 0; //@line 14439
    $$5519$ph = $$4518; //@line 14442
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 14442
    $$9$ph = $$8; //@line 14442
   } else {
    $$5519$ph = $$1515; //@line 14444
    $$7505$ph = $$3501$lcssa; //@line 14444
    $$9$ph = $$3484$lcssa; //@line 14444
   }
   $$7505 = $$7505$ph; //@line 14446
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 14450
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 14453
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 14457
    } else {
     $$lcssa675 = 1; //@line 14459
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 14463
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 14468
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 14476
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 14476
     } else {
      $$0479 = $5 + -2 | 0; //@line 14480
      $$2476 = $$540$ + -1 | 0; //@line 14480
     }
     $267 = $4 & 8; //@line 14482
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 14487
       if (!$270) {
        $$2529 = 9; //@line 14490
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 14495
         $$3533616 = 10; //@line 14495
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 14497
          $275 = $$1528617 + 1 | 0; //@line 14498
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 14504
           break;
          } else {
           $$1528617 = $275; //@line 14502
          }
         }
        } else {
         $$2529 = 0; //@line 14509
        }
       }
      } else {
       $$2529 = 9; //@line 14513
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 14521
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 14523
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 14525
       $$1480 = $$0479; //@line 14528
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 14528
       $$pre$phi698Z2D = 0; //@line 14528
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 14532
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 14534
       $$1480 = $$0479; //@line 14537
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 14537
       $$pre$phi698Z2D = 0; //@line 14537
       break;
      }
     } else {
      $$1480 = $$0479; //@line 14541
      $$3477 = $$2476; //@line 14541
      $$pre$phi698Z2D = $267; //@line 14541
     }
    } else {
     $$1480 = $5; //@line 14545
     $$3477 = $$540; //@line 14545
     $$pre$phi698Z2D = $4 & 8; //@line 14545
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 14548
   $294 = ($292 | 0) != 0 & 1; //@line 14550
   $296 = ($$1480 | 32 | 0) == 102; //@line 14552
   if ($296) {
    $$2513 = 0; //@line 14556
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 14556
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 14559
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14562
    $304 = $11; //@line 14563
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 14568
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 14570
      HEAP8[$308 >> 0] = 48; //@line 14571
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 14576
      } else {
       $$1512$lcssa = $308; //@line 14578
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 14583
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 14590
    $318 = $$1512$lcssa + -2 | 0; //@line 14592
    HEAP8[$318 >> 0] = $$1480; //@line 14593
    $$2513 = $318; //@line 14596
    $$pn = $304 - $318 | 0; //@line 14596
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 14601
   _pad_676($0, 32, $2, $323, $4); //@line 14602
   _out_670($0, $$0521, $$0520); //@line 14603
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 14605
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 14608
    $326 = $8 + 9 | 0; //@line 14609
    $327 = $326; //@line 14610
    $328 = $8 + 8 | 0; //@line 14611
    $$5493600 = $$0496$$9; //@line 14612
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 14615
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 14620
       $$1465 = $328; //@line 14621
      } else {
       $$1465 = $330; //@line 14623
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 14630
       $$0464597 = $330; //@line 14631
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 14633
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 14636
        } else {
         $$1465 = $335; //@line 14638
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 14643
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 14648
     $$5493600 = $$5493600 + 4 | 0; //@line 14649
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 15527, 1); //@line 14659
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 14665
     $$6494592 = $$5493600; //@line 14665
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 14668
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 14673
       $$0463587 = $347; //@line 14674
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 14676
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 14679
        } else {
         $$0463$lcssa = $351; //@line 14681
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 14686
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 14690
      $$6494592 = $$6494592 + 4 | 0; //@line 14691
      $356 = $$4478593 + -9 | 0; //@line 14692
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 14699
       break;
      } else {
       $$4478593 = $356; //@line 14697
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 14704
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 14707
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 14710
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 14713
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 14714
     $365 = $363; //@line 14715
     $366 = 0 - $9 | 0; //@line 14716
     $367 = $8 + 8 | 0; //@line 14717
     $$5605 = $$3477; //@line 14718
     $$7495604 = $$9$ph; //@line 14718
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 14721
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 14724
       $$0 = $367; //@line 14725
      } else {
       $$0 = $369; //@line 14727
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 14732
        _out_670($0, $$0, 1); //@line 14733
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 14737
         break;
        }
        _out_670($0, 15527, 1); //@line 14740
        $$2 = $375; //@line 14741
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 14745
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 14750
        $$1601 = $$0; //@line 14751
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 14753
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 14756
         } else {
          $$2 = $373; //@line 14758
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 14765
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 14768
      $381 = $$5605 - $378 | 0; //@line 14769
      $$7495604 = $$7495604 + 4 | 0; //@line 14770
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 14777
       break;
      } else {
       $$5605 = $381; //@line 14775
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 14782
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 14785
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 14789
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 14792
   $$sink560 = $323; //@line 14793
  }
 } while (0);
 STACKTOP = sp; //@line 14798
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 14798
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 12476
 STACKTOP = STACKTOP + 64 | 0; //@line 12477
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 12477
 $5 = sp + 16 | 0; //@line 12478
 $6 = sp; //@line 12479
 $7 = sp + 24 | 0; //@line 12480
 $8 = sp + 8 | 0; //@line 12481
 $9 = sp + 20 | 0; //@line 12482
 HEAP32[$5 >> 2] = $1; //@line 12483
 $10 = ($0 | 0) != 0; //@line 12484
 $11 = $7 + 40 | 0; //@line 12485
 $12 = $11; //@line 12486
 $13 = $7 + 39 | 0; //@line 12487
 $14 = $8 + 4 | 0; //@line 12488
 $$0243 = 0; //@line 12489
 $$0247 = 0; //@line 12489
 $$0269 = 0; //@line 12489
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 12498
     $$1248 = -1; //@line 12499
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 12503
     break;
    }
   } else {
    $$1248 = $$0247; //@line 12507
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 12510
  $21 = HEAP8[$20 >> 0] | 0; //@line 12511
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 12514
   break;
  } else {
   $23 = $21; //@line 12517
   $25 = $20; //@line 12517
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 12522
     $27 = $25; //@line 12522
     label = 9; //@line 12523
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 12528
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 12535
   HEAP32[$5 >> 2] = $24; //@line 12536
   $23 = HEAP8[$24 >> 0] | 0; //@line 12538
   $25 = $24; //@line 12538
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 12543
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 12548
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 12551
     $27 = $27 + 2 | 0; //@line 12552
     HEAP32[$5 >> 2] = $27; //@line 12553
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 12560
      break;
     } else {
      $$0249303 = $30; //@line 12557
      label = 9; //@line 12558
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 12568
  if ($10) {
   _out_670($0, $20, $36); //@line 12570
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 12574
   $$0247 = $$1248; //@line 12574
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 12582
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 12583
  if ($43) {
   $$0253 = -1; //@line 12585
   $$1270 = $$0269; //@line 12585
   $$sink = 1; //@line 12585
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 12595
    $$1270 = 1; //@line 12595
    $$sink = 3; //@line 12595
   } else {
    $$0253 = -1; //@line 12597
    $$1270 = $$0269; //@line 12597
    $$sink = 1; //@line 12597
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 12600
  HEAP32[$5 >> 2] = $51; //@line 12601
  $52 = HEAP8[$51 >> 0] | 0; //@line 12602
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 12604
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 12611
   $$lcssa291 = $52; //@line 12611
   $$lcssa292 = $51; //@line 12611
  } else {
   $$0262309 = 0; //@line 12613
   $60 = $52; //@line 12613
   $65 = $51; //@line 12613
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 12618
    $64 = $65 + 1 | 0; //@line 12619
    HEAP32[$5 >> 2] = $64; //@line 12620
    $66 = HEAP8[$64 >> 0] | 0; //@line 12621
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 12623
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 12630
     $$lcssa291 = $66; //@line 12630
     $$lcssa292 = $64; //@line 12630
     break;
    } else {
     $$0262309 = $63; //@line 12633
     $60 = $66; //@line 12633
     $65 = $64; //@line 12633
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 12645
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 12647
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 12652
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12657
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12669
     $$2271 = 1; //@line 12669
     $storemerge274 = $79 + 3 | 0; //@line 12669
    } else {
     label = 23; //@line 12671
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 12675
    if ($$1270 | 0) {
     $$0 = -1; //@line 12678
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12693
     $106 = HEAP32[$105 >> 2] | 0; //@line 12694
     HEAP32[$2 >> 2] = $105 + 4; //@line 12696
     $363 = $106; //@line 12697
    } else {
     $363 = 0; //@line 12699
    }
    $$0259 = $363; //@line 12703
    $$2271 = 0; //@line 12703
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 12703
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 12705
   $109 = ($$0259 | 0) < 0; //@line 12706
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 12711
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 12711
   $$3272 = $$2271; //@line 12711
   $115 = $storemerge274; //@line 12711
  } else {
   $112 = _getint_671($5) | 0; //@line 12713
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 12716
    break;
   }
   $$1260 = $112; //@line 12720
   $$1263 = $$0262$lcssa; //@line 12720
   $$3272 = $$1270; //@line 12720
   $115 = HEAP32[$5 >> 2] | 0; //@line 12720
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 12731
     $156 = _getint_671($5) | 0; //@line 12732
     $$0254 = $156; //@line 12734
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 12734
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 12743
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 12748
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12753
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12760
      $144 = $125 + 4 | 0; //@line 12764
      HEAP32[$5 >> 2] = $144; //@line 12765
      $$0254 = $140; //@line 12766
      $$pre345 = $144; //@line 12766
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 12772
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12787
     $152 = HEAP32[$151 >> 2] | 0; //@line 12788
     HEAP32[$2 >> 2] = $151 + 4; //@line 12790
     $364 = $152; //@line 12791
    } else {
     $364 = 0; //@line 12793
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 12796
    HEAP32[$5 >> 2] = $154; //@line 12797
    $$0254 = $364; //@line 12798
    $$pre345 = $154; //@line 12798
   } else {
    $$0254 = -1; //@line 12800
    $$pre345 = $115; //@line 12800
   }
  } while (0);
  $$0252 = 0; //@line 12803
  $158 = $$pre345; //@line 12803
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 12810
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 12813
   HEAP32[$5 >> 2] = $158; //@line 12814
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (14995 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 12819
   $168 = $167 & 255; //@line 12820
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 12824
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 12831
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 12835
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 12839
     break L1;
    } else {
     label = 50; //@line 12842
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 12847
     $176 = $3 + ($$0253 << 3) | 0; //@line 12849
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 12854
     $182 = $6; //@line 12855
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 12857
     HEAP32[$182 + 4 >> 2] = $181; //@line 12860
     label = 50; //@line 12861
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 12865
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 12868
    $187 = HEAP32[$5 >> 2] | 0; //@line 12870
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 12874
   if ($10) {
    $187 = $158; //@line 12876
   } else {
    $$0243 = 0; //@line 12878
    $$0247 = $$1248; //@line 12878
    $$0269 = $$3272; //@line 12878
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 12884
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 12890
  $196 = $$1263 & -65537; //@line 12893
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 12894
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12902
       $$0243 = 0; //@line 12903
       $$0247 = $$1248; //@line 12903
       $$0269 = $$3272; //@line 12903
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12909
       $$0243 = 0; //@line 12910
       $$0247 = $$1248; //@line 12910
       $$0269 = $$3272; //@line 12910
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 12918
       HEAP32[$208 >> 2] = $$1248; //@line 12920
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12923
       $$0243 = 0; //@line 12924
       $$0247 = $$1248; //@line 12924
       $$0269 = $$3272; //@line 12924
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 12931
       $$0243 = 0; //@line 12932
       $$0247 = $$1248; //@line 12932
       $$0269 = $$3272; //@line 12932
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 12939
       $$0243 = 0; //@line 12940
       $$0247 = $$1248; //@line 12940
       $$0269 = $$3272; //@line 12940
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12946
       $$0243 = 0; //@line 12947
       $$0247 = $$1248; //@line 12947
       $$0269 = $$3272; //@line 12947
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 12955
       HEAP32[$220 >> 2] = $$1248; //@line 12957
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12960
       $$0243 = 0; //@line 12961
       $$0247 = $$1248; //@line 12961
       $$0269 = $$3272; //@line 12961
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 12966
       $$0247 = $$1248; //@line 12966
       $$0269 = $$3272; //@line 12966
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 12976
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 12976
     $$3265 = $$1263$ | 8; //@line 12976
     label = 62; //@line 12977
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 12981
     $$1255 = $$0254; //@line 12981
     $$3265 = $$1263$; //@line 12981
     label = 62; //@line 12982
     break;
    }
   case 111:
    {
     $242 = $6; //@line 12986
     $244 = HEAP32[$242 >> 2] | 0; //@line 12988
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 12991
     $248 = _fmt_o($244, $247, $11) | 0; //@line 12992
     $252 = $12 - $248 | 0; //@line 12996
     $$0228 = $248; //@line 13001
     $$1233 = 0; //@line 13001
     $$1238 = 15459; //@line 13001
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 13001
     $$4266 = $$1263$; //@line 13001
     $281 = $244; //@line 13001
     $283 = $247; //@line 13001
     label = 68; //@line 13002
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 13006
     $258 = HEAP32[$256 >> 2] | 0; //@line 13008
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 13011
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 13014
      $264 = tempRet0; //@line 13015
      $265 = $6; //@line 13016
      HEAP32[$265 >> 2] = $263; //@line 13018
      HEAP32[$265 + 4 >> 2] = $264; //@line 13021
      $$0232 = 1; //@line 13022
      $$0237 = 15459; //@line 13022
      $275 = $263; //@line 13022
      $276 = $264; //@line 13022
      label = 67; //@line 13023
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 13035
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 15459 : 15461 : 15460; //@line 13035
      $275 = $258; //@line 13035
      $276 = $261; //@line 13035
      label = 67; //@line 13036
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 13042
     $$0232 = 0; //@line 13048
     $$0237 = 15459; //@line 13048
     $275 = HEAP32[$197 >> 2] | 0; //@line 13048
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 13048
     label = 67; //@line 13049
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 13060
     $$2 = $13; //@line 13061
     $$2234 = 0; //@line 13061
     $$2239 = 15459; //@line 13061
     $$2251 = $11; //@line 13061
     $$5 = 1; //@line 13061
     $$6268 = $196; //@line 13061
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 13068
     label = 72; //@line 13069
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 13073
     $$1 = $302 | 0 ? $302 : 15469; //@line 13076
     label = 72; //@line 13077
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 13087
     HEAP32[$14 >> 2] = 0; //@line 13088
     HEAP32[$6 >> 2] = $8; //@line 13089
     $$4258354 = -1; //@line 13090
     $365 = $8; //@line 13090
     label = 76; //@line 13091
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 13095
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 13098
      $$0240$lcssa356 = 0; //@line 13099
      label = 85; //@line 13100
     } else {
      $$4258354 = $$0254; //@line 13102
      $365 = $$pre348; //@line 13102
      label = 76; //@line 13103
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 13110
     $$0247 = $$1248; //@line 13110
     $$0269 = $$3272; //@line 13110
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 13115
     $$2234 = 0; //@line 13115
     $$2239 = 15459; //@line 13115
     $$2251 = $11; //@line 13115
     $$5 = $$0254; //@line 13115
     $$6268 = $$1263$; //@line 13115
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 13121
    $227 = $6; //@line 13122
    $229 = HEAP32[$227 >> 2] | 0; //@line 13124
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 13127
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 13129
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 13135
    $$0228 = $234; //@line 13140
    $$1233 = $or$cond278 ? 0 : 2; //@line 13140
    $$1238 = $or$cond278 ? 15459 : 15459 + ($$1236 >> 4) | 0; //@line 13140
    $$2256 = $$1255; //@line 13140
    $$4266 = $$3265; //@line 13140
    $281 = $229; //@line 13140
    $283 = $232; //@line 13140
    label = 68; //@line 13141
   } else if ((label | 0) == 67) {
    label = 0; //@line 13144
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 13146
    $$1233 = $$0232; //@line 13146
    $$1238 = $$0237; //@line 13146
    $$2256 = $$0254; //@line 13146
    $$4266 = $$1263$; //@line 13146
    $281 = $275; //@line 13146
    $283 = $276; //@line 13146
    label = 68; //@line 13147
   } else if ((label | 0) == 72) {
    label = 0; //@line 13150
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 13151
    $306 = ($305 | 0) == 0; //@line 13152
    $$2 = $$1; //@line 13159
    $$2234 = 0; //@line 13159
    $$2239 = 15459; //@line 13159
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 13159
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 13159
    $$6268 = $196; //@line 13159
   } else if ((label | 0) == 76) {
    label = 0; //@line 13162
    $$0229316 = $365; //@line 13163
    $$0240315 = 0; //@line 13163
    $$1244314 = 0; //@line 13163
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 13165
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 13168
      $$2245 = $$1244314; //@line 13168
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 13171
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 13177
      $$2245 = $320; //@line 13177
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 13181
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 13184
      $$0240315 = $325; //@line 13184
      $$1244314 = $320; //@line 13184
     } else {
      $$0240$lcssa = $325; //@line 13186
      $$2245 = $320; //@line 13186
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 13192
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 13195
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 13198
     label = 85; //@line 13199
    } else {
     $$1230327 = $365; //@line 13201
     $$1241326 = 0; //@line 13201
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 13203
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13206
       label = 85; //@line 13207
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 13210
      $$1241326 = $331 + $$1241326 | 0; //@line 13211
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13214
       label = 85; //@line 13215
       break L97;
      }
      _out_670($0, $9, $331); //@line 13219
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13224
       label = 85; //@line 13225
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 13222
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 13233
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 13239
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 13241
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 13246
   $$2 = $or$cond ? $$0228 : $11; //@line 13251
   $$2234 = $$1233; //@line 13251
   $$2239 = $$1238; //@line 13251
   $$2251 = $11; //@line 13251
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 13251
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 13251
  } else if ((label | 0) == 85) {
   label = 0; //@line 13254
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 13256
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 13259
   $$0247 = $$1248; //@line 13259
   $$0269 = $$3272; //@line 13259
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 13264
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 13266
  $345 = $$$5 + $$2234 | 0; //@line 13267
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 13269
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 13270
  _out_670($0, $$2239, $$2234); //@line 13271
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 13273
  _pad_676($0, 48, $$$5, $343, 0); //@line 13274
  _out_670($0, $$2, $343); //@line 13275
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 13277
  $$0243 = $$2261; //@line 13278
  $$0247 = $$1248; //@line 13278
  $$0269 = $$3272; //@line 13278
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 13286
    } else {
     $$2242302 = 1; //@line 13288
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 13291
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 13294
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 13298
      $356 = $$2242302 + 1 | 0; //@line 13299
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 13302
      } else {
       $$2242$lcssa = $356; //@line 13304
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 13310
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 13316
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 13322
       } else {
        $$0 = 1; //@line 13324
        break;
       }
      }
     } else {
      $$0 = 1; //@line 13329
     }
    }
   } else {
    $$0 = $$1248; //@line 13333
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13337
 return $$0 | 0; //@line 13337
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3656
 STACKTOP = STACKTOP + 96 | 0; //@line 3657
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 3657
 $vararg_buffer23 = sp + 72 | 0; //@line 3658
 $vararg_buffer20 = sp + 64 | 0; //@line 3659
 $vararg_buffer18 = sp + 56 | 0; //@line 3660
 $vararg_buffer15 = sp + 48 | 0; //@line 3661
 $vararg_buffer12 = sp + 40 | 0; //@line 3662
 $vararg_buffer9 = sp + 32 | 0; //@line 3663
 $vararg_buffer6 = sp + 24 | 0; //@line 3664
 $vararg_buffer3 = sp + 16 | 0; //@line 3665
 $vararg_buffer1 = sp + 8 | 0; //@line 3666
 $vararg_buffer = sp; //@line 3667
 $4 = sp + 80 | 0; //@line 3668
 $5 = HEAP32[176] | 0; //@line 3669
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 3673
   FUNCTION_TABLE_v[$5 & 7](); //@line 3674
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 126; //@line 3677
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 3679
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 3681
    HEAP8[$AsyncCtx + 12 >> 0] = $0; //@line 3683
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer23; //@line 3685
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer23; //@line 3687
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 3689
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer20; //@line 3691
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer20; //@line 3693
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer; //@line 3695
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer; //@line 3697
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer1; //@line 3699
    HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer1; //@line 3701
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer15; //@line 3703
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer15; //@line 3705
    HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer18; //@line 3707
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer18; //@line 3709
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer9; //@line 3711
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer9; //@line 3713
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer12; //@line 3715
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer12; //@line 3717
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer6; //@line 3719
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer6; //@line 3721
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer3; //@line 3723
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer3; //@line 3725
    HEAP32[$AsyncCtx + 100 >> 2] = $4; //@line 3727
    sp = STACKTOP; //@line 3728
    STACKTOP = sp; //@line 3729
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3731
    HEAP32[178] = (HEAP32[178] | 0) + 1; //@line 3734
    break;
   }
  }
 } while (0);
 $34 = HEAP32[167] | 0; //@line 3739
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 3743
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[164] | 0; //@line 3749
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 3756
       break;
      }
     }
     $43 = HEAP32[165] | 0; //@line 3760
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 3764
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 3769
      } else {
       label = 11; //@line 3771
      }
     }
    } else {
     label = 11; //@line 3775
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 3779
   }
   if (!((HEAP32[174] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[171] = HEAP32[169]; //@line 3791
    break;
   }
   $54 = HEAPU8[652] | 0; //@line 3795
   $55 = $0 & 255; //@line 3796
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 3801
    $$lobit = $59 >>> 6; //@line 3802
    $60 = $$lobit & 255; //@line 3803
    $64 = ($54 & 32 | 0) == 0; //@line 3807
    $65 = HEAP32[168] | 0; //@line 3808
    $66 = HEAP32[167] | 0; //@line 3809
    $67 = $0 << 24 >> 24 == 1; //@line 3810
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3814
      _vsnprintf($66, $65, $2, $3) | 0; //@line 3815
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 127; //@line 3818
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 3821
       sp = STACKTOP; //@line 3822
       STACKTOP = sp; //@line 3823
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 3825
      $69 = HEAP32[175] | 0; //@line 3826
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[174] | 0; //@line 3830
       $74 = HEAP32[167] | 0; //@line 3831
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3832
       FUNCTION_TABLE_vi[$73 & 1023]($74); //@line 3833
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 130; //@line 3836
        sp = STACKTOP; //@line 3837
        STACKTOP = sp; //@line 3838
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 3840
        break;
       }
      }
      $71 = HEAP32[167] | 0; //@line 3844
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3845
      FUNCTION_TABLE_vi[$69 & 1023]($71); //@line 3846
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 128; //@line 3849
       sp = STACKTOP; //@line 3850
       STACKTOP = sp; //@line 3851
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 3853
      $72 = HEAP32[175] | 0; //@line 3854
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3855
      FUNCTION_TABLE_vi[$72 & 1023](11742); //@line 3856
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 129; //@line 3859
       sp = STACKTOP; //@line 3860
       STACKTOP = sp; //@line 3861
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 3863
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 3870
       $$1143 = $66; //@line 3870
       $$1145 = $65; //@line 3870
       $$3154 = 0; //@line 3870
       label = 38; //@line 3871
      } else {
       if ($64) {
        $$0142 = $66; //@line 3874
        $$0144 = $65; //@line 3874
       } else {
        $76 = _snprintf($66, $65, 11744, $vararg_buffer) | 0; //@line 3876
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 3878
        $78 = ($$ | 0) > 0; //@line 3879
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 3884
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 3884
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 3888
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 11762; //@line 3894
          label = 35; //@line 3895
          break;
         }
        case 1:
         {
          $$sink = 11768; //@line 3899
          label = 35; //@line 3900
          break;
         }
        case 3:
         {
          $$sink = 11756; //@line 3904
          label = 35; //@line 3905
          break;
         }
        case 7:
         {
          $$sink = 11750; //@line 3909
          label = 35; //@line 3910
          break;
         }
        default:
         {
          $$0141 = 0; //@line 3914
          $$1152 = 0; //@line 3914
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 3918
         $$0141 = $60 & 1; //@line 3921
         $$1152 = _snprintf($$0142, $$0144, 11774, $vararg_buffer1) | 0; //@line 3921
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 3924
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 3926
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 3928
         $$1$off0 = $extract$t159; //@line 3933
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 3933
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 3933
         $$3154 = $$1152; //@line 3933
         label = 38; //@line 3934
        } else {
         $$1$off0 = $extract$t159; //@line 3936
         $$1143 = $$0142; //@line 3936
         $$1145 = $$0144; //@line 3936
         $$3154 = $$1152$; //@line 3936
         label = 38; //@line 3937
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[172] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 3950
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 3951
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 3952
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 131; //@line 3955
           HEAP8[$AsyncCtx60 + 4 >> 0] = $$1$off0 & 1; //@line 3958
           HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer23; //@line 3960
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer23; //@line 3962
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer20; //@line 3964
           HEAP32[$AsyncCtx60 + 20 >> 2] = $vararg_buffer20; //@line 3966
           HEAP32[$AsyncCtx60 + 24 >> 2] = $2; //@line 3968
           HEAP32[$AsyncCtx60 + 28 >> 2] = $3; //@line 3970
           HEAP32[$AsyncCtx60 + 32 >> 2] = $vararg_buffer15; //@line 3972
           HEAP32[$AsyncCtx60 + 36 >> 2] = $1; //@line 3974
           HEAP32[$AsyncCtx60 + 40 >> 2] = $vararg_buffer15; //@line 3976
           HEAP32[$AsyncCtx60 + 44 >> 2] = $vararg_buffer18; //@line 3978
           HEAP32[$AsyncCtx60 + 48 >> 2] = $vararg_buffer18; //@line 3980
           HEAP32[$AsyncCtx60 + 52 >> 2] = $vararg_buffer9; //@line 3982
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer9; //@line 3984
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer12; //@line 3986
           HEAP32[$AsyncCtx60 + 64 >> 2] = $vararg_buffer12; //@line 3988
           HEAP32[$AsyncCtx60 + 68 >> 2] = $$1143; //@line 3990
           HEAP32[$AsyncCtx60 + 72 >> 2] = $$1145; //@line 3992
           HEAP32[$AsyncCtx60 + 76 >> 2] = $55; //@line 3994
           HEAP32[$AsyncCtx60 + 80 >> 2] = $vararg_buffer6; //@line 3996
           HEAP32[$AsyncCtx60 + 84 >> 2] = $vararg_buffer6; //@line 3998
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer3; //@line 4000
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer3; //@line 4002
           HEAP32[$AsyncCtx60 + 96 >> 2] = $4; //@line 4004
           HEAP32[$AsyncCtx60 + 100 >> 2] = $$3154; //@line 4006
           sp = STACKTOP; //@line 4007
           STACKTOP = sp; //@line 4008
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 4010
          $125 = HEAP32[172] | 0; //@line 4015
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 4016
          $126 = FUNCTION_TABLE_ii[$125 & 15](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 4017
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 132; //@line 4020
           HEAP8[$AsyncCtx38 + 4 >> 0] = $$1$off0 & 1; //@line 4023
           HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer23; //@line 4025
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer23; //@line 4027
           HEAP32[$AsyncCtx38 + 16 >> 2] = $2; //@line 4029
           HEAP32[$AsyncCtx38 + 20 >> 2] = $3; //@line 4031
           HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer20; //@line 4033
           HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer20; //@line 4035
           HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer15; //@line 4037
           HEAP32[$AsyncCtx38 + 36 >> 2] = $1; //@line 4039
           HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer15; //@line 4041
           HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer18; //@line 4043
           HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer18; //@line 4045
           HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer9; //@line 4047
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer9; //@line 4049
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer12; //@line 4051
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer12; //@line 4053
           HEAP32[$AsyncCtx38 + 68 >> 2] = $$1143; //@line 4055
           HEAP32[$AsyncCtx38 + 72 >> 2] = $$1145; //@line 4057
           HEAP32[$AsyncCtx38 + 76 >> 2] = $55; //@line 4059
           HEAP32[$AsyncCtx38 + 80 >> 2] = $vararg_buffer6; //@line 4061
           HEAP32[$AsyncCtx38 + 84 >> 2] = $vararg_buffer6; //@line 4063
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer3; //@line 4065
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer3; //@line 4067
           HEAP32[$AsyncCtx38 + 96 >> 2] = $4; //@line 4069
           sp = STACKTOP; //@line 4070
           STACKTOP = sp; //@line 4071
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 4073
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 4074
           $151 = _snprintf($$1143, $$1145, 11774, $vararg_buffer3) | 0; //@line 4075
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 4077
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 4082
            $$3147 = $$1145 - $$10 | 0; //@line 4082
            label = 44; //@line 4083
            break;
           } else {
            $$3147168 = $$1145; //@line 4086
            $$3169 = $$1143; //@line 4086
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 4091
          $$3147 = $$1145; //@line 4091
          label = 44; //@line 4092
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 4098
          $$3169 = $$3; //@line 4098
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 4103
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 4109
          $$5156 = _snprintf($$3169, $$3147168, 11777, $vararg_buffer6) | 0; //@line 4111
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 4115
          $$5156 = _snprintf($$3169, $$3147168, 11792, $vararg_buffer9) | 0; //@line 4117
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 4121
          $$5156 = _snprintf($$3169, $$3147168, 11807, $vararg_buffer12) | 0; //@line 4123
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 4127
          $$5156 = _snprintf($$3169, $$3147168, 11822, $vararg_buffer15) | 0; //@line 4129
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 11837, $vararg_buffer18) | 0; //@line 4134
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 4138
        $168 = $$3169 + $$5156$ | 0; //@line 4140
        $169 = $$3147168 - $$5156$ | 0; //@line 4141
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4145
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 4146
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 133; //@line 4149
          HEAP32[$AsyncCtx56 + 4 >> 2] = $169; //@line 4151
          HEAP32[$AsyncCtx56 + 8 >> 2] = $168; //@line 4153
          HEAP8[$AsyncCtx56 + 12 >> 0] = $$1$off0 & 1; //@line 4156
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer23; //@line 4158
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer23; //@line 4160
          HEAP32[$AsyncCtx56 + 24 >> 2] = $vararg_buffer20; //@line 4162
          HEAP32[$AsyncCtx56 + 28 >> 2] = $vararg_buffer20; //@line 4164
          sp = STACKTOP; //@line 4165
          STACKTOP = sp; //@line 4166
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 4168
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 4170
         $181 = $168 + $$13 | 0; //@line 4172
         $182 = $169 - $$13 | 0; //@line 4173
         if (($$13 | 0) > 0) {
          $184 = HEAP32[173] | 0; //@line 4176
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4181
            $186 = FUNCTION_TABLE_i[$184 & 7]() | 0; //@line 4182
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 134; //@line 4185
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 4187
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 4189
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 4191
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 4193
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 4196
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 4198
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 4200
             sp = STACKTOP; //@line 4201
             STACKTOP = sp; //@line 4202
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 4204
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 4205
             $194 = _snprintf($181, $182, 11774, $vararg_buffer20) | 0; //@line 4206
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 4208
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 4213
              $$6150 = $182 - $$18 | 0; //@line 4213
              $$9 = $$18; //@line 4213
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 4220
            $$6150 = $182; //@line 4220
            $$9 = $$13; //@line 4220
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 11852, $vararg_buffer23) | 0; //@line 4229
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[174] | 0; //@line 4235
      $202 = HEAP32[167] | 0; //@line 4236
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4237
      FUNCTION_TABLE_vi[$201 & 1023]($202); //@line 4238
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 135; //@line 4241
       sp = STACKTOP; //@line 4242
       STACKTOP = sp; //@line 4243
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 4245
       break;
      }
     }
    } while (0);
    HEAP32[171] = HEAP32[169]; //@line 4251
   }
  }
 } while (0);
 $204 = HEAP32[177] | 0; //@line 4255
 if (!$204) {
  STACKTOP = sp; //@line 4258
  return;
 }
 $206 = HEAP32[178] | 0; //@line 4260
 HEAP32[178] = 0; //@line 4261
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4262
 FUNCTION_TABLE_v[$204 & 7](); //@line 4263
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 136; //@line 4266
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 4268
  sp = STACKTOP; //@line 4269
  STACKTOP = sp; //@line 4270
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 4272
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 4275
 } else {
  STACKTOP = sp; //@line 4277
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 4280
  $$pre = HEAP32[177] | 0; //@line 4281
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4282
  FUNCTION_TABLE_v[$$pre & 7](); //@line 4283
  if (___async) {
   label = 70; //@line 4286
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 4289
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 4292
  } else {
   label = 72; //@line 4294
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 137; //@line 4299
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 4301
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 4303
  sp = STACKTOP; //@line 4304
  STACKTOP = sp; //@line 4305
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 4308
  return;
 }
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$043 = 0, $$044 = 0, $$04750525456586062646668707274767880828486889092949698100102104106108 = 0, $$048 = 0, $1 = 0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $147 = 0, $149 = 0, $155 = 0, $156 = 0, $157 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $174 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $184 = 0, $24 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $53 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $72 = 0, $75 = 0, $79 = 0, $80 = 0, $87 = 0, $88 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5526
 $1 = $0 + 4 | 0; //@line 5527
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 5536
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5537
 FUNCTION_TABLE_v[$7 & 7](); //@line 5538
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 603; //@line 5541
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5543
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5545
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5547
  sp = STACKTOP; //@line 5548
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5551
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 5554
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5555
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 5556
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 604; //@line 5559
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 5561
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 5563
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 5565
  sp = STACKTOP; //@line 5566
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5569
 $18 = HEAP32[$14 >> 2] | 0; //@line 5570
 L10 : do {
  if (($18 | 0) < 32768) {
   if (($18 | 0) >= 128) {
    if (($18 | 0) < 2048) {
     switch ($18 | 0) {
     case 1024:
      {
       $$043 = 10; //@line 5580
       $$048 = $18; //@line 5580
       break L10;
       break;
      }
     case 512:
      {
       $$043 = 9; //@line 5585
       $$048 = $18; //@line 5585
       break L10;
       break;
      }
     case 256:
      {
       $$043 = 8; //@line 5590
       $$048 = $18; //@line 5590
       break L10;
       break;
      }
     case 128:
      {
       $$043 = 7; //@line 5595
       $$048 = $18; //@line 5595
       break L10;
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5600
       label = 60; //@line 5601
       break L10;
      }
     }
    }
    if (($18 | 0) < 8192) {
     switch ($18 | 0) {
     case 4096:
      {
       $$043 = 12; //@line 5610
       $$048 = $18; //@line 5610
       break L10;
       break;
      }
     case 2048:
      {
       $$043 = 11; //@line 5615
       $$048 = $18; //@line 5615
       break L10;
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5620
       label = 60; //@line 5621
       break L10;
      }
     }
    }
    if (($18 | 0) < 16384) {
     switch ($18 | 0) {
     case 8192:
      {
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5633
       label = 60; //@line 5634
       break L10;
      }
     }
     $$043 = 13; //@line 5638
     $$048 = $18; //@line 5638
     break;
    } else {
     switch ($18 | 0) {
     case 16384:
      {
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5646
       label = 60; //@line 5647
       break L10;
      }
     }
     $$043 = 14; //@line 5651
     $$048 = $18; //@line 5651
     break;
    }
   }
   if (($18 | 0) >= 8) {
    switch ($18 | 0) {
    case 64:
     {
      $$043 = 6; //@line 5659
      $$048 = $18; //@line 5659
      break L10;
      break;
     }
    case 32:
     {
      $$043 = 5; //@line 5664
      $$048 = $18; //@line 5664
      break L10;
      break;
     }
    case 16:
     {
      $$043 = 4; //@line 5669
      $$048 = $18; //@line 5669
      break L10;
      break;
     }
    case 8:
     {
      $$043 = 3; //@line 5674
      $$048 = $18; //@line 5674
      break L10;
      break;
     }
    default:
     {
      $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5679
      label = 60; //@line 5680
      break L10;
     }
    }
   }
   if (($18 | 0) >= 2) {
    switch ($18 | 0) {
    case 4:
     {
      $$043 = 2; //@line 5689
      $$048 = $18; //@line 5689
      break L10;
      break;
     }
    case 2:
     {
      $$043 = 1; //@line 5694
      $$048 = $18; //@line 5694
      break L10;
      break;
     }
    default:
     {
      $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5699
      label = 60; //@line 5700
      break L10;
     }
    }
   }
   if (($18 | 0) < 0) {
    switch ($18 | 0) {
    case -2147483648:
     {
      $$043 = 31; //@line 5709
      $$048 = -2147483648; //@line 5709
      break L10;
      break;
     }
    default:
     {
      $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5714
      label = 60; //@line 5715
      break L10;
     }
    }
   }
   switch ($18 | 0) {
   case 0:
    {
     break;
    }
   default:
    {
     $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5725
     label = 60; //@line 5726
     break L10;
    }
   }
   $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5730
   _mbed_assert_internal(14267, 14269, 41); //@line 5731
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 605; //@line 5734
    HEAP32[$AsyncCtx19 + 4 >> 2] = $14; //@line 5736
    HEAP32[$AsyncCtx19 + 8 >> 2] = $1; //@line 5738
    HEAP32[$AsyncCtx19 + 12 >> 2] = $0; //@line 5740
    HEAP32[$AsyncCtx19 + 16 >> 2] = $0; //@line 5742
    sp = STACKTOP; //@line 5743
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5746
    $$04750525456586062646668707274767880828486889092949698100102104106108 = 1e6; //@line 5747
    label = 60; //@line 5748
    break;
   }
  } else {
   if (($18 | 0) < 8388608) {
    if (($18 | 0) < 524288) {
     if (($18 | 0) < 131072) {
      if (($18 | 0) < 65536) {
       switch ($18 | 0) {
       case 32768:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5765
         label = 60; //@line 5766
         break L10;
        }
       }
       $$043 = 15; //@line 5770
       $$048 = $18; //@line 5770
       break;
      } else {
       switch ($18 | 0) {
       case 65536:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5778
         label = 60; //@line 5779
         break L10;
        }
       }
       $$043 = 16; //@line 5783
       $$048 = $18; //@line 5783
       break;
      }
     } else {
      if (($18 | 0) < 262144) {
       switch ($18 | 0) {
       case 131072:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5794
         label = 60; //@line 5795
         break L10;
        }
       }
       $$043 = 17; //@line 5799
       $$048 = $18; //@line 5799
       break;
      } else {
       switch ($18 | 0) {
       case 262144:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5807
         label = 60; //@line 5808
         break L10;
        }
       }
       $$043 = 18; //@line 5812
       $$048 = $18; //@line 5812
       break;
      }
     }
    } else {
     if (($18 | 0) < 2097152) {
      if (($18 | 0) < 1048576) {
       switch ($18 | 0) {
       case 524288:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5826
         label = 60; //@line 5827
         break L10;
        }
       }
       $$043 = 19; //@line 5831
       $$048 = $18; //@line 5831
       break;
      } else {
       switch ($18 | 0) {
       case 1048576:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5839
         label = 60; //@line 5840
         break L10;
        }
       }
       $$043 = 20; //@line 5844
       $$048 = $18; //@line 5844
       break;
      }
     } else {
      if (($18 | 0) < 4194304) {
       switch ($18 | 0) {
       case 2097152:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5855
         label = 60; //@line 5856
         break L10;
        }
       }
       $$043 = 21; //@line 5860
       $$048 = $18; //@line 5860
       break;
      } else {
       switch ($18 | 0) {
       case 4194304:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5868
         label = 60; //@line 5869
         break L10;
        }
       }
       $$043 = 22; //@line 5873
       $$048 = $18; //@line 5873
       break;
      }
     }
    }
   } else {
    if (($18 | 0) < 134217728) {
     if (($18 | 0) < 33554432) {
      if (($18 | 0) < 16777216) {
       switch ($18 | 0) {
       case 8388608:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5890
         label = 60; //@line 5891
         break L10;
        }
       }
       $$043 = 23; //@line 5895
       $$048 = $18; //@line 5895
       break;
      } else {
       switch ($18 | 0) {
       case 16777216:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5903
         label = 60; //@line 5904
         break L10;
        }
       }
       $$043 = 24; //@line 5908
       $$048 = $18; //@line 5908
       break;
      }
     } else {
      if (($18 | 0) < 67108864) {
       switch ($18 | 0) {
       case 33554432:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5919
         label = 60; //@line 5920
         break L10;
        }
       }
       $$043 = 25; //@line 5924
       $$048 = $18; //@line 5924
       break;
      } else {
       switch ($18 | 0) {
       case 67108864:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5932
         label = 60; //@line 5933
         break L10;
        }
       }
       $$043 = 26; //@line 5937
       $$048 = $18; //@line 5937
       break;
      }
     }
    } else {
     if (($18 | 0) < 536870912) {
      if (($18 | 0) < 268435456) {
       switch ($18 | 0) {
       case 134217728:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5951
         label = 60; //@line 5952
         break L10;
        }
       }
       $$043 = 27; //@line 5956
       $$048 = $18; //@line 5956
       break;
      } else {
       switch ($18 | 0) {
       case 268435456:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5964
         label = 60; //@line 5965
         break L10;
        }
       }
       $$043 = 28; //@line 5969
       $$048 = $18; //@line 5969
       break;
      }
     } else {
      if (($18 | 0) < 1073741824) {
       switch ($18 | 0) {
       case 536870912:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5980
         label = 60; //@line 5981
         break L10;
        }
       }
       $$043 = 29; //@line 5985
       $$048 = $18; //@line 5985
       break;
      } else {
       switch ($18 | 0) {
       case 1073741824:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5993
         label = 60; //@line 5994
         break L10;
        }
       }
       $$043 = 30; //@line 5998
       $$048 = $18; //@line 5998
       break;
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 60) {
  $$043 = 0; //@line 6007
  $$048 = $$04750525456586062646668707274767880828486889092949698100102104106108; //@line 6007
 }
 $24 = HEAP32[$14 + 4 >> 2] | 0; //@line 6010
 do {
  if (($24 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6015
   _mbed_assert_internal(14267, 14269, 55); //@line 6016
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 606; //@line 6019
    HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 6021
    HEAP32[$AsyncCtx16 + 8 >> 2] = $$048; //@line 6023
    HEAP8[$AsyncCtx16 + 12 >> 0] = $$043; //@line 6025
    HEAP32[$AsyncCtx16 + 16 >> 2] = $0; //@line 6027
    HEAP32[$AsyncCtx16 + 20 >> 2] = $0; //@line 6029
    sp = STACKTOP; //@line 6030
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 6033
    $$044 = 32; //@line 6034
    break;
   }
  } else {
   $$044 = $24; //@line 6038
  }
 } while (0);
 $32 = 7 << $$044 + -4; //@line 6042
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 6043
 $34 = tempRet0; //@line 6044
 $35 = _i64Add($$048 | 0, 0, -1, -1) | 0; //@line 6045
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 6047
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$048 | 0, 0) | 0; //@line 6049
 $40 = tempRet0; //@line 6050
 $41 = HEAP32[$1 >> 2] | 0; //@line 6051
 HEAP32[$41 >> 2] = 0; //@line 6052
 HEAP32[$41 + 4 >> 2] = 0; //@line 6054
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6057
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 6058
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 6059
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 607; //@line 6062
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 6064
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$048; //@line 6066
  HEAP8[$AsyncCtx6 + 12 >> 0] = $$043; //@line 6068
  HEAP32[$AsyncCtx6 + 16 >> 2] = $$044; //@line 6070
  HEAP32[$AsyncCtx6 + 20 >> 2] = $32; //@line 6072
  $53 = $AsyncCtx6 + 24 | 0; //@line 6074
  HEAP32[$53 >> 2] = $39; //@line 6076
  HEAP32[$53 + 4 >> 2] = $40; //@line 6079
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 6081
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 6083
  sp = STACKTOP; //@line 6084
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 6087
 $59 = HEAP32[$1 >> 2] | 0; //@line 6088
 $60 = $59 + 32 | 0; //@line 6089
 HEAP32[$60 >> 2] = $46; //@line 6090
 $61 = $59 + 40 | 0; //@line 6091
 $62 = $61; //@line 6092
 HEAP32[$62 >> 2] = 0; //@line 6094
 HEAP32[$62 + 4 >> 2] = 0; //@line 6097
 $66 = $59 + 8 | 0; //@line 6098
 HEAP32[$66 >> 2] = $$048; //@line 6099
 $67 = $59 + 57 | 0; //@line 6100
 HEAP8[$67 >> 0] = $$043; //@line 6101
 $68 = _bitshift64Shl(1, 0, $$044 | 0) | 0; //@line 6102
 $70 = _i64Add($68 | 0, tempRet0 | 0, -1, 0) | 0; //@line 6104
 $72 = $59 + 12 | 0; //@line 6106
 HEAP32[$72 >> 2] = $70; //@line 6107
 HEAP32[$59 + 16 >> 2] = $32; //@line 6109
 $75 = $59 + 24 | 0; //@line 6111
 HEAP32[$75 >> 2] = $39; //@line 6113
 HEAP32[$75 + 4 >> 2] = $40; //@line 6116
 $79 = $59 + 48 | 0; //@line 6117
 $80 = $79; //@line 6118
 HEAP32[$80 >> 2] = 0; //@line 6120
 HEAP32[$80 + 4 >> 2] = 0; //@line 6123
 HEAP8[$59 + 56 >> 0] = 1; //@line 6125
 $87 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6128
 $AsyncCtx9 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6129
 $88 = FUNCTION_TABLE_i[$87 & 7]() | 0; //@line 6130
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 608; //@line 6133
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 6135
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 6137
  HEAP32[$AsyncCtx9 + 12 >> 2] = $60; //@line 6139
  HEAP32[$AsyncCtx9 + 16 >> 2] = $72; //@line 6141
  HEAP32[$AsyncCtx9 + 20 >> 2] = $66; //@line 6143
  HEAP32[$AsyncCtx9 + 24 >> 2] = $79; //@line 6145
  HEAP32[$AsyncCtx9 + 28 >> 2] = $67; //@line 6147
  HEAP32[$AsyncCtx9 + 32 >> 2] = $61; //@line 6149
  sp = STACKTOP; //@line 6150
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6153
 if (($88 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $104 = $88 - (HEAP32[$60 >> 2] | 0) & HEAP32[$72 >> 2]; //@line 6162
  HEAP32[$60 >> 2] = $88; //@line 6163
  $105 = HEAP32[$66 >> 2] | 0; //@line 6164
  do {
   if (($105 | 0) == 1e6) {
    $180 = $104; //@line 6168
    $181 = 0; //@line 6168
   } else {
    $107 = HEAP8[$67 >> 0] | 0; //@line 6170
    $109 = ___muldi3($104 | 0, 0, 1e6, 0) | 0; //@line 6172
    $110 = tempRet0; //@line 6173
    if (!($107 << 24 >> 24)) {
     $143 = ___udivdi3($109 | 0, $110 | 0, $105 | 0, 0) | 0; //@line 6175
     $144 = tempRet0; //@line 6176
     $145 = ___muldi3($143 | 0, $144 | 0, $105 | 0, 0) | 0; //@line 6177
     $147 = _i64Subtract($109 | 0, $110 | 0, $145 | 0, tempRet0 | 0) | 0; //@line 6179
     $149 = $61; //@line 6181
     $155 = _i64Add($147 | 0, tempRet0 | 0, HEAP32[$149 >> 2] | 0, HEAP32[$149 + 4 >> 2] | 0) | 0; //@line 6187
     $156 = tempRet0; //@line 6188
     $157 = $61; //@line 6189
     HEAP32[$157 >> 2] = $155; //@line 6191
     HEAP32[$157 + 4 >> 2] = $156; //@line 6194
     if ($156 >>> 0 < 0 | ($156 | 0) == 0 & $155 >>> 0 < $105 >>> 0) {
      $180 = $143; //@line 6201
      $181 = $144; //@line 6201
      break;
     }
     $166 = _i64Add($143 | 0, $144 | 0, 1, 0) | 0; //@line 6204
     $167 = tempRet0; //@line 6205
     $168 = _i64Subtract($155 | 0, $156 | 0, $105 | 0, 0) | 0; //@line 6206
     $170 = $61; //@line 6208
     HEAP32[$170 >> 2] = $168; //@line 6210
     HEAP32[$170 + 4 >> 2] = tempRet0; //@line 6213
     $180 = $166; //@line 6214
     $181 = $167; //@line 6214
     break;
    } else {
     $111 = $107 & 255; //@line 6217
     $112 = _bitshift64Lshr($109 | 0, $110 | 0, $111 | 0) | 0; //@line 6218
     $113 = tempRet0; //@line 6219
     $114 = _bitshift64Shl($112 | 0, $113 | 0, $111 | 0) | 0; //@line 6220
     $116 = _i64Subtract($109 | 0, $110 | 0, $114 | 0, tempRet0 | 0) | 0; //@line 6222
     $118 = $61; //@line 6224
     $124 = _i64Add(HEAP32[$118 >> 2] | 0, HEAP32[$118 + 4 >> 2] | 0, $116 | 0, tempRet0 | 0) | 0; //@line 6230
     $125 = tempRet0; //@line 6231
     $126 = $61; //@line 6232
     HEAP32[$126 >> 2] = $124; //@line 6234
     HEAP32[$126 + 4 >> 2] = $125; //@line 6237
     if ($125 >>> 0 < 0 | ($125 | 0) == 0 & $124 >>> 0 < $105 >>> 0) {
      $180 = $112; //@line 6244
      $181 = $113; //@line 6244
      break;
     }
     $135 = _i64Add($112 | 0, $113 | 0, 1, 0) | 0; //@line 6247
     $136 = tempRet0; //@line 6248
     $137 = _i64Subtract($124 | 0, $125 | 0, $105 | 0, 0) | 0; //@line 6249
     $139 = $61; //@line 6251
     HEAP32[$139 >> 2] = $137; //@line 6253
     HEAP32[$139 + 4 >> 2] = tempRet0; //@line 6256
     $180 = $135; //@line 6257
     $181 = $136; //@line 6257
     break;
    }
   }
  } while (0);
  $174 = $79; //@line 6262
  $182 = _i64Add(HEAP32[$174 >> 2] | 0, HEAP32[$174 + 4 >> 2] | 0, $180 | 0, $181 | 0) | 0; //@line 6268
  $184 = $79; //@line 6270
  HEAP32[$184 >> 2] = $182; //@line 6272
  HEAP32[$184 + 4 >> 2] = tempRet0; //@line 6275
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6277
 _schedule_interrupt($0); //@line 6278
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 609; //@line 6281
  sp = STACKTOP; //@line 6282
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6285
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i25 = 0, $$pre$i$i38 = 0, $$pre$i$i54 = 0, $$pre$i$i70 = 0, $$pre123 = 0, $$pre124 = 0, $$pre125 = 0, $$pre126 = 0, $10 = 0, $110 = 0, $111 = 0, $123 = 0, $124 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = 0, $149 = 0, $150 = 0, $161 = 0, $162 = 0, $168 = 0, $169 = 0, $171 = 0, $172 = 0, $175 = 0, $185 = 0, $186 = 0, $196 = 0, $197 = 0, $2 = 0, $204 = 0, $209 = 0, $214 = 0, $23 = 0, $24 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $55 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $82 = 0, $83 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx5 = 0, $AsyncCtx50 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5027
 STACKTOP = STACKTOP + 16 | 0; //@line 5028
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5028
 $2 = sp; //@line 5029
 $3 = $2 + 12 | 0; //@line 5030
 HEAP32[$2 >> 2] = 166; //@line 5031
 HEAP32[$2 + 4 >> 2] = 0; //@line 5033
 HEAP32[$2 + 8 >> 2] = $0; //@line 5035
 HEAP32[$3 >> 2] = 824; //@line 5036
 $4 = $0 + 2384 | 0; //@line 5037
 do {
  if (($4 | 0) == ($2 | 0)) {
   $38 = 824; //@line 5041
   label = 10; //@line 5042
  } else {
   $6 = $0 + 2396 | 0; //@line 5044
   $7 = HEAP32[$6 >> 2] | 0; //@line 5045
   if (!$7) {
    $23 = 824; //@line 5048
   } else {
    $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 5051
    $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 5052
    FUNCTION_TABLE_vi[$10 & 1023]($4); //@line 5053
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 167; //@line 5056
     HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5058
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5060
     HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 5062
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 5064
     HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 5066
     HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 5068
     HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 5070
     HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 5072
     HEAP32[$AsyncCtx + 36 >> 2] = $3; //@line 5074
     HEAP32[$AsyncCtx + 40 >> 2] = $6; //@line 5076
     sp = STACKTOP; //@line 5077
     STACKTOP = sp; //@line 5078
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5080
    $$pre = HEAP32[$3 >> 2] | 0; //@line 5081
    if (!$$pre) {
     HEAP32[$6 >> 2] = 0; //@line 5084
     break;
    } else {
     $23 = $$pre; //@line 5087
    }
   }
   $24 = HEAP32[$23 + 4 >> 2] | 0; //@line 5091
   $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 5092
   FUNCTION_TABLE_vii[$24 & 15]($4, $2); //@line 5093
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 168; //@line 5096
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 5098
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 5100
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 5102
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 5104
    HEAP32[$AsyncCtx2 + 20 >> 2] = $4; //@line 5106
    HEAP32[$AsyncCtx2 + 24 >> 2] = $2; //@line 5108
    HEAP32[$AsyncCtx2 + 28 >> 2] = $2; //@line 5110
    HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 5112
    HEAP32[$AsyncCtx2 + 36 >> 2] = $3; //@line 5114
    HEAP32[$AsyncCtx2 + 40 >> 2] = $6; //@line 5116
    sp = STACKTOP; //@line 5117
    STACKTOP = sp; //@line 5118
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5120
    $$pre$i$i = HEAP32[$3 >> 2] | 0; //@line 5121
    HEAP32[$6 >> 2] = $$pre$i$i; //@line 5123
    if (!$$pre$i$i) {
     break;
    } else {
     $38 = $$pre$i$i; //@line 5128
     label = 10; //@line 5129
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $39 = HEAP32[$38 + 8 >> 2] | 0; //@line 5138
   $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5139
   FUNCTION_TABLE_vi[$39 & 1023]($2); //@line 5140
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 169; //@line 5143
    HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 5145
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 5147
    HEAP32[$AsyncCtx5 + 12 >> 2] = $2; //@line 5149
    HEAP32[$AsyncCtx5 + 16 >> 2] = $1; //@line 5151
    HEAP32[$AsyncCtx5 + 20 >> 2] = $4; //@line 5153
    HEAP32[$AsyncCtx5 + 24 >> 2] = $2; //@line 5155
    HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 5157
    HEAP32[$AsyncCtx5 + 32 >> 2] = $2; //@line 5159
    sp = STACKTOP; //@line 5160
    STACKTOP = sp; //@line 5161
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 5163
    break;
   }
  }
 } while (0);
 $48 = $2 + 12 | 0; //@line 5168
 HEAP32[$2 >> 2] = 6; //@line 5169
 HEAP32[$2 + 4 >> 2] = 0; //@line 5171
 HEAP32[$2 + 8 >> 2] = $0; //@line 5173
 HEAP32[$48 >> 2] = 836; //@line 5174
 $49 = $0 + 2416 | 0; //@line 5175
 do {
  if (($49 | 0) == ($2 | 0)) {
   $82 = 836; //@line 5179
   label = 22; //@line 5180
  } else {
   $51 = $0 + 2428 | 0; //@line 5182
   $52 = HEAP32[$51 >> 2] | 0; //@line 5183
   if (!$52) {
    $68 = 836; //@line 5186
   } else {
    $55 = HEAP32[$52 + 8 >> 2] | 0; //@line 5189
    $AsyncCtx8 = _emscripten_alloc_async_context(44, sp) | 0; //@line 5190
    FUNCTION_TABLE_vi[$55 & 1023]($49); //@line 5191
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 170; //@line 5194
     HEAP32[$AsyncCtx8 + 4 >> 2] = $2; //@line 5196
     HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 5198
     HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 5200
     HEAP32[$AsyncCtx8 + 16 >> 2] = $1; //@line 5202
     HEAP32[$AsyncCtx8 + 20 >> 2] = $4; //@line 5204
     HEAP32[$AsyncCtx8 + 24 >> 2] = $2; //@line 5206
     HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 5208
     HEAP32[$AsyncCtx8 + 32 >> 2] = $48; //@line 5210
     HEAP32[$AsyncCtx8 + 36 >> 2] = $51; //@line 5212
     HEAP32[$AsyncCtx8 + 40 >> 2] = $49; //@line 5214
     sp = STACKTOP; //@line 5215
     STACKTOP = sp; //@line 5216
     return;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 5218
    $$pre123 = HEAP32[$48 >> 2] | 0; //@line 5219
    if (!$$pre123) {
     HEAP32[$51 >> 2] = 0; //@line 5222
     break;
    } else {
     $68 = $$pre123; //@line 5225
    }
   }
   $69 = HEAP32[$68 + 4 >> 2] | 0; //@line 5229
   $AsyncCtx11 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5230
   FUNCTION_TABLE_vii[$69 & 15]($49, $2); //@line 5231
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 171; //@line 5234
    HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 5236
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 5238
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 5240
    HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 5242
    HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 5244
    HEAP32[$AsyncCtx11 + 24 >> 2] = $2; //@line 5246
    HEAP32[$AsyncCtx11 + 28 >> 2] = $2; //@line 5248
    HEAP32[$AsyncCtx11 + 32 >> 2] = $48; //@line 5250
    HEAP32[$AsyncCtx11 + 36 >> 2] = $51; //@line 5252
    sp = STACKTOP; //@line 5253
    STACKTOP = sp; //@line 5254
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5256
    $$pre$i$i25 = HEAP32[$48 >> 2] | 0; //@line 5257
    HEAP32[$51 >> 2] = $$pre$i$i25; //@line 5259
    if (!$$pre$i$i25) {
     break;
    } else {
     $82 = $$pre$i$i25; //@line 5264
     label = 22; //@line 5265
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $83 = HEAP32[$82 + 8 >> 2] | 0; //@line 5274
   $AsyncCtx14 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5275
   FUNCTION_TABLE_vi[$83 & 1023]($2); //@line 5276
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 172; //@line 5279
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 5281
    HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 5283
    HEAP32[$AsyncCtx14 + 12 >> 2] = $2; //@line 5285
    HEAP32[$AsyncCtx14 + 16 >> 2] = $1; //@line 5287
    HEAP32[$AsyncCtx14 + 20 >> 2] = $4; //@line 5289
    HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 5291
    HEAP32[$AsyncCtx14 + 28 >> 2] = $2; //@line 5293
    sp = STACKTOP; //@line 5294
    STACKTOP = sp; //@line 5295
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5297
    break;
   }
  }
 } while (0);
 $91 = $2 + 12 | 0; //@line 5302
 HEAP32[$2 >> 2] = 173; //@line 5303
 HEAP32[$2 + 4 >> 2] = 0; //@line 5305
 HEAP32[$2 + 8 >> 2] = $0; //@line 5307
 HEAP32[$91 >> 2] = 824; //@line 5308
 $92 = $0 + 2448 | 0; //@line 5309
 do {
  if (($92 | 0) == ($2 | 0)) {
   $123 = 824; //@line 5313
   label = 34; //@line 5314
  } else {
   $94 = $0 + 2460 | 0; //@line 5316
   $95 = HEAP32[$94 >> 2] | 0; //@line 5317
   if (!$95) {
    $110 = 824; //@line 5320
   } else {
    $98 = HEAP32[$95 + 8 >> 2] | 0; //@line 5323
    $AsyncCtx17 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5324
    FUNCTION_TABLE_vi[$98 & 1023]($92); //@line 5325
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 174; //@line 5328
     HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 5330
     HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 5332
     HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 5334
     HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 5336
     HEAP32[$AsyncCtx17 + 20 >> 2] = $94; //@line 5338
     HEAP32[$AsyncCtx17 + 24 >> 2] = $92; //@line 5340
     HEAP32[$AsyncCtx17 + 28 >> 2] = $1; //@line 5342
     HEAP32[$AsyncCtx17 + 32 >> 2] = $4; //@line 5344
     HEAP32[$AsyncCtx17 + 36 >> 2] = $91; //@line 5346
     sp = STACKTOP; //@line 5347
     STACKTOP = sp; //@line 5348
     return;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 5350
    $$pre124 = HEAP32[$91 >> 2] | 0; //@line 5351
    if (!$$pre124) {
     HEAP32[$94 >> 2] = 0; //@line 5354
     break;
    } else {
     $110 = $$pre124; //@line 5357
    }
   }
   $111 = HEAP32[$110 + 4 >> 2] | 0; //@line 5361
   $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5362
   FUNCTION_TABLE_vii[$111 & 15]($92, $2); //@line 5363
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 175; //@line 5366
    HEAP32[$AsyncCtx20 + 4 >> 2] = $2; //@line 5368
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 5370
    HEAP32[$AsyncCtx20 + 12 >> 2] = $2; //@line 5372
    HEAP32[$AsyncCtx20 + 16 >> 2] = $2; //@line 5374
    HEAP32[$AsyncCtx20 + 20 >> 2] = $1; //@line 5376
    HEAP32[$AsyncCtx20 + 24 >> 2] = $4; //@line 5378
    HEAP32[$AsyncCtx20 + 28 >> 2] = $91; //@line 5380
    HEAP32[$AsyncCtx20 + 32 >> 2] = $94; //@line 5382
    sp = STACKTOP; //@line 5383
    STACKTOP = sp; //@line 5384
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 5386
    $$pre$i$i38 = HEAP32[$91 >> 2] | 0; //@line 5387
    HEAP32[$94 >> 2] = $$pre$i$i38; //@line 5389
    if (!$$pre$i$i38) {
     break;
    } else {
     $123 = $$pre$i$i38; //@line 5394
     label = 34; //@line 5395
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $124 = HEAP32[$123 + 8 >> 2] | 0; //@line 5404
   $AsyncCtx23 = _emscripten_alloc_async_context(28, sp) | 0; //@line 5405
   FUNCTION_TABLE_vi[$124 & 1023]($2); //@line 5406
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 176; //@line 5409
    HEAP32[$AsyncCtx23 + 4 >> 2] = $2; //@line 5411
    HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 5413
    HEAP32[$AsyncCtx23 + 12 >> 2] = $2; //@line 5415
    HEAP32[$AsyncCtx23 + 16 >> 2] = $2; //@line 5417
    HEAP32[$AsyncCtx23 + 20 >> 2] = $1; //@line 5419
    HEAP32[$AsyncCtx23 + 24 >> 2] = $4; //@line 5421
    sp = STACKTOP; //@line 5422
    STACKTOP = sp; //@line 5423
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5425
    break;
   }
  }
 } while (0);
 $131 = $2 + 12 | 0; //@line 5430
 HEAP32[$2 >> 2] = 177; //@line 5431
 HEAP32[$2 + 4 >> 2] = 0; //@line 5433
 HEAP32[$2 + 8 >> 2] = $0; //@line 5435
 HEAP32[$131 >> 2] = 824; //@line 5436
 $132 = $0 + 2400 | 0; //@line 5437
 do {
  if (($132 | 0) == ($2 | 0)) {
   $161 = 824; //@line 5441
   label = 46; //@line 5442
  } else {
   $134 = $0 + 2412 | 0; //@line 5444
   $135 = HEAP32[$134 >> 2] | 0; //@line 5445
   if (!$135) {
    $149 = 824; //@line 5448
   } else {
    $138 = HEAP32[$135 + 8 >> 2] | 0; //@line 5451
    $AsyncCtx26 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5452
    FUNCTION_TABLE_vi[$138 & 1023]($132); //@line 5453
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 178; //@line 5456
     HEAP32[$AsyncCtx26 + 4 >> 2] = $131; //@line 5458
     HEAP32[$AsyncCtx26 + 8 >> 2] = $134; //@line 5460
     HEAP32[$AsyncCtx26 + 12 >> 2] = $2; //@line 5462
     HEAP32[$AsyncCtx26 + 16 >> 2] = $2; //@line 5464
     HEAP32[$AsyncCtx26 + 20 >> 2] = $0; //@line 5466
     HEAP32[$AsyncCtx26 + 24 >> 2] = $132; //@line 5468
     HEAP32[$AsyncCtx26 + 28 >> 2] = $1; //@line 5470
     HEAP32[$AsyncCtx26 + 32 >> 2] = $4; //@line 5472
     sp = STACKTOP; //@line 5473
     STACKTOP = sp; //@line 5474
     return;
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 5476
    $$pre125 = HEAP32[$131 >> 2] | 0; //@line 5477
    if (!$$pre125) {
     HEAP32[$134 >> 2] = 0; //@line 5480
     break;
    } else {
     $149 = $$pre125; //@line 5483
    }
   }
   $150 = HEAP32[$149 + 4 >> 2] | 0; //@line 5487
   $AsyncCtx29 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5488
   FUNCTION_TABLE_vii[$150 & 15]($132, $2); //@line 5489
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 179; //@line 5492
    HEAP32[$AsyncCtx29 + 4 >> 2] = $131; //@line 5494
    HEAP32[$AsyncCtx29 + 8 >> 2] = $134; //@line 5496
    HEAP32[$AsyncCtx29 + 12 >> 2] = $2; //@line 5498
    HEAP32[$AsyncCtx29 + 16 >> 2] = $2; //@line 5500
    HEAP32[$AsyncCtx29 + 20 >> 2] = $0; //@line 5502
    HEAP32[$AsyncCtx29 + 24 >> 2] = $1; //@line 5504
    HEAP32[$AsyncCtx29 + 28 >> 2] = $4; //@line 5506
    sp = STACKTOP; //@line 5507
    STACKTOP = sp; //@line 5508
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 5510
    $$pre$i$i54 = HEAP32[$131 >> 2] | 0; //@line 5511
    HEAP32[$134 >> 2] = $$pre$i$i54; //@line 5513
    if (!$$pre$i$i54) {
     break;
    } else {
     $161 = $$pre$i$i54; //@line 5518
     label = 46; //@line 5519
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $162 = HEAP32[$161 + 8 >> 2] | 0; //@line 5528
   $AsyncCtx32 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5529
   FUNCTION_TABLE_vi[$162 & 1023]($2); //@line 5530
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 180; //@line 5533
    HEAP32[$AsyncCtx32 + 4 >> 2] = $2; //@line 5535
    HEAP32[$AsyncCtx32 + 8 >> 2] = $2; //@line 5537
    HEAP32[$AsyncCtx32 + 12 >> 2] = $0; //@line 5539
    HEAP32[$AsyncCtx32 + 16 >> 2] = $1; //@line 5541
    HEAP32[$AsyncCtx32 + 20 >> 2] = $4; //@line 5543
    sp = STACKTOP; //@line 5544
    STACKTOP = sp; //@line 5545
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 5547
    break;
   }
  }
 } while (0);
 $168 = $2 + 12 | 0; //@line 5552
 HEAP32[$2 >> 2] = 181; //@line 5553
 HEAP32[$2 + 4 >> 2] = 0; //@line 5555
 HEAP32[$2 + 8 >> 2] = $0; //@line 5557
 HEAP32[$168 >> 2] = 824; //@line 5558
 $169 = $0 + 2432 | 0; //@line 5559
 do {
  if (($169 | 0) == ($2 | 0)) {
   $196 = 824; //@line 5563
   label = 58; //@line 5564
  } else {
   $171 = $0 + 2444 | 0; //@line 5566
   $172 = HEAP32[$171 >> 2] | 0; //@line 5567
   if (!$172) {
    $185 = 824; //@line 5570
   } else {
    $175 = HEAP32[$172 + 8 >> 2] | 0; //@line 5573
    $AsyncCtx35 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5574
    FUNCTION_TABLE_vi[$175 & 1023]($169); //@line 5575
    if (___async) {
     HEAP32[$AsyncCtx35 >> 2] = 182; //@line 5578
     HEAP32[$AsyncCtx35 + 4 >> 2] = $168; //@line 5580
     HEAP32[$AsyncCtx35 + 8 >> 2] = $171; //@line 5582
     HEAP32[$AsyncCtx35 + 12 >> 2] = $169; //@line 5584
     HEAP32[$AsyncCtx35 + 16 >> 2] = $2; //@line 5586
     HEAP32[$AsyncCtx35 + 20 >> 2] = $0; //@line 5588
     HEAP32[$AsyncCtx35 + 24 >> 2] = $1; //@line 5590
     HEAP32[$AsyncCtx35 + 28 >> 2] = $4; //@line 5592
     sp = STACKTOP; //@line 5593
     STACKTOP = sp; //@line 5594
     return;
    }
    _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5596
    $$pre126 = HEAP32[$168 >> 2] | 0; //@line 5597
    if (!$$pre126) {
     HEAP32[$171 >> 2] = 0; //@line 5600
     break;
    } else {
     $185 = $$pre126; //@line 5603
    }
   }
   $186 = HEAP32[$185 + 4 >> 2] | 0; //@line 5607
   $AsyncCtx38 = _emscripten_alloc_async_context(28, sp) | 0; //@line 5608
   FUNCTION_TABLE_vii[$186 & 15]($169, $2); //@line 5609
   if (___async) {
    HEAP32[$AsyncCtx38 >> 2] = 183; //@line 5612
    HEAP32[$AsyncCtx38 + 4 >> 2] = $168; //@line 5614
    HEAP32[$AsyncCtx38 + 8 >> 2] = $171; //@line 5616
    HEAP32[$AsyncCtx38 + 12 >> 2] = $2; //@line 5618
    HEAP32[$AsyncCtx38 + 16 >> 2] = $0; //@line 5620
    HEAP32[$AsyncCtx38 + 20 >> 2] = $1; //@line 5622
    HEAP32[$AsyncCtx38 + 24 >> 2] = $4; //@line 5624
    sp = STACKTOP; //@line 5625
    STACKTOP = sp; //@line 5626
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx38 | 0); //@line 5628
    $$pre$i$i70 = HEAP32[$168 >> 2] | 0; //@line 5629
    HEAP32[$171 >> 2] = $$pre$i$i70; //@line 5631
    if (!$$pre$i$i70) {
     break;
    } else {
     $196 = $$pre$i$i70; //@line 5636
     label = 58; //@line 5637
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 58) {
   $197 = HEAP32[$196 + 8 >> 2] | 0; //@line 5646
   $AsyncCtx41 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5647
   FUNCTION_TABLE_vi[$197 & 1023]($2); //@line 5648
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 184; //@line 5651
    HEAP32[$AsyncCtx41 + 4 >> 2] = $2; //@line 5653
    HEAP32[$AsyncCtx41 + 8 >> 2] = $0; //@line 5655
    HEAP32[$AsyncCtx41 + 12 >> 2] = $1; //@line 5657
    HEAP32[$AsyncCtx41 + 16 >> 2] = $4; //@line 5659
    sp = STACKTOP; //@line 5660
    STACKTOP = sp; //@line 5661
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx41 | 0); //@line 5663
    break;
   }
  }
 } while (0);
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($0, $1); //@line 5668
 $204 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 5671
 $AsyncCtx44 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5672
 FUNCTION_TABLE_vi[$204 & 1023]($1); //@line 5673
 if (___async) {
  HEAP32[$AsyncCtx44 >> 2] = 185; //@line 5676
  HEAP32[$AsyncCtx44 + 4 >> 2] = $1; //@line 5678
  HEAP32[$AsyncCtx44 + 8 >> 2] = $4; //@line 5680
  HEAP32[$AsyncCtx44 + 12 >> 2] = $1; //@line 5682
  sp = STACKTOP; //@line 5683
  STACKTOP = sp; //@line 5684
  return;
 }
 _emscripten_free_async_context($AsyncCtx44 | 0); //@line 5686
 $209 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 5688
 $AsyncCtx47 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5689
 FUNCTION_TABLE_vii[$209 & 15]($1, $4); //@line 5690
 if (___async) {
  HEAP32[$AsyncCtx47 >> 2] = 186; //@line 5693
  HEAP32[$AsyncCtx47 + 4 >> 2] = $1; //@line 5695
  HEAP32[$AsyncCtx47 + 8 >> 2] = $1; //@line 5697
  sp = STACKTOP; //@line 5698
  STACKTOP = sp; //@line 5699
  return;
 }
 _emscripten_free_async_context($AsyncCtx47 | 0); //@line 5701
 $214 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 5704
 $AsyncCtx50 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5705
 FUNCTION_TABLE_vi[$214 & 1023]($1); //@line 5706
 if (___async) {
  HEAP32[$AsyncCtx50 >> 2] = 187; //@line 5709
  sp = STACKTOP; //@line 5710
  STACKTOP = sp; //@line 5711
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx50 | 0); //@line 5713
  STACKTOP = sp; //@line 5714
  return;
 }
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27764
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27766
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27768
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 27770
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27772
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27774
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27776
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27778
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27780
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27782
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27786
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27790
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27792
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27794
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 27796
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 27798
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 27800
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 27802
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 27804
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 27806
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 27808
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 27810
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 27812
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 27814
 HEAP32[178] = (HEAP32[178] | 0) + 1; //@line 27817
 $53 = HEAP32[167] | 0; //@line 27818
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 27822
   do {
    if ($6 << 24 >> 24 > -1 & ($4 | 0) != 0) {
     $57 = HEAP32[164] | 0; //@line 27828
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $4) | 0) {
       $$0$i = 1; //@line 27835
       break;
      }
     }
     $62 = HEAP32[165] | 0; //@line 27839
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 27843
     } else {
      if (!(_strstr($62, $4) | 0)) {
       $$0$i = 1; //@line 27848
      } else {
       label = 9; //@line 27850
      }
     }
    } else {
     label = 9; //@line 27854
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 27858
   }
   if (!((HEAP32[174] | 0) != 0 & ((($4 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[171] = HEAP32[169]; //@line 27870
    break;
   }
   $73 = HEAPU8[652] | 0; //@line 27874
   $74 = $6 & 255; //@line 27875
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 27880
    $$lobit = $78 >>> 6; //@line 27881
    $79 = $$lobit & 255; //@line 27882
    $83 = ($73 & 32 | 0) == 0; //@line 27886
    $84 = HEAP32[168] | 0; //@line 27887
    $85 = HEAP32[167] | 0; //@line 27888
    $86 = $6 << 24 >> 24 == 1; //@line 27889
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 27892
     _vsnprintf($85, $84, $2, $12) | 0; //@line 27893
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 127; //@line 27896
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 27897
      $$expand_i1_val = $86 & 1; //@line 27898
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 27899
      sp = STACKTOP; //@line 27900
      return;
     }
     ___async_unwind = 0; //@line 27903
     HEAP32[$ReallocAsyncCtx12 >> 2] = 127; //@line 27904
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 27905
     $$expand_i1_val = $86 & 1; //@line 27906
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 27907
     sp = STACKTOP; //@line 27908
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 27914
     $$1143 = $85; //@line 27914
     $$1145 = $84; //@line 27914
     $$3154 = 0; //@line 27914
     label = 28; //@line 27915
    } else {
     if ($83) {
      $$0142 = $85; //@line 27918
      $$0144 = $84; //@line 27918
     } else {
      $89 = _snprintf($85, $84, 11744, $18) | 0; //@line 27920
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 27922
      $91 = ($$ | 0) > 0; //@line 27923
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 27928
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 27928
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 27932
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 11762; //@line 27938
        label = 25; //@line 27939
        break;
       }
      case 1:
       {
        $$sink = 11768; //@line 27943
        label = 25; //@line 27944
        break;
       }
      case 3:
       {
        $$sink = 11756; //@line 27948
        label = 25; //@line 27949
        break;
       }
      case 7:
       {
        $$sink = 11750; //@line 27953
        label = 25; //@line 27954
        break;
       }
      default:
       {
        $$0141 = 0; //@line 27958
        $$1152 = 0; //@line 27958
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$22 >> 2] = $$sink; //@line 27962
       $$0141 = $79 & 1; //@line 27965
       $$1152 = _snprintf($$0142, $$0144, 11774, $22) | 0; //@line 27965
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 27968
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 27970
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 27972
       $$1$off0 = $extract$t159; //@line 27977
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 27977
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 27977
       $$3154 = $$1152; //@line 27977
       label = 28; //@line 27978
      } else {
       $$1$off0 = $extract$t159; //@line 27980
       $$1143 = $$0142; //@line 27980
       $$1145 = $$0144; //@line 27980
       $$3154 = $$1152$; //@line 27980
       label = 28; //@line 27981
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[172] | 0) != 0) {
      HEAP32[$50 >> 2] = HEAP32[$12 >> 2]; //@line 27992
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 27993
      $108 = _vsnprintf(0, 0, $2, $50) | 0; //@line 27994
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 131; //@line 27997
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 27998
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 27999
       HEAP8[$109 >> 0] = $$1$off0$expand_i1_val; //@line 28000
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 28001
       HEAP32[$110 >> 2] = $8; //@line 28002
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 28003
       HEAP32[$111 >> 2] = $10; //@line 28004
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 28005
       HEAP32[$112 >> 2] = $14; //@line 28006
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 28007
       HEAP32[$113 >> 2] = $16; //@line 28008
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 28009
       HEAP32[$114 >> 2] = $2; //@line 28010
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 28011
       HEAP32[$115 >> 2] = $12; //@line 28012
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 28013
       HEAP32[$116 >> 2] = $26; //@line 28014
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 28015
       HEAP32[$117 >> 2] = $4; //@line 28016
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 28017
       HEAP32[$118 >> 2] = $28; //@line 28018
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 28019
       HEAP32[$119 >> 2] = $30; //@line 28020
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 28021
       HEAP32[$120 >> 2] = $32; //@line 28022
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 28023
       HEAP32[$121 >> 2] = $34; //@line 28024
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 28025
       HEAP32[$122 >> 2] = $36; //@line 28026
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 28027
       HEAP32[$123 >> 2] = $38; //@line 28028
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 28029
       HEAP32[$124 >> 2] = $40; //@line 28030
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 28031
       HEAP32[$125 >> 2] = $$1143; //@line 28032
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 28033
       HEAP32[$126 >> 2] = $$1145; //@line 28034
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 28035
       HEAP32[$127 >> 2] = $74; //@line 28036
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 28037
       HEAP32[$128 >> 2] = $42; //@line 28038
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 28039
       HEAP32[$129 >> 2] = $44; //@line 28040
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 28041
       HEAP32[$130 >> 2] = $46; //@line 28042
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 28043
       HEAP32[$131 >> 2] = $48; //@line 28044
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 28045
       HEAP32[$132 >> 2] = $50; //@line 28046
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 28047
       HEAP32[$133 >> 2] = $$3154; //@line 28048
       sp = STACKTOP; //@line 28049
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 28053
      ___async_unwind = 0; //@line 28054
      HEAP32[$ReallocAsyncCtx11 >> 2] = 131; //@line 28055
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 28056
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 28057
      HEAP8[$109 >> 0] = $$1$off0$expand_i1_val; //@line 28058
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 28059
      HEAP32[$110 >> 2] = $8; //@line 28060
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 28061
      HEAP32[$111 >> 2] = $10; //@line 28062
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 28063
      HEAP32[$112 >> 2] = $14; //@line 28064
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 28065
      HEAP32[$113 >> 2] = $16; //@line 28066
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 28067
      HEAP32[$114 >> 2] = $2; //@line 28068
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 28069
      HEAP32[$115 >> 2] = $12; //@line 28070
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 28071
      HEAP32[$116 >> 2] = $26; //@line 28072
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 28073
      HEAP32[$117 >> 2] = $4; //@line 28074
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 28075
      HEAP32[$118 >> 2] = $28; //@line 28076
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 28077
      HEAP32[$119 >> 2] = $30; //@line 28078
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 28079
      HEAP32[$120 >> 2] = $32; //@line 28080
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 28081
      HEAP32[$121 >> 2] = $34; //@line 28082
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 28083
      HEAP32[$122 >> 2] = $36; //@line 28084
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 28085
      HEAP32[$123 >> 2] = $38; //@line 28086
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 28087
      HEAP32[$124 >> 2] = $40; //@line 28088
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 28089
      HEAP32[$125 >> 2] = $$1143; //@line 28090
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 28091
      HEAP32[$126 >> 2] = $$1145; //@line 28092
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 28093
      HEAP32[$127 >> 2] = $74; //@line 28094
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 28095
      HEAP32[$128 >> 2] = $42; //@line 28096
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 28097
      HEAP32[$129 >> 2] = $44; //@line 28098
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 28099
      HEAP32[$130 >> 2] = $46; //@line 28100
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 28101
      HEAP32[$131 >> 2] = $48; //@line 28102
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 28103
      HEAP32[$132 >> 2] = $50; //@line 28104
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 28105
      HEAP32[$133 >> 2] = $$3154; //@line 28106
      sp = STACKTOP; //@line 28107
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 28112
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$42 >> 2] = $4; //@line 28118
        $$5156 = _snprintf($$1143, $$1145, 11777, $42) | 0; //@line 28120
        break;
       }
      case 1:
       {
        HEAP32[$34 >> 2] = $4; //@line 28124
        $$5156 = _snprintf($$1143, $$1145, 11792, $34) | 0; //@line 28126
        break;
       }
      case 3:
       {
        HEAP32[$38 >> 2] = $4; //@line 28130
        $$5156 = _snprintf($$1143, $$1145, 11807, $38) | 0; //@line 28132
        break;
       }
      case 7:
       {
        HEAP32[$26 >> 2] = $4; //@line 28136
        $$5156 = _snprintf($$1143, $$1145, 11822, $26) | 0; //@line 28138
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 11837, $30) | 0; //@line 28143
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 28147
      $147 = $$1143 + $$5156$ | 0; //@line 28149
      $148 = $$1145 - $$5156$ | 0; //@line 28150
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 28154
       $150 = _vsnprintf($147, $148, $2, $12) | 0; //@line 28155
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 133; //@line 28158
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 28159
        HEAP32[$151 >> 2] = $148; //@line 28160
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 28161
        HEAP32[$152 >> 2] = $147; //@line 28162
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 28163
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 28164
        HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 28165
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 28166
        HEAP32[$154 >> 2] = $8; //@line 28167
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 28168
        HEAP32[$155 >> 2] = $10; //@line 28169
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 28170
        HEAP32[$156 >> 2] = $14; //@line 28171
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 28172
        HEAP32[$157 >> 2] = $16; //@line 28173
        sp = STACKTOP; //@line 28174
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 28178
       ___async_unwind = 0; //@line 28179
       HEAP32[$ReallocAsyncCtx10 >> 2] = 133; //@line 28180
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 28181
       HEAP32[$151 >> 2] = $148; //@line 28182
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 28183
       HEAP32[$152 >> 2] = $147; //@line 28184
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 28185
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 28186
       HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 28187
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 28188
       HEAP32[$154 >> 2] = $8; //@line 28189
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 28190
       HEAP32[$155 >> 2] = $10; //@line 28191
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 28192
       HEAP32[$156 >> 2] = $14; //@line 28193
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 28194
       HEAP32[$157 >> 2] = $16; //@line 28195
       sp = STACKTOP; //@line 28196
       return;
      }
     }
    }
    $159 = HEAP32[174] | 0; //@line 28201
    $160 = HEAP32[167] | 0; //@line 28202
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 28203
    FUNCTION_TABLE_vi[$159 & 1023]($160); //@line 28204
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 28207
     sp = STACKTOP; //@line 28208
     return;
    }
    ___async_unwind = 0; //@line 28211
    HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 28212
    sp = STACKTOP; //@line 28213
    return;
   }
  }
 } while (0);
 $161 = HEAP32[177] | 0; //@line 28218
 if (!$161) {
  return;
 }
 $163 = HEAP32[178] | 0; //@line 28223
 HEAP32[178] = 0; //@line 28224
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 28225
 FUNCTION_TABLE_v[$161 & 7](); //@line 28226
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 28229
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 28230
  HEAP32[$164 >> 2] = $163; //@line 28231
  sp = STACKTOP; //@line 28232
  return;
 }
 ___async_unwind = 0; //@line 28235
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 28236
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 28237
 HEAP32[$164 >> 2] = $163; //@line 28238
 sp = STACKTOP; //@line 28239
 return;
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 10173
 $3 = HEAP32[5730] | 0; //@line 10174
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 10177
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 10181
 $7 = $6 & 3; //@line 10182
 if (($7 | 0) == 1) {
  _abort(); //@line 10185
 }
 $9 = $6 & -8; //@line 10188
 $10 = $2 + $9 | 0; //@line 10189
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 10194
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 10200
   $17 = $13 + $9 | 0; //@line 10201
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 10204
   }
   if ((HEAP32[5731] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 10210
    $106 = HEAP32[$105 >> 2] | 0; //@line 10211
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 10215
     $$1382 = $17; //@line 10215
     $114 = $16; //@line 10215
     break;
    }
    HEAP32[5728] = $17; //@line 10218
    HEAP32[$105 >> 2] = $106 & -2; //@line 10220
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 10223
    HEAP32[$16 + $17 >> 2] = $17; //@line 10225
    return;
   }
   $21 = $13 >>> 3; //@line 10228
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 10232
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 10234
    $28 = 22944 + ($21 << 1 << 2) | 0; //@line 10236
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 10241
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10248
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5726] = HEAP32[5726] & ~(1 << $21); //@line 10258
     $$1 = $16; //@line 10259
     $$1382 = $17; //@line 10259
     $114 = $16; //@line 10259
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 10265
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 10269
     }
     $41 = $26 + 8 | 0; //@line 10272
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 10276
     } else {
      _abort(); //@line 10278
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 10283
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 10284
    $$1 = $16; //@line 10285
    $$1382 = $17; //@line 10285
    $114 = $16; //@line 10285
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 10289
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 10291
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 10295
     $60 = $59 + 4 | 0; //@line 10296
     $61 = HEAP32[$60 >> 2] | 0; //@line 10297
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 10300
      if (!$63) {
       $$3 = 0; //@line 10303
       break;
      } else {
       $$1387 = $63; //@line 10306
       $$1390 = $59; //@line 10306
      }
     } else {
      $$1387 = $61; //@line 10309
      $$1390 = $60; //@line 10309
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 10312
      $66 = HEAP32[$65 >> 2] | 0; //@line 10313
      if ($66 | 0) {
       $$1387 = $66; //@line 10316
       $$1390 = $65; //@line 10316
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 10319
      $69 = HEAP32[$68 >> 2] | 0; //@line 10320
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 10325
       $$1390 = $68; //@line 10325
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 10330
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 10333
      $$3 = $$1387; //@line 10334
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 10339
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 10342
     }
     $53 = $51 + 12 | 0; //@line 10345
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10349
     }
     $56 = $48 + 8 | 0; //@line 10352
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 10356
      HEAP32[$56 >> 2] = $51; //@line 10357
      $$3 = $48; //@line 10358
      break;
     } else {
      _abort(); //@line 10361
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 10368
    $$1382 = $17; //@line 10368
    $114 = $16; //@line 10368
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 10371
    $75 = 23208 + ($74 << 2) | 0; //@line 10372
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 10377
      if (!$$3) {
       HEAP32[5727] = HEAP32[5727] & ~(1 << $74); //@line 10384
       $$1 = $16; //@line 10385
       $$1382 = $17; //@line 10385
       $114 = $16; //@line 10385
       break L10;
      }
     } else {
      if ((HEAP32[5730] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 10392
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 10400
       if (!$$3) {
        $$1 = $16; //@line 10403
        $$1382 = $17; //@line 10403
        $114 = $16; //@line 10403
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5730] | 0; //@line 10411
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 10414
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 10418
    $92 = $16 + 16 | 0; //@line 10419
    $93 = HEAP32[$92 >> 2] | 0; //@line 10420
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 10426
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 10430
       HEAP32[$93 + 24 >> 2] = $$3; //@line 10432
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 10438
    if (!$99) {
     $$1 = $16; //@line 10441
     $$1382 = $17; //@line 10441
     $114 = $16; //@line 10441
    } else {
     if ((HEAP32[5730] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 10446
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 10450
      HEAP32[$99 + 24 >> 2] = $$3; //@line 10452
      $$1 = $16; //@line 10453
      $$1382 = $17; //@line 10453
      $114 = $16; //@line 10453
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 10459
   $$1382 = $9; //@line 10459
   $114 = $2; //@line 10459
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 10464
 }
 $115 = $10 + 4 | 0; //@line 10467
 $116 = HEAP32[$115 >> 2] | 0; //@line 10468
 if (!($116 & 1)) {
  _abort(); //@line 10472
 }
 if (!($116 & 2)) {
  if ((HEAP32[5732] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5729] | 0) + $$1382 | 0; //@line 10482
   HEAP32[5729] = $124; //@line 10483
   HEAP32[5732] = $$1; //@line 10484
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 10487
   if (($$1 | 0) != (HEAP32[5731] | 0)) {
    return;
   }
   HEAP32[5731] = 0; //@line 10493
   HEAP32[5728] = 0; //@line 10494
   return;
  }
  if ((HEAP32[5731] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5728] | 0) + $$1382 | 0; //@line 10501
   HEAP32[5728] = $132; //@line 10502
   HEAP32[5731] = $114; //@line 10503
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 10506
   HEAP32[$114 + $132 >> 2] = $132; //@line 10508
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 10512
  $138 = $116 >>> 3; //@line 10513
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 10518
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 10520
    $145 = 22944 + ($138 << 1 << 2) | 0; //@line 10522
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5730] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 10528
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 10535
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5726] = HEAP32[5726] & ~(1 << $138); //@line 10545
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 10551
    } else {
     if ((HEAP32[5730] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 10556
     }
     $160 = $143 + 8 | 0; //@line 10559
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 10563
     } else {
      _abort(); //@line 10565
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 10570
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 10571
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 10574
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 10576
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 10580
      $180 = $179 + 4 | 0; //@line 10581
      $181 = HEAP32[$180 >> 2] | 0; //@line 10582
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 10585
       if (!$183) {
        $$3400 = 0; //@line 10588
        break;
       } else {
        $$1398 = $183; //@line 10591
        $$1402 = $179; //@line 10591
       }
      } else {
       $$1398 = $181; //@line 10594
       $$1402 = $180; //@line 10594
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 10597
       $186 = HEAP32[$185 >> 2] | 0; //@line 10598
       if ($186 | 0) {
        $$1398 = $186; //@line 10601
        $$1402 = $185; //@line 10601
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 10604
       $189 = HEAP32[$188 >> 2] | 0; //@line 10605
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 10610
        $$1402 = $188; //@line 10610
       }
      }
      if ((HEAP32[5730] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 10616
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 10619
       $$3400 = $$1398; //@line 10620
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 10625
      if ((HEAP32[5730] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 10629
      }
      $173 = $170 + 12 | 0; //@line 10632
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 10636
      }
      $176 = $167 + 8 | 0; //@line 10639
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 10643
       HEAP32[$176 >> 2] = $170; //@line 10644
       $$3400 = $167; //@line 10645
       break;
      } else {
       _abort(); //@line 10648
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 10656
     $196 = 23208 + ($195 << 2) | 0; //@line 10657
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 10662
       if (!$$3400) {
        HEAP32[5727] = HEAP32[5727] & ~(1 << $195); //@line 10669
        break L108;
       }
      } else {
       if ((HEAP32[5730] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 10676
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 10684
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5730] | 0; //@line 10694
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 10697
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 10701
     $213 = $10 + 16 | 0; //@line 10702
     $214 = HEAP32[$213 >> 2] | 0; //@line 10703
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 10709
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 10713
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 10715
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 10721
     if ($220 | 0) {
      if ((HEAP32[5730] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 10727
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 10731
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 10733
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 10742
  HEAP32[$114 + $137 >> 2] = $137; //@line 10744
  if (($$1 | 0) == (HEAP32[5731] | 0)) {
   HEAP32[5728] = $137; //@line 10748
   return;
  } else {
   $$2 = $137; //@line 10751
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 10755
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 10758
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 10760
  $$2 = $$1382; //@line 10761
 }
 $235 = $$2 >>> 3; //@line 10763
 if ($$2 >>> 0 < 256) {
  $238 = 22944 + ($235 << 1 << 2) | 0; //@line 10767
  $239 = HEAP32[5726] | 0; //@line 10768
  $240 = 1 << $235; //@line 10769
  if (!($239 & $240)) {
   HEAP32[5726] = $239 | $240; //@line 10774
   $$0403 = $238; //@line 10776
   $$pre$phiZ2D = $238 + 8 | 0; //@line 10776
  } else {
   $244 = $238 + 8 | 0; //@line 10778
   $245 = HEAP32[$244 >> 2] | 0; //@line 10779
   if ((HEAP32[5730] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 10783
   } else {
    $$0403 = $245; //@line 10786
    $$pre$phiZ2D = $244; //@line 10786
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 10789
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 10791
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 10793
  HEAP32[$$1 + 12 >> 2] = $238; //@line 10795
  return;
 }
 $251 = $$2 >>> 8; //@line 10798
 if (!$251) {
  $$0396 = 0; //@line 10801
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 10805
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 10809
   $257 = $251 << $256; //@line 10810
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 10813
   $262 = $257 << $260; //@line 10815
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 10818
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 10823
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 10829
  }
 }
 $276 = 23208 + ($$0396 << 2) | 0; //@line 10832
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 10834
 HEAP32[$$1 + 20 >> 2] = 0; //@line 10837
 HEAP32[$$1 + 16 >> 2] = 0; //@line 10838
 $280 = HEAP32[5727] | 0; //@line 10839
 $281 = 1 << $$0396; //@line 10840
 do {
  if (!($280 & $281)) {
   HEAP32[5727] = $280 | $281; //@line 10846
   HEAP32[$276 >> 2] = $$1; //@line 10847
   HEAP32[$$1 + 24 >> 2] = $276; //@line 10849
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 10851
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 10853
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 10861
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 10861
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 10868
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 10872
    $301 = HEAP32[$299 >> 2] | 0; //@line 10874
    if (!$301) {
     label = 121; //@line 10877
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 10880
     $$0384 = $301; //@line 10880
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5730] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 10887
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 10890
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 10892
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 10894
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 10896
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 10901
    $309 = HEAP32[$308 >> 2] | 0; //@line 10902
    $310 = HEAP32[5730] | 0; //@line 10903
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 10909
     HEAP32[$308 >> 2] = $$1; //@line 10910
     HEAP32[$$1 + 8 >> 2] = $309; //@line 10912
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 10914
     HEAP32[$$1 + 24 >> 2] = 0; //@line 10916
     break;
    } else {
     _abort(); //@line 10919
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5734] | 0) + -1 | 0; //@line 10926
 HEAP32[5734] = $319; //@line 10927
 if (!$319) {
  $$0212$in$i = 23360; //@line 10930
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 10935
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 10941
  }
 }
 HEAP32[5734] = -1; //@line 10944
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$058 = 0, $$059 = 0, $$062 = 0, $$06272 = 0, $$06273 = 0, $$064 = 0, $$06471 = 0, $$06575 = 0, $$06874 = 0, $$1 = 0, $$163 = 0, $$166 = 0, $$16670 = 0, $$267 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $109 = 0, $11 = 0, $115 = 0, $121 = 0, $135 = 0, $15 = 0, $156 = 0, $157 = 0, $170 = 0, $171 = 0, $172 = 0, $178 = 0, $179 = 0, $183 = 0, $185 = 0, $191 = 0, $192 = 0, $195 = 0, $197 = 0, $212 = 0, $219 = 0, $220 = 0, $221 = 0, $224 = 0, $242 = 0, $245 = 0, $246 = 0, $247 = 0, $258 = 0, $40 = 0, $6 = 0, $64 = 0, $7 = 0, $74 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13253
 STACKTOP = STACKTOP + 16 | 0; //@line 13254
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13254
 $vararg_buffer1 = sp + 8 | 0; //@line 13255
 $vararg_buffer = sp; //@line 13256
 $6 = sp + 12 | 0; //@line 13257
 HEAP32[$6 >> 2] = 0; //@line 13258
 $7 = $0 + 1440 | 0; //@line 13259
 $8 = $0 + 1177 | 0; //@line 13260
 HEAP8[$8 >> 0] = 0; //@line 13261
 $9 = ($4 | 0) == 0; //@line 13262
 $$ = $9 ? 0 : $5; //@line 13263
 HEAP16[$7 >> 1] = $$; //@line 13264
 $11 = $0 + 1185 | 0; //@line 13266
 HEAP8[$11 >> 0] = HEAP8[$1 >> 0] | 0; //@line 13267
 L1 : do {
  switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
  case 0:
   {
    HEAP16[$7 >> 1] = 1; //@line 13274
    $15 = HEAP32[$0 + 1708 >> 2] | 0; //@line 13277
    HEAP8[$0 + 1193 >> 0] = HEAP8[$15 >> 0] | 0; //@line 13282
    HEAP8[$0 + 1192 >> 0] = HEAP8[$15 + 1 >> 0] | 0; //@line 13286
    HEAP8[$0 + 1191 >> 0] = HEAP8[$15 + 2 >> 0] | 0; //@line 13290
    HEAP8[$0 + 1190 >> 0] = HEAP8[$15 + 3 >> 0] | 0; //@line 13294
    HEAP8[$0 + 1189 >> 0] = HEAP8[$15 + 4 >> 0] | 0; //@line 13298
    HEAP8[$0 + 1188 >> 0] = HEAP8[$15 + 5 >> 0] | 0; //@line 13302
    HEAP8[$0 + 1187 >> 0] = HEAP8[$15 + 6 >> 0] | 0; //@line 13305
    HEAP8[$0 + 1186 >> 0] = HEAP8[$15 + 7 >> 0] | 0; //@line 13307
    HEAP16[$7 >> 1] = 9; //@line 13308
    $40 = HEAP32[$0 + 1704 >> 2] | 0; //@line 13311
    HEAP8[$0 + 1201 >> 0] = HEAP8[$40 >> 0] | 0; //@line 13316
    HEAP8[$0 + 1200 >> 0] = HEAP8[$40 + 1 >> 0] | 0; //@line 13320
    HEAP8[$0 + 1199 >> 0] = HEAP8[$40 + 2 >> 0] | 0; //@line 13324
    HEAP8[$0 + 1198 >> 0] = HEAP8[$40 + 3 >> 0] | 0; //@line 13328
    HEAP8[$0 + 1197 >> 0] = HEAP8[$40 + 4 >> 0] | 0; //@line 13332
    HEAP8[$0 + 1196 >> 0] = HEAP8[$40 + 5 >> 0] | 0; //@line 13336
    HEAP8[$0 + 1195 >> 0] = HEAP8[$40 + 6 >> 0] | 0; //@line 13339
    HEAP8[$0 + 1194 >> 0] = HEAP8[$40 + 7 >> 0] | 0; //@line 13341
    HEAP16[$7 >> 1] = 17; //@line 13342
    $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13344
    $64 = __ZN7LoRaPHY13get_radio_rngEv($0 + 4 | 0) | 0; //@line 13345
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 410; //@line 13348
     HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 13350
     HEAP32[$AsyncCtx17 + 8 >> 2] = $7; //@line 13352
     HEAP32[$AsyncCtx17 + 12 >> 2] = $11; //@line 13354
     HEAP32[$AsyncCtx17 + 16 >> 2] = $6; //@line 13356
     HEAP32[$AsyncCtx17 + 20 >> 2] = $6; //@line 13358
     HEAP8[$AsyncCtx17 + 24 >> 0] = $3; //@line 13360
     HEAP32[$AsyncCtx17 + 28 >> 2] = $vararg_buffer1; //@line 13362
     HEAP32[$AsyncCtx17 + 32 >> 2] = $vararg_buffer1; //@line 13364
     sp = STACKTOP; //@line 13365
     STACKTOP = sp; //@line 13366
     return 0; //@line 13366
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 13368
    $74 = $0 + 1748 | 0; //@line 13370
    HEAP16[$74 >> 1] = $64; //@line 13371
    $76 = HEAP16[$7 >> 1] | 0; //@line 13373
    HEAP16[$7 >> 1] = $76 + 1 << 16 >> 16; //@line 13375
    HEAP8[($76 & 65535) + ($0 + 1185) >> 0] = $64; //@line 13378
    $82 = (HEAPU16[$74 >> 1] | 0) >>> 8 & 255; //@line 13381
    $83 = HEAP16[$7 >> 1] | 0; //@line 13382
    HEAP16[$7 >> 1] = $83 + 1 << 16 >> 16; //@line 13384
    HEAP8[($83 & 65535) + ($0 + 1185) >> 0] = $82; //@line 13387
    $89 = HEAP16[$7 >> 1] & 255; //@line 13390
    $91 = HEAP32[$0 + 1712 >> 2] | 0; //@line 13392
    $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 13393
    $92 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($0 + 756 | 0, $11, $89, $91, 128, $6) | 0; //@line 13394
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 411; //@line 13397
     HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 13399
     HEAP32[$AsyncCtx9 + 8 >> 2] = $7; //@line 13401
     HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 13403
     HEAP32[$AsyncCtx9 + 16 >> 2] = $6; //@line 13405
     HEAP8[$AsyncCtx9 + 20 >> 0] = $3; //@line 13407
     HEAP32[$AsyncCtx9 + 24 >> 2] = $vararg_buffer1; //@line 13409
     HEAP32[$AsyncCtx9 + 28 >> 2] = $vararg_buffer1; //@line 13411
     sp = STACKTOP; //@line 13412
     STACKTOP = sp; //@line 13413
     return 0; //@line 13413
    }
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13415
    if (!$92) {
     $101 = HEAP32[$6 >> 2] | 0; //@line 13418
     $103 = HEAP16[$7 >> 1] | 0; //@line 13420
     HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 13422
     HEAP8[($103 & 65535) + ($0 + 1185) >> 0] = $101; //@line 13425
     $109 = HEAP16[$7 >> 1] | 0; //@line 13428
     HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 13430
     HEAP8[($109 & 65535) + ($0 + 1185) >> 0] = $101 >>> 8; //@line 13433
     $115 = HEAP16[$7 >> 1] | 0; //@line 13436
     HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 13438
     HEAP8[($115 & 65535) + ($0 + 1185) >> 0] = $101 >>> 16; //@line 13441
     $121 = HEAP16[$7 >> 1] | 0; //@line 13444
     HEAP16[$7 >> 1] = $121 + 1 << 16 >> 16; //@line 13446
     HEAP8[($121 & 65535) + ($0 + 1185) >> 0] = $101 >>> 24; //@line 13449
     $$163 = $3; //@line 13450
     $$3 = 0; //@line 13450
     break L1;
    } else {
     $$059 = -1014; //@line 13453
     STACKTOP = sp; //@line 13454
     return $$059 | 0; //@line 13454
    }
    break;
   }
  case 4:
   {
    HEAP8[$8 >> 0] = 1; //@line 13459
    label = 9; //@line 13460
    break;
   }
  case 2:
   {
    label = 9; //@line 13464
    break;
   }
  case 7:
   {
    if ($9 | $$ << 16 >> 16 == 0) {
     $$163 = $3; //@line 13471
     $$3 = 0; //@line 13471
    } else {
     _memcpy($0 + 1186 | 0, $4 | 0, $$ & 65535 | 0) | 0; //@line 13475
     HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 1; //@line 13480
     $$163 = $3; //@line 13481
     $$3 = 0; //@line 13481
    }
    break;
   }
  default:
   {
    $$163 = $3; //@line 13486
    $$3 = -1002; //@line 13486
   }
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   if (!(HEAP8[$0 + 2376 >> 0] | 0)) {
    $$059 = -1009; //@line 13496
    STACKTOP = sp; //@line 13497
    return $$059 | 0; //@line 13497
   }
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $AsyncCtx13 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13507
    $135 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0 + 4 | 0, 1, $0 + 1877 | 0, $0 + 1876 | 0, $0 + 1768 | 0) | 0; //@line 13508
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 412; //@line 13511
     HEAP32[$AsyncCtx13 + 4 >> 2] = $2; //@line 13513
     HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 13515
     HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer; //@line 13517
     HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer; //@line 13519
     HEAP8[$AsyncCtx13 + 20 >> 0] = $9 & 1; //@line 13522
     HEAP32[$AsyncCtx13 + 24 >> 2] = $7; //@line 13524
     HEAP8[$AsyncCtx13 + 28 >> 0] = $3; //@line 13526
     HEAP32[$AsyncCtx13 + 32 >> 2] = $vararg_buffer1; //@line 13528
     HEAP32[$AsyncCtx13 + 36 >> 2] = $vararg_buffer1; //@line 13530
     HEAP32[$AsyncCtx13 + 40 >> 2] = $6; //@line 13532
     HEAP32[$AsyncCtx13 + 44 >> 2] = $4; //@line 13534
     HEAP32[$AsyncCtx13 + 48 >> 2] = $6; //@line 13536
     HEAP32[$AsyncCtx13 + 52 >> 2] = $11; //@line 13538
     sp = STACKTOP; //@line 13539
     STACKTOP = sp; //@line 13540
     return 0; //@line 13540
    }
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13542
    if ($135) {
     HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 13546
    }
   }
   if (!(HEAP8[$0 + 1178 >> 0] | 0)) {
    $$pre$phiZ2D = $2; //@line 13553
   } else {
    _mbed_tracef(16, 12685, 12865, $vararg_buffer); //@line 13555
    HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 13558
    $$pre$phiZ2D = $2; //@line 13559
   }
   $156 = $0 + 1756 | 0; //@line 13561
   $157 = HEAP32[$156 >> 2] | 0; //@line 13562
   HEAP8[$0 + 1186 >> 0] = $157; //@line 13565
   HEAP8[$0 + 1187 >> 0] = $157 >>> 8; //@line 13569
   HEAP8[$0 + 1188 >> 0] = $157 >>> 16; //@line 13573
   HEAP8[$0 + 1189 >> 0] = $157 >>> 24; //@line 13577
   $170 = $0 + 1190 | 0; //@line 13579
   HEAP8[$170 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 13580
   $171 = $0 + 1760 | 0; //@line 13581
   $172 = HEAP32[$171 >> 2] | 0; //@line 13582
   HEAP8[$0 + 1191 >> 0] = $172; //@line 13585
   HEAP8[$0 + 1192 >> 0] = $172 >>> 8; //@line 13589
   $178 = $0 + 476 | 0; //@line 13590
   __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($178); //@line 13591
   $179 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($178) | 0; //@line 13592
   do {
    if ($9) {
     label = 27; //@line 13595
    } else {
     if (!(HEAP16[$7 >> 1] | 0)) {
      label = 27; //@line 13600
     } else {
      if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($178) | 0)) {
       __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($178); //@line 13604
       $$06272 = $3; //@line 13605
       $$06471 = $4; //@line 13605
       $$16670 = 8; //@line 13605
       label = 31; //@line 13606
       break;
      }
      $183 = $179 & 255; //@line 13609
      if (($179 & 255) >= 16) {
       HEAP16[$7 >> 1] = $179 & 255; //@line 13613
       $$062 = 0; //@line 13615
       $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($178) | 0; //@line 13615
       $$166 = 8; //@line 13615
       label = 30; //@line 13616
       break;
      }
      $185 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 13619
      $191 = ($185 & 255) + $183 & 15 | $185 & -16; //@line 13625
      HEAP8[$$pre$phiZ2D >> 0] = $191; //@line 13626
      HEAP8[$170 >> 0] = $191; //@line 13627
      $192 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($178) | 0; //@line 13628
      if (!($179 << 24 >> 24)) {
       __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($178); //@line 13631
       $$06272 = $3; //@line 13632
       $$06471 = $4; //@line 13632
       $$16670 = 8; //@line 13632
       label = 31; //@line 13633
       break;
      } else {
       $$06575 = 8; //@line 13636
       $$06874 = 0; //@line 13636
       $195 = 0; //@line 13636
       while (1) {
        $197 = $$06575 + 1 << 24 >> 24; //@line 13640
        HEAP8[($$06575 & 255) + ($0 + 1185) >> 0] = HEAP8[$192 + $195 >> 0] | 0; //@line 13643
        $$06874 = $$06874 + 1 << 16 >> 16; //@line 13644
        $195 = $$06874 & 65535; //@line 13645
        if ($195 >>> 0 >= $183 >>> 0) {
         $$062 = $3; //@line 13650
         $$064 = $4; //@line 13650
         $$166 = $197; //@line 13650
         label = 30; //@line 13651
         break;
        } else {
         $$06575 = $197; //@line 13648
        }
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 27) {
    if (!($179 << 24 >> 24)) {
     $$062 = $3; //@line 13662
     $$064 = $4; //@line 13662
     $$166 = 8; //@line 13662
     label = 30; //@line 13663
    } else {
     if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($178) | 0) {
      HEAP16[$7 >> 1] = $179 & 255; //@line 13668
      $$062 = 0; //@line 13670
      $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($178) | 0; //@line 13670
      $$166 = 8; //@line 13670
      label = 30; //@line 13671
     } else {
      $$062 = $3; //@line 13673
      $$064 = $4; //@line 13673
      $$166 = 8; //@line 13673
      label = 30; //@line 13674
     }
    }
   }
   if ((label | 0) == 30) {
    __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($178); //@line 13679
    if (!$$064) {
     $$06273 = $$062; //@line 13682
     $$1 = 0; //@line 13682
     $$267 = $$166; //@line 13682
    } else {
     $$06272 = $$062; //@line 13684
     $$06471 = $$064; //@line 13684
     $$16670 = $$166; //@line 13684
     label = 31; //@line 13685
    }
   }
   do {
    if ((label | 0) == 31) {
     if (!(HEAP16[$7 >> 1] | 0)) {
      $$06273 = $$06272; //@line 13693
      $$1 = 0; //@line 13693
      $$267 = $$16670; //@line 13693
     } else {
      $212 = $$16670 + 1 << 24 >> 24; //@line 13695
      HEAP8[($$16670 & 255) + ($0 + 1185) >> 0] = $$06272; //@line 13698
      if (!($$06272 << 24 >> 24)) {
       __ZN14LoRaMacCommand20clear_command_bufferEv($178); //@line 13702
       $$058 = $0 + 1716 | 0; //@line 13704
      } else {
       $$058 = $0 + 1732 | 0; //@line 13706
      }
      $219 = HEAP16[$7 >> 1] | 0; //@line 13709
      $220 = HEAP32[$156 >> 2] | 0; //@line 13710
      $221 = HEAP32[$171 >> 2] | 0; //@line 13711
      $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 13714
      $224 = __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $$06471, $219, $$058, 128, $220, 0, $221, ($212 & 255) + ($0 + 1185) | 0) | 0; //@line 13715
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 413; //@line 13718
       HEAP8[$AsyncCtx + 4 >> 0] = $$06272; //@line 13720
       HEAP8[$AsyncCtx + 5 >> 0] = $212; //@line 13722
       HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 13724
       HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 13726
       HEAP32[$AsyncCtx + 16 >> 2] = $156; //@line 13728
       HEAP32[$AsyncCtx + 20 >> 2] = $171; //@line 13730
       HEAP32[$AsyncCtx + 24 >> 2] = $11; //@line 13732
       HEAP32[$AsyncCtx + 28 >> 2] = $6; //@line 13734
       HEAP8[$AsyncCtx + 32 >> 0] = $3; //@line 13736
       HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer1; //@line 13738
       HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer1; //@line 13740
       HEAP32[$AsyncCtx + 44 >> 2] = $6; //@line 13742
       sp = STACKTOP; //@line 13743
       STACKTOP = sp; //@line 13744
       return 0; //@line 13744
      } else {
       _emscripten_free_async_context($AsyncCtx | 0); //@line 13746
       $$06273 = $$06272; //@line 13749
       $$1 = ($224 | 0) == 0 ? 0 : -1014; //@line 13749
       $$267 = $212; //@line 13749
       break;
      }
     }
    }
   } while (0);
   $242 = (HEAPU16[$7 >> 1] | 0) + ($$267 & 255) & 65535; //@line 13759
   HEAP16[$7 >> 1] = $242; //@line 13760
   $245 = HEAP32[$156 >> 2] | 0; //@line 13763
   $246 = HEAP32[$171 >> 2] | 0; //@line 13764
   $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13765
   $247 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0 + 756 | 0, $11, $242, $0 + 1716 | 0, 128, $245, 0, $246, $6) | 0; //@line 13766
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 414; //@line 13769
    HEAP32[$AsyncCtx5 + 4 >> 2] = $$1; //@line 13771
    HEAP32[$AsyncCtx5 + 8 >> 2] = $6; //@line 13773
    HEAP32[$AsyncCtx5 + 12 >> 2] = $7; //@line 13775
    HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 13777
    HEAP8[$AsyncCtx5 + 20 >> 0] = $3; //@line 13779
    HEAP8[$AsyncCtx5 + 21 >> 0] = $$06273; //@line 13781
    HEAP32[$AsyncCtx5 + 24 >> 2] = $vararg_buffer1; //@line 13783
    HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer1; //@line 13785
    HEAP32[$AsyncCtx5 + 32 >> 2] = $6; //@line 13787
    sp = STACKTOP; //@line 13788
    STACKTOP = sp; //@line 13789
    return 0; //@line 13789
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 13791
    $258 = HEAP32[$6 >> 2] | 0; //@line 13794
    HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 1185) >> 0] = $258; //@line 13799
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 1185) >> 0] = $258 >>> 8; //@line 13806
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 1185) >> 0] = $258 >>> 16; //@line 13813
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 1185) >> 0] = $258 >>> 24; //@line 13820
    HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 13825
    $$163 = $$06273; //@line 13826
    $$3 = ($247 | 0) == 0 ? $$1 : -1014; //@line 13826
    break;
   }
  }
 } while (0);
 HEAP32[$vararg_buffer1 >> 2] = $$163 & 255; //@line 13832
 _mbed_tracef(16, 12685, 12878, $vararg_buffer1); //@line 13833
 $$059 = $$3; //@line 13834
 STACKTOP = sp; //@line 13835
 return $$059 | 0; //@line 13835
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i45 = 0, $$019$i = 0, $$019$i42 = 0, $$021$i44 = 0, $$09$i = 0, $$09$i53 = 0, $$09$i58 = 0, $$sink$sink$i = 0, $105 = 0, $108 = 0, $116 = 0, $117 = 0, $12 = 0, $130 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $160 = 0, $177 = 0, $181 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $69 = 0, $7 = 0, $70 = 0, $89 = 0, $9 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx3 = 0, $AsyncCtx32 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $116$looptemp = 0;
 sp = STACKTOP; //@line 3970
 STACKTOP = STACKTOP + 80 | 0; //@line 3971
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 3971
 $2 = sp + 56 | 0; //@line 3972
 $3 = sp + 4 | 0; //@line 3973
 $4 = sp + 40 | 0; //@line 3974
 $5 = sp + 24 | 0; //@line 3975
 $6 = sp + 8 | 0; //@line 3976
 $7 = sp; //@line 3977
 if (!$0) {
  $$0 = -24832; //@line 3980
  STACKTOP = sp; //@line 3981
  return $$0 | 0; //@line 3981
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 3983
 if (!$9) {
  $$0 = -24832; //@line 3986
  STACKTOP = sp; //@line 3987
  return $$0 | 0; //@line 3987
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 3990
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 3995
  STACKTOP = sp; //@line 3996
  return $$0 | 0; //@line 3996
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 3999
 $AsyncCtx26 = _emscripten_alloc_async_context(68, sp) | 0; //@line 4000
 _mbedtls_platform_zeroize($4, 16); //@line 4001
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 584; //@line 4004
  HEAP32[$AsyncCtx26 + 4 >> 2] = $16; //@line 4006
  HEAP32[$AsyncCtx26 + 8 >> 2] = $5; //@line 4008
  HEAP32[$AsyncCtx26 + 12 >> 2] = $12; //@line 4010
  HEAP32[$AsyncCtx26 + 16 >> 2] = $7; //@line 4012
  HEAP32[$AsyncCtx26 + 20 >> 2] = $6; //@line 4014
  HEAP32[$AsyncCtx26 + 24 >> 2] = $4; //@line 4016
  HEAP32[$AsyncCtx26 + 28 >> 2] = $12; //@line 4018
  HEAP32[$AsyncCtx26 + 32 >> 2] = $4; //@line 4020
  HEAP32[$AsyncCtx26 + 36 >> 2] = $6; //@line 4022
  HEAP32[$AsyncCtx26 + 40 >> 2] = $5; //@line 4024
  HEAP32[$AsyncCtx26 + 44 >> 2] = $0; //@line 4026
  HEAP32[$AsyncCtx26 + 48 >> 2] = $7; //@line 4028
  HEAP32[$AsyncCtx26 + 52 >> 2] = $1; //@line 4030
  HEAP32[$AsyncCtx26 + 56 >> 2] = $0; //@line 4032
  HEAP32[$AsyncCtx26 + 60 >> 2] = $3; //@line 4034
  HEAP32[$AsyncCtx26 + 64 >> 2] = $2; //@line 4036
  sp = STACKTOP; //@line 4037
  STACKTOP = sp; //@line 4038
  return 0; //@line 4038
 }
 _emscripten_free_async_context($AsyncCtx26 | 0); //@line 4040
 $AsyncCtx22 = _emscripten_alloc_async_context(68, sp) | 0; //@line 4041
 _mbedtls_platform_zeroize($5, 16); //@line 4042
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 585; //@line 4045
  HEAP32[$AsyncCtx22 + 4 >> 2] = $16; //@line 4047
  HEAP32[$AsyncCtx22 + 8 >> 2] = $5; //@line 4049
  HEAP32[$AsyncCtx22 + 12 >> 2] = $12; //@line 4051
  HEAP32[$AsyncCtx22 + 16 >> 2] = $7; //@line 4053
  HEAP32[$AsyncCtx22 + 20 >> 2] = $6; //@line 4055
  HEAP32[$AsyncCtx22 + 24 >> 2] = $4; //@line 4057
  HEAP32[$AsyncCtx22 + 28 >> 2] = $12; //@line 4059
  HEAP32[$AsyncCtx22 + 32 >> 2] = $4; //@line 4061
  HEAP32[$AsyncCtx22 + 36 >> 2] = $6; //@line 4063
  HEAP32[$AsyncCtx22 + 40 >> 2] = $5; //@line 4065
  HEAP32[$AsyncCtx22 + 44 >> 2] = $0; //@line 4067
  HEAP32[$AsyncCtx22 + 48 >> 2] = $7; //@line 4069
  HEAP32[$AsyncCtx22 + 52 >> 2] = $1; //@line 4071
  HEAP32[$AsyncCtx22 + 56 >> 2] = $0; //@line 4073
  HEAP32[$AsyncCtx22 + 60 >> 2] = $3; //@line 4075
  HEAP32[$AsyncCtx22 + 64 >> 2] = $2; //@line 4077
  sp = STACKTOP; //@line 4078
  STACKTOP = sp; //@line 4079
  return 0; //@line 4079
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 4081
 $AsyncCtx18 = _emscripten_alloc_async_context(76, sp) | 0; //@line 4082
 _mbedtls_platform_zeroize($2, 16); //@line 4083
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 586; //@line 4086
  HEAP32[$AsyncCtx18 + 4 >> 2] = $16; //@line 4088
  HEAP32[$AsyncCtx18 + 8 >> 2] = $5; //@line 4090
  HEAP32[$AsyncCtx18 + 12 >> 2] = $12; //@line 4092
  HEAP32[$AsyncCtx18 + 16 >> 2] = $7; //@line 4094
  HEAP32[$AsyncCtx18 + 20 >> 2] = $6; //@line 4096
  HEAP32[$AsyncCtx18 + 24 >> 2] = $4; //@line 4098
  HEAP32[$AsyncCtx18 + 28 >> 2] = $12; //@line 4100
  HEAP32[$AsyncCtx18 + 32 >> 2] = $4; //@line 4102
  HEAP32[$AsyncCtx18 + 36 >> 2] = $6; //@line 4104
  HEAP32[$AsyncCtx18 + 40 >> 2] = $5; //@line 4106
  HEAP32[$AsyncCtx18 + 44 >> 2] = $0; //@line 4108
  HEAP32[$AsyncCtx18 + 48 >> 2] = $7; //@line 4110
  HEAP32[$AsyncCtx18 + 52 >> 2] = $1; //@line 4112
  HEAP32[$AsyncCtx18 + 56 >> 2] = $3; //@line 4114
  HEAP32[$AsyncCtx18 + 60 >> 2] = $2; //@line 4116
  HEAP32[$AsyncCtx18 + 64 >> 2] = $0; //@line 4118
  HEAP32[$AsyncCtx18 + 68 >> 2] = $3; //@line 4120
  HEAP32[$AsyncCtx18 + 72 >> 2] = $2; //@line 4122
  sp = STACKTOP; //@line 4123
  STACKTOP = sp; //@line 4124
  return 0; //@line 4124
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 4126
 $69 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 4129
 $AsyncCtx32 = _emscripten_alloc_async_context(72, sp) | 0; //@line 4130
 $70 = _mbedtls_cipher_update($0, $2, $69, $2, $3) | 0; //@line 4131
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 587; //@line 4134
  HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 4136
  HEAP32[$AsyncCtx32 + 8 >> 2] = $12; //@line 4138
  HEAP32[$AsyncCtx32 + 12 >> 2] = $16; //@line 4140
  HEAP32[$AsyncCtx32 + 16 >> 2] = $4; //@line 4142
  HEAP32[$AsyncCtx32 + 20 >> 2] = $5; //@line 4144
  HEAP32[$AsyncCtx32 + 24 >> 2] = $7; //@line 4146
  HEAP32[$AsyncCtx32 + 28 >> 2] = $6; //@line 4148
  HEAP32[$AsyncCtx32 + 32 >> 2] = $12; //@line 4150
  HEAP32[$AsyncCtx32 + 36 >> 2] = $4; //@line 4152
  HEAP32[$AsyncCtx32 + 40 >> 2] = $6; //@line 4154
  HEAP32[$AsyncCtx32 + 44 >> 2] = $5; //@line 4156
  HEAP32[$AsyncCtx32 + 48 >> 2] = $0; //@line 4158
  HEAP32[$AsyncCtx32 + 52 >> 2] = $7; //@line 4160
  HEAP32[$AsyncCtx32 + 56 >> 2] = $3; //@line 4162
  HEAP32[$AsyncCtx32 + 60 >> 2] = $2; //@line 4164
  HEAP32[$AsyncCtx32 + 64 >> 2] = $69; //@line 4166
  HEAP32[$AsyncCtx32 + 68 >> 2] = $2; //@line 4168
  sp = STACKTOP; //@line 4169
  STACKTOP = sp; //@line 4170
  return 0; //@line 4170
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 4172
 L22 : do {
  if (!$70) {
   switch ($69 | 0) {
   case 16:
    {
     $$019$i42 = 135; //@line 4178
     break;
    }
   case 8:
    {
     $$019$i42 = 27; //@line 4182
     break;
    }
   default:
    {
     break L22;
    }
   }
   $89 = $69 + -1 | 0; //@line 4189
   $$01720$i45 = 0; //@line 4190
   $$021$i44 = $89; //@line 4190
   while (1) {
    $92 = HEAPU8[$2 + $$021$i44 >> 0] | 0; //@line 4194
    HEAP8[$4 + $$021$i44 >> 0] = $92 << 1 | $$01720$i45; //@line 4199
    if (($$021$i44 | 0) > 0) {
     $$01720$i45 = $92 >>> 7; //@line 4204
     $$021$i44 = $$021$i44 + -1 | 0; //@line 4204
    } else {
     break;
    }
   }
   $105 = $4 + $89 | 0; //@line 4214
   $108 = $$019$i42 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$105 >> 0] | 0); //@line 4217
   HEAP8[$105 >> 0] = $108; //@line 4219
   switch ($69 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 4222
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 4226
     break;
    }
   default:
    {
     break L22;
    }
   }
   HEAP8[$5 + $89 >> 0] = $108 << 1; //@line 4236
   if (($89 | 0) > 0) {
    $116 = $108; //@line 4240
    $117 = $69 + -2 | 0; //@line 4240
    while (1) {
     $116$looptemp = $116;
     $116 = HEAPU8[$4 + $117 >> 0] | 0; //@line 4245
     HEAP8[$5 + $117 >> 0] = $116 << 1 | $116$looptemp >>> 7; //@line 4250
     if (($117 | 0) <= 0) {
      break;
     } else {
      $117 = $117 + -1 | 0; //@line 4254
     }
    }
   }
   $130 = $5 + $89 | 0; //@line 4265
   HEAP8[$130 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$130 >> 0] | 0); //@line 4270
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(64, sp) | 0; //@line 4273
 _mbedtls_platform_zeroize($2, 16); //@line 4274
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 588; //@line 4277
  HEAP32[$AsyncCtx14 + 4 >> 2] = $16; //@line 4279
  HEAP32[$AsyncCtx14 + 8 >> 2] = $5; //@line 4281
  HEAP32[$AsyncCtx14 + 12 >> 2] = $12; //@line 4283
  HEAP32[$AsyncCtx14 + 16 >> 2] = $7; //@line 4285
  HEAP32[$AsyncCtx14 + 20 >> 2] = $6; //@line 4287
  HEAP32[$AsyncCtx14 + 24 >> 2] = $4; //@line 4289
  HEAP32[$AsyncCtx14 + 28 >> 2] = $12; //@line 4291
  HEAP32[$AsyncCtx14 + 32 >> 2] = $4; //@line 4293
  HEAP32[$AsyncCtx14 + 36 >> 2] = $6; //@line 4295
  HEAP32[$AsyncCtx14 + 40 >> 2] = $5; //@line 4297
  HEAP32[$AsyncCtx14 + 44 >> 2] = $0; //@line 4299
  HEAP32[$AsyncCtx14 + 48 >> 2] = $7; //@line 4301
  HEAP32[$AsyncCtx14 + 52 >> 2] = $1; //@line 4303
  HEAP32[$AsyncCtx14 + 56 >> 2] = $3; //@line 4305
  HEAP32[$AsyncCtx14 + 60 >> 2] = $2; //@line 4307
  sp = STACKTOP; //@line 4308
  STACKTOP = sp; //@line 4309
  return 0; //@line 4309
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 4311
 $150 = $12 + 16 | 0; //@line 4312
 $151 = $12 + 32 | 0; //@line 4313
 $152 = HEAP32[$151 >> 2] | 0; //@line 4314
 if ($152 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 4317
  do {
   if ($$013$i >>> 0 < $152 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 4323
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($152 | 0) ? -128 : 0; //@line 4327
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 4330
   $$013$i = $$013$i + 1 | 0; //@line 4331
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i = 0; //@line 4334
  do {
   $160 = $6 + $$09$i | 0; //@line 4341
   HEAP8[$160 >> 0] = HEAP8[$5 + $$09$i >> 0] ^ HEAP8[$160 >> 0]; //@line 4346
   $$09$i = $$09$i + 1 | 0; //@line 4347
  } while (($$09$i | 0) != ($16 | 0));
  label = 33; //@line 4350
 } else {
  if ($16 | 0) {
   $$09$i53 = 0; //@line 4359
   do {
    HEAP8[$6 + $$09$i53 >> 0] = HEAP8[$4 + $$09$i53 >> 0] ^ HEAP8[$12 + 16 + $$09$i53 >> 0]; //@line 4367
    $$09$i53 = $$09$i53 + 1 | 0; //@line 4368
   } while (($$09$i53 | 0) != ($16 | 0));
   label = 33; //@line 4371
  }
 }
 if ((label | 0) == 33) {
  if ($16 | 0) {
   $$09$i58 = 0; //@line 4382
   do {
    $177 = $12 + $$09$i58 | 0; //@line 4386
    HEAP8[$177 >> 0] = HEAP8[$177 >> 0] ^ HEAP8[$6 + $$09$i58 >> 0]; //@line 4389
    $$09$i58 = $$09$i58 + 1 | 0; //@line 4390
   } while (($$09$i58 | 0) != ($16 | 0));
  }
 }
 $AsyncCtx29 = _emscripten_alloc_async_context(40, sp) | 0; //@line 4400
 $181 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 4401
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 589; //@line 4404
  HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 4406
  HEAP32[$AsyncCtx29 + 8 >> 2] = $12; //@line 4408
  HEAP32[$AsyncCtx29 + 12 >> 2] = $16; //@line 4410
  HEAP32[$AsyncCtx29 + 16 >> 2] = $4; //@line 4412
  HEAP32[$AsyncCtx29 + 20 >> 2] = $5; //@line 4414
  HEAP32[$AsyncCtx29 + 24 >> 2] = $151; //@line 4416
  HEAP32[$AsyncCtx29 + 28 >> 2] = $150; //@line 4418
  HEAP32[$AsyncCtx29 + 32 >> 2] = $7; //@line 4420
  HEAP32[$AsyncCtx29 + 36 >> 2] = $6; //@line 4422
  sp = STACKTOP; //@line 4423
  STACKTOP = sp; //@line 4424
  return 0; //@line 4424
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 4426
 if (!$181) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 4429
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 4431
 _mbedtls_platform_zeroize($4, 16); //@line 4432
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 590; //@line 4435
  HEAP32[$AsyncCtx11 + 4 >> 2] = $5; //@line 4437
  HEAP32[$AsyncCtx11 + 8 >> 2] = $151; //@line 4439
  HEAP32[$AsyncCtx11 + 12 >> 2] = $150; //@line 4441
  HEAP32[$AsyncCtx11 + 16 >> 2] = $12; //@line 4443
  HEAP32[$AsyncCtx11 + 20 >> 2] = $181; //@line 4445
  HEAP32[$AsyncCtx11 + 24 >> 2] = $7; //@line 4447
  HEAP32[$AsyncCtx11 + 28 >> 2] = $6; //@line 4449
  HEAP32[$AsyncCtx11 + 32 >> 2] = $4; //@line 4451
  sp = STACKTOP; //@line 4452
  STACKTOP = sp; //@line 4453
  return 0; //@line 4453
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4455
 $AsyncCtx7 = _emscripten_alloc_async_context(36, sp) | 0; //@line 4456
 _mbedtls_platform_zeroize($5, 16); //@line 4457
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 591; //@line 4460
  HEAP32[$AsyncCtx7 + 4 >> 2] = $151; //@line 4462
  HEAP32[$AsyncCtx7 + 8 >> 2] = $150; //@line 4464
  HEAP32[$AsyncCtx7 + 12 >> 2] = $12; //@line 4466
  HEAP32[$AsyncCtx7 + 16 >> 2] = $181; //@line 4468
  HEAP32[$AsyncCtx7 + 20 >> 2] = $7; //@line 4470
  HEAP32[$AsyncCtx7 + 24 >> 2] = $6; //@line 4472
  HEAP32[$AsyncCtx7 + 28 >> 2] = $5; //@line 4474
  HEAP32[$AsyncCtx7 + 32 >> 2] = $4; //@line 4476
  sp = STACKTOP; //@line 4477
  STACKTOP = sp; //@line 4478
  return 0; //@line 4478
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4480
 HEAP32[$151 >> 2] = 0; //@line 4481
 $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4482
 _mbedtls_platform_zeroize($150, 16); //@line 4483
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 592; //@line 4486
  HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 4488
  HEAP32[$AsyncCtx3 + 8 >> 2] = $181; //@line 4490
  HEAP32[$AsyncCtx3 + 12 >> 2] = $7; //@line 4492
  HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 4494
  HEAP32[$AsyncCtx3 + 20 >> 2] = $5; //@line 4496
  HEAP32[$AsyncCtx3 + 24 >> 2] = $4; //@line 4498
  sp = STACKTOP; //@line 4499
  STACKTOP = sp; //@line 4500
  return 0; //@line 4500
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4502
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 4503
 _mbedtls_platform_zeroize($12, 16); //@line 4504
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 593; //@line 4507
  HEAP32[$AsyncCtx + 4 >> 2] = $181; //@line 4509
  HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 4511
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 4513
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4515
  HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 4517
  sp = STACKTOP; //@line 4518
  STACKTOP = sp; //@line 4519
  return 0; //@line 4519
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4521
 $$0 = $181; //@line 4522
 STACKTOP = sp; //@line 4523
 return $$0 | 0; //@line 4523
}
function _initialize__async_cb_207($0) {
 $0 = $0 | 0;
 var $$043 = 0, $$048 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3811
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3813
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3815
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3817
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3819
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 3820
 L2 : do {
  if (($8 | 0) < 32768) {
   if (($8 | 0) >= 128) {
    if (($8 | 0) < 2048) {
     switch ($8 | 0) {
     case 1024:
      {
       $$043 = 10; //@line 3830
       $$048 = $8; //@line 3830
       break L2;
       break;
      }
     case 512:
      {
       $$043 = 9; //@line 3835
       $$048 = $8; //@line 3835
       break L2;
       break;
      }
     case 256:
      {
       $$043 = 8; //@line 3840
       $$048 = $8; //@line 3840
       break L2;
       break;
      }
     case 128:
      {
       $$043 = 7; //@line 3845
       $$048 = $8; //@line 3845
       break L2;
       break;
      }
     default:
      {
       label = 43; //@line 3850
       break L2;
      }
     }
    }
    if (($8 | 0) < 8192) {
     switch ($8 | 0) {
     case 4096:
      {
       $$043 = 12; //@line 3859
       $$048 = $8; //@line 3859
       break L2;
       break;
      }
     case 2048:
      {
       $$043 = 11; //@line 3864
       $$048 = $8; //@line 3864
       break L2;
       break;
      }
     default:
      {
       label = 43; //@line 3869
       break L2;
      }
     }
    }
    if (($8 | 0) < 16384) {
     switch ($8 | 0) {
     case 8192:
      {
       break;
      }
     default:
      {
       label = 43; //@line 3881
       break L2;
      }
     }
     $$043 = 13; //@line 3885
     $$048 = $8; //@line 3885
     break;
    } else {
     switch ($8 | 0) {
     case 16384:
      {
       break;
      }
     default:
      {
       label = 43; //@line 3893
       break L2;
      }
     }
     $$043 = 14; //@line 3897
     $$048 = $8; //@line 3897
     break;
    }
   }
   if (($8 | 0) >= 8) {
    switch ($8 | 0) {
    case 64:
     {
      $$043 = 6; //@line 3905
      $$048 = $8; //@line 3905
      break L2;
      break;
     }
    case 32:
     {
      $$043 = 5; //@line 3910
      $$048 = $8; //@line 3910
      break L2;
      break;
     }
    case 16:
     {
      $$043 = 4; //@line 3915
      $$048 = $8; //@line 3915
      break L2;
      break;
     }
    case 8:
     {
      $$043 = 3; //@line 3920
      $$048 = $8; //@line 3920
      break L2;
      break;
     }
    default:
     {
      label = 43; //@line 3925
      break L2;
     }
    }
   }
   if (($8 | 0) >= 2) {
    switch ($8 | 0) {
    case 4:
     {
      $$043 = 2; //@line 3934
      $$048 = $8; //@line 3934
      break L2;
      break;
     }
    case 2:
     {
      $$043 = 1; //@line 3939
      $$048 = $8; //@line 3939
      break L2;
      break;
     }
    default:
     {
      label = 43; //@line 3944
      break L2;
     }
    }
   }
   if (($8 | 0) < 0) {
    switch ($8 | 0) {
    case -2147483648:
     {
      $$043 = 31; //@line 3953
      $$048 = -2147483648; //@line 3953
      break L2;
      break;
     }
    default:
     {
      label = 43; //@line 3958
      break L2;
     }
    }
   }
   switch ($8 | 0) {
   case 0:
    {
     break;
    }
   default:
    {
     label = 43; //@line 3968
     break L2;
    }
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 3972
   _mbed_assert_internal(14267, 14269, 41); //@line 3973
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 605; //@line 3976
    $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 3977
    HEAP32[$9 >> 2] = $AsyncRetVal; //@line 3978
    $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 3979
    HEAP32[$10 >> 2] = $2; //@line 3980
    $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 3981
    HEAP32[$11 >> 2] = $4; //@line 3982
    $12 = $ReallocAsyncCtx7 + 16 | 0; //@line 3983
    HEAP32[$12 >> 2] = $6; //@line 3984
    sp = STACKTOP; //@line 3985
    return;
   }
   ___async_unwind = 0; //@line 3988
   HEAP32[$ReallocAsyncCtx7 >> 2] = 605; //@line 3989
   $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 3990
   HEAP32[$9 >> 2] = $AsyncRetVal; //@line 3991
   $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 3992
   HEAP32[$10 >> 2] = $2; //@line 3993
   $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 3994
   HEAP32[$11 >> 2] = $4; //@line 3995
   $12 = $ReallocAsyncCtx7 + 16 | 0; //@line 3996
   HEAP32[$12 >> 2] = $6; //@line 3997
   sp = STACKTOP; //@line 3998
   return;
  } else {
   if (($8 | 0) < 8388608) {
    if (($8 | 0) < 524288) {
     if (($8 | 0) < 131072) {
      if (($8 | 0) < 65536) {
       switch ($8 | 0) {
       case 32768:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4014
         break L2;
        }
       }
       $$043 = 15; //@line 4018
       $$048 = $8; //@line 4018
       break;
      } else {
       switch ($8 | 0) {
       case 65536:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4026
         break L2;
        }
       }
       $$043 = 16; //@line 4030
       $$048 = $8; //@line 4030
       break;
      }
     } else {
      if (($8 | 0) < 262144) {
       switch ($8 | 0) {
       case 131072:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4041
         break L2;
        }
       }
       $$043 = 17; //@line 4045
       $$048 = $8; //@line 4045
       break;
      } else {
       switch ($8 | 0) {
       case 262144:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4053
         break L2;
        }
       }
       $$043 = 18; //@line 4057
       $$048 = $8; //@line 4057
       break;
      }
     }
    } else {
     if (($8 | 0) < 2097152) {
      if (($8 | 0) < 1048576) {
       switch ($8 | 0) {
       case 524288:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4071
         break L2;
        }
       }
       $$043 = 19; //@line 4075
       $$048 = $8; //@line 4075
       break;
      } else {
       switch ($8 | 0) {
       case 1048576:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4083
         break L2;
        }
       }
       $$043 = 20; //@line 4087
       $$048 = $8; //@line 4087
       break;
      }
     } else {
      if (($8 | 0) < 4194304) {
       switch ($8 | 0) {
       case 2097152:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4098
         break L2;
        }
       }
       $$043 = 21; //@line 4102
       $$048 = $8; //@line 4102
       break;
      } else {
       switch ($8 | 0) {
       case 4194304:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4110
         break L2;
        }
       }
       $$043 = 22; //@line 4114
       $$048 = $8; //@line 4114
       break;
      }
     }
    }
   } else {
    if (($8 | 0) < 134217728) {
     if (($8 | 0) < 33554432) {
      if (($8 | 0) < 16777216) {
       switch ($8 | 0) {
       case 8388608:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4131
         break L2;
        }
       }
       $$043 = 23; //@line 4135
       $$048 = $8; //@line 4135
       break;
      } else {
       switch ($8 | 0) {
       case 16777216:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4143
         break L2;
        }
       }
       $$043 = 24; //@line 4147
       $$048 = $8; //@line 4147
       break;
      }
     } else {
      if (($8 | 0) < 67108864) {
       switch ($8 | 0) {
       case 33554432:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4158
         break L2;
        }
       }
       $$043 = 25; //@line 4162
       $$048 = $8; //@line 4162
       break;
      } else {
       switch ($8 | 0) {
       case 67108864:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4170
         break L2;
        }
       }
       $$043 = 26; //@line 4174
       $$048 = $8; //@line 4174
       break;
      }
     }
    } else {
     if (($8 | 0) < 536870912) {
      if (($8 | 0) < 268435456) {
       switch ($8 | 0) {
       case 134217728:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4188
         break L2;
        }
       }
       $$043 = 27; //@line 4192
       $$048 = $8; //@line 4192
       break;
      } else {
       switch ($8 | 0) {
       case 268435456:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4200
         break L2;
        }
       }
       $$043 = 28; //@line 4204
       $$048 = $8; //@line 4204
       break;
      }
     } else {
      if (($8 | 0) < 1073741824) {
       switch ($8 | 0) {
       case 536870912:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4215
         break L2;
        }
       }
       $$043 = 29; //@line 4219
       $$048 = $8; //@line 4219
       break;
      } else {
       switch ($8 | 0) {
       case 1073741824:
        {
         break;
        }
       default:
        {
         label = 43; //@line 4227
         break L2;
        }
       }
       $$043 = 30; //@line 4231
       $$048 = $8; //@line 4231
       break;
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 43) {
  $$043 = 0; //@line 4240
  $$048 = $8; //@line 4240
 }
 $14 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 4243
 if (($14 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 4247
  _mbed_assert_internal(14267, 14269, 55); //@line 4248
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 606; //@line 4251
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 4252
   HEAP32[$16 >> 2] = $2; //@line 4253
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 4254
   HEAP32[$17 >> 2] = $$048; //@line 4255
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 4256
   HEAP8[$18 >> 0] = $$043; //@line 4257
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 4258
   HEAP32[$19 >> 2] = $4; //@line 4259
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 4260
   HEAP32[$20 >> 2] = $6; //@line 4261
   sp = STACKTOP; //@line 4262
   return;
  }
  ___async_unwind = 0; //@line 4265
  HEAP32[$ReallocAsyncCtx6 >> 2] = 606; //@line 4266
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 4267
  HEAP32[$16 >> 2] = $2; //@line 4268
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 4269
  HEAP32[$17 >> 2] = $$048; //@line 4270
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 4271
  HEAP8[$18 >> 0] = $$043; //@line 4272
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 4273
  HEAP32[$19 >> 2] = $4; //@line 4274
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 4275
  HEAP32[$20 >> 2] = $6; //@line 4276
  sp = STACKTOP; //@line 4277
  return;
 } else {
  $22 = 7 << $14 + -4; //@line 4281
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 4282
  $24 = tempRet0; //@line 4283
  $25 = _i64Add($$048 | 0, 0, -1, -1) | 0; //@line 4284
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 4286
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $$048 | 0, 0) | 0; //@line 4288
  $30 = tempRet0; //@line 4289
  $31 = HEAP32[$2 >> 2] | 0; //@line 4290
  HEAP32[$31 >> 2] = 0; //@line 4291
  HEAP32[$31 + 4 >> 2] = 0; //@line 4293
  $35 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 4296
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 4297
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 4298
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 4301
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 4302
   HEAP32[$37 >> 2] = $2; //@line 4303
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 4304
   HEAP32[$38 >> 2] = $$048; //@line 4305
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 4306
   HEAP8[$39 >> 0] = $$043; //@line 4307
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 4308
   HEAP32[$40 >> 2] = $14; //@line 4309
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 4310
   HEAP32[$41 >> 2] = $22; //@line 4311
   $42 = $ReallocAsyncCtx3 + 24 | 0; //@line 4312
   $43 = $42; //@line 4313
   $44 = $43; //@line 4314
   HEAP32[$44 >> 2] = $29; //@line 4315
   $45 = $43 + 4 | 0; //@line 4316
   $46 = $45; //@line 4317
   HEAP32[$46 >> 2] = $30; //@line 4318
   $47 = $ReallocAsyncCtx3 + 32 | 0; //@line 4319
   HEAP32[$47 >> 2] = $4; //@line 4320
   $48 = $ReallocAsyncCtx3 + 36 | 0; //@line 4321
   HEAP32[$48 >> 2] = $6; //@line 4322
   sp = STACKTOP; //@line 4323
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 4327
  ___async_unwind = 0; //@line 4328
  HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 4329
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 4330
  HEAP32[$37 >> 2] = $2; //@line 4331
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 4332
  HEAP32[$38 >> 2] = $$048; //@line 4333
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 4334
  HEAP8[$39 >> 0] = $$043; //@line 4335
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 4336
  HEAP32[$40 >> 2] = $14; //@line 4337
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 4338
  HEAP32[$41 >> 2] = $22; //@line 4339
  $42 = $ReallocAsyncCtx3 + 24 | 0; //@line 4340
  $43 = $42; //@line 4341
  $44 = $43; //@line 4342
  HEAP32[$44 >> 2] = $29; //@line 4343
  $45 = $43 + 4 | 0; //@line 4344
  $46 = $45; //@line 4345
  HEAP32[$46 >> 2] = $30; //@line 4346
  $47 = $ReallocAsyncCtx3 + 32 | 0; //@line 4347
  HEAP32[$47 >> 2] = $4; //@line 4348
  $48 = $ReallocAsyncCtx3 + 36 | 0; //@line 4349
  HEAP32[$48 >> 2] = $6; //@line 4350
  sp = STACKTOP; //@line 4351
  return;
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $115 = 0, $12 = 0, $120 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23023
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23025
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23027
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23029
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23031
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23033
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23035
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23037
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23039
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23041
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23043
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23045
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23047
 HEAP8[$6 + 2900 >> 0] = 0; //@line 23049
 HEAP8[$6 + 2898 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 14 >> 0] | 0; //@line 23054
 HEAP16[$6 + 2896 >> 1] = HEAP16[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 24 >> 1] | 0; //@line 23059
 HEAP8[$6 + 2899 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 26 >> 0] | 0; //@line 23064
 if (HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac25post_process_mlme_requestEv($2); //@line 23069
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 23070
  __ZN12LoRaWANStack20mlme_confirm_handlerEv($6); //@line 23071
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 277; //@line 23074
   $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 23075
   HEAP32[$41 >> 2] = $2; //@line 23076
   $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 23077
   HEAP32[$42 >> 2] = $4; //@line 23078
   $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 23079
   HEAP32[$43 >> 2] = $6; //@line 23080
   $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 23081
   HEAP32[$44 >> 2] = $8; //@line 23082
   $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 23083
   HEAP32[$45 >> 2] = $10; //@line 23084
   $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 23085
   HEAP32[$46 >> 2] = $12; //@line 23086
   $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 23087
   HEAP32[$47 >> 2] = $14; //@line 23088
   $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 23089
   HEAP32[$48 >> 2] = $16; //@line 23090
   $49 = $ReallocAsyncCtx3 + 36 | 0; //@line 23091
   HEAP32[$49 >> 2] = $18; //@line 23092
   $50 = $ReallocAsyncCtx3 + 40 | 0; //@line 23093
   HEAP32[$50 >> 2] = $20; //@line 23094
   $51 = $ReallocAsyncCtx3 + 44 | 0; //@line 23095
   HEAP32[$51 >> 2] = $22; //@line 23096
   $52 = $ReallocAsyncCtx3 + 48 | 0; //@line 23097
   HEAP32[$52 >> 2] = $24; //@line 23098
   sp = STACKTOP; //@line 23099
   return;
  }
  ___async_unwind = 0; //@line 23102
  HEAP32[$ReallocAsyncCtx3 >> 2] = 277; //@line 23103
  $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 23104
  HEAP32[$41 >> 2] = $2; //@line 23105
  $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 23106
  HEAP32[$42 >> 2] = $4; //@line 23107
  $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 23108
  HEAP32[$43 >> 2] = $6; //@line 23109
  $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 23110
  HEAP32[$44 >> 2] = $8; //@line 23111
  $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 23112
  HEAP32[$45 >> 2] = $10; //@line 23113
  $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 23114
  HEAP32[$46 >> 2] = $12; //@line 23115
  $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 23116
  HEAP32[$47 >> 2] = $14; //@line 23117
  $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 23118
  HEAP32[$48 >> 2] = $16; //@line 23119
  $49 = $ReallocAsyncCtx3 + 36 | 0; //@line 23120
  HEAP32[$49 >> 2] = $18; //@line 23121
  $50 = $ReallocAsyncCtx3 + 40 | 0; //@line 23122
  HEAP32[$50 >> 2] = $20; //@line 23123
  $51 = $ReallocAsyncCtx3 + 44 | 0; //@line 23124
  HEAP32[$51 >> 2] = $22; //@line 23125
  $52 = $ReallocAsyncCtx3 + 48 | 0; //@line 23126
  HEAP32[$52 >> 2] = $24; //@line 23127
  sp = STACKTOP; //@line 23128
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  return;
 }
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) != 1) {
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 23139
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 16; //@line 23142
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 23143
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 23144
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 280; //@line 23147
   $90 = $ReallocAsyncCtx5 + 4 | 0; //@line 23148
   HEAP32[$90 >> 2] = $2; //@line 23149
   $91 = $ReallocAsyncCtx5 + 8 | 0; //@line 23150
   HEAP32[$91 >> 2] = $4; //@line 23151
   $92 = $ReallocAsyncCtx5 + 12 | 0; //@line 23152
   HEAP32[$92 >> 2] = $6; //@line 23153
   $93 = $ReallocAsyncCtx5 + 16 | 0; //@line 23154
   HEAP32[$93 >> 2] = $16; //@line 23155
   $94 = $ReallocAsyncCtx5 + 20 | 0; //@line 23156
   HEAP32[$94 >> 2] = $18; //@line 23157
   $95 = $ReallocAsyncCtx5 + 24 | 0; //@line 23158
   HEAP32[$95 >> 2] = $20; //@line 23159
   $96 = $ReallocAsyncCtx5 + 28 | 0; //@line 23160
   HEAP32[$96 >> 2] = $22; //@line 23161
   $97 = $ReallocAsyncCtx5 + 32 | 0; //@line 23162
   HEAP32[$97 >> 2] = $24; //@line 23163
   sp = STACKTOP; //@line 23164
   return;
  }
  ___async_unwind = 0; //@line 23167
  HEAP32[$ReallocAsyncCtx5 >> 2] = 280; //@line 23168
  $90 = $ReallocAsyncCtx5 + 4 | 0; //@line 23169
  HEAP32[$90 >> 2] = $2; //@line 23170
  $91 = $ReallocAsyncCtx5 + 8 | 0; //@line 23171
  HEAP32[$91 >> 2] = $4; //@line 23172
  $92 = $ReallocAsyncCtx5 + 12 | 0; //@line 23173
  HEAP32[$92 >> 2] = $6; //@line 23174
  $93 = $ReallocAsyncCtx5 + 16 | 0; //@line 23175
  HEAP32[$93 >> 2] = $16; //@line 23176
  $94 = $ReallocAsyncCtx5 + 20 | 0; //@line 23177
  HEAP32[$94 >> 2] = $18; //@line 23178
  $95 = $ReallocAsyncCtx5 + 24 | 0; //@line 23179
  HEAP32[$95 >> 2] = $20; //@line 23180
  $96 = $ReallocAsyncCtx5 + 28 | 0; //@line 23181
  HEAP32[$96 >> 2] = $22; //@line 23182
  $97 = $ReallocAsyncCtx5 + 32 | 0; //@line 23183
  HEAP32[$97 >> 2] = $24; //@line 23184
  sp = STACKTOP; //@line 23185
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 32 >> 0] | 0) {
  HEAP32[$12 >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) + 11 >> 0]; //@line 23197
  _mbed_tracef(16, 11997, 12208, $12); //@line 23198
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 23199
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & -18 | 16; //@line 23203
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 23204
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 23205
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 278; //@line 23208
   $68 = $ReallocAsyncCtx7 + 4 | 0; //@line 23209
   HEAP32[$68 >> 2] = $2; //@line 23210
   $69 = $ReallocAsyncCtx7 + 8 | 0; //@line 23211
   HEAP32[$69 >> 2] = $4; //@line 23212
   $70 = $ReallocAsyncCtx7 + 12 | 0; //@line 23213
   HEAP32[$70 >> 2] = $6; //@line 23214
   $71 = $ReallocAsyncCtx7 + 16 | 0; //@line 23215
   HEAP32[$71 >> 2] = $16; //@line 23216
   $72 = $ReallocAsyncCtx7 + 20 | 0; //@line 23217
   HEAP32[$72 >> 2] = $18; //@line 23218
   $73 = $ReallocAsyncCtx7 + 24 | 0; //@line 23219
   HEAP32[$73 >> 2] = $20; //@line 23220
   $74 = $ReallocAsyncCtx7 + 28 | 0; //@line 23221
   HEAP32[$74 >> 2] = $22; //@line 23222
   $75 = $ReallocAsyncCtx7 + 32 | 0; //@line 23223
   HEAP32[$75 >> 2] = $24; //@line 23224
   sp = STACKTOP; //@line 23225
   return;
  }
  ___async_unwind = 0; //@line 23228
  HEAP32[$ReallocAsyncCtx7 >> 2] = 278; //@line 23229
  $68 = $ReallocAsyncCtx7 + 4 | 0; //@line 23230
  HEAP32[$68 >> 2] = $2; //@line 23231
  $69 = $ReallocAsyncCtx7 + 8 | 0; //@line 23232
  HEAP32[$69 >> 2] = $4; //@line 23233
  $70 = $ReallocAsyncCtx7 + 12 | 0; //@line 23234
  HEAP32[$70 >> 2] = $6; //@line 23235
  $71 = $ReallocAsyncCtx7 + 16 | 0; //@line 23236
  HEAP32[$71 >> 2] = $16; //@line 23237
  $72 = $ReallocAsyncCtx7 + 20 | 0; //@line 23238
  HEAP32[$72 >> 2] = $18; //@line 23239
  $73 = $ReallocAsyncCtx7 + 24 | 0; //@line 23240
  HEAP32[$73 >> 2] = $20; //@line 23241
  $74 = $ReallocAsyncCtx7 + 28 | 0; //@line 23242
  HEAP32[$74 >> 2] = $22; //@line 23243
  $75 = $ReallocAsyncCtx7 + 32 | 0; //@line 23244
  HEAP32[$75 >> 2] = $24; //@line 23245
  sp = STACKTOP; //@line 23246
  return;
 }
 if (!(__ZN7LoRaMac24continue_sending_processEv($2) | 0)) {
  _mbed_tracef(2, 11997, 12002, $8); //@line 23251
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & -18 | 1; //@line 23255
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 23256
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 23257
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 279; //@line 23260
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 23261
   HEAP32[$80 >> 2] = $2; //@line 23262
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 23263
   HEAP32[$81 >> 2] = $4; //@line 23264
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 23265
   HEAP32[$82 >> 2] = $6; //@line 23266
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 23267
   HEAP32[$83 >> 2] = $16; //@line 23268
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 23269
   HEAP32[$84 >> 2] = $18; //@line 23270
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 23271
   HEAP32[$85 >> 2] = $20; //@line 23272
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 23273
   HEAP32[$86 >> 2] = $22; //@line 23274
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 23275
   HEAP32[$87 >> 2] = $24; //@line 23276
   sp = STACKTOP; //@line 23277
   return;
  }
  ___async_unwind = 0; //@line 23280
  HEAP32[$ReallocAsyncCtx6 >> 2] = 279; //@line 23281
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 23282
  HEAP32[$80 >> 2] = $2; //@line 23283
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 23284
  HEAP32[$81 >> 2] = $4; //@line 23285
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 23286
  HEAP32[$82 >> 2] = $6; //@line 23287
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 23288
  HEAP32[$83 >> 2] = $16; //@line 23289
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 23290
  HEAP32[$84 >> 2] = $18; //@line 23291
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 23292
  HEAP32[$85 >> 2] = $20; //@line 23293
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 23294
  HEAP32[$86 >> 2] = $22; //@line 23295
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 23296
  HEAP32[$87 >> 2] = $24; //@line 23297
  sp = STACKTOP; //@line 23298
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 23305
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 23308
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 23309
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 23310
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 23313
   $103 = $ReallocAsyncCtx4 + 4 | 0; //@line 23314
   HEAP32[$103 >> 2] = $4; //@line 23315
   $104 = $ReallocAsyncCtx4 + 8 | 0; //@line 23316
   HEAP32[$104 >> 2] = $2; //@line 23317
   $105 = $ReallocAsyncCtx4 + 12 | 0; //@line 23318
   HEAP32[$105 >> 2] = $16; //@line 23319
   $106 = $ReallocAsyncCtx4 + 16 | 0; //@line 23320
   HEAP32[$106 >> 2] = $6; //@line 23321
   $107 = $ReallocAsyncCtx4 + 20 | 0; //@line 23322
   HEAP32[$107 >> 2] = $18; //@line 23323
   $108 = $ReallocAsyncCtx4 + 24 | 0; //@line 23324
   HEAP32[$108 >> 2] = $20; //@line 23325
   $109 = $ReallocAsyncCtx4 + 28 | 0; //@line 23326
   HEAP32[$109 >> 2] = $22; //@line 23327
   $110 = $ReallocAsyncCtx4 + 32 | 0; //@line 23328
   HEAP32[$110 >> 2] = $24; //@line 23329
   sp = STACKTOP; //@line 23330
   return;
  }
  ___async_unwind = 0; //@line 23333
  HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 23334
  $103 = $ReallocAsyncCtx4 + 4 | 0; //@line 23335
  HEAP32[$103 >> 2] = $4; //@line 23336
  $104 = $ReallocAsyncCtx4 + 8 | 0; //@line 23337
  HEAP32[$104 >> 2] = $2; //@line 23338
  $105 = $ReallocAsyncCtx4 + 12 | 0; //@line 23339
  HEAP32[$105 >> 2] = $16; //@line 23340
  $106 = $ReallocAsyncCtx4 + 16 | 0; //@line 23341
  HEAP32[$106 >> 2] = $6; //@line 23342
  $107 = $ReallocAsyncCtx4 + 20 | 0; //@line 23343
  HEAP32[$107 >> 2] = $18; //@line 23344
  $108 = $ReallocAsyncCtx4 + 24 | 0; //@line 23345
  HEAP32[$108 >> 2] = $20; //@line 23346
  $109 = $ReallocAsyncCtx4 + 28 | 0; //@line 23347
  HEAP32[$109 >> 2] = $22; //@line 23348
  $110 = $ReallocAsyncCtx4 + 32 | 0; //@line 23349
  HEAP32[$110 >> 2] = $24; //@line 23350
  sp = STACKTOP; //@line 23351
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $115 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 23359
  HEAP32[$16 >> 2] = $115 ? 5 : 2; //@line 23361
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 23369
  return;
 }
 _mbed_tracef(16, 11997, 12228, $18); //@line 23372
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 23373
 _mbed_tracef(16, 11997, 12252, $22); //@line 23374
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23375
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 23376
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 23379
  $120 = $ReallocAsyncCtx2 + 4 | 0; //@line 23380
  HEAP32[$120 >> 2] = $6; //@line 23381
  sp = STACKTOP; //@line 23382
  return;
 }
 ___async_unwind = 0; //@line 23385
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 23386
 $120 = $ReallocAsyncCtx2 + 4 | 0; //@line 23387
 HEAP32[$120 >> 2] = $6; //@line 23388
 sp = STACKTOP; //@line 23389
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_46($0) {
 $0 = $0 | 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $58 = 0, $59 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21141
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21143
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21145
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21149
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21153
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21155
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21157
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21159
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21161
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21163
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21165
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21167
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21169
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21171
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21173
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21175
 $36 = (HEAP8[$0 + 12 >> 0] | 0) + 1 << 24 >> 24; //@line 21176
 if (($36 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 $43 = (HEAPU8[$0 + 20 >> 0] | 0) + 3 & 255; //@line 21184
 if (((HEAPU8[$12 >> 0] | 0) + (HEAPU8[$26 >> 0] | 0) | 0) >>> 0 > ($36 & 255) >>> 0) {
  $42 = $43 & 255; //@line 21193
  $58 = HEAPU8[$34 + ($42 + 2) >> 0] << 16 | (HEAPU8[$34 + ($42 + 1) >> 0] << 8 | HEAPU8[$34 + $42 >> 0]); //@line 21208
  $59 = $58 * 100 | 0; //@line 21209
  HEAP32[$28 >> 2] = $59; //@line 21210
  HEAP32[$32 >> 2] = 0; //@line 21211
  if ($58 | 0) {
   if (!(HEAP8[$16 >> 0] | 0)) {
    HEAP8[$20 >> 0] = -1; //@line 21218
    $91 = HEAP32[(HEAP32[$22 >> 2] | 0) + 60 >> 2] | 0; //@line 21221
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(72) | 0; //@line 21222
    FUNCTION_TABLE_iiii[$91 & 31]($4, $24, $36) | 0; //@line 21223
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 21226
     $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 21227
     HEAP32[$92 >> 2] = $2; //@line 21228
     $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 21229
     HEAP32[$93 >> 2] = $4; //@line 21230
     $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 21231
     HEAP8[$94 >> 0] = $36; //@line 21232
     $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 21233
     HEAP32[$95 >> 2] = $8; //@line 21234
     $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 21235
     HEAP8[$96 >> 0] = $43; //@line 21236
     $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 21237
     HEAP32[$97 >> 2] = $12; //@line 21238
     $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 21239
     HEAP32[$98 >> 2] = $14; //@line 21240
     $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 21241
     HEAP32[$99 >> 2] = $16; //@line 21242
     $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 21243
     HEAP32[$100 >> 2] = $18; //@line 21244
     $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 21245
     HEAP32[$101 >> 2] = $20; //@line 21246
     $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 21247
     HEAP32[$102 >> 2] = $22; //@line 21248
     $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 21249
     HEAP32[$103 >> 2] = $24; //@line 21250
     $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 21251
     HEAP32[$104 >> 2] = $26; //@line 21252
     $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 21253
     HEAP32[$105 >> 2] = $28; //@line 21254
     $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 21255
     HEAP32[$106 >> 2] = $30; //@line 21256
     $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 21257
     HEAP32[$107 >> 2] = $32; //@line 21258
     $108 = $ReallocAsyncCtx2 + 68 | 0; //@line 21259
     HEAP32[$108 >> 2] = $34; //@line 21260
     sp = STACKTOP; //@line 21261
     return;
    }
    ___async_unwind = 0; //@line 21264
    HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 21265
    $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 21266
    HEAP32[$92 >> 2] = $2; //@line 21267
    $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 21268
    HEAP32[$93 >> 2] = $4; //@line 21269
    $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 21270
    HEAP8[$94 >> 0] = $36; //@line 21271
    $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 21272
    HEAP32[$95 >> 2] = $8; //@line 21273
    $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 21274
    HEAP8[$96 >> 0] = $43; //@line 21275
    $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 21276
    HEAP32[$97 >> 2] = $12; //@line 21277
    $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 21278
    HEAP32[$98 >> 2] = $14; //@line 21279
    $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 21280
    HEAP32[$99 >> 2] = $16; //@line 21281
    $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 21282
    HEAP32[$100 >> 2] = $18; //@line 21283
    $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 21284
    HEAP32[$101 >> 2] = $20; //@line 21285
    $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 21286
    HEAP32[$102 >> 2] = $22; //@line 21287
    $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 21288
    HEAP32[$103 >> 2] = $24; //@line 21289
    $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 21290
    HEAP32[$104 >> 2] = $26; //@line 21291
    $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 21292
    HEAP32[$105 >> 2] = $28; //@line 21293
    $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 21294
    HEAP32[$106 >> 2] = $30; //@line 21295
    $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 21296
    HEAP32[$107 >> 2] = $32; //@line 21297
    $108 = $ReallocAsyncCtx2 + 68 | 0; //@line 21298
    HEAP32[$108 >> 2] = $34; //@line 21299
    sp = STACKTOP; //@line 21300
    return;
   } else {
    $65 = HEAP32[(HEAP32[$18 >> 2] | 0) + 76 >> 2] | 0; //@line 21305
    $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 21307
    $67 = FUNCTION_TABLE_iiii[$65 & 31]($4, $59, 0) | 0; //@line 21308
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 499; //@line 21311
     $68 = $ReallocAsyncCtx + 4 | 0; //@line 21312
     HEAP32[$68 >> 2] = $2; //@line 21313
     $69 = $ReallocAsyncCtx + 8 | 0; //@line 21314
     HEAP32[$69 >> 2] = $4; //@line 21315
     $70 = $ReallocAsyncCtx + 12 | 0; //@line 21316
     HEAP8[$70 >> 0] = $36; //@line 21317
     $71 = $ReallocAsyncCtx + 16 | 0; //@line 21318
     HEAP32[$71 >> 2] = $8; //@line 21319
     $72 = $ReallocAsyncCtx + 20 | 0; //@line 21320
     HEAP8[$72 >> 0] = $43; //@line 21321
     $73 = $ReallocAsyncCtx + 24 | 0; //@line 21322
     HEAP32[$73 >> 2] = $12; //@line 21323
     $74 = $ReallocAsyncCtx + 28 | 0; //@line 21324
     HEAP32[$74 >> 2] = $14; //@line 21325
     $75 = $ReallocAsyncCtx + 32 | 0; //@line 21326
     HEAP32[$75 >> 2] = $16; //@line 21327
     $76 = $ReallocAsyncCtx + 36 | 0; //@line 21328
     HEAP32[$76 >> 2] = $18; //@line 21329
     $77 = $ReallocAsyncCtx + 40 | 0; //@line 21330
     HEAP32[$77 >> 2] = $59; //@line 21331
     $78 = $ReallocAsyncCtx + 44 | 0; //@line 21332
     HEAP32[$78 >> 2] = 0; //@line 21333
     $79 = $ReallocAsyncCtx + 48 | 0; //@line 21334
     HEAP32[$79 >> 2] = $20; //@line 21335
     $80 = $ReallocAsyncCtx + 52 | 0; //@line 21336
     HEAP32[$80 >> 2] = $22; //@line 21337
     $81 = $ReallocAsyncCtx + 56 | 0; //@line 21338
     HEAP32[$81 >> 2] = $24; //@line 21339
     $82 = $ReallocAsyncCtx + 60 | 0; //@line 21340
     HEAP32[$82 >> 2] = $26; //@line 21341
     $83 = $ReallocAsyncCtx + 64 | 0; //@line 21342
     HEAP32[$83 >> 2] = $28; //@line 21343
     $84 = $ReallocAsyncCtx + 68 | 0; //@line 21344
     HEAP32[$84 >> 2] = $30; //@line 21345
     $85 = $ReallocAsyncCtx + 72 | 0; //@line 21346
     HEAP32[$85 >> 2] = $32; //@line 21347
     $86 = $ReallocAsyncCtx + 76 | 0; //@line 21348
     HEAP32[$86 >> 2] = $34; //@line 21349
     sp = STACKTOP; //@line 21350
     return;
    }
    HEAP8[___async_retval >> 0] = $67 & 1; //@line 21355
    ___async_unwind = 0; //@line 21356
    HEAP32[$ReallocAsyncCtx >> 2] = 499; //@line 21357
    $68 = $ReallocAsyncCtx + 4 | 0; //@line 21358
    HEAP32[$68 >> 2] = $2; //@line 21359
    $69 = $ReallocAsyncCtx + 8 | 0; //@line 21360
    HEAP32[$69 >> 2] = $4; //@line 21361
    $70 = $ReallocAsyncCtx + 12 | 0; //@line 21362
    HEAP8[$70 >> 0] = $36; //@line 21363
    $71 = $ReallocAsyncCtx + 16 | 0; //@line 21364
    HEAP32[$71 >> 2] = $8; //@line 21365
    $72 = $ReallocAsyncCtx + 20 | 0; //@line 21366
    HEAP8[$72 >> 0] = $43; //@line 21367
    $73 = $ReallocAsyncCtx + 24 | 0; //@line 21368
    HEAP32[$73 >> 2] = $12; //@line 21369
    $74 = $ReallocAsyncCtx + 28 | 0; //@line 21370
    HEAP32[$74 >> 2] = $14; //@line 21371
    $75 = $ReallocAsyncCtx + 32 | 0; //@line 21372
    HEAP32[$75 >> 2] = $16; //@line 21373
    $76 = $ReallocAsyncCtx + 36 | 0; //@line 21374
    HEAP32[$76 >> 2] = $18; //@line 21375
    $77 = $ReallocAsyncCtx + 40 | 0; //@line 21376
    HEAP32[$77 >> 2] = $59; //@line 21377
    $78 = $ReallocAsyncCtx + 44 | 0; //@line 21378
    HEAP32[$78 >> 2] = 0; //@line 21379
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 21380
    HEAP32[$79 >> 2] = $20; //@line 21381
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 21382
    HEAP32[$80 >> 2] = $22; //@line 21383
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 21384
    HEAP32[$81 >> 2] = $24; //@line 21385
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 21386
    HEAP32[$82 >> 2] = $26; //@line 21387
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 21388
    HEAP32[$83 >> 2] = $28; //@line 21389
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 21390
    HEAP32[$84 >> 2] = $30; //@line 21391
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 21392
    HEAP32[$85 >> 2] = $32; //@line 21393
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 21394
    HEAP32[$86 >> 2] = $34; //@line 21395
    sp = STACKTOP; //@line 21396
    return;
   }
  }
 } else {
  HEAP32[$28 >> 2] = 0; //@line 21401
  HEAP8[$30 >> 0] = 0; //@line 21402
  HEAP32[$32 >> 2] = 0; //@line 21403
 }
 $111 = HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] | 0; //@line 21407
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 21408
 FUNCTION_TABLE_iii[$111 & 31]($4, $36) | 0; //@line 21409
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 501; //@line 21412
  $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 21413
  HEAP32[$112 >> 2] = $2; //@line 21414
  $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 21415
  HEAP32[$113 >> 2] = $4; //@line 21416
  $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 21417
  HEAP32[$114 >> 2] = $8; //@line 21418
  $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 21419
  HEAP32[$115 >> 2] = $12; //@line 21420
  $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 21421
  HEAP32[$116 >> 2] = $14; //@line 21422
  $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 21423
  HEAP32[$117 >> 2] = $16; //@line 21424
  $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 21425
  HEAP32[$118 >> 2] = $18; //@line 21426
  $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 21427
  HEAP32[$119 >> 2] = $20; //@line 21428
  $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 21429
  HEAP32[$120 >> 2] = $22; //@line 21430
  $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 21431
  HEAP32[$121 >> 2] = $24; //@line 21432
  $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 21433
  HEAP32[$122 >> 2] = $26; //@line 21434
  $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 21435
  HEAP32[$123 >> 2] = $28; //@line 21436
  $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 21437
  HEAP32[$124 >> 2] = $30; //@line 21438
  $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 21439
  HEAP32[$125 >> 2] = $32; //@line 21440
  $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 21441
  HEAP32[$126 >> 2] = $34; //@line 21442
  $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 21443
  HEAP8[$127 >> 0] = $36; //@line 21444
  $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 21445
  HEAP8[$128 >> 0] = $43; //@line 21446
  sp = STACKTOP; //@line 21447
  return;
 }
 ___async_unwind = 0; //@line 21450
 HEAP32[$ReallocAsyncCtx3 >> 2] = 501; //@line 21451
 $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 21452
 HEAP32[$112 >> 2] = $2; //@line 21453
 $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 21454
 HEAP32[$113 >> 2] = $4; //@line 21455
 $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 21456
 HEAP32[$114 >> 2] = $8; //@line 21457
 $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 21458
 HEAP32[$115 >> 2] = $12; //@line 21459
 $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 21460
 HEAP32[$116 >> 2] = $14; //@line 21461
 $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 21462
 HEAP32[$117 >> 2] = $16; //@line 21463
 $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 21464
 HEAP32[$118 >> 2] = $18; //@line 21465
 $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 21466
 HEAP32[$119 >> 2] = $20; //@line 21467
 $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 21468
 HEAP32[$120 >> 2] = $22; //@line 21469
 $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 21470
 HEAP32[$121 >> 2] = $24; //@line 21471
 $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 21472
 HEAP32[$122 >> 2] = $26; //@line 21473
 $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 21474
 HEAP32[$123 >> 2] = $28; //@line 21475
 $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 21476
 HEAP32[$124 >> 2] = $30; //@line 21477
 $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 21478
 HEAP32[$125 >> 2] = $32; //@line 21479
 $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 21480
 HEAP32[$126 >> 2] = $34; //@line 21481
 $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 21482
 HEAP8[$127 >> 0] = $36; //@line 21483
 $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 21484
 HEAP8[$128 >> 0] = $43; //@line 21485
 sp = STACKTOP; //@line 21486
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_47($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21499
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21501
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21503
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21505
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21507
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21509
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21511
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21513
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21515
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21517
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21519
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21521
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21523
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21525
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21527
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21529
 $36 = (HEAP8[$0 + 64 >> 0] | 0) + 1 << 24 >> 24; //@line 21534
 if (($36 & 255) >= (HEAPU8[$6 >> 0] | 0)) {
  return;
 }
 $43 = (HEAPU8[$0 + 65 >> 0] | 0) + 3 & 255; //@line 21542
 if (((HEAPU8[$8 >> 0] | 0) + (HEAPU8[$22 >> 0] | 0) | 0) >>> 0 > ($36 & 255) >>> 0) {
  $42 = $43 & 255; //@line 21551
  $58 = HEAPU8[$30 + ($42 + 2) >> 0] << 16 | (HEAPU8[$30 + ($42 + 1) >> 0] << 8 | HEAPU8[$30 + $42 >> 0]); //@line 21566
  $59 = $58 * 100 | 0; //@line 21567
  HEAP32[$24 >> 2] = $59; //@line 21568
  HEAP32[$28 >> 2] = 0; //@line 21569
  if ($58 | 0) {
   if (!(HEAP8[$12 >> 0] | 0)) {
    HEAP8[$16 >> 0] = -1; //@line 21576
    $91 = HEAP32[(HEAP32[$18 >> 2] | 0) + 60 >> 2] | 0; //@line 21579
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(72) | 0; //@line 21580
    FUNCTION_TABLE_iiii[$91 & 31]($4, $20, $36) | 0; //@line 21581
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 21584
     $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 21585
     HEAP32[$92 >> 2] = $2; //@line 21586
     $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 21587
     HEAP32[$93 >> 2] = $4; //@line 21588
     $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 21589
     HEAP8[$94 >> 0] = $36; //@line 21590
     $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 21591
     HEAP32[$95 >> 2] = $6; //@line 21592
     $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 21593
     HEAP8[$96 >> 0] = $43; //@line 21594
     $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 21595
     HEAP32[$97 >> 2] = $8; //@line 21596
     $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 21597
     HEAP32[$98 >> 2] = $10; //@line 21598
     $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 21599
     HEAP32[$99 >> 2] = $12; //@line 21600
     $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 21601
     HEAP32[$100 >> 2] = $14; //@line 21602
     $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 21603
     HEAP32[$101 >> 2] = $16; //@line 21604
     $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 21605
     HEAP32[$102 >> 2] = $18; //@line 21606
     $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 21607
     HEAP32[$103 >> 2] = $20; //@line 21608
     $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 21609
     HEAP32[$104 >> 2] = $22; //@line 21610
     $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 21611
     HEAP32[$105 >> 2] = $24; //@line 21612
     $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 21613
     HEAP32[$106 >> 2] = $26; //@line 21614
     $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 21615
     HEAP32[$107 >> 2] = $28; //@line 21616
     $108 = $ReallocAsyncCtx2 + 68 | 0; //@line 21617
     HEAP32[$108 >> 2] = $30; //@line 21618
     sp = STACKTOP; //@line 21619
     return;
    }
    ___async_unwind = 0; //@line 21622
    HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 21623
    $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 21624
    HEAP32[$92 >> 2] = $2; //@line 21625
    $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 21626
    HEAP32[$93 >> 2] = $4; //@line 21627
    $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 21628
    HEAP8[$94 >> 0] = $36; //@line 21629
    $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 21630
    HEAP32[$95 >> 2] = $6; //@line 21631
    $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 21632
    HEAP8[$96 >> 0] = $43; //@line 21633
    $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 21634
    HEAP32[$97 >> 2] = $8; //@line 21635
    $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 21636
    HEAP32[$98 >> 2] = $10; //@line 21637
    $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 21638
    HEAP32[$99 >> 2] = $12; //@line 21639
    $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 21640
    HEAP32[$100 >> 2] = $14; //@line 21641
    $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 21642
    HEAP32[$101 >> 2] = $16; //@line 21643
    $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 21644
    HEAP32[$102 >> 2] = $18; //@line 21645
    $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 21646
    HEAP32[$103 >> 2] = $20; //@line 21647
    $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 21648
    HEAP32[$104 >> 2] = $22; //@line 21649
    $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 21650
    HEAP32[$105 >> 2] = $24; //@line 21651
    $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 21652
    HEAP32[$106 >> 2] = $26; //@line 21653
    $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 21654
    HEAP32[$107 >> 2] = $28; //@line 21655
    $108 = $ReallocAsyncCtx2 + 68 | 0; //@line 21656
    HEAP32[$108 >> 2] = $30; //@line 21657
    sp = STACKTOP; //@line 21658
    return;
   } else {
    $65 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 21663
    $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 21665
    $67 = FUNCTION_TABLE_iiii[$65 & 31]($4, $59, 0) | 0; //@line 21666
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 499; //@line 21669
     $68 = $ReallocAsyncCtx + 4 | 0; //@line 21670
     HEAP32[$68 >> 2] = $2; //@line 21671
     $69 = $ReallocAsyncCtx + 8 | 0; //@line 21672
     HEAP32[$69 >> 2] = $4; //@line 21673
     $70 = $ReallocAsyncCtx + 12 | 0; //@line 21674
     HEAP8[$70 >> 0] = $36; //@line 21675
     $71 = $ReallocAsyncCtx + 16 | 0; //@line 21676
     HEAP32[$71 >> 2] = $6; //@line 21677
     $72 = $ReallocAsyncCtx + 20 | 0; //@line 21678
     HEAP8[$72 >> 0] = $43; //@line 21679
     $73 = $ReallocAsyncCtx + 24 | 0; //@line 21680
     HEAP32[$73 >> 2] = $8; //@line 21681
     $74 = $ReallocAsyncCtx + 28 | 0; //@line 21682
     HEAP32[$74 >> 2] = $10; //@line 21683
     $75 = $ReallocAsyncCtx + 32 | 0; //@line 21684
     HEAP32[$75 >> 2] = $12; //@line 21685
     $76 = $ReallocAsyncCtx + 36 | 0; //@line 21686
     HEAP32[$76 >> 2] = $14; //@line 21687
     $77 = $ReallocAsyncCtx + 40 | 0; //@line 21688
     HEAP32[$77 >> 2] = $59; //@line 21689
     $78 = $ReallocAsyncCtx + 44 | 0; //@line 21690
     HEAP32[$78 >> 2] = 0; //@line 21691
     $79 = $ReallocAsyncCtx + 48 | 0; //@line 21692
     HEAP32[$79 >> 2] = $16; //@line 21693
     $80 = $ReallocAsyncCtx + 52 | 0; //@line 21694
     HEAP32[$80 >> 2] = $18; //@line 21695
     $81 = $ReallocAsyncCtx + 56 | 0; //@line 21696
     HEAP32[$81 >> 2] = $20; //@line 21697
     $82 = $ReallocAsyncCtx + 60 | 0; //@line 21698
     HEAP32[$82 >> 2] = $22; //@line 21699
     $83 = $ReallocAsyncCtx + 64 | 0; //@line 21700
     HEAP32[$83 >> 2] = $24; //@line 21701
     $84 = $ReallocAsyncCtx + 68 | 0; //@line 21702
     HEAP32[$84 >> 2] = $26; //@line 21703
     $85 = $ReallocAsyncCtx + 72 | 0; //@line 21704
     HEAP32[$85 >> 2] = $28; //@line 21705
     $86 = $ReallocAsyncCtx + 76 | 0; //@line 21706
     HEAP32[$86 >> 2] = $30; //@line 21707
     sp = STACKTOP; //@line 21708
     return;
    }
    HEAP8[___async_retval >> 0] = $67 & 1; //@line 21713
    ___async_unwind = 0; //@line 21714
    HEAP32[$ReallocAsyncCtx >> 2] = 499; //@line 21715
    $68 = $ReallocAsyncCtx + 4 | 0; //@line 21716
    HEAP32[$68 >> 2] = $2; //@line 21717
    $69 = $ReallocAsyncCtx + 8 | 0; //@line 21718
    HEAP32[$69 >> 2] = $4; //@line 21719
    $70 = $ReallocAsyncCtx + 12 | 0; //@line 21720
    HEAP8[$70 >> 0] = $36; //@line 21721
    $71 = $ReallocAsyncCtx + 16 | 0; //@line 21722
    HEAP32[$71 >> 2] = $6; //@line 21723
    $72 = $ReallocAsyncCtx + 20 | 0; //@line 21724
    HEAP8[$72 >> 0] = $43; //@line 21725
    $73 = $ReallocAsyncCtx + 24 | 0; //@line 21726
    HEAP32[$73 >> 2] = $8; //@line 21727
    $74 = $ReallocAsyncCtx + 28 | 0; //@line 21728
    HEAP32[$74 >> 2] = $10; //@line 21729
    $75 = $ReallocAsyncCtx + 32 | 0; //@line 21730
    HEAP32[$75 >> 2] = $12; //@line 21731
    $76 = $ReallocAsyncCtx + 36 | 0; //@line 21732
    HEAP32[$76 >> 2] = $14; //@line 21733
    $77 = $ReallocAsyncCtx + 40 | 0; //@line 21734
    HEAP32[$77 >> 2] = $59; //@line 21735
    $78 = $ReallocAsyncCtx + 44 | 0; //@line 21736
    HEAP32[$78 >> 2] = 0; //@line 21737
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 21738
    HEAP32[$79 >> 2] = $16; //@line 21739
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 21740
    HEAP32[$80 >> 2] = $18; //@line 21741
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 21742
    HEAP32[$81 >> 2] = $20; //@line 21743
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 21744
    HEAP32[$82 >> 2] = $22; //@line 21745
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 21746
    HEAP32[$83 >> 2] = $24; //@line 21747
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 21748
    HEAP32[$84 >> 2] = $26; //@line 21749
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 21750
    HEAP32[$85 >> 2] = $28; //@line 21751
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 21752
    HEAP32[$86 >> 2] = $30; //@line 21753
    sp = STACKTOP; //@line 21754
    return;
   }
  }
 } else {
  HEAP32[$24 >> 2] = 0; //@line 21759
  HEAP8[$26 >> 0] = 0; //@line 21760
  HEAP32[$28 >> 2] = 0; //@line 21761
 }
 $111 = HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] | 0; //@line 21765
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 21766
 FUNCTION_TABLE_iii[$111 & 31]($4, $36) | 0; //@line 21767
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 501; //@line 21770
  $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 21771
  HEAP32[$112 >> 2] = $2; //@line 21772
  $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 21773
  HEAP32[$113 >> 2] = $4; //@line 21774
  $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 21775
  HEAP32[$114 >> 2] = $6; //@line 21776
  $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 21777
  HEAP32[$115 >> 2] = $8; //@line 21778
  $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 21779
  HEAP32[$116 >> 2] = $10; //@line 21780
  $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 21781
  HEAP32[$117 >> 2] = $12; //@line 21782
  $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 21783
  HEAP32[$118 >> 2] = $14; //@line 21784
  $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 21785
  HEAP32[$119 >> 2] = $16; //@line 21786
  $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 21787
  HEAP32[$120 >> 2] = $18; //@line 21788
  $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 21789
  HEAP32[$121 >> 2] = $20; //@line 21790
  $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 21791
  HEAP32[$122 >> 2] = $22; //@line 21792
  $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 21793
  HEAP32[$123 >> 2] = $24; //@line 21794
  $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 21795
  HEAP32[$124 >> 2] = $26; //@line 21796
  $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 21797
  HEAP32[$125 >> 2] = $28; //@line 21798
  $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 21799
  HEAP32[$126 >> 2] = $30; //@line 21800
  $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 21801
  HEAP8[$127 >> 0] = $36; //@line 21802
  $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 21803
  HEAP8[$128 >> 0] = $43; //@line 21804
  sp = STACKTOP; //@line 21805
  return;
 }
 ___async_unwind = 0; //@line 21808
 HEAP32[$ReallocAsyncCtx3 >> 2] = 501; //@line 21809
 $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 21810
 HEAP32[$112 >> 2] = $2; //@line 21811
 $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 21812
 HEAP32[$113 >> 2] = $4; //@line 21813
 $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 21814
 HEAP32[$114 >> 2] = $6; //@line 21815
 $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 21816
 HEAP32[$115 >> 2] = $8; //@line 21817
 $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 21818
 HEAP32[$116 >> 2] = $10; //@line 21819
 $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 21820
 HEAP32[$117 >> 2] = $12; //@line 21821
 $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 21822
 HEAP32[$118 >> 2] = $14; //@line 21823
 $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 21824
 HEAP32[$119 >> 2] = $16; //@line 21825
 $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 21826
 HEAP32[$120 >> 2] = $18; //@line 21827
 $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 21828
 HEAP32[$121 >> 2] = $20; //@line 21829
 $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 21830
 HEAP32[$122 >> 2] = $22; //@line 21831
 $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 21832
 HEAP32[$123 >> 2] = $24; //@line 21833
 $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 21834
 HEAP32[$124 >> 2] = $26; //@line 21835
 $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 21836
 HEAP32[$125 >> 2] = $28; //@line 21837
 $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 21838
 HEAP32[$126 >> 2] = $30; //@line 21839
 $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 21840
 HEAP8[$127 >> 0] = $36; //@line 21841
 $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 21842
 HEAP8[$128 >> 0] = $43; //@line 21843
 sp = STACKTOP; //@line 21844
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$063 = 0, $$06370 = 0, $$06371 = 0, $$1$off0 = 0, $$160 = 0, $$162 = 0, $$164 = 0, $$pre$phi$sinkZ2D = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $141 = 0, $143 = 0, $144 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $156 = 0, $16 = 0, $183 = 0, $201 = 0, $203 = 0, $40 = 0, $41 = 0, $47 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx9 = 0, $addconv = 0, $sext$i = 0, $storemerge$in = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 11895
 STACKTOP = STACKTOP + 48 | 0; //@line 11896
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11896
 $vararg_buffer5 = sp + 24 | 0; //@line 11897
 $vararg_buffer3 = sp + 16 | 0; //@line 11898
 $vararg_buffer1 = sp + 8 | 0; //@line 11899
 $7 = sp + 32 | 0; //@line 11901
 $8 = sp + 28 | 0; //@line 11902
 HEAP8[$7 >> 0] = $3; //@line 11903
 $9 = $0 + 4 | 0; //@line 11904
 $15 = __ZN7LoRaPHY15get_max_payloadEhb($9, HEAP8[$0 + 2026 >> 0] | 0, (HEAP8[$0 + 1173 >> 0] | 0) != 0) | 0; //@line 11910
 $16 = $2 & 65535; //@line 11911
 $sext$i = ($16 << 16) + -851968 | 0; //@line 11913
 if (((($sext$i | 0) < 0 ? 0 : $sext$i >> 16) | 0) > ($15 & 255 | 0)) {
  _mbed_tracef(2, 12685, 12690, sp); //@line 11920
 }
 HEAP32[$8 >> 2] = 0; //@line 11922
 $40 = HEAPU8[$1 + ($3 + 1 & 255) >> 0] << 8 | HEAPU8[$1 + ($3 & 255) >> 0] | HEAPU8[$1 + ($3 + 2 & 255) >> 0] << 16; //@line 11941
 $41 = $3 + 4 << 24 >> 24; //@line 11942
 HEAP8[$7 >> 0] = $41; //@line 11943
 $47 = $40 | HEAPU8[$1 + ($3 + 3 & 255) >> 0] << 24; //@line 11949
 L4 : do {
  if (($47 | 0) == (HEAP32[$0 + 1756 >> 2] | 0)) {
   $$1$off0 = 0; //@line 11958
   $$160 = $0 + 1732 | 0; //@line 11958
   $$162 = $0 + 1716 | 0; //@line 11958
   $$164 = 0; //@line 11958
   $storemerge$in = $0 + 1764 | 0; //@line 11958
  } else {
   $$06370 = HEAP32[$0 + 1988 >> 2] | 0; //@line 11961
   L7 : do {
    if ($$06370 | 0) {
     $$06371 = $$06370; //@line 11965
     while (1) {
      if (($47 | 0) == (HEAP32[$$06371 >> 2] | 0)) {
       break;
      }
      $$063 = HEAP32[$$06371 + 40 >> 2] | 0; //@line 11973
      if (!$$063) {
       break L7;
      } else {
       $$06371 = $$063; //@line 11978
      }
     }
     $$1$off0 = 1; //@line 11984
     $$160 = $$06371 + 20 | 0; //@line 11984
     $$162 = $$06371 + 4 | 0; //@line 11984
     $$164 = $$06371; //@line 11984
     $storemerge$in = $$06371 + 36 | 0; //@line 11984
     break L4;
    }
   } while (0);
   HEAP32[$0 + 2020 >> 2] = 11; //@line 11989
   HEAP8[$0 + 2012 >> 0] = 0; //@line 11991
   STACKTOP = sp; //@line 11992
   return;
  }
 } while (0);
 HEAP32[$8 >> 2] = HEAP32[$storemerge$in >> 2]; //@line 11996
 HEAP8[$7 >> 0] = $3 + 5 << 24 >> 24; //@line 11998
 $68 = HEAP8[$1 + ($41 & 255) >> 0] | 0; //@line 12001
 $69 = $68 & 15; //@line 12002
 $addconv = $69 + 8 << 24 >> 24; //@line 12003
 $AsyncCtx9 = _emscripten_alloc_async_context(92, sp) | 0; //@line 12004
 $70 = __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1_($0, $1, $2, $7, $47, $8, $$162) | 0; //@line 12005
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 377; //@line 12008
  HEAP32[$AsyncCtx9 + 4 >> 2] = $16; //@line 12010
  HEAP8[$AsyncCtx9 + 8 >> 0] = $addconv; //@line 12012
  HEAP8[$AsyncCtx9 + 9 >> 0] = $68; //@line 12014
  HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 12016
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer5; //@line 12018
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer5; //@line 12020
  HEAP32[$AsyncCtx9 + 24 >> 2] = $vararg_buffer3; //@line 12022
  HEAP32[$AsyncCtx9 + 28 >> 2] = $vararg_buffer3; //@line 12024
  HEAP8[$AsyncCtx9 + 32 >> 0] = $4; //@line 12026
  HEAP32[$AsyncCtx9 + 36 >> 2] = $$164; //@line 12028
  HEAP32[$AsyncCtx9 + 40 >> 2] = $vararg_buffer1; //@line 12030
  HEAP32[$AsyncCtx9 + 44 >> 2] = $vararg_buffer1; //@line 12032
  HEAP32[$AsyncCtx9 + 48 >> 2] = $8; //@line 12034
  HEAP32[$AsyncCtx9 + 52 >> 2] = $7; //@line 12036
  HEAP32[$AsyncCtx9 + 56 >> 2] = $1; //@line 12038
  HEAP8[$AsyncCtx9 + 60 >> 0] = $$1$off0 & 1; //@line 12041
  HEAP32[$AsyncCtx9 + 64 >> 2] = $8; //@line 12043
  HEAP16[$AsyncCtx9 + 68 >> 1] = $5; //@line 12045
  HEAP8[$AsyncCtx9 + 70 >> 0] = $6; //@line 12047
  HEAP32[$AsyncCtx9 + 72 >> 2] = $9; //@line 12049
  HEAP8[$AsyncCtx9 + 76 >> 0] = $69; //@line 12051
  HEAP16[$AsyncCtx9 + 78 >> 1] = $2; //@line 12053
  HEAP32[$AsyncCtx9 + 80 >> 2] = $$162; //@line 12055
  HEAP32[$AsyncCtx9 + 84 >> 2] = $$160; //@line 12057
  HEAP32[$AsyncCtx9 + 88 >> 2] = $47; //@line 12059
  sp = STACKTOP; //@line 12060
  STACKTOP = sp; //@line 12061
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12063
 if (!$70) {
  _mbed_tracef(2, 12685, 12709, $vararg_buffer1); //@line 12065
  HEAP32[$0 + 2020 >> 2] = 12; //@line 12067
  HEAP8[$0 + 2012 >> 0] = 0; //@line 12069
  STACKTOP = sp; //@line 12070
  return;
 }
 $AsyncCtx21 = _emscripten_alloc_async_context(88, sp) | 0; //@line 12073
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 12074
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 378; //@line 12077
  HEAP32[$AsyncCtx21 + 4 >> 2] = $16; //@line 12079
  HEAP8[$AsyncCtx21 + 8 >> 0] = $addconv; //@line 12081
  HEAP8[$AsyncCtx21 + 9 >> 0] = $4; //@line 12083
  HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 12085
  HEAP32[$AsyncCtx21 + 16 >> 2] = $7; //@line 12087
  HEAP32[$AsyncCtx21 + 20 >> 2] = $1; //@line 12089
  HEAP32[$AsyncCtx21 + 24 >> 2] = $8; //@line 12091
  HEAP32[$AsyncCtx21 + 28 >> 2] = $0; //@line 12093
  HEAP8[$AsyncCtx21 + 32 >> 0] = $68; //@line 12095
  HEAP32[$AsyncCtx21 + 36 >> 2] = $vararg_buffer5; //@line 12097
  HEAP32[$AsyncCtx21 + 40 >> 2] = $vararg_buffer5; //@line 12099
  HEAP32[$AsyncCtx21 + 44 >> 2] = $vararg_buffer3; //@line 12101
  HEAP32[$AsyncCtx21 + 48 >> 2] = $vararg_buffer3; //@line 12103
  HEAP32[$AsyncCtx21 + 52 >> 2] = $$164; //@line 12105
  HEAP8[$AsyncCtx21 + 56 >> 0] = $$1$off0 & 1; //@line 12108
  HEAP32[$AsyncCtx21 + 60 >> 2] = $8; //@line 12110
  HEAP16[$AsyncCtx21 + 64 >> 1] = $5; //@line 12112
  HEAP8[$AsyncCtx21 + 66 >> 0] = $6; //@line 12114
  HEAP32[$AsyncCtx21 + 68 >> 2] = $9; //@line 12116
  HEAP8[$AsyncCtx21 + 72 >> 0] = $69; //@line 12118
  HEAP16[$AsyncCtx21 + 74 >> 1] = $2; //@line 12120
  HEAP32[$AsyncCtx21 + 76 >> 2] = $$162; //@line 12122
  HEAP32[$AsyncCtx21 + 80 >> 2] = $$160; //@line 12124
  HEAP32[$AsyncCtx21 + 84 >> 2] = $47; //@line 12126
  sp = STACKTOP; //@line 12127
  STACKTOP = sp; //@line 12128
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 12130
 $123 = $0 + 2062 | 0; //@line 12131
 HEAP8[$123 >> 0] = 0; //@line 12132
 $124 = $0 + 2044 | 0; //@line 12133
 HEAP8[$124 >> 0] = 0; //@line 12134
 $125 = $0 + 2012 | 0; //@line 12135
 HEAP8[$125 >> 0] = 1; //@line 12136
 HEAP8[$0 + 2034 >> 0] = 0; //@line 12138
 $127 = $0 + 2020 | 0; //@line 12139
 HEAP32[$127 >> 2] = 0; //@line 12140
 HEAP8[$0 + 2024 >> 0] = $$1$off0 & 1; //@line 12143
 HEAP8[$0 + 2027 >> 0] = ($68 & 255) >>> 4 & 1; //@line 12147
 $133 = $0 + 2028 | 0; //@line 12148
 HEAP32[$133 >> 2] = 0; //@line 12149
 $134 = $0 + 2032 | 0; //@line 12150
 HEAP16[$134 >> 1] = 0; //@line 12151
 $135 = HEAP32[$8 >> 2] | 0; //@line 12152
 $136 = $0 + 2048 | 0; //@line 12153
 HEAP32[$136 >> 2] = $135; //@line 12154
 HEAP16[$0 + 2036 >> 1] = $5; //@line 12156
 HEAP8[$0 + 2038 >> 0] = $6; //@line 12158
 HEAP32[$0 + 2056 >> 2] = 0; //@line 12160
 HEAP32[$0 + 1768 >> 2] = 0; //@line 12162
 $141 = $0 + 476 | 0; //@line 12163
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($141); //@line 12164
 L25 : do {
  if ($$1$off0) {
   HEAP32[$0 + 2016 >> 2] = 2; //@line 12168
   $143 = $$164 + 36 | 0; //@line 12169
   $144 = HEAP32[$143 >> 2] | 0; //@line 12170
   if (($144 | 0) == 0 | ($144 | 0) != ($135 | 0)) {
    $$pre$phi$sinkZ2D = $143; //@line 12175
   } else {
    HEAP32[$127 >> 2] = 8; //@line 12177
    HEAP32[$136 >> 2] = $135; //@line 12178
    HEAP8[$125 >> 0] = 0; //@line 12179
    STACKTOP = sp; //@line 12180
    return;
   }
  } else {
   switch ($4 << 24 >> 24) {
   case 5:
    {
     HEAP8[$0 + 1178 >> 0] = 1; //@line 12186
     HEAP32[$0 + 2016 >> 2] = 1; //@line 12188
     $149 = $0 + 1764 | 0; //@line 12189
     $150 = HEAP32[$149 >> 2] | 0; //@line 12190
     if (($150 | 0) == 0 | ($150 | 0) != ($135 | 0)) {
      $$pre$phi$sinkZ2D = $149; //@line 12195
      break L25;
     }
     _mbed_tracef(16, 12685, 12720, $vararg_buffer3); //@line 12198
     HEAP8[$125 >> 0] = 0; //@line 12199
     HEAP32[$127 >> 2] = 8; //@line 12200
     $$pre$phi$sinkZ2D = $149; //@line 12201
     break L25;
     break;
    }
   case 3:
    {
     HEAP8[$0 + 1178 >> 0] = 0; //@line 12207
     HEAP32[$0 + 2016 >> 2] = 0; //@line 12209
     $155 = $0 + 1764 | 0; //@line 12210
     $156 = HEAP32[$155 >> 2] | 0; //@line 12211
     if (($156 | 0) == 0 | ($156 | 0) != ($135 | 0)) {
      $$pre$phi$sinkZ2D = $155; //@line 12216
      break L25;
     }
     _mbed_tracef(16, 12685, 12720, $vararg_buffer5); //@line 12219
     HEAP8[$125 >> 0] = 0; //@line 12220
     HEAP32[$127 >> 2] = 8; //@line 12221
     STACKTOP = sp; //@line 12222
     return;
    }
   default:
    {
     $$pre$phi$sinkZ2D = $0 + 1764 | 0; //@line 12227
     break L25;
    }
   }
  }
 } while (0);
 HEAP32[$$pre$phi$sinkZ2D >> 2] = $135; //@line 12233
 if (!(HEAP8[$0 + 1177 >> 0] | 0)) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($141); //@line 12238
 } else {
  if ($68 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($141); //@line 12243
   HEAP8[$123 >> 0] = 1; //@line 12244
   HEAP8[$124 >> 0] = 1; //@line 12245
  }
 }
 do {
  if (!($16 + 252 - ($addconv & 255) & 255)) {
   if ($69 << 24 >> 24) {
    $AsyncCtx13 = _emscripten_alloc_async_context(52, sp) | 0; //@line 12259
    $183 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($141, $1, 8, $addconv, $6, $0 + 2084 | 0, $0 + 1876 | 0, $9) | 0; //@line 12260
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 380; //@line 12263
     HEAP32[$AsyncCtx13 + 4 >> 2] = $141; //@line 12265
     HEAP32[$AsyncCtx13 + 8 >> 2] = $127; //@line 12267
     HEAP8[$AsyncCtx13 + 12 >> 0] = $4; //@line 12269
     HEAP32[$AsyncCtx13 + 16 >> 2] = $0; //@line 12271
     HEAP32[$AsyncCtx13 + 20 >> 2] = $7; //@line 12273
     HEAP32[$AsyncCtx13 + 24 >> 2] = $1; //@line 12275
     HEAP32[$AsyncCtx13 + 28 >> 2] = $16; //@line 12277
     HEAP32[$AsyncCtx13 + 32 >> 2] = $133; //@line 12279
     HEAP32[$AsyncCtx13 + 36 >> 2] = $134; //@line 12281
     HEAP32[$AsyncCtx13 + 40 >> 2] = $123; //@line 12283
     HEAP32[$AsyncCtx13 + 44 >> 2] = $8; //@line 12285
     HEAP32[$AsyncCtx13 + 48 >> 2] = $0; //@line 12287
     sp = STACKTOP; //@line 12288
     STACKTOP = sp; //@line 12289
     return;
    }
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12291
    if ($183 | 0) {
     HEAP32[$127 >> 2] = 1; //@line 12294
     break;
    }
    if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($141) | 0) {
     HEAP32[$0 + 2076 >> 2] = 4; //@line 12300
     HEAP8[$0 + 2080 >> 0] = 1; //@line 12302
     __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($141); //@line 12303
    }
   }
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 12307
   __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($0, $1, $2, $69, $$162, $$160, $47, $135, 0, $6); //@line 12308
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 379; //@line 12311
    HEAP8[$AsyncCtx + 4 >> 0] = $4; //@line 12313
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12315
    HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 12317
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 12319
    HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 12321
    HEAP32[$AsyncCtx + 24 >> 2] = $127; //@line 12323
    HEAP32[$AsyncCtx + 28 >> 2] = $133; //@line 12325
    HEAP32[$AsyncCtx + 32 >> 2] = $134; //@line 12327
    HEAP32[$AsyncCtx + 36 >> 2] = $123; //@line 12329
    HEAP32[$AsyncCtx + 40 >> 2] = $8; //@line 12331
    HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 12333
    sp = STACKTOP; //@line 12334
    STACKTOP = sp; //@line 12335
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12337
    break;
   }
  }
 } while (0);
 if ($4 << 24 >> 24 == 7) {
  $201 = $0 + 1442 | 0; //@line 12344
  $203 = HEAPU8[$7 >> 0] | 0; //@line 12346
  _memcpy($201 | 0, $1 + $203 | 0, $16 | 0) | 0; //@line 12348
  HEAP32[$0 + 2016 >> 2] = 3; //@line 12350
  HEAP32[$127 >> 2] = 0; //@line 12351
  HEAP32[$133 >> 2] = $201; //@line 12352
  HEAP16[$134 >> 1] = $16 - $203; //@line 12355
 }
 if (!(HEAP8[$123 >> 0] | 0)) {
  STACKTOP = sp; //@line 12360
  return;
 }
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12363
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 12364
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 381; //@line 12367
  HEAP32[$AsyncCtx17 + 4 >> 2] = $8; //@line 12369
  sp = STACKTOP; //@line 12370
  STACKTOP = sp; //@line 12371
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 12373
 STACKTOP = sp; //@line 12374
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $100 = 0, $108 = 0, $116 = 0, $119 = 0, $126 = 0, $133 = 0, $136 = 0, $2 = 0, $29 = 0, $3 = 0, $4 = 0, $40 = 0, $48 = 0, $5 = 0, $66 = 0, $76 = 0, $79 = 0, $8 = 0, $88 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15377
 STACKTOP = STACKTOP + 64 | 0; //@line 15378
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 15378
 $2 = sp + 48 | 0; //@line 15379
 $3 = sp + 32 | 0; //@line 15380
 $4 = sp + 16 | 0; //@line 15381
 $5 = sp; //@line 15382
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 15383
 HEAP32[$0 + 1992 >> 2] = $1; //@line 15385
 $8 = $0 + 4 | 0; //@line 15387
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 752 | 0, $8); //@line 15388
 HEAP32[$0 + 2380 >> 2] = 0; //@line 15390
 $10 = $0 + 1168 | 0; //@line 15391
 HEAP8[$0 + 1701 >> 0] = 0; //@line 15393
 HEAP8[$0 + 1700 >> 0] = 1; //@line 15395
 HEAP8[$0 + 1173 >> 0] = 0; //@line 15397
 HEAP32[$0 + 1780 >> 2] = 0; //@line 15399
 HEAP32[$0 + 1784 >> 2] = 0; //@line 15401
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($8, $10, 1); //@line 15402
 HEAP32[$0 + 1880 >> 2] = 10; //@line 15404
 HEAP8[$0 + 1884 >> 0] = 6; //@line 15406
 HEAP8[$0 + 1908 >> 0] = 1; //@line 15408
 HEAP8[$0 + 2376 >> 0] = 0; //@line 15410
 HEAP32[$0 + 1760 >> 2] = 0; //@line 15412
 HEAP32[$0 + 1764 >> 2] = 0; //@line 15414
 HEAP32[$0 + 1768 >> 2] = 0; //@line 15416
 HEAP8[$0 + 1184 >> 0] = 0; //@line 15418
 HEAP8[$0 + 1698 >> 0] = 1; //@line 15420
 HEAP8[$0 + 1699 >> 0] = 1; //@line 15422
 HEAP8[$0 + 1181 >> 0] = 0; //@line 15424
 HEAP8[$0 + 1932 >> 0] = 0; //@line 15426
 HEAP16[$0 + 1934 >> 1] = 1; //@line 15428
 $29 = $0 + 476 | 0; //@line 15429
 __ZN14LoRaMacCommand20clear_command_bufferEv($29); //@line 15430
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($29); //@line 15431
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($29); //@line 15432
 HEAP8[$0 + 1175 >> 0] = 1; //@line 15434
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($8, $10, 0); //@line 15435
 HEAP8[$0 + 1177 >> 0] = 0; //@line 15437
 HEAP8[$0 + 1178 >> 0] = 0; //@line 15439
 $$05$i = HEAP32[$0 + 1988 >> 2] | 0; //@line 15441
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 15444
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 15447
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 15449
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 1182 >> 0] = 0; //@line 15459
 HEAP8[$0 + 1183 >> 0] = 0; //@line 15461
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15462
 $40 = __ZN7LoRaPHY13get_radio_rngEv($8) | 0; //@line 15463
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 443; //@line 15466
  HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 15468
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 15470
  HEAP32[$AsyncCtx27 + 12 >> 2] = $8; //@line 15472
  HEAP32[$AsyncCtx27 + 16 >> 2] = $5; //@line 15474
  HEAP32[$AsyncCtx27 + 20 >> 2] = $2; //@line 15476
  HEAP32[$AsyncCtx27 + 24 >> 2] = $3; //@line 15478
  HEAP32[$AsyncCtx27 + 28 >> 2] = $4; //@line 15480
  sp = STACKTOP; //@line 15481
  STACKTOP = sp; //@line 15482
  return 0; //@line 15482
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 15484
 _srand($40); //@line 15485
 $48 = $0 + 1172 | 0; //@line 15486
 HEAP8[$48 >> 0] = 1; //@line 15487
 $AsyncCtx33 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15488
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 15489
 if (___async) {
  HEAP32[$AsyncCtx33 >> 2] = 444; //@line 15492
  HEAP32[$AsyncCtx33 + 4 >> 2] = $0; //@line 15494
  HEAP32[$AsyncCtx33 + 8 >> 2] = $0; //@line 15496
  HEAP32[$AsyncCtx33 + 12 >> 2] = $48; //@line 15498
  HEAP32[$AsyncCtx33 + 16 >> 2] = $8; //@line 15500
  HEAP32[$AsyncCtx33 + 20 >> 2] = $5; //@line 15502
  HEAP32[$AsyncCtx33 + 24 >> 2] = $2; //@line 15504
  HEAP32[$AsyncCtx33 + 28 >> 2] = $3; //@line 15506
  HEAP32[$AsyncCtx33 + 32 >> 2] = $4; //@line 15508
  sp = STACKTOP; //@line 15509
  STACKTOP = sp; //@line 15510
  return 0; //@line 15510
 }
 _emscripten_free_async_context($AsyncCtx33 | 0); //@line 15512
 $AsyncCtx36 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15513
 __ZN7LoRaPHY18put_radio_to_sleepEv($8); //@line 15514
 if (___async) {
  HEAP32[$AsyncCtx36 >> 2] = 445; //@line 15517
  HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 15519
  HEAP32[$AsyncCtx36 + 8 >> 2] = $0; //@line 15521
  HEAP32[$AsyncCtx36 + 12 >> 2] = $48; //@line 15523
  HEAP32[$AsyncCtx36 + 16 >> 2] = $8; //@line 15525
  HEAP32[$AsyncCtx36 + 20 >> 2] = $5; //@line 15527
  HEAP32[$AsyncCtx36 + 24 >> 2] = $2; //@line 15529
  HEAP32[$AsyncCtx36 + 28 >> 2] = $3; //@line 15531
  HEAP32[$AsyncCtx36 + 32 >> 2] = $4; //@line 15533
  sp = STACKTOP; //@line 15534
  STACKTOP = sp; //@line 15535
  return 0; //@line 15535
 }
 _emscripten_free_async_context($AsyncCtx36 | 0); //@line 15537
 $66 = $2 + 12 | 0; //@line 15539
 HEAP32[$2 >> 2] = 446; //@line 15540
 HEAP32[$2 + 4 >> 2] = 0; //@line 15542
 HEAP32[$2 + 8 >> 2] = $0; //@line 15544
 HEAP32[$66 >> 2] = 860; //@line 15545
 $AsyncCtx23 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15546
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1796 | 0, $2); //@line 15547
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 447; //@line 15550
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 15552
  HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 15554
  HEAP32[$AsyncCtx23 + 12 >> 2] = $48; //@line 15556
  HEAP32[$AsyncCtx23 + 16 >> 2] = $8; //@line 15558
  HEAP32[$AsyncCtx23 + 20 >> 2] = $5; //@line 15560
  HEAP32[$AsyncCtx23 + 24 >> 2] = $2; //@line 15562
  HEAP32[$AsyncCtx23 + 28 >> 2] = $3; //@line 15564
  HEAP32[$AsyncCtx23 + 32 >> 2] = $4; //@line 15566
  HEAP32[$AsyncCtx23 + 36 >> 2] = $66; //@line 15568
  sp = STACKTOP; //@line 15569
  STACKTOP = sp; //@line 15570
  return 0; //@line 15570
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 15572
 $76 = HEAP32[$66 >> 2] | 0; //@line 15573
 do {
  if ($76 | 0) {
   $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 15578
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 15579
   FUNCTION_TABLE_vi[$79 & 1023]($2); //@line 15580
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 448; //@line 15583
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15585
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 15587
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 15589
    HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 15591
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 15593
    HEAP32[$AsyncCtx + 24 >> 2] = $48; //@line 15595
    HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 15597
    sp = STACKTOP; //@line 15598
    STACKTOP = sp; //@line 15599
    return 0; //@line 15599
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15601
    break;
   }
  }
 } while (0);
 $88 = $3 + 12 | 0; //@line 15607
 HEAP32[$3 >> 2] = 449; //@line 15608
 HEAP32[$3 + 4 >> 2] = 0; //@line 15610
 HEAP32[$3 + 8 >> 2] = $0; //@line 15612
 HEAP32[$88 >> 2] = 860; //@line 15613
 $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15614
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1816 | 0, $3); //@line 15615
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 450; //@line 15618
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 15620
  HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 15622
  HEAP32[$AsyncCtx20 + 12 >> 2] = $48; //@line 15624
  HEAP32[$AsyncCtx20 + 16 >> 2] = $8; //@line 15626
  HEAP32[$AsyncCtx20 + 20 >> 2] = $5; //@line 15628
  HEAP32[$AsyncCtx20 + 24 >> 2] = $4; //@line 15630
  HEAP32[$AsyncCtx20 + 28 >> 2] = $88; //@line 15632
  HEAP32[$AsyncCtx20 + 32 >> 2] = $3; //@line 15634
  sp = STACKTOP; //@line 15635
  STACKTOP = sp; //@line 15636
  return 0; //@line 15636
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 15638
 $97 = HEAP32[$88 >> 2] | 0; //@line 15639
 do {
  if ($97 | 0) {
   $100 = HEAP32[$97 + 8 >> 2] | 0; //@line 15644
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15645
   FUNCTION_TABLE_vi[$100 & 1023]($3); //@line 15646
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 451; //@line 15649
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15651
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 15653
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 15655
    HEAP32[$AsyncCtx3 + 16 >> 2] = $5; //@line 15657
    HEAP32[$AsyncCtx3 + 20 >> 2] = $48; //@line 15659
    HEAP32[$AsyncCtx3 + 24 >> 2] = $8; //@line 15661
    sp = STACKTOP; //@line 15662
    STACKTOP = sp; //@line 15663
    return 0; //@line 15663
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15665
    break;
   }
  }
 } while (0);
 $108 = $4 + 12 | 0; //@line 15671
 HEAP32[$4 >> 2] = 452; //@line 15672
 HEAP32[$4 + 4 >> 2] = 0; //@line 15674
 HEAP32[$4 + 8 >> 2] = $0; //@line 15676
 HEAP32[$108 >> 2] = 860; //@line 15677
 $AsyncCtx17 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15678
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1836 | 0, $4); //@line 15679
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 453; //@line 15682
  HEAP32[$AsyncCtx17 + 4 >> 2] = $108; //@line 15684
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 15686
  HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 15688
  HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 15690
  HEAP32[$AsyncCtx17 + 20 >> 2] = $4; //@line 15692
  HEAP32[$AsyncCtx17 + 24 >> 2] = $48; //@line 15694
  HEAP32[$AsyncCtx17 + 28 >> 2] = $8; //@line 15696
  sp = STACKTOP; //@line 15697
  STACKTOP = sp; //@line 15698
  return 0; //@line 15698
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15700
 $116 = HEAP32[$108 >> 2] | 0; //@line 15701
 do {
  if ($116 | 0) {
   $119 = HEAP32[$116 + 8 >> 2] | 0; //@line 15706
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15707
   FUNCTION_TABLE_vi[$119 & 1023]($4); //@line 15708
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 454; //@line 15711
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 15713
    HEAP32[$AsyncCtx7 + 8 >> 2] = $5; //@line 15715
    HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 15717
    HEAP32[$AsyncCtx7 + 16 >> 2] = $48; //@line 15719
    HEAP32[$AsyncCtx7 + 20 >> 2] = $8; //@line 15721
    sp = STACKTOP; //@line 15722
    STACKTOP = sp; //@line 15723
    return 0; //@line 15723
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15725
    break;
   }
  }
 } while (0);
 $126 = $5 + 12 | 0; //@line 15731
 HEAP32[$5 >> 2] = 455; //@line 15732
 HEAP32[$5 + 4 >> 2] = 0; //@line 15734
 HEAP32[$5 + 8 >> 2] = $0; //@line 15736
 HEAP32[$126 >> 2] = 860; //@line 15737
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15738
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1856 | 0, $5); //@line 15739
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 456; //@line 15742
  HEAP32[$AsyncCtx14 + 4 >> 2] = $126; //@line 15744
  HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 15746
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 15748
  HEAP32[$AsyncCtx14 + 16 >> 2] = $48; //@line 15750
  HEAP32[$AsyncCtx14 + 20 >> 2] = $8; //@line 15752
  HEAP32[$AsyncCtx14 + 24 >> 2] = $5; //@line 15754
  sp = STACKTOP; //@line 15755
  STACKTOP = sp; //@line 15756
  return 0; //@line 15756
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 15758
 $133 = HEAP32[$126 >> 2] | 0; //@line 15759
 do {
  if ($133 | 0) {
   $136 = HEAP32[$133 + 8 >> 2] | 0; //@line 15764
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15765
   FUNCTION_TABLE_vi[$136 & 1023]($5); //@line 15766
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 457; //@line 15769
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15771
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 15773
    HEAP32[$AsyncCtx11 + 12 >> 2] = $48; //@line 15775
    HEAP32[$AsyncCtx11 + 16 >> 2] = $8; //@line 15777
    sp = STACKTOP; //@line 15778
    STACKTOP = sp; //@line 15779
    return 0; //@line 15779
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15781
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0; //@line 15788
 HEAP8[$0 + 1936 >> 0] = 1; //@line 15790
 HEAP8[$48 >> 0] = 1; //@line 15791
 $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15792
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 15793
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 458; //@line 15796
  sp = STACKTOP; //@line 15797
  STACKTOP = sp; //@line 15798
  return 0; //@line 15798
 } else {
  _emscripten_free_async_context($AsyncCtx30 | 0); //@line 15800
  STACKTOP = sp; //@line 15801
  return 0; //@line 15801
 }
 return 0; //@line 15803
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15320
 STACKTOP = STACKTOP + 1056 | 0; //@line 15321
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 15321
 $2 = sp + 1024 | 0; //@line 15322
 $3 = sp; //@line 15323
 HEAP32[$2 >> 2] = 0; //@line 15324
 HEAP32[$2 + 4 >> 2] = 0; //@line 15324
 HEAP32[$2 + 8 >> 2] = 0; //@line 15324
 HEAP32[$2 + 12 >> 2] = 0; //@line 15324
 HEAP32[$2 + 16 >> 2] = 0; //@line 15324
 HEAP32[$2 + 20 >> 2] = 0; //@line 15324
 HEAP32[$2 + 24 >> 2] = 0; //@line 15324
 HEAP32[$2 + 28 >> 2] = 0; //@line 15324
 $4 = HEAP8[$1 >> 0] | 0; //@line 15325
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 15329
   $$0185$ph$lcssa327 = -1; //@line 15329
   $$0187219$ph325326 = 0; //@line 15329
   $$1176$ph$ph$lcssa208 = 1; //@line 15329
   $$1186$ph$lcssa = -1; //@line 15329
   label = 26; //@line 15330
  } else {
   $$0187263 = 0; //@line 15332
   $10 = $4; //@line 15332
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 15338
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 15346
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 15349
    $$0187263 = $$0187263 + 1 | 0; //@line 15350
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 15353
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 15355
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 15363
   if ($23) {
    $$0183$ph260 = 0; //@line 15365
    $$0185$ph259 = -1; //@line 15365
    $130 = 1; //@line 15365
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 15367
     $$0183$ph197$ph253 = $$0183$ph260; //@line 15367
     $131 = $130; //@line 15367
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 15369
      $132 = $131; //@line 15369
      L10 : while (1) {
       $$0179242 = 1; //@line 15371
       $25 = $132; //@line 15371
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 15375
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 15377
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 15383
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 15387
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15392
         $$0185$ph$lcssa = $$0185$ph259; //@line 15392
         break L6;
        } else {
         $25 = $27; //@line 15390
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 15396
       $132 = $37 + 1 | 0; //@line 15397
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15402
        $$0185$ph$lcssa = $$0185$ph259; //@line 15402
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 15400
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 15407
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 15411
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 15416
       $$0185$ph$lcssa = $$0185$ph259; //@line 15416
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 15414
       $$0183$ph197$ph253 = $25; //@line 15414
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 15421
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 15426
      $$0185$ph$lcssa = $$0183$ph197248; //@line 15426
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 15424
      $$0185$ph259 = $$0183$ph197248; //@line 15424
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 15431
     $$1186$ph238 = -1; //@line 15431
     $133 = 1; //@line 15431
     while (1) {
      $$1176$ph$ph233 = 1; //@line 15433
      $$1184$ph193$ph232 = $$1184$ph239; //@line 15433
      $135 = $133; //@line 15433
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 15435
       $134 = $135; //@line 15435
       L25 : while (1) {
        $$1180222 = 1; //@line 15437
        $52 = $134; //@line 15437
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 15441
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 15443
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 15449
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 15453
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15458
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15458
          $$0187219$ph325326 = $$0187263; //@line 15458
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15458
          $$1186$ph$lcssa = $$1186$ph238; //@line 15458
          label = 26; //@line 15459
          break L1;
         } else {
          $52 = $45; //@line 15456
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 15463
        $134 = $56 + 1 | 0; //@line 15464
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15469
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15469
         $$0187219$ph325326 = $$0187263; //@line 15469
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15469
         $$1186$ph$lcssa = $$1186$ph238; //@line 15469
         label = 26; //@line 15470
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 15467
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 15475
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 15479
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15484
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15484
        $$0187219$ph325326 = $$0187263; //@line 15484
        $$1176$ph$ph$lcssa208 = $60; //@line 15484
        $$1186$ph$lcssa = $$1186$ph238; //@line 15484
        label = 26; //@line 15485
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 15482
        $$1184$ph193$ph232 = $52; //@line 15482
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 15490
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15495
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15495
       $$0187219$ph325326 = $$0187263; //@line 15495
       $$1176$ph$ph$lcssa208 = 1; //@line 15495
       $$1186$ph$lcssa = $$1184$ph193227; //@line 15495
       label = 26; //@line 15496
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 15493
       $$1186$ph238 = $$1184$ph193227; //@line 15493
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15501
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15501
     $$0187219$ph325326 = $$0187263; //@line 15501
     $$1176$ph$ph$lcssa208 = 1; //@line 15501
     $$1186$ph$lcssa = -1; //@line 15501
     label = 26; //@line 15502
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 15505
    $$0185$ph$lcssa327 = -1; //@line 15505
    $$0187219$ph325326 = $$0187263; //@line 15505
    $$1176$ph$ph$lcssa208 = 1; //@line 15505
    $$1186$ph$lcssa = -1; //@line 15505
    label = 26; //@line 15506
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 15514
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 15515
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 15516
   $70 = $$1186$$0185 + 1 | 0; //@line 15518
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 15523
    $$3178 = $$1176$$0175; //@line 15523
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 15526
    $$0168 = 0; //@line 15530
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 15530
   }
   $78 = $$0187219$ph325326 | 63; //@line 15532
   $79 = $$0187219$ph325326 + -1 | 0; //@line 15533
   $80 = ($$0168 | 0) != 0; //@line 15534
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 15535
   $$0166 = $0; //@line 15536
   $$0169 = 0; //@line 15536
   $$0170 = $0; //@line 15536
   while (1) {
    $83 = $$0166; //@line 15539
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 15544
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 15548
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 15555
        break L35;
       } else {
        $$3173 = $86; //@line 15558
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 15563
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 15567
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 15579
      $$2181$sink = $$0187219$ph325326; //@line 15579
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 15584
      if ($105 | 0) {
       $$0169$be = 0; //@line 15592
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 15592
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 15596
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 15598
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 15602
       } else {
        $$3182221 = $111; //@line 15604
        $$pr = $113; //@line 15604
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 15612
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 15614
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 15617
          break L54;
         } else {
          $$3182221 = $118; //@line 15620
         }
        }
        $$0169$be = 0; //@line 15624
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 15624
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 15631
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 15634
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 15643
        $$2181$sink = $$3178; //@line 15643
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 15650
    $$0169 = $$0169$be; //@line 15650
    $$0170 = $$3173; //@line 15650
   }
  }
 } while (0);
 STACKTOP = sp; //@line 15654
 return $$3 | 0; //@line 15654
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $105 = 0, $106 = 0, $11 = 0, $110 = 0, $112 = 0, $117 = 0, $118 = 0, $121 = 0, $124 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $33 = 0, $4 = 0, $41 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $60 = 0, $62 = 0, $7 = 0, $71 = 0, $72 = 0, $79 = 0, $82 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx28 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6986
 STACKTOP = STACKTOP + 64 | 0; //@line 6987
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 6987
 $vararg_buffer3 = sp + 24 | 0; //@line 6988
 $vararg_buffer1 = sp + 16 | 0; //@line 6989
 $vararg_buffer = sp; //@line 6990
 $1 = sp + 40 | 0; //@line 6991
 $2 = __ZNK7LoRaMac19get_mcps_indicationEv($0) | 0; //@line 6992
 $4 = HEAP32[$2 + 8 >> 2] | 0; //@line 6994
 if ($4 | 0) {
  HEAP32[$vararg_buffer >> 2] = $4; //@line 6997
  _mbed_tracef(2, 11997, 12039, $vararg_buffer); //@line 6998
  $6 = $0 + 2512 | 0; //@line 6999
  $7 = HEAP32[$6 >> 2] | 0; //@line 7000
  do {
   if ($7 | 0) {
    $11 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7006
    $13 = HEAP32[$7 + 4 >> 2] | 0; //@line 7008
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7009
    FUNCTION_TABLE_vii[$13 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 7010
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 240; //@line 7013
     HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 7015
     HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 7017
     HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 7019
     HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 7021
     sp = STACKTOP; //@line 7022
     STACKTOP = sp; //@line 7023
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7025
    $18 = $vararg_buffer + 12 | 0; //@line 7027
    HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 7028
    $AsyncCtx31 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7029
    $19 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($11, $vararg_buffer, 9) | 0; //@line 7030
    if (___async) {
     HEAP32[$AsyncCtx31 >> 2] = 241; //@line 7033
     HEAP32[$AsyncCtx31 + 4 >> 2] = $18; //@line 7035
     HEAP32[$AsyncCtx31 + 8 >> 2] = $vararg_buffer; //@line 7037
     sp = STACKTOP; //@line 7038
     STACKTOP = sp; //@line 7039
     return;
    }
    _emscripten_free_async_context($AsyncCtx31 | 0); //@line 7041
    $22 = HEAP32[$18 >> 2] | 0; //@line 7042
    do {
     if ($22 | 0) {
      $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 7047
      $AsyncCtx8 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7048
      FUNCTION_TABLE_vi[$25 & 1023]($vararg_buffer); //@line 7049
      if (___async) {
       HEAP32[$AsyncCtx8 >> 2] = 242; //@line 7052
       HEAP32[$AsyncCtx8 + 4 >> 2] = $19; //@line 7054
       HEAP32[$AsyncCtx8 + 8 >> 2] = $vararg_buffer; //@line 7056
       sp = STACKTOP; //@line 7057
       STACKTOP = sp; //@line 7058
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7060
       break;
      }
     }
    } while (0);
    if (!$19) {
     $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7067
     _mbed_assert_internal(11890, 11899, 778); //@line 7068
     if (___async) {
      HEAP32[$AsyncCtx43 >> 2] = 243; //@line 7071
      HEAP32[$AsyncCtx43 + 4 >> 2] = $vararg_buffer; //@line 7073
      sp = STACKTOP; //@line 7074
      STACKTOP = sp; //@line 7075
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx43 | 0); //@line 7077
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 7083
  return;
 }
 HEAP32[$0 + 2556 >> 2] = HEAP32[$2 + 36 >> 2]; //@line 7088
 $33 = $2 + 13 | 0; //@line 7089
 if ((HEAP8[$33 >> 0] | 0) == -32) {
  _mbed_tracef(8, 11997, 12077, $vararg_buffer1); //@line 7093
  STACKTOP = sp; //@line 7094
  return;
 }
 if (HEAP8[$2 + 22 >> 0] | 0) {
  HEAP32[$0 + 2836 >> 2] = 2; //@line 7101
  $41 = HEAP16[$2 + 20 >> 1] | 0; //@line 7103
  HEAP16[$0 + 2860 >> 1] = $41; //@line 7105
  HEAP8[$0 + 2853 >> 0] = HEAP8[$33 >> 0] | 0; //@line 7108
  HEAP32[$0 + 2856 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 7112
  HEAP32[$0 + 2844 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 7116
  $53 = HEAPU8[$33 >> 0] | 0; //@line 7119
  HEAP32[$vararg_buffer3 >> 2] = $41 & 65535; //@line 7120
  HEAP32[$vararg_buffer3 + 4 >> 2] = $53; //@line 7122
  _mbed_tracef(16, 11997, 12103, $vararg_buffer3); //@line 7123
  HEAP8[$0 + 2832 >> 0] = 1; //@line 7125
  $55 = $0 + 2512 | 0; //@line 7126
  $56 = HEAP32[$55 >> 2] | 0; //@line 7127
  do {
   if ($56 | 0) {
    $60 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7133
    $62 = HEAP32[$56 + 4 >> 2] | 0; //@line 7135
    $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7136
    FUNCTION_TABLE_vii[$62 & 15]($vararg_buffer3, $0 + 2500 | 0); //@line 7137
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 244; //@line 7140
     HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 7142
     HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 7144
     HEAP32[$AsyncCtx11 + 12 >> 2] = $vararg_buffer3; //@line 7146
     HEAP32[$AsyncCtx11 + 16 >> 2] = $0; //@line 7148
     HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 7150
     HEAP32[$AsyncCtx11 + 24 >> 2] = $55; //@line 7152
     HEAP32[$AsyncCtx11 + 28 >> 2] = $vararg_buffer3; //@line 7154
     HEAP32[$AsyncCtx11 + 32 >> 2] = $60; //@line 7156
     sp = STACKTOP; //@line 7157
     STACKTOP = sp; //@line 7158
     return;
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 7160
    $71 = $vararg_buffer3 + 12 | 0; //@line 7162
    HEAP32[$71 >> 2] = HEAP32[$55 >> 2]; //@line 7163
    $AsyncCtx28 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7164
    $72 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($60, $vararg_buffer3, 7) | 0; //@line 7165
    if (___async) {
     HEAP32[$AsyncCtx28 >> 2] = 245; //@line 7168
     HEAP32[$AsyncCtx28 + 4 >> 2] = $2; //@line 7170
     HEAP32[$AsyncCtx28 + 8 >> 2] = $1; //@line 7172
     HEAP32[$AsyncCtx28 + 12 >> 2] = $0; //@line 7174
     HEAP32[$AsyncCtx28 + 16 >> 2] = $vararg_buffer3; //@line 7176
     HEAP32[$AsyncCtx28 + 20 >> 2] = $0; //@line 7178
     HEAP32[$AsyncCtx28 + 24 >> 2] = $71; //@line 7180
     sp = STACKTOP; //@line 7181
     STACKTOP = sp; //@line 7182
     return;
    }
    _emscripten_free_async_context($AsyncCtx28 | 0); //@line 7184
    $79 = HEAP32[$71 >> 2] | 0; //@line 7185
    do {
     if ($79 | 0) {
      $82 = HEAP32[$79 + 8 >> 2] | 0; //@line 7190
      $AsyncCtx15 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7191
      FUNCTION_TABLE_vi[$82 & 1023]($vararg_buffer3); //@line 7192
      if (___async) {
       HEAP32[$AsyncCtx15 >> 2] = 246; //@line 7195
       HEAP32[$AsyncCtx15 + 4 >> 2] = $2; //@line 7197
       HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 7199
       HEAP32[$AsyncCtx15 + 12 >> 2] = $vararg_buffer3; //@line 7201
       HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 7203
       HEAP32[$AsyncCtx15 + 20 >> 2] = $1; //@line 7205
       HEAP32[$AsyncCtx15 + 24 >> 2] = $72; //@line 7207
       sp = STACKTOP; //@line 7208
       STACKTOP = sp; //@line 7209
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7211
       break;
      }
     }
    } while (0);
    if (!$72) {
     $AsyncCtx39 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7218
     _mbed_assert_internal(11890, 11899, 778); //@line 7219
     if (___async) {
      HEAP32[$AsyncCtx39 >> 2] = 247; //@line 7222
      HEAP32[$AsyncCtx39 + 4 >> 2] = $2; //@line 7224
      HEAP32[$AsyncCtx39 + 8 >> 2] = $1; //@line 7226
      HEAP32[$AsyncCtx39 + 12 >> 2] = $0; //@line 7228
      HEAP32[$AsyncCtx39 + 16 >> 2] = $vararg_buffer3; //@line 7230
      HEAP32[$AsyncCtx39 + 20 >> 2] = $0; //@line 7232
      sp = STACKTOP; //@line 7233
      STACKTOP = sp; //@line 7234
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx39 | 0); //@line 7236
      break;
     }
    }
   }
  } while (0);
 }
 if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2) {
  label = 35; //@line 7246
 } else {
  if (!(HEAP8[$2 + 15 >> 0] | 0)) {
   label = 35; //@line 7252
  }
 }
 if ((label | 0) == 35) {
  if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) != 2) {
   STACKTOP = sp; //@line 7259
   return;
  }
  if ((HEAP32[$2 + 4 >> 2] | 0) != 1) {
   STACKTOP = sp; //@line 7265
   return;
  }
 }
 $105 = $0 + 2512 | 0; //@line 7268
 $106 = HEAP32[$105 >> 2] | 0; //@line 7269
 do {
  if ($106 | 0) {
   $110 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7275
   $112 = HEAP32[$106 + 4 >> 2] | 0; //@line 7277
   $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7278
   FUNCTION_TABLE_vii[$112 & 15]($1, $0 + 2500 | 0); //@line 7279
   if (___async) {
    HEAP32[$AsyncCtx18 >> 2] = 248; //@line 7282
    HEAP32[$AsyncCtx18 + 4 >> 2] = $105; //@line 7284
    HEAP32[$AsyncCtx18 + 8 >> 2] = $1; //@line 7286
    HEAP32[$AsyncCtx18 + 12 >> 2] = $110; //@line 7288
    HEAP32[$AsyncCtx18 + 16 >> 2] = $1; //@line 7290
    sp = STACKTOP; //@line 7291
    STACKTOP = sp; //@line 7292
    return;
   }
   _emscripten_free_async_context($AsyncCtx18 | 0); //@line 7294
   $117 = $1 + 12 | 0; //@line 7296
   HEAP32[$117 >> 2] = HEAP32[$105 >> 2]; //@line 7297
   $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7298
   $118 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($110, $1, 11) | 0; //@line 7299
   if (___async) {
    HEAP32[$AsyncCtx25 >> 2] = 249; //@line 7302
    HEAP32[$AsyncCtx25 + 4 >> 2] = $117; //@line 7304
    HEAP32[$AsyncCtx25 + 8 >> 2] = $1; //@line 7306
    sp = STACKTOP; //@line 7307
    STACKTOP = sp; //@line 7308
    return;
   }
   _emscripten_free_async_context($AsyncCtx25 | 0); //@line 7310
   $121 = HEAP32[$117 >> 2] | 0; //@line 7311
   do {
    if ($121 | 0) {
     $124 = HEAP32[$121 + 8 >> 2] | 0; //@line 7316
     $AsyncCtx22 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7317
     FUNCTION_TABLE_vi[$124 & 1023]($1); //@line 7318
     if (___async) {
      HEAP32[$AsyncCtx22 >> 2] = 250; //@line 7321
      HEAP32[$AsyncCtx22 + 4 >> 2] = $118; //@line 7323
      HEAP32[$AsyncCtx22 + 8 >> 2] = $1; //@line 7325
      sp = STACKTOP; //@line 7326
      STACKTOP = sp; //@line 7327
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx22 | 0); //@line 7329
      break;
     }
    }
   } while (0);
   if (!$118) {
    $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7336
    _mbed_assert_internal(11890, 11899, 778); //@line 7337
    if (___async) {
     HEAP32[$AsyncCtx35 >> 2] = 251; //@line 7340
     HEAP32[$AsyncCtx35 + 4 >> 2] = $1; //@line 7342
     sp = STACKTOP; //@line 7343
     STACKTOP = sp; //@line 7344
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx35 | 0); //@line 7346
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 7352
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_50($0) {
 $0 = $0 | 0;
 var $$058 = 0, $$062 = 0, $$06272 = 0, $$06273 = 0, $$064 = 0, $$06471 = 0, $$06575 = 0, $$06874 = 0, $$166 = 0, $$16670 = 0, $$267 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $121 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $35 = 0, $36 = 0, $4 = 0, $49 = 0, $50 = 0, $51 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $74 = 0, $76 = 0, $91 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22086
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22088
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22090
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22092
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 22097
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22099
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 22101
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22103
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22105
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22107
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22109
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22111
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22113
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 22120
 }
 if (!(HEAP8[$4 + 1178 >> 0] | 0)) {
  $$pre$phiZ2D = $2; //@line 22126
 } else {
  _mbed_tracef(16, 12685, 12865, $6); //@line 22128
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 22131
  $$pre$phiZ2D = $2; //@line 22132
 }
 $35 = $4 + 1756 | 0; //@line 22134
 $36 = HEAP32[$35 >> 2] | 0; //@line 22135
 HEAP8[$4 + 1186 >> 0] = $36; //@line 22138
 HEAP8[$4 + 1187 >> 0] = $36 >>> 8; //@line 22142
 HEAP8[$4 + 1188 >> 0] = $36 >>> 16; //@line 22146
 HEAP8[$4 + 1189 >> 0] = $36 >>> 24; //@line 22150
 $49 = $4 + 1190 | 0; //@line 22152
 HEAP8[$49 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 22153
 $50 = $4 + 1760 | 0; //@line 22154
 $51 = HEAP32[$50 >> 2] | 0; //@line 22155
 HEAP8[$4 + 1191 >> 0] = $51; //@line 22158
 HEAP8[$4 + 1192 >> 0] = $51 >>> 8; //@line 22162
 $57 = $4 + 476 | 0; //@line 22163
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($57); //@line 22164
 $58 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($57) | 0; //@line 22165
 do {
  if ($10) {
   label = 16; //@line 22168
  } else {
   if (!(HEAP16[$12 >> 1] | 0)) {
    label = 16; //@line 22173
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($57) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($57); //@line 22177
     $$06272 = $14; //@line 22178
     $$06471 = $22; //@line 22178
     $$16670 = 8; //@line 22178
     label = 20; //@line 22179
     break;
    }
    $62 = $58 & 255; //@line 22182
    if (($58 & 255) >= 16) {
     HEAP16[$12 >> 1] = $58 & 255; //@line 22186
     $$062 = 0; //@line 22188
     $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($57) | 0; //@line 22188
     $$166 = 8; //@line 22188
     label = 19; //@line 22189
     break;
    }
    $64 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 22192
    $70 = ($64 & 255) + $62 & 15 | $64 & -16; //@line 22198
    HEAP8[$$pre$phiZ2D >> 0] = $70; //@line 22199
    HEAP8[$49 >> 0] = $70; //@line 22200
    $71 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($57) | 0; //@line 22201
    if (!($58 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($57); //@line 22204
     $$06272 = $14; //@line 22205
     $$06471 = $22; //@line 22205
     $$16670 = 8; //@line 22205
     label = 20; //@line 22206
     break;
    } else {
     $$06575 = 8; //@line 22209
     $$06874 = 0; //@line 22209
     $74 = 0; //@line 22209
     while (1) {
      $76 = $$06575 + 1 << 24 >> 24; //@line 22213
      HEAP8[($$06575 & 255) + ($4 + 1185) >> 0] = HEAP8[$71 + $74 >> 0] | 0; //@line 22216
      $$06874 = $$06874 + 1 << 16 >> 16; //@line 22217
      $74 = $$06874 & 65535; //@line 22218
      if ($74 >>> 0 >= $62 >>> 0) {
       $$062 = $14; //@line 22223
       $$064 = $22; //@line 22223
       $$166 = $76; //@line 22223
       label = 19; //@line 22224
       break;
      } else {
       $$06575 = $76; //@line 22221
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($58 << 24 >> 24)) {
   $$062 = $14; //@line 22235
   $$064 = $22; //@line 22235
   $$166 = 8; //@line 22235
   label = 19; //@line 22236
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($57) | 0) {
    HEAP16[$12 >> 1] = $58 & 255; //@line 22241
    $$062 = 0; //@line 22243
    $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($57) | 0; //@line 22243
    $$166 = 8; //@line 22243
    label = 19; //@line 22244
   } else {
    $$062 = $14; //@line 22246
    $$064 = $22; //@line 22246
    $$166 = 8; //@line 22246
    label = 19; //@line 22247
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($57); //@line 22252
  if (!$$064) {
   $$06273 = $$062; //@line 22255
   $$267 = $$166; //@line 22255
  } else {
   $$06272 = $$062; //@line 22257
   $$06471 = $$064; //@line 22257
   $$16670 = $$166; //@line 22257
   label = 20; //@line 22258
  }
 }
 if ((label | 0) == 20) {
  if (!(HEAP16[$12 >> 1] | 0)) {
   $$06273 = $$06272; //@line 22265
   $$267 = $$16670; //@line 22265
  } else {
   $91 = $$16670 + 1 << 24 >> 24; //@line 22267
   HEAP8[($$16670 & 255) + ($4 + 1185) >> 0] = $$06272; //@line 22270
   if (!($$06272 << 24 >> 24)) {
    __ZN14LoRaMacCommand20clear_command_bufferEv($57); //@line 22274
    $$058 = $4 + 1716 | 0; //@line 22276
   } else {
    $$058 = $4 + 1732 | 0; //@line 22278
   }
   $98 = HEAP16[$12 >> 1] | 0; //@line 22281
   $99 = HEAP32[$35 >> 2] | 0; //@line 22282
   $100 = HEAP32[$50 >> 2] | 0; //@line 22283
   $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 22286
   $103 = __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($4 + 756 | 0, $$06471, $98, $$058, 128, $99, 0, $100, ($91 & 255) + ($4 + 1185) | 0) | 0; //@line 22287
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 413; //@line 22290
    $104 = $ReallocAsyncCtx + 4 | 0; //@line 22291
    HEAP8[$104 >> 0] = $$06272; //@line 22292
    $105 = $ReallocAsyncCtx + 5 | 0; //@line 22293
    HEAP8[$105 >> 0] = $91; //@line 22294
    $106 = $ReallocAsyncCtx + 8 | 0; //@line 22295
    HEAP32[$106 >> 2] = $12; //@line 22296
    $107 = $ReallocAsyncCtx + 12 | 0; //@line 22297
    HEAP32[$107 >> 2] = $4; //@line 22298
    $108 = $ReallocAsyncCtx + 16 | 0; //@line 22299
    HEAP32[$108 >> 2] = $35; //@line 22300
    $109 = $ReallocAsyncCtx + 20 | 0; //@line 22301
    HEAP32[$109 >> 2] = $50; //@line 22302
    $110 = $ReallocAsyncCtx + 24 | 0; //@line 22303
    HEAP32[$110 >> 2] = $26; //@line 22304
    $111 = $ReallocAsyncCtx + 28 | 0; //@line 22305
    HEAP32[$111 >> 2] = $24; //@line 22306
    $112 = $ReallocAsyncCtx + 32 | 0; //@line 22307
    HEAP8[$112 >> 0] = $14; //@line 22308
    $113 = $ReallocAsyncCtx + 36 | 0; //@line 22309
    HEAP32[$113 >> 2] = $16; //@line 22310
    $114 = $ReallocAsyncCtx + 40 | 0; //@line 22311
    HEAP32[$114 >> 2] = $18; //@line 22312
    $115 = $ReallocAsyncCtx + 44 | 0; //@line 22313
    HEAP32[$115 >> 2] = $20; //@line 22314
    sp = STACKTOP; //@line 22315
    return;
   }
   HEAP32[___async_retval >> 2] = $103; //@line 22319
   ___async_unwind = 0; //@line 22320
   HEAP32[$ReallocAsyncCtx >> 2] = 413; //@line 22321
   $104 = $ReallocAsyncCtx + 4 | 0; //@line 22322
   HEAP8[$104 >> 0] = $$06272; //@line 22323
   $105 = $ReallocAsyncCtx + 5 | 0; //@line 22324
   HEAP8[$105 >> 0] = $91; //@line 22325
   $106 = $ReallocAsyncCtx + 8 | 0; //@line 22326
   HEAP32[$106 >> 2] = $12; //@line 22327
   $107 = $ReallocAsyncCtx + 12 | 0; //@line 22328
   HEAP32[$107 >> 2] = $4; //@line 22329
   $108 = $ReallocAsyncCtx + 16 | 0; //@line 22330
   HEAP32[$108 >> 2] = $35; //@line 22331
   $109 = $ReallocAsyncCtx + 20 | 0; //@line 22332
   HEAP32[$109 >> 2] = $50; //@line 22333
   $110 = $ReallocAsyncCtx + 24 | 0; //@line 22334
   HEAP32[$110 >> 2] = $26; //@line 22335
   $111 = $ReallocAsyncCtx + 28 | 0; //@line 22336
   HEAP32[$111 >> 2] = $24; //@line 22337
   $112 = $ReallocAsyncCtx + 32 | 0; //@line 22338
   HEAP8[$112 >> 0] = $14; //@line 22339
   $113 = $ReallocAsyncCtx + 36 | 0; //@line 22340
   HEAP32[$113 >> 2] = $16; //@line 22341
   $114 = $ReallocAsyncCtx + 40 | 0; //@line 22342
   HEAP32[$114 >> 2] = $18; //@line 22343
   $115 = $ReallocAsyncCtx + 44 | 0; //@line 22344
   HEAP32[$115 >> 2] = $20; //@line 22345
   sp = STACKTOP; //@line 22346
   return;
  }
 }
 $121 = (HEAPU16[$12 >> 1] | 0) + ($$267 & 255) & 65535; //@line 22354
 HEAP16[$12 >> 1] = $121; //@line 22355
 $124 = HEAP32[$35 >> 2] | 0; //@line 22358
 $125 = HEAP32[$50 >> 2] | 0; //@line 22359
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 22360
 $126 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($4 + 756 | 0, $26, $121, $4 + 1716 | 0, 128, $124, 0, $125, $24) | 0; //@line 22361
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 414; //@line 22364
  $127 = $ReallocAsyncCtx2 + 4 | 0; //@line 22365
  HEAP32[$127 >> 2] = 0; //@line 22366
  $128 = $ReallocAsyncCtx2 + 8 | 0; //@line 22367
  HEAP32[$128 >> 2] = $24; //@line 22368
  $129 = $ReallocAsyncCtx2 + 12 | 0; //@line 22369
  HEAP32[$129 >> 2] = $12; //@line 22370
  $130 = $ReallocAsyncCtx2 + 16 | 0; //@line 22371
  HEAP32[$130 >> 2] = $4; //@line 22372
  $131 = $ReallocAsyncCtx2 + 20 | 0; //@line 22373
  HEAP8[$131 >> 0] = $14; //@line 22374
  $132 = $ReallocAsyncCtx2 + 21 | 0; //@line 22375
  HEAP8[$132 >> 0] = $$06273; //@line 22376
  $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 22377
  HEAP32[$133 >> 2] = $16; //@line 22378
  $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 22379
  HEAP32[$134 >> 2] = $18; //@line 22380
  $135 = $ReallocAsyncCtx2 + 32 | 0; //@line 22381
  HEAP32[$135 >> 2] = $20; //@line 22382
  sp = STACKTOP; //@line 22383
  return;
 }
 HEAP32[___async_retval >> 2] = $126; //@line 22387
 ___async_unwind = 0; //@line 22388
 HEAP32[$ReallocAsyncCtx2 >> 2] = 414; //@line 22389
 $127 = $ReallocAsyncCtx2 + 4 | 0; //@line 22390
 HEAP32[$127 >> 2] = 0; //@line 22391
 $128 = $ReallocAsyncCtx2 + 8 | 0; //@line 22392
 HEAP32[$128 >> 2] = $24; //@line 22393
 $129 = $ReallocAsyncCtx2 + 12 | 0; //@line 22394
 HEAP32[$129 >> 2] = $12; //@line 22395
 $130 = $ReallocAsyncCtx2 + 16 | 0; //@line 22396
 HEAP32[$130 >> 2] = $4; //@line 22397
 $131 = $ReallocAsyncCtx2 + 20 | 0; //@line 22398
 HEAP8[$131 >> 0] = $14; //@line 22399
 $132 = $ReallocAsyncCtx2 + 21 | 0; //@line 22400
 HEAP8[$132 >> 0] = $$06273; //@line 22401
 $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 22402
 HEAP32[$133 >> 2] = $16; //@line 22403
 $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 22404
 HEAP32[$134 >> 2] = $18; //@line 22405
 $135 = $ReallocAsyncCtx2 + 32 | 0; //@line 22406
 HEAP32[$135 >> 2] = $20; //@line 22407
 sp = STACKTOP; //@line 22408
 return;
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 4556
 STACKTOP = STACKTOP + 32 | 0; //@line 4557
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4557
 $4 = sp + 8 | 0; //@line 4558
 $5 = sp; //@line 4559
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 4560
 if (!$6) {
  $$0 = -20; //@line 4563
  STACKTOP = sp; //@line 4564
  return $$0 | 0; //@line 4564
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 4570
  STACKTOP = sp; //@line 4571
  return $$0 | 0; //@line 4571
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4573
 _mbedtls_cipher_free($0); //@line 4574
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 594; //@line 4577
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4579
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 4581
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 4583
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 4585
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 4587
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 4589
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 4591
  sp = STACKTOP; //@line 4592
  STACKTOP = sp; //@line 4593
  return 0; //@line 4593
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4595
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4596
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 4597
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 595; //@line 4600
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4602
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 4604
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 4606
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 4608
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 4610
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 4612
  sp = STACKTOP; //@line 4613
  STACKTOP = sp; //@line 4614
  return 0; //@line 4614
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4616
 if ($18 | 0) {
  $$0 = $18; //@line 4619
  STACKTOP = sp; //@line 4620
  return $$0 | 0; //@line 4620
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4622
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 4623
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 596; //@line 4626
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 4628
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 4630
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 4632
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 4634
  sp = STACKTOP; //@line 4635
  STACKTOP = sp; //@line 4636
  return 0; //@line 4636
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4638
 if ($26 | 0) {
  $$0 = $26; //@line 4641
  STACKTOP = sp; //@line 4642
  return $$0 | 0; //@line 4642
 }
 HEAP32[$5 >> 2] = 0; //@line 4644
 dest = $4; //@line 4645
 stop = dest + 16 | 0; //@line 4645
 do {
  HEAP8[dest >> 0] = 0; //@line 4645
  dest = dest + 1 | 0; //@line 4645
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 4646
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 4647
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 597; //@line 4650
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 4652
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4654
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4656
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4658
  sp = STACKTOP; //@line 4659
  STACKTOP = sp; //@line 4660
  return 0; //@line 4660
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4662
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 4681
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 4699
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 4717
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 4735
  $110 = $0 + 136 | 0; //@line 4737
  HEAP32[$110 >> 2] = $108; //@line 4739
  HEAP32[$110 + 4 >> 2] = $90; //@line 4742
  $115 = $0 + 264 | 0; //@line 4744
  HEAP32[$115 >> 2] = $72; //@line 4746
  HEAP32[$115 + 4 >> 2] = $54; //@line 4749
  $120 = $0 + 200 | 0; //@line 4751
  HEAP32[$120 >> 2] = 0; //@line 4753
  HEAP32[$120 + 4 >> 2] = 0; //@line 4756
  $125 = $0 + 72 | 0; //@line 4758
  HEAP32[$125 >> 2] = 0; //@line 4760
  HEAP32[$125 + 4 >> 2] = 0; //@line 4763
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 4765
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 4767
  $133 = tempRet0; //@line 4768
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 4769
  $136 = $134 | $132; //@line 4771
  $137 = tempRet0 | $133; //@line 4772
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 4773
  $139 = tempRet0; //@line 4774
  $141 = $130 & -520093696 ^ $139; //@line 4776
  $143 = $0 + 104 | 0; //@line 4778
  HEAP32[$143 >> 2] = $136; //@line 4780
  HEAP32[$143 + 4 >> 2] = $137; //@line 4783
  $148 = $0 + 232 | 0; //@line 4785
  HEAP32[$148 >> 2] = $138; //@line 4787
  HEAP32[$148 + 4 >> 2] = $141; //@line 4790
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 4792
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 4794
  $156 = tempRet0; //@line 4795
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 4796
  $159 = $157 | $155; //@line 4798
  $160 = tempRet0 | $156; //@line 4799
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 4800
  $162 = tempRet0; //@line 4801
  $164 = $153 & -520093696 ^ $162; //@line 4803
  $166 = $0 + 88 | 0; //@line 4805
  HEAP32[$166 >> 2] = $159; //@line 4807
  HEAP32[$166 + 4 >> 2] = $160; //@line 4810
  $171 = $0 + 216 | 0; //@line 4812
  HEAP32[$171 >> 2] = $161; //@line 4814
  HEAP32[$171 + 4 >> 2] = $164; //@line 4817
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 4819
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 4821
  $179 = tempRet0; //@line 4822
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 4823
  $182 = $178 | $180; //@line 4825
  $183 = $179 | tempRet0; //@line 4826
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 4827
  $187 = $176 & -520093696 ^ tempRet0; //@line 4830
  $189 = $0 + 80 | 0; //@line 4832
  HEAP32[$189 >> 2] = $182; //@line 4834
  HEAP32[$189 + 4 >> 2] = $183; //@line 4837
  $194 = $0 + 208 | 0; //@line 4839
  HEAP32[$194 >> 2] = $184; //@line 4841
  HEAP32[$194 + 4 >> 2] = $187; //@line 4844
  $198 = $184 ^ $161; //@line 4845
  $199 = $187 ^ $164; //@line 4846
  $201 = $0 + 224 | 0; //@line 4848
  HEAP32[$201 >> 2] = $198; //@line 4850
  HEAP32[$201 + 4 >> 2] = $199; //@line 4853
  $205 = $182 ^ $159; //@line 4854
  $206 = $183 ^ $160; //@line 4855
  $208 = $0 + 96 | 0; //@line 4857
  HEAP32[$208 >> 2] = $205; //@line 4859
  HEAP32[$208 + 4 >> 2] = $206; //@line 4862
  $212 = $184 ^ $138; //@line 4863
  $213 = $187 ^ $141; //@line 4864
  $215 = $0 + 240 | 0; //@line 4866
  HEAP32[$215 >> 2] = $212; //@line 4868
  HEAP32[$215 + 4 >> 2] = $213; //@line 4871
  $219 = $182 ^ $136; //@line 4872
  $220 = $183 ^ $137; //@line 4873
  $222 = $0 + 112 | 0; //@line 4875
  HEAP32[$222 >> 2] = $219; //@line 4877
  HEAP32[$222 + 4 >> 2] = $220; //@line 4880
  $226 = $161 ^ $138; //@line 4881
  $227 = $164 ^ $141; //@line 4882
  $229 = $0 + 248 | 0; //@line 4884
  HEAP32[$229 >> 2] = $226; //@line 4886
  HEAP32[$229 + 4 >> 2] = $227; //@line 4889
  $233 = $159 ^ $136; //@line 4890
  $234 = $160 ^ $137; //@line 4891
  $236 = $0 + 120 | 0; //@line 4893
  HEAP32[$236 >> 2] = $233; //@line 4895
  HEAP32[$236 + 4 >> 2] = $234; //@line 4898
  $240 = $198 ^ $138; //@line 4899
  $241 = $199 ^ $141; //@line 4900
  $243 = $0 + 256 | 0; //@line 4902
  HEAP32[$243 >> 2] = $240; //@line 4904
  HEAP32[$243 + 4 >> 2] = $241; //@line 4907
  $247 = $205 ^ $136; //@line 4908
  $248 = $206 ^ $137; //@line 4909
  $250 = $0 + 128 | 0; //@line 4911
  HEAP32[$250 >> 2] = $247; //@line 4913
  HEAP32[$250 + 4 >> 2] = $248; //@line 4916
  $257 = $0 + 272 | 0; //@line 4920
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 4922
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 4925
  $264 = $0 + 144 | 0; //@line 4929
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 4931
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 4934
  $271 = $0 + 280 | 0; //@line 4938
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 4940
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 4943
  $278 = $0 + 152 | 0; //@line 4947
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 4949
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 4952
  $285 = $0 + 288 | 0; //@line 4956
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 4958
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 4961
  $292 = $0 + 160 | 0; //@line 4965
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 4967
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 4970
  $299 = $0 + 296 | 0; //@line 4974
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 4976
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 4979
  $306 = $0 + 168 | 0; //@line 4983
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 4985
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 4988
  $313 = $0 + 304 | 0; //@line 4992
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 4994
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 4997
  $320 = $0 + 176 | 0; //@line 5001
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 5003
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 5006
  $327 = $0 + 312 | 0; //@line 5010
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 5012
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 5015
  $334 = $0 + 184 | 0; //@line 5019
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 5021
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 5024
  $341 = $0 + 320 | 0; //@line 5028
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 5030
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 5033
  $348 = $0 + 192 | 0; //@line 5037
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 5039
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 5042
  $$0$i = 0; //@line 5043
 } else {
  $$0$i = $32; //@line 5045
 }
 $$0 = $$0$i; //@line 5047
 STACKTOP = sp; //@line 5048
 return $$0 | 0; //@line 5048
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_157($0) {
 $0 = $0 | 0;
 var $$pre$phi$sinkZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $124 = 0, $126 = 0, $134 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $67 = 0, $69 = 0, $70 = 0, $75 = 0, $76 = 0, $8 = 0, $81 = 0, $82 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 700
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 702
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 704
 $6 = HEAP8[$0 + 9 >> 0] | 0; //@line 706
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 708
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 710
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 712
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 714
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 716
 $18 = HEAP8[$0 + 32 >> 0] | 0; //@line 718
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 720
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 724
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 728
 $30 = HEAP8[$0 + 56 >> 0] & 1; //@line 731
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 733
 $34 = HEAP16[$0 + 64 >> 1] | 0; //@line 735
 $36 = HEAP8[$0 + 66 >> 0] | 0; //@line 737
 $38 = HEAP32[$0 + 68 >> 2] | 0; //@line 739
 $40 = HEAP8[$0 + 72 >> 0] | 0; //@line 741
 $42 = HEAP16[$0 + 74 >> 1] | 0; //@line 743
 $44 = HEAP32[$0 + 76 >> 2] | 0; //@line 745
 $46 = HEAP32[$0 + 80 >> 2] | 0; //@line 747
 $48 = HEAP32[$0 + 84 >> 2] | 0; //@line 749
 $49 = $8 + 2062 | 0; //@line 750
 HEAP8[$49 >> 0] = 0; //@line 751
 $50 = $8 + 2044 | 0; //@line 752
 HEAP8[$50 >> 0] = 0; //@line 753
 $51 = $8 + 2012 | 0; //@line 754
 HEAP8[$51 >> 0] = 1; //@line 755
 HEAP8[$8 + 2034 >> 0] = 0; //@line 757
 $53 = $8 + 2020 | 0; //@line 758
 HEAP32[$53 >> 2] = 0; //@line 759
 HEAP8[$8 + 2024 >> 0] = $30 & 1; //@line 762
 HEAP8[$8 + 2027 >> 0] = ($18 & 255) >>> 4 & 1; //@line 766
 $59 = $8 + 2028 | 0; //@line 767
 HEAP32[$59 >> 2] = 0; //@line 768
 $60 = $8 + 2032 | 0; //@line 769
 HEAP16[$60 >> 1] = 0; //@line 770
 $61 = HEAP32[$32 >> 2] | 0; //@line 771
 $62 = $8 + 2048 | 0; //@line 772
 HEAP32[$62 >> 2] = $61; //@line 773
 HEAP16[$8 + 2036 >> 1] = $34; //@line 775
 HEAP8[$8 + 2038 >> 0] = $36; //@line 777
 HEAP32[$8 + 2056 >> 2] = 0; //@line 779
 HEAP32[$8 + 1768 >> 2] = 0; //@line 781
 $67 = $8 + 476 | 0; //@line 782
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($67); //@line 783
 L2 : do {
  if ($30) {
   HEAP32[$8 + 2016 >> 2] = 2; //@line 787
   $69 = $28 + 36 | 0; //@line 788
   $70 = HEAP32[$69 >> 2] | 0; //@line 789
   if (($70 | 0) == 0 | ($70 | 0) != ($61 | 0)) {
    $$pre$phi$sinkZ2D = $69; //@line 794
   } else {
    HEAP32[$53 >> 2] = 8; //@line 796
    HEAP32[$62 >> 2] = $61; //@line 797
    HEAP8[$51 >> 0] = 0; //@line 798
    return;
   }
  } else {
   switch ($6 << 24 >> 24) {
   case 5:
    {
     HEAP8[$8 + 1178 >> 0] = 1; //@line 805
     HEAP32[$8 + 2016 >> 2] = 1; //@line 807
     $75 = $8 + 1764 | 0; //@line 808
     $76 = HEAP32[$75 >> 2] | 0; //@line 809
     if (($76 | 0) == 0 | ($76 | 0) != ($61 | 0)) {
      $$pre$phi$sinkZ2D = $75; //@line 814
      break L2;
     }
     _mbed_tracef(16, 12685, 12720, $24); //@line 817
     HEAP8[$51 >> 0] = 0; //@line 818
     HEAP32[$53 >> 2] = 8; //@line 819
     $$pre$phi$sinkZ2D = $75; //@line 820
     break L2;
     break;
    }
   case 3:
    {
     HEAP8[$8 + 1178 >> 0] = 0; //@line 826
     HEAP32[$8 + 2016 >> 2] = 0; //@line 828
     $81 = $8 + 1764 | 0; //@line 829
     $82 = HEAP32[$81 >> 2] | 0; //@line 830
     if (($82 | 0) == 0 | ($82 | 0) != ($61 | 0)) {
      $$pre$phi$sinkZ2D = $81; //@line 835
      break L2;
     }
     _mbed_tracef(16, 12685, 12720, $20); //@line 838
     HEAP8[$51 >> 0] = 0; //@line 839
     HEAP32[$53 >> 2] = 8; //@line 840
     return;
    }
   default:
    {
     $$pre$phi$sinkZ2D = $8 + 1764 | 0; //@line 846
     break L2;
    }
   }
  }
 } while (0);
 HEAP32[$$pre$phi$sinkZ2D >> 2] = $61; //@line 852
 if (!(HEAP8[$8 + 1177 >> 0] | 0)) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($67); //@line 857
 } else {
  if ($18 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($67); //@line 862
   HEAP8[$49 >> 0] = 1; //@line 863
   HEAP8[$50 >> 0] = 1; //@line 864
  }
 }
 if ($2 + 252 - ($4 & 255) & 255 | 0) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 873
  __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($8, $12, $42, $40, $44, $46, $48, $61, 0, $36); //@line 874
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 379; //@line 877
   $95 = $ReallocAsyncCtx + 4 | 0; //@line 878
   HEAP8[$95 >> 0] = $6; //@line 879
   $96 = $ReallocAsyncCtx + 8 | 0; //@line 880
   HEAP32[$96 >> 2] = $8; //@line 881
   $97 = $ReallocAsyncCtx + 12 | 0; //@line 882
   HEAP32[$97 >> 2] = $10; //@line 883
   $98 = $ReallocAsyncCtx + 16 | 0; //@line 884
   HEAP32[$98 >> 2] = $12; //@line 885
   $99 = $ReallocAsyncCtx + 20 | 0; //@line 886
   HEAP32[$99 >> 2] = $2; //@line 887
   $100 = $ReallocAsyncCtx + 24 | 0; //@line 888
   HEAP32[$100 >> 2] = $53; //@line 889
   $101 = $ReallocAsyncCtx + 28 | 0; //@line 890
   HEAP32[$101 >> 2] = $59; //@line 891
   $102 = $ReallocAsyncCtx + 32 | 0; //@line 892
   HEAP32[$102 >> 2] = $60; //@line 893
   $103 = $ReallocAsyncCtx + 36 | 0; //@line 894
   HEAP32[$103 >> 2] = $49; //@line 895
   $104 = $ReallocAsyncCtx + 40 | 0; //@line 896
   HEAP32[$104 >> 2] = $14; //@line 897
   $105 = $ReallocAsyncCtx + 44 | 0; //@line 898
   HEAP32[$105 >> 2] = $16; //@line 899
   sp = STACKTOP; //@line 900
   return;
  }
  ___async_unwind = 0; //@line 903
  HEAP32[$ReallocAsyncCtx >> 2] = 379; //@line 904
  $95 = $ReallocAsyncCtx + 4 | 0; //@line 905
  HEAP8[$95 >> 0] = $6; //@line 906
  $96 = $ReallocAsyncCtx + 8 | 0; //@line 907
  HEAP32[$96 >> 2] = $8; //@line 908
  $97 = $ReallocAsyncCtx + 12 | 0; //@line 909
  HEAP32[$97 >> 2] = $10; //@line 910
  $98 = $ReallocAsyncCtx + 16 | 0; //@line 911
  HEAP32[$98 >> 2] = $12; //@line 912
  $99 = $ReallocAsyncCtx + 20 | 0; //@line 913
  HEAP32[$99 >> 2] = $2; //@line 914
  $100 = $ReallocAsyncCtx + 24 | 0; //@line 915
  HEAP32[$100 >> 2] = $53; //@line 916
  $101 = $ReallocAsyncCtx + 28 | 0; //@line 917
  HEAP32[$101 >> 2] = $59; //@line 918
  $102 = $ReallocAsyncCtx + 32 | 0; //@line 919
  HEAP32[$102 >> 2] = $60; //@line 920
  $103 = $ReallocAsyncCtx + 36 | 0; //@line 921
  HEAP32[$103 >> 2] = $49; //@line 922
  $104 = $ReallocAsyncCtx + 40 | 0; //@line 923
  HEAP32[$104 >> 2] = $14; //@line 924
  $105 = $ReallocAsyncCtx + 44 | 0; //@line 925
  HEAP32[$105 >> 2] = $16; //@line 926
  sp = STACKTOP; //@line 927
  return;
 }
 if ($40 << 24 >> 24) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 934
  $109 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($67, $12, 8, $4, $36, $8 + 2084 | 0, $8 + 1876 | 0, $38) | 0; //@line 935
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 380; //@line 938
   $110 = $ReallocAsyncCtx3 + 4 | 0; //@line 939
   HEAP32[$110 >> 2] = $67; //@line 940
   $111 = $ReallocAsyncCtx3 + 8 | 0; //@line 941
   HEAP32[$111 >> 2] = $53; //@line 942
   $112 = $ReallocAsyncCtx3 + 12 | 0; //@line 943
   HEAP8[$112 >> 0] = $6; //@line 944
   $113 = $ReallocAsyncCtx3 + 16 | 0; //@line 945
   HEAP32[$113 >> 2] = $8; //@line 946
   $114 = $ReallocAsyncCtx3 + 20 | 0; //@line 947
   HEAP32[$114 >> 2] = $10; //@line 948
   $115 = $ReallocAsyncCtx3 + 24 | 0; //@line 949
   HEAP32[$115 >> 2] = $12; //@line 950
   $116 = $ReallocAsyncCtx3 + 28 | 0; //@line 951
   HEAP32[$116 >> 2] = $2; //@line 952
   $117 = $ReallocAsyncCtx3 + 32 | 0; //@line 953
   HEAP32[$117 >> 2] = $59; //@line 954
   $118 = $ReallocAsyncCtx3 + 36 | 0; //@line 955
   HEAP32[$118 >> 2] = $60; //@line 956
   $119 = $ReallocAsyncCtx3 + 40 | 0; //@line 957
   HEAP32[$119 >> 2] = $49; //@line 958
   $120 = $ReallocAsyncCtx3 + 44 | 0; //@line 959
   HEAP32[$120 >> 2] = $14; //@line 960
   $121 = $ReallocAsyncCtx3 + 48 | 0; //@line 961
   HEAP32[$121 >> 2] = $16; //@line 962
   sp = STACKTOP; //@line 963
   return;
  }
  HEAP32[___async_retval >> 2] = $109; //@line 967
  ___async_unwind = 0; //@line 968
  HEAP32[$ReallocAsyncCtx3 >> 2] = 380; //@line 969
  $110 = $ReallocAsyncCtx3 + 4 | 0; //@line 970
  HEAP32[$110 >> 2] = $67; //@line 971
  $111 = $ReallocAsyncCtx3 + 8 | 0; //@line 972
  HEAP32[$111 >> 2] = $53; //@line 973
  $112 = $ReallocAsyncCtx3 + 12 | 0; //@line 974
  HEAP8[$112 >> 0] = $6; //@line 975
  $113 = $ReallocAsyncCtx3 + 16 | 0; //@line 976
  HEAP32[$113 >> 2] = $8; //@line 977
  $114 = $ReallocAsyncCtx3 + 20 | 0; //@line 978
  HEAP32[$114 >> 2] = $10; //@line 979
  $115 = $ReallocAsyncCtx3 + 24 | 0; //@line 980
  HEAP32[$115 >> 2] = $12; //@line 981
  $116 = $ReallocAsyncCtx3 + 28 | 0; //@line 982
  HEAP32[$116 >> 2] = $2; //@line 983
  $117 = $ReallocAsyncCtx3 + 32 | 0; //@line 984
  HEAP32[$117 >> 2] = $59; //@line 985
  $118 = $ReallocAsyncCtx3 + 36 | 0; //@line 986
  HEAP32[$118 >> 2] = $60; //@line 987
  $119 = $ReallocAsyncCtx3 + 40 | 0; //@line 988
  HEAP32[$119 >> 2] = $49; //@line 989
  $120 = $ReallocAsyncCtx3 + 44 | 0; //@line 990
  HEAP32[$120 >> 2] = $14; //@line 991
  $121 = $ReallocAsyncCtx3 + 48 | 0; //@line 992
  HEAP32[$121 >> 2] = $16; //@line 993
  sp = STACKTOP; //@line 994
  return;
 }
 if ($6 << 24 >> 24 == 7) {
  $124 = $8 + 1442 | 0; //@line 999
  $126 = HEAPU8[$10 >> 0] | 0; //@line 1001
  _memcpy($124 | 0, $12 + $126 | 0, $2 | 0) | 0; //@line 1003
  HEAP32[$8 + 2016 >> 2] = 3; //@line 1005
  HEAP32[$53 >> 2] = 0; //@line 1006
  HEAP32[$59 >> 2] = $124; //@line 1007
  HEAP16[$60 >> 1] = $2 - $126; //@line 1010
 }
 if (!(HEAP8[$49 >> 0] | 0)) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 1018
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($16, $8 + 1856 | 0); //@line 1019
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 381; //@line 1022
  $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 1023
  HEAP32[$134 >> 2] = $14; //@line 1024
  sp = STACKTOP; //@line 1025
  return;
 }
 ___async_unwind = 0; //@line 1028
 HEAP32[$ReallocAsyncCtx4 >> 2] = 381; //@line 1029
 $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 1030
 HEAP32[$134 >> 2] = $14; //@line 1031
 sp = STACKTOP; //@line 1032
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_57($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $87 = 0, $92 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23410
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23412
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23414
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23416
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23418
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23422
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23426
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23428
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23430
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23432
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23434
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  return;
 }
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) != 1) {
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 23443
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 16; //@line 23446
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 23447
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 23448
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 280; //@line 23451
   $62 = $ReallocAsyncCtx5 + 4 | 0; //@line 23452
   HEAP32[$62 >> 2] = $2; //@line 23453
   $63 = $ReallocAsyncCtx5 + 8 | 0; //@line 23454
   HEAP32[$63 >> 2] = $4; //@line 23455
   $64 = $ReallocAsyncCtx5 + 12 | 0; //@line 23456
   HEAP32[$64 >> 2] = $6; //@line 23457
   $65 = $ReallocAsyncCtx5 + 16 | 0; //@line 23458
   HEAP32[$65 >> 2] = $16; //@line 23459
   $66 = $ReallocAsyncCtx5 + 20 | 0; //@line 23460
   HEAP32[$66 >> 2] = $18; //@line 23461
   $67 = $ReallocAsyncCtx5 + 24 | 0; //@line 23462
   HEAP32[$67 >> 2] = $20; //@line 23463
   $68 = $ReallocAsyncCtx5 + 28 | 0; //@line 23464
   HEAP32[$68 >> 2] = $22; //@line 23465
   $69 = $ReallocAsyncCtx5 + 32 | 0; //@line 23466
   HEAP32[$69 >> 2] = $24; //@line 23467
   sp = STACKTOP; //@line 23468
   return;
  }
  ___async_unwind = 0; //@line 23471
  HEAP32[$ReallocAsyncCtx5 >> 2] = 280; //@line 23472
  $62 = $ReallocAsyncCtx5 + 4 | 0; //@line 23473
  HEAP32[$62 >> 2] = $2; //@line 23474
  $63 = $ReallocAsyncCtx5 + 8 | 0; //@line 23475
  HEAP32[$63 >> 2] = $4; //@line 23476
  $64 = $ReallocAsyncCtx5 + 12 | 0; //@line 23477
  HEAP32[$64 >> 2] = $6; //@line 23478
  $65 = $ReallocAsyncCtx5 + 16 | 0; //@line 23479
  HEAP32[$65 >> 2] = $16; //@line 23480
  $66 = $ReallocAsyncCtx5 + 20 | 0; //@line 23481
  HEAP32[$66 >> 2] = $18; //@line 23482
  $67 = $ReallocAsyncCtx5 + 24 | 0; //@line 23483
  HEAP32[$67 >> 2] = $20; //@line 23484
  $68 = $ReallocAsyncCtx5 + 28 | 0; //@line 23485
  HEAP32[$68 >> 2] = $22; //@line 23486
  $69 = $ReallocAsyncCtx5 + 32 | 0; //@line 23487
  HEAP32[$69 >> 2] = $24; //@line 23488
  sp = STACKTOP; //@line 23489
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 32 >> 0] | 0) {
  HEAP32[$12 >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) + 11 >> 0]; //@line 23501
  _mbed_tracef(16, 11997, 12208, $12); //@line 23502
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 23503
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & -18 | 16; //@line 23507
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 23508
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 23509
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 278; //@line 23512
   $40 = $ReallocAsyncCtx7 + 4 | 0; //@line 23513
   HEAP32[$40 >> 2] = $2; //@line 23514
   $41 = $ReallocAsyncCtx7 + 8 | 0; //@line 23515
   HEAP32[$41 >> 2] = $4; //@line 23516
   $42 = $ReallocAsyncCtx7 + 12 | 0; //@line 23517
   HEAP32[$42 >> 2] = $6; //@line 23518
   $43 = $ReallocAsyncCtx7 + 16 | 0; //@line 23519
   HEAP32[$43 >> 2] = $16; //@line 23520
   $44 = $ReallocAsyncCtx7 + 20 | 0; //@line 23521
   HEAP32[$44 >> 2] = $18; //@line 23522
   $45 = $ReallocAsyncCtx7 + 24 | 0; //@line 23523
   HEAP32[$45 >> 2] = $20; //@line 23524
   $46 = $ReallocAsyncCtx7 + 28 | 0; //@line 23525
   HEAP32[$46 >> 2] = $22; //@line 23526
   $47 = $ReallocAsyncCtx7 + 32 | 0; //@line 23527
   HEAP32[$47 >> 2] = $24; //@line 23528
   sp = STACKTOP; //@line 23529
   return;
  }
  ___async_unwind = 0; //@line 23532
  HEAP32[$ReallocAsyncCtx7 >> 2] = 278; //@line 23533
  $40 = $ReallocAsyncCtx7 + 4 | 0; //@line 23534
  HEAP32[$40 >> 2] = $2; //@line 23535
  $41 = $ReallocAsyncCtx7 + 8 | 0; //@line 23536
  HEAP32[$41 >> 2] = $4; //@line 23537
  $42 = $ReallocAsyncCtx7 + 12 | 0; //@line 23538
  HEAP32[$42 >> 2] = $6; //@line 23539
  $43 = $ReallocAsyncCtx7 + 16 | 0; //@line 23540
  HEAP32[$43 >> 2] = $16; //@line 23541
  $44 = $ReallocAsyncCtx7 + 20 | 0; //@line 23542
  HEAP32[$44 >> 2] = $18; //@line 23543
  $45 = $ReallocAsyncCtx7 + 24 | 0; //@line 23544
  HEAP32[$45 >> 2] = $20; //@line 23545
  $46 = $ReallocAsyncCtx7 + 28 | 0; //@line 23546
  HEAP32[$46 >> 2] = $22; //@line 23547
  $47 = $ReallocAsyncCtx7 + 32 | 0; //@line 23548
  HEAP32[$47 >> 2] = $24; //@line 23549
  sp = STACKTOP; //@line 23550
  return;
 }
 if (!(__ZN7LoRaMac24continue_sending_processEv($2) | 0)) {
  _mbed_tracef(2, 11997, 12002, $8); //@line 23555
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & -18 | 1; //@line 23559
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 23560
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 23561
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 279; //@line 23564
   $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 23565
   HEAP32[$52 >> 2] = $2; //@line 23566
   $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 23567
   HEAP32[$53 >> 2] = $4; //@line 23568
   $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 23569
   HEAP32[$54 >> 2] = $6; //@line 23570
   $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 23571
   HEAP32[$55 >> 2] = $16; //@line 23572
   $56 = $ReallocAsyncCtx6 + 20 | 0; //@line 23573
   HEAP32[$56 >> 2] = $18; //@line 23574
   $57 = $ReallocAsyncCtx6 + 24 | 0; //@line 23575
   HEAP32[$57 >> 2] = $20; //@line 23576
   $58 = $ReallocAsyncCtx6 + 28 | 0; //@line 23577
   HEAP32[$58 >> 2] = $22; //@line 23578
   $59 = $ReallocAsyncCtx6 + 32 | 0; //@line 23579
   HEAP32[$59 >> 2] = $24; //@line 23580
   sp = STACKTOP; //@line 23581
   return;
  }
  ___async_unwind = 0; //@line 23584
  HEAP32[$ReallocAsyncCtx6 >> 2] = 279; //@line 23585
  $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 23586
  HEAP32[$52 >> 2] = $2; //@line 23587
  $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 23588
  HEAP32[$53 >> 2] = $4; //@line 23589
  $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 23590
  HEAP32[$54 >> 2] = $6; //@line 23591
  $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 23592
  HEAP32[$55 >> 2] = $16; //@line 23593
  $56 = $ReallocAsyncCtx6 + 20 | 0; //@line 23594
  HEAP32[$56 >> 2] = $18; //@line 23595
  $57 = $ReallocAsyncCtx6 + 24 | 0; //@line 23596
  HEAP32[$57 >> 2] = $20; //@line 23597
  $58 = $ReallocAsyncCtx6 + 28 | 0; //@line 23598
  HEAP32[$58 >> 2] = $22; //@line 23599
  $59 = $ReallocAsyncCtx6 + 32 | 0; //@line 23600
  HEAP32[$59 >> 2] = $24; //@line 23601
  sp = STACKTOP; //@line 23602
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 23609
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 23612
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 23613
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 23614
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 23617
   $75 = $ReallocAsyncCtx4 + 4 | 0; //@line 23618
   HEAP32[$75 >> 2] = $4; //@line 23619
   $76 = $ReallocAsyncCtx4 + 8 | 0; //@line 23620
   HEAP32[$76 >> 2] = $2; //@line 23621
   $77 = $ReallocAsyncCtx4 + 12 | 0; //@line 23622
   HEAP32[$77 >> 2] = $16; //@line 23623
   $78 = $ReallocAsyncCtx4 + 16 | 0; //@line 23624
   HEAP32[$78 >> 2] = $6; //@line 23625
   $79 = $ReallocAsyncCtx4 + 20 | 0; //@line 23626
   HEAP32[$79 >> 2] = $18; //@line 23627
   $80 = $ReallocAsyncCtx4 + 24 | 0; //@line 23628
   HEAP32[$80 >> 2] = $20; //@line 23629
   $81 = $ReallocAsyncCtx4 + 28 | 0; //@line 23630
   HEAP32[$81 >> 2] = $22; //@line 23631
   $82 = $ReallocAsyncCtx4 + 32 | 0; //@line 23632
   HEAP32[$82 >> 2] = $24; //@line 23633
   sp = STACKTOP; //@line 23634
   return;
  }
  ___async_unwind = 0; //@line 23637
  HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 23638
  $75 = $ReallocAsyncCtx4 + 4 | 0; //@line 23639
  HEAP32[$75 >> 2] = $4; //@line 23640
  $76 = $ReallocAsyncCtx4 + 8 | 0; //@line 23641
  HEAP32[$76 >> 2] = $2; //@line 23642
  $77 = $ReallocAsyncCtx4 + 12 | 0; //@line 23643
  HEAP32[$77 >> 2] = $16; //@line 23644
  $78 = $ReallocAsyncCtx4 + 16 | 0; //@line 23645
  HEAP32[$78 >> 2] = $6; //@line 23646
  $79 = $ReallocAsyncCtx4 + 20 | 0; //@line 23647
  HEAP32[$79 >> 2] = $18; //@line 23648
  $80 = $ReallocAsyncCtx4 + 24 | 0; //@line 23649
  HEAP32[$80 >> 2] = $20; //@line 23650
  $81 = $ReallocAsyncCtx4 + 28 | 0; //@line 23651
  HEAP32[$81 >> 2] = $22; //@line 23652
  $82 = $ReallocAsyncCtx4 + 32 | 0; //@line 23653
  HEAP32[$82 >> 2] = $24; //@line 23654
  sp = STACKTOP; //@line 23655
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $87 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 23663
  HEAP32[$16 >> 2] = $87 ? 5 : 2; //@line 23665
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 23673
  return;
 }
 _mbed_tracef(16, 11997, 12228, $18); //@line 23676
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 23677
 _mbed_tracef(16, 11997, 12252, $22); //@line 23678
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23679
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 23680
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 23683
  $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 23684
  HEAP32[$92 >> 2] = $6; //@line 23685
  sp = STACKTOP; //@line 23686
  return;
 }
 ___async_unwind = 0; //@line 23689
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 23690
 $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 23691
 HEAP32[$92 >> 2] = $6; //@line 23692
 sp = STACKTOP; //@line 23693
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$130$$$i = 0, $$026$$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$lcssa = 0, $$02864 = 0, $$029$be = 0, $$029$lcssa = 0, $$02963 = 0, $$1 = 0, $$2$i = 0, $$258 = 0, $$3 = 0, $$452 = 0, $$lcssa78 = 0, $$lcssa79 = 0, $$pre = 0, $$sroa$035$0$lcssa = 0, $$sroa$035$060 = 0, $$sroa$035$349 = 0, $$sroa$11$0$lcssa = 0, $$sroa$11$062 = 0, $$sroa$11$351 = 0, $$sroa$637$0$lcssa = 0, $$sroa$637$061 = 0, $$sroa$637$350 = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $11 = 0, $116 = 0, $12 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $135 = 0, $136 = 0, $140 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $66 = 0, $7 = 0, $79 = 0, $81 = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv82 = 0, $not$or$cond$i$i = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 19944
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 19948
   $$029$lcssa = 7; //@line 19948
   $$sroa$035$0$lcssa = 0; //@line 19948
   $$sroa$11$0$lcssa = 0; //@line 19948
   $$sroa$637$0$lcssa = 0; //@line 19948
   $101 = 0; //@line 19948
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 19950
   $10 = $0 + 20 | 0; //@line 19951
   $11 = $0 + 124 | 0; //@line 19952
   $$02864 = 0; //@line 19953
   $$02963 = 7; //@line 19953
   $$lcssa78 = 0; //@line 19953
   $$sroa$035$060 = 0; //@line 19953
   $$sroa$11$062 = 0; //@line 19953
   $$sroa$637$061 = 0; //@line 19953
   $13 = 0; //@line 19953
   while (1) {
    $12 = $9 + $13 | 0; //@line 19955
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02864; //@line 19959
     $$029$lcssa = $$02963; //@line 19959
     $$sroa$035$0$lcssa = $$sroa$035$060; //@line 19959
     $$sroa$11$0$lcssa = $$sroa$11$062; //@line 19959
     $$sroa$637$0$lcssa = $$sroa$637$061; //@line 19959
     $101 = $$lcssa78; //@line 19959
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 19963
    $18 = $17 & 15; //@line 19964
    $19 = ($17 & 255) >>> 4; //@line 19965
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 19973
    $28 = $27 & 65535; //@line 19974
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 19976
    $32 = ($30 & 255) >>> 4; //@line 19978
    $34 = $32 & 7; //@line 19980
    $35 = $30 & 15; //@line 19981
    $36 = $13 + 5 | 0; //@line 19982
    $37 = $36 & 255; //@line 19983
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 19987
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 19993
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 19996
        $$lcssa79 = $28; //@line 19996
       } else {
        $45 = $42 & 255; //@line 19999
        if ($34 << 24 >> 24 != 6) {
         $$258 = $$1; //@line 20001
         $indvars$iv = 0; //@line 20001
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$258; //@line 20008
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$258 & -2 : $$258; //@line 20016
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 20018
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 20023
           $$lcssa79 = $28; //@line 20023
           break L6;
          } else {
           $$258 = $$3; //@line 20021
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 20028
        $52 = $28; //@line 20029
        $indvars$iv82 = 0; //@line 20029
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv82 * 12 | 0) >> 2] | 0)) {
          $140 = $52; //@line 20035
         } else {
          $140 = (1 << ($indvars$iv82 & 15) | $52 & 65535) & 65535; //@line 20042
         }
         $indvars$iv82 = $indvars$iv82 + 1 | 0; //@line 20044
         if ($indvars$iv82 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 20049
          $$lcssa79 = $140; //@line 20049
          break;
         } else {
          $52 = $140; //@line 20047
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 20057
       $$lcssa79 = $28; //@line 20057
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02864 = $37; //@line 20064
     $$02963 = $$029$be; //@line 20064
     $$lcssa78 = $$lcssa79; //@line 20064
     $$sroa$035$060 = $35; //@line 20064
     $$sroa$11$062 = $18; //@line 20064
     $$sroa$637$061 = $19; //@line 20064
     $13 = $36 & 255; //@line 20064
    } else {
     $$028$lcssa = $37; //@line 20066
     $$029$lcssa = $$029$be; //@line 20066
     $$sroa$035$0$lcssa = $35; //@line 20066
     $$sroa$11$0$lcssa = $18; //@line 20066
     $$sroa$637$0$lcssa = $19; //@line 20066
     $101 = $$lcssa79; //@line 20066
     break L1;
    }
   }
  }
 } while (0);
 $66 = $$sroa$637$0$lcssa << 24 >> 24; //@line 20072
 if (($66 | 0) < (HEAPU8[$0 + 92 >> 0] | 0)) {
  if (HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $66 >> 0] | 0) {
   $79 = HEAP8[$1 + 7 >> 0] | 0; //@line 20087
   $81 = HEAP8[$1 + 8 >> 0] | 0; //@line 20089
   if (!(HEAP8[$1 + 6 >> 0] | 0)) {
    if ($$sroa$637$0$lcssa << 24 >> 24 == 15 & $$sroa$11$0$lcssa << 24 >> 24 == 15) {
     $$026$i = $81; //@line 20098
     $$028$i = $79; //@line 20098
    } else {
     $$452 = 0; //@line 20100
     $$sroa$035$349 = HEAP8[$1 + 9 >> 0] | 0; //@line 20100
     $$sroa$11$351 = $81; //@line 20100
     $$sroa$637$350 = $79; //@line 20100
     HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20101
     HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20102
     HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20103
     HEAP8[$5 >> 0] = $$028$lcssa; //@line 20104
     return $$452 | 0; //@line 20105
    }
   } else {
    $$026$i = $$sroa$11$0$lcssa; //@line 20108
    $$028$i = $$sroa$637$0$lcssa; //@line 20108
   }
   if (!($$029$lcssa << 24 >> 24)) {
    $$452 = 0; //@line 20112
    $$sroa$035$349 = $$sroa$035$0$lcssa; //@line 20112
    $$sroa$11$351 = $$026$i; //@line 20112
    $$sroa$637$350 = $$028$i; //@line 20112
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20113
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20114
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20115
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 20116
    return $$452 | 0; //@line 20117
   }
   $93 = HEAP32[$0 + 124 >> 2] | 0; //@line 20124
   L33 : do {
    if ($$028$i << 24 >> 24 >= (HEAP8[$0 + 26 >> 0] | 0) ? $$028$i << 24 >> 24 <= (HEAP8[$0 + 27 >> 0] | 0) : 0) {
     $97 = HEAP8[$0 + 20 >> 0] | 0; //@line 20131
     if (!($97 << 24 >> 24)) {
      label = 26; //@line 20134
     } else {
      $99 = $97 & 255; //@line 20136
      $100 = $101 & 65535; //@line 20137
      $indvars$iv$i31 = 0; //@line 20138
      while (1) {
       if (1 << ($indvars$iv$i31 & 15) & $100 | 0) {
        $107 = HEAP8[$93 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 20146
        if (($107 & 15) <= $$028$i << 24 >> 24 ? ($107 & 255) >>> 4 << 24 >> 24 >= $$028$i << 24 >> 24 : 0) {
         $125 = $$029$lcssa; //@line 20153
         break L33;
        }
       }
       $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 20157
       if ($indvars$iv$i31 >>> 0 >= $99 >>> 0) {
        label = 26; //@line 20162
        break;
       }
      }
     }
    } else {
     label = 26; //@line 20168
    }
   } while (0);
   if ((label | 0) == 26) {
    $125 = $$029$lcssa & -3; //@line 20173
   }
   $116 = HEAP8[$0 + 22 >> 0] | 0; //@line 20176
   $not$or$cond$i$i = $$026$i << 24 >> 24 >= $116 << 24 >> 24 ? $$026$i << 24 >> 24 <= (HEAP8[$0 + 21 >> 0] | 0) : 0; //@line 20181
   $123 = ($116 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 20184
   $$$130$$$i = $123 | $not$or$cond$i$i ? $125 : $125 & -5; //@line 20188
   $$026$$$026$i = $not$or$cond$i$i ? $$026$i : $123 ? $116 : $$026$i; //@line 20189
   $127 = $$$130$$$i << 24 >> 24 == 7; //@line 20190
   $$2$i = $$sroa$035$0$lcssa << 24 >> 24 == 0 & $127 ? 1 : $$sroa$035$0$lcssa; //@line 20193
   if (!$127) {
    $$452 = $$$130$$$i; //@line 20195
    $$sroa$035$349 = $$2$i; //@line 20195
    $$sroa$11$351 = $$026$$$026$i; //@line 20195
    $$sroa$637$350 = $$028$i; //@line 20195
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20196
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20197
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20198
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 20199
    return $$452 | 0; //@line 20200
   }
   $129 = $0 + 116 | 0; //@line 20202
   $131 = $0 + 113 | 0; //@line 20204
   _memset(HEAP32[$129 >> 2] | 0, 0, HEAPU8[$131 >> 0] << 1 | 0) | 0; //@line 20208
   $135 = HEAP32[$129 >> 2] | 0; //@line 20209
   $136 = HEAP8[$131 >> 0] | 0; //@line 20210
   if (!(($135 | 0) != 0 & $136 << 24 >> 24 != 0)) {
    $$452 = 7; //@line 20215
    $$sroa$035$349 = $$2$i; //@line 20215
    $$sroa$11$351 = $$026$$$026$i; //@line 20215
    $$sroa$637$350 = $$028$i; //@line 20215
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20216
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20217
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20218
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 20219
    return $$452 | 0; //@line 20220
   }
   $wide$trip$count$i = $136 & 255; //@line 20222
   $indvars$iv$i = 0; //@line 20223
   do {
    HEAP16[$135 + ($indvars$iv$i << 1) >> 1] = $101; //@line 20226
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 20227
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
   $$452 = 7; //@line 20230
   $$sroa$035$349 = $$2$i; //@line 20230
   $$sroa$11$351 = $$026$$$026$i; //@line 20230
   $$sroa$637$350 = $$028$i; //@line 20230
   HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20236
   HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20237
   HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20238
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 20239
   return $$452 | 0; //@line 20240
  }
 }
 $$452 = $$029$lcssa & -3; //@line 20244
 $$sroa$035$349 = $$sroa$035$0$lcssa; //@line 20244
 $$sroa$11$351 = $$sroa$11$0$lcssa; //@line 20244
 $$sroa$637$350 = $$sroa$637$0$lcssa; //@line 20244
 HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20245
 HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20246
 HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20247
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 20248
 return $$452 | 0; //@line 20249
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 30851
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 30852
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 30853
 $d_sroa_0_0_extract_trunc = $b$0; //@line 30854
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 30855
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 30856
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 30858
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 30861
    HEAP32[$rem + 4 >> 2] = 0; //@line 30862
   }
   $_0$1 = 0; //@line 30864
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 30865
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30866
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 30869
    $_0$0 = 0; //@line 30870
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30871
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 30873
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 30874
   $_0$1 = 0; //@line 30875
   $_0$0 = 0; //@line 30876
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30877
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 30880
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 30885
     HEAP32[$rem + 4 >> 2] = 0; //@line 30886
    }
    $_0$1 = 0; //@line 30888
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 30889
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30890
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 30894
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 30895
    }
    $_0$1 = 0; //@line 30897
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 30898
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30899
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 30901
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 30904
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 30905
    }
    $_0$1 = 0; //@line 30907
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 30908
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30909
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 30912
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 30914
    $58 = 31 - $51 | 0; //@line 30915
    $sr_1_ph = $57; //@line 30916
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 30917
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 30918
    $q_sroa_0_1_ph = 0; //@line 30919
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 30920
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 30924
    $_0$0 = 0; //@line 30925
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30926
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 30928
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 30929
   $_0$1 = 0; //@line 30930
   $_0$0 = 0; //@line 30931
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30932
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 30936
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 30938
     $126 = 31 - $119 | 0; //@line 30939
     $130 = $119 - 31 >> 31; //@line 30940
     $sr_1_ph = $125; //@line 30941
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 30942
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 30943
     $q_sroa_0_1_ph = 0; //@line 30944
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 30945
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 30949
     $_0$0 = 0; //@line 30950
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30951
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 30953
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 30954
    $_0$1 = 0; //@line 30955
    $_0$0 = 0; //@line 30956
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30957
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 30959
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 30962
    $89 = 64 - $88 | 0; //@line 30963
    $91 = 32 - $88 | 0; //@line 30964
    $92 = $91 >> 31; //@line 30965
    $95 = $88 - 32 | 0; //@line 30966
    $105 = $95 >> 31; //@line 30967
    $sr_1_ph = $88; //@line 30968
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 30969
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 30970
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 30971
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 30972
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 30976
    HEAP32[$rem + 4 >> 2] = 0; //@line 30977
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 30980
    $_0$0 = $a$0 | 0 | 0; //@line 30981
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30982
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 30984
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 30985
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 30986
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30987
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 30992
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 30993
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 30994
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 30995
  $carry_0_lcssa$1 = 0; //@line 30996
  $carry_0_lcssa$0 = 0; //@line 30997
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 30999
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 31000
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 31001
  $137$1 = tempRet0; //@line 31002
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 31003
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 31004
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 31005
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 31006
  $sr_1202 = $sr_1_ph; //@line 31007
  $carry_0203 = 0; //@line 31008
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 31010
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 31011
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 31012
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 31013
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 31014
   $150$1 = tempRet0; //@line 31015
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 31016
   $carry_0203 = $151$0 & 1; //@line 31017
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 31019
   $r_sroa_1_1200 = tempRet0; //@line 31020
   $sr_1202 = $sr_1202 - 1 | 0; //@line 31021
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 31033
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 31034
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 31035
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 31036
  $carry_0_lcssa$1 = 0; //@line 31037
  $carry_0_lcssa$0 = $carry_0203; //@line 31038
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 31040
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 31041
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 31044
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 31045
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 31047
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 31048
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31049
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17160
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 17166
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 17175
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 17180
      $19 = $1 + 44 | 0; //@line 17181
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 17190
      $26 = $1 + 52 | 0; //@line 17191
      $27 = $1 + 53 | 0; //@line 17192
      $28 = $1 + 54 | 0; //@line 17193
      $29 = $0 + 8 | 0; //@line 17194
      $30 = $1 + 24 | 0; //@line 17195
      $$081$off0 = 0; //@line 17196
      $$084 = $0 + 16 | 0; //@line 17196
      $$085$off0 = 0; //@line 17196
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 17200
        label = 20; //@line 17201
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 17204
       HEAP8[$27 >> 0] = 0; //@line 17205
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17206
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 17207
       if (___async) {
        label = 12; //@line 17210
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 17213
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 17217
        label = 20; //@line 17218
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 17225
         $$186$off0 = $$085$off0; //@line 17225
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 17234
           label = 20; //@line 17235
           break L10;
          } else {
           $$182$off0 = 1; //@line 17238
           $$186$off0 = $$085$off0; //@line 17238
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 17245
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 17252
          break L10;
         } else {
          $$182$off0 = 1; //@line 17255
          $$186$off0 = 1; //@line 17255
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 17260
       $$084 = $$084 + 8 | 0; //@line 17260
       $$085$off0 = $$186$off0; //@line 17260
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 685; //@line 17263
       HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 17265
       HEAP32[$AsyncCtx15 + 8 >> 2] = $27; //@line 17267
       HEAP32[$AsyncCtx15 + 12 >> 2] = $1; //@line 17269
       HEAP32[$AsyncCtx15 + 16 >> 2] = $2; //@line 17271
       HEAP8[$AsyncCtx15 + 20 >> 0] = $4 & 1; //@line 17274
       HEAP32[$AsyncCtx15 + 24 >> 2] = $25; //@line 17276
       HEAP32[$AsyncCtx15 + 28 >> 2] = $28; //@line 17278
       HEAP32[$AsyncCtx15 + 32 >> 2] = $29; //@line 17280
       HEAP32[$AsyncCtx15 + 36 >> 2] = $30; //@line 17282
       HEAP8[$AsyncCtx15 + 40 >> 0] = $$085$off0 & 1; //@line 17285
       HEAP8[$AsyncCtx15 + 41 >> 0] = $$081$off0 & 1; //@line 17288
       HEAP32[$AsyncCtx15 + 44 >> 2] = $$084; //@line 17290
       HEAP32[$AsyncCtx15 + 48 >> 2] = $13; //@line 17292
       HEAP32[$AsyncCtx15 + 52 >> 2] = $19; //@line 17294
       sp = STACKTOP; //@line 17295
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 17301
         $61 = $1 + 40 | 0; //@line 17302
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 17305
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 17313
           if ($$283$off0) {
            label = 25; //@line 17315
            break;
           } else {
            $69 = 4; //@line 17318
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 17325
        } else {
         $69 = 4; //@line 17327
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 17332
      }
      HEAP32[$19 >> 2] = $69; //@line 17334
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 17343
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 17348
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 17349
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17350
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 17351
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 686; //@line 17354
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 17356
    HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 17358
    HEAP32[$AsyncCtx11 + 12 >> 2] = $3; //@line 17360
    HEAP8[$AsyncCtx11 + 16 >> 0] = $4 & 1; //@line 17363
    HEAP32[$AsyncCtx11 + 20 >> 2] = $73; //@line 17365
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 17367
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 17369
    sp = STACKTOP; //@line 17370
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17373
   $81 = $0 + 24 | 0; //@line 17374
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 17378
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 17382
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 17389
       $$2 = $81; //@line 17390
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 17402
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 17403
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 17408
        $136 = $$2 + 8 | 0; //@line 17409
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 17412
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 689; //@line 17417
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 17419
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 17421
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 17423
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 17425
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 17427
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 17429
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 17431
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 17434
       sp = STACKTOP; //@line 17435
       return;
      }
      $104 = $1 + 24 | 0; //@line 17438
      $105 = $1 + 54 | 0; //@line 17439
      $$1 = $81; //@line 17440
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17456
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 17457
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17462
       $122 = $$1 + 8 | 0; //@line 17463
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 17466
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 688; //@line 17471
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 17473
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 17475
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 17477
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 17479
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 17481
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 17483
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 17485
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 17487
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 17490
      sp = STACKTOP; //@line 17491
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 17495
    $$0 = $81; //@line 17496
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17503
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 17504
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17509
     $100 = $$0 + 8 | 0; //@line 17510
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 17513
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 687; //@line 17518
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 17520
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 17522
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 17524
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 17526
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 17528
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 17530
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 17533
    sp = STACKTOP; //@line 17534
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$pr = 0, $$pre = 0, $$pre16 = 0, $$pre17 = 0, $10 = 0, $101 = 0, $104 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $43 = 0, $53 = 0, $54 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $8 = 0, $80 = 0, $81 = 0, $87 = 0, $90 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9779
 STACKTOP = STACKTOP + 16 | 0; //@line 9780
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9780
 $2 = sp; //@line 9781
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 9786
  STACKTOP = sp; //@line 9787
  return $$0 | 0; //@line 9787
 }
 if (!$1) {
  $$0 = -1003; //@line 9791
  STACKTOP = sp; //@line 9792
  return $$0 | 0; //@line 9792
 }
 $7 = $1 + 12 | 0; //@line 9794
 $8 = HEAP32[$7 >> 2] | 0; //@line 9795
 if (!$8) {
  $$0 = -1003; //@line 9798
  STACKTOP = sp; //@line 9799
  return $$0 | 0; //@line 9799
 }
 $10 = $0 + 2500 | 0; //@line 9801
 if (($10 | 0) != ($1 | 0)) {
  $12 = $0 + 2512 | 0; //@line 9804
  $13 = HEAP32[$12 >> 2] | 0; //@line 9805
  do {
   if (!$13) {
    $25 = $8; //@line 9809
    label = 9; //@line 9810
   } else {
    $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 9813
    $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 9814
    FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 9815
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 338; //@line 9818
     HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 9820
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 9822
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 9824
     HEAP32[$AsyncCtx + 16 >> 2] = $12; //@line 9826
     HEAP32[$AsyncCtx + 20 >> 2] = $10; //@line 9828
     HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 9830
     sp = STACKTOP; //@line 9831
     STACKTOP = sp; //@line 9832
     return 0; //@line 9832
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9834
     $$pre = HEAP32[$7 >> 2] | 0; //@line 9835
     if (!$$pre) {
      $32 = 0; //@line 9838
      break;
     } else {
      $25 = $$pre; //@line 9841
      label = 9; //@line 9842
      break;
     }
    }
   }
  } while (0);
  do {
   if ((label | 0) == 9) {
    $26 = HEAP32[$25 + 4 >> 2] | 0; //@line 9851
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9852
    FUNCTION_TABLE_vii[$26 & 15]($10, $1); //@line 9853
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 339; //@line 9856
     HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 9858
     HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9860
     HEAP32[$AsyncCtx2 + 12 >> 2] = $12; //@line 9862
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 9864
     HEAP32[$AsyncCtx2 + 20 >> 2] = $7; //@line 9866
     sp = STACKTOP; //@line 9867
     STACKTOP = sp; //@line 9868
     return 0; //@line 9868
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9870
     $32 = HEAP32[$7 >> 2] | 0; //@line 9872
     break;
    }
   }
  } while (0);
  HEAP32[$12 >> 2] = $32; //@line 9877
 }
 $33 = $1 + 16 | 0; //@line 9879
 $34 = $1 + 28 | 0; //@line 9880
 $35 = HEAP32[$34 >> 2] | 0; //@line 9881
 if ($35 | 0) {
  $37 = $0 + 2516 | 0; //@line 9884
  if (($37 | 0) != ($33 | 0)) {
   $39 = $0 + 2528 | 0; //@line 9887
   $40 = HEAP32[$39 >> 2] | 0; //@line 9888
   do {
    if (!$40) {
     $53 = $35; //@line 9892
     label = 19; //@line 9893
    } else {
     $43 = HEAP32[$40 + 8 >> 2] | 0; //@line 9896
     $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9897
     FUNCTION_TABLE_vi[$43 & 1023]($37); //@line 9898
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 340; //@line 9901
      HEAP32[$AsyncCtx5 + 4 >> 2] = $37; //@line 9903
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 9905
      HEAP32[$AsyncCtx5 + 12 >> 2] = $39; //@line 9907
      HEAP32[$AsyncCtx5 + 16 >> 2] = $1; //@line 9909
      HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 9911
      HEAP32[$AsyncCtx5 + 24 >> 2] = $2; //@line 9913
      HEAP32[$AsyncCtx5 + 28 >> 2] = $34; //@line 9915
      sp = STACKTOP; //@line 9916
      STACKTOP = sp; //@line 9917
      return 0; //@line 9917
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9919
      $$pre16 = HEAP32[$34 >> 2] | 0; //@line 9920
      if (!$$pre16) {
       $60 = 0; //@line 9923
       break;
      } else {
       $53 = $$pre16; //@line 9926
       label = 19; //@line 9927
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 19) {
     $54 = HEAP32[$53 + 4 >> 2] | 0; //@line 9936
     $AsyncCtx8 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9937
     FUNCTION_TABLE_vii[$54 & 15]($37, $33); //@line 9938
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 341; //@line 9941
      HEAP32[$AsyncCtx8 + 4 >> 2] = $39; //@line 9943
      HEAP32[$AsyncCtx8 + 8 >> 2] = $1; //@line 9945
      HEAP32[$AsyncCtx8 + 12 >> 2] = $0; //@line 9947
      HEAP32[$AsyncCtx8 + 16 >> 2] = $2; //@line 9949
      HEAP32[$AsyncCtx8 + 20 >> 2] = $34; //@line 9951
      sp = STACKTOP; //@line 9952
      STACKTOP = sp; //@line 9953
      return 0; //@line 9953
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9955
      $60 = HEAP32[$34 >> 2] | 0; //@line 9957
      break;
     }
    }
   } while (0);
   HEAP32[$39 >> 2] = $60; //@line 9962
  }
 }
 $61 = $1 + 32 | 0; //@line 9965
 $62 = $1 + 44 | 0; //@line 9966
 $63 = HEAP32[$62 >> 2] | 0; //@line 9967
 if (!$63) {
  $$0 = 0; //@line 9970
  STACKTOP = sp; //@line 9971
  return $$0 | 0; //@line 9971
 }
 $65 = $0 + 2532 | 0; //@line 9973
 if (($65 | 0) == ($61 | 0)) {
  $90 = $63; //@line 9976
  $94 = $0; //@line 9976
  label = 34; //@line 9977
 } else {
  $67 = $0 + 2544 | 0; //@line 9979
  $68 = HEAP32[$67 >> 2] | 0; //@line 9980
  do {
   if (!$68) {
    $80 = $63; //@line 9984
    label = 30; //@line 9985
   } else {
    $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 9988
    $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9989
    FUNCTION_TABLE_vi[$71 & 1023]($65); //@line 9990
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 342; //@line 9993
     HEAP32[$AsyncCtx11 + 4 >> 2] = $62; //@line 9995
     HEAP32[$AsyncCtx11 + 8 >> 2] = $67; //@line 9997
     HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 9999
     HEAP32[$AsyncCtx11 + 16 >> 2] = $65; //@line 10001
     HEAP32[$AsyncCtx11 + 20 >> 2] = $61; //@line 10003
     HEAP32[$AsyncCtx11 + 24 >> 2] = $2; //@line 10005
     sp = STACKTOP; //@line 10006
     STACKTOP = sp; //@line 10007
     return 0; //@line 10007
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10009
     $$pre17 = HEAP32[$62 >> 2] | 0; //@line 10010
     if (!$$pre17) {
      $87 = 0; //@line 10013
      break;
     } else {
      $80 = $$pre17; //@line 10016
      label = 30; //@line 10017
      break;
     }
    }
   }
  } while (0);
  do {
   if ((label | 0) == 30) {
    $81 = HEAP32[$80 + 4 >> 2] | 0; //@line 10026
    $AsyncCtx14 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10027
    FUNCTION_TABLE_vii[$81 & 15]($65, $61); //@line 10028
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 343; //@line 10031
     HEAP32[$AsyncCtx14 + 4 >> 2] = $62; //@line 10033
     HEAP32[$AsyncCtx14 + 8 >> 2] = $67; //@line 10035
     HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 10037
     HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 10039
     HEAP32[$AsyncCtx14 + 20 >> 2] = $61; //@line 10041
     sp = STACKTOP; //@line 10042
     STACKTOP = sp; //@line 10043
     return 0; //@line 10043
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 10045
     $87 = HEAP32[$62 >> 2] | 0; //@line 10047
     break;
    }
   }
  } while (0);
  HEAP32[$67 >> 2] = $87; //@line 10052
  $$pr = HEAP32[$62 >> 2] | 0; //@line 10053
  if (!$$pr) {
   $97 = 0; //@line 10056
   $98 = $0; //@line 10056
  } else {
   $90 = $$pr; //@line 10058
   $94 = $0; //@line 10058
   label = 34; //@line 10059
  }
 }
 do {
  if ((label | 0) == 34) {
   $91 = HEAP32[$90 + 4 >> 2] | 0; //@line 10065
   $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10066
   FUNCTION_TABLE_vii[$91 & 15]($2, $61); //@line 10067
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 344; //@line 10070
    HEAP32[$AsyncCtx17 + 4 >> 2] = $62; //@line 10072
    HEAP32[$AsyncCtx17 + 8 >> 2] = $94; //@line 10074
    HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 10076
    sp = STACKTOP; //@line 10077
    STACKTOP = sp; //@line 10078
    return 0; //@line 10078
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 10080
    $97 = HEAP32[$62 >> 2] | 0; //@line 10082
    $98 = $94; //@line 10082
    break;
   }
  }
 } while (0);
 $96 = $2 + 12 | 0; //@line 10087
 HEAP32[$96 >> 2] = $97; //@line 10088
 $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10089
 __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($98, $2); //@line 10090
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 345; //@line 10093
  HEAP32[$AsyncCtx24 + 4 >> 2] = $96; //@line 10095
  HEAP32[$AsyncCtx24 + 8 >> 2] = $2; //@line 10097
  sp = STACKTOP; //@line 10098
  STACKTOP = sp; //@line 10099
  return 0; //@line 10099
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 10101
 $101 = HEAP32[$96 >> 2] | 0; //@line 10102
 if (!$101) {
  $$0 = 0; //@line 10105
  STACKTOP = sp; //@line 10106
  return $$0 | 0; //@line 10106
 }
 $104 = HEAP32[$101 + 8 >> 2] | 0; //@line 10109
 $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10110
 FUNCTION_TABLE_vi[$104 & 1023]($2); //@line 10111
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 346; //@line 10114
  sp = STACKTOP; //@line 10115
  STACKTOP = sp; //@line 10116
  return 0; //@line 10116
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 10118
 $$0 = 0; //@line 10119
 STACKTOP = sp; //@line 10120
 return $$0 | 0; //@line 10120
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7021
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7023
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7025
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7027
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7029
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7031
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7033
 $$pre = HEAP32[$2 >> 2] | 0; //@line 7034
 if ($$pre | 0) {
  $15 = HEAP32[$$pre + 4 >> 2] | 0; //@line 7038
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 7039
  FUNCTION_TABLE_vii[$15 & 15]($10, $6); //@line 7040
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 339; //@line 7043
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 7044
   HEAP32[$16 >> 2] = $4; //@line 7045
   $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 7046
   HEAP32[$17 >> 2] = $6; //@line 7047
   $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 7048
   HEAP32[$18 >> 2] = $8; //@line 7049
   $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 7050
   HEAP32[$19 >> 2] = $12; //@line 7051
   $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 7052
   HEAP32[$20 >> 2] = $2; //@line 7053
   sp = STACKTOP; //@line 7054
   return;
  }
  ___async_unwind = 0; //@line 7057
  HEAP32[$ReallocAsyncCtx2 >> 2] = 339; //@line 7058
  $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 7059
  HEAP32[$16 >> 2] = $4; //@line 7060
  $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 7061
  HEAP32[$17 >> 2] = $6; //@line 7062
  $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 7063
  HEAP32[$18 >> 2] = $8; //@line 7064
  $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 7065
  HEAP32[$19 >> 2] = $12; //@line 7066
  $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 7067
  HEAP32[$20 >> 2] = $2; //@line 7068
  sp = STACKTOP; //@line 7069
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 7072
 $21 = $6 + 16 | 0; //@line 7073
 $22 = $6 + 28 | 0; //@line 7074
 $23 = HEAP32[$22 >> 2] | 0; //@line 7075
 if ($23 | 0) {
  $25 = $4 + 2516 | 0; //@line 7078
  if (($25 | 0) != ($21 | 0)) {
   $27 = $4 + 2528 | 0; //@line 7081
   $28 = HEAP32[$27 >> 2] | 0; //@line 7082
   if (!$28) {
    $40 = HEAP32[$23 + 4 >> 2] | 0; //@line 7086
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 7087
    FUNCTION_TABLE_vii[$40 & 15]($25, $21); //@line 7088
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 341; //@line 7091
     $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 7092
     HEAP32[$41 >> 2] = $27; //@line 7093
     $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 7094
     HEAP32[$42 >> 2] = $6; //@line 7095
     $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 7096
     HEAP32[$43 >> 2] = $4; //@line 7097
     $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 7098
     HEAP32[$44 >> 2] = $12; //@line 7099
     $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 7100
     HEAP32[$45 >> 2] = $22; //@line 7101
     sp = STACKTOP; //@line 7102
     return;
    }
    ___async_unwind = 0; //@line 7105
    HEAP32[$ReallocAsyncCtx4 >> 2] = 341; //@line 7106
    $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 7107
    HEAP32[$41 >> 2] = $27; //@line 7108
    $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 7109
    HEAP32[$42 >> 2] = $6; //@line 7110
    $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 7111
    HEAP32[$43 >> 2] = $4; //@line 7112
    $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 7113
    HEAP32[$44 >> 2] = $12; //@line 7114
    $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 7115
    HEAP32[$45 >> 2] = $22; //@line 7116
    sp = STACKTOP; //@line 7117
    return;
   } else {
    $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 7121
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 7122
    FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 7123
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 340; //@line 7126
     $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 7127
     HEAP32[$32 >> 2] = $25; //@line 7128
     $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 7129
     HEAP32[$33 >> 2] = $21; //@line 7130
     $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 7131
     HEAP32[$34 >> 2] = $27; //@line 7132
     $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 7133
     HEAP32[$35 >> 2] = $6; //@line 7134
     $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 7135
     HEAP32[$36 >> 2] = $4; //@line 7136
     $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 7137
     HEAP32[$37 >> 2] = $12; //@line 7138
     $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 7139
     HEAP32[$38 >> 2] = $22; //@line 7140
     sp = STACKTOP; //@line 7141
     return;
    }
    ___async_unwind = 0; //@line 7144
    HEAP32[$ReallocAsyncCtx3 >> 2] = 340; //@line 7145
    $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 7146
    HEAP32[$32 >> 2] = $25; //@line 7147
    $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 7148
    HEAP32[$33 >> 2] = $21; //@line 7149
    $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 7150
    HEAP32[$34 >> 2] = $27; //@line 7151
    $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 7152
    HEAP32[$35 >> 2] = $6; //@line 7153
    $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 7154
    HEAP32[$36 >> 2] = $4; //@line 7155
    $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 7156
    HEAP32[$37 >> 2] = $12; //@line 7157
    $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 7158
    HEAP32[$38 >> 2] = $22; //@line 7159
    sp = STACKTOP; //@line 7160
    return;
   }
  }
 }
 $46 = $6 + 32 | 0; //@line 7165
 $47 = $6 + 44 | 0; //@line 7166
 $48 = HEAP32[$47 >> 2] | 0; //@line 7167
 if (!$48) {
  HEAP32[___async_retval >> 2] = 0; //@line 7171
  return;
 }
 $50 = $4 + 2532 | 0; //@line 7174
 if (($50 | 0) == ($46 | 0)) {
  $71 = HEAP32[$48 + 4 >> 2] | 0; //@line 7178
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 7179
  FUNCTION_TABLE_vii[$71 & 15]($12, $46); //@line 7180
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 7183
   $72 = $ReallocAsyncCtx7 + 4 | 0; //@line 7184
   HEAP32[$72 >> 2] = $47; //@line 7185
   $73 = $ReallocAsyncCtx7 + 8 | 0; //@line 7186
   HEAP32[$73 >> 2] = $4; //@line 7187
   $74 = $ReallocAsyncCtx7 + 12 | 0; //@line 7188
   HEAP32[$74 >> 2] = $12; //@line 7189
   sp = STACKTOP; //@line 7190
   return;
  }
  ___async_unwind = 0; //@line 7193
  HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 7194
  $72 = $ReallocAsyncCtx7 + 4 | 0; //@line 7195
  HEAP32[$72 >> 2] = $47; //@line 7196
  $73 = $ReallocAsyncCtx7 + 8 | 0; //@line 7197
  HEAP32[$73 >> 2] = $4; //@line 7198
  $74 = $ReallocAsyncCtx7 + 12 | 0; //@line 7199
  HEAP32[$74 >> 2] = $12; //@line 7200
  sp = STACKTOP; //@line 7201
  return;
 }
 $52 = $4 + 2544 | 0; //@line 7204
 $53 = HEAP32[$52 >> 2] | 0; //@line 7205
 if (!$53) {
  $64 = HEAP32[$48 + 4 >> 2] | 0; //@line 7209
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 7210
  FUNCTION_TABLE_vii[$64 & 15]($50, $46); //@line 7211
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 7214
   $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 7215
   HEAP32[$65 >> 2] = $47; //@line 7216
   $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 7217
   HEAP32[$66 >> 2] = $52; //@line 7218
   $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 7219
   HEAP32[$67 >> 2] = $4; //@line 7220
   $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 7221
   HEAP32[$68 >> 2] = $12; //@line 7222
   $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 7223
   HEAP32[$69 >> 2] = $46; //@line 7224
   sp = STACKTOP; //@line 7225
   return;
  }
  ___async_unwind = 0; //@line 7228
  HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 7229
  $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 7230
  HEAP32[$65 >> 2] = $47; //@line 7231
  $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 7232
  HEAP32[$66 >> 2] = $52; //@line 7233
  $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 7234
  HEAP32[$67 >> 2] = $4; //@line 7235
  $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 7236
  HEAP32[$68 >> 2] = $12; //@line 7237
  $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 7238
  HEAP32[$69 >> 2] = $46; //@line 7239
  sp = STACKTOP; //@line 7240
  return;
 } else {
  $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 7244
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 7245
  FUNCTION_TABLE_vi[$56 & 1023]($50); //@line 7246
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 7249
   $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 7250
   HEAP32[$57 >> 2] = $47; //@line 7251
   $58 = $ReallocAsyncCtx5 + 8 | 0; //@line 7252
   HEAP32[$58 >> 2] = $52; //@line 7253
   $59 = $ReallocAsyncCtx5 + 12 | 0; //@line 7254
   HEAP32[$59 >> 2] = $4; //@line 7255
   $60 = $ReallocAsyncCtx5 + 16 | 0; //@line 7256
   HEAP32[$60 >> 2] = $50; //@line 7257
   $61 = $ReallocAsyncCtx5 + 20 | 0; //@line 7258
   HEAP32[$61 >> 2] = $46; //@line 7259
   $62 = $ReallocAsyncCtx5 + 24 | 0; //@line 7260
   HEAP32[$62 >> 2] = $12; //@line 7261
   sp = STACKTOP; //@line 7262
   return;
  }
  ___async_unwind = 0; //@line 7265
  HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 7266
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 7267
  HEAP32[$57 >> 2] = $47; //@line 7268
  $58 = $ReallocAsyncCtx5 + 8 | 0; //@line 7269
  HEAP32[$58 >> 2] = $52; //@line 7270
  $59 = $ReallocAsyncCtx5 + 12 | 0; //@line 7271
  HEAP32[$59 >> 2] = $4; //@line 7272
  $60 = $ReallocAsyncCtx5 + 16 | 0; //@line 7273
  HEAP32[$60 >> 2] = $50; //@line 7274
  $61 = $ReallocAsyncCtx5 + 20 | 0; //@line 7275
  HEAP32[$61 >> 2] = $46; //@line 7276
  $62 = $ReallocAsyncCtx5 + 24 | 0; //@line 7277
  HEAP32[$62 >> 2] = $12; //@line 7278
  sp = STACKTOP; //@line 7279
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23339
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23341
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23343
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23345
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23347
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23349
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23351
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23353
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23355
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23357
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23359
 $$pre = HEAP32[$18 >> 2] | 0; //@line 23360
 if ($$pre | 0) {
  $23 = HEAP32[$$pre + 4 >> 2] | 0; //@line 23364
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 23365
  FUNCTION_TABLE_vii[$23 & 15]($10, $14); //@line 23366
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 168; //@line 23369
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 23370
   HEAP32[$24 >> 2] = $2; //@line 23371
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 23372
   HEAP32[$25 >> 2] = $4; //@line 23373
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 23374
   HEAP32[$26 >> 2] = $6; //@line 23375
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 23376
   HEAP32[$27 >> 2] = $8; //@line 23377
   $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 23378
   HEAP32[$28 >> 2] = $10; //@line 23379
   $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 23380
   HEAP32[$29 >> 2] = $12; //@line 23381
   $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 23382
   HEAP32[$30 >> 2] = $14; //@line 23383
   $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 23384
   HEAP32[$31 >> 2] = $16; //@line 23385
   $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 23386
   HEAP32[$32 >> 2] = $18; //@line 23387
   $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 23388
   HEAP32[$33 >> 2] = $20; //@line 23389
   sp = STACKTOP; //@line 23390
   return;
  }
  ___async_unwind = 0; //@line 23393
  HEAP32[$ReallocAsyncCtx2 >> 2] = 168; //@line 23394
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 23395
  HEAP32[$24 >> 2] = $2; //@line 23396
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 23397
  HEAP32[$25 >> 2] = $4; //@line 23398
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 23399
  HEAP32[$26 >> 2] = $6; //@line 23400
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 23401
  HEAP32[$27 >> 2] = $8; //@line 23402
  $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 23403
  HEAP32[$28 >> 2] = $10; //@line 23404
  $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 23405
  HEAP32[$29 >> 2] = $12; //@line 23406
  $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 23407
  HEAP32[$30 >> 2] = $14; //@line 23408
  $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 23409
  HEAP32[$31 >> 2] = $16; //@line 23410
  $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 23411
  HEAP32[$32 >> 2] = $18; //@line 23412
  $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 23413
  HEAP32[$33 >> 2] = $20; //@line 23414
  sp = STACKTOP; //@line 23415
  return;
 }
 HEAP32[$20 >> 2] = 0; //@line 23418
 $34 = $16 + 12 | 0; //@line 23419
 HEAP32[$16 >> 2] = 6; //@line 23420
 HEAP32[$16 + 4 >> 2] = 0; //@line 23422
 HEAP32[$16 + 8 >> 2] = $4; //@line 23424
 HEAP32[$34 >> 2] = 836; //@line 23425
 $35 = $4 + 2416 | 0; //@line 23426
 if (($35 | 0) == ($16 | 0)) {
  $64 = HEAP32[211] | 0; //@line 23430
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 23431
  FUNCTION_TABLE_vi[$64 & 1023]($16); //@line 23432
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 23435
   $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 23436
   HEAP32[$65 >> 2] = $2; //@line 23437
   $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 23438
   HEAP32[$66 >> 2] = $4; //@line 23439
   $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 23440
   HEAP32[$67 >> 2] = $6; //@line 23441
   $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 23442
   HEAP32[$68 >> 2] = $8; //@line 23443
   $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 23444
   HEAP32[$69 >> 2] = $10; //@line 23445
   $70 = $ReallocAsyncCtx6 + 24 | 0; //@line 23446
   HEAP32[$70 >> 2] = $16; //@line 23447
   $71 = $ReallocAsyncCtx6 + 28 | 0; //@line 23448
   HEAP32[$71 >> 2] = $12; //@line 23449
   sp = STACKTOP; //@line 23450
   return;
  }
  ___async_unwind = 0; //@line 23453
  HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 23454
  $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 23455
  HEAP32[$65 >> 2] = $2; //@line 23456
  $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 23457
  HEAP32[$66 >> 2] = $4; //@line 23458
  $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 23459
  HEAP32[$67 >> 2] = $6; //@line 23460
  $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 23461
  HEAP32[$68 >> 2] = $8; //@line 23462
  $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 23463
  HEAP32[$69 >> 2] = $10; //@line 23464
  $70 = $ReallocAsyncCtx6 + 24 | 0; //@line 23465
  HEAP32[$70 >> 2] = $16; //@line 23466
  $71 = $ReallocAsyncCtx6 + 28 | 0; //@line 23467
  HEAP32[$71 >> 2] = $12; //@line 23468
  sp = STACKTOP; //@line 23469
  return;
 }
 $37 = $4 + 2428 | 0; //@line 23472
 $38 = HEAP32[$37 >> 2] | 0; //@line 23473
 if (!$38) {
  $53 = HEAP32[210] | 0; //@line 23477
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 23478
  FUNCTION_TABLE_vii[$53 & 15]($35, $16); //@line 23479
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 23482
   $54 = $ReallocAsyncCtx5 + 4 | 0; //@line 23483
   HEAP32[$54 >> 2] = $2; //@line 23484
   $55 = $ReallocAsyncCtx5 + 8 | 0; //@line 23485
   HEAP32[$55 >> 2] = $4; //@line 23486
   $56 = $ReallocAsyncCtx5 + 12 | 0; //@line 23487
   HEAP32[$56 >> 2] = $6; //@line 23488
   $57 = $ReallocAsyncCtx5 + 16 | 0; //@line 23489
   HEAP32[$57 >> 2] = $8; //@line 23490
   $58 = $ReallocAsyncCtx5 + 20 | 0; //@line 23491
   HEAP32[$58 >> 2] = $10; //@line 23492
   $59 = $ReallocAsyncCtx5 + 24 | 0; //@line 23493
   HEAP32[$59 >> 2] = $16; //@line 23494
   $60 = $ReallocAsyncCtx5 + 28 | 0; //@line 23495
   HEAP32[$60 >> 2] = $12; //@line 23496
   $61 = $ReallocAsyncCtx5 + 32 | 0; //@line 23497
   HEAP32[$61 >> 2] = $34; //@line 23498
   $62 = $ReallocAsyncCtx5 + 36 | 0; //@line 23499
   HEAP32[$62 >> 2] = $37; //@line 23500
   sp = STACKTOP; //@line 23501
   return;
  }
  ___async_unwind = 0; //@line 23504
  HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 23505
  $54 = $ReallocAsyncCtx5 + 4 | 0; //@line 23506
  HEAP32[$54 >> 2] = $2; //@line 23507
  $55 = $ReallocAsyncCtx5 + 8 | 0; //@line 23508
  HEAP32[$55 >> 2] = $4; //@line 23509
  $56 = $ReallocAsyncCtx5 + 12 | 0; //@line 23510
  HEAP32[$56 >> 2] = $6; //@line 23511
  $57 = $ReallocAsyncCtx5 + 16 | 0; //@line 23512
  HEAP32[$57 >> 2] = $8; //@line 23513
  $58 = $ReallocAsyncCtx5 + 20 | 0; //@line 23514
  HEAP32[$58 >> 2] = $10; //@line 23515
  $59 = $ReallocAsyncCtx5 + 24 | 0; //@line 23516
  HEAP32[$59 >> 2] = $16; //@line 23517
  $60 = $ReallocAsyncCtx5 + 28 | 0; //@line 23518
  HEAP32[$60 >> 2] = $12; //@line 23519
  $61 = $ReallocAsyncCtx5 + 32 | 0; //@line 23520
  HEAP32[$61 >> 2] = $34; //@line 23521
  $62 = $ReallocAsyncCtx5 + 36 | 0; //@line 23522
  HEAP32[$62 >> 2] = $37; //@line 23523
  sp = STACKTOP; //@line 23524
  return;
 } else {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 23528
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 23529
  FUNCTION_TABLE_vi[$41 & 1023]($35); //@line 23530
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 23533
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 23534
   HEAP32[$42 >> 2] = $2; //@line 23535
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 23536
   HEAP32[$43 >> 2] = $4; //@line 23537
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 23538
   HEAP32[$44 >> 2] = $6; //@line 23539
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 23540
   HEAP32[$45 >> 2] = $8; //@line 23541
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 23542
   HEAP32[$46 >> 2] = $10; //@line 23543
   $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 23544
   HEAP32[$47 >> 2] = $16; //@line 23545
   $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 23546
   HEAP32[$48 >> 2] = $12; //@line 23547
   $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 23548
   HEAP32[$49 >> 2] = $34; //@line 23549
   $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 23550
   HEAP32[$50 >> 2] = $37; //@line 23551
   $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 23552
   HEAP32[$51 >> 2] = $35; //@line 23553
   sp = STACKTOP; //@line 23554
   return;
  }
  ___async_unwind = 0; //@line 23557
  HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 23558
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 23559
  HEAP32[$42 >> 2] = $2; //@line 23560
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 23561
  HEAP32[$43 >> 2] = $4; //@line 23562
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 23563
  HEAP32[$44 >> 2] = $6; //@line 23564
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 23565
  HEAP32[$45 >> 2] = $8; //@line 23566
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 23567
  HEAP32[$46 >> 2] = $10; //@line 23568
  $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 23569
  HEAP32[$47 >> 2] = $16; //@line 23570
  $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 23571
  HEAP32[$48 >> 2] = $12; //@line 23572
  $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 23573
  HEAP32[$49 >> 2] = $34; //@line 23574
  $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 23575
  HEAP32[$50 >> 2] = $37; //@line 23576
  $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 23577
  HEAP32[$51 >> 2] = $35; //@line 23578
  sp = STACKTOP; //@line 23579
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $106 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $79 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1960
 HEAP32[$0 >> 2] = 496; //@line 1961
 $19 = $0 + 4 | 0; //@line 1962
 HEAP32[$19 >> 2] = 0; //@line 1963
 HEAP32[$19 + 4 >> 2] = 0; //@line 1963
 HEAP32[$19 + 8 >> 2] = 0; //@line 1963
 HEAP32[$19 + 12 >> 2] = 0; //@line 1963
 HEAP32[$19 + 16 >> 2] = 0; //@line 1963
 HEAP32[$19 + 20 >> 2] = 0; //@line 1963
 _gpio_init_out_ex($19, $4, 1); //@line 1964
 $20 = $0 + 28 | 0; //@line 1965
 HEAP32[$20 >> 2] = 0; //@line 1966
 HEAP32[$20 + 4 >> 2] = 0; //@line 1966
 HEAP32[$20 + 8 >> 2] = 0; //@line 1966
 HEAP32[$20 + 12 >> 2] = 0; //@line 1966
 HEAP32[$20 + 16 >> 2] = 0; //@line 1966
 HEAP32[$20 + 20 >> 2] = 0; //@line 1966
 _gpio_init_in($20, $5); //@line 1967
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 1969
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 1971
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 1973
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 1975
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 1977
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 1979
 $27 = $0 + 484 | 0; //@line 1980
 HEAP32[$27 >> 2] = 0; //@line 1981
 HEAP32[$27 + 4 >> 2] = 0; //@line 1981
 HEAP32[$27 + 8 >> 2] = 0; //@line 1981
 HEAP32[$27 + 12 >> 2] = 0; //@line 1981
 HEAP32[$27 + 16 >> 2] = 0; //@line 1981
 HEAP32[$27 + 20 >> 2] = 0; //@line 1981
 _gpio_init_out_ex($27, $12, 0); //@line 1982
 $28 = $0 + 508 | 0; //@line 1983
 HEAP32[$28 >> 2] = 0; //@line 1984
 HEAP32[$28 + 4 >> 2] = 0; //@line 1984
 HEAP32[$28 + 8 >> 2] = 0; //@line 1984
 HEAP32[$28 + 12 >> 2] = 0; //@line 1984
 HEAP32[$28 + 16 >> 2] = 0; //@line 1984
 HEAP32[$28 + 20 >> 2] = 0; //@line 1984
 _gpio_init_out_ex($28, $13, 0); //@line 1985
 $29 = $0 + 532 | 0; //@line 1986
 HEAP32[$29 >> 2] = 0; //@line 1987
 HEAP32[$29 + 4 >> 2] = 0; //@line 1987
 HEAP32[$29 + 8 >> 2] = 0; //@line 1987
 HEAP32[$29 + 12 >> 2] = 0; //@line 1987
 HEAP32[$29 + 16 >> 2] = 0; //@line 1987
 HEAP32[$29 + 20 >> 2] = 0; //@line 1987
 _gpio_init_out_ex($29, $14, 0); //@line 1988
 $30 = $0 + 556 | 0; //@line 1989
 HEAP32[$30 >> 2] = 0; //@line 1990
 HEAP32[$30 + 4 >> 2] = 0; //@line 1990
 HEAP32[$30 + 8 >> 2] = 0; //@line 1990
 HEAP32[$30 + 12 >> 2] = 0; //@line 1990
 HEAP32[$30 + 16 >> 2] = 0; //@line 1990
 HEAP32[$30 + 20 >> 2] = 0; //@line 1990
 _gpio_init_out_ex($30, $15, 0); //@line 1991
 $31 = $0 + 580 | 0; //@line 1992
 HEAP32[$31 >> 2] = 0; //@line 1993
 HEAP32[$31 + 4 >> 2] = 0; //@line 1993
 HEAP32[$31 + 8 >> 2] = 0; //@line 1993
 HEAP32[$31 + 12 >> 2] = 0; //@line 1993
 HEAP32[$31 + 16 >> 2] = 0; //@line 1993
 HEAP32[$31 + 20 >> 2] = 0; //@line 1993
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 1994
 $32 = $0 + 604 | 0; //@line 1995
 HEAP32[$32 >> 2] = 0; //@line 1996
 HEAP32[$32 + 4 >> 2] = 0; //@line 1996
 HEAP32[$32 + 8 >> 2] = 0; //@line 1996
 HEAP32[$32 + 12 >> 2] = 0; //@line 1996
 HEAP32[$32 + 16 >> 2] = 0; //@line 1996
 HEAP32[$32 + 20 >> 2] = 0; //@line 1996
 _gpio_init_out($32, $17); //@line 1997
 $33 = $0 + 628 | 0; //@line 1998
 HEAP32[$33 >> 2] = 0; //@line 1999
 HEAP32[$33 + 4 >> 2] = 0; //@line 1999
 HEAP32[$33 + 8 >> 2] = 0; //@line 1999
 HEAP32[$33 + 12 >> 2] = 0; //@line 1999
 HEAP32[$33 + 16 >> 2] = 0; //@line 1999
 HEAP32[$33 + 20 >> 2] = 0; //@line 1999
 _gpio_init_out($33, $18); //@line 2000
 $34 = $0 + 1048 | 0; //@line 2001
 $AsyncCtx11 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2002
 __ZN4mbed10TimerEventC2Ev($34); //@line 2003
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 94; //@line 2006
  HEAP32[$AsyncCtx11 + 4 >> 2] = $34; //@line 2008
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2010
  HEAP32[$AsyncCtx11 + 12 >> 2] = $16; //@line 2012
  HEAP32[$AsyncCtx11 + 16 >> 2] = $17; //@line 2014
  HEAP32[$AsyncCtx11 + 20 >> 2] = $12; //@line 2016
  HEAP32[$AsyncCtx11 + 24 >> 2] = $13; //@line 2018
  HEAP32[$AsyncCtx11 + 28 >> 2] = $15; //@line 2020
  HEAP32[$AsyncCtx11 + 32 >> 2] = $14; //@line 2022
  HEAP32[$AsyncCtx11 + 36 >> 2] = $18; //@line 2024
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 2026
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 2028
  HEAP32[$AsyncCtx11 + 48 >> 2] = $33; //@line 2030
  sp = STACKTOP; //@line 2031
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2034
 $47 = $0 + 1088 | 0; //@line 2035
 HEAP32[$47 >> 2] = 0; //@line 2036
 HEAP32[$47 + 4 >> 2] = 0; //@line 2036
 HEAP32[$47 + 8 >> 2] = 0; //@line 2036
 HEAP32[$47 + 12 >> 2] = 0; //@line 2036
 HEAP8[$0 + 1104 >> 0] = 1; //@line 2038
 HEAP32[$34 >> 2] = 620; //@line 2039
 $49 = $0 + 1112 | 0; //@line 2040
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2041
 __ZN4mbed10TimerEventC2Ev($49); //@line 2042
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 95; //@line 2045
  HEAP32[$AsyncCtx7 + 4 >> 2] = $49; //@line 2047
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 2049
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 2051
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 2053
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 2055
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 2057
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 2059
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 2061
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 2063
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 2065
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 2067
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 2069
  sp = STACKTOP; //@line 2070
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2073
 $62 = $0 + 1152 | 0; //@line 2074
 HEAP32[$62 >> 2] = 0; //@line 2075
 HEAP32[$62 + 4 >> 2] = 0; //@line 2075
 HEAP32[$62 + 8 >> 2] = 0; //@line 2075
 HEAP32[$62 + 12 >> 2] = 0; //@line 2075
 HEAP8[$0 + 1168 >> 0] = 1; //@line 2077
 HEAP32[$49 >> 2] = 620; //@line 2078
 $64 = $0 + 1176 | 0; //@line 2079
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2080
 __ZN4mbed10TimerEventC2Ev($64); //@line 2081
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 96; //@line 2084
  HEAP32[$AsyncCtx3 + 4 >> 2] = $64; //@line 2086
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 2088
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 2090
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 2092
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 2094
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 2096
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 2098
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 2100
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 2102
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 2104
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 2106
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 2108
  sp = STACKTOP; //@line 2109
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2112
 $77 = $0 + 1216 | 0; //@line 2113
 HEAP32[$77 >> 2] = 0; //@line 2114
 HEAP32[$77 + 4 >> 2] = 0; //@line 2114
 HEAP32[$77 + 8 >> 2] = 0; //@line 2114
 HEAP32[$77 + 12 >> 2] = 0; //@line 2114
 HEAP8[$0 + 1232 >> 0] = 1; //@line 2116
 HEAP32[$64 >> 2] = 620; //@line 2117
 $79 = $0 + 1240 | 0; //@line 2118
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 2119
 __ZN4mbed10TimerEventC2Ev($79); //@line 2120
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 97; //@line 2123
  HEAP32[$AsyncCtx + 4 >> 2] = $79; //@line 2125
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2127
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 2129
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 2131
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 2133
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 2135
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 2137
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 2139
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 2141
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 2143
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 2145
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 2147
  sp = STACKTOP; //@line 2148
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2151
 $92 = $0 + 1280 | 0; //@line 2152
 HEAP32[$92 >> 2] = 0; //@line 2153
 HEAP32[$92 + 4 >> 2] = 0; //@line 2153
 HEAP32[$92 + 8 >> 2] = 0; //@line 2153
 HEAP32[$92 + 12 >> 2] = 0; //@line 2153
 HEAP8[$0 + 1296 >> 0] = 1; //@line 2155
 HEAP32[$79 >> 2] = 620; //@line 2156
 HEAP32[$0 + 668 >> 2] = $16; //@line 2158
 HEAP32[$0 + 672 >> 2] = $17; //@line 2160
 HEAP32[$0 + 652 >> 2] = $12; //@line 2162
 HEAP32[$0 + 656 >> 2] = $13; //@line 2164
 HEAP32[$0 + 664 >> 2] = $15; //@line 2166
 HEAP32[$0 + 660 >> 2] = $14; //@line 2168
 HEAP32[$0 + 676 >> 2] = $18; //@line 2170
 HEAP32[$0 + 680 >> 2] = $10; //@line 2172
 HEAP32[$0 + 684 >> 2] = $11; //@line 2174
 HEAP32[$0 + 788 >> 2] = 0; //@line 2176
 if (($18 | 0) == -1) {
  $106 = _emscripten_asm_const_ii(5, $0 | 0) | 0; //@line 2179
  return;
 }
 _emscripten_asm_const_iii(4, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 2183
 $106 = _emscripten_asm_const_ii(5, $0 | 0) | 0; //@line 2184
 return;
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 2148
 STACKTOP = STACKTOP + 16 | 0; //@line 2149
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2149
 $6 = sp; //@line 2150
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 2154
  STACKTOP = sp; //@line 2155
  return $$044 | 0; //@line 2155
 }
 $10 = ($2 | 0) == 0; //@line 2158
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 2161
   STACKTOP = sp; //@line 2162
   return $$044 | 0; //@line 2162
  }
  $109 = $3 + 1 | 0; //@line 2164
  $110 = $3 + 2 | 0; //@line 2165
  $111 = $3 + 3 | 0; //@line 2166
  $112 = $3 + 4 | 0; //@line 2167
  $113 = $3 + 5 | 0; //@line 2168
  $114 = $3 + 6 | 0; //@line 2169
  $115 = $3 + 7 | 0; //@line 2170
  $116 = $3 + 8 | 0; //@line 2171
  $117 = $3 + 9 | 0; //@line 2172
  $118 = $3 + 10 | 0; //@line 2173
  $119 = $3 + 11 | 0; //@line 2174
  $120 = $3 + 12 | 0; //@line 2175
  $121 = $3 + 13 | 0; //@line 2176
  $122 = $3 + 14 | 0; //@line 2177
  $123 = $3 + 15 | 0; //@line 2178
  $$04056 = $5; //@line 2179
  $$04255 = $4; //@line 2179
  $$04554 = $2; //@line 2179
  while (1) {
   dest = $6; //@line 2181
   src = $$04255; //@line 2181
   stop = dest + 16 | 0; //@line 2181
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2181
    dest = dest + 1 | 0; //@line 2181
    src = src + 1 | 0; //@line 2181
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 2182
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 2186
   $127 = $$04056 + 1 | 0; //@line 2187
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 2191
   $131 = $$04056 + 2 | 0; //@line 2192
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 2196
   $135 = $$04056 + 3 | 0; //@line 2197
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 2201
   $139 = $$04056 + 4 | 0; //@line 2202
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 2206
   $143 = $$04056 + 5 | 0; //@line 2207
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 2211
   $147 = $$04056 + 6 | 0; //@line 2212
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 2216
   $151 = $$04056 + 7 | 0; //@line 2217
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 2221
   $155 = $$04056 + 8 | 0; //@line 2222
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 2226
   $159 = $$04056 + 9 | 0; //@line 2227
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 2231
   $163 = $$04056 + 10 | 0; //@line 2232
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 2236
   $167 = $$04056 + 11 | 0; //@line 2237
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 2241
   $171 = $$04056 + 12 | 0; //@line 2242
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 2246
   $175 = $$04056 + 13 | 0; //@line 2247
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 2251
   $179 = $$04056 + 14 | 0; //@line 2252
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 2256
   $183 = $$04056 + 15 | 0; //@line 2257
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 2261
   dest = $3; //@line 2262
   src = $6; //@line 2262
   stop = dest + 16 | 0; //@line 2262
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2262
    dest = dest + 1 | 0; //@line 2262
    src = src + 1 | 0; //@line 2262
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 2265
   if (!$$04554) {
    $$044 = 0; //@line 2268
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 2271
    $$04255 = $$04255 + 16 | 0; //@line 2271
   }
  }
  STACKTOP = sp; //@line 2274
  return $$044 | 0; //@line 2274
 }
 if ($10) {
  $$044 = 0; //@line 2277
  STACKTOP = sp; //@line 2278
  return $$044 | 0; //@line 2278
 }
 $12 = $3 + 1 | 0; //@line 2281
 $13 = $3 + 2 | 0; //@line 2282
 $14 = $3 + 3 | 0; //@line 2283
 $15 = $3 + 4 | 0; //@line 2284
 $16 = $3 + 5 | 0; //@line 2285
 $17 = $3 + 6 | 0; //@line 2286
 $18 = $3 + 7 | 0; //@line 2287
 $19 = $3 + 8 | 0; //@line 2288
 $20 = $3 + 9 | 0; //@line 2289
 $21 = $3 + 10 | 0; //@line 2290
 $22 = $3 + 11 | 0; //@line 2291
 $23 = $3 + 12 | 0; //@line 2292
 $24 = $3 + 13 | 0; //@line 2293
 $25 = $3 + 14 | 0; //@line 2294
 $26 = $3 + 15 | 0; //@line 2295
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 2297
  $$14359$us = $4; //@line 2297
  $$14658$us = $2; //@line 2297
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 2302
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 2308
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 2314
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 2320
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 2326
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 2332
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 2338
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 2344
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 2350
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 2356
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 2362
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 2368
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 2374
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 2380
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 2386
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 2392
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 2393
   dest = $3; //@line 2394
   src = $$14160$us; //@line 2394
   stop = dest + 16 | 0; //@line 2394
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2394
    dest = dest + 1 | 0; //@line 2394
    src = src + 1 | 0; //@line 2394
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 2397
   if (!$$14658$us) {
    $$044 = 0; //@line 2400
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 2403
    $$14359$us = $$14359$us + 16 | 0; //@line 2403
   }
  }
  STACKTOP = sp; //@line 2406
  return $$044 | 0; //@line 2406
 } else {
  $$14160 = $5; //@line 2408
  $$14359 = $4; //@line 2408
  $$14658 = $2; //@line 2408
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 2413
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 2419
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 2425
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 2431
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 2437
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 2443
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 2449
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 2455
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 2461
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 2467
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 2473
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 2479
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 2485
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 2491
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 2497
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 2503
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 2504
   dest = $3; //@line 2505
   src = $$14160; //@line 2505
   stop = dest + 16 | 0; //@line 2505
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2505
    dest = dest + 1 | 0; //@line 2505
    src = src + 1 | 0; //@line 2505
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 2508
   if (!$$14658) {
    $$044 = 0; //@line 2511
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 2514
    $$14359 = $$14359 + 16 | 0; //@line 2514
   }
  }
  STACKTOP = sp; //@line 2517
  return $$044 | 0; //@line 2517
 }
 return 0; //@line 2519
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_320($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23590
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23592
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23594
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23596
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23598
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23600
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23602
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23604
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23606
 $$pre$i$i = HEAP32[HEAP32[$0 + 36 >> 2] >> 2] | 0; //@line 23611
 HEAP32[HEAP32[$0 + 40 >> 2] >> 2] = $$pre$i$i; //@line 23613
 if ($$pre$i$i | 0) {
  $24 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 23617
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 23618
  FUNCTION_TABLE_vi[$24 & 1023]($14); //@line 23619
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 169; //@line 23622
   $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 23623
   HEAP32[$25 >> 2] = $2; //@line 23624
   $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 23625
   HEAP32[$26 >> 2] = $4; //@line 23626
   $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 23627
   HEAP32[$27 >> 2] = $6; //@line 23628
   $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 23629
   HEAP32[$28 >> 2] = $8; //@line 23630
   $29 = $ReallocAsyncCtx3 + 20 | 0; //@line 23631
   HEAP32[$29 >> 2] = $10; //@line 23632
   $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 23633
   HEAP32[$30 >> 2] = $12; //@line 23634
   $31 = $ReallocAsyncCtx3 + 28 | 0; //@line 23635
   HEAP32[$31 >> 2] = $14; //@line 23636
   $32 = $ReallocAsyncCtx3 + 32 | 0; //@line 23637
   HEAP32[$32 >> 2] = $16; //@line 23638
   sp = STACKTOP; //@line 23639
   return;
  }
  ___async_unwind = 0; //@line 23642
  HEAP32[$ReallocAsyncCtx3 >> 2] = 169; //@line 23643
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 23644
  HEAP32[$25 >> 2] = $2; //@line 23645
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 23646
  HEAP32[$26 >> 2] = $4; //@line 23647
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 23648
  HEAP32[$27 >> 2] = $6; //@line 23649
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 23650
  HEAP32[$28 >> 2] = $8; //@line 23651
  $29 = $ReallocAsyncCtx3 + 20 | 0; //@line 23652
  HEAP32[$29 >> 2] = $10; //@line 23653
  $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 23654
  HEAP32[$30 >> 2] = $12; //@line 23655
  $31 = $ReallocAsyncCtx3 + 28 | 0; //@line 23656
  HEAP32[$31 >> 2] = $14; //@line 23657
  $32 = $ReallocAsyncCtx3 + 32 | 0; //@line 23658
  HEAP32[$32 >> 2] = $16; //@line 23659
  sp = STACKTOP; //@line 23660
  return;
 }
 $33 = $16 + 12 | 0; //@line 23663
 HEAP32[$16 >> 2] = 6; //@line 23664
 HEAP32[$16 + 4 >> 2] = 0; //@line 23666
 HEAP32[$16 + 8 >> 2] = $4; //@line 23668
 HEAP32[$33 >> 2] = 836; //@line 23669
 $34 = $4 + 2416 | 0; //@line 23670
 if (($34 | 0) == ($16 | 0)) {
  $63 = HEAP32[211] | 0; //@line 23674
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 23675
  FUNCTION_TABLE_vi[$63 & 1023]($16); //@line 23676
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 23679
   $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 23680
   HEAP32[$64 >> 2] = $2; //@line 23681
   $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 23682
   HEAP32[$65 >> 2] = $4; //@line 23683
   $66 = $ReallocAsyncCtx6 + 12 | 0; //@line 23684
   HEAP32[$66 >> 2] = $6; //@line 23685
   $67 = $ReallocAsyncCtx6 + 16 | 0; //@line 23686
   HEAP32[$67 >> 2] = $8; //@line 23687
   $68 = $ReallocAsyncCtx6 + 20 | 0; //@line 23688
   HEAP32[$68 >> 2] = $10; //@line 23689
   $69 = $ReallocAsyncCtx6 + 24 | 0; //@line 23690
   HEAP32[$69 >> 2] = $16; //@line 23691
   $70 = $ReallocAsyncCtx6 + 28 | 0; //@line 23692
   HEAP32[$70 >> 2] = $12; //@line 23693
   sp = STACKTOP; //@line 23694
   return;
  }
  ___async_unwind = 0; //@line 23697
  HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 23698
  $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 23699
  HEAP32[$64 >> 2] = $2; //@line 23700
  $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 23701
  HEAP32[$65 >> 2] = $4; //@line 23702
  $66 = $ReallocAsyncCtx6 + 12 | 0; //@line 23703
  HEAP32[$66 >> 2] = $6; //@line 23704
  $67 = $ReallocAsyncCtx6 + 16 | 0; //@line 23705
  HEAP32[$67 >> 2] = $8; //@line 23706
  $68 = $ReallocAsyncCtx6 + 20 | 0; //@line 23707
  HEAP32[$68 >> 2] = $10; //@line 23708
  $69 = $ReallocAsyncCtx6 + 24 | 0; //@line 23709
  HEAP32[$69 >> 2] = $16; //@line 23710
  $70 = $ReallocAsyncCtx6 + 28 | 0; //@line 23711
  HEAP32[$70 >> 2] = $12; //@line 23712
  sp = STACKTOP; //@line 23713
  return;
 }
 $36 = $4 + 2428 | 0; //@line 23716
 $37 = HEAP32[$36 >> 2] | 0; //@line 23717
 if (!$37) {
  $52 = HEAP32[210] | 0; //@line 23721
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 23722
  FUNCTION_TABLE_vii[$52 & 15]($34, $16); //@line 23723
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 23726
   $53 = $ReallocAsyncCtx5 + 4 | 0; //@line 23727
   HEAP32[$53 >> 2] = $2; //@line 23728
   $54 = $ReallocAsyncCtx5 + 8 | 0; //@line 23729
   HEAP32[$54 >> 2] = $4; //@line 23730
   $55 = $ReallocAsyncCtx5 + 12 | 0; //@line 23731
   HEAP32[$55 >> 2] = $6; //@line 23732
   $56 = $ReallocAsyncCtx5 + 16 | 0; //@line 23733
   HEAP32[$56 >> 2] = $8; //@line 23734
   $57 = $ReallocAsyncCtx5 + 20 | 0; //@line 23735
   HEAP32[$57 >> 2] = $10; //@line 23736
   $58 = $ReallocAsyncCtx5 + 24 | 0; //@line 23737
   HEAP32[$58 >> 2] = $16; //@line 23738
   $59 = $ReallocAsyncCtx5 + 28 | 0; //@line 23739
   HEAP32[$59 >> 2] = $12; //@line 23740
   $60 = $ReallocAsyncCtx5 + 32 | 0; //@line 23741
   HEAP32[$60 >> 2] = $33; //@line 23742
   $61 = $ReallocAsyncCtx5 + 36 | 0; //@line 23743
   HEAP32[$61 >> 2] = $36; //@line 23744
   sp = STACKTOP; //@line 23745
   return;
  }
  ___async_unwind = 0; //@line 23748
  HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 23749
  $53 = $ReallocAsyncCtx5 + 4 | 0; //@line 23750
  HEAP32[$53 >> 2] = $2; //@line 23751
  $54 = $ReallocAsyncCtx5 + 8 | 0; //@line 23752
  HEAP32[$54 >> 2] = $4; //@line 23753
  $55 = $ReallocAsyncCtx5 + 12 | 0; //@line 23754
  HEAP32[$55 >> 2] = $6; //@line 23755
  $56 = $ReallocAsyncCtx5 + 16 | 0; //@line 23756
  HEAP32[$56 >> 2] = $8; //@line 23757
  $57 = $ReallocAsyncCtx5 + 20 | 0; //@line 23758
  HEAP32[$57 >> 2] = $10; //@line 23759
  $58 = $ReallocAsyncCtx5 + 24 | 0; //@line 23760
  HEAP32[$58 >> 2] = $16; //@line 23761
  $59 = $ReallocAsyncCtx5 + 28 | 0; //@line 23762
  HEAP32[$59 >> 2] = $12; //@line 23763
  $60 = $ReallocAsyncCtx5 + 32 | 0; //@line 23764
  HEAP32[$60 >> 2] = $33; //@line 23765
  $61 = $ReallocAsyncCtx5 + 36 | 0; //@line 23766
  HEAP32[$61 >> 2] = $36; //@line 23767
  sp = STACKTOP; //@line 23768
  return;
 } else {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 23772
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 23773
  FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 23774
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 23777
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 23778
   HEAP32[$41 >> 2] = $2; //@line 23779
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 23780
   HEAP32[$42 >> 2] = $4; //@line 23781
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 23782
   HEAP32[$43 >> 2] = $6; //@line 23783
   $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 23784
   HEAP32[$44 >> 2] = $8; //@line 23785
   $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 23786
   HEAP32[$45 >> 2] = $10; //@line 23787
   $46 = $ReallocAsyncCtx4 + 24 | 0; //@line 23788
   HEAP32[$46 >> 2] = $16; //@line 23789
   $47 = $ReallocAsyncCtx4 + 28 | 0; //@line 23790
   HEAP32[$47 >> 2] = $12; //@line 23791
   $48 = $ReallocAsyncCtx4 + 32 | 0; //@line 23792
   HEAP32[$48 >> 2] = $33; //@line 23793
   $49 = $ReallocAsyncCtx4 + 36 | 0; //@line 23794
   HEAP32[$49 >> 2] = $36; //@line 23795
   $50 = $ReallocAsyncCtx4 + 40 | 0; //@line 23796
   HEAP32[$50 >> 2] = $34; //@line 23797
   sp = STACKTOP; //@line 23798
   return;
  }
  ___async_unwind = 0; //@line 23801
  HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 23802
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 23803
  HEAP32[$41 >> 2] = $2; //@line 23804
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 23805
  HEAP32[$42 >> 2] = $4; //@line 23806
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 23807
  HEAP32[$43 >> 2] = $6; //@line 23808
  $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 23809
  HEAP32[$44 >> 2] = $8; //@line 23810
  $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 23811
  HEAP32[$45 >> 2] = $10; //@line 23812
  $46 = $ReallocAsyncCtx4 + 24 | 0; //@line 23813
  HEAP32[$46 >> 2] = $16; //@line 23814
  $47 = $ReallocAsyncCtx4 + 28 | 0; //@line 23815
  HEAP32[$47 >> 2] = $12; //@line 23816
  $48 = $ReallocAsyncCtx4 + 32 | 0; //@line 23817
  HEAP32[$48 >> 2] = $33; //@line 23818
  $49 = $ReallocAsyncCtx4 + 36 | 0; //@line 23819
  HEAP32[$49 >> 2] = $36; //@line 23820
  $50 = $ReallocAsyncCtx4 + 40 | 0; //@line 23821
  HEAP32[$50 >> 2] = $34; //@line 23822
  sp = STACKTOP; //@line 23823
  return;
 }
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $120 = 0, $123 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $137 = 0, $14 = 0, $142 = 0, $149 = 0, $153 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $170 = 0, $171 = 0, $174 = 0, $176 = 0, $178 = 0, $184 = 0, $185 = 0, $189 = 0, $19 = 0, $197 = 0, $2 = 0, $205 = 0, $208 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $74 = 0, $75 = 0, $76 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6302
 $1 = $0 + 4 | 0; //@line 6303
 $2 = HEAP32[$1 >> 2] | 0; //@line 6304
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6307
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6308
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 6309
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 610; //@line 6312
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6314
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 6316
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 6318
  sp = STACKTOP; //@line 6319
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6322
 $10 = HEAP32[$1 >> 2] | 0; //@line 6323
 $11 = $10 + 32 | 0; //@line 6324
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 6328
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 6333
  HEAP32[$14 >> 2] = $6; //@line 6334
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 6336
  do {
   if (($21 | 0) == 1e6) {
    $100 = $19; //@line 6340
    $101 = 0; //@line 6340
   } else {
    $24 = HEAP8[$2 + 57 >> 0] | 0; //@line 6343
    $26 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6345
    $27 = tempRet0; //@line 6346
    if (!($24 << 24 >> 24)) {
     $61 = ___udivdi3($26 | 0, $27 | 0, $21 | 0, 0) | 0; //@line 6348
     $62 = tempRet0; //@line 6349
     $63 = ___muldi3($61 | 0, $62 | 0, $21 | 0, 0) | 0; //@line 6350
     $65 = _i64Subtract($26 | 0, $27 | 0, $63 | 0, tempRet0 | 0) | 0; //@line 6352
     $67 = $2 + 40 | 0; //@line 6354
     $68 = $67; //@line 6355
     $74 = _i64Add($65 | 0, tempRet0 | 0, HEAP32[$68 >> 2] | 0, HEAP32[$68 + 4 >> 2] | 0) | 0; //@line 6361
     $75 = tempRet0; //@line 6362
     $76 = $67; //@line 6363
     HEAP32[$76 >> 2] = $74; //@line 6365
     HEAP32[$76 + 4 >> 2] = $75; //@line 6368
     if ($75 >>> 0 < 0 | ($75 | 0) == 0 & $74 >>> 0 < $21 >>> 0) {
      $100 = $61; //@line 6375
      $101 = $62; //@line 6375
      break;
     }
     $85 = _i64Add($61 | 0, $62 | 0, 1, 0) | 0; //@line 6378
     $86 = tempRet0; //@line 6379
     $87 = _i64Subtract($74 | 0, $75 | 0, $21 | 0, 0) | 0; //@line 6380
     $89 = $67; //@line 6382
     HEAP32[$89 >> 2] = $87; //@line 6384
     HEAP32[$89 + 4 >> 2] = tempRet0; //@line 6387
     $100 = $85; //@line 6388
     $101 = $86; //@line 6388
     break;
    } else {
     $28 = $24 & 255; //@line 6391
     $29 = _bitshift64Lshr($26 | 0, $27 | 0, $28 | 0) | 0; //@line 6392
     $30 = tempRet0; //@line 6393
     $31 = _bitshift64Shl($29 | 0, $30 | 0, $28 | 0) | 0; //@line 6394
     $33 = _i64Subtract($26 | 0, $27 | 0, $31 | 0, tempRet0 | 0) | 0; //@line 6396
     $35 = $2 + 40 | 0; //@line 6398
     $36 = $35; //@line 6399
     $42 = _i64Add(HEAP32[$36 >> 2] | 0, HEAP32[$36 + 4 >> 2] | 0, $33 | 0, tempRet0 | 0) | 0; //@line 6405
     $43 = tempRet0; //@line 6406
     $44 = $35; //@line 6407
     HEAP32[$44 >> 2] = $42; //@line 6409
     HEAP32[$44 + 4 >> 2] = $43; //@line 6412
     if ($43 >>> 0 < 0 | ($43 | 0) == 0 & $42 >>> 0 < $21 >>> 0) {
      $100 = $29; //@line 6419
      $101 = $30; //@line 6419
      break;
     }
     $53 = _i64Add($29 | 0, $30 | 0, 1, 0) | 0; //@line 6422
     $54 = tempRet0; //@line 6423
     $55 = _i64Subtract($42 | 0, $43 | 0, $21 | 0, 0) | 0; //@line 6424
     $57 = $35; //@line 6426
     HEAP32[$57 >> 2] = $55; //@line 6428
     HEAP32[$57 + 4 >> 2] = tempRet0; //@line 6431
     $100 = $53; //@line 6432
     $101 = $54; //@line 6432
     break;
    }
   }
  } while (0);
  $93 = $2 + 48 | 0; //@line 6437
  $94 = $93; //@line 6438
  $102 = _i64Add(HEAP32[$94 >> 2] | 0, HEAP32[$94 + 4 >> 2] | 0, $100 | 0, $101 | 0) | 0; //@line 6444
  $104 = $93; //@line 6446
  HEAP32[$104 >> 2] = $102; //@line 6448
  HEAP32[$104 + 4 >> 2] = tempRet0; //@line 6451
 }
 $109 = HEAP32[$10 + 4 >> 2] | 0; //@line 6454
 if (!$109) {
  $205 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 6464
  $208 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 6467
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6468
  FUNCTION_TABLE_vi[$208 & 1023]($205); //@line 6469
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 616; //@line 6472
   sp = STACKTOP; //@line 6473
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 6476
   return;
  }
 }
 $112 = $10 + 48 | 0; //@line 6481
 $114 = HEAP32[$112 >> 2] | 0; //@line 6483
 $117 = HEAP32[$112 + 4 >> 2] | 0; //@line 6486
 $118 = $109; //@line 6487
 $120 = HEAP32[$118 >> 2] | 0; //@line 6489
 $123 = HEAP32[$118 + 4 >> 2] | 0; //@line 6492
 if (!($123 >>> 0 > $117 >>> 0 | ($123 | 0) == ($117 | 0) & $120 >>> 0 > $114 >>> 0)) {
  $131 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 6501
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6502
  FUNCTION_TABLE_v[$131 & 7](); //@line 6503
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 611; //@line 6506
   sp = STACKTOP; //@line 6507
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6510
  return;
 }
 $132 = _i64Subtract($120 | 0, $123 | 0, $114 | 0, $117 | 0) | 0; //@line 6513
 $133 = tempRet0; //@line 6514
 $135 = HEAP32[$10 + 16 >> 2] | 0; //@line 6516
 $137 = $10 + 24 | 0; //@line 6518
 $142 = HEAP32[$137 + 4 >> 2] | 0; //@line 6523
 do {
  if ($133 >>> 0 > $142 >>> 0 | (($133 | 0) == ($142 | 0) ? $132 >>> 0 > (HEAP32[$137 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $135; //@line 6531
  } else {
   $149 = HEAP32[$10 + 8 >> 2] | 0; //@line 6534
   if (($149 | 0) == 1e6) {
    $$0$i = $135 >>> 0 < $132 >>> 0 ? $135 : $132; //@line 6539
    break;
   }
   $153 = HEAP8[$10 + 57 >> 0] | 0; //@line 6543
   if (!($153 << 24 >> 24)) {
    $161 = ___muldi3($132 | 0, $133 | 0, $149 | 0, 0) | 0; //@line 6546
    $163 = ___udivdi3($161 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 6548
    $$0$i = $135 >>> 0 < $163 >>> 0 ? $135 : $163; //@line 6552
    break;
   } else {
    $156 = _bitshift64Shl($132 | 0, $133 | 0, $153 & 255 | 0) | 0; //@line 6556
    $158 = ___udivdi3($156 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 6558
    $$0$i = $135 >>> 0 < $158 >>> 0 ? $135 : $158; //@line 6562
    break;
   }
  }
 } while (0);
 $170 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 6571
 $171 = $2 + 32 | 0; //@line 6572
 $174 = HEAP32[$0 >> 2] | 0; //@line 6575
 if (($170 | 0) == (HEAP32[$171 >> 2] | 0)) {
  $176 = HEAP32[$174 + 20 >> 2] | 0; //@line 6578
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6579
  FUNCTION_TABLE_v[$176 & 7](); //@line 6580
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 612; //@line 6583
   sp = STACKTOP; //@line 6584
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6587
  return;
 }
 $178 = HEAP32[$174 + 16 >> 2] | 0; //@line 6591
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6592
 FUNCTION_TABLE_vi[$178 & 1023]($170); //@line 6593
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 613; //@line 6596
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6598
  HEAP32[$AsyncCtx11 + 8 >> 2] = $171; //@line 6600
  HEAP32[$AsyncCtx11 + 12 >> 2] = $170; //@line 6602
  sp = STACKTOP; //@line 6603
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6606
 $184 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6609
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6610
 $185 = FUNCTION_TABLE_i[$184 & 7]() | 0; //@line 6611
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 614; //@line 6614
  HEAP32[$AsyncCtx14 + 4 >> 2] = $171; //@line 6616
  HEAP32[$AsyncCtx14 + 8 >> 2] = $170; //@line 6618
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 6620
  sp = STACKTOP; //@line 6621
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 6624
 $189 = HEAP32[$171 >> 2] | 0; //@line 6625
 if ($170 >>> 0 > $189 >>> 0) {
  if (!($185 >>> 0 >= $170 >>> 0 | $185 >>> 0 < $189 >>> 0)) {
   return;
  }
 } else {
  if (!($185 >>> 0 >= $170 >>> 0 & $185 >>> 0 < $189 >>> 0)) {
   return;
  }
 }
 $197 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 6644
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6645
 FUNCTION_TABLE_v[$197 & 7](); //@line 6646
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 615; //@line 6649
  sp = STACKTOP; //@line 6650
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 6653
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $22 = 0, $23 = 0, $26 = 0, $29 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $71 = 0, $76 = 0, $77 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6693
 STACKTOP = STACKTOP + 32 | 0; //@line 6694
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6694
 $vararg_buffer = sp; //@line 6695
 $1 = sp + 16 | 0; //@line 6696
 $5 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 4 >> 2] | 0) == 0; //@line 6700
 $6 = __ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0; //@line 6701
 if ($5) {
  HEAP32[$0 + 2552 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 6706
  $10 = $0 + 2512 | 0; //@line 6707
  $11 = HEAP32[$10 >> 2] | 0; //@line 6708
  do {
   if ($11 | 0) {
    $15 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6714
    $17 = HEAP32[$11 + 4 >> 2] | 0; //@line 6716
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6717
    FUNCTION_TABLE_vii[$17 & 15]($1, $0 + 2500 | 0); //@line 6718
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 228; //@line 6721
     HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 6723
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6725
     HEAP32[$AsyncCtx + 12 >> 2] = $15; //@line 6727
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 6729
     sp = STACKTOP; //@line 6730
     STACKTOP = sp; //@line 6731
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6733
    $22 = $1 + 12 | 0; //@line 6735
    HEAP32[$22 >> 2] = HEAP32[$10 >> 2]; //@line 6736
    $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6737
    $23 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($15, $1, 2) | 0; //@line 6738
    if (___async) {
     HEAP32[$AsyncCtx25 >> 2] = 229; //@line 6741
     HEAP32[$AsyncCtx25 + 4 >> 2] = $22; //@line 6743
     HEAP32[$AsyncCtx25 + 8 >> 2] = $1; //@line 6745
     sp = STACKTOP; //@line 6746
     STACKTOP = sp; //@line 6747
     return;
    }
    _emscripten_free_async_context($AsyncCtx25 | 0); //@line 6749
    $26 = HEAP32[$22 >> 2] | 0; //@line 6750
    do {
     if ($26 | 0) {
      $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 6755
      $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6756
      FUNCTION_TABLE_vi[$29 & 1023]($1); //@line 6757
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 230; //@line 6760
       HEAP32[$AsyncCtx2 + 4 >> 2] = $23; //@line 6762
       HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 6764
       sp = STACKTOP; //@line 6765
       STACKTOP = sp; //@line 6766
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6768
       break;
      }
     }
    } while (0);
    if (!$23) {
     $AsyncCtx37 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6775
     _mbed_assert_internal(11890, 11899, 778); //@line 6776
     if (___async) {
      HEAP32[$AsyncCtx37 >> 2] = 231; //@line 6779
      HEAP32[$AsyncCtx37 + 4 >> 2] = $1; //@line 6781
      sp = STACKTOP; //@line 6782
      STACKTOP = sp; //@line 6783
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx37 | 0); //@line 6785
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 6791
  return;
 }
 HEAP32[$vararg_buffer >> 2] = HEAP32[$6 + 4 >> 2]; //@line 6795
 _mbed_tracef(2, 11997, 12137, $vararg_buffer); //@line 6796
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 4 >> 2] | 0) == 2) {
  $40 = $0 + 2512 | 0; //@line 6802
  $41 = HEAP32[$40 >> 2] | 0; //@line 6803
  do {
   if ($41 | 0) {
    $45 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6809
    $47 = HEAP32[$41 + 4 >> 2] | 0; //@line 6811
    $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6812
    FUNCTION_TABLE_vii[$47 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 6813
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 232; //@line 6816
     HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 6818
     HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 6820
     HEAP32[$AsyncCtx5 + 12 >> 2] = $45; //@line 6822
     HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 6824
     sp = STACKTOP; //@line 6825
     STACKTOP = sp; //@line 6826
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6828
    $52 = $vararg_buffer + 12 | 0; //@line 6830
    HEAP32[$52 >> 2] = HEAP32[$40 >> 2]; //@line 6831
    $AsyncCtx22 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6832
    $53 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($45, $vararg_buffer, 3) | 0; //@line 6833
    if (___async) {
     HEAP32[$AsyncCtx22 >> 2] = 233; //@line 6836
     HEAP32[$AsyncCtx22 + 4 >> 2] = $52; //@line 6838
     HEAP32[$AsyncCtx22 + 8 >> 2] = $vararg_buffer; //@line 6840
     sp = STACKTOP; //@line 6841
     STACKTOP = sp; //@line 6842
     return;
    }
    _emscripten_free_async_context($AsyncCtx22 | 0); //@line 6844
    $56 = HEAP32[$52 >> 2] | 0; //@line 6845
    do {
     if ($56 | 0) {
      $59 = HEAP32[$56 + 8 >> 2] | 0; //@line 6850
      $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6851
      FUNCTION_TABLE_vi[$59 & 1023]($vararg_buffer); //@line 6852
      if (___async) {
       HEAP32[$AsyncCtx9 >> 2] = 234; //@line 6855
       HEAP32[$AsyncCtx9 + 4 >> 2] = $53; //@line 6857
       HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 6859
       sp = STACKTOP; //@line 6860
       STACKTOP = sp; //@line 6861
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6863
       break;
      }
     }
    } while (0);
    if (!$53) {
     $AsyncCtx33 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6870
     _mbed_assert_internal(11890, 11899, 778); //@line 6871
     if (___async) {
      HEAP32[$AsyncCtx33 >> 2] = 235; //@line 6874
      HEAP32[$AsyncCtx33 + 4 >> 2] = $vararg_buffer; //@line 6876
      sp = STACKTOP; //@line 6877
      STACKTOP = sp; //@line 6878
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx33 | 0); //@line 6880
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 6886
  return;
 } else {
  $64 = $0 + 2512 | 0; //@line 6888
  $65 = HEAP32[$64 >> 2] | 0; //@line 6889
  do {
   if ($65 | 0) {
    $69 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6895
    $71 = HEAP32[$65 + 4 >> 2] | 0; //@line 6897
    $AsyncCtx12 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6898
    FUNCTION_TABLE_vii[$71 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 6899
    if (___async) {
     HEAP32[$AsyncCtx12 >> 2] = 236; //@line 6902
     HEAP32[$AsyncCtx12 + 4 >> 2] = $64; //@line 6904
     HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer; //@line 6906
     HEAP32[$AsyncCtx12 + 12 >> 2] = $69; //@line 6908
     HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer; //@line 6910
     sp = STACKTOP; //@line 6911
     STACKTOP = sp; //@line 6912
     return;
    }
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6914
    $76 = $vararg_buffer + 12 | 0; //@line 6916
    HEAP32[$76 >> 2] = HEAP32[$64 >> 2]; //@line 6917
    $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6918
    $77 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($69, $vararg_buffer, 4) | 0; //@line 6919
    if (___async) {
     HEAP32[$AsyncCtx19 >> 2] = 237; //@line 6922
     HEAP32[$AsyncCtx19 + 4 >> 2] = $76; //@line 6924
     HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer; //@line 6926
     sp = STACKTOP; //@line 6927
     STACKTOP = sp; //@line 6928
     return;
    }
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6930
    $80 = HEAP32[$76 >> 2] | 0; //@line 6931
    do {
     if ($80 | 0) {
      $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 6936
      $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6937
      FUNCTION_TABLE_vi[$83 & 1023]($vararg_buffer); //@line 6938
      if (___async) {
       HEAP32[$AsyncCtx16 >> 2] = 238; //@line 6941
       HEAP32[$AsyncCtx16 + 4 >> 2] = $77; //@line 6943
       HEAP32[$AsyncCtx16 + 8 >> 2] = $vararg_buffer; //@line 6945
       sp = STACKTOP; //@line 6946
       STACKTOP = sp; //@line 6947
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx16 | 0); //@line 6949
       break;
      }
     }
    } while (0);
    if (!$77) {
     $AsyncCtx29 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6956
     _mbed_assert_internal(11890, 11899, 778); //@line 6957
     if (___async) {
      HEAP32[$AsyncCtx29 >> 2] = 239; //@line 6960
      HEAP32[$AsyncCtx29 + 4 >> 2] = $vararg_buffer; //@line 6962
      sp = STACKTOP; //@line 6963
      STACKTOP = sp; //@line 6964
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx29 | 0); //@line 6966
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 6972
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_322($0) {
 $0 = $0 | 0;
 var $$pre123 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24020
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24022
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24024
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24026
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24028
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24030
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24032
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24034
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24036
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24038
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24040
 $$pre123 = HEAP32[$16 >> 2] | 0; //@line 24041
 if ($$pre123 | 0) {
  $23 = HEAP32[$$pre123 + 4 >> 2] | 0; //@line 24045
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 24046
  FUNCTION_TABLE_vii[$23 & 15]($20, $12); //@line 24047
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 24050
   $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 24051
   HEAP32[$24 >> 2] = $2; //@line 24052
   $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 24053
   HEAP32[$25 >> 2] = $4; //@line 24054
   $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 24055
   HEAP32[$26 >> 2] = $6; //@line 24056
   $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 24057
   HEAP32[$27 >> 2] = $8; //@line 24058
   $28 = $ReallocAsyncCtx5 + 20 | 0; //@line 24059
   HEAP32[$28 >> 2] = $10; //@line 24060
   $29 = $ReallocAsyncCtx5 + 24 | 0; //@line 24061
   HEAP32[$29 >> 2] = $12; //@line 24062
   $30 = $ReallocAsyncCtx5 + 28 | 0; //@line 24063
   HEAP32[$30 >> 2] = $14; //@line 24064
   $31 = $ReallocAsyncCtx5 + 32 | 0; //@line 24065
   HEAP32[$31 >> 2] = $16; //@line 24066
   $32 = $ReallocAsyncCtx5 + 36 | 0; //@line 24067
   HEAP32[$32 >> 2] = $18; //@line 24068
   sp = STACKTOP; //@line 24069
   return;
  }
  ___async_unwind = 0; //@line 24072
  HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 24073
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 24074
  HEAP32[$24 >> 2] = $2; //@line 24075
  $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 24076
  HEAP32[$25 >> 2] = $4; //@line 24077
  $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 24078
  HEAP32[$26 >> 2] = $6; //@line 24079
  $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 24080
  HEAP32[$27 >> 2] = $8; //@line 24081
  $28 = $ReallocAsyncCtx5 + 20 | 0; //@line 24082
  HEAP32[$28 >> 2] = $10; //@line 24083
  $29 = $ReallocAsyncCtx5 + 24 | 0; //@line 24084
  HEAP32[$29 >> 2] = $12; //@line 24085
  $30 = $ReallocAsyncCtx5 + 28 | 0; //@line 24086
  HEAP32[$30 >> 2] = $14; //@line 24087
  $31 = $ReallocAsyncCtx5 + 32 | 0; //@line 24088
  HEAP32[$31 >> 2] = $16; //@line 24089
  $32 = $ReallocAsyncCtx5 + 36 | 0; //@line 24090
  HEAP32[$32 >> 2] = $18; //@line 24091
  sp = STACKTOP; //@line 24092
  return;
 }
 HEAP32[$18 >> 2] = 0; //@line 24095
 $33 = $14 + 12 | 0; //@line 24096
 HEAP32[$14 >> 2] = 173; //@line 24097
 HEAP32[$14 + 4 >> 2] = 0; //@line 24099
 HEAP32[$14 + 8 >> 2] = $4; //@line 24101
 HEAP32[$33 >> 2] = 824; //@line 24102
 $34 = $4 + 2448 | 0; //@line 24103
 if (($34 | 0) == ($14 | 0)) {
  $61 = HEAP32[208] | 0; //@line 24107
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 24108
  FUNCTION_TABLE_vi[$61 & 1023]($14); //@line 24109
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 24112
   $62 = $ReallocAsyncCtx9 + 4 | 0; //@line 24113
   HEAP32[$62 >> 2] = $2; //@line 24114
   $63 = $ReallocAsyncCtx9 + 8 | 0; //@line 24115
   HEAP32[$63 >> 2] = $4; //@line 24116
   $64 = $ReallocAsyncCtx9 + 12 | 0; //@line 24117
   HEAP32[$64 >> 2] = $14; //@line 24118
   $65 = $ReallocAsyncCtx9 + 16 | 0; //@line 24119
   HEAP32[$65 >> 2] = $6; //@line 24120
   $66 = $ReallocAsyncCtx9 + 20 | 0; //@line 24121
   HEAP32[$66 >> 2] = $8; //@line 24122
   $67 = $ReallocAsyncCtx9 + 24 | 0; //@line 24123
   HEAP32[$67 >> 2] = $10; //@line 24124
   sp = STACKTOP; //@line 24125
   return;
  }
  ___async_unwind = 0; //@line 24128
  HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 24129
  $62 = $ReallocAsyncCtx9 + 4 | 0; //@line 24130
  HEAP32[$62 >> 2] = $2; //@line 24131
  $63 = $ReallocAsyncCtx9 + 8 | 0; //@line 24132
  HEAP32[$63 >> 2] = $4; //@line 24133
  $64 = $ReallocAsyncCtx9 + 12 | 0; //@line 24134
  HEAP32[$64 >> 2] = $14; //@line 24135
  $65 = $ReallocAsyncCtx9 + 16 | 0; //@line 24136
  HEAP32[$65 >> 2] = $6; //@line 24137
  $66 = $ReallocAsyncCtx9 + 20 | 0; //@line 24138
  HEAP32[$66 >> 2] = $8; //@line 24139
  $67 = $ReallocAsyncCtx9 + 24 | 0; //@line 24140
  HEAP32[$67 >> 2] = $10; //@line 24141
  sp = STACKTOP; //@line 24142
  return;
 }
 $36 = $4 + 2460 | 0; //@line 24145
 $37 = HEAP32[$36 >> 2] | 0; //@line 24146
 if (!$37) {
  $51 = HEAP32[207] | 0; //@line 24150
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 24151
  FUNCTION_TABLE_vii[$51 & 15]($34, $14); //@line 24152
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 24155
   $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 24156
   HEAP32[$52 >> 2] = $2; //@line 24157
   $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 24158
   HEAP32[$53 >> 2] = $4; //@line 24159
   $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 24160
   HEAP32[$54 >> 2] = $14; //@line 24161
   $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 24162
   HEAP32[$55 >> 2] = $6; //@line 24163
   $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 24164
   HEAP32[$56 >> 2] = $8; //@line 24165
   $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 24166
   HEAP32[$57 >> 2] = $10; //@line 24167
   $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 24168
   HEAP32[$58 >> 2] = $33; //@line 24169
   $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 24170
   HEAP32[$59 >> 2] = $36; //@line 24171
   sp = STACKTOP; //@line 24172
   return;
  }
  ___async_unwind = 0; //@line 24175
  HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 24176
  $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 24177
  HEAP32[$52 >> 2] = $2; //@line 24178
  $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 24179
  HEAP32[$53 >> 2] = $4; //@line 24180
  $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 24181
  HEAP32[$54 >> 2] = $14; //@line 24182
  $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 24183
  HEAP32[$55 >> 2] = $6; //@line 24184
  $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 24185
  HEAP32[$56 >> 2] = $8; //@line 24186
  $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 24187
  HEAP32[$57 >> 2] = $10; //@line 24188
  $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 24189
  HEAP32[$58 >> 2] = $33; //@line 24190
  $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 24191
  HEAP32[$59 >> 2] = $36; //@line 24192
  sp = STACKTOP; //@line 24193
  return;
 } else {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 24197
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 24198
  FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 24199
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 24202
   $41 = $ReallocAsyncCtx7 + 4 | 0; //@line 24203
   HEAP32[$41 >> 2] = $2; //@line 24204
   $42 = $ReallocAsyncCtx7 + 8 | 0; //@line 24205
   HEAP32[$42 >> 2] = $4; //@line 24206
   $43 = $ReallocAsyncCtx7 + 12 | 0; //@line 24207
   HEAP32[$43 >> 2] = $14; //@line 24208
   $44 = $ReallocAsyncCtx7 + 16 | 0; //@line 24209
   HEAP32[$44 >> 2] = $6; //@line 24210
   $45 = $ReallocAsyncCtx7 + 20 | 0; //@line 24211
   HEAP32[$45 >> 2] = $36; //@line 24212
   $46 = $ReallocAsyncCtx7 + 24 | 0; //@line 24213
   HEAP32[$46 >> 2] = $34; //@line 24214
   $47 = $ReallocAsyncCtx7 + 28 | 0; //@line 24215
   HEAP32[$47 >> 2] = $8; //@line 24216
   $48 = $ReallocAsyncCtx7 + 32 | 0; //@line 24217
   HEAP32[$48 >> 2] = $10; //@line 24218
   $49 = $ReallocAsyncCtx7 + 36 | 0; //@line 24219
   HEAP32[$49 >> 2] = $33; //@line 24220
   sp = STACKTOP; //@line 24221
   return;
  }
  ___async_unwind = 0; //@line 24224
  HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 24225
  $41 = $ReallocAsyncCtx7 + 4 | 0; //@line 24226
  HEAP32[$41 >> 2] = $2; //@line 24227
  $42 = $ReallocAsyncCtx7 + 8 | 0; //@line 24228
  HEAP32[$42 >> 2] = $4; //@line 24229
  $43 = $ReallocAsyncCtx7 + 12 | 0; //@line 24230
  HEAP32[$43 >> 2] = $14; //@line 24231
  $44 = $ReallocAsyncCtx7 + 16 | 0; //@line 24232
  HEAP32[$44 >> 2] = $6; //@line 24233
  $45 = $ReallocAsyncCtx7 + 20 | 0; //@line 24234
  HEAP32[$45 >> 2] = $36; //@line 24235
  $46 = $ReallocAsyncCtx7 + 24 | 0; //@line 24236
  HEAP32[$46 >> 2] = $34; //@line 24237
  $47 = $ReallocAsyncCtx7 + 28 | 0; //@line 24238
  HEAP32[$47 >> 2] = $8; //@line 24239
  $48 = $ReallocAsyncCtx7 + 32 | 0; //@line 24240
  HEAP32[$48 >> 2] = $10; //@line 24241
  $49 = $ReallocAsyncCtx7 + 36 | 0; //@line 24242
  HEAP32[$49 >> 2] = $33; //@line 24243
  sp = STACKTOP; //@line 24244
  return;
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $111 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 7938
 STACKTOP = STACKTOP + 32 | 0; //@line 7939
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7939
 $vararg_buffer5 = sp + 24 | 0; //@line 7940
 $vararg_buffer3 = sp + 16 | 0; //@line 7941
 $vararg_buffer1 = sp + 8 | 0; //@line 7942
 $vararg_buffer = sp; //@line 7943
 $5 = $0 + 2496 | 0; //@line 7944
 HEAP32[$5 >> 2] = 5; //@line 7945
 $6 = $0 + 2904 | 0; //@line 7946
 HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -3; //@line 7949
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 7950
 __ZN7LoRaMac16on_radio_rx_doneEPKhtsa($0, $1, $2, $3, $4); //@line 7951
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 276; //@line 7954
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7956
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 7958
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7960
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 7962
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 7964
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 7966
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 7968
  HEAP32[$AsyncCtx + 32 >> 2] = $5; //@line 7970
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer3; //@line 7972
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer3; //@line 7974
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer5; //@line 7976
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer5; //@line 7978
  sp = STACKTOP; //@line 7979
  STACKTOP = sp; //@line 7980
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7982
 HEAP8[$0 + 2900 >> 0] = 0; //@line 7984
 HEAP8[$0 + 2898 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 14 >> 0] | 0; //@line 7989
 HEAP16[$0 + 2896 >> 1] = HEAP16[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 24 >> 1] | 0; //@line 7994
 HEAP8[$0 + 2899 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 26 >> 0] | 0; //@line 7999
 do {
  if (HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) >> 0] | 0) {
   __ZN7LoRaMac25post_process_mlme_requestEv($0); //@line 8005
   $AsyncCtx13 = _emscripten_alloc_async_context(52, sp) | 0; //@line 8006
   __ZN12LoRaWANStack20mlme_confirm_handlerEv($0); //@line 8007
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 277; //@line 8010
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 8012
    HEAP32[$AsyncCtx13 + 8 >> 2] = $6; //@line 8014
    HEAP32[$AsyncCtx13 + 12 >> 2] = $0; //@line 8016
    HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 8018
    HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer1; //@line 8020
    HEAP32[$AsyncCtx13 + 24 >> 2] = $vararg_buffer; //@line 8022
    HEAP32[$AsyncCtx13 + 28 >> 2] = $vararg_buffer; //@line 8024
    HEAP32[$AsyncCtx13 + 32 >> 2] = $5; //@line 8026
    HEAP32[$AsyncCtx13 + 36 >> 2] = $vararg_buffer3; //@line 8028
    HEAP32[$AsyncCtx13 + 40 >> 2] = $vararg_buffer3; //@line 8030
    HEAP32[$AsyncCtx13 + 44 >> 2] = $vararg_buffer5; //@line 8032
    HEAP32[$AsyncCtx13 + 48 >> 2] = $vararg_buffer5; //@line 8034
    sp = STACKTOP; //@line 8035
    STACKTOP = sp; //@line 8036
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 8038
    break;
   }
  }
 } while (0);
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  STACKTOP = sp; //@line 8045
  return;
 }
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1) {
   if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 32 >> 0] | 0) {
    HEAP32[$vararg_buffer >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 11 >> 0]; //@line 8061
    _mbed_tracef(16, 11997, 12208, $vararg_buffer); //@line 8062
    __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 8063
    HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -18 | 16; //@line 8067
    $AsyncCtx29 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8068
    __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8069
    if (___async) {
     HEAP32[$AsyncCtx29 >> 2] = 278; //@line 8072
     HEAP32[$AsyncCtx29 + 4 >> 2] = $0; //@line 8074
     HEAP32[$AsyncCtx29 + 8 >> 2] = $6; //@line 8076
     HEAP32[$AsyncCtx29 + 12 >> 2] = $0; //@line 8078
     HEAP32[$AsyncCtx29 + 16 >> 2] = $5; //@line 8080
     HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer3; //@line 8082
     HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer3; //@line 8084
     HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer5; //@line 8086
     HEAP32[$AsyncCtx29 + 32 >> 2] = $vararg_buffer5; //@line 8088
     sp = STACKTOP; //@line 8089
     STACKTOP = sp; //@line 8090
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx29 | 0); //@line 8092
     break;
    }
   }
   if (!(__ZN7LoRaMac24continue_sending_processEv($0) | 0)) {
    _mbed_tracef(2, 11997, 12002, $vararg_buffer1); //@line 8098
    HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -18 | 1; //@line 8102
    $AsyncCtx25 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8103
    __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8104
    if (___async) {
     HEAP32[$AsyncCtx25 >> 2] = 279; //@line 8107
     HEAP32[$AsyncCtx25 + 4 >> 2] = $0; //@line 8109
     HEAP32[$AsyncCtx25 + 8 >> 2] = $6; //@line 8111
     HEAP32[$AsyncCtx25 + 12 >> 2] = $0; //@line 8113
     HEAP32[$AsyncCtx25 + 16 >> 2] = $5; //@line 8115
     HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer3; //@line 8117
     HEAP32[$AsyncCtx25 + 24 >> 2] = $vararg_buffer3; //@line 8119
     HEAP32[$AsyncCtx25 + 28 >> 2] = $vararg_buffer5; //@line 8121
     HEAP32[$AsyncCtx25 + 32 >> 2] = $vararg_buffer5; //@line 8123
     sp = STACKTOP; //@line 8124
     STACKTOP = sp; //@line 8125
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx25 | 0); //@line 8127
     break;
    }
   }
  } else {
   __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 8132
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 16; //@line 8135
   $AsyncCtx21 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8136
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8137
   if (___async) {
    HEAP32[$AsyncCtx21 >> 2] = 280; //@line 8140
    HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 8142
    HEAP32[$AsyncCtx21 + 8 >> 2] = $6; //@line 8144
    HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 8146
    HEAP32[$AsyncCtx21 + 16 >> 2] = $5; //@line 8148
    HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer3; //@line 8150
    HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 8152
    HEAP32[$AsyncCtx21 + 28 >> 2] = $vararg_buffer5; //@line 8154
    HEAP32[$AsyncCtx21 + 32 >> 2] = $vararg_buffer5; //@line 8156
    sp = STACKTOP; //@line 8157
    STACKTOP = sp; //@line 8158
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx21 | 0); //@line 8160
    break;
   }
  }
 } while (0);
 do {
  if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) >> 0] | 0) {
   __ZN7LoRaMac21post_process_mcps_indEv($0); //@line 8170
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 2; //@line 8173
   $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8174
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8175
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 281; //@line 8178
    HEAP32[$AsyncCtx17 + 4 >> 2] = $6; //@line 8180
    HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 8182
    HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 8184
    HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 8186
    HEAP32[$AsyncCtx17 + 20 >> 2] = $vararg_buffer3; //@line 8188
    HEAP32[$AsyncCtx17 + 24 >> 2] = $vararg_buffer3; //@line 8190
    HEAP32[$AsyncCtx17 + 28 >> 2] = $vararg_buffer5; //@line 8192
    HEAP32[$AsyncCtx17 + 32 >> 2] = $vararg_buffer5; //@line 8194
    sp = STACKTOP; //@line 8195
    STACKTOP = sp; //@line 8196
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 8198
    break;
   }
  }
 } while (0);
 if (!(HEAP32[$6 >> 2] & 1)) {
  $111 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 8208
  HEAP32[$5 >> 2] = $111 ? 5 : 2; //@line 8210
 }
 do {
  if (HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($0) | 0) + 4 >> 0] | 0) {
   _mbed_tracef(16, 11997, 12228, $vararg_buffer3); //@line 8218
   __ZN7LoRaMac21post_process_mlme_indEv($0); //@line 8219
   _mbed_tracef(16, 11997, 12252, $vararg_buffer5); //@line 8220
   $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8221
   __ZN12LoRaWANStack23mlme_indication_handlerEv($0); //@line 8222
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 282; //@line 8225
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 8227
    sp = STACKTOP; //@line 8228
    STACKTOP = sp; //@line 8229
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 8231
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 2911 >> 0] = 1; //@line 8237
 STACKTOP = sp; //@line 8238
 return;
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0121 = 0, $$0122 = 0, $$0124 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi128Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $114 = 0, $116 = 0, $12 = 0, $120 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $33 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $83 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3096
 if (!$0) {
  $$1 = -24832; //@line 3099
  return $$1 | 0; //@line 3100
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 3102
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 3107
  return $$1 | 0; //@line 3108
 }
 HEAP32[$4 >> 2] = 0; //@line 3110
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 3112
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 3114
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 3119
    return $$1 | 0; //@line 3120
   }
   HEAP32[$4 >> 2] = $2; //@line 3122
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 3126
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 3128
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 3130
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3131
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 3132
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 568; //@line 3135
    sp = STACKTOP; //@line 3136
    return 0; //@line 3137
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 3139
   $$1 = $22; //@line 3140
   return $$1 | 0; //@line 3141
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 3145
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 3147
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3148
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 3149
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 569; //@line 3152
    sp = STACKTOP; //@line 3153
    return 0; //@line 3154
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 3156
   $$1 = $25; //@line 3157
   return $$1 | 0; //@line 3158
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 3164
    return $$1 | 0; //@line 3165
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 3173
     return $$1 | 0; //@line 3174
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 3179
     return $$1 | 0; //@line 3180
    }
   }
   switch ($12 | 0) {
   case 2:
    {
     $33 = $0 + 8 | 0; //@line 3185
     L21 : do {
      switch (HEAP32[$33 >> 2] | 0) {
      case 0:
       {
        $38 = $0 + 36 | 0; //@line 3193
        $39 = HEAP32[$38 >> 2] | 0; //@line 3194
        $40 = $10 - $39 | 0; //@line 3195
        if (!(HEAP32[$0 + 12 >> 2] | 0)) {
         if ($40 >>> 0 > $2 >>> 0) {
          $$pre$phiZ2D = $38; //@line 3199
          $48 = $39; //@line 3199
          label = 22; //@line 3200
          break L21;
         } else {
          label = 20; //@line 3203
          break L21;
         }
        } else {
         if ($40 >>> 0 < $2 >>> 0) {
          label = 20; //@line 3209
          break L21;
         } else {
          $$pre$phiZ2D = $38; //@line 3212
          $48 = $39; //@line 3212
          label = 22; //@line 3213
          break L21;
         }
        }
        break;
       }
      case 1:
       {
        $43 = $0 + 36 | 0; //@line 3220
        $44 = HEAP32[$43 >> 2] | 0; //@line 3221
        if (($10 - $44 | 0) >>> 0 > $2 >>> 0) {
         $$pre$phiZ2D = $43; //@line 3225
         $48 = $44; //@line 3225
         label = 22; //@line 3226
        } else {
         $$pre$phi128Z2D = $43; //@line 3228
         $52 = $44; //@line 3228
        }
        break;
       }
      default:
       {
        label = 20; //@line 3233
       }
      }
     } while (0);
     if ((label | 0) == 20) {
      $$phi$trans$insert = $0 + 36 | 0; //@line 3238
      $$pre$phi128Z2D = $$phi$trans$insert; //@line 3240
      $52 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 3240
     } else if ((label | 0) == 22) {
      _memcpy($0 + 20 + $48 | 0, $1 | 0, $2 | 0) | 0; //@line 3244
      HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 3247
      $$1 = 0; //@line 3248
      return $$1 | 0; //@line 3249
     }
     do {
      if (!$52) {
       $$0121 = $3; //@line 3254
       $$0122 = $2; //@line 3254
       $$0124 = $1; //@line 3254
      } else {
       $53 = $10 - $52 | 0; //@line 3256
       _memcpy($0 + 20 + $52 | 0, $1 | 0, $53 | 0) | 0; //@line 3258
       $59 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 3263
       $61 = HEAP32[$0 + 60 >> 2] | 0; //@line 3265
       $62 = HEAP32[$33 >> 2] | 0; //@line 3266
       $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3269
       $65 = FUNCTION_TABLE_iiiiiii[$59 & 3]($61, $62, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 3270
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 570; //@line 3273
        HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 3275
        HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 3277
        HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 3279
        HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi128Z2D; //@line 3281
        HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 3283
        HEAP32[$AsyncCtx3 + 24 >> 2] = $53; //@line 3285
        HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 3287
        HEAP32[$AsyncCtx3 + 32 >> 2] = $33; //@line 3289
        HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 3291
        HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 3293
        sp = STACKTOP; //@line 3294
        return 0; //@line 3295
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3297
       if (!$65) {
        HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 3302
        HEAP32[$$pre$phi128Z2D >> 2] = 0; //@line 3304
        $$0121 = $3 + $10 | 0; //@line 3307
        $$0122 = $2 - $53 | 0; //@line 3307
        $$0124 = $1 + $53 | 0; //@line 3307
        break;
       } else {
        $$1 = $65; //@line 3310
        return $$1 | 0; //@line 3311
       }
      }
     } while (0);
     if (!$$0122) {
      $$1 = 0; //@line 3317
      return $$1 | 0; //@line 3318
     }
     $83 = ($$0122 >>> 0) % ($10 >>> 0) | 0; //@line 3320
     if (!$83) {
      if (!(HEAP32[$33 >> 2] | 0)) {
       $$0 = (HEAP32[$0 + 12 >> 2] | 0) == 0 ? 0 : $10; //@line 3330
      } else {
       $$0 = 0; //@line 3332
      }
     } else {
      $$0 = $83; //@line 3335
     }
     $91 = $$0122 - $$0 | 0; //@line 3338
     _memcpy($0 + 20 | 0, $$0124 + $91 | 0, $$0 | 0) | 0; //@line 3340
     HEAP32[$$pre$phi128Z2D >> 2] = (HEAP32[$$pre$phi128Z2D >> 2] | 0) + $$0; //@line 3343
     if (!$91) {
      $$1 = 0; //@line 3346
      return $$1 | 0; //@line 3347
     }
     $100 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 3353
     $102 = HEAP32[$0 + 60 >> 2] | 0; //@line 3355
     $103 = HEAP32[$33 >> 2] | 0; //@line 3356
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3358
     $105 = FUNCTION_TABLE_iiiiiii[$100 & 3]($102, $103, $91, $0 + 40 | 0, $$0124, $$0121) | 0; //@line 3359
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 571; //@line 3362
      HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 3364
      HEAP32[$AsyncCtx7 + 8 >> 2] = $91; //@line 3366
      sp = STACKTOP; //@line 3367
      return 0; //@line 3368
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3370
     if ($105 | 0) {
      $$1 = $105; //@line 3373
      return $$1 | 0; //@line 3374
     }
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $91; //@line 3378
     $$1 = 0; //@line 3379
     return $$1 | 0; //@line 3380
    }
   case 5:
    {
     $114 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 3387
     $116 = HEAP32[$0 + 60 >> 2] | 0; //@line 3389
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3393
     $120 = FUNCTION_TABLE_iiiiiiii[$114 & 1]($116, $2, $0 + 36 | 0, $0 + 40 | 0, $0 + 20 | 0, $1, $3) | 0; //@line 3394
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 572; //@line 3397
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 3399
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 3401
      sp = STACKTOP; //@line 3402
      return 0; //@line 3403
     }
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3405
     if ($120 | 0) {
      $$1 = $120; //@line 3408
      return $$1 | 0; //@line 3409
     }
     HEAP32[$4 >> 2] = $2; //@line 3411
     $$1 = 0; //@line 3412
     return $$1 | 0; //@line 3413
    }
   default:
    {
     $$1 = -24704; //@line 3417
     return $$1 | 0; //@line 3418
    }
   }
  }
 }
 return 0; //@line 3423
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_323($0) {
 $0 = $0 | 0;
 var $$pre$i$i25 = 0, $10 = 0, $12 = 0, $14 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24254
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24256
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24258
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24260
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24262
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24264
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24266
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24268
 $$pre$i$i25 = HEAP32[HEAP32[$0 + 32 >> 2] >> 2] | 0; //@line 24273
 HEAP32[HEAP32[$0 + 36 >> 2] >> 2] = $$pre$i$i25; //@line 24275
 if ($$pre$i$i25 | 0) {
  $22 = HEAP32[$$pre$i$i25 + 8 >> 2] | 0; //@line 24279
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 24280
  FUNCTION_TABLE_vi[$22 & 1023]($12); //@line 24281
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 24284
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 24285
   HEAP32[$23 >> 2] = $2; //@line 24286
   $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 24287
   HEAP32[$24 >> 2] = $4; //@line 24288
   $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 24289
   HEAP32[$25 >> 2] = $6; //@line 24290
   $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 24291
   HEAP32[$26 >> 2] = $8; //@line 24292
   $27 = $ReallocAsyncCtx6 + 20 | 0; //@line 24293
   HEAP32[$27 >> 2] = $10; //@line 24294
   $28 = $ReallocAsyncCtx6 + 24 | 0; //@line 24295
   HEAP32[$28 >> 2] = $12; //@line 24296
   $29 = $ReallocAsyncCtx6 + 28 | 0; //@line 24297
   HEAP32[$29 >> 2] = $14; //@line 24298
   sp = STACKTOP; //@line 24299
   return;
  }
  ___async_unwind = 0; //@line 24302
  HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 24303
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 24304
  HEAP32[$23 >> 2] = $2; //@line 24305
  $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 24306
  HEAP32[$24 >> 2] = $4; //@line 24307
  $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 24308
  HEAP32[$25 >> 2] = $6; //@line 24309
  $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 24310
  HEAP32[$26 >> 2] = $8; //@line 24311
  $27 = $ReallocAsyncCtx6 + 20 | 0; //@line 24312
  HEAP32[$27 >> 2] = $10; //@line 24313
  $28 = $ReallocAsyncCtx6 + 24 | 0; //@line 24314
  HEAP32[$28 >> 2] = $12; //@line 24315
  $29 = $ReallocAsyncCtx6 + 28 | 0; //@line 24316
  HEAP32[$29 >> 2] = $14; //@line 24317
  sp = STACKTOP; //@line 24318
  return;
 }
 $30 = $14 + 12 | 0; //@line 24321
 HEAP32[$14 >> 2] = 173; //@line 24322
 HEAP32[$14 + 4 >> 2] = 0; //@line 24324
 HEAP32[$14 + 8 >> 2] = $4; //@line 24326
 HEAP32[$30 >> 2] = 824; //@line 24327
 $31 = $4 + 2448 | 0; //@line 24328
 if (($31 | 0) == ($14 | 0)) {
  $58 = HEAP32[208] | 0; //@line 24332
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 24333
  FUNCTION_TABLE_vi[$58 & 1023]($14); //@line 24334
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 24337
   $59 = $ReallocAsyncCtx9 + 4 | 0; //@line 24338
   HEAP32[$59 >> 2] = $2; //@line 24339
   $60 = $ReallocAsyncCtx9 + 8 | 0; //@line 24340
   HEAP32[$60 >> 2] = $4; //@line 24341
   $61 = $ReallocAsyncCtx9 + 12 | 0; //@line 24342
   HEAP32[$61 >> 2] = $14; //@line 24343
   $62 = $ReallocAsyncCtx9 + 16 | 0; //@line 24344
   HEAP32[$62 >> 2] = $6; //@line 24345
   $63 = $ReallocAsyncCtx9 + 20 | 0; //@line 24346
   HEAP32[$63 >> 2] = $8; //@line 24347
   $64 = $ReallocAsyncCtx9 + 24 | 0; //@line 24348
   HEAP32[$64 >> 2] = $10; //@line 24349
   sp = STACKTOP; //@line 24350
   return;
  }
  ___async_unwind = 0; //@line 24353
  HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 24354
  $59 = $ReallocAsyncCtx9 + 4 | 0; //@line 24355
  HEAP32[$59 >> 2] = $2; //@line 24356
  $60 = $ReallocAsyncCtx9 + 8 | 0; //@line 24357
  HEAP32[$60 >> 2] = $4; //@line 24358
  $61 = $ReallocAsyncCtx9 + 12 | 0; //@line 24359
  HEAP32[$61 >> 2] = $14; //@line 24360
  $62 = $ReallocAsyncCtx9 + 16 | 0; //@line 24361
  HEAP32[$62 >> 2] = $6; //@line 24362
  $63 = $ReallocAsyncCtx9 + 20 | 0; //@line 24363
  HEAP32[$63 >> 2] = $8; //@line 24364
  $64 = $ReallocAsyncCtx9 + 24 | 0; //@line 24365
  HEAP32[$64 >> 2] = $10; //@line 24366
  sp = STACKTOP; //@line 24367
  return;
 }
 $33 = $4 + 2460 | 0; //@line 24370
 $34 = HEAP32[$33 >> 2] | 0; //@line 24371
 if (!$34) {
  $48 = HEAP32[207] | 0; //@line 24375
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 24376
  FUNCTION_TABLE_vii[$48 & 15]($31, $14); //@line 24377
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 24380
   $49 = $ReallocAsyncCtx8 + 4 | 0; //@line 24381
   HEAP32[$49 >> 2] = $2; //@line 24382
   $50 = $ReallocAsyncCtx8 + 8 | 0; //@line 24383
   HEAP32[$50 >> 2] = $4; //@line 24384
   $51 = $ReallocAsyncCtx8 + 12 | 0; //@line 24385
   HEAP32[$51 >> 2] = $14; //@line 24386
   $52 = $ReallocAsyncCtx8 + 16 | 0; //@line 24387
   HEAP32[$52 >> 2] = $6; //@line 24388
   $53 = $ReallocAsyncCtx8 + 20 | 0; //@line 24389
   HEAP32[$53 >> 2] = $8; //@line 24390
   $54 = $ReallocAsyncCtx8 + 24 | 0; //@line 24391
   HEAP32[$54 >> 2] = $10; //@line 24392
   $55 = $ReallocAsyncCtx8 + 28 | 0; //@line 24393
   HEAP32[$55 >> 2] = $30; //@line 24394
   $56 = $ReallocAsyncCtx8 + 32 | 0; //@line 24395
   HEAP32[$56 >> 2] = $33; //@line 24396
   sp = STACKTOP; //@line 24397
   return;
  }
  ___async_unwind = 0; //@line 24400
  HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 24401
  $49 = $ReallocAsyncCtx8 + 4 | 0; //@line 24402
  HEAP32[$49 >> 2] = $2; //@line 24403
  $50 = $ReallocAsyncCtx8 + 8 | 0; //@line 24404
  HEAP32[$50 >> 2] = $4; //@line 24405
  $51 = $ReallocAsyncCtx8 + 12 | 0; //@line 24406
  HEAP32[$51 >> 2] = $14; //@line 24407
  $52 = $ReallocAsyncCtx8 + 16 | 0; //@line 24408
  HEAP32[$52 >> 2] = $6; //@line 24409
  $53 = $ReallocAsyncCtx8 + 20 | 0; //@line 24410
  HEAP32[$53 >> 2] = $8; //@line 24411
  $54 = $ReallocAsyncCtx8 + 24 | 0; //@line 24412
  HEAP32[$54 >> 2] = $10; //@line 24413
  $55 = $ReallocAsyncCtx8 + 28 | 0; //@line 24414
  HEAP32[$55 >> 2] = $30; //@line 24415
  $56 = $ReallocAsyncCtx8 + 32 | 0; //@line 24416
  HEAP32[$56 >> 2] = $33; //@line 24417
  sp = STACKTOP; //@line 24418
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 24422
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 24423
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 24424
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 24427
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 24428
   HEAP32[$38 >> 2] = $2; //@line 24429
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 24430
   HEAP32[$39 >> 2] = $4; //@line 24431
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 24432
   HEAP32[$40 >> 2] = $14; //@line 24433
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 24434
   HEAP32[$41 >> 2] = $6; //@line 24435
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 24436
   HEAP32[$42 >> 2] = $33; //@line 24437
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 24438
   HEAP32[$43 >> 2] = $31; //@line 24439
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 24440
   HEAP32[$44 >> 2] = $8; //@line 24441
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 24442
   HEAP32[$45 >> 2] = $10; //@line 24443
   $46 = $ReallocAsyncCtx7 + 36 | 0; //@line 24444
   HEAP32[$46 >> 2] = $30; //@line 24445
   sp = STACKTOP; //@line 24446
   return;
  }
  ___async_unwind = 0; //@line 24449
  HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 24450
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 24451
  HEAP32[$38 >> 2] = $2; //@line 24452
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 24453
  HEAP32[$39 >> 2] = $4; //@line 24454
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 24455
  HEAP32[$40 >> 2] = $14; //@line 24456
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 24457
  HEAP32[$41 >> 2] = $6; //@line 24458
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 24459
  HEAP32[$42 >> 2] = $33; //@line 24460
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 24461
  HEAP32[$43 >> 2] = $31; //@line 24462
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 24463
  HEAP32[$44 >> 2] = $8; //@line 24464
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 24465
  HEAP32[$45 >> 2] = $10; //@line 24466
  $46 = $ReallocAsyncCtx7 + 36 | 0; //@line 24467
  HEAP32[$46 >> 2] = $30; //@line 24468
  sp = STACKTOP; //@line 24469
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$036 = 0, $$038 = 0, $10 = 0, $104 = 0, $107 = 0, $110 = 0, $114 = 0, $117 = 0, $126 = 0, $129 = 0, $132 = 0, $134 = 0, $137 = 0, $16 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $41 = 0, $43 = 0, $47 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $7 = 0, $71 = 0, $74 = 0, $87 = 0, $90 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19266
 $3 = HEAP8[$1 + 1 >> 0] | 0; //@line 19268
 $5 = HEAP32[$1 + 4 >> 2] | 0; //@line 19270
 $6 = $0 + 4 | 0; //@line 19271
 $7 = HEAP32[$6 >> 2] | 0; //@line 19272
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 72 >> 2] | 0; //@line 19275
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 19276
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 19277
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 502; //@line 19280
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 19282
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 19284
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 19286
  HEAP8[$AsyncCtx + 16 >> 0] = $3; //@line 19288
  HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 19290
  sp = STACKTOP; //@line 19291
  return 0; //@line 19292
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19294
 $16 = HEAP32[$6 >> 2] | 0; //@line 19295
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 40 >> 2] | 0; //@line 19298
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19299
 $20 = FUNCTION_TABLE_ii[$19 & 15]($16) | 0; //@line 19300
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 503; //@line 19303
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 19305
  HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 19307
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 19309
  HEAP8[$AsyncCtx2 + 16 >> 0] = $3; //@line 19311
  HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 19313
  sp = STACKTOP; //@line 19314
  return 0; //@line 19315
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19317
 $26 = $20 << 24 >> 24 == 0; //@line 19318
 $27 = HEAP32[$6 >> 2] | 0; //@line 19319
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 76 >> 2] | 0; //@line 19322
 $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19323
 FUNCTION_TABLE_vi[$30 & 1023]($27); //@line 19324
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 504; //@line 19327
  HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 19329
  HEAP32[$AsyncCtx5 + 8 >> 2] = $6; //@line 19331
  HEAP8[$AsyncCtx5 + 12 >> 0] = $26 & 1; //@line 19334
  HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 19336
  HEAP8[$AsyncCtx5 + 20 >> 0] = $3; //@line 19338
  HEAP32[$AsyncCtx5 + 24 >> 2] = $5; //@line 19340
  sp = STACKTOP; //@line 19341
  return 0; //@line 19342
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19344
 if (!$26) {
  $$0 = 0; //@line 19346
  return $$0 | 0; //@line 19347
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $41 = HEAP32[$0 + 124 >> 2] | 0; //@line 19354
  $43 = HEAPU8[$1 >> 0] | 0; //@line 19356
  $47 = HEAP32[$41 + ($43 * 12 | 0) + 4 >> 2] | 0; //@line 19360
  $$038 = ($47 | 0) == 0 ? HEAP32[$41 + ($43 * 12 | 0) >> 2] | 0 : $47; //@line 19363
 } else {
  $$038 = $5; //@line 19365
 }
 $52 = HEAP32[$0 + 96 >> 2] | 0; //@line 19370
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 19372
 $55 = $3 & 255; //@line 19373
 $57 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $55 >> 0] | 0; //@line 19375
 $58 = HEAP32[$6 >> 2] | 0; //@line 19376
 $61 = HEAP32[(HEAP32[$58 >> 2] | 0) + 72 >> 2] | 0; //@line 19379
 $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 19380
 FUNCTION_TABLE_vi[$61 & 1023]($58); //@line 19381
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 505; //@line 19384
  HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 19386
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$038; //@line 19388
  HEAP8[$AsyncCtx9 + 12 >> 0] = $3; //@line 19390
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 19392
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 19394
  HEAP8[$AsyncCtx9 + 24 >> 0] = $57; //@line 19396
  HEAP32[$AsyncCtx9 + 28 >> 2] = $52; //@line 19398
  HEAP32[$AsyncCtx9 + 32 >> 2] = $54; //@line 19400
  HEAP32[$AsyncCtx9 + 36 >> 2] = $55; //@line 19402
  sp = STACKTOP; //@line 19403
  return 0; //@line 19404
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 19406
 $71 = HEAP32[$6 >> 2] | 0; //@line 19407
 $74 = HEAP32[(HEAP32[$71 >> 2] | 0) + 32 >> 2] | 0; //@line 19410
 $AsyncCtx12 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19411
 FUNCTION_TABLE_vii[$74 & 15]($71, $$038); //@line 19412
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 506; //@line 19415
  HEAP8[$AsyncCtx12 + 4 >> 0] = $3; //@line 19417
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 19419
  HEAP32[$AsyncCtx12 + 12 >> 2] = $6; //@line 19421
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 19423
  HEAP8[$AsyncCtx12 + 20 >> 0] = $57; //@line 19425
  HEAP32[$AsyncCtx12 + 24 >> 2] = $52; //@line 19427
  HEAP32[$AsyncCtx12 + 28 >> 2] = $54; //@line 19429
  HEAP32[$AsyncCtx12 + 32 >> 2] = $55; //@line 19431
  sp = STACKTOP; //@line 19432
  return 0; //@line 19433
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 19435
 do {
  if ($3 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 19443
   } else {
    $87 = HEAP32[$6 >> 2] | 0; //@line 19445
    $90 = HEAP32[(HEAP32[$87 >> 2] | 0) + 16 >> 2] | 0; //@line 19448
    $95 = HEAP32[$1 + 8 >> 2] & 65535; //@line 19453
    $98 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 19456
    $AsyncCtx16 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19457
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$90 & 1]($87, 0, 5e4, ($57 & 255) * 1e3 | 0, 0, 83333, 5, $95, 0, 0, 1, 0, 0, 0, $98); //@line 19458
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 507; //@line 19461
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 19463
     HEAP32[$AsyncCtx16 + 8 >> 2] = $52; //@line 19465
     HEAP32[$AsyncCtx16 + 12 >> 2] = $54; //@line 19467
     HEAP32[$AsyncCtx16 + 16 >> 2] = $55; //@line 19469
     HEAP32[$AsyncCtx16 + 20 >> 2] = $6; //@line 19471
     sp = STACKTOP; //@line 19472
     return 0; //@line 19473
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 19475
     $$036 = 0; //@line 19476
     break;
    }
   }
  } else {
   label = 19; //@line 19481
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $104 = HEAP32[$6 >> 2] | 0; //@line 19486
   $107 = HEAP32[(HEAP32[$104 >> 2] | 0) + 16 >> 2] | 0; //@line 19489
   $110 = HEAPU8[$1 + 2 >> 0] | 0; //@line 19492
   $114 = HEAP32[$1 + 8 >> 2] & 65535; //@line 19496
   $117 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 19499
   $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19500
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$107 & 1]($104, 1, $110, $57 & 255, 1, 0, 8, $114, 0, 0, 0, 0, 0, 1, $117); //@line 19501
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 508; //@line 19504
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 19506
    HEAP32[$AsyncCtx20 + 8 >> 2] = $52; //@line 19508
    HEAP32[$AsyncCtx20 + 12 >> 2] = $54; //@line 19510
    HEAP32[$AsyncCtx20 + 16 >> 2] = $55; //@line 19512
    HEAP32[$AsyncCtx20 + 20 >> 2] = $6; //@line 19514
    sp = STACKTOP; //@line 19515
    return 0; //@line 19516
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 19518
    $$036 = 1; //@line 19519
    break;
   }
  }
 } while (0);
 $126 = HEAP32[$6 >> 2] | 0; //@line 19530
 $129 = HEAP32[(HEAP32[$126 >> 2] | 0) + 44 >> 2] | 0; //@line 19533
 $132 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $52 : $54) + $55 >> 0] | 0) + 13 & 255; //@line 19536
 $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19537
 FUNCTION_TABLE_viii[$129 & 7]($126, $$036, $132); //@line 19538
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 509; //@line 19541
  HEAP32[$AsyncCtx24 + 4 >> 2] = $6; //@line 19543
  sp = STACKTOP; //@line 19544
  return 0; //@line 19545
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 19547
 $134 = HEAP32[$6 >> 2] | 0; //@line 19548
 $137 = HEAP32[(HEAP32[$134 >> 2] | 0) + 76 >> 2] | 0; //@line 19551
 $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 19552
 FUNCTION_TABLE_vi[$137 & 1023]($134); //@line 19553
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 510; //@line 19556
  sp = STACKTOP; //@line 19557
  return 0; //@line 19558
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 19560
 $$0 = 1; //@line 19561
 return $$0 | 0; //@line 19562
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_249($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7289
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7291
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7293
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7297
 HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 7301
 $11 = $4 + 16 | 0; //@line 7302
 $12 = $4 + 28 | 0; //@line 7303
 $13 = HEAP32[$12 >> 2] | 0; //@line 7304
 if ($13 | 0) {
  $15 = $2 + 2516 | 0; //@line 7307
  if (($15 | 0) != ($11 | 0)) {
   $17 = $2 + 2528 | 0; //@line 7310
   $18 = HEAP32[$17 >> 2] | 0; //@line 7311
   if (!$18) {
    $30 = HEAP32[$13 + 4 >> 2] | 0; //@line 7315
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 7316
    FUNCTION_TABLE_vii[$30 & 15]($15, $11); //@line 7317
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 341; //@line 7320
     $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 7321
     HEAP32[$31 >> 2] = $17; //@line 7322
     $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 7323
     HEAP32[$32 >> 2] = $4; //@line 7324
     $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 7325
     HEAP32[$33 >> 2] = $2; //@line 7326
     $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 7327
     HEAP32[$34 >> 2] = $8; //@line 7328
     $35 = $ReallocAsyncCtx4 + 20 | 0; //@line 7329
     HEAP32[$35 >> 2] = $12; //@line 7330
     sp = STACKTOP; //@line 7331
     return;
    }
    ___async_unwind = 0; //@line 7334
    HEAP32[$ReallocAsyncCtx4 >> 2] = 341; //@line 7335
    $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 7336
    HEAP32[$31 >> 2] = $17; //@line 7337
    $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 7338
    HEAP32[$32 >> 2] = $4; //@line 7339
    $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 7340
    HEAP32[$33 >> 2] = $2; //@line 7341
    $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 7342
    HEAP32[$34 >> 2] = $8; //@line 7343
    $35 = $ReallocAsyncCtx4 + 20 | 0; //@line 7344
    HEAP32[$35 >> 2] = $12; //@line 7345
    sp = STACKTOP; //@line 7346
    return;
   } else {
    $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 7350
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 7351
    FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 7352
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 340; //@line 7355
     $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 7356
     HEAP32[$22 >> 2] = $15; //@line 7357
     $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 7358
     HEAP32[$23 >> 2] = $11; //@line 7359
     $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 7360
     HEAP32[$24 >> 2] = $17; //@line 7361
     $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 7362
     HEAP32[$25 >> 2] = $4; //@line 7363
     $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 7364
     HEAP32[$26 >> 2] = $2; //@line 7365
     $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 7366
     HEAP32[$27 >> 2] = $8; //@line 7367
     $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 7368
     HEAP32[$28 >> 2] = $12; //@line 7369
     sp = STACKTOP; //@line 7370
     return;
    }
    ___async_unwind = 0; //@line 7373
    HEAP32[$ReallocAsyncCtx3 >> 2] = 340; //@line 7374
    $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 7375
    HEAP32[$22 >> 2] = $15; //@line 7376
    $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 7377
    HEAP32[$23 >> 2] = $11; //@line 7378
    $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 7379
    HEAP32[$24 >> 2] = $17; //@line 7380
    $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 7381
    HEAP32[$25 >> 2] = $4; //@line 7382
    $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 7383
    HEAP32[$26 >> 2] = $2; //@line 7384
    $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 7385
    HEAP32[$27 >> 2] = $8; //@line 7386
    $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 7387
    HEAP32[$28 >> 2] = $12; //@line 7388
    sp = STACKTOP; //@line 7389
    return;
   }
  }
 }
 $36 = $4 + 32 | 0; //@line 7394
 $37 = $4 + 44 | 0; //@line 7395
 $38 = HEAP32[$37 >> 2] | 0; //@line 7396
 if (!$38) {
  HEAP32[___async_retval >> 2] = 0; //@line 7400
  return;
 }
 $40 = $2 + 2532 | 0; //@line 7403
 if (($40 | 0) == ($36 | 0)) {
  $61 = HEAP32[$38 + 4 >> 2] | 0; //@line 7407
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 7408
  FUNCTION_TABLE_vii[$61 & 15]($8, $36); //@line 7409
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 7412
   $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 7413
   HEAP32[$62 >> 2] = $37; //@line 7414
   $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 7415
   HEAP32[$63 >> 2] = $2; //@line 7416
   $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 7417
   HEAP32[$64 >> 2] = $8; //@line 7418
   sp = STACKTOP; //@line 7419
   return;
  }
  ___async_unwind = 0; //@line 7422
  HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 7423
  $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 7424
  HEAP32[$62 >> 2] = $37; //@line 7425
  $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 7426
  HEAP32[$63 >> 2] = $2; //@line 7427
  $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 7428
  HEAP32[$64 >> 2] = $8; //@line 7429
  sp = STACKTOP; //@line 7430
  return;
 }
 $42 = $2 + 2544 | 0; //@line 7433
 $43 = HEAP32[$42 >> 2] | 0; //@line 7434
 if (!$43) {
  $54 = HEAP32[$38 + 4 >> 2] | 0; //@line 7438
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 7439
  FUNCTION_TABLE_vii[$54 & 15]($40, $36); //@line 7440
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 7443
   $55 = $ReallocAsyncCtx6 + 4 | 0; //@line 7444
   HEAP32[$55 >> 2] = $37; //@line 7445
   $56 = $ReallocAsyncCtx6 + 8 | 0; //@line 7446
   HEAP32[$56 >> 2] = $42; //@line 7447
   $57 = $ReallocAsyncCtx6 + 12 | 0; //@line 7448
   HEAP32[$57 >> 2] = $2; //@line 7449
   $58 = $ReallocAsyncCtx6 + 16 | 0; //@line 7450
   HEAP32[$58 >> 2] = $8; //@line 7451
   $59 = $ReallocAsyncCtx6 + 20 | 0; //@line 7452
   HEAP32[$59 >> 2] = $36; //@line 7453
   sp = STACKTOP; //@line 7454
   return;
  }
  ___async_unwind = 0; //@line 7457
  HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 7458
  $55 = $ReallocAsyncCtx6 + 4 | 0; //@line 7459
  HEAP32[$55 >> 2] = $37; //@line 7460
  $56 = $ReallocAsyncCtx6 + 8 | 0; //@line 7461
  HEAP32[$56 >> 2] = $42; //@line 7462
  $57 = $ReallocAsyncCtx6 + 12 | 0; //@line 7463
  HEAP32[$57 >> 2] = $2; //@line 7464
  $58 = $ReallocAsyncCtx6 + 16 | 0; //@line 7465
  HEAP32[$58 >> 2] = $8; //@line 7466
  $59 = $ReallocAsyncCtx6 + 20 | 0; //@line 7467
  HEAP32[$59 >> 2] = $36; //@line 7468
  sp = STACKTOP; //@line 7469
  return;
 } else {
  $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 7473
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 7474
  FUNCTION_TABLE_vi[$46 & 1023]($40); //@line 7475
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 7478
   $47 = $ReallocAsyncCtx5 + 4 | 0; //@line 7479
   HEAP32[$47 >> 2] = $37; //@line 7480
   $48 = $ReallocAsyncCtx5 + 8 | 0; //@line 7481
   HEAP32[$48 >> 2] = $42; //@line 7482
   $49 = $ReallocAsyncCtx5 + 12 | 0; //@line 7483
   HEAP32[$49 >> 2] = $2; //@line 7484
   $50 = $ReallocAsyncCtx5 + 16 | 0; //@line 7485
   HEAP32[$50 >> 2] = $40; //@line 7486
   $51 = $ReallocAsyncCtx5 + 20 | 0; //@line 7487
   HEAP32[$51 >> 2] = $36; //@line 7488
   $52 = $ReallocAsyncCtx5 + 24 | 0; //@line 7489
   HEAP32[$52 >> 2] = $8; //@line 7490
   sp = STACKTOP; //@line 7491
   return;
  }
  ___async_unwind = 0; //@line 7494
  HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 7495
  $47 = $ReallocAsyncCtx5 + 4 | 0; //@line 7496
  HEAP32[$47 >> 2] = $37; //@line 7497
  $48 = $ReallocAsyncCtx5 + 8 | 0; //@line 7498
  HEAP32[$48 >> 2] = $42; //@line 7499
  $49 = $ReallocAsyncCtx5 + 12 | 0; //@line 7500
  HEAP32[$49 >> 2] = $2; //@line 7501
  $50 = $ReallocAsyncCtx5 + 16 | 0; //@line 7502
  HEAP32[$50 >> 2] = $40; //@line 7503
  $51 = $ReallocAsyncCtx5 + 20 | 0; //@line 7504
  HEAP32[$51 >> 2] = $36; //@line 7505
  $52 = $ReallocAsyncCtx5 + 24 | 0; //@line 7506
  HEAP32[$52 >> 2] = $8; //@line 7507
  sp = STACKTOP; //@line 7508
  return;
 }
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6935
 STACKTOP = STACKTOP + 32 | 0; //@line 6936
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6936
 $0 = sp; //@line 6937
 _gpio_init_out($0, 50); //@line 6938
 while (1) {
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6941
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6942
  _wait_ms(150); //@line 6943
  if (___async) {
   label = 3; //@line 6946
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 6949
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6951
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6952
  _wait_ms(150); //@line 6953
  if (___async) {
   label = 5; //@line 6956
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 6959
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6961
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6962
  _wait_ms(150); //@line 6963
  if (___async) {
   label = 7; //@line 6966
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 6969
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6971
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6972
  _wait_ms(150); //@line 6973
  if (___async) {
   label = 9; //@line 6976
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 6979
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6981
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6982
  _wait_ms(150); //@line 6983
  if (___async) {
   label = 11; //@line 6986
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 6989
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6991
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6992
  _wait_ms(150); //@line 6993
  if (___async) {
   label = 13; //@line 6996
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6999
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 7001
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7002
  _wait_ms(150); //@line 7003
  if (___async) {
   label = 15; //@line 7006
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 7009
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 7011
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7012
  _wait_ms(150); //@line 7013
  if (___async) {
   label = 17; //@line 7016
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 7019
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 7021
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7022
  _wait_ms(400); //@line 7023
  if (___async) {
   label = 19; //@line 7026
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 7029
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 7031
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7032
  _wait_ms(400); //@line 7033
  if (___async) {
   label = 21; //@line 7036
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 7039
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 7041
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7042
  _wait_ms(400); //@line 7043
  if (___async) {
   label = 23; //@line 7046
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7049
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 7051
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7052
  _wait_ms(400); //@line 7053
  if (___async) {
   label = 25; //@line 7056
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7059
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 7061
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7062
  _wait_ms(400); //@line 7063
  if (___async) {
   label = 27; //@line 7066
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 7069
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 7071
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7072
  _wait_ms(400); //@line 7073
  if (___async) {
   label = 29; //@line 7076
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7079
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 7081
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7082
  _wait_ms(400); //@line 7083
  if (___async) {
   label = 31; //@line 7086
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7089
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 7091
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7092
  _wait_ms(400); //@line 7093
  if (___async) {
   label = 33; //@line 7096
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7099
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 621; //@line 7103
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 7105
   sp = STACKTOP; //@line 7106
   STACKTOP = sp; //@line 7107
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 622; //@line 7111
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 7113
   sp = STACKTOP; //@line 7114
   STACKTOP = sp; //@line 7115
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 623; //@line 7119
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 7121
   sp = STACKTOP; //@line 7122
   STACKTOP = sp; //@line 7123
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 624; //@line 7127
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 7129
   sp = STACKTOP; //@line 7130
   STACKTOP = sp; //@line 7131
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 625; //@line 7135
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 7137
   sp = STACKTOP; //@line 7138
   STACKTOP = sp; //@line 7139
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 626; //@line 7143
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 7145
   sp = STACKTOP; //@line 7146
   STACKTOP = sp; //@line 7147
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 627; //@line 7151
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 7153
   sp = STACKTOP; //@line 7154
   STACKTOP = sp; //@line 7155
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 628; //@line 7159
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 7161
   sp = STACKTOP; //@line 7162
   STACKTOP = sp; //@line 7163
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 629; //@line 7167
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 7169
   sp = STACKTOP; //@line 7170
   STACKTOP = sp; //@line 7171
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 630; //@line 7175
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 7177
   sp = STACKTOP; //@line 7178
   STACKTOP = sp; //@line 7179
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 631; //@line 7183
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 7185
   sp = STACKTOP; //@line 7186
   STACKTOP = sp; //@line 7187
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 632; //@line 7191
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 7193
   sp = STACKTOP; //@line 7194
   STACKTOP = sp; //@line 7195
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 633; //@line 7199
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 7201
   sp = STACKTOP; //@line 7202
   STACKTOP = sp; //@line 7203
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 634; //@line 7207
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 7209
   sp = STACKTOP; //@line 7210
   STACKTOP = sp; //@line 7211
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 635; //@line 7215
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 7217
   sp = STACKTOP; //@line 7218
   STACKTOP = sp; //@line 7219
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 636; //@line 7223
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7225
   sp = STACKTOP; //@line 7226
   STACKTOP = sp; //@line 7227
   return;
  }
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_325($0) {
 $0 = $0 | 0;
 var $$pre124 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24651
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24653
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24655
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24657
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24659
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24661
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24663
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24665
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24667
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24669
 $$pre124 = HEAP32[$18 >> 2] | 0; //@line 24670
 if ($$pre124 | 0) {
  $21 = HEAP32[$$pre124 + 4 >> 2] | 0; //@line 24674
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 24675
  FUNCTION_TABLE_vii[$21 & 15]($12, $6); //@line 24676
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 24679
   $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 24680
   HEAP32[$22 >> 2] = $2; //@line 24681
   $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 24682
   HEAP32[$23 >> 2] = $4; //@line 24683
   $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 24684
   HEAP32[$24 >> 2] = $6; //@line 24685
   $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 24686
   HEAP32[$25 >> 2] = $8; //@line 24687
   $26 = $ReallocAsyncCtx8 + 20 | 0; //@line 24688
   HEAP32[$26 >> 2] = $14; //@line 24689
   $27 = $ReallocAsyncCtx8 + 24 | 0; //@line 24690
   HEAP32[$27 >> 2] = $16; //@line 24691
   $28 = $ReallocAsyncCtx8 + 28 | 0; //@line 24692
   HEAP32[$28 >> 2] = $18; //@line 24693
   $29 = $ReallocAsyncCtx8 + 32 | 0; //@line 24694
   HEAP32[$29 >> 2] = $10; //@line 24695
   sp = STACKTOP; //@line 24696
   return;
  }
  ___async_unwind = 0; //@line 24699
  HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 24700
  $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 24701
  HEAP32[$22 >> 2] = $2; //@line 24702
  $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 24703
  HEAP32[$23 >> 2] = $4; //@line 24704
  $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 24705
  HEAP32[$24 >> 2] = $6; //@line 24706
  $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 24707
  HEAP32[$25 >> 2] = $8; //@line 24708
  $26 = $ReallocAsyncCtx8 + 20 | 0; //@line 24709
  HEAP32[$26 >> 2] = $14; //@line 24710
  $27 = $ReallocAsyncCtx8 + 24 | 0; //@line 24711
  HEAP32[$27 >> 2] = $16; //@line 24712
  $28 = $ReallocAsyncCtx8 + 28 | 0; //@line 24713
  HEAP32[$28 >> 2] = $18; //@line 24714
  $29 = $ReallocAsyncCtx8 + 32 | 0; //@line 24715
  HEAP32[$29 >> 2] = $10; //@line 24716
  sp = STACKTOP; //@line 24717
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 24720
 $30 = $8 + 12 | 0; //@line 24721
 HEAP32[$8 >> 2] = 177; //@line 24722
 HEAP32[$8 + 4 >> 2] = 0; //@line 24724
 HEAP32[$8 + 8 >> 2] = $4; //@line 24726
 HEAP32[$30 >> 2] = 824; //@line 24727
 $31 = $4 + 2400 | 0; //@line 24728
 if (($31 | 0) == ($8 | 0)) {
  $56 = HEAP32[208] | 0; //@line 24732
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 24733
  FUNCTION_TABLE_vi[$56 & 1023]($8); //@line 24734
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 24737
   $57 = $ReallocAsyncCtx12 + 4 | 0; //@line 24738
   HEAP32[$57 >> 2] = $8; //@line 24739
   $58 = $ReallocAsyncCtx12 + 8 | 0; //@line 24740
   HEAP32[$58 >> 2] = $2; //@line 24741
   $59 = $ReallocAsyncCtx12 + 12 | 0; //@line 24742
   HEAP32[$59 >> 2] = $4; //@line 24743
   $60 = $ReallocAsyncCtx12 + 16 | 0; //@line 24744
   HEAP32[$60 >> 2] = $14; //@line 24745
   $61 = $ReallocAsyncCtx12 + 20 | 0; //@line 24746
   HEAP32[$61 >> 2] = $16; //@line 24747
   sp = STACKTOP; //@line 24748
   return;
  }
  ___async_unwind = 0; //@line 24751
  HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 24752
  $57 = $ReallocAsyncCtx12 + 4 | 0; //@line 24753
  HEAP32[$57 >> 2] = $8; //@line 24754
  $58 = $ReallocAsyncCtx12 + 8 | 0; //@line 24755
  HEAP32[$58 >> 2] = $2; //@line 24756
  $59 = $ReallocAsyncCtx12 + 12 | 0; //@line 24757
  HEAP32[$59 >> 2] = $4; //@line 24758
  $60 = $ReallocAsyncCtx12 + 16 | 0; //@line 24759
  HEAP32[$60 >> 2] = $14; //@line 24760
  $61 = $ReallocAsyncCtx12 + 20 | 0; //@line 24761
  HEAP32[$61 >> 2] = $16; //@line 24762
  sp = STACKTOP; //@line 24763
  return;
 }
 $33 = $4 + 2412 | 0; //@line 24766
 $34 = HEAP32[$33 >> 2] | 0; //@line 24767
 if (!$34) {
  $47 = HEAP32[207] | 0; //@line 24771
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 24772
  FUNCTION_TABLE_vii[$47 & 15]($31, $8); //@line 24773
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 24776
   $48 = $ReallocAsyncCtx11 + 4 | 0; //@line 24777
   HEAP32[$48 >> 2] = $30; //@line 24778
   $49 = $ReallocAsyncCtx11 + 8 | 0; //@line 24779
   HEAP32[$49 >> 2] = $33; //@line 24780
   $50 = $ReallocAsyncCtx11 + 12 | 0; //@line 24781
   HEAP32[$50 >> 2] = $8; //@line 24782
   $51 = $ReallocAsyncCtx11 + 16 | 0; //@line 24783
   HEAP32[$51 >> 2] = $2; //@line 24784
   $52 = $ReallocAsyncCtx11 + 20 | 0; //@line 24785
   HEAP32[$52 >> 2] = $4; //@line 24786
   $53 = $ReallocAsyncCtx11 + 24 | 0; //@line 24787
   HEAP32[$53 >> 2] = $14; //@line 24788
   $54 = $ReallocAsyncCtx11 + 28 | 0; //@line 24789
   HEAP32[$54 >> 2] = $16; //@line 24790
   sp = STACKTOP; //@line 24791
   return;
  }
  ___async_unwind = 0; //@line 24794
  HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 24795
  $48 = $ReallocAsyncCtx11 + 4 | 0; //@line 24796
  HEAP32[$48 >> 2] = $30; //@line 24797
  $49 = $ReallocAsyncCtx11 + 8 | 0; //@line 24798
  HEAP32[$49 >> 2] = $33; //@line 24799
  $50 = $ReallocAsyncCtx11 + 12 | 0; //@line 24800
  HEAP32[$50 >> 2] = $8; //@line 24801
  $51 = $ReallocAsyncCtx11 + 16 | 0; //@line 24802
  HEAP32[$51 >> 2] = $2; //@line 24803
  $52 = $ReallocAsyncCtx11 + 20 | 0; //@line 24804
  HEAP32[$52 >> 2] = $4; //@line 24805
  $53 = $ReallocAsyncCtx11 + 24 | 0; //@line 24806
  HEAP32[$53 >> 2] = $14; //@line 24807
  $54 = $ReallocAsyncCtx11 + 28 | 0; //@line 24808
  HEAP32[$54 >> 2] = $16; //@line 24809
  sp = STACKTOP; //@line 24810
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 24814
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 24815
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 24816
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 178; //@line 24819
   $38 = $ReallocAsyncCtx10 + 4 | 0; //@line 24820
   HEAP32[$38 >> 2] = $30; //@line 24821
   $39 = $ReallocAsyncCtx10 + 8 | 0; //@line 24822
   HEAP32[$39 >> 2] = $33; //@line 24823
   $40 = $ReallocAsyncCtx10 + 12 | 0; //@line 24824
   HEAP32[$40 >> 2] = $8; //@line 24825
   $41 = $ReallocAsyncCtx10 + 16 | 0; //@line 24826
   HEAP32[$41 >> 2] = $2; //@line 24827
   $42 = $ReallocAsyncCtx10 + 20 | 0; //@line 24828
   HEAP32[$42 >> 2] = $4; //@line 24829
   $43 = $ReallocAsyncCtx10 + 24 | 0; //@line 24830
   HEAP32[$43 >> 2] = $31; //@line 24831
   $44 = $ReallocAsyncCtx10 + 28 | 0; //@line 24832
   HEAP32[$44 >> 2] = $14; //@line 24833
   $45 = $ReallocAsyncCtx10 + 32 | 0; //@line 24834
   HEAP32[$45 >> 2] = $16; //@line 24835
   sp = STACKTOP; //@line 24836
   return;
  }
  ___async_unwind = 0; //@line 24839
  HEAP32[$ReallocAsyncCtx10 >> 2] = 178; //@line 24840
  $38 = $ReallocAsyncCtx10 + 4 | 0; //@line 24841
  HEAP32[$38 >> 2] = $30; //@line 24842
  $39 = $ReallocAsyncCtx10 + 8 | 0; //@line 24843
  HEAP32[$39 >> 2] = $33; //@line 24844
  $40 = $ReallocAsyncCtx10 + 12 | 0; //@line 24845
  HEAP32[$40 >> 2] = $8; //@line 24846
  $41 = $ReallocAsyncCtx10 + 16 | 0; //@line 24847
  HEAP32[$41 >> 2] = $2; //@line 24848
  $42 = $ReallocAsyncCtx10 + 20 | 0; //@line 24849
  HEAP32[$42 >> 2] = $4; //@line 24850
  $43 = $ReallocAsyncCtx10 + 24 | 0; //@line 24851
  HEAP32[$43 >> 2] = $31; //@line 24852
  $44 = $ReallocAsyncCtx10 + 28 | 0; //@line 24853
  HEAP32[$44 >> 2] = $14; //@line 24854
  $45 = $ReallocAsyncCtx10 + 32 | 0; //@line 24855
  HEAP32[$45 >> 2] = $16; //@line 24856
  sp = STACKTOP; //@line 24857
  return;
 }
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $100 = 0, $102 = 0, $107 = 0, $110 = 0, $112 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $121 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $140 = 0, $147 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $161 = 0, $168 = 0, $169 = 0, $17 = 0, $172 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $187 = 0, $19 = 0, $190 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5264
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5266
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5268
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5272
 $8 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 5273
 $9 = $8 + 32 | 0; //@line 5274
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $2 + 32 | 0; //@line 5278
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5283
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 5284
  $19 = HEAP32[$2 + 8 >> 2] | 0; //@line 5286
  do {
   if (($19 | 0) == 1e6) {
    $98 = $17; //@line 5290
    $99 = 0; //@line 5290
   } else {
    $22 = HEAP8[$2 + 57 >> 0] | 0; //@line 5293
    $24 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 5295
    $25 = tempRet0; //@line 5296
    if (!($22 << 24 >> 24)) {
     $59 = ___udivdi3($24 | 0, $25 | 0, $19 | 0, 0) | 0; //@line 5298
     $60 = tempRet0; //@line 5299
     $61 = ___muldi3($59 | 0, $60 | 0, $19 | 0, 0) | 0; //@line 5300
     $63 = _i64Subtract($24 | 0, $25 | 0, $61 | 0, tempRet0 | 0) | 0; //@line 5302
     $65 = $2 + 40 | 0; //@line 5304
     $66 = $65; //@line 5305
     $72 = _i64Add($63 | 0, tempRet0 | 0, HEAP32[$66 >> 2] | 0, HEAP32[$66 + 4 >> 2] | 0) | 0; //@line 5311
     $73 = tempRet0; //@line 5312
     $74 = $65; //@line 5313
     HEAP32[$74 >> 2] = $72; //@line 5315
     HEAP32[$74 + 4 >> 2] = $73; //@line 5318
     if ($73 >>> 0 < 0 | ($73 | 0) == 0 & $72 >>> 0 < $19 >>> 0) {
      $98 = $59; //@line 5325
      $99 = $60; //@line 5325
      break;
     }
     $83 = _i64Add($59 | 0, $60 | 0, 1, 0) | 0; //@line 5328
     $84 = tempRet0; //@line 5329
     $85 = _i64Subtract($72 | 0, $73 | 0, $19 | 0, 0) | 0; //@line 5330
     $87 = $65; //@line 5332
     HEAP32[$87 >> 2] = $85; //@line 5334
     HEAP32[$87 + 4 >> 2] = tempRet0; //@line 5337
     $98 = $83; //@line 5338
     $99 = $84; //@line 5338
     break;
    } else {
     $26 = $22 & 255; //@line 5341
     $27 = _bitshift64Lshr($24 | 0, $25 | 0, $26 | 0) | 0; //@line 5342
     $28 = tempRet0; //@line 5343
     $29 = _bitshift64Shl($27 | 0, $28 | 0, $26 | 0) | 0; //@line 5344
     $31 = _i64Subtract($24 | 0, $25 | 0, $29 | 0, tempRet0 | 0) | 0; //@line 5346
     $33 = $2 + 40 | 0; //@line 5348
     $34 = $33; //@line 5349
     $40 = _i64Add(HEAP32[$34 >> 2] | 0, HEAP32[$34 + 4 >> 2] | 0, $31 | 0, tempRet0 | 0) | 0; //@line 5355
     $41 = tempRet0; //@line 5356
     $42 = $33; //@line 5357
     HEAP32[$42 >> 2] = $40; //@line 5359
     HEAP32[$42 + 4 >> 2] = $41; //@line 5362
     if ($41 >>> 0 < 0 | ($41 | 0) == 0 & $40 >>> 0 < $19 >>> 0) {
      $98 = $27; //@line 5369
      $99 = $28; //@line 5369
      break;
     }
     $51 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 5372
     $52 = tempRet0; //@line 5373
     $53 = _i64Subtract($40 | 0, $41 | 0, $19 | 0, 0) | 0; //@line 5374
     $55 = $33; //@line 5376
     HEAP32[$55 >> 2] = $53; //@line 5378
     HEAP32[$55 + 4 >> 2] = tempRet0; //@line 5381
     $98 = $51; //@line 5382
     $99 = $52; //@line 5382
     break;
    }
   }
  } while (0);
  $91 = $2 + 48 | 0; //@line 5387
  $92 = $91; //@line 5388
  $100 = _i64Add(HEAP32[$92 >> 2] | 0, HEAP32[$92 + 4 >> 2] | 0, $98 | 0, $99 | 0) | 0; //@line 5394
  $102 = $91; //@line 5396
  HEAP32[$102 >> 2] = $100; //@line 5398
  HEAP32[$102 + 4 >> 2] = tempRet0; //@line 5401
 }
 $107 = HEAP32[$8 + 4 >> 2] | 0; //@line 5404
 if (!$107) {
  $187 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5414
  $190 = HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0; //@line 5417
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 5418
  FUNCTION_TABLE_vi[$190 & 1023]($187); //@line 5419
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 616; //@line 5422
   sp = STACKTOP; //@line 5423
   return;
  }
  ___async_unwind = 0; //@line 5426
  HEAP32[$ReallocAsyncCtx7 >> 2] = 616; //@line 5427
  sp = STACKTOP; //@line 5428
  return;
 }
 $110 = $8 + 48 | 0; //@line 5432
 $112 = HEAP32[$110 >> 2] | 0; //@line 5434
 $115 = HEAP32[$110 + 4 >> 2] | 0; //@line 5437
 $116 = $107; //@line 5438
 $118 = HEAP32[$116 >> 2] | 0; //@line 5440
 $121 = HEAP32[$116 + 4 >> 2] | 0; //@line 5443
 if (!($121 >>> 0 > $115 >>> 0 | ($121 | 0) == ($115 | 0) & $118 >>> 0 > $112 >>> 0)) {
  $129 = HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0; //@line 5452
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5453
  FUNCTION_TABLE_v[$129 & 7](); //@line 5454
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 611; //@line 5457
   sp = STACKTOP; //@line 5458
   return;
  }
  ___async_unwind = 0; //@line 5461
  HEAP32[$ReallocAsyncCtx2 >> 2] = 611; //@line 5462
  sp = STACKTOP; //@line 5463
  return;
 }
 $130 = _i64Subtract($118 | 0, $121 | 0, $112 | 0, $115 | 0) | 0; //@line 5466
 $131 = tempRet0; //@line 5467
 $133 = HEAP32[$8 + 16 >> 2] | 0; //@line 5469
 $135 = $8 + 24 | 0; //@line 5471
 $140 = HEAP32[$135 + 4 >> 2] | 0; //@line 5476
 do {
  if ($131 >>> 0 > $140 >>> 0 | (($131 | 0) == ($140 | 0) ? $130 >>> 0 > (HEAP32[$135 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $133; //@line 5484
  } else {
   $147 = HEAP32[$8 + 8 >> 2] | 0; //@line 5487
   if (($147 | 0) == 1e6) {
    $$0$i = $133 >>> 0 < $130 >>> 0 ? $133 : $130; //@line 5492
    break;
   }
   $151 = HEAP8[$8 + 57 >> 0] | 0; //@line 5496
   if (!($151 << 24 >> 24)) {
    $159 = ___muldi3($130 | 0, $131 | 0, $147 | 0, 0) | 0; //@line 5499
    $161 = ___udivdi3($159 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5501
    $$0$i = $133 >>> 0 < $161 >>> 0 ? $133 : $161; //@line 5505
    break;
   } else {
    $154 = _bitshift64Shl($130 | 0, $131 | 0, $151 & 255 | 0) | 0; //@line 5509
    $156 = ___udivdi3($154 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5511
    $$0$i = $133 >>> 0 < $156 >>> 0 ? $133 : $156; //@line 5515
    break;
   }
  }
 } while (0);
 $168 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 5524
 $169 = $2 + 32 | 0; //@line 5525
 $172 = HEAP32[$4 >> 2] | 0; //@line 5528
 if (($168 | 0) == (HEAP32[$169 >> 2] | 0)) {
  $174 = HEAP32[$172 + 20 >> 2] | 0; //@line 5531
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 5532
  FUNCTION_TABLE_v[$174 & 7](); //@line 5533
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 612; //@line 5536
   sp = STACKTOP; //@line 5537
   return;
  }
  ___async_unwind = 0; //@line 5540
  HEAP32[$ReallocAsyncCtx3 >> 2] = 612; //@line 5541
  sp = STACKTOP; //@line 5542
  return;
 } else {
  $176 = HEAP32[$172 + 16 >> 2] | 0; //@line 5546
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 5547
  FUNCTION_TABLE_vi[$176 & 1023]($168); //@line 5548
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 613; //@line 5551
   $177 = $ReallocAsyncCtx4 + 4 | 0; //@line 5552
   HEAP32[$177 >> 2] = $4; //@line 5553
   $178 = $ReallocAsyncCtx4 + 8 | 0; //@line 5554
   HEAP32[$178 >> 2] = $169; //@line 5555
   $179 = $ReallocAsyncCtx4 + 12 | 0; //@line 5556
   HEAP32[$179 >> 2] = $168; //@line 5557
   sp = STACKTOP; //@line 5558
   return;
  }
  ___async_unwind = 0; //@line 5561
  HEAP32[$ReallocAsyncCtx4 >> 2] = 613; //@line 5562
  $177 = $ReallocAsyncCtx4 + 4 | 0; //@line 5563
  HEAP32[$177 >> 2] = $4; //@line 5564
  $178 = $ReallocAsyncCtx4 + 8 | 0; //@line 5565
  HEAP32[$178 >> 2] = $169; //@line 5566
  $179 = $ReallocAsyncCtx4 + 12 | 0; //@line 5567
  HEAP32[$179 >> 2] = $168; //@line 5568
  sp = STACKTOP; //@line 5569
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$2 = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $100 = 0, $103 = 0, $11 = 0, $115 = 0, $12 = 0, $13 = 0, $137 = 0, $14 = 0, $142 = 0, $147 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $53 = 0, $55 = 0, $6 = 0, $73 = 0, $74 = 0, $76 = 0, $8 = 0, $84 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 13848
 STACKTOP = STACKTOP + 48 | 0; //@line 13849
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 13849
 $vararg_buffer1 = sp + 8 | 0; //@line 13850
 $vararg_buffer = sp; //@line 13851
 $1 = sp + 40 | 0; //@line 13852
 $2 = sp + 28 | 0; //@line 13853
 $3 = sp + 24 | 0; //@line 13854
 HEAP32[$3 >> 2] = 0; //@line 13855
 switch (HEAP8[$0 + 1932 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 1784 | 0; //@line 13860
   HEAP32[$6 >> 2] = 0; //@line 13861
   $$pre$phiZ2D = $6; //@line 13862
   break;
  }
 case -1:
  {
   $$2 = -1011; //@line 13866
   STACKTOP = sp; //@line 13867
   return $$2 | 0; //@line 13867
  }
 default:
  {
   $$pre$phiZ2D = $0 + 1784 | 0; //@line 13872
  }
 }
 $8 = HEAP8[$0 + 1183 >> 0] | 0; //@line 13876
 $11 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, HEAP32[$0 + 1788 >> 2] | 0) | 0; //@line 13879
 $12 = $0 + 1179 | 0; //@line 13880
 HEAP8[$12 >> 0] = 1; //@line 13881
 $13 = $0 + 4 | 0; //@line 13882
 $14 = $0 + 2376 | 0; //@line 13883
 $20 = $0 + 1792 | 0; //@line 13889
 __ZN7LoRaPHY17calculate_backoffEbbbhjj($13, (HEAP8[$14 >> 0] | 0) != 0, (HEAP8[$0 + 1180 >> 0] | 0) != 0, 1, $8, $11, HEAP32[$20 >> 2] | 0); //@line 13891
 $22 = HEAP32[$20 >> 2] | 0; //@line 13892
 $27 = (Math_imul($22, HEAPU16[$0 + 1934 >> 1] | 0) | 0) - $22 | 0; //@line 13897
 HEAP32[$$pre$phiZ2D >> 2] = $27; //@line 13898
 HEAP32[$2 >> 2] = $27; //@line 13899
 $28 = $0 + 1877 | 0; //@line 13900
 $30 = $2 + 8 | 0; //@line 13902
 HEAP8[$30 >> 0] = HEAP8[$28 >> 0] | 0; //@line 13903
 HEAP8[$12 >> 0] = 1; //@line 13904
 HEAP8[$2 + 10 >> 0] = 1; //@line 13906
 HEAP8[$2 + 9 >> 0] = HEAP8[$14 >> 0] | 0; //@line 13909
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 1780 >> 2]; //@line 13913
 $37 = $0 + 1182 | 0; //@line 13914
 $38 = __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($13, $2, $37, $3, $$pre$phiZ2D) | 0; //@line 13915
 switch ($38 | 0) {
 case -1020:
  {
   $39 = HEAP32[$3 >> 2] | 0; //@line 13918
   if (!$39) {
    $$2 = 0; //@line 13921
    STACKTOP = sp; //@line 13922
    return $$2 | 0; //@line 13922
   }
   HEAP32[$vararg_buffer >> 2] = $39; //@line 13924
   _mbed_tracef(16, 12685, 12807, $vararg_buffer); //@line 13925
   $42 = HEAP32[$3 >> 2] | 0; //@line 13927
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13928
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1796 | 0, $42); //@line 13929
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 415; //@line 13932
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 13934
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13936
    sp = STACKTOP; //@line 13937
    STACKTOP = sp; //@line 13938
    return 0; //@line 13938
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13940
   $$2 = 0; //@line 13941
   STACKTOP = sp; //@line 13942
   return $$2 | 0; //@line 13942
  }
 case -1022:
 case -1021:
  {
   $$2 = $38; //@line 13946
   STACKTOP = sp; //@line 13947
   return $$2 | 0; //@line 13947
  }
 default:
  {
   $48 = HEAP8[$30 >> 0] | 0; //@line 13954
   HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$37 >> 0]; //@line 13955
   HEAP32[$vararg_buffer1 + 4 >> 2] = $48; //@line 13957
   _mbed_tracef(16, 12685, 12843, $vararg_buffer1); //@line 13958
   $53 = $0 + 1884 | 0; //@line 13963
   $55 = $0 + 1880 | 0; //@line 13965
   __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($13, __ZN7LoRaPHY15apply_DR_offsetEaa($13, HEAP8[$28 >> 0] | 0, HEAP8[$0 + 1909 >> 0] | 0) | 0, HEAP8[$53 >> 0] | 0, HEAP32[$55 >> 2] | 0, $0 + 1940 | 0); //@line 13968
   __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($13, HEAP8[$0 + 1916 >> 0] | 0, HEAP8[$53 >> 0] | 0, HEAP32[$55 >> 2] | 0, $0 + 1964 | 0); //@line 13974
   do {
    if (!(HEAP8[$14 >> 0] | 0)) {
     HEAP32[$0 + 1772 >> 2] = (HEAP32[$0 + 1952 >> 2] | 0) + (HEAP32[$0 + 1900 >> 2] | 0); //@line 13985
     $$sink = $0 + 1904 | 0; //@line 13987
    } else {
     $73 = HEAP16[$0 + 1440 >> 1] | 0; //@line 13990
     $74 = HEAP8[$28 >> 0] | 0; //@line 13991
     $76 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 476 | 0) | 0; //@line 13993
     $84 = ($76 & 255) + ($73 & 65535) & 65535; //@line 14001
     if ($84 >>> 0 < 256 & $84 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($13, $74, (HEAP8[$0 + 1173 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
      HEAP32[$0 + 1772 >> 2] = (HEAP32[$0 + 1952 >> 2] | 0) + (HEAP32[$0 + 1892 >> 2] | 0); //@line 14013
      $$sink = $0 + 1896 | 0; //@line 14015
      break;
     } else {
      $$2 = -1010; //@line 14018
      STACKTOP = sp; //@line 14019
      return $$2 | 0; //@line 14019
     }
    }
   } while (0);
   HEAP32[$0 + 1776 >> 2] = (HEAP32[$0 + 1976 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 14028
   $100 = $0 + 1178 | 0; //@line 14029
   if (HEAP8[$100 >> 0] | 0) {
    HEAP8[$100 >> 0] = 0; //@line 14033
   }
   $103 = HEAP8[$37 >> 0] | 0; //@line 14035
   HEAP8[$1 >> 0] = 0; //@line 14036
   HEAP8[$vararg_buffer1 >> 0] = $103; //@line 14037
   HEAP8[$vararg_buffer1 + 1 >> 0] = HEAP8[$28 >> 0] | 0; //@line 14040
   HEAP8[$vararg_buffer1 + 2 >> 0] = HEAP8[$0 + 1876 >> 0] | 0; //@line 14044
   HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1924 >> 2]; //@line 14048
   HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1928 >> 2]; //@line 14052
   $115 = $0 + 1440 | 0; //@line 14053
   HEAP16[$vararg_buffer1 + 12 >> 1] = HEAP16[$115 >> 1] | 0; //@line 14056
   $AsyncCtx10 = _emscripten_alloc_async_context(48, sp) | 0; //@line 14057
   __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($13, $vararg_buffer1, $1, $20) | 0; //@line 14058
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 416; //@line 14061
    HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 14063
    HEAP32[$AsyncCtx10 + 8 >> 2] = $28; //@line 14065
    HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 14067
    HEAP8[$AsyncCtx10 + 16 >> 0] = $103; //@line 14069
    HEAP32[$AsyncCtx10 + 20 >> 2] = $20; //@line 14071
    HEAP32[$AsyncCtx10 + 24 >> 2] = $14; //@line 14073
    HEAP32[$AsyncCtx10 + 28 >> 2] = $115; //@line 14075
    HEAP32[$AsyncCtx10 + 32 >> 2] = $13; //@line 14077
    HEAP32[$AsyncCtx10 + 36 >> 2] = $vararg_buffer1; //@line 14079
    HEAP32[$AsyncCtx10 + 40 >> 2] = $3; //@line 14081
    HEAP32[$AsyncCtx10 + 44 >> 2] = $2; //@line 14083
    sp = STACKTOP; //@line 14084
    STACKTOP = sp; //@line 14085
    return 0; //@line 14085
   }
   _emscripten_free_async_context($AsyncCtx10 | 0); //@line 14087
   HEAP32[$0 + 2092 >> 2] = 1; //@line 14089
   HEAP32[$0 + 2056 >> 2] = 1; //@line 14091
   HEAP8[$0 + 2060 >> 0] = HEAP8[$28 >> 0] | 0; //@line 14094
   HEAP8[$0 + 2061 >> 0] = HEAP8[$1 >> 0] | 0; //@line 14097
   HEAP32[$0 + 2072 >> 2] = $103 & 255; //@line 14100
   $137 = HEAP32[$20 >> 2] | 0; //@line 14101
   HEAP32[$0 + 2064 >> 2] = $137; //@line 14103
   HEAP32[$0 + 2096 >> 2] = $137; //@line 14105
   if (!(HEAP8[$14 >> 0] | 0)) {
    $142 = $0 + 1701 | 0; //@line 14109
    HEAP8[$142 >> 0] = (HEAP8[$142 >> 0] | 0) + 1 << 24 >> 24; //@line 14112
   }
   $147 = HEAP16[$115 >> 1] & 255; //@line 14116
   $AsyncCtx6 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14117
   __ZN7LoRaPHY11handle_sendEPhh($13, $0 + 1185 | 0, $147); //@line 14118
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 417; //@line 14121
    HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 14123
    HEAP32[$AsyncCtx6 + 8 >> 2] = $vararg_buffer1; //@line 14125
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 14127
    HEAP32[$AsyncCtx6 + 16 >> 2] = $2; //@line 14129
    sp = STACKTOP; //@line 14130
    STACKTOP = sp; //@line 14131
    return 0; //@line 14131
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 14133
   $$2 = 0; //@line 14134
   STACKTOP = sp; //@line 14135
   return $$2 | 0; //@line 14135
  }
 }
 return 0; //@line 14138
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_326($0) {
 $0 = $0 | 0;
 var $$pre$i$i38 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24867
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24869
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24871
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24873
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24875
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24877
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24879
 $$pre$i$i38 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 24884
 HEAP32[HEAP32[$0 + 32 >> 2] >> 2] = $$pre$i$i38; //@line 24886
 if ($$pre$i$i38 | 0) {
  $20 = HEAP32[$$pre$i$i38 + 8 >> 2] | 0; //@line 24890
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 24891
  FUNCTION_TABLE_vi[$20 & 1023]($6); //@line 24892
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 24895
   $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 24896
   HEAP32[$21 >> 2] = $2; //@line 24897
   $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 24898
   HEAP32[$22 >> 2] = $4; //@line 24899
   $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 24900
   HEAP32[$23 >> 2] = $6; //@line 24901
   $24 = $ReallocAsyncCtx9 + 16 | 0; //@line 24902
   HEAP32[$24 >> 2] = $8; //@line 24903
   $25 = $ReallocAsyncCtx9 + 20 | 0; //@line 24904
   HEAP32[$25 >> 2] = $10; //@line 24905
   $26 = $ReallocAsyncCtx9 + 24 | 0; //@line 24906
   HEAP32[$26 >> 2] = $12; //@line 24907
   sp = STACKTOP; //@line 24908
   return;
  }
  ___async_unwind = 0; //@line 24911
  HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 24912
  $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 24913
  HEAP32[$21 >> 2] = $2; //@line 24914
  $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 24915
  HEAP32[$22 >> 2] = $4; //@line 24916
  $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 24917
  HEAP32[$23 >> 2] = $6; //@line 24918
  $24 = $ReallocAsyncCtx9 + 16 | 0; //@line 24919
  HEAP32[$24 >> 2] = $8; //@line 24920
  $25 = $ReallocAsyncCtx9 + 20 | 0; //@line 24921
  HEAP32[$25 >> 2] = $10; //@line 24922
  $26 = $ReallocAsyncCtx9 + 24 | 0; //@line 24923
  HEAP32[$26 >> 2] = $12; //@line 24924
  sp = STACKTOP; //@line 24925
  return;
 }
 $27 = $8 + 12 | 0; //@line 24928
 HEAP32[$8 >> 2] = 177; //@line 24929
 HEAP32[$8 + 4 >> 2] = 0; //@line 24931
 HEAP32[$8 + 8 >> 2] = $4; //@line 24933
 HEAP32[$27 >> 2] = 824; //@line 24934
 $28 = $4 + 2400 | 0; //@line 24935
 if (($28 | 0) == ($8 | 0)) {
  $53 = HEAP32[208] | 0; //@line 24939
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 24940
  FUNCTION_TABLE_vi[$53 & 1023]($8); //@line 24941
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 24944
   $54 = $ReallocAsyncCtx12 + 4 | 0; //@line 24945
   HEAP32[$54 >> 2] = $8; //@line 24946
   $55 = $ReallocAsyncCtx12 + 8 | 0; //@line 24947
   HEAP32[$55 >> 2] = $2; //@line 24948
   $56 = $ReallocAsyncCtx12 + 12 | 0; //@line 24949
   HEAP32[$56 >> 2] = $4; //@line 24950
   $57 = $ReallocAsyncCtx12 + 16 | 0; //@line 24951
   HEAP32[$57 >> 2] = $10; //@line 24952
   $58 = $ReallocAsyncCtx12 + 20 | 0; //@line 24953
   HEAP32[$58 >> 2] = $12; //@line 24954
   sp = STACKTOP; //@line 24955
   return;
  }
  ___async_unwind = 0; //@line 24958
  HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 24959
  $54 = $ReallocAsyncCtx12 + 4 | 0; //@line 24960
  HEAP32[$54 >> 2] = $8; //@line 24961
  $55 = $ReallocAsyncCtx12 + 8 | 0; //@line 24962
  HEAP32[$55 >> 2] = $2; //@line 24963
  $56 = $ReallocAsyncCtx12 + 12 | 0; //@line 24964
  HEAP32[$56 >> 2] = $4; //@line 24965
  $57 = $ReallocAsyncCtx12 + 16 | 0; //@line 24966
  HEAP32[$57 >> 2] = $10; //@line 24967
  $58 = $ReallocAsyncCtx12 + 20 | 0; //@line 24968
  HEAP32[$58 >> 2] = $12; //@line 24969
  sp = STACKTOP; //@line 24970
  return;
 }
 $30 = $4 + 2412 | 0; //@line 24973
 $31 = HEAP32[$30 >> 2] | 0; //@line 24974
 if (!$31) {
  $44 = HEAP32[207] | 0; //@line 24978
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 24979
  FUNCTION_TABLE_vii[$44 & 15]($28, $8); //@line 24980
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 24983
   $45 = $ReallocAsyncCtx11 + 4 | 0; //@line 24984
   HEAP32[$45 >> 2] = $27; //@line 24985
   $46 = $ReallocAsyncCtx11 + 8 | 0; //@line 24986
   HEAP32[$46 >> 2] = $30; //@line 24987
   $47 = $ReallocAsyncCtx11 + 12 | 0; //@line 24988
   HEAP32[$47 >> 2] = $8; //@line 24989
   $48 = $ReallocAsyncCtx11 + 16 | 0; //@line 24990
   HEAP32[$48 >> 2] = $2; //@line 24991
   $49 = $ReallocAsyncCtx11 + 20 | 0; //@line 24992
   HEAP32[$49 >> 2] = $4; //@line 24993
   $50 = $ReallocAsyncCtx11 + 24 | 0; //@line 24994
   HEAP32[$50 >> 2] = $10; //@line 24995
   $51 = $ReallocAsyncCtx11 + 28 | 0; //@line 24996
   HEAP32[$51 >> 2] = $12; //@line 24997
   sp = STACKTOP; //@line 24998
   return;
  }
  ___async_unwind = 0; //@line 25001
  HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 25002
  $45 = $ReallocAsyncCtx11 + 4 | 0; //@line 25003
  HEAP32[$45 >> 2] = $27; //@line 25004
  $46 = $ReallocAsyncCtx11 + 8 | 0; //@line 25005
  HEAP32[$46 >> 2] = $30; //@line 25006
  $47 = $ReallocAsyncCtx11 + 12 | 0; //@line 25007
  HEAP32[$47 >> 2] = $8; //@line 25008
  $48 = $ReallocAsyncCtx11 + 16 | 0; //@line 25009
  HEAP32[$48 >> 2] = $2; //@line 25010
  $49 = $ReallocAsyncCtx11 + 20 | 0; //@line 25011
  HEAP32[$49 >> 2] = $4; //@line 25012
  $50 = $ReallocAsyncCtx11 + 24 | 0; //@line 25013
  HEAP32[$50 >> 2] = $10; //@line 25014
  $51 = $ReallocAsyncCtx11 + 28 | 0; //@line 25015
  HEAP32[$51 >> 2] = $12; //@line 25016
  sp = STACKTOP; //@line 25017
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 25021
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 25022
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 25023
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 178; //@line 25026
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 25027
   HEAP32[$35 >> 2] = $27; //@line 25028
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 25029
   HEAP32[$36 >> 2] = $30; //@line 25030
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 25031
   HEAP32[$37 >> 2] = $8; //@line 25032
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 25033
   HEAP32[$38 >> 2] = $2; //@line 25034
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 25035
   HEAP32[$39 >> 2] = $4; //@line 25036
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 25037
   HEAP32[$40 >> 2] = $28; //@line 25038
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 25039
   HEAP32[$41 >> 2] = $10; //@line 25040
   $42 = $ReallocAsyncCtx10 + 32 | 0; //@line 25041
   HEAP32[$42 >> 2] = $12; //@line 25042
   sp = STACKTOP; //@line 25043
   return;
  }
  ___async_unwind = 0; //@line 25046
  HEAP32[$ReallocAsyncCtx10 >> 2] = 178; //@line 25047
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 25048
  HEAP32[$35 >> 2] = $27; //@line 25049
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 25050
  HEAP32[$36 >> 2] = $30; //@line 25051
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 25052
  HEAP32[$37 >> 2] = $8; //@line 25053
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 25054
  HEAP32[$38 >> 2] = $2; //@line 25055
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 25056
  HEAP32[$39 >> 2] = $4; //@line 25057
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 25058
  HEAP32[$40 >> 2] = $28; //@line 25059
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 25060
  HEAP32[$41 >> 2] = $10; //@line 25061
  $42 = $ReallocAsyncCtx10 + 32 | 0; //@line 25062
  HEAP32[$42 >> 2] = $12; //@line 25063
  sp = STACKTOP; //@line 25064
  return;
 }
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28641
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28643
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28647
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 28666
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 28684
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 28702
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 28720
  $83 = $6 + 136 | 0; //@line 28722
  HEAP32[$83 >> 2] = $81; //@line 28724
  HEAP32[$83 + 4 >> 2] = $63; //@line 28727
  $88 = $6 + 264 | 0; //@line 28729
  HEAP32[$88 >> 2] = $45; //@line 28731
  HEAP32[$88 + 4 >> 2] = $27; //@line 28734
  $93 = $6 + 200 | 0; //@line 28736
  HEAP32[$93 >> 2] = 0; //@line 28738
  HEAP32[$93 + 4 >> 2] = 0; //@line 28741
  $98 = $6 + 72 | 0; //@line 28743
  HEAP32[$98 >> 2] = 0; //@line 28745
  HEAP32[$98 + 4 >> 2] = 0; //@line 28748
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 28750
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 28752
  $106 = tempRet0; //@line 28753
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 28754
  $109 = $107 | $105; //@line 28756
  $110 = tempRet0 | $106; //@line 28757
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 28758
  $112 = tempRet0; //@line 28759
  $114 = $103 & -520093696 ^ $112; //@line 28761
  $116 = $6 + 104 | 0; //@line 28763
  HEAP32[$116 >> 2] = $109; //@line 28765
  HEAP32[$116 + 4 >> 2] = $110; //@line 28768
  $121 = $6 + 232 | 0; //@line 28770
  HEAP32[$121 >> 2] = $111; //@line 28772
  HEAP32[$121 + 4 >> 2] = $114; //@line 28775
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 28777
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 28779
  $129 = tempRet0; //@line 28780
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 28781
  $132 = $130 | $128; //@line 28783
  $133 = tempRet0 | $129; //@line 28784
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 28785
  $135 = tempRet0; //@line 28786
  $137 = $126 & -520093696 ^ $135; //@line 28788
  $139 = $6 + 88 | 0; //@line 28790
  HEAP32[$139 >> 2] = $132; //@line 28792
  HEAP32[$139 + 4 >> 2] = $133; //@line 28795
  $144 = $6 + 216 | 0; //@line 28797
  HEAP32[$144 >> 2] = $134; //@line 28799
  HEAP32[$144 + 4 >> 2] = $137; //@line 28802
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 28804
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 28806
  $152 = tempRet0; //@line 28807
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 28808
  $155 = $151 | $153; //@line 28810
  $156 = $152 | tempRet0; //@line 28811
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 28812
  $160 = $149 & -520093696 ^ tempRet0; //@line 28815
  $162 = $6 + 80 | 0; //@line 28817
  HEAP32[$162 >> 2] = $155; //@line 28819
  HEAP32[$162 + 4 >> 2] = $156; //@line 28822
  $167 = $6 + 208 | 0; //@line 28824
  HEAP32[$167 >> 2] = $157; //@line 28826
  HEAP32[$167 + 4 >> 2] = $160; //@line 28829
  $171 = $157 ^ $134; //@line 28830
  $172 = $160 ^ $137; //@line 28831
  $174 = $6 + 224 | 0; //@line 28833
  HEAP32[$174 >> 2] = $171; //@line 28835
  HEAP32[$174 + 4 >> 2] = $172; //@line 28838
  $178 = $155 ^ $132; //@line 28839
  $179 = $156 ^ $133; //@line 28840
  $181 = $6 + 96 | 0; //@line 28842
  HEAP32[$181 >> 2] = $178; //@line 28844
  HEAP32[$181 + 4 >> 2] = $179; //@line 28847
  $185 = $157 ^ $111; //@line 28848
  $186 = $160 ^ $114; //@line 28849
  $188 = $6 + 240 | 0; //@line 28851
  HEAP32[$188 >> 2] = $185; //@line 28853
  HEAP32[$188 + 4 >> 2] = $186; //@line 28856
  $192 = $155 ^ $109; //@line 28857
  $193 = $156 ^ $110; //@line 28858
  $195 = $6 + 112 | 0; //@line 28860
  HEAP32[$195 >> 2] = $192; //@line 28862
  HEAP32[$195 + 4 >> 2] = $193; //@line 28865
  $199 = $134 ^ $111; //@line 28866
  $200 = $137 ^ $114; //@line 28867
  $202 = $6 + 248 | 0; //@line 28869
  HEAP32[$202 >> 2] = $199; //@line 28871
  HEAP32[$202 + 4 >> 2] = $200; //@line 28874
  $206 = $132 ^ $109; //@line 28875
  $207 = $133 ^ $110; //@line 28876
  $209 = $6 + 120 | 0; //@line 28878
  HEAP32[$209 >> 2] = $206; //@line 28880
  HEAP32[$209 + 4 >> 2] = $207; //@line 28883
  $213 = $171 ^ $111; //@line 28884
  $214 = $172 ^ $114; //@line 28885
  $216 = $6 + 256 | 0; //@line 28887
  HEAP32[$216 >> 2] = $213; //@line 28889
  HEAP32[$216 + 4 >> 2] = $214; //@line 28892
  $220 = $178 ^ $109; //@line 28893
  $221 = $179 ^ $110; //@line 28894
  $223 = $6 + 128 | 0; //@line 28896
  HEAP32[$223 >> 2] = $220; //@line 28898
  HEAP32[$223 + 4 >> 2] = $221; //@line 28901
  $230 = $6 + 272 | 0; //@line 28905
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 28907
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 28910
  $237 = $6 + 144 | 0; //@line 28914
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 28916
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 28919
  $244 = $6 + 280 | 0; //@line 28923
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 28925
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 28928
  $251 = $6 + 152 | 0; //@line 28932
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 28934
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 28937
  $258 = $6 + 288 | 0; //@line 28941
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 28943
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 28946
  $265 = $6 + 160 | 0; //@line 28950
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 28952
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 28955
  $272 = $6 + 296 | 0; //@line 28959
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 28961
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 28964
  $279 = $6 + 168 | 0; //@line 28968
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 28970
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 28973
  $286 = $6 + 304 | 0; //@line 28977
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 28979
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 28982
  $293 = $6 + 176 | 0; //@line 28986
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 28988
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 28991
  $300 = $6 + 312 | 0; //@line 28995
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 28997
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 29000
  $307 = $6 + 184 | 0; //@line 29004
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 29006
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 29009
  $314 = $6 + 320 | 0; //@line 29013
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 29015
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 29018
  $321 = $6 + 192 | 0; //@line 29022
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 29024
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 29027
  $$0$i = 0; //@line 29028
 } else {
  $$0$i = $AsyncRetVal; //@line 29030
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 29033
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $30 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $7 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 19662
 $6 = $1 + 1 | 0; //@line 19665
 $7 = HEAP8[$6 >> 0] | 0; //@line 19666
 $10 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($7 << 24 >> 24) >> 0] | 0; //@line 19669
 $12 = HEAP32[$0 + 124 >> 2] | 0; //@line 19671
 $19 = $1 + 2 | 0; //@line 19678
 $20 = HEAP8[$19 >> 0] | 0; //@line 19679
 $23 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 19682
 $25 = $20 << 24 >> 24 > $23 << 24 >> 24 ? $20 : $23; //@line 19684
 HEAP8[$19 >> 0] = $25; //@line 19685
 $30 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($7 & 255) << 2) >> 2] | 0; //@line 19690
 $switch$selectcmp$i = ($30 | 0) == 25e4; //@line 19691
 $switch$selectcmp4$i = ($30 | 0) == 5e5; //@line 19692
 $41 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($25 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 19703
 $42 = $0 + 4 | 0; //@line 19704
 $43 = HEAP32[$42 >> 2] | 0; //@line 19705
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 72 >> 2] | 0; //@line 19708
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 19709
 FUNCTION_TABLE_vi[$46 & 1023]($43); //@line 19710
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 511; //@line 19713
  HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 19715
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 19717
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 19719
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 19721
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 19723
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 19726
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 19729
  HEAP8[$AsyncCtx + 26 >> 0] = $10; //@line 19731
  HEAP8[$AsyncCtx + 27 >> 0] = $41; //@line 19733
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 19735
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 19737
  HEAP32[$AsyncCtx + 36 >> 2] = $19; //@line 19739
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 19741
  sp = STACKTOP; //@line 19742
  return 0; //@line 19743
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19745
 $60 = HEAP32[$42 >> 2] | 0; //@line 19746
 $63 = HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] | 0; //@line 19749
 $67 = HEAP32[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 19753
 $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19754
 FUNCTION_TABLE_vii[$63 & 15]($60, $67); //@line 19755
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 512; //@line 19758
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 19760
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 19762
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 19764
  HEAP8[$AsyncCtx2 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 19767
  HEAP8[$AsyncCtx2 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 19770
  HEAP8[$AsyncCtx2 + 18 >> 0] = $10; //@line 19772
  HEAP8[$AsyncCtx2 + 19 >> 0] = $41; //@line 19774
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 19776
  HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 19778
  HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 19780
  HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 19782
  sp = STACKTOP; //@line 19783
  return 0; //@line 19784
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19786
 $85 = HEAP32[$42 >> 2] | 0; //@line 19793
 $88 = HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] | 0; //@line 19796
 $90 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 19798
 $91 = $10 << 24 >> 24; //@line 19799
 do {
  if ((HEAP8[$6 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19803
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 0, $41, 25e3, $90, $91 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 19804
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 513; //@line 19807
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 19809
    HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 19811
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 19813
    HEAP32[$AsyncCtx6 + 16 >> 2] = $19; //@line 19815
    HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 19817
    sp = STACKTOP; //@line 19818
    return 0; //@line 19819
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 19821
    $$0 = 0; //@line 19822
    break;
   }
  } else {
   $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19826
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 1, $41, 0, $90, $91, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 19827
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 514; //@line 19830
    HEAP32[$AsyncCtx10 + 4 >> 2] = $42; //@line 19832
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 19834
    HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 19836
    HEAP32[$AsyncCtx10 + 16 >> 2] = $19; //@line 19838
    HEAP32[$AsyncCtx10 + 20 >> 2] = $2; //@line 19840
    sp = STACKTOP; //@line 19841
    return 0; //@line 19842
   } else {
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 19844
    $$0 = 1; //@line 19845
    break;
   }
  }
 } while (0);
 $103 = HEAP32[$42 >> 2] | 0; //@line 19850
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] | 0; //@line 19853
 $107 = $1 + 12 | 0; //@line 19854
 $109 = HEAP16[$107 >> 1] & 255; //@line 19856
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19857
 FUNCTION_TABLE_viii[$106 & 7]($103, $$0, $109); //@line 19858
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 515; //@line 19861
  HEAP32[$AsyncCtx14 + 4 >> 2] = $42; //@line 19863
  HEAP32[$AsyncCtx14 + 8 >> 2] = $107; //@line 19865
  HEAP32[$AsyncCtx14 + 12 >> 2] = $$0; //@line 19867
  HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 19869
  HEAP32[$AsyncCtx14 + 20 >> 2] = $19; //@line 19871
  HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 19873
  sp = STACKTOP; //@line 19874
  return 0; //@line 19875
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 19877
 $116 = HEAP32[$42 >> 2] | 0; //@line 19878
 $119 = HEAP32[(HEAP32[$116 >> 2] | 0) + 52 >> 2] | 0; //@line 19881
 $121 = HEAP16[$107 >> 1] & 255; //@line 19883
 $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19884
 $122 = FUNCTION_TABLE_iiii[$119 & 31]($116, $$0, $121) | 0; //@line 19885
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 516; //@line 19888
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 19890
  HEAP32[$AsyncCtx17 + 8 >> 2] = $42; //@line 19892
  HEAP32[$AsyncCtx17 + 12 >> 2] = $19; //@line 19894
  HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 19896
  sp = STACKTOP; //@line 19897
  return 0; //@line 19898
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 19900
 HEAP32[$3 >> 2] = $122; //@line 19901
 $127 = HEAP32[$42 >> 2] | 0; //@line 19902
 $130 = HEAP32[(HEAP32[$127 >> 2] | 0) + 76 >> 2] | 0; //@line 19905
 $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 19906
 FUNCTION_TABLE_vi[$130 & 1023]($127); //@line 19907
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 517; //@line 19910
  HEAP32[$AsyncCtx20 + 4 >> 2] = $19; //@line 19912
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 19914
  sp = STACKTOP; //@line 19915
  return 0; //@line 19916
 } else {
  _emscripten_free_async_context($AsyncCtx20 | 0); //@line 19918
  HEAP8[$2 >> 0] = HEAP8[$19 >> 0] | 0; //@line 19920
  return 1; //@line 19921
 }
 return 0; //@line 19923
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $23 = 0, $26 = 0, $29 = 0, $30 = 0, $33 = 0, $36 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $66 = 0, $67 = 0, $70 = 0, $73 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 8576
 STACKTOP = STACKTOP + 32 | 0; //@line 8577
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8577
 $vararg_buffer = sp; //@line 8578
 $1 = sp + 16 | 0; //@line 8579
 $5 = (HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 4 >> 2] | 0) == 1; //@line 8583
 $6 = __ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0; //@line 8584
 if ($5) {
  if (HEAP32[$6 + 8 >> 2] | 0) {
   STACKTOP = sp; //@line 8590
   return;
  }
  $10 = $0 + 2528 | 0; //@line 8592
  $11 = HEAP32[$10 >> 2] | 0; //@line 8593
  if (!$11) {
   STACKTOP = sp; //@line 8596
   return;
  }
  $15 = HEAP32[$0 + 3168 >> 2] | 0; //@line 8600
  $17 = HEAP32[$11 + 4 >> 2] | 0; //@line 8602
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8603
  FUNCTION_TABLE_vii[$17 & 15]($1, $0 + 2516 | 0); //@line 8604
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 295; //@line 8607
   HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 8609
   HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8611
   HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8613
   HEAP32[$AsyncCtx + 16 >> 2] = $15; //@line 8615
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 8617
   sp = STACKTOP; //@line 8618
   STACKTOP = sp; //@line 8619
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8621
  $23 = $1 + 12 | 0; //@line 8623
  HEAP32[$23 >> 2] = HEAP32[$10 >> 2]; //@line 8624
  $26 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 16 >> 0] | 0; //@line 8627
  $29 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 17 >> 0] | 0; //@line 8630
  $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8631
  $30 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($15, $1, $26, $29) | 0; //@line 8632
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 296; //@line 8635
   HEAP32[$AsyncCtx16 + 4 >> 2] = $23; //@line 8637
   HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 8639
   sp = STACKTOP; //@line 8640
   STACKTOP = sp; //@line 8641
   return;
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 8643
  $33 = HEAP32[$23 >> 2] | 0; //@line 8644
  do {
   if ($33 | 0) {
    $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 8649
    $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8650
    FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 8651
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 297; //@line 8654
     HEAP32[$AsyncCtx2 + 4 >> 2] = $30; //@line 8656
     sp = STACKTOP; //@line 8657
     STACKTOP = sp; //@line 8658
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8660
     break;
    }
   }
  } while (0);
  if ($30 | 0) {
   STACKTOP = sp; //@line 8667
   return;
  }
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8669
  _mbed_assert_internal(11890, 11899, 886); //@line 8670
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 298; //@line 8673
   sp = STACKTOP; //@line 8674
   STACKTOP = sp; //@line 8675
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 8677
  STACKTOP = sp; //@line 8678
  return;
 }
 if (HEAP32[$6 + 4 >> 2] | 0) {
  STACKTOP = sp; //@line 8684
  return;
 }
 if (!(HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2] | 0)) {
  $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8691
  __ZN12LoRaWANStack23process_connected_stateEv($0); //@line 8692
  if (___async) {
   HEAP32[$AsyncCtx13 >> 2] = 299; //@line 8695
   sp = STACKTOP; //@line 8696
   STACKTOP = sp; //@line 8697
   return;
  }
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 8699
  STACKTOP = sp; //@line 8700
  return;
 }
 HEAP32[$vararg_buffer >> 2] = HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2]; //@line 8705
 _mbed_tracef(2, 11997, 12309, $vararg_buffer); //@line 8706
 $53 = $0 + 2496 | 0; //@line 8711
 if ((HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2] | 0) != 13) {
  HEAP32[$53 >> 2] = 4; //@line 8713
  HEAP32[$vararg_buffer >> 2] = 0; //@line 8714
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8715
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $vararg_buffer); //@line 8716
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 304; //@line 8719
   HEAP32[$AsyncCtx23 + 4 >> 2] = $vararg_buffer; //@line 8721
   sp = STACKTOP; //@line 8722
   STACKTOP = sp; //@line 8723
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 8725
  STACKTOP = sp; //@line 8726
  return;
 }
 HEAP32[$53 >> 2] = 2; //@line 8728
 $54 = $0 + 2512 | 0; //@line 8729
 $55 = HEAP32[$54 >> 2] | 0; //@line 8730
 do {
  if ($55 | 0) {
   $59 = HEAP32[$0 + 3168 >> 2] | 0; //@line 8736
   $61 = HEAP32[$55 + 4 >> 2] | 0; //@line 8738
   $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8739
   FUNCTION_TABLE_vii[$61 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 8740
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 300; //@line 8743
    HEAP32[$AsyncCtx5 + 4 >> 2] = $54; //@line 8745
    HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 8747
    HEAP32[$AsyncCtx5 + 12 >> 2] = $59; //@line 8749
    HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 8751
    sp = STACKTOP; //@line 8752
    STACKTOP = sp; //@line 8753
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8755
   $66 = $vararg_buffer + 12 | 0; //@line 8757
   HEAP32[$66 >> 2] = HEAP32[$54 >> 2]; //@line 8758
   $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8759
   $67 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($59, $vararg_buffer, 5) | 0; //@line 8760
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 301; //@line 8763
    HEAP32[$AsyncCtx19 + 4 >> 2] = $66; //@line 8765
    HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer; //@line 8767
    sp = STACKTOP; //@line 8768
    STACKTOP = sp; //@line 8769
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 8771
   $70 = HEAP32[$66 >> 2] | 0; //@line 8772
   do {
    if ($70 | 0) {
     $73 = HEAP32[$70 + 8 >> 2] | 0; //@line 8777
     $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8778
     FUNCTION_TABLE_vi[$73 & 1023]($vararg_buffer); //@line 8779
     if (___async) {
      HEAP32[$AsyncCtx9 >> 2] = 302; //@line 8782
      HEAP32[$AsyncCtx9 + 4 >> 2] = $67; //@line 8784
      HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 8786
      sp = STACKTOP; //@line 8787
      STACKTOP = sp; //@line 8788
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx9 | 0); //@line 8790
      break;
     }
    }
   } while (0);
   if (!$67) {
    $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8797
    _mbed_assert_internal(11890, 11899, 778); //@line 8798
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 303; //@line 8801
     HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer; //@line 8803
     sp = STACKTOP; //@line 8804
     STACKTOP = sp; //@line 8805
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 8807
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 8813
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_328($0) {
 $0 = $0 | 0;
 var $$pre125 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 25232
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25234
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25236
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25238
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25240
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25242
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25244
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25246
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25248
 $$pre125 = HEAP32[$2 >> 2] | 0; //@line 25249
 if ($$pre125 | 0) {
  $19 = HEAP32[$$pre125 + 4 >> 2] | 0; //@line 25253
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 25254
  FUNCTION_TABLE_vii[$19 & 15]($12, $6); //@line 25255
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 25258
   $20 = $ReallocAsyncCtx11 + 4 | 0; //@line 25259
   HEAP32[$20 >> 2] = $2; //@line 25260
   $21 = $ReallocAsyncCtx11 + 8 | 0; //@line 25261
   HEAP32[$21 >> 2] = $4; //@line 25262
   $22 = $ReallocAsyncCtx11 + 12 | 0; //@line 25263
   HEAP32[$22 >> 2] = $6; //@line 25264
   $23 = $ReallocAsyncCtx11 + 16 | 0; //@line 25265
   HEAP32[$23 >> 2] = $8; //@line 25266
   $24 = $ReallocAsyncCtx11 + 20 | 0; //@line 25267
   HEAP32[$24 >> 2] = $10; //@line 25268
   $25 = $ReallocAsyncCtx11 + 24 | 0; //@line 25269
   HEAP32[$25 >> 2] = $14; //@line 25270
   $26 = $ReallocAsyncCtx11 + 28 | 0; //@line 25271
   HEAP32[$26 >> 2] = $16; //@line 25272
   sp = STACKTOP; //@line 25273
   return;
  }
  ___async_unwind = 0; //@line 25276
  HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 25277
  $20 = $ReallocAsyncCtx11 + 4 | 0; //@line 25278
  HEAP32[$20 >> 2] = $2; //@line 25279
  $21 = $ReallocAsyncCtx11 + 8 | 0; //@line 25280
  HEAP32[$21 >> 2] = $4; //@line 25281
  $22 = $ReallocAsyncCtx11 + 12 | 0; //@line 25282
  HEAP32[$22 >> 2] = $6; //@line 25283
  $23 = $ReallocAsyncCtx11 + 16 | 0; //@line 25284
  HEAP32[$23 >> 2] = $8; //@line 25285
  $24 = $ReallocAsyncCtx11 + 20 | 0; //@line 25286
  HEAP32[$24 >> 2] = $10; //@line 25287
  $25 = $ReallocAsyncCtx11 + 24 | 0; //@line 25288
  HEAP32[$25 >> 2] = $14; //@line 25289
  $26 = $ReallocAsyncCtx11 + 28 | 0; //@line 25290
  HEAP32[$26 >> 2] = $16; //@line 25291
  sp = STACKTOP; //@line 25292
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 25295
 $27 = $8 + 12 | 0; //@line 25296
 HEAP32[$8 >> 2] = 181; //@line 25297
 HEAP32[$8 + 4 >> 2] = 0; //@line 25299
 HEAP32[$8 + 8 >> 2] = $10; //@line 25301
 HEAP32[$27 >> 2] = 824; //@line 25302
 $28 = $10 + 2432 | 0; //@line 25303
 if (($28 | 0) == ($8 | 0)) {
  $51 = HEAP32[208] | 0; //@line 25307
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 25308
  FUNCTION_TABLE_vi[$51 & 1023]($8); //@line 25309
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 25312
   $52 = $ReallocAsyncCtx15 + 4 | 0; //@line 25313
   HEAP32[$52 >> 2] = $8; //@line 25314
   $53 = $ReallocAsyncCtx15 + 8 | 0; //@line 25315
   HEAP32[$53 >> 2] = $10; //@line 25316
   $54 = $ReallocAsyncCtx15 + 12 | 0; //@line 25317
   HEAP32[$54 >> 2] = $14; //@line 25318
   $55 = $ReallocAsyncCtx15 + 16 | 0; //@line 25319
   HEAP32[$55 >> 2] = $16; //@line 25320
   sp = STACKTOP; //@line 25321
   return;
  }
  ___async_unwind = 0; //@line 25324
  HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 25325
  $52 = $ReallocAsyncCtx15 + 4 | 0; //@line 25326
  HEAP32[$52 >> 2] = $8; //@line 25327
  $53 = $ReallocAsyncCtx15 + 8 | 0; //@line 25328
  HEAP32[$53 >> 2] = $10; //@line 25329
  $54 = $ReallocAsyncCtx15 + 12 | 0; //@line 25330
  HEAP32[$54 >> 2] = $14; //@line 25331
  $55 = $ReallocAsyncCtx15 + 16 | 0; //@line 25332
  HEAP32[$55 >> 2] = $16; //@line 25333
  sp = STACKTOP; //@line 25334
  return;
 }
 $30 = $10 + 2444 | 0; //@line 25337
 $31 = HEAP32[$30 >> 2] | 0; //@line 25338
 if (!$31) {
  $43 = HEAP32[207] | 0; //@line 25342
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 25343
  FUNCTION_TABLE_vii[$43 & 15]($28, $8); //@line 25344
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 25347
   $44 = $ReallocAsyncCtx14 + 4 | 0; //@line 25348
   HEAP32[$44 >> 2] = $27; //@line 25349
   $45 = $ReallocAsyncCtx14 + 8 | 0; //@line 25350
   HEAP32[$45 >> 2] = $30; //@line 25351
   $46 = $ReallocAsyncCtx14 + 12 | 0; //@line 25352
   HEAP32[$46 >> 2] = $8; //@line 25353
   $47 = $ReallocAsyncCtx14 + 16 | 0; //@line 25354
   HEAP32[$47 >> 2] = $10; //@line 25355
   $48 = $ReallocAsyncCtx14 + 20 | 0; //@line 25356
   HEAP32[$48 >> 2] = $14; //@line 25357
   $49 = $ReallocAsyncCtx14 + 24 | 0; //@line 25358
   HEAP32[$49 >> 2] = $16; //@line 25359
   sp = STACKTOP; //@line 25360
   return;
  }
  ___async_unwind = 0; //@line 25363
  HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 25364
  $44 = $ReallocAsyncCtx14 + 4 | 0; //@line 25365
  HEAP32[$44 >> 2] = $27; //@line 25366
  $45 = $ReallocAsyncCtx14 + 8 | 0; //@line 25367
  HEAP32[$45 >> 2] = $30; //@line 25368
  $46 = $ReallocAsyncCtx14 + 12 | 0; //@line 25369
  HEAP32[$46 >> 2] = $8; //@line 25370
  $47 = $ReallocAsyncCtx14 + 16 | 0; //@line 25371
  HEAP32[$47 >> 2] = $10; //@line 25372
  $48 = $ReallocAsyncCtx14 + 20 | 0; //@line 25373
  HEAP32[$48 >> 2] = $14; //@line 25374
  $49 = $ReallocAsyncCtx14 + 24 | 0; //@line 25375
  HEAP32[$49 >> 2] = $16; //@line 25376
  sp = STACKTOP; //@line 25377
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 25381
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 25382
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 25383
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 182; //@line 25386
   $35 = $ReallocAsyncCtx13 + 4 | 0; //@line 25387
   HEAP32[$35 >> 2] = $27; //@line 25388
   $36 = $ReallocAsyncCtx13 + 8 | 0; //@line 25389
   HEAP32[$36 >> 2] = $30; //@line 25390
   $37 = $ReallocAsyncCtx13 + 12 | 0; //@line 25391
   HEAP32[$37 >> 2] = $28; //@line 25392
   $38 = $ReallocAsyncCtx13 + 16 | 0; //@line 25393
   HEAP32[$38 >> 2] = $8; //@line 25394
   $39 = $ReallocAsyncCtx13 + 20 | 0; //@line 25395
   HEAP32[$39 >> 2] = $10; //@line 25396
   $40 = $ReallocAsyncCtx13 + 24 | 0; //@line 25397
   HEAP32[$40 >> 2] = $14; //@line 25398
   $41 = $ReallocAsyncCtx13 + 28 | 0; //@line 25399
   HEAP32[$41 >> 2] = $16; //@line 25400
   sp = STACKTOP; //@line 25401
   return;
  }
  ___async_unwind = 0; //@line 25404
  HEAP32[$ReallocAsyncCtx13 >> 2] = 182; //@line 25405
  $35 = $ReallocAsyncCtx13 + 4 | 0; //@line 25406
  HEAP32[$35 >> 2] = $27; //@line 25407
  $36 = $ReallocAsyncCtx13 + 8 | 0; //@line 25408
  HEAP32[$36 >> 2] = $30; //@line 25409
  $37 = $ReallocAsyncCtx13 + 12 | 0; //@line 25410
  HEAP32[$37 >> 2] = $28; //@line 25411
  $38 = $ReallocAsyncCtx13 + 16 | 0; //@line 25412
  HEAP32[$38 >> 2] = $8; //@line 25413
  $39 = $ReallocAsyncCtx13 + 20 | 0; //@line 25414
  HEAP32[$39 >> 2] = $10; //@line 25415
  $40 = $ReallocAsyncCtx13 + 24 | 0; //@line 25416
  HEAP32[$40 >> 2] = $14; //@line 25417
  $41 = $ReallocAsyncCtx13 + 28 | 0; //@line 25418
  HEAP32[$41 >> 2] = $16; //@line 25419
  sp = STACKTOP; //@line 25420
  return;
 }
}
function __ZN7LoRaPHY13apply_cf_listEPKhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01314 = 0, $$015 = 0, $$079$i = 0, $106 = 0, $124 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $34 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $78 = 0, $83 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18980
 STACKTOP = STACKTOP + 16 | 0; //@line 18981
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18981
 $3 = sp; //@line 18982
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 18987
  return;
 }
 $16 = $3 + 8 | 0; //@line 18998
 HEAP8[$16 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 18999
 L4 : do {
  if ($2 << 24 >> 24 == 16) {
   $18 = $0 + 18 | 0; //@line 19003
   $19 = HEAP8[$18 >> 0] | 0; //@line 19004
   $20 = $0 + 20 | 0; //@line 19005
   if (($19 & 255) < (HEAPU8[$20 >> 0] | 0)) {
    $23 = $0 + 19 | 0; //@line 19009
    $24 = $3 + 4 | 0; //@line 19010
    $25 = $0 + 76 | 0; //@line 19011
    $26 = $3 + 9 | 0; //@line 19012
    $$01314 = 0; //@line 19013
    $$015 = $19; //@line 19013
    $31 = $19; //@line 19013
    L7 : while (1) {
     if ((($31 & 255) + (HEAPU8[$23 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $34 = $$01314 & 255; //@line 19022
      $49 = HEAPU8[$1 + ($34 + 2) >> 0] << 16 | (HEAPU8[$1 + ($34 + 1) >> 0] << 8 | HEAPU8[$1 + $34 >> 0]); //@line 19037
      $50 = $49 * 100 | 0; //@line 19038
      HEAP32[$3 >> 2] = $50; //@line 19039
      HEAP32[$24 >> 2] = 0; //@line 19040
      if (!$49) {
       label = 16; //@line 19043
      } else {
       L12 : do {
        if (!(HEAP8[$25 >> 0] | 0)) {
         $83 = -1; //@line 19049
        } else {
         $$079$i = 0; //@line 19051
         while (1) {
          $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 19055
          $AsyncCtx = _emscripten_alloc_async_context(80, sp) | 0; //@line 19057
          $58 = FUNCTION_TABLE_iiii[$56 & 31]($0, $50, $$079$i & 255) | 0; //@line 19058
          if (___async) {
           label = 10; //@line 19061
           break L7;
          }
          _emscripten_free_async_context($AsyncCtx | 0); //@line 19064
          if ($58) {
           $83 = $$079$i; //@line 19066
           break L12;
          }
          $78 = $$079$i + 1 | 0; //@line 19069
          if (($78 | 0) < (HEAPU8[$25 >> 0] | 0)) {
           $$079$i = $78; //@line 19074
          } else {
           $83 = -1; //@line 19076
           break;
          }
         }
        }
       } while (0);
       HEAP8[$26 >> 0] = $83; //@line 19083
       $86 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 19086
       $AsyncCtx2 = _emscripten_alloc_async_context(72, sp) | 0; //@line 19087
       FUNCTION_TABLE_iiii[$86 & 31]($0, $3, $$015) | 0; //@line 19088
       if (___async) {
        label = 14; //@line 19091
        break;
       }
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19094
      }
     } else {
      HEAP32[$3 >> 2] = 0; //@line 19097
      HEAP8[$16 >> 0] = 0; //@line 19098
      HEAP32[$24 >> 2] = 0; //@line 19099
      label = 16; //@line 19100
     }
     if ((label | 0) == 16) {
      label = 0; //@line 19103
      $106 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 19106
      $AsyncCtx5 = _emscripten_alloc_async_context(68, sp) | 0; //@line 19107
      FUNCTION_TABLE_iii[$106 & 31]($0, $$015) | 0; //@line 19108
      if (___async) {
       label = 17; //@line 19111
       break;
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19114
     }
     $124 = $$015 + 1 << 24 >> 24; //@line 19116
     if (($124 & 255) >= (HEAPU8[$20 >> 0] | 0)) {
      break L4;
     }
     $$01314 = ($$01314 & 255) + 3 & 255; //@line 19126
     $$015 = $124; //@line 19126
     $31 = HEAP8[$18 >> 0] | 0; //@line 19126
    }
    if ((label | 0) == 10) {
     HEAP32[$AsyncCtx >> 2] = 499; //@line 19129
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19131
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 19133
     HEAP8[$AsyncCtx + 12 >> 0] = $$015; //@line 19135
     HEAP32[$AsyncCtx + 16 >> 2] = $20; //@line 19137
     HEAP8[$AsyncCtx + 20 >> 0] = $$01314; //@line 19139
     HEAP32[$AsyncCtx + 24 >> 2] = $18; //@line 19141
     HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 19143
     HEAP32[$AsyncCtx + 32 >> 2] = $25; //@line 19145
     HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 19147
     HEAP32[$AsyncCtx + 40 >> 2] = $50; //@line 19149
     HEAP32[$AsyncCtx + 44 >> 2] = $$079$i; //@line 19151
     HEAP32[$AsyncCtx + 48 >> 2] = $26; //@line 19153
     HEAP32[$AsyncCtx + 52 >> 2] = $0; //@line 19155
     HEAP32[$AsyncCtx + 56 >> 2] = $3; //@line 19157
     HEAP32[$AsyncCtx + 60 >> 2] = $23; //@line 19159
     HEAP32[$AsyncCtx + 64 >> 2] = $3; //@line 19161
     HEAP32[$AsyncCtx + 68 >> 2] = $16; //@line 19163
     HEAP32[$AsyncCtx + 72 >> 2] = $24; //@line 19165
     HEAP32[$AsyncCtx + 76 >> 2] = $1; //@line 19167
     sp = STACKTOP; //@line 19168
     STACKTOP = sp; //@line 19169
     return;
    } else if ((label | 0) == 14) {
     HEAP32[$AsyncCtx2 >> 2] = 500; //@line 19172
     HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 19174
     HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 19176
     HEAP8[$AsyncCtx2 + 12 >> 0] = $$015; //@line 19178
     HEAP32[$AsyncCtx2 + 16 >> 2] = $20; //@line 19180
     HEAP8[$AsyncCtx2 + 20 >> 0] = $$01314; //@line 19182
     HEAP32[$AsyncCtx2 + 24 >> 2] = $18; //@line 19184
     HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 19186
     HEAP32[$AsyncCtx2 + 32 >> 2] = $25; //@line 19188
     HEAP32[$AsyncCtx2 + 36 >> 2] = $0; //@line 19190
     HEAP32[$AsyncCtx2 + 40 >> 2] = $26; //@line 19192
     HEAP32[$AsyncCtx2 + 44 >> 2] = $0; //@line 19194
     HEAP32[$AsyncCtx2 + 48 >> 2] = $3; //@line 19196
     HEAP32[$AsyncCtx2 + 52 >> 2] = $23; //@line 19198
     HEAP32[$AsyncCtx2 + 56 >> 2] = $3; //@line 19200
     HEAP32[$AsyncCtx2 + 60 >> 2] = $16; //@line 19202
     HEAP32[$AsyncCtx2 + 64 >> 2] = $24; //@line 19204
     HEAP32[$AsyncCtx2 + 68 >> 2] = $1; //@line 19206
     sp = STACKTOP; //@line 19207
     STACKTOP = sp; //@line 19208
     return;
    } else if ((label | 0) == 17) {
     HEAP32[$AsyncCtx5 >> 2] = 501; //@line 19211
     HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 19213
     HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 19215
     HEAP32[$AsyncCtx5 + 12 >> 2] = $20; //@line 19217
     HEAP32[$AsyncCtx5 + 16 >> 2] = $18; //@line 19219
     HEAP32[$AsyncCtx5 + 20 >> 2] = $3; //@line 19221
     HEAP32[$AsyncCtx5 + 24 >> 2] = $25; //@line 19223
     HEAP32[$AsyncCtx5 + 28 >> 2] = $0; //@line 19225
     HEAP32[$AsyncCtx5 + 32 >> 2] = $26; //@line 19227
     HEAP32[$AsyncCtx5 + 36 >> 2] = $0; //@line 19229
     HEAP32[$AsyncCtx5 + 40 >> 2] = $3; //@line 19231
     HEAP32[$AsyncCtx5 + 44 >> 2] = $23; //@line 19233
     HEAP32[$AsyncCtx5 + 48 >> 2] = $3; //@line 19235
     HEAP32[$AsyncCtx5 + 52 >> 2] = $16; //@line 19237
     HEAP32[$AsyncCtx5 + 56 >> 2] = $24; //@line 19239
     HEAP32[$AsyncCtx5 + 60 >> 2] = $1; //@line 19241
     HEAP8[$AsyncCtx5 + 64 >> 0] = $$015; //@line 19243
     HEAP8[$AsyncCtx5 + 65 >> 0] = $$01314; //@line 19245
     sp = STACKTOP; //@line 19246
     STACKTOP = sp; //@line 19247
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 19252
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $45 = 0, $51 = 0, $54 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $71 = 0, $74 = 0, $78 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8252
 STACKTOP = STACKTOP + 48 | 0; //@line 8253
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8253
 $6 = sp + 16 | 0; //@line 8254
 $7 = sp; //@line 8255
 $8 = $1 + 12 | 0; //@line 8256
 $9 = HEAP32[$8 >> 2] | 0; //@line 8257
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 8261
   HEAP32[$11 >> 2] = 0; //@line 8262
   $36 = 0; //@line 8263
   $45 = $11; //@line 8263
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 8266
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 8267
   FUNCTION_TABLE_vii[$13 & 15]($7, $1); //@line 8268
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 283; //@line 8271
    HEAP32[$AsyncCtx + 4 >> 2] = $8; //@line 8273
    HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 8275
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 8277
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 8279
    HEAP16[$AsyncCtx + 20 >> 1] = $3; //@line 8281
    HEAP16[$AsyncCtx + 22 >> 1] = $4; //@line 8283
    HEAP8[$AsyncCtx + 24 >> 0] = $5; //@line 8285
    HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 8287
    sp = STACKTOP; //@line 8288
    STACKTOP = sp; //@line 8289
    return 0; //@line 8289
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8291
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 8292
   $22 = $7 + 12 | 0; //@line 8293
   HEAP32[$22 >> 2] = $$pre$i; //@line 8294
   if (!$$pre$i) {
    $36 = 0; //@line 8297
    $45 = $22; //@line 8297
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8301
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8302
    FUNCTION_TABLE_vii[$25 & 15]($6, $7); //@line 8303
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 284; //@line 8306
     HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 8308
     HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 8310
     HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 8312
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 8314
     HEAP16[$AsyncCtx2 + 20 >> 1] = $3; //@line 8316
     HEAP16[$AsyncCtx2 + 22 >> 1] = $4; //@line 8318
     HEAP8[$AsyncCtx2 + 24 >> 0] = $5; //@line 8320
     HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 8322
     HEAP32[$AsyncCtx2 + 32 >> 2] = $7; //@line 8324
     sp = STACKTOP; //@line 8325
     STACKTOP = sp; //@line 8326
     return 0; //@line 8326
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8328
     $36 = HEAP32[$22 >> 2] | 0; //@line 8330
     $45 = $22; //@line 8330
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 8336
 HEAP32[$35 >> 2] = $36; //@line 8337
 $37 = $6 + 16 | 0; //@line 8338
 HEAP32[$37 >> 2] = $2; //@line 8339
 HEAP16[$6 + 20 >> 1] = $3; //@line 8341
 HEAP16[$6 + 22 >> 1] = $4; //@line 8343
 HEAP8[$6 + 24 >> 0] = $5; //@line 8345
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8346
 $41 = _equeue_alloc($0, 28) | 0; //@line 8347
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 285; //@line 8350
  HEAP32[$AsyncCtx18 + 4 >> 2] = $35; //@line 8352
  HEAP32[$AsyncCtx18 + 8 >> 2] = $35; //@line 8354
  HEAP32[$AsyncCtx18 + 12 >> 2] = $45; //@line 8356
  HEAP32[$AsyncCtx18 + 16 >> 2] = $6; //@line 8358
  HEAP32[$AsyncCtx18 + 20 >> 2] = $7; //@line 8360
  HEAP32[$AsyncCtx18 + 24 >> 2] = $37; //@line 8362
  HEAP32[$AsyncCtx18 + 28 >> 2] = $0; //@line 8364
  sp = STACKTOP; //@line 8365
  STACKTOP = sp; //@line 8366
  return 0; //@line 8366
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 8368
 do {
  if (!$41) {
   $$0$i = 0; //@line 8372
  } else {
   $51 = HEAP32[$35 >> 2] | 0; //@line 8374
   do {
    if (!$51) {
     $64 = 0; //@line 8378
    } else {
     $54 = HEAP32[$51 + 4 >> 2] | 0; //@line 8381
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8382
     FUNCTION_TABLE_vii[$54 & 15]($41, $6); //@line 8383
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 286; //@line 8386
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 8388
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 8390
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 8392
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8394
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 8396
      HEAP32[$AsyncCtx5 + 24 >> 2] = $45; //@line 8398
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 8400
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 8402
      sp = STACKTOP; //@line 8403
      STACKTOP = sp; //@line 8404
      return 0; //@line 8404
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8406
      $64 = HEAP32[$35 >> 2] | 0; //@line 8408
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $64; //@line 8414
   $65 = $41 + 16 | 0; //@line 8415
   HEAP32[$65 >> 2] = HEAP32[$37 >> 2]; //@line 8416
   HEAP32[$65 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 8416
   HEAP8[$65 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 8416
   _equeue_event_dtor($41, 287); //@line 8417
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8418
   $66 = _equeue_post($0, 288, $41) | 0; //@line 8419
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 289; //@line 8422
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 8424
    HEAP32[$AsyncCtx15 + 8 >> 2] = $45; //@line 8426
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 8428
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 8430
    sp = STACKTOP; //@line 8431
    STACKTOP = sp; //@line 8432
    return 0; //@line 8432
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8434
    $$0$i = $66; //@line 8435
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$35 >> 2] | 0; //@line 8440
 do {
  if ($71 | 0) {
   $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 8445
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8446
   FUNCTION_TABLE_vi[$74 & 1023]($6); //@line 8447
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 290; //@line 8450
    HEAP32[$AsyncCtx8 + 4 >> 2] = $45; //@line 8452
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8454
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 8456
    sp = STACKTOP; //@line 8457
    STACKTOP = sp; //@line 8458
    return 0; //@line 8458
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8460
    break;
   }
  }
 } while (0);
 $78 = HEAP32[$45 >> 2] | 0; //@line 8465
 if (!$78) {
  STACKTOP = sp; //@line 8468
  return $$0$i | 0; //@line 8468
 }
 $81 = HEAP32[$78 + 8 >> 2] | 0; //@line 8471
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8472
 FUNCTION_TABLE_vi[$81 & 1023]($7); //@line 8473
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 291; //@line 8476
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8478
  sp = STACKTOP; //@line 8479
  STACKTOP = sp; //@line 8480
  return 0; //@line 8480
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8482
 STACKTOP = sp; //@line 8483
 return $$0$i | 0; //@line 8483
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_321($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23833
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23835
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23837
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23839
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23841
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23843
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23845
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23849
 $17 = $16 + 12 | 0; //@line 23850
 HEAP32[$16 >> 2] = 6; //@line 23851
 HEAP32[$16 + 4 >> 2] = 0; //@line 23853
 HEAP32[$16 + 8 >> 2] = $4; //@line 23855
 HEAP32[$17 >> 2] = 836; //@line 23856
 $18 = $4 + 2416 | 0; //@line 23857
 if (($18 | 0) == ($16 | 0)) {
  $47 = HEAP32[211] | 0; //@line 23861
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 23862
  FUNCTION_TABLE_vi[$47 & 1023]($16); //@line 23863
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 23866
   $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 23867
   HEAP32[$48 >> 2] = $2; //@line 23868
   $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 23869
   HEAP32[$49 >> 2] = $4; //@line 23870
   $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 23871
   HEAP32[$50 >> 2] = $6; //@line 23872
   $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 23873
   HEAP32[$51 >> 2] = $8; //@line 23874
   $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 23875
   HEAP32[$52 >> 2] = $10; //@line 23876
   $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 23877
   HEAP32[$53 >> 2] = $16; //@line 23878
   $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 23879
   HEAP32[$54 >> 2] = $12; //@line 23880
   sp = STACKTOP; //@line 23881
   return;
  }
  ___async_unwind = 0; //@line 23884
  HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 23885
  $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 23886
  HEAP32[$48 >> 2] = $2; //@line 23887
  $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 23888
  HEAP32[$49 >> 2] = $4; //@line 23889
  $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 23890
  HEAP32[$50 >> 2] = $6; //@line 23891
  $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 23892
  HEAP32[$51 >> 2] = $8; //@line 23893
  $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 23894
  HEAP32[$52 >> 2] = $10; //@line 23895
  $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 23896
  HEAP32[$53 >> 2] = $16; //@line 23897
  $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 23898
  HEAP32[$54 >> 2] = $12; //@line 23899
  sp = STACKTOP; //@line 23900
  return;
 }
 $20 = $4 + 2428 | 0; //@line 23903
 $21 = HEAP32[$20 >> 2] | 0; //@line 23904
 if (!$21) {
  $36 = HEAP32[210] | 0; //@line 23908
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 23909
  FUNCTION_TABLE_vii[$36 & 15]($18, $16); //@line 23910
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 23913
   $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 23914
   HEAP32[$37 >> 2] = $2; //@line 23915
   $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 23916
   HEAP32[$38 >> 2] = $4; //@line 23917
   $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 23918
   HEAP32[$39 >> 2] = $6; //@line 23919
   $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 23920
   HEAP32[$40 >> 2] = $8; //@line 23921
   $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 23922
   HEAP32[$41 >> 2] = $10; //@line 23923
   $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 23924
   HEAP32[$42 >> 2] = $16; //@line 23925
   $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 23926
   HEAP32[$43 >> 2] = $12; //@line 23927
   $44 = $ReallocAsyncCtx5 + 32 | 0; //@line 23928
   HEAP32[$44 >> 2] = $17; //@line 23929
   $45 = $ReallocAsyncCtx5 + 36 | 0; //@line 23930
   HEAP32[$45 >> 2] = $20; //@line 23931
   sp = STACKTOP; //@line 23932
   return;
  }
  ___async_unwind = 0; //@line 23935
  HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 23936
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 23937
  HEAP32[$37 >> 2] = $2; //@line 23938
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 23939
  HEAP32[$38 >> 2] = $4; //@line 23940
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 23941
  HEAP32[$39 >> 2] = $6; //@line 23942
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 23943
  HEAP32[$40 >> 2] = $8; //@line 23944
  $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 23945
  HEAP32[$41 >> 2] = $10; //@line 23946
  $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 23947
  HEAP32[$42 >> 2] = $16; //@line 23948
  $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 23949
  HEAP32[$43 >> 2] = $12; //@line 23950
  $44 = $ReallocAsyncCtx5 + 32 | 0; //@line 23951
  HEAP32[$44 >> 2] = $17; //@line 23952
  $45 = $ReallocAsyncCtx5 + 36 | 0; //@line 23953
  HEAP32[$45 >> 2] = $20; //@line 23954
  sp = STACKTOP; //@line 23955
  return;
 } else {
  $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 23959
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 23960
  FUNCTION_TABLE_vi[$24 & 1023]($18); //@line 23961
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 23964
   $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 23965
   HEAP32[$25 >> 2] = $2; //@line 23966
   $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 23967
   HEAP32[$26 >> 2] = $4; //@line 23968
   $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 23969
   HEAP32[$27 >> 2] = $6; //@line 23970
   $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 23971
   HEAP32[$28 >> 2] = $8; //@line 23972
   $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 23973
   HEAP32[$29 >> 2] = $10; //@line 23974
   $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 23975
   HEAP32[$30 >> 2] = $16; //@line 23976
   $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 23977
   HEAP32[$31 >> 2] = $12; //@line 23978
   $32 = $ReallocAsyncCtx4 + 32 | 0; //@line 23979
   HEAP32[$32 >> 2] = $17; //@line 23980
   $33 = $ReallocAsyncCtx4 + 36 | 0; //@line 23981
   HEAP32[$33 >> 2] = $20; //@line 23982
   $34 = $ReallocAsyncCtx4 + 40 | 0; //@line 23983
   HEAP32[$34 >> 2] = $18; //@line 23984
   sp = STACKTOP; //@line 23985
   return;
  }
  ___async_unwind = 0; //@line 23988
  HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 23989
  $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 23990
  HEAP32[$25 >> 2] = $2; //@line 23991
  $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 23992
  HEAP32[$26 >> 2] = $4; //@line 23993
  $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 23994
  HEAP32[$27 >> 2] = $6; //@line 23995
  $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 23996
  HEAP32[$28 >> 2] = $8; //@line 23997
  $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 23998
  HEAP32[$29 >> 2] = $10; //@line 23999
  $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 24000
  HEAP32[$30 >> 2] = $16; //@line 24001
  $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 24002
  HEAP32[$31 >> 2] = $12; //@line 24003
  $32 = $ReallocAsyncCtx4 + 32 | 0; //@line 24004
  HEAP32[$32 >> 2] = $17; //@line 24005
  $33 = $ReallocAsyncCtx4 + 36 | 0; //@line 24006
  HEAP32[$33 >> 2] = $20; //@line 24007
  $34 = $ReallocAsyncCtx4 + 40 | 0; //@line 24008
  HEAP32[$34 >> 2] = $18; //@line 24009
  sp = STACKTOP; //@line 24010
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_329($0) {
 $0 = $0 | 0;
 var $$pre$i$i54 = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 25430
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25436
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25438
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25440
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25442
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25444
 $$pre$i$i54 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25445
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i54; //@line 25447
 if ($$pre$i$i54 | 0) {
  $18 = HEAP32[$$pre$i$i54 + 8 >> 2] | 0; //@line 25451
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 25452
  FUNCTION_TABLE_vi[$18 & 1023]($6); //@line 25453
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 25456
   $19 = $ReallocAsyncCtx12 + 4 | 0; //@line 25457
   HEAP32[$19 >> 2] = $6; //@line 25458
   $20 = $ReallocAsyncCtx12 + 8 | 0; //@line 25459
   HEAP32[$20 >> 2] = $8; //@line 25460
   $21 = $ReallocAsyncCtx12 + 12 | 0; //@line 25461
   HEAP32[$21 >> 2] = $10; //@line 25462
   $22 = $ReallocAsyncCtx12 + 16 | 0; //@line 25463
   HEAP32[$22 >> 2] = $12; //@line 25464
   $23 = $ReallocAsyncCtx12 + 20 | 0; //@line 25465
   HEAP32[$23 >> 2] = $14; //@line 25466
   sp = STACKTOP; //@line 25467
   return;
  }
  ___async_unwind = 0; //@line 25470
  HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 25471
  $19 = $ReallocAsyncCtx12 + 4 | 0; //@line 25472
  HEAP32[$19 >> 2] = $6; //@line 25473
  $20 = $ReallocAsyncCtx12 + 8 | 0; //@line 25474
  HEAP32[$20 >> 2] = $8; //@line 25475
  $21 = $ReallocAsyncCtx12 + 12 | 0; //@line 25476
  HEAP32[$21 >> 2] = $10; //@line 25477
  $22 = $ReallocAsyncCtx12 + 16 | 0; //@line 25478
  HEAP32[$22 >> 2] = $12; //@line 25479
  $23 = $ReallocAsyncCtx12 + 20 | 0; //@line 25480
  HEAP32[$23 >> 2] = $14; //@line 25481
  sp = STACKTOP; //@line 25482
  return;
 }
 $24 = $8 + 12 | 0; //@line 25485
 HEAP32[$8 >> 2] = 181; //@line 25486
 HEAP32[$8 + 4 >> 2] = 0; //@line 25488
 HEAP32[$8 + 8 >> 2] = $10; //@line 25490
 HEAP32[$24 >> 2] = 824; //@line 25491
 $25 = $10 + 2432 | 0; //@line 25492
 if (($25 | 0) == ($8 | 0)) {
  $48 = HEAP32[208] | 0; //@line 25496
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 25497
  FUNCTION_TABLE_vi[$48 & 1023]($8); //@line 25498
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 25501
   $49 = $ReallocAsyncCtx15 + 4 | 0; //@line 25502
   HEAP32[$49 >> 2] = $8; //@line 25503
   $50 = $ReallocAsyncCtx15 + 8 | 0; //@line 25504
   HEAP32[$50 >> 2] = $10; //@line 25505
   $51 = $ReallocAsyncCtx15 + 12 | 0; //@line 25506
   HEAP32[$51 >> 2] = $12; //@line 25507
   $52 = $ReallocAsyncCtx15 + 16 | 0; //@line 25508
   HEAP32[$52 >> 2] = $14; //@line 25509
   sp = STACKTOP; //@line 25510
   return;
  }
  ___async_unwind = 0; //@line 25513
  HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 25514
  $49 = $ReallocAsyncCtx15 + 4 | 0; //@line 25515
  HEAP32[$49 >> 2] = $8; //@line 25516
  $50 = $ReallocAsyncCtx15 + 8 | 0; //@line 25517
  HEAP32[$50 >> 2] = $10; //@line 25518
  $51 = $ReallocAsyncCtx15 + 12 | 0; //@line 25519
  HEAP32[$51 >> 2] = $12; //@line 25520
  $52 = $ReallocAsyncCtx15 + 16 | 0; //@line 25521
  HEAP32[$52 >> 2] = $14; //@line 25522
  sp = STACKTOP; //@line 25523
  return;
 }
 $27 = $10 + 2444 | 0; //@line 25526
 $28 = HEAP32[$27 >> 2] | 0; //@line 25527
 if (!$28) {
  $40 = HEAP32[207] | 0; //@line 25531
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 25532
  FUNCTION_TABLE_vii[$40 & 15]($25, $8); //@line 25533
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 25536
   $41 = $ReallocAsyncCtx14 + 4 | 0; //@line 25537
   HEAP32[$41 >> 2] = $24; //@line 25538
   $42 = $ReallocAsyncCtx14 + 8 | 0; //@line 25539
   HEAP32[$42 >> 2] = $27; //@line 25540
   $43 = $ReallocAsyncCtx14 + 12 | 0; //@line 25541
   HEAP32[$43 >> 2] = $8; //@line 25542
   $44 = $ReallocAsyncCtx14 + 16 | 0; //@line 25543
   HEAP32[$44 >> 2] = $10; //@line 25544
   $45 = $ReallocAsyncCtx14 + 20 | 0; //@line 25545
   HEAP32[$45 >> 2] = $12; //@line 25546
   $46 = $ReallocAsyncCtx14 + 24 | 0; //@line 25547
   HEAP32[$46 >> 2] = $14; //@line 25548
   sp = STACKTOP; //@line 25549
   return;
  }
  ___async_unwind = 0; //@line 25552
  HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 25553
  $41 = $ReallocAsyncCtx14 + 4 | 0; //@line 25554
  HEAP32[$41 >> 2] = $24; //@line 25555
  $42 = $ReallocAsyncCtx14 + 8 | 0; //@line 25556
  HEAP32[$42 >> 2] = $27; //@line 25557
  $43 = $ReallocAsyncCtx14 + 12 | 0; //@line 25558
  HEAP32[$43 >> 2] = $8; //@line 25559
  $44 = $ReallocAsyncCtx14 + 16 | 0; //@line 25560
  HEAP32[$44 >> 2] = $10; //@line 25561
  $45 = $ReallocAsyncCtx14 + 20 | 0; //@line 25562
  HEAP32[$45 >> 2] = $12; //@line 25563
  $46 = $ReallocAsyncCtx14 + 24 | 0; //@line 25564
  HEAP32[$46 >> 2] = $14; //@line 25565
  sp = STACKTOP; //@line 25566
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 25570
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 25571
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 25572
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 182; //@line 25575
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 25576
   HEAP32[$32 >> 2] = $24; //@line 25577
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 25578
   HEAP32[$33 >> 2] = $27; //@line 25579
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 25580
   HEAP32[$34 >> 2] = $25; //@line 25581
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 25582
   HEAP32[$35 >> 2] = $8; //@line 25583
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 25584
   HEAP32[$36 >> 2] = $10; //@line 25585
   $37 = $ReallocAsyncCtx13 + 24 | 0; //@line 25586
   HEAP32[$37 >> 2] = $12; //@line 25587
   $38 = $ReallocAsyncCtx13 + 28 | 0; //@line 25588
   HEAP32[$38 >> 2] = $14; //@line 25589
   sp = STACKTOP; //@line 25590
   return;
  }
  ___async_unwind = 0; //@line 25593
  HEAP32[$ReallocAsyncCtx13 >> 2] = 182; //@line 25594
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 25595
  HEAP32[$32 >> 2] = $24; //@line 25596
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 25597
  HEAP32[$33 >> 2] = $27; //@line 25598
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 25599
  HEAP32[$34 >> 2] = $25; //@line 25600
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 25601
  HEAP32[$35 >> 2] = $8; //@line 25602
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 25603
  HEAP32[$36 >> 2] = $10; //@line 25604
  $37 = $ReallocAsyncCtx13 + 24 | 0; //@line 25605
  HEAP32[$37 >> 2] = $12; //@line 25606
  $38 = $ReallocAsyncCtx13 + 28 | 0; //@line 25607
  HEAP32[$38 >> 2] = $14; //@line 25608
  sp = STACKTOP; //@line 25609
  return;
 }
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3699
 STACKTOP = STACKTOP + 16 | 0; //@line 3700
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3700
 $3 = sp; //@line 3701
 if (!$0) {
  $$0 = -24832; //@line 3704
  STACKTOP = sp; //@line 3705
  return $$0 | 0; //@line 3705
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3707
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 3712
  STACKTOP = sp; //@line 3713
  return $$0 | 0; //@line 3713
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 3716
 if (!$9) {
  $$0 = -24832; //@line 3719
  STACKTOP = sp; //@line 3720
  return $$0 | 0; //@line 3720
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 3723
 $13 = $9 + 32 | 0; //@line 3724
 $14 = HEAP32[$13 >> 2] | 0; //@line 3725
 do {
  if (!$14) {
   $$070 = $1; //@line 3729
   $$073 = $2; //@line 3729
  } else {
   $16 = $12 - $14 | 0; //@line 3731
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 3735
    if ($12 | 0) {
     $$09$i = 0; //@line 3738
     do {
      $22 = $9 + $$09$i | 0; //@line 3742
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 3745
      $$09$i = $$09$i + 1 | 0; //@line 3746
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3755
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3756
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 581; //@line 3759
     HEAP32[$AsyncCtx5 + 4 >> 2] = $12; //@line 3761
     HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 3763
     HEAP32[$AsyncCtx5 + 12 >> 2] = $13; //@line 3765
     HEAP32[$AsyncCtx5 + 16 >> 2] = $9; //@line 3767
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 3769
     HEAP32[$AsyncCtx5 + 24 >> 2] = $9; //@line 3771
     HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 3773
     HEAP32[$AsyncCtx5 + 32 >> 2] = $1; //@line 3775
     HEAP32[$AsyncCtx5 + 36 >> 2] = $2; //@line 3777
     sp = STACKTOP; //@line 3778
     STACKTOP = sp; //@line 3779
     return 0; //@line 3779
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3781
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 3785
     HEAP32[$13 >> 2] = 0; //@line 3788
     $$070 = $1 + $38 | 0; //@line 3789
     $$073 = $2 - $38 | 0; //@line 3789
     break;
    } else {
     $$0 = $26; //@line 3792
     STACKTOP = sp; //@line 3793
     return $$0 | 0; //@line 3793
    }
   } else {
    $$070 = $1; //@line 3796
    $$073 = $2; //@line 3796
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 3802
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 3808
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3810
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 3811
     if (___async) {
      label = 15; //@line 3814
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3817
     if ($46 | 0) {
      $$0 = $46; //@line 3820
      label = 26; //@line 3821
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 3824
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 3827
     } else {
      $$1$lcssa = $$070; //@line 3829
      $$174$lcssa = $$073; //@line 3829
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 582; //@line 3834
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 3836
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 3838
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 3840
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 3842
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 3844
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3846
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 3848
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 3850
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 3852
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 3854
     sp = STACKTOP; //@line 3855
     STACKTOP = sp; //@line 3856
     return 0; //@line 3856
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 3859
     return $$0 | 0; //@line 3859
    }
   } else {
    $$06984 = 1; //@line 3862
    $$17481 = $$073; //@line 3862
    $$182 = $$070; //@line 3862
   }
   while (1) {
    $$09$i75 = 0; //@line 3865
    do {
     $62 = $9 + $$09$i75 | 0; //@line 3869
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 3872
     $$09$i75 = $$09$i75 + 1 | 0; //@line 3873
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 3881
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3882
    if (___async) {
     label = 21; //@line 3885
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3888
    if ($66 | 0) {
     $$0 = $66; //@line 3891
     label = 26; //@line 3892
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 3895
    $80 = $$182 + $12 | 0; //@line 3896
    $81 = $$06984 + 1 | 0; //@line 3897
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 3900
     $$17481 = $79; //@line 3900
     $$182 = $80; //@line 3900
    } else {
     $$1$lcssa = $80; //@line 3902
     $$174$lcssa = $79; //@line 3902
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 583; //@line 3907
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 3909
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 3911
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 3913
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 3915
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 3917
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 3919
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 3921
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 3923
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 3925
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 3927
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 3929
    sp = STACKTOP; //@line 3930
    STACKTOP = sp; //@line 3931
    return 0; //@line 3931
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 3934
    return $$0 | 0; //@line 3934
   }
  } else {
   $$1$lcssa = $$070; //@line 3937
   $$174$lcssa = $$073; //@line 3937
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 3942
  STACKTOP = sp; //@line 3943
  return $$0 | 0; //@line 3943
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 3947
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 3950
 $$0 = 0; //@line 3951
 STACKTOP = sp; //@line 3952
 return $$0 | 0; //@line 3952
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $27 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $60 = 0, $65 = 0, $68 = 0, $73 = 0, $79 = 0, $8 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 400
 STACKTOP = STACKTOP + 48 | 0; //@line 401
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 401
 $vararg_buffer = sp; //@line 402
 $2 = sp + 24 | 0; //@line 403
 $3 = sp + 8 | 0; //@line 404
 HEAP8[$0 + 688 >> 0] = 1; //@line 406
 $5 = $0 + 783 | 0; //@line 407
 if (!(HEAP8[$5 >> 0] | 0)) {
  $41 = HEAP16[$0 + 778 >> 1] | 0; //@line 412
  do {
   if ($41 << 16 >> 16) {
    $43 = $0 + 1112 | 0; //@line 416
    $44 = $3 + 12 | 0; //@line 417
    HEAP32[$3 >> 2] = 52; //@line 418
    HEAP32[$3 + 4 >> 2] = 0; //@line 420
    HEAP32[$3 + 8 >> 2] = $0; //@line 422
    HEAP32[$44 >> 2] = 584; //@line 423
    $46 = ($41 & 65535) * 1e3 | 0; //@line 425
    $47 = $0 + 1152 | 0; //@line 426
    if (($47 | 0) != ($3 | 0)) {
     $49 = $0 + 1164 | 0; //@line 429
     $50 = HEAP32[$49 >> 2] | 0; //@line 430
     do {
      if ($50 | 0) {
       $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 435
       $AsyncCtx10 = _emscripten_alloc_async_context(40, sp) | 0; //@line 436
       FUNCTION_TABLE_vi[$53 & 1023]($47); //@line 437
       if (___async) {
        HEAP32[$AsyncCtx10 >> 2] = 53; //@line 440
        HEAP32[$AsyncCtx10 + 4 >> 2] = $44; //@line 442
        HEAP32[$AsyncCtx10 + 8 >> 2] = $49; //@line 444
        HEAP32[$AsyncCtx10 + 12 >> 2] = $47; //@line 446
        HEAP32[$AsyncCtx10 + 16 >> 2] = $3; //@line 448
        HEAP32[$AsyncCtx10 + 20 >> 2] = $43; //@line 450
        $60 = $AsyncCtx10 + 24 | 0; //@line 452
        HEAP32[$60 >> 2] = $46; //@line 454
        HEAP32[$60 + 4 >> 2] = 0; //@line 457
        HEAP32[$AsyncCtx10 + 32 >> 2] = $0; //@line 459
        sp = STACKTOP; //@line 460
        STACKTOP = sp; //@line 461
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx10 | 0); //@line 463
        break;
       }
      }
     } while (0);
     $65 = HEAP32[$44 >> 2] | 0; //@line 468
     do {
      if (!$65) {
       $79 = 0; //@line 472
      } else {
       $68 = HEAP32[$65 + 4 >> 2] | 0; //@line 475
       $AsyncCtx13 = _emscripten_alloc_async_context(32, sp) | 0; //@line 476
       FUNCTION_TABLE_vii[$68 & 15]($47, $3); //@line 477
       if (___async) {
        HEAP32[$AsyncCtx13 >> 2] = 54; //@line 480
        HEAP32[$AsyncCtx13 + 4 >> 2] = $44; //@line 482
        HEAP32[$AsyncCtx13 + 8 >> 2] = $49; //@line 484
        HEAP32[$AsyncCtx13 + 12 >> 2] = $43; //@line 486
        $73 = $AsyncCtx13 + 16 | 0; //@line 488
        HEAP32[$73 >> 2] = $46; //@line 490
        HEAP32[$73 + 4 >> 2] = 0; //@line 493
        HEAP32[$AsyncCtx13 + 24 >> 2] = $0; //@line 495
        HEAP32[$AsyncCtx13 + 28 >> 2] = $3; //@line 497
        sp = STACKTOP; //@line 498
        STACKTOP = sp; //@line 499
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx13 | 0); //@line 501
        $79 = HEAP32[$44 >> 2] | 0; //@line 503
        break;
       }
      }
     } while (0);
     HEAP32[$49 >> 2] = $79; //@line 508
    }
    __ZN4mbed6Ticker5setupEy($43, $46, 0); //@line 510
    $80 = HEAP32[$44 >> 2] | 0; //@line 511
    if ($80 | 0) {
     $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 515
     $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 516
     FUNCTION_TABLE_vi[$83 & 1023]($3); //@line 517
     if (___async) {
      HEAP32[$AsyncCtx17 >> 2] = 55; //@line 520
      HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 522
      sp = STACKTOP; //@line 523
      STACKTOP = sp; //@line 524
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx17 | 0); //@line 526
      break;
     }
    }
   }
  } while (0);
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 532
  STACKTOP = sp; //@line 533
  return;
 }
 $8 = _emscripten_asm_const_i(2) | 0; //@line 535
 $11 = $8 - (HEAP32[$0 + 784 >> 2] | 0) | 0; //@line 538
 HEAP8[$5 >> 0] = 0; //@line 539
 if ($11 >>> 0 > 1e3) {
  HEAP32[$vararg_buffer >> 2] = $11; //@line 542
  _mbed_tracef(4, 11081, 11086, $vararg_buffer); //@line 543
  STACKTOP = sp; //@line 544
  return;
 }
 $13 = $0 + 1112 | 0; //@line 546
 $14 = $2 + 12 | 0; //@line 547
 HEAP32[$2 >> 2] = 48; //@line 548
 HEAP32[$2 + 4 >> 2] = 0; //@line 550
 HEAP32[$2 + 8 >> 2] = $0; //@line 552
 HEAP32[$14 >> 2] = 584; //@line 553
 $15 = $0 + 1152 | 0; //@line 554
 if (($15 | 0) != ($2 | 0)) {
  $17 = $0 + 1164 | 0; //@line 557
  $18 = HEAP32[$17 >> 2] | 0; //@line 558
  do {
   if ($18 | 0) {
    $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 563
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 564
    FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 565
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 49; //@line 568
     HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 570
     HEAP32[$AsyncCtx + 8 >> 2] = $17; //@line 572
     HEAP32[$AsyncCtx + 12 >> 2] = $15; //@line 574
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 576
     HEAP32[$AsyncCtx + 20 >> 2] = $13; //@line 578
     sp = STACKTOP; //@line 579
     STACKTOP = sp; //@line 580
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 582
     break;
    }
   }
  } while (0);
  $27 = HEAP32[$14 >> 2] | 0; //@line 587
  do {
   if (!$27) {
    $35 = 0; //@line 591
   } else {
    $30 = HEAP32[$27 + 4 >> 2] | 0; //@line 594
    $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 595
    FUNCTION_TABLE_vii[$30 & 15]($15, $2); //@line 596
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 50; //@line 599
     HEAP32[$AsyncCtx2 + 4 >> 2] = $14; //@line 601
     HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 603
     HEAP32[$AsyncCtx2 + 12 >> 2] = $13; //@line 605
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 607
     sp = STACKTOP; //@line 608
     STACKTOP = sp; //@line 609
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 611
     $35 = HEAP32[$14 >> 2] | 0; //@line 613
     break;
    }
   }
  } while (0);
  HEAP32[$17 >> 2] = $35; //@line 618
 }
 __ZN4mbed6Ticker5setupEy($13, 2e5, 0); //@line 620
 $36 = HEAP32[$14 >> 2] | 0; //@line 621
 if (!$36) {
  STACKTOP = sp; //@line 624
  return;
 }
 $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 627
 $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 628
 FUNCTION_TABLE_vi[$39 & 1023]($2); //@line 629
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 51; //@line 632
  sp = STACKTOP; //@line 633
  STACKTOP = sp; //@line 634
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 636
 STACKTOP = sp; //@line 637
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $43 = 0, $46 = 0, $5 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8926
 STACKTOP = STACKTOP + 48 | 0; //@line 8927
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8927
 $4 = sp + 16 | 0; //@line 8928
 $5 = sp; //@line 8929
 $6 = $1 + 12 | 0; //@line 8930
 $7 = HEAP32[$6 >> 2] | 0; //@line 8931
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 8935
   HEAP32[$9 >> 2] = 0; //@line 8936
   $30 = 0; //@line 8937
   $36 = $9; //@line 8937
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 8940
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8941
   FUNCTION_TABLE_vii[$11 & 15]($5, $1); //@line 8942
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 309; //@line 8945
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 8947
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 8949
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 8951
    HEAP8[$AsyncCtx + 16 >> 0] = $2; //@line 8953
    HEAP8[$AsyncCtx + 17 >> 0] = $3; //@line 8955
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 8957
    sp = STACKTOP; //@line 8958
    STACKTOP = sp; //@line 8959
    return 0; //@line 8959
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8961
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 8962
   $18 = $5 + 12 | 0; //@line 8963
   HEAP32[$18 >> 2] = $$pre$i; //@line 8964
   if (!$$pre$i) {
    $30 = 0; //@line 8967
    $36 = $18; //@line 8967
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8971
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8972
    FUNCTION_TABLE_vii[$21 & 15]($4, $5); //@line 8973
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 310; //@line 8976
     HEAP32[$AsyncCtx2 + 4 >> 2] = $18; //@line 8978
     HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 8980
     HEAP32[$AsyncCtx2 + 12 >> 2] = $5; //@line 8982
     HEAP32[$AsyncCtx2 + 16 >> 2] = $18; //@line 8984
     HEAP8[$AsyncCtx2 + 20 >> 0] = $2; //@line 8986
     HEAP8[$AsyncCtx2 + 21 >> 0] = $3; //@line 8988
     HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 8990
     sp = STACKTOP; //@line 8991
     STACKTOP = sp; //@line 8992
     return 0; //@line 8992
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8994
     $30 = HEAP32[$18 >> 2] | 0; //@line 8996
     $36 = $18; //@line 8996
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 9002
 HEAP32[$29 >> 2] = $30; //@line 9003
 $31 = $4 + 16 | 0; //@line 9004
 HEAP8[$31 >> 0] = $2; //@line 9005
 HEAP8[$4 + 17 >> 0] = $3; //@line 9007
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9008
 $33 = _equeue_alloc($0, 20) | 0; //@line 9009
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 311; //@line 9012
  HEAP32[$AsyncCtx18 + 4 >> 2] = $29; //@line 9014
  HEAP32[$AsyncCtx18 + 8 >> 2] = $36; //@line 9016
  HEAP32[$AsyncCtx18 + 12 >> 2] = $5; //@line 9018
  HEAP32[$AsyncCtx18 + 16 >> 2] = $29; //@line 9020
  HEAP32[$AsyncCtx18 + 20 >> 2] = $4; //@line 9022
  HEAP32[$AsyncCtx18 + 24 >> 2] = $31; //@line 9024
  HEAP32[$AsyncCtx18 + 28 >> 2] = $0; //@line 9026
  sp = STACKTOP; //@line 9027
  STACKTOP = sp; //@line 9028
  return 0; //@line 9028
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 9030
 do {
  if (!$33) {
   $$0$i = 0; //@line 9034
  } else {
   $43 = HEAP32[$29 >> 2] | 0; //@line 9036
   do {
    if (!$43) {
     $56 = 0; //@line 9040
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 9043
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9044
     FUNCTION_TABLE_vii[$46 & 15]($33, $4); //@line 9045
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 312; //@line 9048
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 9050
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 9052
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 9054
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 9056
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 9058
      HEAP32[$AsyncCtx5 + 24 >> 2] = $36; //@line 9060
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 9062
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 9064
      sp = STACKTOP; //@line 9065
      STACKTOP = sp; //@line 9066
      return 0; //@line 9066
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9068
      $56 = HEAP32[$29 >> 2] | 0; //@line 9070
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $56; //@line 9076
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 9079
   _equeue_event_dtor($33, 313); //@line 9080
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9081
   $59 = _equeue_post($0, 314, $33) | 0; //@line 9082
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 315; //@line 9085
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 9087
    HEAP32[$AsyncCtx15 + 8 >> 2] = $36; //@line 9089
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 9091
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 9093
    sp = STACKTOP; //@line 9094
    STACKTOP = sp; //@line 9095
    return 0; //@line 9095
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 9097
    $$0$i = $59; //@line 9098
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$29 >> 2] | 0; //@line 9103
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 9108
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9109
   FUNCTION_TABLE_vi[$67 & 1023]($4); //@line 9110
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 316; //@line 9113
    HEAP32[$AsyncCtx8 + 4 >> 2] = $36; //@line 9115
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 9117
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 9119
    sp = STACKTOP; //@line 9120
    STACKTOP = sp; //@line 9121
    return 0; //@line 9121
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9123
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$36 >> 2] | 0; //@line 9128
 if (!$71) {
  STACKTOP = sp; //@line 9131
  return $$0$i | 0; //@line 9131
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 9134
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9135
 FUNCTION_TABLE_vi[$74 & 1023]($5); //@line 9136
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 317; //@line 9139
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 9141
  sp = STACKTOP; //@line 9142
  STACKTOP = sp; //@line 9143
  return 0; //@line 9143
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 9145
 STACKTOP = sp; //@line 9146
 return $$0$i | 0; //@line 9146
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $17 = 0, $18 = 0, $21 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $55 = 0, $58 = 0, $6 = 0, $63 = 0, $66 = 0, $70 = 0, $73 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 6106
 STACKTOP = STACKTOP + 48 | 0; //@line 6107
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6107
 $3 = sp + 16 | 0; //@line 6108
 $4 = sp; //@line 6109
 $5 = $1 + 12 | 0; //@line 6110
 $6 = HEAP32[$5 >> 2] | 0; //@line 6111
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 6115
   HEAP32[$8 >> 2] = 0; //@line 6116
   $29 = 0; //@line 6118
   $31 = $2 & 1; //@line 6118
   $38 = $8; //@line 6118
  } else {
   $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 6121
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6122
   FUNCTION_TABLE_vii[$11 & 15]($4, $1); //@line 6123
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 206; //@line 6126
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 6128
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 6130
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6132
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 6134
    HEAP8[$AsyncCtx + 20 >> 0] = $2 & 1; //@line 6137
    sp = STACKTOP; //@line 6138
    STACKTOP = sp; //@line 6139
    return 0; //@line 6139
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6141
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 6142
   $17 = $4 + 12 | 0; //@line 6143
   HEAP32[$17 >> 2] = $$pre$i; //@line 6144
   $18 = $2 & 1; //@line 6145
   if (!$$pre$i) {
    $29 = 0; //@line 6148
    $31 = $18; //@line 6148
    $38 = $17; //@line 6148
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 6152
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6153
    FUNCTION_TABLE_vii[$21 & 15]($3, $4); //@line 6154
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 207; //@line 6157
     HEAP32[$AsyncCtx2 + 4 >> 2] = $17; //@line 6159
     HEAP8[$AsyncCtx2 + 8 >> 0] = $18; //@line 6161
     HEAP32[$AsyncCtx2 + 12 >> 2] = $17; //@line 6163
     HEAP32[$AsyncCtx2 + 16 >> 2] = $3; //@line 6165
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 6167
     HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 6169
     sp = STACKTOP; //@line 6170
     STACKTOP = sp; //@line 6171
     return 0; //@line 6171
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6173
     $29 = HEAP32[$17 >> 2] | 0; //@line 6175
     $31 = $18; //@line 6175
     $38 = $17; //@line 6175
     break;
    }
   }
  }
 } while (0);
 $28 = $3 + 12 | 0; //@line 6181
 HEAP32[$28 >> 2] = $29; //@line 6182
 $30 = $3 + 16 | 0; //@line 6183
 HEAP8[$30 >> 0] = $31; //@line 6184
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6185
 $32 = _equeue_alloc($0, 20) | 0; //@line 6186
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 208; //@line 6189
  HEAP32[$AsyncCtx18 + 4 >> 2] = $28; //@line 6191
  HEAP32[$AsyncCtx18 + 8 >> 2] = $30; //@line 6193
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 6195
  HEAP32[$AsyncCtx18 + 16 >> 2] = $28; //@line 6197
  HEAP32[$AsyncCtx18 + 20 >> 2] = $38; //@line 6199
  HEAP32[$AsyncCtx18 + 24 >> 2] = $3; //@line 6201
  HEAP32[$AsyncCtx18 + 28 >> 2] = $4; //@line 6203
  sp = STACKTOP; //@line 6204
  STACKTOP = sp; //@line 6205
  return 0; //@line 6205
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 6207
 do {
  if (!$32) {
   $$0$i = 0; //@line 6211
  } else {
   $42 = HEAP32[$28 >> 2] | 0; //@line 6213
   do {
    if (!$42) {
     $55 = 0; //@line 6217
    } else {
     $45 = HEAP32[$42 + 4 >> 2] | 0; //@line 6220
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6221
     FUNCTION_TABLE_vii[$45 & 15]($32, $3); //@line 6222
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 209; //@line 6225
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 6227
      HEAP32[$AsyncCtx5 + 8 >> 2] = $32; //@line 6229
      HEAP32[$AsyncCtx5 + 12 >> 2] = $30; //@line 6231
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 6233
      HEAP32[$AsyncCtx5 + 20 >> 2] = $28; //@line 6235
      HEAP32[$AsyncCtx5 + 24 >> 2] = $38; //@line 6237
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 6239
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 6241
      sp = STACKTOP; //@line 6242
      STACKTOP = sp; //@line 6243
      return 0; //@line 6243
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6245
      $55 = HEAP32[$28 >> 2] | 0; //@line 6247
      break;
     }
    }
   } while (0);
   HEAP32[$32 + 12 >> 2] = $55; //@line 6253
   HEAP8[$32 + 16 >> 0] = HEAP8[$30 >> 0] | 0; //@line 6256
   _equeue_event_dtor($32, 210); //@line 6257
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6258
   $58 = _equeue_post($0, 211, $32) | 0; //@line 6259
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 212; //@line 6262
    HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 6264
    HEAP32[$AsyncCtx15 + 8 >> 2] = $38; //@line 6266
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 6268
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 6270
    sp = STACKTOP; //@line 6271
    STACKTOP = sp; //@line 6272
    return 0; //@line 6272
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6274
    $$0$i = $58; //@line 6275
    break;
   }
  }
 } while (0);
 $63 = HEAP32[$28 >> 2] | 0; //@line 6280
 do {
  if ($63 | 0) {
   $66 = HEAP32[$63 + 8 >> 2] | 0; //@line 6285
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6286
   FUNCTION_TABLE_vi[$66 & 1023]($3); //@line 6287
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 213; //@line 6290
    HEAP32[$AsyncCtx8 + 4 >> 2] = $38; //@line 6292
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 6294
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 6296
    sp = STACKTOP; //@line 6297
    STACKTOP = sp; //@line 6298
    return 0; //@line 6298
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6300
    break;
   }
  }
 } while (0);
 $70 = HEAP32[$38 >> 2] | 0; //@line 6305
 if (!$70) {
  STACKTOP = sp; //@line 6308
  return $$0$i | 0; //@line 6308
 }
 $73 = HEAP32[$70 + 8 >> 2] | 0; //@line 6311
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6312
 FUNCTION_TABLE_vi[$73 & 1023]($4); //@line 6313
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 214; //@line 6316
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 6318
  sp = STACKTOP; //@line 6319
  STACKTOP = sp; //@line 6320
  return 0; //@line 6320
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6322
 STACKTOP = sp; //@line 6323
 return $$0$i | 0; //@line 6323
}
function _mbedtls_cipher_cmac_update__async_cb_55($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22826
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22828
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22830
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22832
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22834
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22836
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22838
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22840
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22842
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22844
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22846
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 22849
  $66 = ___async_retval; //@line 22850
  HEAP32[$66 >> 2] = $$0; //@line 22851
  return;
 }
 $22 = $2 - (HEAP32[$6 >> 2] | 0) | 0; //@line 22855
 $23 = $16 + $22 | 0; //@line 22856
 $24 = $18 - $22 | 0; //@line 22857
 HEAP32[$6 >> 2] = 0; //@line 22858
 $27 = (($2 + -1 + $24 | 0) >>> 0) / ($2 >>> 0) | 0; //@line 22861
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 22866
   $66 = ___async_retval; //@line 22867
   HEAP32[$66 >> 2] = $$0; //@line 22868
   return;
  }
  _memcpy((HEAP32[$6 >> 2] | 0) + ($8 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 22873
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $24; //@line 22876
  $$0 = 0; //@line 22877
  $66 = ___async_retval; //@line 22878
  HEAP32[$66 >> 2] = $$0; //@line 22879
  return;
 }
 if (!$2) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 22884
  $30 = _mbedtls_cipher_update($10, $12, 0, $12, $14) | 0; //@line 22885
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 582; //@line 22888
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 22889
   HEAP32[$31 >> 2] = 1; //@line 22890
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 22891
   HEAP32[$32 >> 2] = $27; //@line 22892
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 22893
   HEAP32[$33 >> 2] = $4; //@line 22894
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 22895
   HEAP32[$34 >> 2] = $10; //@line 22896
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 22897
   HEAP32[$35 >> 2] = $12; //@line 22898
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 22899
   HEAP32[$36 >> 2] = $14; //@line 22900
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 22901
   HEAP32[$37 >> 2] = $24; //@line 22902
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 22903
   HEAP32[$38 >> 2] = $23; //@line 22904
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 22905
   HEAP32[$39 >> 2] = $6; //@line 22906
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 22907
   HEAP32[$40 >> 2] = $8; //@line 22908
   sp = STACKTOP; //@line 22909
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 22913
  ___async_unwind = 0; //@line 22914
  HEAP32[$ReallocAsyncCtx2 >> 2] = 582; //@line 22915
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 22916
  HEAP32[$31 >> 2] = 1; //@line 22917
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 22918
  HEAP32[$32 >> 2] = $27; //@line 22919
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 22920
  HEAP32[$33 >> 2] = $4; //@line 22921
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 22922
  HEAP32[$34 >> 2] = $10; //@line 22923
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 22924
  HEAP32[$35 >> 2] = $12; //@line 22925
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 22926
  HEAP32[$36 >> 2] = $14; //@line 22927
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 22928
  HEAP32[$37 >> 2] = $24; //@line 22929
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 22930
  HEAP32[$38 >> 2] = $23; //@line 22931
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 22932
  HEAP32[$39 >> 2] = $6; //@line 22933
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 22934
  HEAP32[$40 >> 2] = $8; //@line 22935
  sp = STACKTOP; //@line 22936
  return;
 }
 $$09$i75 = 0; //@line 22939
 do {
  $44 = $8 + $$09$i75 | 0; //@line 22943
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 22946
  $$09$i75 = $$09$i75 + 1 | 0; //@line 22947
 } while (($$09$i75 | 0) != ($2 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 22955
 $48 = _mbedtls_cipher_update($10, $12, $2, $12, $14) | 0; //@line 22956
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 583; //@line 22959
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 22960
  HEAP32[$49 >> 2] = $24; //@line 22961
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 22962
  HEAP32[$50 >> 2] = $2; //@line 22963
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 22964
  HEAP32[$51 >> 2] = $23; //@line 22965
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 22966
  HEAP32[$52 >> 2] = 1; //@line 22967
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 22968
  HEAP32[$53 >> 2] = $27; //@line 22969
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 22970
  HEAP32[$54 >> 2] = $4; //@line 22971
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 22972
  HEAP32[$55 >> 2] = $6; //@line 22973
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 22974
  HEAP32[$56 >> 2] = $8; //@line 22975
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 22976
  HEAP32[$57 >> 2] = $10; //@line 22977
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 22978
  HEAP32[$58 >> 2] = $12; //@line 22979
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 22980
  HEAP32[$59 >> 2] = $14; //@line 22981
  sp = STACKTOP; //@line 22982
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 22986
 ___async_unwind = 0; //@line 22987
 HEAP32[$ReallocAsyncCtx >> 2] = 583; //@line 22988
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 22989
 HEAP32[$49 >> 2] = $24; //@line 22990
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 22991
 HEAP32[$50 >> 2] = $2; //@line 22992
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 22993
 HEAP32[$51 >> 2] = $23; //@line 22994
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 22995
 HEAP32[$52 >> 2] = 1; //@line 22996
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 22997
 HEAP32[$53 >> 2] = $27; //@line 22998
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 22999
 HEAP32[$54 >> 2] = $4; //@line 23000
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 23001
 HEAP32[$55 >> 2] = $6; //@line 23002
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 23003
 HEAP32[$56 >> 2] = $8; //@line 23004
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 23005
 HEAP32[$57 >> 2] = $10; //@line 23006
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 23007
 HEAP32[$58 >> 2] = $12; //@line 23008
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 23009
 HEAP32[$59 >> 2] = $14; //@line 23010
 sp = STACKTOP; //@line 23011
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $6 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20937
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20939
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20941
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 20943
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20945
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 20947
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20949
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20951
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20953
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20955
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20957
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20959
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20961
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20963
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20965
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20967
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20969
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20971
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20973
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20975
 if (HEAP8[___async_retval >> 0] & 1) {
  $70 = $22; //@line 20980
 } else {
  $44 = $22 + 1 | 0; //@line 20982
  if (($44 | 0) < (HEAPU8[$16 >> 0] | 0 | 0)) {
   $42 = HEAP32[(HEAP32[$18 >> 2] | 0) + 76 >> 2] | 0; //@line 20989
   $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 20991
   $45 = FUNCTION_TABLE_iiii[$42 & 31]($4, $20, $44 & 255) | 0; //@line 20992
   if (!___async) {
    HEAP8[___async_retval >> 0] = $45 & 1; //@line 20997
    ___async_unwind = 0; //@line 20998
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 499; //@line 21000
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 21002
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 21004
   HEAP8[$ReallocAsyncCtx + 12 >> 0] = $6; //@line 21006
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 21008
   HEAP8[$ReallocAsyncCtx + 20 >> 0] = $10; //@line 21010
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 21012
   HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 21014
   HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 21016
   HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 21018
   HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 21020
   HEAP32[$ReallocAsyncCtx + 44 >> 2] = $44; //@line 21022
   HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 21024
   HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 21026
   HEAP32[$ReallocAsyncCtx + 56 >> 2] = $28; //@line 21028
   HEAP32[$ReallocAsyncCtx + 60 >> 2] = $30; //@line 21030
   HEAP32[$ReallocAsyncCtx + 64 >> 2] = $32; //@line 21032
   HEAP32[$ReallocAsyncCtx + 68 >> 2] = $34; //@line 21034
   HEAP32[$ReallocAsyncCtx + 72 >> 2] = $36; //@line 21036
   HEAP32[$ReallocAsyncCtx + 76 >> 2] = $38; //@line 21038
   sp = STACKTOP; //@line 21039
   return;
  } else {
   $70 = -1; //@line 21042
  }
 }
 HEAP8[$24 >> 0] = $70; //@line 21046
 $73 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 21049
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(72) | 0; //@line 21050
 FUNCTION_TABLE_iiii[$73 & 31]($4, $28, $6) | 0; //@line 21051
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 21054
  $74 = $ReallocAsyncCtx2 + 4 | 0; //@line 21055
  HEAP32[$74 >> 2] = $2; //@line 21056
  $75 = $ReallocAsyncCtx2 + 8 | 0; //@line 21057
  HEAP32[$75 >> 2] = $4; //@line 21058
  $76 = $ReallocAsyncCtx2 + 12 | 0; //@line 21059
  HEAP8[$76 >> 0] = $6; //@line 21060
  $77 = $ReallocAsyncCtx2 + 16 | 0; //@line 21061
  HEAP32[$77 >> 2] = $8; //@line 21062
  $78 = $ReallocAsyncCtx2 + 20 | 0; //@line 21063
  HEAP8[$78 >> 0] = $10; //@line 21064
  $79 = $ReallocAsyncCtx2 + 24 | 0; //@line 21065
  HEAP32[$79 >> 2] = $12; //@line 21066
  $80 = $ReallocAsyncCtx2 + 28 | 0; //@line 21067
  HEAP32[$80 >> 2] = $14; //@line 21068
  $81 = $ReallocAsyncCtx2 + 32 | 0; //@line 21069
  HEAP32[$81 >> 2] = $16; //@line 21070
  $82 = $ReallocAsyncCtx2 + 36 | 0; //@line 21071
  HEAP32[$82 >> 2] = $18; //@line 21072
  $83 = $ReallocAsyncCtx2 + 40 | 0; //@line 21073
  HEAP32[$83 >> 2] = $24; //@line 21074
  $84 = $ReallocAsyncCtx2 + 44 | 0; //@line 21075
  HEAP32[$84 >> 2] = $26; //@line 21076
  $85 = $ReallocAsyncCtx2 + 48 | 0; //@line 21077
  HEAP32[$85 >> 2] = $28; //@line 21078
  $86 = $ReallocAsyncCtx2 + 52 | 0; //@line 21079
  HEAP32[$86 >> 2] = $30; //@line 21080
  $87 = $ReallocAsyncCtx2 + 56 | 0; //@line 21081
  HEAP32[$87 >> 2] = $32; //@line 21082
  $88 = $ReallocAsyncCtx2 + 60 | 0; //@line 21083
  HEAP32[$88 >> 2] = $34; //@line 21084
  $89 = $ReallocAsyncCtx2 + 64 | 0; //@line 21085
  HEAP32[$89 >> 2] = $36; //@line 21086
  $90 = $ReallocAsyncCtx2 + 68 | 0; //@line 21087
  HEAP32[$90 >> 2] = $38; //@line 21088
  sp = STACKTOP; //@line 21089
  return;
 }
 ___async_unwind = 0; //@line 21092
 HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 21093
 $74 = $ReallocAsyncCtx2 + 4 | 0; //@line 21094
 HEAP32[$74 >> 2] = $2; //@line 21095
 $75 = $ReallocAsyncCtx2 + 8 | 0; //@line 21096
 HEAP32[$75 >> 2] = $4; //@line 21097
 $76 = $ReallocAsyncCtx2 + 12 | 0; //@line 21098
 HEAP8[$76 >> 0] = $6; //@line 21099
 $77 = $ReallocAsyncCtx2 + 16 | 0; //@line 21100
 HEAP32[$77 >> 2] = $8; //@line 21101
 $78 = $ReallocAsyncCtx2 + 20 | 0; //@line 21102
 HEAP8[$78 >> 0] = $10; //@line 21103
 $79 = $ReallocAsyncCtx2 + 24 | 0; //@line 21104
 HEAP32[$79 >> 2] = $12; //@line 21105
 $80 = $ReallocAsyncCtx2 + 28 | 0; //@line 21106
 HEAP32[$80 >> 2] = $14; //@line 21107
 $81 = $ReallocAsyncCtx2 + 32 | 0; //@line 21108
 HEAP32[$81 >> 2] = $16; //@line 21109
 $82 = $ReallocAsyncCtx2 + 36 | 0; //@line 21110
 HEAP32[$82 >> 2] = $18; //@line 21111
 $83 = $ReallocAsyncCtx2 + 40 | 0; //@line 21112
 HEAP32[$83 >> 2] = $24; //@line 21113
 $84 = $ReallocAsyncCtx2 + 44 | 0; //@line 21114
 HEAP32[$84 >> 2] = $26; //@line 21115
 $85 = $ReallocAsyncCtx2 + 48 | 0; //@line 21116
 HEAP32[$85 >> 2] = $28; //@line 21117
 $86 = $ReallocAsyncCtx2 + 52 | 0; //@line 21118
 HEAP32[$86 >> 2] = $30; //@line 21119
 $87 = $ReallocAsyncCtx2 + 56 | 0; //@line 21120
 HEAP32[$87 >> 2] = $32; //@line 21121
 $88 = $ReallocAsyncCtx2 + 60 | 0; //@line 21122
 HEAP32[$88 >> 2] = $34; //@line 21123
 $89 = $ReallocAsyncCtx2 + 64 | 0; //@line 21124
 HEAP32[$89 >> 2] = $36; //@line 21125
 $90 = $ReallocAsyncCtx2 + 68 | 0; //@line 21126
 HEAP32[$90 >> 2] = $38; //@line 21127
 sp = STACKTOP; //@line 21128
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1044
 HEAP32[$0 >> 2] = 496; //@line 1045
 $1 = $0 + 1240 | 0; //@line 1046
 HEAP32[$1 >> 2] = 10244; //@line 1047
 __ZN4mbed6Ticker6detachEv($1); //@line 1048
 $3 = HEAP32[$0 + 1292 >> 2] | 0; //@line 1050
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 1056
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1057
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1280 | 0); //@line 1058
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 66; //@line 1061
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1063
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1065
    sp = STACKTOP; //@line 1066
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1069
    break;
   }
  }
 } while (0);
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1074
 __ZN4mbed10TimerEventD2Ev($1); //@line 1075
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 67; //@line 1078
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 1080
  sp = STACKTOP; //@line 1081
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 1084
 $11 = $0 + 1176 | 0; //@line 1085
 HEAP32[$11 >> 2] = 10244; //@line 1086
 __ZN4mbed6Ticker6detachEv($11); //@line 1087
 $13 = HEAP32[$0 + 1228 >> 2] | 0; //@line 1089
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 1095
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1096
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1216 | 0); //@line 1097
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 68; //@line 1100
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1102
    HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 1104
    sp = STACKTOP; //@line 1105
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1108
    break;
   }
  }
 } while (0);
 $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1113
 __ZN4mbed10TimerEventD2Ev($11); //@line 1114
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 69; //@line 1117
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 1119
  sp = STACKTOP; //@line 1120
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 1123
 $21 = $0 + 1112 | 0; //@line 1124
 HEAP32[$21 >> 2] = 10244; //@line 1125
 __ZN4mbed6Ticker6detachEv($21); //@line 1126
 $23 = HEAP32[$0 + 1164 >> 2] | 0; //@line 1128
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 1134
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1135
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1152 | 0); //@line 1136
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 70; //@line 1139
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1141
    HEAP32[$AsyncCtx7 + 8 >> 2] = $21; //@line 1143
    sp = STACKTOP; //@line 1144
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1147
    break;
   }
  }
 } while (0);
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1152
 __ZN4mbed10TimerEventD2Ev($21); //@line 1153
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 71; //@line 1156
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 1158
  sp = STACKTOP; //@line 1159
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 1162
 $31 = $0 + 1048 | 0; //@line 1163
 HEAP32[$31 >> 2] = 10244; //@line 1164
 __ZN4mbed6Ticker6detachEv($31); //@line 1165
 $33 = HEAP32[$0 + 1100 >> 2] | 0; //@line 1167
 do {
  if ($33 | 0) {
   $37 = HEAP32[$33 + 8 >> 2] | 0; //@line 1173
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1174
   FUNCTION_TABLE_vi[$37 & 1023]($0 + 1088 | 0); //@line 1175
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 72; //@line 1178
    HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 1180
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 1182
    sp = STACKTOP; //@line 1183
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1186
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1191
 __ZN4mbed10TimerEventD2Ev($31); //@line 1192
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 73; //@line 1195
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 1197
  sp = STACKTOP; //@line 1198
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 1201
 $AsyncCtx46 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1203
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 1204
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 74; //@line 1207
  HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 1209
  sp = STACKTOP; //@line 1210
  return;
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 1213
 $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1215
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 1216
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 75; //@line 1219
  HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 1221
  sp = STACKTOP; //@line 1222
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 1225
 $AsyncCtx38 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1227
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 1228
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 76; //@line 1231
  HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 1233
  sp = STACKTOP; //@line 1234
  return;
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 1237
 $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1239
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 1240
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 77; //@line 1243
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 1245
  sp = STACKTOP; //@line 1246
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1249
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1251
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 1252
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 78; //@line 1255
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 1257
  sp = STACKTOP; //@line 1258
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1261
 $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1263
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 1264
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 79; //@line 1267
  sp = STACKTOP; //@line 1268
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 1271
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $39 = 0, $4 = 0, $42 = 0, $5 = 0, $52 = 0, $55 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $70 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7363
 STACKTOP = STACKTOP + 48 | 0; //@line 7364
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7364
 $3 = sp + 16 | 0; //@line 7365
 $4 = sp; //@line 7366
 $5 = $1 + 12 | 0; //@line 7367
 $6 = HEAP32[$5 >> 2] | 0; //@line 7368
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 7372
   HEAP32[$8 >> 2] = 0; //@line 7373
   $27 = 0; //@line 7374
   $35 = $8; //@line 7374
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 7377
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7378
   FUNCTION_TABLE_vii[$10 & 15]($4, $1); //@line 7379
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 252; //@line 7382
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 7384
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 7386
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 7388
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7390
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 7392
    sp = STACKTOP; //@line 7393
    STACKTOP = sp; //@line 7394
    return 0; //@line 7394
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7396
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 7397
   $16 = $4 + 12 | 0; //@line 7398
   HEAP32[$16 >> 2] = $$pre$i; //@line 7399
   if (!$$pre$i) {
    $27 = 0; //@line 7402
    $35 = $16; //@line 7402
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 7406
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7407
    FUNCTION_TABLE_vii[$19 & 15]($3, $4); //@line 7408
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 253; //@line 7411
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 7413
     HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 7415
     HEAP32[$AsyncCtx2 + 12 >> 2] = $16; //@line 7417
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 7419
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 7421
     HEAP32[$AsyncCtx2 + 24 >> 2] = $16; //@line 7423
     sp = STACKTOP; //@line 7424
     STACKTOP = sp; //@line 7425
     return 0; //@line 7425
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7427
     $27 = HEAP32[$16 >> 2] | 0; //@line 7429
     $35 = $16; //@line 7429
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 7435
 HEAP32[$26 >> 2] = $27; //@line 7436
 $28 = $3 + 16 | 0; //@line 7437
 HEAP32[$28 >> 2] = $2; //@line 7438
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7439
 $29 = _equeue_alloc($0, 20) | 0; //@line 7440
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 254; //@line 7443
  HEAP32[$AsyncCtx18 + 4 >> 2] = $26; //@line 7445
  HEAP32[$AsyncCtx18 + 8 >> 2] = $28; //@line 7447
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 7449
  HEAP32[$AsyncCtx18 + 16 >> 2] = $26; //@line 7451
  HEAP32[$AsyncCtx18 + 20 >> 2] = $35; //@line 7453
  HEAP32[$AsyncCtx18 + 24 >> 2] = $3; //@line 7455
  HEAP32[$AsyncCtx18 + 28 >> 2] = $4; //@line 7457
  sp = STACKTOP; //@line 7458
  STACKTOP = sp; //@line 7459
  return 0; //@line 7459
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 7461
 do {
  if (!$29) {
   $$0$i = 0; //@line 7465
  } else {
   $39 = HEAP32[$26 >> 2] | 0; //@line 7467
   do {
    if (!$39) {
     $52 = 0; //@line 7471
    } else {
     $42 = HEAP32[$39 + 4 >> 2] | 0; //@line 7474
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7475
     FUNCTION_TABLE_vii[$42 & 15]($29, $3); //@line 7476
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 255; //@line 7479
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 7481
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 7483
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 7485
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 7487
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 7489
      HEAP32[$AsyncCtx5 + 24 >> 2] = $35; //@line 7491
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 7493
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 7495
      sp = STACKTOP; //@line 7496
      STACKTOP = sp; //@line 7497
      return 0; //@line 7497
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7499
      $52 = HEAP32[$26 >> 2] | 0; //@line 7501
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $52; //@line 7507
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 7510
   _equeue_event_dtor($29, 256); //@line 7511
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7512
   $55 = _equeue_post($0, 257, $29) | 0; //@line 7513
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 258; //@line 7516
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 7518
    HEAP32[$AsyncCtx15 + 8 >> 2] = $35; //@line 7520
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 7522
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 7524
    sp = STACKTOP; //@line 7525
    STACKTOP = sp; //@line 7526
    return 0; //@line 7526
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7528
    $$0$i = $55; //@line 7529
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$26 >> 2] | 0; //@line 7534
 do {
  if ($60 | 0) {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 7539
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7540
   FUNCTION_TABLE_vi[$63 & 1023]($3); //@line 7541
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 259; //@line 7544
    HEAP32[$AsyncCtx8 + 4 >> 2] = $35; //@line 7546
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 7548
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 7550
    sp = STACKTOP; //@line 7551
    STACKTOP = sp; //@line 7552
    return 0; //@line 7552
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7554
    break;
   }
  }
 } while (0);
 $67 = HEAP32[$35 >> 2] | 0; //@line 7559
 if (!$67) {
  STACKTOP = sp; //@line 7562
  return $$0$i | 0; //@line 7562
 }
 $70 = HEAP32[$67 + 8 >> 2] | 0; //@line 7565
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7566
 FUNCTION_TABLE_vi[$70 & 1023]($4); //@line 7567
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 260; //@line 7570
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 7572
  sp = STACKTOP; //@line 7573
  STACKTOP = sp; //@line 7574
  return 0; //@line 7574
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7576
 STACKTOP = sp; //@line 7577
 return $$0$i | 0; //@line 7577
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_324($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24478
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24480
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24482
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24484
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24486
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24488
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24492
 $15 = $14 + 12 | 0; //@line 24493
 HEAP32[$14 >> 2] = 173; //@line 24494
 HEAP32[$14 + 4 >> 2] = 0; //@line 24496
 HEAP32[$14 + 8 >> 2] = $4; //@line 24498
 HEAP32[$15 >> 2] = 824; //@line 24499
 $16 = $4 + 2448 | 0; //@line 24500
 if (($16 | 0) == ($14 | 0)) {
  $43 = HEAP32[208] | 0; //@line 24504
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 24505
  FUNCTION_TABLE_vi[$43 & 1023]($14); //@line 24506
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 24509
   $44 = $ReallocAsyncCtx9 + 4 | 0; //@line 24510
   HEAP32[$44 >> 2] = $2; //@line 24511
   $45 = $ReallocAsyncCtx9 + 8 | 0; //@line 24512
   HEAP32[$45 >> 2] = $4; //@line 24513
   $46 = $ReallocAsyncCtx9 + 12 | 0; //@line 24514
   HEAP32[$46 >> 2] = $14; //@line 24515
   $47 = $ReallocAsyncCtx9 + 16 | 0; //@line 24516
   HEAP32[$47 >> 2] = $6; //@line 24517
   $48 = $ReallocAsyncCtx9 + 20 | 0; //@line 24518
   HEAP32[$48 >> 2] = $8; //@line 24519
   $49 = $ReallocAsyncCtx9 + 24 | 0; //@line 24520
   HEAP32[$49 >> 2] = $10; //@line 24521
   sp = STACKTOP; //@line 24522
   return;
  }
  ___async_unwind = 0; //@line 24525
  HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 24526
  $44 = $ReallocAsyncCtx9 + 4 | 0; //@line 24527
  HEAP32[$44 >> 2] = $2; //@line 24528
  $45 = $ReallocAsyncCtx9 + 8 | 0; //@line 24529
  HEAP32[$45 >> 2] = $4; //@line 24530
  $46 = $ReallocAsyncCtx9 + 12 | 0; //@line 24531
  HEAP32[$46 >> 2] = $14; //@line 24532
  $47 = $ReallocAsyncCtx9 + 16 | 0; //@line 24533
  HEAP32[$47 >> 2] = $6; //@line 24534
  $48 = $ReallocAsyncCtx9 + 20 | 0; //@line 24535
  HEAP32[$48 >> 2] = $8; //@line 24536
  $49 = $ReallocAsyncCtx9 + 24 | 0; //@line 24537
  HEAP32[$49 >> 2] = $10; //@line 24538
  sp = STACKTOP; //@line 24539
  return;
 }
 $18 = $4 + 2460 | 0; //@line 24542
 $19 = HEAP32[$18 >> 2] | 0; //@line 24543
 if (!$19) {
  $33 = HEAP32[207] | 0; //@line 24547
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 24548
  FUNCTION_TABLE_vii[$33 & 15]($16, $14); //@line 24549
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 24552
   $34 = $ReallocAsyncCtx8 + 4 | 0; //@line 24553
   HEAP32[$34 >> 2] = $2; //@line 24554
   $35 = $ReallocAsyncCtx8 + 8 | 0; //@line 24555
   HEAP32[$35 >> 2] = $4; //@line 24556
   $36 = $ReallocAsyncCtx8 + 12 | 0; //@line 24557
   HEAP32[$36 >> 2] = $14; //@line 24558
   $37 = $ReallocAsyncCtx8 + 16 | 0; //@line 24559
   HEAP32[$37 >> 2] = $6; //@line 24560
   $38 = $ReallocAsyncCtx8 + 20 | 0; //@line 24561
   HEAP32[$38 >> 2] = $8; //@line 24562
   $39 = $ReallocAsyncCtx8 + 24 | 0; //@line 24563
   HEAP32[$39 >> 2] = $10; //@line 24564
   $40 = $ReallocAsyncCtx8 + 28 | 0; //@line 24565
   HEAP32[$40 >> 2] = $15; //@line 24566
   $41 = $ReallocAsyncCtx8 + 32 | 0; //@line 24567
   HEAP32[$41 >> 2] = $18; //@line 24568
   sp = STACKTOP; //@line 24569
   return;
  }
  ___async_unwind = 0; //@line 24572
  HEAP32[$ReallocAsyncCtx8 >> 2] = 175; //@line 24573
  $34 = $ReallocAsyncCtx8 + 4 | 0; //@line 24574
  HEAP32[$34 >> 2] = $2; //@line 24575
  $35 = $ReallocAsyncCtx8 + 8 | 0; //@line 24576
  HEAP32[$35 >> 2] = $4; //@line 24577
  $36 = $ReallocAsyncCtx8 + 12 | 0; //@line 24578
  HEAP32[$36 >> 2] = $14; //@line 24579
  $37 = $ReallocAsyncCtx8 + 16 | 0; //@line 24580
  HEAP32[$37 >> 2] = $6; //@line 24581
  $38 = $ReallocAsyncCtx8 + 20 | 0; //@line 24582
  HEAP32[$38 >> 2] = $8; //@line 24583
  $39 = $ReallocAsyncCtx8 + 24 | 0; //@line 24584
  HEAP32[$39 >> 2] = $10; //@line 24585
  $40 = $ReallocAsyncCtx8 + 28 | 0; //@line 24586
  HEAP32[$40 >> 2] = $15; //@line 24587
  $41 = $ReallocAsyncCtx8 + 32 | 0; //@line 24588
  HEAP32[$41 >> 2] = $18; //@line 24589
  sp = STACKTOP; //@line 24590
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 24594
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 24595
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 24596
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 24599
   $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 24600
   HEAP32[$23 >> 2] = $2; //@line 24601
   $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 24602
   HEAP32[$24 >> 2] = $4; //@line 24603
   $25 = $ReallocAsyncCtx7 + 12 | 0; //@line 24604
   HEAP32[$25 >> 2] = $14; //@line 24605
   $26 = $ReallocAsyncCtx7 + 16 | 0; //@line 24606
   HEAP32[$26 >> 2] = $6; //@line 24607
   $27 = $ReallocAsyncCtx7 + 20 | 0; //@line 24608
   HEAP32[$27 >> 2] = $18; //@line 24609
   $28 = $ReallocAsyncCtx7 + 24 | 0; //@line 24610
   HEAP32[$28 >> 2] = $16; //@line 24611
   $29 = $ReallocAsyncCtx7 + 28 | 0; //@line 24612
   HEAP32[$29 >> 2] = $8; //@line 24613
   $30 = $ReallocAsyncCtx7 + 32 | 0; //@line 24614
   HEAP32[$30 >> 2] = $10; //@line 24615
   $31 = $ReallocAsyncCtx7 + 36 | 0; //@line 24616
   HEAP32[$31 >> 2] = $15; //@line 24617
   sp = STACKTOP; //@line 24618
   return;
  }
  ___async_unwind = 0; //@line 24621
  HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 24622
  $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 24623
  HEAP32[$23 >> 2] = $2; //@line 24624
  $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 24625
  HEAP32[$24 >> 2] = $4; //@line 24626
  $25 = $ReallocAsyncCtx7 + 12 | 0; //@line 24627
  HEAP32[$25 >> 2] = $14; //@line 24628
  $26 = $ReallocAsyncCtx7 + 16 | 0; //@line 24629
  HEAP32[$26 >> 2] = $6; //@line 24630
  $27 = $ReallocAsyncCtx7 + 20 | 0; //@line 24631
  HEAP32[$27 >> 2] = $18; //@line 24632
  $28 = $ReallocAsyncCtx7 + 24 | 0; //@line 24633
  HEAP32[$28 >> 2] = $16; //@line 24634
  $29 = $ReallocAsyncCtx7 + 28 | 0; //@line 24635
  HEAP32[$29 >> 2] = $8; //@line 24636
  $30 = $ReallocAsyncCtx7 + 32 | 0; //@line 24637
  HEAP32[$30 >> 2] = $10; //@line 24638
  $31 = $ReallocAsyncCtx7 + 36 | 0; //@line 24639
  HEAP32[$31 >> 2] = $15; //@line 24640
  sp = STACKTOP; //@line 24641
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_250($0) {
 $0 = $0 | 0;
 var $$pre16 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7518
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7520
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7522
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7524
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7526
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7528
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7530
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7532
 $$pre16 = HEAP32[$14 >> 2] | 0; //@line 7533
 if ($$pre16 | 0) {
  $17 = HEAP32[$$pre16 + 4 >> 2] | 0; //@line 7537
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 7538
  FUNCTION_TABLE_vii[$17 & 15]($2, $4); //@line 7539
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 341; //@line 7542
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 7543
   HEAP32[$18 >> 2] = $6; //@line 7544
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 7545
   HEAP32[$19 >> 2] = $8; //@line 7546
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 7547
   HEAP32[$20 >> 2] = $10; //@line 7548
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 7549
   HEAP32[$21 >> 2] = $12; //@line 7550
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 7551
   HEAP32[$22 >> 2] = $14; //@line 7552
   sp = STACKTOP; //@line 7553
   return;
  }
  ___async_unwind = 0; //@line 7556
  HEAP32[$ReallocAsyncCtx4 >> 2] = 341; //@line 7557
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 7558
  HEAP32[$18 >> 2] = $6; //@line 7559
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 7560
  HEAP32[$19 >> 2] = $8; //@line 7561
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 7562
  HEAP32[$20 >> 2] = $10; //@line 7563
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 7564
  HEAP32[$21 >> 2] = $12; //@line 7565
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 7566
  HEAP32[$22 >> 2] = $14; //@line 7567
  sp = STACKTOP; //@line 7568
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 7571
 $23 = $8 + 32 | 0; //@line 7572
 $24 = $8 + 44 | 0; //@line 7573
 $25 = HEAP32[$24 >> 2] | 0; //@line 7574
 if (!$25) {
  HEAP32[___async_retval >> 2] = 0; //@line 7578
  return;
 }
 $27 = $10 + 2532 | 0; //@line 7581
 if (($27 | 0) == ($23 | 0)) {
  $48 = HEAP32[$25 + 4 >> 2] | 0; //@line 7585
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 7586
  FUNCTION_TABLE_vii[$48 & 15]($12, $23); //@line 7587
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 7590
   $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 7591
   HEAP32[$49 >> 2] = $24; //@line 7592
   $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 7593
   HEAP32[$50 >> 2] = $10; //@line 7594
   $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 7595
   HEAP32[$51 >> 2] = $12; //@line 7596
   sp = STACKTOP; //@line 7597
   return;
  }
  ___async_unwind = 0; //@line 7600
  HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 7601
  $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 7602
  HEAP32[$49 >> 2] = $24; //@line 7603
  $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 7604
  HEAP32[$50 >> 2] = $10; //@line 7605
  $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 7606
  HEAP32[$51 >> 2] = $12; //@line 7607
  sp = STACKTOP; //@line 7608
  return;
 }
 $29 = $10 + 2544 | 0; //@line 7611
 $30 = HEAP32[$29 >> 2] | 0; //@line 7612
 if (!$30) {
  $41 = HEAP32[$25 + 4 >> 2] | 0; //@line 7616
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 7617
  FUNCTION_TABLE_vii[$41 & 15]($27, $23); //@line 7618
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 7621
   $42 = $ReallocAsyncCtx6 + 4 | 0; //@line 7622
   HEAP32[$42 >> 2] = $24; //@line 7623
   $43 = $ReallocAsyncCtx6 + 8 | 0; //@line 7624
   HEAP32[$43 >> 2] = $29; //@line 7625
   $44 = $ReallocAsyncCtx6 + 12 | 0; //@line 7626
   HEAP32[$44 >> 2] = $10; //@line 7627
   $45 = $ReallocAsyncCtx6 + 16 | 0; //@line 7628
   HEAP32[$45 >> 2] = $12; //@line 7629
   $46 = $ReallocAsyncCtx6 + 20 | 0; //@line 7630
   HEAP32[$46 >> 2] = $23; //@line 7631
   sp = STACKTOP; //@line 7632
   return;
  }
  ___async_unwind = 0; //@line 7635
  HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 7636
  $42 = $ReallocAsyncCtx6 + 4 | 0; //@line 7637
  HEAP32[$42 >> 2] = $24; //@line 7638
  $43 = $ReallocAsyncCtx6 + 8 | 0; //@line 7639
  HEAP32[$43 >> 2] = $29; //@line 7640
  $44 = $ReallocAsyncCtx6 + 12 | 0; //@line 7641
  HEAP32[$44 >> 2] = $10; //@line 7642
  $45 = $ReallocAsyncCtx6 + 16 | 0; //@line 7643
  HEAP32[$45 >> 2] = $12; //@line 7644
  $46 = $ReallocAsyncCtx6 + 20 | 0; //@line 7645
  HEAP32[$46 >> 2] = $23; //@line 7646
  sp = STACKTOP; //@line 7647
  return;
 } else {
  $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 7651
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 7652
  FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 7653
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 7656
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 7657
   HEAP32[$34 >> 2] = $24; //@line 7658
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 7659
   HEAP32[$35 >> 2] = $29; //@line 7660
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 7661
   HEAP32[$36 >> 2] = $10; //@line 7662
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 7663
   HEAP32[$37 >> 2] = $27; //@line 7664
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 7665
   HEAP32[$38 >> 2] = $23; //@line 7666
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 7667
   HEAP32[$39 >> 2] = $12; //@line 7668
   sp = STACKTOP; //@line 7669
   return;
  }
  ___async_unwind = 0; //@line 7672
  HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 7673
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 7674
  HEAP32[$34 >> 2] = $24; //@line 7675
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 7676
  HEAP32[$35 >> 2] = $29; //@line 7677
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 7678
  HEAP32[$36 >> 2] = $10; //@line 7679
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 7680
  HEAP32[$37 >> 2] = $27; //@line 7681
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 7682
  HEAP32[$38 >> 2] = $23; //@line 7683
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 7684
  HEAP32[$39 >> 2] = $12; //@line 7685
  sp = STACKTOP; //@line 7686
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_33($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20098
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20100
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20102
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20104
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20106
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20108
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20110
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20112
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20114
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$4 >> 2] | 0; //@line 20117
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 20121
   $30 = $AsyncRetVal + 16 | 0; //@line 20122
   HEAP32[$30 >> 2] = HEAP32[$12 >> 2]; //@line 20123
   HEAP32[$30 + 4 >> 2] = HEAP32[$12 + 4 >> 2]; //@line 20123
   HEAP8[$30 + 8 >> 0] = HEAP8[$12 + 8 >> 0] | 0; //@line 20123
   _equeue_event_dtor($AsyncRetVal, 287); //@line 20124
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 20125
   $31 = _equeue_post($14, 288, $AsyncRetVal) | 0; //@line 20126
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 20129
    $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 20130
    HEAP32[$32 >> 2] = $4; //@line 20131
    $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 20132
    HEAP32[$33 >> 2] = $6; //@line 20133
    $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 20134
    HEAP32[$34 >> 2] = $8; //@line 20135
    $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 20136
    HEAP32[$35 >> 2] = $10; //@line 20137
    sp = STACKTOP; //@line 20138
    return;
   }
   HEAP32[___async_retval >> 2] = $31; //@line 20142
   ___async_unwind = 0; //@line 20143
   HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 20144
   $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 20145
   HEAP32[$32 >> 2] = $4; //@line 20146
   $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 20147
   HEAP32[$33 >> 2] = $6; //@line 20148
   $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 20149
   HEAP32[$34 >> 2] = $8; //@line 20150
   $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 20151
   HEAP32[$35 >> 2] = $10; //@line 20152
   sp = STACKTOP; //@line 20153
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 20157
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 20158
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $8); //@line 20159
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 20162
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 20163
    HEAP32[$21 >> 2] = $2; //@line 20164
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 20165
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 20166
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 20167
    HEAP32[$23 >> 2] = $12; //@line 20168
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 20169
    HEAP32[$24 >> 2] = $14; //@line 20170
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 20171
    HEAP32[$25 >> 2] = $4; //@line 20172
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 20173
    HEAP32[$26 >> 2] = $6; //@line 20174
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 20175
    HEAP32[$27 >> 2] = $8; //@line 20176
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 20177
    HEAP32[$28 >> 2] = $10; //@line 20178
    sp = STACKTOP; //@line 20179
    return;
   }
   ___async_unwind = 0; //@line 20182
   HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 20183
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 20184
   HEAP32[$21 >> 2] = $2; //@line 20185
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 20186
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 20187
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 20188
   HEAP32[$23 >> 2] = $12; //@line 20189
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 20190
   HEAP32[$24 >> 2] = $14; //@line 20191
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 20192
   HEAP32[$25 >> 2] = $4; //@line 20193
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 20194
   HEAP32[$26 >> 2] = $6; //@line 20195
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 20196
   HEAP32[$27 >> 2] = $8; //@line 20197
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 20198
   HEAP32[$28 >> 2] = $10; //@line 20199
   sp = STACKTOP; //@line 20200
   return;
  }
 }
 $37 = HEAP32[$4 >> 2] | 0; //@line 20204
 if ($37 | 0) {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 20208
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 20209
  FUNCTION_TABLE_vi[$40 & 1023]($8); //@line 20210
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 20213
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 20214
   HEAP32[$41 >> 2] = $6; //@line 20215
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 20216
   HEAP32[$42 >> 2] = 0; //@line 20217
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 20218
   HEAP32[$43 >> 2] = $10; //@line 20219
   sp = STACKTOP; //@line 20220
   return;
  }
  ___async_unwind = 0; //@line 20223
  HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 20224
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 20225
  HEAP32[$41 >> 2] = $6; //@line 20226
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 20227
  HEAP32[$42 >> 2] = 0; //@line 20228
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 20229
  HEAP32[$43 >> 2] = $10; //@line 20230
  sp = STACKTOP; //@line 20231
  return;
 }
 $44 = HEAP32[$6 >> 2] | 0; //@line 20234
 if (!$44) {
  HEAP32[___async_retval >> 2] = 0; //@line 20238
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 20242
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20243
 FUNCTION_TABLE_vi[$47 & 1023]($10); //@line 20244
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 20247
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 20248
  HEAP32[$48 >> 2] = 0; //@line 20249
  sp = STACKTOP; //@line 20250
  return;
 }
 ___async_unwind = 0; //@line 20253
 HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 20254
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 20255
 HEAP32[$48 >> 2] = 0; //@line 20256
 sp = STACKTOP; //@line 20257
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_84($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25779
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25781
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25783
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25785
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25787
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25789
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25791
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25793
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25795
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 25798
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 25802
   HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$4 >> 2]; //@line 25805
   _equeue_event_dtor($AsyncRetVal, 256); //@line 25806
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 25807
   $32 = _equeue_post($6, 257, $AsyncRetVal) | 0; //@line 25808
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 25811
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 25812
    HEAP32[$33 >> 2] = $8; //@line 25813
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 25814
    HEAP32[$34 >> 2] = $10; //@line 25815
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 25816
    HEAP32[$35 >> 2] = $12; //@line 25817
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 25818
    HEAP32[$36 >> 2] = $14; //@line 25819
    sp = STACKTOP; //@line 25820
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 25824
   ___async_unwind = 0; //@line 25825
   HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 25826
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 25827
   HEAP32[$33 >> 2] = $8; //@line 25828
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 25829
   HEAP32[$34 >> 2] = $10; //@line 25830
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 25831
   HEAP32[$35 >> 2] = $12; //@line 25832
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 25833
   HEAP32[$36 >> 2] = $14; //@line 25834
   sp = STACKTOP; //@line 25835
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 25839
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 25840
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $12); //@line 25841
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 255; //@line 25844
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 25845
    HEAP32[$21 >> 2] = $2; //@line 25846
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 25847
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 25848
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 25849
    HEAP32[$23 >> 2] = $4; //@line 25850
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 25851
    HEAP32[$24 >> 2] = $6; //@line 25852
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 25853
    HEAP32[$25 >> 2] = $8; //@line 25854
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 25855
    HEAP32[$26 >> 2] = $10; //@line 25856
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 25857
    HEAP32[$27 >> 2] = $12; //@line 25858
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 25859
    HEAP32[$28 >> 2] = $14; //@line 25860
    sp = STACKTOP; //@line 25861
    return;
   }
   ___async_unwind = 0; //@line 25864
   HEAP32[$ReallocAsyncCtx3 >> 2] = 255; //@line 25865
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 25866
   HEAP32[$21 >> 2] = $2; //@line 25867
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 25868
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 25869
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 25870
   HEAP32[$23 >> 2] = $4; //@line 25871
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 25872
   HEAP32[$24 >> 2] = $6; //@line 25873
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 25874
   HEAP32[$25 >> 2] = $8; //@line 25875
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 25876
   HEAP32[$26 >> 2] = $10; //@line 25877
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 25878
   HEAP32[$27 >> 2] = $12; //@line 25879
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 25880
   HEAP32[$28 >> 2] = $14; //@line 25881
   sp = STACKTOP; //@line 25882
   return;
  }
 }
 $38 = HEAP32[$8 >> 2] | 0; //@line 25886
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 25890
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 25891
  FUNCTION_TABLE_vi[$41 & 1023]($12); //@line 25892
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 25895
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 25896
   HEAP32[$42 >> 2] = $10; //@line 25897
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 25898
   HEAP32[$43 >> 2] = 0; //@line 25899
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 25900
   HEAP32[$44 >> 2] = $14; //@line 25901
   sp = STACKTOP; //@line 25902
   return;
  }
  ___async_unwind = 0; //@line 25905
  HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 25906
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 25907
  HEAP32[$42 >> 2] = $10; //@line 25908
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 25909
  HEAP32[$43 >> 2] = 0; //@line 25910
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 25911
  HEAP32[$44 >> 2] = $14; //@line 25912
  sp = STACKTOP; //@line 25913
  return;
 }
 $45 = HEAP32[$10 >> 2] | 0; //@line 25916
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 25920
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 25924
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 25925
 FUNCTION_TABLE_vi[$48 & 1023]($14); //@line 25926
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 25929
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 25930
  HEAP32[$49 >> 2] = 0; //@line 25931
  sp = STACKTOP; //@line 25932
  return;
 }
 ___async_unwind = 0; //@line 25935
 HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 25936
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 25937
 HEAP32[$49 >> 2] = 0; //@line 25938
 sp = STACKTOP; //@line 25939
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_383($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29301
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29303
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29305
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29307
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29309
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29311
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29313
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29315
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29317
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 29320
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 29324
   HEAP8[$AsyncRetVal + 16 >> 0] = HEAP8[$4 >> 0] | 0; //@line 29327
   _equeue_event_dtor($AsyncRetVal, 210); //@line 29328
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29329
   $32 = _equeue_post($6, 211, $AsyncRetVal) | 0; //@line 29330
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 212; //@line 29333
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 29334
    HEAP32[$33 >> 2] = $8; //@line 29335
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 29336
    HEAP32[$34 >> 2] = $10; //@line 29337
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 29338
    HEAP32[$35 >> 2] = $12; //@line 29339
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 29340
    HEAP32[$36 >> 2] = $14; //@line 29341
    sp = STACKTOP; //@line 29342
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 29346
   ___async_unwind = 0; //@line 29347
   HEAP32[$ReallocAsyncCtx6 >> 2] = 212; //@line 29348
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 29349
   HEAP32[$33 >> 2] = $8; //@line 29350
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 29351
   HEAP32[$34 >> 2] = $10; //@line 29352
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 29353
   HEAP32[$35 >> 2] = $12; //@line 29354
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 29355
   HEAP32[$36 >> 2] = $14; //@line 29356
   sp = STACKTOP; //@line 29357
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 29361
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 29362
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $12); //@line 29363
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 209; //@line 29366
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 29367
    HEAP32[$21 >> 2] = $2; //@line 29368
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 29369
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 29370
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 29371
    HEAP32[$23 >> 2] = $4; //@line 29372
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 29373
    HEAP32[$24 >> 2] = $6; //@line 29374
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 29375
    HEAP32[$25 >> 2] = $8; //@line 29376
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 29377
    HEAP32[$26 >> 2] = $10; //@line 29378
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 29379
    HEAP32[$27 >> 2] = $12; //@line 29380
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 29381
    HEAP32[$28 >> 2] = $14; //@line 29382
    sp = STACKTOP; //@line 29383
    return;
   }
   ___async_unwind = 0; //@line 29386
   HEAP32[$ReallocAsyncCtx3 >> 2] = 209; //@line 29387
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 29388
   HEAP32[$21 >> 2] = $2; //@line 29389
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 29390
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 29391
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 29392
   HEAP32[$23 >> 2] = $4; //@line 29393
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 29394
   HEAP32[$24 >> 2] = $6; //@line 29395
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 29396
   HEAP32[$25 >> 2] = $8; //@line 29397
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 29398
   HEAP32[$26 >> 2] = $10; //@line 29399
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 29400
   HEAP32[$27 >> 2] = $12; //@line 29401
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 29402
   HEAP32[$28 >> 2] = $14; //@line 29403
   sp = STACKTOP; //@line 29404
   return;
  }
 }
 $38 = HEAP32[$8 >> 2] | 0; //@line 29408
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 29412
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 29413
  FUNCTION_TABLE_vi[$41 & 1023]($12); //@line 29414
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 213; //@line 29417
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 29418
   HEAP32[$42 >> 2] = $10; //@line 29419
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 29420
   HEAP32[$43 >> 2] = 0; //@line 29421
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 29422
   HEAP32[$44 >> 2] = $14; //@line 29423
   sp = STACKTOP; //@line 29424
   return;
  }
  ___async_unwind = 0; //@line 29427
  HEAP32[$ReallocAsyncCtx4 >> 2] = 213; //@line 29428
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 29429
  HEAP32[$42 >> 2] = $10; //@line 29430
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 29431
  HEAP32[$43 >> 2] = 0; //@line 29432
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 29433
  HEAP32[$44 >> 2] = $14; //@line 29434
  sp = STACKTOP; //@line 29435
  return;
 }
 $45 = HEAP32[$10 >> 2] | 0; //@line 29438
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 29442
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 29446
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29447
 FUNCTION_TABLE_vi[$48 & 1023]($14); //@line 29448
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 214; //@line 29451
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 29452
  HEAP32[$49 >> 2] = 0; //@line 29453
  sp = STACKTOP; //@line 29454
  return;
 }
 ___async_unwind = 0; //@line 29457
 HEAP32[$ReallocAsyncCtx5 >> 2] = 214; //@line 29458
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 29459
 HEAP32[$49 >> 2] = 0; //@line 29460
 sp = STACKTOP; //@line 29461
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_389($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29825
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29827
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29829
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29831
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29833
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29835
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29837
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29839
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29841
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 29844
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 29848
   HEAP16[$AsyncRetVal + 16 >> 1] = HEAP16[$12 >> 1] | 0; //@line 29851
   _equeue_event_dtor($AsyncRetVal, 313); //@line 29852
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29853
   $32 = _equeue_post($14, 314, $AsyncRetVal) | 0; //@line 29854
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 315; //@line 29857
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 29858
    HEAP32[$33 >> 2] = $8; //@line 29859
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 29860
    HEAP32[$34 >> 2] = $4; //@line 29861
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 29862
    HEAP32[$35 >> 2] = $10; //@line 29863
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 29864
    HEAP32[$36 >> 2] = $6; //@line 29865
    sp = STACKTOP; //@line 29866
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 29870
   ___async_unwind = 0; //@line 29871
   HEAP32[$ReallocAsyncCtx6 >> 2] = 315; //@line 29872
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 29873
   HEAP32[$33 >> 2] = $8; //@line 29874
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 29875
   HEAP32[$34 >> 2] = $4; //@line 29876
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 29877
   HEAP32[$35 >> 2] = $10; //@line 29878
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 29879
   HEAP32[$36 >> 2] = $6; //@line 29880
   sp = STACKTOP; //@line 29881
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 29885
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 29886
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $10); //@line 29887
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 312; //@line 29890
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 29891
    HEAP32[$21 >> 2] = $2; //@line 29892
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 29893
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 29894
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 29895
    HEAP32[$23 >> 2] = $12; //@line 29896
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 29897
    HEAP32[$24 >> 2] = $14; //@line 29898
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 29899
    HEAP32[$25 >> 2] = $8; //@line 29900
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 29901
    HEAP32[$26 >> 2] = $4; //@line 29902
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 29903
    HEAP32[$27 >> 2] = $10; //@line 29904
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 29905
    HEAP32[$28 >> 2] = $6; //@line 29906
    sp = STACKTOP; //@line 29907
    return;
   }
   ___async_unwind = 0; //@line 29910
   HEAP32[$ReallocAsyncCtx3 >> 2] = 312; //@line 29911
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 29912
   HEAP32[$21 >> 2] = $2; //@line 29913
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 29914
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 29915
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 29916
   HEAP32[$23 >> 2] = $12; //@line 29917
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 29918
   HEAP32[$24 >> 2] = $14; //@line 29919
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 29920
   HEAP32[$25 >> 2] = $8; //@line 29921
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 29922
   HEAP32[$26 >> 2] = $4; //@line 29923
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 29924
   HEAP32[$27 >> 2] = $10; //@line 29925
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 29926
   HEAP32[$28 >> 2] = $6; //@line 29927
   sp = STACKTOP; //@line 29928
   return;
  }
 }
 $38 = HEAP32[$8 >> 2] | 0; //@line 29932
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 29936
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 29937
  FUNCTION_TABLE_vi[$41 & 1023]($10); //@line 29938
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 316; //@line 29941
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 29942
   HEAP32[$42 >> 2] = $4; //@line 29943
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 29944
   HEAP32[$43 >> 2] = 0; //@line 29945
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 29946
   HEAP32[$44 >> 2] = $6; //@line 29947
   sp = STACKTOP; //@line 29948
   return;
  }
  ___async_unwind = 0; //@line 29951
  HEAP32[$ReallocAsyncCtx4 >> 2] = 316; //@line 29952
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 29953
  HEAP32[$42 >> 2] = $4; //@line 29954
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 29955
  HEAP32[$43 >> 2] = 0; //@line 29956
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 29957
  HEAP32[$44 >> 2] = $6; //@line 29958
  sp = STACKTOP; //@line 29959
  return;
 }
 $45 = HEAP32[$4 >> 2] | 0; //@line 29962
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 29966
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 29970
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29971
 FUNCTION_TABLE_vi[$48 & 1023]($6); //@line 29972
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 317; //@line 29975
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 29976
  HEAP32[$49 >> 2] = 0; //@line 29977
  sp = STACKTOP; //@line 29978
  return;
 }
 ___async_unwind = 0; //@line 29981
 HEAP32[$ReallocAsyncCtx5 >> 2] = 317; //@line 29982
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 29983
 HEAP32[$49 >> 2] = 0; //@line 29984
 sp = STACKTOP; //@line 29985
 return;
}
function __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$046$lcssa$off0 = 0, $$04660 = 0, $$047$lcssa = 0, $$04759 = 0, $$050$lcssa = 0, $$1 = 0, $10 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $12 = 0, $125 = 0, $131 = 0, $137 = 0, $143 = 0, $149 = 0, $155 = 0, $156 = 0, $157 = 0, $166 = 0, $168 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $59 = 0, $65 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $9 = 0, $95 = 0, $AsyncCtx = 0, $indvars$iv = 0, $wide$trip$count = 0, sp = 0;
 sp = STACKTOP; //@line 18233
 $9 = $0 + 64 | 0; //@line 18234
 _mbedtls_aes_init($9); //@line 18235
 $10 = _mbedtls_aes_setkey_enc($9, $3, $4) | 0; //@line 18236
 L1 : do {
  if (!$10) {
   $12 = $0 + 32 | 0; //@line 18240
   HEAP8[$0 + 37 >> 0] = $6; //@line 18242
   HEAP8[$0 + 38 >> 0] = $5; //@line 18245
   HEAP8[$0 + 39 >> 0] = $5 >>> 8; //@line 18249
   HEAP8[$0 + 40 >> 0] = $5 >>> 16; //@line 18253
   HEAP8[$0 + 41 >> 0] = $5 >>> 24; //@line 18257
   HEAP8[$0 + 42 >> 0] = $7; //@line 18260
   HEAP8[$0 + 43 >> 0] = $7 >>> 8; //@line 18264
   HEAP8[$0 + 44 >> 0] = $7 >>> 16; //@line 18268
   HEAP8[$0 + 45 >> 0] = $7 >>> 24; //@line 18272
   if (($2 & 65535) > 15) {
    $38 = $0 + 47 | 0; //@line 18276
    $39 = $0 + 48 | 0; //@line 18277
    $40 = $0 + 49 | 0; //@line 18278
    $41 = $0 + 50 | 0; //@line 18279
    $42 = $0 + 51 | 0; //@line 18280
    $43 = $0 + 52 | 0; //@line 18281
    $44 = $0 + 53 | 0; //@line 18282
    $45 = $0 + 54 | 0; //@line 18283
    $46 = $0 + 55 | 0; //@line 18284
    $47 = $0 + 56 | 0; //@line 18285
    $48 = $0 + 57 | 0; //@line 18286
    $49 = $0 + 58 | 0; //@line 18287
    $50 = $0 + 59 | 0; //@line 18288
    $51 = $0 + 60 | 0; //@line 18289
    $52 = $0 + 61 | 0; //@line 18290
    $53 = $0 + 62 | 0; //@line 18291
    $54 = $0 + 63 | 0; //@line 18292
    $$04660 = 1; //@line 18293
    $$04759 = 0; //@line 18293
    $156 = $2 & 65535; //@line 18293
    while (1) {
     HEAP8[$38 >> 0] = $$04660; //@line 18296
     $$04660 = $$04660 + 1 << 16 >> 16; //@line 18297
     $57 = _mbedtls_aes_crypt_ecb($9, 1, $12, $39) | 0; //@line 18298
     if ($57 | 0) {
      $$1 = $57; //@line 18301
      break L1;
     }
     $59 = $$04759 & 255; //@line 18304
     HEAP8[$8 + $59 >> 0] = HEAP8[$39 >> 0] ^ HEAP8[$1 + $59 >> 0]; //@line 18310
     $65 = $59 + 1 | 0; //@line 18311
     HEAP8[$8 + $65 >> 0] = HEAP8[$40 >> 0] ^ HEAP8[$1 + $65 >> 0]; //@line 18317
     $71 = $59 + 2 | 0; //@line 18318
     HEAP8[$8 + $71 >> 0] = HEAP8[$41 >> 0] ^ HEAP8[$1 + $71 >> 0]; //@line 18324
     $77 = $59 + 3 | 0; //@line 18325
     HEAP8[$8 + $77 >> 0] = HEAP8[$42 >> 0] ^ HEAP8[$1 + $77 >> 0]; //@line 18331
     $83 = $59 + 4 | 0; //@line 18332
     HEAP8[$8 + $83 >> 0] = HEAP8[$43 >> 0] ^ HEAP8[$1 + $83 >> 0]; //@line 18338
     $89 = $59 + 5 | 0; //@line 18339
     HEAP8[$8 + $89 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$1 + $89 >> 0]; //@line 18345
     $95 = $59 + 6 | 0; //@line 18346
     HEAP8[$8 + $95 >> 0] = HEAP8[$45 >> 0] ^ HEAP8[$1 + $95 >> 0]; //@line 18352
     $101 = $59 + 7 | 0; //@line 18353
     HEAP8[$8 + $101 >> 0] = HEAP8[$46 >> 0] ^ HEAP8[$1 + $101 >> 0]; //@line 18359
     $107 = $59 + 8 | 0; //@line 18360
     HEAP8[$8 + $107 >> 0] = HEAP8[$47 >> 0] ^ HEAP8[$1 + $107 >> 0]; //@line 18366
     $113 = $59 + 9 | 0; //@line 18367
     HEAP8[$8 + $113 >> 0] = HEAP8[$48 >> 0] ^ HEAP8[$1 + $113 >> 0]; //@line 18373
     $119 = $59 + 10 | 0; //@line 18374
     HEAP8[$8 + $119 >> 0] = HEAP8[$49 >> 0] ^ HEAP8[$1 + $119 >> 0]; //@line 18380
     $125 = $59 + 11 | 0; //@line 18381
     HEAP8[$8 + $125 >> 0] = HEAP8[$50 >> 0] ^ HEAP8[$1 + $125 >> 0]; //@line 18387
     $131 = $59 + 12 | 0; //@line 18388
     HEAP8[$8 + $131 >> 0] = HEAP8[$51 >> 0] ^ HEAP8[$1 + $131 >> 0]; //@line 18394
     $137 = $59 + 13 | 0; //@line 18395
     HEAP8[$8 + $137 >> 0] = HEAP8[$52 >> 0] ^ HEAP8[$1 + $137 >> 0]; //@line 18401
     $143 = $59 + 14 | 0; //@line 18402
     HEAP8[$8 + $143 >> 0] = HEAP8[$53 >> 0] ^ HEAP8[$1 + $143 >> 0]; //@line 18408
     $149 = $59 + 15 | 0; //@line 18409
     HEAP8[$8 + $149 >> 0] = HEAP8[$54 >> 0] ^ HEAP8[$1 + $149 >> 0]; //@line 18415
     $155 = $156 + 65520 | 0; //@line 18416
     $157 = $155 & 65535; //@line 18417
     if (($157 & 65535) <= 15) {
      break;
     } else {
      $$04759 = $59 + 16 & 255; //@line 18423
      $156 = $155 & 65535; //@line 18423
     }
    }
    $$046$lcssa$off0 = $$04660 & 255; //@line 18431
    $$047$lcssa = $$04759 + 16 & 255; //@line 18431
    $$050$lcssa = $157; //@line 18431
   } else {
    $$046$lcssa$off0 = 1; //@line 18433
    $$047$lcssa = 0; //@line 18433
    $$050$lcssa = $2; //@line 18433
   }
   if (!($$050$lcssa << 16 >> 16)) {
    $$1 = 0; //@line 18437
   } else {
    HEAP8[$0 + 47 >> 0] = $$046$lcssa$off0; //@line 18440
    $166 = _mbedtls_aes_crypt_ecb($9, 1, $12, $0 + 48 | 0) | 0; //@line 18442
    if (!$166) {
     $wide$trip$count = $$050$lcssa & 65535; //@line 18445
     $indvars$iv = 0; //@line 18446
     do {
      $168 = $indvars$iv + $$047$lcssa | 0; //@line 18448
      HEAP8[$8 + $168 >> 0] = HEAP8[$0 + 48 + $indvars$iv >> 0] ^ HEAP8[$1 + $168 >> 0]; //@line 18455
      $indvars$iv = $indvars$iv + 1 | 0; //@line 18456
     } while (($indvars$iv | 0) != ($wide$trip$count | 0));
     $$1 = 0; //@line 18459
    } else {
     $$1 = $166; //@line 18466
    }
   }
  } else {
   $$1 = $10; //@line 18470
  }
 } while (0);
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 18473
 _mbedtls_aes_free($9); //@line 18474
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 487; //@line 18477
  HEAP32[$AsyncCtx + 4 >> 2] = $$1; //@line 18479
  sp = STACKTOP; //@line 18480
  return 0; //@line 18481
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18483
  return $$1 | 0; //@line 18484
 }
 return 0; //@line 18486
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_327($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 25073
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25075
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25077
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25081
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25083
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25085
 $13 = $8 + 12 | 0; //@line 25086
 HEAP32[$8 >> 2] = 177; //@line 25087
 HEAP32[$8 + 4 >> 2] = 0; //@line 25089
 HEAP32[$8 + 8 >> 2] = $4; //@line 25091
 HEAP32[$13 >> 2] = 824; //@line 25092
 $14 = $4 + 2400 | 0; //@line 25093
 if (($14 | 0) == ($8 | 0)) {
  $39 = HEAP32[208] | 0; //@line 25097
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 25098
  FUNCTION_TABLE_vi[$39 & 1023]($8); //@line 25099
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 25102
   $40 = $ReallocAsyncCtx12 + 4 | 0; //@line 25103
   HEAP32[$40 >> 2] = $8; //@line 25104
   $41 = $ReallocAsyncCtx12 + 8 | 0; //@line 25105
   HEAP32[$41 >> 2] = $2; //@line 25106
   $42 = $ReallocAsyncCtx12 + 12 | 0; //@line 25107
   HEAP32[$42 >> 2] = $4; //@line 25108
   $43 = $ReallocAsyncCtx12 + 16 | 0; //@line 25109
   HEAP32[$43 >> 2] = $10; //@line 25110
   $44 = $ReallocAsyncCtx12 + 20 | 0; //@line 25111
   HEAP32[$44 >> 2] = $12; //@line 25112
   sp = STACKTOP; //@line 25113
   return;
  }
  ___async_unwind = 0; //@line 25116
  HEAP32[$ReallocAsyncCtx12 >> 2] = 180; //@line 25117
  $40 = $ReallocAsyncCtx12 + 4 | 0; //@line 25118
  HEAP32[$40 >> 2] = $8; //@line 25119
  $41 = $ReallocAsyncCtx12 + 8 | 0; //@line 25120
  HEAP32[$41 >> 2] = $2; //@line 25121
  $42 = $ReallocAsyncCtx12 + 12 | 0; //@line 25122
  HEAP32[$42 >> 2] = $4; //@line 25123
  $43 = $ReallocAsyncCtx12 + 16 | 0; //@line 25124
  HEAP32[$43 >> 2] = $10; //@line 25125
  $44 = $ReallocAsyncCtx12 + 20 | 0; //@line 25126
  HEAP32[$44 >> 2] = $12; //@line 25127
  sp = STACKTOP; //@line 25128
  return;
 }
 $16 = $4 + 2412 | 0; //@line 25131
 $17 = HEAP32[$16 >> 2] | 0; //@line 25132
 if (!$17) {
  $30 = HEAP32[207] | 0; //@line 25136
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 25137
  FUNCTION_TABLE_vii[$30 & 15]($14, $8); //@line 25138
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 25141
   $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 25142
   HEAP32[$31 >> 2] = $13; //@line 25143
   $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 25144
   HEAP32[$32 >> 2] = $16; //@line 25145
   $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 25146
   HEAP32[$33 >> 2] = $8; //@line 25147
   $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 25148
   HEAP32[$34 >> 2] = $2; //@line 25149
   $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 25150
   HEAP32[$35 >> 2] = $4; //@line 25151
   $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 25152
   HEAP32[$36 >> 2] = $10; //@line 25153
   $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 25154
   HEAP32[$37 >> 2] = $12; //@line 25155
   sp = STACKTOP; //@line 25156
   return;
  }
  ___async_unwind = 0; //@line 25159
  HEAP32[$ReallocAsyncCtx11 >> 2] = 179; //@line 25160
  $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 25161
  HEAP32[$31 >> 2] = $13; //@line 25162
  $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 25163
  HEAP32[$32 >> 2] = $16; //@line 25164
  $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 25165
  HEAP32[$33 >> 2] = $8; //@line 25166
  $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 25167
  HEAP32[$34 >> 2] = $2; //@line 25168
  $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 25169
  HEAP32[$35 >> 2] = $4; //@line 25170
  $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 25171
  HEAP32[$36 >> 2] = $10; //@line 25172
  $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 25173
  HEAP32[$37 >> 2] = $12; //@line 25174
  sp = STACKTOP; //@line 25175
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 25179
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 25180
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 25181
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 178; //@line 25184
   $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 25185
   HEAP32[$21 >> 2] = $13; //@line 25186
   $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 25187
   HEAP32[$22 >> 2] = $16; //@line 25188
   $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 25189
   HEAP32[$23 >> 2] = $8; //@line 25190
   $24 = $ReallocAsyncCtx10 + 16 | 0; //@line 25191
   HEAP32[$24 >> 2] = $2; //@line 25192
   $25 = $ReallocAsyncCtx10 + 20 | 0; //@line 25193
   HEAP32[$25 >> 2] = $4; //@line 25194
   $26 = $ReallocAsyncCtx10 + 24 | 0; //@line 25195
   HEAP32[$26 >> 2] = $14; //@line 25196
   $27 = $ReallocAsyncCtx10 + 28 | 0; //@line 25197
   HEAP32[$27 >> 2] = $10; //@line 25198
   $28 = $ReallocAsyncCtx10 + 32 | 0; //@line 25199
   HEAP32[$28 >> 2] = $12; //@line 25200
   sp = STACKTOP; //@line 25201
   return;
  }
  ___async_unwind = 0; //@line 25204
  HEAP32[$ReallocAsyncCtx10 >> 2] = 178; //@line 25205
  $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 25206
  HEAP32[$21 >> 2] = $13; //@line 25207
  $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 25208
  HEAP32[$22 >> 2] = $16; //@line 25209
  $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 25210
  HEAP32[$23 >> 2] = $8; //@line 25211
  $24 = $ReallocAsyncCtx10 + 16 | 0; //@line 25212
  HEAP32[$24 >> 2] = $2; //@line 25213
  $25 = $ReallocAsyncCtx10 + 20 | 0; //@line 25214
  HEAP32[$25 >> 2] = $4; //@line 25215
  $26 = $ReallocAsyncCtx10 + 24 | 0; //@line 25216
  HEAP32[$26 >> 2] = $14; //@line 25217
  $27 = $ReallocAsyncCtx10 + 28 | 0; //@line 25218
  HEAP32[$27 >> 2] = $10; //@line 25219
  $28 = $ReallocAsyncCtx10 + 32 | 0; //@line 25220
  HEAP32[$28 >> 2] = $12; //@line 25221
  sp = STACKTOP; //@line 25222
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb_100($0) {
 $0 = $0 | 0;
 var $$01720$i45 = 0, $$019$i = 0, $$019$i42 = 0, $$021$i44 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $40 = 0, $53 = 0, $56 = 0, $6 = 0, $64 = 0, $65 = 0, $78 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $ReallocAsyncCtx5 = 0, sp = 0, $64$looptemp = 0;
 sp = STACKTOP; //@line 27082
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27084
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27086
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27088
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27090
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27092
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27094
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27096
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27098
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27100
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27102
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27104
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27106
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27108
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27110
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27112
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 27114
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 27116
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($32 | 0) {
   case 16:
    {
     $$019$i42 = 135; //@line 27124
     break;
    }
   case 8:
    {
     $$019$i42 = 27; //@line 27128
     break;
    }
   default:
    {
     break L2;
    }
   }
   $37 = $32 + -1 | 0; //@line 27135
   $$01720$i45 = 0; //@line 27136
   $$021$i44 = $37; //@line 27136
   while (1) {
    $40 = HEAPU8[$34 + $$021$i44 >> 0] | 0; //@line 27140
    HEAP8[$18 + $$021$i44 >> 0] = $40 << 1 | $$01720$i45; //@line 27145
    if (($$021$i44 | 0) > 0) {
     $$01720$i45 = $40 >>> 7; //@line 27150
     $$021$i44 = $$021$i44 + -1 | 0; //@line 27150
    } else {
     break;
    }
   }
   $53 = $18 + $37 | 0; //@line 27160
   $56 = $$019$i42 & 0 - ((HEAPU8[$30 >> 0] | 0) >>> 7) ^ (HEAPU8[$53 >> 0] | 0); //@line 27163
   HEAP8[$53 >> 0] = $56; //@line 27165
   switch ($32 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 27168
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 27172
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$22 + $37 >> 0] = $56 << 1; //@line 27182
   if (($37 | 0) > 0) {
    $64 = $56; //@line 27186
    $65 = $32 + -2 | 0; //@line 27186
    while (1) {
     $64$looptemp = $64;
     $64 = HEAPU8[$18 + $65 >> 0] | 0; //@line 27191
     HEAP8[$22 + $65 >> 0] = $64 << 1 | $64$looptemp >>> 7; //@line 27196
     if (($65 | 0) <= 0) {
      break;
     } else {
      $65 = $65 + -1 | 0; //@line 27200
     }
    }
   }
   $78 = $22 + $37 | 0; //@line 27211
   HEAP8[$78 >> 0] = $$019$i & 0 - ((HEAPU8[$8 >> 0] | 0) >>> 7) ^ (HEAPU8[$78 >> 0] | 0); //@line 27216
  }
 } while (0);
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 27219
 _mbedtls_platform_zeroize($30, 16); //@line 27220
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 588; //@line 27223
  $83 = $ReallocAsyncCtx5 + 4 | 0; //@line 27224
  HEAP32[$83 >> 2] = $6; //@line 27225
  $84 = $ReallocAsyncCtx5 + 8 | 0; //@line 27226
  HEAP32[$84 >> 2] = $10; //@line 27227
  $85 = $ReallocAsyncCtx5 + 12 | 0; //@line 27228
  HEAP32[$85 >> 2] = $4; //@line 27229
  $86 = $ReallocAsyncCtx5 + 16 | 0; //@line 27230
  HEAP32[$86 >> 2] = $12; //@line 27231
  $87 = $ReallocAsyncCtx5 + 20 | 0; //@line 27232
  HEAP32[$87 >> 2] = $14; //@line 27233
  $88 = $ReallocAsyncCtx5 + 24 | 0; //@line 27234
  HEAP32[$88 >> 2] = $8; //@line 27235
  $89 = $ReallocAsyncCtx5 + 28 | 0; //@line 27236
  HEAP32[$89 >> 2] = $16; //@line 27237
  $90 = $ReallocAsyncCtx5 + 32 | 0; //@line 27238
  HEAP32[$90 >> 2] = $18; //@line 27239
  $91 = $ReallocAsyncCtx5 + 36 | 0; //@line 27240
  HEAP32[$91 >> 2] = $20; //@line 27241
  $92 = $ReallocAsyncCtx5 + 40 | 0; //@line 27242
  HEAP32[$92 >> 2] = $22; //@line 27243
  $93 = $ReallocAsyncCtx5 + 44 | 0; //@line 27244
  HEAP32[$93 >> 2] = $24; //@line 27245
  $94 = $ReallocAsyncCtx5 + 48 | 0; //@line 27246
  HEAP32[$94 >> 2] = $26; //@line 27247
  $95 = $ReallocAsyncCtx5 + 52 | 0; //@line 27248
  HEAP32[$95 >> 2] = $2; //@line 27249
  $96 = $ReallocAsyncCtx5 + 56 | 0; //@line 27250
  HEAP32[$96 >> 2] = $28; //@line 27251
  $97 = $ReallocAsyncCtx5 + 60 | 0; //@line 27252
  HEAP32[$97 >> 2] = $30; //@line 27253
  sp = STACKTOP; //@line 27254
  return;
 }
 ___async_unwind = 0; //@line 27257
 HEAP32[$ReallocAsyncCtx5 >> 2] = 588; //@line 27258
 $83 = $ReallocAsyncCtx5 + 4 | 0; //@line 27259
 HEAP32[$83 >> 2] = $6; //@line 27260
 $84 = $ReallocAsyncCtx5 + 8 | 0; //@line 27261
 HEAP32[$84 >> 2] = $10; //@line 27262
 $85 = $ReallocAsyncCtx5 + 12 | 0; //@line 27263
 HEAP32[$85 >> 2] = $4; //@line 27264
 $86 = $ReallocAsyncCtx5 + 16 | 0; //@line 27265
 HEAP32[$86 >> 2] = $12; //@line 27266
 $87 = $ReallocAsyncCtx5 + 20 | 0; //@line 27267
 HEAP32[$87 >> 2] = $14; //@line 27268
 $88 = $ReallocAsyncCtx5 + 24 | 0; //@line 27269
 HEAP32[$88 >> 2] = $8; //@line 27270
 $89 = $ReallocAsyncCtx5 + 28 | 0; //@line 27271
 HEAP32[$89 >> 2] = $16; //@line 27272
 $90 = $ReallocAsyncCtx5 + 32 | 0; //@line 27273
 HEAP32[$90 >> 2] = $18; //@line 27274
 $91 = $ReallocAsyncCtx5 + 36 | 0; //@line 27275
 HEAP32[$91 >> 2] = $20; //@line 27276
 $92 = $ReallocAsyncCtx5 + 40 | 0; //@line 27277
 HEAP32[$92 >> 2] = $22; //@line 27278
 $93 = $ReallocAsyncCtx5 + 44 | 0; //@line 27279
 HEAP32[$93 >> 2] = $24; //@line 27280
 $94 = $ReallocAsyncCtx5 + 48 | 0; //@line 27281
 HEAP32[$94 >> 2] = $26; //@line 27282
 $95 = $ReallocAsyncCtx5 + 52 | 0; //@line 27283
 HEAP32[$95 >> 2] = $2; //@line 27284
 $96 = $ReallocAsyncCtx5 + 56 | 0; //@line 27285
 HEAP32[$96 >> 2] = $28; //@line 27286
 $97 = $ReallocAsyncCtx5 + 60 | 0; //@line 27287
 HEAP32[$97 >> 2] = $30; //@line 27288
 sp = STACKTOP; //@line 27289
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9579
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9581
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9583
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9585
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9587
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9589
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9591
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9593
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9595
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9597
 $19 = $18 + 12 | 0; //@line 9598
 $20 = HEAP32[$19 >> 2] | 0; //@line 9599
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 9603
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 9604
  FUNCTION_TABLE_vii[$23 & 15]($16, $18); //@line 9605
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 437; //@line 9608
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 9609
   HEAP32[$24 >> 2] = $19; //@line 9610
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 9611
   HEAP32[$25 >> 2] = $14; //@line 9612
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 9613
   HEAP32[$26 >> 2] = $2; //@line 9614
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 9615
   HEAP32[$27 >> 2] = $6; //@line 9616
   $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 9617
   HEAP32[$28 >> 2] = $8; //@line 9618
   $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 9619
   HEAP32[$29 >> 2] = $4; //@line 9620
   $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 9621
   HEAP32[$30 >> 2] = $10; //@line 9622
   $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 9623
   HEAP32[$31 >> 2] = $12; //@line 9624
   sp = STACKTOP; //@line 9625
   return;
  }
  ___async_unwind = 0; //@line 9628
  HEAP32[$ReallocAsyncCtx2 >> 2] = 437; //@line 9629
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 9630
  HEAP32[$24 >> 2] = $19; //@line 9631
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 9632
  HEAP32[$25 >> 2] = $14; //@line 9633
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 9634
  HEAP32[$26 >> 2] = $2; //@line 9635
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 9636
  HEAP32[$27 >> 2] = $6; //@line 9637
  $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 9638
  HEAP32[$28 >> 2] = $8; //@line 9639
  $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 9640
  HEAP32[$29 >> 2] = $4; //@line 9641
  $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 9642
  HEAP32[$30 >> 2] = $10; //@line 9643
  $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 9644
  HEAP32[$31 >> 2] = $12; //@line 9645
  sp = STACKTOP; //@line 9646
  return;
 }
 HEAP32[$14 >> 2] = 0; //@line 9649
 switch (HEAP32[$2 >> 2] | 0) {
 case 0:
  {
   _mbed_tracef(16, 12685, 13285, $6); //@line 9653
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 9655
   __ZN7LoRaPHY18put_radio_to_sleepEv($4 + 4 | 0); //@line 9656
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 438; //@line 9659
    $33 = $ReallocAsyncCtx5 + 4 | 0; //@line 9660
    HEAP32[$33 >> 2] = $2; //@line 9661
    $34 = $ReallocAsyncCtx5 + 8 | 0; //@line 9662
    HEAP32[$34 >> 2] = $10; //@line 9663
    $35 = $ReallocAsyncCtx5 + 12 | 0; //@line 9664
    HEAP32[$35 >> 2] = $12; //@line 9665
    $36 = $ReallocAsyncCtx5 + 16 | 0; //@line 9666
    HEAP32[$36 >> 2] = $4; //@line 9667
    sp = STACKTOP; //@line 9668
    return;
   }
   ___async_unwind = 0; //@line 9671
   HEAP32[$ReallocAsyncCtx5 >> 2] = 438; //@line 9672
   $33 = $ReallocAsyncCtx5 + 4 | 0; //@line 9673
   HEAP32[$33 >> 2] = $2; //@line 9674
   $34 = $ReallocAsyncCtx5 + 8 | 0; //@line 9675
   HEAP32[$34 >> 2] = $10; //@line 9676
   $35 = $ReallocAsyncCtx5 + 12 | 0; //@line 9677
   HEAP32[$35 >> 2] = $12; //@line 9678
   $36 = $ReallocAsyncCtx5 + 16 | 0; //@line 9679
   HEAP32[$36 >> 2] = $4; //@line 9680
   sp = STACKTOP; //@line 9681
   return;
  }
 case 2:
  {
   HEAP8[$4 + 1177 >> 0] = 0; //@line 9687
   $38 = $4 + 4 | 0; //@line 9688
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 9689
   __ZN7LoRaPHY18put_radio_to_sleepEv($38); //@line 9690
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 439; //@line 9693
    $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 9694
    HEAP32[$39 >> 2] = $4; //@line 9695
    $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 9696
    HEAP32[$40 >> 2] = $38; //@line 9697
    $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 9698
    HEAP32[$41 >> 2] = $2; //@line 9699
    $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 9700
    HEAP32[$42 >> 2] = $10; //@line 9701
    $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 9702
    HEAP32[$43 >> 2] = $12; //@line 9703
    sp = STACKTOP; //@line 9704
    return;
   }
   ___async_unwind = 0; //@line 9707
   HEAP32[$ReallocAsyncCtx4 >> 2] = 439; //@line 9708
   $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 9709
   HEAP32[$39 >> 2] = $4; //@line 9710
   $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 9711
   HEAP32[$40 >> 2] = $38; //@line 9712
   $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 9713
   HEAP32[$41 >> 2] = $2; //@line 9714
   $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 9715
   HEAP32[$42 >> 2] = $10; //@line 9716
   $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 9717
   HEAP32[$43 >> 2] = $12; //@line 9718
   sp = STACKTOP; //@line 9719
   return;
  }
 default:
  {
   if ((HEAP32[$2 >> 2] | 0) != 2) {
    return;
   }
   _mbed_tracef(16, 12685, 13321, $10); //@line 9729
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 9730
   __ZN7LoRaMac15open_rx2_windowEv($4); //@line 9731
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 440; //@line 9734
    sp = STACKTOP; //@line 9735
    return;
   }
   ___async_unwind = 0; //@line 9738
   HEAP32[$ReallocAsyncCtx3 >> 2] = 440; //@line 9739
   sp = STACKTOP; //@line 9740
   return;
  }
 }
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $118 = 0, $12 = 0, $128 = 0, $13 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $7 = 0, $73 = 0, $75 = 0, $78 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11329
 STACKTOP = STACKTOP + 16 | 0; //@line 11330
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11330
 $3 = sp; //@line 11331
 HEAP32[$3 >> 2] = 0; //@line 11332
 HEAP8[$0 + 2102 >> 0] = HEAP8[$0 + 1701 >> 0] | 0; //@line 11336
 $7 = $0 + 756 | 0; //@line 11337
 $9 = $2 & 65535; //@line 11339
 $12 = $0 + 1712 | 0; //@line 11342
 $13 = HEAP32[$12 >> 2] | 0; //@line 11343
 $14 = $0 + 1442 | 0; //@line 11344
 $15 = $0 + 1443 | 0; //@line 11345
 $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 11346
 $16 = __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh($7, $1 + 1 | 0, $9 + 65535 & 65535, $13, 128, $15) | 0; //@line 11347
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 367; //@line 11350
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11352
  HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 11354
  HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 11356
  HEAP32[$AsyncCtx + 16 >> 2] = $15; //@line 11358
  HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 11360
  HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 11362
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 11364
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 11366
  HEAP32[$AsyncCtx + 36 >> 2] = $3; //@line 11368
  sp = STACKTOP; //@line 11369
  STACKTOP = sp; //@line 11370
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11372
 if ($16 | 0) {
  HEAP32[$0 + 2092 >> 2] = 13; //@line 11376
  STACKTOP = sp; //@line 11377
  return;
 }
 HEAP8[$14 >> 0] = HEAP8[$1 >> 0] | 0; //@line 11380
 $29 = $9 + -4 | 0; //@line 11381
 $31 = HEAP32[$12 >> 2] | 0; //@line 11383
 $AsyncCtx7 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11384
 $32 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($7, $14, $29 & 65535, $31, 128, $3) | 0; //@line 11385
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 368; //@line 11388
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11390
  HEAP32[$AsyncCtx7 + 8 >> 2] = $29; //@line 11392
  HEAP32[$AsyncCtx7 + 12 >> 2] = $9; //@line 11394
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 11396
  HEAP32[$AsyncCtx7 + 20 >> 2] = $3; //@line 11398
  HEAP32[$AsyncCtx7 + 24 >> 2] = $12; //@line 11400
  HEAP32[$AsyncCtx7 + 28 >> 2] = $7; //@line 11402
  HEAP32[$AsyncCtx7 + 32 >> 2] = $15; //@line 11404
  sp = STACKTOP; //@line 11405
  STACKTOP = sp; //@line 11406
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11408
 if ($32 | 0) {
  HEAP32[$0 + 2092 >> 2] = 13; //@line 11412
  STACKTOP = sp; //@line 11413
  return;
 }
 if (((HEAPU8[$9 + -3 + ($0 + 1442) >> 0] | 0) << 8 | (HEAPU8[$0 + 1442 + $29 >> 0] | 0) | (HEAPU8[$9 + -2 + ($0 + 1442) >> 0] | 0) << 16 | (HEAPU8[$9 + -1 + ($0 + 1442) >> 0] | 0) << 24 | 0) != (HEAP32[$3 >> 2] | 0)) {
  HEAP32[$0 + 2092 >> 2] = 7; //@line 11440
  STACKTOP = sp; //@line 11441
  return;
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(28, sp) | 0; //@line 11444
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 11445
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 369; //@line 11448
  HEAP32[$AsyncCtx15 + 4 >> 2] = $12; //@line 11450
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 11452
  HEAP32[$AsyncCtx15 + 12 >> 2] = $7; //@line 11454
  HEAP32[$AsyncCtx15 + 16 >> 2] = $15; //@line 11456
  HEAP32[$AsyncCtx15 + 20 >> 2] = $9; //@line 11458
  HEAP32[$AsyncCtx15 + 24 >> 2] = $3; //@line 11460
  sp = STACKTOP; //@line 11461
  STACKTOP = sp; //@line 11462
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 11464
 $73 = HEAP32[$12 >> 2] | 0; //@line 11465
 $75 = HEAP16[$0 + 1748 >> 1] | 0; //@line 11467
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11470
 $78 = __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($7, $73, 128, $15, $75, $0 + 1716 | 0, $0 + 1732 | 0) | 0; //@line 11471
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 370; //@line 11474
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11476
  HEAP32[$AsyncCtx3 + 8 >> 2] = $9; //@line 11478
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 11480
  sp = STACKTOP; //@line 11481
  STACKTOP = sp; //@line 11482
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11484
 if ($78 | 0) {
  HEAP32[$0 + 2092 >> 2] = 13; //@line 11488
  STACKTOP = sp; //@line 11489
  return;
 }
 HEAP32[$0 + 1752 >> 2] = (HEAPU8[$0 + 1448 >> 0] | 0) << 16 | ((HEAPU8[$0 + 1447 >> 0] | 0) << 8 | (HEAPU8[$0 + 1446 >> 0] | 0)); //@line 11505
 HEAP32[$0 + 1756 >> 2] = (HEAPU8[$0 + 1452 >> 0] | 0) << 24 | ((HEAPU8[$0 + 1451 >> 0] | 0) << 16 | ((HEAPU8[$0 + 1450 >> 0] | 0) << 8 | (HEAPU8[$0 + 1449 >> 0] | 0))); //@line 11525
 $118 = HEAP8[$0 + 1453 >> 0] | 0; //@line 11527
 HEAP8[$0 + 1909 >> 0] = ($118 & 255) >>> 4 & 7; //@line 11533
 HEAP8[$0 + 1916 >> 0] = $118 & 15; //@line 11536
 $128 = HEAP8[$0 + 1454 >> 0] & 15; //@line 11539
 $132 = $128 << 24 >> 24 == 0 ? 1e3 : ($128 & 255) * 1e3 | 0; //@line 11544
 HEAP32[$0 + 1892 >> 2] = $132; //@line 11545
 HEAP32[$0 + 1896 >> 2] = $132 + 1e3; //@line 11548
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11553
 __ZN7LoRaPHY13apply_cf_listEPKhh($0 + 4 | 0, $0 + 1455 | 0, $9 + 239 & 255); //@line 11554
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 371; //@line 11557
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 11559
  HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 11561
  sp = STACKTOP; //@line 11562
  STACKTOP = sp; //@line 11563
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11565
 HEAP32[$0 + 2092 >> 2] = 0; //@line 11567
 HEAP8[$0 + 2376 >> 0] = 1; //@line 11569
 HEAP32[$0 + 1760 >> 2] = 0; //@line 11571
 HEAP8[$0 + 1184 >> 0] = 0; //@line 11573
 STACKTOP = sp; //@line 11574
 return;
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29871
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29873
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29875
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29877
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29879
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29881
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29883
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29885
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29887
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29889
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29891
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29893
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29895
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29897
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29899
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29901
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 29903
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29905
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 29908
  $84 = ___async_retval; //@line 29909
  HEAP32[$84 >> 2] = $$0; //@line 29910
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 29915
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 29919
   $68 = $14 + $$163 | 0; //@line 29920
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 29925
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 29930
   HEAP8[$16 + $$163 >> 0] = $75; //@line 29932
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 29938
   }
   $$163 = $$163 + 1 | 0; //@line 29940
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 29949
 $35 = $12 - $2 | 0; //@line 29950
 $51 = $14 + $2 | 0; //@line 29951
 $53 = $16 + $2 | 0; //@line 29952
 if (!$35) {
  $$0 = 0; //@line 29955
  $84 = ___async_retval; //@line 29956
  HEAP32[$84 >> 2] = $$0; //@line 29957
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 29961
 $$061 = 16; //@line 29962
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 29968
  $39 = $8 + 360 + $$061 | 0; //@line 29969
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 29971
  HEAP8[$39 >> 0] = $41; //@line 29972
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 29980
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 29981
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 29984
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 29985
  HEAP32[$44 >> 2] = $36; //@line 29986
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 29987
  HEAP32[$45 >> 2] = $4; //@line 29988
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 29989
  HEAP32[$46 >> 2] = $6; //@line 29990
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 29991
  HEAP32[$47 >> 2] = $8; //@line 29992
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 29993
  HEAP32[$48 >> 2] = $10; //@line 29994
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 29995
  HEAP32[$49 >> 2] = $35; //@line 29996
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 29997
  HEAP32[$50 >> 2] = $51; //@line 29998
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 29999
  HEAP32[$52 >> 2] = $53; //@line 30000
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 30001
  HEAP32[$54 >> 2] = $18; //@line 30002
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 30003
  HEAP32[$55 >> 2] = $20; //@line 30004
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 30005
  HEAP32[$56 >> 2] = $22; //@line 30006
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 30007
  HEAP32[$57 >> 2] = $24; //@line 30008
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 30009
  HEAP32[$58 >> 2] = $26; //@line 30010
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 30011
  HEAP32[$59 >> 2] = $28; //@line 30012
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 30013
  HEAP32[$60 >> 2] = $30; //@line 30014
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 30015
  HEAP32[$61 >> 2] = $32; //@line 30016
  sp = STACKTOP; //@line 30017
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 30021
 ___async_unwind = 0; //@line 30022
 HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 30023
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 30024
 HEAP32[$44 >> 2] = $36; //@line 30025
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 30026
 HEAP32[$45 >> 2] = $4; //@line 30027
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 30028
 HEAP32[$46 >> 2] = $6; //@line 30029
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 30030
 HEAP32[$47 >> 2] = $8; //@line 30031
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 30032
 HEAP32[$48 >> 2] = $10; //@line 30033
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 30034
 HEAP32[$49 >> 2] = $35; //@line 30035
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 30036
 HEAP32[$50 >> 2] = $51; //@line 30037
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 30038
 HEAP32[$52 >> 2] = $53; //@line 30039
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 30040
 HEAP32[$54 >> 2] = $18; //@line 30041
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 30042
 HEAP32[$55 >> 2] = $20; //@line 30043
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 30044
 HEAP32[$56 >> 2] = $22; //@line 30045
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 30046
 HEAP32[$57 >> 2] = $24; //@line 30047
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 30048
 HEAP32[$58 >> 2] = $26; //@line 30049
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 30050
 HEAP32[$59 >> 2] = $28; //@line 30051
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 30052
 HEAP32[$60 >> 2] = $30; //@line 30053
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 30054
 HEAP32[$61 >> 2] = $32; //@line 30055
 sp = STACKTOP; //@line 30056
 return;
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1244
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1330
 $$0136 = $4 + 16 | 0; //@line 1330
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1330
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1330
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1330
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1330
 while (1) {
  $110 = HEAP32[5396 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6420 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0139 >>> 24 << 2) >> 2]; //@line 1352
  $130 = HEAP32[5396 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6420 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0137 >>> 24 << 2) >> 2]; //@line 1372
  $150 = HEAP32[5396 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6420 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0138 >>> 24 << 2) >> 2]; //@line 1392
  $170 = HEAP32[5396 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6420 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0140 >>> 24 << 2) >> 2]; //@line 1412
  $171 = $$0136 + 20 | 0; //@line 1413
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1414
  $173 = $110 & 255; //@line 1415
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5396 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6420 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($130 >>> 24 << 2) >> 2]; //@line 1476
  $250 = HEAP32[5396 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6420 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($150 >>> 24 << 2) >> 2]; //@line 1496
  $$0$in = $$0$in + -1 | 0; //@line 1497
  $$0136 = $$0136 + 32 | 0; //@line 1497
  $$0137 = HEAP32[5396 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6420 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($170 >>> 24 << 2) >> 2]; //@line 1497
  $$0138 = HEAP32[5396 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6420 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($110 >>> 24 << 2) >> 2]; //@line 1497
  $$0139 = $250; //@line 1497
  $$0140 = $230; //@line 1497
 }
 $261 = (HEAPU8[13575 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1509
 $268 = (HEAPU8[13575 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1516
 $274 = (HEAPU8[13575 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1522
 $276 = HEAP32[$171 >> 2] | 0; //@line 1524
 $281 = $276 ^ (HEAPU8[13575 + ($130 & 255) >> 0] | 0); //@line 1529
 $288 = (HEAPU8[13575 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1536
 $295 = (HEAPU8[13575 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1543
 $301 = (HEAPU8[13575 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1549
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1551
 $308 = $303 ^ (HEAPU8[13575 + ($150 & 255) >> 0] | 0); //@line 1556
 $315 = (HEAPU8[13575 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1563
 $322 = (HEAPU8[13575 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1570
 $328 = (HEAPU8[13575 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1576
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1577
 $334 = $329 ^ (HEAPU8[13575 + ($170 & 255) >> 0] | 0); //@line 1582
 $341 = (HEAPU8[13575 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1589
 $348 = (HEAPU8[13575 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1596
 $354 = (HEAPU8[13575 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1602
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[13575 + $173 >> 0] | 0); //@line 1604
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1608
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1612
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1616
 HEAP8[$2 + 4 >> 0] = $281; //@line 1619
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1623
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1627
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1631
 HEAP8[$2 + 8 >> 0] = $308; //@line 1634
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1638
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1642
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1646
 HEAP8[$2 + 12 >> 0] = $334; //@line 1649
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1653
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1657
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1661
 return 0; //@line 1662
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1691
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1777
 $$0136 = $4 + 16 | 0; //@line 1777
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1777
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1777
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1777
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1777
 while (1) {
  $110 = HEAP32[1300 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2324 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0138 >>> 24 << 2) >> 2]; //@line 1799
  $130 = HEAP32[1300 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2324 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0140 >>> 24 << 2) >> 2]; //@line 1819
  $150 = HEAP32[1300 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2324 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0139 >>> 24 << 2) >> 2]; //@line 1839
  $170 = HEAP32[1300 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2324 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0137 >>> 24 << 2) >> 2]; //@line 1859
  $171 = $$0136 + 20 | 0; //@line 1860
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1861
  $173 = $110 & 255; //@line 1862
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1300 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2324 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($170 >>> 24 << 2) >> 2]; //@line 1923
  $250 = HEAP32[1300 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2324 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($110 >>> 24 << 2) >> 2]; //@line 1943
  $$0$in = $$0$in + -1 | 0; //@line 1944
  $$0136 = $$0136 + 32 | 0; //@line 1944
  $$0137 = HEAP32[1300 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2324 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($130 >>> 24 << 2) >> 2]; //@line 1944
  $$0138 = HEAP32[1300 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2324 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($150 >>> 24 << 2) >> 2]; //@line 1944
  $$0139 = $250; //@line 1944
  $$0140 = $230; //@line 1944
 }
 $261 = (HEAPU8[13831 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1956
 $268 = (HEAPU8[13831 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1963
 $274 = (HEAPU8[13831 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1969
 $276 = HEAP32[$171 >> 2] | 0; //@line 1971
 $281 = $276 ^ (HEAPU8[13831 + ($130 & 255) >> 0] | 0); //@line 1976
 $288 = (HEAPU8[13831 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1983
 $295 = (HEAPU8[13831 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1990
 $301 = (HEAPU8[13831 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1996
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1998
 $308 = $303 ^ (HEAPU8[13831 + ($150 & 255) >> 0] | 0); //@line 2003
 $315 = (HEAPU8[13831 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 2010
 $322 = (HEAPU8[13831 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 2017
 $328 = (HEAPU8[13831 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 2023
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 2024
 $334 = $329 ^ (HEAPU8[13831 + ($170 & 255) >> 0] | 0); //@line 2029
 $341 = (HEAPU8[13831 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 2036
 $348 = (HEAPU8[13831 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 2043
 $354 = (HEAPU8[13831 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 2049
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[13831 + $173 >> 0] | 0); //@line 2051
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 2055
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 2059
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 2063
 HEAP8[$2 + 4 >> 0] = $281; //@line 2066
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 2070
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 2074
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 2078
 HEAP8[$2 + 8 >> 0] = $308; //@line 2081
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 2085
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 2089
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 2093
 HEAP8[$2 + 12 >> 0] = $334; //@line 2096
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 2100
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 2104
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 2108
 return 0; //@line 2109
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $21 = 0, $22 = 0, $25 = 0, $3 = 0, $34 = 0, $35 = 0, $4 = 0, $42 = 0, $5 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 14977
 STACKTOP = STACKTOP + 16 | 0; //@line 14978
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14978
 $vararg_buffer1 = sp + 8 | 0; //@line 14979
 $vararg_buffer = sp; //@line 14980
 $3 = HEAP32[$1 >> 2] | 0; //@line 14981
 $4 = $0 + 2380 | 0; //@line 14982
 HEAP32[$4 >> 2] = $3; //@line 14983
 $5 = $0 + 1996 | 0; //@line 14984
 if (($5 | 0) == ($2 | 0)) {
  $35 = $3; //@line 14987
 } else {
  $7 = $0 + 2008 | 0; //@line 14989
  $8 = HEAP32[$7 >> 2] | 0; //@line 14990
  do {
   if ($8 | 0) {
    $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 14995
    $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 14996
    FUNCTION_TABLE_vi[$11 & 1023]($5); //@line 14997
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 436; //@line 15000
     HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 15002
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15004
     HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 15006
     HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 15008
     HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 15010
     HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 15012
     HEAP32[$AsyncCtx + 28 >> 2] = $7; //@line 15014
     HEAP32[$AsyncCtx + 32 >> 2] = $5; //@line 15016
     HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 15018
     sp = STACKTOP; //@line 15019
     STACKTOP = sp; //@line 15020
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15022
     break;
    }
   }
  } while (0);
  $21 = $2 + 12 | 0; //@line 15027
  $22 = HEAP32[$21 >> 2] | 0; //@line 15028
  do {
   if (!$22) {
    $34 = 0; //@line 15032
   } else {
    $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 15035
    $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15036
    FUNCTION_TABLE_vii[$25 & 15]($5, $2); //@line 15037
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 437; //@line 15040
     HEAP32[$AsyncCtx5 + 4 >> 2] = $21; //@line 15042
     HEAP32[$AsyncCtx5 + 8 >> 2] = $7; //@line 15044
     HEAP32[$AsyncCtx5 + 12 >> 2] = $4; //@line 15046
     HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 15048
     HEAP32[$AsyncCtx5 + 20 >> 2] = $vararg_buffer; //@line 15050
     HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 15052
     HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer1; //@line 15054
     HEAP32[$AsyncCtx5 + 32 >> 2] = $vararg_buffer1; //@line 15056
     sp = STACKTOP; //@line 15057
     STACKTOP = sp; //@line 15058
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx5 | 0); //@line 15060
     $34 = HEAP32[$21 >> 2] | 0; //@line 15062
     break;
    }
   }
  } while (0);
  HEAP32[$7 >> 2] = $34; //@line 15067
  $35 = HEAP32[$4 >> 2] | 0; //@line 15069
 }
 L16 : do {
  switch ($35 | 0) {
  case 0:
   {
    _mbed_tracef(16, 12685, 13285, $vararg_buffer); //@line 15074
    $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15076
    __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 15077
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 438; //@line 15080
     HEAP32[$AsyncCtx17 + 4 >> 2] = $4; //@line 15082
     HEAP32[$AsyncCtx17 + 8 >> 2] = $vararg_buffer1; //@line 15084
     HEAP32[$AsyncCtx17 + 12 >> 2] = $vararg_buffer1; //@line 15086
     HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 15088
     sp = STACKTOP; //@line 15089
     STACKTOP = sp; //@line 15090
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15092
     break L16;
    }
    break;
   }
  case 2:
   {
    HEAP8[$0 + 1177 >> 0] = 0; //@line 15099
    $42 = $0 + 4 | 0; //@line 15100
    $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15101
    __ZN7LoRaPHY18put_radio_to_sleepEv($42); //@line 15102
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 439; //@line 15105
     HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 15107
     HEAP32[$AsyncCtx13 + 8 >> 2] = $42; //@line 15109
     HEAP32[$AsyncCtx13 + 12 >> 2] = $4; //@line 15111
     HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 15113
     HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer1; //@line 15115
     sp = STACKTOP; //@line 15116
     STACKTOP = sp; //@line 15117
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 15119
     __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($42, HEAP8[$0 + 1916 >> 0] | 0, HEAP8[$0 + 1884 >> 0] | 0, HEAP32[$0 + 1880 >> 2] | 0, $0 + 1964 | 0); //@line 15127
     break L16;
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 if ((HEAP32[$4 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 15139
  return;
 }
 _mbed_tracef(16, 12685, 13321, $vararg_buffer1); //@line 15141
 $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15142
 __ZN7LoRaMac15open_rx2_windowEv($0); //@line 15143
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 440; //@line 15146
  sp = STACKTOP; //@line 15147
  STACKTOP = sp; //@line 15148
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 15150
 STACKTOP = sp; //@line 15151
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_330($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 25618
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25622
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25624
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25626
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25628
 $11 = $4 + 12 | 0; //@line 25629
 HEAP32[$4 >> 2] = 181; //@line 25630
 HEAP32[$4 + 4 >> 2] = 0; //@line 25632
 HEAP32[$4 + 8 >> 2] = $6; //@line 25634
 HEAP32[$11 >> 2] = 824; //@line 25635
 $12 = $6 + 2432 | 0; //@line 25636
 if (($12 | 0) == ($4 | 0)) {
  $35 = HEAP32[208] | 0; //@line 25640
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 25641
  FUNCTION_TABLE_vi[$35 & 1023]($4); //@line 25642
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 25645
   $36 = $ReallocAsyncCtx15 + 4 | 0; //@line 25646
   HEAP32[$36 >> 2] = $4; //@line 25647
   $37 = $ReallocAsyncCtx15 + 8 | 0; //@line 25648
   HEAP32[$37 >> 2] = $6; //@line 25649
   $38 = $ReallocAsyncCtx15 + 12 | 0; //@line 25650
   HEAP32[$38 >> 2] = $8; //@line 25651
   $39 = $ReallocAsyncCtx15 + 16 | 0; //@line 25652
   HEAP32[$39 >> 2] = $10; //@line 25653
   sp = STACKTOP; //@line 25654
   return;
  }
  ___async_unwind = 0; //@line 25657
  HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 25658
  $36 = $ReallocAsyncCtx15 + 4 | 0; //@line 25659
  HEAP32[$36 >> 2] = $4; //@line 25660
  $37 = $ReallocAsyncCtx15 + 8 | 0; //@line 25661
  HEAP32[$37 >> 2] = $6; //@line 25662
  $38 = $ReallocAsyncCtx15 + 12 | 0; //@line 25663
  HEAP32[$38 >> 2] = $8; //@line 25664
  $39 = $ReallocAsyncCtx15 + 16 | 0; //@line 25665
  HEAP32[$39 >> 2] = $10; //@line 25666
  sp = STACKTOP; //@line 25667
  return;
 }
 $14 = $6 + 2444 | 0; //@line 25670
 $15 = HEAP32[$14 >> 2] | 0; //@line 25671
 if (!$15) {
  $27 = HEAP32[207] | 0; //@line 25675
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 25676
  FUNCTION_TABLE_vii[$27 & 15]($12, $4); //@line 25677
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 25680
   $28 = $ReallocAsyncCtx14 + 4 | 0; //@line 25681
   HEAP32[$28 >> 2] = $11; //@line 25682
   $29 = $ReallocAsyncCtx14 + 8 | 0; //@line 25683
   HEAP32[$29 >> 2] = $14; //@line 25684
   $30 = $ReallocAsyncCtx14 + 12 | 0; //@line 25685
   HEAP32[$30 >> 2] = $4; //@line 25686
   $31 = $ReallocAsyncCtx14 + 16 | 0; //@line 25687
   HEAP32[$31 >> 2] = $6; //@line 25688
   $32 = $ReallocAsyncCtx14 + 20 | 0; //@line 25689
   HEAP32[$32 >> 2] = $8; //@line 25690
   $33 = $ReallocAsyncCtx14 + 24 | 0; //@line 25691
   HEAP32[$33 >> 2] = $10; //@line 25692
   sp = STACKTOP; //@line 25693
   return;
  }
  ___async_unwind = 0; //@line 25696
  HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 25697
  $28 = $ReallocAsyncCtx14 + 4 | 0; //@line 25698
  HEAP32[$28 >> 2] = $11; //@line 25699
  $29 = $ReallocAsyncCtx14 + 8 | 0; //@line 25700
  HEAP32[$29 >> 2] = $14; //@line 25701
  $30 = $ReallocAsyncCtx14 + 12 | 0; //@line 25702
  HEAP32[$30 >> 2] = $4; //@line 25703
  $31 = $ReallocAsyncCtx14 + 16 | 0; //@line 25704
  HEAP32[$31 >> 2] = $6; //@line 25705
  $32 = $ReallocAsyncCtx14 + 20 | 0; //@line 25706
  HEAP32[$32 >> 2] = $8; //@line 25707
  $33 = $ReallocAsyncCtx14 + 24 | 0; //@line 25708
  HEAP32[$33 >> 2] = $10; //@line 25709
  sp = STACKTOP; //@line 25710
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 25714
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 25715
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 25716
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 182; //@line 25719
   $19 = $ReallocAsyncCtx13 + 4 | 0; //@line 25720
   HEAP32[$19 >> 2] = $11; //@line 25721
   $20 = $ReallocAsyncCtx13 + 8 | 0; //@line 25722
   HEAP32[$20 >> 2] = $14; //@line 25723
   $21 = $ReallocAsyncCtx13 + 12 | 0; //@line 25724
   HEAP32[$21 >> 2] = $12; //@line 25725
   $22 = $ReallocAsyncCtx13 + 16 | 0; //@line 25726
   HEAP32[$22 >> 2] = $4; //@line 25727
   $23 = $ReallocAsyncCtx13 + 20 | 0; //@line 25728
   HEAP32[$23 >> 2] = $6; //@line 25729
   $24 = $ReallocAsyncCtx13 + 24 | 0; //@line 25730
   HEAP32[$24 >> 2] = $8; //@line 25731
   $25 = $ReallocAsyncCtx13 + 28 | 0; //@line 25732
   HEAP32[$25 >> 2] = $10; //@line 25733
   sp = STACKTOP; //@line 25734
   return;
  }
  ___async_unwind = 0; //@line 25737
  HEAP32[$ReallocAsyncCtx13 >> 2] = 182; //@line 25738
  $19 = $ReallocAsyncCtx13 + 4 | 0; //@line 25739
  HEAP32[$19 >> 2] = $11; //@line 25740
  $20 = $ReallocAsyncCtx13 + 8 | 0; //@line 25741
  HEAP32[$20 >> 2] = $14; //@line 25742
  $21 = $ReallocAsyncCtx13 + 12 | 0; //@line 25743
  HEAP32[$21 >> 2] = $12; //@line 25744
  $22 = $ReallocAsyncCtx13 + 16 | 0; //@line 25745
  HEAP32[$22 >> 2] = $4; //@line 25746
  $23 = $ReallocAsyncCtx13 + 20 | 0; //@line 25747
  HEAP32[$23 >> 2] = $6; //@line 25748
  $24 = $ReallocAsyncCtx13 + 24 | 0; //@line 25749
  HEAP32[$24 >> 2] = $8; //@line 25750
  $25 = $ReallocAsyncCtx13 + 28 | 0; //@line 25751
  HEAP32[$25 >> 2] = $10; //@line 25752
  sp = STACKTOP; //@line 25753
  return;
 }
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $73 = 0, $76 = 0, $8 = 0, $89 = 0, $9 = 0, $90 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 20552
 STACKTOP = STACKTOP + 16 | 0; //@line 20553
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20553
 $5 = sp; //@line 20554
 dest = $5; //@line 20555
 stop = dest + 16 | 0; //@line 20555
 do {
  HEAP8[dest >> 0] = 255; //@line 20555
  dest = dest + 1 | 0; //@line 20555
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 20557
 $8 = $0 + 116 | 0; //@line 20558
 $9 = HEAP32[$8 >> 2] | 0; //@line 20559
 $10 = $0 + 113 | 0; //@line 20560
 $11 = HEAP8[$10 >> 0] | 0; //@line 20561
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 120 >> 2] | 0; //@line 20566
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 20573
   $indvars$iv$i = 0; //@line 20574
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 20579
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 20580
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 20590
 $23 = $0 + 8 | 0; //@line 20591
 $25 = $1 + 4 | 0; //@line 20593
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $76 = HEAP32[$1 >> 2] | 0; //@line 20598
  $$0 = -1020; //@line 20603
  $$sink = $76 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 20603
  HEAP32[$3 >> 2] = $$sink; //@line 20604
  STACKTOP = sp; //@line 20605
  return $$0 | 0; //@line 20605
 }
 HEAP32[$4 >> 2] = 0; //@line 20607
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 20616
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 20618
 $40 = HEAP32[$8 >> 2] | 0; //@line 20619
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 20621
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 124 | 0; //@line 20625
   $45 = $0 + 72 | 0; //@line 20626
   $$01722$i = 0; //@line 20627
   $$01821$i = 0; //@line 20627
   $$023$i = 0; //@line 20627
   $47 = 0; //@line 20627
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 20639
      $$220$i = $$01821$i; //@line 20639
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 20641
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 20643
      if (($57 & 15) <= $39 << 24 >> 24 ? ($57 & 255) >>> 4 << 24 >> 24 >= $39 << 24 >> 24 : 0) {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 20661
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 20662
        $$220$i = $$01821$i; //@line 20662
        break;
       } else {
        $$2$i = $$023$i; //@line 20666
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 20666
        break;
       }
      } else {
       $$2$i = $$023$i; //@line 20670
       $$220$i = $$01821$i; //@line 20670
      }
     }
    } while (0);
    $73 = $$01722$i + 1 << 24 >> 24; //@line 20674
    if (($73 & 255) < ($42 & 255)) {
     $$01722$i = $73; //@line 20678
     $$01821$i = $$220$i; //@line 20678
     $$023$i = $$2$i; //@line 20678
     $47 = $73 & 255; //@line 20678
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = -1020; //@line 20689
     $$sink = $37; //@line 20689
    }
    HEAP32[$3 >> 2] = $$sink; //@line 20691
    STACKTOP = sp; //@line 20692
    return $$0 | 0; //@line 20692
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 20699
    $$0 = 0; //@line 20700
    $$sink = 0; //@line 20700
    HEAP32[$3 >> 2] = $$sink; //@line 20701
    STACKTOP = sp; //@line 20702
    return $$0 | 0; //@line 20702
   }
  }
 } while (0);
 $89 = HEAP32[$0 + 120 >> 2] | 0; //@line 20707
 $90 = HEAP8[$10 >> 0] | 0; //@line 20708
 if (!(($40 | 0) != 0 & ($89 | 0) != 0 & $90 << 24 >> 24 != 0)) {
  $$0 = -1021; //@line 20715
  $$sink = 0; //@line 20715
  HEAP32[$3 >> 2] = $$sink; //@line 20716
  STACKTOP = sp; //@line 20717
  return $$0 | 0; //@line 20717
 }
 $wide$trip$count$i25 = $90 & 255; //@line 20719
 $indvars$iv$i27 = 0; //@line 20720
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$89 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 20725
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 20726
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = -1021; //@line 20729
 $$sink = 0; //@line 20729
 HEAP32[$3 >> 2] = $$sink; //@line 20735
 STACKTOP = sp; //@line 20736
 return $$0 | 0; //@line 20736
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 681
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 685
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 689
   break;
  }
 default:
  {
   $$0106 = -32; //@line 693
   return $$0106 | 0; //@line 694
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 697
 $3 = $0 + 8 | 0; //@line 698
 HEAP32[$0 + 4 >> 2] = $3; //@line 700
 $5 = $2 >>> 5; //@line 701
 $$0103117 = 0; //@line 702
 do {
  $6 = $$0103117 << 2; //@line 704
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 727
  $$0103117 = $$0103117 + 1 | 0; //@line 728
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 740
   $$1104111 = 0; //@line 740
   $33 = HEAP32[$3 >> 2] | 0; //@line 740
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 746
    $33 = HEAP32[1260 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[13575 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13575 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13575 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13575 + ($35 & 255) >> 0] | 0) << 24; //@line 771
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 772
    HEAP32[$$0112 >> 2] = $33; //@line 773
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 776
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 778
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 781
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 783
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 786
    $$1104111 = $$1104111 + 1 | 0; //@line 787
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 790
   return $$0106 | 0; //@line 796
  }
 case 12:
  {
   $$1114 = $3; //@line 801
   $$2105113 = 0; //@line 801
   $76 = HEAP32[$3 >> 2] | 0; //@line 801
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 807
    $76 = HEAP32[1260 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[13575 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13575 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13575 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13575 + ($78 & 255) >> 0] | 0) << 24; //@line 832
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 833
    HEAP32[$$1114 >> 2] = $76; //@line 834
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 837
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 839
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 842
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 844
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 847
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 849
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 852
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 854
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 857
    $$2105113 = $$2105113 + 1 | 0; //@line 858
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 861
   return $$0106 | 0; //@line 867
  }
 case 14:
  {
   $$2116 = $3; //@line 872
   $$3115 = 0; //@line 872
   $127 = HEAP32[$3 >> 2] | 0; //@line 872
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 878
    $127 = HEAP32[1260 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[13575 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13575 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13575 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13575 + ($129 & 255) >> 0] | 0) << 24; //@line 903
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 904
    HEAP32[$$2116 >> 2] = $127; //@line 905
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 908
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 910
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 913
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 915
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 918
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 920
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[13575 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[13575 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13575 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[13575 + ($166 >>> 24) >> 0] | 0) << 24; //@line 947
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 949
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 952
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 954
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 957
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 959
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 962
    $$3115 = $$3115 + 1 | 0; //@line 963
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 966
   return $$0106 | 0; //@line 972
  }
 default:
  {
   $$0106 = 0; //@line 976
   return $$0106 | 0; //@line 977
  }
 }
 return 0; //@line 980
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_139($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29554
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29556
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29558
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29560
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29562
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29564
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29568
 $14 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 29569
 if ($14 | 0) {
  $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 29573
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(28) | 0; //@line 29574
  FUNCTION_TABLE_vi[$17 & 1023]($8); //@line 29575
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 246; //@line 29578
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 29579
   HEAP32[$18 >> 2] = $2; //@line 29580
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 29581
   HEAP32[$19 >> 2] = $6; //@line 29582
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 29583
   HEAP32[$20 >> 2] = $8; //@line 29584
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 29585
   HEAP32[$21 >> 2] = $10; //@line 29586
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 29587
   HEAP32[$22 >> 2] = $4; //@line 29588
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 29589
   HEAP32[$23 >> 2] = $AsyncRetVal; //@line 29590
   sp = STACKTOP; //@line 29591
   return;
  }
  ___async_unwind = 0; //@line 29594
  HEAP32[$ReallocAsyncCtx4 >> 2] = 246; //@line 29595
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 29596
  HEAP32[$18 >> 2] = $2; //@line 29597
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 29598
  HEAP32[$19 >> 2] = $6; //@line 29599
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 29600
  HEAP32[$20 >> 2] = $8; //@line 29601
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 29602
  HEAP32[$21 >> 2] = $10; //@line 29603
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 29604
  HEAP32[$22 >> 2] = $4; //@line 29605
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 29606
  HEAP32[$23 >> 2] = $AsyncRetVal; //@line 29607
  sp = STACKTOP; //@line 29608
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 29613
  _mbed_assert_internal(11890, 11899, 778); //@line 29614
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 247; //@line 29617
   $25 = $ReallocAsyncCtx11 + 4 | 0; //@line 29618
   HEAP32[$25 >> 2] = $2; //@line 29619
   $26 = $ReallocAsyncCtx11 + 8 | 0; //@line 29620
   HEAP32[$26 >> 2] = $4; //@line 29621
   $27 = $ReallocAsyncCtx11 + 12 | 0; //@line 29622
   HEAP32[$27 >> 2] = $6; //@line 29623
   $28 = $ReallocAsyncCtx11 + 16 | 0; //@line 29624
   HEAP32[$28 >> 2] = $8; //@line 29625
   $29 = $ReallocAsyncCtx11 + 20 | 0; //@line 29626
   HEAP32[$29 >> 2] = $10; //@line 29627
   sp = STACKTOP; //@line 29628
   return;
  }
  ___async_unwind = 0; //@line 29631
  HEAP32[$ReallocAsyncCtx11 >> 2] = 247; //@line 29632
  $25 = $ReallocAsyncCtx11 + 4 | 0; //@line 29633
  HEAP32[$25 >> 2] = $2; //@line 29634
  $26 = $ReallocAsyncCtx11 + 8 | 0; //@line 29635
  HEAP32[$26 >> 2] = $4; //@line 29636
  $27 = $ReallocAsyncCtx11 + 12 | 0; //@line 29637
  HEAP32[$27 >> 2] = $6; //@line 29638
  $28 = $ReallocAsyncCtx11 + 16 | 0; //@line 29639
  HEAP32[$28 >> 2] = $8; //@line 29640
  $29 = $ReallocAsyncCtx11 + 20 | 0; //@line 29641
  HEAP32[$29 >> 2] = $10; //@line 29642
  sp = STACKTOP; //@line 29643
  return;
 }
 if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) == 2) {
  label = 13; //@line 29649
 } else {
  if (!(HEAP8[$2 + 15 >> 0] | 0)) {
   label = 13; //@line 29655
  }
 }
 if ((label | 0) == 13) {
  if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) != 2) {
   return;
  }
  if ((HEAP32[$2 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $40 = $10 + 2512 | 0; //@line 29671
 $41 = HEAP32[$40 >> 2] | 0; //@line 29672
 if (!$41) {
  return;
 }
 $45 = HEAP32[$10 + 3168 >> 2] | 0; //@line 29679
 $47 = HEAP32[$41 + 4 >> 2] | 0; //@line 29681
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 29682
 FUNCTION_TABLE_vii[$47 & 15]($4, $10 + 2500 | 0); //@line 29683
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 29686
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 29687
  HEAP32[$48 >> 2] = $40; //@line 29688
  $49 = $ReallocAsyncCtx5 + 8 | 0; //@line 29689
  HEAP32[$49 >> 2] = $4; //@line 29690
  $50 = $ReallocAsyncCtx5 + 12 | 0; //@line 29691
  HEAP32[$50 >> 2] = $45; //@line 29692
  $51 = $ReallocAsyncCtx5 + 16 | 0; //@line 29693
  HEAP32[$51 >> 2] = $4; //@line 29694
  sp = STACKTOP; //@line 29695
  return;
 }
 ___async_unwind = 0; //@line 29698
 HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 29699
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 29700
 HEAP32[$48 >> 2] = $40; //@line 29701
 $49 = $ReallocAsyncCtx5 + 8 | 0; //@line 29702
 HEAP32[$49 >> 2] = $4; //@line 29703
 $50 = $ReallocAsyncCtx5 + 12 | 0; //@line 29704
 HEAP32[$50 >> 2] = $45; //@line 29705
 $51 = $ReallocAsyncCtx5 + 16 | 0; //@line 29706
 HEAP32[$51 >> 2] = $4; //@line 29707
 sp = STACKTOP; //@line 29708
 return;
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $100 = 0, $101 = 0, $102 = 0, $104 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $74 = 0, $75 = 0, $76 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6715
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6716
 _initialize($0); //@line 6717
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 618; //@line 6720
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6722
  sp = STACKTOP; //@line 6723
  tempRet0 = 0; //@line 6724
  return 0; //@line 6725
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6727
 $2 = $0 + 4 | 0; //@line 6728
 $3 = HEAP32[$2 >> 2] | 0; //@line 6729
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6732
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6733
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 6734
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 619; //@line 6737
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6739
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 6741
  sp = STACKTOP; //@line 6742
  tempRet0 = 0; //@line 6743
  return 0; //@line 6744
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6746
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $108 = HEAP32[$2 >> 2] | 0; //@line 6752
  $109 = $108 + 48 | 0; //@line 6753
  $110 = $109; //@line 6754
  $111 = $110; //@line 6755
  $112 = HEAP32[$111 >> 2] | 0; //@line 6756
  $113 = $110 + 4 | 0; //@line 6757
  $114 = $113; //@line 6758
  $115 = HEAP32[$114 >> 2] | 0; //@line 6759
  tempRet0 = $115; //@line 6760
  return $112 | 0; //@line 6761
 }
 $14 = $3 + 32 | 0; //@line 6763
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 6768
 HEAP32[$14 >> 2] = $7; //@line 6769
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 6771
 do {
  if (($21 | 0) == 1e6) {
   $100 = $19; //@line 6775
   $101 = 0; //@line 6775
  } else {
   $24 = HEAP8[$3 + 57 >> 0] | 0; //@line 6778
   $26 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6780
   $27 = tempRet0; //@line 6781
   if (!($24 << 24 >> 24)) {
    $61 = ___udivdi3($26 | 0, $27 | 0, $21 | 0, 0) | 0; //@line 6783
    $62 = tempRet0; //@line 6784
    $63 = ___muldi3($61 | 0, $62 | 0, $21 | 0, 0) | 0; //@line 6785
    $65 = _i64Subtract($26 | 0, $27 | 0, $63 | 0, tempRet0 | 0) | 0; //@line 6787
    $67 = $3 + 40 | 0; //@line 6789
    $68 = $67; //@line 6790
    $74 = _i64Add($65 | 0, tempRet0 | 0, HEAP32[$68 >> 2] | 0, HEAP32[$68 + 4 >> 2] | 0) | 0; //@line 6796
    $75 = tempRet0; //@line 6797
    $76 = $67; //@line 6798
    HEAP32[$76 >> 2] = $74; //@line 6800
    HEAP32[$76 + 4 >> 2] = $75; //@line 6803
    if ($75 >>> 0 < 0 | ($75 | 0) == 0 & $74 >>> 0 < $21 >>> 0) {
     $100 = $61; //@line 6810
     $101 = $62; //@line 6810
     break;
    }
    $85 = _i64Add($61 | 0, $62 | 0, 1, 0) | 0; //@line 6813
    $86 = tempRet0; //@line 6814
    $87 = _i64Subtract($74 | 0, $75 | 0, $21 | 0, 0) | 0; //@line 6815
    $89 = $67; //@line 6817
    HEAP32[$89 >> 2] = $87; //@line 6819
    HEAP32[$89 + 4 >> 2] = tempRet0; //@line 6822
    $100 = $85; //@line 6823
    $101 = $86; //@line 6823
    break;
   } else {
    $28 = $24 & 255; //@line 6826
    $29 = _bitshift64Lshr($26 | 0, $27 | 0, $28 | 0) | 0; //@line 6827
    $30 = tempRet0; //@line 6828
    $31 = _bitshift64Shl($29 | 0, $30 | 0, $28 | 0) | 0; //@line 6829
    $33 = _i64Subtract($26 | 0, $27 | 0, $31 | 0, tempRet0 | 0) | 0; //@line 6831
    $35 = $3 + 40 | 0; //@line 6833
    $36 = $35; //@line 6834
    $42 = _i64Add(HEAP32[$36 >> 2] | 0, HEAP32[$36 + 4 >> 2] | 0, $33 | 0, tempRet0 | 0) | 0; //@line 6840
    $43 = tempRet0; //@line 6841
    $44 = $35; //@line 6842
    HEAP32[$44 >> 2] = $42; //@line 6844
    HEAP32[$44 + 4 >> 2] = $43; //@line 6847
    if ($43 >>> 0 < 0 | ($43 | 0) == 0 & $42 >>> 0 < $21 >>> 0) {
     $100 = $29; //@line 6854
     $101 = $30; //@line 6854
     break;
    }
    $53 = _i64Add($29 | 0, $30 | 0, 1, 0) | 0; //@line 6857
    $54 = tempRet0; //@line 6858
    $55 = _i64Subtract($42 | 0, $43 | 0, $21 | 0, 0) | 0; //@line 6859
    $57 = $35; //@line 6861
    HEAP32[$57 >> 2] = $55; //@line 6863
    HEAP32[$57 + 4 >> 2] = tempRet0; //@line 6866
    $100 = $53; //@line 6867
    $101 = $54; //@line 6867
    break;
   }
  }
 } while (0);
 $93 = $3 + 48 | 0; //@line 6872
 $94 = $93; //@line 6873
 $102 = _i64Add(HEAP32[$94 >> 2] | 0, HEAP32[$94 + 4 >> 2] | 0, $100 | 0, $101 | 0) | 0; //@line 6879
 $104 = $93; //@line 6881
 HEAP32[$104 >> 2] = $102; //@line 6883
 HEAP32[$104 + 4 >> 2] = tempRet0; //@line 6886
 $108 = HEAP32[$2 >> 2] | 0; //@line 6887
 $109 = $108 + 48 | 0; //@line 6888
 $110 = $109; //@line 6889
 $111 = $110; //@line 6890
 $112 = HEAP32[$111 >> 2] | 0; //@line 6891
 $113 = $110 + 4 | 0; //@line 6892
 $114 = $113; //@line 6893
 $115 = HEAP32[$114 >> 2] | 0; //@line 6894
 tempRet0 = $115; //@line 6895
 return $112 | 0; //@line 6896
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23049
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23051
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23053
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23055
 $8 = $2 + 1240 | 0; //@line 23058
 $10 = ((HEAP32[___async_retval >> 2] | 0) * 1e3 | 0) + 3e3 | 0; //@line 23060
 $11 = $2 + 1280 | 0; //@line 23061
 do {
  if (($11 | 0) != ($4 | 0)) {
   $13 = $2 + 1292 | 0; //@line 23065
   $14 = HEAP32[$13 >> 2] | 0; //@line 23066
   if ($14 | 0) {
    $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 23070
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 23071
    FUNCTION_TABLE_vi[$17 & 1023]($11); //@line 23072
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 90; //@line 23075
     $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 23076
     HEAP32[$18 >> 2] = $6; //@line 23077
     $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 23078
     HEAP32[$19 >> 2] = $13; //@line 23079
     $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 23080
     HEAP32[$20 >> 2] = $11; //@line 23081
     $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 23082
     HEAP32[$21 >> 2] = $4; //@line 23083
     $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 23084
     HEAP32[$22 >> 2] = $8; //@line 23085
     $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 23086
     $24 = $23; //@line 23087
     $25 = $24; //@line 23088
     HEAP32[$25 >> 2] = $10; //@line 23089
     $26 = $24 + 4 | 0; //@line 23090
     $27 = $26; //@line 23091
     HEAP32[$27 >> 2] = 0; //@line 23092
     sp = STACKTOP; //@line 23093
     return;
    }
    ___async_unwind = 0; //@line 23096
    HEAP32[$ReallocAsyncCtx2 >> 2] = 90; //@line 23097
    $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 23098
    HEAP32[$18 >> 2] = $6; //@line 23099
    $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 23100
    HEAP32[$19 >> 2] = $13; //@line 23101
    $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 23102
    HEAP32[$20 >> 2] = $11; //@line 23103
    $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 23104
    HEAP32[$21 >> 2] = $4; //@line 23105
    $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 23106
    HEAP32[$22 >> 2] = $8; //@line 23107
    $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 23108
    $24 = $23; //@line 23109
    $25 = $24; //@line 23110
    HEAP32[$25 >> 2] = $10; //@line 23111
    $26 = $24 + 4 | 0; //@line 23112
    $27 = $26; //@line 23113
    HEAP32[$27 >> 2] = 0; //@line 23114
    sp = STACKTOP; //@line 23115
    return;
   }
   $28 = HEAP32[$6 >> 2] | 0; //@line 23118
   if (!$28) {
    HEAP32[$13 >> 2] = 0; //@line 23121
    break;
   }
   $31 = HEAP32[$28 + 4 >> 2] | 0; //@line 23125
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 23126
   FUNCTION_TABLE_vii[$31 & 15]($11, $4); //@line 23127
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 91; //@line 23130
    $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 23131
    HEAP32[$32 >> 2] = $6; //@line 23132
    $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 23133
    HEAP32[$33 >> 2] = $13; //@line 23134
    $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 23135
    HEAP32[$34 >> 2] = $8; //@line 23136
    $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 23137
    $36 = $35; //@line 23138
    $37 = $36; //@line 23139
    HEAP32[$37 >> 2] = $10; //@line 23140
    $38 = $36 + 4 | 0; //@line 23141
    $39 = $38; //@line 23142
    HEAP32[$39 >> 2] = 0; //@line 23143
    $40 = $ReallocAsyncCtx3 + 24 | 0; //@line 23144
    HEAP32[$40 >> 2] = $4; //@line 23145
    sp = STACKTOP; //@line 23146
    return;
   }
   ___async_unwind = 0; //@line 23149
   HEAP32[$ReallocAsyncCtx3 >> 2] = 91; //@line 23150
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 23151
   HEAP32[$32 >> 2] = $6; //@line 23152
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 23153
   HEAP32[$33 >> 2] = $13; //@line 23154
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 23155
   HEAP32[$34 >> 2] = $8; //@line 23156
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 23157
   $36 = $35; //@line 23158
   $37 = $36; //@line 23159
   HEAP32[$37 >> 2] = $10; //@line 23160
   $38 = $36 + 4 | 0; //@line 23161
   $39 = $38; //@line 23162
   HEAP32[$39 >> 2] = 0; //@line 23163
   $40 = $ReallocAsyncCtx3 + 24 | 0; //@line 23164
   HEAP32[$40 >> 2] = $4; //@line 23165
   sp = STACKTOP; //@line 23166
   return;
  }
 } while (0);
 __ZN4mbed6Ticker5setupEy($8, $10, 0); //@line 23170
 $41 = HEAP32[$6 >> 2] | 0; //@line 23171
 if (!$41) {
  return;
 }
 $44 = HEAP32[$41 + 8 >> 2] | 0; //@line 23177
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 23178
 FUNCTION_TABLE_vi[$44 & 1023]($4); //@line 23179
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 92; //@line 23182
  sp = STACKTOP; //@line 23183
  return;
 }
 ___async_unwind = 0; //@line 23186
 HEAP32[$ReallocAsyncCtx4 >> 2] = 92; //@line 23187
 sp = STACKTOP; //@line 23188
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $48 = 0, $55 = 0, $62 = 0, $67 = 0, $68 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18014
 HEAP8[$0 + 5 >> 0] = $6; //@line 18016
 HEAP8[$0 + 6 >> 0] = $5; //@line 18019
 HEAP8[$0 + 7 >> 0] = $5 >>> 8; //@line 18023
 HEAP8[$0 + 8 >> 0] = $5 >>> 16; //@line 18027
 HEAP8[$0 + 9 >> 0] = $5 >>> 24; //@line 18031
 HEAP8[$0 + 10 >> 0] = $7; //@line 18034
 HEAP8[$0 + 11 >> 0] = $7 >>> 8; //@line 18038
 HEAP8[$0 + 12 >> 0] = $7 >>> 16; //@line 18042
 HEAP8[$0 + 13 >> 0] = $7 >>> 24; //@line 18046
 $33 = $2 & 255; //@line 18048
 HEAP8[$0 + 15 >> 0] = $2; //@line 18051
 $36 = $0 + 344 | 0; //@line 18052
 _mbedtls_cipher_init($36); //@line 18053
 $37 = _mbedtls_cipher_info_from_type(2) | 0; //@line 18054
 if (!$37) {
  $$0 = -24960; //@line 18057
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18059
  $39 = _mbedtls_cipher_setup($36, $37) | 0; //@line 18060
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 481; //@line 18063
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 18065
   HEAP32[$AsyncCtx15 + 8 >> 2] = $36; //@line 18067
   HEAP32[$AsyncCtx15 + 12 >> 2] = $1; //@line 18069
   HEAP32[$AsyncCtx15 + 16 >> 2] = $33; //@line 18071
   HEAP32[$AsyncCtx15 + 20 >> 2] = $8; //@line 18073
   HEAP32[$AsyncCtx15 + 24 >> 2] = $3; //@line 18075
   HEAP32[$AsyncCtx15 + 28 >> 2] = $4; //@line 18077
   sp = STACKTOP; //@line 18078
   return 0; //@line 18079
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18081
  if (!$39) {
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 18084
   $48 = _mbedtls_cipher_cmac_starts($36, $3, $4) | 0; //@line 18085
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 482; //@line 18088
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18090
    HEAP32[$AsyncCtx + 8 >> 2] = $36; //@line 18092
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 18094
    HEAP32[$AsyncCtx + 16 >> 2] = $33; //@line 18096
    HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 18098
    sp = STACKTOP; //@line 18099
    return 0; //@line 18100
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 18102
   if (!$48) {
    $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18105
    $55 = _mbedtls_cipher_cmac_update($36, $0, 16) | 0; //@line 18106
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 483; //@line 18109
     HEAP32[$AsyncCtx11 + 4 >> 2] = $36; //@line 18111
     HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 18113
     HEAP32[$AsyncCtx11 + 12 >> 2] = $33; //@line 18115
     HEAP32[$AsyncCtx11 + 16 >> 2] = $0; //@line 18117
     HEAP32[$AsyncCtx11 + 20 >> 2] = $8; //@line 18119
     sp = STACKTOP; //@line 18120
     return 0; //@line 18121
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18123
    if (!$55) {
     $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 18126
     $62 = _mbedtls_cipher_cmac_update($36, $1, $33) | 0; //@line 18127
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 484; //@line 18130
      HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 18132
      HEAP32[$AsyncCtx7 + 8 >> 2] = $36; //@line 18134
      HEAP32[$AsyncCtx7 + 12 >> 2] = $8; //@line 18136
      sp = STACKTOP; //@line 18137
      return 0; //@line 18138
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18140
     if (!$62) {
      $67 = $0 + 16 | 0; //@line 18143
      $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18144
      $68 = _mbedtls_cipher_cmac_finish($36, $67) | 0; //@line 18145
      if (___async) {
       HEAP32[$AsyncCtx3 >> 2] = 485; //@line 18148
       HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 18150
       HEAP32[$AsyncCtx3 + 8 >> 2] = $67; //@line 18152
       HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 18154
       HEAP32[$AsyncCtx3 + 16 >> 2] = $36; //@line 18156
       sp = STACKTOP; //@line 18157
       return 0; //@line 18158
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18160
      if (!$68) {
       HEAP32[$8 >> 2] = (HEAPU8[$0 + 18 >> 0] | 0) << 16 | (HEAPU8[$0 + 19 >> 0] | 0) << 24 | (HEAPU8[$0 + 17 >> 0] | 0) << 8 | (HEAPU8[$67 >> 0] | 0); //@line 18180
       $$0 = 0; //@line 18181
      } else {
       $$0 = $68; //@line 18183
      }
     } else {
      $$0 = $62; //@line 18186
     }
    } else {
     $$0 = $55; //@line 18189
    }
   } else {
    $$0 = $48; //@line 18192
   }
  } else {
   $$0 = $39; //@line 18195
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18198
 _mbedtls_cipher_free($36); //@line 18199
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 486; //@line 18202
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 18204
  sp = STACKTOP; //@line 18205
  return 0; //@line 18206
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 18208
  return $$0 | 0; //@line 18209
 }
 return 0; //@line 18211
}
function _mbed_vtracef__async_cb_369($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28327
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 28330
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28332
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28334
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28336
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28338
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28340
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28342
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28344
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28346
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28350
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28354
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28358
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28362
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 28364
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 28366
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 28368
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 28372
 HEAP32[$44 >> 2] = HEAP32[___async_retval >> 2]; //@line 28379
 $50 = _snprintf($34, $36, 11774, $44) | 0; //@line 28380
 $$10 = ($50 | 0) >= ($36 | 0) ? 0 : $50; //@line 28382
 $53 = $34 + $$10 | 0; //@line 28384
 $54 = $36 - $$10 | 0; //@line 28385
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 28389
   $$3169 = $53; //@line 28389
   label = 4; //@line 28390
  }
 } else {
  $$3147168 = $36; //@line 28393
  $$3169 = $34; //@line 28393
  label = 4; //@line 28394
 }
 if ((label | 0) == 4) {
  $56 = $38 + -2 | 0; //@line 28397
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$40 >> 2] = $18; //@line 28403
    $$5156 = _snprintf($$3169, $$3147168, 11777, $40) | 0; //@line 28405
    break;
   }
  case 1:
   {
    HEAP32[$26 >> 2] = $18; //@line 28409
    $$5156 = _snprintf($$3169, $$3147168, 11792, $26) | 0; //@line 28411
    break;
   }
  case 3:
   {
    HEAP32[$30 >> 2] = $18; //@line 28415
    $$5156 = _snprintf($$3169, $$3147168, 11807, $30) | 0; //@line 28417
    break;
   }
  case 7:
   {
    HEAP32[$16 >> 2] = $18; //@line 28421
    $$5156 = _snprintf($$3169, $$3147168, 11822, $16) | 0; //@line 28423
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 11837, $22) | 0; //@line 28428
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 28432
  $67 = $$3169 + $$5156$ | 0; //@line 28434
  $68 = $$3147168 - $$5156$ | 0; //@line 28435
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 28439
   $70 = _vsnprintf($67, $68, $8, $10) | 0; //@line 28440
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 133; //@line 28443
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 28444
    HEAP32[$71 >> 2] = $68; //@line 28445
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 28446
    HEAP32[$72 >> 2] = $67; //@line 28447
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 28448
    $$expand_i1_val = $2 & 1; //@line 28449
    HEAP8[$73 >> 0] = $$expand_i1_val; //@line 28450
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 28451
    HEAP32[$74 >> 2] = $4; //@line 28452
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 28453
    HEAP32[$75 >> 2] = $6; //@line 28454
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 28455
    HEAP32[$76 >> 2] = $12; //@line 28456
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 28457
    HEAP32[$77 >> 2] = $14; //@line 28458
    sp = STACKTOP; //@line 28459
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 28463
   ___async_unwind = 0; //@line 28464
   HEAP32[$ReallocAsyncCtx10 >> 2] = 133; //@line 28465
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 28466
   HEAP32[$71 >> 2] = $68; //@line 28467
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 28468
   HEAP32[$72 >> 2] = $67; //@line 28469
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 28470
   $$expand_i1_val = $2 & 1; //@line 28471
   HEAP8[$73 >> 0] = $$expand_i1_val; //@line 28472
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 28473
   HEAP32[$74 >> 2] = $4; //@line 28474
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 28475
   HEAP32[$75 >> 2] = $6; //@line 28476
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 28477
   HEAP32[$76 >> 2] = $12; //@line 28478
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 28479
   HEAP32[$77 >> 2] = $14; //@line 28480
   sp = STACKTOP; //@line 28481
   return;
  }
 }
 $79 = HEAP32[174] | 0; //@line 28485
 $80 = HEAP32[167] | 0; //@line 28486
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 28487
 FUNCTION_TABLE_vi[$79 & 1023]($80); //@line 28488
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 28491
  sp = STACKTOP; //@line 28492
  return;
 }
 ___async_unwind = 0; //@line 28495
 HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 28496
 sp = STACKTOP; //@line 28497
 return;
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 192
 HEAP32[$0 >> 2] = 968; //@line 193
 $2 = $0 + 324 | 0; //@line 194
 HEAP32[$2 >> 2] = HEAP32[262]; //@line 195
 HEAP32[$2 + 4 >> 2] = HEAP32[263]; //@line 195
 HEAP32[$2 + 8 >> 2] = HEAP32[264]; //@line 195
 HEAP32[$2 + 12 >> 2] = HEAP32[265]; //@line 195
 HEAP32[$2 + 16 >> 2] = HEAP32[266]; //@line 195
 HEAP32[$2 + 20 >> 2] = HEAP32[267]; //@line 195
 $3 = $0 + 348 | 0; //@line 196
 HEAP32[$3 >> 2] = HEAP32[268]; //@line 197
 HEAP32[$3 + 4 >> 2] = HEAP32[269]; //@line 197
 HEAP32[$3 + 8 >> 2] = HEAP32[270]; //@line 197
 HEAP32[$3 + 12 >> 2] = HEAP32[271]; //@line 197
 HEAP32[$3 + 16 >> 2] = HEAP32[272]; //@line 197
 HEAP32[$3 + 20 >> 2] = HEAP32[273]; //@line 197
 $4 = $0 + 372 | 0; //@line 198
 HEAP32[$4 >> 2] = HEAP32[274]; //@line 199
 HEAP32[$4 + 4 >> 2] = HEAP32[275]; //@line 199
 HEAP32[$4 + 8 >> 2] = HEAP32[276]; //@line 199
 HEAP32[$4 + 12 >> 2] = HEAP32[277]; //@line 199
 HEAP32[$4 + 16 >> 2] = HEAP32[278]; //@line 199
 HEAP32[$4 + 20 >> 2] = HEAP32[279]; //@line 199
 $5 = $0 + 396 | 0; //@line 200
 HEAP32[$5 >> 2] = HEAP32[280]; //@line 201
 HEAP32[$5 + 4 >> 2] = HEAP32[281]; //@line 201
 HEAP32[$5 + 8 >> 2] = HEAP32[282]; //@line 201
 HEAP32[$5 + 12 >> 2] = HEAP32[283]; //@line 201
 HEAP32[$5 + 16 >> 2] = HEAP32[284]; //@line 201
 HEAP32[$5 + 20 >> 2] = HEAP32[285]; //@line 201
 $6 = $0 + 420 | 0; //@line 202
 HEAP32[$6 >> 2] = HEAP32[286]; //@line 203
 HEAP32[$6 + 4 >> 2] = HEAP32[287]; //@line 203
 HEAP32[$6 + 8 >> 2] = HEAP32[288]; //@line 203
 HEAP32[$6 + 12 >> 2] = HEAP32[289]; //@line 203
 HEAP32[$6 + 16 >> 2] = HEAP32[290]; //@line 203
 HEAP32[$6 + 20 >> 2] = HEAP32[291]; //@line 203
 $7 = $0 + 444 | 0; //@line 204
 HEAP32[$7 >> 2] = HEAP32[292]; //@line 205
 HEAP32[$7 + 4 >> 2] = HEAP32[293]; //@line 205
 HEAP32[$7 + 8 >> 2] = HEAP32[294]; //@line 205
 HEAP32[$7 + 12 >> 2] = HEAP32[295]; //@line 205
 HEAP32[$7 + 16 >> 2] = HEAP32[296]; //@line 205
 HEAP32[$7 + 20 >> 2] = HEAP32[297]; //@line 205
 $8 = $0 + 132 | 0; //@line 206
 HEAP32[$8 >> 2] = HEAP32[298]; //@line 207
 HEAP32[$8 + 4 >> 2] = HEAP32[299]; //@line 207
 HEAP32[$8 + 8 >> 2] = HEAP32[300]; //@line 207
 HEAP8[$0 + 141 >> 0] = 1; //@line 209
 $10 = $0 + 144 | 0; //@line 210
 HEAP32[$10 >> 2] = HEAP32[301]; //@line 211
 HEAP32[$10 + 4 >> 2] = HEAP32[302]; //@line 211
 HEAP32[$10 + 8 >> 2] = HEAP32[303]; //@line 211
 HEAP8[$0 + 153 >> 0] = 1; //@line 213
 $12 = $0 + 156 | 0; //@line 214
 HEAP32[$12 >> 2] = HEAP32[304]; //@line 215
 HEAP32[$12 + 4 >> 2] = HEAP32[305]; //@line 215
 HEAP32[$12 + 8 >> 2] = HEAP32[306]; //@line 215
 HEAP8[$0 + 165 >> 0] = 1; //@line 217
 $14 = $0 + 470 | 0; //@line 218
 HEAP16[$14 >> 1] = 7; //@line 219
 $15 = $0 + 468 | 0; //@line 220
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $15, $14, 1); //@line 221
 HEAP32[$0 + 124 >> 2] = $8; //@line 223
 HEAP8[$0 + 112 >> 0] = 16; //@line 225
 HEAP32[$0 + 116 >> 2] = $15; //@line 227
 HEAP32[$0 + 120 >> 2] = $14; //@line 229
 HEAP8[$0 + 113 >> 0] = 1; //@line 231
 HEAP32[$0 + 72 >> 2] = $2; //@line 233
 HEAP8[$0 + 76 >> 0] = 6; //@line 235
 HEAP32[$0 + 80 >> 2] = 1228; //@line 237
 HEAP8[$0 + 84 >> 0] = 8; //@line 239
 HEAP32[$0 + 88 >> 2] = 13428; //@line 241
 HEAP8[$0 + 92 >> 0] = 8; //@line 243
 HEAP32[$0 + 96 >> 2] = 13436; //@line 245
 HEAP8[$0 + 100 >> 0] = 8; //@line 247
 HEAP32[$0 + 104 >> 2] = 13444; //@line 249
 HEAP8[$0 + 108 >> 0] = 8; //@line 251
 $31 = $0 + 128 | 0; //@line 252
 HEAP8[$31 >> 0] = HEAP8[$31 >> 0] & -4; //@line 255
 $34 = $0 + 12 | 0; //@line 256
 $35 = $0 + 18 | 0; //@line 257
 HEAP32[$34 >> 2] = 16843009; //@line 258
 HEAP16[$34 + 4 >> 1] = 257; //@line 258
 HEAP8[$35 >> 0] = 3; //@line 259
 HEAP8[$0 + 20 >> 0] = 16; //@line 261
 HEAP8[$0 + 19 >> 0] = 5; //@line 263
 HEAP8[$0 + 26 >> 0] = 0; //@line 265
 HEAP8[$0 + 27 >> 0] = 7; //@line 267
 HEAP8[$0 + 28 >> 0] = 0; //@line 269
 HEAP8[$0 + 29 >> 0] = 7; //@line 271
 HEAP8[$0 + 30 >> 0] = 0; //@line 273
 HEAP8[$0 + 31 >> 0] = 5; //@line 275
 HEAP8[$0 + 32 >> 0] = 0; //@line 277
 HEAP8[$0 + 33 >> 0] = 5; //@line 279
 HEAP8[$0 + 34 >> 0] = 0; //@line 281
 HEAP8[$0 + 21 >> 0] = 7; //@line 283
 HEAP8[$0 + 22 >> 0] = 0; //@line 285
 HEAP8[$0 + 23 >> 0] = 0; //@line 287
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 289
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 291
 HEAP8[$0 + 24 >> 0] = 64; //@line 293
 HEAP8[$0 + 25 >> 0] = 32; //@line 295
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 297
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 299
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 301
 HEAP16[$0 + 46 >> 1] = 7; //@line 303
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 305
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 307
 HEAP16[$0 + 48 >> 1] = 16384; //@line 309
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 311
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 313
 HEAP8[$0 + 64 >> 0] = 0; //@line 315
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 317
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19713
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19717
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19719
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19721
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 19723
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 19725
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 19727
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 19729
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19730
 $17 = $4 + 12 | 0; //@line 19731
 HEAP32[$17 >> 2] = $$pre$i; //@line 19732
 if (!$$pre$i) {
  $30 = $6 + 12 | 0; //@line 19735
  HEAP32[$30 >> 2] = 0; //@line 19736
  $31 = $6 + 16 | 0; //@line 19737
  HEAP32[$31 >> 2] = $8; //@line 19738
  HEAP16[$6 + 20 >> 1] = $10; //@line 19740
  HEAP16[$6 + 22 >> 1] = $12; //@line 19742
  HEAP8[$6 + 24 >> 0] = $14; //@line 19744
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 19745
  $35 = _equeue_alloc($16, 28) | 0; //@line 19746
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 285; //@line 19749
   $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 19750
   HEAP32[$36 >> 2] = $30; //@line 19751
   $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 19752
   HEAP32[$37 >> 2] = $30; //@line 19753
   $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 19754
   HEAP32[$38 >> 2] = $17; //@line 19755
   $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 19756
   HEAP32[$39 >> 2] = $6; //@line 19757
   $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 19758
   HEAP32[$40 >> 2] = $4; //@line 19759
   $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 19760
   HEAP32[$41 >> 2] = $31; //@line 19761
   $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 19762
   HEAP32[$42 >> 2] = $16; //@line 19763
   sp = STACKTOP; //@line 19764
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 19768
  ___async_unwind = 0; //@line 19769
  HEAP32[$ReallocAsyncCtx7 >> 2] = 285; //@line 19770
  $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 19771
  HEAP32[$36 >> 2] = $30; //@line 19772
  $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 19773
  HEAP32[$37 >> 2] = $30; //@line 19774
  $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 19775
  HEAP32[$38 >> 2] = $17; //@line 19776
  $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 19777
  HEAP32[$39 >> 2] = $6; //@line 19778
  $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 19779
  HEAP32[$40 >> 2] = $4; //@line 19780
  $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 19781
  HEAP32[$41 >> 2] = $31; //@line 19782
  $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 19783
  HEAP32[$42 >> 2] = $16; //@line 19784
  sp = STACKTOP; //@line 19785
  return;
 } else {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 19790
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 19791
  FUNCTION_TABLE_vii[$20 & 15]($6, $4); //@line 19792
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 284; //@line 19795
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 19796
   HEAP32[$21 >> 2] = $17; //@line 19797
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 19798
   HEAP32[$22 >> 2] = $17; //@line 19799
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 19800
   HEAP32[$23 >> 2] = $6; //@line 19801
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 19802
   HEAP32[$24 >> 2] = $8; //@line 19803
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 19804
   HEAP16[$25 >> 1] = $10; //@line 19805
   $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 19806
   HEAP16[$26 >> 1] = $12; //@line 19807
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 19808
   HEAP8[$27 >> 0] = $14; //@line 19809
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 19810
   HEAP32[$28 >> 2] = $16; //@line 19811
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 19812
   HEAP32[$29 >> 2] = $4; //@line 19813
   sp = STACKTOP; //@line 19814
   return;
  }
  ___async_unwind = 0; //@line 19817
  HEAP32[$ReallocAsyncCtx2 >> 2] = 284; //@line 19818
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 19819
  HEAP32[$21 >> 2] = $17; //@line 19820
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 19821
  HEAP32[$22 >> 2] = $17; //@line 19822
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 19823
  HEAP32[$23 >> 2] = $6; //@line 19824
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 19825
  HEAP32[$24 >> 2] = $8; //@line 19826
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 19827
  HEAP16[$25 >> 1] = $10; //@line 19828
  $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 19829
  HEAP16[$26 >> 1] = $12; //@line 19830
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 19831
  HEAP8[$27 >> 0] = $14; //@line 19832
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 19833
  HEAP32[$28 >> 2] = $16; //@line 19834
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 19835
  HEAP32[$29 >> 2] = $4; //@line 19836
  sp = STACKTOP; //@line 19837
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $32 = 0, $39 = 0, $42 = 0, $47 = 0, $54 = 0, $55 = 0, $58 = 0, $65 = 0, $68 = 0, $71 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1426
 STACKTOP = STACKTOP + 16 | 0; //@line 1427
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1427
 $1 = sp; //@line 1428
 $2 = $0 + 688 | 0; //@line 1429
 if ((HEAP8[$2 >> 0] | 0) != 1) {
  STACKTOP = sp; //@line 1433
  return;
 }
 do {
  if (!(HEAP8[$0 + 689 >> 0] | 0)) {
   HEAP8[$0 + 732 >> 0] = 0; //@line 1441
   HEAP8[$0 + 733 >> 0] = 0; //@line 1443
   HEAP16[$0 + 744 >> 1] = 0; //@line 1445
   HEAP16[$0 + 742 >> 1] = 0; //@line 1447
   if (!(HEAP8[$0 + 722 >> 0] | 0)) {
    HEAP8[$2 >> 0] = 0; //@line 1452
    $14 = $0 + 1176 | 0; //@line 1453
    $15 = $1 + 12 | 0; //@line 1454
    HEAP32[$1 >> 2] = 52; //@line 1455
    HEAP32[$1 + 4 >> 2] = 0; //@line 1457
    HEAP32[$1 + 8 >> 2] = $0; //@line 1459
    HEAP32[$15 >> 2] = 584; //@line 1460
    $18 = ___muldi3(HEAP32[$0 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 1463
    $19 = tempRet0; //@line 1464
    $20 = $0 + 1216 | 0; //@line 1465
    if (($20 | 0) != ($1 | 0)) {
     $22 = $0 + 1228 | 0; //@line 1468
     $23 = HEAP32[$22 >> 2] | 0; //@line 1469
     do {
      if ($23 | 0) {
       $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 1474
       $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 1475
       FUNCTION_TABLE_vi[$26 & 1023]($20); //@line 1476
       if (___async) {
        HEAP32[$AsyncCtx >> 2] = 83; //@line 1479
        HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1481
        HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 1483
        HEAP32[$AsyncCtx + 12 >> 2] = $22; //@line 1485
        HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 1487
        $32 = $AsyncCtx + 24 | 0; //@line 1489
        HEAP32[$32 >> 2] = $18; //@line 1491
        HEAP32[$32 + 4 >> 2] = $19; //@line 1494
        HEAP32[$AsyncCtx + 32 >> 2] = $15; //@line 1496
        HEAP32[$AsyncCtx + 36 >> 2] = $1; //@line 1498
        HEAP32[$AsyncCtx + 40 >> 2] = $20; //@line 1500
        sp = STACKTOP; //@line 1501
        STACKTOP = sp; //@line 1502
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx | 0); //@line 1504
        break;
       }
      }
     } while (0);
     $39 = HEAP32[$15 >> 2] | 0; //@line 1509
     do {
      if (!$39) {
       $54 = 0; //@line 1513
      } else {
       $42 = HEAP32[$39 + 4 >> 2] | 0; //@line 1516
       $AsyncCtx2 = _emscripten_alloc_async_context(40, sp) | 0; //@line 1517
       FUNCTION_TABLE_vii[$42 & 15]($20, $1); //@line 1518
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 84; //@line 1521
        HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 1523
        HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 1525
        HEAP32[$AsyncCtx2 + 12 >> 2] = $14; //@line 1527
        $47 = $AsyncCtx2 + 16 | 0; //@line 1529
        HEAP32[$47 >> 2] = $18; //@line 1531
        HEAP32[$47 + 4 >> 2] = $19; //@line 1534
        HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 1536
        HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 1538
        HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 1540
        sp = STACKTOP; //@line 1541
        STACKTOP = sp; //@line 1542
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1544
        $54 = HEAP32[$15 >> 2] | 0; //@line 1546
        break;
       }
      }
     } while (0);
     HEAP32[$22 >> 2] = $54; //@line 1551
    }
    __ZN4mbed6Ticker5setupEy($14, $18, $19); //@line 1553
    $55 = HEAP32[$15 >> 2] | 0; //@line 1554
    if ($55 | 0) {
     $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 1558
     $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1559
     FUNCTION_TABLE_vi[$58 & 1023]($1); //@line 1560
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 85; //@line 1563
      HEAP32[$AsyncCtx6 + 4 >> 2] = $0; //@line 1565
      HEAP32[$AsyncCtx6 + 8 >> 2] = $2; //@line 1567
      sp = STACKTOP; //@line 1568
      STACKTOP = sp; //@line 1569
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 1571
      break;
     }
    }
   }
  }
 } while (0);
 if (!(HEAP8[$0 + 770 >> 0] | 0)) {
  HEAP8[$2 >> 0] = 0; //@line 1582
 }
 $65 = HEAP32[$0 + 788 >> 2] | 0; //@line 1585
 if (!$65) {
  STACKTOP = sp; //@line 1588
  return;
 }
 $68 = HEAP32[$65 + 60 >> 2] | 0; //@line 1591
 if (!$68) {
  STACKTOP = sp; //@line 1594
  return;
 }
 $71 = HEAP32[$68 >> 2] | 0; //@line 1597
 $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1598
 FUNCTION_TABLE_vi[$71 & 1023]($65 + 48 | 0); //@line 1599
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 86; //@line 1602
  sp = STACKTOP; //@line 1603
  STACKTOP = sp; //@line 1604
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 1606
 STACKTOP = sp; //@line 1607
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_306($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22631
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22633
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22635
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22637
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22639
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22641
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22643
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22645
 if ($AsyncRetVal | 0) {
  $15 = HEAP32[$10 >> 2] | 0; //@line 22648
  if (!$15) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 22652
   _equeue_event_delay($AsyncRetVal, $4); //@line 22653
   _equeue_event_dtor($AsyncRetVal, 268); //@line 22654
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22655
   $27 = _equeue_post($6, 269, $AsyncRetVal) | 0; //@line 22656
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 551; //@line 22659
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 22660
    HEAP32[$28 >> 2] = $8; //@line 22661
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 22662
    HEAP32[$29 >> 2] = $10; //@line 22663
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 22664
    HEAP32[$30 >> 2] = $12; //@line 22665
    sp = STACKTOP; //@line 22666
    return;
   }
   HEAP32[___async_retval >> 2] = $27; //@line 22670
   ___async_unwind = 0; //@line 22671
   HEAP32[$ReallocAsyncCtx4 >> 2] = 551; //@line 22672
   $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 22673
   HEAP32[$28 >> 2] = $8; //@line 22674
   $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 22675
   HEAP32[$29 >> 2] = $10; //@line 22676
   $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 22677
   HEAP32[$30 >> 2] = $12; //@line 22678
   sp = STACKTOP; //@line 22679
   return;
  } else {
   $18 = HEAP32[$15 + 4 >> 2] | 0; //@line 22683
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 22684
   FUNCTION_TABLE_vii[$18 & 15]($AsyncRetVal, $12); //@line 22685
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 550; //@line 22688
    $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 22689
    HEAP32[$19 >> 2] = $2; //@line 22690
    $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 22691
    HEAP32[$20 >> 2] = $AsyncRetVal; //@line 22692
    $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 22693
    HEAP32[$21 >> 2] = $4; //@line 22694
    $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 22695
    HEAP32[$22 >> 2] = $6; //@line 22696
    $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 22697
    HEAP32[$23 >> 2] = $8; //@line 22698
    $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 22699
    HEAP32[$24 >> 2] = $10; //@line 22700
    $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 22701
    HEAP32[$25 >> 2] = $12; //@line 22702
    sp = STACKTOP; //@line 22703
    return;
   }
   ___async_unwind = 0; //@line 22706
   HEAP32[$ReallocAsyncCtx2 >> 2] = 550; //@line 22707
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 22708
   HEAP32[$19 >> 2] = $2; //@line 22709
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 22710
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 22711
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 22712
   HEAP32[$21 >> 2] = $4; //@line 22713
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 22714
   HEAP32[$22 >> 2] = $6; //@line 22715
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 22716
   HEAP32[$23 >> 2] = $8; //@line 22717
   $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 22718
   HEAP32[$24 >> 2] = $10; //@line 22719
   $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 22720
   HEAP32[$25 >> 2] = $12; //@line 22721
   sp = STACKTOP; //@line 22722
   return;
  }
 }
 $32 = $8 + 16 | 0; //@line 22726
 HEAP32[$32 >> 2] = 0; //@line 22727
 $33 = HEAP32[$10 >> 2] | 0; //@line 22728
 if ($33 | 0) {
  $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 22732
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22733
  FUNCTION_TABLE_vi[$36 & 1023]($12); //@line 22734
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 22737
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 22738
   HEAP32[$37 >> 2] = $32; //@line 22739
   sp = STACKTOP; //@line 22740
   return;
  }
  ___async_unwind = 0; //@line 22743
  HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 22744
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 22745
  HEAP32[$37 >> 2] = $32; //@line 22746
  sp = STACKTOP; //@line 22747
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 22754
 _mbed_assert_internal(13452, 13470, 57); //@line 22755
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 553; //@line 22758
  sp = STACKTOP; //@line 22759
  return;
 }
 ___async_unwind = 0; //@line 22762
 HEAP32[$ReallocAsyncCtx6 >> 2] = 553; //@line 22763
 sp = STACKTOP; //@line 22764
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $25 = 0, $28 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 441
 STACKTOP = STACKTOP + 16 | 0; //@line 442
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 442
 $3 = sp; //@line 443
 $4 = HEAP32[$0 >> 2] | 0; //@line 444
 $5 = $1 + 12 | 0; //@line 445
 $6 = HEAP32[$5 >> 2] | 0; //@line 446
 do {
  if (!$6) {
   $16 = 0; //@line 450
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 453
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 454
   FUNCTION_TABLE_vii[$9 & 15]($3, $1); //@line 455
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 548; //@line 458
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 460
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 462
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 464
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 466
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 468
    sp = STACKTOP; //@line 469
    STACKTOP = sp; //@line 470
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 472
    $16 = HEAP32[$5 >> 2] | 0; //@line 474
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 479
 HEAP32[$15 >> 2] = $16; //@line 480
 $AsyncCtx12 = _emscripten_alloc_async_context(28, sp) | 0; //@line 481
 $17 = _equeue_alloc($4, 16) | 0; //@line 482
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 549; //@line 485
  HEAP32[$AsyncCtx12 + 4 >> 2] = $15; //@line 487
  HEAP32[$AsyncCtx12 + 8 >> 2] = $2; //@line 489
  HEAP32[$AsyncCtx12 + 12 >> 2] = $4; //@line 491
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 493
  HEAP32[$AsyncCtx12 + 20 >> 2] = $15; //@line 495
  HEAP32[$AsyncCtx12 + 24 >> 2] = $3; //@line 497
  sp = STACKTOP; //@line 498
  STACKTOP = sp; //@line 499
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 501
 do {
  if (!$17) {
   $$0$i = 0; //@line 505
  } else {
   $25 = HEAP32[$15 >> 2] | 0; //@line 507
   do {
    if (!$25) {
     $37 = 0; //@line 511
    } else {
     $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 514
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 515
     FUNCTION_TABLE_vii[$28 & 15]($17, $3); //@line 516
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 550; //@line 519
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 521
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 523
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 525
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 527
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 529
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 531
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 533
      sp = STACKTOP; //@line 534
      STACKTOP = sp; //@line 535
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 537
      $37 = HEAP32[$15 >> 2] | 0; //@line 539
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $37; //@line 545
   _equeue_event_delay($17, $2); //@line 546
   _equeue_event_dtor($17, 268); //@line 547
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 548
   $38 = _equeue_post($4, 269, $17) | 0; //@line 549
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 551; //@line 552
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 554
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 556
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 558
    sp = STACKTOP; //@line 559
    STACKTOP = sp; //@line 560
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 562
    $$0$i = $38; //@line 563
    break;
   }
  }
 } while (0);
 $42 = $1 + 16 | 0; //@line 568
 HEAP32[$42 >> 2] = $$0$i; //@line 569
 $43 = HEAP32[$15 >> 2] | 0; //@line 570
 do {
  if (!$43) {
   $49 = $$0$i; //@line 574
  } else {
   $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 577
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 578
   FUNCTION_TABLE_vi[$46 & 1023]($3); //@line 579
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 552; //@line 582
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 584
    sp = STACKTOP; //@line 585
    STACKTOP = sp; //@line 586
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 588
    $49 = HEAP32[$42 >> 2] | 0; //@line 590
    break;
   }
  }
 } while (0);
 if ($49 | 0) {
  STACKTOP = sp; //@line 597
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(4, sp) | 0; //@line 599
 _mbed_assert_internal(13452, 13470, 57); //@line 600
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 553; //@line 603
  sp = STACKTOP; //@line 604
  STACKTOP = sp; //@line 605
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 607
 STACKTOP = sp; //@line 608
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $10 = 0, $30 = 0, $36 = 0, $44 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 808
 STACKTOP = STACKTOP + 32 | 0; //@line 809
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 809
 $5 = sp; //@line 810
 HEAP8[$0 + 689 >> 0] = $1; //@line 813
 $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 816
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 817
 FUNCTION_TABLE_vii[$10 & 15]($0, $2); //@line 818
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 57; //@line 821
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 823
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 825
  HEAP16[$AsyncCtx + 12 >> 1] = $3; //@line 827
  HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 829
  sp = STACKTOP; //@line 830
  STACKTOP = sp; //@line 831
  return 0; //@line 831
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 833
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 834
 $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 835
 _wait_ms(1); //@line 836
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 58; //@line 839
  HEAP32[$AsyncCtx19 + 4 >> 2] = $5; //@line 841
  HEAP16[$AsyncCtx19 + 8 >> 1] = $3; //@line 843
  HEAP32[$AsyncCtx19 + 12 >> 2] = $4; //@line 845
  HEAP32[$AsyncCtx19 + 16 >> 2] = $0; //@line 847
  sp = STACKTOP; //@line 848
  STACKTOP = sp; //@line 849
  return 0; //@line 849
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 851
 $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 852
 __ZN4mbed5TimerC2Ev($5); //@line 853
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 59; //@line 856
  HEAP32[$AsyncCtx6 + 4 >> 2] = $5; //@line 858
  HEAP16[$AsyncCtx6 + 8 >> 1] = $3; //@line 860
  HEAP32[$AsyncCtx6 + 12 >> 2] = $4; //@line 862
  HEAP32[$AsyncCtx6 + 16 >> 2] = $0; //@line 864
  HEAP32[$AsyncCtx6 + 20 >> 2] = $5; //@line 866
  sp = STACKTOP; //@line 867
  STACKTOP = sp; //@line 868
  return 0; //@line 868
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 870
 $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 871
 __ZN4mbed5Timer5startEv($5); //@line 872
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 60; //@line 875
  HEAP16[$AsyncCtx9 + 4 >> 1] = $3; //@line 877
  HEAP32[$AsyncCtx9 + 8 >> 2] = $5; //@line 879
  HEAP32[$AsyncCtx9 + 12 >> 2] = $4; //@line 881
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 883
  HEAP32[$AsyncCtx9 + 20 >> 2] = $5; //@line 885
  sp = STACKTOP; //@line 886
  STACKTOP = sp; //@line 887
  return 0; //@line 887
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 889
 L13 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 893
   $30 = __ZN4mbed5Timer7read_msEv($5) | 0; //@line 894
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 61; //@line 897
    HEAP32[$AsyncCtx15 + 4 >> 2] = $4; //@line 899
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 901
    HEAP32[$AsyncCtx15 + 12 >> 2] = $5; //@line 903
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 905
    sp = STACKTOP; //@line 906
    STACKTOP = sp; //@line 907
    return 0; //@line 907
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 909
    $$0$off0 = ($30 | 0) >= ($4 | 0); //@line 911
    break;
   }
  } else {
   while (1) {
    $AsyncCtx12 = _emscripten_alloc_async_context(20, sp) | 0; //@line 916
    $36 = __ZN4mbed5Timer7read_msEv($5) | 0; //@line 917
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 922
    if (($36 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 925
     break L13;
    }
   }
   HEAP32[$AsyncCtx12 >> 2] = 62; //@line 929
   HEAP32[$AsyncCtx12 + 4 >> 2] = $4; //@line 931
   HEAP32[$AsyncCtx12 + 8 >> 2] = $5; //@line 933
   HEAP32[$AsyncCtx12 + 12 >> 2] = $0; //@line 935
   HEAP32[$AsyncCtx12 + 16 >> 2] = $5; //@line 937
   sp = STACKTOP; //@line 938
   STACKTOP = sp; //@line 939
   return 0; //@line 939
  }
 } while (0);
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 944
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 945
 FUNCTION_TABLE_vi[$44 & 1023]($0); //@line 946
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 63; //@line 949
  HEAP32[$AsyncCtx3 + 4 >> 2] = $5; //@line 951
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 953
  HEAP8[$AsyncCtx3 + 12 >> 0] = $$0$off0 & 1; //@line 956
  sp = STACKTOP; //@line 957
  STACKTOP = sp; //@line 958
  return 0; //@line 958
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 960
  __ZN4mbed5TimerD2Ev($5); //@line 961
  STACKTOP = sp; //@line 962
  return $$0$off0 | 0; //@line 962
 }
 return 0; //@line 964
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $23 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $44 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 14327
 STACKTOP = STACKTOP + 16 | 0; //@line 14328
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14328
 $vararg_buffer1 = sp + 8 | 0; //@line 14329
 $vararg_buffer = sp; //@line 14330
 $1 = $0 + 1699 | 0; //@line 14331
 if ((HEAPU8[$1 >> 0] | 0) > (HEAPU8[$0 + 1698 >> 0] | 0)) {
  if ((HEAP32[$0 + 2380 >> 2] | 0) != 2) {
   STACKTOP = sp; //@line 14341
   return;
  }
  HEAP32[$0 + 2056 >> 2] = 1; //@line 14344
  $10 = $0 + 1996 | 0; //@line 14345
  $11 = $0 + 2008 | 0; //@line 14346
  $12 = HEAP32[$11 >> 2] | 0; //@line 14347
  do {
   if (!$12) {
    $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14351
    _mbed_assert_internal(14775, 14780, 528); //@line 14352
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 424; //@line 14355
     HEAP32[$AsyncCtx20 + 4 >> 2] = $11; //@line 14357
     HEAP32[$AsyncCtx20 + 8 >> 2] = $10; //@line 14359
     sp = STACKTOP; //@line 14360
     STACKTOP = sp; //@line 14361
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 14363
     $17 = HEAP32[$11 >> 2] | 0; //@line 14365
     break;
    }
   } else {
    $17 = $12; //@line 14369
   }
  } while (0);
  $16 = HEAP32[$17 >> 2] | 0; //@line 14372
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14373
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 14374
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 425; //@line 14377
   sp = STACKTOP; //@line 14378
   STACKTOP = sp; //@line 14379
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14381
  STACKTOP = sp; //@line 14382
  return;
 }
 _mbed_tracef(16, 12685, 13066, $vararg_buffer); //@line 14384
 $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14386
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 14387
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 426; //@line 14390
  HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 14392
  HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 14394
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer1; //@line 14396
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 14398
  sp = STACKTOP; //@line 14399
  STACKTOP = sp; //@line 14400
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14402
 $23 = HEAP8[$1 >> 0] | 0; //@line 14403
 if (!($23 & 1)) {
  $34 = $23; //@line 14407
 } else {
  if (!(HEAP8[$0 + 1936 >> 0] | 0)) {
   $34 = $23; //@line 14413
  } else {
   _mbed_tracef(16, 12685, 13100, $vararg_buffer1); //@line 14415
   $30 = $0 + 1877 | 0; //@line 14417
   HEAP8[$30 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0 + 4 | 0, HEAP8[$30 >> 0] | 0) | 0; //@line 14420
   $34 = HEAP8[$1 >> 0] | 0; //@line 14422
  }
 }
 $33 = $0 + 2063 | 0; //@line 14425
 HEAP8[$33 >> 0] = $34; //@line 14426
 $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14427
 $35 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 14428
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 427; //@line 14431
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 14433
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 14435
  HEAP32[$AsyncCtx9 + 12 >> 2] = $33; //@line 14437
  sp = STACKTOP; //@line 14438
  STACKTOP = sp; //@line 14439
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14441
 do {
  if ($35 | 0) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 14446
   HEAP8[$0 + 1177 >> 0] = 0; //@line 14448
   HEAP8[$0 + 2062 >> 0] = 0; //@line 14450
   HEAP8[$33 >> 0] = HEAP8[$1 >> 0] | 0; //@line 14452
   $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14453
   $44 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 14454
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 428; //@line 14457
    HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 14459
    sp = STACKTOP; //@line 14460
    STACKTOP = sp; //@line 14461
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 14463
   if ($44 | 0) {
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14466
    _mbed_assert_internal(12912, 12940, 953); //@line 14467
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 429; //@line 14470
     HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 14472
     sp = STACKTOP; //@line 14473
     STACKTOP = sp; //@line 14474
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 14476
     break;
    }
   }
  }
 } while (0);
 HEAP8[$1 >> 0] = (HEAP8[$1 >> 0] | 0) + 1 << 24 >> 24; //@line 14484
 STACKTOP = sp; //@line 14485
 return;
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $63 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $90 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8716
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8718
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8720
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $104 = HEAP32[$2 >> 2] | 0; //@line 8726
  $105 = $104 + 48 | 0; //@line 8727
  $106 = $105; //@line 8728
  $107 = $106; //@line 8729
  $108 = HEAP32[$107 >> 2] | 0; //@line 8730
  $109 = $106 + 4 | 0; //@line 8731
  $110 = $109; //@line 8732
  $111 = HEAP32[$110 >> 2] | 0; //@line 8733
  $112 = ___async_retval; //@line 8734
  $113 = $112; //@line 8735
  $114 = $113; //@line 8736
  HEAP32[$114 >> 2] = $108; //@line 8737
  $115 = $113 + 4 | 0; //@line 8738
  $116 = $115; //@line 8739
  HEAP32[$116 >> 2] = $111; //@line 8740
  return;
 }
 $10 = $4 + 32 | 0; //@line 8743
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 8748
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 8749
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 8751
 do {
  if (($17 | 0) == 1e6) {
   $96 = $15; //@line 8755
   $97 = 0; //@line 8755
  } else {
   $20 = HEAP8[$4 + 57 >> 0] | 0; //@line 8758
   $22 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 8760
   $23 = tempRet0; //@line 8761
   if (!($20 << 24 >> 24)) {
    $57 = ___udivdi3($22 | 0, $23 | 0, $17 | 0, 0) | 0; //@line 8763
    $58 = tempRet0; //@line 8764
    $59 = ___muldi3($57 | 0, $58 | 0, $17 | 0, 0) | 0; //@line 8765
    $61 = _i64Subtract($22 | 0, $23 | 0, $59 | 0, tempRet0 | 0) | 0; //@line 8767
    $63 = $4 + 40 | 0; //@line 8769
    $64 = $63; //@line 8770
    $70 = _i64Add($61 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 8776
    $71 = tempRet0; //@line 8777
    $72 = $63; //@line 8778
    HEAP32[$72 >> 2] = $70; //@line 8780
    HEAP32[$72 + 4 >> 2] = $71; //@line 8783
    if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $17 >>> 0) {
     $96 = $57; //@line 8790
     $97 = $58; //@line 8790
     break;
    }
    $81 = _i64Add($57 | 0, $58 | 0, 1, 0) | 0; //@line 8793
    $82 = tempRet0; //@line 8794
    $83 = _i64Subtract($70 | 0, $71 | 0, $17 | 0, 0) | 0; //@line 8795
    $85 = $63; //@line 8797
    HEAP32[$85 >> 2] = $83; //@line 8799
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 8802
    $96 = $81; //@line 8803
    $97 = $82; //@line 8803
    break;
   } else {
    $24 = $20 & 255; //@line 8806
    $25 = _bitshift64Lshr($22 | 0, $23 | 0, $24 | 0) | 0; //@line 8807
    $26 = tempRet0; //@line 8808
    $27 = _bitshift64Shl($25 | 0, $26 | 0, $24 | 0) | 0; //@line 8809
    $29 = _i64Subtract($22 | 0, $23 | 0, $27 | 0, tempRet0 | 0) | 0; //@line 8811
    $31 = $4 + 40 | 0; //@line 8813
    $32 = $31; //@line 8814
    $38 = _i64Add(HEAP32[$32 >> 2] | 0, HEAP32[$32 + 4 >> 2] | 0, $29 | 0, tempRet0 | 0) | 0; //@line 8820
    $39 = tempRet0; //@line 8821
    $40 = $31; //@line 8822
    HEAP32[$40 >> 2] = $38; //@line 8824
    HEAP32[$40 + 4 >> 2] = $39; //@line 8827
    if ($39 >>> 0 < 0 | ($39 | 0) == 0 & $38 >>> 0 < $17 >>> 0) {
     $96 = $25; //@line 8834
     $97 = $26; //@line 8834
     break;
    }
    $49 = _i64Add($25 | 0, $26 | 0, 1, 0) | 0; //@line 8837
    $50 = tempRet0; //@line 8838
    $51 = _i64Subtract($38 | 0, $39 | 0, $17 | 0, 0) | 0; //@line 8839
    $53 = $31; //@line 8841
    HEAP32[$53 >> 2] = $51; //@line 8843
    HEAP32[$53 + 4 >> 2] = tempRet0; //@line 8846
    $96 = $49; //@line 8847
    $97 = $50; //@line 8847
    break;
   }
  }
 } while (0);
 $89 = $4 + 48 | 0; //@line 8852
 $90 = $89; //@line 8853
 $98 = _i64Add(HEAP32[$90 >> 2] | 0, HEAP32[$90 + 4 >> 2] | 0, $96 | 0, $97 | 0) | 0; //@line 8859
 $100 = $89; //@line 8861
 HEAP32[$100 >> 2] = $98; //@line 8863
 HEAP32[$100 + 4 >> 2] = tempRet0; //@line 8866
 $104 = HEAP32[$2 >> 2] | 0; //@line 8867
 $105 = $104 + 48 | 0; //@line 8868
 $106 = $105; //@line 8869
 $107 = $106; //@line 8870
 $108 = HEAP32[$107 >> 2] | 0; //@line 8871
 $109 = $106 + 4 | 0; //@line 8872
 $110 = $109; //@line 8873
 $111 = HEAP32[$110 >> 2] | 0; //@line 8874
 $112 = ___async_retval; //@line 8875
 $113 = $112; //@line 8876
 $114 = $113; //@line 8877
 HEAP32[$114 >> 2] = $108; //@line 8878
 $115 = $113 + 4 | 0; //@line 8879
 $116 = $115; //@line 8880
 HEAP32[$116 >> 2] = $111; //@line 8881
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_251($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7695
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7699
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7701
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7703
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 7707
 $11 = $4 + 32 | 0; //@line 7708
 $12 = $4 + 44 | 0; //@line 7709
 $13 = HEAP32[$12 >> 2] | 0; //@line 7710
 if (!$13) {
  HEAP32[___async_retval >> 2] = 0; //@line 7714
  return;
 }
 $15 = $6 + 2532 | 0; //@line 7717
 if (($15 | 0) == ($11 | 0)) {
  $36 = HEAP32[$13 + 4 >> 2] | 0; //@line 7721
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 7722
  FUNCTION_TABLE_vii[$36 & 15]($8, $11); //@line 7723
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 7726
   $37 = $ReallocAsyncCtx7 + 4 | 0; //@line 7727
   HEAP32[$37 >> 2] = $12; //@line 7728
   $38 = $ReallocAsyncCtx7 + 8 | 0; //@line 7729
   HEAP32[$38 >> 2] = $6; //@line 7730
   $39 = $ReallocAsyncCtx7 + 12 | 0; //@line 7731
   HEAP32[$39 >> 2] = $8; //@line 7732
   sp = STACKTOP; //@line 7733
   return;
  }
  ___async_unwind = 0; //@line 7736
  HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 7737
  $37 = $ReallocAsyncCtx7 + 4 | 0; //@line 7738
  HEAP32[$37 >> 2] = $12; //@line 7739
  $38 = $ReallocAsyncCtx7 + 8 | 0; //@line 7740
  HEAP32[$38 >> 2] = $6; //@line 7741
  $39 = $ReallocAsyncCtx7 + 12 | 0; //@line 7742
  HEAP32[$39 >> 2] = $8; //@line 7743
  sp = STACKTOP; //@line 7744
  return;
 }
 $17 = $6 + 2544 | 0; //@line 7747
 $18 = HEAP32[$17 >> 2] | 0; //@line 7748
 if (!$18) {
  $29 = HEAP32[$13 + 4 >> 2] | 0; //@line 7752
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 7753
  FUNCTION_TABLE_vii[$29 & 15]($15, $11); //@line 7754
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 7757
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 7758
   HEAP32[$30 >> 2] = $12; //@line 7759
   $31 = $ReallocAsyncCtx6 + 8 | 0; //@line 7760
   HEAP32[$31 >> 2] = $17; //@line 7761
   $32 = $ReallocAsyncCtx6 + 12 | 0; //@line 7762
   HEAP32[$32 >> 2] = $6; //@line 7763
   $33 = $ReallocAsyncCtx6 + 16 | 0; //@line 7764
   HEAP32[$33 >> 2] = $8; //@line 7765
   $34 = $ReallocAsyncCtx6 + 20 | 0; //@line 7766
   HEAP32[$34 >> 2] = $11; //@line 7767
   sp = STACKTOP; //@line 7768
   return;
  }
  ___async_unwind = 0; //@line 7771
  HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 7772
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 7773
  HEAP32[$30 >> 2] = $12; //@line 7774
  $31 = $ReallocAsyncCtx6 + 8 | 0; //@line 7775
  HEAP32[$31 >> 2] = $17; //@line 7776
  $32 = $ReallocAsyncCtx6 + 12 | 0; //@line 7777
  HEAP32[$32 >> 2] = $6; //@line 7778
  $33 = $ReallocAsyncCtx6 + 16 | 0; //@line 7779
  HEAP32[$33 >> 2] = $8; //@line 7780
  $34 = $ReallocAsyncCtx6 + 20 | 0; //@line 7781
  HEAP32[$34 >> 2] = $11; //@line 7782
  sp = STACKTOP; //@line 7783
  return;
 } else {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 7787
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 7788
  FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 7789
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 7792
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 7793
   HEAP32[$22 >> 2] = $12; //@line 7794
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 7795
   HEAP32[$23 >> 2] = $17; //@line 7796
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 7797
   HEAP32[$24 >> 2] = $6; //@line 7798
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 7799
   HEAP32[$25 >> 2] = $15; //@line 7800
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 7801
   HEAP32[$26 >> 2] = $11; //@line 7802
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 7803
   HEAP32[$27 >> 2] = $8; //@line 7804
   sp = STACKTOP; //@line 7805
   return;
  }
  ___async_unwind = 0; //@line 7808
  HEAP32[$ReallocAsyncCtx5 >> 2] = 342; //@line 7809
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 7810
  HEAP32[$22 >> 2] = $12; //@line 7811
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 7812
  HEAP32[$23 >> 2] = $17; //@line 7813
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 7814
  HEAP32[$24 >> 2] = $6; //@line 7815
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 7816
  HEAP32[$25 >> 2] = $15; //@line 7817
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 7818
  HEAP32[$26 >> 2] = $11; //@line 7819
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 7820
  HEAP32[$27 >> 2] = $8; //@line 7821
  sp = STACKTOP; //@line 7822
  return;
 }
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6452
 STACKTOP = STACKTOP + 32 | 0; //@line 6453
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6453
 $2 = sp + 8 | 0; //@line 6455
 $3 = $0 + 2496 | 0; //@line 6456
 switch (HEAP32[$3 >> 2] | 0) {
 case 3:
  {
   HEAP32[$3 >> 2] = 1; //@line 6460
   _mbed_tracef(16, 11997, 12172, sp); //@line 6461
   $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6462
   $5 = __ZN7LoRaMac4joinEb($0, 1) | 0; //@line 6463
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 219; //@line 6466
    HEAP32[$AsyncCtx10 + 4 >> 2] = $1; //@line 6468
    sp = STACKTOP; //@line 6469
    STACKTOP = sp; //@line 6470
    return;
   }
   _emscripten_free_async_context($AsyncCtx10 | 0); //@line 6472
   HEAP32[$1 >> 2] = $5; //@line 6473
   STACKTOP = sp; //@line 6474
   return;
  }
 case 4:
  {
   HEAP32[$3 >> 2] = 1; //@line 6478
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6479
   $7 = __ZN7LoRaMac24continue_joining_processEv($0) | 0; //@line 6480
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 220; //@line 6483
    HEAP32[$AsyncCtx6 + 4 >> 2] = $2; //@line 6485
    HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 6487
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 6489
    sp = STACKTOP; //@line 6490
    STACKTOP = sp; //@line 6491
    return;
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 6493
   if ($7) {
    STACKTOP = sp; //@line 6495
    return;
   }
   $11 = $0 + 2512 | 0; //@line 6497
   $12 = HEAP32[$11 >> 2] | 0; //@line 6498
   do {
    if ($12 | 0) {
     $16 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6504
     $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 6506
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6507
     FUNCTION_TABLE_vii[$18 & 15]($2, $0 + 2500 | 0); //@line 6508
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 221; //@line 6511
      HEAP32[$AsyncCtx + 4 >> 2] = $11; //@line 6513
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6515
      HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 6517
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6519
      HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 6521
      sp = STACKTOP; //@line 6522
      STACKTOP = sp; //@line 6523
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 6525
     $24 = $2 + 12 | 0; //@line 6527
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2]; //@line 6528
     $AsyncCtx13 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6529
     $25 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($16, $2, 10) | 0; //@line 6530
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 222; //@line 6533
      HEAP32[$AsyncCtx13 + 4 >> 2] = $24; //@line 6535
      HEAP32[$AsyncCtx13 + 8 >> 2] = $2; //@line 6537
      HEAP32[$AsyncCtx13 + 12 >> 2] = $3; //@line 6539
      sp = STACKTOP; //@line 6540
      STACKTOP = sp; //@line 6541
      return;
     }
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6543
     $29 = HEAP32[$24 >> 2] | 0; //@line 6544
     do {
      if ($29 | 0) {
       $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 6549
       $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6550
       FUNCTION_TABLE_vi[$32 & 1023]($2); //@line 6551
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 223; //@line 6554
        HEAP32[$AsyncCtx2 + 4 >> 2] = $25; //@line 6556
        HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 6558
        HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 6560
        sp = STACKTOP; //@line 6561
        STACKTOP = sp; //@line 6562
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6564
        break;
       }
      }
     } while (0);
     if (!$25) {
      $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6571
      _mbed_assert_internal(11890, 11899, 778); //@line 6572
      if (___async) {
       HEAP32[$AsyncCtx17 >> 2] = 224; //@line 6575
       HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 6577
       HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 6579
       sp = STACKTOP; //@line 6580
       STACKTOP = sp; //@line 6581
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6583
       break;
      }
     }
    }
   } while (0);
   HEAP32[$3 >> 2] = 2; //@line 6589
   STACKTOP = sp; //@line 6590
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 6594
   return;
  }
 }
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $13 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $27 = 0, $28 = 0, $35 = 0, $39 = 0, $50 = 0, $56 = 0, $73 = 0, $74 = 0, $75 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11702
 $13 = HEAP8[$1 + ($3 + 8 & 255) >> 0] | 0; //@line 11706
 $17 = $3 + 9 & 255; //@line 11710
 $18 = ($2 & 65535) + 252 - $17 | 0; //@line 11711
 $19 = $18 & 255; //@line 11712
 HEAP8[$0 + 2025 >> 0] = $13; //@line 11714
 $22 = $3 << 24 >> 24 == 0; //@line 11716
 if ($13 << 24 >> 24) {
  do {
   if (!$22) {
    $50 = $0 + 476 | 0; //@line 11720
    $AsyncCtx7 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11726
    $56 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($50, $1, 8, $17 + 255 & 255, $9, $0 + 2084 | 0, $0 + 1876 | 0, $0 + 4 | 0) | 0; //@line 11727
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 375; //@line 11730
     HEAP32[$AsyncCtx7 + 4 >> 2] = $50; //@line 11732
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 11734
     HEAP32[$AsyncCtx7 + 12 >> 2] = $1; //@line 11736
     HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 11738
     HEAP32[$AsyncCtx7 + 20 >> 2] = $18; //@line 11740
     HEAP32[$AsyncCtx7 + 24 >> 2] = $5; //@line 11742
     HEAP32[$AsyncCtx7 + 28 >> 2] = $6; //@line 11744
     HEAP32[$AsyncCtx7 + 32 >> 2] = $7; //@line 11746
     sp = STACKTOP; //@line 11747
     return;
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11750
    if (!$56) {
     if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($50) | 0)) {
      break;
     }
     HEAP32[$0 + 2076 >> 2] = 4; //@line 11758
     HEAP8[$0 + 2080 >> 0] = 1; //@line 11760
     __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($50); //@line 11761
     break;
    } else {
     HEAP32[$0 + 2020 >> 2] = 1; //@line 11765
     return;
    }
   }
  } while (0);
  $73 = $18 & 255; //@line 11773
  $74 = $0 + 1442 | 0; //@line 11774
  $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11775
  $75 = __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $1 + $17 | 0, $73, $5, 128, $6, 1, $7, $74) | 0; //@line 11776
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 376; //@line 11779
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11781
   HEAP32[$AsyncCtx + 8 >> 2] = $74; //@line 11783
   HEAP16[$AsyncCtx + 12 >> 1] = $73; //@line 11785
   sp = STACKTOP; //@line 11786
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11789
  if (!$75) {
   HEAP32[$0 + 2028 >> 2] = $74; //@line 11793
   HEAP16[$0 + 2032 >> 1] = $73; //@line 11795
   HEAP8[$0 + 2034 >> 0] = 1; //@line 11797
   return;
  } else {
   HEAP32[$0 + 2020 >> 2] = 13; //@line 11801
   return;
  }
 }
 if (!$22) {
  HEAP8[$0 + 2012 >> 0] = 0; //@line 11807
  HEAP8[$0 + 2062 >> 0] = 0; //@line 11809
  HEAP8[$0 + 2044 >> 0] = 0; //@line 11811
  return;
 }
 $27 = $0 + 1442 | 0; //@line 11818
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11819
 $28 = __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $1 + $17 | 0, $18 & 255, $4, 128, $6, 1, $7, $27) | 0; //@line 11820
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 373; //@line 11823
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11825
  HEAP32[$AsyncCtx3 + 8 >> 2] = $27; //@line 11827
  HEAP8[$AsyncCtx3 + 12 >> 0] = $19; //@line 11829
  HEAP8[$AsyncCtx3 + 13 >> 0] = $9; //@line 11831
  sp = STACKTOP; //@line 11832
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11835
 if ($28 | 0) {
  HEAP32[$0 + 2020 >> 2] = 13; //@line 11839
 }
 $35 = $0 + 476 | 0; //@line 11841
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11845
 $39 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($35, $27, 0, $19, $9, $0 + 2084 | 0, $0 + 1876 | 0, $0 + 4 | 0) | 0; //@line 11846
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 374; //@line 11849
  HEAP32[$AsyncCtx11 + 4 >> 2] = $35; //@line 11851
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 11853
  sp = STACKTOP; //@line 11854
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11857
 if ($39 | 0) {
  HEAP32[$0 + 2020 >> 2] = 1; //@line 11861
  return;
 }
 if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($35) | 0)) {
  return;
 }
 HEAP32[$0 + 2076 >> 2] = 4; //@line 11869
 HEAP8[$0 + 2080 >> 0] = 1; //@line 11871
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($35); //@line 11872
 return;
}
function _initialize__async_cb_212($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4737
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4741
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4743
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4745
 $10 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] | 0; //@line 4747
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 4751
  _mbed_assert_internal(14267, 14269, 55); //@line 4752
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 606; //@line 4755
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 4756
   HEAP32[$12 >> 2] = $4; //@line 4757
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 4758
   HEAP32[$13 >> 2] = 1e6; //@line 4759
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 4760
   HEAP8[$14 >> 0] = 0; //@line 4761
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 4762
   HEAP32[$15 >> 2] = $6; //@line 4763
   $16 = $ReallocAsyncCtx6 + 20 | 0; //@line 4764
   HEAP32[$16 >> 2] = $8; //@line 4765
   sp = STACKTOP; //@line 4766
   return;
  }
  ___async_unwind = 0; //@line 4769
  HEAP32[$ReallocAsyncCtx6 >> 2] = 606; //@line 4770
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 4771
  HEAP32[$12 >> 2] = $4; //@line 4772
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 4773
  HEAP32[$13 >> 2] = 1e6; //@line 4774
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 4775
  HEAP8[$14 >> 0] = 0; //@line 4776
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 4777
  HEAP32[$15 >> 2] = $6; //@line 4778
  $16 = $ReallocAsyncCtx6 + 20 | 0; //@line 4779
  HEAP32[$16 >> 2] = $8; //@line 4780
  sp = STACKTOP; //@line 4781
  return;
 } else {
  $18 = 7 << $10 + -4; //@line 4785
  $19 = ___muldi3($18 | 0, 0, 1e6, 0) | 0; //@line 4786
  $20 = tempRet0; //@line 4787
  $21 = _i64Add(1e6, 0, -1, -1) | 0; //@line 4788
  $23 = _i64Add($21 | 0, tempRet0 | 0, $19 | 0, $20 | 0) | 0; //@line 4790
  $25 = ___udivdi3($23 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 4792
  $26 = tempRet0; //@line 4793
  $27 = HEAP32[$4 >> 2] | 0; //@line 4794
  HEAP32[$27 >> 2] = 0; //@line 4795
  HEAP32[$27 + 4 >> 2] = 0; //@line 4797
  $31 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 4800
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 4801
  $32 = FUNCTION_TABLE_i[$31 & 7]() | 0; //@line 4802
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 4805
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 4806
   HEAP32[$33 >> 2] = $4; //@line 4807
   $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 4808
   HEAP32[$34 >> 2] = 1e6; //@line 4809
   $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 4810
   HEAP8[$35 >> 0] = 0; //@line 4811
   $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 4812
   HEAP32[$36 >> 2] = $10; //@line 4813
   $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 4814
   HEAP32[$37 >> 2] = $18; //@line 4815
   $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 4816
   $39 = $38; //@line 4817
   $40 = $39; //@line 4818
   HEAP32[$40 >> 2] = $25; //@line 4819
   $41 = $39 + 4 | 0; //@line 4820
   $42 = $41; //@line 4821
   HEAP32[$42 >> 2] = $26; //@line 4822
   $43 = $ReallocAsyncCtx3 + 32 | 0; //@line 4823
   HEAP32[$43 >> 2] = $6; //@line 4824
   $44 = $ReallocAsyncCtx3 + 36 | 0; //@line 4825
   HEAP32[$44 >> 2] = $8; //@line 4826
   sp = STACKTOP; //@line 4827
   return;
  }
  HEAP32[___async_retval >> 2] = $32; //@line 4831
  ___async_unwind = 0; //@line 4832
  HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 4833
  $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 4834
  HEAP32[$33 >> 2] = $4; //@line 4835
  $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 4836
  HEAP32[$34 >> 2] = 1e6; //@line 4837
  $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 4838
  HEAP8[$35 >> 0] = 0; //@line 4839
  $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 4840
  HEAP32[$36 >> 2] = $10; //@line 4841
  $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 4842
  HEAP32[$37 >> 2] = $18; //@line 4843
  $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 4844
  $39 = $38; //@line 4845
  $40 = $39; //@line 4846
  HEAP32[$40 >> 2] = $25; //@line 4847
  $41 = $39 + 4 | 0; //@line 4848
  $42 = $41; //@line 4849
  HEAP32[$42 >> 2] = $26; //@line 4850
  $43 = $ReallocAsyncCtx3 + 32 | 0; //@line 4851
  HEAP32[$43 >> 2] = $6; //@line 4852
  $44 = $ReallocAsyncCtx3 + 36 | 0; //@line 4853
  HEAP32[$44 >> 2] = $8; //@line 4854
  sp = STACKTOP; //@line 4855
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $50 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27227
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27229
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27231
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27233
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27235
 $10 = $0 + 24 | 0; //@line 27237
 $12 = HEAP32[$10 >> 2] | 0; //@line 27239
 $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 27242
 $17 = HEAP32[$0 + 32 >> 2] | 0; //@line 27244
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 27246
 $21 = HEAP32[$0 + 40 >> 2] | 0; //@line 27248
 $22 = HEAP32[$17 >> 2] | 0; //@line 27249
 if ($22 | 0) {
  $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 27253
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 27254
  FUNCTION_TABLE_vii[$25 & 15]($21, $19); //@line 27255
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 84; //@line 27258
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 27259
   HEAP32[$26 >> 2] = $17; //@line 27260
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 27261
   HEAP32[$27 >> 2] = $6; //@line 27262
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 27263
   HEAP32[$28 >> 2] = $8; //@line 27264
   $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 27265
   $30 = $29; //@line 27266
   $31 = $30; //@line 27267
   HEAP32[$31 >> 2] = $12; //@line 27268
   $32 = $30 + 4 | 0; //@line 27269
   $33 = $32; //@line 27270
   HEAP32[$33 >> 2] = $15; //@line 27271
   $34 = $ReallocAsyncCtx2 + 24 | 0; //@line 27272
   HEAP32[$34 >> 2] = $2; //@line 27273
   $35 = $ReallocAsyncCtx2 + 28 | 0; //@line 27274
   HEAP32[$35 >> 2] = $19; //@line 27275
   $36 = $ReallocAsyncCtx2 + 32 | 0; //@line 27276
   HEAP32[$36 >> 2] = $4; //@line 27277
   sp = STACKTOP; //@line 27278
   return;
  }
  ___async_unwind = 0; //@line 27281
  HEAP32[$ReallocAsyncCtx2 >> 2] = 84; //@line 27282
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 27283
  HEAP32[$26 >> 2] = $17; //@line 27284
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 27285
  HEAP32[$27 >> 2] = $6; //@line 27286
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 27287
  HEAP32[$28 >> 2] = $8; //@line 27288
  $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 27289
  $30 = $29; //@line 27290
  $31 = $30; //@line 27291
  HEAP32[$31 >> 2] = $12; //@line 27292
  $32 = $30 + 4 | 0; //@line 27293
  $33 = $32; //@line 27294
  HEAP32[$33 >> 2] = $15; //@line 27295
  $34 = $ReallocAsyncCtx2 + 24 | 0; //@line 27296
  HEAP32[$34 >> 2] = $2; //@line 27297
  $35 = $ReallocAsyncCtx2 + 28 | 0; //@line 27298
  HEAP32[$35 >> 2] = $19; //@line 27299
  $36 = $ReallocAsyncCtx2 + 32 | 0; //@line 27300
  HEAP32[$36 >> 2] = $4; //@line 27301
  sp = STACKTOP; //@line 27302
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 27305
 __ZN4mbed6Ticker5setupEy($8, $12, $15); //@line 27306
 $37 = HEAP32[$17 >> 2] | 0; //@line 27307
 if ($37 | 0) {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 27311
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 27312
  FUNCTION_TABLE_vi[$40 & 1023]($19); //@line 27313
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 27316
   $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 27317
   HEAP32[$41 >> 2] = $2; //@line 27318
   $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 27319
   HEAP32[$42 >> 2] = $4; //@line 27320
   sp = STACKTOP; //@line 27321
   return;
  }
  ___async_unwind = 0; //@line 27324
  HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 27325
  $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 27326
  HEAP32[$41 >> 2] = $2; //@line 27327
  $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 27328
  HEAP32[$42 >> 2] = $4; //@line 27329
  sp = STACKTOP; //@line 27330
  return;
 }
 if (!(HEAP8[$2 + 770 >> 0] | 0)) {
  HEAP8[$4 >> 0] = 0; //@line 27337
 }
 $47 = HEAP32[$2 + 788 >> 2] | 0; //@line 27340
 if (!$47) {
  return;
 }
 $50 = HEAP32[$47 + 60 >> 2] | 0; //@line 27346
 if (!$50) {
  return;
 }
 $53 = HEAP32[$50 >> 2] | 0; //@line 27352
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 27353
 FUNCTION_TABLE_vi[$53 & 1023]($47 + 48 | 0); //@line 27354
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 27357
  sp = STACKTOP; //@line 27358
  return;
 }
 ___async_unwind = 0; //@line 27361
 HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 27362
 sp = STACKTOP; //@line 27363
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_201($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 3461
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3463
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3465
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3467
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3469
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3471
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3473
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3475
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3477
 $19 = HEAP32[HEAP32[$0 + 36 >> 2] >> 2] | 0; //@line 3480
 if (!$19) {
  $31 = $14 + 12 | 0; //@line 3484
  HEAP32[$14 >> 2] = 449; //@line 3485
  HEAP32[$14 + 4 >> 2] = 0; //@line 3487
  HEAP32[$14 + 8 >> 2] = $4; //@line 3489
  HEAP32[$31 >> 2] = 860; //@line 3490
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 3491
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($2, $4 + 1816 | 0, $14); //@line 3492
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 450; //@line 3495
   $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 3496
   HEAP32[$32 >> 2] = $2; //@line 3497
   $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 3498
   HEAP32[$33 >> 2] = $4; //@line 3499
   $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 3500
   HEAP32[$34 >> 2] = $6; //@line 3501
   $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 3502
   HEAP32[$35 >> 2] = $8; //@line 3503
   $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 3504
   HEAP32[$36 >> 2] = $10; //@line 3505
   $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 3506
   HEAP32[$37 >> 2] = $16; //@line 3507
   $38 = $ReallocAsyncCtx7 + 28 | 0; //@line 3508
   HEAP32[$38 >> 2] = $31; //@line 3509
   $39 = $ReallocAsyncCtx7 + 32 | 0; //@line 3510
   HEAP32[$39 >> 2] = $14; //@line 3511
   sp = STACKTOP; //@line 3512
   return;
  }
  ___async_unwind = 0; //@line 3515
  HEAP32[$ReallocAsyncCtx7 >> 2] = 450; //@line 3516
  $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 3517
  HEAP32[$32 >> 2] = $2; //@line 3518
  $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 3519
  HEAP32[$33 >> 2] = $4; //@line 3520
  $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 3521
  HEAP32[$34 >> 2] = $6; //@line 3522
  $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 3523
  HEAP32[$35 >> 2] = $8; //@line 3524
  $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 3525
  HEAP32[$36 >> 2] = $10; //@line 3526
  $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 3527
  HEAP32[$37 >> 2] = $16; //@line 3528
  $38 = $ReallocAsyncCtx7 + 28 | 0; //@line 3529
  HEAP32[$38 >> 2] = $31; //@line 3530
  $39 = $ReallocAsyncCtx7 + 32 | 0; //@line 3531
  HEAP32[$39 >> 2] = $14; //@line 3532
  sp = STACKTOP; //@line 3533
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 3537
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 3538
  FUNCTION_TABLE_vi[$22 & 1023]($12); //@line 3539
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 448; //@line 3542
   $23 = $ReallocAsyncCtx + 4 | 0; //@line 3543
   HEAP32[$23 >> 2] = $4; //@line 3544
   $24 = $ReallocAsyncCtx + 8 | 0; //@line 3545
   HEAP32[$24 >> 2] = $14; //@line 3546
   $25 = $ReallocAsyncCtx + 12 | 0; //@line 3547
   HEAP32[$25 >> 2] = $2; //@line 3548
   $26 = $ReallocAsyncCtx + 16 | 0; //@line 3549
   HEAP32[$26 >> 2] = $16; //@line 3550
   $27 = $ReallocAsyncCtx + 20 | 0; //@line 3551
   HEAP32[$27 >> 2] = $10; //@line 3552
   $28 = $ReallocAsyncCtx + 24 | 0; //@line 3553
   HEAP32[$28 >> 2] = $6; //@line 3554
   $29 = $ReallocAsyncCtx + 28 | 0; //@line 3555
   HEAP32[$29 >> 2] = $8; //@line 3556
   sp = STACKTOP; //@line 3557
   return;
  }
  ___async_unwind = 0; //@line 3560
  HEAP32[$ReallocAsyncCtx >> 2] = 448; //@line 3561
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 3562
  HEAP32[$23 >> 2] = $4; //@line 3563
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 3564
  HEAP32[$24 >> 2] = $14; //@line 3565
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 3566
  HEAP32[$25 >> 2] = $2; //@line 3567
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 3568
  HEAP32[$26 >> 2] = $16; //@line 3569
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 3570
  HEAP32[$27 >> 2] = $10; //@line 3571
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 3572
  HEAP32[$28 >> 2] = $6; //@line 3573
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 3574
  HEAP32[$29 >> 2] = $8; //@line 3575
  sp = STACKTOP; //@line 3576
  return;
 }
}
function __ZN16SX1276_LoRaRadio8transmitEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $39 = 0, $43 = 0, $46 = 0, $51 = 0, $56 = 0, $57 = 0, $60 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 1664
 STACKTOP = STACKTOP + 32 | 0; //@line 1665
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1665
 $vararg_buffer = sp; //@line 1666
 $2 = sp + 16 | 0; //@line 1667
 $7 = HEAP8[$0 + 748 >> 0] | 0; //@line 1672
 $9 = HEAP32[$0 + 752 >> 2] | 0; //@line 1674
 $11 = HEAP32[$0 + 756 >> 2] | 0; //@line 1676
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 692 >> 2]; //@line 1677
 HEAP32[$vararg_buffer + 4 >> 2] = $7; //@line 1679
 HEAP32[$vararg_buffer + 8 >> 2] = $9; //@line 1681
 HEAP32[$vararg_buffer + 12 >> 2] = $11; //@line 1683
 _mbed_tracef(16, 11081, 11267, $vararg_buffer); //@line 1684
 HEAP8[$0 + 688 >> 0] = 2; //@line 1686
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1687
 $13 = $2 + 12 | 0; //@line 1688
 HEAP32[$2 >> 2] = 88; //@line 1689
 HEAP32[$2 + 4 >> 2] = 0; //@line 1691
 HEAP32[$2 + 8 >> 2] = $0; //@line 1693
 HEAP32[$13 >> 2] = 584; //@line 1694
 $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0; //@line 1697
 $18 = HEAP8[$0 + 782 >> 0] | 0; //@line 1699
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 1700
 $19 = FUNCTION_TABLE_iiii[$16 & 31]($0, 1, $18) | 0; //@line 1701
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 89; //@line 1704
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1706
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 1708
  HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 1710
  sp = STACKTOP; //@line 1711
  STACKTOP = sp; //@line 1712
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1714
 $23 = $0 + 1240 | 0; //@line 1715
 $25 = ($19 * 1e3 | 0) + 3e3 | 0; //@line 1717
 $26 = $0 + 1280 | 0; //@line 1718
 if (($26 | 0) != ($2 | 0)) {
  $28 = $0 + 1292 | 0; //@line 1721
  $29 = HEAP32[$28 >> 2] | 0; //@line 1722
  do {
   if ($29 | 0) {
    $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 1727
    $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1728
    FUNCTION_TABLE_vi[$32 & 1023]($26); //@line 1729
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 90; //@line 1732
     HEAP32[$AsyncCtx5 + 4 >> 2] = $13; //@line 1734
     HEAP32[$AsyncCtx5 + 8 >> 2] = $28; //@line 1736
     HEAP32[$AsyncCtx5 + 12 >> 2] = $26; //@line 1738
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 1740
     HEAP32[$AsyncCtx5 + 20 >> 2] = $23; //@line 1742
     $39 = $AsyncCtx5 + 24 | 0; //@line 1744
     HEAP32[$39 >> 2] = $25; //@line 1746
     HEAP32[$39 + 4 >> 2] = 0; //@line 1749
     sp = STACKTOP; //@line 1750
     STACKTOP = sp; //@line 1751
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx5 | 0); //@line 1753
     break;
    }
   }
  } while (0);
  $43 = HEAP32[$13 >> 2] | 0; //@line 1758
  do {
   if (!$43) {
    $56 = 0; //@line 1762
   } else {
    $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 1765
    $AsyncCtx8 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1766
    FUNCTION_TABLE_vii[$46 & 15]($26, $2); //@line 1767
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 91; //@line 1770
     HEAP32[$AsyncCtx8 + 4 >> 2] = $13; //@line 1772
     HEAP32[$AsyncCtx8 + 8 >> 2] = $28; //@line 1774
     HEAP32[$AsyncCtx8 + 12 >> 2] = $23; //@line 1776
     $51 = $AsyncCtx8 + 16 | 0; //@line 1778
     HEAP32[$51 >> 2] = $25; //@line 1780
     HEAP32[$51 + 4 >> 2] = 0; //@line 1783
     HEAP32[$AsyncCtx8 + 24 >> 2] = $2; //@line 1785
     sp = STACKTOP; //@line 1786
     STACKTOP = sp; //@line 1787
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 1789
     $56 = HEAP32[$13 >> 2] | 0; //@line 1791
     break;
    }
   }
  } while (0);
  HEAP32[$28 >> 2] = $56; //@line 1796
 }
 __ZN4mbed6Ticker5setupEy($23, $25, 0); //@line 1798
 $57 = HEAP32[$13 >> 2] | 0; //@line 1799
 if (!$57) {
  STACKTOP = sp; //@line 1802
  return;
 }
 $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 1805
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1806
 FUNCTION_TABLE_vi[$60 & 1023]($2); //@line 1807
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 92; //@line 1810
  sp = STACKTOP; //@line 1811
  STACKTOP = sp; //@line 1812
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 1814
 STACKTOP = sp; //@line 1815
 return;
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3288
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 3295
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 3300
 $11 = $0 + 128 | 0; //@line 3301
 _equeue_mutex_lock($11); //@line 3302
 $12 = $10 + 4 | 0; //@line 3303
 $13 = HEAP8[$12 >> 0] | 0; //@line 3304
 $14 = $13 & 255; //@line 3305
 $15 = HEAP32[$5 >> 2] | 0; //@line 3306
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 3310
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 3314
 HEAP32[$10 + 24 >> 2] = -1; //@line 3316
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 3321
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 3336
   $33 = HEAP32[$32 >> 2] | 0; //@line 3337
   $35 = $10 + 8 | 0; //@line 3339
   $36 = HEAP32[$35 >> 2] | 0; //@line 3340
   $37 = $33; //@line 3341
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 3343
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 3345
    $46 = HEAP32[$35 >> 2] | 0; //@line 3346
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 3349
     $49 = $46; //@line 3349
     label = 13; //@line 3350
    }
   } else {
    $38 = $33 + 8 | 0; //@line 3353
    HEAP32[$38 >> 2] = $36; //@line 3354
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 3359
    }
    $42 = $10 + 16 | 0; //@line 3361
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 3363
    $$sink$in$in$i = $42; //@line 3365
    $49 = HEAP32[$32 >> 2] | 0; //@line 3365
    label = 13; //@line 3366
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 3371
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 3380
   _equeue_mutex_unlock($11); //@line 3381
   $56 = $10 + 36 | 0; //@line 3382
   $57 = $56 + -36 | 0; //@line 3383
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 3385
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3389
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 3390
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 123; //@line 3393
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3395
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 3397
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 3399
      sp = STACKTOP; //@line 3400
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3403
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 3408
   _equeue_mutex_lock($64); //@line 3409
   $65 = $0 + 24 | 0; //@line 3410
   $66 = HEAP32[$65 >> 2] | 0; //@line 3411
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 3415
     label = 24; //@line 3416
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 3418
     $$025$i$i = $65; //@line 3419
     $70 = $66; //@line 3419
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 3421
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 3426
      $73 = HEAP32[$72 >> 2] | 0; //@line 3427
      if (!$73) {
       $$02329$i$i = $72; //@line 3430
       label = 24; //@line 3431
       break L28;
      } else {
       $$025$i$i = $72; //@line 3434
       $70 = $73; //@line 3434
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 3440
      $$02330$i$i = $$025$i$i; //@line 3443
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 3443
     } else {
      $$02329$i$i = $$025$i$i; //@line 3445
      label = 24; //@line 3446
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 3452
    $$02330$i$i = $$02329$i$i; //@line 3453
    $$sink$in$i$i = $$02329$i$i; //@line 3453
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 3457
   HEAP32[$$02330$i$i >> 2] = $57; //@line 3458
   _equeue_mutex_unlock($64); //@line 3459
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 3463
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_95($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$09$i = 0, $$09$i53 = 0, $$09$i58 = 0, $$sink$sink$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $41 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26593
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26595
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26597
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26599
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26601
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26603
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26605
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26607
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26609
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26611
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26613
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26615
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26617
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26619
 $31 = $14 + 16 | 0; //@line 26624
 $32 = $14 + 32 | 0; //@line 26625
 $33 = HEAP32[$32 >> 2] | 0; //@line 26626
 if ($33 >>> 0 < $2 >>> 0) {
  $$013$i = 0; //@line 26629
  do {
   if ($$013$i >>> 0 < $33 >>> 0) {
    $$sink$sink$i = HEAP8[$14 + 16 + $$013$i >> 0] | 0; //@line 26635
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($33 | 0) ? -128 : 0; //@line 26639
   }
   HEAP8[$18 + $$013$i >> 0] = $$sink$sink$i; //@line 26642
   $$013$i = $$013$i + 1 | 0; //@line 26643
  } while (($$013$i | 0) != ($2 | 0));
  $$09$i = 0; //@line 26646
  do {
   $41 = $18 + $$09$i | 0; //@line 26653
   HEAP8[$41 >> 0] = HEAP8[$20 + $$09$i >> 0] ^ HEAP8[$41 >> 0]; //@line 26658
   $$09$i = $$09$i + 1 | 0; //@line 26659
  } while (($$09$i | 0) != ($2 | 0));
  label = 10; //@line 26662
 } else {
  if ($2 | 0) {
   $$09$i53 = 0; //@line 26671
   do {
    HEAP8[$18 + $$09$i53 >> 0] = HEAP8[$16 + $$09$i53 >> 0] ^ HEAP8[$14 + 16 + $$09$i53 >> 0]; //@line 26679
    $$09$i53 = $$09$i53 + 1 | 0; //@line 26680
   } while (($$09$i53 | 0) != ($2 | 0));
   label = 10; //@line 26683
  }
 }
 if ((label | 0) == 10) {
  if ($2 | 0) {
   $$09$i58 = 0; //@line 26694
   do {
    $58 = $14 + $$09$i58 | 0; //@line 26698
    HEAP8[$58 >> 0] = HEAP8[$58 >> 0] ^ HEAP8[$18 + $$09$i58 >> 0]; //@line 26701
    $$09$i58 = $$09$i58 + 1 | 0; //@line 26702
   } while (($$09$i58 | 0) != ($2 | 0));
  }
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 26712
 $62 = _mbedtls_cipher_update($22, $6, $2, $6, $24) | 0; //@line 26713
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 589; //@line 26716
  $63 = $ReallocAsyncCtx9 + 4 | 0; //@line 26717
  HEAP32[$63 >> 2] = $26; //@line 26718
  $64 = $ReallocAsyncCtx9 + 8 | 0; //@line 26719
  HEAP32[$64 >> 2] = $6; //@line 26720
  $65 = $ReallocAsyncCtx9 + 12 | 0; //@line 26721
  HEAP32[$65 >> 2] = $2; //@line 26722
  $66 = $ReallocAsyncCtx9 + 16 | 0; //@line 26723
  HEAP32[$66 >> 2] = $12; //@line 26724
  $67 = $ReallocAsyncCtx9 + 20 | 0; //@line 26725
  HEAP32[$67 >> 2] = $4; //@line 26726
  $68 = $ReallocAsyncCtx9 + 24 | 0; //@line 26727
  HEAP32[$68 >> 2] = $32; //@line 26728
  $69 = $ReallocAsyncCtx9 + 28 | 0; //@line 26729
  HEAP32[$69 >> 2] = $31; //@line 26730
  $70 = $ReallocAsyncCtx9 + 32 | 0; //@line 26731
  HEAP32[$70 >> 2] = $8; //@line 26732
  $71 = $ReallocAsyncCtx9 + 36 | 0; //@line 26733
  HEAP32[$71 >> 2] = $10; //@line 26734
  sp = STACKTOP; //@line 26735
  return;
 }
 HEAP32[___async_retval >> 2] = $62; //@line 26739
 ___async_unwind = 0; //@line 26740
 HEAP32[$ReallocAsyncCtx9 >> 2] = 589; //@line 26741
 $63 = $ReallocAsyncCtx9 + 4 | 0; //@line 26742
 HEAP32[$63 >> 2] = $26; //@line 26743
 $64 = $ReallocAsyncCtx9 + 8 | 0; //@line 26744
 HEAP32[$64 >> 2] = $6; //@line 26745
 $65 = $ReallocAsyncCtx9 + 12 | 0; //@line 26746
 HEAP32[$65 >> 2] = $2; //@line 26747
 $66 = $ReallocAsyncCtx9 + 16 | 0; //@line 26748
 HEAP32[$66 >> 2] = $12; //@line 26749
 $67 = $ReallocAsyncCtx9 + 20 | 0; //@line 26750
 HEAP32[$67 >> 2] = $4; //@line 26751
 $68 = $ReallocAsyncCtx9 + 24 | 0; //@line 26752
 HEAP32[$68 >> 2] = $32; //@line 26753
 $69 = $ReallocAsyncCtx9 + 28 | 0; //@line 26754
 HEAP32[$69 >> 2] = $31; //@line 26755
 $70 = $ReallocAsyncCtx9 + 32 | 0; //@line 26756
 HEAP32[$70 >> 2] = $8; //@line 26757
 $71 = $ReallocAsyncCtx9 + 36 | 0; //@line 26758
 HEAP32[$71 >> 2] = $10; //@line 26759
 sp = STACKTOP; //@line 26760
 return;
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$043$lcssa = 0, $$04352 = 0, $$04554$in = 0, $$050 = 0, $$053 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, $AsyncCtx = 0, sp = 0, $$04352$looptemp = 0;
 sp = STACKTOP; //@line 996
 STACKTOP = STACKTOP + 288 | 0; //@line 997
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 997
 $3 = sp; //@line 998
 _memset($3 | 0, 0, 280) | 0; //@line 999
 $4 = $0 + 8 | 0; //@line 1000
 HEAP32[$0 + 4 >> 2] = $4; //@line 1002
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 1003
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 1006
  HEAP32[$0 >> 2] = $8; //@line 1007
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 1009
  $11 = $8 << 2; //@line 1010
  $12 = $10 + ($11 << 2) | 0; //@line 1011
  $13 = $12 + 4 | 0; //@line 1012
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 1015
  $16 = $13 + 4 | 0; //@line 1016
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 1019
  $19 = $16 + 4 | 0; //@line 1020
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 1023
  $22 = $19 + 4 | 0; //@line 1024
  $24 = $0 + 24 | 0; //@line 1026
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 1027
  $$050 = $22 + -32 | 0; //@line 1028
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 1031
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 1037
   $$04352 = $24; //@line 1038
   $$04554$in = $8; //@line 1038
   $$053 = $$050; //@line 1038
   while (1) {
    $$04352$looptemp = $$04352;
    $$04352 = $$04352 + 16 | 0; //@line 1041
    $32 = HEAP32[$$053 >> 2] | 0; //@line 1042
    HEAP32[$$04352$looptemp >> 2] = HEAP32[2324 + ((HEAPU8[13575 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13575 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13575 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13575 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 1073
    $64 = HEAP32[$$053 + 4 >> 2] | 0; //@line 1075
    HEAP32[$$04352$looptemp + 4 >> 2] = HEAP32[2324 + ((HEAPU8[13575 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13575 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13575 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13575 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 1106
    $96 = HEAP32[$$053 + 8 >> 2] | 0; //@line 1108
    HEAP32[$$04352$looptemp + 8 >> 2] = HEAP32[2324 + ((HEAPU8[13575 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13575 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13575 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13575 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 1139
    $128 = HEAP32[$$053 + 12 >> 2] | 0; //@line 1141
    HEAP32[$$04352$looptemp + 12 >> 2] = HEAP32[2324 + ((HEAPU8[13575 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13575 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13575 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13575 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 1171
    $$053 = $$053 + -16 | 0; //@line 1172
    if (($$04554$in | 0) <= 2) {
     break;
    } else {
     $$04554$in = $$04554$in + -1 | 0; //@line 1175
    }
   }
   $$0$lcssa = $$053; //@line 1181
   $$043$lcssa = $$04352; //@line 1181
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 1181
  } else {
   $$0$lcssa = $$050; //@line 1183
   $$043$lcssa = $24; //@line 1183
   $$pn$lcssa = $22; //@line 1183
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 1188
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 1192
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 1196
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 1198
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1200
 _mbedtls_platform_zeroize($3, 280); //@line 1201
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 556; //@line 1204
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 1206
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 1208
  sp = STACKTOP; //@line 1209
  STACKTOP = sp; //@line 1210
  return 0; //@line 1210
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1212
  STACKTOP = sp; //@line 1213
  return $6 | 0; //@line 1213
 }
 return 0; //@line 1215
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 5065
 $6 = $4 & 15; //@line 5067
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 5069
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 5076
 $$07475 = 15; //@line 5082
 $22 = $4; //@line 5082
 $27 = HEAP32[$15 >> 2] | 0; //@line 5082
 $28 = HEAP32[$8 >> 2] | 0; //@line 5082
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 5082
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 5082
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 5087
   $70 = $28; //@line 5087
   $71 = $29; //@line 5087
   $74 = $32; //@line 5087
  } else {
   $25 = $22 & 15; //@line 5090
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 5092
   $31 = tempRet0; //@line 5093
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 5094
   $36 = tempRet0 | $31; //@line 5097
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 5098
   $38 = tempRet0; //@line 5099
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 5101
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 5107
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 5112
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 5121
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 5129
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 5129
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 5129
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 5129
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 5132
  $73 = tempRet0; //@line 5133
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 5134
  $78 = tempRet0 | $73; //@line 5137
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 5138
  $80 = tempRet0; //@line 5139
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 5141
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 5147
  $92 = ($22 & 255) >>> 4 & 255; //@line 5151
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 5153
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 5159
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 5160
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 5162
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 5168
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 5169
  $111 = $$07475 + -1 | 0; //@line 5170
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 5177
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 5177
  $27 = $109; //@line 5177
  $28 = $100; //@line 5177
  $29 = $101; //@line 5177
  $32 = $110; //@line 5177
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 5179
 HEAP8[$2 >> 0] = $113; //@line 5182
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 5183
 HEAP8[$2 + 1 >> 0] = $116; //@line 5187
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 5188
 HEAP8[$2 + 2 >> 0] = $120; //@line 5192
 HEAP8[$2 + 3 >> 0] = $101; //@line 5195
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 5196
 HEAP8[$2 + 4 >> 0] = $126; //@line 5200
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 5201
 HEAP8[$2 + 5 >> 0] = $130; //@line 5205
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 5206
 HEAP8[$2 + 6 >> 0] = $134; //@line 5210
 HEAP8[$2 + 7 >> 0] = $100; //@line 5213
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 5214
 HEAP8[$2 + 8 >> 0] = $140; //@line 5218
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 5219
 HEAP8[$2 + 9 >> 0] = $144; //@line 5223
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 5224
 HEAP8[$2 + 10 >> 0] = $148; //@line 5228
 HEAP8[$2 + 11 >> 0] = $110; //@line 5231
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 5232
 HEAP8[$2 + 12 >> 0] = $154; //@line 5236
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 5237
 HEAP8[$2 + 13 >> 0] = $158; //@line 5241
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 5242
 HEAP8[$2 + 14 >> 0] = $162; //@line 5246
 HEAP8[$2 + 15 >> 0] = $109; //@line 5249
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29479
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29481
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29483
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 29487
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 29489
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 29491
 $$pre$i = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 29492
 $13 = $4 + 12 | 0; //@line 29493
 HEAP32[$13 >> 2] = $$pre$i; //@line 29494
 if (!$$pre$i) {
  $24 = $2 + 12 | 0; //@line 29497
  HEAP32[$24 >> 2] = 0; //@line 29498
  $25 = $2 + 16 | 0; //@line 29499
  HEAP8[$25 >> 0] = $8; //@line 29500
  HEAP8[$2 + 17 >> 0] = $10; //@line 29502
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 29503
  $27 = _equeue_alloc($12, 20) | 0; //@line 29504
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 311; //@line 29507
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 29508
   HEAP32[$28 >> 2] = $24; //@line 29509
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 29510
   HEAP32[$29 >> 2] = $13; //@line 29511
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 29512
   HEAP32[$30 >> 2] = $4; //@line 29513
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 29514
   HEAP32[$31 >> 2] = $24; //@line 29515
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 29516
   HEAP32[$32 >> 2] = $2; //@line 29517
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 29518
   HEAP32[$33 >> 2] = $25; //@line 29519
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 29520
   HEAP32[$34 >> 2] = $12; //@line 29521
   sp = STACKTOP; //@line 29522
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 29526
  ___async_unwind = 0; //@line 29527
  HEAP32[$ReallocAsyncCtx7 >> 2] = 311; //@line 29528
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 29529
  HEAP32[$28 >> 2] = $24; //@line 29530
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 29531
  HEAP32[$29 >> 2] = $13; //@line 29532
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 29533
  HEAP32[$30 >> 2] = $4; //@line 29534
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 29535
  HEAP32[$31 >> 2] = $24; //@line 29536
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 29537
  HEAP32[$32 >> 2] = $2; //@line 29538
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 29539
  HEAP32[$33 >> 2] = $25; //@line 29540
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 29541
  HEAP32[$34 >> 2] = $12; //@line 29542
  sp = STACKTOP; //@line 29543
  return;
 } else {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 29548
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 29549
  FUNCTION_TABLE_vii[$16 & 15]($2, $4); //@line 29550
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 310; //@line 29553
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 29554
   HEAP32[$17 >> 2] = $13; //@line 29555
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 29556
   HEAP32[$18 >> 2] = $2; //@line 29557
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 29558
   HEAP32[$19 >> 2] = $4; //@line 29559
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 29560
   HEAP32[$20 >> 2] = $13; //@line 29561
   $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 29562
   HEAP8[$21 >> 0] = $8; //@line 29563
   $22 = $ReallocAsyncCtx2 + 21 | 0; //@line 29564
   HEAP8[$22 >> 0] = $10; //@line 29565
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 29566
   HEAP32[$23 >> 2] = $12; //@line 29567
   sp = STACKTOP; //@line 29568
   return;
  }
  ___async_unwind = 0; //@line 29571
  HEAP32[$ReallocAsyncCtx2 >> 2] = 310; //@line 29572
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 29573
  HEAP32[$17 >> 2] = $13; //@line 29574
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 29575
  HEAP32[$18 >> 2] = $2; //@line 29576
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 29577
  HEAP32[$19 >> 2] = $4; //@line 29578
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 29579
  HEAP32[$20 >> 2] = $13; //@line 29580
  $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 29581
  HEAP8[$21 >> 0] = $8; //@line 29582
  $22 = $ReallocAsyncCtx2 + 21 | 0; //@line 29583
  HEAP8[$22 >> 0] = $10; //@line 29584
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 29585
  HEAP32[$23 >> 2] = $12; //@line 29586
  sp = STACKTOP; //@line 29587
  return;
 }
}
function __ZN12LoRaWANStack9handle_rxEPhtRhRib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$0$off0 = 0, $$031 = 0, $$1 = 0, $$pre$phi39Z2D = 0, $13 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10618
 STACKTOP = STACKTOP + 16 | 0; //@line 10619
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10619
 if (!(HEAP8[$0 + 2548 >> 0] | 0)) {
  $$1 = -1017; //@line 10625
  STACKTOP = sp; //@line 10626
  return $$1 | 0; //@line 10626
 }
 $9 = $0 + 2832 | 0; //@line 10628
 if (!(HEAP8[$9 >> 0] | 0)) {
  $$1 = -1001; //@line 10632
  STACKTOP = sp; //@line 10633
  return $$1 | 0; //@line 10633
 }
 if (!$1) {
  $$1 = -1003; //@line 10637
  STACKTOP = sp; //@line 10638
  return $$1 | 0; //@line 10638
 }
 $13 = $2 & 65535; //@line 10640
 if (!($2 << 16 >> 16)) {
  $$1 = -1003; //@line 10643
  STACKTOP = sp; //@line 10644
  return $$1 | 0; //@line 10644
 }
 L13 : do {
  switch (HEAP32[$0 + 2844 >> 2] | 0) {
  case 0:
   {
    $$0$i = 1; //@line 10651
    break;
   }
  case 1:
   {
    $$0$i = 2; //@line 10655
    break;
   }
  case 2:
   {
    $$0$i = 4; //@line 10659
    break;
   }
  case 3:
   {
    $$0$i = 8; //@line 10663
    break;
   }
  default:
   {
    _mbed_tracef(2, 11997, 12626, sp); //@line 10667
    $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 10668
    _mbed_assert_internal(14267, 11899, 814); //@line 10669
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 355; //@line 10672
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10674
     HEAP8[$AsyncCtx + 8 >> 0] = $5 & 1; //@line 10677
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 10679
     HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 10681
     HEAP16[$AsyncCtx + 20 >> 1] = $2; //@line 10683
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 10685
     HEAP32[$AsyncCtx + 28 >> 2] = $9; //@line 10687
     HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 10689
     sp = STACKTOP; //@line 10690
     STACKTOP = sp; //@line 10691
     return 0; //@line 10691
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 10693
     $$0$i = 1; //@line 10694
     break L13;
    }
   }
  }
 } while (0);
 $26 = HEAP8[$0 + 2853 >> 0] | 0; //@line 10701
 if ($5) {
  if ($26 << 24 >> 24 != (HEAP8[$3 >> 0] | 0)) {
   $$1 = -1001; //@line 10706
   STACKTOP = sp; //@line 10707
   return $$1 | 0; //@line 10707
  }
  if (!(HEAP32[$4 >> 2] & $$0$i)) {
   $$1 = -1001; //@line 10713
   STACKTOP = sp; //@line 10714
   return $$1 | 0; //@line 10714
  }
 }
 HEAP8[$3 >> 0] = $26; //@line 10717
 HEAP32[$4 >> 2] = $$0$i; //@line 10718
 $32 = $0 + 2856 | 0; //@line 10719
 $33 = HEAP32[$32 >> 2] | 0; //@line 10720
 $34 = $0 + 2860 | 0; //@line 10721
 $35 = HEAP16[$34 >> 1] | 0; //@line 10722
 $36 = $35 & 65535; //@line 10723
 $38 = $0 + 2882 | 0; //@line 10725
 $40 = (HEAP16[$38 >> 1] | 0) == 0; //@line 10727
 if (($35 & 65535) > ($2 & 65535)) {
  if ($40) {
   $43 = $0 + 2880 | 0; //@line 10732
   HEAP16[$43 >> 1] = $36 - $13; //@line 10733
   HEAP16[$38 >> 1] = $2; //@line 10734
   _memcpy($1 | 0, $33 | 0, $13 | 0) | 0; //@line 10735
   $$0$off0 = 0; //@line 10736
   $$031 = $2; //@line 10736
   $$pre$phi39Z2D = $43; //@line 10736
  } else {
   label = 19; //@line 10738
  }
 } else {
  if ($40) {
   $44 = $0 + 2880 | 0; //@line 10742
   HEAP16[$44 >> 1] = 0; //@line 10743
   HEAP16[$38 >> 1] = 0; //@line 10744
   _memcpy($1 | 0, $33 | 0, $36 | 0) | 0; //@line 10745
   $$0$off0 = 1; //@line 10746
   $$031 = $35; //@line 10746
   $$pre$phi39Z2D = $44; //@line 10746
  } else {
   label = 19; //@line 10748
  }
 }
 if ((label | 0) == 19) {
  $$0$off0 = 0; //@line 10753
  $$031 = $35; //@line 10753
  $$pre$phi39Z2D = $0 + 2880 | 0; //@line 10753
 }
 if (HEAP16[$$pre$phi39Z2D >> 1] | 0) {
  $48 = HEAP16[$0 + 2882 >> 1] | 0; //@line 10759
  if ($48 << 16 >> 16) {
   _memcpy($1 | 0, $33 + ($48 & 65535) | 0, $$031 & 65535 | 0) | 0; //@line 10765
  }
 }
 if (!$$0$off0) {
  $$1 = $$031; //@line 10769
  STACKTOP = sp; //@line 10770
  return $$1 | 0; //@line 10770
 }
 HEAP32[$32 >> 2] = 0; //@line 10772
 HEAP16[$34 >> 1] = 0; //@line 10773
 HEAP8[$9 >> 0] = 0; //@line 10774
 $$1 = $$031; //@line 10775
 STACKTOP = sp; //@line 10776
 return $$1 | 0; //@line 10776
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24099
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24101
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 24103
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 24108
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 24109
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 24110
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 24113
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 24114
   HEAP32[$9 >> 2] = $2; //@line 24115
   sp = STACKTOP; //@line 24116
   return;
  }
  ___async_unwind = 0; //@line 24119
  HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 24120
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 24121
  HEAP32[$9 >> 2] = $2; //@line 24122
  sp = STACKTOP; //@line 24123
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 24127
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 24132
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 24133
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 24134
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 160; //@line 24137
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 24138
   HEAP32[$16 >> 2] = $2; //@line 24139
   sp = STACKTOP; //@line 24140
   return;
  }
  ___async_unwind = 0; //@line 24143
  HEAP32[$ReallocAsyncCtx3 >> 2] = 160; //@line 24144
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 24145
  HEAP32[$16 >> 2] = $2; //@line 24146
  sp = STACKTOP; //@line 24147
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 24151
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 24156
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 24157
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 24158
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 24161
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 24162
   HEAP32[$23 >> 2] = $2; //@line 24163
   sp = STACKTOP; //@line 24164
   return;
  }
  ___async_unwind = 0; //@line 24167
  HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 24168
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 24169
  HEAP32[$23 >> 2] = $2; //@line 24170
  sp = STACKTOP; //@line 24171
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 24175
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 24180
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24181
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 24182
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 24185
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 24186
   HEAP32[$30 >> 2] = $2; //@line 24187
   sp = STACKTOP; //@line 24188
   return;
  }
  ___async_unwind = 0; //@line 24191
  HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 24192
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 24193
  HEAP32[$30 >> 2] = $2; //@line 24194
  sp = STACKTOP; //@line 24195
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 24199
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 24204
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24205
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 24206
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 24209
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 24210
   HEAP32[$37 >> 2] = $2; //@line 24211
   sp = STACKTOP; //@line 24212
   return;
  }
  ___async_unwind = 0; //@line 24215
  HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 24216
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 24217
  HEAP32[$37 >> 2] = $2; //@line 24218
  sp = STACKTOP; //@line 24219
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 24223
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 24229
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 24230
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 24231
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 24234
  sp = STACKTOP; //@line 24235
  return;
 }
 ___async_unwind = 0; //@line 24238
 HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 24239
 sp = STACKTOP; //@line 24240
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9629
 STACKTOP = STACKTOP + 16 | 0; //@line 9630
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9630
 $2 = sp; //@line 9631
 $3 = $0 + 2496 | 0; //@line 9632
 do {
  if (HEAP32[$3 >> 2] | 0) {
   $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9637
   __ZN7LoRaMac19remove_channel_planEv($0) | 0; //@line 9638
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 332; //@line 9641
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 9643
    HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 9645
    HEAP32[$AsyncCtx9 + 12 >> 2] = $2; //@line 9647
    HEAP32[$AsyncCtx9 + 16 >> 2] = $3; //@line 9649
    HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 9651
    sp = STACKTOP; //@line 9652
    STACKTOP = sp; //@line 9653
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9655
    break;
   }
  }
 } while (0);
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9660
 __ZN7LoRaMac10disconnectEv($0); //@line 9661
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 333; //@line 9664
  HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 9666
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 9668
  HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 9670
  HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 9672
  sp = STACKTOP; //@line 9673
  STACKTOP = sp; //@line 9674
  return;
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9676
 HEAP8[$0 + 2548 >> 0] = 0; //@line 9678
 HEAP32[$3 >> 2] = 11; //@line 9679
 HEAP32[$1 >> 2] = -1011; //@line 9680
 $16 = $0 + 2904 | 0; //@line 9681
 HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -5; //@line 9684
 $19 = $0 + 2512 | 0; //@line 9685
 $20 = HEAP32[$19 >> 2] | 0; //@line 9686
 if (!$20) {
  STACKTOP = sp; //@line 9689
  return;
 }
 $24 = HEAP32[$0 + 3168 >> 2] | 0; //@line 9693
 $26 = HEAP32[$20 + 4 >> 2] | 0; //@line 9695
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9696
 FUNCTION_TABLE_vii[$26 & 15]($2, $0 + 2500 | 0); //@line 9697
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 334; //@line 9700
  HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 9702
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 9704
  HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 9706
  HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 9708
  sp = STACKTOP; //@line 9709
  STACKTOP = sp; //@line 9710
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9712
 $31 = $2 + 12 | 0; //@line 9714
 HEAP32[$31 >> 2] = HEAP32[$19 >> 2]; //@line 9715
 $AsyncCtx12 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9716
 $32 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($24, $2, 1) | 0; //@line 9717
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 335; //@line 9720
  HEAP32[$AsyncCtx12 + 4 >> 2] = $31; //@line 9722
  HEAP32[$AsyncCtx12 + 8 >> 2] = $2; //@line 9724
  sp = STACKTOP; //@line 9725
  STACKTOP = sp; //@line 9726
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 9728
 $35 = HEAP32[$31 >> 2] | 0; //@line 9729
 do {
  if ($35 | 0) {
   $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 9734
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9735
   FUNCTION_TABLE_vi[$38 & 1023]($2); //@line 9736
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 336; //@line 9739
    HEAP32[$AsyncCtx2 + 4 >> 2] = $32; //@line 9741
    HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 9743
    sp = STACKTOP; //@line 9744
    STACKTOP = sp; //@line 9745
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9747
    break;
   }
  }
 } while (0);
 if ($32 | 0) {
  STACKTOP = sp; //@line 9754
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9756
 _mbed_assert_internal(11890, 11899, 778); //@line 9757
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 337; //@line 9760
  HEAP32[$AsyncCtx16 + 4 >> 2] = $2; //@line 9762
  sp = STACKTOP; //@line 9763
  STACKTOP = sp; //@line 9764
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 9766
 STACKTOP = sp; //@line 9767
 return;
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22602
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22604
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22606
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22608
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22610
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22612
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22614
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22616
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22618
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22620
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22622
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22624
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22626
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 22629
  $53 = ___async_retval; //@line 22630
  HEAP32[$53 >> 2] = $$0; //@line 22631
  return;
 }
 $33 = $2 - $4 | 0; //@line 22634
 $25 = $6 + $4 | 0; //@line 22635
 $37 = $8 + 1 | 0; //@line 22636
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 22641
   $53 = ___async_retval; //@line 22642
   HEAP32[$53 >> 2] = $$0; //@line 22643
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 22648
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 22651
  $$0 = 0; //@line 22652
  $53 = ___async_retval; //@line 22653
  HEAP32[$53 >> 2] = $$0; //@line 22654
  return;
 }
 $$09$i75 = 0; //@line 22657
 do {
  $27 = $16 + $$09$i75 | 0; //@line 22661
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 22664
  $$09$i75 = $$09$i75 + 1 | 0; //@line 22665
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 22673
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 22674
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 583; //@line 22677
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 22678
  HEAP32[$32 >> 2] = $33; //@line 22679
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 22680
  HEAP32[$34 >> 2] = $4; //@line 22681
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 22682
  HEAP32[$35 >> 2] = $25; //@line 22683
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 22684
  HEAP32[$36 >> 2] = $37; //@line 22685
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 22686
  HEAP32[$38 >> 2] = $10; //@line 22687
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 22688
  HEAP32[$39 >> 2] = $12; //@line 22689
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 22690
  HEAP32[$40 >> 2] = $14; //@line 22691
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 22692
  HEAP32[$41 >> 2] = $16; //@line 22693
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 22694
  HEAP32[$42 >> 2] = $18; //@line 22695
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 22696
  HEAP32[$43 >> 2] = $20; //@line 22697
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 22698
  HEAP32[$44 >> 2] = $22; //@line 22699
  sp = STACKTOP; //@line 22700
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 22704
 ___async_unwind = 0; //@line 22705
 HEAP32[$ReallocAsyncCtx >> 2] = 583; //@line 22706
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 22707
 HEAP32[$32 >> 2] = $33; //@line 22708
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 22709
 HEAP32[$34 >> 2] = $4; //@line 22710
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 22711
 HEAP32[$35 >> 2] = $25; //@line 22712
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 22713
 HEAP32[$36 >> 2] = $37; //@line 22714
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 22715
 HEAP32[$38 >> 2] = $10; //@line 22716
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 22717
 HEAP32[$39 >> 2] = $12; //@line 22718
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 22719
 HEAP32[$40 >> 2] = $14; //@line 22720
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 22721
 HEAP32[$41 >> 2] = $16; //@line 22722
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 22723
 HEAP32[$42 >> 2] = $18; //@line 22724
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 22725
 HEAP32[$43 >> 2] = $20; //@line 22726
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 22727
 HEAP32[$44 >> 2] = $22; //@line 22728
 sp = STACKTOP; //@line 22729
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5262
 STACKTOP = STACKTOP + 32 | 0; //@line 5263
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5263
 $4 = sp + 8 | 0; //@line 5264
 $5 = sp; //@line 5265
 HEAP32[$5 >> 2] = 0; //@line 5266
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 5274
   STACKTOP = sp; //@line 5275
   return $$0 | 0; //@line 5275
  }
 }
 $11 = $0 + 328 | 0; //@line 5278
 $12 = $11; //@line 5279
 $14 = HEAP32[$12 >> 2] | 0; //@line 5281
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 5284
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 5285
 $19 = tempRet0; //@line 5286
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 5299
  STACKTOP = sp; //@line 5300
  return $$0 | 0; //@line 5300
 }
 $30 = $11; //@line 5302
 HEAP32[$30 >> 2] = $18; //@line 5304
 HEAP32[$30 + 4 >> 2] = $19; //@line 5307
 if (!$1) {
  $$0 = 0; //@line 5310
  STACKTOP = sp; //@line 5311
  return $$0 | 0; //@line 5311
 }
 $35 = $0 + 360 | 0; //@line 5313
 $36 = $0 + 376 | 0; //@line 5314
 $37 = $0 + 392 | 0; //@line 5315
 $$05966 = $3; //@line 5316
 $$06065 = $2; //@line 5316
 $$06264 = $1; //@line 5316
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 5319
  $$061 = 16; //@line 5320
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 5326
   $42 = $0 + 360 + $$061 | 0; //@line 5327
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 5329
   HEAP8[$42 >> 0] = $44; //@line 5330
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 5338
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 5339
  if (___async) {
   label = 10; //@line 5342
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5345
  if ($46 | 0) {
   $$0 = $46; //@line 5348
   label = 19; //@line 5349
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 5354
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 5358
    $68 = $$06065 + $$163 | 0; //@line 5359
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 5364
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 5369
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 5371
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 5377
    }
    $$163 = $$163 + 1 | 0; //@line 5379
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 5388
  $83 = $$06264 - $39 | 0; //@line 5389
  if (!$83) {
   $$0 = 0; //@line 5394
   label = 19; //@line 5395
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 5398
   $$06065 = $$06065 + $39 | 0; //@line 5398
   $$06264 = $83; //@line 5398
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 598; //@line 5402
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 5404
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5406
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 5408
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 5410
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 5412
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 5414
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 5416
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 5418
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 5420
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 5422
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 5424
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 5426
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 5428
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 5430
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 5432
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 5434
  sp = STACKTOP; //@line 5435
  STACKTOP = sp; //@line 5436
  return 0; //@line 5436
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 5439
  return $$0 | 0; //@line 5439
 }
 return 0; //@line 5441
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_248($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6759
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6761
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6763
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6765
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6767
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 6770
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6772
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6774
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6776
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6778
 $20 = HEAP8[$0 + 40 >> 0] & 1; //@line 6781
 $22 = HEAP8[$0 + 41 >> 0] & 1; //@line 6784
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 6786
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 6788
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 6790
 L2 : do {
  if (!(HEAP8[$14 >> 0] | 0)) {
   do {
    if (!(HEAP8[$4 >> 0] | 0)) {
     $$182$off0 = $22; //@line 6799
     $$186$off0 = $20; //@line 6799
    } else {
     if (!(HEAP8[$2 >> 0] | 0)) {
      if (!(HEAP32[$16 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $20; //@line 6808
       $$283$off0 = 1; //@line 6808
       label = 13; //@line 6809
       break L2;
      } else {
       $$182$off0 = 1; //@line 6812
       $$186$off0 = $20; //@line 6812
       break;
      }
     }
     if ((HEAP32[$18 >> 2] | 0) == 1) {
      label = 18; //@line 6819
      break L2;
     }
     if (!(HEAP32[$16 >> 2] & 2)) {
      label = 18; //@line 6826
      break L2;
     } else {
      $$182$off0 = 1; //@line 6829
      $$186$off0 = 1; //@line 6829
     }
    }
   } while (0);
   $30 = $24 + 8 | 0; //@line 6833
   if ($30 >>> 0 < $12 >>> 0) {
    HEAP8[$2 >> 0] = 0; //@line 6836
    HEAP8[$4 >> 0] = 0; //@line 6837
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 6838
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $6, $8, $8, 1, $10); //@line 6839
    if (!___async) {
     ___async_unwind = 0; //@line 6842
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 685; //@line 6844
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 6846
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 6848
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 6850
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 6852
    HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $10 & 1; //@line 6855
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 6857
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 6859
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 6861
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 6863
    HEAP8[$ReallocAsyncCtx5 + 40 >> 0] = $$186$off0 & 1; //@line 6866
    HEAP8[$ReallocAsyncCtx5 + 41 >> 0] = $$182$off0 & 1; //@line 6869
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $30; //@line 6871
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 6873
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 6875
    sp = STACKTOP; //@line 6876
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 6879
    $$283$off0 = $$182$off0; //@line 6879
    label = 13; //@line 6880
   }
  } else {
   $$085$off0$reg2mem$0 = $20; //@line 6883
   $$283$off0 = $22; //@line 6883
   label = 13; //@line 6884
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$26 >> 2] = $8; //@line 6890
    $59 = $6 + 40 | 0; //@line 6891
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 6894
    if ((HEAP32[$6 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$18 >> 2] | 0) == 2) {
      HEAP8[$14 >> 0] = 1; //@line 6902
      if ($$283$off0) {
       label = 18; //@line 6904
       break;
      } else {
       $67 = 4; //@line 6907
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 6914
   } else {
    $67 = 4; //@line 6916
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 6921
 }
 HEAP32[$28 >> 2] = $67; //@line 6923
 return;
}
function _initialize__async_cb_209($0) {
 $0 = $0 | 0;
 var $10 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $76 = 0, $77 = 0, $78 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4481
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4485
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4487
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4491
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4493
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4495
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4497
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4499
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $25 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 4508
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 4509
  $26 = HEAP32[$10 >> 2] | 0; //@line 4510
  do {
   if (($26 | 0) == 1e6) {
    $101 = $25; //@line 4514
    $102 = 0; //@line 4514
   } else {
    $28 = HEAP8[$14 >> 0] | 0; //@line 4516
    $30 = ___muldi3($25 | 0, 0, 1e6, 0) | 0; //@line 4518
    $31 = tempRet0; //@line 4519
    if (!($28 << 24 >> 24)) {
     $64 = ___udivdi3($30 | 0, $31 | 0, $26 | 0, 0) | 0; //@line 4521
     $65 = tempRet0; //@line 4522
     $66 = ___muldi3($64 | 0, $65 | 0, $26 | 0, 0) | 0; //@line 4523
     $68 = _i64Subtract($30 | 0, $31 | 0, $66 | 0, tempRet0 | 0) | 0; //@line 4525
     $70 = $16; //@line 4527
     $76 = _i64Add($68 | 0, tempRet0 | 0, HEAP32[$70 >> 2] | 0, HEAP32[$70 + 4 >> 2] | 0) | 0; //@line 4533
     $77 = tempRet0; //@line 4534
     $78 = $16; //@line 4535
     HEAP32[$78 >> 2] = $76; //@line 4537
     HEAP32[$78 + 4 >> 2] = $77; //@line 4540
     if ($77 >>> 0 < 0 | ($77 | 0) == 0 & $76 >>> 0 < $26 >>> 0) {
      $101 = $64; //@line 4547
      $102 = $65; //@line 4547
      break;
     }
     $87 = _i64Add($64 | 0, $65 | 0, 1, 0) | 0; //@line 4550
     $88 = tempRet0; //@line 4551
     $89 = _i64Subtract($76 | 0, $77 | 0, $26 | 0, 0) | 0; //@line 4552
     $91 = $16; //@line 4554
     HEAP32[$91 >> 2] = $89; //@line 4556
     HEAP32[$91 + 4 >> 2] = tempRet0; //@line 4559
     $101 = $87; //@line 4560
     $102 = $88; //@line 4560
     break;
    } else {
     $32 = $28 & 255; //@line 4563
     $33 = _bitshift64Lshr($30 | 0, $31 | 0, $32 | 0) | 0; //@line 4564
     $34 = tempRet0; //@line 4565
     $35 = _bitshift64Shl($33 | 0, $34 | 0, $32 | 0) | 0; //@line 4566
     $37 = _i64Subtract($30 | 0, $31 | 0, $35 | 0, tempRet0 | 0) | 0; //@line 4568
     $39 = $16; //@line 4570
     $45 = _i64Add(HEAP32[$39 >> 2] | 0, HEAP32[$39 + 4 >> 2] | 0, $37 | 0, tempRet0 | 0) | 0; //@line 4576
     $46 = tempRet0; //@line 4577
     $47 = $16; //@line 4578
     HEAP32[$47 >> 2] = $45; //@line 4580
     HEAP32[$47 + 4 >> 2] = $46; //@line 4583
     if ($46 >>> 0 < 0 | ($46 | 0) == 0 & $45 >>> 0 < $26 >>> 0) {
      $101 = $33; //@line 4590
      $102 = $34; //@line 4590
      break;
     }
     $56 = _i64Add($33 | 0, $34 | 0, 1, 0) | 0; //@line 4593
     $57 = tempRet0; //@line 4594
     $58 = _i64Subtract($45 | 0, $46 | 0, $26 | 0, 0) | 0; //@line 4595
     $60 = $16; //@line 4597
     HEAP32[$60 >> 2] = $58; //@line 4599
     HEAP32[$60 + 4 >> 2] = tempRet0; //@line 4602
     $101 = $56; //@line 4603
     $102 = $57; //@line 4603
     break;
    }
   }
  } while (0);
  $95 = $12; //@line 4608
  $103 = _i64Add(HEAP32[$95 >> 2] | 0, HEAP32[$95 + 4 >> 2] | 0, $101 | 0, $102 | 0) | 0; //@line 4614
  $105 = $12; //@line 4616
  HEAP32[$105 >> 2] = $103; //@line 4618
  HEAP32[$105 + 4 >> 2] = tempRet0; //@line 4621
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 4623
 _schedule_interrupt($4); //@line 4624
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 609; //@line 4627
  sp = STACKTOP; //@line 4628
  return;
 }
 ___async_unwind = 0; //@line 4631
 HEAP32[$ReallocAsyncCtx5 >> 2] = 609; //@line 4632
 sp = STACKTOP; //@line 4633
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28965
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28967
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28969
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28971
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 28976
 $$pre$i = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 28977
 $11 = $4 + 12 | 0; //@line 28978
 HEAP32[$11 >> 2] = $$pre$i; //@line 28979
 $12 = $10 & 1; //@line 28980
 if (!$$pre$i) {
  $22 = $2 + 12 | 0; //@line 28983
  HEAP32[$22 >> 2] = 0; //@line 28984
  $23 = $2 + 16 | 0; //@line 28985
  HEAP8[$23 >> 0] = $12; //@line 28986
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 28987
  $24 = _equeue_alloc($6, 20) | 0; //@line 28988
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 208; //@line 28991
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 28992
   HEAP32[$25 >> 2] = $22; //@line 28993
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 28994
   HEAP32[$26 >> 2] = $23; //@line 28995
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 28996
   HEAP32[$27 >> 2] = $6; //@line 28997
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 28998
   HEAP32[$28 >> 2] = $22; //@line 28999
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 29000
   HEAP32[$29 >> 2] = $11; //@line 29001
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 29002
   HEAP32[$30 >> 2] = $2; //@line 29003
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 29004
   HEAP32[$31 >> 2] = $4; //@line 29005
   sp = STACKTOP; //@line 29006
   return;
  }
  HEAP32[___async_retval >> 2] = $24; //@line 29010
  ___async_unwind = 0; //@line 29011
  HEAP32[$ReallocAsyncCtx7 >> 2] = 208; //@line 29012
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 29013
  HEAP32[$25 >> 2] = $22; //@line 29014
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 29015
  HEAP32[$26 >> 2] = $23; //@line 29016
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 29017
  HEAP32[$27 >> 2] = $6; //@line 29018
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 29019
  HEAP32[$28 >> 2] = $22; //@line 29020
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 29021
  HEAP32[$29 >> 2] = $11; //@line 29022
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 29023
  HEAP32[$30 >> 2] = $2; //@line 29024
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 29025
  HEAP32[$31 >> 2] = $4; //@line 29026
  sp = STACKTOP; //@line 29027
  return;
 } else {
  $15 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 29032
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 29033
  FUNCTION_TABLE_vii[$15 & 15]($2, $4); //@line 29034
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 207; //@line 29037
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 29038
   HEAP32[$16 >> 2] = $11; //@line 29039
   $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 29040
   HEAP8[$17 >> 0] = $12; //@line 29041
   $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 29042
   HEAP32[$18 >> 2] = $11; //@line 29043
   $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 29044
   HEAP32[$19 >> 2] = $2; //@line 29045
   $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 29046
   HEAP32[$20 >> 2] = $6; //@line 29047
   $21 = $ReallocAsyncCtx2 + 24 | 0; //@line 29048
   HEAP32[$21 >> 2] = $4; //@line 29049
   sp = STACKTOP; //@line 29050
   return;
  }
  ___async_unwind = 0; //@line 29053
  HEAP32[$ReallocAsyncCtx2 >> 2] = 207; //@line 29054
  $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 29055
  HEAP32[$16 >> 2] = $11; //@line 29056
  $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 29057
  HEAP8[$17 >> 0] = $12; //@line 29058
  $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 29059
  HEAP32[$18 >> 2] = $11; //@line 29060
  $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 29061
  HEAP32[$19 >> 2] = $2; //@line 29062
  $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 29063
  HEAP32[$20 >> 2] = $6; //@line 29064
  $21 = $ReallocAsyncCtx2 + 24 | 0; //@line 29065
  HEAP32[$21 >> 2] = $4; //@line 29066
  sp = STACKTOP; //@line 29067
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25445
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25449
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25451
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25453
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25455
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25456
 $11 = $4 + 12 | 0; //@line 25457
 HEAP32[$11 >> 2] = $$pre$i; //@line 25458
 if (!$$pre$i) {
  $21 = $6 + 12 | 0; //@line 25461
  HEAP32[$21 >> 2] = 0; //@line 25462
  $22 = $6 + 16 | 0; //@line 25463
  HEAP32[$22 >> 2] = $8; //@line 25464
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 25465
  $23 = _equeue_alloc($10, 20) | 0; //@line 25466
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 254; //@line 25469
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 25470
   HEAP32[$24 >> 2] = $21; //@line 25471
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 25472
   HEAP32[$25 >> 2] = $22; //@line 25473
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 25474
   HEAP32[$26 >> 2] = $10; //@line 25475
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 25476
   HEAP32[$27 >> 2] = $21; //@line 25477
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 25478
   HEAP32[$28 >> 2] = $11; //@line 25479
   $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 25480
   HEAP32[$29 >> 2] = $6; //@line 25481
   $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 25482
   HEAP32[$30 >> 2] = $4; //@line 25483
   sp = STACKTOP; //@line 25484
   return;
  }
  HEAP32[___async_retval >> 2] = $23; //@line 25488
  ___async_unwind = 0; //@line 25489
  HEAP32[$ReallocAsyncCtx7 >> 2] = 254; //@line 25490
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 25491
  HEAP32[$24 >> 2] = $21; //@line 25492
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 25493
  HEAP32[$25 >> 2] = $22; //@line 25494
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 25495
  HEAP32[$26 >> 2] = $10; //@line 25496
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 25497
  HEAP32[$27 >> 2] = $21; //@line 25498
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 25499
  HEAP32[$28 >> 2] = $11; //@line 25500
  $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 25501
  HEAP32[$29 >> 2] = $6; //@line 25502
  $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 25503
  HEAP32[$30 >> 2] = $4; //@line 25504
  sp = STACKTOP; //@line 25505
  return;
 } else {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 25510
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 25511
  FUNCTION_TABLE_vii[$14 & 15]($6, $4); //@line 25512
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 253; //@line 25515
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 25516
   HEAP32[$15 >> 2] = $4; //@line 25517
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 25518
   HEAP32[$16 >> 2] = $6; //@line 25519
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 25520
   HEAP32[$17 >> 2] = $11; //@line 25521
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 25522
   HEAP32[$18 >> 2] = $8; //@line 25523
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 25524
   HEAP32[$19 >> 2] = $10; //@line 25525
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 25526
   HEAP32[$20 >> 2] = $11; //@line 25527
   sp = STACKTOP; //@line 25528
   return;
  }
  ___async_unwind = 0; //@line 25531
  HEAP32[$ReallocAsyncCtx2 >> 2] = 253; //@line 25532
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 25533
  HEAP32[$15 >> 2] = $4; //@line 25534
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 25535
  HEAP32[$16 >> 2] = $6; //@line 25536
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 25537
  HEAP32[$17 >> 2] = $11; //@line 25538
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 25539
  HEAP32[$18 >> 2] = $8; //@line 25540
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 25541
  HEAP32[$19 >> 2] = $10; //@line 25542
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 25543
  HEAP32[$20 >> 2] = $11; //@line 25544
  sp = STACKTOP; //@line 25545
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_200($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3347
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3349
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3351
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3353
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3355
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3357
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3359
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3363
 $17 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 3364
 if (!$17) {
  $28 = $12 + 12 | 0; //@line 3368
  HEAP32[$12 >> 2] = 452; //@line 3369
  HEAP32[$12 + 4 >> 2] = 0; //@line 3371
  HEAP32[$12 + 8 >> 2] = $4; //@line 3373
  HEAP32[$28 >> 2] = 860; //@line 3374
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 3375
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($2, $4 + 1836 | 0, $12); //@line 3376
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 453; //@line 3379
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 3380
   HEAP32[$29 >> 2] = $28; //@line 3381
   $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 3382
   HEAP32[$30 >> 2] = $4; //@line 3383
   $31 = $ReallocAsyncCtx6 + 12 | 0; //@line 3384
   HEAP32[$31 >> 2] = $10; //@line 3385
   $32 = $ReallocAsyncCtx6 + 16 | 0; //@line 3386
   HEAP32[$32 >> 2] = $2; //@line 3387
   $33 = $ReallocAsyncCtx6 + 20 | 0; //@line 3388
   HEAP32[$33 >> 2] = $12; //@line 3389
   $34 = $ReallocAsyncCtx6 + 24 | 0; //@line 3390
   HEAP32[$34 >> 2] = $6; //@line 3391
   $35 = $ReallocAsyncCtx6 + 28 | 0; //@line 3392
   HEAP32[$35 >> 2] = $8; //@line 3393
   sp = STACKTOP; //@line 3394
   return;
  }
  ___async_unwind = 0; //@line 3397
  HEAP32[$ReallocAsyncCtx6 >> 2] = 453; //@line 3398
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 3399
  HEAP32[$29 >> 2] = $28; //@line 3400
  $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 3401
  HEAP32[$30 >> 2] = $4; //@line 3402
  $31 = $ReallocAsyncCtx6 + 12 | 0; //@line 3403
  HEAP32[$31 >> 2] = $10; //@line 3404
  $32 = $ReallocAsyncCtx6 + 16 | 0; //@line 3405
  HEAP32[$32 >> 2] = $2; //@line 3406
  $33 = $ReallocAsyncCtx6 + 20 | 0; //@line 3407
  HEAP32[$33 >> 2] = $12; //@line 3408
  $34 = $ReallocAsyncCtx6 + 24 | 0; //@line 3409
  HEAP32[$34 >> 2] = $6; //@line 3410
  $35 = $ReallocAsyncCtx6 + 28 | 0; //@line 3411
  HEAP32[$35 >> 2] = $8; //@line 3412
  sp = STACKTOP; //@line 3413
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 3417
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 3418
  FUNCTION_TABLE_vi[$20 & 1023]($16); //@line 3419
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 451; //@line 3422
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 3423
   HEAP32[$21 >> 2] = $4; //@line 3424
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 3425
   HEAP32[$22 >> 2] = $12; //@line 3426
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 3427
   HEAP32[$23 >> 2] = $2; //@line 3428
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 3429
   HEAP32[$24 >> 2] = $10; //@line 3430
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 3431
   HEAP32[$25 >> 2] = $6; //@line 3432
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 3433
   HEAP32[$26 >> 2] = $8; //@line 3434
   sp = STACKTOP; //@line 3435
   return;
  }
  ___async_unwind = 0; //@line 3438
  HEAP32[$ReallocAsyncCtx2 >> 2] = 451; //@line 3439
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 3440
  HEAP32[$21 >> 2] = $4; //@line 3441
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 3442
  HEAP32[$22 >> 2] = $12; //@line 3443
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 3444
  HEAP32[$23 >> 2] = $2; //@line 3445
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 3446
  HEAP32[$24 >> 2] = $10; //@line 3447
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 3448
  HEAP32[$25 >> 2] = $6; //@line 3449
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 3450
  HEAP32[$26 >> 2] = $8; //@line 3451
  sp = STACKTOP; //@line 3452
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16998
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 17003
 } else {
  $9 = $1 + 52 | 0; //@line 17005
  $10 = HEAP8[$9 >> 0] | 0; //@line 17006
  $11 = $1 + 53 | 0; //@line 17007
  $12 = HEAP8[$11 >> 0] | 0; //@line 17008
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 17011
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 17012
  HEAP8[$9 >> 0] = 0; //@line 17013
  HEAP8[$11 >> 0] = 0; //@line 17014
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 17015
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 17016
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 683; //@line 17019
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 17021
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17023
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 17025
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 17027
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 17029
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 17031
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 17033
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 17035
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 17037
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 17039
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 17042
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 17044
   sp = STACKTOP; //@line 17045
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17048
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 17053
    $32 = $0 + 8 | 0; //@line 17054
    $33 = $1 + 54 | 0; //@line 17055
    $$0 = $0 + 24 | 0; //@line 17056
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 17089
     HEAP8[$11 >> 0] = 0; //@line 17090
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 17091
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 17092
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17097
     $62 = $$0 + 8 | 0; //@line 17098
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 17101
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 684; //@line 17106
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 17108
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 17110
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 17112
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 17114
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 17116
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 17118
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 17120
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 17122
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 17124
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 17126
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 17128
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 17130
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 17132
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 17135
    sp = STACKTOP; //@line 17136
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 17140
  HEAP8[$11 >> 0] = $12; //@line 17141
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13421
      $10 = HEAP32[$9 >> 2] | 0; //@line 13422
      HEAP32[$2 >> 2] = $9 + 4; //@line 13424
      HEAP32[$0 >> 2] = $10; //@line 13425
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13441
      $17 = HEAP32[$16 >> 2] | 0; //@line 13442
      HEAP32[$2 >> 2] = $16 + 4; //@line 13444
      $20 = $0; //@line 13447
      HEAP32[$20 >> 2] = $17; //@line 13449
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 13452
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13468
      $30 = HEAP32[$29 >> 2] | 0; //@line 13469
      HEAP32[$2 >> 2] = $29 + 4; //@line 13471
      $31 = $0; //@line 13472
      HEAP32[$31 >> 2] = $30; //@line 13474
      HEAP32[$31 + 4 >> 2] = 0; //@line 13477
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13493
      $41 = $40; //@line 13494
      $43 = HEAP32[$41 >> 2] | 0; //@line 13496
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 13499
      HEAP32[$2 >> 2] = $40 + 8; //@line 13501
      $47 = $0; //@line 13502
      HEAP32[$47 >> 2] = $43; //@line 13504
      HEAP32[$47 + 4 >> 2] = $46; //@line 13507
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13523
      $57 = HEAP32[$56 >> 2] | 0; //@line 13524
      HEAP32[$2 >> 2] = $56 + 4; //@line 13526
      $59 = ($57 & 65535) << 16 >> 16; //@line 13528
      $62 = $0; //@line 13531
      HEAP32[$62 >> 2] = $59; //@line 13533
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 13536
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13552
      $72 = HEAP32[$71 >> 2] | 0; //@line 13553
      HEAP32[$2 >> 2] = $71 + 4; //@line 13555
      $73 = $0; //@line 13557
      HEAP32[$73 >> 2] = $72 & 65535; //@line 13559
      HEAP32[$73 + 4 >> 2] = 0; //@line 13562
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13578
      $83 = HEAP32[$82 >> 2] | 0; //@line 13579
      HEAP32[$2 >> 2] = $82 + 4; //@line 13581
      $85 = ($83 & 255) << 24 >> 24; //@line 13583
      $88 = $0; //@line 13586
      HEAP32[$88 >> 2] = $85; //@line 13588
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 13591
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13607
      $98 = HEAP32[$97 >> 2] | 0; //@line 13608
      HEAP32[$2 >> 2] = $97 + 4; //@line 13610
      $99 = $0; //@line 13612
      HEAP32[$99 >> 2] = $98 & 255; //@line 13614
      HEAP32[$99 + 4 >> 2] = 0; //@line 13617
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13633
      $109 = +HEAPF64[$108 >> 3]; //@line 13634
      HEAP32[$2 >> 2] = $108 + 8; //@line 13636
      HEAPF64[$0 >> 3] = $109; //@line 13637
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13653
      $116 = +HEAPF64[$115 >> 3]; //@line 13654
      HEAP32[$2 >> 2] = $115 + 8; //@line 13656
      HEAPF64[$0 >> 3] = $116; //@line 13657
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_247($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6603
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6605
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6607
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6609
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 6612
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6614
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6616
 $15 = $12 + 24 | 0; //@line 6619
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 6624
   if (!($18 & 2)) {
    $21 = $2 + 36 | 0; //@line 6628
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $2 + 54 | 0; //@line 6635
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 6646
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 6647
      if (!___async) {
       ___async_unwind = 0; //@line 6650
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 689; //@line 6652
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 6654
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $10; //@line 6656
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 6658
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 6660
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $2; //@line 6662
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $4; //@line 6664
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $6; //@line 6666
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $8 & 1; //@line 6669
      sp = STACKTOP; //@line 6670
      return;
     }
     $36 = $2 + 24 | 0; //@line 6673
     $37 = $2 + 54 | 0; //@line 6674
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 6689
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 6690
     if (!___async) {
      ___async_unwind = 0; //@line 6693
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 688; //@line 6695
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 6697
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 6699
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 6701
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 6703
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 6705
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $2; //@line 6707
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 6709
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $6; //@line 6711
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $8 & 1; //@line 6714
     sp = STACKTOP; //@line 6715
     return;
    }
   }
   $24 = $2 + 54 | 0; //@line 6719
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 6723
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 6724
    if (!___async) {
     ___async_unwind = 0; //@line 6727
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 687; //@line 6729
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 6731
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $10; //@line 6733
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 6735
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 6737
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $4; //@line 6739
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $6; //@line 6741
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $8 & 1; //@line 6744
    sp = STACKTOP; //@line 6745
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $2 = 0, $20 = 0, $31 = 0, $42 = 0, $45 = 0, $51 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12455
 $2 = $0 + 2380 | 0; //@line 12456
 do {
  if ((HEAP32[$2 >> 2] | 0) == 2) {
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12461
   __ZN7LoRaMac15open_rx2_windowEv($0); //@line 12462
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 385; //@line 12465
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12467
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 12469
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 12471
    sp = STACKTOP; //@line 12472
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12475
    break;
   }
  } else {
   $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12480
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 12481
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 386; //@line 12484
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12486
    HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 12488
    HEAP32[$AsyncCtx15 + 12 >> 2] = $2; //@line 12490
    sp = STACKTOP; //@line 12491
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12494
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 1175 >> 0] | 0)) {
   HEAP32[$0 + 2056 >> 2] = 0; //@line 12505
   HEAP32[$0 + 2092 >> 2] = 4; //@line 12507
  } else {
   $16 = (__ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0) - $1 | 0; //@line 12510
   $20 = (HEAP32[$0 + 1772 >> 2] | 0) - $16 | 0; //@line 12514
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12515
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1816 | 0, $20); //@line 12516
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 387; //@line 12519
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 12521
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 12523
    HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 12525
    HEAP32[$AsyncCtx7 + 16 >> 2] = $0; //@line 12527
    HEAP32[$AsyncCtx7 + 20 >> 2] = $1; //@line 12529
    sp = STACKTOP; //@line 12530
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12533
   do {
    if ((HEAP32[$2 >> 2] | 0) != 2) {
     $31 = (HEAP32[$0 + 1776 >> 2] | 0) - $16 | 0; //@line 12541
     $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12542
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1836 | 0, $31); //@line 12543
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 388; //@line 12546
      HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12548
      HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 12550
      HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 12552
      HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 12554
      sp = STACKTOP; //@line 12555
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12558
      break;
     }
    }
   } while (0);
   if (HEAP8[$0 + 1177 >> 0] | 0) {
    $42 = (HEAP32[$0 + 1776 >> 2] | 0) - $16 | 0; //@line 12570
    $45 = $42 + (__ZN7LoRaPHY15get_ack_timeoutEv($0 + 4 | 0) | 0) | 0; //@line 12573
    $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12574
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1856 | 0, $45); //@line 12575
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 389; //@line 12578
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12580
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 12582
     sp = STACKTOP; //@line 12583
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 12586
     break;
    }
   }
  }
 } while (0);
 $51 = HEAP8[$0 + 1182 >> 0] | 0; //@line 12593
 HEAP8[$0 + 1183 >> 0] = $51; //@line 12595
 __ZN7LoRaPHY16set_last_tx_doneEhbj($0 + 4 | 0, $51, (HEAP8[$0 + 2376 >> 0] | 0) != 0, $1); //@line 12600
 HEAP32[$0 + 1780 >> 2] = $1; //@line 12602
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_71($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $24 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $41 = 0, $44 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24993
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24999
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25001
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 25003
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25005
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25007
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25009
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $21 = HEAP32[$6 >> 2] | 0; //@line 25016
   $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 16 >> 2] | 0; //@line 25019
   $29 = HEAP32[$8 + 8 >> 2] & 65535; //@line 25024
   $32 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 25027
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 25028
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$24 & 1]($21, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $29, 0, 0, 1, 0, 0, 0, $32); //@line 25029
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 507; //@line 25032
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 25033
    HEAP32[$33 >> 2] = $8; //@line 25034
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 25035
    HEAP32[$34 >> 2] = $12; //@line 25036
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 25037
    HEAP32[$35 >> 2] = $14; //@line 25038
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 25039
    HEAP32[$36 >> 2] = $16; //@line 25040
    $37 = $ReallocAsyncCtx6 + 20 | 0; //@line 25041
    HEAP32[$37 >> 2] = $6; //@line 25042
    sp = STACKTOP; //@line 25043
    return;
   }
   ___async_unwind = 0; //@line 25046
   HEAP32[$ReallocAsyncCtx6 >> 2] = 507; //@line 25047
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 25048
   HEAP32[$33 >> 2] = $8; //@line 25049
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 25050
   HEAP32[$34 >> 2] = $12; //@line 25051
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 25052
   HEAP32[$35 >> 2] = $14; //@line 25053
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 25054
   HEAP32[$36 >> 2] = $16; //@line 25055
   $37 = $ReallocAsyncCtx6 + 20 | 0; //@line 25056
   HEAP32[$37 >> 2] = $6; //@line 25057
   sp = STACKTOP; //@line 25058
   return;
  }
 }
 $38 = HEAP32[$6 >> 2] | 0; //@line 25062
 $41 = HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] | 0; //@line 25065
 $44 = HEAPU8[$8 + 2 >> 0] | 0; //@line 25068
 $48 = HEAP32[$8 + 8 >> 2] & 65535; //@line 25072
 $51 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 25075
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 25076
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$41 & 1]($38, 1, $44, $10 & 255, 1, 0, 8, $48, 0, 0, 0, 0, 0, 1, $51); //@line 25077
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 508; //@line 25080
  $52 = $ReallocAsyncCtx7 + 4 | 0; //@line 25081
  HEAP32[$52 >> 2] = $8; //@line 25082
  $53 = $ReallocAsyncCtx7 + 8 | 0; //@line 25083
  HEAP32[$53 >> 2] = $12; //@line 25084
  $54 = $ReallocAsyncCtx7 + 12 | 0; //@line 25085
  HEAP32[$54 >> 2] = $14; //@line 25086
  $55 = $ReallocAsyncCtx7 + 16 | 0; //@line 25087
  HEAP32[$55 >> 2] = $16; //@line 25088
  $56 = $ReallocAsyncCtx7 + 20 | 0; //@line 25089
  HEAP32[$56 >> 2] = $6; //@line 25090
  sp = STACKTOP; //@line 25091
  return;
 }
 ___async_unwind = 0; //@line 25094
 HEAP32[$ReallocAsyncCtx7 >> 2] = 508; //@line 25095
 $52 = $ReallocAsyncCtx7 + 4 | 0; //@line 25096
 HEAP32[$52 >> 2] = $8; //@line 25097
 $53 = $ReallocAsyncCtx7 + 8 | 0; //@line 25098
 HEAP32[$53 >> 2] = $12; //@line 25099
 $54 = $ReallocAsyncCtx7 + 12 | 0; //@line 25100
 HEAP32[$54 >> 2] = $14; //@line 25101
 $55 = $ReallocAsyncCtx7 + 16 | 0; //@line 25102
 HEAP32[$55 >> 2] = $16; //@line 25103
 $56 = $ReallocAsyncCtx7 + 20 | 0; //@line 25104
 HEAP32[$56 >> 2] = $6; //@line 25105
 sp = STACKTOP; //@line 25106
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_252($0) {
 $0 = $0 | 0;
 var $$pr = 0, $$pre17 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 7830
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7832
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7834
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7836
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7838
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7840
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7842
 $$pre17 = HEAP32[$2 >> 2] | 0; //@line 7843
 if ($$pre17 | 0) {
  $15 = HEAP32[$$pre17 + 4 >> 2] | 0; //@line 7847
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 7848
  FUNCTION_TABLE_vii[$15 & 15]($8, $10); //@line 7849
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 7852
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 7853
   HEAP32[$16 >> 2] = $2; //@line 7854
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 7855
   HEAP32[$17 >> 2] = $4; //@line 7856
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 7857
   HEAP32[$18 >> 2] = $6; //@line 7858
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 7859
   HEAP32[$19 >> 2] = $12; //@line 7860
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 7861
   HEAP32[$20 >> 2] = $10; //@line 7862
   sp = STACKTOP; //@line 7863
   return;
  }
  ___async_unwind = 0; //@line 7866
  HEAP32[$ReallocAsyncCtx6 >> 2] = 343; //@line 7867
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 7868
  HEAP32[$16 >> 2] = $2; //@line 7869
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 7870
  HEAP32[$17 >> 2] = $4; //@line 7871
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 7872
  HEAP32[$18 >> 2] = $6; //@line 7873
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 7874
  HEAP32[$19 >> 2] = $12; //@line 7875
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 7876
  HEAP32[$20 >> 2] = $10; //@line 7877
  sp = STACKTOP; //@line 7878
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 7881
 $$pr = HEAP32[$2 >> 2] | 0; //@line 7882
 if (!$$pr) {
  $27 = $12 + 12 | 0; //@line 7885
  HEAP32[$27 >> 2] = 0; //@line 7886
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 7887
  __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $12); //@line 7888
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 345; //@line 7891
   $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 7892
   HEAP32[$28 >> 2] = $27; //@line 7893
   $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 7894
   HEAP32[$29 >> 2] = $12; //@line 7895
   sp = STACKTOP; //@line 7896
   return;
  }
  ___async_unwind = 0; //@line 7899
  HEAP32[$ReallocAsyncCtx9 >> 2] = 345; //@line 7900
  $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 7901
  HEAP32[$28 >> 2] = $27; //@line 7902
  $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 7903
  HEAP32[$29 >> 2] = $12; //@line 7904
  sp = STACKTOP; //@line 7905
  return;
 } else {
  $23 = HEAP32[$$pr + 4 >> 2] | 0; //@line 7909
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 7910
  FUNCTION_TABLE_vii[$23 & 15]($12, $10); //@line 7911
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 7914
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 7915
   HEAP32[$24 >> 2] = $2; //@line 7916
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 7917
   HEAP32[$25 >> 2] = $6; //@line 7918
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 7919
   HEAP32[$26 >> 2] = $12; //@line 7920
   sp = STACKTOP; //@line 7921
   return;
  }
  ___async_unwind = 0; //@line 7924
  HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 7925
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 7926
  HEAP32[$24 >> 2] = $2; //@line 7927
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 7928
  HEAP32[$25 >> 2] = $6; //@line 7929
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 7930
  HEAP32[$26 >> 2] = $12; //@line 7931
  sp = STACKTOP; //@line 7932
  return;
 }
}
function __ZN7LoRaMac15send_ongoing_txEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14836
 STACKTOP = STACKTOP + 16 | 0; //@line 14837
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14837
 $1 = sp + 1 | 0; //@line 14838
 $2 = sp; //@line 14839
 HEAP8[$0 + 1180 >> 0] = 0; //@line 14841
 $4 = $0 + 1877 | 0; //@line 14842
 $5 = HEAP8[$4 >> 0] | 0; //@line 14843
 $6 = $0 + 4 | 0; //@line 14844
 if ($5 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv($6) | 0) << 24 >> 24) {
  $21 = $5; //@line 14848
 } else {
  $21 = __ZN7LoRaPHY23get_minimum_tx_datarateEv($6) | 0; //@line 14851
 }
 HEAP8[$2 >> 0] = 0; //@line 14853
 $10 = $0 + 2052 | 0; //@line 14854
 HEAP32[$10 >> 2] = 0; //@line 14855
 HEAP32[$10 + 4 >> 2] = 0; //@line 14855
 HEAP32[$10 + 8 >> 2] = 0; //@line 14855
 HEAP32[$10 + 12 >> 2] = 0; //@line 14855
 HEAP32[$10 + 16 >> 2] = 0; //@line 14855
 HEAP32[$10 + 20 >> 2] = 0; //@line 14855
 HEAP32[$0 + 2056 >> 2] = 1; //@line 14857
 HEAP8[$0 + 1699 >> 0] = 1; //@line 14859
 $13 = $0 + 1698 | 0; //@line 14860
 HEAP8[$13 >> 0] = 1; //@line 14861
 $14 = $0 + 2108 | 0; //@line 14862
 switch (HEAP32[$14 >> 2] | 0) {
 case 0:
  {
   HEAP8[$2 >> 0] = 64; //@line 14866
   break;
  }
 case 1:
  {
   HEAP8[$2 >> 0] = -128; //@line 14870
   HEAP8[$13 >> 0] = HEAP8[$0 + 2114 >> 0] | 0; //@line 14873
   break;
  }
 case 3:
  {
   HEAP8[$2 >> 0] = -32; //@line 14877
   break;
  }
 default:
  {
   $$0 = -1002; //@line 14881
   STACKTOP = sp; //@line 14882
   return $$0 | 0; //@line 14882
  }
 }
 $18 = $0 + 1936 | 0; //@line 14885
 do {
  if (!(HEAP8[$18 >> 0] | 0)) {
   if (__ZN7LoRaPHY18verify_tx_datarateEhb($6, $21, 0) | 0) {
    HEAP8[$4 >> 0] = $21; //@line 14892
    $28 = HEAP8[$18 >> 0] << 7 & 255; //@line 14895
    break;
   } else {
    $$0 = -1003; //@line 14898
    STACKTOP = sp; //@line 14899
    return $$0 | 0; //@line 14899
   }
  } else {
   $28 = -128; //@line 14902
  }
 } while (0);
 $24 = HEAP8[$0 + 2112 >> 0] | 0; //@line 14906
 $27 = HEAP16[$0 + 2370 >> 1] | 0; //@line 14909
 HEAP8[$1 >> 0] = $28; //@line 14910
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 14911
 $29 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $2, $1, $24, $0 + 2115 | 0, $27) | 0; //@line 14912
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 434; //@line 14915
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14917
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 14919
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 14921
  HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 14923
  sp = STACKTOP; //@line 14924
  STACKTOP = sp; //@line 14925
  return 0; //@line 14925
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14927
 if ($29 | 0) {
  $$0 = $29; //@line 14930
  STACKTOP = sp; //@line 14931
  return $$0 | 0; //@line 14931
 }
 HEAP8[$0 + 2063 >> 0] = 0; //@line 14934
 HEAP8[$0 + 2062 >> 0] = 0; //@line 14936
 HEAP32[$0 + 2068 >> 2] = HEAP32[$0 + 1760 >> 2]; //@line 14940
 $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14941
 $40 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14942
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 435; //@line 14945
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 14947
  HEAP32[$AsyncCtx2 + 8 >> 2] = $14; //@line 14949
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 14951
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 14953
  sp = STACKTOP; //@line 14954
  STACKTOP = sp; //@line 14955
  return 0; //@line 14955
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14957
 if ($40 | 0) {
  $$0 = $40; //@line 14960
  STACKTOP = sp; //@line 14961
  return $$0 | 0; //@line 14961
 }
 HEAP32[$0 + 2052 >> 2] = HEAP32[$14 >> 2]; //@line 14965
 $$0 = 0; //@line 14966
 STACKTOP = sp; //@line 14967
 return $$0 | 0; //@line 14967
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$ph = 0, $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19296
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19298
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19300
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19302
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19304
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19306
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19308
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19310
 if (HEAP8[___async_retval >> 0] & 1) {
  $$ph = $2; //@line 19315
 } else {
  $20 = $2 + 1 | 0; //@line 19317
  if (($20 | 0) < (HEAPU8[$6 >> 0] | 0 | 0)) {
   $18 = HEAP32[(HEAP32[$8 >> 2] | 0) + 76 >> 2] | 0; //@line 19324
   $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 19326
   $21 = FUNCTION_TABLE_iiii[$18 & 31]($10, $12, $20 & 255) | 0; //@line 19327
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 518; //@line 19330
    $22 = $ReallocAsyncCtx + 4 | 0; //@line 19331
    HEAP32[$22 >> 2] = $20; //@line 19332
    $23 = $ReallocAsyncCtx + 8 | 0; //@line 19333
    HEAP32[$23 >> 2] = $4; //@line 19334
    $24 = $ReallocAsyncCtx + 12 | 0; //@line 19335
    HEAP32[$24 >> 2] = $6; //@line 19336
    $25 = $ReallocAsyncCtx + 16 | 0; //@line 19337
    HEAP32[$25 >> 2] = $8; //@line 19338
    $26 = $ReallocAsyncCtx + 20 | 0; //@line 19339
    HEAP32[$26 >> 2] = $10; //@line 19340
    $27 = $ReallocAsyncCtx + 24 | 0; //@line 19341
    HEAP32[$27 >> 2] = $12; //@line 19342
    $28 = $ReallocAsyncCtx + 28 | 0; //@line 19343
    HEAP32[$28 >> 2] = $14; //@line 19344
    sp = STACKTOP; //@line 19345
    return;
   }
   HEAP8[___async_retval >> 0] = $21 & 1; //@line 19350
   ___async_unwind = 0; //@line 19351
   HEAP32[$ReallocAsyncCtx >> 2] = 518; //@line 19352
   $22 = $ReallocAsyncCtx + 4 | 0; //@line 19353
   HEAP32[$22 >> 2] = $20; //@line 19354
   $23 = $ReallocAsyncCtx + 8 | 0; //@line 19355
   HEAP32[$23 >> 2] = $4; //@line 19356
   $24 = $ReallocAsyncCtx + 12 | 0; //@line 19357
   HEAP32[$24 >> 2] = $6; //@line 19358
   $25 = $ReallocAsyncCtx + 16 | 0; //@line 19359
   HEAP32[$25 >> 2] = $8; //@line 19360
   $26 = $ReallocAsyncCtx + 20 | 0; //@line 19361
   HEAP32[$26 >> 2] = $10; //@line 19362
   $27 = $ReallocAsyncCtx + 24 | 0; //@line 19363
   HEAP32[$27 >> 2] = $12; //@line 19364
   $28 = $ReallocAsyncCtx + 28 | 0; //@line 19365
   HEAP32[$28 >> 2] = $14; //@line 19366
   sp = STACKTOP; //@line 19367
   return;
  } else {
   $$ph = -1; //@line 19370
  }
 }
 $$pre = HEAP32[$4 >> 2] | 0; //@line 19373
 $$ = ($$ph | 0) < 0 ? 6 : 7; //@line 19375
 $35 = HEAP32[$10 + 4 >> 2] | 0; //@line 19377
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 64 >> 2] | 0; //@line 19380
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 19381
 $39 = FUNCTION_TABLE_iii[$38 & 31]($35, $$pre) | 0; //@line 19382
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 519; //@line 19385
  $40 = $ReallocAsyncCtx2 + 4 | 0; //@line 19386
  HEAP8[$40 >> 0] = $$; //@line 19387
  $41 = $ReallocAsyncCtx2 + 8 | 0; //@line 19388
  HEAP32[$41 >> 2] = $14; //@line 19389
  $42 = $ReallocAsyncCtx2 + 12 | 0; //@line 19390
  HEAP32[$42 >> 2] = $10; //@line 19391
  sp = STACKTOP; //@line 19392
  return;
 }
 HEAP8[___async_retval >> 0] = $39 & 1; //@line 19397
 ___async_unwind = 0; //@line 19398
 HEAP32[$ReallocAsyncCtx2 >> 2] = 519; //@line 19399
 $40 = $ReallocAsyncCtx2 + 4 | 0; //@line 19400
 HEAP8[$40 >> 0] = $$; //@line 19401
 $41 = $ReallocAsyncCtx2 + 8 | 0; //@line 19402
 HEAP32[$41 >> 2] = $14; //@line 19403
 $42 = $ReallocAsyncCtx2 + 12 | 0; //@line 19404
 HEAP32[$42 >> 2] = $10; //@line 19405
 sp = STACKTOP; //@line 19406
 return;
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 4805
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 4807
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4813
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4814
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 4815
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 158; //@line 4818
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4820
    sp = STACKTOP; //@line 4821
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4824
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 4830
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 4836
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4837
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 4838
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 159; //@line 4841
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 4843
    sp = STACKTOP; //@line 4844
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4847
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 4853
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 4859
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4860
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 4861
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 160; //@line 4864
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4866
    sp = STACKTOP; //@line 4867
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4870
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 4876
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 4882
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4883
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 4884
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 161; //@line 4887
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4889
    sp = STACKTOP; //@line 4890
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4893
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 4899
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 4905
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4906
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 4907
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 162; //@line 4910
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 4912
    sp = STACKTOP; //@line 4913
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 4916
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 4922
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 4928
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4929
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 4930
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 163; //@line 4933
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 4935
    sp = STACKTOP; //@line 4936
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 4939
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 4945
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 4951
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4952
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 4953
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 164; //@line 4956
  sp = STACKTOP; //@line 4957
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 4960
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb($0, $1, $2, $3, $trunc, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$1 = 0, $24 = 0, $25 = 0, $28 = 0, $32 = 0, $38 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10438
 STACKTOP = STACKTOP + 32 | 0; //@line 10439
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10439
 $vararg_buffer3 = sp + 16 | 0; //@line 10440
 $vararg_buffer1 = sp + 8 | 0; //@line 10441
 $vararg_buffer = sp; //@line 10442
 if (!(($2 | 0) != 0 | $4)) {
  $$1 = -1003; //@line 10446
  STACKTOP = sp; //@line 10447
  return $$1 | 0; //@line 10447
 }
 $7 = $0 + 2909 | 0; //@line 10449
 do {
  if (HEAP8[$7 >> 0] | 0) {
   if (HEAP32[$0 + 2496 >> 2] | 0) {
    HEAP8[$7 >> 0] = 1; //@line 10458
    if (!(HEAP32[$0 + 2528 >> 2] | 0)) {
     _mbed_tracef(2, 11997, 12513, $vararg_buffer); //@line 10463
     break;
    } else {
     __ZN7LoRaMac24setup_link_check_requestEv($0); //@line 10466
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$0 + 2548 >> 0] | 0)) {
  $$1 = -1017; //@line 10476
  STACKTOP = sp; //@line 10477
  return $$1 | 0; //@line 10477
 }
 if (__ZN7LoRaMac10tx_ongoingEv($0) | 0) {
  $$1 = -1001; //@line 10481
  STACKTOP = sp; //@line 10482
  return $$1 | 0; //@line 10482
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  $$1 = -1009; //@line 10486
  STACKTOP = sp; //@line 10487
  return $$1 | 0; //@line 10487
 }
 if (!($1 << 24 >> 24 != 0 | $5)) {
  _mbed_tracef(2, 11997, 12570, $vararg_buffer1); //@line 10492
  $$1 = -1015; //@line 10493
  STACKTOP = sp; //@line 10494
  return $$1 | 0; //@line 10494
 }
 HEAP8[$0 + 2908 >> 0] = $1; //@line 10497
 switch ($trunc & 15) {
 case 8:
 case 2:
 case 1:
  {
   break;
  }
 default:
  {
   _mbed_tracef(2, 11997, 12607, $vararg_buffer3); //@line 10504
   $$1 = -1003; //@line 10505
   STACKTOP = sp; //@line 10506
   return $$1 | 0; //@line 10506
  }
 }
 $24 = HEAP8[$0 + 2902 >> 0] | 0; //@line 10510
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10511
 $25 = __ZN7LoRaMac18prepare_ongoing_txEhPKhthh($0, $1, $2, $3, $trunc, $24) | 0; //@line 10512
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 353; //@line 10515
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 10517
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 10519
  sp = STACKTOP; //@line 10520
  STACKTOP = sp; //@line 10521
  return 0; //@line 10521
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10523
 $28 = $0 + 2496 | 0; //@line 10524
 switch (HEAP32[$28 >> 2] | 0) {
 case 5:
 case 2:
  {
   label = 18; //@line 10528
   break;
  }
 default:
  {
   if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2) {
    label = 18; //@line 10535
   } else {
    $$0 = -1e3; //@line 10537
   }
  }
 }
 if ((label | 0) == 18) {
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10542
  $32 = __ZN7LoRaMac15send_ongoing_txEv($0) | 0; //@line 10543
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 354; //@line 10546
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10548
   HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 10550
   HEAP32[$AsyncCtx + 12 >> 2] = $28; //@line 10552
   HEAP16[$AsyncCtx + 16 >> 1] = $25; //@line 10554
   sp = STACKTOP; //@line 10555
   STACKTOP = sp; //@line 10556
   return 0; //@line 10556
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10558
  if (!$32) {
   $38 = $0 + 2904 | 0; //@line 10561
   HEAP32[$38 >> 2] = HEAP32[$38 >> 2] & -18 | 1; //@line 10565
   __ZN7LoRaMac14set_tx_ongoingEb($0, 1); //@line 10566
   HEAP32[$28 >> 2] = 8; //@line 10567
   $$0 = 0; //@line 10568
  } else {
   $$0 = $32; //@line 10570
  }
 }
 $$1 = ($$0 | 0) == 0 ? $25 : $$0 & 65535; //@line 10576
 STACKTOP = sp; //@line 10577
 return $$1 | 0; //@line 10577
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30364
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30366
 $4 = HEAP32[$2 + 1868 >> 2] | 0; //@line 30368
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 30373
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 30374
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1856 | 0); //@line 30375
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 362; //@line 30378
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 30379
   HEAP32[$9 >> 2] = $2; //@line 30380
   sp = STACKTOP; //@line 30381
   return;
  }
  ___async_unwind = 0; //@line 30384
  HEAP32[$ReallocAsyncCtx2 >> 2] = 362; //@line 30385
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 30386
  HEAP32[$9 >> 2] = $2; //@line 30387
  sp = STACKTOP; //@line 30388
  return;
 }
 $11 = HEAP32[$2 + 1848 >> 2] | 0; //@line 30392
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 30397
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 30398
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1836 | 0); //@line 30399
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 363; //@line 30402
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 30403
   HEAP32[$16 >> 2] = $2; //@line 30404
   sp = STACKTOP; //@line 30405
   return;
  }
  ___async_unwind = 0; //@line 30408
  HEAP32[$ReallocAsyncCtx3 >> 2] = 363; //@line 30409
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 30410
  HEAP32[$16 >> 2] = $2; //@line 30411
  sp = STACKTOP; //@line 30412
  return;
 }
 $18 = HEAP32[$2 + 1828 >> 2] | 0; //@line 30416
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 30421
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 30422
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 1816 | 0); //@line 30423
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 30426
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 30427
   HEAP32[$23 >> 2] = $2; //@line 30428
   sp = STACKTOP; //@line 30429
   return;
  }
  ___async_unwind = 0; //@line 30432
  HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 30433
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 30434
  HEAP32[$23 >> 2] = $2; //@line 30435
  sp = STACKTOP; //@line 30436
  return;
 }
 $25 = HEAP32[$2 + 1808 >> 2] | 0; //@line 30440
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 30445
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30446
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 1796 | 0); //@line 30447
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 30450
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 30451
   HEAP32[$30 >> 2] = $2; //@line 30452
   sp = STACKTOP; //@line 30453
   return;
  }
  ___async_unwind = 0; //@line 30456
  HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 30457
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 30458
  HEAP32[$30 >> 2] = $2; //@line 30459
  sp = STACKTOP; //@line 30460
  return;
 }
 $32 = HEAP32[$2 + 748 >> 2] | 0; //@line 30464
 if (!$32) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 30468
  return;
 }
 $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 30473
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30474
 FUNCTION_TABLE_vi[$36 & 1023]($2 + 736 | 0); //@line 30475
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 30478
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 30479
  HEAP32[$37 >> 2] = $2; //@line 30480
  sp = STACKTOP; //@line 30481
  return;
 }
 ___async_unwind = 0; //@line 30484
 HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 30485
 $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 30486
 HEAP32[$37 >> 2] = $2; //@line 30487
 sp = STACKTOP; //@line 30488
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $18 = 0, $27 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18524
 $6 = $0 + 344 | 0; //@line 18525
 _mbedtls_cipher_init($6); //@line 18526
 $7 = _mbedtls_cipher_info_from_type(2) | 0; //@line 18527
 if (!$7) {
  $$0 = -24960; //@line 18530
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18532
  $9 = _mbedtls_cipher_setup($6, $7) | 0; //@line 18533
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 489; //@line 18536
   HEAP32[$AsyncCtx11 + 4 >> 2] = $6; //@line 18538
   HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 18540
   HEAP32[$AsyncCtx11 + 12 >> 2] = $4; //@line 18542
   HEAP16[$AsyncCtx11 + 16 >> 1] = $2; //@line 18544
   HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 18546
   HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 18548
   HEAP32[$AsyncCtx11 + 28 >> 2] = $5; //@line 18550
   sp = STACKTOP; //@line 18551
   return 0; //@line 18552
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18554
  if (!$9) {
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 18557
   $18 = _mbedtls_cipher_cmac_starts($6, $3, $4) | 0; //@line 18558
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 490; //@line 18561
    HEAP16[$AsyncCtx + 4 >> 1] = $2; //@line 18563
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 18565
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 18567
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 18569
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 18571
    sp = STACKTOP; //@line 18572
    return 0; //@line 18573
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 18575
   if (!$18) {
    $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 18580
    $27 = _mbedtls_cipher_cmac_update($6, $1, $2 & 255) | 0; //@line 18581
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 491; //@line 18584
     HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 18586
     HEAP32[$AsyncCtx7 + 8 >> 2] = $6; //@line 18588
     HEAP32[$AsyncCtx7 + 12 >> 2] = $5; //@line 18590
     sp = STACKTOP; //@line 18591
     return 0; //@line 18592
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18594
    if (!$27) {
     $32 = $0 + 16 | 0; //@line 18597
     $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18598
     $33 = _mbedtls_cipher_cmac_finish($6, $32) | 0; //@line 18599
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 492; //@line 18602
      HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 18604
      HEAP32[$AsyncCtx3 + 8 >> 2] = $32; //@line 18606
      HEAP32[$AsyncCtx3 + 12 >> 2] = $5; //@line 18608
      HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 18610
      sp = STACKTOP; //@line 18611
      return 0; //@line 18612
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18614
     if (!$33) {
      HEAP32[$5 >> 2] = (HEAPU8[$0 + 18 >> 0] | 0) << 16 | (HEAPU8[$0 + 19 >> 0] | 0) << 24 | (HEAPU8[$0 + 17 >> 0] | 0) << 8 | (HEAPU8[$32 >> 0] | 0); //@line 18634
      $$0 = 0; //@line 18635
     } else {
      $$0 = $33; //@line 18637
     }
    } else {
     $$0 = $27; //@line 18640
    }
   } else {
    $$0 = $18; //@line 18643
   }
  } else {
   $$0 = $9; //@line 18646
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18649
 _mbedtls_cipher_free($6); //@line 18650
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 493; //@line 18653
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 18655
  sp = STACKTOP; //@line 18656
  return 0; //@line 18657
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18659
  return $$0 | 0; //@line 18660
 }
 return 0; //@line 18662
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_13($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18610
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18612
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18614
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18616
 HEAP32[$2 + 1168 >> 2] = 0; //@line 18618
 $10 = $2 + 1940 | 0; //@line 18621
 HEAP8[$10 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 18622
 HEAP8[$2 + 1943 >> 0] = HEAP8[$2 + 1909 >> 0] | 0; //@line 18626
 HEAP8[$2 + 1956 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 18630
 HEAP8[$2 + 1957 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 18634
 $20 = $2 + 1958 | 0; //@line 18635
 HEAP8[$20 >> 0] = 0; //@line 18636
 HEAP32[$2 + 1960 >> 2] = 0; //@line 18638
 $25 = $2 + 4 | 0; //@line 18642
 if ((HEAP32[$2 + 2380 >> 2] | 0) == 2) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 18644
  __ZN7LoRaPHY20put_radio_to_standbyEv($25); //@line 18645
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 421; //@line 18648
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 18649
   HEAP32[$26 >> 2] = $2; //@line 18650
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 18651
   HEAP32[$27 >> 2] = $25; //@line 18652
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 18653
   HEAP32[$28 >> 2] = $10; //@line 18654
   $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 18655
   HEAP32[$29 >> 2] = $20; //@line 18656
   $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 18657
   HEAP32[$30 >> 2] = $4; //@line 18658
   $31 = $ReallocAsyncCtx2 + 24 | 0; //@line 18659
   HEAP32[$31 >> 2] = $6; //@line 18660
   sp = STACKTOP; //@line 18661
   return;
  }
  ___async_unwind = 0; //@line 18664
  HEAP32[$ReallocAsyncCtx2 >> 2] = 421; //@line 18665
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 18666
  HEAP32[$26 >> 2] = $2; //@line 18667
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 18668
  HEAP32[$27 >> 2] = $25; //@line 18669
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 18670
  HEAP32[$28 >> 2] = $10; //@line 18671
  $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 18672
  HEAP32[$29 >> 2] = $20; //@line 18673
  $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 18674
  HEAP32[$30 >> 2] = $4; //@line 18675
  $31 = $ReallocAsyncCtx2 + 24 | 0; //@line 18676
  HEAP32[$31 >> 2] = $6; //@line 18677
  sp = STACKTOP; //@line 18678
  return;
 } else {
  HEAP8[$2 + 2026 >> 0] = HEAP8[$2 + 1941 >> 0] | 0; //@line 18684
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 18685
  __ZN7LoRaPHY9rx_configEP18rx_config_params_t($25, $10) | 0; //@line 18686
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 422; //@line 18689
   $35 = $ReallocAsyncCtx3 + 4 | 0; //@line 18690
   HEAP32[$35 >> 2] = $20; //@line 18691
   $36 = $ReallocAsyncCtx3 + 8 | 0; //@line 18692
   HEAP32[$36 >> 2] = $2; //@line 18693
   $37 = $ReallocAsyncCtx3 + 12 | 0; //@line 18694
   HEAP32[$37 >> 2] = $25; //@line 18695
   $38 = $ReallocAsyncCtx3 + 16 | 0; //@line 18696
   HEAP32[$38 >> 2] = $4; //@line 18697
   $39 = $ReallocAsyncCtx3 + 20 | 0; //@line 18698
   HEAP32[$39 >> 2] = $6; //@line 18699
   sp = STACKTOP; //@line 18700
   return;
  }
  ___async_unwind = 0; //@line 18703
  HEAP32[$ReallocAsyncCtx3 >> 2] = 422; //@line 18704
  $35 = $ReallocAsyncCtx3 + 4 | 0; //@line 18705
  HEAP32[$35 >> 2] = $20; //@line 18706
  $36 = $ReallocAsyncCtx3 + 8 | 0; //@line 18707
  HEAP32[$36 >> 2] = $2; //@line 18708
  $37 = $ReallocAsyncCtx3 + 12 | 0; //@line 18709
  HEAP32[$37 >> 2] = $25; //@line 18710
  $38 = $ReallocAsyncCtx3 + 16 | 0; //@line 18711
  HEAP32[$38 >> 2] = $4; //@line 18712
  $39 = $ReallocAsyncCtx3 + 20 | 0; //@line 18713
  HEAP32[$39 >> 2] = $6; //@line 18714
  sp = STACKTOP; //@line 18715
  return;
 }
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_283($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9749
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9755
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9757
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9761
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9763
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9765
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9767
 switch (HEAP32[$6 >> 2] | 0) {
 case 0:
  {
   _mbed_tracef(16, 12685, 13285, $8); //@line 9771
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 9773
   __ZN7LoRaPHY18put_radio_to_sleepEv($12 + 4 | 0); //@line 9774
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 438; //@line 9777
    $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 9778
    HEAP32[$18 >> 2] = $6; //@line 9779
    $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 9780
    HEAP32[$19 >> 2] = $14; //@line 9781
    $20 = $ReallocAsyncCtx5 + 12 | 0; //@line 9782
    HEAP32[$20 >> 2] = $16; //@line 9783
    $21 = $ReallocAsyncCtx5 + 16 | 0; //@line 9784
    HEAP32[$21 >> 2] = $12; //@line 9785
    sp = STACKTOP; //@line 9786
    return;
   }
   ___async_unwind = 0; //@line 9789
   HEAP32[$ReallocAsyncCtx5 >> 2] = 438; //@line 9790
   $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 9791
   HEAP32[$18 >> 2] = $6; //@line 9792
   $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 9793
   HEAP32[$19 >> 2] = $14; //@line 9794
   $20 = $ReallocAsyncCtx5 + 12 | 0; //@line 9795
   HEAP32[$20 >> 2] = $16; //@line 9796
   $21 = $ReallocAsyncCtx5 + 16 | 0; //@line 9797
   HEAP32[$21 >> 2] = $12; //@line 9798
   sp = STACKTOP; //@line 9799
   return;
  }
 case 2:
  {
   HEAP8[$12 + 1177 >> 0] = 0; //@line 9805
   $23 = $12 + 4 | 0; //@line 9806
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 9807
   __ZN7LoRaPHY18put_radio_to_sleepEv($23); //@line 9808
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 439; //@line 9811
    $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 9812
    HEAP32[$24 >> 2] = $12; //@line 9813
    $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 9814
    HEAP32[$25 >> 2] = $23; //@line 9815
    $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 9816
    HEAP32[$26 >> 2] = $6; //@line 9817
    $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 9818
    HEAP32[$27 >> 2] = $14; //@line 9819
    $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 9820
    HEAP32[$28 >> 2] = $16; //@line 9821
    sp = STACKTOP; //@line 9822
    return;
   }
   ___async_unwind = 0; //@line 9825
   HEAP32[$ReallocAsyncCtx4 >> 2] = 439; //@line 9826
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 9827
   HEAP32[$24 >> 2] = $12; //@line 9828
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 9829
   HEAP32[$25 >> 2] = $23; //@line 9830
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 9831
   HEAP32[$26 >> 2] = $6; //@line 9832
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 9833
   HEAP32[$27 >> 2] = $14; //@line 9834
   $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 9835
   HEAP32[$28 >> 2] = $16; //@line 9836
   sp = STACKTOP; //@line 9837
   return;
  }
 default:
  {
   if ((HEAP32[$6 >> 2] | 0) != 2) {
    return;
   }
   _mbed_tracef(16, 12685, 13321, $14); //@line 9847
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 9848
   __ZN7LoRaMac15open_rx2_windowEv($12); //@line 9849
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 440; //@line 9852
    sp = STACKTOP; //@line 9853
    return;
   }
   ___async_unwind = 0; //@line 9856
   HEAP32[$ReallocAsyncCtx3 >> 2] = 440; //@line 9857
   sp = STACKTOP; //@line 9858
   return;
  }
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_61($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23986
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23988
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23990
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23992
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23994
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23996
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23998
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24000
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24002
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 24007
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 24010
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 24011
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 24012
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 24015
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 24016
   HEAP32[$22 >> 2] = $4; //@line 24017
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 24018
   HEAP32[$23 >> 2] = $2; //@line 24019
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 24020
   HEAP32[$24 >> 2] = $8; //@line 24021
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 24022
   HEAP32[$25 >> 2] = $6; //@line 24023
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 24024
   HEAP32[$26 >> 2] = $10; //@line 24025
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 24026
   HEAP32[$27 >> 2] = $12; //@line 24027
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 24028
   HEAP32[$28 >> 2] = $14; //@line 24029
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 24030
   HEAP32[$29 >> 2] = $16; //@line 24031
   sp = STACKTOP; //@line 24032
   return;
  }
  ___async_unwind = 0; //@line 24035
  HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 24036
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 24037
  HEAP32[$22 >> 2] = $4; //@line 24038
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 24039
  HEAP32[$23 >> 2] = $2; //@line 24040
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 24041
  HEAP32[$24 >> 2] = $8; //@line 24042
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 24043
  HEAP32[$25 >> 2] = $6; //@line 24044
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 24045
  HEAP32[$26 >> 2] = $10; //@line 24046
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 24047
  HEAP32[$27 >> 2] = $12; //@line 24048
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 24049
  HEAP32[$28 >> 2] = $14; //@line 24050
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 24051
  HEAP32[$29 >> 2] = $16; //@line 24052
  sp = STACKTOP; //@line 24053
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 24061
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 24063
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 24071
  return;
 }
 _mbed_tracef(16, 11997, 12228, $10); //@line 24074
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 24075
 _mbed_tracef(16, 11997, 12252, $14); //@line 24076
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 24077
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 24078
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 24081
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 24082
  HEAP32[$39 >> 2] = $6; //@line 24083
  sp = STACKTOP; //@line 24084
  return;
 }
 ___async_unwind = 0; //@line 24087
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 24088
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 24089
 HEAP32[$39 >> 2] = $6; //@line 24090
 sp = STACKTOP; //@line 24091
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_60($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23873
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23875
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23877
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23879
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23881
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23883
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23885
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23887
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23889
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 23894
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 23897
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 23898
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 23899
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 23902
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 23903
   HEAP32[$22 >> 2] = $4; //@line 23904
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 23905
   HEAP32[$23 >> 2] = $2; //@line 23906
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 23907
   HEAP32[$24 >> 2] = $8; //@line 23908
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 23909
   HEAP32[$25 >> 2] = $6; //@line 23910
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 23911
   HEAP32[$26 >> 2] = $10; //@line 23912
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 23913
   HEAP32[$27 >> 2] = $12; //@line 23914
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 23915
   HEAP32[$28 >> 2] = $14; //@line 23916
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 23917
   HEAP32[$29 >> 2] = $16; //@line 23918
   sp = STACKTOP; //@line 23919
   return;
  }
  ___async_unwind = 0; //@line 23922
  HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 23923
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 23924
  HEAP32[$22 >> 2] = $4; //@line 23925
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 23926
  HEAP32[$23 >> 2] = $2; //@line 23927
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 23928
  HEAP32[$24 >> 2] = $8; //@line 23929
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 23930
  HEAP32[$25 >> 2] = $6; //@line 23931
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 23932
  HEAP32[$26 >> 2] = $10; //@line 23933
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 23934
  HEAP32[$27 >> 2] = $12; //@line 23935
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 23936
  HEAP32[$28 >> 2] = $14; //@line 23937
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 23938
  HEAP32[$29 >> 2] = $16; //@line 23939
  sp = STACKTOP; //@line 23940
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 23948
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 23950
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 23958
  return;
 }
 _mbed_tracef(16, 11997, 12228, $10); //@line 23961
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 23962
 _mbed_tracef(16, 11997, 12252, $14); //@line 23963
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23964
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 23965
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 23968
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 23969
  HEAP32[$39 >> 2] = $6; //@line 23970
  sp = STACKTOP; //@line 23971
  return;
 }
 ___async_unwind = 0; //@line 23974
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 23975
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 23976
 HEAP32[$39 >> 2] = $6; //@line 23977
 sp = STACKTOP; //@line 23978
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_59($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23760
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23762
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23764
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23766
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23768
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23770
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23772
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23774
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23776
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 23781
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 23784
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 23785
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 23786
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 23789
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 23790
   HEAP32[$22 >> 2] = $4; //@line 23791
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 23792
   HEAP32[$23 >> 2] = $2; //@line 23793
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 23794
   HEAP32[$24 >> 2] = $8; //@line 23795
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 23796
   HEAP32[$25 >> 2] = $6; //@line 23797
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 23798
   HEAP32[$26 >> 2] = $10; //@line 23799
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 23800
   HEAP32[$27 >> 2] = $12; //@line 23801
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 23802
   HEAP32[$28 >> 2] = $14; //@line 23803
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 23804
   HEAP32[$29 >> 2] = $16; //@line 23805
   sp = STACKTOP; //@line 23806
   return;
  }
  ___async_unwind = 0; //@line 23809
  HEAP32[$ReallocAsyncCtx4 >> 2] = 281; //@line 23810
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 23811
  HEAP32[$22 >> 2] = $4; //@line 23812
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 23813
  HEAP32[$23 >> 2] = $2; //@line 23814
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 23815
  HEAP32[$24 >> 2] = $8; //@line 23816
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 23817
  HEAP32[$25 >> 2] = $6; //@line 23818
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 23819
  HEAP32[$26 >> 2] = $10; //@line 23820
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 23821
  HEAP32[$27 >> 2] = $12; //@line 23822
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 23823
  HEAP32[$28 >> 2] = $14; //@line 23824
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 23825
  HEAP32[$29 >> 2] = $16; //@line 23826
  sp = STACKTOP; //@line 23827
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 23835
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 23837
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 23845
  return;
 }
 _mbed_tracef(16, 11997, 12228, $10); //@line 23848
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 23849
 _mbed_tracef(16, 11997, 12252, $14); //@line 23850
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23851
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 23852
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 23855
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 23856
  HEAP32[$39 >> 2] = $6; //@line 23857
  sp = STACKTOP; //@line 23858
  return;
 }
 ___async_unwind = 0; //@line 23861
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 23862
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 23863
 HEAP32[$39 >> 2] = $6; //@line 23864
 sp = STACKTOP; //@line 23865
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 12321
 STACKTOP = STACKTOP + 224 | 0; //@line 12322
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 12322
 $3 = sp + 120 | 0; //@line 12323
 $4 = sp + 80 | 0; //@line 12324
 $5 = sp; //@line 12325
 $6 = sp + 136 | 0; //@line 12326
 dest = $4; //@line 12327
 stop = dest + 40 | 0; //@line 12327
 do {
  HEAP32[dest >> 2] = 0; //@line 12327
  dest = dest + 4 | 0; //@line 12327
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 12329
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 12333
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 12340
  } else {
   $43 = 0; //@line 12342
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 12344
  $14 = $13 & 32; //@line 12345
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 12351
  }
  $19 = $0 + 48 | 0; //@line 12353
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 12358
    $24 = HEAP32[$23 >> 2] | 0; //@line 12359
    HEAP32[$23 >> 2] = $6; //@line 12360
    $25 = $0 + 28 | 0; //@line 12361
    HEAP32[$25 >> 2] = $6; //@line 12362
    $26 = $0 + 20 | 0; //@line 12363
    HEAP32[$26 >> 2] = $6; //@line 12364
    HEAP32[$19 >> 2] = 80; //@line 12365
    $28 = $0 + 16 | 0; //@line 12367
    HEAP32[$28 >> 2] = $6 + 80; //@line 12368
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12369
    if (!$24) {
     $$1 = $29; //@line 12372
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 12375
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 12376
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 12377
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 663; //@line 12380
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 12382
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 12384
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 12386
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 12388
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 12390
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 12392
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 12394
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 12396
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 12398
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 12400
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 12402
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 12404
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 12406
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 12408
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 12410
      sp = STACKTOP; //@line 12411
      STACKTOP = sp; //@line 12412
      return 0; //@line 12412
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12414
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 12417
      HEAP32[$23 >> 2] = $24; //@line 12418
      HEAP32[$19 >> 2] = 0; //@line 12419
      HEAP32[$28 >> 2] = 0; //@line 12420
      HEAP32[$25 >> 2] = 0; //@line 12421
      HEAP32[$26 >> 2] = 0; //@line 12422
      $$1 = $$; //@line 12423
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12429
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 12432
  HEAP32[$0 >> 2] = $51 | $14; //@line 12437
  if ($43 | 0) {
   ___unlockfile($0); //@line 12440
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 12442
 }
 STACKTOP = sp; //@line 12444
 return $$0 | 0; //@line 12444
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_199($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 3243
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3247
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3249
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3251
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3253
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3255
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3257
 $15 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3258
 if (!$15) {
  $25 = $6 + 12 | 0; //@line 3262
  HEAP32[$6 >> 2] = 455; //@line 3263
  HEAP32[$6 + 4 >> 2] = 0; //@line 3265
  HEAP32[$6 + 8 >> 2] = $4; //@line 3267
  HEAP32[$25 >> 2] = 860; //@line 3268
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 3269
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($8, $4 + 1856 | 0, $6); //@line 3270
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 456; //@line 3273
   $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 3274
   HEAP32[$26 >> 2] = $25; //@line 3275
   $27 = $ReallocAsyncCtx5 + 8 | 0; //@line 3276
   HEAP32[$27 >> 2] = $8; //@line 3277
   $28 = $ReallocAsyncCtx5 + 12 | 0; //@line 3278
   HEAP32[$28 >> 2] = $4; //@line 3279
   $29 = $ReallocAsyncCtx5 + 16 | 0; //@line 3280
   HEAP32[$29 >> 2] = $12; //@line 3281
   $30 = $ReallocAsyncCtx5 + 20 | 0; //@line 3282
   HEAP32[$30 >> 2] = $14; //@line 3283
   $31 = $ReallocAsyncCtx5 + 24 | 0; //@line 3284
   HEAP32[$31 >> 2] = $6; //@line 3285
   sp = STACKTOP; //@line 3286
   return;
  }
  ___async_unwind = 0; //@line 3289
  HEAP32[$ReallocAsyncCtx5 >> 2] = 456; //@line 3290
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 3291
  HEAP32[$26 >> 2] = $25; //@line 3292
  $27 = $ReallocAsyncCtx5 + 8 | 0; //@line 3293
  HEAP32[$27 >> 2] = $8; //@line 3294
  $28 = $ReallocAsyncCtx5 + 12 | 0; //@line 3295
  HEAP32[$28 >> 2] = $4; //@line 3296
  $29 = $ReallocAsyncCtx5 + 16 | 0; //@line 3297
  HEAP32[$29 >> 2] = $12; //@line 3298
  $30 = $ReallocAsyncCtx5 + 20 | 0; //@line 3299
  HEAP32[$30 >> 2] = $14; //@line 3300
  $31 = $ReallocAsyncCtx5 + 24 | 0; //@line 3301
  HEAP32[$31 >> 2] = $6; //@line 3302
  sp = STACKTOP; //@line 3303
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 3307
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 3308
  FUNCTION_TABLE_vi[$18 & 1023]($10); //@line 3309
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 454; //@line 3312
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 3313
   HEAP32[$19 >> 2] = $4; //@line 3314
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 3315
   HEAP32[$20 >> 2] = $6; //@line 3316
   $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 3317
   HEAP32[$21 >> 2] = $8; //@line 3318
   $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 3319
   HEAP32[$22 >> 2] = $12; //@line 3320
   $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 3321
   HEAP32[$23 >> 2] = $14; //@line 3322
   sp = STACKTOP; //@line 3323
   return;
  }
  ___async_unwind = 0; //@line 3326
  HEAP32[$ReallocAsyncCtx3 >> 2] = 454; //@line 3327
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 3328
  HEAP32[$19 >> 2] = $4; //@line 3329
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 3330
  HEAP32[$20 >> 2] = $6; //@line 3331
  $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 3332
  HEAP32[$21 >> 2] = $8; //@line 3333
  $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 3334
  HEAP32[$22 >> 2] = $12; //@line 3335
  $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 3336
  HEAP32[$23 >> 2] = $14; //@line 3337
  sp = STACKTOP; //@line 3338
  return;
 }
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_37($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20482
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20488
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 20498
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 20500
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 20502
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 20504
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 20506
 $29 = HEAP32[$6 >> 2] | 0; //@line 20513
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 20516
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 20518
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 20519
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 20522
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 20523
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 513; //@line 20526
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 20527
   HEAP32[$37 >> 2] = $6; //@line 20528
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 20529
   HEAP32[$38 >> 2] = $16; //@line 20530
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 20531
   HEAP32[$39 >> 2] = $18; //@line 20532
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 20533
   HEAP32[$40 >> 2] = $20; //@line 20534
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 20535
   HEAP32[$41 >> 2] = $22; //@line 20536
   sp = STACKTOP; //@line 20537
   return;
  }
  ___async_unwind = 0; //@line 20540
  HEAP32[$ReallocAsyncCtx3 >> 2] = 513; //@line 20541
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 20542
  HEAP32[$37 >> 2] = $6; //@line 20543
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 20544
  HEAP32[$38 >> 2] = $16; //@line 20545
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 20546
  HEAP32[$39 >> 2] = $18; //@line 20547
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 20548
  HEAP32[$40 >> 2] = $20; //@line 20549
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 20550
  HEAP32[$41 >> 2] = $22; //@line 20551
  sp = STACKTOP; //@line 20552
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 20555
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 20556
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 514; //@line 20559
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 20560
   HEAP32[$42 >> 2] = $6; //@line 20561
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 20562
   HEAP32[$43 >> 2] = $16; //@line 20563
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 20564
   HEAP32[$44 >> 2] = $18; //@line 20565
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 20566
   HEAP32[$45 >> 2] = $20; //@line 20567
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 20568
   HEAP32[$46 >> 2] = $22; //@line 20569
   sp = STACKTOP; //@line 20570
   return;
  }
  ___async_unwind = 0; //@line 20573
  HEAP32[$ReallocAsyncCtx4 >> 2] = 514; //@line 20574
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 20575
  HEAP32[$42 >> 2] = $6; //@line 20576
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 20577
  HEAP32[$43 >> 2] = $16; //@line 20578
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 20579
  HEAP32[$44 >> 2] = $18; //@line 20580
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 20581
  HEAP32[$45 >> 2] = $20; //@line 20582
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 20583
  HEAP32[$46 >> 2] = $22; //@line 20584
  sp = STACKTOP; //@line 20585
  return;
 }
}
function _initialize__async_cb_208($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $43 = 0, $44 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 4361
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4363
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4365
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 4367
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4369
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4371
 $12 = $0 + 24 | 0; //@line 4373
 $14 = HEAP32[$12 >> 2] | 0; //@line 4375
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 4378
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 4380
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 4382
 $23 = HEAP32[$2 >> 2] | 0; //@line 4385
 $24 = $23 + 32 | 0; //@line 4386
 HEAP32[$24 >> 2] = HEAP32[___async_retval >> 2]; //@line 4387
 $25 = $23 + 40 | 0; //@line 4388
 $26 = $25; //@line 4389
 HEAP32[$26 >> 2] = 0; //@line 4391
 HEAP32[$26 + 4 >> 2] = 0; //@line 4394
 $30 = $23 + 8 | 0; //@line 4395
 HEAP32[$30 >> 2] = $4; //@line 4396
 $31 = $23 + 57 | 0; //@line 4397
 HEAP8[$31 >> 0] = $6; //@line 4398
 $32 = _bitshift64Shl(1, 0, $8 | 0) | 0; //@line 4399
 $34 = _i64Add($32 | 0, tempRet0 | 0, -1, 0) | 0; //@line 4401
 $36 = $23 + 12 | 0; //@line 4403
 HEAP32[$36 >> 2] = $34; //@line 4404
 HEAP32[$23 + 16 >> 2] = $10; //@line 4406
 $39 = $23 + 24 | 0; //@line 4408
 HEAP32[$39 >> 2] = $14; //@line 4410
 HEAP32[$39 + 4 >> 2] = $17; //@line 4413
 $43 = $23 + 48 | 0; //@line 4414
 $44 = $43; //@line 4415
 HEAP32[$44 >> 2] = 0; //@line 4417
 HEAP32[$44 + 4 >> 2] = 0; //@line 4420
 HEAP8[$23 + 56 >> 0] = 1; //@line 4422
 $51 = HEAP32[(HEAP32[$19 >> 2] | 0) + 4 >> 2] | 0; //@line 4425
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 4426
 $52 = FUNCTION_TABLE_i[$51 & 7]() | 0; //@line 4427
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 608; //@line 4430
  $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 4431
  HEAP32[$53 >> 2] = $2; //@line 4432
  $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 4433
  HEAP32[$54 >> 2] = $21; //@line 4434
  $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 4435
  HEAP32[$55 >> 2] = $24; //@line 4436
  $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 4437
  HEAP32[$56 >> 2] = $36; //@line 4438
  $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 4439
  HEAP32[$57 >> 2] = $30; //@line 4440
  $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 4441
  HEAP32[$58 >> 2] = $43; //@line 4442
  $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 4443
  HEAP32[$59 >> 2] = $31; //@line 4444
  $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 4445
  HEAP32[$60 >> 2] = $25; //@line 4446
  sp = STACKTOP; //@line 4447
  return;
 }
 HEAP32[___async_retval >> 2] = $52; //@line 4451
 ___async_unwind = 0; //@line 4452
 HEAP32[$ReallocAsyncCtx4 >> 2] = 608; //@line 4453
 $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 4454
 HEAP32[$53 >> 2] = $2; //@line 4455
 $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 4456
 HEAP32[$54 >> 2] = $21; //@line 4457
 $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 4458
 HEAP32[$55 >> 2] = $24; //@line 4459
 $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 4460
 HEAP32[$56 >> 2] = $36; //@line 4461
 $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 4462
 HEAP32[$57 >> 2] = $30; //@line 4463
 $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 4464
 HEAP32[$58 >> 2] = $43; //@line 4465
 $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 4466
 HEAP32[$59 >> 2] = $31; //@line 4467
 $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 4468
 HEAP32[$60 >> 2] = $25; //@line 4469
 sp = STACKTOP; //@line 4470
 return;
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16533
 STACKTOP = STACKTOP + 64 | 0; //@line 16534
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16534
 $4 = sp; //@line 16535
 $5 = HEAP32[$0 >> 2] | 0; //@line 16536
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 16539
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 16541
 HEAP32[$4 >> 2] = $2; //@line 16542
 HEAP32[$4 + 4 >> 2] = $0; //@line 16544
 HEAP32[$4 + 8 >> 2] = $1; //@line 16546
 HEAP32[$4 + 12 >> 2] = $3; //@line 16548
 $14 = $4 + 16 | 0; //@line 16549
 $15 = $4 + 20 | 0; //@line 16550
 $16 = $4 + 24 | 0; //@line 16551
 $17 = $4 + 28 | 0; //@line 16552
 $18 = $4 + 32 | 0; //@line 16553
 $19 = $4 + 40 | 0; //@line 16554
 dest = $14; //@line 16555
 stop = dest + 36 | 0; //@line 16555
 do {
  HEAP32[dest >> 2] = 0; //@line 16555
  dest = dest + 4 | 0; //@line 16555
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 16555
 HEAP8[$14 + 38 >> 0] = 0; //@line 16555
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 16560
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 16563
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16564
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 16565
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 675; //@line 16568
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 16570
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 16572
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 16574
    sp = STACKTOP; //@line 16575
    STACKTOP = sp; //@line 16576
    return 0; //@line 16576
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16578
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 16582
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 16586
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 16589
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16590
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 16591
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 676; //@line 16594
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 16596
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 16598
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 16600
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 16602
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 16604
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 16606
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 16608
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 16610
    sp = STACKTOP; //@line 16611
    STACKTOP = sp; //@line 16612
    return 0; //@line 16612
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16614
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 16628
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 16636
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 16652
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 16657
  }
 } while (0);
 STACKTOP = sp; //@line 16660
 return $$0 | 0; //@line 16660
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $43 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11060
 $2 = HEAP32[$0 + 2008 >> 2] | 0; //@line 11062
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 11068
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11069
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 1996 | 0); //@line 11070
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 361; //@line 11073
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11075
    sp = STACKTOP; //@line 11076
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11079
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 1868 >> 2] | 0; //@line 11085
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 11091
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11092
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 1856 | 0); //@line 11093
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 362; //@line 11096
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11098
    sp = STACKTOP; //@line 11099
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11102
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 1848 >> 2] | 0; //@line 11108
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 11114
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11115
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 1836 | 0); //@line 11116
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 363; //@line 11119
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11121
    sp = STACKTOP; //@line 11122
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11125
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 1828 >> 2] | 0; //@line 11131
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 11137
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11138
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1816 | 0); //@line 11139
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 364; //@line 11142
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 11144
    sp = STACKTOP; //@line 11145
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11148
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 1808 >> 2] | 0; //@line 11154
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 11160
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11161
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 1796 | 0); //@line 11162
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 365; //@line 11165
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 11167
    sp = STACKTOP; //@line 11168
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 11171
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 748 >> 2] | 0; //@line 11177
 if (!$37) {
  $43 = $0 + 4 | 0; //@line 11180
  __ZN12LoRaPHYEU868D2Ev($43); //@line 11181
  return;
 }
 $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 11186
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11187
 FUNCTION_TABLE_vi[$41 & 1023]($0 + 736 | 0); //@line 11188
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 366; //@line 11191
  HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 11193
  sp = STACKTOP; //@line 11194
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 11197
 $43 = $0 + 4 | 0; //@line 11198
 __ZN12LoRaPHYEU868D2Ev($43); //@line 11199
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_62($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24248
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24250
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 24252
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 24257
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 24258
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 24259
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 160; //@line 24262
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 24263
   HEAP32[$9 >> 2] = $2; //@line 24264
   sp = STACKTOP; //@line 24265
   return;
  }
  ___async_unwind = 0; //@line 24268
  HEAP32[$ReallocAsyncCtx3 >> 2] = 160; //@line 24269
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 24270
  HEAP32[$9 >> 2] = $2; //@line 24271
  sp = STACKTOP; //@line 24272
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 24276
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 24281
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 24282
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 24283
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 24286
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 24287
   HEAP32[$16 >> 2] = $2; //@line 24288
   sp = STACKTOP; //@line 24289
   return;
  }
  ___async_unwind = 0; //@line 24292
  HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 24293
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 24294
  HEAP32[$16 >> 2] = $2; //@line 24295
  sp = STACKTOP; //@line 24296
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 24300
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 24305
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24306
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 24307
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 24310
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 24311
   HEAP32[$23 >> 2] = $2; //@line 24312
   sp = STACKTOP; //@line 24313
   return;
  }
  ___async_unwind = 0; //@line 24316
  HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 24317
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 24318
  HEAP32[$23 >> 2] = $2; //@line 24319
  sp = STACKTOP; //@line 24320
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 24324
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 24329
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24330
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 24331
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 24334
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 24335
   HEAP32[$30 >> 2] = $2; //@line 24336
   sp = STACKTOP; //@line 24337
   return;
  }
  ___async_unwind = 0; //@line 24340
  HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 24341
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 24342
  HEAP32[$30 >> 2] = $2; //@line 24343
  sp = STACKTOP; //@line 24344
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 24348
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 24354
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 24355
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 24356
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 24359
  sp = STACKTOP; //@line 24360
  return;
 }
 ___async_unwind = 0; //@line 24363
 HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 24364
 sp = STACKTOP; //@line 24365
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv($0) {
 $0 = $0 | 0;
 var $19 = 0, $24 = 0, $40 = 0, $42 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14195
 STACKTOP = STACKTOP + 16 | 0; //@line 14196
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14196
 $vararg_buffer = sp; //@line 14197
 HEAP8[$0 + 2377 >> 0] = 0; //@line 14199
 $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14201
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 14202
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 420; //@line 14205
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 14207
  HEAP32[$AsyncCtx10 + 8 >> 2] = $vararg_buffer; //@line 14209
  HEAP32[$AsyncCtx10 + 12 >> 2] = $vararg_buffer; //@line 14211
  sp = STACKTOP; //@line 14212
  STACKTOP = sp; //@line 14213
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 14215
 HEAP32[$0 + 1168 >> 2] = 0; //@line 14217
 $9 = $0 + 1940 | 0; //@line 14220
 HEAP8[$9 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 14221
 HEAP8[$0 + 1943 >> 0] = HEAP8[$0 + 1909 >> 0] | 0; //@line 14225
 HEAP8[$0 + 1956 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 14229
 HEAP8[$0 + 1957 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 14233
 $19 = $0 + 1958 | 0; //@line 14234
 HEAP8[$19 >> 0] = 0; //@line 14235
 HEAP32[$0 + 1960 >> 2] = 0; //@line 14237
 $24 = $0 + 4 | 0; //@line 14241
 do {
  if ((HEAP32[$0 + 2380 >> 2] | 0) == 2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14244
   __ZN7LoRaPHY20put_radio_to_standbyEv($24); //@line 14245
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 421; //@line 14248
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 14250
    HEAP32[$AsyncCtx2 + 8 >> 2] = $24; //@line 14252
    HEAP32[$AsyncCtx2 + 12 >> 2] = $9; //@line 14254
    HEAP32[$AsyncCtx2 + 16 >> 2] = $19; //@line 14256
    HEAP32[$AsyncCtx2 + 20 >> 2] = $vararg_buffer; //@line 14258
    HEAP32[$AsyncCtx2 + 24 >> 2] = $vararg_buffer; //@line 14260
    sp = STACKTOP; //@line 14261
    STACKTOP = sp; //@line 14262
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14264
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 2026 >> 0] = HEAP8[$0 + 1941 >> 0] | 0; //@line 14272
 $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 14273
 __ZN7LoRaPHY9rx_configEP18rx_config_params_t($24, $9) | 0; //@line 14274
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 422; //@line 14277
  HEAP32[$AsyncCtx6 + 4 >> 2] = $19; //@line 14279
  HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 14281
  HEAP32[$AsyncCtx6 + 12 >> 2] = $24; //@line 14283
  HEAP32[$AsyncCtx6 + 16 >> 2] = $vararg_buffer; //@line 14285
  HEAP32[$AsyncCtx6 + 20 >> 2] = $vararg_buffer; //@line 14287
  sp = STACKTOP; //@line 14288
  STACKTOP = sp; //@line 14289
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 14291
 $40 = (HEAP8[$19 >> 0] | 0) != 0; //@line 14293
 $42 = HEAP32[$0 + 1888 >> 2] | 0; //@line 14295
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14296
 __ZN7LoRaPHY15setup_rx_windowEbj($24, $40, $42); //@line 14297
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 423; //@line 14300
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 14302
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14304
  sp = STACKTOP; //@line 14305
  STACKTOP = sp; //@line 14306
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14308
  _mbed_tracef(16, 12685, 13047, $vararg_buffer); //@line 14309
  STACKTOP = sp; //@line 14310
  return;
 }
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $19 = 0, $20 = 0, $22 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15857
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15859
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1796 | 0); //@line 15860
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 460; //@line 15863
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 15865
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 15867
  sp = STACKTOP; //@line 15868
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15871
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15873
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 15874
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 461; //@line 15877
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15879
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 15881
  sp = STACKTOP; //@line 15882
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15885
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15887
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 15888
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 462; //@line 15891
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 15893
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 15895
  sp = STACKTOP; //@line 15896
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15899
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15901
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 15902
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 463; //@line 15905
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15907
  sp = STACKTOP; //@line 15908
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15911
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15913
 __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 15914
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 464; //@line 15917
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15919
  sp = STACKTOP; //@line 15920
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15923
  HEAP8[$0 + 2376 >> 0] = 0; //@line 15925
  HEAP8[$0 + 1181 >> 0] = 0; //@line 15927
  HEAP8[$0 + 1175 >> 0] = 1; //@line 15929
  HEAP8[$0 + 1177 >> 0] = 0; //@line 15931
  HEAP8[$0 + 1178 >> 0] = 0; //@line 15933
  $19 = $0 + 476 | 0; //@line 15934
  __ZN14LoRaMacCommand20clear_command_bufferEv($19); //@line 15935
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($19); //@line 15936
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($19); //@line 15937
  $20 = $0 + 2052 | 0; //@line 15938
  HEAP32[$20 >> 2] = 0; //@line 15939
  HEAP32[$20 + 4 >> 2] = 0; //@line 15939
  HEAP32[$20 + 8 >> 2] = 0; //@line 15939
  HEAP32[$20 + 12 >> 2] = 0; //@line 15939
  HEAP32[$20 + 16 >> 2] = 0; //@line 15939
  HEAP32[$20 + 20 >> 2] = 0; //@line 15939
  HEAP32[$0 + 2056 >> 2] = 1; //@line 15941
  $22 = $0 + 2084 | 0; //@line 15942
  HEAP32[$22 >> 2] = 0; //@line 15943
  HEAP32[$22 + 4 >> 2] = 0; //@line 15943
  HEAP32[$22 + 8 >> 2] = 0; //@line 15943
  HEAP32[$22 + 12 >> 2] = 0; //@line 15943
  HEAP32[$22 + 16 >> 2] = 0; //@line 15943
  HEAP32[$0 + 2092 >> 2] = 1; //@line 15945
  dest = $0 + 2012 | 0; //@line 15947
  stop = dest + 40 | 0; //@line 15947
  do {
   HEAP32[dest >> 2] = 0; //@line 15947
   dest = dest + 4 | 0; //@line 15947
  } while ((dest | 0) < (stop | 0));
  HEAP32[$0 + 2020 >> 2] = 1; //@line 15949
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $30 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9153
 STACKTOP = STACKTOP + 32 | 0; //@line 9154
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9154
 $1 = sp + 8 | 0; //@line 9156
 $2 = $0 + 2904 | 0; //@line 9157
 if (HEAP32[$2 >> 2] & 8 | 0) {
  _mbed_tracef(16, 11997, 12327, sp); //@line 9162
 }
 HEAP8[$0 + 2548 >> 0] = 1; //@line 9165
 $7 = $0 + 2512 | 0; //@line 9166
 $8 = HEAP32[$7 >> 2] | 0; //@line 9167
 do {
  if ($8 | 0) {
   $12 = HEAP32[$0 + 3168 >> 2] | 0; //@line 9173
   $14 = HEAP32[$8 + 4 >> 2] | 0; //@line 9175
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 9176
   FUNCTION_TABLE_vii[$14 & 15]($1, $0 + 2500 | 0); //@line 9177
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 318; //@line 9180
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 9182
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9184
    HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 9186
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9188
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 9190
    HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 9192
    sp = STACKTOP; //@line 9193
    STACKTOP = sp; //@line 9194
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9196
   $21 = $1 + 12 | 0; //@line 9198
   HEAP32[$21 >> 2] = HEAP32[$7 >> 2]; //@line 9199
   $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9200
   $22 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($12, $1, 0) | 0; //@line 9201
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 319; //@line 9204
    HEAP32[$AsyncCtx5 + 4 >> 2] = $21; //@line 9206
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 9208
    HEAP32[$AsyncCtx5 + 12 >> 2] = $2; //@line 9210
    HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 9212
    sp = STACKTOP; //@line 9213
    STACKTOP = sp; //@line 9214
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9216
   $27 = HEAP32[$21 >> 2] | 0; //@line 9217
   do {
    if ($27 | 0) {
     $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 9222
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9223
     FUNCTION_TABLE_vi[$30 & 1023]($1); //@line 9224
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 320; //@line 9227
      HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 9229
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9231
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 9233
      HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 9235
      sp = STACKTOP; //@line 9236
      STACKTOP = sp; //@line 9237
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9239
      break;
     }
    }
   } while (0);
   if (!$22) {
    $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9246
    _mbed_assert_internal(11890, 11899, 778); //@line 9247
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 321; //@line 9250
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 9252
     HEAP32[$AsyncCtx9 + 8 >> 2] = $2; //@line 9254
     HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 9256
     sp = STACKTOP; //@line 9257
     STACKTOP = sp; //@line 9258
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9260
     break;
    }
   }
  }
 } while (0);
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4; //@line 9268
 HEAP32[$0 + 2496 >> 2] = 2; //@line 9270
 STACKTOP = sp; //@line 9271
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_135($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $29 = 0, $30 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29312
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29314
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29316
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29318
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29320
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29322
 if (!(HEAP32[$0 + 24 >> 2] | 0)) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 29327
  _mbed_assert_internal(11890, 11899, 778); //@line 29328
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 247; //@line 29331
   $14 = $ReallocAsyncCtx11 + 4 | 0; //@line 29332
   HEAP32[$14 >> 2] = $2; //@line 29333
   $15 = $ReallocAsyncCtx11 + 8 | 0; //@line 29334
   HEAP32[$15 >> 2] = $10; //@line 29335
   $16 = $ReallocAsyncCtx11 + 12 | 0; //@line 29336
   HEAP32[$16 >> 2] = $4; //@line 29337
   $17 = $ReallocAsyncCtx11 + 16 | 0; //@line 29338
   HEAP32[$17 >> 2] = $6; //@line 29339
   $18 = $ReallocAsyncCtx11 + 20 | 0; //@line 29340
   HEAP32[$18 >> 2] = $8; //@line 29341
   sp = STACKTOP; //@line 29342
   return;
  }
  ___async_unwind = 0; //@line 29345
  HEAP32[$ReallocAsyncCtx11 >> 2] = 247; //@line 29346
  $14 = $ReallocAsyncCtx11 + 4 | 0; //@line 29347
  HEAP32[$14 >> 2] = $2; //@line 29348
  $15 = $ReallocAsyncCtx11 + 8 | 0; //@line 29349
  HEAP32[$15 >> 2] = $10; //@line 29350
  $16 = $ReallocAsyncCtx11 + 12 | 0; //@line 29351
  HEAP32[$16 >> 2] = $4; //@line 29352
  $17 = $ReallocAsyncCtx11 + 16 | 0; //@line 29353
  HEAP32[$17 >> 2] = $6; //@line 29354
  $18 = $ReallocAsyncCtx11 + 20 | 0; //@line 29355
  HEAP32[$18 >> 2] = $8; //@line 29356
  sp = STACKTOP; //@line 29357
  return;
 }
 if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) == 2) {
  label = 10; //@line 29363
 } else {
  if (!(HEAP8[$2 + 15 >> 0] | 0)) {
   label = 10; //@line 29369
  }
 }
 if ((label | 0) == 10) {
  if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
   return;
  }
  if ((HEAP32[$2 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $29 = $8 + 2512 | 0; //@line 29385
 $30 = HEAP32[$29 >> 2] | 0; //@line 29386
 if (!$30) {
  return;
 }
 $34 = HEAP32[$8 + 3168 >> 2] | 0; //@line 29393
 $36 = HEAP32[$30 + 4 >> 2] | 0; //@line 29395
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 29396
 FUNCTION_TABLE_vii[$36 & 15]($10, $8 + 2500 | 0); //@line 29397
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 29400
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 29401
  HEAP32[$37 >> 2] = $29; //@line 29402
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 29403
  HEAP32[$38 >> 2] = $10; //@line 29404
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 29405
  HEAP32[$39 >> 2] = $34; //@line 29406
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 29407
  HEAP32[$40 >> 2] = $10; //@line 29408
  sp = STACKTOP; //@line 29409
  return;
 }
 ___async_unwind = 0; //@line 29412
 HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 29413
 $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 29414
 HEAP32[$37 >> 2] = $29; //@line 29415
 $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 29416
 HEAP32[$38 >> 2] = $10; //@line 29417
 $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 29418
 HEAP32[$39 >> 2] = $34; //@line 29419
 $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 29420
 HEAP32[$40 >> 2] = $10; //@line 29421
 sp = STACKTOP; //@line 29422
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $22 = 0, $29 = 0, $30 = 0, $39 = 0, $41 = 0, $49 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 12610
 STACKTOP = STACKTOP + 16 | 0; //@line 12611
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12611
 $vararg_buffer = sp; //@line 12612
 HEAP8[$0 + 2377 >> 0] = 1; //@line 12614
 $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12616
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 12617
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 390; //@line 12620
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12622
  HEAP32[$AsyncCtx7 + 8 >> 2] = $vararg_buffer; //@line 12624
  HEAP32[$AsyncCtx7 + 12 >> 2] = $vararg_buffer; //@line 12626
  sp = STACKTOP; //@line 12627
  STACKTOP = sp; //@line 12628
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12630
 $8 = $0 + 1964 | 0; //@line 12633
 HEAP8[$8 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 12634
 $11 = $0 + 1968 | 0; //@line 12637
 HEAP32[$11 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 12638
 HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 12642
 HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 12646
 $18 = $0 + 1982 | 0; //@line 12647
 $22 = $0 + 1984 | 0; //@line 12651
 HEAP32[$22 >> 2] = HEAP8[$18 >> 0] | 0 ? 2 : 1; //@line 12652
 HEAP8[$18 >> 0] = (HEAP32[$0 + 2380 >> 2] | 0) == 2 & 1; //@line 12657
 HEAP8[$0 + 2026 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 12661
 $29 = $0 + 4 | 0; //@line 12662
 $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 12663
 $30 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($29, $8) | 0; //@line 12664
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 391; //@line 12667
  HEAP32[$AsyncCtx3 + 4 >> 2] = $18; //@line 12669
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 12671
  HEAP32[$AsyncCtx3 + 12 >> 2] = $29; //@line 12673
  HEAP32[$AsyncCtx3 + 16 >> 2] = $11; //@line 12675
  HEAP32[$AsyncCtx3 + 20 >> 2] = $vararg_buffer; //@line 12677
  HEAP32[$AsyncCtx3 + 24 >> 2] = $vararg_buffer; //@line 12679
  HEAP32[$AsyncCtx3 + 28 >> 2] = $22; //@line 12681
  sp = STACKTOP; //@line 12682
  STACKTOP = sp; //@line 12683
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12685
 if (!$30) {
  $49 = HEAP32[$11 >> 2] | 0; //@line 12687
  HEAP32[$vararg_buffer >> 2] = $49; //@line 12688
  _mbed_tracef(16, 12685, 12747, $vararg_buffer); //@line 12689
  STACKTOP = sp; //@line 12690
  return;
 }
 $39 = (HEAP8[$18 >> 0] | 0) != 0; //@line 12693
 $41 = HEAP32[$0 + 1888 >> 2] | 0; //@line 12695
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 12696
 __ZN7LoRaPHY15setup_rx_windowEbj($29, $39, $41); //@line 12697
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 392; //@line 12700
  HEAP32[$AsyncCtx + 4 >> 2] = $22; //@line 12702
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12704
  HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 12706
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 12708
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 12710
  sp = STACKTOP; //@line 12711
  STACKTOP = sp; //@line 12712
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12714
 HEAP32[$0 + 1168 >> 2] = HEAP32[$22 >> 2]; //@line 12717
 $49 = HEAP32[$11 >> 2] | 0; //@line 12718
 HEAP32[$vararg_buffer >> 2] = $49; //@line 12719
 _mbed_tracef(16, 12685, 12747, $vararg_buffer); //@line 12720
 STACKTOP = sp; //@line 12721
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 12193
 $7 = ($2 | 0) != 0; //@line 12197
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 12201
   $$03555 = $0; //@line 12202
   $$03654 = $2; //@line 12202
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 12207
     $$036$lcssa64 = $$03654; //@line 12207
     label = 6; //@line 12208
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 12211
    $12 = $$03654 + -1 | 0; //@line 12212
    $16 = ($12 | 0) != 0; //@line 12216
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 12219
     $$03654 = $12; //@line 12219
    } else {
     $$035$lcssa = $11; //@line 12221
     $$036$lcssa = $12; //@line 12221
     $$lcssa = $16; //@line 12221
     label = 5; //@line 12222
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 12227
   $$036$lcssa = $2; //@line 12227
   $$lcssa = $7; //@line 12227
   label = 5; //@line 12228
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 12233
   $$036$lcssa64 = $$036$lcssa; //@line 12233
   label = 6; //@line 12234
  } else {
   $$2 = $$035$lcssa; //@line 12236
   $$3 = 0; //@line 12236
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 12242
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 12245
    $$3 = $$036$lcssa64; //@line 12245
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 12247
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 12251
      $$13745 = $$036$lcssa64; //@line 12251
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 12254
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 12263
       $30 = $$13745 + -4 | 0; //@line 12264
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 12267
        $$13745 = $30; //@line 12267
       } else {
        $$0$lcssa = $29; //@line 12269
        $$137$lcssa = $30; //@line 12269
        label = 11; //@line 12270
        break L11;
       }
      }
      $$140 = $$046; //@line 12274
      $$23839 = $$13745; //@line 12274
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 12276
      $$137$lcssa = $$036$lcssa64; //@line 12276
      label = 11; //@line 12277
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 12283
      $$3 = 0; //@line 12283
      break;
     } else {
      $$140 = $$0$lcssa; //@line 12286
      $$23839 = $$137$lcssa; //@line 12286
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 12293
      $$3 = $$23839; //@line 12293
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 12296
     $$23839 = $$23839 + -1 | 0; //@line 12297
     if (!$$23839) {
      $$2 = $35; //@line 12300
      $$3 = 0; //@line 12300
      break;
     } else {
      $$140 = $35; //@line 12303
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 12311
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 11964
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2630] | 0)) {
     $34 = 0; //@line 11972
    } else {
     $12 = HEAP32[2630] | 0; //@line 11974
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11975
     $13 = _fflush($12) | 0; //@line 11976
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 659; //@line 11979
      sp = STACKTOP; //@line 11980
      return 0; //@line 11981
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 11983
      $34 = $13; //@line 11984
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 11990
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 11994
    } else {
     $$02327 = $$02325; //@line 11996
     $$02426 = $34; //@line 11996
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 12003
      } else {
       $28 = 0; //@line 12005
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12013
       $25 = ___fflush_unlocked($$02327) | 0; //@line 12014
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 12019
       $$1 = $25 | $$02426; //@line 12021
      } else {
       $$1 = $$02426; //@line 12023
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 12027
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 12030
      if (!$$023) {
       $$024$lcssa = $$1; //@line 12033
       break L9;
      } else {
       $$02327 = $$023; //@line 12036
       $$02426 = $$1; //@line 12036
      }
     }
     HEAP32[$AsyncCtx >> 2] = 660; //@line 12039
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 12041
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 12043
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 12045
     sp = STACKTOP; //@line 12046
     return 0; //@line 12047
    }
   } while (0);
   ___ofl_unlock(); //@line 12050
   $$0 = $$024$lcssa; //@line 12051
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12057
    $5 = ___fflush_unlocked($0) | 0; //@line 12058
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 657; //@line 12061
     sp = STACKTOP; //@line 12062
     return 0; //@line 12063
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 12065
     $$0 = $5; //@line 12066
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 12071
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12072
   $7 = ___fflush_unlocked($0) | 0; //@line 12073
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 658; //@line 12076
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 12079
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 12081
    sp = STACKTOP; //@line 12082
    return 0; //@line 12083
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12085
   if ($phitmp) {
    $$0 = $7; //@line 12087
   } else {
    ___unlockfile($0); //@line 12089
    $$0 = $7; //@line 12090
   }
  }
 } while (0);
 return $$0 | 0; //@line 12094
}
function __ZN7LoRaPHY18dl_channel_requestEhj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18172
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18174
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18176
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18178
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18180
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18182
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 18184
 if (HEAP8[___async_retval >> 0] & 1) {
  $31 = $2; //@line 18189
 } else {
  $18 = $2 + 1 | 0; //@line 18191
  if (($18 | 0) < (HEAPU8[$10 >> 0] | 0 | 0)) {
   $16 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 18198
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 18200
   $19 = FUNCTION_TABLE_iiii[$16 & 31]($6, $8, $18 & 255) | 0; //@line 18201
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 520; //@line 18204
    $20 = $ReallocAsyncCtx + 4 | 0; //@line 18205
    HEAP32[$20 >> 2] = $18; //@line 18206
    $21 = $ReallocAsyncCtx + 8 | 0; //@line 18207
    HEAP32[$21 >> 2] = $4; //@line 18208
    $22 = $ReallocAsyncCtx + 12 | 0; //@line 18209
    HEAP32[$22 >> 2] = $6; //@line 18210
    $23 = $ReallocAsyncCtx + 16 | 0; //@line 18211
    HEAP32[$23 >> 2] = $8; //@line 18212
    $24 = $ReallocAsyncCtx + 20 | 0; //@line 18213
    HEAP32[$24 >> 2] = $10; //@line 18214
    $25 = $ReallocAsyncCtx + 24 | 0; //@line 18215
    HEAP8[$25 >> 0] = $12; //@line 18216
    sp = STACKTOP; //@line 18217
    return;
   }
   HEAP8[___async_retval >> 0] = $19 & 1; //@line 18222
   ___async_unwind = 0; //@line 18223
   HEAP32[$ReallocAsyncCtx >> 2] = 520; //@line 18224
   $20 = $ReallocAsyncCtx + 4 | 0; //@line 18225
   HEAP32[$20 >> 2] = $18; //@line 18226
   $21 = $ReallocAsyncCtx + 8 | 0; //@line 18227
   HEAP32[$21 >> 2] = $4; //@line 18228
   $22 = $ReallocAsyncCtx + 12 | 0; //@line 18229
   HEAP32[$22 >> 2] = $6; //@line 18230
   $23 = $ReallocAsyncCtx + 16 | 0; //@line 18231
   HEAP32[$23 >> 2] = $8; //@line 18232
   $24 = $ReallocAsyncCtx + 20 | 0; //@line 18233
   HEAP32[$24 >> 2] = $10; //@line 18234
   $25 = $ReallocAsyncCtx + 24 | 0; //@line 18235
   HEAP8[$25 >> 0] = $12; //@line 18236
   sp = STACKTOP; //@line 18237
   return;
  } else {
   $31 = -1; //@line 18240
  }
 }
 $34 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 18246
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 18247
 $35 = FUNCTION_TABLE_iiii[$34 & 31]($6, $8, $31 & 255) | 0; //@line 18248
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 521; //@line 18251
  $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 18252
  HEAP32[$36 >> 2] = $6; //@line 18253
  $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 18254
  HEAP8[$37 >> 0] = $12; //@line 18255
  $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 18256
  HEAP32[$38 >> 2] = $8; //@line 18257
  sp = STACKTOP; //@line 18258
  return;
 }
 HEAP8[___async_retval >> 0] = $35 & 1; //@line 18263
 ___async_unwind = 0; //@line 18264
 HEAP32[$ReallocAsyncCtx2 >> 2] = 521; //@line 18265
 $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 18266
 HEAP32[$36 >> 2] = $6; //@line 18267
 $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 18268
 HEAP8[$37 >> 0] = $12; //@line 18269
 $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 18270
 HEAP32[$38 >> 2] = $8; //@line 18271
 sp = STACKTOP; //@line 18272
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_19($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19133
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19135
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19137
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19139
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19141
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19143
 $12 = $0 + 24 | 0; //@line 19145
 $14 = HEAP32[$12 >> 2] | 0; //@line 19147
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 19150
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 19152
 $20 = HEAP32[$2 >> 2] | 0; //@line 19153
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 19157
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(32) | 0; //@line 19158
  FUNCTION_TABLE_vii[$23 & 15]($6, $8); //@line 19159
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 19162
   $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 19163
   HEAP32[$24 >> 2] = $2; //@line 19164
   $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 19165
   HEAP32[$25 >> 2] = $4; //@line 19166
   $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 19167
   HEAP32[$26 >> 2] = $10; //@line 19168
   $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 19169
   $28 = $27; //@line 19170
   $29 = $28; //@line 19171
   HEAP32[$29 >> 2] = $14; //@line 19172
   $30 = $28 + 4 | 0; //@line 19173
   $31 = $30; //@line 19174
   HEAP32[$31 >> 2] = $17; //@line 19175
   $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 19176
   HEAP32[$32 >> 2] = $19; //@line 19177
   $33 = $ReallocAsyncCtx5 + 28 | 0; //@line 19178
   HEAP32[$33 >> 2] = $8; //@line 19179
   sp = STACKTOP; //@line 19180
   return;
  }
  ___async_unwind = 0; //@line 19183
  HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 19184
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 19185
  HEAP32[$24 >> 2] = $2; //@line 19186
  $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 19187
  HEAP32[$25 >> 2] = $4; //@line 19188
  $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 19189
  HEAP32[$26 >> 2] = $10; //@line 19190
  $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 19191
  $28 = $27; //@line 19192
  $29 = $28; //@line 19193
  HEAP32[$29 >> 2] = $14; //@line 19194
  $30 = $28 + 4 | 0; //@line 19195
  $31 = $30; //@line 19196
  HEAP32[$31 >> 2] = $17; //@line 19197
  $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 19198
  HEAP32[$32 >> 2] = $19; //@line 19199
  $33 = $ReallocAsyncCtx5 + 28 | 0; //@line 19200
  HEAP32[$33 >> 2] = $8; //@line 19201
  sp = STACKTOP; //@line 19202
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 19205
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 19206
 $34 = HEAP32[$2 >> 2] | 0; //@line 19207
 if (!$34) {
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($19); //@line 19210
  return;
 }
 $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 19214
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19215
 FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 19216
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 55; //@line 19219
  $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 19220
  HEAP32[$38 >> 2] = $19; //@line 19221
  sp = STACKTOP; //@line 19222
  return;
 }
 ___async_unwind = 0; //@line 19225
 HEAP32[$ReallocAsyncCtx6 >> 2] = 55; //@line 19226
 $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 19227
 HEAP32[$38 >> 2] = $19; //@line 19228
 sp = STACKTOP; //@line 19229
 return;
}
function _mbed_vtracef__async_cb_374($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28657
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28659
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 28664
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28666
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28668
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28670
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28672
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28674
 $$13 = ($AsyncRetVal | 0) >= ($2 | 0) ? 0 : $AsyncRetVal; //@line 28676
 $18 = (HEAP32[$0 + 8 >> 2] | 0) + $$13 | 0; //@line 28678
 $19 = $2 - $$13 | 0; //@line 28679
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[173] | 0; //@line 28683
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $6 ^ 1) {
     break;
    }
    _snprintf($18, $19, 11852, $8) | 0; //@line 28695
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 28698
   $23 = FUNCTION_TABLE_i[$21 & 7]() | 0; //@line 28699
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 134; //@line 28702
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 28703
    HEAP32[$24 >> 2] = $12; //@line 28704
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 28705
    HEAP32[$25 >> 2] = $18; //@line 28706
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 28707
    HEAP32[$26 >> 2] = $19; //@line 28708
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 28709
    HEAP32[$27 >> 2] = $14; //@line 28710
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 28711
    $$expand_i1_val = $6 & 1; //@line 28712
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 28713
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 28714
    HEAP32[$29 >> 2] = $8; //@line 28715
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 28716
    HEAP32[$30 >> 2] = $10; //@line 28717
    sp = STACKTOP; //@line 28718
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 28722
   ___async_unwind = 0; //@line 28723
   HEAP32[$ReallocAsyncCtx6 >> 2] = 134; //@line 28724
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 28725
   HEAP32[$24 >> 2] = $12; //@line 28726
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 28727
   HEAP32[$25 >> 2] = $18; //@line 28728
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 28729
   HEAP32[$26 >> 2] = $19; //@line 28730
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 28731
   HEAP32[$27 >> 2] = $14; //@line 28732
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 28733
   $$expand_i1_val = $6 & 1; //@line 28734
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 28735
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 28736
   HEAP32[$29 >> 2] = $8; //@line 28737
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 28738
   HEAP32[$30 >> 2] = $10; //@line 28739
   sp = STACKTOP; //@line 28740
   return;
  }
 } while (0);
 $34 = HEAP32[174] | 0; //@line 28744
 $35 = HEAP32[167] | 0; //@line 28745
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 28746
 FUNCTION_TABLE_vi[$34 & 1023]($35); //@line 28747
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 28750
  sp = STACKTOP; //@line 28751
  return;
 }
 ___async_unwind = 0; //@line 28754
 HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 28755
 sp = STACKTOP; //@line 28756
 return;
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 21182
  return $$0$lcssa | 0; //@line 21183
 }
 $6 = $0 + 8 | 0; //@line 21185
 $wide$trip$count = $4 & 255; //@line 21186
 if ($1) {
  $$060$us = -1; //@line 21188
  $indvars$iv = 0; //@line 21188
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 21190
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 21193
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 21195
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 21200
      $$2$us = $$060$us; //@line 21201
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 21204
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 21207
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 21215
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 21220
      } else {
       $$2$us = $$060$us; //@line 21222
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 21226
     $$2$us = 0; //@line 21227
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 21230
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 21233
    break;
   } else {
    $$060$us = $$2$us; //@line 21236
   }
  }
  return $$0$lcssa | 0; //@line 21239
 } else {
  $$060 = -1; //@line 21241
  $indvars$iv62 = 0; //@line 21241
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 21245
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 21247
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 21253
  } else {
   $34 = 0; //@line 21255
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 21259
   label = 17; //@line 21260
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 21264
    label = 17; //@line 21265
   } else {
    $41 = 0; //@line 21267
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 21271
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 21275
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 21277
  $39 = HEAP32[$38 >> 2] | 0; //@line 21278
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 21281
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 21284
  } else {
   HEAP32[$38 >> 2] = 0; //@line 21286
   $$2 = $$060; //@line 21287
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 21289
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 21292
   break;
  } else {
   $$060 = $$2; //@line 21295
  }
 }
 return $$0$lcssa | 0; //@line 21298
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16715
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16721
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 16727
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 16730
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16731
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 16732
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 679; //@line 16735
     sp = STACKTOP; //@line 16736
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16739
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 16747
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 16752
     $19 = $1 + 44 | 0; //@line 16753
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 16759
     HEAP8[$22 >> 0] = 0; //@line 16760
     $23 = $1 + 53 | 0; //@line 16761
     HEAP8[$23 >> 0] = 0; //@line 16762
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 16764
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 16767
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16768
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 16769
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 678; //@line 16772
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 16774
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16776
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 16778
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 16780
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 16782
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 16784
      sp = STACKTOP; //@line 16785
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16788
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 16792
      label = 13; //@line 16793
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 16798
       label = 13; //@line 16799
      } else {
       $$037$off039 = 3; //@line 16801
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 16805
      $39 = $1 + 40 | 0; //@line 16806
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 16809
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16819
        $$037$off039 = $$037$off038; //@line 16820
       } else {
        $$037$off039 = $$037$off038; //@line 16822
       }
      } else {
       $$037$off039 = $$037$off038; //@line 16825
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 16828
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 16835
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12732
 do {
  if ((HEAP32[$0 + 2380 >> 2] | 0) == 2) {
   if (!(HEAP8[$0 + 2377 >> 0] | 0)) {
    $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12742
    __ZN7LoRaMac15open_rx2_windowEv($0); //@line 12743
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 393; //@line 12746
     HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 12748
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 12750
     HEAP16[$AsyncCtx7 + 12 >> 1] = $2; //@line 12752
     HEAP16[$AsyncCtx7 + 14 >> 1] = $3; //@line 12754
     HEAP8[$AsyncCtx7 + 16 >> 0] = $4; //@line 12756
     sp = STACKTOP; //@line 12757
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12760
     break;
    }
   } else {
    label = 6; //@line 12764
   }
  } else {
   label = 6; //@line 12767
  }
 } while (0);
 do {
  if ((label | 0) == 6) {
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12773
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 12774
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 394; //@line 12777
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12779
    HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 12781
    HEAP16[$AsyncCtx15 + 12 >> 1] = $2; //@line 12783
    HEAP16[$AsyncCtx15 + 14 >> 1] = $3; //@line 12785
    HEAP8[$AsyncCtx15 + 16 >> 0] = $4; //@line 12787
    sp = STACKTOP; //@line 12788
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12791
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12793
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 12794
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 395; //@line 12797
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 12799
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 12801
    HEAP16[$AsyncCtx11 + 12 >> 1] = $2; //@line 12803
    HEAP16[$AsyncCtx11 + 14 >> 1] = $3; //@line 12805
    HEAP8[$AsyncCtx11 + 16 >> 0] = $4; //@line 12807
    sp = STACKTOP; //@line 12808
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12811
    break;
   }
  }
 } while (0);
 $trunc = (HEAPU8[$1 >> 0] | 0) >>> 5; //@line 12817
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$0 + 2376 >> 0] | 0) {
    HEAP8[$0 + 2084 >> 0] = 0; //@line 12826
    return;
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12829
   __ZN7LoRaMac24handle_join_accept_frameEPKht($0, $1, $2); //@line 12830
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 396; //@line 12833
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12835
    sp = STACKTOP; //@line 12836
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12839
   HEAP8[$0 + 2084 >> 0] = 1; //@line 12841
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12846
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($0, $1, $2, 1, $trunc, $3, $4); //@line 12847
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 397; //@line 12850
    sp = STACKTOP; //@line 12851
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 12854
   return;
  }
 default:
  {
   return;
  }
 }
}
function _mbed_vtracef__async_cb_375($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28766
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 28769
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28771
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28773
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28775
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28777
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28779
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28781
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28783
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28785
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28787
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28789
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28791
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28793
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28795
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28797
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28799
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28801
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 28803
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 28805
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 28807
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 28809
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 28811
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 28813
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 28815
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 28817
 $55 = ($50 | 0 ? 4 : 0) + $50 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 28823
 $56 = HEAP32[172] | 0; //@line 28824
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 28825
 $57 = FUNCTION_TABLE_ii[$56 & 15]($55) | 0; //@line 28826
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 28830
  ___async_unwind = 0; //@line 28831
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 132; //@line 28833
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $2 & 1; //@line 28836
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 28838
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 28840
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $12; //@line 28842
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $14; //@line 28844
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $8; //@line 28846
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $10; //@line 28848
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 28850
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 28852
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 28854
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 28856
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $24; //@line 28858
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $26; //@line 28860
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $28; //@line 28862
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $30; //@line 28864
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $32; //@line 28866
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $34; //@line 28868
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $36; //@line 28870
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $38; //@line 28872
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $40; //@line 28874
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $42; //@line 28876
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $44; //@line 28878
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $46; //@line 28880
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $48; //@line 28882
 sp = STACKTOP; //@line 28883
 return;
}
function __ZN7LoRaMacC2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 10984
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 10986
 __ZN14LoRaMacCommandC2Ev($0 + 476 | 0); //@line 10988
 __ZN18LoRaMacChannelPlanC2Ev($0 + 752 | 0); //@line 10990
 __ZN13LoRaMacCryptoC2Ev($0 + 756 | 0); //@line 10992
 $5 = $0 + 1796 | 0; //@line 10993
 HEAP32[$5 >> 2] = 0; //@line 10994
 HEAP32[$5 + 4 >> 2] = 0; //@line 10994
 HEAP32[$5 + 8 >> 2] = 0; //@line 10994
 HEAP32[$5 + 12 >> 2] = 0; //@line 10994
 $6 = $0 + 1816 | 0; //@line 10995
 HEAP32[$6 >> 2] = 0; //@line 10996
 HEAP32[$6 + 4 >> 2] = 0; //@line 10996
 HEAP32[$6 + 8 >> 2] = 0; //@line 10996
 HEAP32[$6 + 12 >> 2] = 0; //@line 10996
 $7 = $0 + 1836 | 0; //@line 10997
 HEAP32[$7 >> 2] = 0; //@line 10998
 HEAP32[$7 + 4 >> 2] = 0; //@line 10998
 HEAP32[$7 + 8 >> 2] = 0; //@line 10998
 HEAP32[$7 + 12 >> 2] = 0; //@line 10998
 $8 = $0 + 1856 | 0; //@line 10999
 HEAP32[$8 >> 2] = 0; //@line 11000
 HEAP32[$8 + 4 >> 2] = 0; //@line 11000
 HEAP32[$8 + 8 >> 2] = 0; //@line 11000
 HEAP32[$8 + 12 >> 2] = 0; //@line 11000
 $9 = $0 + 1992 | 0; //@line 11001
 $10 = $0 + 2012 | 0; //@line 11002
 $11 = $0 + 2052 | 0; //@line 11003
 $12 = $0 + 2084 | 0; //@line 11004
 HEAP32[$0 + 2380 >> 2] = 0; //@line 11006
 $14 = $0 + 1704 | 0; //@line 11007
 $15 = $0 + 1752 | 0; //@line 11008
 HEAP16[$0 + 1440 >> 1] = 0; //@line 11010
 HEAP8[$0 + 1697 >> 0] = 0; //@line 11012
 HEAP8[$0 + 1174 >> 0] = 0; //@line 11014
 $19 = $0 + 1175 | 0; //@line 11015
 dest = $14; //@line 11016
 stop = dest + 44 | 0; //@line 11016
 do {
  HEAP32[dest >> 2] = 0; //@line 11016
  dest = dest + 4 | 0; //@line 11016
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 44 >> 1] = 0; //@line 11016
 HEAP32[$15 >> 2] = 0; //@line 11017
 HEAP32[$15 + 4 >> 2] = 0; //@line 11017
 HEAP32[$15 + 8 >> 2] = 0; //@line 11017
 HEAP32[$15 + 12 >> 2] = 0; //@line 11017
 _memset($9 | 0, 0, 386) | 0; //@line 11018
 HEAP8[$19 >> 0] = 1; //@line 11019
 HEAP32[$0 + 1768 >> 2] = 0; //@line 11021
 HEAP8[$0 + 1177 >> 0] = 0; //@line 11023
 HEAP8[$0 + 1178 >> 0] = 0; //@line 11025
 HEAP8[$0 + 1184 >> 0] = 0; //@line 11027
 HEAP32[$0 + 1788 >> 2] = 0; //@line 11029
 HEAP8[$0 + 1698 >> 0] = 1; //@line 11031
 HEAP8[$0 + 1699 >> 0] = 1; //@line 11033
 HEAP8[$0 + 1181 >> 0] = 0; //@line 11035
 HEAP32[$0 + 1792 >> 2] = 0; //@line 11037
 HEAP32[$0 + 1988 >> 2] = 0; //@line 11039
 HEAP8[$0 + 1936 >> 0] = 0; //@line 11041
 HEAP8[$0 + 1932 >> 0] = 0; //@line 11043
 HEAP32[$11 >> 2] = 0; //@line 11044
 HEAP32[$11 + 4 >> 2] = 0; //@line 11044
 HEAP32[$11 + 8 >> 2] = 0; //@line 11044
 HEAP32[$11 + 12 >> 2] = 0; //@line 11044
 HEAP32[$11 + 16 >> 2] = 0; //@line 11044
 HEAP32[$11 + 20 >> 2] = 0; //@line 11044
 HEAP32[$0 + 2056 >> 2] = 1; //@line 11046
 HEAP32[$12 >> 2] = 0; //@line 11047
 HEAP32[$12 + 4 >> 2] = 0; //@line 11047
 HEAP32[$12 + 8 >> 2] = 0; //@line 11047
 HEAP32[$12 + 12 >> 2] = 0; //@line 11047
 HEAP32[$12 + 16 >> 2] = 0; //@line 11047
 HEAP32[$0 + 2092 >> 2] = 1; //@line 11049
 dest = $10; //@line 11050
 stop = dest + 40 | 0; //@line 11050
 do {
  HEAP32[dest >> 2] = 0; //@line 11050
  dest = dest + 4 | 0; //@line 11050
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 + 2020 >> 2] = 1; //@line 11052
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3132
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 3143
 $14 = $1 + 20 | 0; //@line 3144
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3146
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 3151
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 3155
 $24 = $0 + 128 | 0; //@line 3156
 _equeue_mutex_lock($24); //@line 3157
 $25 = HEAP32[$0 >> 2] | 0; //@line 3158
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 3162
   label = 5; //@line 3163
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 3165
   $$053 = $0; //@line 3166
   $29 = $25; //@line 3166
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 3175
    $34 = HEAP32[$33 >> 2] | 0; //@line 3176
    if (!$34) {
     $$051$ph = $33; //@line 3179
     label = 5; //@line 3180
     break L1;
    } else {
     $$053 = $33; //@line 3183
     $29 = $34; //@line 3183
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 3191
    HEAP32[$49 >> 2] = $29; //@line 3192
    HEAP32[$29 + 16 >> 2] = $49; //@line 3194
    $$0515859 = $$053; //@line 3195
    label = 11; //@line 3196
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 3200
   $43 = $1 + 8 | 0; //@line 3201
   HEAP32[$43 >> 2] = $42; //@line 3202
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 3206
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 3208
   $47 = $1 + 12 | 0; //@line 3209
   HEAP32[$47 >> 2] = $46; //@line 3210
   HEAP32[$46 + 16 >> 2] = $47; //@line 3212
   $$05157 = $$053; //@line 3213
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 3218
  $$0515859 = $$051$ph; //@line 3219
  label = 11; //@line 3220
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 3224
  $$05157 = $$0515859; //@line 3225
 }
 HEAP32[$$05157 >> 2] = $1; //@line 3227
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 3229
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 3231
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 3234
  return $13 | 0; //@line 3235
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 3241
  return $13 | 0; //@line 3242
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 3247
  return $13 | 0; //@line 3248
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 3254
  return $13 | 0; //@line 3255
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 3258
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3260
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3264
 FUNCTION_TABLE_vii[$54 & 15]($65, $67 & ~($67 >> 31)); //@line 3265
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 122; //@line 3268
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 3270
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 3272
  sp = STACKTOP; //@line 3273
  return 0; //@line 3274
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3276
 _equeue_mutex_unlock($24); //@line 3277
 return $13 | 0; //@line 3278
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_331($0) {
 $0 = $0 | 0;
 var $$pre126 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 25761
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25763
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25765
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25767
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25769
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25771
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25773
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25775
 $$pre126 = HEAP32[$2 >> 2] | 0; //@line 25776
 if ($$pre126 | 0) {
  $17 = HEAP32[$$pre126 + 4 >> 2] | 0; //@line 25780
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 25781
  FUNCTION_TABLE_vii[$17 & 15]($6, $8); //@line 25782
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 25785
   $18 = $ReallocAsyncCtx14 + 4 | 0; //@line 25786
   HEAP32[$18 >> 2] = $2; //@line 25787
   $19 = $ReallocAsyncCtx14 + 8 | 0; //@line 25788
   HEAP32[$19 >> 2] = $4; //@line 25789
   $20 = $ReallocAsyncCtx14 + 12 | 0; //@line 25790
   HEAP32[$20 >> 2] = $8; //@line 25791
   $21 = $ReallocAsyncCtx14 + 16 | 0; //@line 25792
   HEAP32[$21 >> 2] = $10; //@line 25793
   $22 = $ReallocAsyncCtx14 + 20 | 0; //@line 25794
   HEAP32[$22 >> 2] = $12; //@line 25795
   $23 = $ReallocAsyncCtx14 + 24 | 0; //@line 25796
   HEAP32[$23 >> 2] = $14; //@line 25797
   sp = STACKTOP; //@line 25798
   return;
  }
  ___async_unwind = 0; //@line 25801
  HEAP32[$ReallocAsyncCtx14 >> 2] = 183; //@line 25802
  $18 = $ReallocAsyncCtx14 + 4 | 0; //@line 25803
  HEAP32[$18 >> 2] = $2; //@line 25804
  $19 = $ReallocAsyncCtx14 + 8 | 0; //@line 25805
  HEAP32[$19 >> 2] = $4; //@line 25806
  $20 = $ReallocAsyncCtx14 + 12 | 0; //@line 25807
  HEAP32[$20 >> 2] = $8; //@line 25808
  $21 = $ReallocAsyncCtx14 + 16 | 0; //@line 25809
  HEAP32[$21 >> 2] = $10; //@line 25810
  $22 = $ReallocAsyncCtx14 + 20 | 0; //@line 25811
  HEAP32[$22 >> 2] = $12; //@line 25812
  $23 = $ReallocAsyncCtx14 + 24 | 0; //@line 25813
  HEAP32[$23 >> 2] = $14; //@line 25814
  sp = STACKTOP; //@line 25815
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 25818
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($10, $12); //@line 25819
 $26 = HEAP32[(HEAP32[$12 >> 2] | 0) + 72 >> 2] | 0; //@line 25822
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 25823
 FUNCTION_TABLE_vi[$26 & 1023]($12); //@line 25824
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 185; //@line 25827
  $27 = $ReallocAsyncCtx16 + 4 | 0; //@line 25828
  HEAP32[$27 >> 2] = $12; //@line 25829
  $28 = $ReallocAsyncCtx16 + 8 | 0; //@line 25830
  HEAP32[$28 >> 2] = $14; //@line 25831
  $29 = $ReallocAsyncCtx16 + 12 | 0; //@line 25832
  HEAP32[$29 >> 2] = $12; //@line 25833
  sp = STACKTOP; //@line 25834
  return;
 }
 ___async_unwind = 0; //@line 25837
 HEAP32[$ReallocAsyncCtx16 >> 2] = 185; //@line 25838
 $27 = $ReallocAsyncCtx16 + 4 | 0; //@line 25839
 HEAP32[$27 >> 2] = $12; //@line 25840
 $28 = $ReallocAsyncCtx16 + 8 | 0; //@line 25841
 HEAP32[$28 >> 2] = $14; //@line 25842
 $29 = $ReallocAsyncCtx16 + 12 | 0; //@line 25843
 HEAP32[$29 >> 2] = $12; //@line 25844
 sp = STACKTOP; //@line 25845
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $13 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7702
 STACKTOP = STACKTOP + 16 | 0; //@line 7703
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7703
 $3 = sp; //@line 7704
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 7707
 $4 = $3 + 12 | 0; //@line 7708
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 7709
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 7711
 HEAP32[$3 + 8 >> 2] = $1; //@line 7713
 HEAP32[$4 >> 2] = 824; //@line 7714
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7715
 $5 = _equeue_alloc($0, 16) | 0; //@line 7716
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 266; //@line 7719
  HEAP32[$AsyncCtx8 + 4 >> 2] = $4; //@line 7721
  HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 7723
  HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 7725
  sp = STACKTOP; //@line 7726
  STACKTOP = sp; //@line 7727
  return 0; //@line 7727
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7729
 do {
  if (!$5) {
   $$0$i = 0; //@line 7733
  } else {
   $10 = HEAP32[$4 >> 2] | 0; //@line 7735
   do {
    if (!$10) {
     $19 = 0; //@line 7739
    } else {
     $13 = HEAP32[$10 + 4 >> 2] | 0; //@line 7742
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7743
     FUNCTION_TABLE_vii[$13 & 15]($5, $3); //@line 7744
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 267; //@line 7747
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 7749
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 7751
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7753
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 7755
      sp = STACKTOP; //@line 7756
      STACKTOP = sp; //@line 7757
      return 0; //@line 7757
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 7759
      $19 = HEAP32[$4 >> 2] | 0; //@line 7761
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $19; //@line 7767
   _equeue_event_dtor($5, 268); //@line 7768
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7769
   $20 = _equeue_post($0, 269, $5) | 0; //@line 7770
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 270; //@line 7773
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 7775
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 7777
    sp = STACKTOP; //@line 7778
    STACKTOP = sp; //@line 7779
    return 0; //@line 7779
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7781
    $$0$i = $20; //@line 7782
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$4 >> 2] | 0; //@line 7787
 if (!$23) {
  STACKTOP = sp; //@line 7790
  return $$0$i | 0; //@line 7790
 }
 $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 7793
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7794
 FUNCTION_TABLE_vi[$26 & 1023]($3); //@line 7795
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 271; //@line 7798
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 7800
  sp = STACKTOP; //@line 7801
  STACKTOP = sp; //@line 7802
  return 0; //@line 7802
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7804
 STACKTOP = sp; //@line 7805
 return $$0$i | 0; //@line 7805
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 16027
 STACKTOP = STACKTOP + 48 | 0; //@line 16028
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 16028
 $vararg_buffer10 = sp + 32 | 0; //@line 16029
 $vararg_buffer7 = sp + 24 | 0; //@line 16030
 $vararg_buffer3 = sp + 16 | 0; //@line 16031
 $vararg_buffer = sp; //@line 16032
 $0 = sp + 36 | 0; //@line 16033
 $1 = ___cxa_get_globals_fast() | 0; //@line 16034
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 16037
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 16042
   $9 = HEAP32[$7 >> 2] | 0; //@line 16044
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 16047
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 17557; //@line 16053
    _abort_message(17507, $vararg_buffer7); //@line 16054
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 16063
   } else {
    $22 = $3 + 80 | 0; //@line 16065
   }
   HEAP32[$0 >> 2] = $22; //@line 16067
   $23 = HEAP32[$3 >> 2] | 0; //@line 16068
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 16070
   $28 = HEAP32[(HEAP32[94] | 0) + 16 >> 2] | 0; //@line 16073
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16074
   $29 = FUNCTION_TABLE_iiii[$28 & 31](376, $23, $0) | 0; //@line 16075
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 669; //@line 16078
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16080
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 16082
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 16084
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 16086
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 16088
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 16090
    sp = STACKTOP; //@line 16091
    STACKTOP = sp; //@line 16092
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 16094
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 17557; //@line 16096
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 16098
    _abort_message(17466, $vararg_buffer3); //@line 16099
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 16102
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 16105
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16106
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 16107
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 670; //@line 16110
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 16112
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 16114
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 16116
    sp = STACKTOP; //@line 16117
    STACKTOP = sp; //@line 16118
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16120
    HEAP32[$vararg_buffer >> 2] = 17557; //@line 16121
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 16123
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 16125
    _abort_message(17421, $vararg_buffer); //@line 16126
   }
  }
 }
 _abort_message(17545, $vararg_buffer10); //@line 16131
}
function __ZN7LoRaPHY11add_channelEPK16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$125$off0 = 0, $$026 = 0, $$4$off0 = 0, $$5$off039 = 0, $$5$off040$ph = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $21 = 0, $37 = 0, $43 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $6 = 0, $62 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20747
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$026 = -1003; //@line 20752
  return $$026 | 0; //@line 20753
 }
 $6 = $2 & 255; //@line 20755
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$026 = -1003; //@line 20760
  return $$026 | 0; //@line 20761
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 20764
 $12 = $11 & 15; //@line 20765
 $14 = HEAP8[$0 + 26 >> 0] | 0; //@line 20767
 $16 = HEAP8[$0 + 27 >> 0] | 0; //@line 20769
 $19 = ($11 & 255) >>> 4; //@line 20773
 $21 = $19 << 24 >> 24 <= $16 << 24 >> 24; //@line 20775
 $$$125$off0 = ($12 & 255) > ($19 & 255) | (($12 << 24 >> 24 < $14 << 24 >> 24 ? 1 : $12 << 24 >> 24 > $16 << 24 >> 24) | $19 << 24 >> 24 >= $14 << 24 >> 24 & $21 ^ 1); //@line 20780
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($12 & 255) > ($14 & 255) | $$$125$off0 | $21 & $19 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 20792
  if ((HEAP32[$1 >> 2] | 0) == (HEAP32[(HEAP32[$0 + 124 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 20800
   label = 5; //@line 20801
  } else {
   $$5$off040$ph = $$4$off0; //@line 20803
  }
 } else {
  $$5$off039 = $$$125$off0; //@line 20806
  label = 5; //@line 20807
 }
 if ((label | 0) == 5) {
  $37 = HEAP8[$1 + 9 >> 0] | 0; //@line 20811
  if (($37 & 255) < (HEAPU8[$0 + 76 >> 0] | 0)) {
   $43 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 20818
   $44 = HEAP32[$1 >> 2] | 0; //@line 20819
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 20820
   $45 = FUNCTION_TABLE_iiii[$43 & 31]($0, $44, $37) | 0; //@line 20821
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 522; //@line 20824
    HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 20827
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 20829
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 20831
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 20833
    sp = STACKTOP; //@line 20834
    return 0; //@line 20835
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 20837
   if ($45) {
    if ($$5$off039) {
     $$026 = $$5$off039 ? -1005 : -1004; //@line 20841
     return $$026 | 0; //@line 20842
    }
    $50 = $0 + 124 | 0; //@line 20844
    $52 = (HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 20846
    HEAP32[$52 >> 2] = HEAP32[$1 >> 2]; //@line 20847
    HEAP32[$52 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20847
    HEAP32[$52 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 20847
    HEAP8[(HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 20852
    $62 = (HEAP32[$0 + 116 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 20858
    HEAP16[$62 >> 1] = 1 << ($6 & 15) | HEAPU16[$62 >> 1]; //@line 20863
    $$026 = 0; //@line 20864
    return $$026 | 0; //@line 20865
   } else {
    $$5$off040$ph = $$5$off039; //@line 20867
   }
  } else {
   $$5$off040$ph = $$5$off039; //@line 20870
  }
 }
 $$026 = $$5$off040$ph ? -1006 : -1004; //@line 20874
 return $$026 | 0; //@line 20875
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16239
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 16243
  return $39 | 0; //@line 16244
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16247
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 16249
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 16251
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 16254
  return $39 | 0; //@line 16255
 }
 $10 = $4 & 255; //@line 16257
 $indvars$iv = 0; //@line 16258
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 16269
     label = 15; //@line 16270
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 16278
     label = 15; //@line 16279
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 16282
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 16285
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16287
    $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv & 255) | 0; //@line 16288
    if (___async) {
     label = 9; //@line 16291
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16294
    if (!$26) {
     $39 = -1003; //@line 16296
     label = 15; //@line 16297
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 16300
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16301
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 16302
    if (___async) {
     label = 12; //@line 16305
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16308
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 16311
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 16314
  } else {
   $39 = 0; //@line 16316
   label = 15; //@line 16317
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 469; //@line 16322
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16324
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 16326
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 16328
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 16330
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 16332
  sp = STACKTOP; //@line 16333
  return 0; //@line 16334
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 470; //@line 16337
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 16339
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 16341
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 16343
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 16345
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 16347
  sp = STACKTOP; //@line 16348
  return 0; //@line 16349
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 16352
 }
 return 0; //@line 16354
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb($0) {
 $0 = $0 | 0;
 var $$69 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21852
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 21854
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 21858
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 21860
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 21862
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 21864
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 21866
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 21868
 $18 = HEAP8[$0 + 32 >> 0] | 0; //@line 21870
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 21872
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 21874
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 21876
 $$69 = (HEAP32[___async_retval >> 2] | 0) == 0 ? 0 : -1014; //@line 21880
 $31 = (HEAPU16[$6 >> 1] | 0) + (HEAPU8[$0 + 5 >> 0] | 0) & 65535; //@line 21885
 HEAP16[$6 >> 1] = $31; //@line 21886
 $34 = HEAP32[$10 >> 2] | 0; //@line 21889
 $35 = HEAP32[$12 >> 2] | 0; //@line 21890
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 21891
 $36 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($8 + 756 | 0, $14, $31, $8 + 1716 | 0, 128, $34, 0, $35, $16) | 0; //@line 21892
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 414; //@line 21895
  $37 = $ReallocAsyncCtx2 + 4 | 0; //@line 21896
  HEAP32[$37 >> 2] = $$69; //@line 21897
  $38 = $ReallocAsyncCtx2 + 8 | 0; //@line 21898
  HEAP32[$38 >> 2] = $16; //@line 21899
  $39 = $ReallocAsyncCtx2 + 12 | 0; //@line 21900
  HEAP32[$39 >> 2] = $6; //@line 21901
  $40 = $ReallocAsyncCtx2 + 16 | 0; //@line 21902
  HEAP32[$40 >> 2] = $8; //@line 21903
  $41 = $ReallocAsyncCtx2 + 20 | 0; //@line 21904
  HEAP8[$41 >> 0] = $18; //@line 21905
  $42 = $ReallocAsyncCtx2 + 21 | 0; //@line 21906
  HEAP8[$42 >> 0] = $2; //@line 21907
  $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 21908
  HEAP32[$43 >> 2] = $20; //@line 21909
  $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 21910
  HEAP32[$44 >> 2] = $22; //@line 21911
  $45 = $ReallocAsyncCtx2 + 32 | 0; //@line 21912
  HEAP32[$45 >> 2] = $24; //@line 21913
  sp = STACKTOP; //@line 21914
  return;
 }
 HEAP32[___async_retval >> 2] = $36; //@line 21918
 ___async_unwind = 0; //@line 21919
 HEAP32[$ReallocAsyncCtx2 >> 2] = 414; //@line 21920
 $37 = $ReallocAsyncCtx2 + 4 | 0; //@line 21921
 HEAP32[$37 >> 2] = $$69; //@line 21922
 $38 = $ReallocAsyncCtx2 + 8 | 0; //@line 21923
 HEAP32[$38 >> 2] = $16; //@line 21924
 $39 = $ReallocAsyncCtx2 + 12 | 0; //@line 21925
 HEAP32[$39 >> 2] = $6; //@line 21926
 $40 = $ReallocAsyncCtx2 + 16 | 0; //@line 21927
 HEAP32[$40 >> 2] = $8; //@line 21928
 $41 = $ReallocAsyncCtx2 + 20 | 0; //@line 21929
 HEAP8[$41 >> 0] = $18; //@line 21930
 $42 = $ReallocAsyncCtx2 + 21 | 0; //@line 21931
 HEAP8[$42 >> 0] = $2; //@line 21932
 $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 21933
 HEAP32[$43 >> 2] = $20; //@line 21934
 $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 21935
 HEAP32[$44 >> 2] = $22; //@line 21936
 $45 = $ReallocAsyncCtx2 + 32 | 0; //@line 21937
 HEAP32[$45 >> 2] = $24; //@line 21938
 sp = STACKTOP; //@line 21939
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_69($0) {
 $0 = $0 | 0;
 var $$038 = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 24834
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24836
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24838
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24843
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 24845
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24847
 if (!(HEAP8[$0 + 12 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 24851
  return;
 }
 if (!(HEAP32[$2 + 20 >> 2] | 0)) {
  $17 = HEAP32[$8 + 124 >> 2] | 0; //@line 24859
  $19 = HEAPU8[$2 >> 0] | 0; //@line 24861
  $23 = HEAP32[$17 + ($19 * 12 | 0) + 4 >> 2] | 0; //@line 24865
  $$038 = ($23 | 0) == 0 ? HEAP32[$17 + ($19 * 12 | 0) >> 2] | 0 : $23; //@line 24868
 } else {
  $$038 = $12; //@line 24870
 }
 $28 = HEAP32[$8 + 96 >> 2] | 0; //@line 24875
 $30 = HEAP32[$8 + 104 >> 2] | 0; //@line 24877
 $31 = $10 & 255; //@line 24878
 $33 = HEAP8[(HEAP32[$8 + 88 >> 2] | 0) + $31 >> 0] | 0; //@line 24880
 $34 = HEAP32[$4 >> 2] | 0; //@line 24881
 $37 = HEAP32[(HEAP32[$34 >> 2] | 0) + 72 >> 2] | 0; //@line 24884
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 24885
 FUNCTION_TABLE_vi[$37 & 1023]($34); //@line 24886
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 505; //@line 24889
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 24890
  HEAP32[$38 >> 2] = $4; //@line 24891
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 24892
  HEAP32[$39 >> 2] = $$038; //@line 24893
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 24894
  HEAP8[$40 >> 0] = $10; //@line 24895
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 24896
  HEAP32[$41 >> 2] = $8; //@line 24897
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 24898
  HEAP32[$42 >> 2] = $2; //@line 24899
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 24900
  HEAP8[$43 >> 0] = $33; //@line 24901
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 24902
  HEAP32[$44 >> 2] = $28; //@line 24903
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 24904
  HEAP32[$45 >> 2] = $30; //@line 24905
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 24906
  HEAP32[$46 >> 2] = $31; //@line 24907
  sp = STACKTOP; //@line 24908
  return;
 }
 ___async_unwind = 0; //@line 24911
 HEAP32[$ReallocAsyncCtx4 >> 2] = 505; //@line 24912
 $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 24913
 HEAP32[$38 >> 2] = $4; //@line 24914
 $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 24915
 HEAP32[$39 >> 2] = $$038; //@line 24916
 $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 24917
 HEAP8[$40 >> 0] = $10; //@line 24918
 $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 24919
 HEAP32[$41 >> 2] = $8; //@line 24920
 $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 24921
 HEAP32[$42 >> 2] = $2; //@line 24922
 $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 24923
 HEAP8[$43 >> 0] = $33; //@line 24924
 $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 24925
 HEAP32[$44 >> 2] = $28; //@line 24926
 $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 24927
 HEAP32[$45 >> 2] = $30; //@line 24928
 $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 24929
 HEAP32[$46 >> 2] = $31; //@line 24930
 sp = STACKTOP; //@line 24931
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_149($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12
 if (!$AsyncRetVal) {
  $22 = HEAP32[$2 >> 2] | 0; //@line 15
  if (!$22) {
   HEAP32[___async_retval >> 2] = 0; //@line 19
   return;
  }
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 23
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 24
  FUNCTION_TABLE_vi[$25 & 1023]($6); //@line 25
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 28
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 29
   HEAP32[$26 >> 2] = 0; //@line 30
   sp = STACKTOP; //@line 31
   return;
  }
  ___async_unwind = 0; //@line 34
  HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 35
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 36
  HEAP32[$26 >> 2] = 0; //@line 37
  sp = STACKTOP; //@line 38
  return;
 }
 $9 = HEAP32[$2 >> 2] | 0; //@line 41
 if (!$9) {
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 45
  _equeue_event_dtor($AsyncRetVal, 268); //@line 46
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 47
  $18 = _equeue_post($4, 269, $AsyncRetVal) | 0; //@line 48
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 270; //@line 51
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 52
   HEAP32[$19 >> 2] = $2; //@line 53
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 54
   HEAP32[$20 >> 2] = $6; //@line 55
   sp = STACKTOP; //@line 56
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 60
  ___async_unwind = 0; //@line 61
  HEAP32[$ReallocAsyncCtx3 >> 2] = 270; //@line 62
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 63
  HEAP32[$19 >> 2] = $2; //@line 64
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 65
  HEAP32[$20 >> 2] = $6; //@line 66
  sp = STACKTOP; //@line 67
  return;
 } else {
  $12 = HEAP32[$9 + 4 >> 2] | 0; //@line 71
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 72
  FUNCTION_TABLE_vii[$12 & 15]($AsyncRetVal, $6); //@line 73
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 267; //@line 76
   $13 = $ReallocAsyncCtx + 4 | 0; //@line 77
   HEAP32[$13 >> 2] = $2; //@line 78
   $14 = $ReallocAsyncCtx + 8 | 0; //@line 79
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 80
   $15 = $ReallocAsyncCtx + 12 | 0; //@line 81
   HEAP32[$15 >> 2] = $4; //@line 82
   $16 = $ReallocAsyncCtx + 16 | 0; //@line 83
   HEAP32[$16 >> 2] = $6; //@line 84
   sp = STACKTOP; //@line 85
   return;
  }
  ___async_unwind = 0; //@line 88
  HEAP32[$ReallocAsyncCtx >> 2] = 267; //@line 89
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 90
  HEAP32[$13 >> 2] = $2; //@line 91
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 92
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 93
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 94
  HEAP32[$15 >> 2] = $4; //@line 95
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 96
  HEAP32[$16 >> 2] = $6; //@line 97
  sp = STACKTOP; //@line 98
  return;
 }
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_85($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25959
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25961
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25963
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25965
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 25967
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25969
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25971
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25973
 if (HEAP8[___async_retval >> 0] & 1) {
  $34 = $2; //@line 25978
 } else {
  $20 = $2 + 1 | 0; //@line 25980
  if (($20 | 0) < (HEAPU8[$10 >> 0] | 0 | 0)) {
   $18 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 25987
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 25989
   $21 = FUNCTION_TABLE_iiii[$18 & 31]($6, $14, $20 & 255) | 0; //@line 25990
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 497; //@line 25993
    $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 25994
    HEAP32[$22 >> 2] = $20; //@line 25995
    $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 25996
    HEAP32[$23 >> 2] = $4; //@line 25997
    $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 25998
    HEAP32[$24 >> 2] = $6; //@line 25999
    $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 26000
    HEAP8[$25 >> 0] = $8; //@line 26001
    $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 26002
    HEAP32[$26 >> 2] = $10; //@line 26003
    $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 26004
    HEAP32[$27 >> 2] = $12; //@line 26005
    $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 26006
    HEAP32[$28 >> 2] = $14; //@line 26007
    sp = STACKTOP; //@line 26008
    return;
   }
   HEAP8[___async_retval >> 0] = $21 & 1; //@line 26013
   ___async_unwind = 0; //@line 26014
   HEAP32[$ReallocAsyncCtx3 >> 2] = 497; //@line 26015
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 26016
   HEAP32[$22 >> 2] = $20; //@line 26017
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 26018
   HEAP32[$23 >> 2] = $4; //@line 26019
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 26020
   HEAP32[$24 >> 2] = $6; //@line 26021
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 26022
   HEAP8[$25 >> 0] = $8; //@line 26023
   $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 26024
   HEAP32[$26 >> 2] = $10; //@line 26025
   $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 26026
   HEAP32[$27 >> 2] = $12; //@line 26027
   $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 26028
   HEAP32[$28 >> 2] = $14; //@line 26029
   sp = STACKTOP; //@line 26030
   return;
  } else {
   $34 = -1; //@line 26033
  }
 }
 HEAP8[$4 + 9 >> 0] = $34; //@line 26038
 $38 = HEAP32[(HEAP32[$6 >> 2] | 0) + 60 >> 2] | 0; //@line 26041
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 26042
 $39 = FUNCTION_TABLE_iiii[$38 & 31]($6, $4, $8) | 0; //@line 26043
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 498; //@line 26046
  sp = STACKTOP; //@line 26047
  return;
 }
 HEAP32[___async_retval >> 2] = $39; //@line 26051
 ___async_unwind = 0; //@line 26052
 HEAP32[$ReallocAsyncCtx4 >> 2] = 498; //@line 26053
 sp = STACKTOP; //@line 26054
 return;
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26032
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26034
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26036
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26038
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[4847] | 0)) {
  _serial_init(19392, 2, 3); //@line 26046
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 26048
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26054
  _serial_putc(19392, $9 << 24 >> 24); //@line 26055
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 26058
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 26059
   HEAP32[$18 >> 2] = 0; //@line 26060
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 26061
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 26062
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 26063
   HEAP32[$20 >> 2] = $2; //@line 26064
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 26065
   HEAP8[$21 >> 0] = $9; //@line 26066
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 26067
   HEAP32[$22 >> 2] = $4; //@line 26068
   sp = STACKTOP; //@line 26069
   return;
  }
  ___async_unwind = 0; //@line 26072
  HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 26073
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 26074
  HEAP32[$18 >> 2] = 0; //@line 26075
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 26076
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 26077
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 26078
  HEAP32[$20 >> 2] = $2; //@line 26079
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 26080
  HEAP8[$21 >> 0] = $9; //@line 26081
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 26082
  HEAP32[$22 >> 2] = $4; //@line 26083
  sp = STACKTOP; //@line 26084
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 26087
  _serial_putc(19392, 13); //@line 26088
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 639; //@line 26091
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 26092
   HEAP8[$12 >> 0] = $9; //@line 26093
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 26094
   HEAP32[$13 >> 2] = 0; //@line 26095
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 26096
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 26097
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 26098
   HEAP32[$15 >> 2] = $2; //@line 26099
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 26100
   HEAP32[$16 >> 2] = $4; //@line 26101
   sp = STACKTOP; //@line 26102
   return;
  }
  ___async_unwind = 0; //@line 26105
  HEAP32[$ReallocAsyncCtx3 >> 2] = 639; //@line 26106
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 26107
  HEAP8[$12 >> 0] = $9; //@line 26108
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 26109
  HEAP32[$13 >> 2] = 0; //@line 26110
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 26111
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 26112
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 26113
  HEAP32[$15 >> 2] = $2; //@line 26114
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 26115
  HEAP32[$16 >> 2] = $4; //@line 26116
  sp = STACKTOP; //@line 26117
  return;
 }
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_154($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 476
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 478
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 480
 $6 = HEAP8[$0 + 9 >> 0] | 0; //@line 482
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 484
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 486
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 488
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 490
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 492
 $18 = HEAP8[$0 + 32 >> 0] | 0; //@line 494
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 496
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 502
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 504
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 506
 $32 = HEAP8[$0 + 60 >> 0] & 1; //@line 509
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 511
 $36 = HEAP16[$0 + 68 >> 1] | 0; //@line 513
 $38 = HEAP8[$0 + 70 >> 0] | 0; //@line 515
 $40 = HEAP32[$0 + 72 >> 2] | 0; //@line 517
 $42 = HEAP8[$0 + 76 >> 0] | 0; //@line 519
 $44 = HEAP16[$0 + 78 >> 1] | 0; //@line 521
 $46 = HEAP32[$0 + 80 >> 2] | 0; //@line 523
 $48 = HEAP32[$0 + 84 >> 2] | 0; //@line 525
 $50 = HEAP32[$0 + 88 >> 2] | 0; //@line 527
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  _mbed_tracef(2, 12685, 12709, HEAP32[$0 + 40 >> 2] | 0); //@line 532
  HEAP32[$8 + 2020 >> 2] = 12; //@line 534
  HEAP8[$8 + 2012 >> 0] = 0; //@line 536
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(88) | 0; //@line 540
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($8, $8 + 1836 | 0); //@line 541
 if (!___async) {
  ___async_unwind = 0; //@line 544
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 378; //@line 546
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 548
 HEAP8[$ReallocAsyncCtx5 + 8 >> 0] = $4; //@line 550
 HEAP8[$ReallocAsyncCtx5 + 9 >> 0] = $18; //@line 552
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $8; //@line 554
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $28; //@line 556
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $30; //@line 558
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $26; //@line 560
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $8; //@line 562
 HEAP8[$ReallocAsyncCtx5 + 32 >> 0] = $6; //@line 564
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $10; //@line 566
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $12; //@line 568
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $14; //@line 570
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $16; //@line 572
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $20; //@line 574
 HEAP8[$ReallocAsyncCtx5 + 56 >> 0] = $32 & 1; //@line 577
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $34; //@line 579
 HEAP16[$ReallocAsyncCtx5 + 64 >> 1] = $36; //@line 581
 HEAP8[$ReallocAsyncCtx5 + 66 >> 0] = $38; //@line 583
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $40; //@line 585
 HEAP8[$ReallocAsyncCtx5 + 72 >> 0] = $42; //@line 587
 HEAP16[$ReallocAsyncCtx5 + 74 >> 1] = $44; //@line 589
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $46; //@line 591
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $48; //@line 593
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $50; //@line 595
 sp = STACKTOP; //@line 596
 return;
}
function _mbed_error_vfprintf__async_cb_337($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26125
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26129
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26131
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26135
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 26136
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 26142
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26148
  _serial_putc(19392, $13 << 24 >> 24); //@line 26149
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 26152
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 26153
   HEAP32[$22 >> 2] = $12; //@line 26154
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 26155
   HEAP32[$23 >> 2] = $4; //@line 26156
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 26157
   HEAP32[$24 >> 2] = $6; //@line 26158
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 26159
   HEAP8[$25 >> 0] = $13; //@line 26160
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 26161
   HEAP32[$26 >> 2] = $10; //@line 26162
   sp = STACKTOP; //@line 26163
   return;
  }
  ___async_unwind = 0; //@line 26166
  HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 26167
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 26168
  HEAP32[$22 >> 2] = $12; //@line 26169
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 26170
  HEAP32[$23 >> 2] = $4; //@line 26171
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 26172
  HEAP32[$24 >> 2] = $6; //@line 26173
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 26174
  HEAP8[$25 >> 0] = $13; //@line 26175
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 26176
  HEAP32[$26 >> 2] = $10; //@line 26177
  sp = STACKTOP; //@line 26178
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 26181
  _serial_putc(19392, 13); //@line 26182
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 639; //@line 26185
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 26186
   HEAP8[$16 >> 0] = $13; //@line 26187
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 26188
   HEAP32[$17 >> 2] = $12; //@line 26189
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 26190
   HEAP32[$18 >> 2] = $4; //@line 26191
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 26192
   HEAP32[$19 >> 2] = $6; //@line 26193
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 26194
   HEAP32[$20 >> 2] = $10; //@line 26195
   sp = STACKTOP; //@line 26196
   return;
  }
  ___async_unwind = 0; //@line 26199
  HEAP32[$ReallocAsyncCtx3 >> 2] = 639; //@line 26200
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 26201
  HEAP8[$16 >> 0] = $13; //@line 26202
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 26203
  HEAP32[$17 >> 2] = $12; //@line 26204
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 26205
  HEAP32[$18 >> 2] = $4; //@line 26206
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 26207
  HEAP32[$19 >> 2] = $6; //@line 26208
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 26209
  HEAP32[$20 >> 2] = $10; //@line 26210
  sp = STACKTOP; //@line 26211
  return;
 }
}
function _initialize__async_cb_211($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4647
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4649
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4651
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 4653
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4655
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4657
 $12 = 7 << 32 + -4; //@line 4659
 $13 = ___muldi3($12 | 0, 0, 1e6, 0) | 0; //@line 4660
 $14 = tempRet0; //@line 4661
 $15 = _i64Add($4 | 0, 0, -1, -1) | 0; //@line 4662
 $17 = _i64Add($15 | 0, tempRet0 | 0, $13 | 0, $14 | 0) | 0; //@line 4664
 $19 = ___udivdi3($17 | 0, tempRet0 | 0, $4 | 0, 0) | 0; //@line 4666
 $20 = tempRet0; //@line 4667
 $21 = HEAP32[$2 >> 2] | 0; //@line 4668
 HEAP32[$21 >> 2] = 0; //@line 4669
 HEAP32[$21 + 4 >> 2] = 0; //@line 4671
 $25 = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0; //@line 4674
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 4675
 $26 = FUNCTION_TABLE_i[$25 & 7]() | 0; //@line 4676
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 4679
  $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 4680
  HEAP32[$27 >> 2] = $2; //@line 4681
  $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 4682
  HEAP32[$28 >> 2] = $4; //@line 4683
  $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 4684
  HEAP8[$29 >> 0] = $6; //@line 4685
  $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 4686
  HEAP32[$30 >> 2] = 32; //@line 4687
  $31 = $ReallocAsyncCtx3 + 20 | 0; //@line 4688
  HEAP32[$31 >> 2] = $12; //@line 4689
  $32 = $ReallocAsyncCtx3 + 24 | 0; //@line 4690
  $33 = $32; //@line 4691
  $34 = $33; //@line 4692
  HEAP32[$34 >> 2] = $19; //@line 4693
  $35 = $33 + 4 | 0; //@line 4694
  $36 = $35; //@line 4695
  HEAP32[$36 >> 2] = $20; //@line 4696
  $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 4697
  HEAP32[$37 >> 2] = $8; //@line 4698
  $38 = $ReallocAsyncCtx3 + 36 | 0; //@line 4699
  HEAP32[$38 >> 2] = $10; //@line 4700
  sp = STACKTOP; //@line 4701
  return;
 }
 HEAP32[___async_retval >> 2] = $26; //@line 4705
 ___async_unwind = 0; //@line 4706
 HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 4707
 $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 4708
 HEAP32[$27 >> 2] = $2; //@line 4709
 $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 4710
 HEAP32[$28 >> 2] = $4; //@line 4711
 $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 4712
 HEAP8[$29 >> 0] = $6; //@line 4713
 $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 4714
 HEAP32[$30 >> 2] = 32; //@line 4715
 $31 = $ReallocAsyncCtx3 + 20 | 0; //@line 4716
 HEAP32[$31 >> 2] = $12; //@line 4717
 $32 = $ReallocAsyncCtx3 + 24 | 0; //@line 4718
 $33 = $32; //@line 4719
 $34 = $33; //@line 4720
 HEAP32[$34 >> 2] = $19; //@line 4721
 $35 = $33 + 4 | 0; //@line 4722
 $36 = $35; //@line 4723
 HEAP32[$36 >> 2] = $20; //@line 4724
 $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 4725
 HEAP32[$37 >> 2] = $8; //@line 4726
 $38 = $ReallocAsyncCtx3 + 36 | 0; //@line 4727
 HEAP32[$38 >> 2] = $10; //@line 4728
 sp = STACKTOP; //@line 4729
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_1($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 17886
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17890
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17892
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17894
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17896
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 17897
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 17899
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 17902
   label = 11; //@line 17903
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 17909
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 17921
  HEAP32[$34 >> 2] = $35; //@line 17922
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 17928
  $34 = ___async_retval; //@line 17929
  HEAP32[$34 >> 2] = $35; //@line 17930
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 17938
  $34 = ___async_retval; //@line 17939
  HEAP32[$34 >> 2] = $35; //@line 17940
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 17943
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 17946
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 17948
 $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 17949
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 469; //@line 17952
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 17953
  HEAP32[$27 >> 2] = $6; //@line 17954
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 17955
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 17956
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 17957
  HEAP32[$29 >> 2] = $4; //@line 17958
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 17959
  HEAP32[$30 >> 2] = $8; //@line 17960
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 17961
  HEAP32[$31 >> 2] = $10; //@line 17962
  sp = STACKTOP; //@line 17963
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 17968
 ___async_unwind = 0; //@line 17969
 HEAP32[$ReallocAsyncCtx >> 2] = 469; //@line 17970
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 17971
 HEAP32[$27 >> 2] = $6; //@line 17972
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 17973
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 17974
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 17975
 HEAP32[$29 >> 2] = $4; //@line 17976
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 17977
 HEAP32[$30 >> 2] = $8; //@line 17978
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 17979
 HEAP32[$31 >> 2] = $10; //@line 17980
 sp = STACKTOP; //@line 17981
 return;
}
function __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$$sroa_idx14 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18717
 STACKTOP = STACKTOP + 16 | 0; //@line 18718
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18718
 $7 = sp; //@line 18719
 $8 = $0 + 64 | 0; //@line 18720
 _mbedtls_aes_init($8); //@line 18721
 $9 = _mbedtls_aes_setkey_enc($8, $1, $2) | 0; //@line 18722
 if (!$9) {
  $11 = $7 + 9 | 0; //@line 18725
  HEAP8[$11 >> 0] = 0; //@line 18726
  HEAP8[$11 + 1 >> 0] = 0; //@line 18726
  HEAP8[$11 + 2 >> 0] = 0; //@line 18726
  HEAP8[$11 + 3 >> 0] = 0; //@line 18726
  HEAP8[$11 + 4 >> 0] = 0; //@line 18726
  HEAP8[$11 + 5 >> 0] = 0; //@line 18726
  HEAP8[$11 + 6 >> 0] = 0; //@line 18726
  HEAP8[$7 >> 0] = 1; //@line 18727
  $12 = $7 + 1 | 0; //@line 18728
  HEAP8[$12 >> 0] = HEAP8[$3 >> 0] | 0; //@line 18729
  HEAP8[$12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0; //@line 18729
  HEAP8[$12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0; //@line 18729
  HEAP8[$12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0; //@line 18729
  HEAP8[$12 + 4 >> 0] = HEAP8[$3 + 4 >> 0] | 0; //@line 18729
  HEAP8[$12 + 5 >> 0] = HEAP8[$3 + 5 >> 0] | 0; //@line 18729
  $$0$$sroa_idx14 = $7 + 7 | 0; //@line 18730
  HEAP8[$$0$$sroa_idx14 >> 0] = $4; //@line 18731
  HEAP8[$$0$$sroa_idx14 + 1 >> 0] = $4 >> 8; //@line 18731
  $13 = _mbedtls_aes_crypt_ecb($8, 1, $7, $5) | 0; //@line 18732
  if (!$13) {
   $15 = $7 + 9 | 0; //@line 18735
   HEAP8[$15 >> 0] = 0; //@line 18736
   HEAP8[$15 + 1 >> 0] = 0; //@line 18736
   HEAP8[$15 + 2 >> 0] = 0; //@line 18736
   HEAP8[$15 + 3 >> 0] = 0; //@line 18736
   HEAP8[$15 + 4 >> 0] = 0; //@line 18736
   HEAP8[$15 + 5 >> 0] = 0; //@line 18736
   HEAP8[$15 + 6 >> 0] = 0; //@line 18736
   HEAP8[$7 >> 0] = 2; //@line 18737
   HEAP8[$12 >> 0] = HEAP8[$3 >> 0] | 0; //@line 18738
   HEAP8[$12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0; //@line 18738
   HEAP8[$12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0; //@line 18738
   HEAP8[$12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0; //@line 18738
   HEAP8[$12 + 4 >> 0] = HEAP8[$3 + 4 >> 0] | 0; //@line 18738
   HEAP8[$12 + 5 >> 0] = HEAP8[$3 + 5 >> 0] | 0; //@line 18738
   HEAP8[$$0$$sroa_idx14 >> 0] = $4; //@line 18739
   HEAP8[$$0$$sroa_idx14 + 1 >> 0] = $4 >> 8; //@line 18739
   $$0 = _mbedtls_aes_crypt_ecb($8, 1, $7, $6) | 0; //@line 18741
  } else {
   $$0 = $13; //@line 18743
  }
 } else {
  $$0 = $9; //@line 18746
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 18748
 _mbedtls_aes_free($8); //@line 18749
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 495; //@line 18752
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 18754
  HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 18756
  sp = STACKTOP; //@line 18757
  STACKTOP = sp; //@line 18758
  return 0; //@line 18758
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18760
  STACKTOP = sp; //@line 18761
  return $$0 | 0; //@line 18761
 }
 return 0; //@line 18763
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11005
 STACKTOP = STACKTOP + 48 | 0; //@line 11006
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11006
 $vararg_buffer3 = sp + 16 | 0; //@line 11007
 $vararg_buffer = sp; //@line 11008
 $3 = sp + 32 | 0; //@line 11009
 $4 = $0 + 28 | 0; //@line 11010
 $5 = HEAP32[$4 >> 2] | 0; //@line 11011
 HEAP32[$3 >> 2] = $5; //@line 11012
 $7 = $0 + 20 | 0; //@line 11014
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 11016
 HEAP32[$3 + 4 >> 2] = $9; //@line 11017
 HEAP32[$3 + 8 >> 2] = $1; //@line 11019
 HEAP32[$3 + 12 >> 2] = $2; //@line 11021
 $12 = $9 + $2 | 0; //@line 11022
 $13 = $0 + 60 | 0; //@line 11023
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 11026
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 11028
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 11030
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 11032
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 11036
  } else {
   $$04756 = 2; //@line 11038
   $$04855 = $12; //@line 11038
   $$04954 = $3; //@line 11038
   $27 = $17; //@line 11038
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 11044
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 11046
    $38 = $27 >>> 0 > $37 >>> 0; //@line 11047
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 11049
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 11051
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 11053
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 11056
    $44 = $$150 + 4 | 0; //@line 11057
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 11060
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 11063
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 11065
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 11067
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 11069
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 11072
     break L1;
    } else {
     $$04756 = $$1; //@line 11075
     $$04954 = $$150; //@line 11075
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 11079
   HEAP32[$4 >> 2] = 0; //@line 11080
   HEAP32[$7 >> 2] = 0; //@line 11081
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 11084
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 11087
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 11092
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 11098
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11103
  $25 = $20; //@line 11104
  HEAP32[$4 >> 2] = $25; //@line 11105
  HEAP32[$7 >> 2] = $25; //@line 11106
  $$051 = $2; //@line 11107
 }
 STACKTOP = sp; //@line 11109
 return $$051 | 0; //@line 11109
}
function __ZN7LoRaMacD2Ev__async_cb_396($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30496
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30498
 $4 = HEAP32[$2 + 1848 >> 2] | 0; //@line 30500
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 30505
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 30506
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1836 | 0); //@line 30507
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 363; //@line 30510
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 30511
   HEAP32[$9 >> 2] = $2; //@line 30512
   sp = STACKTOP; //@line 30513
   return;
  }
  ___async_unwind = 0; //@line 30516
  HEAP32[$ReallocAsyncCtx3 >> 2] = 363; //@line 30517
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 30518
  HEAP32[$9 >> 2] = $2; //@line 30519
  sp = STACKTOP; //@line 30520
  return;
 }
 $11 = HEAP32[$2 + 1828 >> 2] | 0; //@line 30524
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 30529
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 30530
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1816 | 0); //@line 30531
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 30534
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 30535
   HEAP32[$16 >> 2] = $2; //@line 30536
   sp = STACKTOP; //@line 30537
   return;
  }
  ___async_unwind = 0; //@line 30540
  HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 30541
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 30542
  HEAP32[$16 >> 2] = $2; //@line 30543
  sp = STACKTOP; //@line 30544
  return;
 }
 $18 = HEAP32[$2 + 1808 >> 2] | 0; //@line 30548
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 30553
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30554
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 1796 | 0); //@line 30555
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 30558
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 30559
   HEAP32[$23 >> 2] = $2; //@line 30560
   sp = STACKTOP; //@line 30561
   return;
  }
  ___async_unwind = 0; //@line 30564
  HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 30565
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 30566
  HEAP32[$23 >> 2] = $2; //@line 30567
  sp = STACKTOP; //@line 30568
  return;
 }
 $25 = HEAP32[$2 + 748 >> 2] | 0; //@line 30572
 if (!$25) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 30576
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 30581
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30582
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 736 | 0); //@line 30583
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 30586
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 30587
  HEAP32[$30 >> 2] = $2; //@line 30588
  sp = STACKTOP; //@line 30589
  return;
 }
 ___async_unwind = 0; //@line 30592
 HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 30593
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 30594
 HEAP32[$30 >> 2] = $2; //@line 30595
 sp = STACKTOP; //@line 30596
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_51($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22416
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22418
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22420
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22422
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22424
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22426
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 22428
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22430
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22432
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22434
 $19 = $2 + 1748 | 0; //@line 22436
 HEAP16[$19 >> 1] = $AsyncRetVal; //@line 22437
 $21 = HEAP16[$4 >> 1] | 0; //@line 22439
 HEAP16[$4 >> 1] = $21 + 1 << 16 >> 16; //@line 22441
 HEAP8[($21 & 65535) + ($2 + 1185) >> 0] = $AsyncRetVal; //@line 22444
 $27 = (HEAPU16[$19 >> 1] | 0) >>> 8 & 255; //@line 22447
 $28 = HEAP16[$4 >> 1] | 0; //@line 22448
 HEAP16[$4 >> 1] = $28 + 1 << 16 >> 16; //@line 22450
 HEAP8[($28 & 65535) + ($2 + 1185) >> 0] = $27; //@line 22453
 $34 = HEAP16[$4 >> 1] & 255; //@line 22456
 $36 = HEAP32[$2 + 1712 >> 2] | 0; //@line 22458
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 22459
 $37 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($2 + 756 | 0, $6, $34, $36, 128, $8) | 0; //@line 22460
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 411; //@line 22463
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 22464
  HEAP32[$38 >> 2] = $8; //@line 22465
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 22466
  HEAP32[$39 >> 2] = $4; //@line 22467
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 22468
  HEAP32[$40 >> 2] = $2; //@line 22469
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 22470
  HEAP32[$41 >> 2] = $10; //@line 22471
  $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 22472
  HEAP8[$42 >> 0] = $12; //@line 22473
  $43 = $ReallocAsyncCtx3 + 24 | 0; //@line 22474
  HEAP32[$43 >> 2] = $14; //@line 22475
  $44 = $ReallocAsyncCtx3 + 28 | 0; //@line 22476
  HEAP32[$44 >> 2] = $16; //@line 22477
  sp = STACKTOP; //@line 22478
  return;
 }
 HEAP32[___async_retval >> 2] = $37; //@line 22482
 ___async_unwind = 0; //@line 22483
 HEAP32[$ReallocAsyncCtx3 >> 2] = 411; //@line 22484
 $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 22485
 HEAP32[$38 >> 2] = $8; //@line 22486
 $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 22487
 HEAP32[$39 >> 2] = $4; //@line 22488
 $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 22489
 HEAP32[$40 >> 2] = $2; //@line 22490
 $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 22491
 HEAP32[$41 >> 2] = $10; //@line 22492
 $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 22493
 HEAP8[$42 >> 0] = $12; //@line 22494
 $43 = $ReallocAsyncCtx3 + 24 | 0; //@line 22495
 HEAP32[$43 >> 2] = $14; //@line 22496
 $44 = $ReallocAsyncCtx3 + 28 | 0; //@line 22497
 HEAP32[$44 >> 2] = $16; //@line 22498
 sp = STACKTOP; //@line 22499
 return;
}
function __ZN7LoRaMac18prepare_ongoing_txEhPKhthh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $19 = 0, $20 = 0, $32 = 0, $48 = 0, $53 = 0, $55 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP; //@line 14638
 STACKTOP = STACKTOP + 32 | 0; //@line 14639
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14639
 $vararg_buffer2 = sp + 8 | 0; //@line 14640
 $vararg_buffer = sp; //@line 14641
 HEAP8[$0 + 2105 >> 0] = $1; //@line 14643
 $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 14645
 $8 = __ZN7LoRaMac24get_max_possible_tx_sizeEh($0, $3 & 255) | 0; //@line 14646
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 432; //@line 14649
  HEAP16[$AsyncCtx + 4 >> 1] = $3; //@line 14651
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14653
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 14655
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 14657
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 14659
  HEAP8[$AsyncCtx + 24 >> 0] = $4; //@line 14661
  HEAP8[$AsyncCtx + 25 >> 0] = $1; //@line 14663
  HEAP8[$AsyncCtx + 26 >> 0] = $5; //@line 14665
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer2; //@line 14667
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer2; //@line 14669
  sp = STACKTOP; //@line 14670
  STACKTOP = sp; //@line 14671
  return 0; //@line 14671
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14673
 $19 = $8 & 255; //@line 14674
 $20 = $3 & 65535; //@line 14675
 if ($20 >>> 0 > $19 >>> 0) {
  HEAP32[$vararg_buffer >> 2] = $20; //@line 14678
  HEAP32[$vararg_buffer + 4 >> 2] = $19; //@line 14680
  _mbed_tracef(8, 12685, 13194, $vararg_buffer); //@line 14681
  HEAP16[$0 + 2372 >> 1] = $20 - $19; //@line 14685
  HEAP16[$0 + 2370 >> 1] = $8 & 255; //@line 14688
  _memcpy($0 + 2115 | 0, $2 | 0, $19 | 0) | 0; //@line 14690
 } else {
  HEAP16[$0 + 2370 >> 1] = $3; //@line 14693
  HEAP16[$0 + 2372 >> 1] = 0; //@line 14695
  if ($3 << 16 >> 16) {
   _memcpy($0 + 2115 | 0, $2 | 0, $20 | 0) | 0; //@line 14699
  }
 }
 $32 = $4 & 255; //@line 14702
 if ($32 & 1 | 0) {
  HEAP32[$0 + 2108 >> 2] = 0; //@line 14707
  HEAP8[$0 + 2112 >> 0] = $1; //@line 14709
  HEAP8[$0 + 2114 >> 0] = 1; //@line 14711
 }
 if ($32 & 2 | 0) {
  HEAP32[$0 + 2108 >> 2] = 1; //@line 14717
  HEAP8[$0 + 2112 >> 0] = $1; //@line 14719
  HEAP8[$0 + 2114 >> 0] = $5; //@line 14721
 }
 if (!($32 & 8)) {
  $55 = HEAP8[$0 + 2112 >> 0] | 0; //@line 14728
 } else {
  HEAP32[$0 + 2108 >> 2] = 3; //@line 14731
  HEAP8[$0 + 2112 >> 0] = $1; //@line 14733
  HEAP8[$0 + 2114 >> 0] = 1; //@line 14735
  $55 = $1; //@line 14736
 }
 $48 = $0 + 2370 | 0; //@line 14738
 $53 = HEAPU16[$0 + 2372 >> 1] | 0; //@line 14743
 HEAP32[$vararg_buffer2 >> 2] = HEAPU16[$48 >> 1]; //@line 14745
 HEAP32[$vararg_buffer2 + 4 >> 2] = $53; //@line 14747
 HEAP32[$vararg_buffer2 + 8 >> 2] = $55 & 255; //@line 14749
 _mbed_tracef(8, 12685, 13249, $vararg_buffer2); //@line 14750
 STACKTOP = sp; //@line 14752
 return HEAP16[$48 >> 1] | 0; //@line 14752
}
function __ZN12LoRaWANStack20process_transmissionEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $28 = 0, $32 = 0, $33 = 0, $35 = 0, $43 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 9400
 STACKTOP = STACKTOP + 16 | 0; //@line 9401
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9401
 $vararg_buffer1 = sp + 8 | 0; //@line 9402
 _mbed_tracef(16, 11997, 12347, sp); //@line 9404
 $2 = HEAP32[$0 + 3172 >> 2] | 0; //@line 9406
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9407
 __ZN7LoRaMac16on_radio_tx_doneEj($0, $2); //@line 9408
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 326; //@line 9411
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9413
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 9415
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 9417
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 9419
  sp = STACKTOP; //@line 9420
  STACKTOP = sp; //@line 9421
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9423
 HEAP8[$0 + 2895 >> 0] = 0; //@line 9425
 HEAP32[$0 + 2888 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 20 >> 2]; //@line 9430
 HEAP8[$0 + 2893 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 8 >> 0] | 0; //@line 9435
 HEAP8[$0 + 2892 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 9 >> 0] | 0; //@line 9440
 HEAP32[$0 + 2884 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 12 >> 2]; //@line 9445
 HEAP8[$0 + 2894 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 11 >> 0] | 0; //@line 9450
 $28 = $0 + 2496 | 0; //@line 9451
 switch (HEAP32[$28 >> 2] | 0) {
 case 1:
  {
   HEAP32[$28 >> 2] = 4; //@line 9455
   STACKTOP = sp; //@line 9456
   return;
  }
 case 8:
  {
   $32 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1; //@line 9462
   $33 = $0 + 2904 | 0; //@line 9463
   $35 = HEAP32[$33 >> 2] & -18; //@line 9465
   if ($32) {
    HEAP32[$33 >> 2] = $35 | 1; //@line 9468
    _mbed_tracef(16, 11997, 12370, $vararg_buffer1); //@line 9469
    HEAP32[$28 >> 2] = 9; //@line 9470
    STACKTOP = sp; //@line 9471
    return;
   }
   HEAP32[$33 >> 2] = $35 | 16; //@line 9474
   if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) != 2) {
    STACKTOP = sp; //@line 9478
    return;
   }
   __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 9480
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9481
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9482
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 327; //@line 9485
    HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 9487
    HEAP32[$AsyncCtx5 + 8 >> 2] = $28; //@line 9489
    sp = STACKTOP; //@line 9490
    STACKTOP = sp; //@line 9491
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9493
   $43 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 9495
   HEAP32[$28 >> 2] = $43 ? 5 : 2; //@line 9497
   STACKTOP = sp; //@line 9498
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 9502
   return;
  }
 }
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$013 = 0, $$079$i = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $27 = 0, $32 = 0, $36 = 0, $37 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18788
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$013 = 0; //@line 18793
  return $$013 | 0; //@line 18794
 }
 $6 = HEAP32[$2 >> 2] | 0; //@line 18796
 if (!$6) {
  $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 18801
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18802
  $11 = FUNCTION_TABLE_iii[$10 & 31]($0, $1) | 0; //@line 18803
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 496; //@line 18806
   sp = STACKTOP; //@line 18807
   return 0; //@line 18808
  } else {
   _emscripten_free_async_context($AsyncCtx | 0); //@line 18810
   return ($11 ? 3 : 0) | 0; //@line 18812
  }
 }
 $12 = $0 + 76 | 0; //@line 18815
 L10 : do {
  if (!(HEAP8[$12 >> 0] | 0)) {
   $32 = -1; //@line 18820
  } else {
   $$079$i = 0; //@line 18822
   while (1) {
    $17 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 18826
    $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18828
    $19 = FUNCTION_TABLE_iiii[$17 & 31]($0, $6, $$079$i & 255) | 0; //@line 18829
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18834
    if ($19) {
     $32 = $$079$i; //@line 18836
     break L10;
    }
    $27 = $$079$i + 1 | 0; //@line 18839
    if (($27 | 0) < (HEAPU8[$12 >> 0] | 0)) {
     $$079$i = $27; //@line 18844
    } else {
     $32 = -1; //@line 18846
     break L10;
    }
   }
   HEAP32[$AsyncCtx3 >> 2] = 497; //@line 18850
   HEAP32[$AsyncCtx3 + 4 >> 2] = $$079$i; //@line 18852
   HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 18854
   HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 18856
   HEAP8[$AsyncCtx3 + 16 >> 0] = $1; //@line 18858
   HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 18860
   HEAP32[$AsyncCtx3 + 24 >> 2] = $0; //@line 18862
   HEAP32[$AsyncCtx3 + 28 >> 2] = $6; //@line 18864
   sp = STACKTOP; //@line 18865
   return 0; //@line 18866
  }
 } while (0);
 HEAP8[$2 + 9 >> 0] = $32; //@line 18871
 $36 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 18874
 $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 18875
 $37 = FUNCTION_TABLE_iiii[$36 & 31]($0, $2, $1) | 0; //@line 18876
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 498; //@line 18879
  sp = STACKTOP; //@line 18880
  return 0; //@line 18881
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 18883
 switch ($37 | 0) {
 case -1004:
  {
   $$013 = 2; //@line 18886
   return $$013 | 0; //@line 18887
  }
 case -1005:
  {
   $$013 = 1; //@line 18891
   return $$013 | 0; //@line 18892
  }
 case -1006:
  {
   $$013 = 0; //@line 18896
   return $$013 | 0; //@line 18897
  }
 case 0:
  {
   $$013 = 3; //@line 18901
   return $$013 | 0; //@line 18902
  }
 default:
  {
   $$013 = 0; //@line 18906
   return $$013 | 0; //@line 18907
  }
 }
 return 0; //@line 18910
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $21 = 0, $24 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 8819
 STACKTOP = STACKTOP + 32 | 0; //@line 8820
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8820
 $1 = sp + 8 | 0; //@line 8822
 if ((HEAP32[(__ZNK7LoRaMac19get_mlme_indicationEv($0) | 0) >> 2] | 0) != 4) {
  _mbed_tracef(2, 11997, 12279, sp); //@line 8827
  STACKTOP = sp; //@line 8828
  return;
 }
 $5 = $0 + 2512 | 0; //@line 8830
 $6 = HEAP32[$5 >> 2] | 0; //@line 8831
 do {
  if ($6 | 0) {
   $10 = HEAP32[$0 + 3168 >> 2] | 0; //@line 8837
   $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 8839
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 8840
   FUNCTION_TABLE_vii[$12 & 15]($1, $0 + 2500 | 0); //@line 8841
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 305; //@line 8844
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 8846
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8848
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 8850
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 8852
    sp = STACKTOP; //@line 8853
    STACKTOP = sp; //@line 8854
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8856
   $17 = $1 + 12 | 0; //@line 8858
   HEAP32[$17 >> 2] = HEAP32[$5 >> 2]; //@line 8859
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8860
   $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($10, $1, 11) | 0; //@line 8861
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 306; //@line 8864
    HEAP32[$AsyncCtx5 + 4 >> 2] = $17; //@line 8866
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 8868
    sp = STACKTOP; //@line 8869
    STACKTOP = sp; //@line 8870
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8872
   $21 = HEAP32[$17 >> 2] | 0; //@line 8873
   do {
    if ($21 | 0) {
     $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 8878
     $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8879
     FUNCTION_TABLE_vi[$24 & 1023]($1); //@line 8880
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 307; //@line 8883
      HEAP32[$AsyncCtx2 + 4 >> 2] = $18; //@line 8885
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 8887
      sp = STACKTOP; //@line 8888
      STACKTOP = sp; //@line 8889
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8891
      break;
     }
    }
   } while (0);
   if (!$18) {
    $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8898
    _mbed_assert_internal(11890, 11899, 778); //@line 8899
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 308; //@line 8902
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 8904
     sp = STACKTOP; //@line 8905
     STACKTOP = sp; //@line 8906
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 8908
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 8914
 return;
}
function __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $21 = 0, $22 = 0, $25 = 0, $27 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $5 = 0, $7 = 0, dest = 0, src = 0, stop = 0;
 if (!$1) {
  HEAP32[$0 + 1752 >> 2] = 0; //@line 15179
  HEAP32[$0 + 1756 >> 2] = 0; //@line 15181
  dest = $0 + 1716 | 0; //@line 15183
  stop = dest + 32 | 0; //@line 15183
  do {
   HEAP8[dest >> 0] = 0; //@line 15183
   dest = dest + 1 | 0; //@line 15183
  } while ((dest | 0) < (stop | 0));
  $$0 = 0; //@line 15184
  return $$0 | 0; //@line 15185
 }
 $4 = $1 + 4 | 0; //@line 15187
 if ($2) {
  $5 = HEAP32[$4 >> 2] | 0; //@line 15189
  if (!$5) {
   $$0 = -1003; //@line 15192
   return $$0 | 0; //@line 15193
  }
  $7 = $1 + 8 | 0; //@line 15195
  if (!(HEAP32[$7 >> 2] | 0)) {
   $$0 = -1003; //@line 15199
   return $$0 | 0; //@line 15200
  }
  $10 = $1 + 12 | 0; //@line 15202
  if (!(HEAP32[$10 >> 2] | 0)) {
   $$0 = -1003; //@line 15206
   return $$0 | 0; //@line 15207
  }
  $13 = $1 + 16 | 0; //@line 15209
  if (!(HEAP8[$13 >> 0] | 0)) {
   $$0 = -1003; //@line 15213
   return $$0 | 0; //@line 15214
  }
  HEAP32[$0 + 1704 >> 2] = $5; //@line 15217
  HEAP32[$0 + 1708 >> 2] = HEAP32[$7 >> 2]; //@line 15220
  HEAP32[$0 + 1712 >> 2] = HEAP32[$10 >> 2]; //@line 15223
  $21 = HEAP8[$13 >> 0] | 0; //@line 15224
  $22 = $0 + 1700 | 0; //@line 15225
  HEAP8[$22 >> 0] = $21; //@line 15226
  $25 = __ZN7LoRaPHY21verify_nb_join_trialsEh($0 + 4 | 0, HEAP8[$13 >> 0] | 0) | 0; //@line 15229
  HEAP8[$22 >> 0] = $25 ? $21 : 12; //@line 15231
  HEAP8[$0 + 1701 >> 0] = 0; //@line 15233
  $$0 = 0; //@line 15234
  return $$0 | 0; //@line 15235
 } else {
  $27 = $1 + 8 | 0; //@line 15237
  if (!(HEAP32[$27 >> 2] | 0)) {
   $$0 = -1003; //@line 15241
   return $$0 | 0; //@line 15242
  }
  $30 = HEAP32[$4 >> 2] | 0; //@line 15244
  if (!$30) {
   $$0 = -1003; //@line 15247
   return $$0 | 0; //@line 15248
  }
  $32 = $1 + 12 | 0; //@line 15250
  if (!(HEAP32[$32 >> 2] | 0)) {
   $$0 = -1003; //@line 15254
   return $$0 | 0; //@line 15255
  }
  $35 = $1 + 16 | 0; //@line 15257
  if (!(HEAP32[$35 >> 2] | 0)) {
   $$0 = -1003; //@line 15261
   return $$0 | 0; //@line 15262
  }
  HEAP32[$0 + 1752 >> 2] = $30; //@line 15265
  HEAP32[$0 + 1756 >> 2] = HEAP32[$27 >> 2]; //@line 15268
  dest = $0 + 1716 | 0; //@line 15271
  src = HEAP32[$32 >> 2] | 0; //@line 15271
  stop = dest + 16 | 0; //@line 15271
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 15271
   dest = dest + 1 | 0; //@line 15271
   src = src + 1 | 0; //@line 15271
  } while ((dest | 0) < (stop | 0));
  dest = $0 + 1732 | 0; //@line 15274
  src = HEAP32[$35 >> 2] | 0; //@line 15274
  stop = dest + 16 | 0; //@line 15274
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 15274
   dest = dest + 1 | 0; //@line 15274
   src = src + 1 | 0; //@line 15274
  } while ((dest | 0) < (stop | 0));
  $$0 = 0; //@line 15275
  return $$0 | 0; //@line 15276
 }
 return 0; //@line 15278
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$079$i = 0, $$1 = 0, $$1$ = 0, $$ph = 0, $11 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20258
 $2 = $1 + 4 | 0; //@line 20259
 $3 = HEAP32[$2 >> 2] | 0; //@line 20260
 $4 = $0 + 76 | 0; //@line 20261
 do {
  if (!(HEAP8[$4 >> 0] | 0)) {
   $24 = -1; //@line 20266
   $30 = $3; //@line 20266
  } else {
   $$079$i = 0; //@line 20268
   while (1) {
    $9 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 20272
    $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 20274
    $11 = FUNCTION_TABLE_iiii[$9 & 31]($0, $3, $$079$i & 255) | 0; //@line 20275
    if (___async) {
     label = 4; //@line 20278
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 20281
    if ($11) {
     $$ph = $$079$i; //@line 20283
     label = 7; //@line 20284
     break;
    }
    $19 = $$079$i + 1 | 0; //@line 20287
    if (($19 | 0) < (HEAPU8[$4 >> 0] | 0)) {
     $$079$i = $19; //@line 20292
    } else {
     $$ph = -1; //@line 20294
     label = 7; //@line 20295
     break;
    }
   }
   if ((label | 0) == 4) {
    HEAP32[$AsyncCtx >> 2] = 518; //@line 20300
    HEAP32[$AsyncCtx + 4 >> 2] = $$079$i; //@line 20302
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 20304
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 20306
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 20308
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 20310
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 20312
    HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 20314
    sp = STACKTOP; //@line 20315
    return 0; //@line 20316
   } else if ((label | 0) == 7) {
    $24 = $$ph; //@line 20320
    $30 = HEAP32[$2 >> 2] | 0; //@line 20320
    break;
   }
  }
 } while (0);
 $$ = ($24 | 0) < 0 ? 6 : 7; //@line 20326
 $26 = HEAP32[$0 + 4 >> 2] | 0; //@line 20328
 $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 64 >> 2] | 0; //@line 20331
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 20332
 $31 = FUNCTION_TABLE_iii[$29 & 31]($26, $30) | 0; //@line 20333
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 519; //@line 20336
  HEAP8[$AsyncCtx2 + 4 >> 0] = $$; //@line 20338
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 20340
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 20342
  sp = STACKTOP; //@line 20343
  return 0; //@line 20344
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20346
  $$1 = $31 ? $$ : 6; //@line 20347
  $35 = HEAP8[$1 >> 0] | 0; //@line 20348
  $$1$ = ($35 << 24 >> 24 >= (HEAP8[$0 + 28 >> 0] | 0) ? $35 << 24 >> 24 <= (HEAP8[$0 + 29 >> 0] | 0) : 0) ? $$1 : $$1 & 5; //@line 20357
  $44 = HEAP8[$1 + 1 >> 0] | 0; //@line 20359
  return (($44 << 24 >> 24 >= (HEAP8[$0 + 32 >> 0] | 0) ? $44 << 24 >> 24 <= (HEAP8[$0 + 33 >> 0] | 0) : 0) ? $$1$ : $$1$ & 3) | 0; //@line 20369
 }
 return 0; //@line 20371
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_317($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23195
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23197
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23199
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23201
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23203
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23205
 $12 = $0 + 24 | 0; //@line 23207
 $14 = HEAP32[$12 >> 2] | 0; //@line 23209
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 23212
 $18 = HEAP32[$2 >> 2] | 0; //@line 23213
 if ($18 | 0) {
  $21 = HEAP32[$18 + 4 >> 2] | 0; //@line 23217
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 23218
  FUNCTION_TABLE_vii[$21 & 15]($6, $8); //@line 23219
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 91; //@line 23222
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 23223
   HEAP32[$22 >> 2] = $2; //@line 23224
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 23225
   HEAP32[$23 >> 2] = $4; //@line 23226
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 23227
   HEAP32[$24 >> 2] = $10; //@line 23228
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 23229
   $26 = $25; //@line 23230
   $27 = $26; //@line 23231
   HEAP32[$27 >> 2] = $14; //@line 23232
   $28 = $26 + 4 | 0; //@line 23233
   $29 = $28; //@line 23234
   HEAP32[$29 >> 2] = $17; //@line 23235
   $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 23236
   HEAP32[$30 >> 2] = $8; //@line 23237
   sp = STACKTOP; //@line 23238
   return;
  }
  ___async_unwind = 0; //@line 23241
  HEAP32[$ReallocAsyncCtx3 >> 2] = 91; //@line 23242
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 23243
  HEAP32[$22 >> 2] = $2; //@line 23244
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 23245
  HEAP32[$23 >> 2] = $4; //@line 23246
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 23247
  HEAP32[$24 >> 2] = $10; //@line 23248
  $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 23249
  $26 = $25; //@line 23250
  $27 = $26; //@line 23251
  HEAP32[$27 >> 2] = $14; //@line 23252
  $28 = $26 + 4 | 0; //@line 23253
  $29 = $28; //@line 23254
  HEAP32[$29 >> 2] = $17; //@line 23255
  $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 23256
  HEAP32[$30 >> 2] = $8; //@line 23257
  sp = STACKTOP; //@line 23258
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 23261
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 23262
 $31 = HEAP32[$2 >> 2] | 0; //@line 23263
 if (!$31) {
  return;
 }
 $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 23269
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 23270
 FUNCTION_TABLE_vi[$34 & 1023]($8); //@line 23271
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 92; //@line 23274
  sp = STACKTOP; //@line 23275
  return;
 }
 ___async_unwind = 0; //@line 23278
 HEAP32[$ReallocAsyncCtx4 >> 2] = 92; //@line 23279
 sp = STACKTOP; //@line 23280
 return;
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2451
 STACKTOP = STACKTOP + 16 | 0; //@line 2452
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2452
 $1 = sp; //@line 2453
 $2 = $0 + 52 | 0; //@line 2454
 $3 = HEAP32[$2 >> 2] | 0; //@line 2455
 do {
  if (!$3) {
   $13 = 0; //@line 2459
  } else {
   $7 = HEAP32[$3 + 4 >> 2] | 0; //@line 2463
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 2464
   FUNCTION_TABLE_vii[$7 & 15]($1, $0 + 40 | 0); //@line 2465
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 108; //@line 2468
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 2470
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2472
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 2474
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2476
    sp = STACKTOP; //@line 2477
    STACKTOP = sp; //@line 2478
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2480
    $13 = HEAP32[$2 >> 2] | 0; //@line 2482
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 2487
 HEAP32[$12 >> 2] = $13; //@line 2488
 __ZN4mbed6Ticker6detachEv($0); //@line 2489
 $14 = HEAP32[$12 >> 2] | 0; //@line 2490
 do {
  if (!$14) {
   $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2494
   _mbed_assert_internal(14775, 14780, 528); //@line 2495
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 109; //@line 2498
    HEAP32[$AsyncCtx9 + 4 >> 2] = $12; //@line 2500
    HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 2502
    sp = STACKTOP; //@line 2503
    STACKTOP = sp; //@line 2504
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 2506
    $19 = HEAP32[$12 >> 2] | 0; //@line 2508
    break;
   }
  } else {
   $19 = $14; //@line 2512
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 2515
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2516
 FUNCTION_TABLE_vi[$18 & 1023]($1); //@line 2517
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 110; //@line 2520
  HEAP32[$AsyncCtx2 + 4 >> 2] = $12; //@line 2522
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 2524
  sp = STACKTOP; //@line 2525
  STACKTOP = sp; //@line 2526
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2528
 $22 = HEAP32[$12 >> 2] | 0; //@line 2529
 if (!$22) {
  STACKTOP = sp; //@line 2532
  return;
 }
 $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 2535
 $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2536
 FUNCTION_TABLE_vi[$25 & 1023]($1); //@line 2537
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 111; //@line 2540
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 2542
  sp = STACKTOP; //@line 2543
  STACKTOP = sp; //@line 2544
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 2546
 STACKTOP = sp; //@line 2547
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_332($0) {
 $0 = $0 | 0;
 var $$pre$i$i70 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 25852
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25858
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25860
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25862
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25864
 $$pre$i$i70 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25865
 $13 = $$pre$i$i70; //@line 25866
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i70; //@line 25867
 if (!$$pre$i$i70) {
  __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($8, $10); //@line 25870
  $23 = HEAP32[(HEAP32[$10 >> 2] | 0) + 72 >> 2] | 0; //@line 25873
  $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 25874
  FUNCTION_TABLE_vi[$23 & 1023]($10); //@line 25875
  if (___async) {
   HEAP32[$ReallocAsyncCtx16 >> 2] = 185; //@line 25878
   $24 = $ReallocAsyncCtx16 + 4 | 0; //@line 25879
   HEAP32[$24 >> 2] = $10; //@line 25880
   $25 = $ReallocAsyncCtx16 + 8 | 0; //@line 25881
   HEAP32[$25 >> 2] = $12; //@line 25882
   $26 = $ReallocAsyncCtx16 + 12 | 0; //@line 25883
   HEAP32[$26 >> 2] = $10; //@line 25884
   sp = STACKTOP; //@line 25885
   return;
  }
  ___async_unwind = 0; //@line 25888
  HEAP32[$ReallocAsyncCtx16 >> 2] = 185; //@line 25889
  $24 = $ReallocAsyncCtx16 + 4 | 0; //@line 25890
  HEAP32[$24 >> 2] = $10; //@line 25891
  $25 = $ReallocAsyncCtx16 + 8 | 0; //@line 25892
  HEAP32[$25 >> 2] = $12; //@line 25893
  $26 = $ReallocAsyncCtx16 + 12 | 0; //@line 25894
  HEAP32[$26 >> 2] = $10; //@line 25895
  sp = STACKTOP; //@line 25896
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 25900
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 25901
  FUNCTION_TABLE_vi[$16 & 1023]($6); //@line 25902
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 25905
   $17 = $ReallocAsyncCtx15 + 4 | 0; //@line 25906
   HEAP32[$17 >> 2] = $6; //@line 25907
   $18 = $ReallocAsyncCtx15 + 8 | 0; //@line 25908
   HEAP32[$18 >> 2] = $8; //@line 25909
   $19 = $ReallocAsyncCtx15 + 12 | 0; //@line 25910
   HEAP32[$19 >> 2] = $10; //@line 25911
   $20 = $ReallocAsyncCtx15 + 16 | 0; //@line 25912
   HEAP32[$20 >> 2] = $12; //@line 25913
   sp = STACKTOP; //@line 25914
   return;
  }
  ___async_unwind = 0; //@line 25917
  HEAP32[$ReallocAsyncCtx15 >> 2] = 184; //@line 25918
  $17 = $ReallocAsyncCtx15 + 4 | 0; //@line 25919
  HEAP32[$17 >> 2] = $6; //@line 25920
  $18 = $ReallocAsyncCtx15 + 8 | 0; //@line 25921
  HEAP32[$18 >> 2] = $8; //@line 25922
  $19 = $ReallocAsyncCtx15 + 12 | 0; //@line 25923
  HEAP32[$19 >> 2] = $10; //@line 25924
  $20 = $ReallocAsyncCtx15 + 16 | 0; //@line 25925
  HEAP32[$20 >> 2] = $12; //@line 25926
  sp = STACKTOP; //@line 25927
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $15 = 0, $30 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12877
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12879
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 12880
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 398; //@line 12883
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12885
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 12887
  sp = STACKTOP; //@line 12888
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12891
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12893
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 12894
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 399; //@line 12897
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12899
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 12901
  sp = STACKTOP; //@line 12902
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12905
 $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12907
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 12908
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 400; //@line 12911
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12913
  sp = STACKTOP; //@line 12914
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12917
 do {
  if ((HEAP32[$0 + 2380 >> 2] | 0) == 2) {
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12923
   __ZN7LoRaMac15open_rx2_windowEv($0); //@line 12924
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 401; //@line 12927
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12929
    sp = STACKTOP; //@line 12930
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12933
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12938
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 12939
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 402; //@line 12942
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12944
    sp = STACKTOP; //@line 12945
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12948
    break;
   }
  }
 } while (0);
 $15 = $0 + 2056 | 0; //@line 12953
 HEAP32[$15 >> 2] = 2; //@line 12954
 HEAP32[$0 + 2092 >> 2] = 2; //@line 12956
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 12958
 HEAP8[$0 + 2063 >> 0] = HEAP8[$0 + 1699 >> 0] | 0; //@line 12962
 HEAP8[$0 + 2062 >> 0] = 0; //@line 12964
 HEAP32[$0 + 2064 >> 2] = 0; //@line 12966
 HEAP8[$0 + 1180 >> 0] = 0; //@line 12968
 HEAP32[$15 >> 2] = 0; //@line 12969
 if ((HEAP32[$0 + 2052 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$0 + 1174 >> 0] | 0) {
  return;
 }
 $30 = $0 + 1760 | 0; //@line 12982
 HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 12985
 return;
}
function _mbedtls_cipher_update__async_cb_346($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26588
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26590
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26592
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26594
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26596
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26598
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26600
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26602
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26604
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26606
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26608
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26610
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 26613
  $55 = ___async_retval; //@line 26614
  HEAP32[$55 >> 2] = $$1; //@line 26615
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 26620
 $25 = $6 + $4 | 0; //@line 26621
 HEAP32[$8 >> 2] = 0; //@line 26622
 $26 = $10 + $12 | 0; //@line 26623
 $27 = $14 - $12 | 0; //@line 26624
 if (!$27) {
  $$1 = 0; //@line 26627
  $55 = ___async_retval; //@line 26628
  HEAP32[$55 >> 2] = $$1; //@line 26629
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 26632
 if (!$29) {
  if (!(HEAP32[$16 >> 2] | 0)) {
   $$0 = (HEAP32[$18 + 12 >> 2] | 0) == 0 ? 0 : $4; //@line 26642
  } else {
   $$0 = 0; //@line 26644
  }
 } else {
  $$0 = $29; //@line 26647
 }
 $37 = $27 - $$0 | 0; //@line 26650
 _memcpy($18 + 20 | 0, $26 + $37 | 0, $$0 | 0) | 0; //@line 26652
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 26655
 if (!$37) {
  $$1 = 0; //@line 26658
  $55 = ___async_retval; //@line 26659
  HEAP32[$55 >> 2] = $$1; //@line 26660
  return;
 }
 $46 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 26667
 $48 = HEAP32[$18 + 60 >> 2] | 0; //@line 26669
 $49 = HEAP32[$16 >> 2] | 0; //@line 26670
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 26672
 $51 = FUNCTION_TABLE_iiiiiii[$46 & 3]($48, $49, $37, $18 + 40 | 0, $26, $25) | 0; //@line 26673
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 571; //@line 26676
  $52 = $ReallocAsyncCtx3 + 4 | 0; //@line 26677
  HEAP32[$52 >> 2] = $2; //@line 26678
  $53 = $ReallocAsyncCtx3 + 8 | 0; //@line 26679
  HEAP32[$53 >> 2] = $37; //@line 26680
  sp = STACKTOP; //@line 26681
  return;
 }
 HEAP32[___async_retval >> 2] = $51; //@line 26685
 ___async_unwind = 0; //@line 26686
 HEAP32[$ReallocAsyncCtx3 >> 2] = 571; //@line 26687
 $52 = $ReallocAsyncCtx3 + 4 | 0; //@line 26688
 HEAP32[$52 >> 2] = $2; //@line 26689
 $53 = $ReallocAsyncCtx3 + 8 | 0; //@line 26690
 HEAP32[$53 >> 2] = $37; //@line 26691
 sp = STACKTOP; //@line 26692
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_63($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24372
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24374
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 24376
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 24381
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 24382
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 24383
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 24386
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 24387
   HEAP32[$9 >> 2] = $2; //@line 24388
   sp = STACKTOP; //@line 24389
   return;
  }
  ___async_unwind = 0; //@line 24392
  HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 24393
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 24394
  HEAP32[$9 >> 2] = $2; //@line 24395
  sp = STACKTOP; //@line 24396
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 24400
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 24405
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24406
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 24407
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 24410
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 24411
   HEAP32[$16 >> 2] = $2; //@line 24412
   sp = STACKTOP; //@line 24413
   return;
  }
  ___async_unwind = 0; //@line 24416
  HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 24417
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 24418
  HEAP32[$16 >> 2] = $2; //@line 24419
  sp = STACKTOP; //@line 24420
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 24424
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 24429
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24430
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 24431
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 24434
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 24435
   HEAP32[$23 >> 2] = $2; //@line 24436
   sp = STACKTOP; //@line 24437
   return;
  }
  ___async_unwind = 0; //@line 24440
  HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 24441
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 24442
  HEAP32[$23 >> 2] = $2; //@line 24443
  sp = STACKTOP; //@line 24444
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 24448
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 24454
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 24455
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 24456
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 24459
  sp = STACKTOP; //@line 24460
  return;
 }
 ___async_unwind = 0; //@line 24463
 HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 24464
 sp = STACKTOP; //@line 24465
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEj__async_cb_176($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1845
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1851
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1853
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1855
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  $16 = (HEAP32[$4 + 1776 >> 2] | 0) - $6 | 0; //@line 1862
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 1863
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($8, $4 + 1836 | 0, $16); //@line 1864
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 388; //@line 1867
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 1868
   HEAP32[$17 >> 2] = $4; //@line 1869
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 1870
   HEAP32[$18 >> 2] = $10; //@line 1871
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 1872
   HEAP32[$19 >> 2] = $6; //@line 1873
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 1874
   HEAP32[$20 >> 2] = $8; //@line 1875
   sp = STACKTOP; //@line 1876
   return;
  }
  ___async_unwind = 0; //@line 1879
  HEAP32[$ReallocAsyncCtx2 >> 2] = 388; //@line 1880
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 1881
  HEAP32[$17 >> 2] = $4; //@line 1882
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 1883
  HEAP32[$18 >> 2] = $10; //@line 1884
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 1885
  HEAP32[$19 >> 2] = $6; //@line 1886
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 1887
  HEAP32[$20 >> 2] = $8; //@line 1888
  sp = STACKTOP; //@line 1889
  return;
 }
 if (!(HEAP8[$4 + 1177 >> 0] | 0)) {
  $34 = HEAP8[$4 + 1182 >> 0] | 0; //@line 1897
  HEAP8[$4 + 1183 >> 0] = $34; //@line 1899
  __ZN7LoRaPHY16set_last_tx_doneEhbj($4 + 4 | 0, $34, (HEAP8[$4 + 2376 >> 0] | 0) != 0, $10); //@line 1904
  HEAP32[$4 + 1780 >> 2] = $10; //@line 1906
  return;
 }
 $27 = (HEAP32[$4 + 1776 >> 2] | 0) - $6 | 0; //@line 1912
 $30 = $27 + (__ZN7LoRaPHY15get_ack_timeoutEv($4 + 4 | 0) | 0) | 0; //@line 1915
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 1916
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($8, $4 + 1856 | 0, $30); //@line 1917
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 389; //@line 1920
  $31 = $ReallocAsyncCtx + 4 | 0; //@line 1921
  HEAP32[$31 >> 2] = $4; //@line 1922
  $32 = $ReallocAsyncCtx + 8 | 0; //@line 1923
  HEAP32[$32 >> 2] = $10; //@line 1924
  sp = STACKTOP; //@line 1925
  return;
 }
 ___async_unwind = 0; //@line 1928
 HEAP32[$ReallocAsyncCtx >> 2] = 389; //@line 1929
 $31 = $ReallocAsyncCtx + 4 | 0; //@line 1930
 HEAP32[$31 >> 2] = $4; //@line 1931
 $32 = $ReallocAsyncCtx + 8 | 0; //@line 1932
 HEAP32[$32 >> 2] = $10; //@line 1933
 sp = STACKTOP; //@line 1934
 return;
}
function __ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb($0) {
 $0 = $0 | 0;
 var $$0$off0 = 0, $$031 = 0, $$1 = 0, $$pre$phi39Z2D = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $40 = 0, $45 = 0, $6 = 0, $8 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24635
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24640
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24642
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 24644
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24646
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24648
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24650
 $18 = HEAP8[$2 + 2853 >> 0] | 0; //@line 24652
 if (HEAP8[$0 + 8 >> 0] & 1) {
  if ($18 << 24 >> 24 != (HEAP8[$6 >> 0] | 0)) {
   $$1 = -1001; //@line 24657
   $45 = ___async_retval; //@line 24658
   HEAP16[$45 >> 1] = $$1; //@line 24659
   return;
  }
  if (!(HEAP32[$8 >> 2] & 1)) {
   $$1 = -1001; //@line 24666
   $45 = ___async_retval; //@line 24667
   HEAP16[$45 >> 1] = $$1; //@line 24668
   return;
  }
 }
 HEAP8[$6 >> 0] = $18; //@line 24672
 HEAP32[$8 >> 2] = 1; //@line 24673
 $24 = $2 + 2856 | 0; //@line 24674
 $25 = HEAP32[$24 >> 2] | 0; //@line 24675
 $26 = $2 + 2860 | 0; //@line 24676
 $27 = HEAP16[$26 >> 1] | 0; //@line 24677
 $28 = $27 & 65535; //@line 24678
 $30 = $2 + 2882 | 0; //@line 24680
 $32 = (HEAP16[$30 >> 1] | 0) == 0; //@line 24682
 if (($27 & 65535) > ($10 & 65535)) {
  if ($32) {
   $35 = $2 + 2880 | 0; //@line 24687
   HEAP16[$35 >> 1] = $28 - $16; //@line 24688
   HEAP16[$30 >> 1] = $10; //@line 24689
   _memcpy($12 | 0, $25 | 0, $16 | 0) | 0; //@line 24690
   $$0$off0 = 0; //@line 24691
   $$031 = $10; //@line 24691
   $$pre$phi39Z2D = $35; //@line 24691
  } else {
   label = 10; //@line 24693
  }
 } else {
  if ($32) {
   $36 = $2 + 2880 | 0; //@line 24697
   HEAP16[$36 >> 1] = 0; //@line 24698
   HEAP16[$30 >> 1] = 0; //@line 24699
   _memcpy($12 | 0, $25 | 0, $28 | 0) | 0; //@line 24700
   $$0$off0 = 1; //@line 24701
   $$031 = $27; //@line 24701
   $$pre$phi39Z2D = $36; //@line 24701
  } else {
   label = 10; //@line 24703
  }
 }
 if ((label | 0) == 10) {
  $$0$off0 = 0; //@line 24708
  $$031 = $27; //@line 24708
  $$pre$phi39Z2D = $2 + 2880 | 0; //@line 24708
 }
 if (HEAP16[$$pre$phi39Z2D >> 1] | 0) {
  $40 = HEAP16[$2 + 2882 >> 1] | 0; //@line 24714
  if ($40 << 16 >> 16) {
   _memcpy($12 | 0, $25 + ($40 & 65535) | 0, $$031 & 65535 | 0) | 0; //@line 24720
  }
 }
 if (!$$0$off0) {
  $$1 = $$031; //@line 24724
  $45 = ___async_retval; //@line 24725
  HEAP16[$45 >> 1] = $$1; //@line 24726
  return;
 }
 HEAP32[$24 >> 2] = 0; //@line 24729
 HEAP16[$26 >> 1] = 0; //@line 24730
 HEAP8[$14 >> 0] = 0; //@line 24731
 $$1 = $$031; //@line 24732
 $45 = ___async_retval; //@line 24733
 HEAP16[$45 >> 1] = $$1; //@line 24734
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $2 = 0, $21 = 0, $28 = 0, $31 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 13140
 STACKTOP = STACKTOP + 16 | 0; //@line 13141
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13141
 $vararg_buffer = sp; //@line 13142
 $1 = sp + 5 | 0; //@line 13143
 $2 = sp + 4 | 0; //@line 13144
 if (!(HEAP8[$0 + 2376 >> 0] | 0)) {
  if (!(HEAP32[$0 + 2088 >> 2] | 0)) {
   HEAP8[$0 + 1877 >> 0] = __ZN7LoRaPHY16get_alternate_DREh($0 + 4 | 0, (HEAPU8[$0 + 1701 >> 0] | 0) + 1 & 255) | 0; //@line 13161
   HEAP8[$1 >> 0] = 0; //@line 13162
   HEAP8[$2 >> 0] = HEAP8[$0 + 1936 >> 0] << 7; //@line 13166
   HEAP8[$0 + 1180 >> 0] = 1; //@line 13168
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 13169
   $21 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $1, $2, 0, 0, 0) | 0; //@line 13170
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 407; //@line 13173
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13175
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 13177
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 13179
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 13181
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 13183
    sp = STACKTOP; //@line 13184
    STACKTOP = sp; //@line 13185
    return 0; //@line 13185
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13187
   do {
    if (!$21) {
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13191
     $28 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 13192
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 408; //@line 13195
      HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 13197
      HEAP32[$AsyncCtx7 + 8 >> 2] = $1; //@line 13199
      sp = STACKTOP; //@line 13200
      STACKTOP = sp; //@line 13201
      return 0; //@line 13201
     } else {
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13203
      $$0$i = $28; //@line 13204
      break;
     }
    } else {
     HEAP32[$vararg_buffer >> 2] = $21; //@line 13208
     _mbed_tracef(2, 12685, 12782, $vararg_buffer); //@line 13209
     $$0$i = $21; //@line 13210
    }
   } while (0);
   $$0 = $$0$i; //@line 13213
   STACKTOP = sp; //@line 13214
   return $$0 | 0; //@line 13214
  }
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13217
 $31 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 13218
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 409; //@line 13221
  sp = STACKTOP; //@line 13222
  STACKTOP = sp; //@line 13223
  return 0; //@line 13223
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13225
 $$0 = $31; //@line 13226
 STACKTOP = sp; //@line 13227
 return $$0 | 0; //@line 13227
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_123($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28273
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28275
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28277
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28279
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28281
 if ((HEAP32[___async_retval >> 2] | 0) < ($2 | 0)) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 28286
  $10 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 28287
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 62; //@line 28290
   $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 28291
   HEAP32[$11 >> 2] = $2; //@line 28292
   $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 28293
   HEAP32[$12 >> 2] = $4; //@line 28294
   $13 = $ReallocAsyncCtx5 + 12 | 0; //@line 28295
   HEAP32[$13 >> 2] = $6; //@line 28296
   $14 = $ReallocAsyncCtx5 + 16 | 0; //@line 28297
   HEAP32[$14 >> 2] = $8; //@line 28298
   sp = STACKTOP; //@line 28299
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 28303
  ___async_unwind = 0; //@line 28304
  HEAP32[$ReallocAsyncCtx5 >> 2] = 62; //@line 28305
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 28306
  HEAP32[$11 >> 2] = $2; //@line 28307
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 28308
  HEAP32[$12 >> 2] = $4; //@line 28309
  $13 = $ReallocAsyncCtx5 + 12 | 0; //@line 28310
  HEAP32[$13 >> 2] = $6; //@line 28311
  $14 = $ReallocAsyncCtx5 + 16 | 0; //@line 28312
  HEAP32[$14 >> 2] = $8; //@line 28313
  sp = STACKTOP; //@line 28314
  return;
 } else {
  $19 = HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0; //@line 28319
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 28320
  FUNCTION_TABLE_vi[$19 & 1023]($6); //@line 28321
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 28324
   $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 28325
   HEAP32[$20 >> 2] = $4; //@line 28326
   $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 28327
   HEAP32[$21 >> 2] = $8; //@line 28328
   $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 28329
   $$expand_i1_val = 1; //@line 28330
   HEAP8[$22 >> 0] = $$expand_i1_val; //@line 28331
   sp = STACKTOP; //@line 28332
   return;
  }
  ___async_unwind = 0; //@line 28335
  HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 28336
  $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 28337
  HEAP32[$20 >> 2] = $4; //@line 28338
  $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 28339
  HEAP32[$21 >> 2] = $8; //@line 28340
  $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 28341
  $$expand_i1_val = 1; //@line 28342
  HEAP8[$22 >> 0] = $$expand_i1_val; //@line 28343
  sp = STACKTOP; //@line 28344
  return;
 }
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20934
 $6 = HEAP32[$0 + 124 >> 2] | 0; //@line 20938
 $7 = $1 + 2 | 0; //@line 20939
 $8 = HEAP8[$7 >> 0] | 0; //@line 20940
 $10 = HEAPU8[$1 >> 0] | 0; //@line 20942
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 20947
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 20950
  $27 = $15; //@line 20951
 } else {
  $27 = $8; //@line 20953
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 20959
 } else {
  $$0 = $2; //@line 20961
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 20964
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 20968
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 20978
  } else {
   $$026 = $27; //@line 20980
  }
 } else {
  $$026 = $27; //@line 20983
 }
 $34 = $0 + 4 | 0; //@line 20985
 $35 = HEAP32[$34 >> 2] | 0; //@line 20986
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 20989
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 20990
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 20991
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 523; //@line 20994
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 20996
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 20998
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 21000
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 21002
  sp = STACKTOP; //@line 21003
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21006
 $43 = HEAP32[$34 >> 2] | 0; //@line 21007
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 21010
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 21012
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21013
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 21014
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 524; //@line 21017
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 21019
  sp = STACKTOP; //@line 21020
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21023
 $50 = HEAP32[$34 >> 2] | 0; //@line 21024
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 21027
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21028
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 21029
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 525; //@line 21032
  sp = STACKTOP; //@line 21033
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21036
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_394($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30238
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30242
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30244
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30246
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30248
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30249
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 30253
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 30254
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 30255
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 320; //@line 30258
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 30259
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 30260
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 30261
   HEAP32[$15 >> 2] = $4; //@line 30262
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 30263
   HEAP32[$16 >> 2] = $6; //@line 30264
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 30265
   HEAP32[$17 >> 2] = $8; //@line 30266
   sp = STACKTOP; //@line 30267
   return;
  }
  ___async_unwind = 0; //@line 30270
  HEAP32[$ReallocAsyncCtx2 >> 2] = 320; //@line 30271
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 30272
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 30273
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 30274
  HEAP32[$15 >> 2] = $4; //@line 30275
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 30276
  HEAP32[$16 >> 2] = $6; //@line 30277
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 30278
  HEAP32[$17 >> 2] = $8; //@line 30279
  sp = STACKTOP; //@line 30280
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4; //@line 30287
  HEAP32[$8 + 2496 >> 2] = 2; //@line 30289
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 30292
 _mbed_assert_internal(11890, 11899, 778); //@line 30293
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 321; //@line 30296
  $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 30297
  HEAP32[$19 >> 2] = $4; //@line 30298
  $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 30299
  HEAP32[$20 >> 2] = $6; //@line 30300
  $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 30301
  HEAP32[$21 >> 2] = $8; //@line 30302
  sp = STACKTOP; //@line 30303
  return;
 }
 ___async_unwind = 0; //@line 30306
 HEAP32[$ReallocAsyncCtx4 >> 2] = 321; //@line 30307
 $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 30308
 HEAP32[$19 >> 2] = $4; //@line 30309
 $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 30310
 HEAP32[$20 >> 2] = $6; //@line 30311
 $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 30312
 HEAP32[$21 >> 2] = $8; //@line 30313
 sp = STACKTOP; //@line 30314
 return;
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 7259
 STACKTOP = STACKTOP + 128 | 0; //@line 7260
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 7260
 $2 = sp; //@line 7261
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7262
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 7263
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 638; //@line 7266
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 7268
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7270
  sp = STACKTOP; //@line 7271
  STACKTOP = sp; //@line 7272
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7274
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 7277
  return;
 }
 if (!(HEAP32[4847] | 0)) {
  _serial_init(19392, 2, 3); //@line 7282
  $$01213 = 0; //@line 7283
  $$014 = 0; //@line 7283
 } else {
  $$01213 = 0; //@line 7285
  $$014 = 0; //@line 7285
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 7289
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7294
   _serial_putc(19392, 13); //@line 7295
   if (___async) {
    label = 8; //@line 7298
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7301
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7304
  _serial_putc(19392, $$01213 << 24 >> 24); //@line 7305
  if (___async) {
   label = 11; //@line 7308
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7311
  $24 = $$014 + 1 | 0; //@line 7312
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 7315
   break;
  } else {
   $$014 = $24; //@line 7318
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 639; //@line 7322
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 7324
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 7326
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 7328
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 7330
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 7332
  sp = STACKTOP; //@line 7333
  STACKTOP = sp; //@line 7334
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 640; //@line 7337
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 7339
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 7341
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 7343
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 7345
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 7347
  sp = STACKTOP; //@line 7348
  STACKTOP = sp; //@line 7349
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 7352
  return;
 }
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb_88($0) {
 $0 = $0 | 0;
 var $12 = 0, $19 = 0, $2 = 0, $23 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26219
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26221
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26223
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26225
 $9 = $2 + 1964 | 0; //@line 26228
 HEAP8[$9 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 26229
 $12 = $2 + 1968 | 0; //@line 26232
 HEAP32[$12 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 26233
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 26237
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 26241
 $19 = $2 + 1982 | 0; //@line 26242
 $23 = $2 + 1984 | 0; //@line 26246
 HEAP32[$23 >> 2] = HEAP8[$19 >> 0] | 0 ? 2 : 1; //@line 26247
 HEAP8[$19 >> 0] = (HEAP32[$2 + 2380 >> 2] | 0) == 2 & 1; //@line 26252
 HEAP8[$2 + 2026 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 26256
 $30 = $2 + 4 | 0; //@line 26257
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 26258
 $31 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($30, $9) | 0; //@line 26259
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 391; //@line 26262
  $32 = $ReallocAsyncCtx2 + 4 | 0; //@line 26263
  HEAP32[$32 >> 2] = $19; //@line 26264
  $33 = $ReallocAsyncCtx2 + 8 | 0; //@line 26265
  HEAP32[$33 >> 2] = $2; //@line 26266
  $34 = $ReallocAsyncCtx2 + 12 | 0; //@line 26267
  HEAP32[$34 >> 2] = $30; //@line 26268
  $35 = $ReallocAsyncCtx2 + 16 | 0; //@line 26269
  HEAP32[$35 >> 2] = $12; //@line 26270
  $36 = $ReallocAsyncCtx2 + 20 | 0; //@line 26271
  HEAP32[$36 >> 2] = $4; //@line 26272
  $37 = $ReallocAsyncCtx2 + 24 | 0; //@line 26273
  HEAP32[$37 >> 2] = $6; //@line 26274
  $38 = $ReallocAsyncCtx2 + 28 | 0; //@line 26275
  HEAP32[$38 >> 2] = $23; //@line 26276
  sp = STACKTOP; //@line 26277
  return;
 }
 HEAP8[___async_retval >> 0] = $31 & 1; //@line 26282
 ___async_unwind = 0; //@line 26283
 HEAP32[$ReallocAsyncCtx2 >> 2] = 391; //@line 26284
 $32 = $ReallocAsyncCtx2 + 4 | 0; //@line 26285
 HEAP32[$32 >> 2] = $19; //@line 26286
 $33 = $ReallocAsyncCtx2 + 8 | 0; //@line 26287
 HEAP32[$33 >> 2] = $2; //@line 26288
 $34 = $ReallocAsyncCtx2 + 12 | 0; //@line 26289
 HEAP32[$34 >> 2] = $30; //@line 26290
 $35 = $ReallocAsyncCtx2 + 16 | 0; //@line 26291
 HEAP32[$35 >> 2] = $12; //@line 26292
 $36 = $ReallocAsyncCtx2 + 20 | 0; //@line 26293
 HEAP32[$36 >> 2] = $4; //@line 26294
 $37 = $ReallocAsyncCtx2 + 24 | 0; //@line 26295
 HEAP32[$37 >> 2] = $6; //@line 26296
 $38 = $ReallocAsyncCtx2 + 28 | 0; //@line 26297
 HEAP32[$38 >> 2] = $23; //@line 26298
 sp = STACKTOP; //@line 26299
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 31158
 }
 ret = dest | 0; //@line 31161
 dest_end = dest + num | 0; //@line 31162
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 31166
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 31167
   dest = dest + 1 | 0; //@line 31168
   src = src + 1 | 0; //@line 31169
   num = num - 1 | 0; //@line 31170
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 31172
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 31173
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 31175
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 31176
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 31177
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 31178
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 31179
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 31180
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 31181
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 31182
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 31183
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 31184
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 31185
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 31186
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 31187
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 31188
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 31189
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 31190
   dest = dest + 64 | 0; //@line 31191
   src = src + 64 | 0; //@line 31192
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 31195
   dest = dest + 4 | 0; //@line 31196
   src = src + 4 | 0; //@line 31197
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 31201
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 31203
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 31204
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 31205
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 31206
   dest = dest + 4 | 0; //@line 31207
   src = src + 4 | 0; //@line 31208
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 31213
  dest = dest + 1 | 0; //@line 31214
  src = src + 1 | 0; //@line 31215
 }
 return ret | 0; //@line 31217
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_257($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8201
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8205
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8207
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 8209
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8211
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 8213
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8215
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8217
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8219
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8221
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 8224
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8226
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 8230
   $27 = $6 + 24 | 0; //@line 8231
   $28 = $4 + 8 | 0; //@line 8232
   $29 = $6 + 54 | 0; //@line 8233
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 8263
    HEAP8[$14 >> 0] = 0; //@line 8264
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 8265
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 8266
    if (!___async) {
     ___async_unwind = 0; //@line 8269
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 684; //@line 8271
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 8273
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 8275
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 8277
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 8279
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 8281
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 8283
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 8285
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 8287
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 8289
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 8291
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 8293
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 8295
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 8297
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 8300
    sp = STACKTOP; //@line 8301
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 8306
 HEAP8[$14 >> 0] = $12; //@line 8307
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8085
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8089
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8091
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 8093
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8095
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 8097
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8099
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8101
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8103
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8105
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8107
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8109
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8111
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 8114
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 8115
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 8148
    HEAP8[$14 >> 0] = 0; //@line 8149
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 8150
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 8151
    if (!___async) {
     ___async_unwind = 0; //@line 8154
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 684; //@line 8156
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 8158
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 8160
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 8162
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 8164
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 8166
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 8168
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 8170
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 8172
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 8174
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 8176
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 8178
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 8180
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 8182
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 8185
    sp = STACKTOP; //@line 8186
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 8191
 HEAP8[$14 >> 0] = $12; //@line 8192
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $2 = 0, $20 = 0, $22 = 0, $28 = 0, $34 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12994
 $2 = $0 + 2380 | 0; //@line 12995
 do {
  if ((HEAP32[$2 >> 2] | 0) == 2) {
   if (!(HEAP8[$0 + 2377 >> 0] | 0)) {
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13004
    __ZN7LoRaMac15open_rx2_windowEv($0); //@line 13005
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 403; //@line 13008
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13010
     HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 13013
     HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 13015
     sp = STACKTOP; //@line 13016
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 13019
     break;
    }
   } else {
    label = 6; //@line 13023
   }
  } else {
   label = 6; //@line 13026
  }
 } while (0);
 do {
  if ((label | 0) == 6) {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13032
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 13033
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 404; //@line 13036
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 13038
    HEAP8[$AsyncCtx3 + 8 >> 0] = $1 & 1; //@line 13041
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 13043
    sp = STACKTOP; //@line 13044
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13047
    break;
   }
  }
 } while (0);
 $20 = (HEAP8[$0 + 1177 >> 0] | 0) != 0; //@line 13057
 if (HEAP32[$0 + 1168 >> 2] | 0) {
  if ($20) {
   $34 = $1 ? 4 : 6; //@line 13061
   HEAP32[$0 + 2056 >> 2] = $34; //@line 13062
   $$pre$phi6Z2D = $34; //@line 13063
  } else {
   $$pre$phi6Z2D = $1 ? 4 : 6; //@line 13066
  }
  HEAP32[$0 + 2092 >> 2] = $$pre$phi6Z2D; //@line 13069
  return;
 }
 if ($20) {
  $22 = $1 ? 3 : 5; //@line 13074
  HEAP32[$0 + 2056 >> 2] = $22; //@line 13075
  $$pre$phiZ2D = $22; //@line 13076
 } else {
  $$pre$phiZ2D = $1 ? 3 : 5; //@line 13079
 }
 HEAP32[$0 + 2092 >> 2] = $$pre$phiZ2D; //@line 13082
 if ((HEAP32[$2 >> 2] | 0) == 2) {
  return;
 }
 $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, HEAP32[$0 + 1780 >> 2] | 0) | 0; //@line 13090
 if ($28 >>> 0 < (HEAP32[$0 + 1776 >> 2] | 0) >>> 0) {
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13098
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 13099
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 405; //@line 13102
  sp = STACKTOP; //@line 13103
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13106
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_28($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19845
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19851
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19853
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 19855
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 19857
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 19859
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 19861
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 19863
 $19 = $6 + 12 | 0; //@line 19865
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19866
 $20 = $6 + 16 | 0; //@line 19867
 HEAP32[$20 >> 2] = $8; //@line 19868
 HEAP16[$6 + 20 >> 1] = $10; //@line 19870
 HEAP16[$6 + 22 >> 1] = $12; //@line 19872
 HEAP8[$6 + 24 >> 0] = $14; //@line 19874
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 19875
 $24 = _equeue_alloc($16, 28) | 0; //@line 19876
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 285; //@line 19879
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 19880
  HEAP32[$25 >> 2] = $19; //@line 19881
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 19882
  HEAP32[$26 >> 2] = $19; //@line 19883
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 19884
  HEAP32[$27 >> 2] = $4; //@line 19885
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 19886
  HEAP32[$28 >> 2] = $6; //@line 19887
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 19888
  HEAP32[$29 >> 2] = $18; //@line 19889
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 19890
  HEAP32[$30 >> 2] = $20; //@line 19891
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 19892
  HEAP32[$31 >> 2] = $16; //@line 19893
  sp = STACKTOP; //@line 19894
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 19898
 ___async_unwind = 0; //@line 19899
 HEAP32[$ReallocAsyncCtx7 >> 2] = 285; //@line 19900
 $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 19901
 HEAP32[$25 >> 2] = $19; //@line 19902
 $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 19903
 HEAP32[$26 >> 2] = $19; //@line 19904
 $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 19905
 HEAP32[$27 >> 2] = $4; //@line 19906
 $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 19907
 HEAP32[$28 >> 2] = $6; //@line 19908
 $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 19909
 HEAP32[$29 >> 2] = $18; //@line 19910
 $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 19911
 HEAP32[$30 >> 2] = $20; //@line 19912
 $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 19913
 HEAP32[$31 >> 2] = $16; //@line 19914
 sp = STACKTOP; //@line 19915
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2984
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2990
   _wait_ms(10); //@line 2991
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 120; //@line 2994
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2996
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2998
    sp = STACKTOP; //@line 2999
    return 0; //@line 3000
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3002
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 3008
 $9 = $0 + 156 | 0; //@line 3009
 _equeue_mutex_lock($9); //@line 3010
 $10 = $0 + 24 | 0; //@line 3011
 $11 = HEAP32[$10 >> 2] | 0; //@line 3012
 L7 : do {
  if (!$11) {
   label = 11; //@line 3016
  } else {
   $$03842$i = $10; //@line 3018
   $14 = $11; //@line 3018
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 3025
    $21 = HEAP32[$20 >> 2] | 0; //@line 3026
    if (!$21) {
     label = 11; //@line 3029
     break L7;
    } else {
     $$03842$i = $20; //@line 3032
     $14 = $21; //@line 3032
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 3036
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 3039
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 3041
    $$038$sink$i = $17 + 8 | 0; //@line 3043
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 3047
   _equeue_mutex_unlock($9); //@line 3048
   $$1$i9 = $14; //@line 3049
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 3054
   $24 = HEAP32[$23 >> 2] | 0; //@line 3055
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 3058
    $$0 = 0; //@line 3059
    return $$0 | 0; //@line 3060
   } else {
    $26 = $0 + 32 | 0; //@line 3062
    $27 = HEAP32[$26 >> 2] | 0; //@line 3063
    HEAP32[$26 >> 2] = $27 + $8; //@line 3065
    HEAP32[$23 >> 2] = $24 - $8; //@line 3067
    HEAP32[$27 >> 2] = $8; //@line 3068
    HEAP8[$27 + 4 >> 0] = 1; //@line 3070
    _equeue_mutex_unlock($9); //@line 3071
    if (!$27) {
     $$0 = 0; //@line 3074
    } else {
     $$1$i9 = $27; //@line 3076
     break;
    }
    return $$0 | 0; //@line 3079
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 3084
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 3086
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 3088
 $$0 = $$1$i9 + 36 | 0; //@line 3090
 return $$0 | 0; //@line 3091
}
function __ZN12LoRaWANStack25process_reception_timeoutEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6016
 STACKTOP = STACKTOP + 16 | 0; //@line 6017
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6017
 $vararg_buffer = sp; //@line 6018
 $2 = sp + 4 | 0; //@line 6019
 $3 = __ZN7LoRaMac16get_current_slotEv($0) | 0; //@line 6020
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 6021
 __ZN7LoRaMac19on_radio_rx_timeoutEb($0, $1); //@line 6022
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 203; //@line 6025
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 6027
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 6029
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 6031
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 6033
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 6035
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 6037
  sp = STACKTOP; //@line 6038
  STACKTOP = sp; //@line 6039
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6041
 if (($3 | 0) != 1) {
  STACKTOP = sp; //@line 6044
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  HEAP32[$2 >> 2] = 0; //@line 6048
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6049
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $2); //@line 6050
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 204; //@line 6053
   HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 6055
   sp = STACKTOP; //@line 6056
   STACKTOP = sp; //@line 6057
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6059
  STACKTOP = sp; //@line 6060
  return;
 }
 __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 6062
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1) {
   if (__ZN7LoRaMac24continue_sending_processEv($0) | 0) {
    STACKTOP = sp; //@line 6070
    return;
   } else {
    _mbed_tracef(2, 11997, 12002, $vararg_buffer); //@line 6072
    break;
   }
  }
 } while (0);
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6077
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 6078
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 205; //@line 6081
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6083
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 6085
  sp = STACKTOP; //@line 6086
  STACKTOP = sp; //@line 6087
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6089
 $20 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 6091
 HEAP32[$0 + 2496 >> 2] = $20 ? 5 : 2; //@line 6094
 STACKTOP = sp; //@line 6095
 return;
}
function __ZN7LoRaMac4joinEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i = 0, $2 = 0, $20 = 0, $27 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15285
 STACKTOP = STACKTOP + 16 | 0; //@line 15286
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15286
 $vararg_buffer = sp; //@line 15287
 $2 = sp + 5 | 0; //@line 15288
 $3 = sp + 4 | 0; //@line 15289
 if (!$1) {
  HEAP8[$0 + 2376 >> 0] = 1; //@line 15292
  $$0 = 0; //@line 15293
  STACKTOP = sp; //@line 15294
  return $$0 | 0; //@line 15294
 }
 $5 = $0 + 2084 | 0; //@line 15296
 HEAP32[$5 >> 2] = 0; //@line 15297
 HEAP32[$5 + 4 >> 2] = 0; //@line 15297
 HEAP32[$5 + 8 >> 2] = 0; //@line 15297
 HEAP32[$5 + 12 >> 2] = 0; //@line 15297
 HEAP32[$5 + 16 >> 2] = 0; //@line 15297
 HEAP32[$0 + 2092 >> 2] = 1; //@line 15299
 HEAP32[$0 + 2088 >> 2] = 0; //@line 15301
 HEAP8[$0 + 1877 >> 0] = __ZN7LoRaPHY16get_alternate_DREh($0 + 4 | 0, (HEAPU8[$0 + 1701 >> 0] | 0) + 1 & 255) | 0; //@line 15310
 HEAP8[$2 >> 0] = 0; //@line 15311
 HEAP8[$3 >> 0] = HEAP8[$0 + 1936 >> 0] << 7; //@line 15315
 HEAP8[$0 + 1180 >> 0] = 1; //@line 15317
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15318
 $20 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $2, $3, 0, 0, 0) | 0; //@line 15319
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 441; //@line 15322
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15324
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15326
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 15328
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 15330
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15332
  sp = STACKTOP; //@line 15333
  STACKTOP = sp; //@line 15334
  return 0; //@line 15334
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15336
 do {
  if (!$20) {
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15340
   $27 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15341
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 442; //@line 15344
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 15346
    HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 15348
    sp = STACKTOP; //@line 15349
    STACKTOP = sp; //@line 15350
    return 0; //@line 15350
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15352
    $$0$i = $27; //@line 15353
    break;
   }
  } else {
   HEAP32[$vararg_buffer >> 2] = $20; //@line 15357
   _mbed_tracef(2, 12685, 12782, $vararg_buffer); //@line 15358
   $$0$i = $20; //@line 15359
  }
 } while (0);
 $$0 = $$0$i; //@line 15362
 STACKTOP = sp; //@line 15363
 return $$0 | 0; //@line 15363
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$1$i$i = 0, $$1$lcssa$i$i = 0, $$18$i$i = 0, $$19$i$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $34 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $60 = 0, $63 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 13
 $8 = $0 + 25 | 0; //@line 14
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 17
 $14 = $0 + 26 | 0; //@line 20
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 25
  $$0 = 0; //@line 26
  return $$0 | 0; //@line 27
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 32
  return $$0 | 0; //@line 33
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 37
 $22 = HEAP32[$4 >> 2] | 0; //@line 38
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 41
  return $$0 | 0; //@line 42
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 49
  return $$0 | 0; //@line 50
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 52
 $34 = $0 + 88 | 0; //@line 60
 $35 = $28 & 255; //@line 61
 $36 = HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 62
 $$18$i$i = ($35 | 0) == ($36 | 0) ? $28 : $35 + 255 & 255; //@line 66
 L14 : do {
  if (($$18$i$i & 255 | 0) == ($36 | 0)) {
   $$1$lcssa$i$i = $$18$i$i; //@line 71
  } else {
   $44 = HEAPU8[$0 + 92 >> 0] | 0; //@line 75
   $$19$i$i = $$18$i$i; //@line 76
   while (1) {
    $45 = $$19$i$i << 24 >> 24; //@line 78
    if (($45 | 0) < ($44 | 0)) {
     if (HEAP8[(HEAP32[$34 >> 2] | 0) + $45 >> 0] | 0) {
      $$1$lcssa$i$i = $$19$i$i; //@line 86
      break L14;
     }
    }
    $47 = $$19$i$i & 255; //@line 90
    $$1$i$i = ($47 | 0) == ($36 | 0) ? $$19$i$i : $47 + 255 & 255; //@line 94
    if (($$1$i$i & 255 | 0) == ($36 | 0)) {
     $$1$lcssa$i$i = $$1$i$i; //@line 98
     break;
    } else {
     $$19$i$i = $$1$i$i; //@line 101
    }
   }
  }
 } while (0);
 HEAP8[$2 >> 0] = $$1$lcssa$i$i; //@line 106
 $60 = ($$1$lcssa$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 110
 if ($60 | $1 ^ 1) {
  $$0 = $60; //@line 114
  return $$0 | 0; //@line 115
 }
 $63 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 119
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 120
 FUNCTION_TABLE_vi[$63 & 1023]($0); //@line 121
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 545; //@line 124
  sp = STACKTOP; //@line 125
  return 0; //@line 126
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 128
 $$0 = 0; //@line 129
 return $$0 | 0; //@line 130
}
function __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1_($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11588
 STACKTOP = STACKTOP + 16 | 0; //@line 11589
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11589
 $7 = sp; //@line 11590
 HEAP32[$7 >> 2] = 0; //@line 11591
 $8 = HEAP8[$3 >> 0] | 0; //@line 11592
 $9 = $8 + 1 << 24 >> 24; //@line 11593
 HEAP8[$3 >> 0] = $9; //@line 11594
 $12 = HEAP8[$1 + ($8 & 255) >> 0] | 0; //@line 11597
 HEAP8[$3 >> 0] = $8 + 2 << 24 >> 24; //@line 11599
 $20 = (HEAPU8[$1 + ($9 & 255) >> 0] | 0) << 8 | $12 & 255; //@line 11606
 $21 = $2 & 65535; //@line 11607
 $22 = $21 + -4 | 0; //@line 11608
 $43 = (HEAPU8[$1 + ($21 + -3) >> 0] | 0) << 8 | (HEAPU8[$1 + $22 >> 0] | 0) | (HEAPU8[$1 + ($21 + -2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($21 + -1) >> 0] | 0) << 24; //@line 11629
 $44 = HEAP32[$5 >> 2] | 0; //@line 11630
 $47 = $20 - $44 & 65535; //@line 11633
 $48 = $47 + $44 | 0; //@line 11634
 $$ = $20 >>> 0 < ($44 & 65535) >>> 0 ? $48 + 65536 | 0 : $48; //@line 11637
 HEAP32[$5 >> 2] = $$; //@line 11638
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 11641
 __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0 + 756 | 0, $1, $22 & 65535, $6, 128, $4, 1, $$, $7) | 0; //@line 11642
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 372; //@line 11645
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 11647
  HEAP32[$AsyncCtx + 8 >> 2] = $43; //@line 11649
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 11651
  HEAP32[$AsyncCtx + 16 >> 2] = $47; //@line 11653
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 11655
  HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 11657
  sp = STACKTOP; //@line 11658
  STACKTOP = sp; //@line 11659
  return 0; //@line 11659
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11661
 if (($43 | 0) != (HEAP32[$7 >> 2] | 0)) {
  HEAP32[$0 + 2020 >> 2] = 12; //@line 11666
  $$0 = 0; //@line 11667
  STACKTOP = sp; //@line 11668
  return $$0 | 0; //@line 11668
 }
 if ($47 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0 + 4 | 0) | 0) & 65535) >>> 0) {
  $$0 = 1; //@line 11675
  STACKTOP = sp; //@line 11676
  return $$0 | 0; //@line 11676
 }
 HEAP32[$0 + 2020 >> 2] = 10; //@line 11679
 HEAP32[$0 + 2048 >> 2] = HEAP32[$5 >> 2]; //@line 11682
 $$0 = 0; //@line 11683
 STACKTOP = sp; //@line 11684
 return $$0 | 0; //@line 11684
}
function __ZN12LoRaWANStackD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $19 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 4701
 $1 = $0 + 2500 | 0; //@line 4702
 $3 = HEAP32[$0 + 2544 >> 2] | 0; //@line 4704
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 4710
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4711
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 2532 | 0); //@line 4712
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 153; //@line 4715
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4717
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 4719
    sp = STACKTOP; //@line 4720
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4723
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 2528 >> 2] | 0; //@line 4729
 do {
  if ($11 | 0) {
   $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 4735
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4736
   FUNCTION_TABLE_vi[$15 & 1023]($0 + 2516 | 0); //@line 4737
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 154; //@line 4740
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 4742
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 4744
    sp = STACKTOP; //@line 4745
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4748
    break;
   }
  }
 } while (0);
 $19 = HEAP32[$0 + 2512 >> 2] | 0; //@line 4754
 do {
  if ($19 | 0) {
   $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 4759
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4760
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 4761
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 155; //@line 4764
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4766
    sp = STACKTOP; //@line 4767
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4770
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4776
 __ZN12radio_eventsD2Ev($0 + 2384 | 0); //@line 4777
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 156; //@line 4780
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 4782
  sp = STACKTOP; //@line 4783
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 4786
 $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4787
 __ZN7LoRaMacD2Ev($0); //@line 4788
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 157; //@line 4791
  sp = STACKTOP; //@line 4792
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx10 | 0); //@line 4795
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb_96($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 26769
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26771
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26773
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26775
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26777
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26779
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26781
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26783
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26785
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26787
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26789
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26791
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26793
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26795
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26797
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26799
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 26803
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 26805
 $39 = HEAP32[(HEAP32[HEAP32[$0 + 64 >> 2] >> 2] | 0) + 24 >> 2] | 0; //@line 26808
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(72) | 0; //@line 26809
 $40 = _mbedtls_cipher_update($22, $30, $39, $30, $34) | 0; //@line 26810
 if (!___async) {
  HEAP32[___async_retval >> 2] = $40; //@line 26814
  ___async_unwind = 0; //@line 26815
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 587; //@line 26817
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $26; //@line 26819
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $6; //@line 26821
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $2; //@line 26823
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $12; //@line 26825
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $4; //@line 26827
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $8; //@line 26829
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $10; //@line 26831
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $14; //@line 26833
 HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $16; //@line 26835
 HEAP32[$ReallocAsyncCtx10 + 40 >> 2] = $18; //@line 26837
 HEAP32[$ReallocAsyncCtx10 + 44 >> 2] = $20; //@line 26839
 HEAP32[$ReallocAsyncCtx10 + 48 >> 2] = $22; //@line 26841
 HEAP32[$ReallocAsyncCtx10 + 52 >> 2] = $24; //@line 26843
 HEAP32[$ReallocAsyncCtx10 + 56 >> 2] = $28; //@line 26845
 HEAP32[$ReallocAsyncCtx10 + 60 >> 2] = $30; //@line 26847
 HEAP32[$ReallocAsyncCtx10 + 64 >> 2] = $39; //@line 26849
 HEAP32[$ReallocAsyncCtx10 + 68 >> 2] = $36; //@line 26851
 sp = STACKTOP; //@line 26852
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEhj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$079$i = 0, $$1 = 0, $11 = 0, $13 = 0, $20 = 0, $25 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20405
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$0 = 0; //@line 20410
  return $$0 | 0; //@line 20411
 }
 $6 = $0 + 76 | 0; //@line 20413
 L4 : do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $25 = -1; //@line 20418
  } else {
   $$079$i = 0; //@line 20420
   while (1) {
    $11 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 20424
    $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 20426
    $13 = FUNCTION_TABLE_iiii[$11 & 31]($0, $2, $$079$i & 255) | 0; //@line 20427
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 20432
    if ($13) {
     $25 = $$079$i; //@line 20434
     break L4;
    }
    $20 = $$079$i + 1 | 0; //@line 20437
    if (($20 | 0) < (HEAPU8[$6 >> 0] | 0)) {
     $$079$i = $20; //@line 20442
    } else {
     $25 = -1; //@line 20444
     break L4;
    }
   }
   HEAP32[$AsyncCtx >> 2] = 520; //@line 20448
   HEAP32[$AsyncCtx + 4 >> 2] = $$079$i; //@line 20450
   HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 20452
   HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 20454
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 20456
   HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 20458
   HEAP8[$AsyncCtx + 24 >> 0] = $1; //@line 20460
   sp = STACKTOP; //@line 20461
   return 0; //@line 20462
  }
 } while (0);
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 20468
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 20469
 $29 = FUNCTION_TABLE_iiii[$28 & 31]($0, $2, $25 & 255) | 0; //@line 20470
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 521; //@line 20473
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 20475
  HEAP8[$AsyncCtx2 + 8 >> 0] = $1; //@line 20477
  HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 20479
  sp = STACKTOP; //@line 20480
  return 0; //@line 20481
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20483
 $$ = $29 ? 3 : 2; //@line 20484
 $34 = HEAP32[$0 + 124 >> 2] | 0; //@line 20486
 $35 = $1 & 255; //@line 20487
 $$1 = (HEAP32[$34 + ($35 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 20492
 if ($$1 << 24 >> 24 != 3) {
  $$0 = $$1; //@line 20495
  return $$0 | 0; //@line 20496
 }
 HEAP32[$34 + ($35 * 12 | 0) + 4 >> 2] = $2; //@line 20499
 $$0 = 3; //@line 20500
 return $$0 | 0; //@line 20501
}
function __ZN7LoRaMac11schedule_txEv__async_cb_77($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $31 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25335
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25337
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25339
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25341
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 25343
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25345
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25347
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25349
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25351
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25353
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25355
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25357
 HEAP32[$2 + 2092 >> 2] = 1; //@line 25359
 HEAP32[$2 + 2056 >> 2] = 1; //@line 25361
 HEAP8[$2 + 2060 >> 0] = HEAP8[$4 >> 0] | 0; //@line 25364
 HEAP8[$2 + 2061 >> 0] = HEAP8[$6 >> 0] | 0; //@line 25367
 HEAP32[$2 + 2072 >> 2] = $8 & 255; //@line 25370
 $31 = HEAP32[$10 >> 2] | 0; //@line 25371
 HEAP32[$2 + 2064 >> 2] = $31; //@line 25373
 HEAP32[$2 + 2096 >> 2] = $31; //@line 25375
 if (!(HEAP8[$12 >> 0] | 0)) {
  $36 = $2 + 1701 | 0; //@line 25379
  HEAP8[$36 >> 0] = (HEAP8[$36 >> 0] | 0) + 1 << 24 >> 24; //@line 25382
 }
 $41 = HEAP16[$14 >> 1] & 255; //@line 25386
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 25387
 __ZN7LoRaPHY11handle_sendEPhh($16, $2 + 1185 | 0, $41); //@line 25388
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 417; //@line 25391
  $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 25392
  HEAP32[$42 >> 2] = $6; //@line 25393
  $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 25394
  HEAP32[$43 >> 2] = $18; //@line 25395
  $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 25396
  HEAP32[$44 >> 2] = $20; //@line 25397
  $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 25398
  HEAP32[$45 >> 2] = $22; //@line 25399
  sp = STACKTOP; //@line 25400
  return;
 }
 ___async_unwind = 0; //@line 25403
 HEAP32[$ReallocAsyncCtx2 >> 2] = 417; //@line 25404
 $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 25405
 HEAP32[$42 >> 2] = $6; //@line 25406
 $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 25407
 HEAP32[$43 >> 2] = $18; //@line 25408
 $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 25409
 HEAP32[$44 >> 2] = $20; //@line 25410
 $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 25411
 HEAP32[$45 >> 2] = $22; //@line 25412
 sp = STACKTOP; //@line 25413
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16216
 STACKTOP = STACKTOP + 64 | 0; //@line 16217
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16217
 $3 = sp; //@line 16218
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 16221
 } else {
  if (!$1) {
   $$2 = 0; //@line 16225
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16227
   $6 = ___dynamic_cast($1, 400, 384, 0) | 0; //@line 16228
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 673; //@line 16231
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 16233
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16235
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 16237
    sp = STACKTOP; //@line 16238
    STACKTOP = sp; //@line 16239
    return 0; //@line 16239
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16241
   if (!$6) {
    $$2 = 0; //@line 16244
   } else {
    dest = $3 + 4 | 0; //@line 16247
    stop = dest + 52 | 0; //@line 16247
    do {
     HEAP32[dest >> 2] = 0; //@line 16247
     dest = dest + 4 | 0; //@line 16247
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 16248
    HEAP32[$3 + 8 >> 2] = $0; //@line 16250
    HEAP32[$3 + 12 >> 2] = -1; //@line 16252
    HEAP32[$3 + 48 >> 2] = 1; //@line 16254
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 16257
    $18 = HEAP32[$2 >> 2] | 0; //@line 16258
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16259
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 16260
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 674; //@line 16263
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16265
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16267
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 16269
     sp = STACKTOP; //@line 16270
     STACKTOP = sp; //@line 16271
     return 0; //@line 16271
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16273
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 16280
     $$0 = 1; //@line 16281
    } else {
     $$0 = 0; //@line 16283
    }
    $$2 = $$0; //@line 16285
   }
  }
 }
 STACKTOP = sp; //@line 16289
 return $$2 | 0; //@line 16289
}
function __ZN12LoRaWANStackD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 19453
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19455
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19457
 $6 = HEAP32[$2 + 2528 >> 2] | 0; //@line 19459
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 19464
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 19465
  FUNCTION_TABLE_vi[$10 & 1023]($2 + 2516 | 0); //@line 19466
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 154; //@line 19469
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 19470
   HEAP32[$11 >> 2] = $2; //@line 19471
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 19472
   HEAP32[$12 >> 2] = $4; //@line 19473
   sp = STACKTOP; //@line 19474
   return;
  }
  ___async_unwind = 0; //@line 19477
  HEAP32[$ReallocAsyncCtx2 >> 2] = 154; //@line 19478
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 19479
  HEAP32[$11 >> 2] = $2; //@line 19480
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 19481
  HEAP32[$12 >> 2] = $4; //@line 19482
  sp = STACKTOP; //@line 19483
  return;
 }
 $14 = HEAP32[$2 + 2512 >> 2] | 0; //@line 19487
 if (!$14) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19491
  __ZN12radio_eventsD2Ev($2 + 2384 | 0); //@line 19492
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 156; //@line 19495
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 19496
   HEAP32[$20 >> 2] = $2; //@line 19497
   sp = STACKTOP; //@line 19498
   return;
  }
  ___async_unwind = 0; //@line 19501
  HEAP32[$ReallocAsyncCtx5 >> 2] = 156; //@line 19502
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 19503
  HEAP32[$20 >> 2] = $2; //@line 19504
  sp = STACKTOP; //@line 19505
  return;
 } else {
  $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 19509
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 19510
  FUNCTION_TABLE_vi[$17 & 1023]($4); //@line 19511
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 19514
   $18 = $ReallocAsyncCtx3 + 4 | 0; //@line 19515
   HEAP32[$18 >> 2] = $2; //@line 19516
   sp = STACKTOP; //@line 19517
   return;
  }
  ___async_unwind = 0; //@line 19520
  HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 19521
  $18 = $ReallocAsyncCtx3 + 4 | 0; //@line 19522
  HEAP32[$18 >> 2] = $2; //@line 19523
  sp = STACKTOP; //@line 19524
  return;
 }
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $21 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5765
 STACKTOP = STACKTOP + 16 | 0; //@line 5766
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5766
 $5 = sp; //@line 5767
 $6 = $0 + 2911 | 0; //@line 5768
 if (($2 & 65535) > 255 | (HEAP8[$6 >> 0] | 0) == 0) {
  STACKTOP = sp; //@line 5774
  return;
 }
 HEAP8[$6 >> 0] = 0; //@line 5777
 $11 = $0 + 2912 | 0; //@line 5778
 _memcpy($11 | 0, $1 | 0, $2 & 65535 | 0) | 0; //@line 5779
 $13 = HEAP32[$0 + 3168 >> 2] | 0; //@line 5781
 $14 = $5 + 12 | 0; //@line 5782
 HEAP32[$5 >> 2] = 7; //@line 5783
 HEAP32[$5 + 4 >> 2] = 0; //@line 5785
 HEAP32[$5 + 8 >> 2] = $0; //@line 5787
 HEAP32[$14 >> 2] = 836; //@line 5788
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5789
 $15 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3_($13, $5, $11, $2, $3, $4) | 0; //@line 5790
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 191; //@line 5793
  HEAP32[$AsyncCtx3 + 4 >> 2] = $14; //@line 5795
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 5797
  sp = STACKTOP; //@line 5798
  STACKTOP = sp; //@line 5799
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5801
 $18 = HEAP32[$14 >> 2] | 0; //@line 5802
 do {
  if ($18 | 0) {
   $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 5807
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5808
   FUNCTION_TABLE_vi[$21 & 1023]($5); //@line 5809
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 192; //@line 5812
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 5814
    HEAP32[$AsyncCtx + 8 >> 2] = $15; //@line 5816
    sp = STACKTOP; //@line 5817
    STACKTOP = sp; //@line 5818
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5820
    break;
   }
  }
 } while (0);
 if ($15 | 0) {
  STACKTOP = sp; //@line 5827
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5829
 _mbed_assert_internal(11890, 11899, 525); //@line 5830
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 193; //@line 5833
  sp = STACKTOP; //@line 5834
  STACKTOP = sp; //@line 5835
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5837
 STACKTOP = sp; //@line 5838
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_260($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8548
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8550
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8552
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8554
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8556
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8558
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8560
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8562
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8564
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2092 >> 2] = 13; //@line 8570
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 1442) >> 0] | 0) << 8 | (HEAPU8[$2 + 1442 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 1442) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 1442) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[$2 + 2092 >> 2] = 7; //@line 8598
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 8602
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 8603
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 369; //@line 8606
  $44 = $ReallocAsyncCtx5 + 4 | 0; //@line 8607
  HEAP32[$44 >> 2] = $12; //@line 8608
  $45 = $ReallocAsyncCtx5 + 8 | 0; //@line 8609
  HEAP32[$45 >> 2] = $2; //@line 8610
  $46 = $ReallocAsyncCtx5 + 12 | 0; //@line 8611
  HEAP32[$46 >> 2] = $14; //@line 8612
  $47 = $ReallocAsyncCtx5 + 16 | 0; //@line 8613
  HEAP32[$47 >> 2] = $16; //@line 8614
  $48 = $ReallocAsyncCtx5 + 20 | 0; //@line 8615
  HEAP32[$48 >> 2] = $6; //@line 8616
  $49 = $ReallocAsyncCtx5 + 24 | 0; //@line 8617
  HEAP32[$49 >> 2] = $10; //@line 8618
  sp = STACKTOP; //@line 8619
  return;
 }
 ___async_unwind = 0; //@line 8622
 HEAP32[$ReallocAsyncCtx5 >> 2] = 369; //@line 8623
 $44 = $ReallocAsyncCtx5 + 4 | 0; //@line 8624
 HEAP32[$44 >> 2] = $12; //@line 8625
 $45 = $ReallocAsyncCtx5 + 8 | 0; //@line 8626
 HEAP32[$45 >> 2] = $2; //@line 8627
 $46 = $ReallocAsyncCtx5 + 12 | 0; //@line 8628
 HEAP32[$46 >> 2] = $14; //@line 8629
 $47 = $ReallocAsyncCtx5 + 16 | 0; //@line 8630
 HEAP32[$47 >> 2] = $16; //@line 8631
 $48 = $ReallocAsyncCtx5 + 20 | 0; //@line 8632
 HEAP32[$48 >> 2] = $6; //@line 8633
 $49 = $ReallocAsyncCtx5 + 24 | 0; //@line 8634
 HEAP32[$49 >> 2] = $10; //@line 8635
 sp = STACKTOP; //@line 8636
 return;
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 15726
 STACKTOP = STACKTOP + 128 | 0; //@line 15727
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 15727
 $4 = sp + 124 | 0; //@line 15728
 $5 = sp; //@line 15729
 dest = $5; //@line 15730
 src = 10768; //@line 15730
 stop = dest + 124 | 0; //@line 15730
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 15730
  dest = dest + 4 | 0; //@line 15730
  src = src + 4 | 0; //@line 15730
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 15736
   $$015 = 1; //@line 15736
   label = 4; //@line 15737
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 15740
   $$0 = -1; //@line 15741
  }
 } else {
  $$014 = $0; //@line 15744
  $$015 = $1; //@line 15744
  label = 4; //@line 15745
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 15749
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 15751
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 15753
  $14 = $5 + 20 | 0; //@line 15754
  HEAP32[$14 >> 2] = $$014; //@line 15755
  HEAP32[$5 + 44 >> 2] = $$014; //@line 15757
  $16 = $$014 + $$$015 | 0; //@line 15758
  $17 = $5 + 16 | 0; //@line 15759
  HEAP32[$17 >> 2] = $16; //@line 15760
  HEAP32[$5 + 28 >> 2] = $16; //@line 15762
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15763
  $19 = _vfprintf($5, $2, $3) | 0; //@line 15764
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 665; //@line 15767
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 15769
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 15771
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 15773
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 15775
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 15777
   sp = STACKTOP; //@line 15778
   STACKTOP = sp; //@line 15779
   return 0; //@line 15779
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15781
  if (!$$$015) {
   $$0 = $19; //@line 15784
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 15786
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 15791
   $$0 = $19; //@line 15792
  }
 }
 STACKTOP = sp; //@line 15795
 return $$0 | 0; //@line 15795
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27620
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 27622
 $7 = $4 + 156 | 0; //@line 27623
 _equeue_mutex_lock($7); //@line 27624
 $8 = $4 + 24 | 0; //@line 27625
 $9 = HEAP32[$8 >> 2] | 0; //@line 27626
 L3 : do {
  if (!$9) {
   label = 9; //@line 27630
  } else {
   $$03842$i = $8; //@line 27632
   $12 = $9; //@line 27632
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 27639
    $19 = HEAP32[$18 >> 2] | 0; //@line 27640
    if (!$19) {
     label = 9; //@line 27643
     break L3;
    } else {
     $$03842$i = $18; //@line 27646
     $12 = $19; //@line 27646
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 27650
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 27653
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 27655
    $$038$sink$i = $15 + 8 | 0; //@line 27657
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 27661
   _equeue_mutex_unlock($7); //@line 27662
   $$1$i9 = $12; //@line 27663
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 27668
   $22 = HEAP32[$21 >> 2] | 0; //@line 27669
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 27672
    $$0 = 0; //@line 27673
    $34 = ___async_retval; //@line 27674
    HEAP32[$34 >> 2] = $$0; //@line 27675
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 27678
    $25 = HEAP32[$24 >> 2] | 0; //@line 27679
    HEAP32[$24 >> 2] = $25 + $6; //@line 27681
    HEAP32[$21 >> 2] = $22 - $6; //@line 27683
    HEAP32[$25 >> 2] = $6; //@line 27684
    HEAP8[$25 + 4 >> 0] = 1; //@line 27686
    _equeue_mutex_unlock($7); //@line 27687
    if (!$25) {
     $$0 = 0; //@line 27690
    } else {
     $$1$i9 = $25; //@line 27692
     break;
    }
    $34 = ___async_retval; //@line 27695
    HEAP32[$34 >> 2] = $$0; //@line 27696
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 27702
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 27704
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 27706
 $$0 = $$1$i9 + 36 | 0; //@line 27708
 $34 = ___async_retval; //@line 27709
 HEAP32[$34 >> 2] = $$0; //@line 27710
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17548
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 17554
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 17558
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 17559
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17560
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 17561
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 690; //@line 17564
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 17566
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17568
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 17570
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 17572
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 17574
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 17576
    sp = STACKTOP; //@line 17577
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17580
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 17584
    $$0 = $0 + 24 | 0; //@line 17585
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17587
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 17588
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17593
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 17599
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 17602
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 691; //@line 17607
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 17609
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 17611
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 17613
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 17615
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 17617
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 17619
    sp = STACKTOP; //@line 17620
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack20process_transmissionEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $30 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2498
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2500
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2502
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2504
 HEAP8[$2 + 2895 >> 0] = 0; //@line 2508
 HEAP32[$2 + 2888 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 20 >> 2]; //@line 2513
 HEAP8[$2 + 2893 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 8 >> 0] | 0; //@line 2518
 HEAP8[$2 + 2892 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 9 >> 0] | 0; //@line 2523
 HEAP32[$2 + 2884 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 12 >> 2]; //@line 2528
 HEAP8[$2 + 2894 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 11 >> 0] | 0; //@line 2533
 $30 = $2 + 2496 | 0; //@line 2534
 switch (HEAP32[$30 >> 2] | 0) {
 case 1:
  {
   HEAP32[$30 >> 2] = 4; //@line 2538
   return;
  }
 case 8:
  {
   $34 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) >> 2] | 0) == 1; //@line 2545
   $35 = $2 + 2904 | 0; //@line 2546
   $37 = HEAP32[$35 >> 2] & -18; //@line 2548
   if ($34) {
    HEAP32[$35 >> 2] = $37 | 1; //@line 2551
    _mbed_tracef(16, 11997, 12370, $6); //@line 2552
    HEAP32[$30 >> 2] = 9; //@line 2553
    return;
   }
   HEAP32[$35 >> 2] = $37 | 16; //@line 2557
   if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
    return;
   }
   __ZN7LoRaMac21post_process_mcps_reqEv($4); //@line 2563
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 2564
   __ZN12LoRaWANStack26process_status_check_stateEv($2); //@line 2565
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 327; //@line 2568
    $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 2569
    HEAP32[$42 >> 2] = $4; //@line 2570
    $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 2571
    HEAP32[$43 >> 2] = $30; //@line 2572
    sp = STACKTOP; //@line 2573
    return;
   }
   ___async_unwind = 0; //@line 2576
   HEAP32[$ReallocAsyncCtx2 >> 2] = 327; //@line 2577
   $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 2578
   HEAP32[$42 >> 2] = $4; //@line 2579
   $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 2580
   HEAP32[$43 >> 2] = $30; //@line 2581
   sp = STACKTOP; //@line 2582
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_253($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 7940
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7942
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7946
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7948
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7950
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 7952
 $$pr = HEAP32[$2 >> 2] | 0; //@line 7953
 if (!$$pr) {
  $17 = $8 + 12 | 0; //@line 7956
  HEAP32[$17 >> 2] = 0; //@line 7957
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 7958
  __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $8); //@line 7959
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 345; //@line 7962
   $18 = $ReallocAsyncCtx9 + 4 | 0; //@line 7963
   HEAP32[$18 >> 2] = $17; //@line 7964
   $19 = $ReallocAsyncCtx9 + 8 | 0; //@line 7965
   HEAP32[$19 >> 2] = $8; //@line 7966
   sp = STACKTOP; //@line 7967
   return;
  }
  ___async_unwind = 0; //@line 7970
  HEAP32[$ReallocAsyncCtx9 >> 2] = 345; //@line 7971
  $18 = $ReallocAsyncCtx9 + 4 | 0; //@line 7972
  HEAP32[$18 >> 2] = $17; //@line 7973
  $19 = $ReallocAsyncCtx9 + 8 | 0; //@line 7974
  HEAP32[$19 >> 2] = $8; //@line 7975
  sp = STACKTOP; //@line 7976
  return;
 } else {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 7980
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 7981
  FUNCTION_TABLE_vii[$13 & 15]($8, $10); //@line 7982
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 7985
   $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 7986
   HEAP32[$14 >> 2] = $2; //@line 7987
   $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 7988
   HEAP32[$15 >> 2] = $6; //@line 7989
   $16 = $ReallocAsyncCtx7 + 12 | 0; //@line 7990
   HEAP32[$16 >> 2] = $8; //@line 7991
   sp = STACKTOP; //@line 7992
   return;
  }
  ___async_unwind = 0; //@line 7995
  HEAP32[$ReallocAsyncCtx7 >> 2] = 344; //@line 7996
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 7997
  HEAP32[$14 >> 2] = $2; //@line 7998
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 7999
  HEAP32[$15 >> 2] = $6; //@line 8000
  $16 = $ReallocAsyncCtx7 + 12 | 0; //@line 8001
  HEAP32[$16 >> 2] = $8; //@line 8002
  sp = STACKTOP; //@line 8003
  return;
 }
}
function __ZN7LoRaMacD2Ev__async_cb_397($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30603
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30605
 $4 = HEAP32[$2 + 1828 >> 2] | 0; //@line 30607
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 30612
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 30613
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1816 | 0); //@line 30614
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 30617
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 30618
   HEAP32[$9 >> 2] = $2; //@line 30619
   sp = STACKTOP; //@line 30620
   return;
  }
  ___async_unwind = 0; //@line 30623
  HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 30624
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 30625
  HEAP32[$9 >> 2] = $2; //@line 30626
  sp = STACKTOP; //@line 30627
  return;
 }
 $11 = HEAP32[$2 + 1808 >> 2] | 0; //@line 30631
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 30636
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30637
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1796 | 0); //@line 30638
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 30641
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 30642
   HEAP32[$16 >> 2] = $2; //@line 30643
   sp = STACKTOP; //@line 30644
   return;
  }
  ___async_unwind = 0; //@line 30647
  HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 30648
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 30649
  HEAP32[$16 >> 2] = $2; //@line 30650
  sp = STACKTOP; //@line 30651
  return;
 }
 $18 = HEAP32[$2 + 748 >> 2] | 0; //@line 30655
 if (!$18) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 30659
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 30664
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30665
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 736 | 0); //@line 30666
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 30669
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 30670
  HEAP32[$23 >> 2] = $2; //@line 30671
  sp = STACKTOP; //@line 30672
  return;
 }
 ___async_unwind = 0; //@line 30675
 HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 30676
 $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 30677
 HEAP32[$23 >> 2] = $2; //@line 30678
 sp = STACKTOP; //@line 30679
 return;
}
function _mbedtls_cipher_cmac_update__async_cb_54($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22737
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22739
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22741
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22743
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22745
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22747
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22749
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22751
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22753
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22755
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22757
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22759
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 22762
  $42 = ___async_retval; //@line 22763
  HEAP32[$42 >> 2] = $$0; //@line 22764
  return;
 }
 $24 = $2 + 1 | 0; //@line 22767
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 22770
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 22771
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 22775
   ___async_unwind = 0; //@line 22776
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 582; //@line 22778
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 22780
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 22782
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 22784
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 22786
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 22788
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 22790
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 22792
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 22794
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 22796
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 22798
  sp = STACKTOP; //@line 22799
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 22804
  $42 = ___async_retval; //@line 22805
  HEAP32[$42 >> 2] = $$0; //@line 22806
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 22811
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 22814
 $$0 = 0; //@line 22815
 $42 = ___async_retval; //@line 22816
 HEAP32[$42 >> 2] = $$0; //@line 22817
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 9554
 STACKTOP = STACKTOP + 16 | 0; //@line 9555
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9555
 $vararg_buffer1 = sp + 8 | 0; //@line 9556
 $vararg_buffer = sp; //@line 9557
 $2 = $0 + 2496 | 0; //@line 9558
 switch (HEAP32[$2 >> 2] | 0) {
 case 11:
 case 2:
  {
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = -1e3; //@line 9565
   STACKTOP = sp; //@line 9566
   return;
  }
 }
 $5 = HEAP32[$0 + 2904 >> 2] | 0; //@line 9570
 if ($5 & 4 | 0) {
  _mbed_tracef(16, 11997, 12406, $vararg_buffer); //@line 9574
  HEAP32[$1 >> 2] = 0; //@line 9575
  STACKTOP = sp; //@line 9576
  return;
 }
 HEAP32[$2 >> 2] = 3; //@line 9578
 if ($5 & 8 | 0) {
  $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9582
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $1); //@line 9583
  if (___async) {
   HEAP32[$AsyncCtx8 >> 2] = 329; //@line 9586
   sp = STACKTOP; //@line 9587
   STACKTOP = sp; //@line 9588
   return;
  }
  _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9590
  STACKTOP = sp; //@line 9591
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9593
 $10 = __ZN7LoRaMac4joinEb($0, 0) | 0; //@line 9594
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 330; //@line 9597
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 9599
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 9601
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 9603
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 9605
  sp = STACKTOP; //@line 9606
  STACKTOP = sp; //@line 9607
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9609
 HEAP32[$1 >> 2] = $10; //@line 9610
 _mbed_tracef(16, 11997, 12424, $vararg_buffer1); //@line 9611
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9612
 __ZN12LoRaWANStack23process_connected_stateEv($0); //@line 9613
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 331; //@line 9616
  sp = STACKTOP; //@line 9617
  STACKTOP = sp; //@line 9618
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 9620
 STACKTOP = sp; //@line 9621
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_97($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26860
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26862
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26864
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26866
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26868
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26870
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26872
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26874
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26876
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26878
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26880
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26882
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26884
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26886
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26888
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26890
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26892
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(76) | 0; //@line 26893
 _mbedtls_platform_zeroize($32, 16); //@line 26894
 if (!___async) {
  ___async_unwind = 0; //@line 26897
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 586; //@line 26899
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 26901
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 26903
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 26905
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 26907
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 26909
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 26911
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 26913
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 26915
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 26917
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 26919
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 26921
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 26923
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 26925
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $30; //@line 26927
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $32; //@line 26929
 HEAP32[$ReallocAsyncCtx6 + 64 >> 2] = $28; //@line 26931
 HEAP32[$ReallocAsyncCtx6 + 68 >> 2] = $30; //@line 26933
 HEAP32[$ReallocAsyncCtx6 + 72 >> 2] = $32; //@line 26935
 sp = STACKTOP; //@line 26936
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_32($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20026
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20030
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20032
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20034
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20036
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20037
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 20041
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 20042
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 20043
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 20046
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 20047
   HEAP32[$14 >> 2] = $4; //@line 20048
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 20049
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 20050
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 20051
   HEAP32[$16 >> 2] = $8; //@line 20052
   sp = STACKTOP; //@line 20053
   return;
  }
  ___async_unwind = 0; //@line 20056
  HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 20057
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 20058
  HEAP32[$14 >> 2] = $4; //@line 20059
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 20060
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 20061
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 20062
  HEAP32[$16 >> 2] = $8; //@line 20063
  sp = STACKTOP; //@line 20064
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 20067
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 20071
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 20075
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20076
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 20077
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 20080
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 20081
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 20082
  sp = STACKTOP; //@line 20083
  return;
 }
 ___async_unwind = 0; //@line 20086
 HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 20087
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 20088
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 20089
 sp = STACKTOP; //@line 20090
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_83($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25706
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25710
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25712
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25714
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25716
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25717
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 25721
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 25722
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 25723
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 25726
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 25727
   HEAP32[$14 >> 2] = $4; //@line 25728
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 25729
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 25730
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 25731
   HEAP32[$16 >> 2] = $8; //@line 25732
   sp = STACKTOP; //@line 25733
   return;
  }
  ___async_unwind = 0; //@line 25736
  HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 25737
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 25738
  HEAP32[$14 >> 2] = $4; //@line 25739
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 25740
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 25741
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 25742
  HEAP32[$16 >> 2] = $8; //@line 25743
  sp = STACKTOP; //@line 25744
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 25747
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 25751
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 25755
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 25756
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 25757
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 25760
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 25761
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 25762
  sp = STACKTOP; //@line 25763
  return;
 }
 ___async_unwind = 0; //@line 25766
 HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 25767
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 25768
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 25769
 sp = STACKTOP; //@line 25770
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_388($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29752
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29756
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29758
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29760
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29762
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29763
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 29767
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 29768
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 29769
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 316; //@line 29772
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 29773
   HEAP32[$14 >> 2] = $4; //@line 29774
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 29775
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 29776
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 29777
   HEAP32[$16 >> 2] = $8; //@line 29778
   sp = STACKTOP; //@line 29779
   return;
  }
  ___async_unwind = 0; //@line 29782
  HEAP32[$ReallocAsyncCtx4 >> 2] = 316; //@line 29783
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 29784
  HEAP32[$14 >> 2] = $4; //@line 29785
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 29786
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 29787
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 29788
  HEAP32[$16 >> 2] = $8; //@line 29789
  sp = STACKTOP; //@line 29790
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 29793
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29797
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 29801
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29802
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 29803
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 317; //@line 29806
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 29807
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 29808
  sp = STACKTOP; //@line 29809
  return;
 }
 ___async_unwind = 0; //@line 29812
 HEAP32[$ReallocAsyncCtx5 >> 2] = 317; //@line 29813
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 29814
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 29815
 sp = STACKTOP; //@line 29816
 return;
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 11715
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 11718
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 11721
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 11724
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 11730
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 11739
     $24 = $13 >>> 2; //@line 11740
     $$090 = 0; //@line 11741
     $$094 = $7; //@line 11741
     while (1) {
      $25 = $$094 >>> 1; //@line 11743
      $26 = $$090 + $25 | 0; //@line 11744
      $27 = $26 << 1; //@line 11745
      $28 = $27 + $23 | 0; //@line 11746
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 11749
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11753
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 11759
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 11767
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 11771
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 11777
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 11782
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 11785
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 11785
      }
     }
     $46 = $27 + $24 | 0; //@line 11788
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 11791
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11795
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 11807
     } else {
      $$4 = 0; //@line 11809
     }
    } else {
     $$4 = 0; //@line 11812
    }
   } else {
    $$4 = 0; //@line 11815
   }
  } else {
   $$4 = 0; //@line 11818
  }
 } while (0);
 return $$4 | 0; //@line 11821
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_382($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29228
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29232
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29234
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29236
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29238
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29239
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 29243
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 29244
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 29245
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 213; //@line 29248
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 29249
   HEAP32[$14 >> 2] = $4; //@line 29250
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 29251
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 29252
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 29253
   HEAP32[$16 >> 2] = $8; //@line 29254
   sp = STACKTOP; //@line 29255
   return;
  }
  ___async_unwind = 0; //@line 29258
  HEAP32[$ReallocAsyncCtx4 >> 2] = 213; //@line 29259
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 29260
  HEAP32[$14 >> 2] = $4; //@line 29261
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 29262
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 29263
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 29264
  HEAP32[$16 >> 2] = $8; //@line 29265
  sp = STACKTOP; //@line 29266
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 29269
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29273
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 29277
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29278
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 29279
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 214; //@line 29282
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 29283
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 29284
  sp = STACKTOP; //@line 29285
  return;
 }
 ___async_unwind = 0; //@line 29288
 HEAP32[$ReallocAsyncCtx5 >> 2] = 214; //@line 29289
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 29290
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 29291
 sp = STACKTOP; //@line 29292
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_300($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22350
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22354
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22356
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22358
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22359
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 22363
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 22364
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 22365
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 223; //@line 22368
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 22369
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 22370
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 22371
   HEAP32[$13 >> 2] = $4; //@line 22372
   $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 22373
   HEAP32[$14 >> 2] = $6; //@line 22374
   sp = STACKTOP; //@line 22375
   return;
  }
  ___async_unwind = 0; //@line 22378
  HEAP32[$ReallocAsyncCtx2 >> 2] = 223; //@line 22379
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 22380
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 22381
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 22382
  HEAP32[$13 >> 2] = $4; //@line 22383
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 22384
  HEAP32[$14 >> 2] = $6; //@line 22385
  sp = STACKTOP; //@line 22386
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 2; //@line 22391
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 22394
 _mbed_assert_internal(11890, 11899, 778); //@line 22395
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 224; //@line 22398
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 22399
  HEAP32[$16 >> 2] = $4; //@line 22400
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 22401
  HEAP32[$17 >> 2] = $6; //@line 22402
  sp = STACKTOP; //@line 22403
  return;
 }
 ___async_unwind = 0; //@line 22406
 HEAP32[$ReallocAsyncCtx6 >> 2] = 224; //@line 22407
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 22408
 HEAP32[$16 >> 2] = $4; //@line 22409
 $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 22410
 HEAP32[$17 >> 2] = $6; //@line 22411
 sp = STACKTOP; //@line 22412
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25235
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25239
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25241
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25243
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25245
 $12 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 25247
 if ($AsyncRetVal | 0) {
  $30 = $AsyncRetVal; //@line 25249
  $29 = ___async_retval; //@line 25250
  HEAP32[$29 >> 2] = $30; //@line 25251
  return;
 }
 if (($12 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $30 = 0; //@line 25257
  $29 = ___async_retval; //@line 25258
  HEAP32[$29 >> 2] = $30; //@line 25259
  return;
 }
 $13 = $12 & 255; //@line 25262
 $14 = HEAP32[$6 >> 2] | 0; //@line 25263
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 25266
 $18 = HEAP32[$8 >> 2] | 0; //@line 25267
 $21 = HEAP8[$18 + ($13 << 4) >> 0] | 0; //@line 25270
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 25271
 $22 = FUNCTION_TABLE_iiii[$17 & 31]($14, $18 + ($13 << 4) + 4 | 0, $21) | 0; //@line 25272
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 468; //@line 25275
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 25276
  HEAP8[$23 >> 0] = $12; //@line 25277
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 25278
  HEAP32[$24 >> 2] = $4; //@line 25279
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 25280
  HEAP32[$25 >> 2] = $6; //@line 25281
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 25282
  HEAP32[$26 >> 2] = $8; //@line 25283
  sp = STACKTOP; //@line 25284
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 25288
 ___async_unwind = 0; //@line 25289
 HEAP32[$ReallocAsyncCtx >> 2] = 468; //@line 25290
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 25291
 HEAP8[$23 >> 0] = $12; //@line 25292
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 25293
 HEAP32[$24 >> 2] = $4; //@line 25294
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 25295
 HEAP32[$25 >> 2] = $6; //@line 25296
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 25297
 HEAP32[$26 >> 2] = $8; //@line 25298
 sp = STACKTOP; //@line 25299
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19020
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19022
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19024
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19026
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19028
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19030
 $11 = HEAP32[$2 >> 2] | 0; //@line 19031
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 19035
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 19036
  FUNCTION_TABLE_vii[$14 & 15]($6, $8); //@line 19037
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 50; //@line 19040
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 19041
   HEAP32[$15 >> 2] = $2; //@line 19042
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 19043
   HEAP32[$16 >> 2] = $4; //@line 19044
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 19045
   HEAP32[$17 >> 2] = $10; //@line 19046
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 19047
   HEAP32[$18 >> 2] = $8; //@line 19048
   sp = STACKTOP; //@line 19049
   return;
  }
  ___async_unwind = 0; //@line 19052
  HEAP32[$ReallocAsyncCtx2 >> 2] = 50; //@line 19053
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 19054
  HEAP32[$15 >> 2] = $2; //@line 19055
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 19056
  HEAP32[$16 >> 2] = $4; //@line 19057
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 19058
  HEAP32[$17 >> 2] = $10; //@line 19059
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 19060
  HEAP32[$18 >> 2] = $8; //@line 19061
  sp = STACKTOP; //@line 19062
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 19065
 __ZN4mbed6Ticker5setupEy($10, 2e5, 0); //@line 19066
 $19 = HEAP32[$2 >> 2] | 0; //@line 19067
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 19073
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 19074
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 19075
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 19078
  sp = STACKTOP; //@line 19079
  return;
 }
 ___async_unwind = 0; //@line 19082
 HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 19083
 sp = STACKTOP; //@line 19084
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15858
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 15863
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 15868
  } else {
   $20 = $0 & 255; //@line 15870
   $21 = $0 & 255; //@line 15871
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 15877
   } else {
    $26 = $1 + 20 | 0; //@line 15879
    $27 = HEAP32[$26 >> 2] | 0; //@line 15880
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 15886
     HEAP8[$27 >> 0] = $20; //@line 15887
     $34 = $21; //@line 15888
    } else {
     label = 12; //@line 15890
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15895
     $32 = ___overflow($1, $0) | 0; //@line 15896
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 667; //@line 15899
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 15901
      sp = STACKTOP; //@line 15902
      return 0; //@line 15903
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 15905
      $34 = $32; //@line 15906
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 15911
   $$0 = $34; //@line 15912
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 15917
   $8 = $0 & 255; //@line 15918
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 15924
    $14 = HEAP32[$13 >> 2] | 0; //@line 15925
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 15931
     HEAP8[$14 >> 0] = $7; //@line 15932
     $$0 = $8; //@line 15933
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15937
   $19 = ___overflow($1, $0) | 0; //@line 15938
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 666; //@line 15941
    sp = STACKTOP; //@line 15942
    return 0; //@line 15943
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15945
    $$0 = $19; //@line 15946
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 15951
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK16channel_params_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$037$lcssa = 0, $$03739 = 0, $$038 = 0, $$1 = 0, $10 = 0, $13 = 0, $14 = 0, $20 = 0, $26 = 0, $33 = 0, $39 = 0, $6 = 0, $8 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$038 = -1002; //@line 16159
  return $$038 | 0; //@line 16160
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16163
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 16165
 if (!($6 << 24 >> 24)) {
  $$037$lcssa = 0; //@line 16168
 } else {
  $10 = $1 + 4 | 0; //@line 16170
  $wide$trip$count = $6 & 255; //@line 16171
  $$03739 = 0; //@line 16172
  $indvars$iv = 0; //@line 16172
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0) {
    $13 = HEAP32[$10 >> 2] | 0; //@line 16177
    $14 = $$03739 & 255; //@line 16178
    HEAP8[$13 + ($14 << 4) >> 0] = $indvars$iv; //@line 16181
    HEAP32[$13 + ($14 << 4) + 4 >> 2] = HEAP32[$2 + ($indvars$iv * 12 | 0) >> 2]; //@line 16185
    $20 = $2 + ($indvars$iv * 12 | 0) + 8 | 0; //@line 16186
    HEAP8[$13 + ($14 << 4) + 12 >> 0] = HEAP8[$20 >> 0] | 0; //@line 16189
    $26 = (HEAP32[$10 >> 2] | 0) + ($14 << 4) + 12 | 0; //@line 16193
    HEAP8[$26 >> 0] = HEAP8[$26 >> 0] & -16 | HEAP8[$20 >> 0] & 15; //@line 16197
    $33 = (HEAP32[$10 >> 2] | 0) + ($14 << 4) + 12 | 0; //@line 16201
    HEAP8[$33 >> 0] = HEAP8[$33 >> 0] & 15 | HEAP8[$20 >> 0] & -16; //@line 16205
    $39 = HEAP32[$10 >> 2] | 0; //@line 16208
    HEAP8[$39 + ($14 << 4) + 13 >> 0] = HEAP8[$2 + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 16210
    HEAP32[$39 + ($14 << 4) + 8 >> 2] = HEAP32[$2 + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 16214
    $$1 = $$03739 + 1 << 24 >> 24; //@line 16216
   } else {
    $$1 = $$03739; //@line 16218
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 16220
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$037$lcssa = $$1; //@line 16223
    break;
   } else {
    $$03739 = $$1; //@line 16226
   }
  }
 }
 HEAP8[$1 >> 0] = $$037$lcssa; //@line 16230
 $$038 = 0; //@line 16231
 return $$038 | 0; //@line 16232
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11380
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 11385
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 11390
  } else {
   $20 = $0 & 255; //@line 11392
   $21 = $0 & 255; //@line 11393
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 11399
   } else {
    $26 = $1 + 20 | 0; //@line 11401
    $27 = HEAP32[$26 >> 2] | 0; //@line 11402
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 11408
     HEAP8[$27 >> 0] = $20; //@line 11409
     $34 = $21; //@line 11410
    } else {
     label = 12; //@line 11412
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11417
     $32 = ___overflow($1, $0) | 0; //@line 11418
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 655; //@line 11421
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11423
      sp = STACKTOP; //@line 11424
      return 0; //@line 11425
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11427
      $34 = $32; //@line 11428
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 11433
   $$0 = $34; //@line 11434
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 11439
   $8 = $0 & 255; //@line 11440
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 11446
    $14 = HEAP32[$13 >> 2] | 0; //@line 11447
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 11453
     HEAP8[$14 >> 0] = $7; //@line 11454
     $$0 = $8; //@line 11455
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11459
   $19 = ___overflow($1, $0) | 0; //@line 11460
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 654; //@line 11463
    sp = STACKTOP; //@line 11464
    return 0; //@line 11465
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11467
    $$0 = $19; //@line 11468
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 11473
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12100
 $1 = $0 + 20 | 0; //@line 12101
 $3 = $0 + 28 | 0; //@line 12103
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 12109
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12110
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 12111
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 661; //@line 12114
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12116
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12118
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 12120
    sp = STACKTOP; //@line 12121
    return 0; //@line 12122
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12124
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 12128
     break;
    } else {
     label = 5; //@line 12131
     break;
    }
   }
  } else {
   label = 5; //@line 12136
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 12140
  $14 = HEAP32[$13 >> 2] | 0; //@line 12141
  $15 = $0 + 8 | 0; //@line 12142
  $16 = HEAP32[$15 >> 2] | 0; //@line 12143
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 12151
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12152
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 12153
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 662; //@line 12156
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12158
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 12160
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 12162
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 12164
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 12166
     sp = STACKTOP; //@line 12167
     return 0; //@line 12168
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12170
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 12176
  HEAP32[$3 >> 2] = 0; //@line 12177
  HEAP32[$1 >> 2] = 0; //@line 12178
  HEAP32[$15 >> 2] = 0; //@line 12179
  HEAP32[$13 >> 2] = 0; //@line 12180
  $$0 = 0; //@line 12181
 }
 return $$0 | 0; //@line 12183
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_357($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $33 = 0, $36 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27371
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27373
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27377
 $8 = $0 + 16 | 0; //@line 27379
 $10 = HEAP32[$8 >> 2] | 0; //@line 27381
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 27384
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 27386
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 27388
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 27390
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 27392
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 27393
 $20 = HEAP32[$2 >> 2] | 0; //@line 27394
 if ($20 | 0) {
  $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 27398
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 27399
  FUNCTION_TABLE_vi[$23 & 1023]($17); //@line 27400
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 27403
   $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 27404
   HEAP32[$24 >> 2] = $15; //@line 27405
   $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 27406
   HEAP32[$25 >> 2] = $19; //@line 27407
   sp = STACKTOP; //@line 27408
   return;
  }
  ___async_unwind = 0; //@line 27411
  HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 27412
  $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 27413
  HEAP32[$24 >> 2] = $15; //@line 27414
  $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 27415
  HEAP32[$25 >> 2] = $19; //@line 27416
  sp = STACKTOP; //@line 27417
  return;
 }
 if (!(HEAP8[$15 + 770 >> 0] | 0)) {
  HEAP8[$19 >> 0] = 0; //@line 27424
 }
 $30 = HEAP32[$15 + 788 >> 2] | 0; //@line 27427
 if (!$30) {
  return;
 }
 $33 = HEAP32[$30 + 60 >> 2] | 0; //@line 27433
 if (!$33) {
  return;
 }
 $36 = HEAP32[$33 >> 2] | 0; //@line 27439
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 27440
 FUNCTION_TABLE_vi[$36 & 1023]($30 + 48 | 0); //@line 27441
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 27444
  sp = STACKTOP; //@line 27445
  return;
 }
 ___async_unwind = 0; //@line 27448
 HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 27449
 sp = STACKTOP; //@line 27450
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_198($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3172
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3176
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3178
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3180
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3182
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3184
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3185
 if (!$13) {
  HEAP32[$6 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv($4) | 0; //@line 3190
  HEAP8[$6 + 1936 >> 0] = 1; //@line 3192
  HEAP8[$8 >> 0] = 1; //@line 3193
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 3194
  __ZN7LoRaPHY25setup_public_network_modeEb($10, 1); //@line 3195
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 458; //@line 3198
   sp = STACKTOP; //@line 3199
   return;
  }
  ___async_unwind = 0; //@line 3202
  HEAP32[$ReallocAsyncCtx10 >> 2] = 458; //@line 3203
  sp = STACKTOP; //@line 3204
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 3208
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 3209
  FUNCTION_TABLE_vi[$16 & 1023]($12); //@line 3210
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 457; //@line 3213
   $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 3214
   HEAP32[$17 >> 2] = $4; //@line 3215
   $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 3216
   HEAP32[$18 >> 2] = $6; //@line 3217
   $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 3218
   HEAP32[$19 >> 2] = $8; //@line 3219
   $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 3220
   HEAP32[$20 >> 2] = $10; //@line 3221
   sp = STACKTOP; //@line 3222
   return;
  }
  ___async_unwind = 0; //@line 3225
  HEAP32[$ReallocAsyncCtx4 >> 2] = 457; //@line 3226
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 3227
  HEAP32[$17 >> 2] = $4; //@line 3228
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 3229
  HEAP32[$18 >> 2] = $6; //@line 3230
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 3231
  HEAP32[$19 >> 2] = $8; //@line 3232
  $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 3233
  HEAP32[$20 >> 2] = $10; //@line 3234
  sp = STACKTOP; //@line 3235
  return;
 }
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12381
 STACKTOP = STACKTOP + 16 | 0; //@line 12382
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12382
 $2 = sp; //@line 12383
 $3 = $0 + 476 | 0; //@line 12384
 $4 = $1 + 12 | 0; //@line 12385
 $5 = HEAP32[$4 >> 2] | 0; //@line 12386
 do {
  if (!$5) {
   $13 = 0; //@line 12390
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 12393
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12394
   FUNCTION_TABLE_vii[$8 & 15]($2, $1); //@line 12395
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 382; //@line 12398
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 12400
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 12402
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 12404
    sp = STACKTOP; //@line 12405
    STACKTOP = sp; //@line 12406
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12408
    $13 = HEAP32[$4 >> 2] | 0; //@line 12410
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 12415
 HEAP32[$12 >> 2] = $13; //@line 12416
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12417
 __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($3, $2); //@line 12418
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 383; //@line 12421
  HEAP32[$AsyncCtx6 + 4 >> 2] = $12; //@line 12423
  HEAP32[$AsyncCtx6 + 8 >> 2] = $2; //@line 12425
  sp = STACKTOP; //@line 12426
  STACKTOP = sp; //@line 12427
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 12429
 $16 = HEAP32[$12 >> 2] | 0; //@line 12430
 if (!$16) {
  STACKTOP = sp; //@line 12433
  return;
 }
 $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 12436
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12437
 FUNCTION_TABLE_vi[$19 & 1023]($2); //@line 12438
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 384; //@line 12441
  sp = STACKTOP; //@line 12442
  STACKTOP = sp; //@line 12443
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12445
 STACKTOP = sp; //@line 12446
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_172($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1628
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1630
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1632
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1634
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1636
 if (!$AsyncRetVal) {
  $9 = $2 + 16 | 0; //@line 1639
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 1640
  $10 = _mbedtls_cipher_cmac_finish($4, $9) | 0; //@line 1641
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 492; //@line 1644
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 1645
   HEAP32[$11 >> 2] = $2; //@line 1646
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 1647
   HEAP32[$12 >> 2] = $9; //@line 1648
   $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 1649
   HEAP32[$13 >> 2] = $6; //@line 1650
   $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 1651
   HEAP32[$14 >> 2] = $4; //@line 1652
   sp = STACKTOP; //@line 1653
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 1657
  ___async_unwind = 0; //@line 1658
  HEAP32[$ReallocAsyncCtx2 >> 2] = 492; //@line 1659
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 1660
  HEAP32[$11 >> 2] = $2; //@line 1661
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 1662
  HEAP32[$12 >> 2] = $9; //@line 1663
  $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 1664
  HEAP32[$13 >> 2] = $6; //@line 1665
  $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 1666
  HEAP32[$14 >> 2] = $4; //@line 1667
  sp = STACKTOP; //@line 1668
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1671
  _mbedtls_cipher_free($4); //@line 1672
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 1675
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 1676
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 1677
   sp = STACKTOP; //@line 1678
   return;
  }
  ___async_unwind = 0; //@line 1681
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 1682
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 1683
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 1684
  sp = STACKTOP; //@line 1685
  return;
 }
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_216($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5048
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5050
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5052
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5054
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5056
 if (!$AsyncRetVal) {
  $9 = $2 + 16 | 0; //@line 5059
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 5060
  $10 = _mbedtls_cipher_cmac_finish($4, $9) | 0; //@line 5061
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 485; //@line 5064
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 5065
   HEAP32[$11 >> 2] = $2; //@line 5066
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 5067
   HEAP32[$12 >> 2] = $9; //@line 5068
   $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 5069
   HEAP32[$13 >> 2] = $6; //@line 5070
   $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 5071
   HEAP32[$14 >> 2] = $4; //@line 5072
   sp = STACKTOP; //@line 5073
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 5077
  ___async_unwind = 0; //@line 5078
  HEAP32[$ReallocAsyncCtx2 >> 2] = 485; //@line 5079
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 5080
  HEAP32[$11 >> 2] = $2; //@line 5081
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 5082
  HEAP32[$12 >> 2] = $9; //@line 5083
  $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 5084
  HEAP32[$13 >> 2] = $6; //@line 5085
  $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 5086
  HEAP32[$14 >> 2] = $4; //@line 5087
  sp = STACKTOP; //@line 5088
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 5091
  _mbedtls_cipher_free($4); //@line 5092
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 5095
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 5096
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 5097
   sp = STACKTOP; //@line 5098
   return;
  }
  ___async_unwind = 0; //@line 5101
  HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 5102
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 5103
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 5104
  sp = STACKTOP; //@line 5105
  return;
 }
}
function __ZN12LoRaWANStack7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 10179
 STACKTOP = STACKTOP + 32 | 0; //@line 10180
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10180
 $vararg_buffer3 = sp + 16 | 0; //@line 10181
 $2 = sp + 24 | 0; //@line 10184
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$1 = -1012; //@line 10189
  STACKTOP = sp; //@line 10190
  return $$1 | 0; //@line 10190
 }
 $6 = HEAP8[$1 >> 0] | 0; //@line 10192
 if (($6 & 255) >= 2) {
  $$1 = -1003; //@line 10195
  STACKTOP = sp; //@line 10196
  return $$1 | 0; //@line 10196
 }
 $7 = $6 << 24 >> 24 == 0; //@line 10198
 $8 = __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, $1, $7) | 0; //@line 10199
 if ($8 | 0) {
  $$1 = $8; //@line 10202
  STACKTOP = sp; //@line 10203
  return $$1 | 0; //@line 10203
 }
 if ($7) {
  _mbed_tracef(16, 11997, 12497, sp); //@line 10206
  HEAP32[$0 + 2556 >> 2] = 0; //@line 10208
  HEAP32[$0 + 2552 >> 2] = 0; //@line 10210
  $12 = $0 + 2904 | 0; //@line 10211
  HEAP32[$12 >> 2] = HEAP32[$12 >> 2] | 8; //@line 10214
 } else {
  _mbed_tracef(16, 11997, 12443, sp + 8 | 0); //@line 10216
  $18 = HEAP32[$0 + 2556 >> 2] | 0; //@line 10220
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[$0 + 2552 >> 2]; //@line 10221
  HEAP32[$vararg_buffer3 + 4 >> 2] = $18; //@line 10223
  _mbed_tracef(16, 11997, 12458, $vararg_buffer3); //@line 10224
  $19 = $0 + 2904 | 0; //@line 10225
  HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -9; //@line 10228
 }
 HEAP32[$2 >> 2] = 0; //@line 10230
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10231
 __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $2); //@line 10232
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 348; //@line 10235
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 10237
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 10239
  sp = STACKTOP; //@line 10240
  STACKTOP = sp; //@line 10241
  return 0; //@line 10241
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10243
 $$1 = HEAP32[$2 >> 2] | 0; //@line 10245
 STACKTOP = sp; //@line 10246
 return $$1 | 0; //@line 10246
}
function _mbedtls_cipher_cmac_finish__async_cb_98($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26944
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26946
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26948
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26950
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26952
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26954
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26956
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26958
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26960
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26962
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26964
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26966
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26968
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26970
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26972
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26974
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26976
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 26977
 _mbedtls_platform_zeroize($4, 16); //@line 26978
 if (!___async) {
  ___async_unwind = 0; //@line 26981
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 585; //@line 26983
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 26985
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 26987
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 26989
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 26991
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 26993
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 26995
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 26997
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 26999
 HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 27001
 HEAP32[$ReallocAsyncCtx7 + 40 >> 2] = $20; //@line 27003
 HEAP32[$ReallocAsyncCtx7 + 44 >> 2] = $22; //@line 27005
 HEAP32[$ReallocAsyncCtx7 + 48 >> 2] = $24; //@line 27007
 HEAP32[$ReallocAsyncCtx7 + 52 >> 2] = $26; //@line 27009
 HEAP32[$ReallocAsyncCtx7 + 56 >> 2] = $28; //@line 27011
 HEAP32[$ReallocAsyncCtx7 + 60 >> 2] = $30; //@line 27013
 HEAP32[$ReallocAsyncCtx7 + 64 >> 2] = $32; //@line 27015
 sp = STACKTOP; //@line 27016
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $15 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30052
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30056
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30058
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30060
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30062
 if ((HEAP32[$0 + 4 >> 2] | 0) != 1) {
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($4) | 0)) {
  HEAP32[$6 >> 2] = 0; //@line 30071
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 30072
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($8, $6); //@line 30073
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 204; //@line 30076
   $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 30077
   HEAP32[$15 >> 2] = $6; //@line 30078
   sp = STACKTOP; //@line 30079
   return;
  }
  ___async_unwind = 0; //@line 30082
  HEAP32[$ReallocAsyncCtx3 >> 2] = 204; //@line 30083
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 30084
  HEAP32[$15 >> 2] = $6; //@line 30085
  sp = STACKTOP; //@line 30086
  return;
 }
 __ZN7LoRaMac21post_process_mcps_reqEv($4); //@line 30089
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) >> 2] | 0) == 1) {
   if (__ZN7LoRaMac24continue_sending_processEv($4) | 0) {
    return;
   } else {
    _mbed_tracef(2, 11997, 12002, $10); //@line 30099
    break;
   }
  }
 } while (0);
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 30104
 __ZN12LoRaWANStack26process_status_check_stateEv($8); //@line 30105
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 205; //@line 30108
  $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 30109
  HEAP32[$20 >> 2] = $4; //@line 30110
  $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 30111
  HEAP32[$21 >> 2] = $8; //@line 30112
  sp = STACKTOP; //@line 30113
  return;
 }
 ___async_unwind = 0; //@line 30116
 HEAP32[$ReallocAsyncCtx2 >> 2] = 205; //@line 30117
 $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 30118
 HEAP32[$20 >> 2] = $4; //@line 30119
 $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 30120
 HEAP32[$21 >> 2] = $8; //@line 30121
 sp = STACKTOP; //@line 30122
 return;
}
function __ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $35 = 0, $4 = 0, $51 = 0, $56 = 0, $58 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 26835
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26837
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26841
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26843
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 26845
 $14 = HEAP8[$0 + 25 >> 0] | 0; //@line 26847
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 26849
 $18 = HEAP32[$0 + 28 >> 2] | 0; //@line 26851
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 26855
 $22 = $AsyncRetVal & 255; //@line 26856
 $23 = $2 & 65535; //@line 26857
 if ($23 >>> 0 > $22 >>> 0) {
  HEAP32[$4 >> 2] = $23; //@line 26860
  HEAP32[$4 + 4 >> 2] = $22; //@line 26862
  _mbed_tracef(8, 12685, 13194, $4); //@line 26863
  HEAP16[$8 + 2372 >> 1] = $23 - $22; //@line 26867
  HEAP16[$8 + 2370 >> 1] = $AsyncRetVal & 255; //@line 26870
  _memcpy($8 + 2115 | 0, $10 | 0, $22 | 0) | 0; //@line 26872
 } else {
  HEAP16[$8 + 2370 >> 1] = $2; //@line 26875
  HEAP16[$8 + 2372 >> 1] = 0; //@line 26877
  if ($2 << 16 >> 16) {
   _memcpy($8 + 2115 | 0, $10 | 0, $23 | 0) | 0; //@line 26881
  }
 }
 $35 = $12 & 255; //@line 26884
 if ($35 & 1 | 0) {
  HEAP32[$8 + 2108 >> 2] = 0; //@line 26889
  HEAP8[$8 + 2112 >> 0] = $14; //@line 26891
  HEAP8[$8 + 2114 >> 0] = 1; //@line 26893
 }
 if ($35 & 2 | 0) {
  HEAP32[$8 + 2108 >> 2] = 1; //@line 26899
  HEAP8[$8 + 2112 >> 0] = $14; //@line 26901
  HEAP8[$8 + 2114 >> 0] = $16; //@line 26903
 }
 if (!($35 & 8)) {
  $58 = HEAP8[$8 + 2112 >> 0] | 0; //@line 26910
 } else {
  HEAP32[$8 + 2108 >> 2] = 3; //@line 26913
  HEAP8[$8 + 2112 >> 0] = $14; //@line 26915
  HEAP8[$8 + 2114 >> 0] = 1; //@line 26917
  $58 = $14; //@line 26918
 }
 $51 = $8 + 2370 | 0; //@line 26920
 $56 = HEAPU16[$8 + 2372 >> 1] | 0; //@line 26925
 HEAP32[$18 >> 2] = HEAPU16[$51 >> 1]; //@line 26927
 HEAP32[$18 + 4 >> 2] = $56; //@line 26929
 HEAP32[$18 + 8 >> 2] = $58 & 255; //@line 26931
 _mbed_tracef(8, 12685, 13249, $18); //@line 26932
 HEAP16[___async_retval >> 1] = HEAP16[$51 >> 1] | 0; //@line 26935
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21505
 $3 = $0 + 4 | 0; //@line 21506
 $4 = HEAP32[$3 >> 2] | 0; //@line 21507
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 21510
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 21511
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 21512
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 535; //@line 21515
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 21517
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 21520
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 21522
  sp = STACKTOP; //@line 21523
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21526
 $11 = HEAP32[$3 >> 2] | 0; //@line 21527
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 21530
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21533
   FUNCTION_TABLE_vii[$14 & 15]($11, 0); //@line 21534
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 537; //@line 21537
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 21539
    sp = STACKTOP; //@line 21540
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 21543
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21547
   FUNCTION_TABLE_vii[$14 & 15]($11, $2); //@line 21548
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 536; //@line 21551
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 21553
    sp = STACKTOP; //@line 21554
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 21557
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 21562
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 21565
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21566
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 21567
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 538; //@line 21570
  sp = STACKTOP; //@line 21571
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 21574
  return;
 }
}
function __ZN12LoRaWANStack26process_status_check_stateEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $16 = 0, $3 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6602
 switch (HEAP32[$0 + 2496 >> 2] | 0) {
 case 9:
 case 8:
  {
   $3 = $0 + 2904 | 0; //@line 6607
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -18; //@line 6610
   __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 6611
   __ZN7LoRaMac16reset_ongoing_txEb($0, 0); //@line 6612
   $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6613
   __ZN12LoRaWANStack20mcps_confirm_handlerEv($0); //@line 6614
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 225; //@line 6617
    sp = STACKTOP; //@line 6618
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6621
   return;
  }
 case 5:
  {
   $6 = $0 + 2904 | 0; //@line 6626
   $7 = HEAP32[$6 >> 2] | 0; //@line 6627
   do {
    if ($7 & 17 | 0) {
     HEAP32[$6 >> 2] = $7 & -18; //@line 6633
     __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 6634
     __ZN7LoRaMac16reset_ongoing_txEb($0, 0); //@line 6635
     $11 = $0 + 2910 | 0; //@line 6636
     if (HEAP8[$11 >> 0] | 0) {
      HEAP8[$11 >> 0] = 0; //@line 6640
      break;
     }
     $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6643
     __ZN12LoRaWANStack20mcps_confirm_handlerEv($0); //@line 6644
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 226; //@line 6647
      HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 6649
      HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 6651
      sp = STACKTOP; //@line 6652
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6655
      break;
     }
    }
   } while (0);
   $16 = HEAP32[$6 >> 2] | 0; //@line 6660
   if (!($16 & 2)) {
    return;
   }
   HEAP32[$6 >> 2] = $16 & -3; //@line 6667
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6668
   __ZN12LoRaWANStack23mcps_indication_handlerEv($0); //@line 6669
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 227; //@line 6672
    sp = STACKTOP; //@line 6673
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6676
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $40 = 0, label = 0;
 $15 = $8 & 1; //@line 123
 $16 = $10 & 1; //@line 124
 $17 = $11 & 1; //@line 125
 $18 = $13 & 1; //@line 126
 $19 = $14 & 1; //@line 127
 HEAP8[$0 + 689 >> 0] = $1; //@line 130
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 134
   HEAP32[$0 + 712 >> 2] = $3; //@line 136
   HEAP32[$0 + 708 >> 2] = $5; //@line 138
   HEAP8[$0 + 718 >> 0] = $15; //@line 140
   HEAP8[$0 + 719 >> 0] = $9; //@line 142
   HEAP8[$0 + 720 >> 0] = $16; //@line 144
   HEAP8[$0 + 721 >> 0] = $18; //@line 146
   HEAP8[$0 + 722 >> 0] = $19; //@line 148
   HEAP16[$0 + 716 >> 1] = $6; //@line 150
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 159
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $40 = $2 + 7 | 0; //@line 169
   HEAP32[$0 + 752 >> 2] = $40; //@line 171
   HEAP32[$0 + 756 >> 2] = $3; //@line 173
   HEAP8[$0 + 761 >> 0] = $4; //@line 175
   HEAP16[$0 + 762 >> 1] = $6; //@line 177
   HEAP8[$0 + 764 >> 0] = $15; //@line 179
   HEAP8[$0 + 765 >> 0] = $9; //@line 181
   HEAP8[$0 + 766 >> 0] = $16; //@line 183
   HEAP8[$0 + 767 >> 0] = $17; //@line 185
   HEAP8[$0 + 768 >> 0] = $12; //@line 187
   HEAP8[$0 + 769 >> 0] = $18; //@line 189
   HEAP8[$0 + 770 >> 0] = $19; //@line 191
   HEAP16[$0 + 778 >> 1] = $7; //@line 193
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 195
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 203
   } else {
    if (($40 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 209
    } else {
     $$sink = 0; //@line 211
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 215
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 218
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $12 = 0, $15 = 0, $6 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 1872
 STACKTOP = STACKTOP + 48 | 0; //@line 1873
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1873
 $vararg_buffer12 = sp + 32 | 0; //@line 1874
 $vararg_buffer8 = sp + 24 | 0; //@line 1875
 $vararg_buffer4 = sp + 16 | 0; //@line 1876
 $vararg_buffer = sp; //@line 1877
 $6 = $4 & 255; //@line 1878
 $7 = $5 & 255; //@line 1879
 HEAP32[$vararg_buffer >> 2] = $2; //@line 1880
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 1882
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 1884
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 1886
 _mbed_tracef(16, 11081, 11351, $vararg_buffer); //@line 1887
 $9 = HEAP32[$0 + 752 >> 2] | 0; //@line 1889
 if (($9 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $9; //@line 1892
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 1894
  _mbed_tracef(16, 11081, 11392, $vararg_buffer4); //@line 1895
  STACKTOP = sp; //@line 1896
  return;
 }
 $12 = HEAP32[$0 + 756 >> 2] | 0; //@line 1899
 if (($12 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $12; //@line 1902
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 1904
  _mbed_tracef(16, 11081, 11439, $vararg_buffer8); //@line 1905
  STACKTOP = sp; //@line 1906
  return;
 }
 $15 = HEAP32[$0 + 692 >> 2] | 0; //@line 1909
 if (($15 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 1913
  HEAP8[$0 + 782 >> 0] = $2; //@line 1916
  HEAP8[$0 + 781 >> 0] = -35; //@line 1918
  HEAP8[$0 + 780 >> 0] = -5; //@line 1920
  HEAP8[$0 + 783 >> 0] = 1; //@line 1922
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(2) | 0; //@line 1925
  STACKTOP = sp; //@line 1926
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $15; //@line 1928
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 1930
  _mbed_tracef(16, 11081, 11486, $vararg_buffer12); //@line 1931
  STACKTOP = sp; //@line 1932
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEj__async_cb_178($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2012
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2014
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2016
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2018
 if (!(HEAP8[$2 + 1175 >> 0] | 0)) {
  HEAP32[$2 + 2056 >> 2] = 0; //@line 2024
  HEAP32[$2 + 2092 >> 2] = 4; //@line 2026
  $24 = HEAP8[$2 + 1182 >> 0] | 0; //@line 2028
  HEAP8[$2 + 1183 >> 0] = $24; //@line 2030
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $24, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $4); //@line 2035
  HEAP32[$2 + 1780 >> 2] = $4; //@line 2037
  return;
 }
 $11 = (__ZN18LoRaWANTimeHandler16get_current_timeEv($2) | 0) - $4 | 0; //@line 2041
 $15 = (HEAP32[$2 + 1772 >> 2] | 0) - $11 | 0; //@line 2045
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 2046
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($2, $2 + 1816 | 0, $15); //@line 2047
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 2050
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 2051
  HEAP32[$16 >> 2] = $6; //@line 2052
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 2053
  HEAP32[$17 >> 2] = $2; //@line 2054
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 2055
  HEAP32[$18 >> 2] = $11; //@line 2056
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 2057
  HEAP32[$19 >> 2] = $2; //@line 2058
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 2059
  HEAP32[$20 >> 2] = $4; //@line 2060
  sp = STACKTOP; //@line 2061
  return;
 }
 ___async_unwind = 0; //@line 2064
 HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 2065
 $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 2066
 HEAP32[$16 >> 2] = $6; //@line 2067
 $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 2068
 HEAP32[$17 >> 2] = $2; //@line 2069
 $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 2070
 HEAP32[$18 >> 2] = $11; //@line 2071
 $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 2072
 HEAP32[$19 >> 2] = $2; //@line 2073
 $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 2074
 HEAP32[$20 >> 2] = $4; //@line 2075
 sp = STACKTOP; //@line 2076
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEj__async_cb_177($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1941
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1943
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1945
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1947
 if (!(HEAP8[$2 + 1175 >> 0] | 0)) {
  HEAP32[$2 + 2056 >> 2] = 0; //@line 1953
  HEAP32[$2 + 2092 >> 2] = 4; //@line 1955
  $24 = HEAP8[$2 + 1182 >> 0] | 0; //@line 1957
  HEAP8[$2 + 1183 >> 0] = $24; //@line 1959
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $24, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $4); //@line 1964
  HEAP32[$2 + 1780 >> 2] = $4; //@line 1966
  return;
 }
 $11 = (__ZN18LoRaWANTimeHandler16get_current_timeEv($2) | 0) - $4 | 0; //@line 1970
 $15 = (HEAP32[$2 + 1772 >> 2] | 0) - $11 | 0; //@line 1974
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 1975
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($2, $2 + 1816 | 0, $15); //@line 1976
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 1979
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 1980
  HEAP32[$16 >> 2] = $6; //@line 1981
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 1982
  HEAP32[$17 >> 2] = $2; //@line 1983
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 1984
  HEAP32[$18 >> 2] = $11; //@line 1985
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 1986
  HEAP32[$19 >> 2] = $2; //@line 1987
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 1988
  HEAP32[$20 >> 2] = $4; //@line 1989
  sp = STACKTOP; //@line 1990
  return;
 }
 ___async_unwind = 0; //@line 1993
 HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 1994
 $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 1995
 HEAP32[$16 >> 2] = $6; //@line 1996
 $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 1997
 HEAP32[$17 >> 2] = $2; //@line 1998
 $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 1999
 HEAP32[$18 >> 2] = $11; //@line 2000
 $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 2001
 HEAP32[$19 >> 2] = $2; //@line 2002
 $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 2003
 HEAP32[$20 >> 2] = $4; //@line 2004
 sp = STACKTOP; //@line 2005
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_16($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18935
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18937
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18939
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18941
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18943
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18945
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18947
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18949
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18951
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18953
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18955
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18957
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18959
 $25 = $4 + 1088 | 0; //@line 18960
 HEAP32[$25 >> 2] = 0; //@line 18961
 HEAP32[$25 + 4 >> 2] = 0; //@line 18961
 HEAP32[$25 + 8 >> 2] = 0; //@line 18961
 HEAP32[$25 + 12 >> 2] = 0; //@line 18961
 HEAP8[$4 + 1104 >> 0] = 1; //@line 18963
 HEAP32[$2 >> 2] = 620; //@line 18964
 $27 = $4 + 1112 | 0; //@line 18965
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 18966
 __ZN4mbed10TimerEventC2Ev($27); //@line 18967
 if (!___async) {
  ___async_unwind = 0; //@line 18970
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 18972
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $27; //@line 18974
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 18976
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 18978
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 18980
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 18982
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 18984
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 18986
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 18988
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 18990
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 18992
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 18994
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 18996
 sp = STACKTOP; //@line 18997
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_15($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18865
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18867
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18869
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18871
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18873
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18875
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18877
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18879
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18881
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18883
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18885
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18887
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18889
 $25 = $4 + 1152 | 0; //@line 18890
 HEAP32[$25 >> 2] = 0; //@line 18891
 HEAP32[$25 + 4 >> 2] = 0; //@line 18891
 HEAP32[$25 + 8 >> 2] = 0; //@line 18891
 HEAP32[$25 + 12 >> 2] = 0; //@line 18891
 HEAP8[$4 + 1168 >> 0] = 1; //@line 18893
 HEAP32[$2 >> 2] = 620; //@line 18894
 $27 = $4 + 1176 | 0; //@line 18895
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 18896
 __ZN4mbed10TimerEventC2Ev($27); //@line 18897
 if (!___async) {
  ___async_unwind = 0; //@line 18900
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 96; //@line 18902
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 18904
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 18906
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 18908
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 18910
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 18912
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 18914
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 18916
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 18918
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 18920
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 18922
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 18924
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 18926
 sp = STACKTOP; //@line 18927
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_64($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24472
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24474
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 24476
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 24481
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24482
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 24483
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 24486
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 24487
   HEAP32[$9 >> 2] = $2; //@line 24488
   sp = STACKTOP; //@line 24489
   return;
  }
  ___async_unwind = 0; //@line 24492
  HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 24493
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 24494
  HEAP32[$9 >> 2] = $2; //@line 24495
  sp = STACKTOP; //@line 24496
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 24500
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 24505
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24506
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 24507
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 24510
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 24511
   HEAP32[$16 >> 2] = $2; //@line 24512
   sp = STACKTOP; //@line 24513
   return;
  }
  ___async_unwind = 0; //@line 24516
  HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 24517
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 24518
  HEAP32[$16 >> 2] = $2; //@line 24519
  sp = STACKTOP; //@line 24520
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 24524
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 24530
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 24531
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 24532
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 24535
  sp = STACKTOP; //@line 24536
  return;
 }
 ___async_unwind = 0; //@line 24539
 HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 24540
 sp = STACKTOP; //@line 24541
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1506
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1510
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1512
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1514
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1516
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1518
 if (!$AsyncRetVal) {
  $14 = HEAP16[$0 + 4 >> 1] & 255; //@line 1522
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 1523
  $15 = _mbedtls_cipher_cmac_update($4, $6, $14) | 0; //@line 1524
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 1527
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 1528
   HEAP32[$16 >> 2] = $8; //@line 1529
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 1530
   HEAP32[$17 >> 2] = $4; //@line 1531
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 1532
   HEAP32[$18 >> 2] = $10; //@line 1533
   sp = STACKTOP; //@line 1534
   return;
  }
  HEAP32[___async_retval >> 2] = $15; //@line 1538
  ___async_unwind = 0; //@line 1539
  HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 1540
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 1541
  HEAP32[$16 >> 2] = $8; //@line 1542
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 1543
  HEAP32[$17 >> 2] = $4; //@line 1544
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 1545
  HEAP32[$18 >> 2] = $10; //@line 1546
  sp = STACKTOP; //@line 1547
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1550
  _mbedtls_cipher_free($4); //@line 1551
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 1554
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 1555
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 1556
   sp = STACKTOP; //@line 1557
   return;
  }
  ___async_unwind = 0; //@line 1560
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 1561
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 1562
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 1563
  sp = STACKTOP; //@line 1564
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_14($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18795
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18797
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18799
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18801
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18803
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18805
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18807
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18809
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18811
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18813
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18815
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18817
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18819
 $25 = $4 + 1216 | 0; //@line 18820
 HEAP32[$25 >> 2] = 0; //@line 18821
 HEAP32[$25 + 4 >> 2] = 0; //@line 18821
 HEAP32[$25 + 8 >> 2] = 0; //@line 18821
 HEAP32[$25 + 12 >> 2] = 0; //@line 18821
 HEAP8[$4 + 1232 >> 0] = 1; //@line 18823
 HEAP32[$2 >> 2] = 620; //@line 18824
 $27 = $4 + 1240 | 0; //@line 18825
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 18826
 __ZN4mbed10TimerEventC2Ev($27); //@line 18827
 if (!___async) {
  ___async_unwind = 0; //@line 18830
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 97; //@line 18832
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 18834
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 18836
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 18838
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 18840
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 18842
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 18844
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 18846
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 18848
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 18850
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 18852
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 18854
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 18856
 sp = STACKTOP; //@line 18857
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_217($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5113
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5115
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5117
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5119
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5121
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5123
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5125
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 5128
  $13 = _mbedtls_cipher_cmac_update($2, $4, $6) | 0; //@line 5129
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 484; //@line 5132
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 5133
   HEAP32[$14 >> 2] = $8; //@line 5134
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 5135
   HEAP32[$15 >> 2] = $2; //@line 5136
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 5137
   HEAP32[$16 >> 2] = $10; //@line 5138
   sp = STACKTOP; //@line 5139
   return;
  }
  HEAP32[___async_retval >> 2] = $13; //@line 5143
  ___async_unwind = 0; //@line 5144
  HEAP32[$ReallocAsyncCtx3 >> 2] = 484; //@line 5145
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 5146
  HEAP32[$14 >> 2] = $8; //@line 5147
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 5148
  HEAP32[$15 >> 2] = $2; //@line 5149
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 5150
  HEAP32[$16 >> 2] = $10; //@line 5151
  sp = STACKTOP; //@line 5152
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 5155
  _mbedtls_cipher_free($2); //@line 5156
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 5159
   $18 = $ReallocAsyncCtx6 + 4 | 0; //@line 5160
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 5161
   sp = STACKTOP; //@line 5162
   return;
  }
  ___async_unwind = 0; //@line 5165
  HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 5166
  $18 = $ReallocAsyncCtx6 + 4 | 0; //@line 5167
  HEAP32[$18 >> 2] = $AsyncRetVal; //@line 5168
  sp = STACKTOP; //@line 5169
  return;
 }
}
function __ZN7LoRaMac24get_max_possible_tx_sizeEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$09 = 0, $$pre = 0, $$pre11 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $or$cond$i = 0, sp = 0;
 sp = STACKTOP; //@line 14760
 $2 = $0 + 476 | 0; //@line 14761
 $4 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($2) | 0) & 255; //@line 14763
 $7 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($2) | 0) & 255) + $4 | 0; //@line 14766
 $$pre = $0 + 4 | 0; //@line 14770
 $$pre11 = $0 + 1877 | 0; //@line 14771
 do {
  if (HEAP8[$0 + 1936 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14776
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($$pre, 0, $$pre11, $0 + 1876 | 0, $0 + 1768 | 0) | 0; //@line 14777
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 433; //@line 14780
    HEAP32[$AsyncCtx + 4 >> 2] = $$pre11; //@line 14782
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 14784
    HEAP32[$AsyncCtx + 12 >> 2] = $$pre; //@line 14786
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 14788
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 14790
    HEAP8[$AsyncCtx + 24 >> 0] = $1; //@line 14792
    sp = STACKTOP; //@line 14793
    return 0; //@line 14794
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14796
    break;
   }
  }
 } while (0);
 $20 = $0 + 1173 | 0; //@line 14802
 $23 = __ZN7LoRaPHY15get_max_payloadEhb($$pre, HEAP8[$$pre11 >> 0] | 0, (HEAP8[$20 >> 0] | 0) != 0) | 0; //@line 14805
 $24 = $23 & 255; //@line 14806
 $25 = $7 & 255; //@line 14807
 if ($25 >>> 0 > $24 >>> 0) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($2); //@line 14810
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($2); //@line 14811
  $$0 = 0; //@line 14812
  $$09 = $23; //@line 14812
 } else {
  $$0 = $25; //@line 14816
  $$09 = $24 - $7 & 255; //@line 14816
 }
 $34 = $$0 + ($1 & 255) | 0; //@line 14823
 $or$cond$i = $34 >>> 0 < 256 & $34 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($$pre, HEAP8[$$pre11 >> 0] | 0, (HEAP8[$20 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 14827
 return ($or$cond$i ? $23 : $$09) | 0; //@line 14829
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb_87($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26153
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26155
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26157
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26159
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26161
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26163
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26165
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26167
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$10 >> 2] = HEAP32[$8 >> 2]; //@line 26173
  _mbed_tracef(16, 12685, 12747, $10); //@line 26174
  return;
 }
 $17 = (HEAP8[$2 >> 0] | 0) != 0; //@line 26178
 $19 = HEAP32[$4 + 1888 >> 2] | 0; //@line 26180
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 26181
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $17, $19); //@line 26182
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 392; //@line 26185
  $20 = $ReallocAsyncCtx + 4 | 0; //@line 26186
  HEAP32[$20 >> 2] = $14; //@line 26187
  $21 = $ReallocAsyncCtx + 8 | 0; //@line 26188
  HEAP32[$21 >> 2] = $4; //@line 26189
  $22 = $ReallocAsyncCtx + 12 | 0; //@line 26190
  HEAP32[$22 >> 2] = $8; //@line 26191
  $23 = $ReallocAsyncCtx + 16 | 0; //@line 26192
  HEAP32[$23 >> 2] = $10; //@line 26193
  $24 = $ReallocAsyncCtx + 20 | 0; //@line 26194
  HEAP32[$24 >> 2] = $12; //@line 26195
  sp = STACKTOP; //@line 26196
  return;
 }
 ___async_unwind = 0; //@line 26199
 HEAP32[$ReallocAsyncCtx >> 2] = 392; //@line 26200
 $20 = $ReallocAsyncCtx + 4 | 0; //@line 26201
 HEAP32[$20 >> 2] = $14; //@line 26202
 $21 = $ReallocAsyncCtx + 8 | 0; //@line 26203
 HEAP32[$21 >> 2] = $4; //@line 26204
 $22 = $ReallocAsyncCtx + 12 | 0; //@line 26205
 HEAP32[$22 >> 2] = $8; //@line 26206
 $23 = $ReallocAsyncCtx + 16 | 0; //@line 26207
 HEAP32[$23 >> 2] = $10; //@line 26208
 $24 = $ReallocAsyncCtx + 20 | 0; //@line 26209
 HEAP32[$24 >> 2] = $12; //@line 26210
 sp = STACKTOP; //@line 26211
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26316
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26322
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26324
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 26326
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26327
 __ZN4mbed6Ticker6detachEv($6); //@line 26328
 $10 = HEAP32[$9 >> 2] | 0; //@line 26329
 if (!$10) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26332
  _mbed_assert_internal(14775, 14780, 528); //@line 26333
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 109; //@line 26336
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 26337
   HEAP32[$12 >> 2] = $9; //@line 26338
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 26339
   HEAP32[$13 >> 2] = $8; //@line 26340
   sp = STACKTOP; //@line 26341
   return;
  }
  ___async_unwind = 0; //@line 26344
  HEAP32[$ReallocAsyncCtx4 >> 2] = 109; //@line 26345
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 26346
  HEAP32[$12 >> 2] = $9; //@line 26347
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 26348
  HEAP32[$13 >> 2] = $8; //@line 26349
  sp = STACKTOP; //@line 26350
  return;
 } else {
  $14 = HEAP32[$10 >> 2] | 0; //@line 26353
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 26354
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 26355
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 110; //@line 26358
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 26359
   HEAP32[$15 >> 2] = $9; //@line 26360
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 26361
   HEAP32[$16 >> 2] = $8; //@line 26362
   sp = STACKTOP; //@line 26363
   return;
  }
  ___async_unwind = 0; //@line 26366
  HEAP32[$ReallocAsyncCtx2 >> 2] = 110; //@line 26367
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 26368
  HEAP32[$15 >> 2] = $9; //@line 26369
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 26370
  HEAP32[$16 >> 2] = $8; //@line 26371
  sp = STACKTOP; //@line 26372
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_29($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19922
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19926
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19928
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19930
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19932
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19934
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19936
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19938
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19941
 $18 = $4 + 16 | 0; //@line 19942
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 19943
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 19943
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 19943
 _equeue_event_dtor($4, 287); //@line 19944
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 19945
 $19 = _equeue_post($8, 288, $4) | 0; //@line 19946
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 19949
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 19950
  HEAP32[$20 >> 2] = $10; //@line 19951
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 19952
  HEAP32[$21 >> 2] = $12; //@line 19953
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 19954
  HEAP32[$22 >> 2] = $14; //@line 19955
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 19956
  HEAP32[$23 >> 2] = $16; //@line 19957
  sp = STACKTOP; //@line 19958
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 19962
 ___async_unwind = 0; //@line 19963
 HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 19964
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 19965
 HEAP32[$20 >> 2] = $10; //@line 19966
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 19967
 HEAP32[$21 >> 2] = $12; //@line 19968
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 19969
 HEAP32[$22 >> 2] = $14; //@line 19970
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 19971
 HEAP32[$23 >> 2] = $16; //@line 19972
 sp = STACKTOP; //@line 19973
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_142($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $21 = 0, $22 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29780
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29782
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29784
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29786
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29790
 if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) == 2) {
  label = 6; //@line 29794
 } else {
  if (!(HEAP8[$2 + 15 >> 0] | 0)) {
   label = 6; //@line 29800
  }
 }
 if ((label | 0) == 6) {
  if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) != 2) {
   return;
  }
  if ((HEAP32[$2 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $21 = $10 + 2512 | 0; //@line 29816
 $22 = HEAP32[$21 >> 2] | 0; //@line 29817
 if (!$22) {
  return;
 }
 $26 = HEAP32[$10 + 3168 >> 2] | 0; //@line 29824
 $28 = HEAP32[$22 + 4 >> 2] | 0; //@line 29826
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 29827
 FUNCTION_TABLE_vii[$28 & 15]($4, $10 + 2500 | 0); //@line 29828
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 29831
  $29 = $ReallocAsyncCtx5 + 4 | 0; //@line 29832
  HEAP32[$29 >> 2] = $21; //@line 29833
  $30 = $ReallocAsyncCtx5 + 8 | 0; //@line 29834
  HEAP32[$30 >> 2] = $4; //@line 29835
  $31 = $ReallocAsyncCtx5 + 12 | 0; //@line 29836
  HEAP32[$31 >> 2] = $26; //@line 29837
  $32 = $ReallocAsyncCtx5 + 16 | 0; //@line 29838
  HEAP32[$32 >> 2] = $4; //@line 29839
  sp = STACKTOP; //@line 29840
  return;
 }
 ___async_unwind = 0; //@line 29843
 HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 29844
 $29 = $ReallocAsyncCtx5 + 4 | 0; //@line 29845
 HEAP32[$29 >> 2] = $21; //@line 29846
 $30 = $ReallocAsyncCtx5 + 8 | 0; //@line 29847
 HEAP32[$30 >> 2] = $4; //@line 29848
 $31 = $ReallocAsyncCtx5 + 12 | 0; //@line 29849
 HEAP32[$31 >> 2] = $26; //@line 29850
 $32 = $ReallocAsyncCtx5 + 16 | 0; //@line 29851
 HEAP32[$32 >> 2] = $4; //@line 29852
 sp = STACKTOP; //@line 29853
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5948
 STACKTOP = STACKTOP + 16 | 0; //@line 5949
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5949
 $1 = sp; //@line 5950
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 5952
 $4 = $1 + 12 | 0; //@line 5953
 HEAP32[$1 >> 2] = 12; //@line 5954
 HEAP32[$1 + 4 >> 2] = 0; //@line 5956
 HEAP32[$1 + 8 >> 2] = $0; //@line 5958
 HEAP32[$4 >> 2] = 848; //@line 5959
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5960
 $5 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($3, $1, 1) | 0; //@line 5961
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 200; //@line 5964
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 5966
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 5968
  sp = STACKTOP; //@line 5969
  STACKTOP = sp; //@line 5970
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5972
 $8 = HEAP32[$4 >> 2] | 0; //@line 5973
 do {
  if ($8 | 0) {
   $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 5978
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5979
   FUNCTION_TABLE_vi[$11 & 1023]($1); //@line 5980
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 201; //@line 5983
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5985
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5987
    sp = STACKTOP; //@line 5988
    STACKTOP = sp; //@line 5989
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5991
    break;
   }
  }
 } while (0);
 if ($5 | 0) {
  STACKTOP = sp; //@line 5998
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6000
 _mbed_assert_internal(11890, 11899, 548); //@line 6001
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 202; //@line 6004
  sp = STACKTOP; //@line 6005
  STACKTOP = sp; //@line 6006
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6008
 STACKTOP = sp; //@line 6009
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5844
 STACKTOP = STACKTOP + 16 | 0; //@line 5845
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5845
 $1 = sp; //@line 5846
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 5848
 $4 = $1 + 12 | 0; //@line 5849
 HEAP32[$1 >> 2] = 12; //@line 5850
 HEAP32[$1 + 4 >> 2] = 0; //@line 5852
 HEAP32[$1 + 8 >> 2] = $0; //@line 5854
 HEAP32[$4 >> 2] = 848; //@line 5855
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5856
 $5 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($3, $1, 0) | 0; //@line 5857
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 194; //@line 5860
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 5862
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 5864
  sp = STACKTOP; //@line 5865
  STACKTOP = sp; //@line 5866
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5868
 $8 = HEAP32[$4 >> 2] | 0; //@line 5869
 do {
  if ($8 | 0) {
   $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 5874
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5875
   FUNCTION_TABLE_vi[$11 & 1023]($1); //@line 5876
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 195; //@line 5879
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5881
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5883
    sp = STACKTOP; //@line 5884
    STACKTOP = sp; //@line 5885
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5887
    break;
   }
  }
 } while (0);
 if ($5 | 0) {
  STACKTOP = sp; //@line 5894
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5896
 _mbed_assert_internal(11890, 11899, 533); //@line 5897
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 196; //@line 5900
  sp = STACKTOP; //@line 5901
  STACKTOP = sp; //@line 5902
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5904
 STACKTOP = sp; //@line 5905
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_155($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $33 = 0, $4 = 0, $41 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 604
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 606
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 608
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 610
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 612
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 614
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 616
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 618
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 620
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 622
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 624
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 626
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 628
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0) {
   HEAP32[$8 + 2076 >> 2] = 4; //@line 636
   HEAP8[$8 + 2080 >> 0] = 1; //@line 638
   __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 639
  }
 } else {
  HEAP32[$4 >> 2] = 1; //@line 642
 }
 if ($6 << 24 >> 24 == 7) {
  $31 = $8 + 1442 | 0; //@line 646
  $33 = HEAPU8[$10 >> 0] | 0; //@line 648
  _memcpy($31 | 0, $12 + $33 | 0, $14 | 0) | 0; //@line 650
  HEAP32[$8 + 2016 >> 2] = 3; //@line 652
  HEAP32[$4 >> 2] = 0; //@line 653
  HEAP32[$16 >> 2] = $31; //@line 654
  HEAP16[$18 >> 1] = $14 - $33; //@line 657
 }
 if (!(HEAP8[$20 >> 0] | 0)) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 665
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($24, $8 + 1856 | 0); //@line 666
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 381; //@line 669
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 670
  HEAP32[$41 >> 2] = $22; //@line 671
  sp = STACKTOP; //@line 672
  return;
 }
 ___async_unwind = 0; //@line 675
 HEAP32[$ReallocAsyncCtx4 >> 2] = 381; //@line 676
 $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 677
 HEAP32[$41 >> 2] = $22; //@line 678
 sp = STACKTOP; //@line 679
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $28 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16073
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $28 = -1002; //@line 16077
  return $28 | 0; //@line 16078
 }
 $5 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16081
 $6 = HEAP8[$1 >> 0] | 0; //@line 16082
 if (($6 & 255) > ($5 & 255)) {
  $28 = -1003; //@line 16085
  return $28 | 0; //@line 16086
 }
 if (!($6 << 24 >> 24)) {
  $28 = 0; //@line 16090
  return $28 | 0; //@line 16091
 }
 $9 = $1 + 4 | 0; //@line 16093
 $$016 = 0; //@line 16094
 while (1) {
  $13 = $$016 & 255; //@line 16096
  $14 = HEAP32[$0 >> 2] | 0; //@line 16097
  $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 16100
  $18 = HEAP32[$9 >> 2] | 0; //@line 16101
  $21 = HEAP8[$18 + ($13 << 4) >> 0] | 0; //@line 16104
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 16105
  $22 = FUNCTION_TABLE_iiii[$17 & 31]($14, $18 + ($13 << 4) + 4 | 0, $21) | 0; //@line 16106
  if (___async) {
   label = 7; //@line 16109
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16112
  $12 = $$016 + 1 << 24 >> 24; //@line 16114
  if ($22 | 0) {
   $28 = $22; //@line 16116
   label = 9; //@line 16117
   break;
  }
  if (($12 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$016 = $12; //@line 16123
  } else {
   $28 = 0; //@line 16125
   label = 9; //@line 16126
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 468; //@line 16131
  HEAP8[$AsyncCtx + 4 >> 0] = $$016; //@line 16133
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 16135
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 16137
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 16139
  sp = STACKTOP; //@line 16140
  return 0; //@line 16141
 } else if ((label | 0) == 9) {
  return $28 | 0; //@line 16144
 }
 return 0; //@line 16146
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 11864
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 11870
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 11876
   } else {
    $7 = $1 & 255; //@line 11878
    $$03039 = $0; //@line 11879
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 11881
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 11886
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 11889
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 11894
      break;
     } else {
      $$03039 = $13; //@line 11897
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 11901
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 11902
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 11910
     $25 = $18; //@line 11910
     while (1) {
      $24 = $25 ^ $17; //@line 11912
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 11919
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 11922
      $25 = HEAP32[$31 >> 2] | 0; //@line 11923
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 11932
       break;
      } else {
       $$02936 = $31; //@line 11930
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 11937
    }
   } while (0);
   $38 = $1 & 255; //@line 11940
   $$1 = $$029$lcssa; //@line 11941
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 11943
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 11949
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 11952
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 11957
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_151($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 190
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 192
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 194
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 196
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 198
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 200
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 202
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 204
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 206
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2020 >> 2] = 1; //@line 212
  return;
 }
 if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0) {
  HEAP32[$4 + 2076 >> 2] = 4; //@line 218
  HEAP8[$4 + 2080 >> 0] = 1; //@line 220
  __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 221
 }
 $26 = $10 & 255; //@line 226
 $27 = $4 + 1442 | 0; //@line 227
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 228
 $28 = __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($4 + 756 | 0, $6 + $8 | 0, $26, $12, 128, $14, 1, $16, $27) | 0; //@line 229
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 376; //@line 232
  $29 = $ReallocAsyncCtx + 4 | 0; //@line 233
  HEAP32[$29 >> 2] = $4; //@line 234
  $30 = $ReallocAsyncCtx + 8 | 0; //@line 235
  HEAP32[$30 >> 2] = $27; //@line 236
  $31 = $ReallocAsyncCtx + 12 | 0; //@line 237
  HEAP16[$31 >> 1] = $26; //@line 238
  sp = STACKTOP; //@line 239
  return;
 }
 HEAP32[___async_retval >> 2] = $28; //@line 243
 ___async_unwind = 0; //@line 244
 HEAP32[$ReallocAsyncCtx >> 2] = 376; //@line 245
 $29 = $ReallocAsyncCtx + 4 | 0; //@line 246
 HEAP32[$29 >> 2] = $4; //@line 247
 $30 = $ReallocAsyncCtx + 8 | 0; //@line 248
 HEAP32[$30 >> 2] = $27; //@line 249
 $31 = $ReallocAsyncCtx + 12 | 0; //@line 250
 HEAP16[$31 >> 1] = $26; //@line 251
 sp = STACKTOP; //@line 252
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $31 = 0, label = 0;
 $14 = $8 & 1; //@line 246
 $15 = $9 & 1; //@line 247
 $16 = $10 & 1; //@line 248
 $17 = $12 & 1; //@line 249
 HEAP8[$0 + 689 >> 0] = $1; //@line 252
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 256
   HEAP32[$0 + 700 >> 2] = $3; //@line 258
   HEAP32[$0 + 704 >> 2] = $4; //@line 260
   HEAP32[$0 + 712 >> 2] = $5; //@line 262
   HEAP16[$0 + 716 >> 1] = $7; //@line 264
   HEAP8[$0 + 718 >> 0] = $14; //@line 266
   HEAP8[$0 + 720 >> 0] = $15; //@line 268
   HEAP8[$0 + 721 >> 0] = $17; //@line 270
   HEAP32[$0 + 724 >> 2] = $13; //@line 272
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 278
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $31 = $4 + 7 | 0; //@line 284
   HEAP32[$0 + 752 >> 2] = $31; //@line 286
   HEAP32[$0 + 756 >> 2] = $5; //@line 288
   HEAP8[$0 + 761 >> 0] = $6; //@line 290
   HEAP16[$0 + 762 >> 1] = $7; //@line 292
   HEAP8[$0 + 764 >> 0] = $14; //@line 294
   HEAP8[$0 + 767 >> 0] = $16; //@line 296
   HEAP8[$0 + 768 >> 0] = $11; //@line 298
   HEAP8[$0 + 766 >> 0] = $15; //@line 300
   HEAP8[$0 + 769 >> 0] = $17; //@line 302
   HEAP32[$0 + 772 >> 2] = $13; //@line 304
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 306
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 314
   } else {
    if (($31 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 320
    } else {
     $$sink = 0; //@line 322
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 326
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 329
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 16442
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 16445
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 16446
  $$sink = $26 & 1; //@line 16447
  HEAP8[$0 >> 0] = $$sink; //@line 16448
  $27 = $0 + 3 | 0; //@line 16449
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 16450
  return;
 } else {
  $$01315 = 0; //@line 16453
  $$016 = 0; //@line 16453
  $5 = 0; //@line 16453
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 16457
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 16460
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 16464
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 16471
    $$1 = $$016 + 2 << 24 >> 24; //@line 16472
    $$114 = $7; //@line 16472
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 16479
    $$1 = $$016 + 1 << 24 >> 24; //@line 16480
    $$114 = $$01315; //@line 16480
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 16486
    $$114 = $5 + 2 & 255; //@line 16486
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 16491
    $$114 = $$01315 + 1 << 24 >> 24; //@line 16491
    break;
   }
  default:
   {
    $$1 = $$016; //@line 16495
    $$114 = $$01315; //@line 16495
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 16498
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 16502
   $$016 = $$1; //@line 16502
   $5 = $23 & 255; //@line 16502
  } else {
   $$0$lcssa = $$1; //@line 16504
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 16508
 $$sink = $26 & 1; //@line 16509
 HEAP8[$0 >> 0] = $$sink; //@line 16510
 $27 = $0 + 3 | 0; //@line 16511
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 16512
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 11606
 $4 = HEAP32[$3 >> 2] | 0; //@line 11607
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 11614
   label = 5; //@line 11615
  } else {
   $$1 = 0; //@line 11617
  }
 } else {
  $12 = $4; //@line 11621
  label = 5; //@line 11622
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 11626
   $10 = HEAP32[$9 >> 2] | 0; //@line 11627
   $14 = $10; //@line 11630
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 11635
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 11643
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 11647
       $$141 = $0; //@line 11647
       $$143 = $1; //@line 11647
       $31 = $14; //@line 11647
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 11650
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 11657
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 11662
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 11665
      break L5;
     }
     $$139 = $$038; //@line 11671
     $$141 = $0 + $$038 | 0; //@line 11671
     $$143 = $1 - $$038 | 0; //@line 11671
     $31 = HEAP32[$9 >> 2] | 0; //@line 11671
    } else {
     $$139 = 0; //@line 11673
     $$141 = $0; //@line 11673
     $$143 = $1; //@line 11673
     $31 = $14; //@line 11673
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 11676
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 11679
   $$1 = $$139 + $$143 | 0; //@line 11681
  }
 } while (0);
 return $$1 | 0; //@line 11684
}
function __ZN7LoRaMac13clear_tx_pipeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14499
 STACKTOP = STACKTOP + 16 | 0; //@line 14500
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14500
 $vararg_buffer = sp; //@line 14501
 if ((__ZN6events10EventQueue9time_leftEi(HEAP32[$0 + 1992 >> 2] | 0, HEAP32[$0 + 1812 >> 2] | 0) | 0) <= 0) {
  $$0 = -1e3; //@line 14509
  STACKTOP = sp; //@line 14510
  return $$0 | 0; //@line 14510
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14513
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1796 | 0); //@line 14514
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 430; //@line 14517
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 14519
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14521
  HEAP32[$AsyncCtx3 + 12 >> 2] = $vararg_buffer; //@line 14523
  HEAP32[$AsyncCtx3 + 16 >> 2] = $vararg_buffer; //@line 14525
  sp = STACKTOP; //@line 14526
  STACKTOP = sp; //@line 14527
  return 0; //@line 14527
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14529
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14531
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 14532
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 431; //@line 14535
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14537
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14539
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 14541
  sp = STACKTOP; //@line 14542
  STACKTOP = sp; //@line 14543
  return 0; //@line 14543
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14545
 HEAP8[$0 + 2104 >> 0] = 0; //@line 14548
 _memset($0 + 1185 | 0, 0, 257) | 0; //@line 14550
 _memset($0 + 2115 | 0, 0, 259) | 0; //@line 14551
 _mbed_tracef(16, 12685, 13127, $vararg_buffer); //@line 14552
 $$0 = 0; //@line 14553
 STACKTOP = sp; //@line 14554
 return $$0 | 0; //@line 14554
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_298($0) {
 $0 = $0 | 0;
 var $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22277
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22279
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22281
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22283
 if (HEAP8[___async_retval >> 0] & 1) {
  return;
 }
 $8 = $4 + 2512 | 0; //@line 22290
 $9 = HEAP32[$8 >> 2] | 0; //@line 22291
 if (!$9) {
  HEAP32[$6 >> 2] = 2; //@line 22294
  return;
 }
 $13 = HEAP32[$4 + 3168 >> 2] | 0; //@line 22299
 $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 22301
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 22302
 FUNCTION_TABLE_vii[$15 & 15]($2, $4 + 2500 | 0); //@line 22303
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 221; //@line 22306
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 22307
  HEAP32[$16 >> 2] = $8; //@line 22308
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 22309
  HEAP32[$17 >> 2] = $2; //@line 22310
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 22311
  HEAP32[$18 >> 2] = $13; //@line 22312
  $19 = $ReallocAsyncCtx + 16 | 0; //@line 22313
  HEAP32[$19 >> 2] = $2; //@line 22314
  $20 = $ReallocAsyncCtx + 20 | 0; //@line 22315
  HEAP32[$20 >> 2] = $6; //@line 22316
  sp = STACKTOP; //@line 22317
  return;
 }
 ___async_unwind = 0; //@line 22320
 HEAP32[$ReallocAsyncCtx >> 2] = 221; //@line 22321
 $16 = $ReallocAsyncCtx + 4 | 0; //@line 22322
 HEAP32[$16 >> 2] = $8; //@line 22323
 $17 = $ReallocAsyncCtx + 8 | 0; //@line 22324
 HEAP32[$17 >> 2] = $2; //@line 22325
 $18 = $ReallocAsyncCtx + 12 | 0; //@line 22326
 HEAP32[$18 >> 2] = $13; //@line 22327
 $19 = $ReallocAsyncCtx + 16 | 0; //@line 22328
 HEAP32[$19 >> 2] = $2; //@line 22329
 $20 = $ReallocAsyncCtx + 20 | 0; //@line 22330
 HEAP32[$20 >> 2] = $6; //@line 22331
 sp = STACKTOP; //@line 22332
 return;
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2998
 if (!$0) {
  $$0 = -24832; //@line 3001
  return $$0 | 0; //@line 3002
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3004
 if (!$5) {
  $$0 = -24832; //@line 3007
  return $$0 | 0; //@line 3008
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 3019
   return $$0 | 0; //@line 3020
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 3024
 HEAP32[$0 + 8 >> 2] = $3; //@line 3026
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 3042
    return $$0 | 0; //@line 3043
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 3048
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 3050
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3051
   $33 = FUNCTION_TABLE_iiii[$30 & 31]($32, $1, $2) | 0; //@line 3052
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 567; //@line 3055
    sp = STACKTOP; //@line 3056
    return 0; //@line 3057
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3059
   $$0 = $33; //@line 3060
   return $$0 | 0; //@line 3061
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 3067
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 3069
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3070
 $25 = FUNCTION_TABLE_iiii[$22 & 31]($24, $1, $2) | 0; //@line 3071
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 566; //@line 3074
  sp = STACKTOP; //@line 3075
  return 0; //@line 3076
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3078
 $$0 = $25; //@line 3079
 return $$0 | 0; //@line 3080
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20406
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20408
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20414
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20416
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 20419
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 20422
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 20424
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 20426
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 20428
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 20430
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 20432
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 20434
 $27 = HEAP32[$2 >> 2] | 0; //@line 20435
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 20438
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 20442
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 20443
 FUNCTION_TABLE_vii[$30 & 15]($27, $34); //@line 20444
 if (!___async) {
  ___async_unwind = 0; //@line 20447
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 512; //@line 20449
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 20451
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 20453
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 20455
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 20458
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 20461
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 20463
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 20465
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 20467
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 20469
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 20471
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 20473
 sp = STACKTOP; //@line 20474
 return;
}
function _mbedtls_gcm_setkey__async_cb_130($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 29040
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29042
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29044
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29046
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29048
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29050
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29054
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 29057
 dest = $2; //@line 29058
 stop = dest + 16 | 0; //@line 29058
 do {
  HEAP8[dest >> 0] = 0; //@line 29058
  dest = dest + 1 | 0; //@line 29058
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 29059
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 29060
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 597; //@line 29063
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 29064
  HEAP32[$12 >> 2] = $2; //@line 29065
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 29066
  HEAP32[$13 >> 2] = $2; //@line 29067
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 29068
  HEAP32[$14 >> 2] = $8; //@line 29069
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 29070
  HEAP32[$15 >> 2] = $4; //@line 29071
  sp = STACKTOP; //@line 29072
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 29076
 ___async_unwind = 0; //@line 29077
 HEAP32[$ReallocAsyncCtx >> 2] = 597; //@line 29078
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 29079
 HEAP32[$12 >> 2] = $2; //@line 29080
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 29081
 HEAP32[$13 >> 2] = $2; //@line 29082
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 29083
 HEAP32[$14 >> 2] = $8; //@line 29084
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 29085
 HEAP32[$15 >> 2] = $4; //@line 29086
 sp = STACKTOP; //@line 29087
 return;
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $2 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10822
 STACKTOP = STACKTOP + 16 | 0; //@line 10823
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10823
 $2 = sp; //@line 10824
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10829
  STACKTOP = sp; //@line 10830
  return $$0 | 0; //@line 10830
 }
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  $$0 = -1013; //@line 10835
  STACKTOP = sp; //@line 10836
  return $$0 | 0; //@line 10836
 }
 $8 = $2 + 12 | 0; //@line 10838
 HEAP32[$2 >> 2] = 357; //@line 10839
 HEAP32[$2 + 4 >> 2] = 0; //@line 10841
 HEAP32[$2 + 8 >> 2] = $0; //@line 10843
 HEAP32[$8 >> 2] = 824; //@line 10844
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10845
 __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE($0, $1, $2); //@line 10846
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 358; //@line 10849
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 10851
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 10853
  sp = STACKTOP; //@line 10854
  STACKTOP = sp; //@line 10855
  return 0; //@line 10855
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10857
 $11 = HEAP32[$8 >> 2] | 0; //@line 10858
 if (!$11) {
  $$0 = 0; //@line 10861
  STACKTOP = sp; //@line 10862
  return $$0 | 0; //@line 10862
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 10865
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10866
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 10867
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 359; //@line 10870
  sp = STACKTOP; //@line 10871
  STACKTOP = sp; //@line 10872
  return 0; //@line 10872
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10874
 $$0 = 0; //@line 10875
 STACKTOP = sp; //@line 10876
 return $$0 | 0; //@line 10876
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_228($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5838
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5840
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5842
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5844
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5846
 HEAP8[$2 + 2548 >> 0] = 0; //@line 5848
 HEAP32[$4 >> 2] = 11; //@line 5849
 HEAP32[$6 >> 2] = -1011; //@line 5850
 $10 = $2 + 2904 | 0; //@line 5851
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -5; //@line 5854
 $13 = $2 + 2512 | 0; //@line 5855
 $14 = HEAP32[$13 >> 2] | 0; //@line 5856
 if (!$14) {
  return;
 }
 $18 = HEAP32[$2 + 3168 >> 2] | 0; //@line 5863
 $20 = HEAP32[$14 + 4 >> 2] | 0; //@line 5865
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 5866
 FUNCTION_TABLE_vii[$20 & 15]($8, $2 + 2500 | 0); //@line 5867
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 334; //@line 5870
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 5871
  HEAP32[$21 >> 2] = $13; //@line 5872
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 5873
  HEAP32[$22 >> 2] = $8; //@line 5874
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 5875
  HEAP32[$23 >> 2] = $18; //@line 5876
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 5877
  HEAP32[$24 >> 2] = $8; //@line 5878
  sp = STACKTOP; //@line 5879
  return;
 }
 ___async_unwind = 0; //@line 5882
 HEAP32[$ReallocAsyncCtx >> 2] = 334; //@line 5883
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 5884
 HEAP32[$21 >> 2] = $13; //@line 5885
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 5886
 HEAP32[$22 >> 2] = $8; //@line 5887
 $23 = $ReallocAsyncCtx + 12 | 0; //@line 5888
 HEAP32[$23 >> 2] = $18; //@line 5889
 $24 = $ReallocAsyncCtx + 16 | 0; //@line 5890
 HEAP32[$24 >> 2] = $8; //@line 5891
 sp = STACKTOP; //@line 5892
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_80($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25601
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25605
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25607
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25609
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25611
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25613
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25615
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25617
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 25620
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 25623
 _equeue_event_dtor($4, 256); //@line 25624
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 25625
 $20 = _equeue_post($8, 257, $4) | 0; //@line 25626
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 25629
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 25630
  HEAP32[$21 >> 2] = $10; //@line 25631
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 25632
  HEAP32[$22 >> 2] = $12; //@line 25633
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 25634
  HEAP32[$23 >> 2] = $14; //@line 25635
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 25636
  HEAP32[$24 >> 2] = $16; //@line 25637
  sp = STACKTOP; //@line 25638
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 25642
 ___async_unwind = 0; //@line 25643
 HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 25644
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 25645
 HEAP32[$21 >> 2] = $10; //@line 25646
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 25647
 HEAP32[$22 >> 2] = $12; //@line 25648
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 25649
 HEAP32[$23 >> 2] = $14; //@line 25650
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 25651
 HEAP32[$24 >> 2] = $16; //@line 25652
 sp = STACKTOP; //@line 25653
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_385($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29647
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29651
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29653
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29655
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29657
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29659
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29661
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29663
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29666
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 29669
 _equeue_event_dtor($4, 313); //@line 29670
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29671
 $20 = _equeue_post($8, 314, $4) | 0; //@line 29672
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 315; //@line 29675
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 29676
  HEAP32[$21 >> 2] = $10; //@line 29677
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 29678
  HEAP32[$22 >> 2] = $12; //@line 29679
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 29680
  HEAP32[$23 >> 2] = $14; //@line 29681
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 29682
  HEAP32[$24 >> 2] = $16; //@line 29683
  sp = STACKTOP; //@line 29684
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 29688
 ___async_unwind = 0; //@line 29689
 HEAP32[$ReallocAsyncCtx6 >> 2] = 315; //@line 29690
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 29691
 HEAP32[$21 >> 2] = $10; //@line 29692
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 29693
 HEAP32[$22 >> 2] = $12; //@line 29694
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 29695
 HEAP32[$23 >> 2] = $14; //@line 29696
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 29697
 HEAP32[$24 >> 2] = $16; //@line 29698
 sp = STACKTOP; //@line 29699
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_379($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29123
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29127
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29129
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29131
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29133
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29135
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29137
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29139
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29142
 HEAP8[$4 + 16 >> 0] = HEAP8[$6 >> 0] | 0; //@line 29145
 _equeue_event_dtor($4, 210); //@line 29146
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29147
 $20 = _equeue_post($8, 211, $4) | 0; //@line 29148
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 212; //@line 29151
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 29152
  HEAP32[$21 >> 2] = $10; //@line 29153
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 29154
  HEAP32[$22 >> 2] = $12; //@line 29155
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 29156
  HEAP32[$23 >> 2] = $14; //@line 29157
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 29158
  HEAP32[$24 >> 2] = $16; //@line 29159
  sp = STACKTOP; //@line 29160
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 29164
 ___async_unwind = 0; //@line 29165
 HEAP32[$ReallocAsyncCtx6 >> 2] = 212; //@line 29166
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 29167
 HEAP32[$21 >> 2] = $10; //@line 29168
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 29169
 HEAP32[$22 >> 2] = $12; //@line 29170
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 29171
 HEAP32[$23 >> 2] = $14; //@line 29172
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 29173
 HEAP32[$24 >> 2] = $16; //@line 29174
 sp = STACKTOP; //@line 29175
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_259($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $44 = 0, $54 = 0, $58 = 0, $6 = 0, $65 = 0, $66 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 8445
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8447
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8449
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8451
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2092 >> 2] = 13; //@line 8457
  return;
 }
 HEAP32[$2 + 1752 >> 2] = (HEAPU8[$2 + 1448 >> 0] | 0) << 16 | ((HEAPU8[$2 + 1447 >> 0] | 0) << 8 | (HEAPU8[$2 + 1446 >> 0] | 0)); //@line 8474
 HEAP32[$2 + 1756 >> 2] = (HEAPU8[$2 + 1452 >> 0] | 0) << 24 | ((HEAPU8[$2 + 1451 >> 0] | 0) << 16 | ((HEAPU8[$2 + 1450 >> 0] | 0) << 8 | (HEAPU8[$2 + 1449 >> 0] | 0))); //@line 8494
 $44 = HEAP8[$2 + 1453 >> 0] | 0; //@line 8496
 HEAP8[$2 + 1909 >> 0] = ($44 & 255) >>> 4 & 7; //@line 8502
 HEAP8[$2 + 1916 >> 0] = $44 & 15; //@line 8505
 $54 = HEAP8[$2 + 1454 >> 0] & 15; //@line 8508
 $58 = $54 << 24 >> 24 == 0 ? 1e3 : ($54 & 255) * 1e3 | 0; //@line 8513
 HEAP32[$2 + 1892 >> 2] = $58; //@line 8514
 HEAP32[$2 + 1896 >> 2] = $58 + 1e3; //@line 8517
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 8522
 __ZN7LoRaPHY13apply_cf_listEPKhh($2 + 4 | 0, $2 + 1455 | 0, $4 + 239 & 255); //@line 8523
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 371; //@line 8526
  $65 = $ReallocAsyncCtx4 + 4 | 0; //@line 8527
  HEAP32[$65 >> 2] = $2; //@line 8528
  $66 = $ReallocAsyncCtx4 + 8 | 0; //@line 8529
  HEAP32[$66 >> 2] = $6; //@line 8530
  sp = STACKTOP; //@line 8531
  return;
 }
 ___async_unwind = 0; //@line 8534
 HEAP32[$ReallocAsyncCtx4 >> 2] = 371; //@line 8535
 $65 = $ReallocAsyncCtx4 + 4 | 0; //@line 8536
 HEAP32[$65 >> 2] = $2; //@line 8537
 $66 = $ReallocAsyncCtx4 + 8 | 0; //@line 8538
 HEAP32[$66 >> 2] = $6; //@line 8539
 sp = STACKTOP; //@line 8540
 return;
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2605
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 2606
 if (!$4) {
  $$0 = -13; //@line 2609
  return $$0 | 0; //@line 2610
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 2616
  return $$0 | 0; //@line 2617
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2619
 _mbedtls_cipher_free($0); //@line 2620
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 557; //@line 2623
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 2625
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 2627
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 2629
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 2631
  sp = STACKTOP; //@line 2632
  return 0; //@line 2633
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2635
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2636
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 2637
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 558; //@line 2640
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2642
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 2644
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2646
  sp = STACKTOP; //@line 2647
  return 0; //@line 2648
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2650
 if ($13 | 0) {
  $$0 = $13; //@line 2653
  return $$0 | 0; //@line 2654
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2656
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 2657
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 559; //@line 2660
  sp = STACKTOP; //@line 2661
  return 0; //@line 2662
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2664
 $$0 = $18; //@line 2665
 return $$0 | 0; //@line 2666
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_173($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1693
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1695
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1697
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1699
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 1701
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1703
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1705
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1707
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1709
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 1712
  $17 = _mbedtls_cipher_cmac_starts($2, $4, $6) | 0; //@line 1713
  if (!___async) {
   HEAP32[___async_retval >> 2] = $17; //@line 1717
   ___async_unwind = 0; //@line 1718
  }
  HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 1720
  HEAP16[$ReallocAsyncCtx + 4 >> 1] = $8; //@line 1722
  HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 1724
  HEAP32[$ReallocAsyncCtx + 12 >> 2] = $10; //@line 1726
  HEAP32[$ReallocAsyncCtx + 16 >> 2] = $12; //@line 1728
  HEAP32[$ReallocAsyncCtx + 20 >> 2] = $14; //@line 1730
  sp = STACKTOP; //@line 1731
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1734
 _mbedtls_cipher_free($2); //@line 1735
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 1738
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 1739
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 1740
  sp = STACKTOP; //@line 1741
  return;
 }
 ___async_unwind = 0; //@line 1744
 HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 1745
 $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 1746
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 1747
 sp = STACKTOP; //@line 1748
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_362($0) {
 $0 = $0 | 0;
 var $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27601
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27603
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27605
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27607
 $9 = HEAP8[$2 >> 0] | 0; //@line 27610
 if (!($9 & 1)) {
  $20 = $9; //@line 27614
 } else {
  if (!(HEAP8[$4 + 1936 >> 0] | 0)) {
   $20 = $9; //@line 27620
  } else {
   _mbed_tracef(16, 12685, 13100, $6); //@line 27622
   $16 = $4 + 1877 | 0; //@line 27624
   HEAP8[$16 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa($4 + 4 | 0, HEAP8[$16 >> 0] | 0) | 0; //@line 27627
   $20 = HEAP8[$2 >> 0] | 0; //@line 27629
  }
 }
 $19 = $4 + 2063 | 0; //@line 27632
 HEAP8[$19 >> 0] = $20; //@line 27633
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 27634
 $21 = __ZN7LoRaMac21handle_retransmissionEv($4) | 0; //@line 27635
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 427; //@line 27638
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 27639
  HEAP32[$22 >> 2] = $2; //@line 27640
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 27641
  HEAP32[$23 >> 2] = $4; //@line 27642
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 27643
  HEAP32[$24 >> 2] = $19; //@line 27644
  sp = STACKTOP; //@line 27645
  return;
 }
 HEAP32[___async_retval >> 2] = $21; //@line 27649
 ___async_unwind = 0; //@line 27650
 HEAP32[$ReallocAsyncCtx3 >> 2] = 427; //@line 27651
 $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 27652
 HEAP32[$22 >> 2] = $2; //@line 27653
 $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 27654
 HEAP32[$23 >> 2] = $4; //@line 27655
 $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 27656
 HEAP32[$24 >> 2] = $19; //@line 27657
 sp = STACKTOP; //@line 27658
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_218($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5177
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5179
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5181
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5183
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5185
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5187
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5189
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5191
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5193
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 5196
  $17 = _mbedtls_cipher_cmac_starts($4, $12, $14) | 0; //@line 5197
  if (!___async) {
   HEAP32[___async_retval >> 2] = $17; //@line 5201
   ___async_unwind = 0; //@line 5202
  }
  HEAP32[$ReallocAsyncCtx >> 2] = 482; //@line 5204
  HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 5206
  HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 5208
  HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 5210
  HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 5212
  HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 5214
  sp = STACKTOP; //@line 5215
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 5218
 _mbedtls_cipher_free($4); //@line 5219
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 5222
  $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 5223
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 5224
  sp = STACKTOP; //@line 5225
  return;
 }
 ___async_unwind = 0; //@line 5228
 HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 5229
 $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 5230
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 5231
 sp = STACKTOP; //@line 5232
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 365
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 368
  HEAP32[$21 >> 2] = 0; //@line 369
  return;
 }
 $4 = $1 + 12 | 0; //@line 372
 $5 = HEAP32[$4 >> 2] | 0; //@line 373
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 378
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 379
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 380
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 546; //@line 383
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 385
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 387
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 389
    sp = STACKTOP; //@line 390
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 393
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 398
 $13 = HEAP32[$12 >> 2] | 0; //@line 399
 do {
  if (!$13) {
   $20 = 0; //@line 403
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 406
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 407
   FUNCTION_TABLE_vii[$16 & 15]($1, $2); //@line 408
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 547; //@line 411
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 413
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 415
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 417
    sp = STACKTOP; //@line 418
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 421
    $20 = HEAP32[$12 >> 2] | 0; //@line 423
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 428
 $21 = $1 + 16 | 0; //@line 429
 HEAP32[$21 >> 2] = 0; //@line 430
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_140($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29714
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29718
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29720
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29721
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 29725
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 29726
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 29727
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 242; //@line 29730
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 29731
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29732
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 29733
   HEAP32[$11 >> 2] = $4; //@line 29734
   sp = STACKTOP; //@line 29735
   return;
  }
  ___async_unwind = 0; //@line 29738
  HEAP32[$ReallocAsyncCtx2 >> 2] = 242; //@line 29739
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 29740
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29741
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 29742
  HEAP32[$11 >> 2] = $4; //@line 29743
  sp = STACKTOP; //@line 29744
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 29751
 _mbed_assert_internal(11890, 11899, 778); //@line 29752
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 243; //@line 29755
  $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 29756
  HEAP32[$13 >> 2] = $4; //@line 29757
  sp = STACKTOP; //@line 29758
  return;
 }
 ___async_unwind = 0; //@line 29761
 HEAP32[$ReallocAsyncCtx12 >> 2] = 243; //@line 29762
 $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 29763
 HEAP32[$13 >> 2] = $4; //@line 29764
 sp = STACKTOP; //@line 29765
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_138($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29495
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29499
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29501
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29502
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 29506
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 29507
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 29508
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 250; //@line 29511
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 29512
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29513
   $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 29514
   HEAP32[$11 >> 2] = $4; //@line 29515
   sp = STACKTOP; //@line 29516
   return;
  }
  ___async_unwind = 0; //@line 29519
  HEAP32[$ReallocAsyncCtx6 >> 2] = 250; //@line 29520
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 29521
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29522
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 29523
  HEAP32[$11 >> 2] = $4; //@line 29524
  sp = STACKTOP; //@line 29525
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 29532
 _mbed_assert_internal(11890, 11899, 778); //@line 29533
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 251; //@line 29536
  $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 29537
  HEAP32[$13 >> 2] = $4; //@line 29538
  sp = STACKTOP; //@line 29539
  return;
 }
 ___async_unwind = 0; //@line 29542
 HEAP32[$ReallocAsyncCtx10 >> 2] = 251; //@line 29543
 $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 29544
 HEAP32[$13 >> 2] = $4; //@line 29545
 sp = STACKTOP; //@line 29546
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_116($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28031
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28035
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28037
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28038
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 28042
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 28043
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 28044
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 230; //@line 28047
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 28048
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 28049
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 28050
   HEAP32[$11 >> 2] = $4; //@line 28051
   sp = STACKTOP; //@line 28052
   return;
  }
  ___async_unwind = 0; //@line 28055
  HEAP32[$ReallocAsyncCtx2 >> 2] = 230; //@line 28056
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 28057
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 28058
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 28059
  HEAP32[$11 >> 2] = $4; //@line 28060
  sp = STACKTOP; //@line 28061
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 28068
 _mbed_assert_internal(11890, 11899, 778); //@line 28069
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 231; //@line 28072
  $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 28073
  HEAP32[$13 >> 2] = $4; //@line 28074
  sp = STACKTOP; //@line 28075
  return;
 }
 ___async_unwind = 0; //@line 28078
 HEAP32[$ReallocAsyncCtx12 >> 2] = 231; //@line 28079
 $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 28080
 HEAP32[$13 >> 2] = $4; //@line 28081
 sp = STACKTOP; //@line 28082
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_115($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27974
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27978
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27980
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27981
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 27985
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27986
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 27987
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 234; //@line 27990
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 27991
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 27992
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 27993
   HEAP32[$11 >> 2] = $4; //@line 27994
   sp = STACKTOP; //@line 27995
   return;
  }
  ___async_unwind = 0; //@line 27998
  HEAP32[$ReallocAsyncCtx4 >> 2] = 234; //@line 27999
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 28000
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 28001
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 28002
  HEAP32[$11 >> 2] = $4; //@line 28003
  sp = STACKTOP; //@line 28004
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 28011
 _mbed_assert_internal(11890, 11899, 778); //@line 28012
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 235; //@line 28015
  $13 = $ReallocAsyncCtx11 + 4 | 0; //@line 28016
  HEAP32[$13 >> 2] = $4; //@line 28017
  sp = STACKTOP; //@line 28018
  return;
 }
 ___async_unwind = 0; //@line 28021
 HEAP32[$ReallocAsyncCtx11 >> 2] = 235; //@line 28022
 $13 = $ReallocAsyncCtx11 + 4 | 0; //@line 28023
 HEAP32[$13 >> 2] = $4; //@line 28024
 sp = STACKTOP; //@line 28025
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_114($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27917
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27921
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27923
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27924
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 27928
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 27929
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 27930
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 238; //@line 27933
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 27934
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 27935
   $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 27936
   HEAP32[$11 >> 2] = $4; //@line 27937
   sp = STACKTOP; //@line 27938
   return;
  }
  ___async_unwind = 0; //@line 27941
  HEAP32[$ReallocAsyncCtx6 >> 2] = 238; //@line 27942
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 27943
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 27944
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 27945
  HEAP32[$11 >> 2] = $4; //@line 27946
  sp = STACKTOP; //@line 27947
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 27954
 _mbed_assert_internal(11890, 11899, 778); //@line 27955
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 239; //@line 27958
  $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 27959
  HEAP32[$13 >> 2] = $4; //@line 27960
  sp = STACKTOP; //@line 27961
  return;
 }
 ___async_unwind = 0; //@line 27964
 HEAP32[$ReallocAsyncCtx10 >> 2] = 239; //@line 27965
 $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 27966
 HEAP32[$13 >> 2] = $4; //@line 27967
 sp = STACKTOP; //@line 27968
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_340($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26320
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26324
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26326
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26327
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 26331
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 26332
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 26333
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 307; //@line 26336
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 26337
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 26338
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 26339
   HEAP32[$11 >> 2] = $4; //@line 26340
   sp = STACKTOP; //@line 26341
   return;
  }
  ___async_unwind = 0; //@line 26344
  HEAP32[$ReallocAsyncCtx2 >> 2] = 307; //@line 26345
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 26346
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 26347
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 26348
  HEAP32[$11 >> 2] = $4; //@line 26349
  sp = STACKTOP; //@line 26350
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 26357
 _mbed_assert_internal(11890, 11899, 778); //@line 26358
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 308; //@line 26361
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 26362
  HEAP32[$13 >> 2] = $4; //@line 26363
  sp = STACKTOP; //@line 26364
  return;
 }
 ___async_unwind = 0; //@line 26367
 HEAP32[$ReallocAsyncCtx4 >> 2] = 308; //@line 26368
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 26369
 HEAP32[$13 >> 2] = $4; //@line 26370
 sp = STACKTOP; //@line 26371
 return;
}
function __ZN7LoRaMac15send_ongoing_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8922
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8924
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8926
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8928
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8930
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8932
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 8936
  return;
 }
 HEAP8[$2 + 2063 >> 0] = 0; //@line 8940
 HEAP8[$2 + 2062 >> 0] = 0; //@line 8942
 HEAP32[$2 + 2068 >> 2] = HEAP32[$2 + 1760 >> 2]; //@line 8946
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 8947
 $16 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 8948
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 435; //@line 8951
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 8952
  HEAP32[$17 >> 2] = $4; //@line 8953
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 8954
  HEAP32[$18 >> 2] = $8; //@line 8955
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 8956
  HEAP32[$19 >> 2] = $2; //@line 8957
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 8958
  HEAP32[$20 >> 2] = $6; //@line 8959
  sp = STACKTOP; //@line 8960
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 8964
 ___async_unwind = 0; //@line 8965
 HEAP32[$ReallocAsyncCtx2 >> 2] = 435; //@line 8966
 $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 8967
 HEAP32[$17 >> 2] = $4; //@line 8968
 $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 8969
 HEAP32[$18 >> 2] = $8; //@line 8970
 $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 8971
 HEAP32[$19 >> 2] = $2; //@line 8972
 $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 8973
 HEAP32[$20 >> 2] = $6; //@line 8974
 sp = STACKTOP; //@line 8975
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_313($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 22968
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22972
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22974
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22975
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22979
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22980
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22981
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 302; //@line 22984
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 22985
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22986
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 22987
   HEAP32[$11 >> 2] = $4; //@line 22988
   sp = STACKTOP; //@line 22989
   return;
  }
  ___async_unwind = 0; //@line 22992
  HEAP32[$ReallocAsyncCtx4 >> 2] = 302; //@line 22993
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 22994
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22995
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 22996
  HEAP32[$11 >> 2] = $4; //@line 22997
  sp = STACKTOP; //@line 22998
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 23005
 _mbed_assert_internal(11890, 11899, 778); //@line 23006
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 303; //@line 23009
  $13 = $ReallocAsyncCtx9 + 4 | 0; //@line 23010
  HEAP32[$13 >> 2] = $4; //@line 23011
  sp = STACKTOP; //@line 23012
  return;
 }
 ___async_unwind = 0; //@line 23015
 HEAP32[$ReallocAsyncCtx9 >> 2] = 303; //@line 23016
 $13 = $ReallocAsyncCtx9 + 4 | 0; //@line 23017
 HEAP32[$13 >> 2] = $4; //@line 23018
 sp = STACKTOP; //@line 23019
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_40($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20681
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20683
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20687
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20689
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20691
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20693
 $13 = HEAP32[$2 >> 2] | 0; //@line 20694
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 20697
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 20699
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 20700
 $19 = FUNCTION_TABLE_iiii[$16 & 31]($13, $6, $18) | 0; //@line 20701
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 516; //@line 20704
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 20705
  HEAP32[$20 >> 2] = $8; //@line 20706
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 20707
  HEAP32[$21 >> 2] = $2; //@line 20708
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 20709
  HEAP32[$22 >> 2] = $10; //@line 20710
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 20711
  HEAP32[$23 >> 2] = $12; //@line 20712
  sp = STACKTOP; //@line 20713
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 20717
 ___async_unwind = 0; //@line 20718
 HEAP32[$ReallocAsyncCtx6 >> 2] = 516; //@line 20719
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 20720
 HEAP32[$20 >> 2] = $8; //@line 20721
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 20722
 HEAP32[$21 >> 2] = $2; //@line 20723
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 20724
 HEAP32[$22 >> 2] = $10; //@line 20725
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 20726
 HEAP32[$23 >> 2] = $12; //@line 20727
 sp = STACKTOP; //@line 20728
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_4($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18110
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18112
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18114
 $AsyncRetVal = HEAP16[___async_retval >> 1] | 0; //@line 18116
 $6 = $2 + 2496 | 0; //@line 18117
 switch (HEAP32[$6 >> 2] | 0) {
 case 5:
 case 2:
  {
   break;
  }
 default:
  {
   if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
    HEAP16[___async_retval >> 1] = -1e3 == 0 ? $AsyncRetVal : -1e3 & 65535; //@line 18131
    return;
   }
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 18136
 $10 = __ZN7LoRaMac15send_ongoing_txEv($4) | 0; //@line 18137
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 354; //@line 18140
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 18141
  HEAP32[$11 >> 2] = $2; //@line 18142
  $12 = $ReallocAsyncCtx + 8 | 0; //@line 18143
  HEAP32[$12 >> 2] = $4; //@line 18144
  $13 = $ReallocAsyncCtx + 12 | 0; //@line 18145
  HEAP32[$13 >> 2] = $6; //@line 18146
  $14 = $ReallocAsyncCtx + 16 | 0; //@line 18147
  HEAP16[$14 >> 1] = $AsyncRetVal; //@line 18148
  sp = STACKTOP; //@line 18149
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 18153
 ___async_unwind = 0; //@line 18154
 HEAP32[$ReallocAsyncCtx >> 2] = 354; //@line 18155
 $11 = $ReallocAsyncCtx + 4 | 0; //@line 18156
 HEAP32[$11 >> 2] = $2; //@line 18157
 $12 = $ReallocAsyncCtx + 8 | 0; //@line 18158
 HEAP32[$12 >> 2] = $4; //@line 18159
 $13 = $ReallocAsyncCtx + 12 | 0; //@line 18160
 HEAP32[$13 >> 2] = $6; //@line 18161
 $14 = $ReallocAsyncCtx + 16 | 0; //@line 18162
 HEAP16[$14 >> 1] = $AsyncRetVal; //@line 18163
 sp = STACKTOP; //@line 18164
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_245($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6474
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6478
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6480
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6482
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6484
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6486
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6488
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6490
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 6493
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 6494
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 6510
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 6511
    if (!___async) {
     ___async_unwind = 0; //@line 6514
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 688; //@line 6516
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 6518
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 6520
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 6522
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 6524
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 6526
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 6528
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 6530
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 6532
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 6535
    sp = STACKTOP; //@line 6536
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_230($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5930
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5934
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5936
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5937
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 5941
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 5942
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 5943
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 336; //@line 5946
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 5947
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 5948
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 5949
   HEAP32[$11 >> 2] = $4; //@line 5950
   sp = STACKTOP; //@line 5951
   return;
  }
  ___async_unwind = 0; //@line 5954
  HEAP32[$ReallocAsyncCtx2 >> 2] = 336; //@line 5955
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 5956
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 5957
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 5958
  HEAP32[$11 >> 2] = $4; //@line 5959
  sp = STACKTOP; //@line 5960
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 5967
 _mbed_assert_internal(11890, 11899, 778); //@line 5968
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 5971
  $13 = $ReallocAsyncCtx6 + 4 | 0; //@line 5972
  HEAP32[$13 >> 2] = $4; //@line 5973
  sp = STACKTOP; //@line 5974
  return;
 }
 ___async_unwind = 0; //@line 5977
 HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 5978
 $13 = $ReallocAsyncCtx6 + 4 | 0; //@line 5979
 HEAP32[$13 >> 2] = $4; //@line 5980
 sp = STACKTOP; //@line 5981
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_238($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6253
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6255
 $3 = $2 + 1176 | 0; //@line 6256
 HEAP32[$3 >> 2] = 10244; //@line 6257
 __ZN4mbed6Ticker6detachEv($3); //@line 6258
 $5 = HEAP32[$2 + 1228 >> 2] | 0; //@line 6260
 if (!$5) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 6263
  __ZN4mbed10TimerEventD2Ev($3); //@line 6264
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 69; //@line 6267
   $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 6268
   HEAP32[$12 >> 2] = $2; //@line 6269
   sp = STACKTOP; //@line 6270
   return;
  }
  ___async_unwind = 0; //@line 6273
  HEAP32[$ReallocAsyncCtx7 >> 2] = 69; //@line 6274
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 6275
  HEAP32[$12 >> 2] = $2; //@line 6276
  sp = STACKTOP; //@line 6277
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 6282
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 6283
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1216 | 0); //@line 6284
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 6287
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 6288
   HEAP32[$10 >> 2] = $2; //@line 6289
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 6290
   HEAP32[$11 >> 2] = $3; //@line 6291
   sp = STACKTOP; //@line 6292
   return;
  }
  ___async_unwind = 0; //@line 6295
  HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 6296
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 6297
  HEAP32[$10 >> 2] = $2; //@line 6298
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 6299
  HEAP32[$11 >> 2] = $3; //@line 6300
  sp = STACKTOP; //@line 6301
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_237($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6198
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6200
 $3 = $2 + 1112 | 0; //@line 6201
 HEAP32[$3 >> 2] = 10244; //@line 6202
 __ZN4mbed6Ticker6detachEv($3); //@line 6203
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 6205
 if (!$5) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 6208
  __ZN4mbed10TimerEventD2Ev($3); //@line 6209
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 71; //@line 6212
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 6213
   HEAP32[$12 >> 2] = $2; //@line 6214
   sp = STACKTOP; //@line 6215
   return;
  }
  ___async_unwind = 0; //@line 6218
  HEAP32[$ReallocAsyncCtx6 >> 2] = 71; //@line 6219
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 6220
  HEAP32[$12 >> 2] = $2; //@line 6221
  sp = STACKTOP; //@line 6222
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 6227
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 6228
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 6229
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 70; //@line 6232
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 6233
   HEAP32[$10 >> 2] = $2; //@line 6234
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 6235
   HEAP32[$11 >> 2] = $3; //@line 6236
   sp = STACKTOP; //@line 6237
   return;
  }
  ___async_unwind = 0; //@line 6240
  HEAP32[$ReallocAsyncCtx3 >> 2] = 70; //@line 6241
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 6242
  HEAP32[$10 >> 2] = $2; //@line 6243
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 6244
  HEAP32[$11 >> 2] = $3; //@line 6245
  sp = STACKTOP; //@line 6246
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_236($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6143
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6145
 $3 = $2 + 1048 | 0; //@line 6146
 HEAP32[$3 >> 2] = 10244; //@line 6147
 __ZN4mbed6Ticker6detachEv($3); //@line 6148
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 6150
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 6153
  __ZN4mbed10TimerEventD2Ev($3); //@line 6154
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 73; //@line 6157
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 6158
   HEAP32[$12 >> 2] = $2; //@line 6159
   sp = STACKTOP; //@line 6160
   return;
  }
  ___async_unwind = 0; //@line 6163
  HEAP32[$ReallocAsyncCtx5 >> 2] = 73; //@line 6164
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 6165
  HEAP32[$12 >> 2] = $2; //@line 6166
  sp = STACKTOP; //@line 6167
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 6172
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 6173
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 6174
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 72; //@line 6177
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 6178
   HEAP32[$10 >> 2] = $3; //@line 6179
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 6180
   HEAP32[$11 >> 2] = $2; //@line 6181
   sp = STACKTOP; //@line 6182
   return;
  }
  ___async_unwind = 0; //@line 6185
  HEAP32[$ReallocAsyncCtx4 >> 2] = 72; //@line 6186
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 6187
  HEAP32[$10 >> 2] = $3; //@line 6188
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 6189
  HEAP32[$11 >> 2] = $2; //@line 6190
  sp = STACKTOP; //@line 6191
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18732
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18734
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18736
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18738
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18740
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18742
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18744
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18746
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18748
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18750
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18752
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18754
 $25 = $4 + 1280 | 0; //@line 18755
 HEAP32[$25 >> 2] = 0; //@line 18756
 HEAP32[$25 + 4 >> 2] = 0; //@line 18756
 HEAP32[$25 + 8 >> 2] = 0; //@line 18756
 HEAP32[$25 + 12 >> 2] = 0; //@line 18756
 HEAP8[$4 + 1296 >> 0] = 1; //@line 18758
 HEAP32[$2 >> 2] = 620; //@line 18759
 HEAP32[$4 + 668 >> 2] = $6; //@line 18761
 HEAP32[$4 + 672 >> 2] = $8; //@line 18763
 HEAP32[$4 + 652 >> 2] = $10; //@line 18765
 HEAP32[$4 + 656 >> 2] = $12; //@line 18767
 HEAP32[$4 + 664 >> 2] = $14; //@line 18769
 HEAP32[$4 + 660 >> 2] = $16; //@line 18771
 HEAP32[$4 + 676 >> 2] = $18; //@line 18773
 HEAP32[$4 + 680 >> 2] = $20; //@line 18775
 HEAP32[$4 + 684 >> 2] = $22; //@line 18777
 HEAP32[$4 + 788 >> 2] = 0; //@line 18779
 if (($18 | 0) == -1) {
  $39 = _emscripten_asm_const_ii(5, $4 | 0) | 0; //@line 18782
  return;
 }
 _emscripten_asm_const_iii(4, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 18786
 $39 = _emscripten_asm_const_ii(5, $4 | 0) | 0; //@line 18787
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11492
 STACKTOP = STACKTOP + 16 | 0; //@line 11493
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11493
 $2 = sp; //@line 11494
 $3 = $1 & 255; //@line 11495
 HEAP8[$2 >> 0] = $3; //@line 11496
 $4 = $0 + 16 | 0; //@line 11497
 $5 = HEAP32[$4 >> 2] | 0; //@line 11498
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 11505
   label = 4; //@line 11506
  } else {
   $$0 = -1; //@line 11508
  }
 } else {
  $12 = $5; //@line 11511
  label = 4; //@line 11512
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 11516
   $10 = HEAP32[$9 >> 2] | 0; //@line 11517
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 11520
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 11527
     HEAP8[$10 >> 0] = $3; //@line 11528
     $$0 = $13; //@line 11529
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 11534
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11535
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 11536
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 656; //@line 11539
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 11541
    sp = STACKTOP; //@line 11542
    STACKTOP = sp; //@line 11543
    return 0; //@line 11543
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11545
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 11550
   } else {
    $$0 = -1; //@line 11552
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11556
 return $$0 | 0; //@line 11556
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_104($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 27396
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27398
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27400
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 27402
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 27404
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 27406
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 27408
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$4 + 2376 >> 0] | 0) {
    HEAP8[$4 + 2084 >> 0] = 0; //@line 27417
    return;
   }
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27420
   __ZN7LoRaMac24handle_join_accept_frameEPKht($4, $2, $6); //@line 27421
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 396; //@line 27424
    $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 27425
    HEAP32[$16 >> 2] = $4; //@line 27426
    sp = STACKTOP; //@line 27427
    return;
   }
   ___async_unwind = 0; //@line 27430
   HEAP32[$ReallocAsyncCtx2 >> 2] = 396; //@line 27431
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 27432
   HEAP32[$16 >> 2] = $4; //@line 27433
   sp = STACKTOP; //@line 27434
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 27439
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($4, $2, $6, 1, $trunc, $8, $10); //@line 27440
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 27443
    sp = STACKTOP; //@line 27444
    return;
   }
   ___async_unwind = 0; //@line 27447
   HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 27448
   sp = STACKTOP; //@line 27449
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_103($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 27330
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27332
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27334
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 27336
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 27338
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 27340
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 27342
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$4 + 2376 >> 0] | 0) {
    HEAP8[$4 + 2084 >> 0] = 0; //@line 27351
    return;
   }
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27354
   __ZN7LoRaMac24handle_join_accept_frameEPKht($4, $2, $6); //@line 27355
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 396; //@line 27358
    $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 27359
    HEAP32[$16 >> 2] = $4; //@line 27360
    sp = STACKTOP; //@line 27361
    return;
   }
   ___async_unwind = 0; //@line 27364
   HEAP32[$ReallocAsyncCtx2 >> 2] = 396; //@line 27365
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 27366
   HEAP32[$16 >> 2] = $4; //@line 27367
   sp = STACKTOP; //@line 27368
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 27373
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($4, $2, $6, 1, $trunc, $8, $10); //@line 27374
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 27377
    sp = STACKTOP; //@line 27378
    return;
   }
   ___async_unwind = 0; //@line 27381
   HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 27382
   sp = STACKTOP; //@line 27383
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4934
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4936
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4938
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4940
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4942
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4944
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4946
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 4949
  $13 = _mbedtls_cipher_cmac_update($4, $2, 16) | 0; //@line 4950
  if (!___async) {
   HEAP32[___async_retval >> 2] = $13; //@line 4954
   ___async_unwind = 0; //@line 4955
  }
  HEAP32[$ReallocAsyncCtx4 >> 2] = 483; //@line 4957
  HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $4; //@line 4959
  HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $6; //@line 4961
  HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $8; //@line 4963
  HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $2; //@line 4965
  HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 4967
  sp = STACKTOP; //@line 4968
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 4971
 _mbedtls_cipher_free($4); //@line 4972
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 4975
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 4976
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 4977
  sp = STACKTOP; //@line 4978
  return;
 }
 ___async_unwind = 0; //@line 4981
 HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 4982
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 4983
 HEAP32[$20 >> 2] = $AsyncRetVal; //@line 4984
 sp = STACKTOP; //@line 4985
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8379
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8381
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8383
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8385
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8387
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8389
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8391
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8393
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8395
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8397
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2092 >> 2] = 13; //@line 8403
  return;
 }
 HEAP8[$16 >> 0] = HEAP8[$14 >> 0] | 0; //@line 8407
 $23 = $10 + -4 | 0; //@line 8408
 $25 = HEAP32[$4 >> 2] | 0; //@line 8410
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 8411
 $26 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($6, $16, $23 & 65535, $25, 128, $12) | 0; //@line 8412
 if (!___async) {
  HEAP32[___async_retval >> 2] = $26; //@line 8416
  ___async_unwind = 0; //@line 8417
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 368; //@line 8419
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 8421
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $23; //@line 8423
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 8425
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 8427
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $18; //@line 8429
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $4; //@line 8431
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $6; //@line 8433
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $8; //@line 8435
 sp = STACKTOP; //@line 8436
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21582
 $1 = $0 + 4 | 0; //@line 21583
 $2 = HEAP32[$1 >> 2] | 0; //@line 21584
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 21587
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 21588
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 21589
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 539; //@line 21592
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 21594
  sp = STACKTOP; //@line 21595
  return 0; //@line 21596
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21598
 $7 = HEAP32[$1 >> 2] | 0; //@line 21599
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 21602
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21603
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 21604
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 540; //@line 21607
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 21609
  sp = STACKTOP; //@line 21610
  return 0; //@line 21611
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21613
 $13 = HEAP32[$1 >> 2] | 0; //@line 21614
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 21617
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21618
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 21619
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 541; //@line 21622
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 21624
  sp = STACKTOP; //@line 21625
  return 0; //@line 21626
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21628
  return $11 | 0; //@line 21629
 }
 return 0; //@line 21631
}
function __ZN12LoRaWANStack7connectEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 10126
 STACKTOP = STACKTOP + 16 | 0; //@line 10127
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10127
 $vararg_buffer1 = sp + 8 | 0; //@line 10128
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$1 = -1012; //@line 10134
  STACKTOP = sp; //@line 10135
  return $$1 | 0; //@line 10135
 }
 $4 = __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, 0, 0) | 0; //@line 10137
 if ($4 | 0) {
  $$1 = $4; //@line 10140
  STACKTOP = sp; //@line 10141
  return $$1 | 0; //@line 10141
 }
 _mbed_tracef(16, 11997, 12443, sp); //@line 10143
 $9 = HEAP32[$0 + 2556 >> 2] | 0; //@line 10147
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$0 + 2552 >> 2]; //@line 10148
 HEAP32[$vararg_buffer1 + 4 >> 2] = $9; //@line 10150
 _mbed_tracef(16, 11997, 12458, $vararg_buffer1); //@line 10151
 $10 = $0 + 2904 | 0; //@line 10152
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -9; //@line 10155
 HEAP32[$vararg_buffer1 >> 2] = 0; //@line 10156
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10157
 __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $vararg_buffer1); //@line 10158
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 347; //@line 10161
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer1; //@line 10163
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 10165
  sp = STACKTOP; //@line 10166
  STACKTOP = sp; //@line 10167
  return 0; //@line 10167
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10169
 $$1 = HEAP32[$vararg_buffer1 >> 2] | 0; //@line 10171
 STACKTOP = sp; //@line 10172
 return $$1 | 0; //@line 10172
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17902
 $2 = $0 + 260 | 0; //@line 17903
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 272 | 0; //@line 17908
 $5 = HEAP32[$4 >> 2] | 0; //@line 17909
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 17914
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 17915
   FUNCTION_TABLE_vi[$8 & 1023]($2); //@line 17916
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 479; //@line 17919
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 17921
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 17923
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 17925
    sp = STACKTOP; //@line 17926
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17929
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 17934
 $13 = HEAP32[$12 >> 2] | 0; //@line 17935
 do {
  if (!$13) {
   $19 = 0; //@line 17939
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 17942
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17943
   FUNCTION_TABLE_vii[$16 & 15]($2, $1); //@line 17944
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 480; //@line 17947
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 17949
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 17951
    sp = STACKTOP; //@line 17952
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17955
    $19 = HEAP32[$12 >> 2] | 0; //@line 17957
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 17962
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $16 = 0, $19 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21639
 $3 = $0 + 4 | 0; //@line 21640
 $4 = HEAP32[$3 >> 2] | 0; //@line 21641
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 21644
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 21645
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 21646
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 542; //@line 21649
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 21651
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 21653
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 21655
  sp = STACKTOP; //@line 21656
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21659
 $11 = HEAP32[$3 >> 2] | 0; //@line 21660
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 24 >> 2] | 0; //@line 21663
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21664
 FUNCTION_TABLE_viii[$14 & 7]($11, $1, $2); //@line 21665
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 543; //@line 21668
  HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 21670
  sp = STACKTOP; //@line 21671
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21674
 $16 = HEAP32[$3 >> 2] | 0; //@line 21675
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 76 >> 2] | 0; //@line 21678
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21679
 FUNCTION_TABLE_vi[$19 & 1023]($16); //@line 21680
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 544; //@line 21683
  sp = STACKTOP; //@line 21684
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21687
  return;
 }
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3622
 L1 : do {
  if (!$0) {
   $$0 = -24832; //@line 3626
  } else {
   if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
    $$0 = -24832; //@line 3633
   } else {
    $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3635
    $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 3636
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 579; //@line 3639
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 3641
     HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 3643
     sp = STACKTOP; //@line 3644
     return 0; //@line 3645
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3647
    if (!$7) {
     switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
     case 36:
     case 4:
     case 3:
     case 2:
      {
       break;
      }
     default:
      {
       $$0 = -24832; //@line 3657
       break L1;
      }
     }
     $13 = _calloc(1, 36) | 0; //@line 3661
     if (!$13) {
      $$0 = -24960; //@line 3664
     } else {
      HEAP32[$0 + 64 >> 2] = $13; //@line 3667
      $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3668
      _mbedtls_platform_zeroize($13, 16); //@line 3669
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 580; //@line 3672
       sp = STACKTOP; //@line 3673
       return 0; //@line 3674
      } else {
       _emscripten_free_async_context($AsyncCtx | 0); //@line 3676
       $$0 = 0; //@line 3677
       break;
      }
     }
    } else {
     $$0 = $7; //@line 3682
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 3687
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 31222
 value = value & 255; //@line 31224
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 31227
   ptr = ptr + 1 | 0; //@line 31228
  }
  aligned_end = end & -4 | 0; //@line 31231
  block_aligned_end = aligned_end - 64 | 0; //@line 31232
  value4 = value | value << 8 | value << 16 | value << 24; //@line 31233
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 31236
   HEAP32[ptr + 4 >> 2] = value4; //@line 31237
   HEAP32[ptr + 8 >> 2] = value4; //@line 31238
   HEAP32[ptr + 12 >> 2] = value4; //@line 31239
   HEAP32[ptr + 16 >> 2] = value4; //@line 31240
   HEAP32[ptr + 20 >> 2] = value4; //@line 31241
   HEAP32[ptr + 24 >> 2] = value4; //@line 31242
   HEAP32[ptr + 28 >> 2] = value4; //@line 31243
   HEAP32[ptr + 32 >> 2] = value4; //@line 31244
   HEAP32[ptr + 36 >> 2] = value4; //@line 31245
   HEAP32[ptr + 40 >> 2] = value4; //@line 31246
   HEAP32[ptr + 44 >> 2] = value4; //@line 31247
   HEAP32[ptr + 48 >> 2] = value4; //@line 31248
   HEAP32[ptr + 52 >> 2] = value4; //@line 31249
   HEAP32[ptr + 56 >> 2] = value4; //@line 31250
   HEAP32[ptr + 60 >> 2] = value4; //@line 31251
   ptr = ptr + 64 | 0; //@line 31252
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 31256
   ptr = ptr + 4 | 0; //@line 31257
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 31262
  ptr = ptr + 1 | 0; //@line 31263
 }
 return end - num | 0; //@line 31265
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 288
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 290
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 292
 $7 = $2 + 156 | 0; //@line 293
 _equeue_mutex_lock($7); //@line 294
 $8 = $2 + 24 | 0; //@line 295
 $9 = HEAP32[$8 >> 2] | 0; //@line 296
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 300
   label = 9; //@line 301
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 303
   $$025$i$i = $8; //@line 304
   $13 = $9; //@line 304
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 306
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 311
    $16 = HEAP32[$15 >> 2] | 0; //@line 312
    if (!$16) {
     $$02329$i$i = $15; //@line 315
     label = 9; //@line 316
     break L3;
    } else {
     $$025$i$i = $15; //@line 319
     $13 = $16; //@line 319
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 325
    $$02330$i$i = $$025$i$i; //@line 328
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 328
   } else {
    $$02329$i$i = $$025$i$i; //@line 330
    label = 9; //@line 331
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 337
  $$02330$i$i = $$02329$i$i; //@line 338
  $$sink$in$i$i = $$02329$i$i; //@line 338
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 342
 HEAP32[$$02330$i$i >> 2] = $6; //@line 343
 _equeue_mutex_unlock($7); //@line 344
 return;
}
function _fflush__async_cb_181($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2202
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2204
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 2206
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 2210
  } else {
   $$02327 = $$02325; //@line 2212
   $$02426 = $AsyncRetVal; //@line 2212
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 2219
    } else {
     $16 = 0; //@line 2221
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 2233
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 2236
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 2239
     break L3;
    } else {
     $$02327 = $$023; //@line 2242
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 2245
   $13 = ___fflush_unlocked($$02327) | 0; //@line 2246
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 2250
    ___async_unwind = 0; //@line 2251
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 660; //@line 2253
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 2255
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 2257
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 2259
   sp = STACKTOP; //@line 2260
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 2264
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 2266
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_398($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30686
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30688
 $4 = HEAP32[$2 + 1808 >> 2] | 0; //@line 30690
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 30695
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30696
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1796 | 0); //@line 30697
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 30700
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 30701
   HEAP32[$9 >> 2] = $2; //@line 30702
   sp = STACKTOP; //@line 30703
   return;
  }
  ___async_unwind = 0; //@line 30706
  HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 30707
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 30708
  HEAP32[$9 >> 2] = $2; //@line 30709
  sp = STACKTOP; //@line 30710
  return;
 }
 $11 = HEAP32[$2 + 748 >> 2] | 0; //@line 30714
 if (!$11) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 30718
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 30723
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30724
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 736 | 0); //@line 30725
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 30728
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 30729
  HEAP32[$16 >> 2] = $2; //@line 30730
  sp = STACKTOP; //@line 30731
  return;
 }
 ___async_unwind = 0; //@line 30734
 HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 30735
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 30736
 HEAP32[$16 >> 2] = $2; //@line 30737
 sp = STACKTOP; //@line 30738
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8512
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 8514
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 8516
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 8518
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 8520
 $9 = $0 + 12 | 0; //@line 8521
 $10 = HEAP32[$9 >> 2] | 0; //@line 8522
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8526
   _mbed_assert_internal(14775, 14780, 2830); //@line 8527
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 293; //@line 8530
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 8532
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8534
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 8536
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 8538
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 8540
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 8542
    sp = STACKTOP; //@line 8543
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8546
    $19 = HEAP32[$9 >> 2] | 0; //@line 8548
    break;
   }
  } else {
   $19 = $10; //@line 8552
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 8555
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8556
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 8557
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 294; //@line 8560
  sp = STACKTOP; //@line 8561
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8564
  return;
 }
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21448
 $2 = $0 + 4 | 0; //@line 21449
 $3 = HEAP32[$2 >> 2] | 0; //@line 21450
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 21453
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 21454
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 21455
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 532; //@line 21458
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 21460
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 21463
  sp = STACKTOP; //@line 21464
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21467
 $9 = HEAP32[$2 >> 2] | 0; //@line 21468
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 21471
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21472
 FUNCTION_TABLE_vii[$12 & 15]($9, $1); //@line 21473
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 533; //@line 21476
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 21478
  sp = STACKTOP; //@line 21479
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21482
 $14 = HEAP32[$2 >> 2] | 0; //@line 21483
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 21486
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21487
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 21488
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 534; //@line 21491
  sp = STACKTOP; //@line 21492
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21495
  return;
 }
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_355($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27109
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27113
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27115
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27116
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 27120
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 27121
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 27122
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 201; //@line 27125
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 27126
   HEAP32[$10 >> 2] = $4; //@line 27127
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 27128
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 27129
   sp = STACKTOP; //@line 27130
   return;
  }
  ___async_unwind = 0; //@line 27133
  HEAP32[$ReallocAsyncCtx >> 2] = 201; //@line 27134
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 27135
  HEAP32[$10 >> 2] = $4; //@line 27136
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 27137
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 27138
  sp = STACKTOP; //@line 27139
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 27146
 _mbed_assert_internal(11890, 11899, 548); //@line 27147
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 202; //@line 27150
  sp = STACKTOP; //@line 27151
  return;
 }
 ___async_unwind = 0; //@line 27154
 HEAP32[$ReallocAsyncCtx3 >> 2] = 202; //@line 27155
 sp = STACKTOP; //@line 27156
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_303($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22501
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22505
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22507
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22509
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22511
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22513
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22515
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22518
 _equeue_event_delay($4, $6); //@line 22519
 _equeue_event_dtor($4, 268); //@line 22520
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22521
 $16 = _equeue_post($8, 269, $4) | 0; //@line 22522
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 551; //@line 22525
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 22526
  HEAP32[$17 >> 2] = $10; //@line 22527
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 22528
  HEAP32[$18 >> 2] = $12; //@line 22529
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 22530
  HEAP32[$19 >> 2] = $14; //@line 22531
  sp = STACKTOP; //@line 22532
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 22536
 ___async_unwind = 0; //@line 22537
 HEAP32[$ReallocAsyncCtx4 >> 2] = 551; //@line 22538
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 22539
 HEAP32[$17 >> 2] = $10; //@line 22540
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 22541
 HEAP32[$18 >> 2] = $12; //@line 22542
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 22543
 HEAP32[$19 >> 2] = $14; //@line 22544
 sp = STACKTOP; //@line 22545
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_344($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26504
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26508
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26510
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26511
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 26515
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 26516
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 26517
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 195; //@line 26520
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 26521
   HEAP32[$10 >> 2] = $4; //@line 26522
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 26523
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 26524
   sp = STACKTOP; //@line 26525
   return;
  }
  ___async_unwind = 0; //@line 26528
  HEAP32[$ReallocAsyncCtx >> 2] = 195; //@line 26529
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 26530
  HEAP32[$10 >> 2] = $4; //@line 26531
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 26532
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 26533
  sp = STACKTOP; //@line 26534
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26541
 _mbed_assert_internal(11890, 11899, 533); //@line 26542
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 196; //@line 26545
  sp = STACKTOP; //@line 26546
  return;
 }
 ___async_unwind = 0; //@line 26549
 HEAP32[$ReallocAsyncCtx3 >> 2] = 196; //@line 26550
 sp = STACKTOP; //@line 26551
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_352($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26966
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26970
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26972
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26973
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 26977
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 26978
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 26979
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 192; //@line 26982
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 26983
   HEAP32[$10 >> 2] = $4; //@line 26984
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 26985
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 26986
   sp = STACKTOP; //@line 26987
   return;
  }
  ___async_unwind = 0; //@line 26990
  HEAP32[$ReallocAsyncCtx >> 2] = 192; //@line 26991
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 26992
  HEAP32[$10 >> 2] = $4; //@line 26993
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 26994
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 26995
  sp = STACKTOP; //@line 26996
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 27003
 _mbed_assert_internal(11890, 11899, 525); //@line 27004
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 27007
  sp = STACKTOP; //@line 27008
  return;
 }
 ___async_unwind = 0; //@line 27011
 HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 27012
 sp = STACKTOP; //@line 27013
 return;
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0, $3 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2791
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 2796
 $3 = HEAP32[$2 >> 2] | 0; //@line 2797
 do {
  if ($3 | 0) {
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2801
   _mbedtls_platform_zeroize($3, 36); //@line 2802
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 562; //@line 2805
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 2807
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 2809
    sp = STACKTOP; //@line 2810
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2813
    _free(HEAP32[$2 >> 2] | 0); //@line 2815
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 60 >> 2] | 0; //@line 2821
 do {
  if ($9 | 0) {
   $15 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 28 >> 2] | 0; //@line 2829
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2830
   FUNCTION_TABLE_vi[$15 & 1023]($9); //@line 2831
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 563; //@line 2834
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2836
    sp = STACKTOP; //@line 2837
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2840
    break;
   }
  }
 } while (0);
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2845
 _mbedtls_platform_zeroize($0, 68); //@line 2846
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 564; //@line 2849
  sp = STACKTOP; //@line 2850
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2853
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_122($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28215
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28219
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28221
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28223
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28225
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28228
  $12 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 28229
  if (!___async) {
   HEAP32[___async_retval >> 2] = $12; //@line 28233
   ___async_unwind = 0; //@line 28234
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 61; //@line 28236
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $6; //@line 28238
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $8; //@line 28240
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $4; //@line 28242
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $10; //@line 28244
  sp = STACKTOP; //@line 28245
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 28248
  $18 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 28249
  if (!___async) {
   HEAP32[___async_retval >> 2] = $18; //@line 28253
   ___async_unwind = 0; //@line 28254
  }
  HEAP32[$ReallocAsyncCtx5 >> 2] = 62; //@line 28256
  HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $6; //@line 28258
  HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 28260
  HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $8; //@line 28262
  HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 28264
  sp = STACKTOP; //@line 28265
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_205($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 3689
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3691
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3693
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3695
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3697
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3699
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3701
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3703
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3705
 $18 = $12 + 12 | 0; //@line 3707
 HEAP32[$12 >> 2] = 446; //@line 3708
 HEAP32[$12 + 4 >> 2] = 0; //@line 3710
 HEAP32[$12 + 8 >> 2] = $4; //@line 3712
 HEAP32[$18 >> 2] = 860; //@line 3713
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(40) | 0; //@line 3714
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($2, $4 + 1796 | 0, $12); //@line 3715
 if (!___async) {
  ___async_unwind = 0; //@line 3718
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 447; //@line 3720
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 3722
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 3724
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 3726
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 3728
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 3730
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $12; //@line 3732
 HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $14; //@line 3734
 HEAP32[$ReallocAsyncCtx8 + 32 >> 2] = $16; //@line 3736
 HEAP32[$ReallocAsyncCtx8 + 36 >> 2] = $18; //@line 3738
 sp = STACKTOP; //@line 3739
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2655
 $2 = $0 + 16 | 0; //@line 2657
 $4 = HEAP32[$2 >> 2] | 0; //@line 2659
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 2662
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 2666
  $30 = 0; //@line 2666
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2667
  $32 = tempRet0; //@line 2668
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2669
  $34 = tempRet0; //@line 2670
  return $33 | 0; //@line 2671
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 2674
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2675
 $12 = _ticker_read_us($11) | 0; //@line 2676
 $13 = tempRet0; //@line 2677
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 114; //@line 2680
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2682
  $16 = $AsyncCtx + 8 | 0; //@line 2684
  HEAP32[$16 >> 2] = $4; //@line 2686
  HEAP32[$16 + 4 >> 2] = $7; //@line 2689
  sp = STACKTOP; //@line 2690
  return 0; //@line 2691
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2693
 $21 = $0 + 8 | 0; //@line 2695
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 2701
 $29 = $27; //@line 2703
 $30 = tempRet0; //@line 2703
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2704
 $32 = tempRet0; //@line 2705
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2706
 $34 = tempRet0; //@line 2707
 return $33 | 0; //@line 2708
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_262($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8661
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8665
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8667
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8669
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8671
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8673
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8674
 $15 = HEAP16[$4 + 1748 >> 1] | 0; //@line 8676
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 8679
 $18 = __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($6, $13, 128, $8, $15, $4 + 1716 | 0, $4 + 1732 | 0) | 0; //@line 8680
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 370; //@line 8683
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 8684
  HEAP32[$19 >> 2] = $4; //@line 8685
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 8686
  HEAP32[$20 >> 2] = $10; //@line 8687
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 8688
  HEAP32[$21 >> 2] = $12; //@line 8689
  sp = STACKTOP; //@line 8690
  return;
 }
 HEAP32[___async_retval >> 2] = $18; //@line 8694
 ___async_unwind = 0; //@line 8695
 HEAP32[$ReallocAsyncCtx2 >> 2] = 370; //@line 8696
 $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 8697
 HEAP32[$19 >> 2] = $4; //@line 8698
 $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 8699
 HEAP32[$20 >> 2] = $10; //@line 8700
 $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 8701
 HEAP32[$21 >> 2] = $12; //@line 8702
 sp = STACKTOP; //@line 8703
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6411
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6415
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6417
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6419
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6421
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6423
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6425
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 6428
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 6429
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 6438
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 6439
    if (!___async) {
     ___async_unwind = 0; //@line 6442
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 689; //@line 6444
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 6446
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 6448
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 6450
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 6452
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 6454
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 6456
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 6458
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 6461
    sp = STACKTOP; //@line 6462
    return;
   }
  }
 }
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_144($0) {
 $0 = $0 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30170
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30172
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 30175
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30177
 $12 = (HEAP8[$2 + 1177 >> 0] | 0) != 0; //@line 30183
 if (HEAP32[$2 + 1168 >> 2] | 0) {
  if ($12) {
   $26 = $4 ? 4 : 6; //@line 30187
   HEAP32[$2 + 2056 >> 2] = $26; //@line 30188
   $$pre$phi6Z2D = $26; //@line 30189
  } else {
   $$pre$phi6Z2D = $4 ? 4 : 6; //@line 30192
  }
  HEAP32[$2 + 2092 >> 2] = $$pre$phi6Z2D; //@line 30195
  return;
 }
 if ($12) {
  $14 = $4 ? 3 : 5; //@line 30200
  HEAP32[$2 + 2056 >> 2] = $14; //@line 30201
  $$pre$phiZ2D = $14; //@line 30202
 } else {
  $$pre$phiZ2D = $4 ? 3 : 5; //@line 30205
 }
 HEAP32[$2 + 2092 >> 2] = $$pre$phiZ2D; //@line 30208
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  return;
 }
 $20 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($2, HEAP32[$2 + 1780 >> 2] | 0) | 0; //@line 30216
 if ($20 >>> 0 < (HEAP32[$2 + 1776 >> 2] | 0) >>> 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 30224
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 30225
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 405; //@line 30228
  sp = STACKTOP; //@line 30229
  return;
 }
 ___async_unwind = 0; //@line 30232
 HEAP32[$ReallocAsyncCtx3 >> 2] = 405; //@line 30233
 sp = STACKTOP; //@line 30234
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_305($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22576
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22580
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22582
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22584
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 22585
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 22586
 $9 = HEAP32[$4 >> 2] | 0; //@line 22587
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 22591
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22592
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 22593
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 22596
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 22597
   HEAP32[$13 >> 2] = $8; //@line 22598
   sp = STACKTOP; //@line 22599
   return;
  }
  ___async_unwind = 0; //@line 22602
  HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 22603
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 22604
  HEAP32[$13 >> 2] = $8; //@line 22605
  sp = STACKTOP; //@line 22606
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 22613
 _mbed_assert_internal(13452, 13470, 57); //@line 22614
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 553; //@line 22617
  sp = STACKTOP; //@line 22618
  return;
 }
 ___async_unwind = 0; //@line 22621
 HEAP32[$ReallocAsyncCtx6 >> 2] = 553; //@line 22622
 sp = STACKTOP; //@line 22623
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb($0) {
 $0 = $0 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30099
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30101
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 30104
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30106
 $12 = (HEAP8[$2 + 1177 >> 0] | 0) != 0; //@line 30112
 if (HEAP32[$2 + 1168 >> 2] | 0) {
  if ($12) {
   $26 = $4 ? 4 : 6; //@line 30116
   HEAP32[$2 + 2056 >> 2] = $26; //@line 30117
   $$pre$phi6Z2D = $26; //@line 30118
  } else {
   $$pre$phi6Z2D = $4 ? 4 : 6; //@line 30121
  }
  HEAP32[$2 + 2092 >> 2] = $$pre$phi6Z2D; //@line 30124
  return;
 }
 if ($12) {
  $14 = $4 ? 3 : 5; //@line 30129
  HEAP32[$2 + 2056 >> 2] = $14; //@line 30130
  $$pre$phiZ2D = $14; //@line 30131
 } else {
  $$pre$phiZ2D = $4 ? 3 : 5; //@line 30134
 }
 HEAP32[$2 + 2092 >> 2] = $$pre$phiZ2D; //@line 30137
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  return;
 }
 $20 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($2, HEAP32[$2 + 1780 >> 2] | 0) | 0; //@line 30145
 if ($20 >>> 0 < (HEAP32[$2 + 1776 >> 2] | 0) >>> 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 30153
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 30154
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 405; //@line 30157
  sp = STACKTOP; //@line 30158
  return;
 }
 ___async_unwind = 0; //@line 30161
 HEAP32[$ReallocAsyncCtx3 >> 2] = 405; //@line 30162
 sp = STACKTOP; //@line 30163
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $34 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 408
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 412
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 418
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 420
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 422
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 424
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 426
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 428
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 430
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  $24 = $4 + 1442 | 0; //@line 433
  $26 = HEAPU8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 435
  _memcpy($24 | 0, (HEAP32[$0 + 16 >> 2] | 0) + $26 | 0, $10 | 0) | 0; //@line 437
  HEAP32[$4 + 2016 >> 2] = 3; //@line 439
  HEAP32[$12 >> 2] = 0; //@line 440
  HEAP32[$14 >> 2] = $24; //@line 441
  HEAP16[$16 >> 1] = $10 - $26; //@line 444
 }
 if (!(HEAP8[$18 >> 0] | 0)) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 452
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($22, $4 + 1856 | 0); //@line 453
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 381; //@line 456
  $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 457
  HEAP32[$34 >> 2] = $20; //@line 458
  sp = STACKTOP; //@line 459
  return;
 }
 ___async_unwind = 0; //@line 462
 HEAP32[$ReallocAsyncCtx4 >> 2] = 381; //@line 463
 $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 464
 HEAP32[$34 >> 2] = $20; //@line 465
 sp = STACKTOP; //@line 466
 return;
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 2835
 if (!$2) {
  $$0 = -1; //@line 2838
  return $$0 | 0; //@line 2839
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 2842
 $5 = $0 + 20 | 0; //@line 2843
 HEAP32[$5 >> 2] = 0; //@line 2844
 $6 = $0 + 16 | 0; //@line 2845
 HEAP32[$6 >> 2] = 0; //@line 2846
 if ($1 | 0) {
  $$034$i = $1; //@line 2849
  $23 = 0; //@line 2849
  do {
   $23 = $23 + 1 | 0; //@line 2851
   $$034$i = $$034$i >>> 1; //@line 2852
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 2860
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 2863
 HEAP32[$0 + 28 >> 2] = $1; //@line 2865
 HEAP32[$0 + 32 >> 2] = $2; //@line 2867
 HEAP32[$0 >> 2] = 0; //@line 2868
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 2871
 HEAP8[$0 + 9 >> 0] = 0; //@line 2873
 HEAP8[$0 + 8 >> 0] = 0; //@line 2875
 HEAP8[$0 + 36 >> 0] = 0; //@line 2877
 HEAP32[$0 + 40 >> 2] = 0; //@line 2879
 HEAP32[$0 + 44 >> 2] = 0; //@line 2881
 HEAP8[$0 + 184 >> 0] = 0; //@line 2883
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 2885
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 2888
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 2891
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 2894
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 2897
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 2900
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 2903
 $$0 = $$033$i; //@line 2904
 return $$0 | 0; //@line 2905
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2103
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 2113
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 2113
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 2113
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 2117
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 2120
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 2123
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 2131
  } else {
   $20 = 0; //@line 2133
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 2143
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 2147
  HEAP32[___async_retval >> 2] = $$1; //@line 2149
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 2152
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 2153
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 2157
  ___async_unwind = 0; //@line 2158
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 660; //@line 2160
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 2162
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 2164
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 2166
 sp = STACKTOP; //@line 2167
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21395
 $1 = $0 + 4 | 0; //@line 21396
 $2 = HEAP32[$1 >> 2] | 0; //@line 21397
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 21400
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 21401
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 21402
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 529; //@line 21405
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 21407
  sp = STACKTOP; //@line 21408
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21411
 $7 = HEAP32[$1 >> 2] | 0; //@line 21412
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 21415
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21416
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 21417
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 530; //@line 21420
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 21422
  sp = STACKTOP; //@line 21423
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21426
 $12 = HEAP32[$1 >> 2] | 0; //@line 21427
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 21430
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21431
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 21432
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 531; //@line 21435
  sp = STACKTOP; //@line 21436
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21439
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEj__async_cb_175($0) {
 $0 = $0 | 0;
 var $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1786
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1788
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1790
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1792
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1794
 if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
  $22 = HEAP8[$2 + 1182 >> 0] | 0; //@line 1800
  HEAP8[$2 + 1183 >> 0] = $22; //@line 1802
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $22, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $4); //@line 1807
  HEAP32[$2 + 1780 >> 2] = $4; //@line 1809
  return;
 }
 $15 = (HEAP32[$2 + 1776 >> 2] | 0) - $6 | 0; //@line 1815
 $18 = $15 + (__ZN7LoRaPHY15get_ack_timeoutEv($2 + 4 | 0) | 0) | 0; //@line 1818
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 1819
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($8, $2 + 1856 | 0, $18); //@line 1820
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 389; //@line 1823
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 1824
  HEAP32[$19 >> 2] = $2; //@line 1825
  $20 = $ReallocAsyncCtx + 8 | 0; //@line 1826
  HEAP32[$20 >> 2] = $4; //@line 1827
  sp = STACKTOP; //@line 1828
  return;
 }
 ___async_unwind = 0; //@line 1831
 HEAP32[$ReallocAsyncCtx >> 2] = 389; //@line 1832
 $19 = $ReallocAsyncCtx + 4 | 0; //@line 1833
 HEAP32[$19 >> 2] = $2; //@line 1834
 $20 = $ReallocAsyncCtx + 8 | 0; //@line 1835
 HEAP32[$20 >> 2] = $4; //@line 1836
 sp = STACKTOP; //@line 1837
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21343
 $1 = $0 + 4 | 0; //@line 21344
 $2 = HEAP32[$1 >> 2] | 0; //@line 21345
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 21348
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 21349
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 21350
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 526; //@line 21353
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 21355
  sp = STACKTOP; //@line 21356
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21359
 $7 = HEAP32[$1 >> 2] | 0; //@line 21360
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 21363
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21364
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 21365
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 527; //@line 21368
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 21370
  sp = STACKTOP; //@line 21371
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21374
 $12 = HEAP32[$1 >> 2] | 0; //@line 21375
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 21378
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21379
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 21380
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 528; //@line 21383
  sp = STACKTOP; //@line 21384
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21387
  return;
 }
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2411
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2413
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2415
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2417
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 2422
  } else {
   $9 = $4 + 4 | 0; //@line 2424
   $10 = HEAP32[$9 >> 2] | 0; //@line 2425
   $11 = $4 + 8 | 0; //@line 2426
   $12 = HEAP32[$11 >> 2] | 0; //@line 2427
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 2431
    HEAP32[$6 >> 2] = 0; //@line 2432
    HEAP32[$2 >> 2] = 0; //@line 2433
    HEAP32[$11 >> 2] = 0; //@line 2434
    HEAP32[$9 >> 2] = 0; //@line 2435
    $$0 = 0; //@line 2436
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 2443
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 2444
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 2445
   if (!___async) {
    ___async_unwind = 0; //@line 2448
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 662; //@line 2450
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 2452
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 2454
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 2456
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 2458
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 2460
   sp = STACKTOP; //@line 2461
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 2466
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2624
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2626
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2631
 $7 = HEAP32[$2 >> 2] | 0; //@line 2632
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 2635
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 2637
  FUNCTION_TABLE_vii[$10 & 15]($7, 0); //@line 2638
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 537; //@line 2641
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 2642
   HEAP32[$12 >> 2] = $2; //@line 2643
   sp = STACKTOP; //@line 2644
   return;
  }
  ___async_unwind = 0; //@line 2647
  HEAP32[$ReallocAsyncCtx3 >> 2] = 537; //@line 2648
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 2649
  HEAP32[$12 >> 2] = $2; //@line 2650
  sp = STACKTOP; //@line 2651
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 2654
  FUNCTION_TABLE_vii[$10 & 15]($7, $6); //@line 2655
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 536; //@line 2658
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 2659
   HEAP32[$11 >> 2] = $2; //@line 2660
   sp = STACKTOP; //@line 2661
   return;
  }
  ___async_unwind = 0; //@line 2664
  HEAP32[$ReallocAsyncCtx2 >> 2] = 536; //@line 2665
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 2666
  HEAP32[$11 >> 2] = $2; //@line 2667
  sp = STACKTOP; //@line 2668
  return;
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22777
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22781
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22783
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22785
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22787
 $11 = $4 + 12 | 0; //@line 22789
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22790
 $14 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($6) | 0) + 16 >> 0] | 0; //@line 22793
 $17 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($6) | 0) + 17 >> 0] | 0; //@line 22796
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 22797
 $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $14, $17) | 0; //@line 22798
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 296; //@line 22801
  $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 22802
  HEAP32[$19 >> 2] = $11; //@line 22803
  $20 = $ReallocAsyncCtx6 + 8 | 0; //@line 22804
  HEAP32[$20 >> 2] = $10; //@line 22805
  sp = STACKTOP; //@line 22806
  return;
 }
 HEAP32[___async_retval >> 2] = $18; //@line 22810
 ___async_unwind = 0; //@line 22811
 HEAP32[$ReallocAsyncCtx6 >> 2] = 296; //@line 22812
 $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 22813
 HEAP32[$19 >> 2] = $11; //@line 22814
 $20 = $ReallocAsyncCtx6 + 8 | 0; //@line 22815
 HEAP32[$20 >> 2] = $10; //@line 22816
 sp = STACKTOP; //@line 22817
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_23($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 19531
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19533
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19535
 $6 = HEAP32[$2 + 2512 >> 2] | 0; //@line 19537
 if (!$6) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19541
  __ZN12radio_eventsD2Ev($2 + 2384 | 0); //@line 19542
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 156; //@line 19545
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 19546
   HEAP32[$12 >> 2] = $2; //@line 19547
   sp = STACKTOP; //@line 19548
   return;
  }
  ___async_unwind = 0; //@line 19551
  HEAP32[$ReallocAsyncCtx5 >> 2] = 156; //@line 19552
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 19553
  HEAP32[$12 >> 2] = $2; //@line 19554
  sp = STACKTOP; //@line 19555
  return;
 } else {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19559
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 19560
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 19561
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 19564
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 19565
   HEAP32[$10 >> 2] = $2; //@line 19566
   sp = STACKTOP; //@line 19567
   return;
  }
  ___async_unwind = 0; //@line 19570
  HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 19571
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 19572
  HEAP32[$10 >> 2] = $2; //@line 19573
  sp = STACKTOP; //@line 19574
  return;
 }
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_49($0) {
 $0 = $0 | 0;
 var $$059 = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $37 = 0, $4 = 0, $42 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22014
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22016
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22018
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 22022
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22024
 if (HEAP32[___async_retval >> 2] | 0) {
  $$059 = -1014; //@line 22031
  $42 = ___async_retval; //@line 22032
  HEAP32[$42 >> 2] = $$059; //@line 22033
  return;
 }
 $17 = HEAP32[$2 >> 2] | 0; //@line 22036
 $19 = HEAP16[$4 >> 1] | 0; //@line 22038
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 22040
 HEAP8[($19 & 65535) + ($6 + 1185) >> 0] = $17; //@line 22043
 $25 = HEAP16[$4 >> 1] | 0; //@line 22046
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 22048
 HEAP8[($25 & 65535) + ($6 + 1185) >> 0] = $17 >>> 8; //@line 22051
 $31 = HEAP16[$4 >> 1] | 0; //@line 22054
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 22056
 HEAP8[($31 & 65535) + ($6 + 1185) >> 0] = $17 >>> 16; //@line 22059
 $37 = HEAP16[$4 >> 1] | 0; //@line 22062
 HEAP16[$4 >> 1] = $37 + 1 << 16 >> 16; //@line 22064
 HEAP8[($37 & 65535) + ($6 + 1185) >> 0] = $17 >>> 24; //@line 22067
 HEAP32[$12 >> 2] = $10 & 255; //@line 22069
 _mbed_tracef(16, 12685, 12878, $12); //@line 22070
 $$059 = 0; //@line 22071
 $42 = ___async_retval; //@line 22072
 HEAP32[$42 >> 2] = $$059; //@line 22073
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_70($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24938
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24940
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24942
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 24944
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24946
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24948
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 24950
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24952
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24954
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24956
 $19 = HEAP32[$2 >> 2] | 0; //@line 24957
 $22 = HEAP32[(HEAP32[$19 >> 2] | 0) + 32 >> 2] | 0; //@line 24960
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 24961
 FUNCTION_TABLE_vii[$22 & 15]($19, $4); //@line 24962
 if (!___async) {
  ___async_unwind = 0; //@line 24965
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 506; //@line 24967
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 24969
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 24971
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 24973
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 24975
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 24977
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 24979
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 24981
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 24983
 sp = STACKTOP; //@line 24984
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26405
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26407
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26409
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26411
 $7 = $2 + 12 | 0; //@line 26412
 $8 = HEAP32[$7 >> 2] | 0; //@line 26413
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 26416
  HEAP32[$6 + 16 >> 2] = 0; //@line 26418
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 26422
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 26423
 FUNCTION_TABLE_vii[$11 & 15]($6, $2); //@line 26424
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 547; //@line 26427
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 26428
  HEAP32[$12 >> 2] = $7; //@line 26429
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 26430
  HEAP32[$13 >> 2] = $4; //@line 26431
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 26432
  HEAP32[$14 >> 2] = $6; //@line 26433
  sp = STACKTOP; //@line 26434
  return;
 }
 ___async_unwind = 0; //@line 26437
 HEAP32[$ReallocAsyncCtx2 >> 2] = 547; //@line 26438
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 26439
 HEAP32[$12 >> 2] = $7; //@line 26440
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 26441
 HEAP32[$13 >> 2] = $4; //@line 26442
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 26443
 HEAP32[$14 >> 2] = $6; //@line 26444
 sp = STACKTOP; //@line 26445
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2994
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2996
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2998
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3000
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3002
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3004
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3006
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3008
 $16 = $4 + 12 | 0; //@line 3010
 HEAP32[$4 >> 2] = 449; //@line 3011
 HEAP32[$4 + 4 >> 2] = 0; //@line 3013
 HEAP32[$4 + 8 >> 2] = $2; //@line 3015
 HEAP32[$16 >> 2] = 860; //@line 3016
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 3017
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1816 | 0, $4); //@line 3018
 if (!___async) {
  ___async_unwind = 0; //@line 3021
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 450; //@line 3023
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $6; //@line 3025
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $2; //@line 3027
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $12; //@line 3029
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $14; //@line 3031
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 3033
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $8; //@line 3035
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $16; //@line 3037
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $4; //@line 3039
 sp = STACKTOP; //@line 3040
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5720
 STACKTOP = STACKTOP + 16 | 0; //@line 5721
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5721
 $$byval_copy = sp + 8 | 0; //@line 5722
 $1 = sp; //@line 5723
 HEAP32[$0 + 3172 >> 2] = __ZN7LoRaMac16get_current_timeEv($0) | 0; //@line 5726
 $5 = HEAP32[$0 + 3168 >> 2] | 0; //@line 5728
 HEAP32[$1 >> 2] = 188; //@line 5729
 HEAP32[$1 + 4 >> 2] = 0; //@line 5731
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5732
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 5733
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 5733
 $6 = __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 5734
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 189; //@line 5737
  sp = STACKTOP; //@line 5738
  STACKTOP = sp; //@line 5739
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5741
 if ($6 | 0) {
  STACKTOP = sp; //@line 5744
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5746
 _mbed_assert_internal(11890, 11899, 508); //@line 5747
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 190; //@line 5750
  sp = STACKTOP; //@line 5751
  STACKTOP = sp; //@line 5752
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5754
 STACKTOP = sp; //@line 5755
 return;
}
function _mbedtls_aes_crypt_ctr($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$lcssa = 0, $$023 = 0, $$024 = 0, $$02529 = 0, $$02628 = 0, $$030 = 0, $$in = 0, $14 = 0, $16 = 0, $25 = 0, $7 = 0;
 $7 = HEAP32[$2 >> 2] | 0; //@line 2532
 if ($7 >>> 0 > 15) {
  $$024 = -33; //@line 2535
  return $$024 | 0; //@line 2536
 }
 if (!$1) {
  $$0$lcssa = $7; //@line 2540
 } else {
  $$02529 = $6; //@line 2542
  $$02628 = $5; //@line 2542
  $$030 = $7; //@line 2542
  $$in = $1; //@line 2542
  while (1) {
   $$in = $$in + -1 | 0; //@line 2544
   L7 : do {
    if (!$$030) {
     _mbedtls_internal_aes_encrypt($0, $3, $4) | 0; //@line 2548
     $$023 = 16; //@line 2549
     do {
      if (($$023 | 0) <= 0) {
       break L7;
      }
      $$023 = $$023 + -1 | 0; //@line 2555
      $14 = $3 + $$023 | 0; //@line 2556
      $16 = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24; //@line 2558
      HEAP8[$14 >> 0] = $16; //@line 2559
     } while (!($16 << 24 >> 24));
    }
   } while (0);
   HEAP8[$$02529 >> 0] = HEAP8[$4 + $$030 >> 0] ^ HEAP8[$$02628 >> 0]; //@line 2575
   $25 = $$030 + 1 & 15; //@line 2577
   if (!$$in) {
    $$0$lcssa = $25; //@line 2580
    break;
   } else {
    $$02529 = $$02529 + 1 | 0; //@line 2583
    $$02628 = $$02628 + 1 | 0; //@line 2583
    $$030 = $25; //@line 2583
   }
  }
 }
 HEAP32[$2 >> 2] = $$0$lcssa; //@line 2587
 $$024 = 0; //@line 2588
 return $$024 | 0; //@line 2589
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 14872
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 14877
    $$0 = 1; //@line 14878
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 14891
     $$0 = 1; //@line 14892
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14896
     $$0 = -1; //@line 14897
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 14907
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 14911
    $$0 = 2; //@line 14912
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 14924
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 14930
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 14934
    $$0 = 3; //@line 14935
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 14945
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 14951
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 14957
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 14961
    $$0 = 4; //@line 14962
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14966
    $$0 = -1; //@line 14967
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14972
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16360
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 16364
  return $$0 | 0; //@line 16365
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 16371
  return $$0 | 0; //@line 16372
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 16374
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 16377
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16378
 $11 = FUNCTION_TABLE_iii[$10 & 31]($7, $1) | 0; //@line 16379
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 471; //@line 16382
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16384
  sp = STACKTOP; //@line 16385
  return 0; //@line 16386
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16388
 if (!$11) {
  $$0 = -1003; //@line 16390
  return $$0 | 0; //@line 16391
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 16393
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16394
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 16395
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 472; //@line 16398
  sp = STACKTOP; //@line 16399
  return 0; //@line 16400
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16402
 $$0 = 0; //@line 16403
 return $$0 | 0; //@line 16404
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_384($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29595
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29599
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29601
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29603
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 29605
 $12 = HEAP8[$0 + 21 >> 0] | 0; //@line 29607
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 29609
 $15 = $4 + 12 | 0; //@line 29611
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29612
 $16 = $4 + 16 | 0; //@line 29613
 HEAP8[$16 >> 0] = $10; //@line 29614
 HEAP8[$4 + 17 >> 0] = $12; //@line 29616
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 29617
 $18 = _equeue_alloc($14, 20) | 0; //@line 29618
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 29622
  ___async_unwind = 0; //@line 29623
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 311; //@line 29625
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $15; //@line 29627
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $8; //@line 29629
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 29631
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $15; //@line 29633
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $4; //@line 29635
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $16; //@line 29637
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 29639
 sp = STACKTOP; //@line 29640
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_58($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $21 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23700
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23704
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23706
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23708
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23710
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23714
 if (!(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] & 1)) {
  $21 = (__ZNK7LoRaMac16get_device_classEv($4) | 0) == 2; //@line 23722
  HEAP32[$6 >> 2] = $21 ? 5 : 2; //@line 23724
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($4) | 0) + 4 >> 0] | 0)) {
  HEAP8[$8 + 2911 >> 0] = 1; //@line 23732
  return;
 }
 _mbed_tracef(16, 11997, 12228, $10); //@line 23735
 __ZN7LoRaMac21post_process_mlme_indEv($4); //@line 23736
 _mbed_tracef(16, 11997, 12252, $14); //@line 23737
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23738
 __ZN12LoRaWANStack23mlme_indication_handlerEv($8); //@line 23739
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 23742
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 23743
  HEAP32[$26 >> 2] = $8; //@line 23744
  sp = STACKTOP; //@line 23745
  return;
 }
 ___async_unwind = 0; //@line 23748
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 23749
 $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 23750
 HEAP32[$26 >> 2] = $8; //@line 23751
 sp = STACKTOP; //@line 23752
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_99($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27023
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27027
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27031
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27033
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27035
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27037
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27039
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27041
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27043
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 4 >> 2] | 0, $4 | 0, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 27046
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 27048
 _mbedtls_platform_zeroize($8, 16); //@line 27049
 if (!___async) {
  ___async_unwind = 0; //@line 27052
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 590; //@line 27054
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $10; //@line 27056
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $12; //@line 27058
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $14; //@line 27060
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $4; //@line 27062
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $AsyncRetVal; //@line 27064
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $16; //@line 27066
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $18; //@line 27068
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $8; //@line 27070
 sp = STACKTOP; //@line 27071
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_226($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 5710
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5712
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5714
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5716
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5718
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 5723
  return;
 }
 dest = $2 + 4 | 0; //@line 5727
 stop = dest + 52 | 0; //@line 5727
 do {
  HEAP32[dest >> 2] = 0; //@line 5727
  dest = dest + 4 | 0; //@line 5727
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 5728
 HEAP32[$2 + 8 >> 2] = $4; //@line 5730
 HEAP32[$2 + 12 >> 2] = -1; //@line 5732
 HEAP32[$2 + 48 >> 2] = 1; //@line 5734
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 5737
 $16 = HEAP32[$6 >> 2] | 0; //@line 5738
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 5739
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 5740
 if (!___async) {
  ___async_unwind = 0; //@line 5743
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 674; //@line 5745
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 5747
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 5749
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 5751
 sp = STACKTOP; //@line 5752
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7652
 STACKTOP = STACKTOP + 16 | 0; //@line 7653
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7653
 _mbed_tracef(16, 11997, 12197, sp); //@line 7655
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7656
 __ZN7LoRaMac19on_radio_tx_timeoutEv($0); //@line 7657
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 264; //@line 7660
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7662
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 7664
  sp = STACKTOP; //@line 7665
  STACKTOP = sp; //@line 7666
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7668
 $3 = $0 + 2904 | 0; //@line 7669
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -18 | 1; //@line 7673
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7674
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 7675
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 265; //@line 7678
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 7680
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7682
  sp = STACKTOP; //@line 7683
  STACKTOP = sp; //@line 7684
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7686
  $10 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 7688
  HEAP32[$0 + 2496 >> 2] = $10 ? 5 : 2; //@line 7691
  STACKTOP = sp; //@line 7692
  return;
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_312($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22919
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22923
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22925
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22926
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22930
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 22931
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22932
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 22935
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22936
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22937
   sp = STACKTOP; //@line 22938
   return;
  }
  ___async_unwind = 0; //@line 22941
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 22942
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22943
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22944
  sp = STACKTOP; //@line 22945
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 22952
 _mbed_assert_internal(11890, 11899, 886); //@line 22953
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 298; //@line 22956
  sp = STACKTOP; //@line 22957
  return;
 }
 ___async_unwind = 0; //@line 22960
 HEAP32[$ReallocAsyncCtx10 >> 2] = 298; //@line 22961
 sp = STACKTOP; //@line 22962
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20333
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20335
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20337
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20341
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20343
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20345
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 20348
  _mbed_tracef(2, 12685, 12782, $4); //@line 20349
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 20351
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 20354
 $13 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 20355
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 408; //@line 20358
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 20359
  HEAP32[$14 >> 2] = $8; //@line 20360
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 20361
  HEAP32[$15 >> 2] = $10; //@line 20362
  sp = STACKTOP; //@line 20363
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 20367
 ___async_unwind = 0; //@line 20368
 HEAP32[$ReallocAsyncCtx3 >> 2] = 408; //@line 20369
 $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 20370
 HEAP32[$14 >> 2] = $8; //@line 20371
 $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 20372
 HEAP32[$15 >> 2] = $10; //@line 20373
 sp = STACKTOP; //@line 20374
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_246($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6547
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6551
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6553
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6555
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6557
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6559
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 6562
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 6563
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 6569
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 6570
   if (!___async) {
    ___async_unwind = 0; //@line 6573
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 687; //@line 6575
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 6577
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 6579
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 6581
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 6583
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 6585
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 6587
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 6590
   sp = STACKTOP; //@line 6591
   return;
  }
 }
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1382
 HEAP8[$2 + 2376 >> 0] = 0; //@line 1384
 HEAP8[$2 + 1181 >> 0] = 0; //@line 1386
 HEAP8[$2 + 1175 >> 0] = 1; //@line 1388
 HEAP8[$2 + 1177 >> 0] = 0; //@line 1390
 HEAP8[$2 + 1178 >> 0] = 0; //@line 1392
 $8 = $2 + 476 | 0; //@line 1393
 __ZN14LoRaMacCommand20clear_command_bufferEv($8); //@line 1394
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($8); //@line 1395
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($8); //@line 1396
 $9 = $2 + 2052 | 0; //@line 1397
 HEAP32[$9 >> 2] = 0; //@line 1398
 HEAP32[$9 + 4 >> 2] = 0; //@line 1398
 HEAP32[$9 + 8 >> 2] = 0; //@line 1398
 HEAP32[$9 + 12 >> 2] = 0; //@line 1398
 HEAP32[$9 + 16 >> 2] = 0; //@line 1398
 HEAP32[$9 + 20 >> 2] = 0; //@line 1398
 HEAP32[$2 + 2056 >> 2] = 1; //@line 1400
 $11 = $2 + 2084 | 0; //@line 1401
 HEAP32[$11 >> 2] = 0; //@line 1402
 HEAP32[$11 + 4 >> 2] = 0; //@line 1402
 HEAP32[$11 + 8 >> 2] = 0; //@line 1402
 HEAP32[$11 + 12 >> 2] = 0; //@line 1402
 HEAP32[$11 + 16 >> 2] = 0; //@line 1402
 HEAP32[$2 + 2092 >> 2] = 1; //@line 1404
 dest = $2 + 2012 | 0; //@line 1406
 stop = dest + 40 | 0; //@line 1406
 do {
  HEAP32[dest >> 2] = 0; //@line 1406
  dest = dest + 4 | 0; //@line 1406
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 + 2020 >> 2] = 1; //@line 1408
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5910
 STACKTOP = STACKTOP + 16 | 0; //@line 5911
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5911
 $$byval_copy = sp + 8 | 0; //@line 5912
 $1 = sp; //@line 5913
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 5915
 HEAP32[$1 >> 2] = 197; //@line 5916
 HEAP32[$1 + 4 >> 2] = 0; //@line 5918
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5919
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 5920
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 5920
 $4 = __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 5921
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 198; //@line 5924
  sp = STACKTOP; //@line 5925
  STACKTOP = sp; //@line 5926
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5928
 if ($4 | 0) {
  STACKTOP = sp; //@line 5931
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5933
 _mbed_assert_internal(11890, 11899, 540); //@line 5934
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 199; //@line 5937
  sp = STACKTOP; //@line 5938
  STACKTOP = sp; //@line 5939
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5941
 STACKTOP = sp; //@line 5942
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_150($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 143
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 145
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 147
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 149
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 151
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2020 >> 2] = 13; //@line 157
 }
 $12 = $2 + 476 | 0; //@line 159
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 163
 $16 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($12, $4, 0, $6, $8, $2 + 2084 | 0, $2 + 1876 | 0, $2 + 4 | 0) | 0; //@line 164
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 374; //@line 167
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 168
  HEAP32[$17 >> 2] = $12; //@line 169
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 170
  HEAP32[$18 >> 2] = $2; //@line 171
  sp = STACKTOP; //@line 172
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 176
 ___async_unwind = 0; //@line 177
 HEAP32[$ReallocAsyncCtx4 >> 2] = 374; //@line 178
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 179
 HEAP32[$17 >> 2] = $12; //@line 180
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 181
 HEAP32[$18 >> 2] = $2; //@line 182
 sp = STACKTOP; //@line 183
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_202($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 3584
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3586
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3588
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3590
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3592
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3594
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3596
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3598
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 3601
 $16 = $4 + 1172 | 0; //@line 3602
 HEAP8[$16 >> 0] = 1; //@line 3603
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(36) | 0; //@line 3604
 __ZN7LoRaPHY25setup_public_network_modeEb($6, 1); //@line 3605
 if (!___async) {
  ___async_unwind = 0; //@line 3608
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 444; //@line 3610
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 3612
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 3614
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $16; //@line 3616
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $6; //@line 3618
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $8; //@line 3620
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $10; //@line 3622
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $12; //@line 3624
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $14; //@line 3626
 sp = STACKTOP; //@line 3627
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9299
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 9301
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 9303
 $5 = $0 + 12 | 0; //@line 9304
 $6 = HEAP32[$5 >> 2] | 0; //@line 9305
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9309
   _mbed_assert_internal(14775, 14780, 1677); //@line 9310
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 323; //@line 9313
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 9315
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 9317
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 9319
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 9321
    sp = STACKTOP; //@line 9322
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9325
    $13 = HEAP32[$5 >> 2] | 0; //@line 9327
    break;
   }
  } else {
   $13 = $6; //@line 9331
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 9334
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9335
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 9336
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 324; //@line 9339
  sp = STACKTOP; //@line 9340
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9343
  return;
 }
}
function __ZN12radio_eventsD2Ev__async_cb_65($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24547
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24549
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 24551
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 24556
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24557
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 24558
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 24561
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 24562
   HEAP32[$9 >> 2] = $2; //@line 24563
   sp = STACKTOP; //@line 24564
   return;
  }
  ___async_unwind = 0; //@line 24567
  HEAP32[$ReallocAsyncCtx6 >> 2] = 163; //@line 24568
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 24569
  HEAP32[$9 >> 2] = $2; //@line 24570
  sp = STACKTOP; //@line 24571
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 24575
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 24581
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 24582
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 24583
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 24586
  sp = STACKTOP; //@line 24587
  return;
 }
 ___async_unwind = 0; //@line 24590
 HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 24591
 sp = STACKTOP; //@line 24592
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_127($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28516
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28518
 if ((HEAP32[$2 + 2380 >> 2] | 0) == 2) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 28523
  __ZN7LoRaMac15open_rx2_windowEv($2); //@line 28524
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 401; //@line 28527
   $6 = $ReallocAsyncCtx + 4 | 0; //@line 28528
   HEAP32[$6 >> 2] = $2; //@line 28529
   sp = STACKTOP; //@line 28530
   return;
  }
  ___async_unwind = 0; //@line 28533
  HEAP32[$ReallocAsyncCtx >> 2] = 401; //@line 28534
  $6 = $ReallocAsyncCtx + 4 | 0; //@line 28535
  HEAP32[$6 >> 2] = $2; //@line 28536
  sp = STACKTOP; //@line 28537
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 28541
  __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 28542
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 402; //@line 28545
   $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 28546
   HEAP32[$8 >> 2] = $2; //@line 28547
   sp = STACKTOP; //@line 28548
   return;
  }
  ___async_unwind = 0; //@line 28551
  HEAP32[$ReallocAsyncCtx2 >> 2] = 402; //@line 28552
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 28553
  HEAP32[$8 >> 2] = $2; //@line 28554
  sp = STACKTOP; //@line 28555
  return;
 }
}
function __ZN7LoRaMac4joinEb__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2728
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2730
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2732
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2736
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2738
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2740
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 2743
  _mbed_tracef(2, 12685, 12782, $4); //@line 2744
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 2746
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 2749
 $13 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 2750
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 442; //@line 2753
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 2754
  HEAP32[$14 >> 2] = $8; //@line 2755
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 2756
  HEAP32[$15 >> 2] = $10; //@line 2757
  sp = STACKTOP; //@line 2758
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 2762
 ___async_unwind = 0; //@line 2763
 HEAP32[$ReallocAsyncCtx2 >> 2] = 442; //@line 2764
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 2765
 HEAP32[$14 >> 2] = $8; //@line 2766
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 2767
 HEAP32[$15 >> 2] = $10; //@line 2768
 sp = STACKTOP; //@line 2769
 return;
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 2915
 HEAP32[$0 + 20 >> 2] = 0; //@line 2917
 $5 = $0 + 16 | 0; //@line 2918
 HEAP32[$5 >> 2] = 0; //@line 2919
 if ($1 | 0) {
  $$034 = $1; //@line 2922
  $22 = 0; //@line 2922
  do {
   $22 = $22 + 1 | 0; //@line 2924
   $$034 = $$034 >>> 1; //@line 2925
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 2933
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 2936
 HEAP32[$0 + 28 >> 2] = $1; //@line 2938
 HEAP32[$0 + 32 >> 2] = $2; //@line 2940
 HEAP32[$0 >> 2] = 0; //@line 2941
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 2944
 HEAP8[$0 + 9 >> 0] = 0; //@line 2946
 HEAP8[$0 + 8 >> 0] = 0; //@line 2948
 HEAP8[$0 + 36 >> 0] = 0; //@line 2950
 HEAP32[$0 + 40 >> 2] = 0; //@line 2952
 HEAP32[$0 + 44 >> 2] = 0; //@line 2954
 HEAP8[$0 + 184 >> 0] = 0; //@line 2956
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 2958
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 2961
  return $$033 | 0; //@line 2962
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 2965
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 2968
  return $$033 | 0; //@line 2969
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 2972
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 2975
 return $$033 | 0; //@line 2976
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 13756
  $8 = $0; //@line 13756
  $9 = $1; //@line 13756
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13758
   $$0914 = $$0914 + -1 | 0; //@line 13762
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 13763
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13764
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 13772
   }
  }
  $$010$lcssa$off0 = $8; //@line 13777
  $$09$lcssa = $$0914; //@line 13777
 } else {
  $$010$lcssa$off0 = $0; //@line 13779
  $$09$lcssa = $2; //@line 13779
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 13783
 } else {
  $$012 = $$010$lcssa$off0; //@line 13785
  $$111 = $$09$lcssa; //@line 13785
  while (1) {
   $26 = $$111 + -1 | 0; //@line 13790
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 13791
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 13795
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 13798
    $$111 = $26; //@line 13798
   }
  }
 }
 return $$1$lcssa | 0; //@line 13802
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_195($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3047
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3049
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3051
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3053
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3055
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3057
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3059
 $14 = $4 + 12 | 0; //@line 3061
 HEAP32[$4 >> 2] = 452; //@line 3062
 HEAP32[$4 + 4 >> 2] = 0; //@line 3064
 HEAP32[$4 + 8 >> 2] = $2; //@line 3066
 HEAP32[$14 >> 2] = 860; //@line 3067
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 3068
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1836 | 0, $4); //@line 3069
 if (!___async) {
  ___async_unwind = 0; //@line 3072
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 453; //@line 3074
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $14; //@line 3076
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $2; //@line 3078
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $8; //@line 3080
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $6; //@line 3082
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $4; //@line 3084
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $10; //@line 3086
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $12; //@line 3088
 sp = STACKTOP; //@line 3089
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_134($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 29263
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29265
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29267
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29269
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29271
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29273
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29277
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29279
 $17 = $14 + 12 | 0; //@line 29281
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 29282
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 29283
 $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($16, $14, 7) | 0; //@line 29284
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 29288
  ___async_unwind = 0; //@line 29289
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 245; //@line 29291
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 29293
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $10; //@line 29295
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $4; //@line 29297
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $6; //@line 29299
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $8; //@line 29301
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $17; //@line 29303
 sp = STACKTOP; //@line 29304
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_393($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30191
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30195
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30197
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30199
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4; //@line 30204
  HEAP32[$8 + 2496 >> 2] = 2; //@line 30206
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 30209
 _mbed_assert_internal(11890, 11899, 778); //@line 30210
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 321; //@line 30213
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 30214
  HEAP32[$10 >> 2] = $4; //@line 30215
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 30216
  HEAP32[$11 >> 2] = $6; //@line 30217
  $12 = $ReallocAsyncCtx4 + 12 | 0; //@line 30218
  HEAP32[$12 >> 2] = $8; //@line 30219
  sp = STACKTOP; //@line 30220
  return;
 }
 ___async_unwind = 0; //@line 30223
 HEAP32[$ReallocAsyncCtx4 >> 2] = 321; //@line 30224
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 30225
 HEAP32[$10 >> 2] = $4; //@line 30226
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 30227
 HEAP32[$11 >> 2] = $6; //@line 30228
 $12 = $ReallocAsyncCtx4 + 12 | 0; //@line 30229
 HEAP32[$12 >> 2] = $8; //@line 30230
 sp = STACKTOP; //@line 30231
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 19575
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 19577
 $8 = $7 & 255; //@line 19578
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 19580
 $10 = $$ & 255; //@line 19581
 HEAP8[$4 + 1 >> 0] = $10; //@line 19583
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 19585
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 19588
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 19594
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 19601
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 19607
 } else {
  $28 = $$ & 255; //@line 19609
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 19620
 }
 $41 = $2 & 255; //@line 19624
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 19634
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 19636
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 19637
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 19646
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_79($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25553
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25555
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25557
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25559
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25561
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25563
 $13 = $4 + 12 | 0; //@line 25567
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 25568
 $14 = $4 + 16 | 0; //@line 25569
 HEAP32[$14 >> 2] = $8; //@line 25570
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 25571
 $15 = _equeue_alloc($10, 20) | 0; //@line 25572
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 25576
  ___async_unwind = 0; //@line 25577
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 254; //@line 25579
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $13; //@line 25581
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $14; //@line 25583
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $10; //@line 25585
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $13; //@line 25587
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $6; //@line 25589
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $4; //@line 25591
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $2; //@line 25593
 sp = STACKTOP; //@line 25594
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_20($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19236
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19238
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19242
 $8 = $0 + 16 | 0; //@line 19244
 $10 = HEAP32[$8 >> 2] | 0; //@line 19246
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 19249
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 19251
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 19253
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 19255
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 19256
 $18 = HEAP32[$2 >> 2] | 0; //@line 19257
 if (!$18) {
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($15); //@line 19260
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 19264
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19265
 FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 19266
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 55; //@line 19269
  $22 = $ReallocAsyncCtx6 + 4 | 0; //@line 19270
  HEAP32[$22 >> 2] = $15; //@line 19271
  sp = STACKTOP; //@line 19272
  return;
 }
 ___async_unwind = 0; //@line 19275
 HEAP32[$ReallocAsyncCtx6 >> 2] = 55; //@line 19276
 $22 = $ReallocAsyncCtx6 + 4 | 0; //@line 19277
 HEAP32[$22 >> 2] = $15; //@line 19278
 sp = STACKTOP; //@line 19279
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_378($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29075
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 29079
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29081
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29083
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29085
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29087
 $13 = $8 + 12 | 0; //@line 29089
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29090
 $14 = $8 + 16 | 0; //@line 29091
 HEAP8[$14 >> 0] = $4; //@line 29092
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 29093
 $15 = _equeue_alloc($10, 20) | 0; //@line 29094
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 29098
  ___async_unwind = 0; //@line 29099
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 208; //@line 29101
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $13; //@line 29103
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $14; //@line 29105
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $10; //@line 29107
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $13; //@line 29109
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $6; //@line 29111
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $8; //@line 29113
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $12; //@line 29115
 sp = STACKTOP; //@line 29116
 return;
}
function _mbedtls_cipher_free__async_cb_281($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9456
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9460
 _free(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0); //@line 9462
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 9464
 if (!$7) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 9467
  _mbedtls_platform_zeroize($4, 68); //@line 9468
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 564; //@line 9471
   sp = STACKTOP; //@line 9472
   return;
  }
  ___async_unwind = 0; //@line 9475
  HEAP32[$ReallocAsyncCtx2 >> 2] = 564; //@line 9476
  sp = STACKTOP; //@line 9477
  return;
 } else {
  $13 = HEAP32[(HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0) + 28 >> 2] | 0; //@line 9484
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 9485
  FUNCTION_TABLE_vi[$13 & 1023]($7); //@line 9486
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 563; //@line 9489
   $14 = $ReallocAsyncCtx + 4 | 0; //@line 9490
   HEAP32[$14 >> 2] = $4; //@line 9491
   sp = STACKTOP; //@line 9492
   return;
  }
  ___async_unwind = 0; //@line 9495
  HEAP32[$ReallocAsyncCtx >> 2] = 563; //@line 9496
  $14 = $ReallocAsyncCtx + 4 | 0; //@line 9497
  HEAP32[$14 >> 2] = $4; //@line 9498
  sp = STACKTOP; //@line 9499
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_333($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 25934
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25940
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25942
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio(HEAP32[$0 + 8 >> 2] | 0, $6); //@line 25943
 $11 = HEAP32[(HEAP32[$6 >> 2] | 0) + 72 >> 2] | 0; //@line 25946
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 25947
 FUNCTION_TABLE_vi[$11 & 1023]($6); //@line 25948
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 185; //@line 25951
  $12 = $ReallocAsyncCtx16 + 4 | 0; //@line 25952
  HEAP32[$12 >> 2] = $6; //@line 25953
  $13 = $ReallocAsyncCtx16 + 8 | 0; //@line 25954
  HEAP32[$13 >> 2] = $8; //@line 25955
  $14 = $ReallocAsyncCtx16 + 12 | 0; //@line 25956
  HEAP32[$14 >> 2] = $6; //@line 25957
  sp = STACKTOP; //@line 25958
  return;
 }
 ___async_unwind = 0; //@line 25961
 HEAP32[$ReallocAsyncCtx16 >> 2] = 185; //@line 25962
 $12 = $ReallocAsyncCtx16 + 4 | 0; //@line 25963
 HEAP32[$12 >> 2] = $6; //@line 25964
 $13 = $ReallocAsyncCtx16 + 8 | 0; //@line 25965
 HEAP32[$13 >> 2] = $8; //@line 25966
 $14 = $ReallocAsyncCtx16 + 12 | 0; //@line 25967
 HEAP32[$14 >> 2] = $6; //@line 25968
 sp = STACKTOP; //@line 25969
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10162
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10164
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10168
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10170
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10172
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10174
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 10178
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 10181
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 10182
   if (!___async) {
    ___async_unwind = 0; //@line 10185
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 691; //@line 10187
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 10189
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 10191
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 10193
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 10195
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 10197
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 10199
   sp = STACKTOP; //@line 10200
   return;
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 11258
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 11263
   label = 4; //@line 11264
  } else {
   $$01519 = $0; //@line 11266
   $23 = $1; //@line 11266
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 11271
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 11274
    $23 = $6; //@line 11275
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 11279
     label = 4; //@line 11280
     break;
    } else {
     $$01519 = $6; //@line 11283
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 11289
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 11291
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 11299
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 11307
  } else {
   $$pn = $$0; //@line 11309
   while (1) {
    $19 = $$pn + 1 | 0; //@line 11311
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 11315
     break;
    } else {
     $$pn = $19; //@line 11318
    }
   }
  }
  $$sink = $$1$lcssa; //@line 11323
 }
 return $$sink - $1 | 0; //@line 11326
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_204($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 3642
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3644
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3646
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3648
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3650
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3652
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3654
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3656
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3658
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 3659
 __ZN7LoRaPHY18put_radio_to_sleepEv($8); //@line 3660
 if (!___async) {
  ___async_unwind = 0; //@line 3663
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 445; //@line 3665
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 3667
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 3669
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 3671
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 3673
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 3675
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 3677
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 3679
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 3681
 sp = STACKTOP; //@line 3682
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2310
 $2 = $0; //@line 2311
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 2316
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 2320
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2321
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 2322
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 102; //@line 2325
      sp = STACKTOP; //@line 2326
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2329
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 2337
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 2341
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2342
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 2343
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 103; //@line 2346
      sp = STACKTOP; //@line 2347
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2350
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 16463
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 16470
   $10 = $1 + 16 | 0; //@line 16471
   $11 = HEAP32[$10 >> 2] | 0; //@line 16472
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 16475
    HEAP32[$1 + 24 >> 2] = $4; //@line 16477
    HEAP32[$1 + 36 >> 2] = 1; //@line 16479
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 16489
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 16494
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 16497
    HEAP8[$1 + 54 >> 0] = 1; //@line 16499
    break;
   }
   $21 = $1 + 24 | 0; //@line 16502
   $22 = HEAP32[$21 >> 2] | 0; //@line 16503
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 16506
    $28 = $4; //@line 16507
   } else {
    $28 = $22; //@line 16509
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 16518
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7605
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 7607
 $3 = $0 + 12 | 0; //@line 7608
 $4 = HEAP32[$3 >> 2] | 0; //@line 7609
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7613
   _mbed_assert_internal(14775, 14780, 1102); //@line 7614
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 262; //@line 7617
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 7619
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7621
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 7623
    sp = STACKTOP; //@line 7624
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7627
    $10 = HEAP32[$3 >> 2] | 0; //@line 7629
    break;
   }
  } else {
   $10 = $4; //@line 7633
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 7636
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7637
 FUNCTION_TABLE_vii[$9 & 15]($0, $2); //@line 7638
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 263; //@line 7641
  sp = STACKTOP; //@line 7642
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7645
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6351
 $3 = (HEAP8[$0 + 16 >> 0] | 0) != 0; //@line 6354
 $4 = $0 + 12 | 0; //@line 6355
 $5 = HEAP32[$4 >> 2] | 0; //@line 6356
 do {
  if (!$5) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6360
   _mbed_assert_internal(14775, 14780, 1102); //@line 6361
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 216; //@line 6364
    HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 6366
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 6368
    HEAP8[$AsyncCtx2 + 12 >> 0] = $3 & 1; //@line 6371
    sp = STACKTOP; //@line 6372
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6375
    $11 = HEAP32[$4 >> 2] | 0; //@line 6377
    break;
   }
  } else {
   $11 = $5; //@line 6381
  }
 } while (0);
 $10 = HEAP32[$11 >> 2] | 0; //@line 6384
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6385
 FUNCTION_TABLE_vii[$10 & 15]($0, $3); //@line 6386
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 217; //@line 6389
  sp = STACKTOP; //@line 6390
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6393
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb_94($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26543
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26545
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26547
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26549
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26551
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26553
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26555
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26557
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26559
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 26560
 _mbedtls_platform_zeroize($2, 16); //@line 26561
 if (!___async) {
  ___async_unwind = 0; //@line 26564
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 591; //@line 26566
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 26568
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 26570
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 26572
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 26574
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 26576
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 26578
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $2; //@line 26580
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 26582
 sp = STACKTOP; //@line 26583
 return;
}
function __ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$026 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 27172
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27174
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27176
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27178
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $$026 = $2 ? -1006 : -1004; //@line 27184
  $27 = ___async_retval; //@line 27185
  HEAP32[$27 >> 2] = $$026; //@line 27186
  return;
 }
 if ($2) {
  $$026 = $2 ? -1005 : -1004; //@line 27191
  $27 = ___async_retval; //@line 27192
  HEAP32[$27 >> 2] = $$026; //@line 27193
  return;
 }
 $10 = $4 + 124 | 0; //@line 27196
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 27198
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 27199
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 27199
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 27199
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 27204
 $22 = (HEAP32[$4 + 116 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 27210
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 27215
 $$026 = 0; //@line 27216
 $27 = ___async_retval; //@line 27217
 HEAP32[$27 >> 2] = $$026; //@line 27218
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 985
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 988
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 989
 FUNCTION_TABLE_vii[$6 & 15]($0, $1); //@line 990
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 64; //@line 993
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 995
  HEAP16[$AsyncCtx + 8 >> 1] = $3; //@line 997
  HEAP8[$AsyncCtx + 10 >> 0] = $2; //@line 999
  sp = STACKTOP; //@line 1000
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1003
 $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 1006
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1008
 FUNCTION_TABLE_viiiiiiiiiiiiii[$12 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $3 & 65535); //@line 1009
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 65; //@line 1012
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 1014
  sp = STACKTOP; //@line 1015
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1018
  HEAP8[$0 + 688 >> 0] = 2; //@line 1020
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1021
  return;
 }
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2861
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 2866
  return $$0 | 0; //@line 2867
 }
 dest = $0; //@line 2869
 stop = dest + 68 | 0; //@line 2869
 do {
  HEAP32[dest >> 2] = 0; //@line 2869
  dest = dest + 4 | 0; //@line 2869
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 2873
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2874
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 2875
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 565; //@line 2878
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2880
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2882
  sp = STACKTOP; //@line 2883
  return 0; //@line 2884
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2886
 HEAP32[$0 + 60 >> 2] = $8; //@line 2888
 if (!$8) {
  $$0 = -24960; //@line 2891
  return $$0 | 0; //@line 2892
 }
 HEAP32[$0 >> 2] = $1; //@line 2894
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 2899
  return $$0 | 0; //@line 2900
 }
 HEAP32[$0 + 12 >> 2] = 5; //@line 2903
 HEAP32[$0 + 16 >> 2] = 18; //@line 2905
 $$0 = 0; //@line 2906
 return $$0 | 0; //@line 2907
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15957
 $1 = HEAP32[2598] | 0; //@line 15958
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 15964
 } else {
  $19 = 0; //@line 15966
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 15972
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 15978
    $12 = HEAP32[$11 >> 2] | 0; //@line 15979
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 15985
     HEAP8[$12 >> 0] = 10; //@line 15986
     $22 = 0; //@line 15987
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15991
   $17 = ___overflow($1, 10) | 0; //@line 15992
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 668; //@line 15995
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15997
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 15999
    sp = STACKTOP; //@line 16000
    return 0; //@line 16001
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16003
    $22 = $17 >> 31; //@line 16005
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 16012
 }
 return $22 | 0; //@line 16014
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2241
 HEAP32[$0 >> 2] = 604; //@line 2242
 _gpio_irq_free($0 + 28 | 0); //@line 2244
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2246
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2252
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2253
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2254
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 100; //@line 2257
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2259
    sp = STACKTOP; //@line 2260
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2263
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2269
 if (!$10) {
  __ZdlPv($0); //@line 2272
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2277
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2278
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2279
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 101; //@line 2282
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2284
  sp = STACKTOP; //@line 2285
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2288
 __ZdlPv($0); //@line 2289
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_196($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 3096
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3098
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3100
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3102
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3104
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3106
 $12 = $4 + 12 | 0; //@line 3108
 HEAP32[$4 >> 2] = 455; //@line 3109
 HEAP32[$4 + 4 >> 2] = 0; //@line 3111
 HEAP32[$4 + 8 >> 2] = $2; //@line 3113
 HEAP32[$12 >> 2] = 860; //@line 3114
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 3115
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1856 | 0, $4); //@line 3116
 if (!___async) {
  ___async_unwind = 0; //@line 3119
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 456; //@line 3121
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $12; //@line 3123
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 3125
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 3127
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 3129
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 3131
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $4; //@line 3133
 sp = STACKTOP; //@line 3134
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_136($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29428
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29432
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29434
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29436
 $9 = $4 + 12 | 0; //@line 29438
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29439
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 29440
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 11) | 0; //@line 29441
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 249; //@line 29444
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 29445
  HEAP32[$11 >> 2] = $9; //@line 29446
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 29447
  HEAP32[$12 >> 2] = $8; //@line 29448
  sp = STACKTOP; //@line 29449
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 29453
 ___async_unwind = 0; //@line 29454
 HEAP32[$ReallocAsyncCtx7 >> 2] = 249; //@line 29455
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 29456
 HEAP32[$11 >> 2] = $9; //@line 29457
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 29458
 HEAP32[$12 >> 2] = $8; //@line 29459
 sp = STACKTOP; //@line 29460
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_361($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27554
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27556
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27558
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27560
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = (HEAP8[$2 >> 0] | 0) + 1 << 24 >> 24; //@line 27567
  return;
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 476 | 0); //@line 27571
 HEAP8[$4 + 1177 >> 0] = 0; //@line 27573
 HEAP8[$4 + 2062 >> 0] = 0; //@line 27575
 HEAP8[$6 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27577
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27578
 $13 = __ZN7LoRaMac21handle_retransmissionEv($4) | 0; //@line 27579
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 428; //@line 27582
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 27583
  HEAP32[$14 >> 2] = $2; //@line 27584
  sp = STACKTOP; //@line 27585
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 27589
 ___async_unwind = 0; //@line 27590
 HEAP32[$ReallocAsyncCtx2 >> 2] = 428; //@line 27591
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 27592
 HEAP32[$14 >> 2] = $2; //@line 27593
 sp = STACKTOP; //@line 27594
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26253
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26257
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26259
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26261
 $9 = $4 + 12 | 0; //@line 26263
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26264
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 26265
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 11) | 0; //@line 26266
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 306; //@line 26269
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 26270
  HEAP32[$11 >> 2] = $9; //@line 26271
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 26272
  HEAP32[$12 >> 2] = $8; //@line 26273
  sp = STACKTOP; //@line 26274
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 26278
 ___async_unwind = 0; //@line 26279
 HEAP32[$ReallocAsyncCtx3 >> 2] = 306; //@line 26280
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 26281
 HEAP32[$11 >> 2] = $9; //@line 26282
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 26283
 HEAP32[$12 >> 2] = $8; //@line 26284
 sp = STACKTOP; //@line 26285
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_309($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22846
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22850
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22852
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22854
 $9 = $4 + 12 | 0; //@line 22856
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22857
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 22858
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 5) | 0; //@line 22859
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 301; //@line 22862
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 22863
  HEAP32[$11 >> 2] = $9; //@line 22864
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 22865
  HEAP32[$12 >> 2] = $8; //@line 22866
  sp = STACKTOP; //@line 22867
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 22871
 ___async_unwind = 0; //@line 22872
 HEAP32[$ReallocAsyncCtx7 >> 2] = 301; //@line 22873
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 22874
 HEAP32[$11 >> 2] = $9; //@line 22875
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 22876
 HEAP32[$12 >> 2] = $8; //@line 22877
 sp = STACKTOP; //@line 22878
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_112($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27850
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27854
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27856
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27858
 $9 = $4 + 12 | 0; //@line 27860
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27861
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 27862
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 27863
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 237; //@line 27866
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 27867
  HEAP32[$11 >> 2] = $9; //@line 27868
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 27869
  HEAP32[$12 >> 2] = $8; //@line 27870
  sp = STACKTOP; //@line 27871
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 27875
 ___async_unwind = 0; //@line 27876
 HEAP32[$ReallocAsyncCtx7 >> 2] = 237; //@line 27877
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 27878
 HEAP32[$11 >> 2] = $9; //@line 27879
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 27880
 HEAP32[$12 >> 2] = $8; //@line 27881
 sp = STACKTOP; //@line 27882
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_110($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 27783
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27787
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27789
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27791
 $9 = $4 + 12 | 0; //@line 27793
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27794
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 27795
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 27796
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 233; //@line 27799
  $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 27800
  HEAP32[$11 >> 2] = $9; //@line 27801
  $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 27802
  HEAP32[$12 >> 2] = $8; //@line 27803
  sp = STACKTOP; //@line 27804
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 27808
 ___async_unwind = 0; //@line 27809
 HEAP32[$ReallocAsyncCtx8 >> 2] = 233; //@line 27810
 $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 27811
 HEAP32[$11 >> 2] = $9; //@line 27812
 $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 27813
 HEAP32[$12 >> 2] = $8; //@line 27814
 sp = STACKTOP; //@line 27815
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 29195
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29199
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29201
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29203
 $9 = $4 + 12 | 0; //@line 29205
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29206
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 29207
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 29208
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 241; //@line 29211
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 29212
  HEAP32[$11 >> 2] = $9; //@line 29213
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 29214
  HEAP32[$12 >> 2] = $8; //@line 29215
  sp = STACKTOP; //@line 29216
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 29220
 ___async_unwind = 0; //@line 29221
 HEAP32[$ReallocAsyncCtx9 >> 2] = 241; //@line 29222
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 29223
 HEAP32[$11 >> 2] = $9; //@line 29224
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 29225
 HEAP32[$12 >> 2] = $8; //@line 29226
 sp = STACKTOP; //@line 29227
 return;
}
function _mbed_vtracef__async_cb_370($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28504
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28506
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28508
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28510
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 28515
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28517
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 28522
 $16 = _snprintf($4, $6, 11774, $2) | 0; //@line 28523
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 28525
 $19 = $4 + $$18 | 0; //@line 28527
 $20 = $6 - $$18 | 0; //@line 28528
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 11852, $12) | 0; //@line 28536
  }
 }
 $23 = HEAP32[174] | 0; //@line 28539
 $24 = HEAP32[167] | 0; //@line 28540
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 28541
 FUNCTION_TABLE_vi[$23 & 1023]($24); //@line 28542
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 28545
  sp = STACKTOP; //@line 28546
  return;
 }
 ___async_unwind = 0; //@line 28549
 HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 28550
 sp = STACKTOP; //@line 28551
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30300
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30302
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30304
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30306
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30308
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 30311
 _equeue_event_dtor($4, 268); //@line 30312
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 30313
 $10 = _equeue_post($6, 269, $4) | 0; //@line 30314
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 270; //@line 30317
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 30318
  HEAP32[$11 >> 2] = $2; //@line 30319
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 30320
  HEAP32[$12 >> 2] = $8; //@line 30321
  sp = STACKTOP; //@line 30322
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 30326
 ___async_unwind = 0; //@line 30327
 HEAP32[$ReallocAsyncCtx3 >> 2] = 270; //@line 30328
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 30329
 HEAP32[$11 >> 2] = $2; //@line 30330
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 30331
 HEAP32[$12 >> 2] = $8; //@line 30332
 sp = STACKTOP; //@line 30333
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27716
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27720
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27722
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27724
 $9 = $4 + 12 | 0; //@line 27726
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27727
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 27728
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 27729
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 27732
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 27733
  HEAP32[$11 >> 2] = $9; //@line 27734
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 27735
  HEAP32[$12 >> 2] = $8; //@line 27736
  sp = STACKTOP; //@line 27737
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 27741
 ___async_unwind = 0; //@line 27742
 HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 27743
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 27744
 HEAP32[$11 >> 2] = $9; //@line 27745
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 27746
 HEAP32[$12 >> 2] = $8; //@line 27747
 sp = STACKTOP; //@line 27748
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5770
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5774
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5776
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5778
 $9 = $4 + 12 | 0; //@line 5780
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 5781
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 5782
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 5783
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 335; //@line 5786
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 5787
  HEAP32[$11 >> 2] = $9; //@line 5788
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 5789
  HEAP32[$12 >> 2] = $8; //@line 5790
  sp = STACKTOP; //@line 5791
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 5795
 ___async_unwind = 0; //@line 5796
 HEAP32[$ReallocAsyncCtx5 >> 2] = 335; //@line 5797
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 5798
 HEAP32[$11 >> 2] = $9; //@line 5799
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 5800
 HEAP32[$12 >> 2] = $8; //@line 5801
 sp = STACKTOP; //@line 5802
 return;
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 11 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 21735
  HEAP32[$1 + 720 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 21740
  HEAP32[$1 + 724 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 21745
  HEAP32[$1 + 728 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 21750
  HEAP32[$1 + 732 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 21755
  HEAP32[$1 + 736 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 21760
  $26 = $0 + 128 | 0; //@line 21761
  HEAP8[$1 + 753 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 21766
  $$pre$phiZ2D = $26; //@line 21767
 } else {
  $$pre$phiZ2D = $0 + 128 | 0; //@line 21770
 }
 HEAP8[$1 + 708 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 21775
 HEAP8[$1 + 709 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 21779
 HEAP8[$1 + 741 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 21783
 HEAP32[$1 + 744 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 21787
 HEAP8[$1 + 748 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 21791
 HEAP8[$1 + 752 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 21795
 HEAP32[$1 + 756 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 21799
 HEAP32[$1 + 760 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 21803
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_41($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20734
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20738
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20740
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20742
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 20745
 $10 = HEAP32[$4 >> 2] | 0; //@line 20746
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 20749
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 20750
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 20751
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 517; //@line 20754
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 20755
  HEAP32[$14 >> 2] = $6; //@line 20756
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 20757
  HEAP32[$15 >> 2] = $8; //@line 20758
  sp = STACKTOP; //@line 20759
  return;
 }
 ___async_unwind = 0; //@line 20762
 HEAP32[$ReallocAsyncCtx7 >> 2] = 517; //@line 20763
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 20764
 HEAP32[$14 >> 2] = $6; //@line 20765
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 20766
 HEAP32[$15 >> 2] = $8; //@line 20767
 sp = STACKTOP; //@line 20768
 return;
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9525
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9527
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9529
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9531
 $7 = $2 + 12 | 0; //@line 9532
 $8 = HEAP32[$7 >> 2] | 0; //@line 9533
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 9536
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 9540
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 9541
 FUNCTION_TABLE_vii[$11 & 15]($6, $2); //@line 9542
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 480; //@line 9545
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 9546
  HEAP32[$12 >> 2] = $7; //@line 9547
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 9548
  HEAP32[$13 >> 2] = $4; //@line 9549
  sp = STACKTOP; //@line 9550
  return;
 }
 ___async_unwind = 0; //@line 9553
 HEAP32[$ReallocAsyncCtx2 >> 2] = 480; //@line 9554
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 9555
 HEAP32[$12 >> 2] = $7; //@line 9556
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 9557
 HEAP32[$13 >> 2] = $4; //@line 9558
 sp = STACKTOP; //@line 9559
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9510
 STACKTOP = STACKTOP + 16 | 0; //@line 9511
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9511
 if (!$1) {
  $$0 = -1003; //@line 9515
 } else {
  _mbed_tracef(16, 11997, 12383, sp); //@line 9517
  HEAP32[$0 + 3168 >> 2] = $1; //@line 9519
  $4 = $0 + 2496 | 0; //@line 9520
  $6 = (HEAP32[$4 >> 2] | 0) == 0; //@line 9522
  HEAP32[$4 >> 2] = 2; //@line 9523
  if ($6) {
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9525
   $7 = __ZN7LoRaMac10initializeEPN6events10EventQueueE($0, $1) | 0; //@line 9526
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 328; //@line 9529
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 9531
    sp = STACKTOP; //@line 9532
    STACKTOP = sp; //@line 9533
    return 0; //@line 9533
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9535
   if (!$7) {
    HEAP32[$4 >> 2] = 2; //@line 9538
    $$0 = 0; //@line 9539
   } else {
    $$0 = $7; //@line 9541
   }
  } else {
   $$0 = 0; //@line 9544
  }
 }
 STACKTOP = sp; //@line 9547
 return $$0 | 0; //@line 9547
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_291($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10210
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10216
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10218
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10220
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10222
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 10227
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 10229
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 10230
 if (!___async) {
  ___async_unwind = 0; //@line 10233
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 691; //@line 10235
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 10237
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 10239
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 10241
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 10243
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 10245
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 10247
 sp = STACKTOP; //@line 10248
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_39($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20637
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20639
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20643
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20645
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20647
 $11 = HEAP32[$2 >> 2] | 0; //@line 20648
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 20651
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 20652
 $17 = HEAP16[$15 >> 1] & 255; //@line 20654
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 20655
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 20656
 if (!___async) {
  ___async_unwind = 0; //@line 20659
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 515; //@line 20661
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 20663
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 20665
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 20667
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 20669
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 20671
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 20673
 sp = STACKTOP; //@line 20674
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_38($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20593
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20595
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20599
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20601
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20603
 $11 = HEAP32[$2 >> 2] | 0; //@line 20604
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 20607
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 20608
 $17 = HEAP16[$15 >> 1] & 255; //@line 20610
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 20611
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 20612
 if (!___async) {
  ___async_unwind = 0; //@line 20615
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 515; //@line 20617
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 20619
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 20621
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 20623
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 20625
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 20627
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 20629
 sp = STACKTOP; //@line 20630
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_68($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24788
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24790
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24792
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24794
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 24796
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24798
 $12 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 24801
 $13 = HEAP32[$4 >> 2] | 0; //@line 24802
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 24805
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 24806
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 24807
 if (!___async) {
  ___async_unwind = 0; //@line 24810
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 504; //@line 24812
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 24814
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 24816
 HEAP8[$ReallocAsyncCtx3 + 12 >> 0] = $12 & 1; //@line 24819
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 24821
 HEAP8[$ReallocAsyncCtx3 + 20 >> 0] = $8; //@line 24823
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $10; //@line 24825
 sp = STACKTOP; //@line 24826
 return;
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$i = 0, $$1$lcssa$i = 0, $$18$i = 0, $$19$i = 0, $10 = 0, $18 = 0, $19 = 0, $21 = 0, $8 = 0, $9 = 0, label = 0;
 $8 = $0 + 88 | 0; //@line 21820
 $9 = $1 & 255; //@line 21821
 $10 = HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 21822
 $$18$i = ($9 | 0) == ($10 | 0) ? $1 : $9 + 255 & 255; //@line 21826
 if (($$18$i & 255 | 0) == ($10 | 0)) {
  $$1$lcssa$i = $$18$i; //@line 21830
  return $$1$lcssa$i | 0; //@line 21831
 }
 $18 = HEAPU8[$0 + 92 >> 0] | 0; //@line 21835
 $$19$i = $$18$i; //@line 21836
 while (1) {
  $19 = $$19$i << 24 >> 24; //@line 21838
  if (($19 | 0) < ($18 | 0)) {
   if (HEAP8[(HEAP32[$8 >> 2] | 0) + $19 >> 0] | 0) {
    $$1$lcssa$i = $$19$i; //@line 21846
    label = 6; //@line 21847
    break;
   }
  }
  $21 = $$19$i & 255; //@line 21851
  $$1$i = ($21 | 0) == ($10 | 0) ? $$19$i : $21 + 255 & 255; //@line 21855
  if (($$1$i & 255 | 0) == ($10 | 0)) {
   $$1$lcssa$i = $$1$i; //@line 21859
   label = 6; //@line 21860
   break;
  } else {
   $$19$i = $$1$i; //@line 21863
  }
 }
 if ((label | 0) == 6) {
  return $$1$lcssa$i | 0; //@line 21867
 }
 return 0; //@line 21869
}
function __ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $28 = 0, $6 = 0, $8 = 0, $or$cond$i = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5998
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6002
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6004
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6006
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 6008
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 1173 | 0; //@line 6010
 $17 = __ZN7LoRaPHY15get_max_payloadEhb($6, HEAP8[$2 >> 0] | 0, (HEAP8[$14 >> 0] | 0) != 0) | 0; //@line 6013
 $18 = $17 & 255; //@line 6014
 $19 = $8 & 255; //@line 6015
 if ($19 >>> 0 > $18 >>> 0) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 6018
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 6019
  $$0 = 0; //@line 6020
  $$09 = $17; //@line 6020
 } else {
  $$0 = $19; //@line 6024
  $$09 = $18 - $8 & 255; //@line 6024
 }
 $28 = $$0 + ($12 & 255) | 0; //@line 6031
 $or$cond$i = $28 >>> 0 < 256 & $28 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($6, HEAP8[$2 >> 0] | 0, (HEAP8[$14 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 6035
 HEAP8[___async_retval >> 0] = $or$cond$i ? $17 : $$09; //@line 6038
 return;
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2553
 HEAP32[$0 >> 2] = 0; //@line 2554
 $1 = $0 + 8 | 0; //@line 2555
 $2 = $0 + 16 | 0; //@line 2556
 HEAP32[$1 >> 2] = 0; //@line 2557
 HEAP32[$1 + 4 >> 2] = 0; //@line 2557
 HEAP32[$1 + 8 >> 2] = 0; //@line 2557
 HEAP32[$1 + 12 >> 2] = 0; //@line 2557
 $4 = $0 + 24 | 0; //@line 2559
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 2560
 HEAP8[$0 + 28 >> 0] = 1; //@line 2562
 $6 = HEAP32[$4 >> 2] | 0; //@line 2563
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2564
 $7 = _ticker_read_us($6) | 0; //@line 2565
 $8 = tempRet0; //@line 2566
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 112; //@line 2569
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2571
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2573
  sp = STACKTOP; //@line 2574
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2577
  $11 = $1; //@line 2578
  HEAP32[$11 >> 2] = $7; //@line 2580
  HEAP32[$11 + 4 >> 2] = $8; //@line 2583
  $15 = $2; //@line 2584
  HEAP32[$15 >> 2] = 0; //@line 2586
  HEAP32[$15 + 4 >> 2] = 0; //@line 2589
  return;
 }
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$030 = 0.0, $10 = 0.0, $45 = 0.0, $6 = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 712
   return $$0 | 0; //@line 713
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$030 = 125.0e3; //@line 721
     break;
    }
   case 8:
    {
     $$030 = 25.0e4; //@line 725
     break;
    }
   case 9:
    {
     $$030 = 5.0e5; //@line 729
     break;
    }
   default:
    {
     $$030 = 0.0; //@line 733
    }
   }
   $6 = HEAP32[$0 + 756 >> 2] | 0; //@line 737
   $10 = 1.0 / ($$030 / +(1 << $6 | 0)); //@line 741
   $45 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($6 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($6 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 777
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $10 + $10 * (($45 > 0.0 ? $45 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 787
   return $$0 | 0; //@line 788
  }
 default:
  {
   $$0 = 0; //@line 792
   return $$0 | 0; //@line 793
  }
 }
 return 0; //@line 796
}
function _mbedtls_gcm_setkey__async_cb_131($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29094
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29096
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29098
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29100
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29102
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29104
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29106
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29108
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29112
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 29115
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 29116
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 29120
  ___async_unwind = 0; //@line 29121
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 29123
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 29125
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 29127
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 29129
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 29131
 sp = STACKTOP; //@line 29132
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22516
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22518
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22520
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22524
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 22528
  label = 4; //@line 22529
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 22534
   label = 4; //@line 22535
  } else {
   $$037$off039 = 3; //@line 22537
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 22541
  $17 = $8 + 40 | 0; //@line 22542
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 22545
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 22555
    $$037$off039 = $$037$off038; //@line 22556
   } else {
    $$037$off039 = $$037$off038; //@line 22558
   }
  } else {
   $$037$off039 = $$037$off038; //@line 22561
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 22564
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb_44($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20835
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20839
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20841
 L2 : do {
  if (!$AsyncRetVal) {
   switch (HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0) {
   case 36:
   case 4:
   case 3:
   case 2:
    {
     break;
    }
   default:
    {
     $$0 = -24832; //@line 20852
     break L2;
    }
   }
   $9 = _calloc(1, 36) | 0; //@line 20856
   if (!$9) {
    $$0 = -24960; //@line 20859
   } else {
    HEAP32[$4 + 64 >> 2] = $9; //@line 20862
    $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 20863
    _mbedtls_platform_zeroize($9, 16); //@line 20864
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 580; //@line 20867
     sp = STACKTOP; //@line 20868
     return;
    }
    ___async_unwind = 0; //@line 20871
    HEAP32[$ReallocAsyncCtx >> 2] = 580; //@line 20872
    sp = STACKTOP; //@line 20873
    return;
   }
  } else {
   $$0 = $AsyncRetVal; //@line 20877
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 20881
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 14992
 while (1) {
  if ((HEAPU8[15529 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 14999
   break;
  }
  $7 = $$016 + 1 | 0; //@line 15002
  if (($7 | 0) == 87) {
   $$01214 = 15617; //@line 15005
   $$115 = 87; //@line 15005
   label = 5; //@line 15006
   break;
  } else {
   $$016 = $7; //@line 15009
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 15617; //@line 15015
  } else {
   $$01214 = 15617; //@line 15017
   $$115 = $$016; //@line 15017
   label = 5; //@line 15018
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 15023
   $$113 = $$01214; //@line 15024
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 15028
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 15035
   if (!$$115) {
    $$012$lcssa = $$113; //@line 15038
    break;
   } else {
    $$01214 = $$113; //@line 15041
    label = 5; //@line 15042
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 15049
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16322
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 16331
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 16336
      HEAP32[$13 >> 2] = $2; //@line 16337
      $19 = $1 + 40 | 0; //@line 16338
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 16341
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16351
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 16355
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 16362
    }
   }
  }
 } while (0);
 return;
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8314
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8316
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8318
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8320
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 8322
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 8324
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 17557; //@line 8329
  HEAP32[$4 + 4 >> 2] = $6; //@line 8331
  _abort_message(17466, $4); //@line 8332
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 8335
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 8338
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 8339
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 8340
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 8344
  ___async_unwind = 0; //@line 8345
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 670; //@line 8347
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 8349
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 8351
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 8353
 sp = STACKTOP; //@line 8354
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_12($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18569
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18575
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18577
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18579
 $12 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 18581
 $14 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1888 >> 2] | 0; //@line 18583
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 18584
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $12, $14); //@line 18585
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 423; //@line 18588
  $15 = $ReallocAsyncCtx + 4 | 0; //@line 18589
  HEAP32[$15 >> 2] = $8; //@line 18590
  $16 = $ReallocAsyncCtx + 8 | 0; //@line 18591
  HEAP32[$16 >> 2] = $10; //@line 18592
  sp = STACKTOP; //@line 18593
  return;
 }
 ___async_unwind = 0; //@line 18596
 HEAP32[$ReallocAsyncCtx >> 2] = 423; //@line 18597
 $15 = $ReallocAsyncCtx + 4 | 0; //@line 18598
 HEAP32[$15 >> 2] = $8; //@line 18599
 $16 = $ReallocAsyncCtx + 8 | 0; //@line 18600
 HEAP32[$16 >> 2] = $10; //@line 18601
 sp = STACKTOP; //@line 18602
 return;
}
function _mbedtls_gcm_setkey__async_cb_132($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29139
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29141
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29143
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29145
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29147
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29149
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29151
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29153
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 29154
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 29155
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 29159
  ___async_unwind = 0; //@line 29160
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 595; //@line 29162
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 29164
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 29166
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 29168
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 29170
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 29172
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 29174
 sp = STACKTOP; //@line 29175
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_93($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26499
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26503
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26505
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26507
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26509
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26511
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26513
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26515
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 26516
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 26517
 _mbedtls_platform_zeroize($4, 16); //@line 26518
 if (!___async) {
  ___async_unwind = 0; //@line 26521
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 592; //@line 26523
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 26525
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 26527
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 26529
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 26531
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 26533
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $16; //@line 26535
 sp = STACKTOP; //@line 26536
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_171($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $28 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1572
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1574
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1580
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1582
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = (HEAPU8[$2 + 18 >> 0] | 0) << 16 | (HEAPU8[$2 + 19 >> 0] | 0) << 24 | (HEAPU8[$2 + 17 >> 0] | 0) << 8 | (HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0); //@line 1602
  $$0 = 0; //@line 1603
 } else {
  $$0 = $AsyncRetVal; //@line 1605
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1607
 _mbedtls_cipher_free($8); //@line 1608
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 1611
  $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 1612
  HEAP32[$28 >> 2] = $$0; //@line 1613
  sp = STACKTOP; //@line 1614
  return;
 }
 ___async_unwind = 0; //@line 1617
 HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 1618
 $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 1619
 HEAP32[$28 >> 2] = $$0; //@line 1620
 sp = STACKTOP; //@line 1621
 return;
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2190
 HEAP32[$0 >> 2] = 604; //@line 2191
 _gpio_irq_free($0 + 28 | 0); //@line 2193
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2195
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2201
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2202
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2203
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 98; //@line 2206
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2208
    sp = STACKTOP; //@line 2209
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2212
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2218
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2225
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2226
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2227
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 99; //@line 2230
  sp = STACKTOP; //@line 2231
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2234
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24747
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24749
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24751
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24753
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 24755
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24757
 $11 = HEAP32[$4 >> 2] | 0; //@line 24758
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 40 >> 2] | 0; //@line 24761
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 24762
 $15 = FUNCTION_TABLE_ii[$14 & 15]($11) | 0; //@line 24763
 if (!___async) {
  HEAP8[___async_retval >> 0] = $15; //@line 24767
  ___async_unwind = 0; //@line 24768
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 503; //@line 24770
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 24772
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 24774
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 24776
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $8; //@line 24778
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 24780
 sp = STACKTOP; //@line 24781
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 15065
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 15069
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 15072
   if (!$5) {
    $$0 = 0; //@line 15075
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 15081
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 15087
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 15094
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 15101
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 15108
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 15115
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 15122
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 15126
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 15136
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_215($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $28 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4992
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4994
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5000
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5002
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = (HEAPU8[$2 + 18 >> 0] | 0) << 16 | (HEAPU8[$2 + 19 >> 0] | 0) << 24 | (HEAPU8[$2 + 17 >> 0] | 0) << 8 | (HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0); //@line 5022
  $$0 = 0; //@line 5023
 } else {
  $$0 = $AsyncRetVal; //@line 5025
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 5027
 _mbedtls_cipher_free($8); //@line 5028
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 5031
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 5032
  HEAP32[$28 >> 2] = $$0; //@line 5033
  sp = STACKTOP; //@line 5034
  return;
 }
 ___async_unwind = 0; //@line 5037
 HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 5038
 $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 5039
 HEAP32[$28 >> 2] = $$0; //@line 5040
 sp = STACKTOP; //@line 5041
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7833
 $1 = $0 + 12 | 0; //@line 7834
 $2 = HEAP32[$1 >> 2] | 0; //@line 7835
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7839
   _mbed_assert_internal(14775, 14780, 528); //@line 7840
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 273; //@line 7843
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 7845
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7847
    sp = STACKTOP; //@line 7848
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7851
    $7 = HEAP32[$1 >> 2] | 0; //@line 7853
    break;
   }
  } else {
   $7 = $2; //@line 7857
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 7860
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7861
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 7862
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 274; //@line 7865
  sp = STACKTOP; //@line 7866
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7869
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30152
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30156
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30158
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30160
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30162
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30164
 $13 = $4 + 12 | 0; //@line 30166
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 30167
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 30168
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 30169
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 30173
  ___async_unwind = 0; //@line 30174
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 319; //@line 30176
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $13; //@line 30178
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 30180
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 30182
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 30184
 sp = STACKTOP; //@line 30185
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22459
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22461
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22463
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22465
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22469
 $11 = $6 + 12 | 0; //@line 22471
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 22472
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 22473
 $12 = _equeue_alloc($10, 16) | 0; //@line 22474
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 22478
  ___async_unwind = 0; //@line 22479
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 549; //@line 22481
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $11; //@line 22483
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $2; //@line 22485
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 22487
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $4; //@line 22489
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $11; //@line 22491
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $6; //@line 22493
 sp = STACKTOP; //@line 22494
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7596
 HEAP32[$0 >> 2] = 10244; //@line 7597
 $1 = $0 + 40 | 0; //@line 7598
 _emscripten_asm_const_ii(12, $1 | 0) | 0; //@line 7599
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 7601
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7606
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7607
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7608
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 646; //@line 7611
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7613
    sp = STACKTOP; //@line 7614
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7617
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7622
 __ZN4mbed10TimerEventD2Ev($0); //@line 7623
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 647; //@line 7626
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 7628
  sp = STACKTOP; //@line 7629
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7632
  __ZdlPv($0); //@line 7633
  return;
 }
}
function _mbed_vtracef__async_cb_376($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28889
 $3 = HEAP32[175] | 0; //@line 28893
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[167] | 0; //@line 28897
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 28898
  FUNCTION_TABLE_vi[$3 & 1023]($5); //@line 28899
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 128; //@line 28902
   sp = STACKTOP; //@line 28903
   return;
  }
  ___async_unwind = 0; //@line 28906
  HEAP32[$ReallocAsyncCtx2 >> 2] = 128; //@line 28907
  sp = STACKTOP; //@line 28908
  return;
 } else {
  $6 = HEAP32[174] | 0; //@line 28911
  $7 = HEAP32[167] | 0; //@line 28912
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 28913
  FUNCTION_TABLE_vi[$6 & 1023]($7); //@line 28914
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 130; //@line 28917
   sp = STACKTOP; //@line 28918
   return;
  }
  ___async_unwind = 0; //@line 28921
  HEAP32[$ReallocAsyncCtx4 >> 2] = 130; //@line 28922
  sp = STACKTOP; //@line 28923
  return;
 }
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 15261
 $32 = $0 + 3 | 0; //@line 15275
 $33 = HEAP8[$32 >> 0] | 0; //@line 15276
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 15278
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 15283
  $$sink21$lcssa = $32; //@line 15283
 } else {
  $$sink2123 = $32; //@line 15285
  $39 = $35; //@line 15285
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 15288
   $41 = HEAP8[$40 >> 0] | 0; //@line 15289
   $39 = $39 << 8 | $41 & 255; //@line 15291
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 15296
    $$sink21$lcssa = $40; //@line 15296
    break;
   } else {
    $$sink2123 = $40; //@line 15299
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 15306
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17841
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17843
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17845
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17847
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17849
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17851
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 17857
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 17860
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 17861
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 17862
 if (!___async) {
  ___async_unwind = 0; //@line 17865
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 470; //@line 17867
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 17869
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 17871
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 17873
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 17875
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 17877
 sp = STACKTOP; //@line 17878
 return;
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1167
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1171
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1173
 $7 = $4 + 12 | 0; //@line 1175
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 1176
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 1177
 __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $4); //@line 1178
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 383; //@line 1181
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 1182
  HEAP32[$8 >> 2] = $7; //@line 1183
  $9 = $ReallocAsyncCtx3 + 8 | 0; //@line 1184
  HEAP32[$9 >> 2] = $4; //@line 1185
  sp = STACKTOP; //@line 1186
  return;
 }
 ___async_unwind = 0; //@line 1189
 HEAP32[$ReallocAsyncCtx3 >> 2] = 383; //@line 1190
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 1191
 HEAP32[$8 >> 2] = $7; //@line 1192
 $9 = $ReallocAsyncCtx3 + 8 | 0; //@line 1193
 HEAP32[$9 >> 2] = $4; //@line 1194
 sp = STACKTOP; //@line 1195
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_254($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 8010
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8014
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8016
 $7 = $6 + 12 | 0; //@line 8018
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 8019
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 8020
 __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($4, $6); //@line 8021
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 345; //@line 8024
  $8 = $ReallocAsyncCtx9 + 4 | 0; //@line 8025
  HEAP32[$8 >> 2] = $7; //@line 8026
  $9 = $ReallocAsyncCtx9 + 8 | 0; //@line 8027
  HEAP32[$9 >> 2] = $6; //@line 8028
  sp = STACKTOP; //@line 8029
  return;
 }
 ___async_unwind = 0; //@line 8032
 HEAP32[$ReallocAsyncCtx9 >> 2] = 345; //@line 8033
 $8 = $ReallocAsyncCtx9 + 4 | 0; //@line 8034
 HEAP32[$8 >> 2] = $7; //@line 8035
 $9 = $ReallocAsyncCtx9 + 8 | 0; //@line 8036
 HEAP32[$9 >> 2] = $6; //@line 8037
 sp = STACKTOP; //@line 8038
 return;
}
function __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$expand_i1_val = 0, $12 = 0, $23 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6936
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6938
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6942
 if ((HEAP32[$0 + 8 >> 2] | 0) != (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0)) {
  HEAP32[$6 + 2020 >> 2] = 12; //@line 6947
  $$0 = 0; //@line 6948
  $23 = ___async_retval; //@line 6949
  $$0$expand_i1_val = $$0 & 1; //@line 6950
  HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 6951
  return;
 }
 if ($8 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv($6 + 4 | 0) | 0) & 65535) >>> 0) {
  $$0 = 1; //@line 6959
  $23 = ___async_retval; //@line 6960
  $$0$expand_i1_val = $$0 & 1; //@line 6961
  HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 6962
  return;
 }
 HEAP32[$6 + 2020 >> 2] = 10; //@line 6966
 HEAP32[$6 + 2048 >> 2] = HEAP32[$12 >> 2]; //@line 6969
 $$0 = 0; //@line 6970
 $23 = ___async_retval; //@line 6971
 $$0$expand_i1_val = $$0 & 1; //@line 6972
 HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 6973
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7663
 $2 = $0 + 12 | 0; //@line 7665
 $3 = HEAP32[$2 >> 2] | 0; //@line 7666
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7670
   _mbed_assert_internal(14775, 14780, 528); //@line 7671
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 649; //@line 7674
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 7676
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7678
    sp = STACKTOP; //@line 7679
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7682
    $8 = HEAP32[$2 >> 2] | 0; //@line 7684
    break;
   }
  } else {
   $8 = $3; //@line 7688
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 7691
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7693
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 7694
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 650; //@line 7697
  sp = STACKTOP; //@line 7698
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7701
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2406
 HEAP32[$0 >> 2] = 10244; //@line 2407
 __ZN4mbed6Ticker6detachEv($0); //@line 2408
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2410
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2416
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2417
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2418
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 106; //@line 2421
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2423
    sp = STACKTOP; //@line 2424
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2427
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2432
 __ZN4mbed10TimerEventD2Ev($0); //@line 2433
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 107; //@line 2436
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 2438
  sp = STACKTOP; //@line 2439
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2442
  __ZdlPv($0); //@line 2443
  return;
 }
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_11($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18529
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18531
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18533
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18535
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18537
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18539
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18541
 HEAP8[$2 + 2026 >> 0] = HEAP8[$2 + 1941 >> 0] | 0; //@line 18545
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 18546
 __ZN7LoRaPHY9rx_configEP18rx_config_params_t($4, $6) | 0; //@line 18547
 if (!___async) {
  ___async_unwind = 0; //@line 18550
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 422; //@line 18552
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $8; //@line 18554
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 18556
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $4; //@line 18558
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 18560
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 18562
 sp = STACKTOP; //@line 18563
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16155
 STACKTOP = STACKTOP + 16 | 0; //@line 16156
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16156
 $1 = sp; //@line 16157
 HEAP32[$1 >> 2] = $varargs; //@line 16158
 $2 = HEAP32[2566] | 0; //@line 16159
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16160
 _vfprintf($2, $0, $1) | 0; //@line 16161
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 671; //@line 16164
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 16166
  sp = STACKTOP; //@line 16167
  STACKTOP = sp; //@line 16168
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16170
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16171
 _fputc(10, $2) | 0; //@line 16172
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 672; //@line 16175
  sp = STACKTOP; //@line 16176
  STACKTOP = sp; //@line 16177
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16179
  _abort(); //@line 16180
 }
}
function _ticker_read_us__async_cb_263($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8887
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8889
 $3 = $2 + 4 | 0; //@line 8890
 $4 = HEAP32[$3 >> 2] | 0; //@line 8891
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 8894
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 8895
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 8896
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 619; //@line 8899
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 8900
  HEAP32[$9 >> 2] = $3; //@line 8901
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 8902
  HEAP32[$10 >> 2] = $4; //@line 8903
  sp = STACKTOP; //@line 8904
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 8908
 ___async_unwind = 0; //@line 8909
 HEAP32[$ReallocAsyncCtx >> 2] = 619; //@line 8910
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 8911
 HEAP32[$9 >> 2] = $3; //@line 8912
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 8913
 HEAP32[$10 >> 2] = $4; //@line 8914
 sp = STACKTOP; //@line 8915
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_73($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25158
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25168
 $14 = HEAP32[$10 >> 2] | 0; //@line 25175
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] | 0; //@line 25178
 $20 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 25181
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 25182
 FUNCTION_TABLE_viii[$17 & 7]($14, 1, $20); //@line 25183
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 509; //@line 25186
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 25187
  HEAP32[$21 >> 2] = $10; //@line 25188
  sp = STACKTOP; //@line 25189
  return;
 }
 ___async_unwind = 0; //@line 25192
 HEAP32[$ReallocAsyncCtx8 >> 2] = 509; //@line 25193
 $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 25194
 HEAP32[$21 >> 2] = $10; //@line 25195
 sp = STACKTOP; //@line 25196
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_72($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25113
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25123
 $14 = HEAP32[$10 >> 2] | 0; //@line 25130
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] | 0; //@line 25133
 $20 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 25136
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 25137
 FUNCTION_TABLE_viii[$17 & 7]($14, 0, $20); //@line 25138
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 509; //@line 25141
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 25142
  HEAP32[$21 >> 2] = $10; //@line 25143
  sp = STACKTOP; //@line 25144
  return;
 }
 ___async_unwind = 0; //@line 25147
 HEAP32[$ReallocAsyncCtx8 >> 2] = 509; //@line 25148
 $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 25149
 HEAP32[$21 >> 2] = $10; //@line 25150
 sp = STACKTOP; //@line 25151
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26766
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26768
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26772
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 26774
 $9 = HEAP32[$2 >> 2] | 0; //@line 26775
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 26778
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 26780
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26781
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 26782
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 524; //@line 26785
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 26786
  HEAP32[$15 >> 2] = $2; //@line 26787
  sp = STACKTOP; //@line 26788
  return;
 }
 ___async_unwind = 0; //@line 26791
 HEAP32[$ReallocAsyncCtx2 >> 2] = 524; //@line 26792
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 26793
 HEAP32[$15 >> 2] = $2; //@line 26794
 sp = STACKTOP; //@line 26795
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1331
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1333
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1335
 $5 = $2 + 2904 | 0; //@line 1336
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] & -18 | 1; //@line 1340
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 1341
 __ZN12LoRaWANStack26process_status_check_stateEv($2); //@line 1342
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 265; //@line 1345
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 1346
  HEAP32[$9 >> 2] = $4; //@line 1347
  $10 = $ReallocAsyncCtx2 + 8 | 0; //@line 1348
  HEAP32[$10 >> 2] = $2; //@line 1349
  sp = STACKTOP; //@line 1350
  return;
 }
 ___async_unwind = 0; //@line 1353
 HEAP32[$ReallocAsyncCtx2 >> 2] = 265; //@line 1354
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 1355
 HEAP32[$9 >> 2] = $4; //@line 1356
 $10 = $ReallocAsyncCtx2 + 8 | 0; //@line 1357
 HEAP32[$10 >> 2] = $2; //@line 1358
 sp = STACKTOP; //@line 1359
 return;
}
function __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18672
 $6 = $0 + 64 | 0; //@line 18673
 _mbedtls_aes_init($6); //@line 18674
 $7 = _mbedtls_aes_setkey_enc($6, $3, $4) | 0; //@line 18675
 if (!$7) {
  $9 = _mbedtls_aes_crypt_ecb($6, 1, $1, $5) | 0; //@line 18678
  if (($2 & 65535) > 15 & ($9 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb($6, 1, $1 + 16 | 0, $5 + 16 | 0) | 0; //@line 18686
  } else {
   $$0 = $9; //@line 18688
  }
 } else {
  $$0 = $7; //@line 18691
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 18693
 _mbedtls_aes_free($6); //@line 18694
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 494; //@line 18697
  HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 18699
  sp = STACKTOP; //@line 18700
  return 0; //@line 18701
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18703
  return $$0 | 0; //@line 18704
 }
 return 0; //@line 18706
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 15195
 $23 = $0 + 2 | 0; //@line 15204
 $24 = HEAP8[$23 >> 0] | 0; //@line 15205
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 15208
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 15213
  $$lcssa = $24; //@line 15213
 } else {
  $$01618 = $23; //@line 15215
  $$019 = $27; //@line 15215
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 15217
   $31 = HEAP8[$30 >> 0] | 0; //@line 15218
   $$019 = ($$019 | $31 & 255) << 8; //@line 15221
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 15226
    $$lcssa = $31; //@line 15226
    break;
   } else {
    $$01618 = $30; //@line 15229
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 15236
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7555
 HEAP32[$0 >> 2] = 10244; //@line 7556
 $1 = $0 + 40 | 0; //@line 7557
 _emscripten_asm_const_ii(12, $1 | 0) | 0; //@line 7558
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 7560
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7565
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7566
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7567
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 644; //@line 7570
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7572
    sp = STACKTOP; //@line 7573
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7576
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7581
 __ZN4mbed10TimerEventD2Ev($0); //@line 7582
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 645; //@line 7585
  sp = STACKTOP; //@line 7586
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7589
  return;
 }
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_148($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30349
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30353
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30355
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30356
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 30360
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 30364
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 30365
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 30366
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 30369
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 30370
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 30371
  sp = STACKTOP; //@line 30372
  return;
 }
 ___async_unwind = 0; //@line 30375
 HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 30376
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 30377
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 30378
 sp = STACKTOP; //@line 30379
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_318($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23287
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23289
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23293
 $8 = $0 + 16 | 0; //@line 23295
 $10 = HEAP32[$8 >> 2] | 0; //@line 23297
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 23300
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 23302
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 23304
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 23305
 $16 = HEAP32[$2 >> 2] | 0; //@line 23306
 if (!$16) {
  return;
 }
 $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 23312
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 23313
 FUNCTION_TABLE_vi[$19 & 1023]($15); //@line 23314
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 92; //@line 23317
  sp = STACKTOP; //@line 23318
  return;
 }
 ___async_unwind = 0; //@line 23321
 HEAP32[$ReallocAsyncCtx4 >> 2] = 92; //@line 23322
 sp = STACKTOP; //@line 23323
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14823
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14823
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14824
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 14825
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 14834
    $$016 = $9; //@line 14837
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 14837
   } else {
    $$016 = $0; //@line 14839
    $storemerge = 0; //@line 14839
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 14841
   $$0 = $$016; //@line 14842
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 14846
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 14852
   HEAP32[tempDoublePtr >> 2] = $2; //@line 14855
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 14855
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 14856
  }
 }
 return +$$0;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22212
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22216
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22218
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22220
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22222
 $11 = $4 + 12 | 0; //@line 22224
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22225
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 22226
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 22227
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 22231
  ___async_unwind = 0; //@line 22232
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 222; //@line 22234
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $11; //@line 22236
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 22238
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 22240
 sp = STACKTOP; //@line 22241
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17758
 STACKTOP = STACKTOP + 16 | 0; //@line 17759
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17759
 $3 = sp; //@line 17760
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 17762
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 17765
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 17766
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 17767
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 695; //@line 17770
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 17772
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 17774
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 17776
  sp = STACKTOP; //@line 17777
  STACKTOP = sp; //@line 17778
  return 0; //@line 17778
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17780
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 17784
 }
 STACKTOP = sp; //@line 17786
 return $8 & 1 | 0; //@line 17786
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 21099
  return $$011 | 0; //@line 21100
 }
 $wide$trip$count = $3 & 255; //@line 21103
 $$01012 = 0; //@line 21104
 $indvars$iv = $2 & 255; //@line 21104
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 21107
  $9 = $8 & 65535; //@line 21108
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 21157
  $indvars$iv = $indvars$iv + 1 | 0; //@line 21158
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 21167
 return $$011 | 0; //@line 21168
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_48($0) {
 $0 = $0 | 0;
 var $$1$ = 0, $10 = 0, $12 = 0, $19 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21953
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21955
 $10 = HEAP8[$0 + 21 >> 0] | 0; //@line 21957
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21959
 $$1$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 21967
 $19 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 21968
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 1185) >> 0] = $19; //@line 21973
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 1185) >> 0] = $19 >>> 8; //@line 21980
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 1185) >> 0] = $19 >>> 16; //@line 21987
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 1185) >> 0] = $19 >>> 24; //@line 21994
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 21999
 HEAP32[$12 >> 2] = $10 & 255; //@line 22001
 _mbed_tracef(16, 12685, 12878, $12); //@line 22002
 HEAP32[___async_retval >> 2] = $$1$; //@line 22004
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_30($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 19979
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19983
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19985
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19986
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 19990
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 19994
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19995
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 19996
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 19999
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 20000
  HEAP32[$11 >> 2] = $4; //@line 20001
  sp = STACKTOP; //@line 20002
  return;
 }
 ___async_unwind = 0; //@line 20005
 HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 20006
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 20007
 HEAP32[$11 >> 2] = $4; //@line 20008
 sp = STACKTOP; //@line 20009
 return;
}
function _mbed_vtracef__async_cb_373($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28620
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28624
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 28629
 $$pre = HEAP32[177] | 0; //@line 28630
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 28631
 FUNCTION_TABLE_v[$$pre & 7](); //@line 28632
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 137; //@line 28635
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 28636
  HEAP32[$6 >> 2] = $4; //@line 28637
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 28638
  HEAP32[$7 >> 2] = $5; //@line 28639
  sp = STACKTOP; //@line 28640
  return;
 }
 ___async_unwind = 0; //@line 28643
 HEAP32[$ReallocAsyncCtx9 >> 2] = 137; //@line 28644
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 28645
 HEAP32[$6 >> 2] = $4; //@line 28646
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 28647
 HEAP32[$7 >> 2] = $5; //@line 28648
 sp = STACKTOP; //@line 28649
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2365
 HEAP32[$0 >> 2] = 10244; //@line 2366
 __ZN4mbed6Ticker6detachEv($0); //@line 2367
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2369
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2375
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2376
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2377
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 104; //@line 2380
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2382
    sp = STACKTOP; //@line 2383
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2386
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2391
 __ZN4mbed10TimerEventD2Ev($0); //@line 2392
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 105; //@line 2395
  sp = STACKTOP; //@line 2396
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2399
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_81($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25659
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25663
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25665
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25666
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 25670
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 25674
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 25675
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 25676
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 25679
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 25680
  HEAP32[$11 >> 2] = $4; //@line 25681
  sp = STACKTOP; //@line 25682
  return;
 }
 ___async_unwind = 0; //@line 25685
 HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 25686
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 25687
 HEAP32[$11 >> 2] = $4; //@line 25688
 sp = STACKTOP; //@line 25689
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16678
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16684
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 16687
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 16690
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16691
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 16692
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 677; //@line 16695
    sp = STACKTOP; //@line 16696
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16699
    break;
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_386($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29705
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29709
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29711
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29712
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 29716
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 29720
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29721
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 29722
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 317; //@line 29725
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 29726
  HEAP32[$11 >> 2] = $4; //@line 29727
  sp = STACKTOP; //@line 29728
  return;
 }
 ___async_unwind = 0; //@line 29731
 HEAP32[$ReallocAsyncCtx5 >> 2] = 317; //@line 29732
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 29733
 HEAP32[$11 >> 2] = $4; //@line 29734
 sp = STACKTOP; //@line 29735
 return;
}
function _schedule_interrupt__async_cb_223($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5620
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5624
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5626
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5628
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5629
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 5648
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 5649
 FUNCTION_TABLE_v[$16 & 7](); //@line 5650
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 615; //@line 5653
  sp = STACKTOP; //@line 5654
  return;
 }
 ___async_unwind = 0; //@line 5657
 HEAP32[$ReallocAsyncCtx6 >> 2] = 615; //@line 5658
 sp = STACKTOP; //@line 5659
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_380($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29181
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29185
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29187
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29188
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 29192
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 29196
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29197
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 29198
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 214; //@line 29201
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 29202
  HEAP32[$11 >> 2] = $4; //@line 29203
  sp = STACKTOP; //@line 29204
  return;
 }
 ___async_unwind = 0; //@line 29207
 HEAP32[$ReallocAsyncCtx5 >> 2] = 214; //@line 29208
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 29209
 HEAP32[$11 >> 2] = $4; //@line 29210
 sp = STACKTOP; //@line 29211
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9949
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9957
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9959
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9961
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9963
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9965
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9967
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9969
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 9980
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 9981
 HEAP32[$10 >> 2] = 0; //@line 9982
 HEAP32[$12 >> 2] = 0; //@line 9983
 HEAP32[$14 >> 2] = 0; //@line 9984
 HEAP32[$2 >> 2] = 0; //@line 9985
 $33 = HEAP32[$16 >> 2] | 0; //@line 9986
 HEAP32[$16 >> 2] = $33 | $18; //@line 9991
 if ($20 | 0) {
  ___unlockfile($22); //@line 9994
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 9997
 return;
}
function _mbed_vtracef__async_cb_372($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28587
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28589
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 28594
 $$pre = HEAP32[177] | 0; //@line 28595
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 28596
 FUNCTION_TABLE_v[$$pre & 7](); //@line 28597
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 137; //@line 28600
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 28601
  HEAP32[$5 >> 2] = $2; //@line 28602
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 28603
  HEAP32[$6 >> 2] = $4; //@line 28604
  sp = STACKTOP; //@line 28605
  return;
 }
 ___async_unwind = 0; //@line 28608
 HEAP32[$ReallocAsyncCtx9 >> 2] = 137; //@line 28609
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 28610
 HEAP32[$5 >> 2] = $2; //@line 28611
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 28612
 HEAP32[$6 >> 2] = $4; //@line 28613
 sp = STACKTOP; //@line 28614
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10789
 STACKTOP = STACKTOP + 16 | 0; //@line 10790
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10790
 $1 = sp; //@line 10791
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10796
  STACKTOP = sp; //@line 10797
  return $$0 | 0; //@line 10797
 }
 HEAP32[$1 >> 2] = 0; //@line 10799
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10800
 __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status($0, $1); //@line 10801
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 356; //@line 10804
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10806
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10808
  sp = STACKTOP; //@line 10809
  STACKTOP = sp; //@line 10810
  return 0; //@line 10810
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10812
 $$0 = HEAP32[$1 >> 2] | 0; //@line 10814
 STACKTOP = sp; //@line 10815
 return $$0 | 0; //@line 10815
}
function _mbedtls_cipher_cmac_finish__async_cb_92($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26462
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26464
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26466
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26468
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26470
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26472
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26474
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 26475
 _mbedtls_platform_zeroize($2, 16); //@line 26476
 if (!___async) {
  ___async_unwind = 0; //@line 26479
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 593; //@line 26481
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $4; //@line 26483
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 26485
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 26487
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 26489
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 26491
 sp = STACKTOP; //@line 26492
 return;
}
function __ZN12LoRaWANStack12stop_sendingEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10392
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10393
 $1 = __ZN7LoRaMac13clear_tx_pipeEv($0) | 0; //@line 10394
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 352; //@line 10397
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10399
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 10401
  sp = STACKTOP; //@line 10402
  return 0; //@line 10403
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10405
 if ($1 | 0) {
  $$0 = -1e3; //@line 10408
  return $$0 | 0; //@line 10409
 }
 $5 = $0 + 2496 | 0; //@line 10411
 if ((HEAP32[$5 >> 2] | 0) != 8) {
  $$0 = -1e3; //@line 10415
  return $$0 | 0; //@line 10416
 }
 $8 = $0 + 2904 | 0; //@line 10418
 HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -18; //@line 10421
 __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 10422
 HEAP32[$5 >> 2] = 2; //@line 10423
 $$0 = 0; //@line 10424
 return $$0 | 0; //@line 10425
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 2948
  return $$028 | 0; //@line 2949
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 2953
 $8 = $7 & 255; //@line 2954
 $9 = $1 - $8 | 0; //@line 2955
 HEAP32[$2 >> 2] = $9; //@line 2956
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 2960
 if (!$1) {
  $$0$lcssa = $13; //@line 2963
 } else {
  $$02930 = 0; //@line 2965
  $$031 = $13; //@line 2965
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 2975
   $$02930 = $$02930 + 1 | 0; //@line 2976
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 2979
    break;
   } else {
    $$031 = $23; //@line 2982
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 2988
 return $$028 | 0; //@line 2989
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_285($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9873
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9875
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9879
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9881
 __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t(HEAP32[$0 + 8 >> 2] | 0, HEAP8[$2 + 1916 >> 0] | 0, HEAP8[$2 + 1884 >> 0] | 0, HEAP32[$2 + 1880 >> 2] | 0, $2 + 1964 | 0); //@line 9891
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  return;
 }
 _mbed_tracef(16, 12685, 13321, $8); //@line 9897
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 9898
 __ZN7LoRaMac15open_rx2_windowEv($2); //@line 9899
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 440; //@line 9902
  sp = STACKTOP; //@line 9903
  return;
 }
 ___async_unwind = 0; //@line 9906
 HEAP32[$ReallocAsyncCtx3 >> 2] = 440; //@line 9907
 sp = STACKTOP; //@line 9908
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18340
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18342
 $6 = HEAP8[$0 + 10 >> 0] | 0; //@line 18346
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 18349
 $10 = HEAPU16[$0 + 8 >> 1] | 0; //@line 18350
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18351
 FUNCTION_TABLE_viiiiiiiiiiiiii[$9 & 1]($2, 0, $6, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $10); //@line 18352
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 18355
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 18356
  HEAP32[$11 >> 2] = $2; //@line 18357
  sp = STACKTOP; //@line 18358
  return;
 }
 ___async_unwind = 0; //@line 18361
 HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 18362
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 18363
 HEAP32[$11 >> 2] = $2; //@line 18364
 sp = STACKTOP; //@line 18365
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_121($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28180
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28182
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 28184
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28186
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28188
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28190
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 28191
 __ZN4mbed5Timer5startEv($2); //@line 28192
 if (!___async) {
  ___async_unwind = 0; //@line 28195
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 60; //@line 28197
 HEAP16[$ReallocAsyncCtx4 + 4 >> 1] = $4; //@line 28199
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $2; //@line 28201
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 28203
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 28205
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 28207
 sp = STACKTOP; //@line 28208
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_105($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27461
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27463
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27465
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 27467
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 27469
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 27471
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 27473
 __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 27474
 if (!___async) {
  ___async_unwind = 0; //@line 27477
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 395; //@line 27479
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $4; //@line 27481
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $2; //@line 27483
 HEAP16[$ReallocAsyncCtx4 + 12 >> 1] = $6; //@line 27485
 HEAP16[$ReallocAsyncCtx4 + 14 >> 1] = $8; //@line 27487
 HEAP8[$ReallocAsyncCtx4 + 16 >> 0] = $10; //@line 27489
 sp = STACKTOP; //@line 27490
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17677
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 17679
 $8 = $7 >> 8; //@line 17680
 if (!($7 & 1)) {
  $$0 = $8; //@line 17684
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 17689
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 17691
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 17694
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17699
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 17700
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 693; //@line 17703
  sp = STACKTOP; //@line 17704
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17707
  return;
 }
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7767
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7768
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(18064, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 7769
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 652; //@line 7772
  sp = STACKTOP; //@line 7773
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7776
  __ZN5Sht31C2E7PinNameS0_(23488, 10, 11); //@line 7777
  __ZN4mbed11InterruptInC2E7PinName(19400, 1337); //@line 7778
  __ZN6events10EventQueueC2EjPh(19472, 1664, 0); //@line 7779
  __ZN16LoRaWANInterfaceC2ER9LoRaRadio(19676, 18064); //@line 7780
  dest = 22856; //@line 7781
  stop = dest + 48 | 0; //@line 7781
  do {
   HEAP32[dest >> 2] = 0; //@line 7781
   dest = dest + 4 | 0; //@line 7781
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16847
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16853
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 16856
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 16859
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16860
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 16861
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 680; //@line 16864
    sp = STACKTOP; //@line 16865
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16868
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_error_vfprintf__async_cb_338($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26218
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 26220
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26222
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26224
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26226
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26228
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26230
 _serial_putc(19392, $2 << 24 >> 24); //@line 26231
 if (!___async) {
  ___async_unwind = 0; //@line 26234
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 26236
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 26238
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 26240
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 26242
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 26244
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 26246
 sp = STACKTOP; //@line 26247
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1066
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1068
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1070
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 1072
 $7 = HEAP32[$2 >> 2] | 0; //@line 1073
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 1076
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 1077
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 1078
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 543; //@line 1081
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 1082
  HEAP32[$11 >> 2] = $2; //@line 1083
  sp = STACKTOP; //@line 1084
  return;
 }
 ___async_unwind = 0; //@line 1087
 HEAP32[$ReallocAsyncCtx2 >> 2] = 543; //@line 1088
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 1089
 HEAP32[$11 >> 2] = $2; //@line 1090
 sp = STACKTOP; //@line 1091
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7880
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7883
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7885
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 7887
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 7892
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7897
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7899
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 7900
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 275; //@line 7903
  sp = STACKTOP; //@line 7904
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7907
  return;
 }
}
function ___dynamic_cast__async_cb_27($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19650
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19652
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19654
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19660
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 19675
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 19691
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 19696
    break;
   }
  default:
   {
    $$0 = 0; //@line 19700
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 19705
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17719
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 17721
 $7 = $6 >> 8; //@line 17722
 if (!($6 & 1)) {
  $$0 = $7; //@line 17726
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 17731
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 17733
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 17736
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17741
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 17742
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 694; //@line 17745
  sp = STACKTOP; //@line 17746
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17749
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6660
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 6663
 $5 = HEAP32[$4 >> 2] | 0; //@line 6664
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6669
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6670
  _schedule_interrupt($0); //@line 6671
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 617; //@line 6674
   sp = STACKTOP; //@line 6675
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6678
  return;
 } else {
  $$0 = $5; //@line 6681
 }
 do {
  if (!$$0) {
   label = 8; //@line 6686
   break;
  }
  $10 = $$0 + 12 | 0; //@line 6689
  $$0 = HEAP32[$10 >> 2] | 0; //@line 6690
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6703
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_124($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28352
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28356
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28358
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28360
 $10 = (HEAP32[___async_retval >> 2] | 0) >= (HEAP32[$0 + 4 >> 2] | 0); //@line 28363
 $13 = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0; //@line 28366
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 28367
 FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 28368
 if (!___async) {
  ___async_unwind = 0; //@line 28371
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 28373
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 28375
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 28377
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = $10 & 1; //@line 28380
 sp = STACKTOP; //@line 28381
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17634
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 17636
 $6 = $5 >> 8; //@line 17637
 if (!($5 & 1)) {
  $$0 = $6; //@line 17641
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 17646
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 17648
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 17651
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17656
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 17657
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 692; //@line 17660
  sp = STACKTOP; //@line 17661
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17664
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_354($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27043
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27047
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27049
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 27051
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 27053
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 27055
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 27057
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 27058
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 27059
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 294; //@line 27062
  sp = STACKTOP; //@line 27063
  return;
 }
 ___async_unwind = 0; //@line 27066
 HEAP32[$ReallocAsyncCtx >> 2] = 294; //@line 27067
 sp = STACKTOP; //@line 27068
 return;
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sink$in = 0, $$sink6 = 0, $3 = 0;
 $3 = $1 << 24 >> 24; //@line 21969
 if (($3 | 0) >= (HEAPU8[$0 + 92 >> 0] | 0)) {
  $$0 = 0; //@line 21975
  return $$0 | 0; //@line 21976
 }
 if (!(HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $3 >> 0] | 0)) {
  $$0 = 0; //@line 21984
  return $$0 | 0; //@line 21985
 }
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 21991
   $$sink6 = $0 + 31 | 0; //@line 21991
  } else {
   if (!(HEAP8[$0 + 128 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 22000
    $$sink6 = $0 + 27 | 0; //@line 22000
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 22005
    $$sink6 = $0 + 27 | 0; //@line 22005
    break;
   }
  }
 } while (0);
 $$0 = (HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink6 >> 0] | 0) >= $1 << 24 >> 24 : 0; //@line 22015
 return $$0 | 0; //@line 22016
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_125($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28387
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28389
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 28391
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28393
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28395
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 28396
 __ZN4mbed5TimerC2Ev($2); //@line 28397
 if (!___async) {
  ___async_unwind = 0; //@line 28400
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 59; //@line 28402
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 28404
 HEAP16[$ReallocAsyncCtx3 + 8 >> 1] = $4; //@line 28406
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 28408
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 28410
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $2; //@line 28412
 sp = STACKTOP; //@line 28413
 return;
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4530
 STACKTOP = STACKTOP + 16 | 0; //@line 4531
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4531
 $5 = sp + 4 | 0; //@line 4532
 $6 = sp; //@line 4533
 HEAP8[$5 >> 0] = $1; //@line 4534
 HEAP32[$6 >> 2] = $4; //@line 4535
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4537
 $8 = __ZN12LoRaWANStack9handle_rxEPhtRhRib($0 + 4 | 0, $2, $3, $5, $6, 1) | 0; //@line 4538
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 146; //@line 4541
  sp = STACKTOP; //@line 4542
  STACKTOP = sp; //@line 4543
  return 0; //@line 4543
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4545
  STACKTOP = sp; //@line 4546
  return $8 | 0; //@line 4546
 }
 return 0; //@line 4548
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 344
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 359
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 373
   break;
  }
 default:
  {}
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 379
 __ZN16SX1276_LoRaRadio8transmitEj($0, 0); //@line 380
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 47; //@line 383
  sp = STACKTOP; //@line 384
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 387
  return;
 }
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 20885
 $5 = $4 >>> 4; //@line 20886
 $10 = 1 << ($4 & 15); //@line 20891
 if ($10 & (HEAPU16[(HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 20895
  return $$0 | 0; //@line 20896
 }
 $15 = (HEAP32[$0 + 124 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 20900
 HEAP32[$15 >> 2] = 0; //@line 20901
 HEAP32[$15 + 4 >> 2] = 0; //@line 20901
 HEAP32[$15 + 8 >> 2] = 0; //@line 20901
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 113 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 20911
  return $$0 | 0; //@line 20912
 }
 $25 = (HEAP32[$0 + 116 >> 2] | 0) + ($5 << 1) | 0; //@line 20917
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 20922
 $$0 = 1; //@line 20923
 return $$0 | 0; //@line 20924
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28132
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28134
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28136
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 28138
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28140
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 28141
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 28142
 _wait_ms(1); //@line 28143
 if (!___async) {
  ___async_unwind = 0; //@line 28146
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 58; //@line 28148
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $4; //@line 28150
 HEAP16[$ReallocAsyncCtx7 + 8 >> 1] = $6; //@line 28152
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $8; //@line 28154
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $2; //@line 28156
 sp = STACKTOP; //@line 28157
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_229($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5898
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5900
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5902
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5904
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5906
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5908
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 5909
 __ZN7LoRaMac10disconnectEv($2); //@line 5910
 if (!___async) {
  ___async_unwind = 0; //@line 5913
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 333; //@line 5915
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 5917
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 5919
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 5921
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 5923
 sp = STACKTOP; //@line 5924
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1362
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 1364
 HEAP8[$0 + 688 >> 0] = 0; //@line 1366
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 1368
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 44 >> 2] | 0; //@line 1374
 if (!$7) {
  return;
 }
 $13 = HEAPU8[$0 + 782 >> 0] | 0; //@line 1383
 $16 = HEAP8[$0 + 781 >> 0] | 0; //@line 1386
 $18 = HEAP8[$0 + 780 >> 0] | 0; //@line 1388
 $19 = HEAP32[$7 >> 2] | 0; //@line 1389
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1390
 FUNCTION_TABLE_viiiii[$19 & 7]($4 + 32 | 0, $0 + 792 | 0, $13, $16, $18); //@line 1391
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 81; //@line 1394
  sp = STACKTOP; //@line 1395
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1398
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_399($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30744
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30746
 $4 = HEAP32[$2 + 748 >> 2] | 0; //@line 30748
 if (!$4) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 30752
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 30757
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30758
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 736 | 0); //@line 30759
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 30762
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 30763
  HEAP32[$9 >> 2] = $2; //@line 30764
  sp = STACKTOP; //@line 30765
  return;
 }
 ___async_unwind = 0; //@line 30768
 HEAP32[$ReallocAsyncCtx6 >> 2] = 366; //@line 30769
 $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 30770
 HEAP32[$9 >> 2] = $2; //@line 30771
 sp = STACKTOP; //@line 30772
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_17($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19090
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19092
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19096
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19098
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 19100
 __ZN4mbed6Ticker5setupEy($6, 2e5, 0); //@line 19101
 $9 = HEAP32[$2 >> 2] | 0; //@line 19102
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 19108
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 19109
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 19110
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 19113
  sp = STACKTOP; //@line 19114
  return;
 }
 ___async_unwind = 0; //@line 19117
 HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 19118
 sp = STACKTOP; //@line 19119
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 13821
 STACKTOP = STACKTOP + 256 | 0; //@line 13822
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 13822
 $5 = sp; //@line 13823
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 13829
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 13833
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 13836
   $$011 = $9; //@line 13837
   do {
    _out_670($0, $5, 256); //@line 13839
    $$011 = $$011 + -256 | 0; //@line 13840
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 13849
  } else {
   $$0$lcssa = $9; //@line 13851
  }
  _out_670($0, $5, $$0$lcssa); //@line 13853
 }
 STACKTOP = sp; //@line 13855
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_164($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1292
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1296
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1297
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 1300
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 1301
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 1302
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 541; //@line 1305
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 1306
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 1307
  sp = STACKTOP; //@line 1308
  return;
 }
 ___async_unwind = 0; //@line 1311
 HEAP32[$ReallocAsyncCtx3 >> 2] = 541; //@line 1312
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 1313
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 1314
 sp = STACKTOP; //@line 1315
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2333
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2335
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 2338
 $5 = HEAP32[$2 >> 2] | 0; //@line 2339
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 2342
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 2343
 FUNCTION_TABLE_vii[$8 & 15]($5, $4); //@line 2344
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 533; //@line 2347
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 2348
  HEAP32[$9 >> 2] = $2; //@line 2349
  sp = STACKTOP; //@line 2350
  return;
 }
 ___async_unwind = 0; //@line 2353
 HEAP32[$ReallocAsyncCtx2 >> 2] = 533; //@line 2354
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 2355
 HEAP32[$9 >> 2] = $2; //@line 2356
 sp = STACKTOP; //@line 2357
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1263
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1265
 $3 = HEAP32[$2 >> 2] | 0; //@line 1266
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 1269
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 1270
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 1271
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 540; //@line 1274
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 1275
  HEAP32[$8 >> 2] = $2; //@line 1276
  sp = STACKTOP; //@line 1277
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 1281
 ___async_unwind = 0; //@line 1282
 HEAP32[$ReallocAsyncCtx2 >> 2] = 540; //@line 1283
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 1284
 HEAP32[$8 >> 2] = $2; //@line 1285
 sp = STACKTOP; //@line 1286
 return;
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18023
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18025
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 18027
 if (!$4) {
  __ZdlPv($2); //@line 18030
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 18035
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18036
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 18037
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 18040
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 18041
  HEAP32[$9 >> 2] = $2; //@line 18042
  sp = STACKTOP; //@line 18043
  return;
 }
 ___async_unwind = 0; //@line 18046
 HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 18047
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 18048
 HEAP32[$9 >> 2] = $2; //@line 18049
 sp = STACKTOP; //@line 18050
 return;
}
function _mbedtls_ccm_setkey__async_cb_191($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2827
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2829
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2831
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2833
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2835
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 2839
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 2842
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 2843
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 559; //@line 2846
  sp = STACKTOP; //@line 2847
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 2851
 ___async_unwind = 0; //@line 2852
 HEAP32[$ReallocAsyncCtx >> 2] = 559; //@line 2853
 sp = STACKTOP; //@line 2854
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_358($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $2 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27456
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27458
 if (!(HEAP8[$2 + 770 >> 0] | 0)) {
  HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = 0; //@line 27465
 }
 $9 = HEAP32[$2 + 788 >> 2] | 0; //@line 27468
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 60 >> 2] | 0; //@line 27474
 if (!$12) {
  return;
 }
 $15 = HEAP32[$12 >> 2] | 0; //@line 27480
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 27481
 FUNCTION_TABLE_vi[$15 & 1023]($9 + 48 | 0); //@line 27482
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 27485
  sp = STACKTOP; //@line 27486
  return;
 }
 ___async_unwind = 0; //@line 27489
 HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 27490
 sp = STACKTOP; //@line 27491
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11116
 STACKTOP = STACKTOP + 32 | 0; //@line 11117
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11117
 $vararg_buffer = sp; //@line 11118
 $3 = sp + 20 | 0; //@line 11119
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 11123
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 11125
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 11127
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 11129
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 11131
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 11136
  $10 = -1; //@line 11137
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 11140
 }
 STACKTOP = sp; //@line 11142
 return $10 | 0; //@line 11142
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_360($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27521
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27523
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = (HEAP8[$2 >> 0] | 0) + 1 << 24 >> 24; //@line 27530
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27533
 _mbed_assert_internal(12912, 12940, 953); //@line 27534
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 429; //@line 27537
  $5 = $ReallocAsyncCtx5 + 4 | 0; //@line 27538
  HEAP32[$5 >> 2] = $2; //@line 27539
  sp = STACKTOP; //@line 27540
  return;
 }
 ___async_unwind = 0; //@line 27543
 HEAP32[$ReallocAsyncCtx5 >> 2] = 429; //@line 27544
 $5 = $ReallocAsyncCtx5 + 4 | 0; //@line 27545
 HEAP32[$5 >> 2] = $2; //@line 27546
 sp = STACKTOP; //@line 27547
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_197($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 3140
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3144
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3146
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3148
 HEAP32[$4 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 3151
 HEAP8[$4 + 1936 >> 0] = 1; //@line 3153
 HEAP8[$6 >> 0] = 1; //@line 3154
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 3155
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 3156
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 458; //@line 3159
  sp = STACKTOP; //@line 3160
  return;
 }
 ___async_unwind = 0; //@line 3163
 HEAP32[$ReallocAsyncCtx10 >> 2] = 458; //@line 3164
 sp = STACKTOP; //@line 3165
 return;
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2613
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {
  _sleep_manager_lock_deep_sleep_internal(); //@line 2623
 }
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 2626
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2627
 $8 = _ticker_read_us($7) | 0; //@line 2628
 $9 = tempRet0; //@line 2629
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 113; //@line 2632
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2634
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2636
  sp = STACKTOP; //@line 2637
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2640
 $13 = $0 + 8 | 0; //@line 2642
 HEAP32[$13 >> 2] = $8; //@line 2644
 HEAP32[$13 + 4 >> 2] = $9; //@line 2647
 HEAP32[$0 >> 2] = 1; //@line 2648
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_89($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26379
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26383
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26384
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 26390
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 26391
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 26392
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 111; //@line 26395
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 26396
  HEAP32[$9 >> 2] = $4; //@line 26397
  sp = STACKTOP; //@line 26398
  return;
 }
 ___async_unwind = 0; //@line 26401
 HEAP32[$ReallocAsyncCtx3 >> 2] = 111; //@line 26402
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 26403
 HEAP32[$9 >> 2] = $4; //@line 26404
 sp = STACKTOP; //@line 26405
 return;
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $13 = 0;
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(4, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 1314
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(4, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 1322
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(4, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 1330
 }
 $13 = $0 + 660 | 0; //@line 1332
 if ((HEAP32[$13 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(4, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 1338
  if ((HEAP32[$13 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(4, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 1344
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  return;
 }
 _emscripten_asm_const_iii(4, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 1355
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6401
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 6404
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 6406
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 6408
 if (!($$unpack2$i & 1)) {
  $12 = $$unpack$i; //@line 6413
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 6418
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6420
 FUNCTION_TABLE_vii[$12 & 15]($5, $1); //@line 6421
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 218; //@line 6424
  sp = STACKTOP; //@line 6425
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6428
  return;
 }
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6908
 STACKTOP = STACKTOP + 16 | 0; //@line 6909
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6909
 $vararg_buffer = sp; //@line 6910
 HEAP32[$vararg_buffer >> 2] = $0; //@line 6911
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 6913
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 6915
 _mbed_error_printf(14355, $vararg_buffer); //@line 6916
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6917
 _mbed_die(); //@line 6918
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 620; //@line 6921
  sp = STACKTOP; //@line 6922
  STACKTOP = sp; //@line 6923
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6925
  STACKTOP = sp; //@line 6926
  return;
 }
}
function __ZN12LoRaWANStack12stop_sendingEv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18413
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18415
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -1e3; //@line 18420
  $13 = ___async_retval; //@line 18421
  HEAP32[$13 >> 2] = $$0; //@line 18422
  return;
 }
 $7 = $2 + 2496 | 0; //@line 18425
 if ((HEAP32[$7 >> 2] | 0) != 8) {
  $$0 = -1e3; //@line 18429
  $13 = ___async_retval; //@line 18430
  HEAP32[$13 >> 2] = $$0; //@line 18431
  return;
 }
 $10 = $2 + 2904 | 0; //@line 18434
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -18; //@line 18437
 __ZN7LoRaMac14set_tx_ongoingEb($4, 0); //@line 18438
 HEAP32[$7 >> 2] = 2; //@line 18439
 $$0 = 0; //@line 18440
 $13 = ___async_retval; //@line 18441
 HEAP32[$13 >> 2] = $$0; //@line 18442
 return;
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15700
 STACKTOP = STACKTOP + 16 | 0; //@line 15701
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15701
 $3 = sp; //@line 15702
 HEAP32[$3 >> 2] = $varargs; //@line 15703
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15704
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 15705
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 664; //@line 15708
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15710
  sp = STACKTOP; //@line 15711
  STACKTOP = sp; //@line 15712
  return 0; //@line 15712
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15714
  STACKTOP = sp; //@line 15715
  return $4 | 0; //@line 15715
 }
 return 0; //@line 15717
}
function _schedule_interrupt__async_cb_222($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5588
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5590
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5592
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5594
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 5597
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 5598
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 5599
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 5603
  ___async_unwind = 0; //@line 5604
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 614; //@line 5606
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 5608
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 5610
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 5612
 sp = STACKTOP; //@line 5613
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15808
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 15811
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 15813
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 15815
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 15820
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 15825
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15827
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 15828
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 459; //@line 15831
  sp = STACKTOP; //@line 15832
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15835
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1612
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 1615
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 1617
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 1619
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 1624
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 1629
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1631
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 1632
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 87; //@line 1635
  sp = STACKTOP; //@line 1636
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1639
  return;
 }
}
function _mbed_vtracef__async_cb_371($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28557
 HEAP32[171] = HEAP32[169]; //@line 28559
 $2 = HEAP32[177] | 0; //@line 28560
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 28565
 HEAP32[178] = 0; //@line 28566
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 28567
 FUNCTION_TABLE_v[$2 & 7](); //@line 28568
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 28571
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 28572
  HEAP32[$5 >> 2] = $4; //@line 28573
  sp = STACKTOP; //@line 28574
  return;
 }
 ___async_unwind = 0; //@line 28577
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 28578
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 28579
 HEAP32[$5 >> 2] = $4; //@line 28580
 sp = STACKTOP; //@line 28581
 return;
}
function _mbed_vtracef__async_cb_368($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28293
 HEAP32[171] = HEAP32[169]; //@line 28295
 $2 = HEAP32[177] | 0; //@line 28296
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 28301
 HEAP32[178] = 0; //@line 28302
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 28303
 FUNCTION_TABLE_v[$2 & 7](); //@line 28304
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 28307
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 28308
  HEAP32[$5 >> 2] = $4; //@line 28309
  sp = STACKTOP; //@line 28310
  return;
 }
 ___async_unwind = 0; //@line 28313
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 28314
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 28315
 HEAP32[$5 >> 2] = $4; //@line 28316
 sp = STACKTOP; //@line 28317
 return;
}
function _mbed_vtracef__async_cb_367($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28263
 HEAP32[171] = HEAP32[169]; //@line 28265
 $2 = HEAP32[177] | 0; //@line 28266
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 28271
 HEAP32[178] = 0; //@line 28272
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 28273
 FUNCTION_TABLE_v[$2 & 7](); //@line 28274
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 28277
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 28278
  HEAP32[$5 >> 2] = $4; //@line 28279
  sp = STACKTOP; //@line 28280
  return;
 }
 ___async_unwind = 0; //@line 28283
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 28284
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 28285
 HEAP32[$5 >> 2] = $4; //@line 28286
 sp = STACKTOP; //@line 28287
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9350
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 9353
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 9355
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 9357
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 9362
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 9367
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9369
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 9370
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 325; //@line 9373
  sp = STACKTOP; //@line 9374
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9377
  return;
 }
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2374] | 0; //@line 2735
 if (!$3) {
  $$010 = 0; //@line 2738
  return $$010 | 0; //@line 2739
 } else {
  $$011 = 9492; //@line 2741
  $6 = $3; //@line 2741
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 2757
     label = 6; //@line 2758
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 2765
  if (!$6) {
   $$010 = 0; //@line 2768
   label = 6; //@line 2769
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 2772
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 2776
 }
 return 0; //@line 2778
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4877
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4879
 $3 = HEAP32[$2 >> 2] | 0; //@line 4880
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 4883
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 4884
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 4885
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 530; //@line 4888
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 4889
  HEAP32[$7 >> 2] = $2; //@line 4890
  sp = STACKTOP; //@line 4891
  return;
 }
 ___async_unwind = 0; //@line 4894
 HEAP32[$ReallocAsyncCtx2 >> 2] = 530; //@line 4895
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 4896
 HEAP32[$7 >> 2] = $2; //@line 4897
 sp = STACKTOP; //@line 4898
 return;
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3776
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3778
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3780
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3782
 $9 = HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0; //@line 3785
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 3786
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 3787
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 3791
  ___async_unwind = 0; //@line 3792
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 604; //@line 3794
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 3796
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 3798
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 3800
 sp = STACKTOP; //@line 3801
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2904
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2906
 $3 = HEAP32[$2 >> 2] | 0; //@line 2907
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 2910
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 2911
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 2912
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 527; //@line 2915
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 2916
  HEAP32[$7 >> 2] = $2; //@line 2917
  sp = STACKTOP; //@line 2918
  return;
 }
 ___async_unwind = 0; //@line 2921
 HEAP32[$ReallocAsyncCtx2 >> 2] = 527; //@line 2922
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 2923
 HEAP32[$7 >> 2] = $2; //@line 2924
 sp = STACKTOP; //@line 2925
 return;
}
function _mbedtls_ccm_setkey__async_cb_192($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2860
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2862
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2864
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2866
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2868
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 2869
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 2870
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 2874
  ___async_unwind = 0; //@line 2875
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 558; //@line 2877
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 2879
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 2881
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 2883
 sp = STACKTOP; //@line 2884
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_128($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28562
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28564
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28566
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 28568
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 28569
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 400; //@line 28572
  $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 28573
  HEAP32[$6 >> 2] = $2; //@line 28574
  sp = STACKTOP; //@line 28575
  return;
 }
 ___async_unwind = 0; //@line 28578
 HEAP32[$ReallocAsyncCtx3 >> 2] = 400; //@line 28579
 $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 28580
 HEAP32[$6 >> 2] = $2; //@line 28581
 sp = STACKTOP; //@line 28582
 return;
}
function __ZN16LoRaWANInterface16set_device_classE14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4595
 STACKTOP = STACKTOP + 16 | 0; //@line 4596
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4596
 $2 = sp; //@line 4597
 HEAP32[$2 >> 2] = $1; //@line 4598
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4600
 $4 = __ZN12LoRaWANStack16set_device_classERK14device_class_t($0 + 4 | 0, $2) | 0; //@line 4601
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 149; //@line 4604
  sp = STACKTOP; //@line 4605
  STACKTOP = sp; //@line 4606
  return 0; //@line 4606
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4608
  STACKTOP = sp; //@line 4609
  return $4 | 0; //@line 4609
 }
 return 0; //@line 4611
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 16400
 $5 = HEAP32[$4 >> 2] | 0; //@line 16401
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 16405
   HEAP32[$1 + 24 >> 2] = $3; //@line 16407
   HEAP32[$1 + 36 >> 2] = 1; //@line 16409
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 16413
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 16416
    HEAP32[$1 + 24 >> 2] = 2; //@line 16418
    HEAP8[$1 + 54 >> 0] = 1; //@line 16420
    break;
   }
   $10 = $1 + 24 | 0; //@line 16423
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 16427
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac13clear_tx_pipeEv__async_cb_390($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30012
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30014
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30016
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30018
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30020
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 30022
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 30023
 if (!___async) {
  ___async_unwind = 0; //@line 30026
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 431; //@line 30028
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 30030
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 30032
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 30034
 sp = STACKTOP; //@line 30035
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_137($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 29466
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29470
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 29475
 _mbed_assert_internal(11890, 11899, 778); //@line 29476
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 251; //@line 29479
  $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 29480
  HEAP32[$6 >> 2] = $4; //@line 29481
  sp = STACKTOP; //@line 29482
  return;
 }
 ___async_unwind = 0; //@line 29485
 HEAP32[$ReallocAsyncCtx10 >> 2] = 251; //@line 29486
 $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 29487
 HEAP32[$6 >> 2] = $4; //@line 29488
 sp = STACKTOP; //@line 29489
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_133($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 29233
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29237
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 29242
 _mbed_assert_internal(11890, 11899, 778); //@line 29243
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 243; //@line 29246
  $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 29247
  HEAP32[$6 >> 2] = $4; //@line 29248
  sp = STACKTOP; //@line 29249
  return;
 }
 ___async_unwind = 0; //@line 29252
 HEAP32[$ReallocAsyncCtx12 >> 2] = 243; //@line 29253
 $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 29254
 HEAP32[$6 >> 2] = $4; //@line 29255
 sp = STACKTOP; //@line 29256
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_113($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 27888
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27892
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 27897
 _mbed_assert_internal(11890, 11899, 778); //@line 27898
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 239; //@line 27901
  $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 27902
  HEAP32[$6 >> 2] = $4; //@line 27903
  sp = STACKTOP; //@line 27904
  return;
 }
 ___async_unwind = 0; //@line 27907
 HEAP32[$ReallocAsyncCtx10 >> 2] = 239; //@line 27908
 $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 27909
 HEAP32[$6 >> 2] = $4; //@line 27910
 sp = STACKTOP; //@line 27911
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_111($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 27821
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27825
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 27830
 _mbed_assert_internal(11890, 11899, 778); //@line 27831
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 235; //@line 27834
  $6 = $ReallocAsyncCtx11 + 4 | 0; //@line 27835
  HEAP32[$6 >> 2] = $4; //@line 27836
  sp = STACKTOP; //@line 27837
  return;
 }
 ___async_unwind = 0; //@line 27840
 HEAP32[$ReallocAsyncCtx11 >> 2] = 235; //@line 27841
 $6 = $ReallocAsyncCtx11 + 4 | 0; //@line 27842
 HEAP32[$6 >> 2] = $4; //@line 27843
 sp = STACKTOP; //@line 27844
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_109($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 27754
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27758
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 27763
 _mbed_assert_internal(11890, 11899, 778); //@line 27764
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 231; //@line 27767
  $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 27768
  HEAP32[$6 >> 2] = $4; //@line 27769
  sp = STACKTOP; //@line 27770
  return;
 }
 ___async_unwind = 0; //@line 27773
 HEAP32[$ReallocAsyncCtx12 >> 2] = 231; //@line 27774
 $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 27775
 HEAP32[$6 >> 2] = $4; //@line 27776
 sp = STACKTOP; //@line 27777
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_227($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5812
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 5817
 _mbed_assert_internal(11890, 11899, 778); //@line 5818
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 5821
  $6 = $ReallocAsyncCtx6 + 4 | 0; //@line 5822
  HEAP32[$6 >> 2] = $4; //@line 5823
  sp = STACKTOP; //@line 5824
  return;
 }
 ___async_unwind = 0; //@line 5827
 HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 5828
 $6 = $ReallocAsyncCtx6 + 4 | 0; //@line 5829
 HEAP32[$6 >> 2] = $4; //@line 5830
 sp = STACKTOP; //@line 5831
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_168($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1433
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1435
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1437
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 1439
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 1440
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 463; //@line 1443
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 1444
  HEAP32[$6 >> 2] = $2; //@line 1445
  sp = STACKTOP; //@line 1446
  return;
 }
 ___async_unwind = 0; //@line 1449
 HEAP32[$ReallocAsyncCtx2 >> 2] = 463; //@line 1450
 $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 1451
 HEAP32[$6 >> 2] = $2; //@line 1452
 sp = STACKTOP; //@line 1453
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_339($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26291
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26295
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 26300
 _mbed_assert_internal(11890, 11899, 778); //@line 26301
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 308; //@line 26304
  $6 = $ReallocAsyncCtx4 + 4 | 0; //@line 26305
  HEAP32[$6 >> 2] = $4; //@line 26306
  sp = STACKTOP; //@line 26307
  return;
 }
 ___async_unwind = 0; //@line 26310
 HEAP32[$ReallocAsyncCtx4 >> 2] = 308; //@line 26311
 $6 = $ReallocAsyncCtx4 + 4 | 0; //@line 26312
 HEAP32[$6 >> 2] = $4; //@line 26313
 sp = STACKTOP; //@line 26314
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3098
 $4 = _equeue_tick() | 0; //@line 3100
 HEAP32[$2 + -4 >> 2] = $1; //@line 3102
 $6 = $2 + -16 | 0; //@line 3103
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 3106
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3107
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 3108
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 121; //@line 3111
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3113
  sp = STACKTOP; //@line 3114
  return 0; //@line 3115
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3117
  _equeue_sema_signal($0 + 48 | 0); //@line 3119
  return $9 | 0; //@line 3120
 }
 return 0; //@line 3122
}
function __ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10881
 STACKTOP = STACKTOP + 16 | 0; //@line 10882
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10882
 $1 = $0 + 2904 | 0; //@line 10884
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -18 | 1; //@line 10888
 _mbed_tracef(2, 11997, 12648, sp); //@line 10889
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10890
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 10891
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 360; //@line 10894
  sp = STACKTOP; //@line 10895
  STACKTOP = sp; //@line 10896
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10898
  STACKTOP = sp; //@line 10899
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_377($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28936
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28940
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 28942
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 28944
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 28946
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 28947
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 28948
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 324; //@line 28951
  sp = STACKTOP; //@line 28952
  return;
 }
 ___async_unwind = 0; //@line 28955
 HEAP32[$ReallocAsyncCtx >> 2] = 324; //@line 28956
 sp = STACKTOP; //@line 28957
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_310($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 22884
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22888
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 22893
 _mbed_assert_internal(11890, 11899, 778); //@line 22894
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 303; //@line 22897
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 22898
  HEAP32[$6 >> 2] = $4; //@line 22899
  sp = STACKTOP; //@line 22900
  return;
 }
 ___async_unwind = 0; //@line 22903
 HEAP32[$ReallocAsyncCtx9 >> 2] = 303; //@line 22904
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 22905
 HEAP32[$6 >> 2] = $4; //@line 22906
 sp = STACKTOP; //@line 22907
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 11223
 $3 = HEAP8[$1 >> 0] | 0; //@line 11224
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 11229
  $$lcssa8 = $2; //@line 11229
 } else {
  $$011 = $1; //@line 11231
  $$0710 = $0; //@line 11231
  do {
   $$0710 = $$0710 + 1 | 0; //@line 11233
   $$011 = $$011 + 1 | 0; //@line 11234
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 11235
   $9 = HEAP8[$$011 >> 0] | 0; //@line 11236
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 11241
  $$lcssa8 = $8; //@line 11241
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 11251
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 16950
 STACKTOP = STACKTOP + 16 | 0; //@line 16951
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16951
 $vararg_buffer = sp; //@line 16952
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 16953
 FUNCTION_TABLE_v[$0 & 7](); //@line 16954
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 682; //@line 16957
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 16959
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 16961
  sp = STACKTOP; //@line 16962
  STACKTOP = sp; //@line 16963
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16965
  _abort_message(17848, $vararg_buffer); //@line 16966
 }
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 10582
 STACKTOP = STACKTOP + 16 | 0; //@line 10583
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10583
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10589
  STACKTOP = sp; //@line 10590
  return $$0 | 0; //@line 10590
 }
 HEAP8[$0 + 2909 >> 0] = 1; //@line 10593
 if (!(HEAP32[$0 + 2528 >> 2] | 0)) {
  _mbed_tracef(2, 11997, 12513, sp); //@line 10598
  $$0 = -1003; //@line 10599
  STACKTOP = sp; //@line 10600
  return $$0 | 0; //@line 10600
 } else {
  __ZN7LoRaMac24setup_link_check_requestEv($0); //@line 10602
  $$0 = 0; //@line 10603
  STACKTOP = sp; //@line 10604
  return $$0 | 0; //@line 10604
 }
 return 0; //@line 10606
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10080
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10084
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10088
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 10091
 _mbed_tracef(16, 11997, 12424, $4); //@line 10092
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 10093
 __ZN12LoRaWANStack23process_connected_stateEv($8); //@line 10094
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 331; //@line 10097
  sp = STACKTOP; //@line 10098
  return;
 }
 ___async_unwind = 0; //@line 10101
 HEAP32[$ReallocAsyncCtx2 >> 2] = 331; //@line 10102
 sp = STACKTOP; //@line 10103
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7496
 $2 = HEAP32[2598] | 0; //@line 7497
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7498
 _putc($1, $2) | 0; //@line 7499
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 642; //@line 7502
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 7504
  sp = STACKTOP; //@line 7505
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7508
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7509
 _fflush($2) | 0; //@line 7510
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 643; //@line 7513
  sp = STACKTOP; //@line 7514
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7517
  return;
 }
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 15665
  } else {
   $$01318 = $0; //@line 15667
   $$01417 = $2; //@line 15667
   $$019 = $1; //@line 15667
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 15669
    $5 = HEAP8[$$019 >> 0] | 0; //@line 15670
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 15675
    if (!$$01417) {
     $14 = 0; //@line 15680
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 15683
     $$019 = $$019 + 1 | 0; //@line 15683
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 15689
  }
 } while (0);
 return $14 | 0; //@line 15692
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11175
 STACKTOP = STACKTOP + 32 | 0; //@line 11176
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11176
 $vararg_buffer = sp; //@line 11177
 HEAP32[$0 + 36 >> 2] = 13; //@line 11180
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 11188
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 11190
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 11192
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 11197
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 11200
 STACKTOP = sp; //@line 11201
 return $14 | 0; //@line 11201
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14165
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14166
 $1 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14167
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 418; //@line 14170
  sp = STACKTOP; //@line 14171
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14174
 if (!$1) {
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14179
 _mbed_assert_internal(12912, 12940, 849); //@line 14180
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 419; //@line 14183
  sp = STACKTOP; //@line 14184
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14187
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_126($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28477
 $3 = $2 + 2056 | 0; //@line 28478
 HEAP32[$3 >> 2] = 2; //@line 28479
 HEAP32[$2 + 2092 >> 2] = 2; //@line 28481
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 476 | 0); //@line 28483
 HEAP8[$2 + 2063 >> 0] = HEAP8[$2 + 1699 >> 0] | 0; //@line 28487
 HEAP8[$2 + 2062 >> 0] = 0; //@line 28489
 HEAP32[$2 + 2064 >> 2] = 0; //@line 28491
 HEAP8[$2 + 1180 >> 0] = 0; //@line 28493
 HEAP32[$3 >> 2] = 0; //@line 28494
 if ((HEAP32[$2 + 2052 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$2 + 1174 >> 0] | 0) {
  return;
 }
 $18 = $2 + 1760 | 0; //@line 28507
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1; //@line 28510
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_256($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8052
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8056
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8057
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 8061
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 8065
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(4) | 0; //@line 8066
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 8067
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 346; //@line 8070
  sp = STACKTOP; //@line 8071
  return;
 }
 ___async_unwind = 0; //@line 8074
 HEAP32[$ReallocAsyncCtx8 >> 2] = 346; //@line 8075
 sp = STACKTOP; //@line 8076
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_334($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 25975
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25977
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25979
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25981
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 25983
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 25984
 FUNCTION_TABLE_vii[$8 & 15]($2, $4); //@line 25985
 if (!___async) {
  ___async_unwind = 0; //@line 25988
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 186; //@line 25990
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $6; //@line 25992
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $2; //@line 25994
 sp = STACKTOP; //@line 25995
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28435
 $3 = $2 + 2056 | 0; //@line 28436
 HEAP32[$3 >> 2] = 2; //@line 28437
 HEAP32[$2 + 2092 >> 2] = 2; //@line 28439
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 476 | 0); //@line 28441
 HEAP8[$2 + 2063 >> 0] = HEAP8[$2 + 1699 >> 0] | 0; //@line 28445
 HEAP8[$2 + 2062 >> 0] = 0; //@line 28447
 HEAP32[$2 + 2064 >> 2] = 0; //@line 28449
 HEAP8[$2 + 1180 >> 0] = 0; //@line 28451
 HEAP32[$3 >> 2] = 0; //@line 28452
 if ((HEAP32[$2 + 2052 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$2 + 1174 >> 0] | 0) {
  return;
 }
 $18 = $2 + 1760 | 0; //@line 28465
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1; //@line 28468
 return;
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb_43($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20797
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20801
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20802
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 20806
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 20810
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 20811
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 20812
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 359; //@line 20815
  sp = STACKTOP; //@line 20816
  return;
 }
 ___async_unwind = 0; //@line 20819
 HEAP32[$ReallocAsyncCtx >> 2] = 359; //@line 20820
 sp = STACKTOP; //@line 20821
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3618
 STACKTOP = STACKTOP + 16 | 0; //@line 3619
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3619
 $3 = sp; //@line 3620
 HEAP32[$3 >> 2] = $varargs; //@line 3621
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3622
 _mbed_vtracef($0, $1, $2, $3); //@line 3623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 125; //@line 3626
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3628
  sp = STACKTOP; //@line 3629
  STACKTOP = sp; //@line 3630
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3632
  STACKTOP = sp; //@line 3633
  return;
 }
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb_287($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10009
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10011
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10013
 $5 = HEAP32[$2 >> 2] | 0; //@line 10014
 if (!($5 & 2)) {
  return;
 }
 HEAP32[$2 >> 2] = $5 & -3; //@line 10021
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 10022
 __ZN12LoRaWANStack23mcps_indication_handlerEv($4); //@line 10023
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 227; //@line 10026
  sp = STACKTOP; //@line 10027
  return;
 }
 ___async_unwind = 0; //@line 10030
 HEAP32[$ReallocAsyncCtx >> 2] = 227; //@line 10031
 sp = STACKTOP; //@line 10032
 return;
}
function _mbed_die__async_cb_278($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 9386
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9388
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 9390
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 9391
 _wait_ms(150); //@line 9392
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 623; //@line 9395
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 9396
  HEAP32[$4 >> 2] = $2; //@line 9397
  sp = STACKTOP; //@line 9398
  return;
 }
 ___async_unwind = 0; //@line 9401
 HEAP32[$ReallocAsyncCtx14 >> 2] = 623; //@line 9402
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 9403
 HEAP32[$4 >> 2] = $2; //@line 9404
 sp = STACKTOP; //@line 9405
 return;
}
function _mbed_die__async_cb_277($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 9361
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9363
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 9365
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 9366
 _wait_ms(150); //@line 9367
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 624; //@line 9370
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 9371
  HEAP32[$4 >> 2] = $2; //@line 9372
  sp = STACKTOP; //@line 9373
  return;
 }
 ___async_unwind = 0; //@line 9376
 HEAP32[$ReallocAsyncCtx13 >> 2] = 624; //@line 9377
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 9378
 HEAP32[$4 >> 2] = $2; //@line 9379
 sp = STACKTOP; //@line 9380
 return;
}
function _mbed_die__async_cb_276($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 9336
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9338
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 9340
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 9341
 _wait_ms(150); //@line 9342
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 625; //@line 9345
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 9346
  HEAP32[$4 >> 2] = $2; //@line 9347
  sp = STACKTOP; //@line 9348
  return;
 }
 ___async_unwind = 0; //@line 9351
 HEAP32[$ReallocAsyncCtx12 >> 2] = 625; //@line 9352
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 9353
 HEAP32[$4 >> 2] = $2; //@line 9354
 sp = STACKTOP; //@line 9355
 return;
}
function _mbed_die__async_cb_275($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 9311
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9313
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 9315
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 9316
 _wait_ms(150); //@line 9317
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 626; //@line 9320
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 9321
  HEAP32[$4 >> 2] = $2; //@line 9322
  sp = STACKTOP; //@line 9323
  return;
 }
 ___async_unwind = 0; //@line 9326
 HEAP32[$ReallocAsyncCtx11 >> 2] = 626; //@line 9327
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 9328
 HEAP32[$4 >> 2] = $2; //@line 9329
 sp = STACKTOP; //@line 9330
 return;
}
function _mbed_die__async_cb_274($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 9286
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9288
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 9290
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 9291
 _wait_ms(150); //@line 9292
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 627; //@line 9295
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 9296
  HEAP32[$4 >> 2] = $2; //@line 9297
  sp = STACKTOP; //@line 9298
  return;
 }
 ___async_unwind = 0; //@line 9301
 HEAP32[$ReallocAsyncCtx10 >> 2] = 627; //@line 9302
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 9303
 HEAP32[$4 >> 2] = $2; //@line 9304
 sp = STACKTOP; //@line 9305
 return;
}
function _mbed_die__async_cb_273($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9261
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9263
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 9265
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 9266
 _wait_ms(150); //@line 9267
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 628; //@line 9270
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 9271
  HEAP32[$4 >> 2] = $2; //@line 9272
  sp = STACKTOP; //@line 9273
  return;
 }
 ___async_unwind = 0; //@line 9276
 HEAP32[$ReallocAsyncCtx9 >> 2] = 628; //@line 9277
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 9278
 HEAP32[$4 >> 2] = $2; //@line 9279
 sp = STACKTOP; //@line 9280
 return;
}
function _mbed_die__async_cb_272($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9236
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9238
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 9240
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 9241
 _wait_ms(400); //@line 9242
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 629; //@line 9245
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 9246
  HEAP32[$4 >> 2] = $2; //@line 9247
  sp = STACKTOP; //@line 9248
  return;
 }
 ___async_unwind = 0; //@line 9251
 HEAP32[$ReallocAsyncCtx8 >> 2] = 629; //@line 9252
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 9253
 HEAP32[$4 >> 2] = $2; //@line 9254
 sp = STACKTOP; //@line 9255
 return;
}
function _mbed_die__async_cb_271($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9211
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9213
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 9215
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 9216
 _wait_ms(400); //@line 9217
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 630; //@line 9220
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 9221
  HEAP32[$4 >> 2] = $2; //@line 9222
  sp = STACKTOP; //@line 9223
  return;
 }
 ___async_unwind = 0; //@line 9226
 HEAP32[$ReallocAsyncCtx7 >> 2] = 630; //@line 9227
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 9228
 HEAP32[$4 >> 2] = $2; //@line 9229
 sp = STACKTOP; //@line 9230
 return;
}
function _mbed_die__async_cb_270($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 9186
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9188
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 9190
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 9191
 _wait_ms(400); //@line 9192
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 631; //@line 9195
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 9196
  HEAP32[$4 >> 2] = $2; //@line 9197
  sp = STACKTOP; //@line 9198
  return;
 }
 ___async_unwind = 0; //@line 9201
 HEAP32[$ReallocAsyncCtx6 >> 2] = 631; //@line 9202
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 9203
 HEAP32[$4 >> 2] = $2; //@line 9204
 sp = STACKTOP; //@line 9205
 return;
}
function _mbed_die__async_cb_269($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9161
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9163
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 9165
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 9166
 _wait_ms(400); //@line 9167
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 632; //@line 9170
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 9171
  HEAP32[$4 >> 2] = $2; //@line 9172
  sp = STACKTOP; //@line 9173
  return;
 }
 ___async_unwind = 0; //@line 9176
 HEAP32[$ReallocAsyncCtx5 >> 2] = 632; //@line 9177
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 9178
 HEAP32[$4 >> 2] = $2; //@line 9179
 sp = STACKTOP; //@line 9180
 return;
}
function _mbed_die__async_cb_268($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9136
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9138
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 9140
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 9141
 _wait_ms(400); //@line 9142
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 633; //@line 9145
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 9146
  HEAP32[$4 >> 2] = $2; //@line 9147
  sp = STACKTOP; //@line 9148
  return;
 }
 ___async_unwind = 0; //@line 9151
 HEAP32[$ReallocAsyncCtx4 >> 2] = 633; //@line 9152
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 9153
 HEAP32[$4 >> 2] = $2; //@line 9154
 sp = STACKTOP; //@line 9155
 return;
}
function _mbed_die__async_cb_267($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9111
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9113
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 9115
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 9116
 _wait_ms(400); //@line 9117
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 634; //@line 9120
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 9121
  HEAP32[$4 >> 2] = $2; //@line 9122
  sp = STACKTOP; //@line 9123
  return;
 }
 ___async_unwind = 0; //@line 9126
 HEAP32[$ReallocAsyncCtx3 >> 2] = 634; //@line 9127
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 9128
 HEAP32[$4 >> 2] = $2; //@line 9129
 sp = STACKTOP; //@line 9130
 return;
}
function _mbed_die__async_cb_266($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9086
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9088
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 9090
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 9091
 _wait_ms(400); //@line 9092
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 635; //@line 9095
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 9096
  HEAP32[$4 >> 2] = $2; //@line 9097
  sp = STACKTOP; //@line 9098
  return;
 }
 ___async_unwind = 0; //@line 9101
 HEAP32[$ReallocAsyncCtx2 >> 2] = 635; //@line 9102
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 9103
 HEAP32[$4 >> 2] = $2; //@line 9104
 sp = STACKTOP; //@line 9105
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEhj__async_cb_5($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $10 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18285
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 18289
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 124 >> 2] | 0; //@line 18291
 $10 = HEAPU8[$0 + 8 >> 0] | 0; //@line 18292
 $$1 = (HEAP32[$9 + ($10 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 18297
 if ($$1 << 24 >> 24 != 3) {
  $$0 = $$1; //@line 18300
  $17 = ___async_retval; //@line 18301
  HEAP8[$17 >> 0] = $$0; //@line 18302
  return;
 }
 HEAP32[$9 + ($10 * 12 | 0) + 4 >> 2] = $6; //@line 18306
 $$0 = 3; //@line 18307
 $17 = ___async_retval; //@line 18308
 HEAP8[$17 >> 0] = $$0; //@line 18309
 return;
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5446
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5447
 _mbedtls_cipher_free($0); //@line 5448
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 599; //@line 5451
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5453
  sp = STACKTOP; //@line 5454
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5457
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5458
 _mbedtls_platform_zeroize($0, 400); //@line 5459
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 600; //@line 5462
  sp = STACKTOP; //@line 5463
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5466
  return;
 }
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_297($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22247
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22251
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22253
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 2; //@line 22256
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 22259
 _mbed_assert_internal(11890, 11899, 778); //@line 22260
 if (!___async) {
  ___async_unwind = 0; //@line 22263
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 224; //@line 22265
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $4; //@line 22267
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $6; //@line 22269
 sp = STACKTOP; //@line 22270
 return;
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2671
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2672
 _mbedtls_cipher_free($0); //@line 2673
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 560; //@line 2676
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2678
  sp = STACKTOP; //@line 2679
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2682
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2683
 _mbedtls_platform_zeroize($0, 68); //@line 2684
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 561; //@line 2687
  sp = STACKTOP; //@line 2688
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2691
  return;
 }
}
function _mbed_die__async_cb_265($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9061
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9063
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 9065
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 9066
 _wait_ms(400); //@line 9067
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 636; //@line 9070
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 9071
  HEAP32[$4 >> 2] = $2; //@line 9072
  sp = STACKTOP; //@line 9073
  return;
 }
 ___async_unwind = 0; //@line 9076
 HEAP32[$ReallocAsyncCtx >> 2] = 636; //@line 9077
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 9078
 HEAP32[$4 >> 2] = $2; //@line 9079
 sp = STACKTOP; //@line 9080
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_160($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1142
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1146
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1148
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 1150
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 1151
 FUNCTION_TABLE_vii[$7 & 15]($4, $6); //@line 1152
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 263; //@line 1155
  sp = STACKTOP; //@line 1156
  return;
 }
 ___async_unwind = 0; //@line 1159
 HEAP32[$ReallocAsyncCtx >> 2] = 263; //@line 1160
 sp = STACKTOP; //@line 1161
 return;
}
function _equeue_timeleft($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$014 = 0, $10 = 0, $11 = 0, $19 = 0, $21 = 0, $5 = 0;
 if (!$1) {
  $$0 = -1; //@line 3474
  return $$0 | 0; //@line 3475
 }
 $5 = $0 + 16 | 0; //@line 3479
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 3484
 $11 = $0 + 128 | 0; //@line 3485
 _equeue_mutex_lock($11); //@line 3486
 if (($1 >> HEAP32[$5 >> 2] | 0) == (HEAPU8[$10 + 4 >> 0] | 0 | 0)) {
  $19 = HEAP32[$10 + 20 >> 2] | 0; //@line 3495
  $21 = $19 - (_equeue_tick() | 0) | 0; //@line 3497
  $$014 = $21 & ~($21 >> 31); //@line 3501
 } else {
  $$014 = -1; //@line 3503
 }
 _equeue_mutex_unlock($11); //@line 3505
 $$0 = $$014; //@line 3506
 return $$0 | 0; //@line 3507
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7236
 STACKTOP = STACKTOP + 16 | 0; //@line 7237
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7237
 $1 = sp; //@line 7238
 HEAP32[$1 >> 2] = $varargs; //@line 7239
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7240
 _mbed_error_vfprintf($0, $1); //@line 7241
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 637; //@line 7244
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7246
  sp = STACKTOP; //@line 7247
  STACKTOP = sp; //@line 7248
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7250
  STACKTOP = sp; //@line 7251
  return;
 }
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18079
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18081
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 18083
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18085
 if (!$AsyncRetVal) {
  $11 = (HEAP32[$0 + 4 >> 2] | 0) + 2904 | 0; //@line 18088
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] & -18 | 1; //@line 18092
  __ZN7LoRaMac14set_tx_ongoingEb($4, 1); //@line 18093
  HEAP32[$6 >> 2] = 8; //@line 18094
  $$0 = 0; //@line 18095
 } else {
  $$0 = $AsyncRetVal; //@line 18097
 }
 HEAP16[___async_retval >> 1] = ($$0 | 0) == 0 ? $8 : $$0 & 65535; //@line 18103
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17987
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17989
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 17995
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 17998
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17999
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 18000
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 472; //@line 18003
  sp = STACKTOP; //@line 18004
  return;
 }
 ___async_unwind = 0; //@line 18007
 HEAP32[$ReallocAsyncCtx2 >> 2] = 472; //@line 18008
 sp = STACKTOP; //@line 18009
 return;
}
function __ZN7LoRaMac21post_process_mcps_reqEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $20 = 0, $6 = 0;
 HEAP8[$0 + 1180 >> 0] = 0; //@line 11244
 HEAP32[$0 + 2056 >> 2] = 0; //@line 11246
 if ((HEAP32[$0 + 2052 >> 2] | 0) != 1) {
  if (HEAP8[$0 + 1174 >> 0] | 0) {
   return;
  }
  $20 = $0 + 1760 | 0; //@line 11257
  HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1; //@line 11260
  return;
 }
 $6 = $0 + 2062 | 0; //@line 11263
 if (!(HEAP8[$6 >> 0] | 0)) {
  return;
 }
 HEAP8[$0 + 1177 >> 0] = 0; //@line 11270
 HEAP8[$6 >> 0] = 0; //@line 11271
 HEAP8[$0 + 2044 >> 0] = 0; //@line 11273
 if (HEAP8[$0 + 1174 >> 0] | 0) {
  return;
 }
 $14 = $0 + 1760 | 0; //@line 11280
 HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1; //@line 11283
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2740
 HEAP32[$0 >> 2] = 640; //@line 2741
 $1 = $0 + 8 | 0; //@line 2742
 HEAP32[$1 >> 2] = 0; //@line 2743
 HEAP32[$1 + 4 >> 2] = 0; //@line 2743
 HEAP32[$1 + 8 >> 2] = 0; //@line 2743
 HEAP32[$1 + 12 >> 2] = 0; //@line 2743
 $2 = _get_us_ticker_data() | 0; //@line 2744
 HEAP32[$0 + 24 >> 2] = $2; //@line 2746
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2747
 _ticker_set_handler($2, 116); //@line 2748
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 117; //@line 2751
  sp = STACKTOP; //@line 2752
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2755
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_182($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2307
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2311
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 2314
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 2316
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 2317
 FUNCTION_TABLE_vii[$7 & 15]($4, $6); //@line 2318
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 217; //@line 2321
  sp = STACKTOP; //@line 2322
  return;
 }
 ___async_unwind = 0; //@line 2325
 HEAP32[$ReallocAsyncCtx >> 2] = 217; //@line 2326
 sp = STACKTOP; //@line 2327
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_286($0) {
 $0 = $0 | 0;
 var $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9914
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9922
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  return;
 }
 _mbed_tracef(16, 12685, 13321, HEAP32[$0 + 8 >> 2] | 0); //@line 9928
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 9929
 __ZN7LoRaMac15open_rx2_windowEv($8); //@line 9930
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 440; //@line 9933
  sp = STACKTOP; //@line 9934
  return;
 }
 ___async_unwind = 0; //@line 9937
 HEAP32[$ReallocAsyncCtx3 >> 2] = 440; //@line 9938
 sp = STACKTOP; //@line 9939
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb_22($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$ = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19417
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19419
 $$1 = HEAP8[___async_retval >> 0] & 1 ? HEAP8[$0 + 4 >> 0] | 0 : 6; //@line 19423
 $8 = HEAP8[$4 >> 0] | 0; //@line 19424
 $$1$ = ($8 << 24 >> 24 >= (HEAP8[$6 + 28 >> 0] | 0) ? $8 << 24 >> 24 <= (HEAP8[$6 + 29 >> 0] | 0) : 0) ? $$1 : $$1 & 5; //@line 19433
 $17 = HEAP8[$4 + 1 >> 0] | 0; //@line 19435
 HEAP8[___async_retval >> 0] = ($17 << 24 >> 24 >= (HEAP8[$6 + 32 >> 0] | 0) ? $17 << 24 >> 24 <= (HEAP8[$6 + 33 >> 0] | 0) : 0) ? $$1$ : $$1$ & 3; //@line 19446
 return;
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_162($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1207
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1211
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1212
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 1218
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 1219
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 1220
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 384; //@line 1223
  sp = STACKTOP; //@line 1224
  return;
 }
 ___async_unwind = 0; //@line 1227
 HEAP32[$ReallocAsyncCtx2 >> 2] = 384; //@line 1228
 sp = STACKTOP; //@line 1229
 return;
}
function __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18499
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18500
 $9 = __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) | 0; //@line 18501
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 488; //@line 18504
  sp = STACKTOP; //@line 18505
  return 0; //@line 18506
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18508
  return $9 | 0; //@line 18509
 }
 return 0; //@line 18511
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 31281
 newDynamicTop = oldDynamicTop + increment | 0; //@line 31282
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 31286
  ___setErrNo(12); //@line 31287
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 31291
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 31295
   ___setErrNo(12); //@line 31296
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 31300
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 11346
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 11348
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 11354
  $11 = ___fwritex($0, $4, $3) | 0; //@line 11355
  if ($phitmp) {
   $13 = $11; //@line 11357
  } else {
   ___unlockfile($3); //@line 11359
   $13 = $11; //@line 11360
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 11364
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 11368
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 11371
 }
 return $15 | 0; //@line 11373
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1820
 __ZN4mbed6Ticker6detachEv($0 + 1240 | 0); //@line 1822
 HEAP8[$0 + 688 >> 0] = 0; //@line 1824
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 1826
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 1832
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 1837
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1838
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 1839
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 93; //@line 1842
  sp = STACKTOP; //@line 1843
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1846
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 13682
 } else {
  $$056 = $2; //@line 13684
  $15 = $1; //@line 13684
  $8 = $0; //@line 13684
  while (1) {
   $14 = $$056 + -1 | 0; //@line 13692
   HEAP8[$14 >> 0] = HEAPU8[15511 + ($8 & 15) >> 0] | 0 | $3; //@line 13693
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 13694
   $15 = tempRet0; //@line 13695
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 13700
    break;
   } else {
    $$056 = $14; //@line 13703
   }
  }
 }
 return $$05$lcssa | 0; //@line 13707
}
function __ZN7LoRaMac21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14586
 STACKTOP = STACKTOP + 16 | 0; //@line 14587
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14587
 $vararg_buffer = sp; //@line 14588
 if (!(HEAP8[$0 + 1936 >> 0] | 0)) {
  if (__ZN7LoRaPHY18verify_tx_datarateEhb($0 + 4 | 0, $1, 0) | 0) {
   HEAP8[$0 + 1877 >> 0] = $1; //@line 14597
   $$0 = 0; //@line 14598
  } else {
   $$0 = -1003; //@line 14600
  }
 } else {
  _mbed_tracef(2, 12685, 13145, $vararg_buffer); //@line 14603
  $$0 = -1003; //@line 14604
 }
 STACKTOP = sp; //@line 14606
 return $$0 | 0; //@line 14606
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 16915
 $0 = ___cxa_get_globals_fast() | 0; //@line 16916
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 16919
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 16923
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 16935
    _emscripten_alloc_async_context(4, sp) | 0; //@line 16936
    __ZSt11__terminatePFvvE($16); //@line 16937
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 16942
 _emscripten_alloc_async_context(4, sp) | 0; //@line 16943
 __ZSt11__terminatePFvvE($17); //@line 16944
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 11563
 $3 = HEAP8[$1 >> 0] | 0; //@line 11565
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 11569
 $7 = HEAP32[$0 >> 2] | 0; //@line 11570
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 11575
  HEAP32[$0 + 4 >> 2] = 0; //@line 11577
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 11579
  HEAP32[$0 + 28 >> 2] = $14; //@line 11581
  HEAP32[$0 + 20 >> 2] = $14; //@line 11583
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11589
  $$0 = 0; //@line 11590
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 11593
  $$0 = -1; //@line 11594
 }
 return $$0 | 0; //@line 11596
}
function __ZN4mbed7Timeout7handlerEv__async_cb_91($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26419
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26421
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26423
 $5 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 26425
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 26426
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 26427
 if (!___async) {
  ___async_unwind = 0; //@line 26430
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 110; //@line 26432
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 26434
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 26436
 sp = STACKTOP; //@line 26437
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18448
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18450
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 18452
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 18459
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18460
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 18461
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 18464
  sp = STACKTOP; //@line 18465
  return;
 }
 ___async_unwind = 0; //@line 18468
 HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 18469
 sp = STACKTOP; //@line 18470
 return;
}
function __ZN12LoRaWANStack24acquire_backoff_metadataERi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $5 = 0, $storemerge = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$1 = -1012; //@line 10961
  return $$1 | 0; //@line 10962
 }
 $5 = __ZN7LoRaMac26get_backoff_timer_event_idEv($0) | 0; //@line 10964
 if ((__ZN7LoRaMac26get_backoff_timer_event_idEv($0) | 0) > 0) {
  $$0 = 0; //@line 10971
  $storemerge = __ZN6events10EventQueue9time_leftEi(HEAP32[$0 + 3168 >> 2] | 0, $5) | 0; //@line 10971
 } else {
  $$0 = -1023; //@line 10973
  $storemerge = -1; //@line 10973
 }
 HEAP32[$1 >> 2] = $storemerge; //@line 10975
 $$1 = $$0; //@line 10976
 return $$1 | 0; //@line 10977
}
function __ZN12radio_eventsD2Ev__async_cb_66($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24598
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24600
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 24602
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 24608
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 24609
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 24610
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 24613
  sp = STACKTOP; //@line 24614
  return;
 }
 ___async_unwind = 0; //@line 24617
 HEAP32[$ReallocAsyncCtx7 >> 2] = 164; //@line 24618
 sp = STACKTOP; //@line 24619
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_350($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26801
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26804
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 26807
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26808
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 26809
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 525; //@line 26812
  sp = STACKTOP; //@line 26813
  return;
 }
 ___async_unwind = 0; //@line 26816
 HEAP32[$ReallocAsyncCtx3 >> 2] = 525; //@line 26817
 sp = STACKTOP; //@line 26818
 return;
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15957
 if (HEAP8[$0 + 2104 >> 0] | 0) {
  $$0 = -1e3; //@line 15962
  return $$0 | 0; //@line 15963
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15966
 $6 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 752 | 0, $1) | 0; //@line 15967
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 465; //@line 15970
  sp = STACKTOP; //@line 15971
  return 0; //@line 15972
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15974
 $$0 = $6; //@line 15975
 return $$0 | 0; //@line 15976
}
function __ZN7LoRaPHY17calculate_backoffEbbbhjj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $14 = 0, $16 = 0, $24 = 0, $8 = 0;
 $8 = HEAP32[$0 + 72 >> 2] | 0; //@line 144
 $14 = HEAPU8[(HEAP32[$0 + 124 >> 2] | 0) + (($4 & 255) * 12 | 0) + 9 >> 0] | 0; //@line 150
 $16 = HEAP16[$8 + ($14 * 24 | 0) >> 1] | 0; //@line 152
 $$0 = $5 >>> 0 < 36e5 ? 100 : $5 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 157
 $24 = (Math_imul((($16 & 65535) > ($$0 & 65535) | $1 ? $16 : $$0) & 65535, $6) | 0) - $6 | 0; //@line 164
 HEAP32[$8 + ($14 * 24 | 0) + 12 >> 2] = $2 | $3 ? $24 : 0; //@line 166
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 49
 HEAP32[$0 + 788 >> 2] = $1; //@line 51
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 54
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 55
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 56
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 46; //@line 59
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 61
  sp = STACKTOP; //@line 62
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 65
  HEAP8[$0 + 689 >> 0] = 0; //@line 67
  HEAP8[$0 + 688 >> 0] = 0; //@line 69
  return;
 }
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 6984
 $6 = HEAP32[$4 >> 2] | 0; //@line 6986
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 6989
 $11 = ___async_retval; //@line 6991
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 6998
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 7004
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 7006
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 7008
 HEAP32[___async_retval >> 2] = $28; //@line 7011
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_335($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 26001
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26005
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 26008
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(4) | 0; //@line 26009
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 26010
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 187; //@line 26013
  sp = STACKTOP; //@line 26014
  return;
 }
 ___async_unwind = 0; //@line 26017
 HEAP32[$ReallocAsyncCtx18 >> 2] = 187; //@line 26018
 sp = STACKTOP; //@line 26019
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10252
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10257
  return $$0 | 0; //@line 10258
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10260
 $5 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) | 0; //@line 10261
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 349; //@line 10264
  sp = STACKTOP; //@line 10265
  return 0; //@line 10266
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10268
 $$0 = $5; //@line 10269
 return $$0 | 0; //@line 10270
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_129($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28588
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28590
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28592
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 28594
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1836 | 0); //@line 28595
 if (!___async) {
  ___async_unwind = 0; //@line 28598
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 399; //@line 28600
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 28602
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 28604
 sp = STACKTOP; //@line 28605
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 614
 $2 = HEAP32[$0 >> 2] | 0; //@line 615
 $3 = $1 + 16 | 0; //@line 616
 $4 = HEAP32[$3 >> 2] | 0; //@line 617
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 618
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 619
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 554; //@line 622
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 624
  sp = STACKTOP; //@line 625
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 628
  HEAP32[$3 >> 2] = 0; //@line 629
  return;
 }
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10123
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10125
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10127
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 10129
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 10132
 } else {
  HEAP32[$2 >> 2] = $4; //@line 10134
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 5; //@line 10140
   HEAP32[$2 + 16 >> 2] = 18; //@line 10142
   $$0 = 0; //@line 10143
  } else {
   $$0 = 0; //@line 10145
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 10149
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_10($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18488
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18492
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 18494
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 18495
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 18496
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 274; //@line 18499
  sp = STACKTOP; //@line 18500
  return;
 }
 ___async_unwind = 0; //@line 18503
 HEAP32[$ReallocAsyncCtx >> 2] = 274; //@line 18504
 sp = STACKTOP; //@line 18505
 return;
}
function __ZN12LoRaWANStack19acquire_rx_metadataER19lorawan_rx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $8 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10936
  return $$0 | 0; //@line 10937
 }
 $5 = $0 + 2900 | 0; //@line 10939
 if (HEAP8[$5 >> 0] | 0) {
  $$0 = -1023; //@line 10943
  return $$0 | 0; //@line 10944
 }
 $8 = $0 + 2896 | 0; //@line 10946
 HEAP16[$1 >> 1] = HEAP16[$8 >> 1] | 0; //@line 10947
 HEAP16[$1 + 2 >> 1] = HEAP16[$8 + 2 >> 1] | 0; //@line 10947
 HEAP16[$1 + 4 >> 1] = HEAP16[$8 + 4 >> 1] | 0; //@line 10947
 HEAP8[$5 >> 0] = 1; //@line 10948
 $$0 = 0; //@line 10949
 return $$0 | 0; //@line 10950
}
function __ZN7LoRaMac24continue_joining_processEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13112
 if ((HEAPU8[$0 + 1701 >> 0] | 0) >= (HEAPU8[$0 + 1700 >> 0] | 0)) {
  $$0 = 0; //@line 13119
  return $$0 | 0; //@line 13120
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13122
 $6 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 13123
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 406; //@line 13126
  sp = STACKTOP; //@line 13127
  return 0; //@line 13128
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13130
 $$0 = ($6 | 0) == 0; //@line 13132
 return $$0 | 0; //@line 13133
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 15150
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 15153
 $$sink17$sink = $0; //@line 15153
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 15155
  $12 = HEAP8[$11 >> 0] | 0; //@line 15156
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 15164
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 15169
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 15174
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16017
 if (HEAP8[$0 + 2104 >> 0] | 0) {
  $$0 = -1e3; //@line 16022
  return $$0 | 0; //@line 16023
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16026
 $6 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 752 | 0, $1) | 0; //@line 16027
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 467; //@line 16030
  sp = STACKTOP; //@line 16031
  return 0; //@line 16032
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16034
 $$0 = $6; //@line 16035
 return $$0 | 0; //@line 16036
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_74($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 25202
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25205
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 25208
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 25209
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 25210
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 510; //@line 25213
  sp = STACKTOP; //@line 25214
  return;
 }
 ___async_unwind = 0; //@line 25217
 HEAP32[$ReallocAsyncCtx9 >> 2] = 510; //@line 25218
 sp = STACKTOP; //@line 25219
 return;
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 13719
 } else {
  $$06 = $2; //@line 13721
  $11 = $1; //@line 13721
  $7 = $0; //@line 13721
  while (1) {
   $10 = $$06 + -1 | 0; //@line 13726
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 13727
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 13728
   $11 = tempRet0; //@line 13729
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 13734
    break;
   } else {
    $$06 = $10; //@line 13737
   }
  }
 }
 return $$0$lcssa | 0; //@line 13741
}
function __ZN12LoRaWANStack19acquire_tx_metadataER19lorawan_tx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $8 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10911
  return $$0 | 0; //@line 10912
 }
 $5 = $0 + 2895 | 0; //@line 10914
 if (HEAP8[$5 >> 0] | 0) {
  $$0 = -1023; //@line 10918
  return $$0 | 0; //@line 10919
 }
 $8 = $0 + 2884 | 0; //@line 10921
 HEAP32[$1 >> 2] = HEAP32[$8 >> 2]; //@line 10922
 HEAP32[$1 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 10922
 HEAP32[$1 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 10922
 HEAP8[$5 >> 0] = 1; //@line 10923
 $$0 = 0; //@line 10924
 return $$0 | 0; //@line 10925
}
function __ZN7LoRaMac10disconnectEv__async_cb_170($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1482
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1484
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1486
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 1488
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1816 | 0); //@line 1489
 if (!___async) {
  ___async_unwind = 0; //@line 1492
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 461; //@line 1494
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 1496
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 1498
 sp = STACKTOP; //@line 1499
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_169($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1459
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1461
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1463
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 1465
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1836 | 0); //@line 1466
 if (!___async) {
  ___async_unwind = 0; //@line 1469
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 462; //@line 1471
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 1473
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 1475
 sp = STACKTOP; //@line 1476
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_183($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2363
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2366
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 2369
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 2370
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 2371
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 534; //@line 2374
  sp = STACKTOP; //@line 2375
  return;
 }
 ___async_unwind = 0; //@line 2378
 HEAP32[$ReallocAsyncCtx3 >> 2] = 534; //@line 2379
 sp = STACKTOP; //@line 2380
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_364($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27675
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27679
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 27681
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 27682
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 27683
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 425; //@line 27686
  sp = STACKTOP; //@line 27687
  return;
 }
 ___async_unwind = 0; //@line 27690
 HEAP32[$ReallocAsyncCtx >> 2] = 425; //@line 27691
 sp = STACKTOP; //@line 27692
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 651
 $1 = _emscripten_asm_const_i(3) | 0; //@line 652
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 655
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 656
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 657
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 56; //@line 660
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 662
  sp = STACKTOP; //@line 663
  return 0; //@line 664
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 666
  return $1 | 0; //@line 667
 }
 return 0; //@line 669
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10276
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10281
  return $$0 | 0; //@line 10282
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10284
 $5 = __ZN7LoRaMac21remove_single_channelEh($0, $1) | 0; //@line 10285
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 350; //@line 10288
  sp = STACKTOP; //@line 10289
  return 0; //@line 10290
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10292
 $$0 = $5; //@line 10293
 return $$0 | 0; //@line 10294
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_213($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4904
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 4907
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 4910
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 4911
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 4912
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 531; //@line 4915
  sp = STACKTOP; //@line 4916
  return;
 }
 ___async_unwind = 0; //@line 4919
 HEAP32[$ReallocAsyncCtx3 >> 2] = 531; //@line 4920
 sp = STACKTOP; //@line 4921
 return;
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 20509
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 20512
 $8 = ($3 & 255) + 1 | 0; //@line 20514
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 20518
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 20522
   return $$0 | 0; //@line 20523
  }
 case 0:
  {
   $$0 = $6; //@line 20527
   return $$0 | 0; //@line 20528
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 20534
   return $$0 | 0; //@line 20535
  }
 }
 return 0; //@line 20538
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_193($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2931
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2934
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 2937
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 2938
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 2939
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 528; //@line 2942
  sp = STACKTOP; //@line 2943
  return;
 }
 ___async_unwind = 0; //@line 2946
 HEAP32[$ReallocAsyncCtx3 >> 2] = 528; //@line 2947
 sp = STACKTOP; //@line 2948
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_188($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2698
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2701
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 2704
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 2705
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 2706
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 538; //@line 2709
  sp = STACKTOP; //@line 2710
  return;
 }
 ___async_unwind = 0; //@line 2713
 HEAP32[$ReallocAsyncCtx4 >> 2] = 538; //@line 2714
 sp = STACKTOP; //@line 2715
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_187($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2675
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2678
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 2681
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 2682
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 2683
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 538; //@line 2686
  sp = STACKTOP; //@line 2687
  return;
 }
 ___async_unwind = 0; //@line 2690
 HEAP32[$ReallocAsyncCtx4 >> 2] = 538; //@line 2691
 sp = STACKTOP; //@line 2692
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_158($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1097
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1100
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 1103
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 1104
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 1105
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 544; //@line 1108
  sp = STACKTOP; //@line 1109
  return;
 }
 ___async_unwind = 0; //@line 1112
 HEAP32[$ReallocAsyncCtx3 >> 2] = 544; //@line 1113
 sp = STACKTOP; //@line 1114
 return;
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15981
 if (HEAP8[$0 + 2104 >> 0] | 0) {
  $$0 = -1e3; //@line 15986
  return $$0 | 0; //@line 15987
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15990
 $5 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 752 | 0) | 0; //@line 15991
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 466; //@line 15994
  sp = STACKTOP; //@line 15995
  return 0; //@line 15996
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15998
 $$0 = $5; //@line 15999
 return $$0 | 0; //@line 16000
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17791
 do {
  if (!$0) {
   $3 = 0; //@line 17795
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17797
   $2 = ___dynamic_cast($0, 400, 456, 0) | 0; //@line 17798
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 696; //@line 17801
    sp = STACKTOP; //@line 17802
    return 0; //@line 17803
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17805
    $3 = ($2 | 0) != 0 & 1; //@line 17808
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 17813
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 113 >> 0] | 0; //@line 18941
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 120 >> 2] | 0; //@line 18947
 $7 = HEAP32[$0 + 116 >> 2] | 0; //@line 18949
 $8 = $2 & 255; //@line 18950
 $indvars$iv = 0; //@line 18951
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 18955
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 18958
  $indvars$iv = $indvars$iv + 1 | 0; //@line 18959
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10299
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10304
  return $$0 | 0; //@line 10305
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10307
 $4 = __ZN7LoRaMac19remove_channel_planEv($0) | 0; //@line 10308
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 351; //@line 10311
  sp = STACKTOP; //@line 10312
  return 0; //@line 10313
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10315
 $$0 = $4; //@line 10316
 return $$0 | 0; //@line 10317
}
function _invoke_ticker__async_cb_106($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27502
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 27508
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 27509
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 27510
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 27511
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 650; //@line 27514
  sp = STACKTOP; //@line 27515
  return;
 }
 ___async_unwind = 0; //@line 27518
 HEAP32[$ReallocAsyncCtx >> 2] = 650; //@line 27519
 sp = STACKTOP; //@line 27520
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4507
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4510
 $7 = __ZN12LoRaWANStack9handle_txEhPKhthbb($0 + 4 | 0, $1, $2, $3, $4 & 255, 0, 0) | 0; //@line 4511
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 145; //@line 4514
  sp = STACKTOP; //@line 4515
  return 0; //@line 4516
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4518
  return $7 | 0; //@line 4519
 }
 return 0; //@line 4521
}
function __ZN16LoRaWANInterface7receiveEPhtRhRi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4557
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4559
 $6 = __ZN12LoRaWANStack9handle_rxEPhtRhRib($0 + 4 | 0, $1, $2, $3, $4, 0) | 0; //@line 4560
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 147; //@line 4563
  sp = STACKTOP; //@line 4564
  return 0; //@line 4565
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4567
  return $6 | 0; //@line 4568
 }
 return 0; //@line 4570
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 13363
 } else {
  $$04 = 0; //@line 13365
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 13368
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 13372
   $12 = $7 + 1 | 0; //@line 13373
   HEAP32[$0 >> 2] = $12; //@line 13374
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 13380
    break;
   } else {
    $$04 = $11; //@line 13383
   }
  }
 }
 return $$0$lcssa | 0; //@line 13387
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7582
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7584
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7590
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7591
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7592
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 261; //@line 7595
  sp = STACKTOP; //@line 7596
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7599
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8488
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8490
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8496
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8497
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8498
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 292; //@line 8501
  sp = STACKTOP; //@line 8502
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8505
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4576
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4578
 $3 = __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t($0 + 4 | 0, $1) | 0; //@line 4579
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 148; //@line 4582
  sp = STACKTOP; //@line 4583
  return 0; //@line 4584
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4586
  return $3 | 0; //@line 4587
 }
 return 0; //@line 4589
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 30806
 $y_sroa_0_0_extract_trunc = $b$0; //@line 30807
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 30808
 $1$1 = tempRet0; //@line 30809
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 30811
}
function __ZN7LoRaMac15send_ongoing_txEv__async_cb_264($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8985
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8987
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8991
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 8994
  $13 = ___async_retval; //@line 8995
  HEAP32[$13 >> 2] = $$0; //@line 8996
  return;
 }
 HEAP32[$6 + 2052 >> 2] = HEAP32[$4 >> 2]; //@line 9001
 $$0 = 0; //@line 9002
 $13 = ___async_retval; //@line 9003
 HEAP32[$13 >> 2] = $$0; //@line 9004
 return;
}
function _mbedtls_cipher_update__async_cb_347($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26700
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26702
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26704
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 26707
  $9 = ___async_retval; //@line 26708
  HEAP32[$9 >> 2] = $$1; //@line 26709
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 26714
 $$1 = 0; //@line 26715
 $9 = ___async_retval; //@line 26716
 HEAP32[$9 >> 2] = $$1; //@line 26717
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9276
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 9278
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 9284
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9285
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 9286
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 322; //@line 9289
  sp = STACKTOP; //@line 9290
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9293
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6328
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 6330
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 6336
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6337
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 6338
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 215; //@line 6341
  sp = STACKTOP; //@line 6342
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6345
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_304($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22551
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 22559
 _mbed_assert_internal(13452, 13470, 57); //@line 22560
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 553; //@line 22563
  sp = STACKTOP; //@line 22564
  return;
 }
 ___async_unwind = 0; //@line 22567
 HEAP32[$ReallocAsyncCtx6 >> 2] = 553; //@line 22568
 sp = STACKTOP; //@line 22569
 return;
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4315
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4317
 $3 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0 + 4 | 0, $1) | 0; //@line 4318
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 138; //@line 4321
  sp = STACKTOP; //@line 4322
  return 0; //@line 4323
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4325
  return $3 | 0; //@line 4326
 }
 return 0; //@line 4328
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4967
 HEAP32[$0 >> 2] = 724; //@line 4968
 $2 = $0 + 4 | 0; //@line 4969
 __ZN12LoRaWANStackC2Ev($2); //@line 4970
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4971
 __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($2, $1); //@line 4972
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 165; //@line 4975
  sp = STACKTOP; //@line 4976
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4979
  return;
 }
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27713
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 27720
 _mbed_assert_internal(11890, 11899, 540); //@line 27721
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 199; //@line 27724
  sp = STACKTOP; //@line 27725
  return;
 }
 ___async_unwind = 0; //@line 27728
 HEAP32[$ReallocAsyncCtx2 >> 2] = 199; //@line 27729
 sp = STACKTOP; //@line 27730
 return;
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4439
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4441
 $3 = __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 4442
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 142; //@line 4445
  sp = STACKTOP; //@line 4446
  return 0; //@line 4447
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4449
  return $3 | 0; //@line 4450
 }
 return 0; //@line 4452
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2374] | 0; //@line 2699
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 2703
  } else {
   $$06 = 9492; //@line 2705
   $9 = $1; //@line 2705
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 2710
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 2715
    if (!$9) {
     $$05 = 0; //@line 2718
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 2721
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 2726
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18382
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18389
 _mbed_assert_internal(12912, 12940, 849); //@line 18390
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 419; //@line 18393
  sp = STACKTOP; //@line 18394
  return;
 }
 ___async_unwind = 0; //@line 18397
 HEAP32[$ReallocAsyncCtx2 >> 2] = 419; //@line 18398
 sp = STACKTOP; //@line 18399
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22429
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22436
 _mbed_assert_internal(11890, 11899, 508); //@line 22437
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 190; //@line 22440
  sp = STACKTOP; //@line 22441
  return;
 }
 ___async_unwind = 0; //@line 22444
 HEAP32[$ReallocAsyncCtx2 >> 2] = 190; //@line 22445
 sp = STACKTOP; //@line 22446
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27084
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 27093
 _mbed_assert_internal(11890, 11899, 548); //@line 27094
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 202; //@line 27097
  sp = STACKTOP; //@line 27098
  return;
 }
 ___async_unwind = 0; //@line 27101
 HEAP32[$ReallocAsyncCtx3 >> 2] = 202; //@line 27102
 sp = STACKTOP; //@line 27103
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_308($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 22823
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 22830
 _mbed_assert_internal(11890, 11899, 886); //@line 22831
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 298; //@line 22834
  sp = STACKTOP; //@line 22835
  return;
 }
 ___async_unwind = 0; //@line 22838
 HEAP32[$ReallocAsyncCtx10 >> 2] = 298; //@line 22839
 sp = STACKTOP; //@line 22840
 return;
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 30791
 $2 = $b & 65535; //@line 30792
 $3 = Math_imul($2, $1) | 0; //@line 30793
 $6 = $a >>> 16; //@line 30794
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 30795
 $11 = $b >>> 16; //@line 30796
 $12 = Math_imul($11, $1) | 0; //@line 30797
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 30798
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7810
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7812
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7818
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7819
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7820
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 272; //@line 7823
  sp = STACKTOP; //@line 7824
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7827
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26479
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26488
 _mbed_assert_internal(11890, 11899, 533); //@line 26489
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 196; //@line 26492
  sp = STACKTOP; //@line 26493
  return;
 }
 ___async_unwind = 0; //@line 26496
 HEAP32[$ReallocAsyncCtx3 >> 2] = 196; //@line 26497
 sp = STACKTOP; //@line 26498
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26941
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26950
 _mbed_assert_internal(11890, 11899, 525); //@line 26951
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 26954
  sp = STACKTOP; //@line 26955
  return;
 }
 ___async_unwind = 0; //@line 26958
 HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 26959
 sp = STACKTOP; //@line 26960
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 10954
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 10956
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 10963
  } else {
   $$0 = $3; //@line 10965
  }
 }
 $8 = _malloc($$0) | 0; //@line 10968
 if (!$8) {
  return $8 | 0; //@line 10971
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 10978
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 10980
 return $8 | 0; //@line 10981
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4352
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4354
 $3 = __ZN12LoRaWANStack7connectERK15lorawan_connect($0 + 4 | 0, $1) | 0; //@line 4355
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 140; //@line 4358
  sp = STACKTOP; //@line 4359
  return 0; //@line 4360
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4362
  return $3 | 0; //@line 4363
 }
 return 0; //@line 4365
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5492
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5493
 _initialize($0); //@line 5494
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 602; //@line 5497
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5499
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5501
  sp = STACKTOP; //@line 5502
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5505
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 5508
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_234($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6104
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6106
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6108
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 6109
 __ZN4mbed10TimerEventD2Ev($2); //@line 6110
 if (!___async) {
  ___async_unwind = 0; //@line 6113
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 73; //@line 6115
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 6117
 sp = STACKTOP; //@line 6118
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_233($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6084
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6086
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6088
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 6089
 __ZN4mbed10TimerEventD2Ev($4); //@line 6090
 if (!___async) {
  ___async_unwind = 0; //@line 6093
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 71; //@line 6095
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 6097
 sp = STACKTOP; //@line 6098
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_232($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6064
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6066
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6068
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 6069
 __ZN4mbed10TimerEventD2Ev($4); //@line 6070
 if (!___async) {
  ___async_unwind = 0; //@line 6073
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 69; //@line 6075
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 6077
 sp = STACKTOP; //@line 6078
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 6044
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6046
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6048
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 6049
 __ZN4mbed10TimerEventD2Ev($4); //@line 6050
 if (!___async) {
  ___async_unwind = 0; //@line 6053
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 67; //@line 6055
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 6057
 sp = STACKTOP; //@line 6058
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_240($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 6314
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 6317
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 6318
 __ZN4mbed11InterruptInD2Ev($3); //@line 6319
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 79; //@line 6322
  sp = STACKTOP; //@line 6323
  return;
 }
 ___async_unwind = 0; //@line 6326
 HEAP32[$ReallocAsyncCtx9 >> 2] = 79; //@line 6327
 sp = STACKTOP; //@line 6328
 return;
}
function _mbed_die__async_cb_279($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 9411
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9413
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 9415
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 9416
 _wait_ms(150); //@line 9417
 if (!___async) {
  ___async_unwind = 0; //@line 9420
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 622; //@line 9422
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 9424
 sp = STACKTOP; //@line 9425
 return;
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 9041
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9043
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 9045
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 9046
 _wait_ms(150); //@line 9047
 if (!___async) {
  ___async_unwind = 0; //@line 9050
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 621; //@line 9052
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 9054
 sp = STACKTOP; //@line 9055
 return;
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4485
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4487
 $3 = __ZN12LoRaWANStack16remove_a_channelEh($0 + 4 | 0, $1) | 0; //@line 4488
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 144; //@line 4491
  sp = STACKTOP; //@line 4492
  return 0; //@line 4493
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4495
  return $3 | 0; //@line 4496
 }
 return 0; //@line 4498
}
function _mbedtls_gcm_free__async_cb_146($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30281
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30283
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 30284
 _mbedtls_platform_zeroize($2, 400); //@line 30285
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 600; //@line 30288
  sp = STACKTOP; //@line 30289
  return;
 }
 ___async_unwind = 0; //@line 30292
 HEAP32[$ReallocAsyncCtx >> 2] = 600; //@line 30293
 sp = STACKTOP; //@line 30294
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27526
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27528
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 27529
 __ZN4mbed10TimerEventD2Ev($2); //@line 27530
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 105; //@line 27533
  sp = STACKTOP; //@line 27534
  return;
 }
 ___async_unwind = 0; //@line 27537
 HEAP32[$ReallocAsyncCtx2 >> 2] = 105; //@line 27538
 sp = STACKTOP; //@line 27539
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25419
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25421
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 25422
 __ZN4mbed10TimerEventD2Ev($2); //@line 25423
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 645; //@line 25426
  sp = STACKTOP; //@line 25427
  return;
 }
 ___async_unwind = 0; //@line 25430
 HEAP32[$ReallocAsyncCtx2 >> 2] = 645; //@line 25431
 sp = STACKTOP; //@line 25432
 return;
}
function ___fflush_unlocked__async_cb_185($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2476
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2478
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2480
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2482
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 2484
 HEAP32[$4 >> 2] = 0; //@line 2485
 HEAP32[$6 >> 2] = 0; //@line 2486
 HEAP32[$8 >> 2] = 0; //@line 2487
 HEAP32[$10 >> 2] = 0; //@line 2488
 HEAP32[___async_retval >> 2] = 0; //@line 2490
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7640
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 7642
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 7648
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7649
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 7650
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 648; //@line 7653
  sp = STACKTOP; //@line 7654
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7657
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_26($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19606
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19608
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 19609
 __ZN7LoRaMacD2Ev($2); //@line 19610
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 19613
  sp = STACKTOP; //@line 19614
  return;
 }
 ___async_unwind = 0; //@line 19617
 HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 19618
 sp = STACKTOP; //@line 19619
 return;
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9431
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9433
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 9434
 _mbedtls_platform_zeroize($2, 68); //@line 9435
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 564; //@line 9438
  sp = STACKTOP; //@line 9439
  return;
 }
 ___async_unwind = 0; //@line 9442
 HEAP32[$ReallocAsyncCtx2 >> 2] = 564; //@line 9443
 sp = STACKTOP; //@line 9444
 return;
}
function _mbed_vtracef__async_cb_366($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28245
 $1 = HEAP32[175] | 0; //@line 28246
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 28247
 FUNCTION_TABLE_vi[$1 & 1023](11742); //@line 28248
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 129; //@line 28251
  sp = STACKTOP; //@line 28252
  return;
 }
 ___async_unwind = 0; //@line 28255
 HEAP32[$ReallocAsyncCtx3 >> 2] = 129; //@line 28256
 sp = STACKTOP; //@line 28257
 return;
}
function _mbedtls_ccm_free__async_cb_206($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3751
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3753
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 3754
 _mbedtls_platform_zeroize($2, 68); //@line 3755
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 561; //@line 3758
  sp = STACKTOP; //@line 3759
  return;
 }
 ___async_unwind = 0; //@line 3762
 HEAP32[$ReallocAsyncCtx >> 2] = 561; //@line 3763
 sp = STACKTOP; //@line 3764
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 21706
 $indvars$iv = 0; //@line 21707
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 21712
  $indvars$iv = $indvars$iv + 1 | 0; //@line 21713
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 31419
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_152($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 260
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 262
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2020 >> 2] = 1; //@line 268
  return;
 }
 if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0)) {
  return;
 }
 HEAP32[$4 + 2076 >> 2] = 4; //@line 276
 HEAP8[$4 + 2080 >> 0] = 1; //@line 278
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 279
 return;
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4679
 HEAP32[$0 >> 2] = 724; //@line 4680
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4682
 __ZN12LoRaWANStackD2Ev($0 + 4 | 0); //@line 4683
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 152; //@line 4686
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4688
  sp = STACKTOP; //@line 4689
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4692
  __ZdlPv($0); //@line 4693
  return;
 }
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4466
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4468
 $2 = __ZN12LoRaWANStack17drop_channel_listEv($0 + 4 | 0) | 0; //@line 4469
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 143; //@line 4472
  sp = STACKTOP; //@line 4473
  return 0; //@line 4474
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4476
  return $2 | 0; //@line 4477
 }
 return 0; //@line 4479
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3570
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3571
 $3 = _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 3572
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 577; //@line 3575
  sp = STACKTOP; //@line 3576
  return 0; //@line 3577
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3579
  return $3 | 0; //@line 3580
 }
 return 0; //@line 3582
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3478
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3479
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 3480
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 575; //@line 3483
  sp = STACKTOP; //@line 3484
  return 0; //@line 3485
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3487
  return $3 | 0; //@line 3488
 }
 return 0; //@line 3490
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3430
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3431
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 3432
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 573; //@line 3435
  sp = STACKTOP; //@line 3436
  return 0; //@line 3437
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3439
  return $3 | 0; //@line 3440
 }
 return 0; //@line 3442
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 604; //@line 2297
 $2 = $0 + 4 | 0; //@line 2298
 $3 = $0 + 28 | 0; //@line 2299
 $4 = $0; //@line 2300
 dest = $2; //@line 2301
 stop = dest + 68 | 0; //@line 2301
 do {
  HEAP32[dest >> 2] = 0; //@line 2301
  dest = dest + 4 | 0; //@line 2301
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 11, $4) | 0; //@line 2302
 _gpio_init_in($2, $1); //@line 2303
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_244($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 6391
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6393
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 6395
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 6396
 if (!___async) {
  ___async_unwind = 0; //@line 6399
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 75; //@line 6401
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 6403
 sp = STACKTOP; //@line 6404
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_243($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 6372
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6374
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 6376
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 6377
 if (!___async) {
  ___async_unwind = 0; //@line 6380
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 76; //@line 6382
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 6384
 sp = STACKTOP; //@line 6385
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_242($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 6353
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6355
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 6357
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 6358
 if (!___async) {
  ___async_unwind = 0; //@line 6361
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 77; //@line 6363
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 6365
 sp = STACKTOP; //@line 6366
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_241($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 6334
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6336
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 6338
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 6339
 if (!___async) {
  ___async_unwind = 0; //@line 6342
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 78; //@line 6344
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 6346
 sp = STACKTOP; //@line 6347
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_235($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 6124
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6126
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 6128
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 6129
 if (!___async) {
  ___async_unwind = 0; //@line 6132
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 74; //@line 6134
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 6136
 sp = STACKTOP; //@line 6137
 return;
}
function __ZN7LoRaMac24setup_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 2084 | 0; //@line 15157
 HEAP32[$1 >> 2] = 0; //@line 15158
 HEAP32[$1 + 4 >> 2] = 0; //@line 15158
 HEAP32[$1 + 8 >> 2] = 0; //@line 15158
 HEAP32[$1 + 12 >> 2] = 0; //@line 15158
 HEAP32[$1 + 16 >> 2] = 0; //@line 15158
 HEAP32[$0 + 2092 >> 2] = 1; //@line 15160
 HEAP32[$0 + 2088 >> 2] = 1; //@line 15162
 HEAP8[$1 >> 0] = 1; //@line 15163
 __ZN14LoRaMacCommand18add_link_check_reqEv($0 + 476 | 0) | 0; //@line 15165
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_167($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1414
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1416
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 1418
 __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 1419
 if (!___async) {
  ___async_unwind = 0; //@line 1422
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 464; //@line 1424
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 1426
 sp = STACKTOP; //@line 1427
 return;
}
function __ZN16LoRaWANInterface14cancel_sendingEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4643
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4645
 $2 = __ZN12LoRaWANStack12stop_sendingEv($0 + 4 | 0) | 0; //@line 4646
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 150; //@line 4649
  sp = STACKTOP; //@line 4650
  return 0; //@line 4651
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4653
  return $2 | 0; //@line 4654
 }
 return 0; //@line 4656
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 __ZN5Sht31C2E7PinNameS0_(23488, 10, 11); //@line 2983
 __ZN4mbed11InterruptInC2E7PinName(19400, 1337); //@line 2984
 __ZN6events10EventQueueC2EjPh(19472, 1664, 0); //@line 2985
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(19676, 18064); //@line 2986
 dest = 22856; //@line 2987
 stop = dest + 48 | 0; //@line 2987
 do {
  HEAP32[dest >> 2] = 0; //@line 2987
  dest = dest + 4 | 0; //@line 2987
 } while ((dest | 0) < (stop | 0));
 return;
}
function _serial_putc__async_cb_6($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18321
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18323
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 18324
 _fflush($2) | 0; //@line 18325
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 643; //@line 18328
  sp = STACKTOP; //@line 18329
  return;
 }
 ___async_unwind = 0; //@line 18332
 HEAP32[$ReallocAsyncCtx >> 2] = 643; //@line 18333
 sp = STACKTOP; //@line 18334
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_24($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 19581
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19583
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19585
 __ZN12radio_eventsD2Ev($2 + 2384 | 0); //@line 19586
 if (!___async) {
  ___async_unwind = 0; //@line 19589
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 156; //@line 19591
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 19593
 sp = STACKTOP; //@line 19594
 return;
}
function __ZN14LoRaMacCommand18add_link_check_reqEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 2 | 0; //@line 17973
 $6 = HEAP8[$5 >> 0] | 0; //@line 17974
 $7 = $6 & 255; //@line 17975
 if ((128 - (HEAPU8[$0 + 3 >> 0] | 0) | 0) <= ($7 | 0)) {
  $$0 = -1010; //@line 17978
  return $$0 | 0; //@line 17979
 }
 HEAP8[$5 >> 0] = $6 + 1 << 24 >> 24; //@line 17983
 HEAP8[$0 + 4 + $7 >> 0] = 2; //@line 17984
 HEAP8[$0 >> 0] = 1; //@line 17985
 $$0 = 0; //@line 17986
 return $$0 | 0; //@line 17987
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaMacC2Ev($0); //@line 4987
 _memset($0 + 2384 | 0, 0, 518) | 0; //@line 4990
 HEAP8[$0 + 2902 >> 0] = 1; //@line 4991
 HEAP32[$0 + 2904 >> 2] = 0; //@line 4993
 HEAP8[$0 + 2909 >> 0] = 0; //@line 4996
 HEAP8[$0 + 2910 >> 0] = 0; //@line 4998
 HEAP8[$0 + 2911 >> 0] = 1; //@line 5000
 HEAP32[$0 + 3168 >> 2] = 0; //@line 5002
 HEAP8[$0 + 2895 >> 0] = 1; //@line 5004
 HEAP8[$0 + 2900 >> 0] = 1; //@line 5006
 HEAP8[$0 + 2908 >> 0] = 15; //@line 5007
 return;
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4370
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4372
 $2 = __ZN12LoRaWANStack8shutdownEv($0 + 4 | 0) | 0; //@line 4373
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 141; //@line 4376
  sp = STACKTOP; //@line 4377
  return 0; //@line 4378
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4380
  return $2 | 0; //@line 4381
 }
 return 0; //@line 4383
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2713
 HEAP32[$0 >> 2] = 640; //@line 2714
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 2716
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2718
 _ticker_remove_event($2, $0 + 8 | 0); //@line 2719
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 115; //@line 2722
  sp = STACKTOP; //@line 2723
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2726
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27561
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27563
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27564
 __ZN4mbed10TimerEventD2Ev($2); //@line 27565
 if (!___async) {
  ___async_unwind = 0; //@line 27568
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 27570
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 27572
 sp = STACKTOP; //@line 27573
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20893
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20895
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20896
 __ZN4mbed10TimerEventD2Ev($2); //@line 20897
 if (!___async) {
  ___async_unwind = 0; //@line 20900
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 647; //@line 20902
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 20904
 sp = STACKTOP; //@line 20905
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4333
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4335
 $2 = __ZN12LoRaWANStack7connectEv($0 + 4 | 0) | 0; //@line 4336
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 139; //@line 4339
  sp = STACKTOP; //@line 4340
  return 0; //@line 4341
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4343
  return $2 | 0; //@line 4344
 }
 return 0; //@line 4346
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 31412
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1404
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 1406
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1407
 __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0); //@line 1408
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 82; //@line 1411
  sp = STACKTOP; //@line 1412
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1415
  return;
 }
}
function _emscripten_async_resume() {
 ___async = 0; //@line 31124
 ___async_unwind = 1; //@line 31125
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 31131
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 31135
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 31139
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 31141
 }
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_86($0) {
 $0 = $0 | 0;
 var $$013 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$013 = 3; //@line 26065
   break;
  }
 case -1004:
  {
   $$013 = 2; //@line 26069
   break;
  }
 case -1005:
  {
   $$013 = 1; //@line 26073
   break;
  }
 case -1006:
  {
   $$013 = 0; //@line 26077
   break;
  }
 default:
  {
   $$013 = 0; //@line 26081
  }
 }
 HEAP8[___async_retval >> 0] = $$013; //@line 26085
 return;
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 19376; //@line 15833
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 15839
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 15841
 $9 = tempRet0; //@line 15842
 $10 = 19376; //@line 15843
 HEAP32[$10 >> 2] = $8; //@line 15845
 HEAP32[$10 + 4 >> 2] = $9; //@line 15848
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 15849
 return $14 | 0; //@line 15851
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10986
 STACKTOP = STACKTOP + 16 | 0; //@line 10987
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10987
 $vararg_buffer = sp; //@line 10988
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 10992
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 10994
 STACKTOP = sp; //@line 10995
 return $5 | 0; //@line 10995
}
function _mbedtls_platform_zeroize($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5474
 $2 = HEAP32[2549] | 0; //@line 5475
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5476
 FUNCTION_TABLE_iiii[$2 & 31]($0, 0, $1) | 0; //@line 5477
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 601; //@line 5480
  sp = STACKTOP; //@line 5481
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5484
  return;
 }
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1278
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1279
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 1280
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 80; //@line 1283
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1285
  sp = STACKTOP; //@line 1286
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1289
  __ZdlPv($0); //@line 1290
  return;
 }
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2762
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 2767
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2768
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 2769
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 118; //@line 2772
  sp = STACKTOP; //@line 2773
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2776
  return;
 }
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10055
 $6 = ___async_retval; //@line 10057
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 10062
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 10063
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 10065
 HEAP32[$12 + 4 >> 2] = $11; //@line 10068
 $16 = $4; //@line 10069
 HEAP32[$16 >> 2] = 0; //@line 10071
 HEAP32[$16 + 4 >> 2] = 0; //@line 10074
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7423
 $2 = HEAP32[4846] | 0; //@line 7424
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7425
 FUNCTION_TABLE_vii[$2 & 15]($0, $1); //@line 7426
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 641; //@line 7429
  sp = STACKTOP; //@line 7430
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7433
  return;
 }
}
function __ZNK7LoRaPHY25verify_frequency_for_bandEjh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0, $5 = 0;
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 21068
 $5 = $2 & 255; //@line 21069
 if ((HEAP32[$4 + ($5 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
  if ((HEAP32[$4 + ($5 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
   $$0 = 1; //@line 21078
   return $$0 | 0; //@line 21079
  }
 }
 $$0 = 0; //@line 21082
 return $$0 | 0; //@line 21083
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 643
 do {
  if ($0 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 647
   _mbedtls_platform_zeroize($0, 280); //@line 648
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 555; //@line 651
    sp = STACKTOP; //@line 652
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 655
    break;
   }
  }
 } while (0);
 return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 31066
 STACKTOP = STACKTOP + 16 | 0; //@line 31067
 $rem = __stackBase__ | 0; //@line 31068
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 31069
 STACKTOP = __stackBase__; //@line 31070
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 31071
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 30836
 if ((ret | 0) < 8) return ret | 0; //@line 30837
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 30838
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 30839
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 30840
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 30841
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 30842
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $4 = 0, $6 = 0;
 $4 = HEAP8[$0 + 13 >> 0] | 0; //@line 20380
 if (!($4 << 24 >> 24)) {
  $14 = $4 << 24 >> 24 != 0; //@line 20383
  return $14 | 0; //@line 20384
 }
 $6 = $0 + 128 | 0; //@line 20386
 HEAP8[$6 >> 0] = $2 << 1 & 2 | $1 & 1 | HEAP8[$6 >> 0] & -4; //@line 20394
 $14 = $4 << 24 >> 24 != 0; //@line 20395
 return $14 | 0; //@line 20396
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 117
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 121
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP32[$2 + 2028 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 127
  HEAP16[$2 + 2032 >> 1] = $6; //@line 129
  HEAP8[$2 + 2034 >> 0] = 1; //@line 131
  return;
 } else {
  HEAP32[$2 + 2020 >> 2] = 13; //@line 135
  return;
 }
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3505
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3506
 _mbedtls_gcm_free($0); //@line 3507
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 576; //@line 3510
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3512
  sp = STACKTOP; //@line 3513
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3516
  _free($0); //@line 3517
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3457
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3458
 _mbedtls_ccm_free($0); //@line 3459
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 574; //@line 3462
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3464
  sp = STACKTOP; //@line 3465
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3468
  _free($0); //@line 3469
  return;
 }
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3600
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3601
 _mbedtls_aes_free($0); //@line 3602
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 578; //@line 3605
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3607
  sp = STACKTOP; //@line 3608
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3611
  _free($0); //@line 3612
  return;
 }
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 16136
 STACKTOP = STACKTOP + 16 | 0; //@line 16137
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16137
 if (!(_pthread_once(23480, 7) | 0)) {
  $3 = _pthread_getspecific(HEAP32[5871] | 0) | 0; //@line 16143
  STACKTOP = sp; //@line 16144
  return $3 | 0; //@line 16144
 } else {
  _abort_message(17696, sp); //@line 16146
 }
 return 0; //@line 16149
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4661
 HEAP32[$0 >> 2] = 724; //@line 4662
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4664
 __ZN12LoRaWANStackD2Ev($0 + 4 | 0); //@line 4665
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 151; //@line 4668
  sp = STACKTOP; //@line 4669
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4672
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16304
 }
 return;
}
function __ZN7LoRaMac24continue_sending_processEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $7 = 0;
 if ((HEAPU8[$0 + 1699 >> 0] | 0) <= (HEAPU8[$0 + 1698 >> 0] | 0)) {
  $$0 = 1; //@line 14150
  return $$0 | 0; //@line 14151
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 14154
 $7 = $0 + 1768 | 0; //@line 14155
 HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1; //@line 14158
 $$0 = 0; //@line 14159
 return $$0 | 0; //@line 14160
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 15805
 $6 = HEAP32[$5 >> 2] | 0; //@line 15806
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 15807
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 15809
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 15811
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 15814
 return $2 | 0; //@line 15815
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 2786
 HEAP32[$3 >> 2] = 0; //@line 2787
 HEAP32[$3 + 4 >> 2] = 0; //@line 2787
 HEAP32[$3 + 8 >> 2] = 0; //@line 2787
 HEAP32[$3 + 12 >> 2] = 0; //@line 2787
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 2790
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 2793
  return;
 }
}
function __ZL25default_terminate_handlerv__async_cb_258($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8362
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8364
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8366
 HEAP32[$2 >> 2] = 17557; //@line 8367
 HEAP32[$2 + 4 >> 2] = $4; //@line 8369
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 8371
 _abort_message(17421, $2); //@line 8372
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22576
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22578
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22579
 _fputc(10, $2) | 0; //@line 22580
 if (!___async) {
  ___async_unwind = 0; //@line 22583
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 672; //@line 22585
 sp = STACKTOP; //@line 22586
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1766
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1768
 $6 = HEAP8[$2 + 1182 >> 0] | 0; //@line 1770
 HEAP8[$2 + 1183 >> 0] = $6; //@line 1772
 __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $6, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $4); //@line 1777
 HEAP32[$2 + 1780 >> 2] = $4; //@line 1779
 return;
}
function __ZN7LoRaMac13clear_tx_pipeEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29993
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29995
 HEAP8[$2 + 2104 >> 0] = 0; //@line 30000
 _memset($2 + 1185 | 0, 0, 257) | 0; //@line 30002
 _memset($2 + 2115 | 0, 0, 259) | 0; //@line 30003
 _mbed_tracef(16, 12685, 13127, $4); //@line 30004
 HEAP32[___async_retval >> 2] = 0; //@line 30006
 return;
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2808
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2809
 _equeue_cancel($0, $1); //@line 2810
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 119; //@line 2813
  sp = STACKTOP; //@line 2814
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2817
  return;
 }
}
function __ZN7LoRaPHY16set_last_tx_doneEhbj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $5 = 0;
 $5 = HEAP32[$0 + 72 >> 2] | 0; //@line 18920
 $11 = HEAPU8[(HEAP32[$0 + 124 >> 2] | 0) + (($1 & 255) * 12 | 0) + 9 >> 0] | 0; //@line 18926
 HEAP32[$5 + ($11 * 24 | 0) + 8 >> 2] = $3; //@line 18928
 if ($2) {
  return;
 }
 HEAP32[$5 + ($11 * 24 | 0) + 4 >> 2] = $3; //@line 18933
 return;
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 880; //@line 21305
 HEAP32[$0 + 4 >> 2] = 0; //@line 21307
 HEAP32[$0 + 8 >> 2] = $1; //@line 21309
 dest = $0 + 12 | 0; //@line 21311
 stop = dest + 120 | 0; //@line 21311
 do {
  HEAP32[dest >> 2] = 0; //@line 21311
  dest = dest + 4 | 0; //@line 21311
 } while ((dest | 0) < (stop | 0));
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 2915
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 2920
 $$09 = 0; //@line 2921
 $7 = 0; //@line 2921
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 2925
  $$09 = $$09 + 1 << 24 >> 24; //@line 2926
  $7 = $$09 & 255; //@line 2927
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 7446
  return $$0 | 0; //@line 7447
 }
 HEAP32[4846] = $2; //@line 7449
 HEAP32[$0 >> 2] = $1; //@line 7450
 HEAP32[$0 + 4 >> 2] = $1; //@line 7452
 _emscripten_asm_const_iii(10, $3 | 0, $1 | 0) | 0; //@line 7453
 $$0 = 0; //@line 7454
 return $$0 | 0; //@line 7455
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26113
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 26116
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 26121
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26124
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16898
 STACKTOP = STACKTOP + 16 | 0; //@line 16899
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16899
 _free($0); //@line 16901
 if (!(_pthread_setspecific(HEAP32[5871] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 16906
  return;
 } else {
  _abort_message(17795, sp); //@line 16908
 }
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9020
 $6 = ___async_retval; //@line 9022
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 9027
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 9029
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 9031
 HEAP32[$13 + 4 >> 2] = $11; //@line 9034
 HEAP32[$4 >> 2] = 1; //@line 9035
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5685
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 5696
  $$0 = 1; //@line 5697
 } else {
  $$0 = 0; //@line 5699
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 5703
 return;
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 7475
 HEAP32[$0 >> 2] = $1; //@line 7476
 HEAP32[4847] = 1; //@line 7477
 $4 = $0; //@line 7478
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 7483
 $10 = 19392; //@line 7484
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 7486
 HEAP32[$10 + 4 >> 2] = $9; //@line 7489
 return;
}
function _main() {
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7787
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7788
 _puts(14959) | 0; //@line 7789
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 653; //@line 7792
  sp = STACKTOP; //@line 7793
  return 0; //@line 7794
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7796
  return -1;
 }
 return 0; //@line 7799
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16380
 }
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9510
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 2; //@line 9513
  $$0 = 0; //@line 9514
 } else {
  $$0 = $AsyncRetVal; //@line 9516
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 9519
 return;
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3599
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3600
 _puts($0) | 0; //@line 3601
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 124; //@line 3604
  sp = STACKTOP; //@line 3605
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3608
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 3566
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 3570
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 3574
   $$0 = 0; //@line 3575
  } else {
   $$0 = $4; //@line 3577
  }
 } else {
  $$0 = $1; //@line 3580
 }
 return $$0 | 0; //@line 3582
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7743
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7744
 _emscripten_sleep($0 | 0); //@line 7745
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 651; //@line 7748
  sp = STACKTOP; //@line 7749
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7752
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 3529
 STACKTOP = STACKTOP + 16 | 0; //@line 3530
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3530
 $0 = sp; //@line 3531
 _gettimeofday($0 | 0, 0) | 0; //@line 3532
 STACKTOP = sp; //@line 3539
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 3539
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb($0) {
 $0 = $0 | 0;
 var $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26136
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26138
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1168 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26143
 HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 26145
 _mbed_tracef(16, 12685, 12747, $8); //@line 26146
 return;
}
function _mbedtls_cipher_update__async_cb_348($0) {
 $0 = $0 | 0;
 var $$1 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26729
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26732
  $$1 = 0; //@line 26733
 } else {
  $$1 = $AsyncRetVal; //@line 26735
 }
 HEAP32[___async_retval >> 2] = $$1; //@line 26738
 return;
}
function __ZN13LoRaMacCryptoC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, dest = 0, stop = 0;
 $1 = $0 + 32 | 0; //@line 17993
 dest = $0; //@line 17994
 stop = dest + 64 | 0; //@line 17994
 do {
  HEAP32[dest >> 2] = 0; //@line 17994
  dest = dest + 4 | 0; //@line 17994
 } while ((dest | 0) < (stop | 0));
 HEAP8[$0 >> 0] = 73; //@line 17995
 HEAP8[$1 >> 0] = 1; //@line 17996
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 16883
 STACKTOP = STACKTOP + 16 | 0; //@line 16884
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16884
 if (!(_pthread_key_create(23484, 681) | 0)) {
  STACKTOP = sp; //@line 16889
  return;
 } else {
  _abort_message(17745, sp); //@line 16891
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 16444
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 16448
  }
 }
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10344
 } else {
  if ($1 << 24 >> 24 == -1) {
   $$0 = -1003; //@line 10348
  } else {
   HEAP8[$0 + 2902 >> 0] = $1; //@line 10351
   $$0 = 0; //@line 10352
  }
 }
 return $$0 | 0; //@line 10355
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 31100
 HEAP32[new_frame + 4 >> 2] = sp; //@line 31102
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 31104
 ___async_cur_frame = new_frame; //@line 31105
 return ___async_cur_frame + 8 | 0; //@line 31106
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 16527
 $3 = HEAPU8[$1 >> 0] | 0; //@line 16529
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 16534
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 16535
 HEAP8[$1 >> 0] = $3 + $8; //@line 16538
 return;
}
function b405(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 337
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10328
  return $$0 | 0; //@line 10329
 }
 $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) | 0; //@line 10332
 return $$0 | 0; //@line 10333
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 21048
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 21053
  return $$0 | 0; //@line 21054
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 21058
 return $$0 | 0; //@line 21059
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7409
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7415
 _emscripten_asm_const_iiiiii(9, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 7416
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10382
  return $$0 | 0; //@line 10383
 }
 __ZN7LoRaMac24enable_adaptive_datarateEb($0, $1); //@line 10385
 $$0 = 0; //@line 10386
 return $$0 | 0; //@line 10387
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7916
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7916
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7916
 return;
}
function b403(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 334
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 31089
  return low << bits; //@line 31090
 }
 tempRet0 = low << bits - 32; //@line 31092
 return 0; //@line 31093
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 2804
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 2808
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 2811
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_261($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8644
 HEAP32[$2 + 2092 >> 2] = 0; //@line 8648
 HEAP8[$2 + 2376 >> 0] = 1; //@line 8650
 HEAP32[$2 + 1760 >> 2] = 0; //@line 8652
 HEAP8[$2 + 1184 >> 0] = 0; //@line 8654
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 31078
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 31079
 }
 tempRet0 = 0; //@line 31081
 return high >>> bits - 32 | 0; //@line 31082
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 1648
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 1648
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 1648
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 9386
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9386
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9386
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6437
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6437
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6437
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 15844
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15844
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 15844
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10366
  return $$0 | 0; //@line 10367
 }
 $$0 = __ZN7LoRaMac21set_channel_data_rateEh($0, $1) | 0; //@line 10370
 return $$0 | 0; //@line 10371
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_166($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1369
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 1371
 HEAP32[$4 + 2496 >> 2] = $6 ? 5 : 2; //@line 1374
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_391($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30132
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 30134
 HEAP32[$4 + 2496 >> 2] = $6 ? 5 : 2; //@line 30137
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_395($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30324
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30326
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; //@line 30329
 HEAP32[$6 + 2496 >> 2] = 2; //@line 30331
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_343($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26457
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26459
 HEAP32[$6 + 16 >> 2] = 0; //@line 26461
 return;
}
function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0; //@line 31356
}
function _fflush__async_cb_179($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2180
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 2182
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 2185
 return;
}
function __ZN12LoRaWANStack20process_transmissionEv__async_cb_186($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2598
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 2600
 HEAP32[$4 >> 2] = $6 ? 5 : 2; //@line 2602
 return;
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 2120
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 2122
 }
 return 0; //@line 2124
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_120($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 28170
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 28171
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 28174
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29185
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 29187
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29189
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 95
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 97
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 98
 HEAP8[$0 + 688 >> 0] = 0; //@line 100
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 30263
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 30266
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 30269
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7391
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7397
 _emscripten_asm_const_iiii(8, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 7398
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 28121
 } else {
  $$0 = -1; //@line 28123
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 28126
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 31349
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK16channel_params_t($0 + 752 | 0, $1, __ZN7LoRaPHY16get_phy_channelsEv($0 + 4 | 0) | 0) | 0; //@line 16011
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 11693
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 11699
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 11703
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_7($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18373
 HEAP8[$2 + 688 >> 0] = 2; //@line 18375
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 18376
 return;
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2784
 stop = dest + 68 | 0; //@line 2784
 do {
  HEAP32[dest >> 2] = 0; //@line 2784
  dest = dest + 4 | 0; //@line 2784
 } while ((dest | 0) < (stop | 0));
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 31405
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 31112
 stackRestore(___async_cur_frame | 0); //@line 31113
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 31114
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2595
 stop = dest + 68 | 0; //@line 2595
 do {
  HEAP32[dest >> 2] = 0; //@line 2595
  dest = dest + 4 | 0; //@line 2595
 } while ((dest | 0) < (stop | 0));
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20279
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 20280
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 20282
 return;
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 21916
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 21917
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 21924
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 364
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 365
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 367
 return;
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14804
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14804
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14806
 return $1 | 0; //@line 14807
}
function __ZN7LoRaMac16reset_ongoing_txEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 2104 >> 0] = 0; //@line 14562
 _memset($0 + 2115 | 0, 0, 257) | 0; //@line 14564
 if (!$1) {
  return;
 }
 HEAP16[$0 + 2372 >> 1] = 0; //@line 14569
 return;
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 11152
  $$0 = -1; //@line 11153
 } else {
  $$0 = $0; //@line 11155
 }
 return $$0 | 0; //@line 11157
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7375
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7381
 _emscripten_asm_const_iii(7, $0 | 0, $1 | 0) | 0; //@line 7382
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7360
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7366
 _emscripten_asm_const_iii(6, $0 | 0, $1 | 0) | 0; //@line 7367
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 3588
 HEAP8[$0 + 76 >> 0] = 1; //@line 3590
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 3592
 _pthread_mutex_unlock($0 | 0) | 0; //@line 3593
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 30829
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 30830
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 30831
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 31342
}
function __ZN4mbed6Ticker5setupEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = ___udivdi3($1 | 0, $2 | 0, 1e3, 0) | 0; //@line 7712
 _emscripten_asm_const_iii(13, $0 + 40 | 0, $4 | 0) | 0; //@line 7714
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 84
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 86
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 87
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26756
 HEAP8[$2 + 689 >> 0] = 0; //@line 26758
 HEAP8[$2 + 688 >> 0] = 0; //@line 26760
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30076
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 30077
 HEAP32[___async_retval >> 2] = $4; //@line 30079
 return;
}
function _aes_crypt_ctr_wrap($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return _mbedtls_aes_crypt_ctr($0, $1, $2, $3, $4, $5, $6) | 0; //@line 3554
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_42($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 20780
 HEAP8[___async_retval >> 0] = 1; //@line 20783
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1297
 ___cxa_begin_catch($0 | 0) | 0; //@line 1298
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1299
 __ZSt9terminatev(); //@line 1300
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 31398
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 3587
 if (!$0) {
  $$0 = 0; //@line 3590
 } else {
  _mbedtls_aes_init($0); //@line 3592
  $$0 = $0; //@line 3593
 }
 return $$0 | 0; //@line 3595
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 1860
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_363($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27666
 HEAP8[$2 >> 0] = (HEAP8[$2 >> 0] | 0) + 1 << 24 >> 24; //@line 27669
 return;
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {
   _sleep_manager_unlock_deep_sleep_internal(); //@line 2604
  }
 }
 HEAP32[$0 >> 2] = 0; //@line 2607
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 31335
}
function __ZN16LoRaWANInterface15get_tx_metadataER19lorawan_tx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack19acquire_tx_metadataER19lorawan_tx_metadata($0 + 4 | 0, $1) | 0; //@line 4620
}
function __ZN16LoRaWANInterface15get_rx_metadataER19lorawan_rx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack19acquire_rx_metadataER19lorawan_rx_metadata($0 + 4 | 0, $1) | 0; //@line 4629
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 3541
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 4461
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 30821
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 30823
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_282($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9571
 return;
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 31391
}
function b53(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(0); //@line 31561
 return 0; //@line 31561
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 21898
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 11838
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 11843
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_31($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 20019
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 13864
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 13867
 }
 return $$0 | 0; //@line 13869
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 21328
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_82($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 25699
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_299($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 22343
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 354
 return;
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 25951
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 31328
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0 + 4 | 0, $1) | 0; //@line 4433
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 11333
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 11337
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 31058
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27608
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 19636
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_387($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 29745
 return;
}
function __ZN16LoRaWANInterface20get_backoff_metadataERi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack24acquire_backoff_metadataERi($0 + 4 | 0, $1) | 0; //@line 4638
}
function b51(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 31558
 return 0; //@line 31558
}
function b50(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 31555
 return 0; //@line 31555
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 689 >> 0] = 1; //@line 697
 HEAP8[$0 + 776 >> 0] = $1 & 1; //@line 699
 return;
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17834
 return;
}
function __ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2086
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 31119
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 31120
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_381($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 29221
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_147($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 30343
 return;
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 357
}
function __ZN7LoRaMac24continue_joining_processEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = (HEAP32[___async_retval >> 2] | 0) == 0 & 1; //@line 20269
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27592
 return;
}
function __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 4 | 0, $1); //@line 16044
 return;
}
function __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 401
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 31384
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1130
 return;
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP8[$0 + 689 >> 0] = $1; //@line 687
 return;
}
function __ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28426
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2289
 return;
}
function __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1239
 return;
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(14, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 7762
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_174($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 1758
 return;
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh($0 + 4 | 0, $1) | 0; //@line 4408
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 21883
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_21($0) {
 $0 = $0 | 0;
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv(HEAP32[$0 + 4 >> 2] | 0); //@line 19288
 return;
}
function __ZN16LoRaWANInterface19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30250
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 11829
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 11831
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb($0 + 4 | 0, 0) | 0; //@line 4424
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16983
 __ZdlPv($0); //@line 16984
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 3529
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb($0 + 4 | 0, 1) | 0; //@line 4416
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16666
 __ZdlPv($0); //@line 16667
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 19376; //@line 15822
 HEAP32[$2 >> 2] = $0 + -1; //@line 15824
 HEAP32[$2 + 4 >> 2] = 0; //@line 15827
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_255($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 8046
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 3495
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 3498
 }
 return $0 | 0; //@line 3500
}
function __ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 1042
 return;
}
function b48(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 31552
 return 0; //@line 31552
}
function b47(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 31549
 return 0; //@line 31549
}
function b46(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 31546
 return 0; //@line 31546
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 3447
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 3450
 }
 return $0 | 0; //@line 3452
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb_36($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20398
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb_35($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20384
 return;
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 338
 return;
}
function __ZN16LoRaWANInterface7receiveEhPhti__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 30045
 return;
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 __ZN12LoRaWANStack25remove_link_check_requestEv($0 + 4 | 0); //@line 4398
 return;
}
function __ZN16LoRaWANInterface14remove_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28615
 return;
}
function __ZN16LoRaWANInterface14cancel_sendingEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19007
 return;
}
function __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 2964
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_219($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5242
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_301($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 2; //@line 22423
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16194
 __ZdlPv($0); //@line 16195
 return;
}
function __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 109
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 30350
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2096
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26309
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 13349
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 27748
 return;
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30066
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 2279
 return;
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack22set_link_check_requestEv($0 + 4 | 0) | 0; //@line 4391
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_56($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 2911 >> 0] = 1; //@line 23399
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0; //@line 31321
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27555
 return;
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 16065
 return;
}
function __ZN16LoRaWANInterface10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2612
 return;
}
function b401(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 331
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 20927
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 16391
}
function __ZN12LoRaWANStack7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 30092
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2404
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 120 | 0 : $0 + 116 | 0) >> 2] | 0; //@line 21935
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_102($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 2084 >> 0] = 1; //@line 27323
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2723] | 0; //@line 16973
 HEAP32[2723] = $0 + 0; //@line 16975
 return $0 | 0; //@line 16977
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 20791
 return;
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(11, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 7465
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb($0) {
 $0 = $0 | 0;
 _mbed_tracef(16, 12685, 13047, HEAP32[$0 + 4 >> 2] | 0); //@line 18522
 return;
}
function _mbedtls_cipher_update__async_cb_349($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26748
 return;
}
function _mbedtls_cipher_setkey__async_cb_342($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26399
 return;
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 347
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 15](a1 | 0, a2 | 0); //@line 31377
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_2($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 18017
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 3563
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_165($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 1325
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_203($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 3635
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 22205
 return;
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26579
 return;
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26389
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac4joinEb__async_cb_190($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2783
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b44(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 31543
 return 0; //@line 31543
}
function b43(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 31540
 return 0; //@line 31540
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 1060
 return;
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29471
 return;
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27078
 return;
}
function _aes_setkey_dec_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20308
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_75($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 1; //@line 25228
 return;
}
function __ZN7LoRaMac24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 1936 >> 0] = $1 & 1; //@line 14579
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26455
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2821
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_400($0) {
 $0 = $0 | 0;
 __ZN12LoRaPHYEU868D2Ev((HEAP32[$0 + 4 >> 2] | 0) + 4 | 0); //@line 30782
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 31146
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 21336
 return;
}
function _memset__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 return _memset(p0 | 0, p1 | 0, p2 | 0) | 0; //@line 31498
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_52($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b399(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 328
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_aes_setkey_dec__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 5764
 return;
}
function __ZN7LoRaMac16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0; //@line 11307
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 21960
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 13812
}
function _fflush__async_cb_180($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2195
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 692 >> 2] = $1; //@line 645
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26473
 return;
}
function __ZN7LoRaMac14set_tx_ongoingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 2104 >> 0] = $1 & 1; //@line 14624
 return;
}
function __ZN6events10EventQueue9time_leftEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _equeue_timeleft($0, $1) | 0; //@line 2827
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _putc__async_cb_34($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20292
 return;
}
function _fputc__async_cb_153($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 377
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 16562
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 880; //@line 18769
 HEAP32[$0 + 4 >> 2] = 0; //@line 18771
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 31314
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 18068
 return;
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 16579
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function b41(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 31537
 return 0; //@line 31537
}
function b40(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 31534
 return 0; //@line 31534
}
function b39(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 31531
 return 0; //@line 31531
}
function b38(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 31528
 return 0; //@line 31528
}
function b37(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 31525
 return 0; //@line 31525
}
function b36(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 31522
 return 0; //@line 31522
}
function b35(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 31519
 return 0; //@line 31519
}
function b34(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 31516
 return 0; //@line 31516
}
function b33(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 31513
 return 0; //@line 31513
}
function b32(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 31510
 return 0; //@line 31510
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 31507
 return 0; //@line 31507
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 31504
 return 0; //@line 31504
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 31501
 return 0; //@line 31501
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 22024
}
function __ZN7LoRaMac11schedule_txEv__async_cb_76($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 25327
 return;
}
function __ZN12LoRaWANStack25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2909 >> 0] = 0; //@line 10783
 return;
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 31495
 return 0; //@line 31495
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 16547
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 16553
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(17848, HEAP32[$0 + 4 >> 2] | 0); //@line 26094
}
function __ZN4mbed11InterruptInD0Ev__async_cb_3($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 18059
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 20829
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 25311
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(12, $0 + 40 | 0) | 0; //@line 7722
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_284($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 20317
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 31370
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 21906
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_108($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 27582
 return;
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 4871
 return;
}
function __ZN7LoRaMac26get_backoff_timer_event_idEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 1812 >> 2] | 0; //@line 14493
}
function __ZN7LoRaMac25post_process_mlme_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2084 >> 0] = 0; //@line 11235
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 16569
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 16418
 return;
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 180
 __ZdlPv($0); //@line 181
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb_45($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 20914
 return;
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 16520
 return;
}
function b397(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 325
}
function b396(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 322
}
function b395(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 319
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 16427
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 3515
 return;
}
function __ZN7LoRaMac21post_process_mlme_indEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2080 >> 0] = 0; //@line 11299
 return;
}
function __ZN7LoRaMac21post_process_mcps_indEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2012 >> 0] = 0; //@line 11291
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_351($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 3524
 return;
}
function __ZN7LoRaMac10tx_ongoingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 2104 >> 0] | 0) != 0 | 0; //@line 14615
}
function __ZN7LoRaMac10nwk_joinedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 2376 >> 0] | 0) != 0 | 0; //@line 12870
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_161($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 977
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_290($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_289($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK7LoRaMac16get_device_classEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 2380 >> 2] | 0; //@line 14319
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_231($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 21943
}
function __ZN7LoRaMac16get_current_slotEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 1168 >> 2] | 0; //@line 11315
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 677
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 124 >> 2] | 0; //@line 21951
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 16434
}
function b26(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(31); //@line 31492
 return 0; //@line 31492
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(30); //@line 31489
 return 0; //@line 31489
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(29); //@line 31486
 return 0; //@line 31486
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(28); //@line 31483
 return 0; //@line 31483
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(27); //@line 31480
 return 0; //@line 31480
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(26); //@line 31477
 return 0; //@line 31477
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(25); //@line 31474
 return 0; //@line 31474
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(24); //@line 31471
 return 0; //@line 31471
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(23); //@line 31468
 return 0; //@line 31468
}
function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(22); //@line 31465
 return 0; //@line 31465
}
function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(21); //@line 31462
 return 0; //@line 31462
}
function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(20); //@line 31459
 return 0; //@line 31459
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(19); //@line 31456
 return 0; //@line 31456
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(18); //@line 31453
 return 0; //@line 31453
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 30340
 return;
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 27707
 return;
}
function _aes_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 20326
 return;
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 15057
}
function b12(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 31450
 return 0; //@line 31450
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 3559
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 3546
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_163($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 276) | 0; //@line 16410
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 31307
}
function __ZNK7LoRaMac21get_mlme_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 2084 | 0; //@line 11221
}
function __ZNK7LoRaMac21get_mcps_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 2052 | 0; //@line 11207
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 3552
 return;
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 2394
 return;
}
function __ZNK7LoRaMac19get_mlme_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 2076 | 0; //@line 11228
}
function __ZNK7LoRaMac19get_mcps_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 2012 | 0; //@line 11214
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 16051
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_365($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_356($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_336($0) {
 $0 = $0 | 0;
 return;
}
function b393(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 316
}
function b392(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 313
}
function b391(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 310
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 2802
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 324
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_307($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_345($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb_288($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_392($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_353($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 4529
 return;
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 637
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_341($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_143($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_141($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_359($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 173
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_302($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_316($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_315($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_314($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_311($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_119($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_118($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_117($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7](); //@line 31363
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_184($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_156($0) {
 $0 = $0 | 0;
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 11210
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 31447
 return 0; //@line 31447
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_8($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 31444
 return 0; //@line 31444
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 31441
 return 0; //@line 31441
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 31438
 return 0; //@line 31438
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(11); //@line 31435
 return 0; //@line 31435
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_214($0) {
 $0 = $0 | 0;
 return;
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 31432
 return 0; //@line 31432
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_145($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_194($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_319($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(23468); //@line 11848
 return 23476; //@line 11849
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_189($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_18($0) {
 $0 = $0 | 0;
 return;
}
function b389(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(15); //@line 307
}
function b388(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(14); //@line 304
}
function b387(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(13); //@line 301
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 18778
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 2734
}
function b386(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 298
}
function _abort_message__async_cb_53($0) {
 $0 = $0 | 0;
 _abort(); //@line 22593
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_159($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 31567
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_90($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_239($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb_9($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 14978
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 14984
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_platform_zeroize__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb_107($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_67($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_25($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 31273
}
function _mbedtls_cipher_free__async_cb_280($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_225($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_224($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_221($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_220($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 16020
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb_78($0) {
 $0 = $0 | 0;
 return;
}
function b3() {
 nullFunc_i(7); //@line 31429
 return 0; //@line 31429
}
function b2() {
 nullFunc_i(6); //@line 31426
 return 0; //@line 31426
}
function b1() {
 nullFunc_i(0); //@line 31423
 return 0; //@line 31423
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 31269
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(23468); //@line 11854
 return;
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function b285(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 32254
}
function b284(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 32251
}
function b283(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 32248
}
function b282(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 32245
}
function b281(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 32242
}
function b280(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 32239
}
function b279(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 32236
}
function b278(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 32233
}
function b277(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 32230
}
function b276(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 32227
}
function b275(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 32224
}
function b274(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 32221
}
function b273(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 32218
}
function b272(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 32215
}
function b271(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 32212
}
function b270(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 32209
}
function b269(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 32206
}
function b268(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 32203
}
function b267(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 32200
}
function b266(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 32197
}
function b265(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 32194
}
function b264(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 32191
}
function b263(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 32188
}
function b262(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 32185
}
function b261(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 32182
}
function b260(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 32179
}
function b259(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 32176
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 32173
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 32170
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 32167
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 32164
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 32161
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 32158
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 32155
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 32152
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 32149
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 32146
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 32143
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 32140
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 32137
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 32134
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 32131
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 32128
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 32125
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 32122
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 32119
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 32116
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 32113
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 32110
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 32107
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 32104
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 32101
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 32098
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 32095
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 32092
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 32089
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 32086
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 32083
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 32080
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 32077
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 32074
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 32071
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 32068
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 32065
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 32062
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 32059
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 32056
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 32053
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 32050
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 32047
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 32044
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 32041
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 32038
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 32035
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 32032
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 32029
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 32026
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 32023
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 32020
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 32017
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 32014
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 32011
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 32008
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 32005
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 32002
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 31999
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 31996
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 31993
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 31990
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 31987
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 31984
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 31981
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 31978
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 31975
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 31972
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 31969
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 31966
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 31963
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 31960
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 31957
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 31954
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 31951
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 31948
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 31945
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 31942
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 31939
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(818); //@line 31936
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(817); //@line 31933
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(816); //@line 31930
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(815); //@line 31927
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(814); //@line 31924
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(813); //@line 31921
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(812); //@line 31918
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(811); //@line 31915
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(810); //@line 31912
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(809); //@line 31909
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(808); //@line 31906
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(807); //@line 31903
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(806); //@line 31900
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(805); //@line 31897
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(804); //@line 31894
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(803); //@line 31891
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(802); //@line 31888
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(801); //@line 31885
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(800); //@line 31882
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(799); //@line 31879
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(798); //@line 31876
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(797); //@line 31873
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(796); //@line 31870
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(795); //@line 31867
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(794); //@line 31864
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(793); //@line 31861
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(792); //@line 31858
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(791); //@line 31855
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(790); //@line 31852
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(789); //@line 31849
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(788); //@line 31846
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(787); //@line 31843
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(786); //@line 31840
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(785); //@line 31837
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(784); //@line 31834
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(783); //@line 31831
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(782); //@line 31828
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(781); //@line 31825
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(780); //@line 31822
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(779); //@line 31819
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(778); //@line 31816
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(777); //@line 31813
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(776); //@line 31810
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(775); //@line 31807
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(774); //@line 31804
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(773); //@line 31801
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(772); //@line 31798
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(771); //@line 31795
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(770); //@line 31792
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(769); //@line 31789
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(768); //@line 31786
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(767); //@line 31783
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(766); //@line 31780
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(765); //@line 31777
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(764); //@line 31774
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(763); //@line 31771
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(762); //@line 31768
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(761); //@line 31765
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(760); //@line 31762
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(759); //@line 31759
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(758); //@line 31756
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(757); //@line 31753
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(756); //@line 31750
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(755); //@line 31747
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(754); //@line 31744
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(753); //@line 31741
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(752); //@line 31738
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(751); //@line 31735
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(750); //@line 31732
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(749); //@line 31729
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(748); //@line 31726
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(747); //@line 31723
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(746); //@line 31720
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(745); //@line 31717
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(744); //@line 31714
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(743); //@line 31711
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(742); //@line 31708
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(741); //@line 31705
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(740); //@line 31702
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(739); //@line 31699
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(738); //@line 31696
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(737); //@line 31693
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(736); //@line 31690
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(735); //@line 31687
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(734); //@line 31684
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(733); //@line 31681
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(732); //@line 31678
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(731); //@line 31675
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(730); //@line 31672
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(729); //@line 31669
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(728); //@line 31666
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(727); //@line 31663
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(726); //@line 31660
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(725); //@line 31657
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(724); //@line 31654
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(723); //@line 31651
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(722); //@line 31648
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(721); //@line 31645
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(720); //@line 31642
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(719); //@line 31639
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(718); //@line 31636
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(717); //@line 31633
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(716); //@line 31630
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(715); //@line 31627
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(714); //@line 31624
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(713); //@line 31621
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(712); //@line 31618
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(711); //@line 31615
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(710); //@line 31612
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(709); //@line 31609
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(708); //@line 31606
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(707); //@line 31603
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(706); //@line 31600
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(705); //@line 31597
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(704); //@line 31594
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(703); //@line 31591
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(702); //@line 31588
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(701); //@line 31585
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(700); //@line 31582
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(699); //@line 31579
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(698); //@line 31576
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(697); //@line 31573
}
function b384(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 295
}
function b383(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 292
}
function b382(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 289
}
function b381(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 286
}
function b380(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 283
}
function b379(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 280
}
function b378(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 277
}
function b377(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 274
}
function b376(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 271
}
function b375(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 268
}
function b374(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 265
}
function b373(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 262
}
function b372(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 259
}
function b371(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 256
}
function b370(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 253
}
function b369(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 250
}
function b368(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 247
}
function b367(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 244
}
function b366(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 241
}
function b365(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 238
}
function b364(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 235
}
function b363(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 232
}
function b362(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 229
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_aes_free__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 11168
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 11485
}
function b361(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 226
}
function b360(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 223
}
function b359(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 220
}
function b358(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 217
}
function b357(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 214
}
function b356(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 211
}
function b355(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 208
}
function b354(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 205
}
function b353(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 202
}
function b352(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 199
}
function b351(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 196
}
function b350(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 193
}
function b349(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 190
}
function b348(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 187
}
function b347(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 184
}
function b346(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 181
}
function b345(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 178
}
function b344(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 175
}
function b343(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 172
}
function b342(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 169
}
function b341(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 166
}
function b340(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 163
}
function b339(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 160
}
function b338(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 157
}
function b337(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 154
}
function b336(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 151
}
function b335(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 148
}
function b334(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 145
}
function b333(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 142
}
function b332(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 139
}
function b331(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 136
}
function b330(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 133
}
function b329(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 130
}
function b328(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 127
}
function b327(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 124
}
function b326(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 121
}
function b325(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 118
}
function b324(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 115
}
function b323(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 112
}
function b322(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 109
}
function b321(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 106
}
function b320(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 103
}
function b319(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 100
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 31570
}
function b318(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 97
}
function b317(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 94
}
function b316(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 91
}
function b315(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 88
}
function b314(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 85
}
function b313(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 82
}
function b312(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 79
}
function b311(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 76
}
function b310(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 73
}
function b309(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 70
}
function b308(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 67
}
function b307(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 64
}
function b306(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 61
}
function b305(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 58
}
function b304(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 55
}
function b303(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 52
}
function b302(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 49
}
function b301(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 46
}
function b300(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 43
}
function b299(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 40
}
function b298(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 37
}
function b297(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 34
}
function b296(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 31
}
function b295(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 28
}
function b294(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 25
}
function b293(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 22
}
function b292(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 19
}
function b291(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 16
}
function b290(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 13
}
function b289(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 10
}
function _initialize__async_cb_210($0) {
 $0 = $0 | 0;
 return;
}
function b288(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 7
}
function b287(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 4
}
function b286(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 1
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function _us_ticker_get_info() {
 return 10256; //@line 7738
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10200; //@line 6901
}
function ___errno_location() {
 return 23464; //@line 11162
}
function __ZSt9terminatev__async_cb_101($0) {
 $0 = $0 | 0;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10524; //@line 11215
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 7529
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function _us_ticker_fire_interrupt() {
 return;
}
function b55() {
 nullFunc_v(0); //@line 31564
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,__ZN16LoRaWANInterface14cancel_sendingEv,___stdio_close,b6,b7,b8,b9,b10];
var FUNCTION_TABLE_iii = [b12,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN16LoRaWANInterface16set_device_classE14device_class_t,__ZN16LoRaWANInterface15get_tx_metadataER19lorawan_tx_metadata,__ZN16LoRaWANInterface15get_rx_metadataER19lorawan_rx_metadata,__ZN16LoRaWANInterface20get_backoff_metadataERi,__ZN7LoRaPHY9rx_configEP18rx_config_params_t,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23
,b24,b25,b26];
var FUNCTION_TABLE_iiii = [b28,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t,__ZN7LoRaPHY25accept_tx_param_setup_reqEhh,__ZN7LoRaPHY18dl_channel_requestEhj,__ZN7LoRaPHY11add_channelEPK16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,__ZNK7LoRaPHY25verify_frequency_for_bandEjh,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,_memset__wrapper,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38
,b39,b40,b41];
var FUNCTION_TABLE_iiiii = [b43,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b44];
var FUNCTION_TABLE_iiiiii = [b46,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN16LoRaWANInterface7receiveEPhtRhRi,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b47,b48];
var FUNCTION_TABLE_iiiiiii = [b50,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b51];
var FUNCTION_TABLE_iiiiiiii = [b53,_aes_crypt_ctr_wrap];
var FUNCTION_TABLE_v = [b55,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_vi = [b57,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,_mbed_trace_default_print,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv,__ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN7LoRaPHYD2Ev
,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_17,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_18,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_19,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_20,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_21,__ZN16SX1276_LoRaRadio6randomEv__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_125
,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_121,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_122,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_124,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_123,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_120,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_7,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_238,__ZN16SX1276_LoRaRadioD2Ev__async_cb_232,__ZN16SX1276_LoRaRadioD2Ev__async_cb_237,__ZN16SX1276_LoRaRadioD2Ev__async_cb_233,__ZN16SX1276_LoRaRadioD2Ev__async_cb_236,__ZN16SX1276_LoRaRadioD2Ev__async_cb_234,__ZN16SX1276_LoRaRadioD2Ev__async_cb_235,__ZN16SX1276_LoRaRadioD2Ev__async_cb_244,__ZN16SX1276_LoRaRadioD2Ev__async_cb_243,__ZN16SX1276_LoRaRadioD2Ev__async_cb_242,__ZN16SX1276_LoRaRadioD2Ev__async_cb_241,__ZN16SX1276_LoRaRadioD2Ev__async_cb_240,__ZN16SX1276_LoRaRadioD2Ev__async_cb_239,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_357,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_358,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_359,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb,__ZN16SX1276_LoRaRadio11tx_done_irqEv
,__ZN16SX1276_LoRaRadio8transmitEj__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_317,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_318,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_319,__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_16,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_15,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_14,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_9,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_3,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_163,__ZN4mbed7TimeoutD2Ev__async_cb,__ZN4mbed7TimeoutD2Ev__async_cb_107,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_108,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed7Timeout7handlerEv__async_cb_91,__ZN4mbed7Timeout7handlerEv__async_cb_89,__ZN4mbed7Timeout7handlerEv__async_cb_90,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed10TimerEventC2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj__async_cb
,__ZN6events10EventQueue6cancelEi__async_cb,_equeue_alloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_equeue_cancel__async_cb,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_376,_mbed_vtracef__async_cb_366,_mbed_vtracef__async_cb_367,_mbed_vtracef__async_cb_368,_mbed_vtracef__async_cb_375,_mbed_vtracef__async_cb_369,_mbed_vtracef__async_cb_374,_mbed_vtracef__async_cb_370,_mbed_vtracef__async_cb_371,_mbed_vtracef__async_cb_372,_mbed_vtracef__async_cb_373,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb,__ZN16LoRaWANInterface10disconnectEv__async_cb,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb,__ZN16LoRaWANInterface19remove_channel_planEv__async_cb,__ZN16LoRaWANInterface14remove_channelEh__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterface7receiveEhPhti__async_cb,__ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb
,__ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb,__ZN16LoRaWANInterface14cancel_sendingEv__async_cb,__ZN16LoRaWANInterfaceD2Ev__async_cb,__ZN16LoRaWANInterfaceD0Ev__async_cb,__ZN12LoRaWANStackD2Ev__async_cb,__ZN12LoRaWANStackD2Ev__async_cb_23,__ZN12LoRaWANStackD2Ev__async_cb_24,__ZN12LoRaWANStackD2Ev__async_cb_26,__ZN12LoRaWANStackD2Ev__async_cb_25,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_62,__ZN12radio_eventsD2Ev__async_cb_63,__ZN12radio_eventsD2Ev__async_cb_64,__ZN12radio_eventsD2Ev__async_cb_65,__ZN12radio_eventsD2Ev__async_cb_66,__ZN12radio_eventsD2Ev__async_cb_67,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN12LoRaWANStack20tx_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_320,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_321,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_322,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_323,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_324,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_325,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_326,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_327,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_328
,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_329,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_330,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_331,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_332,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_333,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_334,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_335,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_336,__ZN12LoRaWANStack20process_transmissionEv,__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_302,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_352,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_353,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_344,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_345,__ZN12LoRaWANStack28process_transmission_timeoutEv,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_365,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_355,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_356,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_392,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_391,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_378,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_383
,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_379,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_382,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_380,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_381,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_182,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb,__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_299,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_298,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_300,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_297,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_301,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_288,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_287,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_116,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_109,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_119,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_110,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_115,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_111,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_118,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_112,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_114,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_113
,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_117,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_140,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_133,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_143,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_134,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_139,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_135,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_142,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_136,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_138,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_137,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_141,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_79,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_84,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_80,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_83,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_81,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_82,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_160,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb,__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_166,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_149,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv
,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_148,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_147,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_10,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_57,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_61,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_60,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_59,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_58,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_56,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_28,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_33,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_29,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_32,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_30,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_31,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_354,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_312,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_308,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_316
,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_311,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_309,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_313,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_310,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_315,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_314,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_340,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_339,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_341,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_384,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_389,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_385,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_388,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_386,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_387,__ZN12LoRaWANStack23process_connected_stateEv__async_cb,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_394,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_393,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_395,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_377,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb,__ZN12LoRaWANStack20process_transmissionEv__async_cb,__ZN12LoRaWANStack20process_transmissionEv__async_cb_186,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb
,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_290,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_289,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_229,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_228,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_230,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_227,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_231,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_249,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_250,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_251,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_252,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_253,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_254,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_256,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_255,__ZN12LoRaWANStack7connectEv__async_cb,__ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb,__ZN12LoRaWANStack16remove_a_channelEh__async_cb,__ZN12LoRaWANStack17drop_channel_listEv__async_cb,__ZN12LoRaWANStack12stop_sendingEv__async_cb,__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_4,__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb,__ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv,__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb_43
,__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb,__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv__async_cb,__ZN7LoRaMacD2Ev__async_cb,__ZN7LoRaMacD2Ev__async_cb_396,__ZN7LoRaMacD2Ev__async_cb_397,__ZN7LoRaMacD2Ev__async_cb_398,__ZN7LoRaMacD2Ev__async_cb_399,__ZN7LoRaMacD2Ev__async_cb_400,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_260,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_262,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_259,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_261,__ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_150,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_152,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_151,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_154,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_157,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_155,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_156,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_162,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_161,__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_177,__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_178,__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_176,__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_175
,__ZN7LoRaMac16on_radio_tx_doneEj__async_cb,__ZN7LoRaMac15open_rx2_windowEv__async_cb_88,__ZN7LoRaMac15open_rx2_windowEv__async_cb_87,__ZN7LoRaMac15open_rx2_windowEv__async_cb,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_103,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_105,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_104,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_102,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_129,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_128,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_127,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_126,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_144,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_145,__ZN7LoRaMac24continue_joining_processEv__async_cb,__ZN7LoRaMac21handle_retransmissionEv__async_cb,__ZN7LoRaMac21handle_retransmissionEv__async_cb_36,__ZN7LoRaMac21handle_retransmissionEv__async_cb_35,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_51,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_49,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_50,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_48,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_77,__ZN7LoRaMac11schedule_txEv__async_cb_76,__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb
,__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_8,__ZN7LoRaMac15open_rx1_windowEv__async_cb_13,__ZN7LoRaMac15open_rx1_windowEv__async_cb_11,__ZN7LoRaMac15open_rx1_windowEv__async_cb_12,__ZN7LoRaMac15open_rx1_windowEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_364,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_362,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_361,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_360,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_363,__ZN7LoRaMac13clear_tx_pipeEv__async_cb_390,__ZN7LoRaMac13clear_tx_pipeEv__async_cb,__ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb,__ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb,__ZN7LoRaMac15send_ongoing_txEv__async_cb,__ZN7LoRaMac15send_ongoing_txEv__async_cb_264,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_283,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_286,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_285,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_284,__ZN7LoRaMac4joinEb__async_cb,__ZN7LoRaMac4joinEb__async_cb_190,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_202,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_204,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_205,__ZN7LoRaMac23on_backoff_timer_expiryEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_201,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb
,__ZN7LoRaMac15open_rx1_windowEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_200,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_195,__ZN7LoRaMac15open_rx2_windowEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_199,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_196,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_198,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_197,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_203,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb,__ZN7LoRaMac10disconnectEv__async_cb_170,__ZN7LoRaMac10disconnectEv__async_cb_169,__ZN7LoRaMac10disconnectEv__async_cb_168,__ZN7LoRaMac10disconnectEv__async_cb_167,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_1,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_2,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_292,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_293,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_294,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_295,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_296
,__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb,__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_282,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_218,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_217,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_216,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_215,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_219,__ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh__async_cb,__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh__async_cb,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_173,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_172,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_171,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_174,__ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh__async_cb,__ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2___async_cb,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_85,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_86,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_46,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_47,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_68,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_69,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_70,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_71,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_72,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_73
,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_74,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_75,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_37,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_38,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_39,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_40,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_41,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_42,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb_22,__ZN7LoRaPHY18dl_channel_requestEhj__async_cb,__ZN7LoRaPHY18dl_channel_requestEhj__async_cb_5,__ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_350,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_351,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_193,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_194,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_213,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_214,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_183,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_184,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_187,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_188,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_189
,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_164,__ZN7LoRaPHY13get_radio_rngEv__async_cb_165,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_158,__ZN7LoRaPHY11handle_sendEPhh__async_cb_159,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_343,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_306,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_303,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_305,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_304,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_307,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_aes_free__async_cb,_mbedtls_aes_setkey_dec__async_cb,_mbedtls_ccm_setkey__async_cb_192,_mbedtls_ccm_setkey__async_cb_191,_mbedtls_ccm_setkey__async_cb,_mbedtls_ccm_free__async_cb_206,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb_281,_mbedtls_cipher_free__async_cb,_mbedtls_cipher_free__async_cb_280,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_342,_mbedtls_cipher_update__async_cb
,_mbedtls_cipher_update__async_cb_349,_mbedtls_cipher_update__async_cb_346,_mbedtls_cipher_update__async_cb_347,_mbedtls_cipher_update__async_cb_348,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb,_aes_setkey_dec_wrap__async_cb,_aes_ctx_free__async_cb,_mbedtls_cipher_cmac_starts__async_cb_44,_mbedtls_cipher_cmac_starts__async_cb,_mbedtls_cipher_cmac_update__async_cb_55,_mbedtls_cipher_cmac_update__async_cb_54,_mbedtls_cipher_cmac_update__async_cb,_mbedtls_cipher_cmac_finish__async_cb_98,_mbedtls_cipher_cmac_finish__async_cb_97,_mbedtls_cipher_cmac_finish__async_cb_96,_mbedtls_cipher_cmac_finish__async_cb_100,_mbedtls_cipher_cmac_finish__async_cb_95,_mbedtls_cipher_cmac_finish__async_cb_99,_mbedtls_cipher_cmac_finish__async_cb_94,_mbedtls_cipher_cmac_finish__async_cb_93,_mbedtls_cipher_cmac_finish__async_cb_92,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_132,_mbedtls_gcm_setkey__async_cb_131,_mbedtls_gcm_setkey__async_cb_130,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb
,_mbedtls_gcm_free__async_cb_146,_mbedtls_gcm_free__async_cb,_mbedtls_platform_zeroize__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_207,_initialize__async_cb_212,_initialize__async_cb_211,_initialize__async_cb_208,_initialize__async_cb_209,_initialize__async_cb_210,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_220,_schedule_interrupt__async_cb_221,_schedule_interrupt__async_cb_222,_schedule_interrupt__async_cb_223,_schedule_interrupt__async_cb_224,_schedule_interrupt__async_cb_225,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_263,_ticker_read_us__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_279,_mbed_die__async_cb_278,_mbed_die__async_cb_277,_mbed_die__async_cb_276,_mbed_die__async_cb_275,_mbed_die__async_cb_274,_mbed_die__async_cb_273,_mbed_die__async_cb_272
,_mbed_die__async_cb_271,_mbed_die__async_cb_270,_mbed_die__async_cb_269,_mbed_die__async_cb_268,_mbed_die__async_cb_267,_mbed_die__async_cb_266,_mbed_die__async_cb_265,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_338,_mbed_error_vfprintf__async_cb_337,_handle_interrupt_in__async_cb,_serial_putc__async_cb_6,_serial_putc__async_cb,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_78,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_45,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_106,_invoke_ticker__async_cb,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,_main__async_cb,_putc__async_cb_34,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_180,_fflush__async_cb_179
,_fflush__async_cb_181,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_185,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_fputc__async_cb_153,_fputc__async_cb,_puts__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_258,_abort_message__async_cb,_abort_message__async_cb_53,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_226,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_27,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_52,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_257,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_248,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_247,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_246,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_245
,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_291,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79
,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109
,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139
,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169
,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199
,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221,b222,b223,b224,b225,b226,b227,b228,b229
,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252,b253,b254,b255,b256,b257,b258,b259
,b260,b261,b262,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272,b273,b274,b275,b276,b277,b278,b279,b280,b281,b282,b283,b284,b285,b286,b287,b288,b289
,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302,b303,b304,b305,b306,b307,b308,b309,b310,b311,b312,b313,b314,b315,b316,b317,b318,b319
,b320,b321,b322,b323,b324,b325,b326,b327,b328,b329,b330,b331,b332,b333,b334,b335,b336,b337,b338,b339,b340,b341,b342,b343,b344,b345,b346,b347,b348,b349
,b350,b351,b352,b353,b354,b355,b356,b357,b358,b359,b360,b361,b362,b363,b364,b365,b366,b367,b368,b369,b370,b371,b372,b373,b374,b375,b376,b377,b378,b379
,b380,b381,b382,b383,b384];
var FUNCTION_TABLE_vii = [b386,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv,__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb,__ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack25process_reception_timeoutEb,b387,b388,b389];
var FUNCTION_TABLE_viii = [b391,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY13apply_cf_listEPKhh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b392,b393];
var FUNCTION_TABLE_viiii = [b395,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZN7LoRaPHY16set_last_tx_doneEhbj,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b396,b397];
var FUNCTION_TABLE_viiiii = [b399,__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa,__ZN12LoRaWANStack17process_receptionEPKhtsa];
var FUNCTION_TABLE_viiiiii = [b401,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b403,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b405,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan-abp.js.map