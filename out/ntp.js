// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0) { return window.MbedJSHal.network.get_mac_address(); },
 function($0) { return window.MbedJSHal.network.get_ip_address(); },
 function($0) { return window.MbedJSHal.network.get_netmask(); },
 function($0) { return window.MbedJSHal.network.socket_open($0); },
 function($0) { return window.MbedJSHal.network.socket_close($0); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_connect($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_send($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_recv($0, $1, $2); },
 function() { console.log('rx_frame', Date.now()); },
 function() { return Date.now(); },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 8672;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "ntp.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=STATICTOP; STATICTOP += 16;;
  
  var _daylight=STATICTOP; STATICTOP += 16;;
  
  var _timezone=STATICTOP; STATICTOP += 16;;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by getTimezoneOffset().
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((_timezone)>>2)]=(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }
  
  
  var ___tm_formatted=STATICTOP; STATICTOP += 48;;
  
  function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        // Attention: some regions don't have DST at all.
        HEAP32[(((tmPtr)+(32))>>2)]=Number(summerOffset != winterOffset && dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
  
      // asctime_r is specced to behave in an undefined manner if the algorithm would attempt
      // to write out more than 26 bytes (including the null terminator).
      // See http://pubs.opengroup.org/onlinepubs/9699919799/functions/asctime.html
      // Our undefined behavior is to truncate the write to at most 26 bytes, including null terminator.
      stringToUTF8(s, buf, 26);
      return buf;
    }function _ctime_r(time, buf) {
      var stack = stackSave();
      var rv = _asctime_r(_localtime_r(time, stackAlloc(44)), buf);
      stackRestore(stack);
      return rv;
    }function _ctime(timer) {
      return _ctime_r(timer, ___tm_current);
    }

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0"];
var debug_table_ii = ["0", "__ZN17EthernetInterface15get_mac_addressEv", "__ZN17EthernetInterface14get_ip_addressEv", "__ZN17EthernetInterface11get_netmaskEv", "__ZN17EthernetInterface11get_gatewayEv", "__ZN17EthernetInterface7connectEv", "__ZN17EthernetInterface10disconnectEv", "__ZNK16NetworkInterface21get_connection_statusEv", "__ZN16NetworkInterface12ethInterfaceEv", "__ZN16NetworkInterface13wifiInterfaceEv", "__ZN16NetworkInterface13meshInterfaceEv", "__ZN16NetworkInterface12cellularBaseEv", "__ZN16NetworkInterface13emacInterfaceEv", "__ZN17EthernetInterface9get_stackEv", "__ZThn4_N17EthernetInterface14get_ip_addressEv", "__ZN12NetworkStack19onboardNetworkStackEv", "__ZN9UDPSocket9get_protoEv", "___stdio_close", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16NetworkInterface26gethostbyname_async_cancelEi", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress", "__ZN17EthernetInterface8set_dhcpEb", "__ZN16NetworkInterface12set_blockingEb", "__ZN17EthernetInterface12socket_closeEPv", "__ZN12NetworkStack26gethostbyname_async_cancelEi", "__ZN12NetworkStack14add_dns_serverERK13SocketAddress", "__ZThn4_N17EthernetInterface12socket_closeEPv", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZN17EthernetInterface13socket_listenEPvi", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack14get_dns_serverEiP13SocketAddress", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface13socket_listenEPvi", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_do_read", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZN17EthernetInterface11set_networkEPKcS1_S1_", "__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZN17EthernetInterface11socket_sendEPvPKvj", "__ZN17EthernetInterface11socket_recvEPvS0_j", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j", "0", "0", "0", "0"];
var debug_table_iiiiii = ["0", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "__ZN12NetworkStack11setstackoptEiiPKvj", "__ZN12NetworkStack11getstackoptEiiPvPj", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "0"];
var debug_table_iiiiiii = ["0", "__ZN12NetworkStack10setsockoptEPviiPKvj", "__ZN12NetworkStack10getsockoptEPviiS0_Pj", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "__ZL25default_terminate_handlerv", "__ZL29nsapi_dns_query_async_timeoutv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN17EthernetInterfaceD2Ev", "__ZN17EthernetInterfaceD0Ev", "__ZThn4_N17EthernetInterfaceD1Ev", "__ZThn4_N17EthernetInterfaceD0Ev", "_mbed_trace_default_print", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv", "__ZN6SocketD2Ev", "__ZN6SocketD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv", "__ZN9UDPSocketD2Ev", "__ZN9UDPSocketD0Ev", "__ZN9UDPSocket5eventEv", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN17EthernetInterface15get_mac_addressEv__async_cb", "__ZN17EthernetInterface14get_ip_addressEv__async_cb", "__ZN17EthernetInterface11get_netmaskEv__async_cb", "__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb", "__ZN17EthernetInterface8set_dhcpEb__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_77", "__ZN17EthernetInterface12socket_closeEPv__async_cb", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_161", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_162", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_160", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_42", "__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_74", "__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_153", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_154", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_152", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_43", "_equeue_alloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_31", "_mbed_vtracef__async_cb_21", "_mbed_vtracef__async_cb_22", "_mbed_vtracef__async_cb_23", "_mbed_vtracef__async_cb_30", "_mbed_vtracef__async_cb_24", "_mbed_vtracef__async_cb_29", "_mbed_vtracef__async_cb_25", "_mbed_vtracef__async_cb_26", "_mbed_vtracef__async_cb_27", "_mbed_vtracef__async_cb_28", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_213", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_112", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_141", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_142", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_143", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_149", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_56", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_6", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_20", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_12", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_13", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_14", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_15", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_19", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_16", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_17", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_18", "__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_122", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_114", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_120", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_115", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_116", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_121", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_117", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_119", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_118", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_144", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_145", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_146", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_147", "__ZN6SocketD2Ev__async_cb", "__ZN6SocketD2Ev__async_cb_32", "__ZN6Socket4openEP12NetworkStack__async_cb", "__ZN6Socket4openEP12NetworkStack__async_cb_51", "__ZN6Socket4openEP12NetworkStack__async_cb_52", "__ZN6Socket4openEP12NetworkStack__async_cb_53", "__ZN6Socket4openEP12NetworkStack__async_cb_54", "__ZN4mbed8CallbackIFvvEE5thunkEPv", "__ZN6Socket4openEP12NetworkStack__async_cb_55", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_38", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb", "__ZN6Socket5closeEv__async_cb", "__ZN6Socket5closeEv__async_cb_183", "__ZN6Socket5closeEv__async_cb_184", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_109", "__ZN9UDPSocketD2Ev__async_cb_41", "__ZN9UDPSocketD2Ev__async_cb", "__ZN9UDPSocketD2Ev__async_cb_40", "__ZN9UDPSocketD0Ev__async_cb", "__ZN9UDPSocket5eventEv__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_111", "__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb", "__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_62", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_59", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_58", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_57", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_61", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_60", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_46", "__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_7", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_10", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_8", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_9", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_199", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_195", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_196", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_186", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_187", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_188", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_189", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_190", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_198", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_191", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_192", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_193", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_194", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_197", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_208", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_209", "__ZL29nsapi_dns_query_async_timeoutv__async_cb", "__ZL30nsapi_dns_query_async_responsePv", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_212", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_200", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_201", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_202", "__ZL26nsapi_dns_query_async_sendPv", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_211", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_203", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_204", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_205", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_210", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_206", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_207", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_159", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_155", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_156", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_158", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_157", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb", "__ZL28nsapi_dns_query_async_createPv", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_166", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_164", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_165", "__ZL28nsapi_dns_query_async_createPv__async_cb_133", "__ZL28nsapi_dns_query_async_createPv__async_cb_140", "__ZL28nsapi_dns_query_async_createPv__async_cb", "__ZL28nsapi_dns_query_async_createPv__async_cb_136", "__ZL28nsapi_dns_query_async_createPv__async_cb_138", "__ZL28nsapi_dns_query_async_createPv__async_cb_123", "__ZL28nsapi_dns_query_async_createPv__async_cb_124", "__ZL28nsapi_dns_query_async_createPv__async_cb_125", "__ZL28nsapi_dns_query_async_createPv__async_cb_126", "__ZL28nsapi_dns_query_async_createPv__async_cb_135", "__ZL28nsapi_dns_query_async_createPv__async_cb_137", "__ZL28nsapi_dns_query_async_createPv__async_cb_127", "__ZL28nsapi_dns_query_async_createPv__async_cb_128", "__ZL28nsapi_dns_query_async_createPv__async_cb_132", "__ZL28nsapi_dns_query_async_createPv__async_cb_129", "__ZL28nsapi_dns_query_async_createPv__async_cb_130", "__ZL37nsapi_dns_query_async_socket_callbackPv", "__ZL28nsapi_dns_query_async_createPv__async_cb_139", "__ZL28nsapi_dns_query_async_createPv__async_cb_131", "__ZL28nsapi_dns_query_async_createPv__async_cb_134", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb", "__ZL28nsapi_dns_query_async_deletei__async_cb_93", "__ZL28nsapi_dns_query_async_deletei__async_cb", "__ZL28nsapi_dns_query_async_deletei__async_cb_90", "__ZL28nsapi_dns_query_async_deletei__async_cb_91", "__ZL28nsapi_dns_query_async_deletei__async_cb_92", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_87", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_85", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_86", "__ZL26nsapi_dns_query_async_sendPv__async_cb", "__ZL26nsapi_dns_query_async_sendPv__async_cb_70", "__ZL26nsapi_dns_query_async_sendPv__async_cb_72", "__ZL26nsapi_dns_query_async_sendPv__async_cb_63", "__ZL26nsapi_dns_query_async_sendPv__async_cb_64", "__ZL26nsapi_dns_query_async_sendPv__async_cb_65", "__ZL26nsapi_dns_query_async_sendPv__async_cb_66", "__ZL26nsapi_dns_query_async_sendPv__async_cb_69", "__ZL26nsapi_dns_query_async_sendPv__async_cb_71", "__ZL26nsapi_dns_query_async_sendPv__async_cb_67", "__ZL26nsapi_dns_query_async_sendPv__async_cb_68", "__ZL26nsapi_dns_query_async_sendPv__async_cb_73", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_83", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_82", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_80", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_81", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_78", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_79", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_170", "__ZL30nsapi_dns_query_async_responsePv__async_cb_169", "__ZL30nsapi_dns_query_async_responsePv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_171", "__ZL30nsapi_dns_query_async_responsePv__async_cb_172", "__ZL30nsapi_dns_query_async_responsePv__async_cb_167", "__ZL30nsapi_dns_query_async_responsePv__async_cb_168", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_5", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_1", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_2", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_3", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_4", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb", "__Z28nsapi_dns_query_async_canceli__async_cb", "__Z28nsapi_dns_query_async_canceli__async_cb_150", "__Z28nsapi_dns_query_async_canceli__async_cb_151", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_108", "_mbed_die__async_cb_107", "_mbed_die__async_cb_106", "_mbed_die__async_cb_105", "_mbed_die__async_cb_104", "_mbed_die__async_cb_103", "_mbed_die__async_cb_102", "_mbed_die__async_cb_101", "_mbed_die__async_cb_100", "_mbed_die__async_cb_99", "_mbed_die__async_cb_98", "_mbed_die__async_cb_97", "_mbed_die__async_cb_96", "_mbed_die__async_cb_95", "_mbed_die__async_cb_94", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_89", "_mbed_error_vfprintf__async_cb_88", "_serial_putc__async_cb_76", "_serial_putc__async_cb", "_invoke_ticker__async_cb_50", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "_main__async_cb_173", "_main__async_cb", "_main__async_cb_182", "_main__async_cb_174", "_main__async_cb_176", "_main__async_cb_181", "_main__async_cb_175", "_main__async_cb_180", "_main__async_cb_178", "_main__async_cb_179", "_main__async_cb_177", "__ZN9UDPSocketC2I17EthernetInterfaceEEPT___async_cb", "__ZN9UDPSocketC2I17EthernetInterfaceEEPT___async_cb_163", "_putc__async_cb_110", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_48", "_fflush__async_cb_47", "_fflush__async_cb_49", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_75", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_fputc__async_cb_113", "_fputc__async_cb", "_puts__async_cb", "__Znwj__async_cb", "__ZnwjRKSt9nothrow_t__async_cb", "__Znaj__async_cb", "__ZnajRKSt9nothrow_t__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_45", "_abort_message__async_cb", "_abort_message__async_cb_148", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_84", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_39", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_11", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_44", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_37", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_36", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_35", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_34", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_33", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE", "__ZN12NetworkStack20get_call_in_callbackEv", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv"];
var debug_table_viii = ["0"];
var debug_table_viiii = ["0", "__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_asctime_r": _asctime_r, "_ctime": _ctime, "_ctime_r": _ctime_r, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_trap": _llvm_trap, "_localtime_r": _localtime_r, "_mktime": _mktime, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_tzset": _tzset, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _asctime_r=env._asctime_r;
  var _ctime=env._ctime;
  var _ctime_r=env._ctime_r;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_trap=env._llvm_trap;
  var _localtime_r=env._localtime_r;
  var _mktime=env._mktime;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var _tzset=env._tzset;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 61
 STACKTOP = STACKTOP + 16 | 0; //@line 62
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62
 $1 = sp; //@line 63
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 70
   $7 = $6 >>> 3; //@line 71
   $8 = HEAP32[1693] | 0; //@line 72
   $9 = $8 >>> $7; //@line 73
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 79
    $16 = 6812 + ($14 << 1 << 2) | 0; //@line 81
    $17 = $16 + 8 | 0; //@line 82
    $18 = HEAP32[$17 >> 2] | 0; //@line 83
    $19 = $18 + 8 | 0; //@line 84
    $20 = HEAP32[$19 >> 2] | 0; //@line 85
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[1693] = $8 & ~(1 << $14); //@line 92
     } else {
      if ((HEAP32[1697] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 97
      }
      $27 = $20 + 12 | 0; //@line 100
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 104
       HEAP32[$17 >> 2] = $20; //@line 105
       break;
      } else {
       _abort(); //@line 108
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 113
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 116
    $34 = $18 + $30 + 4 | 0; //@line 118
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 121
    $$0 = $19; //@line 122
    STACKTOP = sp; //@line 123
    return $$0 | 0; //@line 123
   }
   $37 = HEAP32[1695] | 0; //@line 125
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 131
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 134
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 137
     $49 = $47 >>> 12 & 16; //@line 139
     $50 = $47 >>> $49; //@line 140
     $52 = $50 >>> 5 & 8; //@line 142
     $54 = $50 >>> $52; //@line 144
     $56 = $54 >>> 2 & 4; //@line 146
     $58 = $54 >>> $56; //@line 148
     $60 = $58 >>> 1 & 2; //@line 150
     $62 = $58 >>> $60; //@line 152
     $64 = $62 >>> 1 & 1; //@line 154
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 157
     $69 = 6812 + ($67 << 1 << 2) | 0; //@line 159
     $70 = $69 + 8 | 0; //@line 160
     $71 = HEAP32[$70 >> 2] | 0; //@line 161
     $72 = $71 + 8 | 0; //@line 162
     $73 = HEAP32[$72 >> 2] | 0; //@line 163
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 169
       HEAP32[1693] = $77; //@line 170
       $98 = $77; //@line 171
      } else {
       if ((HEAP32[1697] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 176
       }
       $80 = $73 + 12 | 0; //@line 179
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 183
        HEAP32[$70 >> 2] = $73; //@line 184
        $98 = $8; //@line 185
        break;
       } else {
        _abort(); //@line 188
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 193
     $84 = $83 - $6 | 0; //@line 194
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 197
     $87 = $71 + $6 | 0; //@line 198
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 201
     HEAP32[$71 + $83 >> 2] = $84; //@line 203
     if ($37 | 0) {
      $92 = HEAP32[1698] | 0; //@line 206
      $93 = $37 >>> 3; //@line 207
      $95 = 6812 + ($93 << 1 << 2) | 0; //@line 209
      $96 = 1 << $93; //@line 210
      if (!($98 & $96)) {
       HEAP32[1693] = $98 | $96; //@line 215
       $$0199 = $95; //@line 217
       $$pre$phiZ2D = $95 + 8 | 0; //@line 217
      } else {
       $101 = $95 + 8 | 0; //@line 219
       $102 = HEAP32[$101 >> 2] | 0; //@line 220
       if ((HEAP32[1697] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 224
       } else {
        $$0199 = $102; //@line 227
        $$pre$phiZ2D = $101; //@line 227
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 230
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 232
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 234
      HEAP32[$92 + 12 >> 2] = $95; //@line 236
     }
     HEAP32[1695] = $84; //@line 238
     HEAP32[1698] = $87; //@line 239
     $$0 = $72; //@line 240
     STACKTOP = sp; //@line 241
     return $$0 | 0; //@line 241
    }
    $108 = HEAP32[1694] | 0; //@line 243
    if (!$108) {
     $$0197 = $6; //@line 246
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 250
     $114 = $112 >>> 12 & 16; //@line 252
     $115 = $112 >>> $114; //@line 253
     $117 = $115 >>> 5 & 8; //@line 255
     $119 = $115 >>> $117; //@line 257
     $121 = $119 >>> 2 & 4; //@line 259
     $123 = $119 >>> $121; //@line 261
     $125 = $123 >>> 1 & 2; //@line 263
     $127 = $123 >>> $125; //@line 265
     $129 = $127 >>> 1 & 1; //@line 267
     $134 = HEAP32[7076 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 272
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 276
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 282
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 285
      $$0193$lcssa$i = $138; //@line 285
     } else {
      $$01926$i = $134; //@line 287
      $$01935$i = $138; //@line 287
      $146 = $143; //@line 287
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 292
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 293
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 294
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 295
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 301
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 304
        $$0193$lcssa$i = $$$0193$i; //@line 304
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 307
        $$01935$i = $$$0193$i; //@line 307
       }
      }
     }
     $157 = HEAP32[1697] | 0; //@line 311
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 314
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 317
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 320
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 324
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 326
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 330
       $176 = HEAP32[$175 >> 2] | 0; //@line 331
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 334
        $179 = HEAP32[$178 >> 2] | 0; //@line 335
        if (!$179) {
         $$3$i = 0; //@line 338
         break;
        } else {
         $$1196$i = $179; //@line 341
         $$1198$i = $178; //@line 341
        }
       } else {
        $$1196$i = $176; //@line 344
        $$1198$i = $175; //@line 344
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 347
        $182 = HEAP32[$181 >> 2] | 0; //@line 348
        if ($182 | 0) {
         $$1196$i = $182; //@line 351
         $$1198$i = $181; //@line 351
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 354
        $185 = HEAP32[$184 >> 2] | 0; //@line 355
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 360
         $$1198$i = $184; //@line 360
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 365
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 368
        $$3$i = $$1196$i; //@line 369
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 374
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 377
       }
       $169 = $167 + 12 | 0; //@line 380
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 384
       }
       $172 = $164 + 8 | 0; //@line 387
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 391
        HEAP32[$172 >> 2] = $167; //@line 392
        $$3$i = $164; //@line 393
        break;
       } else {
        _abort(); //@line 396
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 405
       $191 = 7076 + ($190 << 2) | 0; //@line 406
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 411
         if (!$$3$i) {
          HEAP32[1694] = $108 & ~(1 << $190); //@line 417
          break L73;
         }
        } else {
         if ((HEAP32[1697] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 424
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 432
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[1697] | 0; //@line 442
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 445
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 449
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 451
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 457
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 461
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 463
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 469
       if ($214 | 0) {
        if ((HEAP32[1697] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 475
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 479
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 481
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 489
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 492
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 494
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 497
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 501
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 504
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 506
      if ($37 | 0) {
       $234 = HEAP32[1698] | 0; //@line 509
       $235 = $37 >>> 3; //@line 510
       $237 = 6812 + ($235 << 1 << 2) | 0; //@line 512
       $238 = 1 << $235; //@line 513
       if (!($8 & $238)) {
        HEAP32[1693] = $8 | $238; //@line 518
        $$0189$i = $237; //@line 520
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 520
       } else {
        $242 = $237 + 8 | 0; //@line 522
        $243 = HEAP32[$242 >> 2] | 0; //@line 523
        if ((HEAP32[1697] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 527
        } else {
         $$0189$i = $243; //@line 530
         $$pre$phi$iZ2D = $242; //@line 530
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 533
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 535
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 537
       HEAP32[$234 + 12 >> 2] = $237; //@line 539
      }
      HEAP32[1695] = $$0193$lcssa$i; //@line 541
      HEAP32[1698] = $159; //@line 542
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 545
     STACKTOP = sp; //@line 546
     return $$0 | 0; //@line 546
    }
   } else {
    $$0197 = $6; //@line 549
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 554
   } else {
    $251 = $0 + 11 | 0; //@line 556
    $252 = $251 & -8; //@line 557
    $253 = HEAP32[1694] | 0; //@line 558
    if (!$253) {
     $$0197 = $252; //@line 561
    } else {
     $255 = 0 - $252 | 0; //@line 563
     $256 = $251 >>> 8; //@line 564
     if (!$256) {
      $$0358$i = 0; //@line 567
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 571
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 575
       $262 = $256 << $261; //@line 576
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 579
       $267 = $262 << $265; //@line 581
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 584
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 589
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 595
      }
     }
     $282 = HEAP32[7076 + ($$0358$i << 2) >> 2] | 0; //@line 599
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 603
       $$3$i203 = 0; //@line 603
       $$3350$i = $255; //@line 603
       label = 81; //@line 604
      } else {
       $$0342$i = 0; //@line 611
       $$0347$i = $255; //@line 611
       $$0353$i = $282; //@line 611
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 611
       $$0362$i = 0; //@line 611
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 616
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 621
          $$435113$i = 0; //@line 621
          $$435712$i = $$0353$i; //@line 621
          label = 85; //@line 622
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 625
          $$1348$i = $292; //@line 625
         }
        } else {
         $$1343$i = $$0342$i; //@line 628
         $$1348$i = $$0347$i; //@line 628
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 631
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 634
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 638
        $302 = ($$0353$i | 0) == 0; //@line 639
        if ($302) {
         $$2355$i = $$1363$i; //@line 644
         $$3$i203 = $$1343$i; //@line 644
         $$3350$i = $$1348$i; //@line 644
         label = 81; //@line 645
         break;
        } else {
         $$0342$i = $$1343$i; //@line 648
         $$0347$i = $$1348$i; //@line 648
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 648
         $$0362$i = $$1363$i; //@line 648
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 658
       $309 = $253 & ($306 | 0 - $306); //@line 661
       if (!$309) {
        $$0197 = $252; //@line 664
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 669
       $315 = $313 >>> 12 & 16; //@line 671
       $316 = $313 >>> $315; //@line 672
       $318 = $316 >>> 5 & 8; //@line 674
       $320 = $316 >>> $318; //@line 676
       $322 = $320 >>> 2 & 4; //@line 678
       $324 = $320 >>> $322; //@line 680
       $326 = $324 >>> 1 & 2; //@line 682
       $328 = $324 >>> $326; //@line 684
       $330 = $328 >>> 1 & 1; //@line 686
       $$4$ph$i = 0; //@line 692
       $$4357$ph$i = HEAP32[7076 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 692
      } else {
       $$4$ph$i = $$3$i203; //@line 694
       $$4357$ph$i = $$2355$i; //@line 694
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 698
       $$4351$lcssa$i = $$3350$i; //@line 698
      } else {
       $$414$i = $$4$ph$i; //@line 700
       $$435113$i = $$3350$i; //@line 700
       $$435712$i = $$4357$ph$i; //@line 700
       label = 85; //@line 701
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 706
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 710
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 711
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 712
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 713
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 719
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 722
        $$4351$lcssa$i = $$$4351$i; //@line 722
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 725
        $$435113$i = $$$4351$i; //@line 725
        label = 85; //@line 726
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 732
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[1695] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[1697] | 0; //@line 738
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 741
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 744
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 747
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 751
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 753
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 757
         $371 = HEAP32[$370 >> 2] | 0; //@line 758
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 761
          $374 = HEAP32[$373 >> 2] | 0; //@line 762
          if (!$374) {
           $$3372$i = 0; //@line 765
           break;
          } else {
           $$1370$i = $374; //@line 768
           $$1374$i = $373; //@line 768
          }
         } else {
          $$1370$i = $371; //@line 771
          $$1374$i = $370; //@line 771
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 774
          $377 = HEAP32[$376 >> 2] | 0; //@line 775
          if ($377 | 0) {
           $$1370$i = $377; //@line 778
           $$1374$i = $376; //@line 778
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 781
          $380 = HEAP32[$379 >> 2] | 0; //@line 782
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 787
           $$1374$i = $379; //@line 787
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 792
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 795
          $$3372$i = $$1370$i; //@line 796
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 801
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 804
         }
         $364 = $362 + 12 | 0; //@line 807
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 811
         }
         $367 = $359 + 8 | 0; //@line 814
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 818
          HEAP32[$367 >> 2] = $362; //@line 819
          $$3372$i = $359; //@line 820
          break;
         } else {
          _abort(); //@line 823
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 831
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 834
         $386 = 7076 + ($385 << 2) | 0; //@line 835
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 840
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 845
            HEAP32[1694] = $391; //@line 846
            $475 = $391; //@line 847
            break L164;
           }
          } else {
           if ((HEAP32[1697] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 854
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 862
            if (!$$3372$i) {
             $475 = $253; //@line 865
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[1697] | 0; //@line 873
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 876
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 880
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 882
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 888
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 892
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 894
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 900
         if (!$409) {
          $475 = $253; //@line 903
         } else {
          if ((HEAP32[1697] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 908
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 912
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 914
           $475 = $253; //@line 915
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 924
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 927
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 929
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 932
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 936
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 939
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 941
         $428 = $$4351$lcssa$i >>> 3; //@line 942
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 6812 + ($428 << 1 << 2) | 0; //@line 946
          $432 = HEAP32[1693] | 0; //@line 947
          $433 = 1 << $428; //@line 948
          if (!($432 & $433)) {
           HEAP32[1693] = $432 | $433; //@line 953
           $$0368$i = $431; //@line 955
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 955
          } else {
           $437 = $431 + 8 | 0; //@line 957
           $438 = HEAP32[$437 >> 2] | 0; //@line 958
           if ((HEAP32[1697] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 962
           } else {
            $$0368$i = $438; //@line 965
            $$pre$phi$i211Z2D = $437; //@line 965
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 968
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 970
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 972
          HEAP32[$354 + 12 >> 2] = $431; //@line 974
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 977
         if (!$444) {
          $$0361$i = 0; //@line 980
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 984
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 988
           $450 = $444 << $449; //@line 989
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 992
           $455 = $450 << $453; //@line 994
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 997
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 1002
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 1008
          }
         }
         $469 = 7076 + ($$0361$i << 2) | 0; //@line 1011
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 1013
         $471 = $354 + 16 | 0; //@line 1014
         HEAP32[$471 + 4 >> 2] = 0; //@line 1016
         HEAP32[$471 >> 2] = 0; //@line 1017
         $473 = 1 << $$0361$i; //@line 1018
         if (!($475 & $473)) {
          HEAP32[1694] = $475 | $473; //@line 1023
          HEAP32[$469 >> 2] = $354; //@line 1024
          HEAP32[$354 + 24 >> 2] = $469; //@line 1026
          HEAP32[$354 + 12 >> 2] = $354; //@line 1028
          HEAP32[$354 + 8 >> 2] = $354; //@line 1030
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 1039
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 1039
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 1046
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 1050
          $494 = HEAP32[$492 >> 2] | 0; //@line 1052
          if (!$494) {
           label = 136; //@line 1055
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 1058
           $$0345$i = $494; //@line 1058
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[1697] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 1065
          } else {
           HEAP32[$492 >> 2] = $354; //@line 1068
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 1070
           HEAP32[$354 + 12 >> 2] = $354; //@line 1072
           HEAP32[$354 + 8 >> 2] = $354; //@line 1074
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 1079
          $502 = HEAP32[$501 >> 2] | 0; //@line 1080
          $503 = HEAP32[1697] | 0; //@line 1081
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 1087
           HEAP32[$501 >> 2] = $354; //@line 1088
           HEAP32[$354 + 8 >> 2] = $502; //@line 1090
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 1092
           HEAP32[$354 + 24 >> 2] = 0; //@line 1094
           break;
          } else {
           _abort(); //@line 1097
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 1104
       STACKTOP = sp; //@line 1105
       return $$0 | 0; //@line 1105
      } else {
       $$0197 = $252; //@line 1107
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[1695] | 0; //@line 1114
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 1117
  $515 = HEAP32[1698] | 0; //@line 1118
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 1121
   HEAP32[1698] = $517; //@line 1122
   HEAP32[1695] = $514; //@line 1123
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 1126
   HEAP32[$515 + $512 >> 2] = $514; //@line 1128
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 1131
  } else {
   HEAP32[1695] = 0; //@line 1133
   HEAP32[1698] = 0; //@line 1134
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 1137
   $526 = $515 + $512 + 4 | 0; //@line 1139
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 1142
  }
  $$0 = $515 + 8 | 0; //@line 1145
  STACKTOP = sp; //@line 1146
  return $$0 | 0; //@line 1146
 }
 $530 = HEAP32[1696] | 0; //@line 1148
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 1151
  HEAP32[1696] = $532; //@line 1152
  $533 = HEAP32[1699] | 0; //@line 1153
  $534 = $533 + $$0197 | 0; //@line 1154
  HEAP32[1699] = $534; //@line 1155
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 1158
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 1161
  $$0 = $533 + 8 | 0; //@line 1163
  STACKTOP = sp; //@line 1164
  return $$0 | 0; //@line 1164
 }
 if (!(HEAP32[1811] | 0)) {
  HEAP32[1813] = 4096; //@line 1169
  HEAP32[1812] = 4096; //@line 1170
  HEAP32[1814] = -1; //@line 1171
  HEAP32[1815] = -1; //@line 1172
  HEAP32[1816] = 0; //@line 1173
  HEAP32[1804] = 0; //@line 1174
  HEAP32[1811] = $1 & -16 ^ 1431655768; //@line 1178
  $548 = 4096; //@line 1179
 } else {
  $548 = HEAP32[1813] | 0; //@line 1182
 }
 $545 = $$0197 + 48 | 0; //@line 1184
 $546 = $$0197 + 47 | 0; //@line 1185
 $547 = $548 + $546 | 0; //@line 1186
 $549 = 0 - $548 | 0; //@line 1187
 $550 = $547 & $549; //@line 1188
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 1191
  STACKTOP = sp; //@line 1192
  return $$0 | 0; //@line 1192
 }
 $552 = HEAP32[1803] | 0; //@line 1194
 if ($552 | 0) {
  $554 = HEAP32[1801] | 0; //@line 1197
  $555 = $554 + $550 | 0; //@line 1198
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 1203
   STACKTOP = sp; //@line 1204
   return $$0 | 0; //@line 1204
  }
 }
 L244 : do {
  if (!(HEAP32[1804] & 4)) {
   $561 = HEAP32[1699] | 0; //@line 1212
   L246 : do {
    if (!$561) {
     label = 163; //@line 1216
    } else {
     $$0$i$i = 7220; //@line 1218
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 1220
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 1223
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 1232
      if (!$570) {
       label = 163; //@line 1235
       break L246;
      } else {
       $$0$i$i = $570; //@line 1238
      }
     }
     $595 = $547 - $530 & $549; //@line 1242
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 1245
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 1253
       } else {
        $$723947$i = $595; //@line 1255
        $$748$i = $597; //@line 1255
        label = 180; //@line 1256
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 1260
       $$2253$ph$i = $595; //@line 1260
       label = 171; //@line 1261
      }
     } else {
      $$2234243136$i = 0; //@line 1264
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 1270
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 1273
     } else {
      $574 = $572; //@line 1275
      $575 = HEAP32[1812] | 0; //@line 1276
      $576 = $575 + -1 | 0; //@line 1277
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 1285
      $584 = HEAP32[1801] | 0; //@line 1286
      $585 = $$$i + $584 | 0; //@line 1287
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[1803] | 0; //@line 1292
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 1299
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 1303
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 1306
        $$748$i = $572; //@line 1306
        label = 180; //@line 1307
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 1310
        $$2253$ph$i = $$$i; //@line 1310
        label = 171; //@line 1311
       }
      } else {
       $$2234243136$i = 0; //@line 1314
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 1321
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 1330
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 1333
       $$748$i = $$2247$ph$i; //@line 1333
       label = 180; //@line 1334
       break L244;
      }
     }
     $607 = HEAP32[1813] | 0; //@line 1338
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 1342
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 1345
      $$748$i = $$2247$ph$i; //@line 1345
      label = 180; //@line 1346
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 1352
      $$2234243136$i = 0; //@line 1353
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 1357
      $$748$i = $$2247$ph$i; //@line 1357
      label = 180; //@line 1358
      break L244;
     }
    }
   } while (0);
   HEAP32[1804] = HEAP32[1804] | 4; //@line 1365
   $$4236$i = $$2234243136$i; //@line 1366
   label = 178; //@line 1367
  } else {
   $$4236$i = 0; //@line 1369
   label = 178; //@line 1370
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 1376
   $621 = _sbrk(0) | 0; //@line 1377
   $627 = $621 - $620 | 0; //@line 1385
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 1387
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 1395
    $$748$i = $620; //@line 1395
    label = 180; //@line 1396
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[1801] | 0) + $$723947$i | 0; //@line 1402
  HEAP32[1801] = $633; //@line 1403
  if ($633 >>> 0 > (HEAP32[1802] | 0) >>> 0) {
   HEAP32[1802] = $633; //@line 1407
  }
  $636 = HEAP32[1699] | 0; //@line 1409
  do {
   if (!$636) {
    $638 = HEAP32[1697] | 0; //@line 1413
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[1697] = $$748$i; //@line 1418
    }
    HEAP32[1805] = $$748$i; //@line 1420
    HEAP32[1806] = $$723947$i; //@line 1421
    HEAP32[1808] = 0; //@line 1422
    HEAP32[1702] = HEAP32[1811]; //@line 1424
    HEAP32[1701] = -1; //@line 1425
    HEAP32[1706] = 6812; //@line 1426
    HEAP32[1705] = 6812; //@line 1427
    HEAP32[1708] = 6820; //@line 1428
    HEAP32[1707] = 6820; //@line 1429
    HEAP32[1710] = 6828; //@line 1430
    HEAP32[1709] = 6828; //@line 1431
    HEAP32[1712] = 6836; //@line 1432
    HEAP32[1711] = 6836; //@line 1433
    HEAP32[1714] = 6844; //@line 1434
    HEAP32[1713] = 6844; //@line 1435
    HEAP32[1716] = 6852; //@line 1436
    HEAP32[1715] = 6852; //@line 1437
    HEAP32[1718] = 6860; //@line 1438
    HEAP32[1717] = 6860; //@line 1439
    HEAP32[1720] = 6868; //@line 1440
    HEAP32[1719] = 6868; //@line 1441
    HEAP32[1722] = 6876; //@line 1442
    HEAP32[1721] = 6876; //@line 1443
    HEAP32[1724] = 6884; //@line 1444
    HEAP32[1723] = 6884; //@line 1445
    HEAP32[1726] = 6892; //@line 1446
    HEAP32[1725] = 6892; //@line 1447
    HEAP32[1728] = 6900; //@line 1448
    HEAP32[1727] = 6900; //@line 1449
    HEAP32[1730] = 6908; //@line 1450
    HEAP32[1729] = 6908; //@line 1451
    HEAP32[1732] = 6916; //@line 1452
    HEAP32[1731] = 6916; //@line 1453
    HEAP32[1734] = 6924; //@line 1454
    HEAP32[1733] = 6924; //@line 1455
    HEAP32[1736] = 6932; //@line 1456
    HEAP32[1735] = 6932; //@line 1457
    HEAP32[1738] = 6940; //@line 1458
    HEAP32[1737] = 6940; //@line 1459
    HEAP32[1740] = 6948; //@line 1460
    HEAP32[1739] = 6948; //@line 1461
    HEAP32[1742] = 6956; //@line 1462
    HEAP32[1741] = 6956; //@line 1463
    HEAP32[1744] = 6964; //@line 1464
    HEAP32[1743] = 6964; //@line 1465
    HEAP32[1746] = 6972; //@line 1466
    HEAP32[1745] = 6972; //@line 1467
    HEAP32[1748] = 6980; //@line 1468
    HEAP32[1747] = 6980; //@line 1469
    HEAP32[1750] = 6988; //@line 1470
    HEAP32[1749] = 6988; //@line 1471
    HEAP32[1752] = 6996; //@line 1472
    HEAP32[1751] = 6996; //@line 1473
    HEAP32[1754] = 7004; //@line 1474
    HEAP32[1753] = 7004; //@line 1475
    HEAP32[1756] = 7012; //@line 1476
    HEAP32[1755] = 7012; //@line 1477
    HEAP32[1758] = 7020; //@line 1478
    HEAP32[1757] = 7020; //@line 1479
    HEAP32[1760] = 7028; //@line 1480
    HEAP32[1759] = 7028; //@line 1481
    HEAP32[1762] = 7036; //@line 1482
    HEAP32[1761] = 7036; //@line 1483
    HEAP32[1764] = 7044; //@line 1484
    HEAP32[1763] = 7044; //@line 1485
    HEAP32[1766] = 7052; //@line 1486
    HEAP32[1765] = 7052; //@line 1487
    HEAP32[1768] = 7060; //@line 1488
    HEAP32[1767] = 7060; //@line 1489
    $642 = $$723947$i + -40 | 0; //@line 1490
    $644 = $$748$i + 8 | 0; //@line 1492
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 1497
    $650 = $$748$i + $649 | 0; //@line 1498
    $651 = $642 - $649 | 0; //@line 1499
    HEAP32[1699] = $650; //@line 1500
    HEAP32[1696] = $651; //@line 1501
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 1504
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 1507
    HEAP32[1700] = HEAP32[1815]; //@line 1509
   } else {
    $$024367$i = 7220; //@line 1511
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 1513
     $658 = $$024367$i + 4 | 0; //@line 1514
     $659 = HEAP32[$658 >> 2] | 0; //@line 1515
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 1519
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 1523
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 1528
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 1542
       $673 = (HEAP32[1696] | 0) + $$723947$i | 0; //@line 1544
       $675 = $636 + 8 | 0; //@line 1546
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 1551
       $681 = $636 + $680 | 0; //@line 1552
       $682 = $673 - $680 | 0; //@line 1553
       HEAP32[1699] = $681; //@line 1554
       HEAP32[1696] = $682; //@line 1555
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 1558
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 1561
       HEAP32[1700] = HEAP32[1815]; //@line 1563
       break;
      }
     }
    }
    $688 = HEAP32[1697] | 0; //@line 1568
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[1697] = $$748$i; //@line 1571
     $753 = $$748$i; //@line 1572
    } else {
     $753 = $688; //@line 1574
    }
    $690 = $$748$i + $$723947$i | 0; //@line 1576
    $$124466$i = 7220; //@line 1577
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 1582
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 1586
     if (!$694) {
      $$0$i$i$i = 7220; //@line 1589
      break;
     } else {
      $$124466$i = $694; //@line 1592
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 1601
      $700 = $$124466$i + 4 | 0; //@line 1602
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 1605
      $704 = $$748$i + 8 | 0; //@line 1607
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 1613
      $712 = $690 + 8 | 0; //@line 1615
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 1621
      $722 = $710 + $$0197 | 0; //@line 1625
      $723 = $718 - $710 - $$0197 | 0; //@line 1626
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 1629
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[1696] | 0) + $723 | 0; //@line 1634
        HEAP32[1696] = $728; //@line 1635
        HEAP32[1699] = $722; //@line 1636
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 1639
       } else {
        if ((HEAP32[1698] | 0) == ($718 | 0)) {
         $734 = (HEAP32[1695] | 0) + $723 | 0; //@line 1645
         HEAP32[1695] = $734; //@line 1646
         HEAP32[1698] = $722; //@line 1647
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 1650
         HEAP32[$722 + $734 >> 2] = $734; //@line 1652
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 1656
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 1660
         $743 = $739 >>> 3; //@line 1661
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 1666
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 1668
           $750 = 6812 + ($743 << 1 << 2) | 0; //@line 1670
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 1676
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 1685
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[1693] = HEAP32[1693] & ~(1 << $743); //@line 1695
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 1702
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 1706
             }
             $764 = $748 + 8 | 0; //@line 1709
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 1713
              break;
             }
             _abort(); //@line 1716
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 1721
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 1722
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 1725
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 1727
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 1731
             $783 = $782 + 4 | 0; //@line 1732
             $784 = HEAP32[$783 >> 2] | 0; //@line 1733
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 1736
              if (!$786) {
               $$3$i$i = 0; //@line 1739
               break;
              } else {
               $$1291$i$i = $786; //@line 1742
               $$1293$i$i = $782; //@line 1742
              }
             } else {
              $$1291$i$i = $784; //@line 1745
              $$1293$i$i = $783; //@line 1745
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 1748
              $789 = HEAP32[$788 >> 2] | 0; //@line 1749
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 1752
               $$1293$i$i = $788; //@line 1752
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 1755
              $792 = HEAP32[$791 >> 2] | 0; //@line 1756
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 1761
               $$1293$i$i = $791; //@line 1761
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 1766
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 1769
              $$3$i$i = $$1291$i$i; //@line 1770
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 1775
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 1778
             }
             $776 = $774 + 12 | 0; //@line 1781
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 1785
             }
             $779 = $771 + 8 | 0; //@line 1788
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 1792
              HEAP32[$779 >> 2] = $774; //@line 1793
              $$3$i$i = $771; //@line 1794
              break;
             } else {
              _abort(); //@line 1797
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 1807
           $798 = 7076 + ($797 << 2) | 0; //@line 1808
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 1813
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[1694] = HEAP32[1694] & ~(1 << $797); //@line 1822
             break L311;
            } else {
             if ((HEAP32[1697] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 1828
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 1836
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[1697] | 0; //@line 1846
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 1849
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 1853
           $815 = $718 + 16 | 0; //@line 1854
           $816 = HEAP32[$815 >> 2] | 0; //@line 1855
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 1861
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 1865
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 1867
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 1873
           if (!$822) {
            break;
           }
           if ((HEAP32[1697] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 1881
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 1885
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 1887
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 1894
         $$0287$i$i = $742 + $723 | 0; //@line 1894
        } else {
         $$0$i17$i = $718; //@line 1896
         $$0287$i$i = $723; //@line 1896
        }
        $830 = $$0$i17$i + 4 | 0; //@line 1898
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 1901
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 1904
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 1906
        $836 = $$0287$i$i >>> 3; //@line 1907
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 6812 + ($836 << 1 << 2) | 0; //@line 1911
         $840 = HEAP32[1693] | 0; //@line 1912
         $841 = 1 << $836; //@line 1913
         do {
          if (!($840 & $841)) {
           HEAP32[1693] = $840 | $841; //@line 1919
           $$0295$i$i = $839; //@line 1921
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 1921
          } else {
           $845 = $839 + 8 | 0; //@line 1923
           $846 = HEAP32[$845 >> 2] | 0; //@line 1924
           if ((HEAP32[1697] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 1928
            $$pre$phi$i19$iZ2D = $845; //@line 1928
            break;
           }
           _abort(); //@line 1931
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 1935
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 1937
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 1939
         HEAP32[$722 + 12 >> 2] = $839; //@line 1941
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 1944
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 1948
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 1952
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 1957
          $858 = $852 << $857; //@line 1958
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 1961
          $863 = $858 << $861; //@line 1963
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 1966
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 1971
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 1977
         }
        } while (0);
        $877 = 7076 + ($$0296$i$i << 2) | 0; //@line 1980
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 1982
        $879 = $722 + 16 | 0; //@line 1983
        HEAP32[$879 + 4 >> 2] = 0; //@line 1985
        HEAP32[$879 >> 2] = 0; //@line 1986
        $881 = HEAP32[1694] | 0; //@line 1987
        $882 = 1 << $$0296$i$i; //@line 1988
        if (!($881 & $882)) {
         HEAP32[1694] = $881 | $882; //@line 1993
         HEAP32[$877 >> 2] = $722; //@line 1994
         HEAP32[$722 + 24 >> 2] = $877; //@line 1996
         HEAP32[$722 + 12 >> 2] = $722; //@line 1998
         HEAP32[$722 + 8 >> 2] = $722; //@line 2000
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 2009
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 2009
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 2016
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 2020
         $902 = HEAP32[$900 >> 2] | 0; //@line 2022
         if (!$902) {
          label = 260; //@line 2025
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 2028
          $$0289$i$i = $902; //@line 2028
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[1697] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 2035
         } else {
          HEAP32[$900 >> 2] = $722; //@line 2038
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 2040
          HEAP32[$722 + 12 >> 2] = $722; //@line 2042
          HEAP32[$722 + 8 >> 2] = $722; //@line 2044
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 2049
         $910 = HEAP32[$909 >> 2] | 0; //@line 2050
         $911 = HEAP32[1697] | 0; //@line 2051
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 2057
          HEAP32[$909 >> 2] = $722; //@line 2058
          HEAP32[$722 + 8 >> 2] = $910; //@line 2060
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 2062
          HEAP32[$722 + 24 >> 2] = 0; //@line 2064
          break;
         } else {
          _abort(); //@line 2067
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 2074
      STACKTOP = sp; //@line 2075
      return $$0 | 0; //@line 2075
     } else {
      $$0$i$i$i = 7220; //@line 2077
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 2081
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 2086
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 2094
    }
    $927 = $923 + -47 | 0; //@line 2096
    $929 = $927 + 8 | 0; //@line 2098
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 2104
    $936 = $636 + 16 | 0; //@line 2105
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 2107
    $939 = $938 + 8 | 0; //@line 2108
    $940 = $938 + 24 | 0; //@line 2109
    $941 = $$723947$i + -40 | 0; //@line 2110
    $943 = $$748$i + 8 | 0; //@line 2112
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 2117
    $949 = $$748$i + $948 | 0; //@line 2118
    $950 = $941 - $948 | 0; //@line 2119
    HEAP32[1699] = $949; //@line 2120
    HEAP32[1696] = $950; //@line 2121
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 2124
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 2127
    HEAP32[1700] = HEAP32[1815]; //@line 2129
    $956 = $938 + 4 | 0; //@line 2130
    HEAP32[$956 >> 2] = 27; //@line 2131
    HEAP32[$939 >> 2] = HEAP32[1805]; //@line 2132
    HEAP32[$939 + 4 >> 2] = HEAP32[1806]; //@line 2132
    HEAP32[$939 + 8 >> 2] = HEAP32[1807]; //@line 2132
    HEAP32[$939 + 12 >> 2] = HEAP32[1808]; //@line 2132
    HEAP32[1805] = $$748$i; //@line 2133
    HEAP32[1806] = $$723947$i; //@line 2134
    HEAP32[1808] = 0; //@line 2135
    HEAP32[1807] = $939; //@line 2136
    $958 = $940; //@line 2137
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 2139
     HEAP32[$958 >> 2] = 7; //@line 2140
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 2153
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 2156
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 2159
     HEAP32[$938 >> 2] = $964; //@line 2160
     $969 = $964 >>> 3; //@line 2161
     if ($964 >>> 0 < 256) {
      $972 = 6812 + ($969 << 1 << 2) | 0; //@line 2165
      $973 = HEAP32[1693] | 0; //@line 2166
      $974 = 1 << $969; //@line 2167
      if (!($973 & $974)) {
       HEAP32[1693] = $973 | $974; //@line 2172
       $$0211$i$i = $972; //@line 2174
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 2174
      } else {
       $978 = $972 + 8 | 0; //@line 2176
       $979 = HEAP32[$978 >> 2] | 0; //@line 2177
       if ((HEAP32[1697] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 2181
       } else {
        $$0211$i$i = $979; //@line 2184
        $$pre$phi$i$iZ2D = $978; //@line 2184
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 2187
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 2189
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 2191
      HEAP32[$636 + 12 >> 2] = $972; //@line 2193
      break;
     }
     $985 = $964 >>> 8; //@line 2196
     if (!$985) {
      $$0212$i$i = 0; //@line 2199
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 2203
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 2207
       $991 = $985 << $990; //@line 2208
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 2211
       $996 = $991 << $994; //@line 2213
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 2216
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 2221
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 2227
      }
     }
     $1010 = 7076 + ($$0212$i$i << 2) | 0; //@line 2230
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 2232
     HEAP32[$636 + 20 >> 2] = 0; //@line 2234
     HEAP32[$936 >> 2] = 0; //@line 2235
     $1013 = HEAP32[1694] | 0; //@line 2236
     $1014 = 1 << $$0212$i$i; //@line 2237
     if (!($1013 & $1014)) {
      HEAP32[1694] = $1013 | $1014; //@line 2242
      HEAP32[$1010 >> 2] = $636; //@line 2243
      HEAP32[$636 + 24 >> 2] = $1010; //@line 2245
      HEAP32[$636 + 12 >> 2] = $636; //@line 2247
      HEAP32[$636 + 8 >> 2] = $636; //@line 2249
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 2258
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 2258
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 2265
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 2269
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 2271
      if (!$1034) {
       label = 286; //@line 2274
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 2277
       $$0207$i$i = $1034; //@line 2277
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[1697] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 2284
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 2287
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 2289
       HEAP32[$636 + 12 >> 2] = $636; //@line 2291
       HEAP32[$636 + 8 >> 2] = $636; //@line 2293
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 2298
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 2299
      $1043 = HEAP32[1697] | 0; //@line 2300
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 2306
       HEAP32[$1041 >> 2] = $636; //@line 2307
       HEAP32[$636 + 8 >> 2] = $1042; //@line 2309
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 2311
       HEAP32[$636 + 24 >> 2] = 0; //@line 2313
       break;
      } else {
       _abort(); //@line 2316
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[1696] | 0; //@line 2323
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 2326
   HEAP32[1696] = $1054; //@line 2327
   $1055 = HEAP32[1699] | 0; //@line 2328
   $1056 = $1055 + $$0197 | 0; //@line 2329
   HEAP32[1699] = $1056; //@line 2330
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 2333
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 2336
   $$0 = $1055 + 8 | 0; //@line 2338
   STACKTOP = sp; //@line 2339
   return $$0 | 0; //@line 2339
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 2343
 $$0 = 0; //@line 2344
 STACKTOP = sp; //@line 2345
 return $$0 | 0; //@line 2345
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_212($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $214 = 0, $215 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $286 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 16907
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16909
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16911
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16913
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16915
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16917
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16919
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16921
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16923
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16925
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16927
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16929
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16931
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16933
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16935
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16937
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16939
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 16941
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 16943
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 16945
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 16947
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 16949
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 16951
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 16953
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 16955
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 16957
 $150 = HEAP32[$24 >> 2] | 0; //@line 16958
 if ($150 | 0) {
  $153 = HEAP32[$150 + 8 >> 2] | 0; //@line 16962
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(104) | 0; //@line 16963
  FUNCTION_TABLE_vi[$153 & 511]($30); //@line 16964
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 177; //@line 16967
   $154 = $ReallocAsyncCtx2 + 4 | 0; //@line 16968
   HEAP32[$154 >> 2] = $2; //@line 16969
   $155 = $ReallocAsyncCtx2 + 8 | 0; //@line 16970
   HEAP32[$155 >> 2] = $4; //@line 16971
   $156 = $ReallocAsyncCtx2 + 12 | 0; //@line 16972
   HEAP32[$156 >> 2] = $6; //@line 16973
   $157 = $ReallocAsyncCtx2 + 16 | 0; //@line 16974
   HEAP32[$157 >> 2] = $8; //@line 16975
   $158 = $ReallocAsyncCtx2 + 20 | 0; //@line 16976
   HEAP32[$158 >> 2] = $10; //@line 16977
   $159 = $ReallocAsyncCtx2 + 24 | 0; //@line 16978
   HEAP32[$159 >> 2] = $12; //@line 16979
   $160 = $ReallocAsyncCtx2 + 28 | 0; //@line 16980
   HEAP32[$160 >> 2] = $14; //@line 16981
   $161 = $ReallocAsyncCtx2 + 32 | 0; //@line 16982
   HEAP32[$161 >> 2] = $16; //@line 16983
   $162 = $ReallocAsyncCtx2 + 36 | 0; //@line 16984
   HEAP32[$162 >> 2] = $18; //@line 16985
   $163 = $ReallocAsyncCtx2 + 40 | 0; //@line 16986
   HEAP32[$163 >> 2] = $20; //@line 16987
   $164 = $ReallocAsyncCtx2 + 44 | 0; //@line 16988
   HEAP32[$164 >> 2] = $22; //@line 16989
   $165 = $ReallocAsyncCtx2 + 48 | 0; //@line 16990
   HEAP32[$165 >> 2] = $24; //@line 16991
   $166 = $ReallocAsyncCtx2 + 52 | 0; //@line 16992
   HEAP32[$166 >> 2] = $26; //@line 16993
   $167 = $ReallocAsyncCtx2 + 56 | 0; //@line 16994
   HEAP32[$167 >> 2] = $28; //@line 16995
   $168 = $ReallocAsyncCtx2 + 60 | 0; //@line 16996
   HEAP32[$168 >> 2] = $30; //@line 16997
   $169 = $ReallocAsyncCtx2 + 64 | 0; //@line 16998
   HEAP32[$169 >> 2] = $32; //@line 16999
   $170 = $ReallocAsyncCtx2 + 68 | 0; //@line 17000
   HEAP32[$170 >> 2] = $34; //@line 17001
   $171 = $ReallocAsyncCtx2 + 72 | 0; //@line 17002
   HEAP32[$171 >> 2] = $36; //@line 17003
   $172 = $ReallocAsyncCtx2 + 76 | 0; //@line 17004
   HEAP32[$172 >> 2] = $38; //@line 17005
   $173 = $ReallocAsyncCtx2 + 80 | 0; //@line 17006
   HEAP32[$173 >> 2] = $40; //@line 17007
   $174 = $ReallocAsyncCtx2 + 84 | 0; //@line 17008
   HEAP32[$174 >> 2] = $42; //@line 17009
   $175 = $ReallocAsyncCtx2 + 88 | 0; //@line 17010
   HEAP32[$175 >> 2] = $44; //@line 17011
   $176 = $ReallocAsyncCtx2 + 92 | 0; //@line 17012
   HEAP32[$176 >> 2] = $46; //@line 17013
   $177 = $ReallocAsyncCtx2 + 96 | 0; //@line 17014
   HEAP32[$177 >> 2] = $48; //@line 17015
   $178 = $ReallocAsyncCtx2 + 100 | 0; //@line 17016
   HEAP32[$178 >> 2] = $50; //@line 17017
   sp = STACKTOP; //@line 17018
   return;
  }
  ___async_unwind = 0; //@line 17021
  HEAP32[$ReallocAsyncCtx2 >> 2] = 177; //@line 17022
  $154 = $ReallocAsyncCtx2 + 4 | 0; //@line 17023
  HEAP32[$154 >> 2] = $2; //@line 17024
  $155 = $ReallocAsyncCtx2 + 8 | 0; //@line 17025
  HEAP32[$155 >> 2] = $4; //@line 17026
  $156 = $ReallocAsyncCtx2 + 12 | 0; //@line 17027
  HEAP32[$156 >> 2] = $6; //@line 17028
  $157 = $ReallocAsyncCtx2 + 16 | 0; //@line 17029
  HEAP32[$157 >> 2] = $8; //@line 17030
  $158 = $ReallocAsyncCtx2 + 20 | 0; //@line 17031
  HEAP32[$158 >> 2] = $10; //@line 17032
  $159 = $ReallocAsyncCtx2 + 24 | 0; //@line 17033
  HEAP32[$159 >> 2] = $12; //@line 17034
  $160 = $ReallocAsyncCtx2 + 28 | 0; //@line 17035
  HEAP32[$160 >> 2] = $14; //@line 17036
  $161 = $ReallocAsyncCtx2 + 32 | 0; //@line 17037
  HEAP32[$161 >> 2] = $16; //@line 17038
  $162 = $ReallocAsyncCtx2 + 36 | 0; //@line 17039
  HEAP32[$162 >> 2] = $18; //@line 17040
  $163 = $ReallocAsyncCtx2 + 40 | 0; //@line 17041
  HEAP32[$163 >> 2] = $20; //@line 17042
  $164 = $ReallocAsyncCtx2 + 44 | 0; //@line 17043
  HEAP32[$164 >> 2] = $22; //@line 17044
  $165 = $ReallocAsyncCtx2 + 48 | 0; //@line 17045
  HEAP32[$165 >> 2] = $24; //@line 17046
  $166 = $ReallocAsyncCtx2 + 52 | 0; //@line 17047
  HEAP32[$166 >> 2] = $26; //@line 17048
  $167 = $ReallocAsyncCtx2 + 56 | 0; //@line 17049
  HEAP32[$167 >> 2] = $28; //@line 17050
  $168 = $ReallocAsyncCtx2 + 60 | 0; //@line 17051
  HEAP32[$168 >> 2] = $30; //@line 17052
  $169 = $ReallocAsyncCtx2 + 64 | 0; //@line 17053
  HEAP32[$169 >> 2] = $32; //@line 17054
  $170 = $ReallocAsyncCtx2 + 68 | 0; //@line 17055
  HEAP32[$170 >> 2] = $34; //@line 17056
  $171 = $ReallocAsyncCtx2 + 72 | 0; //@line 17057
  HEAP32[$171 >> 2] = $36; //@line 17058
  $172 = $ReallocAsyncCtx2 + 76 | 0; //@line 17059
  HEAP32[$172 >> 2] = $38; //@line 17060
  $173 = $ReallocAsyncCtx2 + 80 | 0; //@line 17061
  HEAP32[$173 >> 2] = $40; //@line 17062
  $174 = $ReallocAsyncCtx2 + 84 | 0; //@line 17063
  HEAP32[$174 >> 2] = $42; //@line 17064
  $175 = $ReallocAsyncCtx2 + 88 | 0; //@line 17065
  HEAP32[$175 >> 2] = $44; //@line 17066
  $176 = $ReallocAsyncCtx2 + 92 | 0; //@line 17067
  HEAP32[$176 >> 2] = $46; //@line 17068
  $177 = $ReallocAsyncCtx2 + 96 | 0; //@line 17069
  HEAP32[$177 >> 2] = $48; //@line 17070
  $178 = $ReallocAsyncCtx2 + 100 | 0; //@line 17071
  HEAP32[$178 >> 2] = $50; //@line 17072
  sp = STACKTOP; //@line 17073
  return;
 }
 $179 = HEAP32[$32 >> 2] | 0; //@line 17076
 if (!$179) {
  $$02972$reg2mem$0 = $4; //@line 17079
  $$03071$reg2mem$0 = $2; //@line 17079
  $$reg2mem$0 = $8; //@line 17079
 } else {
  $182 = HEAP32[$179 + 8 >> 2] | 0; //@line 17082
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 17083
  FUNCTION_TABLE_vi[$182 & 511]($14); //@line 17084
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 178; //@line 17087
   $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 17088
   HEAP32[$183 >> 2] = $2; //@line 17089
   $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 17090
   HEAP32[$184 >> 2] = $4; //@line 17091
   $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 17092
   HEAP32[$185 >> 2] = $6; //@line 17093
   $186 = $ReallocAsyncCtx3 + 16 | 0; //@line 17094
   HEAP32[$186 >> 2] = $8; //@line 17095
   $187 = $ReallocAsyncCtx3 + 20 | 0; //@line 17096
   HEAP32[$187 >> 2] = $10; //@line 17097
   $188 = $ReallocAsyncCtx3 + 24 | 0; //@line 17098
   HEAP32[$188 >> 2] = $12; //@line 17099
   $189 = $ReallocAsyncCtx3 + 28 | 0; //@line 17100
   HEAP32[$189 >> 2] = $14; //@line 17101
   $190 = $ReallocAsyncCtx3 + 32 | 0; //@line 17102
   HEAP32[$190 >> 2] = $16; //@line 17103
   $191 = $ReallocAsyncCtx3 + 36 | 0; //@line 17104
   HEAP32[$191 >> 2] = $18; //@line 17105
   $192 = $ReallocAsyncCtx3 + 40 | 0; //@line 17106
   HEAP32[$192 >> 2] = $20; //@line 17107
   $193 = $ReallocAsyncCtx3 + 44 | 0; //@line 17108
   HEAP32[$193 >> 2] = $22; //@line 17109
   $194 = $ReallocAsyncCtx3 + 48 | 0; //@line 17110
   HEAP32[$194 >> 2] = $24; //@line 17111
   $195 = $ReallocAsyncCtx3 + 52 | 0; //@line 17112
   HEAP32[$195 >> 2] = $26; //@line 17113
   $196 = $ReallocAsyncCtx3 + 56 | 0; //@line 17114
   HEAP32[$196 >> 2] = $28; //@line 17115
   $197 = $ReallocAsyncCtx3 + 60 | 0; //@line 17116
   HEAP32[$197 >> 2] = $30; //@line 17117
   $198 = $ReallocAsyncCtx3 + 64 | 0; //@line 17118
   HEAP32[$198 >> 2] = $32; //@line 17119
   $199 = $ReallocAsyncCtx3 + 68 | 0; //@line 17120
   HEAP32[$199 >> 2] = $34; //@line 17121
   $200 = $ReallocAsyncCtx3 + 72 | 0; //@line 17122
   HEAP32[$200 >> 2] = $36; //@line 17123
   $201 = $ReallocAsyncCtx3 + 76 | 0; //@line 17124
   HEAP32[$201 >> 2] = $38; //@line 17125
   $202 = $ReallocAsyncCtx3 + 80 | 0; //@line 17126
   HEAP32[$202 >> 2] = $40; //@line 17127
   $203 = $ReallocAsyncCtx3 + 84 | 0; //@line 17128
   HEAP32[$203 >> 2] = $42; //@line 17129
   $204 = $ReallocAsyncCtx3 + 88 | 0; //@line 17130
   HEAP32[$204 >> 2] = $44; //@line 17131
   $205 = $ReallocAsyncCtx3 + 92 | 0; //@line 17132
   HEAP32[$205 >> 2] = $46; //@line 17133
   $206 = $ReallocAsyncCtx3 + 96 | 0; //@line 17134
   HEAP32[$206 >> 2] = $48; //@line 17135
   $207 = $ReallocAsyncCtx3 + 100 | 0; //@line 17136
   HEAP32[$207 >> 2] = $50; //@line 17137
   sp = STACKTOP; //@line 17138
   return;
  }
  ___async_unwind = 0; //@line 17141
  HEAP32[$ReallocAsyncCtx3 >> 2] = 178; //@line 17142
  $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 17143
  HEAP32[$183 >> 2] = $2; //@line 17144
  $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 17145
  HEAP32[$184 >> 2] = $4; //@line 17146
  $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 17147
  HEAP32[$185 >> 2] = $6; //@line 17148
  $186 = $ReallocAsyncCtx3 + 16 | 0; //@line 17149
  HEAP32[$186 >> 2] = $8; //@line 17150
  $187 = $ReallocAsyncCtx3 + 20 | 0; //@line 17151
  HEAP32[$187 >> 2] = $10; //@line 17152
  $188 = $ReallocAsyncCtx3 + 24 | 0; //@line 17153
  HEAP32[$188 >> 2] = $12; //@line 17154
  $189 = $ReallocAsyncCtx3 + 28 | 0; //@line 17155
  HEAP32[$189 >> 2] = $14; //@line 17156
  $190 = $ReallocAsyncCtx3 + 32 | 0; //@line 17157
  HEAP32[$190 >> 2] = $16; //@line 17158
  $191 = $ReallocAsyncCtx3 + 36 | 0; //@line 17159
  HEAP32[$191 >> 2] = $18; //@line 17160
  $192 = $ReallocAsyncCtx3 + 40 | 0; //@line 17161
  HEAP32[$192 >> 2] = $20; //@line 17162
  $193 = $ReallocAsyncCtx3 + 44 | 0; //@line 17163
  HEAP32[$193 >> 2] = $22; //@line 17164
  $194 = $ReallocAsyncCtx3 + 48 | 0; //@line 17165
  HEAP32[$194 >> 2] = $24; //@line 17166
  $195 = $ReallocAsyncCtx3 + 52 | 0; //@line 17167
  HEAP32[$195 >> 2] = $26; //@line 17168
  $196 = $ReallocAsyncCtx3 + 56 | 0; //@line 17169
  HEAP32[$196 >> 2] = $28; //@line 17170
  $197 = $ReallocAsyncCtx3 + 60 | 0; //@line 17171
  HEAP32[$197 >> 2] = $30; //@line 17172
  $198 = $ReallocAsyncCtx3 + 64 | 0; //@line 17173
  HEAP32[$198 >> 2] = $32; //@line 17174
  $199 = $ReallocAsyncCtx3 + 68 | 0; //@line 17175
  HEAP32[$199 >> 2] = $34; //@line 17176
  $200 = $ReallocAsyncCtx3 + 72 | 0; //@line 17177
  HEAP32[$200 >> 2] = $36; //@line 17178
  $201 = $ReallocAsyncCtx3 + 76 | 0; //@line 17179
  HEAP32[$201 >> 2] = $38; //@line 17180
  $202 = $ReallocAsyncCtx3 + 80 | 0; //@line 17181
  HEAP32[$202 >> 2] = $40; //@line 17182
  $203 = $ReallocAsyncCtx3 + 84 | 0; //@line 17183
  HEAP32[$203 >> 2] = $42; //@line 17184
  $204 = $ReallocAsyncCtx3 + 88 | 0; //@line 17185
  HEAP32[$204 >> 2] = $44; //@line 17186
  $205 = $ReallocAsyncCtx3 + 92 | 0; //@line 17187
  HEAP32[$205 >> 2] = $46; //@line 17188
  $206 = $ReallocAsyncCtx3 + 96 | 0; //@line 17189
  HEAP32[$206 >> 2] = $48; //@line 17190
  $207 = $ReallocAsyncCtx3 + 100 | 0; //@line 17191
  HEAP32[$207 >> 2] = $50; //@line 17192
  sp = STACKTOP; //@line 17193
  return;
 }
 L15 : while (1) {
  $208 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 17197
  $209 = $208 + 76 | 0; //@line 17198
  $210 = HEAP32[$209 >> 2] | 0; //@line 17199
  if ($210 | 0) {
   if ($210 >>> 0 <= 100) {
    label = 29; //@line 17204
    break;
   }
   HEAP32[$209 >> 2] = $210 + -100; //@line 17208
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 17213
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 17213
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 17215
   $$131 = $$03071$reg2mem$0; //@line 17215
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 17218
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 17221
    break L15;
   }
   $52 = 6740 + ($$02972$reg2mem$1 << 2) | 0; //@line 17224
   $54 = HEAP32[$52 >> 2] | 0; //@line 17225
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 17237
   break;
  }
  $84 = $54 + 72 | 0; //@line 17240
  $85 = HEAP32[$84 >> 2] | 0; //@line 17241
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 17245
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 17246
   $$03071$reg2mem$0 = $$131; //@line 17246
   $$reg2mem$0 = $52; //@line 17246
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 17253
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 17256
    $$03071$reg2mem$0 = $$131; //@line 17256
    $$reg2mem$0 = $52; //@line 17256
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7620] = 0; //@line 17264
   return;
  }
  $275 = $$131 + 44 | 0; //@line 17267
  $276 = HEAP32[$275 >> 2] | 0; //@line 17268
  if (!$276) {
   $284 = $10 + 12 | 0; //@line 17271
   HEAP32[$284 >> 2] = 0; //@line 17272
   $286 = $12 + 4 | 0; //@line 17274
   HEAP32[$286 >> 2] = 0; //@line 17276
   HEAP32[$286 + 4 >> 2] = 0; //@line 17279
   HEAP32[$12 >> 2] = 3; //@line 17280
   $290 = $12 + 12 | 0; //@line 17281
   HEAP32[$290 >> 2] = 712; //@line 17282
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 17283
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 100, $12) | 0; //@line 17284
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 17287
    $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 17288
    HEAP32[$291 >> 2] = $290; //@line 17289
    $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 17290
    HEAP32[$292 >> 2] = $284; //@line 17291
    $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 17292
    HEAP32[$293 >> 2] = $12; //@line 17293
    $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 17294
    HEAP32[$294 >> 2] = $10; //@line 17295
    sp = STACKTOP; //@line 17296
    return;
   }
   ___async_unwind = 0; //@line 17299
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 17300
   $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 17301
   HEAP32[$291 >> 2] = $290; //@line 17302
   $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 17303
   HEAP32[$292 >> 2] = $284; //@line 17304
   $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 17305
   HEAP32[$293 >> 2] = $12; //@line 17306
   $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 17307
   HEAP32[$294 >> 2] = $10; //@line 17308
   sp = STACKTOP; //@line 17309
   return;
  } else {
   $280 = HEAP32[$276 + 4 >> 2] | 0; //@line 17314
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 17315
   FUNCTION_TABLE_vii[$280 & 7]($10, $$131 + 32 | 0); //@line 17316
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 17319
    $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 17320
    HEAP32[$281 >> 2] = $275; //@line 17321
    $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 17322
    HEAP32[$282 >> 2] = $10; //@line 17323
    $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 17324
    HEAP32[$283 >> 2] = $12; //@line 17325
    sp = STACKTOP; //@line 17326
    return;
   }
   ___async_unwind = 0; //@line 17329
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 17330
   $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 17331
   HEAP32[$281 >> 2] = $275; //@line 17332
   $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 17333
   HEAP32[$282 >> 2] = $10; //@line 17334
   $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 17335
   HEAP32[$283 >> 2] = $12; //@line 17336
   sp = STACKTOP; //@line 17337
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 17342
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 17343
  __ZL28nsapi_dns_query_async_deletei($59); //@line 17344
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 17347
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 17348
   HEAP32[$60 >> 2] = $$131; //@line 17349
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 17350
   HEAP32[$61 >> 2] = $$02972$reg2mem$1; //@line 17351
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 17352
   HEAP32[$62 >> 2] = $6; //@line 17353
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 17354
   HEAP32[$63 >> 2] = $10; //@line 17355
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 17356
   HEAP32[$64 >> 2] = $12; //@line 17357
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 17358
   HEAP32[$65 >> 2] = $14; //@line 17359
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 17360
   HEAP32[$66 >> 2] = $16; //@line 17361
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 17362
   HEAP32[$67 >> 2] = $18; //@line 17363
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 17364
   HEAP32[$68 >> 2] = $20; //@line 17365
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 17366
   HEAP32[$69 >> 2] = $22; //@line 17367
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 17368
   HEAP32[$70 >> 2] = $24; //@line 17369
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 17370
   HEAP32[$71 >> 2] = $26; //@line 17371
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 17372
   HEAP32[$72 >> 2] = $28; //@line 17373
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 17374
   HEAP32[$73 >> 2] = $30; //@line 17375
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 17376
   HEAP32[$74 >> 2] = $32; //@line 17377
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 17378
   HEAP32[$75 >> 2] = $34; //@line 17379
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 17380
   HEAP32[$76 >> 2] = $36; //@line 17381
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 17382
   HEAP32[$77 >> 2] = $38; //@line 17383
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 17384
   HEAP32[$78 >> 2] = $40; //@line 17385
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 17386
   HEAP32[$79 >> 2] = $42; //@line 17387
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 17388
   HEAP32[$80 >> 2] = $44; //@line 17389
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 17390
   HEAP32[$81 >> 2] = $46; //@line 17391
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 17392
   HEAP32[$82 >> 2] = $48; //@line 17393
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 17394
   HEAP32[$83 >> 2] = $50; //@line 17395
   sp = STACKTOP; //@line 17396
   return;
  }
  ___async_unwind = 0; //@line 17399
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 17400
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 17401
  HEAP32[$60 >> 2] = $$131; //@line 17402
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 17403
  HEAP32[$61 >> 2] = $$02972$reg2mem$1; //@line 17404
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 17405
  HEAP32[$62 >> 2] = $6; //@line 17406
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 17407
  HEAP32[$63 >> 2] = $10; //@line 17408
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 17409
  HEAP32[$64 >> 2] = $12; //@line 17410
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 17411
  HEAP32[$65 >> 2] = $14; //@line 17412
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 17413
  HEAP32[$66 >> 2] = $16; //@line 17414
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 17415
  HEAP32[$67 >> 2] = $18; //@line 17416
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 17417
  HEAP32[$68 >> 2] = $20; //@line 17418
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 17419
  HEAP32[$69 >> 2] = $22; //@line 17420
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 17421
  HEAP32[$70 >> 2] = $24; //@line 17422
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 17423
  HEAP32[$71 >> 2] = $26; //@line 17424
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 17425
  HEAP32[$72 >> 2] = $28; //@line 17426
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 17427
  HEAP32[$73 >> 2] = $30; //@line 17428
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 17429
  HEAP32[$74 >> 2] = $32; //@line 17430
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 17431
  HEAP32[$75 >> 2] = $34; //@line 17432
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 17433
  HEAP32[$76 >> 2] = $36; //@line 17434
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 17435
  HEAP32[$77 >> 2] = $38; //@line 17436
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 17437
  HEAP32[$78 >> 2] = $40; //@line 17438
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 17439
  HEAP32[$79 >> 2] = $42; //@line 17440
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 17441
  HEAP32[$80 >> 2] = $44; //@line 17442
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 17443
  HEAP32[$81 >> 2] = $46; //@line 17444
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 17445
  HEAP32[$82 >> 2] = $48; //@line 17446
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 17447
  HEAP32[$83 >> 2] = $50; //@line 17448
  sp = STACKTOP; //@line 17449
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 17454
  $92 = $54 + 44 | 0; //@line 17455
  $93 = HEAP32[$92 >> 2] | 0; //@line 17456
  if (!$93) {
   HEAP32[$16 >> 2] = 0; //@line 17459
   $124 = HEAP32[$54 >> 2] | 0; //@line 17460
   HEAP32[$18 >> 2] = 0; //@line 17461
   HEAP32[$20 >> 2] = 175; //@line 17462
   HEAP32[$22 >> 2] = $124; //@line 17463
   HEAP32[$24 >> 2] = 724; //@line 17464
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 17465
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($26, 0, $28) | 0; //@line 17466
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 17469
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 17470
    HEAP32[$125 >> 2] = $$131; //@line 17471
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 17472
    HEAP32[$126 >> 2] = $$02972$reg2mem$1; //@line 17473
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 17474
    HEAP32[$127 >> 2] = $6; //@line 17475
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 17476
    HEAP32[$128 >> 2] = $52; //@line 17477
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 17478
    HEAP32[$129 >> 2] = $10; //@line 17479
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 17480
    HEAP32[$130 >> 2] = $12; //@line 17481
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 17482
    HEAP32[$131 >> 2] = $14; //@line 17483
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 17484
    HEAP32[$132 >> 2] = $16; //@line 17485
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 17486
    HEAP32[$133 >> 2] = $18; //@line 17487
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 17488
    HEAP32[$134 >> 2] = $20; //@line 17489
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 17490
    HEAP32[$135 >> 2] = $22; //@line 17491
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 17492
    HEAP32[$136 >> 2] = $24; //@line 17493
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 17494
    HEAP32[$137 >> 2] = $26; //@line 17495
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 17496
    HEAP32[$138 >> 2] = $28; //@line 17497
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 17498
    HEAP32[$139 >> 2] = $30; //@line 17499
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 17500
    HEAP32[$140 >> 2] = $32; //@line 17501
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 17502
    HEAP32[$141 >> 2] = $34; //@line 17503
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 17504
    HEAP32[$142 >> 2] = $36; //@line 17505
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 17506
    HEAP32[$143 >> 2] = $38; //@line 17507
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 17508
    HEAP32[$144 >> 2] = $40; //@line 17509
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 17510
    HEAP32[$145 >> 2] = $42; //@line 17511
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 17512
    HEAP32[$146 >> 2] = $44; //@line 17513
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 17514
    HEAP32[$147 >> 2] = $46; //@line 17515
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 17516
    HEAP32[$148 >> 2] = $48; //@line 17517
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 17518
    HEAP32[$149 >> 2] = $50; //@line 17519
    sp = STACKTOP; //@line 17520
    return;
   }
   ___async_unwind = 0; //@line 17523
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 17524
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 17525
   HEAP32[$125 >> 2] = $$131; //@line 17526
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 17527
   HEAP32[$126 >> 2] = $$02972$reg2mem$1; //@line 17528
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 17529
   HEAP32[$127 >> 2] = $6; //@line 17530
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 17531
   HEAP32[$128 >> 2] = $52; //@line 17532
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 17533
   HEAP32[$129 >> 2] = $10; //@line 17534
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 17535
   HEAP32[$130 >> 2] = $12; //@line 17536
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 17537
   HEAP32[$131 >> 2] = $14; //@line 17538
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 17539
   HEAP32[$132 >> 2] = $16; //@line 17540
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 17541
   HEAP32[$133 >> 2] = $18; //@line 17542
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 17543
   HEAP32[$134 >> 2] = $20; //@line 17544
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 17545
   HEAP32[$135 >> 2] = $22; //@line 17546
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 17547
   HEAP32[$136 >> 2] = $24; //@line 17548
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 17549
   HEAP32[$137 >> 2] = $26; //@line 17550
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 17551
   HEAP32[$138 >> 2] = $28; //@line 17552
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 17553
   HEAP32[$139 >> 2] = $30; //@line 17554
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 17555
   HEAP32[$140 >> 2] = $32; //@line 17556
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 17557
   HEAP32[$141 >> 2] = $34; //@line 17558
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 17559
   HEAP32[$142 >> 2] = $36; //@line 17560
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 17561
   HEAP32[$143 >> 2] = $38; //@line 17562
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 17563
   HEAP32[$144 >> 2] = $40; //@line 17564
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 17565
   HEAP32[$145 >> 2] = $42; //@line 17566
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 17567
   HEAP32[$146 >> 2] = $44; //@line 17568
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 17569
   HEAP32[$147 >> 2] = $46; //@line 17570
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 17571
   HEAP32[$148 >> 2] = $48; //@line 17572
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 17573
   HEAP32[$149 >> 2] = $50; //@line 17574
   sp = STACKTOP; //@line 17575
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 17580
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 17581
   FUNCTION_TABLE_vii[$97 & 7]($14, $54 + 32 | 0); //@line 17582
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 17585
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 17586
    HEAP32[$98 >> 2] = $$131; //@line 17587
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 17588
    HEAP32[$99 >> 2] = $$02972$reg2mem$1; //@line 17589
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 17590
    HEAP32[$100 >> 2] = $6; //@line 17591
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 17592
    HEAP32[$101 >> 2] = $52; //@line 17593
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 17594
    HEAP32[$102 >> 2] = $10; //@line 17595
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 17596
    HEAP32[$103 >> 2] = $12; //@line 17597
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 17598
    HEAP32[$104 >> 2] = $14; //@line 17599
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 17600
    HEAP32[$105 >> 2] = $16; //@line 17601
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 17602
    HEAP32[$106 >> 2] = $18; //@line 17603
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 17604
    HEAP32[$107 >> 2] = $20; //@line 17605
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 17606
    HEAP32[$108 >> 2] = $22; //@line 17607
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 17608
    HEAP32[$109 >> 2] = $24; //@line 17609
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 17610
    HEAP32[$110 >> 2] = $26; //@line 17611
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 17612
    HEAP32[$111 >> 2] = $28; //@line 17613
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 17614
    HEAP32[$112 >> 2] = $30; //@line 17615
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 17616
    HEAP32[$113 >> 2] = $32; //@line 17617
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 17618
    HEAP32[$114 >> 2] = $34; //@line 17619
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 17620
    HEAP32[$115 >> 2] = $36; //@line 17621
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 17622
    HEAP32[$116 >> 2] = $38; //@line 17623
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 17624
    HEAP32[$117 >> 2] = $40; //@line 17625
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 17626
    HEAP32[$118 >> 2] = $42; //@line 17627
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 17628
    HEAP32[$119 >> 2] = $44; //@line 17629
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 17630
    HEAP32[$120 >> 2] = $46; //@line 17631
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 17632
    HEAP32[$121 >> 2] = $48; //@line 17633
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 17634
    HEAP32[$122 >> 2] = $50; //@line 17635
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 17636
    HEAP32[$123 >> 2] = $92; //@line 17637
    sp = STACKTOP; //@line 17638
    return;
   }
   ___async_unwind = 0; //@line 17641
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 17642
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 17643
   HEAP32[$98 >> 2] = $$131; //@line 17644
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 17645
   HEAP32[$99 >> 2] = $$02972$reg2mem$1; //@line 17646
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 17647
   HEAP32[$100 >> 2] = $6; //@line 17648
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 17649
   HEAP32[$101 >> 2] = $52; //@line 17650
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 17651
   HEAP32[$102 >> 2] = $10; //@line 17652
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 17653
   HEAP32[$103 >> 2] = $12; //@line 17654
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 17655
   HEAP32[$104 >> 2] = $14; //@line 17656
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 17657
   HEAP32[$105 >> 2] = $16; //@line 17658
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 17659
   HEAP32[$106 >> 2] = $18; //@line 17660
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 17661
   HEAP32[$107 >> 2] = $20; //@line 17662
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 17663
   HEAP32[$108 >> 2] = $22; //@line 17664
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 17665
   HEAP32[$109 >> 2] = $24; //@line 17666
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 17667
   HEAP32[$110 >> 2] = $26; //@line 17668
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 17669
   HEAP32[$111 >> 2] = $28; //@line 17670
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 17671
   HEAP32[$112 >> 2] = $30; //@line 17672
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 17673
   HEAP32[$113 >> 2] = $32; //@line 17674
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 17675
   HEAP32[$114 >> 2] = $34; //@line 17676
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 17677
   HEAP32[$115 >> 2] = $36; //@line 17678
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 17679
   HEAP32[$116 >> 2] = $38; //@line 17680
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 17681
   HEAP32[$117 >> 2] = $40; //@line 17682
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 17683
   HEAP32[$118 >> 2] = $42; //@line 17684
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 17685
   HEAP32[$119 >> 2] = $44; //@line 17686
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 17687
   HEAP32[$120 >> 2] = $46; //@line 17688
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 17689
   HEAP32[$121 >> 2] = $48; //@line 17690
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 17691
   HEAP32[$122 >> 2] = $50; //@line 17692
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 17693
   HEAP32[$123 >> 2] = $92; //@line 17694
   sp = STACKTOP; //@line 17695
   return;
  }
 } else if ((label | 0) == 29) {
  HEAP32[$209 >> 2] = 0; //@line 17700
  $214 = $208 + 44 | 0; //@line 17701
  $215 = HEAP32[$214 >> 2] | 0; //@line 17702
  if (!$215) {
   HEAP32[$36 >> 2] = 0; //@line 17705
   $246 = HEAP32[$208 >> 2] | 0; //@line 17706
   HEAP32[$38 >> 2] = 0; //@line 17707
   HEAP32[$40 >> 2] = 180; //@line 17708
   HEAP32[$42 >> 2] = $246; //@line 17709
   HEAP32[$6 >> 2] = 724; //@line 17710
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 17711
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 17712
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 17715
    $247 = $ReallocAsyncCtx13 + 4 | 0; //@line 17716
    HEAP32[$247 >> 2] = $$03071$reg2mem$0; //@line 17717
    $248 = $ReallocAsyncCtx13 + 8 | 0; //@line 17718
    HEAP32[$248 >> 2] = $$02972$reg2mem$0; //@line 17719
    $249 = $ReallocAsyncCtx13 + 12 | 0; //@line 17720
    HEAP32[$249 >> 2] = $6; //@line 17721
    $250 = $ReallocAsyncCtx13 + 16 | 0; //@line 17722
    HEAP32[$250 >> 2] = $$reg2mem$0; //@line 17723
    $251 = $ReallocAsyncCtx13 + 20 | 0; //@line 17724
    HEAP32[$251 >> 2] = $10; //@line 17725
    $252 = $ReallocAsyncCtx13 + 24 | 0; //@line 17726
    HEAP32[$252 >> 2] = $12; //@line 17727
    $253 = $ReallocAsyncCtx13 + 28 | 0; //@line 17728
    HEAP32[$253 >> 2] = $14; //@line 17729
    $254 = $ReallocAsyncCtx13 + 32 | 0; //@line 17730
    HEAP32[$254 >> 2] = $16; //@line 17731
    $255 = $ReallocAsyncCtx13 + 36 | 0; //@line 17732
    HEAP32[$255 >> 2] = $18; //@line 17733
    $256 = $ReallocAsyncCtx13 + 40 | 0; //@line 17734
    HEAP32[$256 >> 2] = $20; //@line 17735
    $257 = $ReallocAsyncCtx13 + 44 | 0; //@line 17736
    HEAP32[$257 >> 2] = $22; //@line 17737
    $258 = $ReallocAsyncCtx13 + 48 | 0; //@line 17738
    HEAP32[$258 >> 2] = $24; //@line 17739
    $259 = $ReallocAsyncCtx13 + 52 | 0; //@line 17740
    HEAP32[$259 >> 2] = $26; //@line 17741
    $260 = $ReallocAsyncCtx13 + 56 | 0; //@line 17742
    HEAP32[$260 >> 2] = $28; //@line 17743
    $261 = $ReallocAsyncCtx13 + 60 | 0; //@line 17744
    HEAP32[$261 >> 2] = $30; //@line 17745
    $262 = $ReallocAsyncCtx13 + 64 | 0; //@line 17746
    HEAP32[$262 >> 2] = $32; //@line 17747
    $263 = $ReallocAsyncCtx13 + 68 | 0; //@line 17748
    HEAP32[$263 >> 2] = $34; //@line 17749
    $264 = $ReallocAsyncCtx13 + 72 | 0; //@line 17750
    HEAP32[$264 >> 2] = $36; //@line 17751
    $265 = $ReallocAsyncCtx13 + 76 | 0; //@line 17752
    HEAP32[$265 >> 2] = $38; //@line 17753
    $266 = $ReallocAsyncCtx13 + 80 | 0; //@line 17754
    HEAP32[$266 >> 2] = $40; //@line 17755
    $267 = $ReallocAsyncCtx13 + 84 | 0; //@line 17756
    HEAP32[$267 >> 2] = $42; //@line 17757
    $268 = $ReallocAsyncCtx13 + 88 | 0; //@line 17758
    HEAP32[$268 >> 2] = $44; //@line 17759
    $269 = $ReallocAsyncCtx13 + 92 | 0; //@line 17760
    HEAP32[$269 >> 2] = $46; //@line 17761
    $270 = $ReallocAsyncCtx13 + 96 | 0; //@line 17762
    HEAP32[$270 >> 2] = $48; //@line 17763
    $271 = $ReallocAsyncCtx13 + 100 | 0; //@line 17764
    HEAP32[$271 >> 2] = $50; //@line 17765
    sp = STACKTOP; //@line 17766
    return;
   }
   ___async_unwind = 0; //@line 17769
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 17770
   $247 = $ReallocAsyncCtx13 + 4 | 0; //@line 17771
   HEAP32[$247 >> 2] = $$03071$reg2mem$0; //@line 17772
   $248 = $ReallocAsyncCtx13 + 8 | 0; //@line 17773
   HEAP32[$248 >> 2] = $$02972$reg2mem$0; //@line 17774
   $249 = $ReallocAsyncCtx13 + 12 | 0; //@line 17775
   HEAP32[$249 >> 2] = $6; //@line 17776
   $250 = $ReallocAsyncCtx13 + 16 | 0; //@line 17777
   HEAP32[$250 >> 2] = $$reg2mem$0; //@line 17778
   $251 = $ReallocAsyncCtx13 + 20 | 0; //@line 17779
   HEAP32[$251 >> 2] = $10; //@line 17780
   $252 = $ReallocAsyncCtx13 + 24 | 0; //@line 17781
   HEAP32[$252 >> 2] = $12; //@line 17782
   $253 = $ReallocAsyncCtx13 + 28 | 0; //@line 17783
   HEAP32[$253 >> 2] = $14; //@line 17784
   $254 = $ReallocAsyncCtx13 + 32 | 0; //@line 17785
   HEAP32[$254 >> 2] = $16; //@line 17786
   $255 = $ReallocAsyncCtx13 + 36 | 0; //@line 17787
   HEAP32[$255 >> 2] = $18; //@line 17788
   $256 = $ReallocAsyncCtx13 + 40 | 0; //@line 17789
   HEAP32[$256 >> 2] = $20; //@line 17790
   $257 = $ReallocAsyncCtx13 + 44 | 0; //@line 17791
   HEAP32[$257 >> 2] = $22; //@line 17792
   $258 = $ReallocAsyncCtx13 + 48 | 0; //@line 17793
   HEAP32[$258 >> 2] = $24; //@line 17794
   $259 = $ReallocAsyncCtx13 + 52 | 0; //@line 17795
   HEAP32[$259 >> 2] = $26; //@line 17796
   $260 = $ReallocAsyncCtx13 + 56 | 0; //@line 17797
   HEAP32[$260 >> 2] = $28; //@line 17798
   $261 = $ReallocAsyncCtx13 + 60 | 0; //@line 17799
   HEAP32[$261 >> 2] = $30; //@line 17800
   $262 = $ReallocAsyncCtx13 + 64 | 0; //@line 17801
   HEAP32[$262 >> 2] = $32; //@line 17802
   $263 = $ReallocAsyncCtx13 + 68 | 0; //@line 17803
   HEAP32[$263 >> 2] = $34; //@line 17804
   $264 = $ReallocAsyncCtx13 + 72 | 0; //@line 17805
   HEAP32[$264 >> 2] = $36; //@line 17806
   $265 = $ReallocAsyncCtx13 + 76 | 0; //@line 17807
   HEAP32[$265 >> 2] = $38; //@line 17808
   $266 = $ReallocAsyncCtx13 + 80 | 0; //@line 17809
   HEAP32[$266 >> 2] = $40; //@line 17810
   $267 = $ReallocAsyncCtx13 + 84 | 0; //@line 17811
   HEAP32[$267 >> 2] = $42; //@line 17812
   $268 = $ReallocAsyncCtx13 + 88 | 0; //@line 17813
   HEAP32[$268 >> 2] = $44; //@line 17814
   $269 = $ReallocAsyncCtx13 + 92 | 0; //@line 17815
   HEAP32[$269 >> 2] = $46; //@line 17816
   $270 = $ReallocAsyncCtx13 + 96 | 0; //@line 17817
   HEAP32[$270 >> 2] = $48; //@line 17818
   $271 = $ReallocAsyncCtx13 + 100 | 0; //@line 17819
   HEAP32[$271 >> 2] = $50; //@line 17820
   sp = STACKTOP; //@line 17821
   return;
  } else {
   $219 = HEAP32[$215 + 4 >> 2] | 0; //@line 17826
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 17827
   FUNCTION_TABLE_vii[$219 & 7]($34, $208 + 32 | 0); //@line 17828
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 17831
    $220 = $ReallocAsyncCtx4 + 4 | 0; //@line 17832
    HEAP32[$220 >> 2] = $$03071$reg2mem$0; //@line 17833
    $221 = $ReallocAsyncCtx4 + 8 | 0; //@line 17834
    HEAP32[$221 >> 2] = $$02972$reg2mem$0; //@line 17835
    $222 = $ReallocAsyncCtx4 + 12 | 0; //@line 17836
    HEAP32[$222 >> 2] = $6; //@line 17837
    $223 = $ReallocAsyncCtx4 + 16 | 0; //@line 17838
    HEAP32[$223 >> 2] = $$reg2mem$0; //@line 17839
    $224 = $ReallocAsyncCtx4 + 20 | 0; //@line 17840
    HEAP32[$224 >> 2] = $10; //@line 17841
    $225 = $ReallocAsyncCtx4 + 24 | 0; //@line 17842
    HEAP32[$225 >> 2] = $12; //@line 17843
    $226 = $ReallocAsyncCtx4 + 28 | 0; //@line 17844
    HEAP32[$226 >> 2] = $14; //@line 17845
    $227 = $ReallocAsyncCtx4 + 32 | 0; //@line 17846
    HEAP32[$227 >> 2] = $16; //@line 17847
    $228 = $ReallocAsyncCtx4 + 36 | 0; //@line 17848
    HEAP32[$228 >> 2] = $18; //@line 17849
    $229 = $ReallocAsyncCtx4 + 40 | 0; //@line 17850
    HEAP32[$229 >> 2] = $20; //@line 17851
    $230 = $ReallocAsyncCtx4 + 44 | 0; //@line 17852
    HEAP32[$230 >> 2] = $22; //@line 17853
    $231 = $ReallocAsyncCtx4 + 48 | 0; //@line 17854
    HEAP32[$231 >> 2] = $24; //@line 17855
    $232 = $ReallocAsyncCtx4 + 52 | 0; //@line 17856
    HEAP32[$232 >> 2] = $26; //@line 17857
    $233 = $ReallocAsyncCtx4 + 56 | 0; //@line 17858
    HEAP32[$233 >> 2] = $28; //@line 17859
    $234 = $ReallocAsyncCtx4 + 60 | 0; //@line 17860
    HEAP32[$234 >> 2] = $30; //@line 17861
    $235 = $ReallocAsyncCtx4 + 64 | 0; //@line 17862
    HEAP32[$235 >> 2] = $32; //@line 17863
    $236 = $ReallocAsyncCtx4 + 68 | 0; //@line 17864
    HEAP32[$236 >> 2] = $34; //@line 17865
    $237 = $ReallocAsyncCtx4 + 72 | 0; //@line 17866
    HEAP32[$237 >> 2] = $36; //@line 17867
    $238 = $ReallocAsyncCtx4 + 76 | 0; //@line 17868
    HEAP32[$238 >> 2] = $38; //@line 17869
    $239 = $ReallocAsyncCtx4 + 80 | 0; //@line 17870
    HEAP32[$239 >> 2] = $40; //@line 17871
    $240 = $ReallocAsyncCtx4 + 84 | 0; //@line 17872
    HEAP32[$240 >> 2] = $42; //@line 17873
    $241 = $ReallocAsyncCtx4 + 88 | 0; //@line 17874
    HEAP32[$241 >> 2] = $44; //@line 17875
    $242 = $ReallocAsyncCtx4 + 92 | 0; //@line 17876
    HEAP32[$242 >> 2] = $46; //@line 17877
    $243 = $ReallocAsyncCtx4 + 96 | 0; //@line 17878
    HEAP32[$243 >> 2] = $48; //@line 17879
    $244 = $ReallocAsyncCtx4 + 100 | 0; //@line 17880
    HEAP32[$244 >> 2] = $50; //@line 17881
    $245 = $ReallocAsyncCtx4 + 104 | 0; //@line 17882
    HEAP32[$245 >> 2] = $214; //@line 17883
    sp = STACKTOP; //@line 17884
    return;
   }
   ___async_unwind = 0; //@line 17887
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 17888
   $220 = $ReallocAsyncCtx4 + 4 | 0; //@line 17889
   HEAP32[$220 >> 2] = $$03071$reg2mem$0; //@line 17890
   $221 = $ReallocAsyncCtx4 + 8 | 0; //@line 17891
   HEAP32[$221 >> 2] = $$02972$reg2mem$0; //@line 17892
   $222 = $ReallocAsyncCtx4 + 12 | 0; //@line 17893
   HEAP32[$222 >> 2] = $6; //@line 17894
   $223 = $ReallocAsyncCtx4 + 16 | 0; //@line 17895
   HEAP32[$223 >> 2] = $$reg2mem$0; //@line 17896
   $224 = $ReallocAsyncCtx4 + 20 | 0; //@line 17897
   HEAP32[$224 >> 2] = $10; //@line 17898
   $225 = $ReallocAsyncCtx4 + 24 | 0; //@line 17899
   HEAP32[$225 >> 2] = $12; //@line 17900
   $226 = $ReallocAsyncCtx4 + 28 | 0; //@line 17901
   HEAP32[$226 >> 2] = $14; //@line 17902
   $227 = $ReallocAsyncCtx4 + 32 | 0; //@line 17903
   HEAP32[$227 >> 2] = $16; //@line 17904
   $228 = $ReallocAsyncCtx4 + 36 | 0; //@line 17905
   HEAP32[$228 >> 2] = $18; //@line 17906
   $229 = $ReallocAsyncCtx4 + 40 | 0; //@line 17907
   HEAP32[$229 >> 2] = $20; //@line 17908
   $230 = $ReallocAsyncCtx4 + 44 | 0; //@line 17909
   HEAP32[$230 >> 2] = $22; //@line 17910
   $231 = $ReallocAsyncCtx4 + 48 | 0; //@line 17911
   HEAP32[$231 >> 2] = $24; //@line 17912
   $232 = $ReallocAsyncCtx4 + 52 | 0; //@line 17913
   HEAP32[$232 >> 2] = $26; //@line 17914
   $233 = $ReallocAsyncCtx4 + 56 | 0; //@line 17915
   HEAP32[$233 >> 2] = $28; //@line 17916
   $234 = $ReallocAsyncCtx4 + 60 | 0; //@line 17917
   HEAP32[$234 >> 2] = $30; //@line 17918
   $235 = $ReallocAsyncCtx4 + 64 | 0; //@line 17919
   HEAP32[$235 >> 2] = $32; //@line 17920
   $236 = $ReallocAsyncCtx4 + 68 | 0; //@line 17921
   HEAP32[$236 >> 2] = $34; //@line 17922
   $237 = $ReallocAsyncCtx4 + 72 | 0; //@line 17923
   HEAP32[$237 >> 2] = $36; //@line 17924
   $238 = $ReallocAsyncCtx4 + 76 | 0; //@line 17925
   HEAP32[$238 >> 2] = $38; //@line 17926
   $239 = $ReallocAsyncCtx4 + 80 | 0; //@line 17927
   HEAP32[$239 >> 2] = $40; //@line 17928
   $240 = $ReallocAsyncCtx4 + 84 | 0; //@line 17929
   HEAP32[$240 >> 2] = $42; //@line 17930
   $241 = $ReallocAsyncCtx4 + 88 | 0; //@line 17931
   HEAP32[$241 >> 2] = $44; //@line 17932
   $242 = $ReallocAsyncCtx4 + 92 | 0; //@line 17933
   HEAP32[$242 >> 2] = $46; //@line 17934
   $243 = $ReallocAsyncCtx4 + 96 | 0; //@line 17935
   HEAP32[$243 >> 2] = $48; //@line 17936
   $244 = $ReallocAsyncCtx4 + 100 | 0; //@line 17937
   HEAP32[$244 >> 2] = $50; //@line 17938
   $245 = $ReallocAsyncCtx4 + 104 | 0; //@line 17939
   HEAP32[$245 >> 2] = $214; //@line 17940
   sp = STACKTOP; //@line 17941
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_211($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $286 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 15852
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15854
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15856
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15858
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15860
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15862
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15864
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15866
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15868
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15870
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15872
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15874
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15876
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15878
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 15880
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 15882
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 15884
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 15886
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 15888
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 15890
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 15892
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 15894
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 15896
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 15898
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 15900
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 15902
 $214 = HEAP32[$6 >> 2] | 0; //@line 15903
 if ($214 | 0) {
  $217 = HEAP32[$214 + 8 >> 2] | 0; //@line 15907
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(104) | 0; //@line 15908
  FUNCTION_TABLE_vi[$217 & 511]($48); //@line 15909
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 182; //@line 15912
   $218 = $ReallocAsyncCtx5 + 4 | 0; //@line 15913
   HEAP32[$218 >> 2] = $2; //@line 15914
   $219 = $ReallocAsyncCtx5 + 8 | 0; //@line 15915
   HEAP32[$219 >> 2] = $4; //@line 15916
   $220 = $ReallocAsyncCtx5 + 12 | 0; //@line 15917
   HEAP32[$220 >> 2] = $6; //@line 15918
   $221 = $ReallocAsyncCtx5 + 16 | 0; //@line 15919
   HEAP32[$221 >> 2] = $8; //@line 15920
   $222 = $ReallocAsyncCtx5 + 20 | 0; //@line 15921
   HEAP32[$222 >> 2] = $10; //@line 15922
   $223 = $ReallocAsyncCtx5 + 24 | 0; //@line 15923
   HEAP32[$223 >> 2] = $12; //@line 15924
   $224 = $ReallocAsyncCtx5 + 28 | 0; //@line 15925
   HEAP32[$224 >> 2] = $14; //@line 15926
   $225 = $ReallocAsyncCtx5 + 32 | 0; //@line 15927
   HEAP32[$225 >> 2] = $16; //@line 15928
   $226 = $ReallocAsyncCtx5 + 36 | 0; //@line 15929
   HEAP32[$226 >> 2] = $18; //@line 15930
   $227 = $ReallocAsyncCtx5 + 40 | 0; //@line 15931
   HEAP32[$227 >> 2] = $20; //@line 15932
   $228 = $ReallocAsyncCtx5 + 44 | 0; //@line 15933
   HEAP32[$228 >> 2] = $22; //@line 15934
   $229 = $ReallocAsyncCtx5 + 48 | 0; //@line 15935
   HEAP32[$229 >> 2] = $24; //@line 15936
   $230 = $ReallocAsyncCtx5 + 52 | 0; //@line 15937
   HEAP32[$230 >> 2] = $26; //@line 15938
   $231 = $ReallocAsyncCtx5 + 56 | 0; //@line 15939
   HEAP32[$231 >> 2] = $28; //@line 15940
   $232 = $ReallocAsyncCtx5 + 60 | 0; //@line 15941
   HEAP32[$232 >> 2] = $30; //@line 15942
   $233 = $ReallocAsyncCtx5 + 64 | 0; //@line 15943
   HEAP32[$233 >> 2] = $32; //@line 15944
   $234 = $ReallocAsyncCtx5 + 68 | 0; //@line 15945
   HEAP32[$234 >> 2] = $34; //@line 15946
   $235 = $ReallocAsyncCtx5 + 72 | 0; //@line 15947
   HEAP32[$235 >> 2] = $36; //@line 15948
   $236 = $ReallocAsyncCtx5 + 76 | 0; //@line 15949
   HEAP32[$236 >> 2] = $38; //@line 15950
   $237 = $ReallocAsyncCtx5 + 80 | 0; //@line 15951
   HEAP32[$237 >> 2] = $40; //@line 15952
   $238 = $ReallocAsyncCtx5 + 84 | 0; //@line 15953
   HEAP32[$238 >> 2] = $42; //@line 15954
   $239 = $ReallocAsyncCtx5 + 88 | 0; //@line 15955
   HEAP32[$239 >> 2] = $44; //@line 15956
   $240 = $ReallocAsyncCtx5 + 92 | 0; //@line 15957
   HEAP32[$240 >> 2] = $46; //@line 15958
   $241 = $ReallocAsyncCtx5 + 96 | 0; //@line 15959
   HEAP32[$241 >> 2] = $48; //@line 15960
   $242 = $ReallocAsyncCtx5 + 100 | 0; //@line 15961
   HEAP32[$242 >> 2] = $50; //@line 15962
   sp = STACKTOP; //@line 15963
   return;
  }
  ___async_unwind = 0; //@line 15966
  HEAP32[$ReallocAsyncCtx5 >> 2] = 182; //@line 15967
  $218 = $ReallocAsyncCtx5 + 4 | 0; //@line 15968
  HEAP32[$218 >> 2] = $2; //@line 15969
  $219 = $ReallocAsyncCtx5 + 8 | 0; //@line 15970
  HEAP32[$219 >> 2] = $4; //@line 15971
  $220 = $ReallocAsyncCtx5 + 12 | 0; //@line 15972
  HEAP32[$220 >> 2] = $6; //@line 15973
  $221 = $ReallocAsyncCtx5 + 16 | 0; //@line 15974
  HEAP32[$221 >> 2] = $8; //@line 15975
  $222 = $ReallocAsyncCtx5 + 20 | 0; //@line 15976
  HEAP32[$222 >> 2] = $10; //@line 15977
  $223 = $ReallocAsyncCtx5 + 24 | 0; //@line 15978
  HEAP32[$223 >> 2] = $12; //@line 15979
  $224 = $ReallocAsyncCtx5 + 28 | 0; //@line 15980
  HEAP32[$224 >> 2] = $14; //@line 15981
  $225 = $ReallocAsyncCtx5 + 32 | 0; //@line 15982
  HEAP32[$225 >> 2] = $16; //@line 15983
  $226 = $ReallocAsyncCtx5 + 36 | 0; //@line 15984
  HEAP32[$226 >> 2] = $18; //@line 15985
  $227 = $ReallocAsyncCtx5 + 40 | 0; //@line 15986
  HEAP32[$227 >> 2] = $20; //@line 15987
  $228 = $ReallocAsyncCtx5 + 44 | 0; //@line 15988
  HEAP32[$228 >> 2] = $22; //@line 15989
  $229 = $ReallocAsyncCtx5 + 48 | 0; //@line 15990
  HEAP32[$229 >> 2] = $24; //@line 15991
  $230 = $ReallocAsyncCtx5 + 52 | 0; //@line 15992
  HEAP32[$230 >> 2] = $26; //@line 15993
  $231 = $ReallocAsyncCtx5 + 56 | 0; //@line 15994
  HEAP32[$231 >> 2] = $28; //@line 15995
  $232 = $ReallocAsyncCtx5 + 60 | 0; //@line 15996
  HEAP32[$232 >> 2] = $30; //@line 15997
  $233 = $ReallocAsyncCtx5 + 64 | 0; //@line 15998
  HEAP32[$233 >> 2] = $32; //@line 15999
  $234 = $ReallocAsyncCtx5 + 68 | 0; //@line 16000
  HEAP32[$234 >> 2] = $34; //@line 16001
  $235 = $ReallocAsyncCtx5 + 72 | 0; //@line 16002
  HEAP32[$235 >> 2] = $36; //@line 16003
  $236 = $ReallocAsyncCtx5 + 76 | 0; //@line 16004
  HEAP32[$236 >> 2] = $38; //@line 16005
  $237 = $ReallocAsyncCtx5 + 80 | 0; //@line 16006
  HEAP32[$237 >> 2] = $40; //@line 16007
  $238 = $ReallocAsyncCtx5 + 84 | 0; //@line 16008
  HEAP32[$238 >> 2] = $42; //@line 16009
  $239 = $ReallocAsyncCtx5 + 88 | 0; //@line 16010
  HEAP32[$239 >> 2] = $44; //@line 16011
  $240 = $ReallocAsyncCtx5 + 92 | 0; //@line 16012
  HEAP32[$240 >> 2] = $46; //@line 16013
  $241 = $ReallocAsyncCtx5 + 96 | 0; //@line 16014
  HEAP32[$241 >> 2] = $48; //@line 16015
  $242 = $ReallocAsyncCtx5 + 100 | 0; //@line 16016
  HEAP32[$242 >> 2] = $50; //@line 16017
  sp = STACKTOP; //@line 16018
  return;
 }
 $243 = HEAP32[$50 >> 2] | 0; //@line 16021
 if (!$243) {
  $$02972$reg2mem$0 = $4; //@line 16024
  $$03071$reg2mem$0 = $2; //@line 16024
  $$reg2mem$0 = $8; //@line 16024
 } else {
  $246 = HEAP32[$243 + 8 >> 2] | 0; //@line 16027
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 16028
  FUNCTION_TABLE_vi[$246 & 511]($34); //@line 16029
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 183; //@line 16032
   $247 = $ReallocAsyncCtx6 + 4 | 0; //@line 16033
   HEAP32[$247 >> 2] = $2; //@line 16034
   $248 = $ReallocAsyncCtx6 + 8 | 0; //@line 16035
   HEAP32[$248 >> 2] = $4; //@line 16036
   $249 = $ReallocAsyncCtx6 + 12 | 0; //@line 16037
   HEAP32[$249 >> 2] = $6; //@line 16038
   $250 = $ReallocAsyncCtx6 + 16 | 0; //@line 16039
   HEAP32[$250 >> 2] = $8; //@line 16040
   $251 = $ReallocAsyncCtx6 + 20 | 0; //@line 16041
   HEAP32[$251 >> 2] = $10; //@line 16042
   $252 = $ReallocAsyncCtx6 + 24 | 0; //@line 16043
   HEAP32[$252 >> 2] = $12; //@line 16044
   $253 = $ReallocAsyncCtx6 + 28 | 0; //@line 16045
   HEAP32[$253 >> 2] = $14; //@line 16046
   $254 = $ReallocAsyncCtx6 + 32 | 0; //@line 16047
   HEAP32[$254 >> 2] = $16; //@line 16048
   $255 = $ReallocAsyncCtx6 + 36 | 0; //@line 16049
   HEAP32[$255 >> 2] = $18; //@line 16050
   $256 = $ReallocAsyncCtx6 + 40 | 0; //@line 16051
   HEAP32[$256 >> 2] = $20; //@line 16052
   $257 = $ReallocAsyncCtx6 + 44 | 0; //@line 16053
   HEAP32[$257 >> 2] = $22; //@line 16054
   $258 = $ReallocAsyncCtx6 + 48 | 0; //@line 16055
   HEAP32[$258 >> 2] = $24; //@line 16056
   $259 = $ReallocAsyncCtx6 + 52 | 0; //@line 16057
   HEAP32[$259 >> 2] = $26; //@line 16058
   $260 = $ReallocAsyncCtx6 + 56 | 0; //@line 16059
   HEAP32[$260 >> 2] = $28; //@line 16060
   $261 = $ReallocAsyncCtx6 + 60 | 0; //@line 16061
   HEAP32[$261 >> 2] = $30; //@line 16062
   $262 = $ReallocAsyncCtx6 + 64 | 0; //@line 16063
   HEAP32[$262 >> 2] = $32; //@line 16064
   $263 = $ReallocAsyncCtx6 + 68 | 0; //@line 16065
   HEAP32[$263 >> 2] = $34; //@line 16066
   $264 = $ReallocAsyncCtx6 + 72 | 0; //@line 16067
   HEAP32[$264 >> 2] = $36; //@line 16068
   $265 = $ReallocAsyncCtx6 + 76 | 0; //@line 16069
   HEAP32[$265 >> 2] = $38; //@line 16070
   $266 = $ReallocAsyncCtx6 + 80 | 0; //@line 16071
   HEAP32[$266 >> 2] = $40; //@line 16072
   $267 = $ReallocAsyncCtx6 + 84 | 0; //@line 16073
   HEAP32[$267 >> 2] = $42; //@line 16074
   $268 = $ReallocAsyncCtx6 + 88 | 0; //@line 16075
   HEAP32[$268 >> 2] = $44; //@line 16076
   $269 = $ReallocAsyncCtx6 + 92 | 0; //@line 16077
   HEAP32[$269 >> 2] = $46; //@line 16078
   $270 = $ReallocAsyncCtx6 + 96 | 0; //@line 16079
   HEAP32[$270 >> 2] = $48; //@line 16080
   $271 = $ReallocAsyncCtx6 + 100 | 0; //@line 16081
   HEAP32[$271 >> 2] = $50; //@line 16082
   sp = STACKTOP; //@line 16083
   return;
  }
  ___async_unwind = 0; //@line 16086
  HEAP32[$ReallocAsyncCtx6 >> 2] = 183; //@line 16087
  $247 = $ReallocAsyncCtx6 + 4 | 0; //@line 16088
  HEAP32[$247 >> 2] = $2; //@line 16089
  $248 = $ReallocAsyncCtx6 + 8 | 0; //@line 16090
  HEAP32[$248 >> 2] = $4; //@line 16091
  $249 = $ReallocAsyncCtx6 + 12 | 0; //@line 16092
  HEAP32[$249 >> 2] = $6; //@line 16093
  $250 = $ReallocAsyncCtx6 + 16 | 0; //@line 16094
  HEAP32[$250 >> 2] = $8; //@line 16095
  $251 = $ReallocAsyncCtx6 + 20 | 0; //@line 16096
  HEAP32[$251 >> 2] = $10; //@line 16097
  $252 = $ReallocAsyncCtx6 + 24 | 0; //@line 16098
  HEAP32[$252 >> 2] = $12; //@line 16099
  $253 = $ReallocAsyncCtx6 + 28 | 0; //@line 16100
  HEAP32[$253 >> 2] = $14; //@line 16101
  $254 = $ReallocAsyncCtx6 + 32 | 0; //@line 16102
  HEAP32[$254 >> 2] = $16; //@line 16103
  $255 = $ReallocAsyncCtx6 + 36 | 0; //@line 16104
  HEAP32[$255 >> 2] = $18; //@line 16105
  $256 = $ReallocAsyncCtx6 + 40 | 0; //@line 16106
  HEAP32[$256 >> 2] = $20; //@line 16107
  $257 = $ReallocAsyncCtx6 + 44 | 0; //@line 16108
  HEAP32[$257 >> 2] = $22; //@line 16109
  $258 = $ReallocAsyncCtx6 + 48 | 0; //@line 16110
  HEAP32[$258 >> 2] = $24; //@line 16111
  $259 = $ReallocAsyncCtx6 + 52 | 0; //@line 16112
  HEAP32[$259 >> 2] = $26; //@line 16113
  $260 = $ReallocAsyncCtx6 + 56 | 0; //@line 16114
  HEAP32[$260 >> 2] = $28; //@line 16115
  $261 = $ReallocAsyncCtx6 + 60 | 0; //@line 16116
  HEAP32[$261 >> 2] = $30; //@line 16117
  $262 = $ReallocAsyncCtx6 + 64 | 0; //@line 16118
  HEAP32[$262 >> 2] = $32; //@line 16119
  $263 = $ReallocAsyncCtx6 + 68 | 0; //@line 16120
  HEAP32[$263 >> 2] = $34; //@line 16121
  $264 = $ReallocAsyncCtx6 + 72 | 0; //@line 16122
  HEAP32[$264 >> 2] = $36; //@line 16123
  $265 = $ReallocAsyncCtx6 + 76 | 0; //@line 16124
  HEAP32[$265 >> 2] = $38; //@line 16125
  $266 = $ReallocAsyncCtx6 + 80 | 0; //@line 16126
  HEAP32[$266 >> 2] = $40; //@line 16127
  $267 = $ReallocAsyncCtx6 + 84 | 0; //@line 16128
  HEAP32[$267 >> 2] = $42; //@line 16129
  $268 = $ReallocAsyncCtx6 + 88 | 0; //@line 16130
  HEAP32[$268 >> 2] = $44; //@line 16131
  $269 = $ReallocAsyncCtx6 + 92 | 0; //@line 16132
  HEAP32[$269 >> 2] = $46; //@line 16133
  $270 = $ReallocAsyncCtx6 + 96 | 0; //@line 16134
  HEAP32[$270 >> 2] = $48; //@line 16135
  $271 = $ReallocAsyncCtx6 + 100 | 0; //@line 16136
  HEAP32[$271 >> 2] = $50; //@line 16137
  sp = STACKTOP; //@line 16138
  return;
 }
 L15 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 16145
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 16145
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 16147
   $$131 = $$03071$reg2mem$0; //@line 16147
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 16150
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 16153
    break L15;
   }
   $52 = 6740 + ($$02972$reg2mem$1 << 2) | 0; //@line 16156
   $54 = HEAP32[$52 >> 2] | 0; //@line 16157
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 16169
   break;
  }
  $84 = $54 + 72 | 0; //@line 16172
  $85 = HEAP32[$84 >> 2] | 0; //@line 16173
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 16177
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 16183
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 16187
  $151 = $150 + 76 | 0; //@line 16188
  $152 = HEAP32[$151 >> 2] | 0; //@line 16189
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 16192
   $$03071$reg2mem$0 = $$131; //@line 16192
   $$reg2mem$0 = $52; //@line 16192
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 16197
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 16201
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 16202
  $$03071$reg2mem$0 = $$131; //@line 16202
  $$reg2mem$0 = $52; //@line 16202
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7620] = 0; //@line 16207
   return;
  }
  $275 = $$131 + 44 | 0; //@line 16210
  $276 = HEAP32[$275 >> 2] | 0; //@line 16211
  if (!$276) {
   $284 = $10 + 12 | 0; //@line 16214
   HEAP32[$284 >> 2] = 0; //@line 16215
   $286 = $12 + 4 | 0; //@line 16217
   HEAP32[$286 >> 2] = 0; //@line 16219
   HEAP32[$286 + 4 >> 2] = 0; //@line 16222
   HEAP32[$12 >> 2] = 3; //@line 16223
   $290 = $12 + 12 | 0; //@line 16224
   HEAP32[$290 >> 2] = 712; //@line 16225
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 16226
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 100, $12) | 0; //@line 16227
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 16230
    $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 16231
    HEAP32[$291 >> 2] = $290; //@line 16232
    $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 16233
    HEAP32[$292 >> 2] = $284; //@line 16234
    $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 16235
    HEAP32[$293 >> 2] = $12; //@line 16236
    $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 16237
    HEAP32[$294 >> 2] = $10; //@line 16238
    sp = STACKTOP; //@line 16239
    return;
   }
   ___async_unwind = 0; //@line 16242
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 16243
   $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 16244
   HEAP32[$291 >> 2] = $290; //@line 16245
   $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 16246
   HEAP32[$292 >> 2] = $284; //@line 16247
   $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 16248
   HEAP32[$293 >> 2] = $12; //@line 16249
   $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 16250
   HEAP32[$294 >> 2] = $10; //@line 16251
   sp = STACKTOP; //@line 16252
   return;
  } else {
   $280 = HEAP32[$276 + 4 >> 2] | 0; //@line 16257
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 16258
   FUNCTION_TABLE_vii[$280 & 7]($10, $$131 + 32 | 0); //@line 16259
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 16262
    $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 16263
    HEAP32[$281 >> 2] = $275; //@line 16264
    $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 16265
    HEAP32[$282 >> 2] = $10; //@line 16266
    $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 16267
    HEAP32[$283 >> 2] = $12; //@line 16268
    sp = STACKTOP; //@line 16269
    return;
   }
   ___async_unwind = 0; //@line 16272
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 16273
   $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 16274
   HEAP32[$281 >> 2] = $275; //@line 16275
   $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 16276
   HEAP32[$282 >> 2] = $10; //@line 16277
   $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 16278
   HEAP32[$283 >> 2] = $12; //@line 16279
   sp = STACKTOP; //@line 16280
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 16285
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 16286
  __ZL28nsapi_dns_query_async_deletei($59); //@line 16287
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 16290
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 16291
   HEAP32[$60 >> 2] = $$131; //@line 16292
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 16293
   HEAP32[$61 >> 2] = $$02972$reg2mem$1; //@line 16294
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 16295
   HEAP32[$62 >> 2] = $6; //@line 16296
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 16297
   HEAP32[$63 >> 2] = $10; //@line 16298
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 16299
   HEAP32[$64 >> 2] = $12; //@line 16300
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 16301
   HEAP32[$65 >> 2] = $14; //@line 16302
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 16303
   HEAP32[$66 >> 2] = $16; //@line 16304
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 16305
   HEAP32[$67 >> 2] = $18; //@line 16306
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 16307
   HEAP32[$68 >> 2] = $20; //@line 16308
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 16309
   HEAP32[$69 >> 2] = $22; //@line 16310
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 16311
   HEAP32[$70 >> 2] = $24; //@line 16312
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 16313
   HEAP32[$71 >> 2] = $26; //@line 16314
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 16315
   HEAP32[$72 >> 2] = $28; //@line 16316
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 16317
   HEAP32[$73 >> 2] = $30; //@line 16318
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 16319
   HEAP32[$74 >> 2] = $32; //@line 16320
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 16321
   HEAP32[$75 >> 2] = $34; //@line 16322
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 16323
   HEAP32[$76 >> 2] = $36; //@line 16324
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 16325
   HEAP32[$77 >> 2] = $38; //@line 16326
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 16327
   HEAP32[$78 >> 2] = $40; //@line 16328
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 16329
   HEAP32[$79 >> 2] = $42; //@line 16330
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 16331
   HEAP32[$80 >> 2] = $44; //@line 16332
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 16333
   HEAP32[$81 >> 2] = $46; //@line 16334
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 16335
   HEAP32[$82 >> 2] = $48; //@line 16336
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 16337
   HEAP32[$83 >> 2] = $50; //@line 16338
   sp = STACKTOP; //@line 16339
   return;
  }
  ___async_unwind = 0; //@line 16342
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 16343
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 16344
  HEAP32[$60 >> 2] = $$131; //@line 16345
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 16346
  HEAP32[$61 >> 2] = $$02972$reg2mem$1; //@line 16347
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 16348
  HEAP32[$62 >> 2] = $6; //@line 16349
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 16350
  HEAP32[$63 >> 2] = $10; //@line 16351
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 16352
  HEAP32[$64 >> 2] = $12; //@line 16353
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 16354
  HEAP32[$65 >> 2] = $14; //@line 16355
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 16356
  HEAP32[$66 >> 2] = $16; //@line 16357
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 16358
  HEAP32[$67 >> 2] = $18; //@line 16359
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 16360
  HEAP32[$68 >> 2] = $20; //@line 16361
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 16362
  HEAP32[$69 >> 2] = $22; //@line 16363
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 16364
  HEAP32[$70 >> 2] = $24; //@line 16365
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 16366
  HEAP32[$71 >> 2] = $26; //@line 16367
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 16368
  HEAP32[$72 >> 2] = $28; //@line 16369
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 16370
  HEAP32[$73 >> 2] = $30; //@line 16371
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 16372
  HEAP32[$74 >> 2] = $32; //@line 16373
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 16374
  HEAP32[$75 >> 2] = $34; //@line 16375
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 16376
  HEAP32[$76 >> 2] = $36; //@line 16377
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 16378
  HEAP32[$77 >> 2] = $38; //@line 16379
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 16380
  HEAP32[$78 >> 2] = $40; //@line 16381
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 16382
  HEAP32[$79 >> 2] = $42; //@line 16383
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 16384
  HEAP32[$80 >> 2] = $44; //@line 16385
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 16386
  HEAP32[$81 >> 2] = $46; //@line 16387
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 16388
  HEAP32[$82 >> 2] = $48; //@line 16389
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 16390
  HEAP32[$83 >> 2] = $50; //@line 16391
  sp = STACKTOP; //@line 16392
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 16397
  $92 = $54 + 44 | 0; //@line 16398
  $93 = HEAP32[$92 >> 2] | 0; //@line 16399
  if (!$93) {
   HEAP32[$16 >> 2] = 0; //@line 16402
   $124 = HEAP32[$54 >> 2] | 0; //@line 16403
   HEAP32[$18 >> 2] = 0; //@line 16404
   HEAP32[$20 >> 2] = 175; //@line 16405
   HEAP32[$22 >> 2] = $124; //@line 16406
   HEAP32[$24 >> 2] = 724; //@line 16407
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 16408
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($26, 0, $28) | 0; //@line 16409
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 16412
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 16413
    HEAP32[$125 >> 2] = $$131; //@line 16414
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 16415
    HEAP32[$126 >> 2] = $$02972$reg2mem$1; //@line 16416
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 16417
    HEAP32[$127 >> 2] = $6; //@line 16418
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 16419
    HEAP32[$128 >> 2] = $52; //@line 16420
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 16421
    HEAP32[$129 >> 2] = $10; //@line 16422
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 16423
    HEAP32[$130 >> 2] = $12; //@line 16424
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 16425
    HEAP32[$131 >> 2] = $14; //@line 16426
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 16427
    HEAP32[$132 >> 2] = $16; //@line 16428
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 16429
    HEAP32[$133 >> 2] = $18; //@line 16430
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 16431
    HEAP32[$134 >> 2] = $20; //@line 16432
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 16433
    HEAP32[$135 >> 2] = $22; //@line 16434
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 16435
    HEAP32[$136 >> 2] = $24; //@line 16436
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 16437
    HEAP32[$137 >> 2] = $26; //@line 16438
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 16439
    HEAP32[$138 >> 2] = $28; //@line 16440
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 16441
    HEAP32[$139 >> 2] = $30; //@line 16442
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 16443
    HEAP32[$140 >> 2] = $32; //@line 16444
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 16445
    HEAP32[$141 >> 2] = $34; //@line 16446
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 16447
    HEAP32[$142 >> 2] = $36; //@line 16448
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 16449
    HEAP32[$143 >> 2] = $38; //@line 16450
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 16451
    HEAP32[$144 >> 2] = $40; //@line 16452
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 16453
    HEAP32[$145 >> 2] = $42; //@line 16454
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 16455
    HEAP32[$146 >> 2] = $44; //@line 16456
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 16457
    HEAP32[$147 >> 2] = $46; //@line 16458
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 16459
    HEAP32[$148 >> 2] = $48; //@line 16460
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 16461
    HEAP32[$149 >> 2] = $50; //@line 16462
    sp = STACKTOP; //@line 16463
    return;
   }
   ___async_unwind = 0; //@line 16466
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 16467
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 16468
   HEAP32[$125 >> 2] = $$131; //@line 16469
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 16470
   HEAP32[$126 >> 2] = $$02972$reg2mem$1; //@line 16471
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 16472
   HEAP32[$127 >> 2] = $6; //@line 16473
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 16474
   HEAP32[$128 >> 2] = $52; //@line 16475
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 16476
   HEAP32[$129 >> 2] = $10; //@line 16477
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 16478
   HEAP32[$130 >> 2] = $12; //@line 16479
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 16480
   HEAP32[$131 >> 2] = $14; //@line 16481
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 16482
   HEAP32[$132 >> 2] = $16; //@line 16483
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 16484
   HEAP32[$133 >> 2] = $18; //@line 16485
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 16486
   HEAP32[$134 >> 2] = $20; //@line 16487
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 16488
   HEAP32[$135 >> 2] = $22; //@line 16489
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 16490
   HEAP32[$136 >> 2] = $24; //@line 16491
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 16492
   HEAP32[$137 >> 2] = $26; //@line 16493
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 16494
   HEAP32[$138 >> 2] = $28; //@line 16495
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 16496
   HEAP32[$139 >> 2] = $30; //@line 16497
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 16498
   HEAP32[$140 >> 2] = $32; //@line 16499
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 16500
   HEAP32[$141 >> 2] = $34; //@line 16501
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 16502
   HEAP32[$142 >> 2] = $36; //@line 16503
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 16504
   HEAP32[$143 >> 2] = $38; //@line 16505
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 16506
   HEAP32[$144 >> 2] = $40; //@line 16507
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 16508
   HEAP32[$145 >> 2] = $42; //@line 16509
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 16510
   HEAP32[$146 >> 2] = $44; //@line 16511
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 16512
   HEAP32[$147 >> 2] = $46; //@line 16513
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 16514
   HEAP32[$148 >> 2] = $48; //@line 16515
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 16516
   HEAP32[$149 >> 2] = $50; //@line 16517
   sp = STACKTOP; //@line 16518
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 16523
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 16524
   FUNCTION_TABLE_vii[$97 & 7]($14, $54 + 32 | 0); //@line 16525
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 16528
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 16529
    HEAP32[$98 >> 2] = $$131; //@line 16530
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 16531
    HEAP32[$99 >> 2] = $$02972$reg2mem$1; //@line 16532
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 16533
    HEAP32[$100 >> 2] = $6; //@line 16534
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 16535
    HEAP32[$101 >> 2] = $52; //@line 16536
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 16537
    HEAP32[$102 >> 2] = $10; //@line 16538
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 16539
    HEAP32[$103 >> 2] = $12; //@line 16540
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 16541
    HEAP32[$104 >> 2] = $14; //@line 16542
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 16543
    HEAP32[$105 >> 2] = $16; //@line 16544
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 16545
    HEAP32[$106 >> 2] = $18; //@line 16546
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 16547
    HEAP32[$107 >> 2] = $20; //@line 16548
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 16549
    HEAP32[$108 >> 2] = $22; //@line 16550
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 16551
    HEAP32[$109 >> 2] = $24; //@line 16552
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 16553
    HEAP32[$110 >> 2] = $26; //@line 16554
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 16555
    HEAP32[$111 >> 2] = $28; //@line 16556
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 16557
    HEAP32[$112 >> 2] = $30; //@line 16558
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 16559
    HEAP32[$113 >> 2] = $32; //@line 16560
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 16561
    HEAP32[$114 >> 2] = $34; //@line 16562
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 16563
    HEAP32[$115 >> 2] = $36; //@line 16564
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 16565
    HEAP32[$116 >> 2] = $38; //@line 16566
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 16567
    HEAP32[$117 >> 2] = $40; //@line 16568
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 16569
    HEAP32[$118 >> 2] = $42; //@line 16570
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 16571
    HEAP32[$119 >> 2] = $44; //@line 16572
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 16573
    HEAP32[$120 >> 2] = $46; //@line 16574
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 16575
    HEAP32[$121 >> 2] = $48; //@line 16576
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 16577
    HEAP32[$122 >> 2] = $50; //@line 16578
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 16579
    HEAP32[$123 >> 2] = $92; //@line 16580
    sp = STACKTOP; //@line 16581
    return;
   }
   ___async_unwind = 0; //@line 16584
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 16585
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 16586
   HEAP32[$98 >> 2] = $$131; //@line 16587
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 16588
   HEAP32[$99 >> 2] = $$02972$reg2mem$1; //@line 16589
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 16590
   HEAP32[$100 >> 2] = $6; //@line 16591
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 16592
   HEAP32[$101 >> 2] = $52; //@line 16593
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 16594
   HEAP32[$102 >> 2] = $10; //@line 16595
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 16596
   HEAP32[$103 >> 2] = $12; //@line 16597
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 16598
   HEAP32[$104 >> 2] = $14; //@line 16599
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 16600
   HEAP32[$105 >> 2] = $16; //@line 16601
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 16602
   HEAP32[$106 >> 2] = $18; //@line 16603
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 16604
   HEAP32[$107 >> 2] = $20; //@line 16605
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 16606
   HEAP32[$108 >> 2] = $22; //@line 16607
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 16608
   HEAP32[$109 >> 2] = $24; //@line 16609
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 16610
   HEAP32[$110 >> 2] = $26; //@line 16611
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 16612
   HEAP32[$111 >> 2] = $28; //@line 16613
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 16614
   HEAP32[$112 >> 2] = $30; //@line 16615
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 16616
   HEAP32[$113 >> 2] = $32; //@line 16617
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 16618
   HEAP32[$114 >> 2] = $34; //@line 16619
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 16620
   HEAP32[$115 >> 2] = $36; //@line 16621
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 16622
   HEAP32[$116 >> 2] = $38; //@line 16623
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 16624
   HEAP32[$117 >> 2] = $40; //@line 16625
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 16626
   HEAP32[$118 >> 2] = $42; //@line 16627
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 16628
   HEAP32[$119 >> 2] = $44; //@line 16629
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 16630
   HEAP32[$120 >> 2] = $46; //@line 16631
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 16632
   HEAP32[$121 >> 2] = $48; //@line 16633
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 16634
   HEAP32[$122 >> 2] = $50; //@line 16635
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 16636
   HEAP32[$123 >> 2] = $92; //@line 16637
   sp = STACKTOP; //@line 16638
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 16643
  $156 = $150 + 44 | 0; //@line 16644
  $157 = HEAP32[$156 >> 2] | 0; //@line 16645
  if (!$157) {
   HEAP32[$36 >> 2] = 0; //@line 16648
   $188 = HEAP32[$150 >> 2] | 0; //@line 16649
   HEAP32[$38 >> 2] = 0; //@line 16650
   HEAP32[$40 >> 2] = 180; //@line 16651
   HEAP32[$42 >> 2] = $188; //@line 16652
   HEAP32[$6 >> 2] = 724; //@line 16653
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 16654
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 16655
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 16658
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 16659
    HEAP32[$189 >> 2] = $$131; //@line 16660
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 16661
    HEAP32[$190 >> 2] = $$02972$reg2mem$1; //@line 16662
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 16663
    HEAP32[$191 >> 2] = $6; //@line 16664
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 16665
    HEAP32[$192 >> 2] = $52; //@line 16666
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 16667
    HEAP32[$193 >> 2] = $10; //@line 16668
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 16669
    HEAP32[$194 >> 2] = $12; //@line 16670
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 16671
    HEAP32[$195 >> 2] = $14; //@line 16672
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 16673
    HEAP32[$196 >> 2] = $16; //@line 16674
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 16675
    HEAP32[$197 >> 2] = $18; //@line 16676
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 16677
    HEAP32[$198 >> 2] = $20; //@line 16678
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 16679
    HEAP32[$199 >> 2] = $22; //@line 16680
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 16681
    HEAP32[$200 >> 2] = $24; //@line 16682
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 16683
    HEAP32[$201 >> 2] = $26; //@line 16684
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 16685
    HEAP32[$202 >> 2] = $28; //@line 16686
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 16687
    HEAP32[$203 >> 2] = $30; //@line 16688
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 16689
    HEAP32[$204 >> 2] = $32; //@line 16690
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 16691
    HEAP32[$205 >> 2] = $34; //@line 16692
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 16693
    HEAP32[$206 >> 2] = $36; //@line 16694
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 16695
    HEAP32[$207 >> 2] = $38; //@line 16696
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 16697
    HEAP32[$208 >> 2] = $40; //@line 16698
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 16699
    HEAP32[$209 >> 2] = $42; //@line 16700
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 16701
    HEAP32[$210 >> 2] = $44; //@line 16702
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 16703
    HEAP32[$211 >> 2] = $46; //@line 16704
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 16705
    HEAP32[$212 >> 2] = $48; //@line 16706
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 16707
    HEAP32[$213 >> 2] = $50; //@line 16708
    sp = STACKTOP; //@line 16709
    return;
   }
   ___async_unwind = 0; //@line 16712
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 16713
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 16714
   HEAP32[$189 >> 2] = $$131; //@line 16715
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 16716
   HEAP32[$190 >> 2] = $$02972$reg2mem$1; //@line 16717
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 16718
   HEAP32[$191 >> 2] = $6; //@line 16719
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 16720
   HEAP32[$192 >> 2] = $52; //@line 16721
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 16722
   HEAP32[$193 >> 2] = $10; //@line 16723
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 16724
   HEAP32[$194 >> 2] = $12; //@line 16725
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 16726
   HEAP32[$195 >> 2] = $14; //@line 16727
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 16728
   HEAP32[$196 >> 2] = $16; //@line 16729
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 16730
   HEAP32[$197 >> 2] = $18; //@line 16731
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 16732
   HEAP32[$198 >> 2] = $20; //@line 16733
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 16734
   HEAP32[$199 >> 2] = $22; //@line 16735
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 16736
   HEAP32[$200 >> 2] = $24; //@line 16737
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 16738
   HEAP32[$201 >> 2] = $26; //@line 16739
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 16740
   HEAP32[$202 >> 2] = $28; //@line 16741
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 16742
   HEAP32[$203 >> 2] = $30; //@line 16743
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 16744
   HEAP32[$204 >> 2] = $32; //@line 16745
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 16746
   HEAP32[$205 >> 2] = $34; //@line 16747
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 16748
   HEAP32[$206 >> 2] = $36; //@line 16749
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 16750
   HEAP32[$207 >> 2] = $38; //@line 16751
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 16752
   HEAP32[$208 >> 2] = $40; //@line 16753
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 16754
   HEAP32[$209 >> 2] = $42; //@line 16755
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 16756
   HEAP32[$210 >> 2] = $44; //@line 16757
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 16758
   HEAP32[$211 >> 2] = $46; //@line 16759
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 16760
   HEAP32[$212 >> 2] = $48; //@line 16761
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 16762
   HEAP32[$213 >> 2] = $50; //@line 16763
   sp = STACKTOP; //@line 16764
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 16769
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 16770
   FUNCTION_TABLE_vii[$161 & 7]($34, $150 + 32 | 0); //@line 16771
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 16774
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 16775
    HEAP32[$162 >> 2] = $$131; //@line 16776
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 16777
    HEAP32[$163 >> 2] = $$02972$reg2mem$1; //@line 16778
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 16779
    HEAP32[$164 >> 2] = $6; //@line 16780
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 16781
    HEAP32[$165 >> 2] = $52; //@line 16782
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 16783
    HEAP32[$166 >> 2] = $10; //@line 16784
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 16785
    HEAP32[$167 >> 2] = $12; //@line 16786
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 16787
    HEAP32[$168 >> 2] = $14; //@line 16788
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 16789
    HEAP32[$169 >> 2] = $16; //@line 16790
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 16791
    HEAP32[$170 >> 2] = $18; //@line 16792
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 16793
    HEAP32[$171 >> 2] = $20; //@line 16794
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 16795
    HEAP32[$172 >> 2] = $22; //@line 16796
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 16797
    HEAP32[$173 >> 2] = $24; //@line 16798
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 16799
    HEAP32[$174 >> 2] = $26; //@line 16800
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 16801
    HEAP32[$175 >> 2] = $28; //@line 16802
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 16803
    HEAP32[$176 >> 2] = $30; //@line 16804
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 16805
    HEAP32[$177 >> 2] = $32; //@line 16806
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 16807
    HEAP32[$178 >> 2] = $34; //@line 16808
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 16809
    HEAP32[$179 >> 2] = $36; //@line 16810
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 16811
    HEAP32[$180 >> 2] = $38; //@line 16812
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 16813
    HEAP32[$181 >> 2] = $40; //@line 16814
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 16815
    HEAP32[$182 >> 2] = $42; //@line 16816
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 16817
    HEAP32[$183 >> 2] = $44; //@line 16818
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 16819
    HEAP32[$184 >> 2] = $46; //@line 16820
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 16821
    HEAP32[$185 >> 2] = $48; //@line 16822
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 16823
    HEAP32[$186 >> 2] = $50; //@line 16824
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 16825
    HEAP32[$187 >> 2] = $156; //@line 16826
    sp = STACKTOP; //@line 16827
    return;
   }
   ___async_unwind = 0; //@line 16830
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 16831
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 16832
   HEAP32[$162 >> 2] = $$131; //@line 16833
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 16834
   HEAP32[$163 >> 2] = $$02972$reg2mem$1; //@line 16835
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 16836
   HEAP32[$164 >> 2] = $6; //@line 16837
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 16838
   HEAP32[$165 >> 2] = $52; //@line 16839
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 16840
   HEAP32[$166 >> 2] = $10; //@line 16841
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 16842
   HEAP32[$167 >> 2] = $12; //@line 16843
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 16844
   HEAP32[$168 >> 2] = $14; //@line 16845
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 16846
   HEAP32[$169 >> 2] = $16; //@line 16847
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 16848
   HEAP32[$170 >> 2] = $18; //@line 16849
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 16850
   HEAP32[$171 >> 2] = $20; //@line 16851
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 16852
   HEAP32[$172 >> 2] = $22; //@line 16853
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 16854
   HEAP32[$173 >> 2] = $24; //@line 16855
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 16856
   HEAP32[$174 >> 2] = $26; //@line 16857
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 16858
   HEAP32[$175 >> 2] = $28; //@line 16859
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 16860
   HEAP32[$176 >> 2] = $30; //@line 16861
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 16862
   HEAP32[$177 >> 2] = $32; //@line 16863
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 16864
   HEAP32[$178 >> 2] = $34; //@line 16865
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 16866
   HEAP32[$179 >> 2] = $36; //@line 16867
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 16868
   HEAP32[$180 >> 2] = $38; //@line 16869
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 16870
   HEAP32[$181 >> 2] = $40; //@line 16871
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 16872
   HEAP32[$182 >> 2] = $42; //@line 16873
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 16874
   HEAP32[$183 >> 2] = $44; //@line 16875
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 16876
   HEAP32[$184 >> 2] = $46; //@line 16877
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 16878
   HEAP32[$185 >> 2] = $48; //@line 16879
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 16880
   HEAP32[$186 >> 2] = $50; //@line 16881
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 16882
   HEAP32[$187 >> 2] = $156; //@line 16883
   sp = STACKTOP; //@line 16884
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_200($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $185 = 0, $186 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $246 = 0, $247 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 11151
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11153
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11155
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11157
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11159
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11161
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11163
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11165
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11167
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11169
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11171
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11173
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11175
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11177
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11179
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11181
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11183
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11185
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11187
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11189
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 11191
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 11193
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 11195
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 11197
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 11199
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 11201
 $150 = HEAP32[$32 >> 2] | 0; //@line 11202
 if (!$150) {
  $$02972$reg2mem$0 = $4; //@line 11205
  $$03071$reg2mem$0 = $2; //@line 11205
  $$reg2mem$0 = $8; //@line 11205
 } else {
  $153 = HEAP32[$150 + 8 >> 2] | 0; //@line 11208
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 11209
  FUNCTION_TABLE_vi[$153 & 511]($14); //@line 11210
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 178; //@line 11213
   $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 11214
   HEAP32[$154 >> 2] = $2; //@line 11215
   $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 11216
   HEAP32[$155 >> 2] = $4; //@line 11217
   $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 11218
   HEAP32[$156 >> 2] = $6; //@line 11219
   $157 = $ReallocAsyncCtx3 + 16 | 0; //@line 11220
   HEAP32[$157 >> 2] = $8; //@line 11221
   $158 = $ReallocAsyncCtx3 + 20 | 0; //@line 11222
   HEAP32[$158 >> 2] = $10; //@line 11223
   $159 = $ReallocAsyncCtx3 + 24 | 0; //@line 11224
   HEAP32[$159 >> 2] = $12; //@line 11225
   $160 = $ReallocAsyncCtx3 + 28 | 0; //@line 11226
   HEAP32[$160 >> 2] = $14; //@line 11227
   $161 = $ReallocAsyncCtx3 + 32 | 0; //@line 11228
   HEAP32[$161 >> 2] = $16; //@line 11229
   $162 = $ReallocAsyncCtx3 + 36 | 0; //@line 11230
   HEAP32[$162 >> 2] = $18; //@line 11231
   $163 = $ReallocAsyncCtx3 + 40 | 0; //@line 11232
   HEAP32[$163 >> 2] = $20; //@line 11233
   $164 = $ReallocAsyncCtx3 + 44 | 0; //@line 11234
   HEAP32[$164 >> 2] = $22; //@line 11235
   $165 = $ReallocAsyncCtx3 + 48 | 0; //@line 11236
   HEAP32[$165 >> 2] = $24; //@line 11237
   $166 = $ReallocAsyncCtx3 + 52 | 0; //@line 11238
   HEAP32[$166 >> 2] = $26; //@line 11239
   $167 = $ReallocAsyncCtx3 + 56 | 0; //@line 11240
   HEAP32[$167 >> 2] = $28; //@line 11241
   $168 = $ReallocAsyncCtx3 + 60 | 0; //@line 11242
   HEAP32[$168 >> 2] = $30; //@line 11243
   $169 = $ReallocAsyncCtx3 + 64 | 0; //@line 11244
   HEAP32[$169 >> 2] = $32; //@line 11245
   $170 = $ReallocAsyncCtx3 + 68 | 0; //@line 11246
   HEAP32[$170 >> 2] = $34; //@line 11247
   $171 = $ReallocAsyncCtx3 + 72 | 0; //@line 11248
   HEAP32[$171 >> 2] = $36; //@line 11249
   $172 = $ReallocAsyncCtx3 + 76 | 0; //@line 11250
   HEAP32[$172 >> 2] = $38; //@line 11251
   $173 = $ReallocAsyncCtx3 + 80 | 0; //@line 11252
   HEAP32[$173 >> 2] = $40; //@line 11253
   $174 = $ReallocAsyncCtx3 + 84 | 0; //@line 11254
   HEAP32[$174 >> 2] = $42; //@line 11255
   $175 = $ReallocAsyncCtx3 + 88 | 0; //@line 11256
   HEAP32[$175 >> 2] = $44; //@line 11257
   $176 = $ReallocAsyncCtx3 + 92 | 0; //@line 11258
   HEAP32[$176 >> 2] = $46; //@line 11259
   $177 = $ReallocAsyncCtx3 + 96 | 0; //@line 11260
   HEAP32[$177 >> 2] = $48; //@line 11261
   $178 = $ReallocAsyncCtx3 + 100 | 0; //@line 11262
   HEAP32[$178 >> 2] = $50; //@line 11263
   sp = STACKTOP; //@line 11264
   return;
  }
  ___async_unwind = 0; //@line 11267
  HEAP32[$ReallocAsyncCtx3 >> 2] = 178; //@line 11268
  $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 11269
  HEAP32[$154 >> 2] = $2; //@line 11270
  $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 11271
  HEAP32[$155 >> 2] = $4; //@line 11272
  $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 11273
  HEAP32[$156 >> 2] = $6; //@line 11274
  $157 = $ReallocAsyncCtx3 + 16 | 0; //@line 11275
  HEAP32[$157 >> 2] = $8; //@line 11276
  $158 = $ReallocAsyncCtx3 + 20 | 0; //@line 11277
  HEAP32[$158 >> 2] = $10; //@line 11278
  $159 = $ReallocAsyncCtx3 + 24 | 0; //@line 11279
  HEAP32[$159 >> 2] = $12; //@line 11280
  $160 = $ReallocAsyncCtx3 + 28 | 0; //@line 11281
  HEAP32[$160 >> 2] = $14; //@line 11282
  $161 = $ReallocAsyncCtx3 + 32 | 0; //@line 11283
  HEAP32[$161 >> 2] = $16; //@line 11284
  $162 = $ReallocAsyncCtx3 + 36 | 0; //@line 11285
  HEAP32[$162 >> 2] = $18; //@line 11286
  $163 = $ReallocAsyncCtx3 + 40 | 0; //@line 11287
  HEAP32[$163 >> 2] = $20; //@line 11288
  $164 = $ReallocAsyncCtx3 + 44 | 0; //@line 11289
  HEAP32[$164 >> 2] = $22; //@line 11290
  $165 = $ReallocAsyncCtx3 + 48 | 0; //@line 11291
  HEAP32[$165 >> 2] = $24; //@line 11292
  $166 = $ReallocAsyncCtx3 + 52 | 0; //@line 11293
  HEAP32[$166 >> 2] = $26; //@line 11294
  $167 = $ReallocAsyncCtx3 + 56 | 0; //@line 11295
  HEAP32[$167 >> 2] = $28; //@line 11296
  $168 = $ReallocAsyncCtx3 + 60 | 0; //@line 11297
  HEAP32[$168 >> 2] = $30; //@line 11298
  $169 = $ReallocAsyncCtx3 + 64 | 0; //@line 11299
  HEAP32[$169 >> 2] = $32; //@line 11300
  $170 = $ReallocAsyncCtx3 + 68 | 0; //@line 11301
  HEAP32[$170 >> 2] = $34; //@line 11302
  $171 = $ReallocAsyncCtx3 + 72 | 0; //@line 11303
  HEAP32[$171 >> 2] = $36; //@line 11304
  $172 = $ReallocAsyncCtx3 + 76 | 0; //@line 11305
  HEAP32[$172 >> 2] = $38; //@line 11306
  $173 = $ReallocAsyncCtx3 + 80 | 0; //@line 11307
  HEAP32[$173 >> 2] = $40; //@line 11308
  $174 = $ReallocAsyncCtx3 + 84 | 0; //@line 11309
  HEAP32[$174 >> 2] = $42; //@line 11310
  $175 = $ReallocAsyncCtx3 + 88 | 0; //@line 11311
  HEAP32[$175 >> 2] = $44; //@line 11312
  $176 = $ReallocAsyncCtx3 + 92 | 0; //@line 11313
  HEAP32[$176 >> 2] = $46; //@line 11314
  $177 = $ReallocAsyncCtx3 + 96 | 0; //@line 11315
  HEAP32[$177 >> 2] = $48; //@line 11316
  $178 = $ReallocAsyncCtx3 + 100 | 0; //@line 11317
  HEAP32[$178 >> 2] = $50; //@line 11318
  sp = STACKTOP; //@line 11319
  return;
 }
 L9 : while (1) {
  $179 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 11323
  $180 = $179 + 76 | 0; //@line 11324
  $181 = HEAP32[$180 >> 2] | 0; //@line 11325
  if ($181 | 0) {
   if ($181 >>> 0 <= 100) {
    label = 26; //@line 11330
    break;
   }
   HEAP32[$180 >> 2] = $181 + -100; //@line 11334
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 11339
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 11339
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 11341
   $$131 = $$03071$reg2mem$0; //@line 11341
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 11344
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 11347
    break L9;
   }
   $52 = 6740 + ($$02972$reg2mem$1 << 2) | 0; //@line 11350
   $54 = HEAP32[$52 >> 2] | 0; //@line 11351
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 11363
   break;
  }
  $84 = $54 + 72 | 0; //@line 11366
  $85 = HEAP32[$84 >> 2] | 0; //@line 11367
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 11371
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 11372
   $$03071$reg2mem$0 = $$131; //@line 11372
   $$reg2mem$0 = $52; //@line 11372
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 11379
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 11382
    $$03071$reg2mem$0 = $$131; //@line 11382
    $$reg2mem$0 = $52; //@line 11382
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7620] = 0; //@line 11390
   return;
  }
  $246 = $$131 + 44 | 0; //@line 11393
  $247 = HEAP32[$246 >> 2] | 0; //@line 11394
  if (!$247) {
   $255 = $10 + 12 | 0; //@line 11397
   HEAP32[$255 >> 2] = 0; //@line 11398
   $257 = $12 + 4 | 0; //@line 11400
   HEAP32[$257 >> 2] = 0; //@line 11402
   HEAP32[$257 + 4 >> 2] = 0; //@line 11405
   HEAP32[$12 >> 2] = 3; //@line 11406
   $261 = $12 + 12 | 0; //@line 11407
   HEAP32[$261 >> 2] = 712; //@line 11408
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 11409
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 100, $12) | 0; //@line 11410
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 11413
    $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 11414
    HEAP32[$262 >> 2] = $261; //@line 11415
    $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 11416
    HEAP32[$263 >> 2] = $255; //@line 11417
    $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 11418
    HEAP32[$264 >> 2] = $12; //@line 11419
    $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 11420
    HEAP32[$265 >> 2] = $10; //@line 11421
    sp = STACKTOP; //@line 11422
    return;
   }
   ___async_unwind = 0; //@line 11425
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 11426
   $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 11427
   HEAP32[$262 >> 2] = $261; //@line 11428
   $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 11429
   HEAP32[$263 >> 2] = $255; //@line 11430
   $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 11431
   HEAP32[$264 >> 2] = $12; //@line 11432
   $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 11433
   HEAP32[$265 >> 2] = $10; //@line 11434
   sp = STACKTOP; //@line 11435
   return;
  } else {
   $251 = HEAP32[$247 + 4 >> 2] | 0; //@line 11440
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 11441
   FUNCTION_TABLE_vii[$251 & 7]($10, $$131 + 32 | 0); //@line 11442
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 11445
    $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 11446
    HEAP32[$252 >> 2] = $246; //@line 11447
    $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 11448
    HEAP32[$253 >> 2] = $10; //@line 11449
    $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 11450
    HEAP32[$254 >> 2] = $12; //@line 11451
    sp = STACKTOP; //@line 11452
    return;
   }
   ___async_unwind = 0; //@line 11455
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 11456
   $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 11457
   HEAP32[$252 >> 2] = $246; //@line 11458
   $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 11459
   HEAP32[$253 >> 2] = $10; //@line 11460
   $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 11461
   HEAP32[$254 >> 2] = $12; //@line 11462
   sp = STACKTOP; //@line 11463
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 11468
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 11469
  __ZL28nsapi_dns_query_async_deletei($59); //@line 11470
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 11473
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 11474
   HEAP32[$60 >> 2] = $$131; //@line 11475
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 11476
   HEAP32[$61 >> 2] = $$02972$reg2mem$1; //@line 11477
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 11478
   HEAP32[$62 >> 2] = $6; //@line 11479
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 11480
   HEAP32[$63 >> 2] = $10; //@line 11481
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 11482
   HEAP32[$64 >> 2] = $12; //@line 11483
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 11484
   HEAP32[$65 >> 2] = $14; //@line 11485
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 11486
   HEAP32[$66 >> 2] = $16; //@line 11487
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 11488
   HEAP32[$67 >> 2] = $18; //@line 11489
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 11490
   HEAP32[$68 >> 2] = $20; //@line 11491
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 11492
   HEAP32[$69 >> 2] = $22; //@line 11493
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 11494
   HEAP32[$70 >> 2] = $24; //@line 11495
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 11496
   HEAP32[$71 >> 2] = $26; //@line 11497
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 11498
   HEAP32[$72 >> 2] = $28; //@line 11499
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 11500
   HEAP32[$73 >> 2] = $30; //@line 11501
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 11502
   HEAP32[$74 >> 2] = $32; //@line 11503
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 11504
   HEAP32[$75 >> 2] = $34; //@line 11505
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 11506
   HEAP32[$76 >> 2] = $36; //@line 11507
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 11508
   HEAP32[$77 >> 2] = $38; //@line 11509
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 11510
   HEAP32[$78 >> 2] = $40; //@line 11511
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 11512
   HEAP32[$79 >> 2] = $42; //@line 11513
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 11514
   HEAP32[$80 >> 2] = $44; //@line 11515
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 11516
   HEAP32[$81 >> 2] = $46; //@line 11517
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 11518
   HEAP32[$82 >> 2] = $48; //@line 11519
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 11520
   HEAP32[$83 >> 2] = $50; //@line 11521
   sp = STACKTOP; //@line 11522
   return;
  }
  ___async_unwind = 0; //@line 11525
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 11526
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 11527
  HEAP32[$60 >> 2] = $$131; //@line 11528
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 11529
  HEAP32[$61 >> 2] = $$02972$reg2mem$1; //@line 11530
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 11531
  HEAP32[$62 >> 2] = $6; //@line 11532
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 11533
  HEAP32[$63 >> 2] = $10; //@line 11534
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 11535
  HEAP32[$64 >> 2] = $12; //@line 11536
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 11537
  HEAP32[$65 >> 2] = $14; //@line 11538
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 11539
  HEAP32[$66 >> 2] = $16; //@line 11540
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 11541
  HEAP32[$67 >> 2] = $18; //@line 11542
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 11543
  HEAP32[$68 >> 2] = $20; //@line 11544
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 11545
  HEAP32[$69 >> 2] = $22; //@line 11546
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 11547
  HEAP32[$70 >> 2] = $24; //@line 11548
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 11549
  HEAP32[$71 >> 2] = $26; //@line 11550
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 11551
  HEAP32[$72 >> 2] = $28; //@line 11552
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 11553
  HEAP32[$73 >> 2] = $30; //@line 11554
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 11555
  HEAP32[$74 >> 2] = $32; //@line 11556
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 11557
  HEAP32[$75 >> 2] = $34; //@line 11558
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 11559
  HEAP32[$76 >> 2] = $36; //@line 11560
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 11561
  HEAP32[$77 >> 2] = $38; //@line 11562
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 11563
  HEAP32[$78 >> 2] = $40; //@line 11564
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 11565
  HEAP32[$79 >> 2] = $42; //@line 11566
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 11567
  HEAP32[$80 >> 2] = $44; //@line 11568
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 11569
  HEAP32[$81 >> 2] = $46; //@line 11570
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 11571
  HEAP32[$82 >> 2] = $48; //@line 11572
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 11573
  HEAP32[$83 >> 2] = $50; //@line 11574
  sp = STACKTOP; //@line 11575
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 11580
  $92 = $54 + 44 | 0; //@line 11581
  $93 = HEAP32[$92 >> 2] | 0; //@line 11582
  if (!$93) {
   HEAP32[$16 >> 2] = 0; //@line 11585
   $124 = HEAP32[$54 >> 2] | 0; //@line 11586
   HEAP32[$18 >> 2] = 0; //@line 11587
   HEAP32[$20 >> 2] = 175; //@line 11588
   HEAP32[$22 >> 2] = $124; //@line 11589
   HEAP32[$24 >> 2] = 724; //@line 11590
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 11591
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($26, 0, $28) | 0; //@line 11592
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 11595
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 11596
    HEAP32[$125 >> 2] = $$131; //@line 11597
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 11598
    HEAP32[$126 >> 2] = $$02972$reg2mem$1; //@line 11599
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 11600
    HEAP32[$127 >> 2] = $6; //@line 11601
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 11602
    HEAP32[$128 >> 2] = $52; //@line 11603
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 11604
    HEAP32[$129 >> 2] = $10; //@line 11605
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 11606
    HEAP32[$130 >> 2] = $12; //@line 11607
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 11608
    HEAP32[$131 >> 2] = $14; //@line 11609
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 11610
    HEAP32[$132 >> 2] = $16; //@line 11611
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 11612
    HEAP32[$133 >> 2] = $18; //@line 11613
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 11614
    HEAP32[$134 >> 2] = $20; //@line 11615
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 11616
    HEAP32[$135 >> 2] = $22; //@line 11617
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 11618
    HEAP32[$136 >> 2] = $24; //@line 11619
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 11620
    HEAP32[$137 >> 2] = $26; //@line 11621
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 11622
    HEAP32[$138 >> 2] = $28; //@line 11623
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 11624
    HEAP32[$139 >> 2] = $30; //@line 11625
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 11626
    HEAP32[$140 >> 2] = $32; //@line 11627
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 11628
    HEAP32[$141 >> 2] = $34; //@line 11629
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 11630
    HEAP32[$142 >> 2] = $36; //@line 11631
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 11632
    HEAP32[$143 >> 2] = $38; //@line 11633
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 11634
    HEAP32[$144 >> 2] = $40; //@line 11635
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 11636
    HEAP32[$145 >> 2] = $42; //@line 11637
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 11638
    HEAP32[$146 >> 2] = $44; //@line 11639
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 11640
    HEAP32[$147 >> 2] = $46; //@line 11641
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 11642
    HEAP32[$148 >> 2] = $48; //@line 11643
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 11644
    HEAP32[$149 >> 2] = $50; //@line 11645
    sp = STACKTOP; //@line 11646
    return;
   }
   ___async_unwind = 0; //@line 11649
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 11650
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 11651
   HEAP32[$125 >> 2] = $$131; //@line 11652
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 11653
   HEAP32[$126 >> 2] = $$02972$reg2mem$1; //@line 11654
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 11655
   HEAP32[$127 >> 2] = $6; //@line 11656
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 11657
   HEAP32[$128 >> 2] = $52; //@line 11658
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 11659
   HEAP32[$129 >> 2] = $10; //@line 11660
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 11661
   HEAP32[$130 >> 2] = $12; //@line 11662
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 11663
   HEAP32[$131 >> 2] = $14; //@line 11664
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 11665
   HEAP32[$132 >> 2] = $16; //@line 11666
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 11667
   HEAP32[$133 >> 2] = $18; //@line 11668
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 11669
   HEAP32[$134 >> 2] = $20; //@line 11670
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 11671
   HEAP32[$135 >> 2] = $22; //@line 11672
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 11673
   HEAP32[$136 >> 2] = $24; //@line 11674
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 11675
   HEAP32[$137 >> 2] = $26; //@line 11676
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 11677
   HEAP32[$138 >> 2] = $28; //@line 11678
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 11679
   HEAP32[$139 >> 2] = $30; //@line 11680
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 11681
   HEAP32[$140 >> 2] = $32; //@line 11682
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 11683
   HEAP32[$141 >> 2] = $34; //@line 11684
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 11685
   HEAP32[$142 >> 2] = $36; //@line 11686
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 11687
   HEAP32[$143 >> 2] = $38; //@line 11688
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 11689
   HEAP32[$144 >> 2] = $40; //@line 11690
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 11691
   HEAP32[$145 >> 2] = $42; //@line 11692
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 11693
   HEAP32[$146 >> 2] = $44; //@line 11694
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 11695
   HEAP32[$147 >> 2] = $46; //@line 11696
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 11697
   HEAP32[$148 >> 2] = $48; //@line 11698
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 11699
   HEAP32[$149 >> 2] = $50; //@line 11700
   sp = STACKTOP; //@line 11701
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 11706
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 11707
   FUNCTION_TABLE_vii[$97 & 7]($14, $54 + 32 | 0); //@line 11708
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 11711
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 11712
    HEAP32[$98 >> 2] = $$131; //@line 11713
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 11714
    HEAP32[$99 >> 2] = $$02972$reg2mem$1; //@line 11715
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 11716
    HEAP32[$100 >> 2] = $6; //@line 11717
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 11718
    HEAP32[$101 >> 2] = $52; //@line 11719
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 11720
    HEAP32[$102 >> 2] = $10; //@line 11721
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 11722
    HEAP32[$103 >> 2] = $12; //@line 11723
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 11724
    HEAP32[$104 >> 2] = $14; //@line 11725
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 11726
    HEAP32[$105 >> 2] = $16; //@line 11727
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 11728
    HEAP32[$106 >> 2] = $18; //@line 11729
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 11730
    HEAP32[$107 >> 2] = $20; //@line 11731
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 11732
    HEAP32[$108 >> 2] = $22; //@line 11733
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 11734
    HEAP32[$109 >> 2] = $24; //@line 11735
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 11736
    HEAP32[$110 >> 2] = $26; //@line 11737
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 11738
    HEAP32[$111 >> 2] = $28; //@line 11739
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 11740
    HEAP32[$112 >> 2] = $30; //@line 11741
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 11742
    HEAP32[$113 >> 2] = $32; //@line 11743
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 11744
    HEAP32[$114 >> 2] = $34; //@line 11745
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 11746
    HEAP32[$115 >> 2] = $36; //@line 11747
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 11748
    HEAP32[$116 >> 2] = $38; //@line 11749
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 11750
    HEAP32[$117 >> 2] = $40; //@line 11751
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 11752
    HEAP32[$118 >> 2] = $42; //@line 11753
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 11754
    HEAP32[$119 >> 2] = $44; //@line 11755
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 11756
    HEAP32[$120 >> 2] = $46; //@line 11757
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 11758
    HEAP32[$121 >> 2] = $48; //@line 11759
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 11760
    HEAP32[$122 >> 2] = $50; //@line 11761
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 11762
    HEAP32[$123 >> 2] = $92; //@line 11763
    sp = STACKTOP; //@line 11764
    return;
   }
   ___async_unwind = 0; //@line 11767
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 11768
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 11769
   HEAP32[$98 >> 2] = $$131; //@line 11770
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 11771
   HEAP32[$99 >> 2] = $$02972$reg2mem$1; //@line 11772
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 11773
   HEAP32[$100 >> 2] = $6; //@line 11774
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 11775
   HEAP32[$101 >> 2] = $52; //@line 11776
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 11777
   HEAP32[$102 >> 2] = $10; //@line 11778
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 11779
   HEAP32[$103 >> 2] = $12; //@line 11780
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 11781
   HEAP32[$104 >> 2] = $14; //@line 11782
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 11783
   HEAP32[$105 >> 2] = $16; //@line 11784
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 11785
   HEAP32[$106 >> 2] = $18; //@line 11786
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 11787
   HEAP32[$107 >> 2] = $20; //@line 11788
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 11789
   HEAP32[$108 >> 2] = $22; //@line 11790
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 11791
   HEAP32[$109 >> 2] = $24; //@line 11792
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 11793
   HEAP32[$110 >> 2] = $26; //@line 11794
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 11795
   HEAP32[$111 >> 2] = $28; //@line 11796
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 11797
   HEAP32[$112 >> 2] = $30; //@line 11798
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 11799
   HEAP32[$113 >> 2] = $32; //@line 11800
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 11801
   HEAP32[$114 >> 2] = $34; //@line 11802
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 11803
   HEAP32[$115 >> 2] = $36; //@line 11804
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 11805
   HEAP32[$116 >> 2] = $38; //@line 11806
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 11807
   HEAP32[$117 >> 2] = $40; //@line 11808
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 11809
   HEAP32[$118 >> 2] = $42; //@line 11810
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 11811
   HEAP32[$119 >> 2] = $44; //@line 11812
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 11813
   HEAP32[$120 >> 2] = $46; //@line 11814
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 11815
   HEAP32[$121 >> 2] = $48; //@line 11816
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 11817
   HEAP32[$122 >> 2] = $50; //@line 11818
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 11819
   HEAP32[$123 >> 2] = $92; //@line 11820
   sp = STACKTOP; //@line 11821
   return;
  }
 } else if ((label | 0) == 26) {
  HEAP32[$180 >> 2] = 0; //@line 11826
  $185 = $179 + 44 | 0; //@line 11827
  $186 = HEAP32[$185 >> 2] | 0; //@line 11828
  if (!$186) {
   HEAP32[$36 >> 2] = 0; //@line 11831
   $217 = HEAP32[$179 >> 2] | 0; //@line 11832
   HEAP32[$38 >> 2] = 0; //@line 11833
   HEAP32[$40 >> 2] = 180; //@line 11834
   HEAP32[$42 >> 2] = $217; //@line 11835
   HEAP32[$6 >> 2] = 724; //@line 11836
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 11837
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 11838
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 11841
    $218 = $ReallocAsyncCtx13 + 4 | 0; //@line 11842
    HEAP32[$218 >> 2] = $$03071$reg2mem$0; //@line 11843
    $219 = $ReallocAsyncCtx13 + 8 | 0; //@line 11844
    HEAP32[$219 >> 2] = $$02972$reg2mem$0; //@line 11845
    $220 = $ReallocAsyncCtx13 + 12 | 0; //@line 11846
    HEAP32[$220 >> 2] = $6; //@line 11847
    $221 = $ReallocAsyncCtx13 + 16 | 0; //@line 11848
    HEAP32[$221 >> 2] = $$reg2mem$0; //@line 11849
    $222 = $ReallocAsyncCtx13 + 20 | 0; //@line 11850
    HEAP32[$222 >> 2] = $10; //@line 11851
    $223 = $ReallocAsyncCtx13 + 24 | 0; //@line 11852
    HEAP32[$223 >> 2] = $12; //@line 11853
    $224 = $ReallocAsyncCtx13 + 28 | 0; //@line 11854
    HEAP32[$224 >> 2] = $14; //@line 11855
    $225 = $ReallocAsyncCtx13 + 32 | 0; //@line 11856
    HEAP32[$225 >> 2] = $16; //@line 11857
    $226 = $ReallocAsyncCtx13 + 36 | 0; //@line 11858
    HEAP32[$226 >> 2] = $18; //@line 11859
    $227 = $ReallocAsyncCtx13 + 40 | 0; //@line 11860
    HEAP32[$227 >> 2] = $20; //@line 11861
    $228 = $ReallocAsyncCtx13 + 44 | 0; //@line 11862
    HEAP32[$228 >> 2] = $22; //@line 11863
    $229 = $ReallocAsyncCtx13 + 48 | 0; //@line 11864
    HEAP32[$229 >> 2] = $24; //@line 11865
    $230 = $ReallocAsyncCtx13 + 52 | 0; //@line 11866
    HEAP32[$230 >> 2] = $26; //@line 11867
    $231 = $ReallocAsyncCtx13 + 56 | 0; //@line 11868
    HEAP32[$231 >> 2] = $28; //@line 11869
    $232 = $ReallocAsyncCtx13 + 60 | 0; //@line 11870
    HEAP32[$232 >> 2] = $30; //@line 11871
    $233 = $ReallocAsyncCtx13 + 64 | 0; //@line 11872
    HEAP32[$233 >> 2] = $32; //@line 11873
    $234 = $ReallocAsyncCtx13 + 68 | 0; //@line 11874
    HEAP32[$234 >> 2] = $34; //@line 11875
    $235 = $ReallocAsyncCtx13 + 72 | 0; //@line 11876
    HEAP32[$235 >> 2] = $36; //@line 11877
    $236 = $ReallocAsyncCtx13 + 76 | 0; //@line 11878
    HEAP32[$236 >> 2] = $38; //@line 11879
    $237 = $ReallocAsyncCtx13 + 80 | 0; //@line 11880
    HEAP32[$237 >> 2] = $40; //@line 11881
    $238 = $ReallocAsyncCtx13 + 84 | 0; //@line 11882
    HEAP32[$238 >> 2] = $42; //@line 11883
    $239 = $ReallocAsyncCtx13 + 88 | 0; //@line 11884
    HEAP32[$239 >> 2] = $44; //@line 11885
    $240 = $ReallocAsyncCtx13 + 92 | 0; //@line 11886
    HEAP32[$240 >> 2] = $46; //@line 11887
    $241 = $ReallocAsyncCtx13 + 96 | 0; //@line 11888
    HEAP32[$241 >> 2] = $48; //@line 11889
    $242 = $ReallocAsyncCtx13 + 100 | 0; //@line 11890
    HEAP32[$242 >> 2] = $50; //@line 11891
    sp = STACKTOP; //@line 11892
    return;
   }
   ___async_unwind = 0; //@line 11895
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 11896
   $218 = $ReallocAsyncCtx13 + 4 | 0; //@line 11897
   HEAP32[$218 >> 2] = $$03071$reg2mem$0; //@line 11898
   $219 = $ReallocAsyncCtx13 + 8 | 0; //@line 11899
   HEAP32[$219 >> 2] = $$02972$reg2mem$0; //@line 11900
   $220 = $ReallocAsyncCtx13 + 12 | 0; //@line 11901
   HEAP32[$220 >> 2] = $6; //@line 11902
   $221 = $ReallocAsyncCtx13 + 16 | 0; //@line 11903
   HEAP32[$221 >> 2] = $$reg2mem$0; //@line 11904
   $222 = $ReallocAsyncCtx13 + 20 | 0; //@line 11905
   HEAP32[$222 >> 2] = $10; //@line 11906
   $223 = $ReallocAsyncCtx13 + 24 | 0; //@line 11907
   HEAP32[$223 >> 2] = $12; //@line 11908
   $224 = $ReallocAsyncCtx13 + 28 | 0; //@line 11909
   HEAP32[$224 >> 2] = $14; //@line 11910
   $225 = $ReallocAsyncCtx13 + 32 | 0; //@line 11911
   HEAP32[$225 >> 2] = $16; //@line 11912
   $226 = $ReallocAsyncCtx13 + 36 | 0; //@line 11913
   HEAP32[$226 >> 2] = $18; //@line 11914
   $227 = $ReallocAsyncCtx13 + 40 | 0; //@line 11915
   HEAP32[$227 >> 2] = $20; //@line 11916
   $228 = $ReallocAsyncCtx13 + 44 | 0; //@line 11917
   HEAP32[$228 >> 2] = $22; //@line 11918
   $229 = $ReallocAsyncCtx13 + 48 | 0; //@line 11919
   HEAP32[$229 >> 2] = $24; //@line 11920
   $230 = $ReallocAsyncCtx13 + 52 | 0; //@line 11921
   HEAP32[$230 >> 2] = $26; //@line 11922
   $231 = $ReallocAsyncCtx13 + 56 | 0; //@line 11923
   HEAP32[$231 >> 2] = $28; //@line 11924
   $232 = $ReallocAsyncCtx13 + 60 | 0; //@line 11925
   HEAP32[$232 >> 2] = $30; //@line 11926
   $233 = $ReallocAsyncCtx13 + 64 | 0; //@line 11927
   HEAP32[$233 >> 2] = $32; //@line 11928
   $234 = $ReallocAsyncCtx13 + 68 | 0; //@line 11929
   HEAP32[$234 >> 2] = $34; //@line 11930
   $235 = $ReallocAsyncCtx13 + 72 | 0; //@line 11931
   HEAP32[$235 >> 2] = $36; //@line 11932
   $236 = $ReallocAsyncCtx13 + 76 | 0; //@line 11933
   HEAP32[$236 >> 2] = $38; //@line 11934
   $237 = $ReallocAsyncCtx13 + 80 | 0; //@line 11935
   HEAP32[$237 >> 2] = $40; //@line 11936
   $238 = $ReallocAsyncCtx13 + 84 | 0; //@line 11937
   HEAP32[$238 >> 2] = $42; //@line 11938
   $239 = $ReallocAsyncCtx13 + 88 | 0; //@line 11939
   HEAP32[$239 >> 2] = $44; //@line 11940
   $240 = $ReallocAsyncCtx13 + 92 | 0; //@line 11941
   HEAP32[$240 >> 2] = $46; //@line 11942
   $241 = $ReallocAsyncCtx13 + 96 | 0; //@line 11943
   HEAP32[$241 >> 2] = $48; //@line 11944
   $242 = $ReallocAsyncCtx13 + 100 | 0; //@line 11945
   HEAP32[$242 >> 2] = $50; //@line 11946
   sp = STACKTOP; //@line 11947
   return;
  } else {
   $190 = HEAP32[$186 + 4 >> 2] | 0; //@line 11952
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 11953
   FUNCTION_TABLE_vii[$190 & 7]($34, $179 + 32 | 0); //@line 11954
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 11957
    $191 = $ReallocAsyncCtx4 + 4 | 0; //@line 11958
    HEAP32[$191 >> 2] = $$03071$reg2mem$0; //@line 11959
    $192 = $ReallocAsyncCtx4 + 8 | 0; //@line 11960
    HEAP32[$192 >> 2] = $$02972$reg2mem$0; //@line 11961
    $193 = $ReallocAsyncCtx4 + 12 | 0; //@line 11962
    HEAP32[$193 >> 2] = $6; //@line 11963
    $194 = $ReallocAsyncCtx4 + 16 | 0; //@line 11964
    HEAP32[$194 >> 2] = $$reg2mem$0; //@line 11965
    $195 = $ReallocAsyncCtx4 + 20 | 0; //@line 11966
    HEAP32[$195 >> 2] = $10; //@line 11967
    $196 = $ReallocAsyncCtx4 + 24 | 0; //@line 11968
    HEAP32[$196 >> 2] = $12; //@line 11969
    $197 = $ReallocAsyncCtx4 + 28 | 0; //@line 11970
    HEAP32[$197 >> 2] = $14; //@line 11971
    $198 = $ReallocAsyncCtx4 + 32 | 0; //@line 11972
    HEAP32[$198 >> 2] = $16; //@line 11973
    $199 = $ReallocAsyncCtx4 + 36 | 0; //@line 11974
    HEAP32[$199 >> 2] = $18; //@line 11975
    $200 = $ReallocAsyncCtx4 + 40 | 0; //@line 11976
    HEAP32[$200 >> 2] = $20; //@line 11977
    $201 = $ReallocAsyncCtx4 + 44 | 0; //@line 11978
    HEAP32[$201 >> 2] = $22; //@line 11979
    $202 = $ReallocAsyncCtx4 + 48 | 0; //@line 11980
    HEAP32[$202 >> 2] = $24; //@line 11981
    $203 = $ReallocAsyncCtx4 + 52 | 0; //@line 11982
    HEAP32[$203 >> 2] = $26; //@line 11983
    $204 = $ReallocAsyncCtx4 + 56 | 0; //@line 11984
    HEAP32[$204 >> 2] = $28; //@line 11985
    $205 = $ReallocAsyncCtx4 + 60 | 0; //@line 11986
    HEAP32[$205 >> 2] = $30; //@line 11987
    $206 = $ReallocAsyncCtx4 + 64 | 0; //@line 11988
    HEAP32[$206 >> 2] = $32; //@line 11989
    $207 = $ReallocAsyncCtx4 + 68 | 0; //@line 11990
    HEAP32[$207 >> 2] = $34; //@line 11991
    $208 = $ReallocAsyncCtx4 + 72 | 0; //@line 11992
    HEAP32[$208 >> 2] = $36; //@line 11993
    $209 = $ReallocAsyncCtx4 + 76 | 0; //@line 11994
    HEAP32[$209 >> 2] = $38; //@line 11995
    $210 = $ReallocAsyncCtx4 + 80 | 0; //@line 11996
    HEAP32[$210 >> 2] = $40; //@line 11997
    $211 = $ReallocAsyncCtx4 + 84 | 0; //@line 11998
    HEAP32[$211 >> 2] = $42; //@line 11999
    $212 = $ReallocAsyncCtx4 + 88 | 0; //@line 12000
    HEAP32[$212 >> 2] = $44; //@line 12001
    $213 = $ReallocAsyncCtx4 + 92 | 0; //@line 12002
    HEAP32[$213 >> 2] = $46; //@line 12003
    $214 = $ReallocAsyncCtx4 + 96 | 0; //@line 12004
    HEAP32[$214 >> 2] = $48; //@line 12005
    $215 = $ReallocAsyncCtx4 + 100 | 0; //@line 12006
    HEAP32[$215 >> 2] = $50; //@line 12007
    $216 = $ReallocAsyncCtx4 + 104 | 0; //@line 12008
    HEAP32[$216 >> 2] = $185; //@line 12009
    sp = STACKTOP; //@line 12010
    return;
   }
   ___async_unwind = 0; //@line 12013
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 12014
   $191 = $ReallocAsyncCtx4 + 4 | 0; //@line 12015
   HEAP32[$191 >> 2] = $$03071$reg2mem$0; //@line 12016
   $192 = $ReallocAsyncCtx4 + 8 | 0; //@line 12017
   HEAP32[$192 >> 2] = $$02972$reg2mem$0; //@line 12018
   $193 = $ReallocAsyncCtx4 + 12 | 0; //@line 12019
   HEAP32[$193 >> 2] = $6; //@line 12020
   $194 = $ReallocAsyncCtx4 + 16 | 0; //@line 12021
   HEAP32[$194 >> 2] = $$reg2mem$0; //@line 12022
   $195 = $ReallocAsyncCtx4 + 20 | 0; //@line 12023
   HEAP32[$195 >> 2] = $10; //@line 12024
   $196 = $ReallocAsyncCtx4 + 24 | 0; //@line 12025
   HEAP32[$196 >> 2] = $12; //@line 12026
   $197 = $ReallocAsyncCtx4 + 28 | 0; //@line 12027
   HEAP32[$197 >> 2] = $14; //@line 12028
   $198 = $ReallocAsyncCtx4 + 32 | 0; //@line 12029
   HEAP32[$198 >> 2] = $16; //@line 12030
   $199 = $ReallocAsyncCtx4 + 36 | 0; //@line 12031
   HEAP32[$199 >> 2] = $18; //@line 12032
   $200 = $ReallocAsyncCtx4 + 40 | 0; //@line 12033
   HEAP32[$200 >> 2] = $20; //@line 12034
   $201 = $ReallocAsyncCtx4 + 44 | 0; //@line 12035
   HEAP32[$201 >> 2] = $22; //@line 12036
   $202 = $ReallocAsyncCtx4 + 48 | 0; //@line 12037
   HEAP32[$202 >> 2] = $24; //@line 12038
   $203 = $ReallocAsyncCtx4 + 52 | 0; //@line 12039
   HEAP32[$203 >> 2] = $26; //@line 12040
   $204 = $ReallocAsyncCtx4 + 56 | 0; //@line 12041
   HEAP32[$204 >> 2] = $28; //@line 12042
   $205 = $ReallocAsyncCtx4 + 60 | 0; //@line 12043
   HEAP32[$205 >> 2] = $30; //@line 12044
   $206 = $ReallocAsyncCtx4 + 64 | 0; //@line 12045
   HEAP32[$206 >> 2] = $32; //@line 12046
   $207 = $ReallocAsyncCtx4 + 68 | 0; //@line 12047
   HEAP32[$207 >> 2] = $34; //@line 12048
   $208 = $ReallocAsyncCtx4 + 72 | 0; //@line 12049
   HEAP32[$208 >> 2] = $36; //@line 12050
   $209 = $ReallocAsyncCtx4 + 76 | 0; //@line 12051
   HEAP32[$209 >> 2] = $38; //@line 12052
   $210 = $ReallocAsyncCtx4 + 80 | 0; //@line 12053
   HEAP32[$210 >> 2] = $40; //@line 12054
   $211 = $ReallocAsyncCtx4 + 84 | 0; //@line 12055
   HEAP32[$211 >> 2] = $42; //@line 12056
   $212 = $ReallocAsyncCtx4 + 88 | 0; //@line 12057
   HEAP32[$212 >> 2] = $44; //@line 12058
   $213 = $ReallocAsyncCtx4 + 92 | 0; //@line 12059
   HEAP32[$213 >> 2] = $46; //@line 12060
   $214 = $ReallocAsyncCtx4 + 96 | 0; //@line 12061
   HEAP32[$214 >> 2] = $48; //@line 12062
   $215 = $ReallocAsyncCtx4 + 100 | 0; //@line 12063
   HEAP32[$215 >> 2] = $50; //@line 12064
   $216 = $ReallocAsyncCtx4 + 104 | 0; //@line 12065
   HEAP32[$216 >> 2] = $185; //@line 12066
   sp = STACKTOP; //@line 12067
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_203($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $246 = 0, $247 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 13034
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13036
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13038
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13040
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13042
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13044
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13046
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13048
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13050
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13052
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13054
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13056
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13058
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13060
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13062
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13064
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13066
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 13068
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 13070
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 13072
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 13074
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 13076
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 13078
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 13080
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 13082
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 13084
 $214 = HEAP32[$50 >> 2] | 0; //@line 13085
 if (!$214) {
  $$02972$reg2mem$0 = $4; //@line 13088
  $$03071$reg2mem$0 = $2; //@line 13088
  $$reg2mem$0 = $8; //@line 13088
 } else {
  $217 = HEAP32[$214 + 8 >> 2] | 0; //@line 13091
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 13092
  FUNCTION_TABLE_vi[$217 & 511]($34); //@line 13093
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 183; //@line 13096
   $218 = $ReallocAsyncCtx6 + 4 | 0; //@line 13097
   HEAP32[$218 >> 2] = $2; //@line 13098
   $219 = $ReallocAsyncCtx6 + 8 | 0; //@line 13099
   HEAP32[$219 >> 2] = $4; //@line 13100
   $220 = $ReallocAsyncCtx6 + 12 | 0; //@line 13101
   HEAP32[$220 >> 2] = $6; //@line 13102
   $221 = $ReallocAsyncCtx6 + 16 | 0; //@line 13103
   HEAP32[$221 >> 2] = $8; //@line 13104
   $222 = $ReallocAsyncCtx6 + 20 | 0; //@line 13105
   HEAP32[$222 >> 2] = $10; //@line 13106
   $223 = $ReallocAsyncCtx6 + 24 | 0; //@line 13107
   HEAP32[$223 >> 2] = $12; //@line 13108
   $224 = $ReallocAsyncCtx6 + 28 | 0; //@line 13109
   HEAP32[$224 >> 2] = $14; //@line 13110
   $225 = $ReallocAsyncCtx6 + 32 | 0; //@line 13111
   HEAP32[$225 >> 2] = $16; //@line 13112
   $226 = $ReallocAsyncCtx6 + 36 | 0; //@line 13113
   HEAP32[$226 >> 2] = $18; //@line 13114
   $227 = $ReallocAsyncCtx6 + 40 | 0; //@line 13115
   HEAP32[$227 >> 2] = $20; //@line 13116
   $228 = $ReallocAsyncCtx6 + 44 | 0; //@line 13117
   HEAP32[$228 >> 2] = $22; //@line 13118
   $229 = $ReallocAsyncCtx6 + 48 | 0; //@line 13119
   HEAP32[$229 >> 2] = $24; //@line 13120
   $230 = $ReallocAsyncCtx6 + 52 | 0; //@line 13121
   HEAP32[$230 >> 2] = $26; //@line 13122
   $231 = $ReallocAsyncCtx6 + 56 | 0; //@line 13123
   HEAP32[$231 >> 2] = $28; //@line 13124
   $232 = $ReallocAsyncCtx6 + 60 | 0; //@line 13125
   HEAP32[$232 >> 2] = $30; //@line 13126
   $233 = $ReallocAsyncCtx6 + 64 | 0; //@line 13127
   HEAP32[$233 >> 2] = $32; //@line 13128
   $234 = $ReallocAsyncCtx6 + 68 | 0; //@line 13129
   HEAP32[$234 >> 2] = $34; //@line 13130
   $235 = $ReallocAsyncCtx6 + 72 | 0; //@line 13131
   HEAP32[$235 >> 2] = $36; //@line 13132
   $236 = $ReallocAsyncCtx6 + 76 | 0; //@line 13133
   HEAP32[$236 >> 2] = $38; //@line 13134
   $237 = $ReallocAsyncCtx6 + 80 | 0; //@line 13135
   HEAP32[$237 >> 2] = $40; //@line 13136
   $238 = $ReallocAsyncCtx6 + 84 | 0; //@line 13137
   HEAP32[$238 >> 2] = $42; //@line 13138
   $239 = $ReallocAsyncCtx6 + 88 | 0; //@line 13139
   HEAP32[$239 >> 2] = $44; //@line 13140
   $240 = $ReallocAsyncCtx6 + 92 | 0; //@line 13141
   HEAP32[$240 >> 2] = $46; //@line 13142
   $241 = $ReallocAsyncCtx6 + 96 | 0; //@line 13143
   HEAP32[$241 >> 2] = $48; //@line 13144
   $242 = $ReallocAsyncCtx6 + 100 | 0; //@line 13145
   HEAP32[$242 >> 2] = $50; //@line 13146
   sp = STACKTOP; //@line 13147
   return;
  }
  ___async_unwind = 0; //@line 13150
  HEAP32[$ReallocAsyncCtx6 >> 2] = 183; //@line 13151
  $218 = $ReallocAsyncCtx6 + 4 | 0; //@line 13152
  HEAP32[$218 >> 2] = $2; //@line 13153
  $219 = $ReallocAsyncCtx6 + 8 | 0; //@line 13154
  HEAP32[$219 >> 2] = $4; //@line 13155
  $220 = $ReallocAsyncCtx6 + 12 | 0; //@line 13156
  HEAP32[$220 >> 2] = $6; //@line 13157
  $221 = $ReallocAsyncCtx6 + 16 | 0; //@line 13158
  HEAP32[$221 >> 2] = $8; //@line 13159
  $222 = $ReallocAsyncCtx6 + 20 | 0; //@line 13160
  HEAP32[$222 >> 2] = $10; //@line 13161
  $223 = $ReallocAsyncCtx6 + 24 | 0; //@line 13162
  HEAP32[$223 >> 2] = $12; //@line 13163
  $224 = $ReallocAsyncCtx6 + 28 | 0; //@line 13164
  HEAP32[$224 >> 2] = $14; //@line 13165
  $225 = $ReallocAsyncCtx6 + 32 | 0; //@line 13166
  HEAP32[$225 >> 2] = $16; //@line 13167
  $226 = $ReallocAsyncCtx6 + 36 | 0; //@line 13168
  HEAP32[$226 >> 2] = $18; //@line 13169
  $227 = $ReallocAsyncCtx6 + 40 | 0; //@line 13170
  HEAP32[$227 >> 2] = $20; //@line 13171
  $228 = $ReallocAsyncCtx6 + 44 | 0; //@line 13172
  HEAP32[$228 >> 2] = $22; //@line 13173
  $229 = $ReallocAsyncCtx6 + 48 | 0; //@line 13174
  HEAP32[$229 >> 2] = $24; //@line 13175
  $230 = $ReallocAsyncCtx6 + 52 | 0; //@line 13176
  HEAP32[$230 >> 2] = $26; //@line 13177
  $231 = $ReallocAsyncCtx6 + 56 | 0; //@line 13178
  HEAP32[$231 >> 2] = $28; //@line 13179
  $232 = $ReallocAsyncCtx6 + 60 | 0; //@line 13180
  HEAP32[$232 >> 2] = $30; //@line 13181
  $233 = $ReallocAsyncCtx6 + 64 | 0; //@line 13182
  HEAP32[$233 >> 2] = $32; //@line 13183
  $234 = $ReallocAsyncCtx6 + 68 | 0; //@line 13184
  HEAP32[$234 >> 2] = $34; //@line 13185
  $235 = $ReallocAsyncCtx6 + 72 | 0; //@line 13186
  HEAP32[$235 >> 2] = $36; //@line 13187
  $236 = $ReallocAsyncCtx6 + 76 | 0; //@line 13188
  HEAP32[$236 >> 2] = $38; //@line 13189
  $237 = $ReallocAsyncCtx6 + 80 | 0; //@line 13190
  HEAP32[$237 >> 2] = $40; //@line 13191
  $238 = $ReallocAsyncCtx6 + 84 | 0; //@line 13192
  HEAP32[$238 >> 2] = $42; //@line 13193
  $239 = $ReallocAsyncCtx6 + 88 | 0; //@line 13194
  HEAP32[$239 >> 2] = $44; //@line 13195
  $240 = $ReallocAsyncCtx6 + 92 | 0; //@line 13196
  HEAP32[$240 >> 2] = $46; //@line 13197
  $241 = $ReallocAsyncCtx6 + 96 | 0; //@line 13198
  HEAP32[$241 >> 2] = $48; //@line 13199
  $242 = $ReallocAsyncCtx6 + 100 | 0; //@line 13200
  HEAP32[$242 >> 2] = $50; //@line 13201
  sp = STACKTOP; //@line 13202
  return;
 }
 L9 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 13209
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 13209
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 13211
   $$131 = $$03071$reg2mem$0; //@line 13211
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 13214
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 13217
    break L9;
   }
   $52 = 6740 + ($$02972$reg2mem$1 << 2) | 0; //@line 13220
   $54 = HEAP32[$52 >> 2] | 0; //@line 13221
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 13233
   break;
  }
  $84 = $54 + 72 | 0; //@line 13236
  $85 = HEAP32[$84 >> 2] | 0; //@line 13237
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 13241
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 13247
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 13251
  $151 = $150 + 76 | 0; //@line 13252
  $152 = HEAP32[$151 >> 2] | 0; //@line 13253
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 13256
   $$03071$reg2mem$0 = $$131; //@line 13256
   $$reg2mem$0 = $52; //@line 13256
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 13261
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 13265
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 13266
  $$03071$reg2mem$0 = $$131; //@line 13266
  $$reg2mem$0 = $52; //@line 13266
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7620] = 0; //@line 13271
   return;
  }
  $246 = $$131 + 44 | 0; //@line 13274
  $247 = HEAP32[$246 >> 2] | 0; //@line 13275
  if (!$247) {
   $255 = $10 + 12 | 0; //@line 13278
   HEAP32[$255 >> 2] = 0; //@line 13279
   $257 = $12 + 4 | 0; //@line 13281
   HEAP32[$257 >> 2] = 0; //@line 13283
   HEAP32[$257 + 4 >> 2] = 0; //@line 13286
   HEAP32[$12 >> 2] = 3; //@line 13287
   $261 = $12 + 12 | 0; //@line 13288
   HEAP32[$261 >> 2] = 712; //@line 13289
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 13290
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 100, $12) | 0; //@line 13291
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 13294
    $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 13295
    HEAP32[$262 >> 2] = $261; //@line 13296
    $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 13297
    HEAP32[$263 >> 2] = $255; //@line 13298
    $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 13299
    HEAP32[$264 >> 2] = $12; //@line 13300
    $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 13301
    HEAP32[$265 >> 2] = $10; //@line 13302
    sp = STACKTOP; //@line 13303
    return;
   }
   ___async_unwind = 0; //@line 13306
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 13307
   $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 13308
   HEAP32[$262 >> 2] = $261; //@line 13309
   $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 13310
   HEAP32[$263 >> 2] = $255; //@line 13311
   $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 13312
   HEAP32[$264 >> 2] = $12; //@line 13313
   $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 13314
   HEAP32[$265 >> 2] = $10; //@line 13315
   sp = STACKTOP; //@line 13316
   return;
  } else {
   $251 = HEAP32[$247 + 4 >> 2] | 0; //@line 13321
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 13322
   FUNCTION_TABLE_vii[$251 & 7]($10, $$131 + 32 | 0); //@line 13323
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 13326
    $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 13327
    HEAP32[$252 >> 2] = $246; //@line 13328
    $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 13329
    HEAP32[$253 >> 2] = $10; //@line 13330
    $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 13331
    HEAP32[$254 >> 2] = $12; //@line 13332
    sp = STACKTOP; //@line 13333
    return;
   }
   ___async_unwind = 0; //@line 13336
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 13337
   $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 13338
   HEAP32[$252 >> 2] = $246; //@line 13339
   $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 13340
   HEAP32[$253 >> 2] = $10; //@line 13341
   $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 13342
   HEAP32[$254 >> 2] = $12; //@line 13343
   sp = STACKTOP; //@line 13344
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 13349
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 13350
  __ZL28nsapi_dns_query_async_deletei($59); //@line 13351
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 13354
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 13355
   HEAP32[$60 >> 2] = $$131; //@line 13356
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 13357
   HEAP32[$61 >> 2] = $$02972$reg2mem$1; //@line 13358
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 13359
   HEAP32[$62 >> 2] = $6; //@line 13360
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 13361
   HEAP32[$63 >> 2] = $10; //@line 13362
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 13363
   HEAP32[$64 >> 2] = $12; //@line 13364
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 13365
   HEAP32[$65 >> 2] = $14; //@line 13366
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 13367
   HEAP32[$66 >> 2] = $16; //@line 13368
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 13369
   HEAP32[$67 >> 2] = $18; //@line 13370
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 13371
   HEAP32[$68 >> 2] = $20; //@line 13372
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 13373
   HEAP32[$69 >> 2] = $22; //@line 13374
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 13375
   HEAP32[$70 >> 2] = $24; //@line 13376
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 13377
   HEAP32[$71 >> 2] = $26; //@line 13378
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 13379
   HEAP32[$72 >> 2] = $28; //@line 13380
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 13381
   HEAP32[$73 >> 2] = $30; //@line 13382
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 13383
   HEAP32[$74 >> 2] = $32; //@line 13384
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 13385
   HEAP32[$75 >> 2] = $34; //@line 13386
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 13387
   HEAP32[$76 >> 2] = $36; //@line 13388
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 13389
   HEAP32[$77 >> 2] = $38; //@line 13390
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 13391
   HEAP32[$78 >> 2] = $40; //@line 13392
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 13393
   HEAP32[$79 >> 2] = $42; //@line 13394
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 13395
   HEAP32[$80 >> 2] = $44; //@line 13396
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 13397
   HEAP32[$81 >> 2] = $46; //@line 13398
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 13399
   HEAP32[$82 >> 2] = $48; //@line 13400
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 13401
   HEAP32[$83 >> 2] = $50; //@line 13402
   sp = STACKTOP; //@line 13403
   return;
  }
  ___async_unwind = 0; //@line 13406
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 13407
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 13408
  HEAP32[$60 >> 2] = $$131; //@line 13409
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 13410
  HEAP32[$61 >> 2] = $$02972$reg2mem$1; //@line 13411
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 13412
  HEAP32[$62 >> 2] = $6; //@line 13413
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 13414
  HEAP32[$63 >> 2] = $10; //@line 13415
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 13416
  HEAP32[$64 >> 2] = $12; //@line 13417
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 13418
  HEAP32[$65 >> 2] = $14; //@line 13419
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 13420
  HEAP32[$66 >> 2] = $16; //@line 13421
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 13422
  HEAP32[$67 >> 2] = $18; //@line 13423
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 13424
  HEAP32[$68 >> 2] = $20; //@line 13425
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 13426
  HEAP32[$69 >> 2] = $22; //@line 13427
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 13428
  HEAP32[$70 >> 2] = $24; //@line 13429
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 13430
  HEAP32[$71 >> 2] = $26; //@line 13431
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 13432
  HEAP32[$72 >> 2] = $28; //@line 13433
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 13434
  HEAP32[$73 >> 2] = $30; //@line 13435
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 13436
  HEAP32[$74 >> 2] = $32; //@line 13437
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 13438
  HEAP32[$75 >> 2] = $34; //@line 13439
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 13440
  HEAP32[$76 >> 2] = $36; //@line 13441
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 13442
  HEAP32[$77 >> 2] = $38; //@line 13443
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 13444
  HEAP32[$78 >> 2] = $40; //@line 13445
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 13446
  HEAP32[$79 >> 2] = $42; //@line 13447
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 13448
  HEAP32[$80 >> 2] = $44; //@line 13449
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 13450
  HEAP32[$81 >> 2] = $46; //@line 13451
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 13452
  HEAP32[$82 >> 2] = $48; //@line 13453
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 13454
  HEAP32[$83 >> 2] = $50; //@line 13455
  sp = STACKTOP; //@line 13456
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 13461
  $92 = $54 + 44 | 0; //@line 13462
  $93 = HEAP32[$92 >> 2] | 0; //@line 13463
  if (!$93) {
   HEAP32[$16 >> 2] = 0; //@line 13466
   $124 = HEAP32[$54 >> 2] | 0; //@line 13467
   HEAP32[$18 >> 2] = 0; //@line 13468
   HEAP32[$20 >> 2] = 175; //@line 13469
   HEAP32[$22 >> 2] = $124; //@line 13470
   HEAP32[$24 >> 2] = 724; //@line 13471
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 13472
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($26, 0, $28) | 0; //@line 13473
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 13476
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 13477
    HEAP32[$125 >> 2] = $$131; //@line 13478
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 13479
    HEAP32[$126 >> 2] = $$02972$reg2mem$1; //@line 13480
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 13481
    HEAP32[$127 >> 2] = $6; //@line 13482
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 13483
    HEAP32[$128 >> 2] = $52; //@line 13484
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 13485
    HEAP32[$129 >> 2] = $10; //@line 13486
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 13487
    HEAP32[$130 >> 2] = $12; //@line 13488
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 13489
    HEAP32[$131 >> 2] = $14; //@line 13490
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 13491
    HEAP32[$132 >> 2] = $16; //@line 13492
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 13493
    HEAP32[$133 >> 2] = $18; //@line 13494
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 13495
    HEAP32[$134 >> 2] = $20; //@line 13496
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 13497
    HEAP32[$135 >> 2] = $22; //@line 13498
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 13499
    HEAP32[$136 >> 2] = $24; //@line 13500
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 13501
    HEAP32[$137 >> 2] = $26; //@line 13502
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 13503
    HEAP32[$138 >> 2] = $28; //@line 13504
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 13505
    HEAP32[$139 >> 2] = $30; //@line 13506
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 13507
    HEAP32[$140 >> 2] = $32; //@line 13508
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 13509
    HEAP32[$141 >> 2] = $34; //@line 13510
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 13511
    HEAP32[$142 >> 2] = $36; //@line 13512
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 13513
    HEAP32[$143 >> 2] = $38; //@line 13514
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 13515
    HEAP32[$144 >> 2] = $40; //@line 13516
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 13517
    HEAP32[$145 >> 2] = $42; //@line 13518
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 13519
    HEAP32[$146 >> 2] = $44; //@line 13520
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 13521
    HEAP32[$147 >> 2] = $46; //@line 13522
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 13523
    HEAP32[$148 >> 2] = $48; //@line 13524
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 13525
    HEAP32[$149 >> 2] = $50; //@line 13526
    sp = STACKTOP; //@line 13527
    return;
   }
   ___async_unwind = 0; //@line 13530
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 13531
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 13532
   HEAP32[$125 >> 2] = $$131; //@line 13533
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 13534
   HEAP32[$126 >> 2] = $$02972$reg2mem$1; //@line 13535
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 13536
   HEAP32[$127 >> 2] = $6; //@line 13537
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 13538
   HEAP32[$128 >> 2] = $52; //@line 13539
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 13540
   HEAP32[$129 >> 2] = $10; //@line 13541
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 13542
   HEAP32[$130 >> 2] = $12; //@line 13543
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 13544
   HEAP32[$131 >> 2] = $14; //@line 13545
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 13546
   HEAP32[$132 >> 2] = $16; //@line 13547
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 13548
   HEAP32[$133 >> 2] = $18; //@line 13549
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 13550
   HEAP32[$134 >> 2] = $20; //@line 13551
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 13552
   HEAP32[$135 >> 2] = $22; //@line 13553
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 13554
   HEAP32[$136 >> 2] = $24; //@line 13555
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 13556
   HEAP32[$137 >> 2] = $26; //@line 13557
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 13558
   HEAP32[$138 >> 2] = $28; //@line 13559
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 13560
   HEAP32[$139 >> 2] = $30; //@line 13561
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 13562
   HEAP32[$140 >> 2] = $32; //@line 13563
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 13564
   HEAP32[$141 >> 2] = $34; //@line 13565
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 13566
   HEAP32[$142 >> 2] = $36; //@line 13567
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 13568
   HEAP32[$143 >> 2] = $38; //@line 13569
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 13570
   HEAP32[$144 >> 2] = $40; //@line 13571
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 13572
   HEAP32[$145 >> 2] = $42; //@line 13573
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 13574
   HEAP32[$146 >> 2] = $44; //@line 13575
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 13576
   HEAP32[$147 >> 2] = $46; //@line 13577
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 13578
   HEAP32[$148 >> 2] = $48; //@line 13579
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 13580
   HEAP32[$149 >> 2] = $50; //@line 13581
   sp = STACKTOP; //@line 13582
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 13587
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 13588
   FUNCTION_TABLE_vii[$97 & 7]($14, $54 + 32 | 0); //@line 13589
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 13592
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 13593
    HEAP32[$98 >> 2] = $$131; //@line 13594
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 13595
    HEAP32[$99 >> 2] = $$02972$reg2mem$1; //@line 13596
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 13597
    HEAP32[$100 >> 2] = $6; //@line 13598
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 13599
    HEAP32[$101 >> 2] = $52; //@line 13600
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 13601
    HEAP32[$102 >> 2] = $10; //@line 13602
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 13603
    HEAP32[$103 >> 2] = $12; //@line 13604
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 13605
    HEAP32[$104 >> 2] = $14; //@line 13606
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 13607
    HEAP32[$105 >> 2] = $16; //@line 13608
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 13609
    HEAP32[$106 >> 2] = $18; //@line 13610
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 13611
    HEAP32[$107 >> 2] = $20; //@line 13612
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 13613
    HEAP32[$108 >> 2] = $22; //@line 13614
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 13615
    HEAP32[$109 >> 2] = $24; //@line 13616
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 13617
    HEAP32[$110 >> 2] = $26; //@line 13618
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 13619
    HEAP32[$111 >> 2] = $28; //@line 13620
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 13621
    HEAP32[$112 >> 2] = $30; //@line 13622
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 13623
    HEAP32[$113 >> 2] = $32; //@line 13624
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 13625
    HEAP32[$114 >> 2] = $34; //@line 13626
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 13627
    HEAP32[$115 >> 2] = $36; //@line 13628
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 13629
    HEAP32[$116 >> 2] = $38; //@line 13630
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 13631
    HEAP32[$117 >> 2] = $40; //@line 13632
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 13633
    HEAP32[$118 >> 2] = $42; //@line 13634
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 13635
    HEAP32[$119 >> 2] = $44; //@line 13636
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 13637
    HEAP32[$120 >> 2] = $46; //@line 13638
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 13639
    HEAP32[$121 >> 2] = $48; //@line 13640
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 13641
    HEAP32[$122 >> 2] = $50; //@line 13642
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 13643
    HEAP32[$123 >> 2] = $92; //@line 13644
    sp = STACKTOP; //@line 13645
    return;
   }
   ___async_unwind = 0; //@line 13648
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 13649
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 13650
   HEAP32[$98 >> 2] = $$131; //@line 13651
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 13652
   HEAP32[$99 >> 2] = $$02972$reg2mem$1; //@line 13653
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 13654
   HEAP32[$100 >> 2] = $6; //@line 13655
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 13656
   HEAP32[$101 >> 2] = $52; //@line 13657
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 13658
   HEAP32[$102 >> 2] = $10; //@line 13659
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 13660
   HEAP32[$103 >> 2] = $12; //@line 13661
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 13662
   HEAP32[$104 >> 2] = $14; //@line 13663
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 13664
   HEAP32[$105 >> 2] = $16; //@line 13665
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 13666
   HEAP32[$106 >> 2] = $18; //@line 13667
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 13668
   HEAP32[$107 >> 2] = $20; //@line 13669
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 13670
   HEAP32[$108 >> 2] = $22; //@line 13671
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 13672
   HEAP32[$109 >> 2] = $24; //@line 13673
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 13674
   HEAP32[$110 >> 2] = $26; //@line 13675
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 13676
   HEAP32[$111 >> 2] = $28; //@line 13677
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 13678
   HEAP32[$112 >> 2] = $30; //@line 13679
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 13680
   HEAP32[$113 >> 2] = $32; //@line 13681
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 13682
   HEAP32[$114 >> 2] = $34; //@line 13683
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 13684
   HEAP32[$115 >> 2] = $36; //@line 13685
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 13686
   HEAP32[$116 >> 2] = $38; //@line 13687
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 13688
   HEAP32[$117 >> 2] = $40; //@line 13689
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 13690
   HEAP32[$118 >> 2] = $42; //@line 13691
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 13692
   HEAP32[$119 >> 2] = $44; //@line 13693
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 13694
   HEAP32[$120 >> 2] = $46; //@line 13695
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 13696
   HEAP32[$121 >> 2] = $48; //@line 13697
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 13698
   HEAP32[$122 >> 2] = $50; //@line 13699
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 13700
   HEAP32[$123 >> 2] = $92; //@line 13701
   sp = STACKTOP; //@line 13702
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 13707
  $156 = $150 + 44 | 0; //@line 13708
  $157 = HEAP32[$156 >> 2] | 0; //@line 13709
  if (!$157) {
   HEAP32[$36 >> 2] = 0; //@line 13712
   $188 = HEAP32[$150 >> 2] | 0; //@line 13713
   HEAP32[$38 >> 2] = 0; //@line 13714
   HEAP32[$40 >> 2] = 180; //@line 13715
   HEAP32[$42 >> 2] = $188; //@line 13716
   HEAP32[$6 >> 2] = 724; //@line 13717
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 13718
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 13719
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 13722
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 13723
    HEAP32[$189 >> 2] = $$131; //@line 13724
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 13725
    HEAP32[$190 >> 2] = $$02972$reg2mem$1; //@line 13726
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 13727
    HEAP32[$191 >> 2] = $6; //@line 13728
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 13729
    HEAP32[$192 >> 2] = $52; //@line 13730
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 13731
    HEAP32[$193 >> 2] = $10; //@line 13732
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 13733
    HEAP32[$194 >> 2] = $12; //@line 13734
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 13735
    HEAP32[$195 >> 2] = $14; //@line 13736
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 13737
    HEAP32[$196 >> 2] = $16; //@line 13738
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 13739
    HEAP32[$197 >> 2] = $18; //@line 13740
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 13741
    HEAP32[$198 >> 2] = $20; //@line 13742
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 13743
    HEAP32[$199 >> 2] = $22; //@line 13744
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 13745
    HEAP32[$200 >> 2] = $24; //@line 13746
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 13747
    HEAP32[$201 >> 2] = $26; //@line 13748
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 13749
    HEAP32[$202 >> 2] = $28; //@line 13750
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 13751
    HEAP32[$203 >> 2] = $30; //@line 13752
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 13753
    HEAP32[$204 >> 2] = $32; //@line 13754
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 13755
    HEAP32[$205 >> 2] = $34; //@line 13756
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 13757
    HEAP32[$206 >> 2] = $36; //@line 13758
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 13759
    HEAP32[$207 >> 2] = $38; //@line 13760
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 13761
    HEAP32[$208 >> 2] = $40; //@line 13762
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 13763
    HEAP32[$209 >> 2] = $42; //@line 13764
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 13765
    HEAP32[$210 >> 2] = $44; //@line 13766
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 13767
    HEAP32[$211 >> 2] = $46; //@line 13768
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 13769
    HEAP32[$212 >> 2] = $48; //@line 13770
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 13771
    HEAP32[$213 >> 2] = $50; //@line 13772
    sp = STACKTOP; //@line 13773
    return;
   }
   ___async_unwind = 0; //@line 13776
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 13777
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 13778
   HEAP32[$189 >> 2] = $$131; //@line 13779
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 13780
   HEAP32[$190 >> 2] = $$02972$reg2mem$1; //@line 13781
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 13782
   HEAP32[$191 >> 2] = $6; //@line 13783
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 13784
   HEAP32[$192 >> 2] = $52; //@line 13785
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 13786
   HEAP32[$193 >> 2] = $10; //@line 13787
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 13788
   HEAP32[$194 >> 2] = $12; //@line 13789
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 13790
   HEAP32[$195 >> 2] = $14; //@line 13791
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 13792
   HEAP32[$196 >> 2] = $16; //@line 13793
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 13794
   HEAP32[$197 >> 2] = $18; //@line 13795
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 13796
   HEAP32[$198 >> 2] = $20; //@line 13797
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 13798
   HEAP32[$199 >> 2] = $22; //@line 13799
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 13800
   HEAP32[$200 >> 2] = $24; //@line 13801
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 13802
   HEAP32[$201 >> 2] = $26; //@line 13803
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 13804
   HEAP32[$202 >> 2] = $28; //@line 13805
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 13806
   HEAP32[$203 >> 2] = $30; //@line 13807
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 13808
   HEAP32[$204 >> 2] = $32; //@line 13809
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 13810
   HEAP32[$205 >> 2] = $34; //@line 13811
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 13812
   HEAP32[$206 >> 2] = $36; //@line 13813
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 13814
   HEAP32[$207 >> 2] = $38; //@line 13815
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 13816
   HEAP32[$208 >> 2] = $40; //@line 13817
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 13818
   HEAP32[$209 >> 2] = $42; //@line 13819
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 13820
   HEAP32[$210 >> 2] = $44; //@line 13821
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 13822
   HEAP32[$211 >> 2] = $46; //@line 13823
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 13824
   HEAP32[$212 >> 2] = $48; //@line 13825
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 13826
   HEAP32[$213 >> 2] = $50; //@line 13827
   sp = STACKTOP; //@line 13828
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 13833
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 13834
   FUNCTION_TABLE_vii[$161 & 7]($34, $150 + 32 | 0); //@line 13835
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 13838
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 13839
    HEAP32[$162 >> 2] = $$131; //@line 13840
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 13841
    HEAP32[$163 >> 2] = $$02972$reg2mem$1; //@line 13842
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 13843
    HEAP32[$164 >> 2] = $6; //@line 13844
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 13845
    HEAP32[$165 >> 2] = $52; //@line 13846
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 13847
    HEAP32[$166 >> 2] = $10; //@line 13848
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 13849
    HEAP32[$167 >> 2] = $12; //@line 13850
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 13851
    HEAP32[$168 >> 2] = $14; //@line 13852
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 13853
    HEAP32[$169 >> 2] = $16; //@line 13854
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 13855
    HEAP32[$170 >> 2] = $18; //@line 13856
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 13857
    HEAP32[$171 >> 2] = $20; //@line 13858
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 13859
    HEAP32[$172 >> 2] = $22; //@line 13860
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 13861
    HEAP32[$173 >> 2] = $24; //@line 13862
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 13863
    HEAP32[$174 >> 2] = $26; //@line 13864
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 13865
    HEAP32[$175 >> 2] = $28; //@line 13866
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 13867
    HEAP32[$176 >> 2] = $30; //@line 13868
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 13869
    HEAP32[$177 >> 2] = $32; //@line 13870
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 13871
    HEAP32[$178 >> 2] = $34; //@line 13872
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 13873
    HEAP32[$179 >> 2] = $36; //@line 13874
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 13875
    HEAP32[$180 >> 2] = $38; //@line 13876
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 13877
    HEAP32[$181 >> 2] = $40; //@line 13878
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 13879
    HEAP32[$182 >> 2] = $42; //@line 13880
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 13881
    HEAP32[$183 >> 2] = $44; //@line 13882
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 13883
    HEAP32[$184 >> 2] = $46; //@line 13884
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 13885
    HEAP32[$185 >> 2] = $48; //@line 13886
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 13887
    HEAP32[$186 >> 2] = $50; //@line 13888
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 13889
    HEAP32[$187 >> 2] = $156; //@line 13890
    sp = STACKTOP; //@line 13891
    return;
   }
   ___async_unwind = 0; //@line 13894
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 13895
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 13896
   HEAP32[$162 >> 2] = $$131; //@line 13897
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 13898
   HEAP32[$163 >> 2] = $$02972$reg2mem$1; //@line 13899
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 13900
   HEAP32[$164 >> 2] = $6; //@line 13901
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 13902
   HEAP32[$165 >> 2] = $52; //@line 13903
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 13904
   HEAP32[$166 >> 2] = $10; //@line 13905
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 13906
   HEAP32[$167 >> 2] = $12; //@line 13907
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 13908
   HEAP32[$168 >> 2] = $14; //@line 13909
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 13910
   HEAP32[$169 >> 2] = $16; //@line 13911
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 13912
   HEAP32[$170 >> 2] = $18; //@line 13913
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 13914
   HEAP32[$171 >> 2] = $20; //@line 13915
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 13916
   HEAP32[$172 >> 2] = $22; //@line 13917
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 13918
   HEAP32[$173 >> 2] = $24; //@line 13919
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 13920
   HEAP32[$174 >> 2] = $26; //@line 13921
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 13922
   HEAP32[$175 >> 2] = $28; //@line 13923
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 13924
   HEAP32[$176 >> 2] = $30; //@line 13925
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 13926
   HEAP32[$177 >> 2] = $32; //@line 13927
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 13928
   HEAP32[$178 >> 2] = $34; //@line 13929
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 13930
   HEAP32[$179 >> 2] = $36; //@line 13931
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 13932
   HEAP32[$180 >> 2] = $38; //@line 13933
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 13934
   HEAP32[$181 >> 2] = $40; //@line 13935
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 13936
   HEAP32[$182 >> 2] = $42; //@line 13937
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 13938
   HEAP32[$183 >> 2] = $44; //@line 13939
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 13940
   HEAP32[$184 >> 2] = $46; //@line 13941
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 13942
   HEAP32[$185 >> 2] = $48; //@line 13943
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 13944
   HEAP32[$186 >> 2] = $50; //@line 13945
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 13946
   HEAP32[$187 >> 2] = $156; //@line 13947
   sp = STACKTOP; //@line 13948
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_201($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $22 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 12087
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12093
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12097
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12099
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12101
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12103
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12105
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12107
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12109
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12111
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12113
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12115
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12117
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 12119
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 12121
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 12123
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 12125
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 12127
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 12129
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 12131
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 12133
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 12135
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 12137
 $$02972$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 12138
 $$03071$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 12138
 $$reg2mem$0 = HEAP32[$0 + 16 >> 2] | 0; //@line 12138
 L2 : while (1) {
  $150 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 12140
  $151 = $150 + 76 | 0; //@line 12141
  $152 = HEAP32[$151 >> 2] | 0; //@line 12142
  if ($152 | 0) {
   if ($152 >>> 0 <= 100) {
    label = 22; //@line 12147
    break;
   }
   HEAP32[$151 >> 2] = $152 + -100; //@line 12151
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 12156
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 12156
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 12158
   $$131 = $$03071$reg2mem$0; //@line 12158
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 12161
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 12164
    break L2;
   }
   $52 = 6740 + ($$02972$reg2mem$1 << 2) | 0; //@line 12167
   $54 = HEAP32[$52 >> 2] | 0; //@line 12168
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 12180
   break;
  }
  $84 = $54 + 72 | 0; //@line 12183
  $85 = HEAP32[$84 >> 2] | 0; //@line 12184
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 12188
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 12189
   $$03071$reg2mem$0 = $$131; //@line 12189
   $$reg2mem$0 = $52; //@line 12189
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 12196
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 12199
    $$03071$reg2mem$0 = $$131; //@line 12199
    $$reg2mem$0 = $52; //@line 12199
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7620] = 0; //@line 12207
   return;
  }
  $217 = $$131 + 44 | 0; //@line 12210
  $218 = HEAP32[$217 >> 2] | 0; //@line 12211
  if (!$218) {
   $226 = $10 + 12 | 0; //@line 12214
   HEAP32[$226 >> 2] = 0; //@line 12215
   $228 = $12 + 4 | 0; //@line 12217
   HEAP32[$228 >> 2] = 0; //@line 12219
   HEAP32[$228 + 4 >> 2] = 0; //@line 12222
   HEAP32[$12 >> 2] = 3; //@line 12223
   $232 = $12 + 12 | 0; //@line 12224
   HEAP32[$232 >> 2] = 712; //@line 12225
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 12226
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 100, $12) | 0; //@line 12227
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 12230
    $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 12231
    HEAP32[$233 >> 2] = $232; //@line 12232
    $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 12233
    HEAP32[$234 >> 2] = $226; //@line 12234
    $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 12235
    HEAP32[$235 >> 2] = $12; //@line 12236
    $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 12237
    HEAP32[$236 >> 2] = $10; //@line 12238
    sp = STACKTOP; //@line 12239
    return;
   }
   ___async_unwind = 0; //@line 12242
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 12243
   $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 12244
   HEAP32[$233 >> 2] = $232; //@line 12245
   $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 12246
   HEAP32[$234 >> 2] = $226; //@line 12247
   $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 12248
   HEAP32[$235 >> 2] = $12; //@line 12249
   $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 12250
   HEAP32[$236 >> 2] = $10; //@line 12251
   sp = STACKTOP; //@line 12252
   return;
  } else {
   $222 = HEAP32[$218 + 4 >> 2] | 0; //@line 12257
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 12258
   FUNCTION_TABLE_vii[$222 & 7]($10, $$131 + 32 | 0); //@line 12259
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 12262
    $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 12263
    HEAP32[$223 >> 2] = $217; //@line 12264
    $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 12265
    HEAP32[$224 >> 2] = $10; //@line 12266
    $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 12267
    HEAP32[$225 >> 2] = $12; //@line 12268
    sp = STACKTOP; //@line 12269
    return;
   }
   ___async_unwind = 0; //@line 12272
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 12273
   $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 12274
   HEAP32[$223 >> 2] = $217; //@line 12275
   $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 12276
   HEAP32[$224 >> 2] = $10; //@line 12277
   $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 12278
   HEAP32[$225 >> 2] = $12; //@line 12279
   sp = STACKTOP; //@line 12280
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 12285
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 12286
  __ZL28nsapi_dns_query_async_deletei($59); //@line 12287
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 12290
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 12291
   HEAP32[$60 >> 2] = $$131; //@line 12292
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 12293
   HEAP32[$61 >> 2] = $$02972$reg2mem$1; //@line 12294
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 12295
   HEAP32[$62 >> 2] = $6; //@line 12296
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 12297
   HEAP32[$63 >> 2] = $10; //@line 12298
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 12299
   HEAP32[$64 >> 2] = $12; //@line 12300
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 12301
   HEAP32[$65 >> 2] = $14; //@line 12302
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 12303
   HEAP32[$66 >> 2] = $16; //@line 12304
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 12305
   HEAP32[$67 >> 2] = $18; //@line 12306
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 12307
   HEAP32[$68 >> 2] = $20; //@line 12308
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 12309
   HEAP32[$69 >> 2] = $22; //@line 12310
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 12311
   HEAP32[$70 >> 2] = $24; //@line 12312
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 12313
   HEAP32[$71 >> 2] = $26; //@line 12314
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 12315
   HEAP32[$72 >> 2] = $28; //@line 12316
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 12317
   HEAP32[$73 >> 2] = $30; //@line 12318
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 12319
   HEAP32[$74 >> 2] = $32; //@line 12320
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 12321
   HEAP32[$75 >> 2] = $34; //@line 12322
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 12323
   HEAP32[$76 >> 2] = $36; //@line 12324
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 12325
   HEAP32[$77 >> 2] = $38; //@line 12326
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 12327
   HEAP32[$78 >> 2] = $40; //@line 12328
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 12329
   HEAP32[$79 >> 2] = $42; //@line 12330
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 12331
   HEAP32[$80 >> 2] = $44; //@line 12332
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 12333
   HEAP32[$81 >> 2] = $46; //@line 12334
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 12335
   HEAP32[$82 >> 2] = $48; //@line 12336
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 12337
   HEAP32[$83 >> 2] = $50; //@line 12338
   sp = STACKTOP; //@line 12339
   return;
  }
  ___async_unwind = 0; //@line 12342
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 12343
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 12344
  HEAP32[$60 >> 2] = $$131; //@line 12345
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 12346
  HEAP32[$61 >> 2] = $$02972$reg2mem$1; //@line 12347
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 12348
  HEAP32[$62 >> 2] = $6; //@line 12349
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 12350
  HEAP32[$63 >> 2] = $10; //@line 12351
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 12352
  HEAP32[$64 >> 2] = $12; //@line 12353
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 12354
  HEAP32[$65 >> 2] = $14; //@line 12355
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 12356
  HEAP32[$66 >> 2] = $16; //@line 12357
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 12358
  HEAP32[$67 >> 2] = $18; //@line 12359
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 12360
  HEAP32[$68 >> 2] = $20; //@line 12361
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 12362
  HEAP32[$69 >> 2] = $22; //@line 12363
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 12364
  HEAP32[$70 >> 2] = $24; //@line 12365
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 12366
  HEAP32[$71 >> 2] = $26; //@line 12367
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 12368
  HEAP32[$72 >> 2] = $28; //@line 12369
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 12370
  HEAP32[$73 >> 2] = $30; //@line 12371
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 12372
  HEAP32[$74 >> 2] = $32; //@line 12373
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 12374
  HEAP32[$75 >> 2] = $34; //@line 12375
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 12376
  HEAP32[$76 >> 2] = $36; //@line 12377
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 12378
  HEAP32[$77 >> 2] = $38; //@line 12379
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 12380
  HEAP32[$78 >> 2] = $40; //@line 12381
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 12382
  HEAP32[$79 >> 2] = $42; //@line 12383
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 12384
  HEAP32[$80 >> 2] = $44; //@line 12385
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 12386
  HEAP32[$81 >> 2] = $46; //@line 12387
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 12388
  HEAP32[$82 >> 2] = $48; //@line 12389
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 12390
  HEAP32[$83 >> 2] = $50; //@line 12391
  sp = STACKTOP; //@line 12392
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 12397
  $92 = $54 + 44 | 0; //@line 12398
  $93 = HEAP32[$92 >> 2] | 0; //@line 12399
  if (!$93) {
   HEAP32[$16 >> 2] = 0; //@line 12402
   $124 = HEAP32[$54 >> 2] | 0; //@line 12403
   HEAP32[$18 >> 2] = 0; //@line 12404
   HEAP32[$20 >> 2] = 175; //@line 12405
   HEAP32[$22 >> 2] = $124; //@line 12406
   HEAP32[$24 >> 2] = 724; //@line 12407
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 12408
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($26, 0, $28) | 0; //@line 12409
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 12412
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 12413
    HEAP32[$125 >> 2] = $$131; //@line 12414
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 12415
    HEAP32[$126 >> 2] = $$02972$reg2mem$1; //@line 12416
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 12417
    HEAP32[$127 >> 2] = $6; //@line 12418
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 12419
    HEAP32[$128 >> 2] = $52; //@line 12420
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 12421
    HEAP32[$129 >> 2] = $10; //@line 12422
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 12423
    HEAP32[$130 >> 2] = $12; //@line 12424
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 12425
    HEAP32[$131 >> 2] = $14; //@line 12426
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 12427
    HEAP32[$132 >> 2] = $16; //@line 12428
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 12429
    HEAP32[$133 >> 2] = $18; //@line 12430
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 12431
    HEAP32[$134 >> 2] = $20; //@line 12432
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 12433
    HEAP32[$135 >> 2] = $22; //@line 12434
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 12435
    HEAP32[$136 >> 2] = $24; //@line 12436
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 12437
    HEAP32[$137 >> 2] = $26; //@line 12438
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 12439
    HEAP32[$138 >> 2] = $28; //@line 12440
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 12441
    HEAP32[$139 >> 2] = $30; //@line 12442
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 12443
    HEAP32[$140 >> 2] = $32; //@line 12444
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 12445
    HEAP32[$141 >> 2] = $34; //@line 12446
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 12447
    HEAP32[$142 >> 2] = $36; //@line 12448
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 12449
    HEAP32[$143 >> 2] = $38; //@line 12450
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 12451
    HEAP32[$144 >> 2] = $40; //@line 12452
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 12453
    HEAP32[$145 >> 2] = $42; //@line 12454
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 12455
    HEAP32[$146 >> 2] = $44; //@line 12456
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 12457
    HEAP32[$147 >> 2] = $46; //@line 12458
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 12459
    HEAP32[$148 >> 2] = $48; //@line 12460
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 12461
    HEAP32[$149 >> 2] = $50; //@line 12462
    sp = STACKTOP; //@line 12463
    return;
   }
   ___async_unwind = 0; //@line 12466
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 12467
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 12468
   HEAP32[$125 >> 2] = $$131; //@line 12469
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 12470
   HEAP32[$126 >> 2] = $$02972$reg2mem$1; //@line 12471
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 12472
   HEAP32[$127 >> 2] = $6; //@line 12473
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 12474
   HEAP32[$128 >> 2] = $52; //@line 12475
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 12476
   HEAP32[$129 >> 2] = $10; //@line 12477
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 12478
   HEAP32[$130 >> 2] = $12; //@line 12479
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 12480
   HEAP32[$131 >> 2] = $14; //@line 12481
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 12482
   HEAP32[$132 >> 2] = $16; //@line 12483
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 12484
   HEAP32[$133 >> 2] = $18; //@line 12485
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 12486
   HEAP32[$134 >> 2] = $20; //@line 12487
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 12488
   HEAP32[$135 >> 2] = $22; //@line 12489
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 12490
   HEAP32[$136 >> 2] = $24; //@line 12491
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 12492
   HEAP32[$137 >> 2] = $26; //@line 12493
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 12494
   HEAP32[$138 >> 2] = $28; //@line 12495
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 12496
   HEAP32[$139 >> 2] = $30; //@line 12497
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 12498
   HEAP32[$140 >> 2] = $32; //@line 12499
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 12500
   HEAP32[$141 >> 2] = $34; //@line 12501
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 12502
   HEAP32[$142 >> 2] = $36; //@line 12503
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 12504
   HEAP32[$143 >> 2] = $38; //@line 12505
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 12506
   HEAP32[$144 >> 2] = $40; //@line 12507
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 12508
   HEAP32[$145 >> 2] = $42; //@line 12509
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 12510
   HEAP32[$146 >> 2] = $44; //@line 12511
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 12512
   HEAP32[$147 >> 2] = $46; //@line 12513
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 12514
   HEAP32[$148 >> 2] = $48; //@line 12515
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 12516
   HEAP32[$149 >> 2] = $50; //@line 12517
   sp = STACKTOP; //@line 12518
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 12523
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 12524
   FUNCTION_TABLE_vii[$97 & 7]($14, $54 + 32 | 0); //@line 12525
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 12528
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 12529
    HEAP32[$98 >> 2] = $$131; //@line 12530
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 12531
    HEAP32[$99 >> 2] = $$02972$reg2mem$1; //@line 12532
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 12533
    HEAP32[$100 >> 2] = $6; //@line 12534
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 12535
    HEAP32[$101 >> 2] = $52; //@line 12536
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 12537
    HEAP32[$102 >> 2] = $10; //@line 12538
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 12539
    HEAP32[$103 >> 2] = $12; //@line 12540
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 12541
    HEAP32[$104 >> 2] = $14; //@line 12542
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 12543
    HEAP32[$105 >> 2] = $16; //@line 12544
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 12545
    HEAP32[$106 >> 2] = $18; //@line 12546
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 12547
    HEAP32[$107 >> 2] = $20; //@line 12548
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 12549
    HEAP32[$108 >> 2] = $22; //@line 12550
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 12551
    HEAP32[$109 >> 2] = $24; //@line 12552
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 12553
    HEAP32[$110 >> 2] = $26; //@line 12554
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 12555
    HEAP32[$111 >> 2] = $28; //@line 12556
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 12557
    HEAP32[$112 >> 2] = $30; //@line 12558
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 12559
    HEAP32[$113 >> 2] = $32; //@line 12560
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 12561
    HEAP32[$114 >> 2] = $34; //@line 12562
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 12563
    HEAP32[$115 >> 2] = $36; //@line 12564
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 12565
    HEAP32[$116 >> 2] = $38; //@line 12566
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 12567
    HEAP32[$117 >> 2] = $40; //@line 12568
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 12569
    HEAP32[$118 >> 2] = $42; //@line 12570
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 12571
    HEAP32[$119 >> 2] = $44; //@line 12572
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 12573
    HEAP32[$120 >> 2] = $46; //@line 12574
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 12575
    HEAP32[$121 >> 2] = $48; //@line 12576
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 12577
    HEAP32[$122 >> 2] = $50; //@line 12578
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 12579
    HEAP32[$123 >> 2] = $92; //@line 12580
    sp = STACKTOP; //@line 12581
    return;
   }
   ___async_unwind = 0; //@line 12584
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 12585
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 12586
   HEAP32[$98 >> 2] = $$131; //@line 12587
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 12588
   HEAP32[$99 >> 2] = $$02972$reg2mem$1; //@line 12589
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 12590
   HEAP32[$100 >> 2] = $6; //@line 12591
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 12592
   HEAP32[$101 >> 2] = $52; //@line 12593
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 12594
   HEAP32[$102 >> 2] = $10; //@line 12595
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 12596
   HEAP32[$103 >> 2] = $12; //@line 12597
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 12598
   HEAP32[$104 >> 2] = $14; //@line 12599
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 12600
   HEAP32[$105 >> 2] = $16; //@line 12601
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 12602
   HEAP32[$106 >> 2] = $18; //@line 12603
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 12604
   HEAP32[$107 >> 2] = $20; //@line 12605
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 12606
   HEAP32[$108 >> 2] = $22; //@line 12607
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 12608
   HEAP32[$109 >> 2] = $24; //@line 12609
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 12610
   HEAP32[$110 >> 2] = $26; //@line 12611
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 12612
   HEAP32[$111 >> 2] = $28; //@line 12613
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 12614
   HEAP32[$112 >> 2] = $30; //@line 12615
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 12616
   HEAP32[$113 >> 2] = $32; //@line 12617
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 12618
   HEAP32[$114 >> 2] = $34; //@line 12619
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 12620
   HEAP32[$115 >> 2] = $36; //@line 12621
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 12622
   HEAP32[$116 >> 2] = $38; //@line 12623
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 12624
   HEAP32[$117 >> 2] = $40; //@line 12625
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 12626
   HEAP32[$118 >> 2] = $42; //@line 12627
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 12628
   HEAP32[$119 >> 2] = $44; //@line 12629
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 12630
   HEAP32[$120 >> 2] = $46; //@line 12631
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 12632
   HEAP32[$121 >> 2] = $48; //@line 12633
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 12634
   HEAP32[$122 >> 2] = $50; //@line 12635
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 12636
   HEAP32[$123 >> 2] = $92; //@line 12637
   sp = STACKTOP; //@line 12638
   return;
  }
 } else if ((label | 0) == 22) {
  HEAP32[$151 >> 2] = 0; //@line 12643
  $156 = $150 + 44 | 0; //@line 12644
  $157 = HEAP32[$156 >> 2] | 0; //@line 12645
  if (!$157) {
   HEAP32[$36 >> 2] = 0; //@line 12648
   $188 = HEAP32[$150 >> 2] | 0; //@line 12649
   HEAP32[$38 >> 2] = 0; //@line 12650
   HEAP32[$40 >> 2] = 180; //@line 12651
   HEAP32[$42 >> 2] = $188; //@line 12652
   HEAP32[$6 >> 2] = 724; //@line 12653
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 12654
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 12655
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 12658
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 12659
    HEAP32[$189 >> 2] = $$03071$reg2mem$0; //@line 12660
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 12661
    HEAP32[$190 >> 2] = $$02972$reg2mem$0; //@line 12662
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 12663
    HEAP32[$191 >> 2] = $6; //@line 12664
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 12665
    HEAP32[$192 >> 2] = $$reg2mem$0; //@line 12666
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 12667
    HEAP32[$193 >> 2] = $10; //@line 12668
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 12669
    HEAP32[$194 >> 2] = $12; //@line 12670
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 12671
    HEAP32[$195 >> 2] = $14; //@line 12672
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 12673
    HEAP32[$196 >> 2] = $16; //@line 12674
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 12675
    HEAP32[$197 >> 2] = $18; //@line 12676
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 12677
    HEAP32[$198 >> 2] = $20; //@line 12678
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 12679
    HEAP32[$199 >> 2] = $22; //@line 12680
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 12681
    HEAP32[$200 >> 2] = $24; //@line 12682
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 12683
    HEAP32[$201 >> 2] = $26; //@line 12684
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 12685
    HEAP32[$202 >> 2] = $28; //@line 12686
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 12687
    HEAP32[$203 >> 2] = $30; //@line 12688
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 12689
    HEAP32[$204 >> 2] = $32; //@line 12690
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 12691
    HEAP32[$205 >> 2] = $34; //@line 12692
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 12693
    HEAP32[$206 >> 2] = $36; //@line 12694
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 12695
    HEAP32[$207 >> 2] = $38; //@line 12696
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 12697
    HEAP32[$208 >> 2] = $40; //@line 12698
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 12699
    HEAP32[$209 >> 2] = $42; //@line 12700
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 12701
    HEAP32[$210 >> 2] = $44; //@line 12702
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 12703
    HEAP32[$211 >> 2] = $46; //@line 12704
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 12705
    HEAP32[$212 >> 2] = $48; //@line 12706
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 12707
    HEAP32[$213 >> 2] = $50; //@line 12708
    sp = STACKTOP; //@line 12709
    return;
   }
   ___async_unwind = 0; //@line 12712
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 12713
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 12714
   HEAP32[$189 >> 2] = $$03071$reg2mem$0; //@line 12715
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 12716
   HEAP32[$190 >> 2] = $$02972$reg2mem$0; //@line 12717
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 12718
   HEAP32[$191 >> 2] = $6; //@line 12719
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 12720
   HEAP32[$192 >> 2] = $$reg2mem$0; //@line 12721
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 12722
   HEAP32[$193 >> 2] = $10; //@line 12723
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 12724
   HEAP32[$194 >> 2] = $12; //@line 12725
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 12726
   HEAP32[$195 >> 2] = $14; //@line 12727
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 12728
   HEAP32[$196 >> 2] = $16; //@line 12729
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 12730
   HEAP32[$197 >> 2] = $18; //@line 12731
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 12732
   HEAP32[$198 >> 2] = $20; //@line 12733
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 12734
   HEAP32[$199 >> 2] = $22; //@line 12735
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 12736
   HEAP32[$200 >> 2] = $24; //@line 12737
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 12738
   HEAP32[$201 >> 2] = $26; //@line 12739
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 12740
   HEAP32[$202 >> 2] = $28; //@line 12741
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 12742
   HEAP32[$203 >> 2] = $30; //@line 12743
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 12744
   HEAP32[$204 >> 2] = $32; //@line 12745
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 12746
   HEAP32[$205 >> 2] = $34; //@line 12747
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 12748
   HEAP32[$206 >> 2] = $36; //@line 12749
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 12750
   HEAP32[$207 >> 2] = $38; //@line 12751
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 12752
   HEAP32[$208 >> 2] = $40; //@line 12753
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 12754
   HEAP32[$209 >> 2] = $42; //@line 12755
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 12756
   HEAP32[$210 >> 2] = $44; //@line 12757
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 12758
   HEAP32[$211 >> 2] = $46; //@line 12759
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 12760
   HEAP32[$212 >> 2] = $48; //@line 12761
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 12762
   HEAP32[$213 >> 2] = $50; //@line 12763
   sp = STACKTOP; //@line 12764
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 12769
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 12770
   FUNCTION_TABLE_vii[$161 & 7]($34, $150 + 32 | 0); //@line 12771
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 12774
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 12775
    HEAP32[$162 >> 2] = $$03071$reg2mem$0; //@line 12776
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 12777
    HEAP32[$163 >> 2] = $$02972$reg2mem$0; //@line 12778
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 12779
    HEAP32[$164 >> 2] = $6; //@line 12780
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 12781
    HEAP32[$165 >> 2] = $$reg2mem$0; //@line 12782
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 12783
    HEAP32[$166 >> 2] = $10; //@line 12784
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 12785
    HEAP32[$167 >> 2] = $12; //@line 12786
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 12787
    HEAP32[$168 >> 2] = $14; //@line 12788
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 12789
    HEAP32[$169 >> 2] = $16; //@line 12790
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 12791
    HEAP32[$170 >> 2] = $18; //@line 12792
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 12793
    HEAP32[$171 >> 2] = $20; //@line 12794
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 12795
    HEAP32[$172 >> 2] = $22; //@line 12796
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 12797
    HEAP32[$173 >> 2] = $24; //@line 12798
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 12799
    HEAP32[$174 >> 2] = $26; //@line 12800
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 12801
    HEAP32[$175 >> 2] = $28; //@line 12802
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 12803
    HEAP32[$176 >> 2] = $30; //@line 12804
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 12805
    HEAP32[$177 >> 2] = $32; //@line 12806
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 12807
    HEAP32[$178 >> 2] = $34; //@line 12808
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 12809
    HEAP32[$179 >> 2] = $36; //@line 12810
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 12811
    HEAP32[$180 >> 2] = $38; //@line 12812
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 12813
    HEAP32[$181 >> 2] = $40; //@line 12814
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 12815
    HEAP32[$182 >> 2] = $42; //@line 12816
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 12817
    HEAP32[$183 >> 2] = $44; //@line 12818
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 12819
    HEAP32[$184 >> 2] = $46; //@line 12820
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 12821
    HEAP32[$185 >> 2] = $48; //@line 12822
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 12823
    HEAP32[$186 >> 2] = $50; //@line 12824
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 12825
    HEAP32[$187 >> 2] = $156; //@line 12826
    sp = STACKTOP; //@line 12827
    return;
   }
   ___async_unwind = 0; //@line 12830
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 12831
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 12832
   HEAP32[$162 >> 2] = $$03071$reg2mem$0; //@line 12833
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 12834
   HEAP32[$163 >> 2] = $$02972$reg2mem$0; //@line 12835
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 12836
   HEAP32[$164 >> 2] = $6; //@line 12837
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 12838
   HEAP32[$165 >> 2] = $$reg2mem$0; //@line 12839
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 12840
   HEAP32[$166 >> 2] = $10; //@line 12841
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 12842
   HEAP32[$167 >> 2] = $12; //@line 12843
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 12844
   HEAP32[$168 >> 2] = $14; //@line 12845
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 12846
   HEAP32[$169 >> 2] = $16; //@line 12847
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 12848
   HEAP32[$170 >> 2] = $18; //@line 12849
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 12850
   HEAP32[$171 >> 2] = $20; //@line 12851
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 12852
   HEAP32[$172 >> 2] = $22; //@line 12853
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 12854
   HEAP32[$173 >> 2] = $24; //@line 12855
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 12856
   HEAP32[$174 >> 2] = $26; //@line 12857
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 12858
   HEAP32[$175 >> 2] = $28; //@line 12859
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 12860
   HEAP32[$176 >> 2] = $30; //@line 12861
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 12862
   HEAP32[$177 >> 2] = $32; //@line 12863
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 12864
   HEAP32[$178 >> 2] = $34; //@line 12865
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 12866
   HEAP32[$179 >> 2] = $36; //@line 12867
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 12868
   HEAP32[$180 >> 2] = $38; //@line 12869
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 12870
   HEAP32[$181 >> 2] = $40; //@line 12871
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 12872
   HEAP32[$182 >> 2] = $42; //@line 12873
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 12874
   HEAP32[$183 >> 2] = $44; //@line 12875
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 12876
   HEAP32[$184 >> 2] = $46; //@line 12877
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 12878
   HEAP32[$185 >> 2] = $48; //@line 12879
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 12880
   HEAP32[$186 >> 2] = $50; //@line 12881
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 12882
   HEAP32[$187 >> 2] = $156; //@line 12883
   sp = STACKTOP; //@line 12884
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_204($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $22 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 13968
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13974
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13978
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13980
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13982
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13984
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13986
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13988
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13990
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13992
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13994
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13996
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13998
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 14000
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 14002
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 14004
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 14006
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 14008
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 14010
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 14012
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 14014
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 14016
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 14018
 $$02972$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 14019
 $$03071$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 14019
 $$reg2mem$0 = HEAP32[$0 + 16 >> 2] | 0; //@line 14019
 L2 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 14024
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 14024
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 14026
   $$131 = $$03071$reg2mem$0; //@line 14026
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 14029
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 14032
    break L2;
   }
   $52 = 6740 + ($$02972$reg2mem$1 << 2) | 0; //@line 14035
   $54 = HEAP32[$52 >> 2] | 0; //@line 14036
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 14048
   break;
  }
  $84 = $54 + 72 | 0; //@line 14051
  $85 = HEAP32[$84 >> 2] | 0; //@line 14052
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 14056
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 14062
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 14066
  $151 = $150 + 76 | 0; //@line 14067
  $152 = HEAP32[$151 >> 2] | 0; //@line 14068
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 14071
   $$03071$reg2mem$0 = $$131; //@line 14071
   $$reg2mem$0 = $52; //@line 14071
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 14076
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 14080
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 14081
  $$03071$reg2mem$0 = $$131; //@line 14081
  $$reg2mem$0 = $52; //@line 14081
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7620] = 0; //@line 14086
   return;
  }
  $217 = $$131 + 44 | 0; //@line 14089
  $218 = HEAP32[$217 >> 2] | 0; //@line 14090
  if (!$218) {
   $226 = $10 + 12 | 0; //@line 14093
   HEAP32[$226 >> 2] = 0; //@line 14094
   $228 = $12 + 4 | 0; //@line 14096
   HEAP32[$228 >> 2] = 0; //@line 14098
   HEAP32[$228 + 4 >> 2] = 0; //@line 14101
   HEAP32[$12 >> 2] = 3; //@line 14102
   $232 = $12 + 12 | 0; //@line 14103
   HEAP32[$232 >> 2] = 712; //@line 14104
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 14105
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 100, $12) | 0; //@line 14106
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 14109
    $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 14110
    HEAP32[$233 >> 2] = $232; //@line 14111
    $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 14112
    HEAP32[$234 >> 2] = $226; //@line 14113
    $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 14114
    HEAP32[$235 >> 2] = $12; //@line 14115
    $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 14116
    HEAP32[$236 >> 2] = $10; //@line 14117
    sp = STACKTOP; //@line 14118
    return;
   }
   ___async_unwind = 0; //@line 14121
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 14122
   $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 14123
   HEAP32[$233 >> 2] = $232; //@line 14124
   $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 14125
   HEAP32[$234 >> 2] = $226; //@line 14126
   $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 14127
   HEAP32[$235 >> 2] = $12; //@line 14128
   $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 14129
   HEAP32[$236 >> 2] = $10; //@line 14130
   sp = STACKTOP; //@line 14131
   return;
  } else {
   $222 = HEAP32[$218 + 4 >> 2] | 0; //@line 14136
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 14137
   FUNCTION_TABLE_vii[$222 & 7]($10, $$131 + 32 | 0); //@line 14138
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 14141
    $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 14142
    HEAP32[$223 >> 2] = $217; //@line 14143
    $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 14144
    HEAP32[$224 >> 2] = $10; //@line 14145
    $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 14146
    HEAP32[$225 >> 2] = $12; //@line 14147
    sp = STACKTOP; //@line 14148
    return;
   }
   ___async_unwind = 0; //@line 14151
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 14152
   $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 14153
   HEAP32[$223 >> 2] = $217; //@line 14154
   $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 14155
   HEAP32[$224 >> 2] = $10; //@line 14156
   $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 14157
   HEAP32[$225 >> 2] = $12; //@line 14158
   sp = STACKTOP; //@line 14159
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 14164
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 14165
  __ZL28nsapi_dns_query_async_deletei($59); //@line 14166
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 14169
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 14170
   HEAP32[$60 >> 2] = $$131; //@line 14171
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 14172
   HEAP32[$61 >> 2] = $$02972$reg2mem$1; //@line 14173
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 14174
   HEAP32[$62 >> 2] = $6; //@line 14175
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 14176
   HEAP32[$63 >> 2] = $10; //@line 14177
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 14178
   HEAP32[$64 >> 2] = $12; //@line 14179
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 14180
   HEAP32[$65 >> 2] = $14; //@line 14181
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 14182
   HEAP32[$66 >> 2] = $16; //@line 14183
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 14184
   HEAP32[$67 >> 2] = $18; //@line 14185
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 14186
   HEAP32[$68 >> 2] = $20; //@line 14187
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 14188
   HEAP32[$69 >> 2] = $22; //@line 14189
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 14190
   HEAP32[$70 >> 2] = $24; //@line 14191
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 14192
   HEAP32[$71 >> 2] = $26; //@line 14193
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 14194
   HEAP32[$72 >> 2] = $28; //@line 14195
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 14196
   HEAP32[$73 >> 2] = $30; //@line 14197
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 14198
   HEAP32[$74 >> 2] = $32; //@line 14199
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 14200
   HEAP32[$75 >> 2] = $34; //@line 14201
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 14202
   HEAP32[$76 >> 2] = $36; //@line 14203
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 14204
   HEAP32[$77 >> 2] = $38; //@line 14205
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 14206
   HEAP32[$78 >> 2] = $40; //@line 14207
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 14208
   HEAP32[$79 >> 2] = $42; //@line 14209
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 14210
   HEAP32[$80 >> 2] = $44; //@line 14211
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 14212
   HEAP32[$81 >> 2] = $46; //@line 14213
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 14214
   HEAP32[$82 >> 2] = $48; //@line 14215
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 14216
   HEAP32[$83 >> 2] = $50; //@line 14217
   sp = STACKTOP; //@line 14218
   return;
  }
  ___async_unwind = 0; //@line 14221
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 14222
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 14223
  HEAP32[$60 >> 2] = $$131; //@line 14224
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 14225
  HEAP32[$61 >> 2] = $$02972$reg2mem$1; //@line 14226
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 14227
  HEAP32[$62 >> 2] = $6; //@line 14228
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 14229
  HEAP32[$63 >> 2] = $10; //@line 14230
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 14231
  HEAP32[$64 >> 2] = $12; //@line 14232
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 14233
  HEAP32[$65 >> 2] = $14; //@line 14234
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 14235
  HEAP32[$66 >> 2] = $16; //@line 14236
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 14237
  HEAP32[$67 >> 2] = $18; //@line 14238
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 14239
  HEAP32[$68 >> 2] = $20; //@line 14240
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 14241
  HEAP32[$69 >> 2] = $22; //@line 14242
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 14243
  HEAP32[$70 >> 2] = $24; //@line 14244
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 14245
  HEAP32[$71 >> 2] = $26; //@line 14246
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 14247
  HEAP32[$72 >> 2] = $28; //@line 14248
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 14249
  HEAP32[$73 >> 2] = $30; //@line 14250
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 14251
  HEAP32[$74 >> 2] = $32; //@line 14252
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 14253
  HEAP32[$75 >> 2] = $34; //@line 14254
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 14255
  HEAP32[$76 >> 2] = $36; //@line 14256
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 14257
  HEAP32[$77 >> 2] = $38; //@line 14258
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 14259
  HEAP32[$78 >> 2] = $40; //@line 14260
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 14261
  HEAP32[$79 >> 2] = $42; //@line 14262
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 14263
  HEAP32[$80 >> 2] = $44; //@line 14264
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 14265
  HEAP32[$81 >> 2] = $46; //@line 14266
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 14267
  HEAP32[$82 >> 2] = $48; //@line 14268
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 14269
  HEAP32[$83 >> 2] = $50; //@line 14270
  sp = STACKTOP; //@line 14271
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 14276
  $92 = $54 + 44 | 0; //@line 14277
  $93 = HEAP32[$92 >> 2] | 0; //@line 14278
  if (!$93) {
   HEAP32[$16 >> 2] = 0; //@line 14281
   $124 = HEAP32[$54 >> 2] | 0; //@line 14282
   HEAP32[$18 >> 2] = 0; //@line 14283
   HEAP32[$20 >> 2] = 175; //@line 14284
   HEAP32[$22 >> 2] = $124; //@line 14285
   HEAP32[$24 >> 2] = 724; //@line 14286
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 14287
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($26, 0, $28) | 0; //@line 14288
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 14291
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 14292
    HEAP32[$125 >> 2] = $$131; //@line 14293
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 14294
    HEAP32[$126 >> 2] = $$02972$reg2mem$1; //@line 14295
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 14296
    HEAP32[$127 >> 2] = $6; //@line 14297
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 14298
    HEAP32[$128 >> 2] = $52; //@line 14299
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 14300
    HEAP32[$129 >> 2] = $10; //@line 14301
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 14302
    HEAP32[$130 >> 2] = $12; //@line 14303
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 14304
    HEAP32[$131 >> 2] = $14; //@line 14305
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 14306
    HEAP32[$132 >> 2] = $16; //@line 14307
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 14308
    HEAP32[$133 >> 2] = $18; //@line 14309
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 14310
    HEAP32[$134 >> 2] = $20; //@line 14311
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 14312
    HEAP32[$135 >> 2] = $22; //@line 14313
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 14314
    HEAP32[$136 >> 2] = $24; //@line 14315
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 14316
    HEAP32[$137 >> 2] = $26; //@line 14317
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 14318
    HEAP32[$138 >> 2] = $28; //@line 14319
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 14320
    HEAP32[$139 >> 2] = $30; //@line 14321
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 14322
    HEAP32[$140 >> 2] = $32; //@line 14323
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 14324
    HEAP32[$141 >> 2] = $34; //@line 14325
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 14326
    HEAP32[$142 >> 2] = $36; //@line 14327
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 14328
    HEAP32[$143 >> 2] = $38; //@line 14329
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 14330
    HEAP32[$144 >> 2] = $40; //@line 14331
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 14332
    HEAP32[$145 >> 2] = $42; //@line 14333
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 14334
    HEAP32[$146 >> 2] = $44; //@line 14335
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 14336
    HEAP32[$147 >> 2] = $46; //@line 14337
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 14338
    HEAP32[$148 >> 2] = $48; //@line 14339
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 14340
    HEAP32[$149 >> 2] = $50; //@line 14341
    sp = STACKTOP; //@line 14342
    return;
   }
   ___async_unwind = 0; //@line 14345
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 14346
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 14347
   HEAP32[$125 >> 2] = $$131; //@line 14348
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 14349
   HEAP32[$126 >> 2] = $$02972$reg2mem$1; //@line 14350
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 14351
   HEAP32[$127 >> 2] = $6; //@line 14352
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 14353
   HEAP32[$128 >> 2] = $52; //@line 14354
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 14355
   HEAP32[$129 >> 2] = $10; //@line 14356
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 14357
   HEAP32[$130 >> 2] = $12; //@line 14358
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 14359
   HEAP32[$131 >> 2] = $14; //@line 14360
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 14361
   HEAP32[$132 >> 2] = $16; //@line 14362
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 14363
   HEAP32[$133 >> 2] = $18; //@line 14364
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 14365
   HEAP32[$134 >> 2] = $20; //@line 14366
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 14367
   HEAP32[$135 >> 2] = $22; //@line 14368
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 14369
   HEAP32[$136 >> 2] = $24; //@line 14370
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 14371
   HEAP32[$137 >> 2] = $26; //@line 14372
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 14373
   HEAP32[$138 >> 2] = $28; //@line 14374
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 14375
   HEAP32[$139 >> 2] = $30; //@line 14376
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 14377
   HEAP32[$140 >> 2] = $32; //@line 14378
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 14379
   HEAP32[$141 >> 2] = $34; //@line 14380
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 14381
   HEAP32[$142 >> 2] = $36; //@line 14382
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 14383
   HEAP32[$143 >> 2] = $38; //@line 14384
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 14385
   HEAP32[$144 >> 2] = $40; //@line 14386
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 14387
   HEAP32[$145 >> 2] = $42; //@line 14388
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 14389
   HEAP32[$146 >> 2] = $44; //@line 14390
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 14391
   HEAP32[$147 >> 2] = $46; //@line 14392
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 14393
   HEAP32[$148 >> 2] = $48; //@line 14394
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 14395
   HEAP32[$149 >> 2] = $50; //@line 14396
   sp = STACKTOP; //@line 14397
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 14402
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 14403
   FUNCTION_TABLE_vii[$97 & 7]($14, $54 + 32 | 0); //@line 14404
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 14407
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 14408
    HEAP32[$98 >> 2] = $$131; //@line 14409
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 14410
    HEAP32[$99 >> 2] = $$02972$reg2mem$1; //@line 14411
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 14412
    HEAP32[$100 >> 2] = $6; //@line 14413
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 14414
    HEAP32[$101 >> 2] = $52; //@line 14415
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 14416
    HEAP32[$102 >> 2] = $10; //@line 14417
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 14418
    HEAP32[$103 >> 2] = $12; //@line 14419
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 14420
    HEAP32[$104 >> 2] = $14; //@line 14421
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 14422
    HEAP32[$105 >> 2] = $16; //@line 14423
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 14424
    HEAP32[$106 >> 2] = $18; //@line 14425
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 14426
    HEAP32[$107 >> 2] = $20; //@line 14427
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 14428
    HEAP32[$108 >> 2] = $22; //@line 14429
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 14430
    HEAP32[$109 >> 2] = $24; //@line 14431
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 14432
    HEAP32[$110 >> 2] = $26; //@line 14433
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 14434
    HEAP32[$111 >> 2] = $28; //@line 14435
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 14436
    HEAP32[$112 >> 2] = $30; //@line 14437
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 14438
    HEAP32[$113 >> 2] = $32; //@line 14439
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 14440
    HEAP32[$114 >> 2] = $34; //@line 14441
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 14442
    HEAP32[$115 >> 2] = $36; //@line 14443
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 14444
    HEAP32[$116 >> 2] = $38; //@line 14445
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 14446
    HEAP32[$117 >> 2] = $40; //@line 14447
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 14448
    HEAP32[$118 >> 2] = $42; //@line 14449
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 14450
    HEAP32[$119 >> 2] = $44; //@line 14451
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 14452
    HEAP32[$120 >> 2] = $46; //@line 14453
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 14454
    HEAP32[$121 >> 2] = $48; //@line 14455
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 14456
    HEAP32[$122 >> 2] = $50; //@line 14457
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 14458
    HEAP32[$123 >> 2] = $92; //@line 14459
    sp = STACKTOP; //@line 14460
    return;
   }
   ___async_unwind = 0; //@line 14463
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 14464
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 14465
   HEAP32[$98 >> 2] = $$131; //@line 14466
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 14467
   HEAP32[$99 >> 2] = $$02972$reg2mem$1; //@line 14468
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 14469
   HEAP32[$100 >> 2] = $6; //@line 14470
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 14471
   HEAP32[$101 >> 2] = $52; //@line 14472
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 14473
   HEAP32[$102 >> 2] = $10; //@line 14474
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 14475
   HEAP32[$103 >> 2] = $12; //@line 14476
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 14477
   HEAP32[$104 >> 2] = $14; //@line 14478
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 14479
   HEAP32[$105 >> 2] = $16; //@line 14480
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 14481
   HEAP32[$106 >> 2] = $18; //@line 14482
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 14483
   HEAP32[$107 >> 2] = $20; //@line 14484
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 14485
   HEAP32[$108 >> 2] = $22; //@line 14486
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 14487
   HEAP32[$109 >> 2] = $24; //@line 14488
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 14489
   HEAP32[$110 >> 2] = $26; //@line 14490
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 14491
   HEAP32[$111 >> 2] = $28; //@line 14492
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 14493
   HEAP32[$112 >> 2] = $30; //@line 14494
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 14495
   HEAP32[$113 >> 2] = $32; //@line 14496
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 14497
   HEAP32[$114 >> 2] = $34; //@line 14498
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 14499
   HEAP32[$115 >> 2] = $36; //@line 14500
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 14501
   HEAP32[$116 >> 2] = $38; //@line 14502
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 14503
   HEAP32[$117 >> 2] = $40; //@line 14504
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 14505
   HEAP32[$118 >> 2] = $42; //@line 14506
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 14507
   HEAP32[$119 >> 2] = $44; //@line 14508
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 14509
   HEAP32[$120 >> 2] = $46; //@line 14510
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 14511
   HEAP32[$121 >> 2] = $48; //@line 14512
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 14513
   HEAP32[$122 >> 2] = $50; //@line 14514
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 14515
   HEAP32[$123 >> 2] = $92; //@line 14516
   sp = STACKTOP; //@line 14517
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 14522
  $156 = $150 + 44 | 0; //@line 14523
  $157 = HEAP32[$156 >> 2] | 0; //@line 14524
  if (!$157) {
   HEAP32[$36 >> 2] = 0; //@line 14527
   $188 = HEAP32[$150 >> 2] | 0; //@line 14528
   HEAP32[$38 >> 2] = 0; //@line 14529
   HEAP32[$40 >> 2] = 180; //@line 14530
   HEAP32[$42 >> 2] = $188; //@line 14531
   HEAP32[$6 >> 2] = 724; //@line 14532
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 14533
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 14534
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 14537
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 14538
    HEAP32[$189 >> 2] = $$131; //@line 14539
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 14540
    HEAP32[$190 >> 2] = $$02972$reg2mem$1; //@line 14541
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 14542
    HEAP32[$191 >> 2] = $6; //@line 14543
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 14544
    HEAP32[$192 >> 2] = $52; //@line 14545
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 14546
    HEAP32[$193 >> 2] = $10; //@line 14547
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 14548
    HEAP32[$194 >> 2] = $12; //@line 14549
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 14550
    HEAP32[$195 >> 2] = $14; //@line 14551
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 14552
    HEAP32[$196 >> 2] = $16; //@line 14553
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 14554
    HEAP32[$197 >> 2] = $18; //@line 14555
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 14556
    HEAP32[$198 >> 2] = $20; //@line 14557
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 14558
    HEAP32[$199 >> 2] = $22; //@line 14559
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 14560
    HEAP32[$200 >> 2] = $24; //@line 14561
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 14562
    HEAP32[$201 >> 2] = $26; //@line 14563
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 14564
    HEAP32[$202 >> 2] = $28; //@line 14565
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 14566
    HEAP32[$203 >> 2] = $30; //@line 14567
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 14568
    HEAP32[$204 >> 2] = $32; //@line 14569
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 14570
    HEAP32[$205 >> 2] = $34; //@line 14571
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 14572
    HEAP32[$206 >> 2] = $36; //@line 14573
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 14574
    HEAP32[$207 >> 2] = $38; //@line 14575
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 14576
    HEAP32[$208 >> 2] = $40; //@line 14577
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 14578
    HEAP32[$209 >> 2] = $42; //@line 14579
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 14580
    HEAP32[$210 >> 2] = $44; //@line 14581
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 14582
    HEAP32[$211 >> 2] = $46; //@line 14583
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 14584
    HEAP32[$212 >> 2] = $48; //@line 14585
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 14586
    HEAP32[$213 >> 2] = $50; //@line 14587
    sp = STACKTOP; //@line 14588
    return;
   }
   ___async_unwind = 0; //@line 14591
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 14592
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 14593
   HEAP32[$189 >> 2] = $$131; //@line 14594
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 14595
   HEAP32[$190 >> 2] = $$02972$reg2mem$1; //@line 14596
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 14597
   HEAP32[$191 >> 2] = $6; //@line 14598
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 14599
   HEAP32[$192 >> 2] = $52; //@line 14600
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 14601
   HEAP32[$193 >> 2] = $10; //@line 14602
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 14603
   HEAP32[$194 >> 2] = $12; //@line 14604
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 14605
   HEAP32[$195 >> 2] = $14; //@line 14606
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 14607
   HEAP32[$196 >> 2] = $16; //@line 14608
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 14609
   HEAP32[$197 >> 2] = $18; //@line 14610
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 14611
   HEAP32[$198 >> 2] = $20; //@line 14612
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 14613
   HEAP32[$199 >> 2] = $22; //@line 14614
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 14615
   HEAP32[$200 >> 2] = $24; //@line 14616
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 14617
   HEAP32[$201 >> 2] = $26; //@line 14618
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 14619
   HEAP32[$202 >> 2] = $28; //@line 14620
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 14621
   HEAP32[$203 >> 2] = $30; //@line 14622
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 14623
   HEAP32[$204 >> 2] = $32; //@line 14624
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 14625
   HEAP32[$205 >> 2] = $34; //@line 14626
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 14627
   HEAP32[$206 >> 2] = $36; //@line 14628
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 14629
   HEAP32[$207 >> 2] = $38; //@line 14630
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 14631
   HEAP32[$208 >> 2] = $40; //@line 14632
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 14633
   HEAP32[$209 >> 2] = $42; //@line 14634
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 14635
   HEAP32[$210 >> 2] = $44; //@line 14636
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 14637
   HEAP32[$211 >> 2] = $46; //@line 14638
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 14639
   HEAP32[$212 >> 2] = $48; //@line 14640
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 14641
   HEAP32[$213 >> 2] = $50; //@line 14642
   sp = STACKTOP; //@line 14643
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 14648
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 14649
   FUNCTION_TABLE_vii[$161 & 7]($34, $150 + 32 | 0); //@line 14650
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 14653
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 14654
    HEAP32[$162 >> 2] = $$131; //@line 14655
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 14656
    HEAP32[$163 >> 2] = $$02972$reg2mem$1; //@line 14657
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 14658
    HEAP32[$164 >> 2] = $6; //@line 14659
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 14660
    HEAP32[$165 >> 2] = $52; //@line 14661
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 14662
    HEAP32[$166 >> 2] = $10; //@line 14663
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 14664
    HEAP32[$167 >> 2] = $12; //@line 14665
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 14666
    HEAP32[$168 >> 2] = $14; //@line 14667
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 14668
    HEAP32[$169 >> 2] = $16; //@line 14669
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 14670
    HEAP32[$170 >> 2] = $18; //@line 14671
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 14672
    HEAP32[$171 >> 2] = $20; //@line 14673
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 14674
    HEAP32[$172 >> 2] = $22; //@line 14675
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 14676
    HEAP32[$173 >> 2] = $24; //@line 14677
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 14678
    HEAP32[$174 >> 2] = $26; //@line 14679
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 14680
    HEAP32[$175 >> 2] = $28; //@line 14681
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 14682
    HEAP32[$176 >> 2] = $30; //@line 14683
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 14684
    HEAP32[$177 >> 2] = $32; //@line 14685
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 14686
    HEAP32[$178 >> 2] = $34; //@line 14687
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 14688
    HEAP32[$179 >> 2] = $36; //@line 14689
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 14690
    HEAP32[$180 >> 2] = $38; //@line 14691
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 14692
    HEAP32[$181 >> 2] = $40; //@line 14693
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 14694
    HEAP32[$182 >> 2] = $42; //@line 14695
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 14696
    HEAP32[$183 >> 2] = $44; //@line 14697
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 14698
    HEAP32[$184 >> 2] = $46; //@line 14699
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 14700
    HEAP32[$185 >> 2] = $48; //@line 14701
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 14702
    HEAP32[$186 >> 2] = $50; //@line 14703
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 14704
    HEAP32[$187 >> 2] = $156; //@line 14705
    sp = STACKTOP; //@line 14706
    return;
   }
   ___async_unwind = 0; //@line 14709
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 14710
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 14711
   HEAP32[$162 >> 2] = $$131; //@line 14712
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 14713
   HEAP32[$163 >> 2] = $$02972$reg2mem$1; //@line 14714
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 14715
   HEAP32[$164 >> 2] = $6; //@line 14716
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 14717
   HEAP32[$165 >> 2] = $52; //@line 14718
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 14719
   HEAP32[$166 >> 2] = $10; //@line 14720
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 14721
   HEAP32[$167 >> 2] = $12; //@line 14722
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 14723
   HEAP32[$168 >> 2] = $14; //@line 14724
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 14725
   HEAP32[$169 >> 2] = $16; //@line 14726
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 14727
   HEAP32[$170 >> 2] = $18; //@line 14728
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 14729
   HEAP32[$171 >> 2] = $20; //@line 14730
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 14731
   HEAP32[$172 >> 2] = $22; //@line 14732
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 14733
   HEAP32[$173 >> 2] = $24; //@line 14734
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 14735
   HEAP32[$174 >> 2] = $26; //@line 14736
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 14737
   HEAP32[$175 >> 2] = $28; //@line 14738
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 14739
   HEAP32[$176 >> 2] = $30; //@line 14740
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 14741
   HEAP32[$177 >> 2] = $32; //@line 14742
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 14743
   HEAP32[$178 >> 2] = $34; //@line 14744
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 14745
   HEAP32[$179 >> 2] = $36; //@line 14746
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 14747
   HEAP32[$180 >> 2] = $38; //@line 14748
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 14749
   HEAP32[$181 >> 2] = $40; //@line 14750
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 14751
   HEAP32[$182 >> 2] = $42; //@line 14752
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 14753
   HEAP32[$183 >> 2] = $44; //@line 14754
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 14755
   HEAP32[$184 >> 2] = $46; //@line 14756
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 14757
   HEAP32[$185 >> 2] = $48; //@line 14758
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 14759
   HEAP32[$186 >> 2] = $50; //@line 14760
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 14761
   HEAP32[$187 >> 2] = $156; //@line 14762
   sp = STACKTOP; //@line 14763
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_209($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$131 = 0, $$131$phi = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $154 = 0, $155 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $215 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $226 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $90 = 0, $91 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14983
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14989
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14991
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14993
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14995
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14997
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14999
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15001
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15003
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15005
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15007
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15009
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 15011
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 15013
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 15015
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 15017
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 15019
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 15021
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 15023
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 15025
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 15027
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 15029
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 15031
 $$02972$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 15032
 $$131 = HEAP32[$0 + 4 >> 2] | 0; //@line 15032
 while (1) {
  $51 = $$02972$reg2mem$0 + 1 | 0; //@line 15034
  if (($$02972$reg2mem$0 | 0) >= 4) {
   label = 2; //@line 15037
   break;
  }
  $50 = 6740 + ($51 << 2) | 0; //@line 15040
  $52 = HEAP32[$50 >> 2] | 0; //@line 15041
  if (!$52) {
   $$131$phi = $$131; //@line 15044
   $$02972$reg2mem$0 = $51; //@line 15044
   $$131 = $$131$phi; //@line 15044
   continue;
  }
  if ((HEAP32[$52 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 15051
   break;
  }
  $82 = $52 + 72 | 0; //@line 15054
  $83 = HEAP32[$82 >> 2] | 0; //@line 15055
  if ($83 >>> 0 > 100) {
   HEAP32[$82 >> 2] = $83 + -100; //@line 15059
  } else {
   if ((HEAP32[$52 + 4 >> 2] | 0) == -3019) {
    label = 12; //@line 15065
    break;
   }
  }
  $148 = HEAP32[$50 >> 2] | 0; //@line 15069
  $149 = $148 + 76 | 0; //@line 15070
  $150 = HEAP32[$149 >> 2] | 0; //@line 15071
  if ($150 | 0) {
   if ($150 >>> 0 <= 100) {
    label = 22; //@line 15076
    break;
   }
   HEAP32[$149 >> 2] = $150 + -100; //@line 15080
  }
  if ($$131 | 0) {
   $$131$phi = $$131; //@line 15084
   $$02972$reg2mem$0 = $51; //@line 15084
   $$131 = $$131$phi; //@line 15084
   continue;
  }
  $$02972$reg2mem$0 = $51; //@line 15088
  $$131 = HEAP32[$50 >> 2] | 0; //@line 15088
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7620] = 0; //@line 15093
   return;
  }
  $215 = $$131 + 44 | 0; //@line 15096
  $216 = HEAP32[$215 >> 2] | 0; //@line 15097
  if (!$216) {
   $224 = $8 + 12 | 0; //@line 15100
   HEAP32[$224 >> 2] = 0; //@line 15101
   $226 = $10 + 4 | 0; //@line 15103
   HEAP32[$226 >> 2] = 0; //@line 15105
   HEAP32[$226 + 4 >> 2] = 0; //@line 15108
   HEAP32[$10 >> 2] = 3; //@line 15109
   $230 = $10 + 12 | 0; //@line 15110
   HEAP32[$230 >> 2] = 712; //@line 15111
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 15112
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $10) | 0; //@line 15113
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 15116
    $231 = $ReallocAsyncCtx12 + 4 | 0; //@line 15117
    HEAP32[$231 >> 2] = $230; //@line 15118
    $232 = $ReallocAsyncCtx12 + 8 | 0; //@line 15119
    HEAP32[$232 >> 2] = $224; //@line 15120
    $233 = $ReallocAsyncCtx12 + 12 | 0; //@line 15121
    HEAP32[$233 >> 2] = $10; //@line 15122
    $234 = $ReallocAsyncCtx12 + 16 | 0; //@line 15123
    HEAP32[$234 >> 2] = $8; //@line 15124
    sp = STACKTOP; //@line 15125
    return;
   }
   ___async_unwind = 0; //@line 15128
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 15129
   $231 = $ReallocAsyncCtx12 + 4 | 0; //@line 15130
   HEAP32[$231 >> 2] = $230; //@line 15131
   $232 = $ReallocAsyncCtx12 + 8 | 0; //@line 15132
   HEAP32[$232 >> 2] = $224; //@line 15133
   $233 = $ReallocAsyncCtx12 + 12 | 0; //@line 15134
   HEAP32[$233 >> 2] = $10; //@line 15135
   $234 = $ReallocAsyncCtx12 + 16 | 0; //@line 15136
   HEAP32[$234 >> 2] = $8; //@line 15137
   sp = STACKTOP; //@line 15138
   return;
  } else {
   $220 = HEAP32[$216 + 4 >> 2] | 0; //@line 15143
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 15144
   FUNCTION_TABLE_vii[$220 & 7]($8, $$131 + 32 | 0); //@line 15145
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 15148
    $221 = $ReallocAsyncCtx7 + 4 | 0; //@line 15149
    HEAP32[$221 >> 2] = $215; //@line 15150
    $222 = $ReallocAsyncCtx7 + 8 | 0; //@line 15151
    HEAP32[$222 >> 2] = $8; //@line 15152
    $223 = $ReallocAsyncCtx7 + 12 | 0; //@line 15153
    HEAP32[$223 >> 2] = $10; //@line 15154
    sp = STACKTOP; //@line 15155
    return;
   }
   ___async_unwind = 0; //@line 15158
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 15159
   $221 = $ReallocAsyncCtx7 + 4 | 0; //@line 15160
   HEAP32[$221 >> 2] = $215; //@line 15161
   $222 = $ReallocAsyncCtx7 + 8 | 0; //@line 15162
   HEAP32[$222 >> 2] = $8; //@line 15163
   $223 = $ReallocAsyncCtx7 + 12 | 0; //@line 15164
   HEAP32[$223 >> 2] = $10; //@line 15165
   sp = STACKTOP; //@line 15166
   return;
  }
 } else if ((label | 0) == 5) {
  $57 = HEAP32[$52 >> 2] | 0; //@line 15171
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 15172
  __ZL28nsapi_dns_query_async_deletei($57); //@line 15173
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 15176
   $58 = $ReallocAsyncCtx10 + 4 | 0; //@line 15177
   HEAP32[$58 >> 2] = $$131; //@line 15178
   $59 = $ReallocAsyncCtx10 + 8 | 0; //@line 15179
   HEAP32[$59 >> 2] = $51; //@line 15180
   $60 = $ReallocAsyncCtx10 + 12 | 0; //@line 15181
   HEAP32[$60 >> 2] = $6; //@line 15182
   $61 = $ReallocAsyncCtx10 + 16 | 0; //@line 15183
   HEAP32[$61 >> 2] = $8; //@line 15184
   $62 = $ReallocAsyncCtx10 + 20 | 0; //@line 15185
   HEAP32[$62 >> 2] = $10; //@line 15186
   $63 = $ReallocAsyncCtx10 + 24 | 0; //@line 15187
   HEAP32[$63 >> 2] = $12; //@line 15188
   $64 = $ReallocAsyncCtx10 + 28 | 0; //@line 15189
   HEAP32[$64 >> 2] = $14; //@line 15190
   $65 = $ReallocAsyncCtx10 + 32 | 0; //@line 15191
   HEAP32[$65 >> 2] = $16; //@line 15192
   $66 = $ReallocAsyncCtx10 + 36 | 0; //@line 15193
   HEAP32[$66 >> 2] = $18; //@line 15194
   $67 = $ReallocAsyncCtx10 + 40 | 0; //@line 15195
   HEAP32[$67 >> 2] = $20; //@line 15196
   $68 = $ReallocAsyncCtx10 + 44 | 0; //@line 15197
   HEAP32[$68 >> 2] = $22; //@line 15198
   $69 = $ReallocAsyncCtx10 + 48 | 0; //@line 15199
   HEAP32[$69 >> 2] = $24; //@line 15200
   $70 = $ReallocAsyncCtx10 + 52 | 0; //@line 15201
   HEAP32[$70 >> 2] = $26; //@line 15202
   $71 = $ReallocAsyncCtx10 + 56 | 0; //@line 15203
   HEAP32[$71 >> 2] = $28; //@line 15204
   $72 = $ReallocAsyncCtx10 + 60 | 0; //@line 15205
   HEAP32[$72 >> 2] = $30; //@line 15206
   $73 = $ReallocAsyncCtx10 + 64 | 0; //@line 15207
   HEAP32[$73 >> 2] = $32; //@line 15208
   $74 = $ReallocAsyncCtx10 + 68 | 0; //@line 15209
   HEAP32[$74 >> 2] = $34; //@line 15210
   $75 = $ReallocAsyncCtx10 + 72 | 0; //@line 15211
   HEAP32[$75 >> 2] = $36; //@line 15212
   $76 = $ReallocAsyncCtx10 + 76 | 0; //@line 15213
   HEAP32[$76 >> 2] = $38; //@line 15214
   $77 = $ReallocAsyncCtx10 + 80 | 0; //@line 15215
   HEAP32[$77 >> 2] = $40; //@line 15216
   $78 = $ReallocAsyncCtx10 + 84 | 0; //@line 15217
   HEAP32[$78 >> 2] = $42; //@line 15218
   $79 = $ReallocAsyncCtx10 + 88 | 0; //@line 15219
   HEAP32[$79 >> 2] = $44; //@line 15220
   $80 = $ReallocAsyncCtx10 + 92 | 0; //@line 15221
   HEAP32[$80 >> 2] = $46; //@line 15222
   $81 = $ReallocAsyncCtx10 + 96 | 0; //@line 15223
   HEAP32[$81 >> 2] = $48; //@line 15224
   sp = STACKTOP; //@line 15225
   return;
  }
  ___async_unwind = 0; //@line 15228
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 15229
  $58 = $ReallocAsyncCtx10 + 4 | 0; //@line 15230
  HEAP32[$58 >> 2] = $$131; //@line 15231
  $59 = $ReallocAsyncCtx10 + 8 | 0; //@line 15232
  HEAP32[$59 >> 2] = $51; //@line 15233
  $60 = $ReallocAsyncCtx10 + 12 | 0; //@line 15234
  HEAP32[$60 >> 2] = $6; //@line 15235
  $61 = $ReallocAsyncCtx10 + 16 | 0; //@line 15236
  HEAP32[$61 >> 2] = $8; //@line 15237
  $62 = $ReallocAsyncCtx10 + 20 | 0; //@line 15238
  HEAP32[$62 >> 2] = $10; //@line 15239
  $63 = $ReallocAsyncCtx10 + 24 | 0; //@line 15240
  HEAP32[$63 >> 2] = $12; //@line 15241
  $64 = $ReallocAsyncCtx10 + 28 | 0; //@line 15242
  HEAP32[$64 >> 2] = $14; //@line 15243
  $65 = $ReallocAsyncCtx10 + 32 | 0; //@line 15244
  HEAP32[$65 >> 2] = $16; //@line 15245
  $66 = $ReallocAsyncCtx10 + 36 | 0; //@line 15246
  HEAP32[$66 >> 2] = $18; //@line 15247
  $67 = $ReallocAsyncCtx10 + 40 | 0; //@line 15248
  HEAP32[$67 >> 2] = $20; //@line 15249
  $68 = $ReallocAsyncCtx10 + 44 | 0; //@line 15250
  HEAP32[$68 >> 2] = $22; //@line 15251
  $69 = $ReallocAsyncCtx10 + 48 | 0; //@line 15252
  HEAP32[$69 >> 2] = $24; //@line 15253
  $70 = $ReallocAsyncCtx10 + 52 | 0; //@line 15254
  HEAP32[$70 >> 2] = $26; //@line 15255
  $71 = $ReallocAsyncCtx10 + 56 | 0; //@line 15256
  HEAP32[$71 >> 2] = $28; //@line 15257
  $72 = $ReallocAsyncCtx10 + 60 | 0; //@line 15258
  HEAP32[$72 >> 2] = $30; //@line 15259
  $73 = $ReallocAsyncCtx10 + 64 | 0; //@line 15260
  HEAP32[$73 >> 2] = $32; //@line 15261
  $74 = $ReallocAsyncCtx10 + 68 | 0; //@line 15262
  HEAP32[$74 >> 2] = $34; //@line 15263
  $75 = $ReallocAsyncCtx10 + 72 | 0; //@line 15264
  HEAP32[$75 >> 2] = $36; //@line 15265
  $76 = $ReallocAsyncCtx10 + 76 | 0; //@line 15266
  HEAP32[$76 >> 2] = $38; //@line 15267
  $77 = $ReallocAsyncCtx10 + 80 | 0; //@line 15268
  HEAP32[$77 >> 2] = $40; //@line 15269
  $78 = $ReallocAsyncCtx10 + 84 | 0; //@line 15270
  HEAP32[$78 >> 2] = $42; //@line 15271
  $79 = $ReallocAsyncCtx10 + 88 | 0; //@line 15272
  HEAP32[$79 >> 2] = $44; //@line 15273
  $80 = $ReallocAsyncCtx10 + 92 | 0; //@line 15274
  HEAP32[$80 >> 2] = $46; //@line 15275
  $81 = $ReallocAsyncCtx10 + 96 | 0; //@line 15276
  HEAP32[$81 >> 2] = $48; //@line 15277
  sp = STACKTOP; //@line 15278
  return;
 } else if ((label | 0) == 12) {
  HEAP32[$52 + 76 >> 2] = 0; //@line 15283
  $90 = $52 + 44 | 0; //@line 15284
  $91 = HEAP32[$90 >> 2] | 0; //@line 15285
  if (!$91) {
   HEAP32[$14 >> 2] = 0; //@line 15288
   $122 = HEAP32[$52 >> 2] | 0; //@line 15289
   HEAP32[$16 >> 2] = 0; //@line 15290
   HEAP32[$18 >> 2] = 175; //@line 15291
   HEAP32[$20 >> 2] = $122; //@line 15292
   HEAP32[$22 >> 2] = 724; //@line 15293
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 15294
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 15295
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 15298
    $123 = $ReallocAsyncCtx14 + 4 | 0; //@line 15299
    HEAP32[$123 >> 2] = $$131; //@line 15300
    $124 = $ReallocAsyncCtx14 + 8 | 0; //@line 15301
    HEAP32[$124 >> 2] = $51; //@line 15302
    $125 = $ReallocAsyncCtx14 + 12 | 0; //@line 15303
    HEAP32[$125 >> 2] = $6; //@line 15304
    $126 = $ReallocAsyncCtx14 + 16 | 0; //@line 15305
    HEAP32[$126 >> 2] = $50; //@line 15306
    $127 = $ReallocAsyncCtx14 + 20 | 0; //@line 15307
    HEAP32[$127 >> 2] = $8; //@line 15308
    $128 = $ReallocAsyncCtx14 + 24 | 0; //@line 15309
    HEAP32[$128 >> 2] = $10; //@line 15310
    $129 = $ReallocAsyncCtx14 + 28 | 0; //@line 15311
    HEAP32[$129 >> 2] = $12; //@line 15312
    $130 = $ReallocAsyncCtx14 + 32 | 0; //@line 15313
    HEAP32[$130 >> 2] = $14; //@line 15314
    $131 = $ReallocAsyncCtx14 + 36 | 0; //@line 15315
    HEAP32[$131 >> 2] = $16; //@line 15316
    $132 = $ReallocAsyncCtx14 + 40 | 0; //@line 15317
    HEAP32[$132 >> 2] = $18; //@line 15318
    $133 = $ReallocAsyncCtx14 + 44 | 0; //@line 15319
    HEAP32[$133 >> 2] = $20; //@line 15320
    $134 = $ReallocAsyncCtx14 + 48 | 0; //@line 15321
    HEAP32[$134 >> 2] = $22; //@line 15322
    $135 = $ReallocAsyncCtx14 + 52 | 0; //@line 15323
    HEAP32[$135 >> 2] = $24; //@line 15324
    $136 = $ReallocAsyncCtx14 + 56 | 0; //@line 15325
    HEAP32[$136 >> 2] = $26; //@line 15326
    $137 = $ReallocAsyncCtx14 + 60 | 0; //@line 15327
    HEAP32[$137 >> 2] = $28; //@line 15328
    $138 = $ReallocAsyncCtx14 + 64 | 0; //@line 15329
    HEAP32[$138 >> 2] = $30; //@line 15330
    $139 = $ReallocAsyncCtx14 + 68 | 0; //@line 15331
    HEAP32[$139 >> 2] = $32; //@line 15332
    $140 = $ReallocAsyncCtx14 + 72 | 0; //@line 15333
    HEAP32[$140 >> 2] = $34; //@line 15334
    $141 = $ReallocAsyncCtx14 + 76 | 0; //@line 15335
    HEAP32[$141 >> 2] = $36; //@line 15336
    $142 = $ReallocAsyncCtx14 + 80 | 0; //@line 15337
    HEAP32[$142 >> 2] = $38; //@line 15338
    $143 = $ReallocAsyncCtx14 + 84 | 0; //@line 15339
    HEAP32[$143 >> 2] = $40; //@line 15340
    $144 = $ReallocAsyncCtx14 + 88 | 0; //@line 15341
    HEAP32[$144 >> 2] = $42; //@line 15342
    $145 = $ReallocAsyncCtx14 + 92 | 0; //@line 15343
    HEAP32[$145 >> 2] = $44; //@line 15344
    $146 = $ReallocAsyncCtx14 + 96 | 0; //@line 15345
    HEAP32[$146 >> 2] = $46; //@line 15346
    $147 = $ReallocAsyncCtx14 + 100 | 0; //@line 15347
    HEAP32[$147 >> 2] = $48; //@line 15348
    sp = STACKTOP; //@line 15349
    return;
   }
   ___async_unwind = 0; //@line 15352
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 15353
   $123 = $ReallocAsyncCtx14 + 4 | 0; //@line 15354
   HEAP32[$123 >> 2] = $$131; //@line 15355
   $124 = $ReallocAsyncCtx14 + 8 | 0; //@line 15356
   HEAP32[$124 >> 2] = $51; //@line 15357
   $125 = $ReallocAsyncCtx14 + 12 | 0; //@line 15358
   HEAP32[$125 >> 2] = $6; //@line 15359
   $126 = $ReallocAsyncCtx14 + 16 | 0; //@line 15360
   HEAP32[$126 >> 2] = $50; //@line 15361
   $127 = $ReallocAsyncCtx14 + 20 | 0; //@line 15362
   HEAP32[$127 >> 2] = $8; //@line 15363
   $128 = $ReallocAsyncCtx14 + 24 | 0; //@line 15364
   HEAP32[$128 >> 2] = $10; //@line 15365
   $129 = $ReallocAsyncCtx14 + 28 | 0; //@line 15366
   HEAP32[$129 >> 2] = $12; //@line 15367
   $130 = $ReallocAsyncCtx14 + 32 | 0; //@line 15368
   HEAP32[$130 >> 2] = $14; //@line 15369
   $131 = $ReallocAsyncCtx14 + 36 | 0; //@line 15370
   HEAP32[$131 >> 2] = $16; //@line 15371
   $132 = $ReallocAsyncCtx14 + 40 | 0; //@line 15372
   HEAP32[$132 >> 2] = $18; //@line 15373
   $133 = $ReallocAsyncCtx14 + 44 | 0; //@line 15374
   HEAP32[$133 >> 2] = $20; //@line 15375
   $134 = $ReallocAsyncCtx14 + 48 | 0; //@line 15376
   HEAP32[$134 >> 2] = $22; //@line 15377
   $135 = $ReallocAsyncCtx14 + 52 | 0; //@line 15378
   HEAP32[$135 >> 2] = $24; //@line 15379
   $136 = $ReallocAsyncCtx14 + 56 | 0; //@line 15380
   HEAP32[$136 >> 2] = $26; //@line 15381
   $137 = $ReallocAsyncCtx14 + 60 | 0; //@line 15382
   HEAP32[$137 >> 2] = $28; //@line 15383
   $138 = $ReallocAsyncCtx14 + 64 | 0; //@line 15384
   HEAP32[$138 >> 2] = $30; //@line 15385
   $139 = $ReallocAsyncCtx14 + 68 | 0; //@line 15386
   HEAP32[$139 >> 2] = $32; //@line 15387
   $140 = $ReallocAsyncCtx14 + 72 | 0; //@line 15388
   HEAP32[$140 >> 2] = $34; //@line 15389
   $141 = $ReallocAsyncCtx14 + 76 | 0; //@line 15390
   HEAP32[$141 >> 2] = $36; //@line 15391
   $142 = $ReallocAsyncCtx14 + 80 | 0; //@line 15392
   HEAP32[$142 >> 2] = $38; //@line 15393
   $143 = $ReallocAsyncCtx14 + 84 | 0; //@line 15394
   HEAP32[$143 >> 2] = $40; //@line 15395
   $144 = $ReallocAsyncCtx14 + 88 | 0; //@line 15396
   HEAP32[$144 >> 2] = $42; //@line 15397
   $145 = $ReallocAsyncCtx14 + 92 | 0; //@line 15398
   HEAP32[$145 >> 2] = $44; //@line 15399
   $146 = $ReallocAsyncCtx14 + 96 | 0; //@line 15400
   HEAP32[$146 >> 2] = $46; //@line 15401
   $147 = $ReallocAsyncCtx14 + 100 | 0; //@line 15402
   HEAP32[$147 >> 2] = $48; //@line 15403
   sp = STACKTOP; //@line 15404
   return;
  } else {
   $95 = HEAP32[$91 + 4 >> 2] | 0; //@line 15409
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 15410
   FUNCTION_TABLE_vii[$95 & 7]($12, $52 + 32 | 0); //@line 15411
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 15414
    $96 = $ReallocAsyncCtx + 4 | 0; //@line 15415
    HEAP32[$96 >> 2] = $$131; //@line 15416
    $97 = $ReallocAsyncCtx + 8 | 0; //@line 15417
    HEAP32[$97 >> 2] = $51; //@line 15418
    $98 = $ReallocAsyncCtx + 12 | 0; //@line 15419
    HEAP32[$98 >> 2] = $6; //@line 15420
    $99 = $ReallocAsyncCtx + 16 | 0; //@line 15421
    HEAP32[$99 >> 2] = $50; //@line 15422
    $100 = $ReallocAsyncCtx + 20 | 0; //@line 15423
    HEAP32[$100 >> 2] = $8; //@line 15424
    $101 = $ReallocAsyncCtx + 24 | 0; //@line 15425
    HEAP32[$101 >> 2] = $10; //@line 15426
    $102 = $ReallocAsyncCtx + 28 | 0; //@line 15427
    HEAP32[$102 >> 2] = $12; //@line 15428
    $103 = $ReallocAsyncCtx + 32 | 0; //@line 15429
    HEAP32[$103 >> 2] = $14; //@line 15430
    $104 = $ReallocAsyncCtx + 36 | 0; //@line 15431
    HEAP32[$104 >> 2] = $16; //@line 15432
    $105 = $ReallocAsyncCtx + 40 | 0; //@line 15433
    HEAP32[$105 >> 2] = $18; //@line 15434
    $106 = $ReallocAsyncCtx + 44 | 0; //@line 15435
    HEAP32[$106 >> 2] = $20; //@line 15436
    $107 = $ReallocAsyncCtx + 48 | 0; //@line 15437
    HEAP32[$107 >> 2] = $22; //@line 15438
    $108 = $ReallocAsyncCtx + 52 | 0; //@line 15439
    HEAP32[$108 >> 2] = $24; //@line 15440
    $109 = $ReallocAsyncCtx + 56 | 0; //@line 15441
    HEAP32[$109 >> 2] = $26; //@line 15442
    $110 = $ReallocAsyncCtx + 60 | 0; //@line 15443
    HEAP32[$110 >> 2] = $28; //@line 15444
    $111 = $ReallocAsyncCtx + 64 | 0; //@line 15445
    HEAP32[$111 >> 2] = $30; //@line 15446
    $112 = $ReallocAsyncCtx + 68 | 0; //@line 15447
    HEAP32[$112 >> 2] = $32; //@line 15448
    $113 = $ReallocAsyncCtx + 72 | 0; //@line 15449
    HEAP32[$113 >> 2] = $34; //@line 15450
    $114 = $ReallocAsyncCtx + 76 | 0; //@line 15451
    HEAP32[$114 >> 2] = $36; //@line 15452
    $115 = $ReallocAsyncCtx + 80 | 0; //@line 15453
    HEAP32[$115 >> 2] = $38; //@line 15454
    $116 = $ReallocAsyncCtx + 84 | 0; //@line 15455
    HEAP32[$116 >> 2] = $40; //@line 15456
    $117 = $ReallocAsyncCtx + 88 | 0; //@line 15457
    HEAP32[$117 >> 2] = $42; //@line 15458
    $118 = $ReallocAsyncCtx + 92 | 0; //@line 15459
    HEAP32[$118 >> 2] = $44; //@line 15460
    $119 = $ReallocAsyncCtx + 96 | 0; //@line 15461
    HEAP32[$119 >> 2] = $46; //@line 15462
    $120 = $ReallocAsyncCtx + 100 | 0; //@line 15463
    HEAP32[$120 >> 2] = $48; //@line 15464
    $121 = $ReallocAsyncCtx + 104 | 0; //@line 15465
    HEAP32[$121 >> 2] = $90; //@line 15466
    sp = STACKTOP; //@line 15467
    return;
   }
   ___async_unwind = 0; //@line 15470
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 15471
   $96 = $ReallocAsyncCtx + 4 | 0; //@line 15472
   HEAP32[$96 >> 2] = $$131; //@line 15473
   $97 = $ReallocAsyncCtx + 8 | 0; //@line 15474
   HEAP32[$97 >> 2] = $51; //@line 15475
   $98 = $ReallocAsyncCtx + 12 | 0; //@line 15476
   HEAP32[$98 >> 2] = $6; //@line 15477
   $99 = $ReallocAsyncCtx + 16 | 0; //@line 15478
   HEAP32[$99 >> 2] = $50; //@line 15479
   $100 = $ReallocAsyncCtx + 20 | 0; //@line 15480
   HEAP32[$100 >> 2] = $8; //@line 15481
   $101 = $ReallocAsyncCtx + 24 | 0; //@line 15482
   HEAP32[$101 >> 2] = $10; //@line 15483
   $102 = $ReallocAsyncCtx + 28 | 0; //@line 15484
   HEAP32[$102 >> 2] = $12; //@line 15485
   $103 = $ReallocAsyncCtx + 32 | 0; //@line 15486
   HEAP32[$103 >> 2] = $14; //@line 15487
   $104 = $ReallocAsyncCtx + 36 | 0; //@line 15488
   HEAP32[$104 >> 2] = $16; //@line 15489
   $105 = $ReallocAsyncCtx + 40 | 0; //@line 15490
   HEAP32[$105 >> 2] = $18; //@line 15491
   $106 = $ReallocAsyncCtx + 44 | 0; //@line 15492
   HEAP32[$106 >> 2] = $20; //@line 15493
   $107 = $ReallocAsyncCtx + 48 | 0; //@line 15494
   HEAP32[$107 >> 2] = $22; //@line 15495
   $108 = $ReallocAsyncCtx + 52 | 0; //@line 15496
   HEAP32[$108 >> 2] = $24; //@line 15497
   $109 = $ReallocAsyncCtx + 56 | 0; //@line 15498
   HEAP32[$109 >> 2] = $26; //@line 15499
   $110 = $ReallocAsyncCtx + 60 | 0; //@line 15500
   HEAP32[$110 >> 2] = $28; //@line 15501
   $111 = $ReallocAsyncCtx + 64 | 0; //@line 15502
   HEAP32[$111 >> 2] = $30; //@line 15503
   $112 = $ReallocAsyncCtx + 68 | 0; //@line 15504
   HEAP32[$112 >> 2] = $32; //@line 15505
   $113 = $ReallocAsyncCtx + 72 | 0; //@line 15506
   HEAP32[$113 >> 2] = $34; //@line 15507
   $114 = $ReallocAsyncCtx + 76 | 0; //@line 15508
   HEAP32[$114 >> 2] = $36; //@line 15509
   $115 = $ReallocAsyncCtx + 80 | 0; //@line 15510
   HEAP32[$115 >> 2] = $38; //@line 15511
   $116 = $ReallocAsyncCtx + 84 | 0; //@line 15512
   HEAP32[$116 >> 2] = $40; //@line 15513
   $117 = $ReallocAsyncCtx + 88 | 0; //@line 15514
   HEAP32[$117 >> 2] = $42; //@line 15515
   $118 = $ReallocAsyncCtx + 92 | 0; //@line 15516
   HEAP32[$118 >> 2] = $44; //@line 15517
   $119 = $ReallocAsyncCtx + 96 | 0; //@line 15518
   HEAP32[$119 >> 2] = $46; //@line 15519
   $120 = $ReallocAsyncCtx + 100 | 0; //@line 15520
   HEAP32[$120 >> 2] = $48; //@line 15521
   $121 = $ReallocAsyncCtx + 104 | 0; //@line 15522
   HEAP32[$121 >> 2] = $90; //@line 15523
   sp = STACKTOP; //@line 15524
   return;
  }
 } else if ((label | 0) == 22) {
  HEAP32[$149 >> 2] = 0; //@line 15529
  $154 = $148 + 44 | 0; //@line 15530
  $155 = HEAP32[$154 >> 2] | 0; //@line 15531
  if (!$155) {
   HEAP32[$34 >> 2] = 0; //@line 15534
   $186 = HEAP32[$148 >> 2] | 0; //@line 15535
   HEAP32[$36 >> 2] = 0; //@line 15536
   HEAP32[$38 >> 2] = 180; //@line 15537
   HEAP32[$40 >> 2] = $186; //@line 15538
   HEAP32[$6 >> 2] = 724; //@line 15539
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 15540
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 15541
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 15544
    $187 = $ReallocAsyncCtx13 + 4 | 0; //@line 15545
    HEAP32[$187 >> 2] = $$131; //@line 15546
    $188 = $ReallocAsyncCtx13 + 8 | 0; //@line 15547
    HEAP32[$188 >> 2] = $51; //@line 15548
    $189 = $ReallocAsyncCtx13 + 12 | 0; //@line 15549
    HEAP32[$189 >> 2] = $6; //@line 15550
    $190 = $ReallocAsyncCtx13 + 16 | 0; //@line 15551
    HEAP32[$190 >> 2] = $50; //@line 15552
    $191 = $ReallocAsyncCtx13 + 20 | 0; //@line 15553
    HEAP32[$191 >> 2] = $8; //@line 15554
    $192 = $ReallocAsyncCtx13 + 24 | 0; //@line 15555
    HEAP32[$192 >> 2] = $10; //@line 15556
    $193 = $ReallocAsyncCtx13 + 28 | 0; //@line 15557
    HEAP32[$193 >> 2] = $12; //@line 15558
    $194 = $ReallocAsyncCtx13 + 32 | 0; //@line 15559
    HEAP32[$194 >> 2] = $14; //@line 15560
    $195 = $ReallocAsyncCtx13 + 36 | 0; //@line 15561
    HEAP32[$195 >> 2] = $16; //@line 15562
    $196 = $ReallocAsyncCtx13 + 40 | 0; //@line 15563
    HEAP32[$196 >> 2] = $18; //@line 15564
    $197 = $ReallocAsyncCtx13 + 44 | 0; //@line 15565
    HEAP32[$197 >> 2] = $20; //@line 15566
    $198 = $ReallocAsyncCtx13 + 48 | 0; //@line 15567
    HEAP32[$198 >> 2] = $22; //@line 15568
    $199 = $ReallocAsyncCtx13 + 52 | 0; //@line 15569
    HEAP32[$199 >> 2] = $24; //@line 15570
    $200 = $ReallocAsyncCtx13 + 56 | 0; //@line 15571
    HEAP32[$200 >> 2] = $26; //@line 15572
    $201 = $ReallocAsyncCtx13 + 60 | 0; //@line 15573
    HEAP32[$201 >> 2] = $28; //@line 15574
    $202 = $ReallocAsyncCtx13 + 64 | 0; //@line 15575
    HEAP32[$202 >> 2] = $30; //@line 15576
    $203 = $ReallocAsyncCtx13 + 68 | 0; //@line 15577
    HEAP32[$203 >> 2] = $32; //@line 15578
    $204 = $ReallocAsyncCtx13 + 72 | 0; //@line 15579
    HEAP32[$204 >> 2] = $34; //@line 15580
    $205 = $ReallocAsyncCtx13 + 76 | 0; //@line 15581
    HEAP32[$205 >> 2] = $36; //@line 15582
    $206 = $ReallocAsyncCtx13 + 80 | 0; //@line 15583
    HEAP32[$206 >> 2] = $38; //@line 15584
    $207 = $ReallocAsyncCtx13 + 84 | 0; //@line 15585
    HEAP32[$207 >> 2] = $40; //@line 15586
    $208 = $ReallocAsyncCtx13 + 88 | 0; //@line 15587
    HEAP32[$208 >> 2] = $42; //@line 15588
    $209 = $ReallocAsyncCtx13 + 92 | 0; //@line 15589
    HEAP32[$209 >> 2] = $44; //@line 15590
    $210 = $ReallocAsyncCtx13 + 96 | 0; //@line 15591
    HEAP32[$210 >> 2] = $46; //@line 15592
    $211 = $ReallocAsyncCtx13 + 100 | 0; //@line 15593
    HEAP32[$211 >> 2] = $48; //@line 15594
    sp = STACKTOP; //@line 15595
    return;
   }
   ___async_unwind = 0; //@line 15598
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 15599
   $187 = $ReallocAsyncCtx13 + 4 | 0; //@line 15600
   HEAP32[$187 >> 2] = $$131; //@line 15601
   $188 = $ReallocAsyncCtx13 + 8 | 0; //@line 15602
   HEAP32[$188 >> 2] = $51; //@line 15603
   $189 = $ReallocAsyncCtx13 + 12 | 0; //@line 15604
   HEAP32[$189 >> 2] = $6; //@line 15605
   $190 = $ReallocAsyncCtx13 + 16 | 0; //@line 15606
   HEAP32[$190 >> 2] = $50; //@line 15607
   $191 = $ReallocAsyncCtx13 + 20 | 0; //@line 15608
   HEAP32[$191 >> 2] = $8; //@line 15609
   $192 = $ReallocAsyncCtx13 + 24 | 0; //@line 15610
   HEAP32[$192 >> 2] = $10; //@line 15611
   $193 = $ReallocAsyncCtx13 + 28 | 0; //@line 15612
   HEAP32[$193 >> 2] = $12; //@line 15613
   $194 = $ReallocAsyncCtx13 + 32 | 0; //@line 15614
   HEAP32[$194 >> 2] = $14; //@line 15615
   $195 = $ReallocAsyncCtx13 + 36 | 0; //@line 15616
   HEAP32[$195 >> 2] = $16; //@line 15617
   $196 = $ReallocAsyncCtx13 + 40 | 0; //@line 15618
   HEAP32[$196 >> 2] = $18; //@line 15619
   $197 = $ReallocAsyncCtx13 + 44 | 0; //@line 15620
   HEAP32[$197 >> 2] = $20; //@line 15621
   $198 = $ReallocAsyncCtx13 + 48 | 0; //@line 15622
   HEAP32[$198 >> 2] = $22; //@line 15623
   $199 = $ReallocAsyncCtx13 + 52 | 0; //@line 15624
   HEAP32[$199 >> 2] = $24; //@line 15625
   $200 = $ReallocAsyncCtx13 + 56 | 0; //@line 15626
   HEAP32[$200 >> 2] = $26; //@line 15627
   $201 = $ReallocAsyncCtx13 + 60 | 0; //@line 15628
   HEAP32[$201 >> 2] = $28; //@line 15629
   $202 = $ReallocAsyncCtx13 + 64 | 0; //@line 15630
   HEAP32[$202 >> 2] = $30; //@line 15631
   $203 = $ReallocAsyncCtx13 + 68 | 0; //@line 15632
   HEAP32[$203 >> 2] = $32; //@line 15633
   $204 = $ReallocAsyncCtx13 + 72 | 0; //@line 15634
   HEAP32[$204 >> 2] = $34; //@line 15635
   $205 = $ReallocAsyncCtx13 + 76 | 0; //@line 15636
   HEAP32[$205 >> 2] = $36; //@line 15637
   $206 = $ReallocAsyncCtx13 + 80 | 0; //@line 15638
   HEAP32[$206 >> 2] = $38; //@line 15639
   $207 = $ReallocAsyncCtx13 + 84 | 0; //@line 15640
   HEAP32[$207 >> 2] = $40; //@line 15641
   $208 = $ReallocAsyncCtx13 + 88 | 0; //@line 15642
   HEAP32[$208 >> 2] = $42; //@line 15643
   $209 = $ReallocAsyncCtx13 + 92 | 0; //@line 15644
   HEAP32[$209 >> 2] = $44; //@line 15645
   $210 = $ReallocAsyncCtx13 + 96 | 0; //@line 15646
   HEAP32[$210 >> 2] = $46; //@line 15647
   $211 = $ReallocAsyncCtx13 + 100 | 0; //@line 15648
   HEAP32[$211 >> 2] = $48; //@line 15649
   sp = STACKTOP; //@line 15650
   return;
  } else {
   $159 = HEAP32[$155 + 4 >> 2] | 0; //@line 15655
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 15656
   FUNCTION_TABLE_vii[$159 & 7]($32, $148 + 32 | 0); //@line 15657
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 15660
    $160 = $ReallocAsyncCtx4 + 4 | 0; //@line 15661
    HEAP32[$160 >> 2] = $$131; //@line 15662
    $161 = $ReallocAsyncCtx4 + 8 | 0; //@line 15663
    HEAP32[$161 >> 2] = $51; //@line 15664
    $162 = $ReallocAsyncCtx4 + 12 | 0; //@line 15665
    HEAP32[$162 >> 2] = $6; //@line 15666
    $163 = $ReallocAsyncCtx4 + 16 | 0; //@line 15667
    HEAP32[$163 >> 2] = $50; //@line 15668
    $164 = $ReallocAsyncCtx4 + 20 | 0; //@line 15669
    HEAP32[$164 >> 2] = $8; //@line 15670
    $165 = $ReallocAsyncCtx4 + 24 | 0; //@line 15671
    HEAP32[$165 >> 2] = $10; //@line 15672
    $166 = $ReallocAsyncCtx4 + 28 | 0; //@line 15673
    HEAP32[$166 >> 2] = $12; //@line 15674
    $167 = $ReallocAsyncCtx4 + 32 | 0; //@line 15675
    HEAP32[$167 >> 2] = $14; //@line 15676
    $168 = $ReallocAsyncCtx4 + 36 | 0; //@line 15677
    HEAP32[$168 >> 2] = $16; //@line 15678
    $169 = $ReallocAsyncCtx4 + 40 | 0; //@line 15679
    HEAP32[$169 >> 2] = $18; //@line 15680
    $170 = $ReallocAsyncCtx4 + 44 | 0; //@line 15681
    HEAP32[$170 >> 2] = $20; //@line 15682
    $171 = $ReallocAsyncCtx4 + 48 | 0; //@line 15683
    HEAP32[$171 >> 2] = $22; //@line 15684
    $172 = $ReallocAsyncCtx4 + 52 | 0; //@line 15685
    HEAP32[$172 >> 2] = $24; //@line 15686
    $173 = $ReallocAsyncCtx4 + 56 | 0; //@line 15687
    HEAP32[$173 >> 2] = $26; //@line 15688
    $174 = $ReallocAsyncCtx4 + 60 | 0; //@line 15689
    HEAP32[$174 >> 2] = $28; //@line 15690
    $175 = $ReallocAsyncCtx4 + 64 | 0; //@line 15691
    HEAP32[$175 >> 2] = $30; //@line 15692
    $176 = $ReallocAsyncCtx4 + 68 | 0; //@line 15693
    HEAP32[$176 >> 2] = $32; //@line 15694
    $177 = $ReallocAsyncCtx4 + 72 | 0; //@line 15695
    HEAP32[$177 >> 2] = $34; //@line 15696
    $178 = $ReallocAsyncCtx4 + 76 | 0; //@line 15697
    HEAP32[$178 >> 2] = $36; //@line 15698
    $179 = $ReallocAsyncCtx4 + 80 | 0; //@line 15699
    HEAP32[$179 >> 2] = $38; //@line 15700
    $180 = $ReallocAsyncCtx4 + 84 | 0; //@line 15701
    HEAP32[$180 >> 2] = $40; //@line 15702
    $181 = $ReallocAsyncCtx4 + 88 | 0; //@line 15703
    HEAP32[$181 >> 2] = $42; //@line 15704
    $182 = $ReallocAsyncCtx4 + 92 | 0; //@line 15705
    HEAP32[$182 >> 2] = $44; //@line 15706
    $183 = $ReallocAsyncCtx4 + 96 | 0; //@line 15707
    HEAP32[$183 >> 2] = $46; //@line 15708
    $184 = $ReallocAsyncCtx4 + 100 | 0; //@line 15709
    HEAP32[$184 >> 2] = $48; //@line 15710
    $185 = $ReallocAsyncCtx4 + 104 | 0; //@line 15711
    HEAP32[$185 >> 2] = $154; //@line 15712
    sp = STACKTOP; //@line 15713
    return;
   }
   ___async_unwind = 0; //@line 15716
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 15717
   $160 = $ReallocAsyncCtx4 + 4 | 0; //@line 15718
   HEAP32[$160 >> 2] = $$131; //@line 15719
   $161 = $ReallocAsyncCtx4 + 8 | 0; //@line 15720
   HEAP32[$161 >> 2] = $51; //@line 15721
   $162 = $ReallocAsyncCtx4 + 12 | 0; //@line 15722
   HEAP32[$162 >> 2] = $6; //@line 15723
   $163 = $ReallocAsyncCtx4 + 16 | 0; //@line 15724
   HEAP32[$163 >> 2] = $50; //@line 15725
   $164 = $ReallocAsyncCtx4 + 20 | 0; //@line 15726
   HEAP32[$164 >> 2] = $8; //@line 15727
   $165 = $ReallocAsyncCtx4 + 24 | 0; //@line 15728
   HEAP32[$165 >> 2] = $10; //@line 15729
   $166 = $ReallocAsyncCtx4 + 28 | 0; //@line 15730
   HEAP32[$166 >> 2] = $12; //@line 15731
   $167 = $ReallocAsyncCtx4 + 32 | 0; //@line 15732
   HEAP32[$167 >> 2] = $14; //@line 15733
   $168 = $ReallocAsyncCtx4 + 36 | 0; //@line 15734
   HEAP32[$168 >> 2] = $16; //@line 15735
   $169 = $ReallocAsyncCtx4 + 40 | 0; //@line 15736
   HEAP32[$169 >> 2] = $18; //@line 15737
   $170 = $ReallocAsyncCtx4 + 44 | 0; //@line 15738
   HEAP32[$170 >> 2] = $20; //@line 15739
   $171 = $ReallocAsyncCtx4 + 48 | 0; //@line 15740
   HEAP32[$171 >> 2] = $22; //@line 15741
   $172 = $ReallocAsyncCtx4 + 52 | 0; //@line 15742
   HEAP32[$172 >> 2] = $24; //@line 15743
   $173 = $ReallocAsyncCtx4 + 56 | 0; //@line 15744
   HEAP32[$173 >> 2] = $26; //@line 15745
   $174 = $ReallocAsyncCtx4 + 60 | 0; //@line 15746
   HEAP32[$174 >> 2] = $28; //@line 15747
   $175 = $ReallocAsyncCtx4 + 64 | 0; //@line 15748
   HEAP32[$175 >> 2] = $30; //@line 15749
   $176 = $ReallocAsyncCtx4 + 68 | 0; //@line 15750
   HEAP32[$176 >> 2] = $32; //@line 15751
   $177 = $ReallocAsyncCtx4 + 72 | 0; //@line 15752
   HEAP32[$177 >> 2] = $34; //@line 15753
   $178 = $ReallocAsyncCtx4 + 76 | 0; //@line 15754
   HEAP32[$178 >> 2] = $36; //@line 15755
   $179 = $ReallocAsyncCtx4 + 80 | 0; //@line 15756
   HEAP32[$179 >> 2] = $38; //@line 15757
   $180 = $ReallocAsyncCtx4 + 84 | 0; //@line 15758
   HEAP32[$180 >> 2] = $40; //@line 15759
   $181 = $ReallocAsyncCtx4 + 88 | 0; //@line 15760
   HEAP32[$181 >> 2] = $42; //@line 15761
   $182 = $ReallocAsyncCtx4 + 92 | 0; //@line 15762
   HEAP32[$182 >> 2] = $44; //@line 15763
   $183 = $ReallocAsyncCtx4 + 96 | 0; //@line 15764
   HEAP32[$183 >> 2] = $46; //@line 15765
   $184 = $ReallocAsyncCtx4 + 100 | 0; //@line 15766
   HEAP32[$184 >> 2] = $48; //@line 15767
   $185 = $ReallocAsyncCtx4 + 104 | 0; //@line 15768
   HEAP32[$185 >> 2] = $154; //@line 15769
   sp = STACKTOP; //@line 15770
   return;
  }
 }
}
function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$ph = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $101 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $120 = 0, $122 = 0, $127 = 0, $13 = 0, $134 = 0, $14 = 0, $140 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $192 = 0, $193 = 0, $20 = 0, $201 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $227 = 0, $23 = 0, $235 = 0, $236 = 0, $239 = 0, $247 = 0, $254 = 0, $262 = 0, $269 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $292 = 0.0, $3 = 0, $312 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $35 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $65 = 0, $90 = 0, $91 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5645
 STACKTOP = STACKTOP + 288 | 0; //@line 5646
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 5646
 $3 = sp + 8 | 0; //@line 5647
 $4 = sp + 17 | 0; //@line 5648
 $5 = sp; //@line 5649
 $6 = sp + 16 | 0; //@line 5650
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $314 = ___lockfile($0) | 0; //@line 5656
 } else {
  $314 = 0; //@line 5658
 }
 $11 = HEAP8[$1 >> 0] | 0; //@line 5660
 L4 : do {
  if (!($11 << 24 >> 24)) {
   $$3291 = 0; //@line 5664
  } else {
   $13 = $0 + 4 | 0; //@line 5666
   $14 = $0 + 100 | 0; //@line 5667
   $15 = $0 + 108 | 0; //@line 5668
   $16 = $0 + 8 | 0; //@line 5669
   $17 = $4 + 10 | 0; //@line 5670
   $18 = $4 + 33 | 0; //@line 5671
   $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0; //@line 5672
   $$0273408 = $1; //@line 5673
   $$0283407 = 0; //@line 5673
   $$0288404 = 0; //@line 5673
   $$0305402 = 0; //@line 5673
   $20 = $11; //@line 5673
   $315 = 0; //@line 5673
   L6 : while (1) {
    L8 : do {
     if (!(_isspace($20 & 255) | 0)) {
      $50 = (HEAP8[$$0273408 >> 0] | 0) == 37; //@line 5681
      L10 : do {
       if ($50) {
        $51 = $$0273408 + 1 | 0; //@line 5684
        $52 = HEAP8[$51 >> 0] | 0; //@line 5685
        L12 : do {
         switch ($52 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $$0293 = 0; //@line 5694
           $$2275 = $$0273408 + 2 | 0; //@line 5694
           break;
          }
         default:
          {
           if (_isdigit($52 & 255) | 0) {
            if ((HEAP8[$$0273408 + 2 >> 0] | 0) == 36) {
             $$0293 = _arg_n_727($2, (HEAPU8[$51 >> 0] | 0) + -48 | 0) | 0; //@line 5711
             $$2275 = $$0273408 + 3 | 0; //@line 5711
             break L12;
            }
           }
           $90 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5726
           $91 = HEAP32[$90 >> 2] | 0; //@line 5727
           HEAP32[$2 >> 2] = $90 + 4; //@line 5729
           $$0293 = $91; //@line 5730
           $$2275 = $51; //@line 5730
          }
         }
        } while (0);
        if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
         $$0266$lcssa = 0; //@line 5739
         $$3$lcssa = $$2275; //@line 5739
        } else {
         $$0266397 = 0; //@line 5741
         $$3396 = $$2275; //@line 5741
         while (1) {
          $100 = ($$0266397 * 10 | 0) + -48 + (HEAPU8[$$3396 >> 0] | 0) | 0; //@line 5747
          $101 = $$3396 + 1 | 0; //@line 5748
          if (!(_isdigit(HEAPU8[$101 >> 0] | 0) | 0)) {
           $$0266$lcssa = $100; //@line 5754
           $$3$lcssa = $101; //@line 5754
           break;
          } else {
           $$0266397 = $100; //@line 5757
           $$3396 = $101; //@line 5757
          }
         }
        }
        $106 = HEAP8[$$3$lcssa >> 0] | 0; //@line 5761
        $108 = $$3$lcssa + 1 | 0; //@line 5763
        if ($106 << 24 >> 24 == 109) {
         $$0270 = ($$0293 | 0) != 0 & 1; //@line 5768
         $$1306 = 0; //@line 5768
         $$4 = $108; //@line 5768
         $112 = HEAP8[$108 >> 0] | 0; //@line 5768
         $318 = 0; //@line 5768
        } else {
         $$0270 = 0; //@line 5770
         $$1306 = $$0305402; //@line 5770
         $$4 = $$3$lcssa; //@line 5770
         $112 = $106; //@line 5770
         $318 = $315; //@line 5770
        }
        $111 = $$4 + 1 | 0; //@line 5772
        switch ($112 << 24 >> 24) {
        case 104:
         {
          $114 = (HEAP8[$111 >> 0] | 0) == 104; //@line 5776
          $$0268 = $114 ? -2 : -1; //@line 5780
          $$5 = $114 ? $$4 + 2 | 0 : $111; //@line 5780
          break;
         }
        case 108:
         {
          $117 = (HEAP8[$111 >> 0] | 0) == 108; //@line 5785
          $$0268 = $117 ? 3 : 1; //@line 5789
          $$5 = $117 ? $$4 + 2 | 0 : $111; //@line 5789
          break;
         }
        case 106:
         {
          $$0268 = 3; //@line 5793
          $$5 = $111; //@line 5793
          break;
         }
        case 116:
        case 122:
         {
          $$0268 = 1; //@line 5797
          $$5 = $111; //@line 5797
          break;
         }
        case 76:
         {
          $$0268 = 2; //@line 5801
          $$5 = $111; //@line 5801
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $$0268 = 0; //@line 5805
          $$5 = $$4; //@line 5805
          break;
         }
        default:
         {
          $$7312 = $$1306; //@line 5809
          $319 = $318; //@line 5809
          label = 136; //@line 5810
          break L6;
         }
        }
        $120 = HEAPU8[$$5 >> 0] | 0; //@line 5815
        $122 = ($120 & 47 | 0) == 3; //@line 5817
        $$ = $122 ? $120 | 32 : $120; //@line 5819
        $$$0268 = $122 ? 1 : $$0268; //@line 5820
        $trunc = $$ & 255; //@line 5821
        switch ($trunc << 24 >> 24) {
        case 99:
         {
          $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1; //@line 5826
          $$1284 = $$0283407; //@line 5826
          break;
         }
        case 91:
         {
          $$1267 = $$0266$lcssa; //@line 5830
          $$1284 = $$0283407; //@line 5830
          break;
         }
        case 110:
         {
          _store_int_728($$0293, $$$0268, $$0283407, (($$0283407 | 0) < 0) << 31 >> 31); //@line 5836
          $$11 = $$5; //@line 5837
          $$1289 = $$0288404; //@line 5837
          $$2285 = $$0283407; //@line 5837
          $$6311 = $$1306; //@line 5837
          $316 = $318; //@line 5837
          break L8;
          break;
         }
        default:
         {
          ___shlim($0, 0); //@line 5842
          do {
           $127 = HEAP32[$13 >> 2] | 0; //@line 5844
           if ($127 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $127 + 1; //@line 5849
            $134 = HEAPU8[$127 >> 0] | 0; //@line 5852
           } else {
            $134 = ___shgetc($0) | 0; //@line 5855
           }
          } while ((_isspace($134) | 0) != 0);
          if (!(HEAP32[$14 >> 2] | 0)) {
           $146 = HEAP32[$13 >> 2] | 0; //@line 5867
          } else {
           $140 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 5870
           HEAP32[$13 >> 2] = $140; //@line 5871
           $146 = $140; //@line 5873
          }
          $$1267 = $$0266$lcssa; //@line 5880
          $$1284 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $146 - (HEAP32[$16 >> 2] | 0) | 0; //@line 5880
         }
        }
        ___shlim($0, $$1267); //@line 5883
        $148 = HEAP32[$13 >> 2] | 0; //@line 5884
        $149 = HEAP32[$14 >> 2] | 0; //@line 5885
        if ($148 >>> 0 < $149 >>> 0) {
         HEAP32[$13 >> 2] = $148 + 1; //@line 5889
         $155 = $149; //@line 5890
        } else {
         if ((___shgetc($0) | 0) < 0) {
          $$7312 = $$1306; //@line 5895
          $319 = $318; //@line 5895
          label = 136; //@line 5896
          break L6;
         }
         $155 = HEAP32[$14 >> 2] | 0; //@line 5900
        }
        if ($155 | 0) {
         HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 5906
        }
        L58 : do {
         switch ($trunc << 24 >> 24) {
         case 91:
         case 99:
         case 115:
          {
           $158 = ($$ | 0) == 99; //@line 5911
           L60 : do {
            if (($$ | 16 | 0) == 115) {
             _memset($4 | 0, -1, 257) | 0; //@line 5917
             HEAP8[$4 >> 0] = 0; //@line 5918
             if (($$ | 0) == 115) {
              HEAP8[$18 >> 0] = 0; //@line 5920
              HEAP8[$17 >> 0] = 0; //@line 5921
              HEAP8[$17 + 1 >> 0] = 0; //@line 5921
              HEAP8[$17 + 2 >> 0] = 0; //@line 5921
              HEAP8[$17 + 3 >> 0] = 0; //@line 5921
              HEAP8[$17 + 4 >> 0] = 0; //@line 5921
              $$9 = $$5; //@line 5922
             } else {
              $$9 = $$5; //@line 5924
             }
            } else {
             $162 = $$5 + 1 | 0; //@line 5927
             $164 = (HEAP8[$162 >> 0] | 0) == 94; //@line 5929
             $$0292 = $164 & 1; //@line 5931
             $$6 = $164 ? $$5 + 2 | 0 : $162; //@line 5932
             _memset($4 | 0, $$0292 | 0, 257) | 0; //@line 5933
             HEAP8[$4 >> 0] = 0; //@line 5934
             $166 = HEAP8[$$6 >> 0] | 0; //@line 5935
             switch ($166 << 24 >> 24) {
             case 45:
              {
               $$6$pn = $$6; //@line 5938
               $$sink330 = 46; //@line 5938
               label = 65; //@line 5939
               break;
              }
             case 93:
              {
               $$6$pn = $$6; //@line 5943
               $$sink330 = 94; //@line 5943
               label = 65; //@line 5944
               break;
              }
             default:
              {
               $$7 = $$6; //@line 5948
               $168 = $166; //@line 5948
              }
             }
             while (1) {
              if ((label | 0) == 65) {
               label = 0; //@line 5953
               HEAP8[$4 + $$sink330 >> 0] = $$0292 ^ 1; //@line 5957
               $$7$ph = $$6$pn + 1 | 0; //@line 5958
               $$7 = $$7$ph; //@line 5960
               $168 = HEAP8[$$7$ph >> 0] | 0; //@line 5960
              }
              L70 : do {
               switch ($168 << 24 >> 24) {
               case 0:
                {
                 $$7312 = $$1306; //@line 5965
                 $319 = $318; //@line 5965
                 label = 136; //@line 5966
                 break L6;
                 break;
                }
               case 93:
                {
                 $$9 = $$7; //@line 5971
                 break L60;
                 break;
                }
               case 45:
                {
                 $169 = $$7 + 1 | 0; //@line 5976
                 $170 = HEAP8[$169 >> 0] | 0; //@line 5977
                 switch ($170 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $$8 = $$7; //@line 5980
                   $183 = 45; //@line 5980
                   break L70;
                   break;
                  }
                 default:
                  {}
                 }
                 $172 = HEAP8[$$7 + -1 >> 0] | 0; //@line 5988
                 if (($172 & 255) < ($170 & 255)) {
                  $176 = ($$0292 ^ 1) & 255; //@line 5993
                  $$0286399 = $172 & 255; //@line 5994
                  do {
                   $$0286399 = $$0286399 + 1 | 0; //@line 5996
                   HEAP8[$4 + $$0286399 >> 0] = $176; //@line 5998
                   $179 = HEAP8[$169 >> 0] | 0; //@line 5999
                  } while (($$0286399 | 0) < ($179 & 255 | 0));
                  $$8 = $169; //@line 6005
                  $183 = $179; //@line 6005
                 } else {
                  $$8 = $169; //@line 6010
                  $183 = $170; //@line 6010
                 }
                 break;
                }
               default:
                {
                 $$8 = $$7; //@line 6015
                 $183 = $168; //@line 6015
                }
               }
              } while (0);
              $$6$pn = $$8; //@line 6021
              $$sink330 = ($183 & 255) + 1 | 0; //@line 6021
              label = 65; //@line 6022
             }
            }
           } while (0);
           $186 = $158 ? $$1267 + 1 | 0 : 31; //@line 6027
           $187 = ($$$0268 | 0) == 1; //@line 6028
           $188 = ($$0270 | 0) != 0; //@line 6029
           L78 : do {
            if ($187) {
             if ($188) {
              $190 = _malloc($186 << 2) | 0; //@line 6034
              if (!$190) {
               $$7312 = 0; //@line 6037
               $319 = 0; //@line 6037
               label = 136; //@line 6038
               break L6;
              } else {
               $321 = $190; //@line 6041
              }
             } else {
              $321 = $$0293; //@line 6044
             }
             HEAP32[$3 >> 2] = 0; //@line 6046
             HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0; //@line 6047
             $$0276$ph = $186; //@line 6048
             $$0278$ph = 0; //@line 6048
             $$ph = $321; //@line 6048
             L83 : while (1) {
              $192 = ($$ph | 0) == 0; //@line 6050
              $$0278$ph336 = $$0278$ph; //@line 6051
              while (1) {
               L87 : while (1) {
                $193 = HEAP32[$13 >> 2] | 0; //@line 6054
                if ($193 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $193 + 1; //@line 6059
                 $201 = HEAPU8[$193 >> 0] | 0; //@line 6062
                } else {
                 $201 = ___shgetc($0) | 0; //@line 6065
                }
                if (!(HEAP8[$4 + ($201 + 1) >> 0] | 0)) {
                 break L83;
                }
                HEAP8[$6 >> 0] = $201; //@line 6075
                switch (_mbrtowc($5, $6, 1, $3) | 0) {
                case -1:
                 {
                  $$7312 = 0; //@line 6079
                  $319 = $$ph; //@line 6079
                  label = 136; //@line 6080
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L87;
                 }
                }
               }
               if ($192) {
                $$1279 = $$0278$ph336; //@line 6093
               } else {
                HEAP32[$$ph + ($$0278$ph336 << 2) >> 2] = HEAP32[$5 >> 2]; //@line 6098
                $$1279 = $$0278$ph336 + 1 | 0; //@line 6099
               }
               if ($188 & ($$1279 | 0) == ($$0276$ph | 0)) {
                break;
               } else {
                $$0278$ph336 = $$1279; //@line 6106
               }
              }
              $211 = $$0276$ph << 1 | 1; //@line 6110
              $213 = _realloc($$ph, $211 << 2) | 0; //@line 6112
              if (!$213) {
               $$7312 = 0; //@line 6115
               $319 = $$ph; //@line 6115
               label = 136; //@line 6116
               break L6;
              } else {
               $$0278$ph$phi = $$0276$ph; //@line 6119
               $$0276$ph = $211; //@line 6119
               $$ph = $213; //@line 6119
               $$0278$ph = $$0278$ph$phi; //@line 6119
              }
             }
             if (!(_mbsinit($3) | 0)) {
              $$7312 = 0; //@line 6125
              $319 = $$ph; //@line 6125
              label = 136; //@line 6126
              break L6;
             } else {
              $$4282 = $$0278$ph336; //@line 6129
              $$4309 = 0; //@line 6129
              $$5299 = $$ph; //@line 6129
              $322 = $$ph; //@line 6129
             }
            } else {
             if ($188) {
              $217 = _malloc($186) | 0; //@line 6133
              if (!$217) {
               $$7312 = 0; //@line 6136
               $319 = 0; //@line 6136
               label = 136; //@line 6137
               break L6;
              } else {
               $$1277$ph = $186; //@line 6140
               $$2280$ph = 0; //@line 6140
               $$2307$ph = $217; //@line 6140
              }
              while (1) {
               $$2280 = $$2280$ph; //@line 6143
               do {
                $219 = HEAP32[$13 >> 2] | 0; //@line 6145
                if ($219 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $219 + 1; //@line 6150
                 $227 = HEAPU8[$219 >> 0] | 0; //@line 6153
                } else {
                 $227 = ___shgetc($0) | 0; //@line 6156
                }
                if (!(HEAP8[$4 + ($227 + 1) >> 0] | 0)) {
                 $$4282 = $$2280; //@line 6163
                 $$4309 = $$2307$ph; //@line 6163
                 $$5299 = 0; //@line 6163
                 $322 = 0; //@line 6163
                 break L78;
                }
                HEAP8[$$2307$ph + $$2280 >> 0] = $227; //@line 6169
                $$2280 = $$2280 + 1 | 0; //@line 6167
               } while (($$2280 | 0) != ($$1277$ph | 0));
               $235 = $$1277$ph << 1 | 1; //@line 6178
               $236 = _realloc($$2307$ph, $235) | 0; //@line 6179
               if (!$236) {
                $$7312 = $$2307$ph; //@line 6182
                $319 = 0; //@line 6182
                label = 136; //@line 6183
                break L6;
               } else {
                $$2280$ph$phi = $$1277$ph; //@line 6186
                $$1277$ph = $235; //@line 6186
                $$2307$ph = $236; //@line 6186
                $$2280$ph = $$2280$ph$phi; //@line 6186
               }
              }
             }
             if (!$$0293) {
              while (1) {
               $254 = HEAP32[$13 >> 2] | 0; //@line 6193
               if ($254 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                HEAP32[$13 >> 2] = $254 + 1; //@line 6198
                $262 = HEAPU8[$254 >> 0] | 0; //@line 6201
               } else {
                $262 = ___shgetc($0) | 0; //@line 6204
               }
               if (!(HEAP8[$4 + ($262 + 1) >> 0] | 0)) {
                $$4282 = 0; //@line 6211
                $$4309 = 0; //@line 6211
                $$5299 = 0; //@line 6211
                $322 = 0; //@line 6211
                break L78;
               }
              }
             } else {
              $$3281 = 0; //@line 6216
             }
             while (1) {
              $239 = HEAP32[$13 >> 2] | 0; //@line 6219
              if ($239 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
               HEAP32[$13 >> 2] = $239 + 1; //@line 6224
               $247 = HEAPU8[$239 >> 0] | 0; //@line 6227
              } else {
               $247 = ___shgetc($0) | 0; //@line 6230
              }
              if (!(HEAP8[$4 + ($247 + 1) >> 0] | 0)) {
               $$4282 = $$3281; //@line 6237
               $$4309 = $$0293; //@line 6237
               $$5299 = 0; //@line 6237
               $322 = 0; //@line 6237
               break L78;
              }
              HEAP8[$$0293 + $$3281 >> 0] = $247; //@line 6243
              $$3281 = $$3281 + 1 | 0; //@line 6244
             }
            }
           } while (0);
           if (!(HEAP32[$14 >> 2] | 0)) {
            $274 = HEAP32[$13 >> 2] | 0; //@line 6252
           } else {
            $269 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6255
            HEAP32[$13 >> 2] = $269; //@line 6256
            $274 = $269; //@line 6258
           }
           $275 = $274 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0; //@line 6263
           if (!$275) {
            $$2 = $$0270; //@line 6266
            $$2290 = $$0288404; //@line 6266
            $$9314 = $$4309; //@line 6266
            $312 = $322; //@line 6266
            break L6;
           }
           if (!(($275 | 0) == ($$1267 | 0) | $158 ^ 1)) {
            $$2 = $$0270; //@line 6273
            $$2290 = $$0288404; //@line 6273
            $$9314 = $$4309; //@line 6273
            $312 = $322; //@line 6273
            break L6;
           }
           do {
            if ($188) {
             if ($187) {
              HEAP32[$$0293 >> 2] = $$5299; //@line 6279
              break;
             } else {
              HEAP32[$$0293 >> 2] = $$4309; //@line 6282
              break;
             }
            }
           } while (0);
           if ($158) {
            $$10 = $$9; //@line 6288
            $$5310 = $$4309; //@line 6288
            $320 = $322; //@line 6288
           } else {
            if ($$5299 | 0) {
             HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0; //@line 6293
            }
            if (!$$4309) {
             $$10 = $$9; //@line 6297
             $$5310 = 0; //@line 6297
             $320 = $322; //@line 6297
             break L58;
            }
            HEAP8[$$4309 + $$4282 >> 0] = 0; //@line 6301
            $$10 = $$9; //@line 6302
            $$5310 = $$4309; //@line 6302
            $320 = $322; //@line 6302
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $$0272 = 16; //@line 6307
           label = 124; //@line 6308
           break;
          }
         case 111:
          {
           $$0272 = 8; //@line 6312
           label = 124; //@line 6313
           break;
          }
         case 117:
         case 100:
          {
           $$0272 = 10; //@line 6317
           label = 124; //@line 6318
           break;
          }
         case 105:
          {
           $$0272 = 0; //@line 6322
           label = 124; //@line 6323
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $292 = +___floatscan($0, $$$0268, 0); //@line 6327
           if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
            $$2 = $$0270; //@line 6334
            $$2290 = $$0288404; //@line 6334
            $$9314 = $$1306; //@line 6334
            $312 = $318; //@line 6334
            break L6;
           }
           if (!$$0293) {
            $$10 = $$5; //@line 6339
            $$5310 = $$1306; //@line 6339
            $320 = $318; //@line 6339
           } else {
            switch ($$$0268 | 0) {
            case 0:
             {
              HEAPF32[$$0293 >> 2] = $292; //@line 6344
              $$10 = $$5; //@line 6345
              $$5310 = $$1306; //@line 6345
              $320 = $318; //@line 6345
              break L58;
              break;
             }
            case 1:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6350
              $$10 = $$5; //@line 6351
              $$5310 = $$1306; //@line 6351
              $320 = $318; //@line 6351
              break L58;
              break;
             }
            case 2:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6356
              $$10 = $$5; //@line 6357
              $$5310 = $$1306; //@line 6357
              $320 = $318; //@line 6357
              break L58;
              break;
             }
            default:
             {
              $$10 = $$5; //@line 6362
              $$5310 = $$1306; //@line 6362
              $320 = $318; //@line 6362
              break L58;
             }
            }
           }
           break;
          }
         default:
          {
           $$10 = $$5; //@line 6370
           $$5310 = $$1306; //@line 6370
           $320 = $318; //@line 6370
          }
         }
        } while (0);
        do {
         if ((label | 0) == 124) {
          label = 0; //@line 6376
          $282 = ___intscan($0, $$0272, 0, -1, -1) | 0; //@line 6377
          if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
           $$2 = $$0270; //@line 6385
           $$2290 = $$0288404; //@line 6385
           $$9314 = $$1306; //@line 6385
           $312 = $318; //@line 6385
           break L6;
          }
          if (($$0293 | 0) != 0 & ($$ | 0) == 112) {
           HEAP32[$$0293 >> 2] = $282; //@line 6393
           $$10 = $$5; //@line 6394
           $$5310 = $$1306; //@line 6394
           $320 = $318; //@line 6394
           break;
          } else {
           _store_int_728($$0293, $$$0268, $282, tempRet0); //@line 6397
           $$10 = $$5; //@line 6398
           $$5310 = $$1306; //@line 6398
           $320 = $318; //@line 6398
           break;
          }
         }
        } while (0);
        $$11 = $$10; //@line 6412
        $$1289 = $$0288404 + (($$0293 | 0) != 0 & 1) | 0; //@line 6412
        $$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0; //@line 6412
        $$6311 = $$5310; //@line 6412
        $316 = $320; //@line 6412
        break L8;
       }
      } while (0);
      $54 = $$0273408 + ($50 & 1) | 0; //@line 6417
      ___shlim($0, 0); //@line 6418
      $55 = HEAP32[$13 >> 2] | 0; //@line 6419
      if ($55 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
       HEAP32[$13 >> 2] = $55 + 1; //@line 6424
       $65 = HEAPU8[$55 >> 0] | 0; //@line 6427
      } else {
       $65 = ___shgetc($0) | 0; //@line 6430
      }
      if (($65 | 0) != (HEAPU8[$54 >> 0] | 0)) {
       label = 22; //@line 6436
       break L6;
      }
      $$11 = $54; //@line 6440
      $$1289 = $$0288404; //@line 6440
      $$2285 = $$0283407 + 1 | 0; //@line 6440
      $$6311 = $$0305402; //@line 6440
      $316 = $315; //@line 6440
     } else {
      $$1274 = $$0273408; //@line 6442
      while (1) {
       $23 = $$1274 + 1 | 0; //@line 6444
       if (!(_isspace(HEAPU8[$23 >> 0] | 0) | 0)) {
        break;
       } else {
        $$1274 = $23; //@line 6452
       }
      }
      ___shlim($0, 0); //@line 6455
      do {
       $28 = HEAP32[$13 >> 2] | 0; //@line 6457
       if ($28 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
        HEAP32[$13 >> 2] = $28 + 1; //@line 6462
        $35 = HEAPU8[$28 >> 0] | 0; //@line 6465
       } else {
        $35 = ___shgetc($0) | 0; //@line 6468
       }
      } while ((_isspace($35) | 0) != 0);
      if (!(HEAP32[$14 >> 2] | 0)) {
       $47 = HEAP32[$13 >> 2] | 0; //@line 6480
      } else {
       $41 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6483
       HEAP32[$13 >> 2] = $41; //@line 6484
       $47 = $41; //@line 6486
      }
      $$11 = $$1274; //@line 6493
      $$1289 = $$0288404; //@line 6493
      $$2285 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $47 - (HEAP32[$16 >> 2] | 0) | 0; //@line 6493
      $$6311 = $$0305402; //@line 6493
      $316 = $315; //@line 6493
     }
    } while (0);
    $$0273408 = $$11 + 1 | 0; //@line 6496
    $20 = HEAP8[$$0273408 >> 0] | 0; //@line 6497
    if (!($20 << 24 >> 24)) {
     $$3291 = $$1289; //@line 6500
     break L4;
    } else {
     $$0283407 = $$2285; //@line 6503
     $$0288404 = $$1289; //@line 6503
     $$0305402 = $$6311; //@line 6503
     $315 = $316; //@line 6503
    }
   }
   if ((label | 0) == 22) {
    if (HEAP32[$14 >> 2] | 0) {
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 6512
    }
    if (($$0288404 | 0) != 0 | ($65 | 0) > -1) {
     $$3291 = $$0288404; //@line 6518
     break;
    } else {
     $$1271 = 0; //@line 6521
     $$8313 = $$0305402; //@line 6521
     $317 = $315; //@line 6521
     label = 137; //@line 6522
    }
   } else if ((label | 0) == 136) {
    if (!$$0288404) {
     $$1271 = $$0270; //@line 6528
     $$8313 = $$7312; //@line 6528
     $317 = $319; //@line 6528
     label = 137; //@line 6529
    } else {
     $$2 = $$0270; //@line 6531
     $$2290 = $$0288404; //@line 6531
     $$9314 = $$7312; //@line 6531
     $312 = $319; //@line 6531
    }
   }
   if ((label | 0) == 137) {
    $$2 = $$1271; //@line 6535
    $$2290 = -1; //@line 6535
    $$9314 = $$8313; //@line 6535
    $312 = $317; //@line 6535
   }
   if (!$$2) {
    $$3291 = $$2290; //@line 6539
   } else {
    _free($$9314); //@line 6541
    _free($312); //@line 6542
    $$3291 = $$2290; //@line 6543
   }
  }
 } while (0);
 if ($314 | 0) {
  ___unlockfile($0); //@line 6549
 }
 STACKTOP = sp; //@line 6551
 return $$3291 | 0; //@line 6551
}
function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0, $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$423 = 0, $$4349493 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$pre = 0, $$pre551 = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $122 = 0, $124 = 0, $134 = 0, $136 = 0, $148 = 0, $150 = 0, $17 = 0, $172 = 0, $184 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $229 = 0, $231 = 0, $236 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $28 = 0, $289 = 0, $29 = 0, $294 = 0, $299 = 0, $302 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $320 = 0.0, $323 = 0.0, $327 = 0, $330 = 0, $354 = 0.0, $359 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond418 = 0, $or$cond424 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8368
 STACKTOP = STACKTOP + 512 | 0; //@line 8369
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 8369
 $6 = sp; //@line 8370
 $sum = $3 + $2 | 0; //@line 8371
 $7 = 0 - $sum | 0; //@line 8372
 $8 = $0 + 4 | 0; //@line 8373
 $9 = $0 + 100 | 0; //@line 8374
 $$0329 = $1; //@line 8375
 $$0396 = 0; //@line 8375
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6; //@line 8379
    break L1;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0393 = 0; //@line 8387
    $$2 = $$0329; //@line 8387
    $$2398 = $$0396; //@line 8387
    $368 = 0; //@line 8387
    $369 = 0; //@line 8387
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0; //@line 8391
  if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $10 + 1; //@line 8396
   $$0329 = HEAPU8[$10 >> 0] | 0; //@line 8399
   $$0396 = 1; //@line 8399
   continue;
  } else {
   $$0329 = ___shgetc($0) | 0; //@line 8403
   $$0396 = 1; //@line 8403
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 8408
  if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $17 + 1; //@line 8413
   $$1330$ph = HEAPU8[$17 >> 0] | 0; //@line 8416
  } else {
   $$1330$ph = ___shgetc($0) | 0; //@line 8419
  }
  if (($$1330$ph | 0) == 48) {
   $25 = 0; //@line 8423
   $26 = 0; //@line 8423
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0; //@line 8425
    $28 = tempRet0; //@line 8426
    $29 = HEAP32[$8 >> 2] | 0; //@line 8427
    if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $29 + 1; //@line 8432
     $$1330$be = HEAPU8[$29 >> 0] | 0; //@line 8435
    } else {
     $$1330$be = ___shgetc($0) | 0; //@line 8438
    }
    if (($$1330$be | 0) == 48) {
     $25 = $27; //@line 8442
     $26 = $28; //@line 8442
    } else {
     $$0393 = 1; //@line 8444
     $$2 = $$1330$be; //@line 8444
     $$2398 = 1; //@line 8444
     $368 = $27; //@line 8444
     $369 = $28; //@line 8444
     break;
    }
   }
  } else {
   $$0393 = 1; //@line 8449
   $$2 = $$1330$ph; //@line 8449
   $$2398 = $$0396; //@line 8449
   $368 = 0; //@line 8449
   $369 = 0; //@line 8449
  }
 }
 HEAP32[$6 >> 2] = 0; //@line 8452
 $37 = $$2 + -48 | 0; //@line 8453
 $39 = ($$2 | 0) == 46; //@line 8455
 L20 : do {
  if ($39 | $37 >>> 0 < 10) {
   $41 = $6 + 496 | 0; //@line 8459
   $$0341511 = 0; //@line 8460
   $$0345510 = 0; //@line 8460
   $$0401507 = 0; //@line 8460
   $$1394509 = $$0393; //@line 8460
   $$3399508 = $$2398; //@line 8460
   $$3512 = $$2; //@line 8460
   $370 = $39; //@line 8460
   $371 = $37; //@line 8460
   $372 = $368; //@line 8460
   $373 = $369; //@line 8460
   $44 = 0; //@line 8460
   $45 = 0; //@line 8460
   L22 : while (1) {
    do {
     if ($370) {
      if (!$$1394509) {
       $$2343 = $$0341511; //@line 8466
       $$2347 = $$0345510; //@line 8466
       $$2395 = 1; //@line 8466
       $$2403 = $$0401507; //@line 8466
       $$4400 = $$3399508; //@line 8466
       $374 = $44; //@line 8466
       $375 = $45; //@line 8466
       $376 = $44; //@line 8466
       $377 = $45; //@line 8466
      } else {
       break L22;
      }
     } else {
      $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0; //@line 8472
      $47 = tempRet0; //@line 8473
      $48 = ($$3512 | 0) != 48; //@line 8474
      if (($$0345510 | 0) >= 125) {
       if (!$48) {
        $$2343 = $$0341511; //@line 8477
        $$2347 = $$0345510; //@line 8477
        $$2395 = $$1394509; //@line 8477
        $$2403 = $$0401507; //@line 8477
        $$4400 = $$3399508; //@line 8477
        $374 = $372; //@line 8477
        $375 = $373; //@line 8477
        $376 = $46; //@line 8477
        $377 = $47; //@line 8477
        break;
       }
       HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1; //@line 8482
       $$2343 = $$0341511; //@line 8483
       $$2347 = $$0345510; //@line 8483
       $$2395 = $$1394509; //@line 8483
       $$2403 = $$0401507; //@line 8483
       $$4400 = $$3399508; //@line 8483
       $374 = $372; //@line 8483
       $375 = $373; //@line 8483
       $376 = $46; //@line 8483
       $377 = $47; //@line 8483
       break;
      }
      $$pre551 = $6 + ($$0345510 << 2) | 0; //@line 8488
      if (!$$0341511) {
       $$sink = $371; //@line 8490
      } else {
       $$sink = $$3512 + -48 + ((HEAP32[$$pre551 >> 2] | 0) * 10 | 0) | 0; //@line 8496
      }
      HEAP32[$$pre551 >> 2] = $$sink; //@line 8498
      $54 = $$0341511 + 1 | 0; //@line 8499
      $55 = ($54 | 0) == 9; //@line 8500
      $$2343 = $55 ? 0 : $54; //@line 8504
      $$2347 = $$0345510 + ($55 & 1) | 0; //@line 8504
      $$2395 = $$1394509; //@line 8504
      $$2403 = $48 ? $46 : $$0401507; //@line 8504
      $$4400 = 1; //@line 8504
      $374 = $372; //@line 8504
      $375 = $373; //@line 8504
      $376 = $46; //@line 8504
      $377 = $47; //@line 8504
     }
    } while (0);
    $59 = HEAP32[$8 >> 2] | 0; //@line 8507
    if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $59 + 1; //@line 8512
     $$3$be = HEAPU8[$59 >> 0] | 0; //@line 8515
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 8518
    }
    $371 = $$3$be + -48 | 0; //@line 8520
    $370 = ($$3$be | 0) == 46; //@line 8522
    if (!($370 | $371 >>> 0 < 10)) {
     $$0341$lcssa = $$2343; //@line 8527
     $$0345$lcssa = $$2347; //@line 8527
     $$0401$lcssa = $$2403; //@line 8527
     $$1394$lcssa = $$2395; //@line 8527
     $$3$lcssa = $$3$be; //@line 8527
     $$3399$lcssa = $$4400; //@line 8527
     $72 = $376; //@line 8527
     $73 = $374; //@line 8527
     $75 = $377; //@line 8527
     $76 = $375; //@line 8527
     label = 29; //@line 8528
     break L20;
    } else {
     $$0341511 = $$2343; //@line 8525
     $$0345510 = $$2347; //@line 8525
     $$0401507 = $$2403; //@line 8525
     $$1394509 = $$2395; //@line 8525
     $$3399508 = $$4400; //@line 8525
     $$3512 = $$3$be; //@line 8525
     $372 = $374; //@line 8525
     $373 = $375; //@line 8525
     $44 = $376; //@line 8525
     $45 = $377; //@line 8525
    }
   }
   $$0341463 = $$0341511; //@line 8533
   $$0345467 = $$0345510; //@line 8533
   $$0401473 = $$0401507; //@line 8533
   $378 = $44; //@line 8533
   $379 = $45; //@line 8533
   $380 = $372; //@line 8533
   $381 = $373; //@line 8533
   $382 = ($$3399508 | 0) != 0; //@line 8533
   label = 37; //@line 8534
  } else {
   $$0341$lcssa = 0; //@line 8536
   $$0345$lcssa = 0; //@line 8536
   $$0401$lcssa = 0; //@line 8536
   $$1394$lcssa = $$0393; //@line 8536
   $$3$lcssa = $$2; //@line 8536
   $$3399$lcssa = $$2398; //@line 8536
   $72 = 0; //@line 8536
   $73 = $368; //@line 8536
   $75 = 0; //@line 8536
   $76 = $369; //@line 8536
   label = 29; //@line 8537
  }
 } while (0);
 do {
  if ((label | 0) == 29) {
   $70 = ($$1394$lcssa | 0) == 0; //@line 8542
   $71 = $70 ? $72 : $73; //@line 8543
   $74 = $70 ? $75 : $76; //@line 8544
   $77 = ($$3399$lcssa | 0) != 0; //@line 8545
   if (!($77 & ($$3$lcssa | 32 | 0) == 101)) {
    if (($$3$lcssa | 0) > -1) {
     $$0341463 = $$0341$lcssa; //@line 8552
     $$0345467 = $$0345$lcssa; //@line 8552
     $$0401473 = $$0401$lcssa; //@line 8552
     $378 = $72; //@line 8552
     $379 = $75; //@line 8552
     $380 = $71; //@line 8552
     $381 = $74; //@line 8552
     $382 = $77; //@line 8552
     label = 37; //@line 8553
     break;
    } else {
     $$0341462 = $$0341$lcssa; //@line 8556
     $$0345466 = $$0345$lcssa; //@line 8556
     $$0401472 = $$0401$lcssa; //@line 8556
     $383 = $72; //@line 8556
     $384 = $75; //@line 8556
     $385 = $77; //@line 8556
     $386 = $71; //@line 8556
     $387 = $74; //@line 8556
     label = 39; //@line 8557
     break;
    }
   }
   $80 = _scanexp($0, $5) | 0; //@line 8561
   $81 = tempRet0; //@line 8562
   if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
    if (!$5) {
     ___shlim($0, 0); //@line 8569
     $$1 = 0.0; //@line 8570
     break;
    }
    if (!(HEAP32[$9 >> 2] | 0)) {
     $90 = 0; //@line 8576
     $91 = 0; //@line 8576
    } else {
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8580
     $90 = 0; //@line 8581
     $91 = 0; //@line 8581
    }
   } else {
    $90 = $80; //@line 8584
    $91 = $81; //@line 8584
   }
   $92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0; //@line 8586
   $$0341461 = $$0341$lcssa; //@line 8588
   $$0345465 = $$0345$lcssa; //@line 8588
   $$0401471 = $$0401$lcssa; //@line 8588
   $105 = $92; //@line 8588
   $106 = $72; //@line 8588
   $108 = tempRet0; //@line 8588
   $109 = $75; //@line 8588
   label = 41; //@line 8589
  }
 } while (0);
 if ((label | 0) == 37) {
  if (!(HEAP32[$9 >> 2] | 0)) {
   $$0341462 = $$0341463; //@line 8596
   $$0345466 = $$0345467; //@line 8596
   $$0401472 = $$0401473; //@line 8596
   $383 = $378; //@line 8596
   $384 = $379; //@line 8596
   $385 = $382; //@line 8596
   $386 = $380; //@line 8596
   $387 = $381; //@line 8596
   label = 39; //@line 8597
  } else {
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8601
   if ($382) {
    $$0341461 = $$0341463; //@line 8603
    $$0345465 = $$0345467; //@line 8603
    $$0401471 = $$0401473; //@line 8603
    $105 = $380; //@line 8603
    $106 = $378; //@line 8603
    $108 = $381; //@line 8603
    $109 = $379; //@line 8603
    label = 41; //@line 8604
   } else {
    label = 40; //@line 8606
   }
  }
 }
 if ((label | 0) == 39) {
  if ($385) {
   $$0341461 = $$0341462; //@line 8612
   $$0345465 = $$0345466; //@line 8612
   $$0401471 = $$0401472; //@line 8612
   $105 = $386; //@line 8612
   $106 = $383; //@line 8612
   $108 = $387; //@line 8612
   $109 = $384; //@line 8612
   label = 41; //@line 8613
  } else {
   label = 40; //@line 8615
  }
 }
 do {
  if ((label | 0) == 40) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 8621
   ___shlim($0, 0); //@line 8622
   $$1 = 0.0; //@line 8623
  } else if ((label | 0) == 41) {
   $100 = HEAP32[$6 >> 2] | 0; //@line 8626
   if (!$100) {
    $$1 = +($4 | 0) * 0.0; //@line 8631
    break;
   }
   if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($105 | 0) == ($106 | 0) & ($108 | 0) == ($109 | 0))) {
    if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
     $$1 = +($4 | 0) * +($100 >>> 0); //@line 8652
     break;
    }
   }
   $122 = ($3 | 0) / -2 | 0; //@line 8656
   $124 = (($122 | 0) < 0) << 31 >> 31; //@line 8658
   if (($108 | 0) > ($124 | 0) | ($108 | 0) == ($124 | 0) & $105 >>> 0 > $122 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8666
    $$1 = +($4 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8670
    break;
   }
   $134 = $3 + -106 | 0; //@line 8673
   $136 = (($134 | 0) < 0) << 31 >> 31; //@line 8675
   if (($108 | 0) < ($136 | 0) | ($108 | 0) == ($136 | 0) & $105 >>> 0 < $134 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8683
    $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8687
    break;
   }
   if (!$$0341461) {
    $$3348 = $$0345465; //@line 8692
   } else {
    if (($$0341461 | 0) < 9) {
     $148 = $6 + ($$0345465 << 2) | 0; //@line 8696
     $$3344501 = $$0341461; //@line 8698
     $150 = HEAP32[$148 >> 2] | 0; //@line 8698
     while (1) {
      $150 = $150 * 10 | 0; //@line 8700
      if (($$3344501 | 0) >= 8) {
       break;
      } else {
       $$3344501 = $$3344501 + 1 | 0; //@line 8704
      }
     }
     HEAP32[$148 >> 2] = $150; //@line 8709
    }
    $$3348 = $$0345465 + 1 | 0; //@line 8712
   }
   if (($$0401471 | 0) < 9) {
    if (($$0401471 | 0) <= ($105 | 0) & ($105 | 0) < 18) {
     if (($105 | 0) == 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0); //@line 8726
      break;
     }
     if (($105 | 0) < 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[1456 + (8 - $105 << 2) >> 2] | 0); //@line 8740
      break;
     }
     $172 = $2 + 27 + (Math_imul($105, -3) | 0) | 0; //@line 8745
     $$pre = HEAP32[$6 >> 2] | 0; //@line 8747
     if (($172 | 0) > 30 | ($$pre >>> $172 | 0) == 0) {
      $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[1456 + ($105 + -10 << 2) >> 2] | 0); //@line 8760
      break;
     }
    }
   }
   $184 = ($105 | 0) % 9 | 0; //@line 8765
   if (!$184) {
    $$0380$ph = 0; //@line 8768
    $$1373$ph446 = $$3348; //@line 8768
    $$2352$ph447 = 0; //@line 8768
    $$2387$ph445 = $105; //@line 8768
   } else {
    $188 = ($105 | 0) > -1 ? $184 : $184 + 9 | 0; //@line 8772
    $191 = HEAP32[1456 + (8 - $188 << 2) >> 2] | 0; //@line 8775
    if (!$$3348) {
     $$0350$lcssa553 = 0; //@line 8778
     $$0372 = 0; //@line 8778
     $$0385$lcssa552 = $105; //@line 8778
    } else {
     $193 = 1e9 / ($191 | 0) | 0; //@line 8780
     $$0340494 = 0; //@line 8781
     $$0350492 = 0; //@line 8781
     $$0385491 = $105; //@line 8781
     $$4349493 = 0; //@line 8781
     do {
      $194 = $6 + ($$4349493 << 2) | 0; //@line 8783
      $195 = HEAP32[$194 >> 2] | 0; //@line 8784
      $198 = (($195 >>> 0) / ($191 >>> 0) | 0) + $$0340494 | 0; //@line 8787
      HEAP32[$194 >> 2] = $198; //@line 8788
      $$0340494 = Math_imul($193, ($195 >>> 0) % ($191 >>> 0) | 0) | 0; //@line 8789
      $or$cond418 = ($$4349493 | 0) == ($$0350492 | 0) & ($198 | 0) == 0; //@line 8792
      $$0385491 = $or$cond418 ? $$0385491 + -9 | 0 : $$0385491; //@line 8796
      $$0350492 = $or$cond418 ? $$0350492 + 1 & 127 : $$0350492; //@line 8797
      $$4349493 = $$4349493 + 1 | 0; //@line 8798
     } while (($$4349493 | 0) != ($$3348 | 0));
     if (!$$0340494) {
      $$0350$lcssa553 = $$0350492; //@line 8808
      $$0372 = $$3348; //@line 8808
      $$0385$lcssa552 = $$0385491; //@line 8808
     } else {
      HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340494; //@line 8812
      $$0350$lcssa553 = $$0350492; //@line 8813
      $$0372 = $$3348 + 1 | 0; //@line 8813
      $$0385$lcssa552 = $$0385491; //@line 8813
     }
    }
    $$0380$ph = 0; //@line 8818
    $$1373$ph446 = $$0372; //@line 8818
    $$2352$ph447 = $$0350$lcssa553; //@line 8818
    $$2387$ph445 = 9 - $188 + $$0385$lcssa552 | 0; //@line 8818
   }
   L101 : while (1) {
    $212 = ($$2387$ph445 | 0) < 18; //@line 8821
    $213 = ($$2387$ph445 | 0) == 18; //@line 8822
    $214 = $6 + ($$2352$ph447 << 2) | 0; //@line 8823
    $$0380 = $$0380$ph; //@line 8824
    $$1373 = $$1373$ph446; //@line 8824
    while (1) {
     if (!$212) {
      if (!$213) {
       $$1381$ph = $$0380; //@line 8828
       $$4354$ph = $$2352$ph447; //@line 8828
       $$4389$ph443 = $$2387$ph445; //@line 8828
       $$6378$ph = $$1373; //@line 8828
       break L101;
      }
      if ((HEAP32[$214 >> 2] | 0) >>> 0 >= 9007199) {
       $$1381$ph = $$0380; //@line 8834
       $$4354$ph = $$2352$ph447; //@line 8834
       $$4389$ph443 = 18; //@line 8834
       $$6378$ph = $$1373; //@line 8834
       break L101;
      }
     }
     $$0334 = 0; //@line 8839
     $$2374 = $$1373; //@line 8839
     $$5$in = $$1373 + 127 | 0; //@line 8839
     while (1) {
      $$5 = $$5$in & 127; //@line 8841
      $218 = $6 + ($$5 << 2) | 0; //@line 8842
      $220 = _bitshift64Shl(HEAP32[$218 >> 2] | 0, 0, 29) | 0; //@line 8844
      $222 = _i64Add($220 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0; //@line 8846
      $223 = tempRet0; //@line 8847
      if ($223 >>> 0 > 0 | ($223 | 0) == 0 & $222 >>> 0 > 1e9) {
       $229 = ___udivdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8854
       $231 = ___uremdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8856
       $$1335 = $229; //@line 8858
       $$sink419$off0 = $231; //@line 8858
      } else {
       $$1335 = 0; //@line 8860
       $$sink419$off0 = $222; //@line 8860
      }
      HEAP32[$218 >> 2] = $$sink419$off0; //@line 8862
      $236 = ($$5 | 0) == ($$2352$ph447 | 0); //@line 8866
      $$2374 = ($$sink419$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $236) ^ 1) ? $$5 : $$2374; //@line 8871
      if ($236) {
       break;
      } else {
       $$0334 = $$1335; //@line 8876
       $$5$in = $$5 + -1 | 0; //@line 8876
      }
     }
     $$0380 = $$0380 + -29 | 0; //@line 8879
     if ($$1335 | 0) {
      break;
     } else {
      $$1373 = $$2374; //@line 8882
     }
    }
    $243 = $$2352$ph447 + 127 & 127; //@line 8889
    $246 = $$2374 + 127 & 127; //@line 8892
    $249 = $6 + (($$2374 + 126 & 127) << 2) | 0; //@line 8895
    if (($243 | 0) == ($$2374 | 0)) {
     HEAP32[$249 >> 2] = HEAP32[$249 >> 2] | HEAP32[$6 + ($246 << 2) >> 2]; //@line 8901
     $$4376 = $246; //@line 8902
    } else {
     $$4376 = $$2374; //@line 8904
    }
    HEAP32[$6 + ($243 << 2) >> 2] = $$1335; //@line 8907
    $$0380$ph = $$0380; //@line 8908
    $$1373$ph446 = $$4376; //@line 8908
    $$2352$ph447 = $243; //@line 8908
    $$2387$ph445 = $$2387$ph445 + 9 | 0; //@line 8908
   }
   L119 : while (1) {
    $289 = $$6378$ph + 1 & 127; //@line 8912
    $294 = $6 + (($$6378$ph + 127 & 127) << 2) | 0; //@line 8915
    $$1381$ph557 = $$1381$ph; //@line 8916
    $$4354$ph558 = $$4354$ph; //@line 8916
    $$4389$ph = $$4389$ph443; //@line 8916
    while (1) {
     $267 = ($$4389$ph | 0) == 18; //@line 8918
     $$423 = ($$4389$ph | 0) > 27 ? 9 : 1; //@line 8920
     $$1381 = $$1381$ph557; //@line 8921
     $$4354 = $$4354$ph558; //@line 8921
     while (1) {
      $$0336484 = 0; //@line 8923
      while (1) {
       $256 = $$0336484 + $$4354 & 127; //@line 8926
       if (($256 | 0) == ($$6378$ph | 0)) {
        $$1337 = 2; //@line 8929
        label = 88; //@line 8930
        break;
       }
       $259 = HEAP32[$6 + ($256 << 2) >> 2] | 0; //@line 8934
       $261 = HEAP32[1488 + ($$0336484 << 2) >> 2] | 0; //@line 8936
       if ($259 >>> 0 < $261 >>> 0) {
        $$1337 = 2; //@line 8939
        label = 88; //@line 8940
        break;
       }
       if ($259 >>> 0 > $261 >>> 0) {
        break;
       }
       $264 = $$0336484 + 1 | 0; //@line 8947
       if (($$0336484 | 0) < 1) {
        $$0336484 = $264; //@line 8950
       } else {
        $$1337 = $264; //@line 8952
        label = 88; //@line 8953
        break;
       }
      }
      if ((label | 0) == 88) {
       label = 0; //@line 8958
       if ($267 & ($$1337 | 0) == 2) {
        $$0365482 = 0.0; //@line 8962
        $$4483 = 0; //@line 8962
        $$9481 = $$6378$ph; //@line 8962
        break L119;
       }
      }
      $268 = $$423 + $$1381 | 0; //@line 8966
      if (($$4354 | 0) == ($$6378$ph | 0)) {
       $$1381 = $268; //@line 8969
       $$4354 = $$6378$ph; //@line 8969
      } else {
       break;
      }
     }
     $271 = (1 << $$423) + -1 | 0; //@line 8975
     $272 = 1e9 >>> $$423; //@line 8976
     $$0332488 = 0; //@line 8977
     $$5355486 = $$4354; //@line 8977
     $$5390485 = $$4389$ph; //@line 8977
     $$6487 = $$4354; //@line 8977
     do {
      $273 = $6 + ($$6487 << 2) | 0; //@line 8979
      $274 = HEAP32[$273 >> 2] | 0; //@line 8980
      $277 = ($274 >>> $$423) + $$0332488 | 0; //@line 8983
      HEAP32[$273 >> 2] = $277; //@line 8984
      $$0332488 = Math_imul($274 & $271, $272) | 0; //@line 8985
      $or$cond424 = ($$6487 | 0) == ($$5355486 | 0) & ($277 | 0) == 0; //@line 8988
      $$5390485 = $or$cond424 ? $$5390485 + -9 | 0 : $$5390485; //@line 8992
      $$5355486 = $or$cond424 ? $$5355486 + 1 & 127 : $$5355486; //@line 8993
      $$6487 = $$6487 + 1 & 127; //@line 8995
     } while (($$6487 | 0) != ($$6378$ph | 0));
     if (!$$0332488) {
      $$1381$ph557 = $268; //@line 9005
      $$4354$ph558 = $$5355486; //@line 9005
      $$4389$ph = $$5390485; //@line 9005
      continue;
     }
     if (($289 | 0) != ($$5355486 | 0)) {
      break;
     }
     HEAP32[$294 >> 2] = HEAP32[$294 >> 2] | 1; //@line 9014
     $$1381$ph557 = $268; //@line 9015
     $$4354$ph558 = $$5355486; //@line 9015
     $$4389$ph = $$5390485; //@line 9015
    }
    HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332488; //@line 9018
    $$1381$ph = $268; //@line 9019
    $$4354$ph = $$5355486; //@line 9019
    $$4389$ph443 = $$5390485; //@line 9019
    $$6378$ph = $289; //@line 9019
   }
   while (1) {
    $299 = $$4483 + $$4354 & 127; //@line 9023
    $302 = $$9481 + 1 & 127; //@line 9026
    if (($299 | 0) == ($$9481 | 0)) {
     HEAP32[$6 + ($302 + -1 << 2) >> 2] = 0; //@line 9030
     $$10 = $302; //@line 9031
    } else {
     $$10 = $$9481; //@line 9033
    }
    $$0365482 = $$0365482 * 1.0e9 + +((HEAP32[$6 + ($299 << 2) >> 2] | 0) >>> 0); //@line 9039
    $$4483 = $$4483 + 1 | 0; //@line 9040
    if (($$4483 | 0) == 2) {
     break;
    } else {
     $$9481 = $$10; //@line 9045
    }
   }
   $311 = +($4 | 0); //@line 9048
   $312 = $$0365482 * $311; //@line 9049
   $313 = $$1381 + 53 | 0; //@line 9050
   $314 = $313 - $3 | 0; //@line 9051
   $315 = ($314 | 0) < ($2 | 0); //@line 9052
   $$0333 = $315 ? ($314 | 0) > 0 ? $314 : 0 : $2; //@line 9055
   if (($$0333 | 0) < 53) {
    $320 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $312); //@line 9060
    $323 = +_fmodl($312, +_scalbn(1.0, 53 - $$0333 | 0)); //@line 9063
    $$0360 = $320; //@line 9066
    $$0361 = $323; //@line 9066
    $$1366 = $320 + ($312 - $323); //@line 9066
   } else {
    $$0360 = 0.0; //@line 9068
    $$0361 = 0.0; //@line 9068
    $$1366 = $312; //@line 9068
   }
   $327 = $$4354 + 2 & 127; //@line 9071
   if (($327 | 0) == ($$10 | 0)) {
    $$3364 = $$0361; //@line 9074
   } else {
    $330 = HEAP32[$6 + ($327 << 2) >> 2] | 0; //@line 9077
    do {
     if ($330 >>> 0 < 5e8) {
      if (!$330) {
       if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
        $$1362 = $$0361; //@line 9087
        break;
       }
      }
      $$1362 = $311 * .25 + $$0361; //@line 9093
     } else {
      if (($330 | 0) != 5e8) {
       $$1362 = $311 * .75 + $$0361; //@line 9099
       break;
      }
      if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
       $$1362 = $311 * .5 + $$0361; //@line 9108
       break;
      } else {
       $$1362 = $311 * .75 + $$0361; //@line 9113
       break;
      }
     }
    } while (0);
    if ((53 - $$0333 | 0) > 1) {
     if (+_fmodl($$1362, 1.0) != 0.0) {
      $$3364 = $$1362; //@line 9124
     } else {
      $$3364 = $$1362 + 1.0; //@line 9127
     }
    } else {
     $$3364 = $$1362; //@line 9130
    }
   }
   $354 = $$1366 + $$3364 - $$0360; //@line 9134
   do {
    if (($313 & 2147483647 | 0) > (-2 - $sum | 0)) {
     $359 = !(+Math_abs(+$354) >= 9007199254740992.0); //@line 9141
     $$3383 = $$1381 + (($359 ^ 1) & 1) | 0; //@line 9145
     $$2367 = $359 ? $354 : $354 * .5; //@line 9146
     if (($$3383 + 50 | 0) <= ($7 | 0)) {
      if (!($$3364 != 0.0 & ($315 & (($$0333 | 0) != ($314 | 0) | $359)))) {
       $$3368 = $$2367; //@line 9156
       $$4384 = $$3383; //@line 9156
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 9161
     $$3368 = $$2367; //@line 9162
     $$4384 = $$3383; //@line 9162
    } else {
     $$3368 = $354; //@line 9164
     $$4384 = $$1381; //@line 9164
    }
   } while (0);
   $$1 = +_scalbnl($$3368, $$4384); //@line 9168
  }
 } while (0);
 STACKTOP = sp; //@line 9171
 return +$$1;
}
function __ZL29nsapi_dns_query_async_timeoutv() {
 var $$02972 = 0, $$03071 = 0, $$131 = 0, $$sroa_idx5$i$i = 0, $$sroa_idx5$i$i43 = 0, $0 = 0, $1 = 0, $10 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $13 = 0, $136 = 0, $139 = 0, $14 = 0, $165 = 0, $168 = 0, $19 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $200 = 0, $201 = 0, $205 = 0, $232 = 0, $233 = 0, $234 = 0, $260 = 0, $263 = 0, $289 = 0, $292 = 0, $3 = 0, $322 = 0, $323 = 0, $327 = 0, $331 = 0, $332 = 0, $334 = 0, $338 = 0, $343 = 0, $346 = 0, $349 = 0, $352 = 0, $4 = 0, $5 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7994
 STACKTOP = STACKTOP + 96 | 0; //@line 7995
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 7995
 $0 = sp + 80 | 0; //@line 7996
 $1 = sp + 64 | 0; //@line 7997
 $2 = sp + 48 | 0; //@line 7998
 $3 = sp + 32 | 0; //@line 7999
 $4 = sp + 16 | 0; //@line 8000
 $5 = sp; //@line 8001
 $6 = $2 + 12 | 0; //@line 8002
 $7 = $3 + 8 | 0; //@line 8003
 $$sroa_idx5$i$i43 = $3 + 4 | 0; //@line 8004
 $8 = $3 + 12 | 0; //@line 8005
 $9 = $0 + 12 | 0; //@line 8006
 $10 = $1 + 8 | 0; //@line 8007
 $$sroa_idx5$i$i = $1 + 4 | 0; //@line 8008
 $11 = $1 + 12 | 0; //@line 8009
 $$02972 = 0; //@line 8010
 $$03071 = 0; //@line 8010
 L1 : while (1) {
  $13 = 6740 + ($$02972 << 2) | 0; //@line 8012
  $14 = HEAP32[$13 >> 2] | 0; //@line 8013
  do {
   if (!$14) {
    $$131 = $$03071; //@line 8017
   } else {
    if ((HEAP32[$14 + 88 >> 2] | 0) == 2) {
     $19 = HEAP32[$14 >> 2] | 0; //@line 8023
     $AsyncCtx35 = _emscripten_alloc_async_context(100, sp) | 0; //@line 8024
     __ZL28nsapi_dns_query_async_deletei($19); //@line 8025
     if (___async) {
      label = 6; //@line 8028
      break L1;
     }
     _emscripten_free_async_context($AsyncCtx35 | 0); //@line 8031
     $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 8032
     __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 8033
     if (___async) {
      label = 8; //@line 8036
      break L1;
     }
     _emscripten_free_async_context($AsyncCtx38 | 0); //@line 8039
     $$131 = $$03071; //@line 8040
     break;
    }
    $68 = $14 + 72 | 0; //@line 8043
    $69 = HEAP32[$68 >> 2] | 0; //@line 8044
    if ($69 >>> 0 > 100) {
     HEAP32[$68 >> 2] = $69 + -100; //@line 8048
    } else {
     if ((HEAP32[$14 + 4 >> 2] | 0) == -3019) {
      HEAP32[$14 + 76 >> 2] = 0; //@line 8055
      $76 = $14 + 44 | 0; //@line 8056
      $77 = HEAP32[$76 >> 2] | 0; //@line 8057
      if (!$77) {
       $108 = 0; //@line 8060
       $110 = $14; //@line 8060
      } else {
       $81 = HEAP32[$77 + 4 >> 2] | 0; //@line 8064
       $AsyncCtx = _emscripten_alloc_async_context(108, sp) | 0; //@line 8065
       FUNCTION_TABLE_vii[$81 & 7]($0, $14 + 32 | 0); //@line 8066
       if (___async) {
        label = 15; //@line 8069
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 8072
       $108 = HEAP32[$76 >> 2] | 0; //@line 8075
       $110 = HEAP32[$13 >> 2] | 0; //@line 8075
      }
      HEAP32[$9 >> 2] = $108; //@line 8077
      $109 = HEAP32[$110 >> 2] | 0; //@line 8078
      HEAP32[$10 >> 2] = 0; //@line 8079
      HEAP32[$1 >> 2] = 175; //@line 8080
      HEAP32[$$sroa_idx5$i$i >> 2] = $109; //@line 8081
      HEAP32[$11 >> 2] = 724; //@line 8082
      $AsyncCtx47 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8083
      __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, 0, $1) | 0; //@line 8084
      if (___async) {
       label = 18; //@line 8087
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx47 | 0); //@line 8090
      $136 = HEAP32[$11 >> 2] | 0; //@line 8091
      if ($136 | 0) {
       $139 = HEAP32[$136 + 8 >> 2] | 0; //@line 8095
       $AsyncCtx3 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8096
       FUNCTION_TABLE_vi[$139 & 511]($1); //@line 8097
       if (___async) {
        label = 21; //@line 8100
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8103
      }
      $165 = HEAP32[$9 >> 2] | 0; //@line 8105
      if ($165 | 0) {
       $168 = HEAP32[$165 + 8 >> 2] | 0; //@line 8109
       $AsyncCtx7 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8110
       FUNCTION_TABLE_vi[$168 & 511]($0); //@line 8111
       if (___async) {
        label = 25; //@line 8114
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8117
      }
     }
    }
    $194 = HEAP32[$13 >> 2] | 0; //@line 8121
    $195 = $194 + 76 | 0; //@line 8122
    $196 = HEAP32[$195 >> 2] | 0; //@line 8123
    do {
     if ($196 | 0) {
      if ($196 >>> 0 > 100) {
       HEAP32[$195 >> 2] = $196 + -100; //@line 8130
       break;
      }
      HEAP32[$195 >> 2] = 0; //@line 8133
      $200 = $194 + 44 | 0; //@line 8134
      $201 = HEAP32[$200 >> 2] | 0; //@line 8135
      if (!$201) {
       $232 = 0; //@line 8138
       $234 = $194; //@line 8138
      } else {
       $205 = HEAP32[$201 + 4 >> 2] | 0; //@line 8142
       $AsyncCtx11 = _emscripten_alloc_async_context(108, sp) | 0; //@line 8143
       FUNCTION_TABLE_vii[$205 & 7]($2, $194 + 32 | 0); //@line 8144
       if (___async) {
        label = 32; //@line 8147
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8150
       $232 = HEAP32[$200 >> 2] | 0; //@line 8153
       $234 = HEAP32[$13 >> 2] | 0; //@line 8153
      }
      HEAP32[$6 >> 2] = $232; //@line 8155
      $233 = HEAP32[$234 >> 2] | 0; //@line 8156
      HEAP32[$7 >> 2] = 0; //@line 8157
      HEAP32[$3 >> 2] = 180; //@line 8158
      HEAP32[$$sroa_idx5$i$i43 >> 2] = $233; //@line 8159
      HEAP32[$8 >> 2] = 724; //@line 8160
      $AsyncCtx44 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8161
      __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 0, $3) | 0; //@line 8162
      if (___async) {
       label = 35; //@line 8165
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx44 | 0); //@line 8168
      $260 = HEAP32[$8 >> 2] | 0; //@line 8169
      if ($260 | 0) {
       $263 = HEAP32[$260 + 8 >> 2] | 0; //@line 8173
       $AsyncCtx15 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8174
       FUNCTION_TABLE_vi[$263 & 511]($3); //@line 8175
       if (___async) {
        label = 38; //@line 8178
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8181
      }
      $289 = HEAP32[$6 >> 2] | 0; //@line 8183
      if ($289 | 0) {
       $292 = HEAP32[$289 + 8 >> 2] | 0; //@line 8187
       $AsyncCtx19 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8188
       FUNCTION_TABLE_vi[$292 & 511]($2); //@line 8189
       if (___async) {
        label = 42; //@line 8192
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx19 | 0); //@line 8195
      }
     }
    } while (0);
    if (!$$03071) {
     $$131 = HEAP32[$13 >> 2] | 0; //@line 8202
    } else {
     $$131 = $$03071; //@line 8204
    }
   }
  } while (0);
  if (($$02972 | 0) < 4) {
   $$02972 = $$02972 + 1 | 0; //@line 8211
   $$03071 = $$131; //@line 8211
  } else {
   label = 2; //@line 8213
   break;
  }
 }
 switch (label | 0) {
 case 2:
  {
   if (!$$131) {
    HEAP8[7620] = 0; //@line 8221
    STACKTOP = sp; //@line 8222
    return;
   }
   $322 = $$131 + 44 | 0; //@line 8224
   $323 = HEAP32[$322 >> 2] | 0; //@line 8225
   do {
    if (!$323) {
     $332 = 0; //@line 8229
    } else {
     $327 = HEAP32[$323 + 4 >> 2] | 0; //@line 8233
     $AsyncCtx23 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8234
     FUNCTION_TABLE_vii[$327 & 7]($4, $$131 + 32 | 0); //@line 8235
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 184; //@line 8238
      HEAP32[$AsyncCtx23 + 4 >> 2] = $322; //@line 8240
      HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 8242
      HEAP32[$AsyncCtx23 + 12 >> 2] = $5; //@line 8244
      sp = STACKTOP; //@line 8245
      STACKTOP = sp; //@line 8246
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 8248
      $332 = HEAP32[$322 >> 2] | 0; //@line 8250
      break;
     }
    }
   } while (0);
   $331 = $4 + 12 | 0; //@line 8255
   HEAP32[$331 >> 2] = $332; //@line 8256
   $334 = $5 + 4 | 0; //@line 8258
   HEAP32[$334 >> 2] = 0; //@line 8260
   HEAP32[$334 + 4 >> 2] = 0; //@line 8263
   HEAP32[$5 >> 2] = 3; //@line 8264
   $338 = $5 + 12 | 0; //@line 8265
   HEAP32[$338 >> 2] = 712; //@line 8266
   $AsyncCtx41 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8267
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $5) | 0; //@line 8268
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 185; //@line 8271
    HEAP32[$AsyncCtx41 + 4 >> 2] = $338; //@line 8273
    HEAP32[$AsyncCtx41 + 8 >> 2] = $331; //@line 8275
    HEAP32[$AsyncCtx41 + 12 >> 2] = $5; //@line 8277
    HEAP32[$AsyncCtx41 + 16 >> 2] = $4; //@line 8279
    sp = STACKTOP; //@line 8280
    STACKTOP = sp; //@line 8281
    return;
   }
   _emscripten_free_async_context($AsyncCtx41 | 0); //@line 8283
   $343 = HEAP32[$338 >> 2] | 0; //@line 8284
   do {
    if ($343 | 0) {
     $346 = HEAP32[$343 + 8 >> 2] | 0; //@line 8289
     $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8290
     FUNCTION_TABLE_vi[$346 & 511]($5); //@line 8291
     if (___async) {
      HEAP32[$AsyncCtx27 >> 2] = 186; //@line 8294
      HEAP32[$AsyncCtx27 + 4 >> 2] = $331; //@line 8296
      HEAP32[$AsyncCtx27 + 8 >> 2] = $4; //@line 8298
      sp = STACKTOP; //@line 8299
      STACKTOP = sp; //@line 8300
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 8302
      break;
     }
    }
   } while (0);
   $349 = HEAP32[$331 >> 2] | 0; //@line 8307
   if (!$349) {
    STACKTOP = sp; //@line 8310
    return;
   }
   $352 = HEAP32[$349 + 8 >> 2] | 0; //@line 8313
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8314
   FUNCTION_TABLE_vi[$352 & 511]($4); //@line 8315
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 187; //@line 8318
    sp = STACKTOP; //@line 8319
    STACKTOP = sp; //@line 8320
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 8322
   STACKTOP = sp; //@line 8323
   return;
  }
 case 6:
  {
   HEAP32[$AsyncCtx35 >> 2] = 172; //@line 8327
   HEAP32[$AsyncCtx35 + 4 >> 2] = $$03071; //@line 8329
   HEAP32[$AsyncCtx35 + 8 >> 2] = $$02972; //@line 8331
   HEAP32[$AsyncCtx35 + 12 >> 2] = $8; //@line 8333
   HEAP32[$AsyncCtx35 + 16 >> 2] = $4; //@line 8335
   HEAP32[$AsyncCtx35 + 20 >> 2] = $5; //@line 8337
   HEAP32[$AsyncCtx35 + 24 >> 2] = $0; //@line 8339
   HEAP32[$AsyncCtx35 + 28 >> 2] = $9; //@line 8341
   HEAP32[$AsyncCtx35 + 32 >> 2] = $10; //@line 8343
   HEAP32[$AsyncCtx35 + 36 >> 2] = $1; //@line 8345
   HEAP32[$AsyncCtx35 + 40 >> 2] = $$sroa_idx5$i$i; //@line 8347
   HEAP32[$AsyncCtx35 + 44 >> 2] = $11; //@line 8349
   HEAP32[$AsyncCtx35 + 48 >> 2] = $0; //@line 8351
   HEAP32[$AsyncCtx35 + 52 >> 2] = $1; //@line 8353
   HEAP32[$AsyncCtx35 + 56 >> 2] = $1; //@line 8355
   HEAP32[$AsyncCtx35 + 60 >> 2] = $9; //@line 8357
   HEAP32[$AsyncCtx35 + 64 >> 2] = $2; //@line 8359
   HEAP32[$AsyncCtx35 + 68 >> 2] = $6; //@line 8361
   HEAP32[$AsyncCtx35 + 72 >> 2] = $7; //@line 8363
   HEAP32[$AsyncCtx35 + 76 >> 2] = $3; //@line 8365
   HEAP32[$AsyncCtx35 + 80 >> 2] = $$sroa_idx5$i$i43; //@line 8367
   HEAP32[$AsyncCtx35 + 84 >> 2] = $2; //@line 8369
   HEAP32[$AsyncCtx35 + 88 >> 2] = $3; //@line 8371
   HEAP32[$AsyncCtx35 + 92 >> 2] = $3; //@line 8373
   HEAP32[$AsyncCtx35 + 96 >> 2] = $6; //@line 8375
   sp = STACKTOP; //@line 8376
   STACKTOP = sp; //@line 8377
   return;
  }
 case 8:
  {
   HEAP32[$AsyncCtx38 >> 2] = 173; //@line 8381
   HEAP32[$AsyncCtx38 + 4 >> 2] = $$03071; //@line 8383
   HEAP32[$AsyncCtx38 + 8 >> 2] = $$02972; //@line 8385
   HEAP32[$AsyncCtx38 + 12 >> 2] = $8; //@line 8387
   HEAP32[$AsyncCtx38 + 16 >> 2] = $4; //@line 8389
   HEAP32[$AsyncCtx38 + 20 >> 2] = $5; //@line 8391
   HEAP32[$AsyncCtx38 + 24 >> 2] = $0; //@line 8393
   HEAP32[$AsyncCtx38 + 28 >> 2] = $9; //@line 8395
   HEAP32[$AsyncCtx38 + 32 >> 2] = $10; //@line 8397
   HEAP32[$AsyncCtx38 + 36 >> 2] = $1; //@line 8399
   HEAP32[$AsyncCtx38 + 40 >> 2] = $$sroa_idx5$i$i; //@line 8401
   HEAP32[$AsyncCtx38 + 44 >> 2] = $11; //@line 8403
   HEAP32[$AsyncCtx38 + 48 >> 2] = $0; //@line 8405
   HEAP32[$AsyncCtx38 + 52 >> 2] = $1; //@line 8407
   HEAP32[$AsyncCtx38 + 56 >> 2] = $1; //@line 8409
   HEAP32[$AsyncCtx38 + 60 >> 2] = $9; //@line 8411
   HEAP32[$AsyncCtx38 + 64 >> 2] = $2; //@line 8413
   HEAP32[$AsyncCtx38 + 68 >> 2] = $6; //@line 8415
   HEAP32[$AsyncCtx38 + 72 >> 2] = $7; //@line 8417
   HEAP32[$AsyncCtx38 + 76 >> 2] = $3; //@line 8419
   HEAP32[$AsyncCtx38 + 80 >> 2] = $$sroa_idx5$i$i43; //@line 8421
   HEAP32[$AsyncCtx38 + 84 >> 2] = $2; //@line 8423
   HEAP32[$AsyncCtx38 + 88 >> 2] = $3; //@line 8425
   HEAP32[$AsyncCtx38 + 92 >> 2] = $3; //@line 8427
   HEAP32[$AsyncCtx38 + 96 >> 2] = $6; //@line 8429
   sp = STACKTOP; //@line 8430
   STACKTOP = sp; //@line 8431
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx >> 2] = 174; //@line 8435
   HEAP32[$AsyncCtx + 4 >> 2] = $$03071; //@line 8437
   HEAP32[$AsyncCtx + 8 >> 2] = $$02972; //@line 8439
   HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 8441
   HEAP32[$AsyncCtx + 16 >> 2] = $13; //@line 8443
   HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 8445
   HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 8447
   HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 8449
   HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 8451
   HEAP32[$AsyncCtx + 36 >> 2] = $10; //@line 8453
   HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 8455
   HEAP32[$AsyncCtx + 44 >> 2] = $$sroa_idx5$i$i; //@line 8457
   HEAP32[$AsyncCtx + 48 >> 2] = $11; //@line 8459
   HEAP32[$AsyncCtx + 52 >> 2] = $0; //@line 8461
   HEAP32[$AsyncCtx + 56 >> 2] = $1; //@line 8463
   HEAP32[$AsyncCtx + 60 >> 2] = $1; //@line 8465
   HEAP32[$AsyncCtx + 64 >> 2] = $9; //@line 8467
   HEAP32[$AsyncCtx + 68 >> 2] = $2; //@line 8469
   HEAP32[$AsyncCtx + 72 >> 2] = $6; //@line 8471
   HEAP32[$AsyncCtx + 76 >> 2] = $7; //@line 8473
   HEAP32[$AsyncCtx + 80 >> 2] = $3; //@line 8475
   HEAP32[$AsyncCtx + 84 >> 2] = $$sroa_idx5$i$i43; //@line 8477
   HEAP32[$AsyncCtx + 88 >> 2] = $2; //@line 8479
   HEAP32[$AsyncCtx + 92 >> 2] = $3; //@line 8481
   HEAP32[$AsyncCtx + 96 >> 2] = $3; //@line 8483
   HEAP32[$AsyncCtx + 100 >> 2] = $6; //@line 8485
   HEAP32[$AsyncCtx + 104 >> 2] = $76; //@line 8487
   sp = STACKTOP; //@line 8488
   STACKTOP = sp; //@line 8489
   return;
  }
 case 18:
  {
   HEAP32[$AsyncCtx47 >> 2] = 176; //@line 8493
   HEAP32[$AsyncCtx47 + 4 >> 2] = $$03071; //@line 8495
   HEAP32[$AsyncCtx47 + 8 >> 2] = $$02972; //@line 8497
   HEAP32[$AsyncCtx47 + 12 >> 2] = $8; //@line 8499
   HEAP32[$AsyncCtx47 + 16 >> 2] = $13; //@line 8501
   HEAP32[$AsyncCtx47 + 20 >> 2] = $4; //@line 8503
   HEAP32[$AsyncCtx47 + 24 >> 2] = $5; //@line 8505
   HEAP32[$AsyncCtx47 + 28 >> 2] = $0; //@line 8507
   HEAP32[$AsyncCtx47 + 32 >> 2] = $9; //@line 8509
   HEAP32[$AsyncCtx47 + 36 >> 2] = $10; //@line 8511
   HEAP32[$AsyncCtx47 + 40 >> 2] = $1; //@line 8513
   HEAP32[$AsyncCtx47 + 44 >> 2] = $$sroa_idx5$i$i; //@line 8515
   HEAP32[$AsyncCtx47 + 48 >> 2] = $11; //@line 8517
   HEAP32[$AsyncCtx47 + 52 >> 2] = $0; //@line 8519
   HEAP32[$AsyncCtx47 + 56 >> 2] = $1; //@line 8521
   HEAP32[$AsyncCtx47 + 60 >> 2] = $1; //@line 8523
   HEAP32[$AsyncCtx47 + 64 >> 2] = $9; //@line 8525
   HEAP32[$AsyncCtx47 + 68 >> 2] = $2; //@line 8527
   HEAP32[$AsyncCtx47 + 72 >> 2] = $6; //@line 8529
   HEAP32[$AsyncCtx47 + 76 >> 2] = $7; //@line 8531
   HEAP32[$AsyncCtx47 + 80 >> 2] = $3; //@line 8533
   HEAP32[$AsyncCtx47 + 84 >> 2] = $$sroa_idx5$i$i43; //@line 8535
   HEAP32[$AsyncCtx47 + 88 >> 2] = $2; //@line 8537
   HEAP32[$AsyncCtx47 + 92 >> 2] = $3; //@line 8539
   HEAP32[$AsyncCtx47 + 96 >> 2] = $3; //@line 8541
   HEAP32[$AsyncCtx47 + 100 >> 2] = $6; //@line 8543
   sp = STACKTOP; //@line 8544
   STACKTOP = sp; //@line 8545
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx3 >> 2] = 177; //@line 8549
   HEAP32[$AsyncCtx3 + 4 >> 2] = $$03071; //@line 8551
   HEAP32[$AsyncCtx3 + 8 >> 2] = $$02972; //@line 8553
   HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 8555
   HEAP32[$AsyncCtx3 + 16 >> 2] = $13; //@line 8557
   HEAP32[$AsyncCtx3 + 20 >> 2] = $4; //@line 8559
   HEAP32[$AsyncCtx3 + 24 >> 2] = $5; //@line 8561
   HEAP32[$AsyncCtx3 + 28 >> 2] = $0; //@line 8563
   HEAP32[$AsyncCtx3 + 32 >> 2] = $9; //@line 8565
   HEAP32[$AsyncCtx3 + 36 >> 2] = $10; //@line 8567
   HEAP32[$AsyncCtx3 + 40 >> 2] = $1; //@line 8569
   HEAP32[$AsyncCtx3 + 44 >> 2] = $$sroa_idx5$i$i; //@line 8571
   HEAP32[$AsyncCtx3 + 48 >> 2] = $11; //@line 8573
   HEAP32[$AsyncCtx3 + 52 >> 2] = $0; //@line 8575
   HEAP32[$AsyncCtx3 + 56 >> 2] = $1; //@line 8577
   HEAP32[$AsyncCtx3 + 60 >> 2] = $1; //@line 8579
   HEAP32[$AsyncCtx3 + 64 >> 2] = $9; //@line 8581
   HEAP32[$AsyncCtx3 + 68 >> 2] = $2; //@line 8583
   HEAP32[$AsyncCtx3 + 72 >> 2] = $6; //@line 8585
   HEAP32[$AsyncCtx3 + 76 >> 2] = $7; //@line 8587
   HEAP32[$AsyncCtx3 + 80 >> 2] = $3; //@line 8589
   HEAP32[$AsyncCtx3 + 84 >> 2] = $$sroa_idx5$i$i43; //@line 8591
   HEAP32[$AsyncCtx3 + 88 >> 2] = $2; //@line 8593
   HEAP32[$AsyncCtx3 + 92 >> 2] = $3; //@line 8595
   HEAP32[$AsyncCtx3 + 96 >> 2] = $3; //@line 8597
   HEAP32[$AsyncCtx3 + 100 >> 2] = $6; //@line 8599
   sp = STACKTOP; //@line 8600
   STACKTOP = sp; //@line 8601
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx7 >> 2] = 178; //@line 8605
   HEAP32[$AsyncCtx7 + 4 >> 2] = $$03071; //@line 8607
   HEAP32[$AsyncCtx7 + 8 >> 2] = $$02972; //@line 8609
   HEAP32[$AsyncCtx7 + 12 >> 2] = $8; //@line 8611
   HEAP32[$AsyncCtx7 + 16 >> 2] = $13; //@line 8613
   HEAP32[$AsyncCtx7 + 20 >> 2] = $4; //@line 8615
   HEAP32[$AsyncCtx7 + 24 >> 2] = $5; //@line 8617
   HEAP32[$AsyncCtx7 + 28 >> 2] = $0; //@line 8619
   HEAP32[$AsyncCtx7 + 32 >> 2] = $9; //@line 8621
   HEAP32[$AsyncCtx7 + 36 >> 2] = $10; //@line 8623
   HEAP32[$AsyncCtx7 + 40 >> 2] = $1; //@line 8625
   HEAP32[$AsyncCtx7 + 44 >> 2] = $$sroa_idx5$i$i; //@line 8627
   HEAP32[$AsyncCtx7 + 48 >> 2] = $11; //@line 8629
   HEAP32[$AsyncCtx7 + 52 >> 2] = $0; //@line 8631
   HEAP32[$AsyncCtx7 + 56 >> 2] = $1; //@line 8633
   HEAP32[$AsyncCtx7 + 60 >> 2] = $1; //@line 8635
   HEAP32[$AsyncCtx7 + 64 >> 2] = $9; //@line 8637
   HEAP32[$AsyncCtx7 + 68 >> 2] = $2; //@line 8639
   HEAP32[$AsyncCtx7 + 72 >> 2] = $6; //@line 8641
   HEAP32[$AsyncCtx7 + 76 >> 2] = $7; //@line 8643
   HEAP32[$AsyncCtx7 + 80 >> 2] = $3; //@line 8645
   HEAP32[$AsyncCtx7 + 84 >> 2] = $$sroa_idx5$i$i43; //@line 8647
   HEAP32[$AsyncCtx7 + 88 >> 2] = $2; //@line 8649
   HEAP32[$AsyncCtx7 + 92 >> 2] = $3; //@line 8651
   HEAP32[$AsyncCtx7 + 96 >> 2] = $3; //@line 8653
   HEAP32[$AsyncCtx7 + 100 >> 2] = $6; //@line 8655
   sp = STACKTOP; //@line 8656
   STACKTOP = sp; //@line 8657
   return;
  }
 case 32:
  {
   HEAP32[$AsyncCtx11 >> 2] = 179; //@line 8661
   HEAP32[$AsyncCtx11 + 4 >> 2] = $$03071; //@line 8663
   HEAP32[$AsyncCtx11 + 8 >> 2] = $$02972; //@line 8665
   HEAP32[$AsyncCtx11 + 12 >> 2] = $8; //@line 8667
   HEAP32[$AsyncCtx11 + 16 >> 2] = $13; //@line 8669
   HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 8671
   HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 8673
   HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 8675
   HEAP32[$AsyncCtx11 + 32 >> 2] = $9; //@line 8677
   HEAP32[$AsyncCtx11 + 36 >> 2] = $10; //@line 8679
   HEAP32[$AsyncCtx11 + 40 >> 2] = $1; //@line 8681
   HEAP32[$AsyncCtx11 + 44 >> 2] = $$sroa_idx5$i$i; //@line 8683
   HEAP32[$AsyncCtx11 + 48 >> 2] = $11; //@line 8685
   HEAP32[$AsyncCtx11 + 52 >> 2] = $0; //@line 8687
   HEAP32[$AsyncCtx11 + 56 >> 2] = $1; //@line 8689
   HEAP32[$AsyncCtx11 + 60 >> 2] = $1; //@line 8691
   HEAP32[$AsyncCtx11 + 64 >> 2] = $9; //@line 8693
   HEAP32[$AsyncCtx11 + 68 >> 2] = $2; //@line 8695
   HEAP32[$AsyncCtx11 + 72 >> 2] = $6; //@line 8697
   HEAP32[$AsyncCtx11 + 76 >> 2] = $7; //@line 8699
   HEAP32[$AsyncCtx11 + 80 >> 2] = $3; //@line 8701
   HEAP32[$AsyncCtx11 + 84 >> 2] = $$sroa_idx5$i$i43; //@line 8703
   HEAP32[$AsyncCtx11 + 88 >> 2] = $2; //@line 8705
   HEAP32[$AsyncCtx11 + 92 >> 2] = $3; //@line 8707
   HEAP32[$AsyncCtx11 + 96 >> 2] = $3; //@line 8709
   HEAP32[$AsyncCtx11 + 100 >> 2] = $6; //@line 8711
   HEAP32[$AsyncCtx11 + 104 >> 2] = $200; //@line 8713
   sp = STACKTOP; //@line 8714
   STACKTOP = sp; //@line 8715
   return;
  }
 case 35:
  {
   HEAP32[$AsyncCtx44 >> 2] = 181; //@line 8719
   HEAP32[$AsyncCtx44 + 4 >> 2] = $$03071; //@line 8721
   HEAP32[$AsyncCtx44 + 8 >> 2] = $$02972; //@line 8723
   HEAP32[$AsyncCtx44 + 12 >> 2] = $8; //@line 8725
   HEAP32[$AsyncCtx44 + 16 >> 2] = $13; //@line 8727
   HEAP32[$AsyncCtx44 + 20 >> 2] = $4; //@line 8729
   HEAP32[$AsyncCtx44 + 24 >> 2] = $5; //@line 8731
   HEAP32[$AsyncCtx44 + 28 >> 2] = $0; //@line 8733
   HEAP32[$AsyncCtx44 + 32 >> 2] = $9; //@line 8735
   HEAP32[$AsyncCtx44 + 36 >> 2] = $10; //@line 8737
   HEAP32[$AsyncCtx44 + 40 >> 2] = $1; //@line 8739
   HEAP32[$AsyncCtx44 + 44 >> 2] = $$sroa_idx5$i$i; //@line 8741
   HEAP32[$AsyncCtx44 + 48 >> 2] = $11; //@line 8743
   HEAP32[$AsyncCtx44 + 52 >> 2] = $0; //@line 8745
   HEAP32[$AsyncCtx44 + 56 >> 2] = $1; //@line 8747
   HEAP32[$AsyncCtx44 + 60 >> 2] = $1; //@line 8749
   HEAP32[$AsyncCtx44 + 64 >> 2] = $9; //@line 8751
   HEAP32[$AsyncCtx44 + 68 >> 2] = $2; //@line 8753
   HEAP32[$AsyncCtx44 + 72 >> 2] = $6; //@line 8755
   HEAP32[$AsyncCtx44 + 76 >> 2] = $7; //@line 8757
   HEAP32[$AsyncCtx44 + 80 >> 2] = $3; //@line 8759
   HEAP32[$AsyncCtx44 + 84 >> 2] = $$sroa_idx5$i$i43; //@line 8761
   HEAP32[$AsyncCtx44 + 88 >> 2] = $2; //@line 8763
   HEAP32[$AsyncCtx44 + 92 >> 2] = $3; //@line 8765
   HEAP32[$AsyncCtx44 + 96 >> 2] = $3; //@line 8767
   HEAP32[$AsyncCtx44 + 100 >> 2] = $6; //@line 8769
   sp = STACKTOP; //@line 8770
   STACKTOP = sp; //@line 8771
   return;
  }
 case 38:
  {
   HEAP32[$AsyncCtx15 >> 2] = 182; //@line 8775
   HEAP32[$AsyncCtx15 + 4 >> 2] = $$03071; //@line 8777
   HEAP32[$AsyncCtx15 + 8 >> 2] = $$02972; //@line 8779
   HEAP32[$AsyncCtx15 + 12 >> 2] = $8; //@line 8781
   HEAP32[$AsyncCtx15 + 16 >> 2] = $13; //@line 8783
   HEAP32[$AsyncCtx15 + 20 >> 2] = $4; //@line 8785
   HEAP32[$AsyncCtx15 + 24 >> 2] = $5; //@line 8787
   HEAP32[$AsyncCtx15 + 28 >> 2] = $0; //@line 8789
   HEAP32[$AsyncCtx15 + 32 >> 2] = $9; //@line 8791
   HEAP32[$AsyncCtx15 + 36 >> 2] = $10; //@line 8793
   HEAP32[$AsyncCtx15 + 40 >> 2] = $1; //@line 8795
   HEAP32[$AsyncCtx15 + 44 >> 2] = $$sroa_idx5$i$i; //@line 8797
   HEAP32[$AsyncCtx15 + 48 >> 2] = $11; //@line 8799
   HEAP32[$AsyncCtx15 + 52 >> 2] = $0; //@line 8801
   HEAP32[$AsyncCtx15 + 56 >> 2] = $1; //@line 8803
   HEAP32[$AsyncCtx15 + 60 >> 2] = $1; //@line 8805
   HEAP32[$AsyncCtx15 + 64 >> 2] = $9; //@line 8807
   HEAP32[$AsyncCtx15 + 68 >> 2] = $2; //@line 8809
   HEAP32[$AsyncCtx15 + 72 >> 2] = $6; //@line 8811
   HEAP32[$AsyncCtx15 + 76 >> 2] = $7; //@line 8813
   HEAP32[$AsyncCtx15 + 80 >> 2] = $3; //@line 8815
   HEAP32[$AsyncCtx15 + 84 >> 2] = $$sroa_idx5$i$i43; //@line 8817
   HEAP32[$AsyncCtx15 + 88 >> 2] = $2; //@line 8819
   HEAP32[$AsyncCtx15 + 92 >> 2] = $3; //@line 8821
   HEAP32[$AsyncCtx15 + 96 >> 2] = $3; //@line 8823
   HEAP32[$AsyncCtx15 + 100 >> 2] = $6; //@line 8825
   sp = STACKTOP; //@line 8826
   STACKTOP = sp; //@line 8827
   return;
  }
 case 42:
  {
   HEAP32[$AsyncCtx19 >> 2] = 183; //@line 8831
   HEAP32[$AsyncCtx19 + 4 >> 2] = $$03071; //@line 8833
   HEAP32[$AsyncCtx19 + 8 >> 2] = $$02972; //@line 8835
   HEAP32[$AsyncCtx19 + 12 >> 2] = $8; //@line 8837
   HEAP32[$AsyncCtx19 + 16 >> 2] = $13; //@line 8839
   HEAP32[$AsyncCtx19 + 20 >> 2] = $4; //@line 8841
   HEAP32[$AsyncCtx19 + 24 >> 2] = $5; //@line 8843
   HEAP32[$AsyncCtx19 + 28 >> 2] = $0; //@line 8845
   HEAP32[$AsyncCtx19 + 32 >> 2] = $9; //@line 8847
   HEAP32[$AsyncCtx19 + 36 >> 2] = $10; //@line 8849
   HEAP32[$AsyncCtx19 + 40 >> 2] = $1; //@line 8851
   HEAP32[$AsyncCtx19 + 44 >> 2] = $$sroa_idx5$i$i; //@line 8853
   HEAP32[$AsyncCtx19 + 48 >> 2] = $11; //@line 8855
   HEAP32[$AsyncCtx19 + 52 >> 2] = $0; //@line 8857
   HEAP32[$AsyncCtx19 + 56 >> 2] = $1; //@line 8859
   HEAP32[$AsyncCtx19 + 60 >> 2] = $1; //@line 8861
   HEAP32[$AsyncCtx19 + 64 >> 2] = $9; //@line 8863
   HEAP32[$AsyncCtx19 + 68 >> 2] = $2; //@line 8865
   HEAP32[$AsyncCtx19 + 72 >> 2] = $6; //@line 8867
   HEAP32[$AsyncCtx19 + 76 >> 2] = $7; //@line 8869
   HEAP32[$AsyncCtx19 + 80 >> 2] = $3; //@line 8871
   HEAP32[$AsyncCtx19 + 84 >> 2] = $$sroa_idx5$i$i43; //@line 8873
   HEAP32[$AsyncCtx19 + 88 >> 2] = $2; //@line 8875
   HEAP32[$AsyncCtx19 + 92 >> 2] = $3; //@line 8877
   HEAP32[$AsyncCtx19 + 96 >> 2] = $3; //@line 8879
   HEAP32[$AsyncCtx19 + 100 >> 2] = $6; //@line 8881
   sp = STACKTOP; //@line 8882
   STACKTOP = sp; //@line 8883
   return;
  }
 }
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11540
 STACKTOP = STACKTOP + 560 | 0; //@line 11541
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 11541
 $6 = sp + 8 | 0; //@line 11542
 $7 = sp; //@line 11543
 $8 = sp + 524 | 0; //@line 11544
 $9 = $8; //@line 11545
 $10 = sp + 512 | 0; //@line 11546
 HEAP32[$7 >> 2] = 0; //@line 11547
 $11 = $10 + 12 | 0; //@line 11548
 ___DOUBLE_BITS_677($1) | 0; //@line 11549
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 11554
  $$0520 = 1; //@line 11554
  $$0521 = 3965; //@line 11554
 } else {
  $$0471 = $1; //@line 11565
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 11565
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 3966 : 3971 : 3968; //@line 11565
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 11567
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 11576
   $31 = $$0520 + 3 | 0; //@line 11581
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 11583
   _out_670($0, $$0521, $$0520); //@line 11584
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 3992 : 3996 : $27 ? 3984 : 3988, 3); //@line 11585
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 11587
   $$sink560 = $31; //@line 11588
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 11591
   $36 = $35 != 0.0; //@line 11592
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 11596
   }
   $39 = $5 | 32; //@line 11598
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 11601
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 11604
    $44 = $$0520 | 2; //@line 11605
    $46 = 12 - $3 | 0; //@line 11607
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 11612
     } else {
      $$0509585 = 8.0; //@line 11614
      $$1508586 = $46; //@line 11614
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 11616
       $$0509585 = $$0509585 * 16.0; //@line 11617
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 11632
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 11637
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 11642
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 11645
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 11648
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 11651
     HEAP8[$68 >> 0] = 48; //@line 11652
     $$0511 = $68; //@line 11653
    } else {
     $$0511 = $66; //@line 11655
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 11662
    $76 = $$0511 + -2 | 0; //@line 11665
    HEAP8[$76 >> 0] = $5 + 15; //@line 11666
    $77 = ($3 | 0) < 1; //@line 11667
    $79 = ($4 & 8 | 0) == 0; //@line 11669
    $$0523 = $8; //@line 11670
    $$2473 = $$1472; //@line 11670
    while (1) {
     $80 = ~~$$2473; //@line 11672
     $86 = $$0523 + 1 | 0; //@line 11678
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[4e3 + $80 >> 0]; //@line 11679
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 11682
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 11691
      } else {
       HEAP8[$86 >> 0] = 46; //@line 11694
       $$1524 = $$0523 + 2 | 0; //@line 11695
      }
     } else {
      $$1524 = $86; //@line 11698
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 11702
     }
    }
    $$pre693 = $$1524; //@line 11708
    if (!$3) {
     label = 24; //@line 11710
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 11718
      $$sink = $3 + 2 | 0; //@line 11718
     } else {
      label = 24; //@line 11720
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 11724
     $$pre$phi691Z2D = $101; //@line 11725
     $$sink = $101; //@line 11725
    }
    $104 = $11 - $76 | 0; //@line 11729
    $106 = $104 + $44 + $$sink | 0; //@line 11731
    _pad_676($0, 32, $2, $106, $4); //@line 11732
    _out_670($0, $$0521$, $44); //@line 11733
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 11735
    _out_670($0, $8, $$pre$phi691Z2D); //@line 11736
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 11738
    _out_670($0, $76, $104); //@line 11739
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 11741
    $$sink560 = $106; //@line 11742
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 11746
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 11750
    HEAP32[$7 >> 2] = $113; //@line 11751
    $$3 = $35 * 268435456.0; //@line 11752
    $$pr = $113; //@line 11752
   } else {
    $$3 = $35; //@line 11755
    $$pr = HEAP32[$7 >> 2] | 0; //@line 11755
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 11759
   $$0498 = $$561; //@line 11760
   $$4 = $$3; //@line 11760
   do {
    $116 = ~~$$4 >>> 0; //@line 11762
    HEAP32[$$0498 >> 2] = $116; //@line 11763
    $$0498 = $$0498 + 4 | 0; //@line 11764
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 11767
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 11777
    $$1499662 = $$0498; //@line 11777
    $124 = $$pr; //@line 11777
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 11780
     $$0488655 = $$1499662 + -4 | 0; //@line 11781
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 11784
     } else {
      $$0488657 = $$0488655; //@line 11786
      $$0497656 = 0; //@line 11786
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 11789
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 11791
       $131 = tempRet0; //@line 11792
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11793
       HEAP32[$$0488657 >> 2] = $132; //@line 11795
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11796
       $$0488657 = $$0488657 + -4 | 0; //@line 11798
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 11808
      } else {
       $138 = $$1482663 + -4 | 0; //@line 11810
       HEAP32[$138 >> 2] = $$0497656; //@line 11811
       $$2483$ph = $138; //@line 11812
      }
     }
     $$2500 = $$1499662; //@line 11815
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 11821
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 11825
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 11831
     HEAP32[$7 >> 2] = $144; //@line 11832
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 11835
      $$1499662 = $$2500; //@line 11835
      $124 = $144; //@line 11835
     } else {
      $$1482$lcssa = $$2483$ph; //@line 11837
      $$1499$lcssa = $$2500; //@line 11837
      $$pr566 = $144; //@line 11837
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 11842
    $$1499$lcssa = $$0498; //@line 11842
    $$pr566 = $$pr; //@line 11842
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 11848
    $150 = ($39 | 0) == 102; //@line 11849
    $$3484650 = $$1482$lcssa; //@line 11850
    $$3501649 = $$1499$lcssa; //@line 11850
    $152 = $$pr566; //@line 11850
    while (1) {
     $151 = 0 - $152 | 0; //@line 11852
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 11854
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 11858
      $161 = 1e9 >>> $154; //@line 11859
      $$0487644 = 0; //@line 11860
      $$1489643 = $$3484650; //@line 11860
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 11862
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 11866
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 11867
       $$1489643 = $$1489643 + 4 | 0; //@line 11868
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11879
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 11882
       $$4502 = $$3501649; //@line 11882
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 11885
       $$$3484700 = $$$3484; //@line 11886
       $$4502 = $$3501649 + 4 | 0; //@line 11886
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11893
      $$4502 = $$3501649; //@line 11893
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 11895
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 11902
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 11904
     HEAP32[$7 >> 2] = $152; //@line 11905
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 11910
      $$3501$lcssa = $$$4502; //@line 11910
      break;
     } else {
      $$3484650 = $$$3484700; //@line 11908
      $$3501649 = $$$4502; //@line 11908
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 11915
    $$3501$lcssa = $$1499$lcssa; //@line 11915
   }
   $185 = $$561; //@line 11918
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 11923
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 11924
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 11927
    } else {
     $$0514639 = $189; //@line 11929
     $$0530638 = 10; //@line 11929
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 11931
      $193 = $$0514639 + 1 | 0; //@line 11932
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 11935
       break;
      } else {
       $$0514639 = $193; //@line 11938
      }
     }
    }
   } else {
    $$1515 = 0; //@line 11943
   }
   $198 = ($39 | 0) == 103; //@line 11948
   $199 = ($$540 | 0) != 0; //@line 11949
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 11952
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 11961
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 11964
    $213 = ($209 | 0) % 9 | 0; //@line 11965
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 11968
     $$1531632 = 10; //@line 11968
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 11971
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 11974
       $$1531632 = $215; //@line 11974
      } else {
       $$1531$lcssa = $215; //@line 11976
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 11981
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 11983
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 11984
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 11987
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 11990
     $$4518 = $$1515; //@line 11990
     $$8 = $$3484$lcssa; //@line 11990
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 11995
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 11996
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 12001
     if (!$$0520) {
      $$1467 = $$$564; //@line 12004
      $$1469 = $$543; //@line 12004
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 12007
      $$1467 = $230 ? -$$$564 : $$$564; //@line 12012
      $$1469 = $230 ? -$$543 : $$543; //@line 12012
     }
     $233 = $217 - $218 | 0; //@line 12014
     HEAP32[$212 >> 2] = $233; //@line 12015
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 12019
      HEAP32[$212 >> 2] = $236; //@line 12020
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 12023
       $$sink547625 = $212; //@line 12023
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 12025
        HEAP32[$$sink547625 >> 2] = 0; //@line 12026
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 12029
         HEAP32[$240 >> 2] = 0; //@line 12030
         $$6 = $240; //@line 12031
        } else {
         $$6 = $$5486626; //@line 12033
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 12036
        HEAP32[$238 >> 2] = $242; //@line 12037
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 12040
         $$sink547625 = $238; //@line 12040
        } else {
         $$5486$lcssa = $$6; //@line 12042
         $$sink547$lcssa = $238; //@line 12042
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 12047
       $$sink547$lcssa = $212; //@line 12047
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 12052
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 12053
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 12056
       $$4518 = $247; //@line 12056
       $$8 = $$5486$lcssa; //@line 12056
      } else {
       $$2516621 = $247; //@line 12058
       $$2532620 = 10; //@line 12058
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 12060
        $251 = $$2516621 + 1 | 0; //@line 12061
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 12064
         $$4518 = $251; //@line 12064
         $$8 = $$5486$lcssa; //@line 12064
         break;
        } else {
         $$2516621 = $251; //@line 12067
        }
       }
      }
     } else {
      $$4492 = $212; //@line 12072
      $$4518 = $$1515; //@line 12072
      $$8 = $$3484$lcssa; //@line 12072
     }
    }
    $253 = $$4492 + 4 | 0; //@line 12075
    $$5519$ph = $$4518; //@line 12078
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 12078
    $$9$ph = $$8; //@line 12078
   } else {
    $$5519$ph = $$1515; //@line 12080
    $$7505$ph = $$3501$lcssa; //@line 12080
    $$9$ph = $$3484$lcssa; //@line 12080
   }
   $$7505 = $$7505$ph; //@line 12082
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 12086
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 12089
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 12093
    } else {
     $$lcssa675 = 1; //@line 12095
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 12099
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 12104
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 12112
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 12112
     } else {
      $$0479 = $5 + -2 | 0; //@line 12116
      $$2476 = $$540$ + -1 | 0; //@line 12116
     }
     $267 = $4 & 8; //@line 12118
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 12123
       if (!$270) {
        $$2529 = 9; //@line 12126
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 12131
         $$3533616 = 10; //@line 12131
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 12133
          $275 = $$1528617 + 1 | 0; //@line 12134
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 12140
           break;
          } else {
           $$1528617 = $275; //@line 12138
          }
         }
        } else {
         $$2529 = 0; //@line 12145
        }
       }
      } else {
       $$2529 = 9; //@line 12149
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 12157
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 12159
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 12161
       $$1480 = $$0479; //@line 12164
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 12164
       $$pre$phi698Z2D = 0; //@line 12164
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 12168
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 12170
       $$1480 = $$0479; //@line 12173
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 12173
       $$pre$phi698Z2D = 0; //@line 12173
       break;
      }
     } else {
      $$1480 = $$0479; //@line 12177
      $$3477 = $$2476; //@line 12177
      $$pre$phi698Z2D = $267; //@line 12177
     }
    } else {
     $$1480 = $5; //@line 12181
     $$3477 = $$540; //@line 12181
     $$pre$phi698Z2D = $4 & 8; //@line 12181
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 12184
   $294 = ($292 | 0) != 0 & 1; //@line 12186
   $296 = ($$1480 | 32 | 0) == 102; //@line 12188
   if ($296) {
    $$2513 = 0; //@line 12192
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 12192
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 12195
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 12198
    $304 = $11; //@line 12199
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 12204
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 12206
      HEAP8[$308 >> 0] = 48; //@line 12207
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 12212
      } else {
       $$1512$lcssa = $308; //@line 12214
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 12219
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 12226
    $318 = $$1512$lcssa + -2 | 0; //@line 12228
    HEAP8[$318 >> 0] = $$1480; //@line 12229
    $$2513 = $318; //@line 12232
    $$pn = $304 - $318 | 0; //@line 12232
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 12237
   _pad_676($0, 32, $2, $323, $4); //@line 12238
   _out_670($0, $$0521, $$0520); //@line 12239
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 12241
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 12244
    $326 = $8 + 9 | 0; //@line 12245
    $327 = $326; //@line 12246
    $328 = $8 + 8 | 0; //@line 12247
    $$5493600 = $$0496$$9; //@line 12248
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 12251
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 12256
       $$1465 = $328; //@line 12257
      } else {
       $$1465 = $330; //@line 12259
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 12266
       $$0464597 = $330; //@line 12267
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 12269
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 12272
        } else {
         $$1465 = $335; //@line 12274
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 12279
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 12284
     $$5493600 = $$5493600 + 4 | 0; //@line 12285
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 4016, 1); //@line 12295
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 12301
     $$6494592 = $$5493600; //@line 12301
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 12304
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 12309
       $$0463587 = $347; //@line 12310
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 12312
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 12315
        } else {
         $$0463$lcssa = $351; //@line 12317
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 12322
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 12326
      $$6494592 = $$6494592 + 4 | 0; //@line 12327
      $356 = $$4478593 + -9 | 0; //@line 12328
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 12335
       break;
      } else {
       $$4478593 = $356; //@line 12333
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 12340
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 12343
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 12346
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 12349
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 12350
     $365 = $363; //@line 12351
     $366 = 0 - $9 | 0; //@line 12352
     $367 = $8 + 8 | 0; //@line 12353
     $$5605 = $$3477; //@line 12354
     $$7495604 = $$9$ph; //@line 12354
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 12357
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 12360
       $$0 = $367; //@line 12361
      } else {
       $$0 = $369; //@line 12363
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 12368
        _out_670($0, $$0, 1); //@line 12369
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 12373
         break;
        }
        _out_670($0, 4016, 1); //@line 12376
        $$2 = $375; //@line 12377
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 12381
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 12386
        $$1601 = $$0; //@line 12387
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 12389
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 12392
         } else {
          $$2 = $373; //@line 12394
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 12401
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 12404
      $381 = $$5605 - $378 | 0; //@line 12405
      $$7495604 = $$7495604 + 4 | 0; //@line 12406
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 12413
       break;
      } else {
       $$5605 = $381; //@line 12411
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 12418
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 12421
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 12425
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 12428
   $$sink560 = $323; //@line 12429
  }
 } while (0);
 STACKTOP = sp; //@line 12434
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 12434
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$090114$lcssa = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $$3 = 0, $$5 = 0, $$byval_copy = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $110 = 0, $12 = 0, $124 = 0, $125 = 0, $128 = 0, $142 = 0, $146 = 0, $147 = 0, $155 = 0, $158 = 0, $161 = 0, $164 = 0, $171 = 0, $173 = 0, $174 = 0, $177 = 0, $188 = 0, $189 = 0, $19 = 0, $191 = 0, $195 = 0, $196 = 0, $20 = 0, $208 = 0, $211 = 0, $222 = 0, $223 = 0, $226 = 0, $235 = 0, $237 = 0, $240 = 0, $245 = 0, $248 = 0, $255 = 0, $257 = 0, $265 = 0, $268 = 0, $27 = 0, $270 = 0, $278 = 0, $28 = 0, $281 = 0, $283 = 0, $291 = 0, $294 = 0, $296 = 0, $315 = 0, $316 = 0, $317 = 0, $33 = 0, $46 = 0, $50 = 0, $6 = 0, $63 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $8 = 0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7135
 STACKTOP = STACKTOP + 144 | 0; //@line 7136
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 7136
 $$byval_copy = sp + 116 | 0; //@line 7137
 $6 = sp + 96 | 0; //@line 7138
 $7 = sp + 32 | 0; //@line 7139
 $8 = sp + 16 | 0; //@line 7140
 $9 = sp; //@line 7141
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$5 = -3003; //@line 7146
  STACKTOP = sp; //@line 7147
  return $$5 | 0; //@line 7147
 }
 $12 = _strlen($1) | 0; //@line 7149
 if (($12 | 0) > 255 | ($12 | 0) == 0) {
  $$5 = -3003; //@line 7154
  STACKTOP = sp; //@line 7155
  return $$5 | 0; //@line 7155
 }
 L7 : do {
  if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $5, $6) | 0)) {
   HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 7161
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 7161
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 7161
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 7161
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 7161
   __ZN13SocketAddressC2E10nsapi_addrt($7, $$byval_copy, 0); //@line 7162
   $19 = $2 + 12 | 0; //@line 7163
   $20 = HEAP32[$19 >> 2] | 0; //@line 7164
   do {
    if (!$20) {
     $AsyncCtx53 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7168
     _mbed_assert_internal(2972, 2977, 1677); //@line 7169
     if (___async) {
      HEAP32[$AsyncCtx53 >> 2] = 157; //@line 7172
      HEAP32[$AsyncCtx53 + 4 >> 2] = $19; //@line 7174
      HEAP32[$AsyncCtx53 + 8 >> 2] = $2; //@line 7176
      HEAP32[$AsyncCtx53 + 12 >> 2] = $7; //@line 7178
      HEAP32[$AsyncCtx53 + 16 >> 2] = $7; //@line 7180
      HEAP32[$AsyncCtx53 + 20 >> 2] = $6; //@line 7182
      sp = STACKTOP; //@line 7183
      STACKTOP = sp; //@line 7184
      return 0; //@line 7184
     } else {
      _emscripten_free_async_context($AsyncCtx53 | 0); //@line 7186
      $28 = HEAP32[$19 >> 2] | 0; //@line 7188
      break;
     }
    } else {
     $28 = $20; //@line 7192
    }
   } while (0);
   $27 = HEAP32[$28 >> 2] | 0; //@line 7195
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7196
   FUNCTION_TABLE_viii[$27 & 0]($2, 0, $7); //@line 7197
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 158; //@line 7200
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 7202
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 7204
    sp = STACKTOP; //@line 7205
    STACKTOP = sp; //@line 7206
    return 0; //@line 7206
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7208
    $$3 = 0; //@line 7209
    break;
   }
  } else {
   if (!(HEAP32[1685] | 0)) {
    $$090114$lcssa = 0; //@line 7216
   } else {
    if (!(HEAP32[1686] | 0)) {
     $$090114$lcssa = 1; //@line 7221
    } else {
     if (!(HEAP32[1687] | 0)) {
      $$090114$lcssa = 2; //@line 7226
     } else {
      if (!(HEAP32[1688] | 0)) {
       $$090114$lcssa = 3; //@line 7231
      } else {
       if (!(HEAP32[1689] | 0)) {
        $$090114$lcssa = 4; //@line 7236
       } else {
        $$3 = -3007; //@line 7238
        break;
       }
      }
     }
    }
   }
   $AsyncCtx38 = _emscripten_alloc_async_context(48, sp) | 0; //@line 7245
   $33 = __ZnwjRKSt9nothrow_t(92, 8661) | 0; //@line 7246
   if (___async) {
    HEAP32[$AsyncCtx38 >> 2] = 159; //@line 7249
    HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 7251
    HEAP32[$AsyncCtx38 + 8 >> 2] = $$090114$lcssa; //@line 7253
    HEAP32[$AsyncCtx38 + 12 >> 2] = $4; //@line 7255
    HEAP32[$AsyncCtx38 + 16 >> 2] = $6; //@line 7257
    HEAP32[$AsyncCtx38 + 20 >> 2] = $2; //@line 7259
    HEAP32[$AsyncCtx38 + 24 >> 2] = $3; //@line 7261
    HEAP32[$AsyncCtx38 + 28 >> 2] = $5; //@line 7263
    HEAP32[$AsyncCtx38 + 32 >> 2] = $8; //@line 7265
    HEAP32[$AsyncCtx38 + 36 >> 2] = $9; //@line 7267
    HEAP32[$AsyncCtx38 + 40 >> 2] = $12; //@line 7269
    HEAP32[$AsyncCtx38 + 44 >> 2] = $1; //@line 7271
    sp = STACKTOP; //@line 7272
    STACKTOP = sp; //@line 7273
    return 0; //@line 7273
   }
   _emscripten_free_async_context($AsyncCtx38 | 0); //@line 7275
   if (!$33) {
    $$3 = -3007; //@line 7278
   } else {
    $46 = $33 + 16 | 0; //@line 7280
    HEAP32[$46 >> 2] = 0; //@line 7281
    HEAP32[$46 + 4 >> 2] = 0; //@line 7281
    HEAP32[$46 + 8 >> 2] = 0; //@line 7281
    HEAP32[$46 + 12 >> 2] = 0; //@line 7281
    HEAP32[$46 + 16 >> 2] = 0; //@line 7281
    HEAP32[$46 + 20 >> 2] = 0; //@line 7281
    HEAP32[$46 + 24 >> 2] = 0; //@line 7281
    HEAP32[$46 + 28 >> 2] = 0; //@line 7281
    $AsyncCtx42 = _emscripten_alloc_async_context(52, sp) | 0; //@line 7285
    $50 = __ZnajRKSt9nothrow_t(($12 | 0) < -1 ? -1 : $12 + 1 | 0, 8661) | 0; //@line 7286
    if (___async) {
     HEAP32[$AsyncCtx42 >> 2] = 160; //@line 7289
     HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 7291
     HEAP32[$AsyncCtx42 + 8 >> 2] = $$090114$lcssa; //@line 7293
     HEAP32[$AsyncCtx42 + 12 >> 2] = $33; //@line 7295
     HEAP32[$AsyncCtx42 + 16 >> 2] = $6; //@line 7297
     HEAP32[$AsyncCtx42 + 20 >> 2] = $4; //@line 7299
     HEAP32[$AsyncCtx42 + 24 >> 2] = $2; //@line 7301
     HEAP32[$AsyncCtx42 + 28 >> 2] = $46; //@line 7303
     HEAP32[$AsyncCtx42 + 32 >> 2] = $3; //@line 7305
     HEAP32[$AsyncCtx42 + 36 >> 2] = $5; //@line 7307
     HEAP32[$AsyncCtx42 + 40 >> 2] = $8; //@line 7309
     HEAP32[$AsyncCtx42 + 44 >> 2] = $9; //@line 7311
     HEAP32[$AsyncCtx42 + 48 >> 2] = $1; //@line 7313
     sp = STACKTOP; //@line 7314
     STACKTOP = sp; //@line 7315
     return 0; //@line 7315
    }
    _emscripten_free_async_context($AsyncCtx42 | 0); //@line 7317
    $63 = $33 + 12 | 0; //@line 7318
    HEAP32[$63 >> 2] = $50; //@line 7319
    if (!$50) {
     __ZdlPv($33); //@line 7322
     $$3 = -3007; //@line 7323
     break;
    }
    _strcpy($50, $1) | 0; //@line 7326
    HEAP32[$33 + 4 >> 2] = -3019; //@line 7328
    if (($46 | 0) != ($2 | 0)) {
     $67 = $33 + 28 | 0; //@line 7331
     $68 = HEAP32[$67 >> 2] | 0; //@line 7332
     do {
      if ($68 | 0) {
       $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 7337
       $AsyncCtx2 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7338
       FUNCTION_TABLE_vi[$71 & 511]($46); //@line 7339
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 161; //@line 7342
        HEAP32[$AsyncCtx2 + 4 >> 2] = $67; //@line 7344
        HEAP32[$AsyncCtx2 + 8 >> 2] = $$090114$lcssa; //@line 7346
        HEAP32[$AsyncCtx2 + 12 >> 2] = $33; //@line 7348
        HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 7350
        HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 7352
        HEAP32[$AsyncCtx2 + 24 >> 2] = $46; //@line 7354
        HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 7356
        HEAP32[$AsyncCtx2 + 32 >> 2] = $6; //@line 7358
        HEAP32[$AsyncCtx2 + 36 >> 2] = $3; //@line 7360
        HEAP32[$AsyncCtx2 + 40 >> 2] = $5; //@line 7362
        HEAP32[$AsyncCtx2 + 44 >> 2] = $8; //@line 7364
        HEAP32[$AsyncCtx2 + 48 >> 2] = $9; //@line 7366
        HEAP32[$AsyncCtx2 + 52 >> 2] = $63; //@line 7368
        sp = STACKTOP; //@line 7369
        STACKTOP = sp; //@line 7370
        return 0; //@line 7370
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7372
        break;
       }
      }
     } while (0);
     $85 = $2 + 12 | 0; //@line 7377
     $86 = HEAP32[$85 >> 2] | 0; //@line 7378
     do {
      if (!$86) {
       $103 = 0; //@line 7382
      } else {
       $89 = HEAP32[$86 + 4 >> 2] | 0; //@line 7385
       $AsyncCtx6 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7386
       FUNCTION_TABLE_vii[$89 & 7]($46, $2); //@line 7387
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 162; //@line 7390
        HEAP32[$AsyncCtx6 + 4 >> 2] = $67; //@line 7392
        HEAP32[$AsyncCtx6 + 8 >> 2] = $$090114$lcssa; //@line 7394
        HEAP32[$AsyncCtx6 + 12 >> 2] = $33; //@line 7396
        HEAP32[$AsyncCtx6 + 16 >> 2] = $4; //@line 7398
        HEAP32[$AsyncCtx6 + 20 >> 2] = $0; //@line 7400
        HEAP32[$AsyncCtx6 + 24 >> 2] = $6; //@line 7402
        HEAP32[$AsyncCtx6 + 28 >> 2] = $3; //@line 7404
        HEAP32[$AsyncCtx6 + 32 >> 2] = $5; //@line 7406
        HEAP32[$AsyncCtx6 + 36 >> 2] = $8; //@line 7408
        HEAP32[$AsyncCtx6 + 40 >> 2] = $9; //@line 7410
        HEAP32[$AsyncCtx6 + 44 >> 2] = $63; //@line 7412
        HEAP32[$AsyncCtx6 + 48 >> 2] = $46; //@line 7414
        HEAP32[$AsyncCtx6 + 52 >> 2] = $85; //@line 7416
        sp = STACKTOP; //@line 7417
        STACKTOP = sp; //@line 7418
        return 0; //@line 7418
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7420
        $103 = HEAP32[$85 >> 2] | 0; //@line 7422
        break;
       }
      }
     } while (0);
     HEAP32[$67 >> 2] = $103; //@line 7427
    }
    $104 = $33 + 32 | 0; //@line 7429
    if (($104 | 0) != ($4 | 0)) {
     $106 = $33 + 44 | 0; //@line 7432
     $107 = HEAP32[$106 >> 2] | 0; //@line 7433
     do {
      if ($107 | 0) {
       $110 = HEAP32[$107 + 8 >> 2] | 0; //@line 7438
       $AsyncCtx10 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7439
       FUNCTION_TABLE_vi[$110 & 511]($104); //@line 7440
       if (___async) {
        HEAP32[$AsyncCtx10 >> 2] = 163; //@line 7443
        HEAP32[$AsyncCtx10 + 4 >> 2] = $$090114$lcssa; //@line 7445
        HEAP32[$AsyncCtx10 + 8 >> 2] = $33; //@line 7447
        HEAP32[$AsyncCtx10 + 12 >> 2] = $4; //@line 7449
        HEAP32[$AsyncCtx10 + 16 >> 2] = $104; //@line 7451
        HEAP32[$AsyncCtx10 + 20 >> 2] = $0; //@line 7453
        HEAP32[$AsyncCtx10 + 24 >> 2] = $6; //@line 7455
        HEAP32[$AsyncCtx10 + 28 >> 2] = $106; //@line 7457
        HEAP32[$AsyncCtx10 + 32 >> 2] = $3; //@line 7459
        HEAP32[$AsyncCtx10 + 36 >> 2] = $5; //@line 7461
        HEAP32[$AsyncCtx10 + 40 >> 2] = $8; //@line 7463
        HEAP32[$AsyncCtx10 + 44 >> 2] = $9; //@line 7465
        HEAP32[$AsyncCtx10 + 48 >> 2] = $63; //@line 7467
        HEAP32[$AsyncCtx10 + 52 >> 2] = $46; //@line 7469
        sp = STACKTOP; //@line 7470
        STACKTOP = sp; //@line 7471
        return 0; //@line 7471
       } else {
        _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7473
        break;
       }
      }
     } while (0);
     $124 = $4 + 12 | 0; //@line 7478
     $125 = HEAP32[$124 >> 2] | 0; //@line 7479
     do {
      if (!$125) {
       $142 = 0; //@line 7483
      } else {
       $128 = HEAP32[$125 + 4 >> 2] | 0; //@line 7486
       $AsyncCtx14 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7487
       FUNCTION_TABLE_vii[$128 & 7]($104, $4); //@line 7488
       if (___async) {
        HEAP32[$AsyncCtx14 >> 2] = 164; //@line 7491
        HEAP32[$AsyncCtx14 + 4 >> 2] = $$090114$lcssa; //@line 7493
        HEAP32[$AsyncCtx14 + 8 >> 2] = $33; //@line 7495
        HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 7497
        HEAP32[$AsyncCtx14 + 16 >> 2] = $6; //@line 7499
        HEAP32[$AsyncCtx14 + 20 >> 2] = $106; //@line 7501
        HEAP32[$AsyncCtx14 + 24 >> 2] = $3; //@line 7503
        HEAP32[$AsyncCtx14 + 28 >> 2] = $5; //@line 7505
        HEAP32[$AsyncCtx14 + 32 >> 2] = $124; //@line 7507
        HEAP32[$AsyncCtx14 + 36 >> 2] = $8; //@line 7509
        HEAP32[$AsyncCtx14 + 40 >> 2] = $104; //@line 7511
        HEAP32[$AsyncCtx14 + 44 >> 2] = $9; //@line 7513
        HEAP32[$AsyncCtx14 + 48 >> 2] = $63; //@line 7515
        HEAP32[$AsyncCtx14 + 52 >> 2] = $46; //@line 7517
        sp = STACKTOP; //@line 7518
        STACKTOP = sp; //@line 7519
        return 0; //@line 7519
       } else {
        _emscripten_free_async_context($AsyncCtx14 | 0); //@line 7521
        $142 = HEAP32[$124 >> 2] | 0; //@line 7523
        break;
       }
      }
     } while (0);
     HEAP32[$106 >> 2] = $142; //@line 7528
    }
    HEAP32[$33 + 8 >> 2] = $0; //@line 7531
    HEAP32[$33 + 48 >> 2] = $3; //@line 7533
    HEAP32[$33 + 52 >> 2] = $5; //@line 7535
    $146 = $33 + 56 | 0; //@line 7536
    HEAP32[$146 >> 2] = 0; //@line 7537
    $147 = $33 + 60 | 0; //@line 7538
    HEAP32[$147 >> 2] = 0; //@line 7539
    HEAP32[$33 + 64 >> 2] = 0; //@line 7541
    HEAP8[$33 + 82 >> 0] = 0; //@line 7543
    HEAP8[$33 + 83 >> 0] = 1; //@line 7545
    HEAP8[$33 + 84 >> 0] = 3; //@line 7547
    HEAP8[$33 + 85 >> 0] = 0; //@line 7549
    HEAP16[$33 + 80 >> 1] = 0; //@line 7551
    HEAP32[$33 + 76 >> 2] = 0; //@line 7553
    $155 = $33 + 72 | 0; //@line 7554
    HEAP32[$155 >> 2] = 15500; //@line 7555
    HEAP8[$33 + 86 >> 0] = 0; //@line 7557
    HEAP32[$33 + 88 >> 2] = 0; //@line 7559
    $158 = HEAP32[177] | 0; //@line 7560
    HEAP32[177] = $158 + 1; //@line 7562
    HEAP32[$33 >> 2] = ($158 | 0) > 32767 ? 1 : $158; //@line 7565
    $161 = HEAP32[1685] | 0; //@line 7566
    if (!$161) {
     $$1 = 0; //@line 7569
     $255 = 0; //@line 7569
    } else {
     $164 = HEAP32[$161 + 56 >> 2] | 0; //@line 7572
     if (!$164) {
      $$1 = 1; //@line 7575
      $255 = 0; //@line 7575
     } else {
      if ((HEAP32[$161 + 8 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$146 >> 2] = $164; //@line 7581
       HEAP32[$147 >> 2] = HEAP32[$161 + 60 >> 2]; //@line 7584
       $$1 = 1; //@line 7585
       $255 = $164; //@line 7585
      } else {
       $$1 = 1; //@line 7587
       $255 = 0; //@line 7587
      }
     }
    }
    $171 = HEAP32[1686] | 0; //@line 7591
    if (!$171) {
     $$1$1 = $$1; //@line 7594
     $268 = $255; //@line 7594
    } else {
     if (!$255) {
      $257 = HEAP32[$171 + 56 >> 2] | 0; //@line 7599
      if (!$257) {
       $315 = 0; //@line 7602
      } else {
       if ((HEAP32[$171 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $257; //@line 7608
        HEAP32[$147 >> 2] = HEAP32[$171 + 60 >> 2]; //@line 7611
        $315 = $257; //@line 7612
       } else {
        $315 = 0; //@line 7614
       }
      }
     } else {
      $315 = $255; //@line 7618
     }
     $$1$1 = $$1 + 1 | 0; //@line 7621
     $268 = $315; //@line 7621
    }
    $265 = HEAP32[1687] | 0; //@line 7623
    if (!$265) {
     $$1$2 = $$1$1; //@line 7626
     $281 = $268; //@line 7626
    } else {
     if (!$268) {
      $270 = HEAP32[$265 + 56 >> 2] | 0; //@line 7631
      if (!$270) {
       $316 = 0; //@line 7634
      } else {
       if ((HEAP32[$265 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $270; //@line 7640
        HEAP32[$147 >> 2] = HEAP32[$265 + 60 >> 2]; //@line 7643
        $316 = $270; //@line 7644
       } else {
        $316 = 0; //@line 7646
       }
      }
     } else {
      $316 = $268; //@line 7650
     }
     $$1$2 = $$1$1 + 1 | 0; //@line 7653
     $281 = $316; //@line 7653
    }
    $278 = HEAP32[1688] | 0; //@line 7655
    if (!$278) {
     $$1$3 = $$1$2; //@line 7658
     $294 = $281; //@line 7658
    } else {
     if (!$281) {
      $283 = HEAP32[$278 + 56 >> 2] | 0; //@line 7663
      if (!$283) {
       $317 = 0; //@line 7666
      } else {
       if ((HEAP32[$278 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $283; //@line 7672
        HEAP32[$147 >> 2] = HEAP32[$278 + 60 >> 2]; //@line 7675
        $317 = $283; //@line 7676
       } else {
        $317 = 0; //@line 7678
       }
      }
     } else {
      $317 = $281; //@line 7682
     }
     $$1$3 = $$1$2 + 1 | 0; //@line 7685
     $294 = $317; //@line 7685
    }
    $291 = HEAP32[1689] | 0; //@line 7687
    if (!$291) {
     $$1$4 = $$1$3; //@line 7690
    } else {
     do {
      if (!$294) {
       $296 = HEAP32[$291 + 56 >> 2] | 0; //@line 7696
       if ($296 | 0) {
        if ((HEAP32[$291 + 8 >> 2] | 0) != ($0 | 0)) {
         break;
        }
        HEAP32[$146 >> 2] = $296; //@line 7705
        HEAP32[$147 >> 2] = HEAP32[$291 + 60 >> 2]; //@line 7708
       }
      }
     } while (0);
     $$1$4 = $$1$3 + 1 | 0; //@line 7713
    }
    HEAP32[6740 + ($$090114$lcssa << 2) >> 2] = $33; //@line 7716
    HEAP32[$155 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 7719
    do {
     if (!(HEAP8[7620] | 0)) {
      $173 = $33 + 44 | 0; //@line 7724
      $174 = HEAP32[$173 >> 2] | 0; //@line 7725
      do {
       if (!$174) {
        $189 = 0; //@line 7729
       } else {
        $177 = HEAP32[$174 + 4 >> 2] | 0; //@line 7732
        $AsyncCtx18 = _emscripten_alloc_async_context(44, sp) | 0; //@line 7733
        FUNCTION_TABLE_vii[$177 & 7]($8, $104); //@line 7734
        if (___async) {
         HEAP32[$AsyncCtx18 >> 2] = 165; //@line 7737
         HEAP32[$AsyncCtx18 + 4 >> 2] = $33; //@line 7739
         HEAP32[$AsyncCtx18 + 8 >> 2] = $6; //@line 7741
         HEAP32[$AsyncCtx18 + 12 >> 2] = $173; //@line 7743
         HEAP32[$AsyncCtx18 + 16 >> 2] = $9; //@line 7745
         HEAP32[$AsyncCtx18 + 20 >> 2] = $8; //@line 7747
         HEAP32[$AsyncCtx18 + 24 >> 2] = $63; //@line 7749
         HEAP32[$AsyncCtx18 + 28 >> 2] = $46; //@line 7751
         HEAP32[$AsyncCtx18 + 32 >> 2] = $33; //@line 7753
         HEAP32[$AsyncCtx18 + 36 >> 2] = $104; //@line 7755
         HEAP32[$AsyncCtx18 + 40 >> 2] = $173; //@line 7757
         sp = STACKTOP; //@line 7758
         STACKTOP = sp; //@line 7759
         return 0; //@line 7759
        } else {
         _emscripten_free_async_context($AsyncCtx18 | 0); //@line 7761
         $189 = HEAP32[$173 >> 2] | 0; //@line 7763
         break;
        }
       }
      } while (0);
      $188 = $8 + 12 | 0; //@line 7768
      HEAP32[$188 >> 2] = $189; //@line 7769
      $191 = $9 + 4 | 0; //@line 7771
      HEAP32[$191 >> 2] = 0; //@line 7773
      HEAP32[$191 + 4 >> 2] = 0; //@line 7776
      HEAP32[$9 >> 2] = 3; //@line 7777
      $195 = $9 + 12 | 0; //@line 7778
      HEAP32[$195 >> 2] = 712; //@line 7779
      $AsyncCtx49 = _emscripten_alloc_async_context(48, sp) | 0; //@line 7780
      $196 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $9) | 0; //@line 7781
      if (___async) {
       HEAP32[$AsyncCtx49 >> 2] = 166; //@line 7784
       HEAP32[$AsyncCtx49 + 4 >> 2] = $33; //@line 7786
       HEAP32[$AsyncCtx49 + 8 >> 2] = $33; //@line 7788
       HEAP32[$AsyncCtx49 + 12 >> 2] = $6; //@line 7790
       HEAP32[$AsyncCtx49 + 16 >> 2] = $195; //@line 7792
       HEAP32[$AsyncCtx49 + 20 >> 2] = $188; //@line 7794
       HEAP32[$AsyncCtx49 + 24 >> 2] = $9; //@line 7796
       HEAP32[$AsyncCtx49 + 28 >> 2] = $46; //@line 7798
       HEAP32[$AsyncCtx49 + 32 >> 2] = $63; //@line 7800
       HEAP32[$AsyncCtx49 + 36 >> 2] = $8; //@line 7802
       HEAP32[$AsyncCtx49 + 40 >> 2] = $104; //@line 7804
       HEAP32[$AsyncCtx49 + 44 >> 2] = $173; //@line 7806
       sp = STACKTOP; //@line 7807
       STACKTOP = sp; //@line 7808
       return 0; //@line 7808
      }
      _emscripten_free_async_context($AsyncCtx49 | 0); //@line 7810
      $208 = HEAP32[$195 >> 2] | 0; //@line 7811
      do {
       if ($208 | 0) {
        $211 = HEAP32[$208 + 8 >> 2] | 0; //@line 7816
        $AsyncCtx22 = _emscripten_alloc_async_context(44, sp) | 0; //@line 7817
        FUNCTION_TABLE_vi[$211 & 511]($9); //@line 7818
        if (___async) {
         HEAP32[$AsyncCtx22 >> 2] = 167; //@line 7821
         HEAP32[$AsyncCtx22 + 4 >> 2] = $33; //@line 7823
         HEAP32[$AsyncCtx22 + 8 >> 2] = $6; //@line 7825
         HEAP32[$AsyncCtx22 + 12 >> 2] = $196; //@line 7827
         HEAP32[$AsyncCtx22 + 16 >> 2] = $188; //@line 7829
         HEAP32[$AsyncCtx22 + 20 >> 2] = $63; //@line 7831
         HEAP32[$AsyncCtx22 + 24 >> 2] = $8; //@line 7833
         HEAP32[$AsyncCtx22 + 28 >> 2] = $46; //@line 7835
         HEAP32[$AsyncCtx22 + 32 >> 2] = $33; //@line 7837
         HEAP32[$AsyncCtx22 + 36 >> 2] = $104; //@line 7839
         HEAP32[$AsyncCtx22 + 40 >> 2] = $173; //@line 7841
         sp = STACKTOP; //@line 7842
         STACKTOP = sp; //@line 7843
         return 0; //@line 7843
        } else {
         _emscripten_free_async_context($AsyncCtx22 | 0); //@line 7845
         break;
        }
       }
      } while (0);
      $222 = ($196 | 0) == 0; //@line 7850
      $223 = HEAP32[$188 >> 2] | 0; //@line 7851
      do {
       if ($223 | 0) {
        $226 = HEAP32[$223 + 8 >> 2] | 0; //@line 7856
        $AsyncCtx26 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7857
        FUNCTION_TABLE_vi[$226 & 511]($8); //@line 7858
        if (___async) {
         HEAP32[$AsyncCtx26 >> 2] = 168; //@line 7861
         HEAP32[$AsyncCtx26 + 4 >> 2] = $33; //@line 7863
         HEAP32[$AsyncCtx26 + 8 >> 2] = $6; //@line 7865
         HEAP32[$AsyncCtx26 + 12 >> 2] = $63; //@line 7867
         HEAP8[$AsyncCtx26 + 16 >> 0] = $222 & 1; //@line 7870
         HEAP32[$AsyncCtx26 + 20 >> 2] = $46; //@line 7872
         HEAP32[$AsyncCtx26 + 24 >> 2] = $33; //@line 7874
         HEAP32[$AsyncCtx26 + 28 >> 2] = $104; //@line 7876
         HEAP32[$AsyncCtx26 + 32 >> 2] = $173; //@line 7878
         sp = STACKTOP; //@line 7879
         STACKTOP = sp; //@line 7880
         return 0; //@line 7880
        } else {
         _emscripten_free_async_context($AsyncCtx26 | 0); //@line 7882
         break;
        }
       }
      } while (0);
      if ($222) {
       HEAP8[7620] = 1; //@line 7888
       break;
      }
      $235 = HEAP32[$63 >> 2] | 0; //@line 7891
      if ($235 | 0) {
       __ZdlPv($235); //@line 7894
      }
      $237 = HEAP32[$173 >> 2] | 0; //@line 7896
      do {
       if ($237 | 0) {
        $240 = HEAP32[$237 + 8 >> 2] | 0; //@line 7901
        $AsyncCtx30 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7902
        FUNCTION_TABLE_vi[$240 & 511]($104); //@line 7903
        if (___async) {
         HEAP32[$AsyncCtx30 >> 2] = 169; //@line 7906
         HEAP32[$AsyncCtx30 + 4 >> 2] = $33; //@line 7908
         HEAP32[$AsyncCtx30 + 8 >> 2] = $46; //@line 7910
         HEAP32[$AsyncCtx30 + 12 >> 2] = $6; //@line 7912
         sp = STACKTOP; //@line 7913
         STACKTOP = sp; //@line 7914
         return 0; //@line 7914
        } else {
         _emscripten_free_async_context($AsyncCtx30 | 0); //@line 7916
         break;
        }
       }
      } while (0);
      $245 = HEAP32[$33 + 28 >> 2] | 0; //@line 7922
      do {
       if ($245 | 0) {
        $248 = HEAP32[$245 + 8 >> 2] | 0; //@line 7927
        $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7928
        FUNCTION_TABLE_vi[$248 & 511]($46); //@line 7929
        if (___async) {
         HEAP32[$AsyncCtx34 >> 2] = 170; //@line 7932
         HEAP32[$AsyncCtx34 + 4 >> 2] = $33; //@line 7934
         HEAP32[$AsyncCtx34 + 8 >> 2] = $6; //@line 7936
         sp = STACKTOP; //@line 7937
         STACKTOP = sp; //@line 7938
         return 0; //@line 7938
        } else {
         _emscripten_free_async_context($AsyncCtx34 | 0); //@line 7940
         break;
        }
       }
      } while (0);
      __ZdlPv($33); //@line 7945
      $$3 = -3007; //@line 7946
      break L7;
     }
    } while (0);
    $AsyncCtx46 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7950
    __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 7951
    if (___async) {
     HEAP32[$AsyncCtx46 >> 2] = 171; //@line 7954
     HEAP32[$AsyncCtx46 + 4 >> 2] = $33; //@line 7956
     HEAP32[$AsyncCtx46 + 8 >> 2] = $6; //@line 7958
     sp = STACKTOP; //@line 7959
     STACKTOP = sp; //@line 7960
     return 0; //@line 7960
    } else {
     _emscripten_free_async_context($AsyncCtx46 | 0); //@line 7962
     $$3 = HEAP32[$33 >> 2] | 0; //@line 7964
     break;
    }
   }
  }
 } while (0);
 $$5 = $$3; //@line 7970
 STACKTOP = sp; //@line 7971
 return $$5 | 0; //@line 7971
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_196($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $107 = 0, $108 = 0, $116 = 0, $119 = 0, $12 = 0, $122 = 0, $125 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $173 = 0, $175 = 0, $18 = 0, $183 = 0, $186 = 0, $188 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $209 = 0, $212 = 0, $214 = 0, $22 = 0, $227 = 0, $228 = 0, $229 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10042
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10044
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10046
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10048
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10050
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10052
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10054
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10056
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10058
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10060
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10062
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10064
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10066
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10068
 $26 = $6 + 12 | 0; //@line 10069
 HEAP32[$26 >> 2] = $AsyncRetVal; //@line 10070
 if (!$AsyncRetVal) {
  __ZdlPv($6); //@line 10073
  HEAP32[___async_retval >> 2] = -3007; //@line 10075
  return;
 }
 _strcpy($AsyncRetVal, $24) | 0; //@line 10078
 HEAP32[$6 + 4 >> 2] = -3019; //@line 10080
 do {
  if (($14 | 0) != ($12 | 0)) {
   $30 = $6 + 28 | 0; //@line 10084
   $31 = HEAP32[$30 >> 2] | 0; //@line 10085
   if ($31 | 0) {
    $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 10089
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 10090
    FUNCTION_TABLE_vi[$34 & 511]($14); //@line 10091
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 161; //@line 10094
     $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 10095
     HEAP32[$35 >> 2] = $30; //@line 10096
     $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 10097
     HEAP32[$36 >> 2] = $4; //@line 10098
     $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 10099
     HEAP32[$37 >> 2] = $6; //@line 10100
     $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 10101
     HEAP32[$38 >> 2] = $10; //@line 10102
     $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 10103
     HEAP32[$39 >> 2] = $12; //@line 10104
     $40 = $ReallocAsyncCtx2 + 24 | 0; //@line 10105
     HEAP32[$40 >> 2] = $14; //@line 10106
     $41 = $ReallocAsyncCtx2 + 28 | 0; //@line 10107
     HEAP32[$41 >> 2] = $2; //@line 10108
     $42 = $ReallocAsyncCtx2 + 32 | 0; //@line 10109
     HEAP32[$42 >> 2] = $8; //@line 10110
     $43 = $ReallocAsyncCtx2 + 36 | 0; //@line 10111
     HEAP32[$43 >> 2] = $16; //@line 10112
     $44 = $ReallocAsyncCtx2 + 40 | 0; //@line 10113
     HEAP32[$44 >> 2] = $18; //@line 10114
     $45 = $ReallocAsyncCtx2 + 44 | 0; //@line 10115
     HEAP32[$45 >> 2] = $20; //@line 10116
     $46 = $ReallocAsyncCtx2 + 48 | 0; //@line 10117
     HEAP32[$46 >> 2] = $22; //@line 10118
     $47 = $ReallocAsyncCtx2 + 52 | 0; //@line 10119
     HEAP32[$47 >> 2] = $26; //@line 10120
     sp = STACKTOP; //@line 10121
     return;
    }
    ___async_unwind = 0; //@line 10124
    HEAP32[$ReallocAsyncCtx2 >> 2] = 161; //@line 10125
    $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 10126
    HEAP32[$35 >> 2] = $30; //@line 10127
    $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 10128
    HEAP32[$36 >> 2] = $4; //@line 10129
    $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 10130
    HEAP32[$37 >> 2] = $6; //@line 10131
    $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 10132
    HEAP32[$38 >> 2] = $10; //@line 10133
    $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 10134
    HEAP32[$39 >> 2] = $12; //@line 10135
    $40 = $ReallocAsyncCtx2 + 24 | 0; //@line 10136
    HEAP32[$40 >> 2] = $14; //@line 10137
    $41 = $ReallocAsyncCtx2 + 28 | 0; //@line 10138
    HEAP32[$41 >> 2] = $2; //@line 10139
    $42 = $ReallocAsyncCtx2 + 32 | 0; //@line 10140
    HEAP32[$42 >> 2] = $8; //@line 10141
    $43 = $ReallocAsyncCtx2 + 36 | 0; //@line 10142
    HEAP32[$43 >> 2] = $16; //@line 10143
    $44 = $ReallocAsyncCtx2 + 40 | 0; //@line 10144
    HEAP32[$44 >> 2] = $18; //@line 10145
    $45 = $ReallocAsyncCtx2 + 44 | 0; //@line 10146
    HEAP32[$45 >> 2] = $20; //@line 10147
    $46 = $ReallocAsyncCtx2 + 48 | 0; //@line 10148
    HEAP32[$46 >> 2] = $22; //@line 10149
    $47 = $ReallocAsyncCtx2 + 52 | 0; //@line 10150
    HEAP32[$47 >> 2] = $26; //@line 10151
    sp = STACKTOP; //@line 10152
    return;
   }
   $48 = $12 + 12 | 0; //@line 10155
   $49 = HEAP32[$48 >> 2] | 0; //@line 10156
   if (!$49) {
    HEAP32[$30 >> 2] = 0; //@line 10159
    break;
   }
   $52 = HEAP32[$49 + 4 >> 2] | 0; //@line 10163
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 10164
   FUNCTION_TABLE_vii[$52 & 7]($14, $12); //@line 10165
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 162; //@line 10168
    $53 = $ReallocAsyncCtx3 + 4 | 0; //@line 10169
    HEAP32[$53 >> 2] = $30; //@line 10170
    $54 = $ReallocAsyncCtx3 + 8 | 0; //@line 10171
    HEAP32[$54 >> 2] = $4; //@line 10172
    $55 = $ReallocAsyncCtx3 + 12 | 0; //@line 10173
    HEAP32[$55 >> 2] = $6; //@line 10174
    $56 = $ReallocAsyncCtx3 + 16 | 0; //@line 10175
    HEAP32[$56 >> 2] = $10; //@line 10176
    $57 = $ReallocAsyncCtx3 + 20 | 0; //@line 10177
    HEAP32[$57 >> 2] = $2; //@line 10178
    $58 = $ReallocAsyncCtx3 + 24 | 0; //@line 10179
    HEAP32[$58 >> 2] = $8; //@line 10180
    $59 = $ReallocAsyncCtx3 + 28 | 0; //@line 10181
    HEAP32[$59 >> 2] = $16; //@line 10182
    $60 = $ReallocAsyncCtx3 + 32 | 0; //@line 10183
    HEAP32[$60 >> 2] = $18; //@line 10184
    $61 = $ReallocAsyncCtx3 + 36 | 0; //@line 10185
    HEAP32[$61 >> 2] = $20; //@line 10186
    $62 = $ReallocAsyncCtx3 + 40 | 0; //@line 10187
    HEAP32[$62 >> 2] = $22; //@line 10188
    $63 = $ReallocAsyncCtx3 + 44 | 0; //@line 10189
    HEAP32[$63 >> 2] = $26; //@line 10190
    $64 = $ReallocAsyncCtx3 + 48 | 0; //@line 10191
    HEAP32[$64 >> 2] = $14; //@line 10192
    $65 = $ReallocAsyncCtx3 + 52 | 0; //@line 10193
    HEAP32[$65 >> 2] = $48; //@line 10194
    sp = STACKTOP; //@line 10195
    return;
   }
   ___async_unwind = 0; //@line 10198
   HEAP32[$ReallocAsyncCtx3 >> 2] = 162; //@line 10199
   $53 = $ReallocAsyncCtx3 + 4 | 0; //@line 10200
   HEAP32[$53 >> 2] = $30; //@line 10201
   $54 = $ReallocAsyncCtx3 + 8 | 0; //@line 10202
   HEAP32[$54 >> 2] = $4; //@line 10203
   $55 = $ReallocAsyncCtx3 + 12 | 0; //@line 10204
   HEAP32[$55 >> 2] = $6; //@line 10205
   $56 = $ReallocAsyncCtx3 + 16 | 0; //@line 10206
   HEAP32[$56 >> 2] = $10; //@line 10207
   $57 = $ReallocAsyncCtx3 + 20 | 0; //@line 10208
   HEAP32[$57 >> 2] = $2; //@line 10209
   $58 = $ReallocAsyncCtx3 + 24 | 0; //@line 10210
   HEAP32[$58 >> 2] = $8; //@line 10211
   $59 = $ReallocAsyncCtx3 + 28 | 0; //@line 10212
   HEAP32[$59 >> 2] = $16; //@line 10213
   $60 = $ReallocAsyncCtx3 + 32 | 0; //@line 10214
   HEAP32[$60 >> 2] = $18; //@line 10215
   $61 = $ReallocAsyncCtx3 + 36 | 0; //@line 10216
   HEAP32[$61 >> 2] = $20; //@line 10217
   $62 = $ReallocAsyncCtx3 + 40 | 0; //@line 10218
   HEAP32[$62 >> 2] = $22; //@line 10219
   $63 = $ReallocAsyncCtx3 + 44 | 0; //@line 10220
   HEAP32[$63 >> 2] = $26; //@line 10221
   $64 = $ReallocAsyncCtx3 + 48 | 0; //@line 10222
   HEAP32[$64 >> 2] = $14; //@line 10223
   $65 = $ReallocAsyncCtx3 + 52 | 0; //@line 10224
   HEAP32[$65 >> 2] = $48; //@line 10225
   sp = STACKTOP; //@line 10226
   return;
  }
 } while (0);
 $66 = $6 + 32 | 0; //@line 10230
 do {
  if (($66 | 0) != ($10 | 0)) {
   $68 = $6 + 44 | 0; //@line 10234
   $69 = HEAP32[$68 >> 2] | 0; //@line 10235
   if ($69 | 0) {
    $72 = HEAP32[$69 + 8 >> 2] | 0; //@line 10239
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 10240
    FUNCTION_TABLE_vi[$72 & 511]($66); //@line 10241
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 163; //@line 10244
     $73 = $ReallocAsyncCtx4 + 4 | 0; //@line 10245
     HEAP32[$73 >> 2] = $4; //@line 10246
     $74 = $ReallocAsyncCtx4 + 8 | 0; //@line 10247
     HEAP32[$74 >> 2] = $6; //@line 10248
     $75 = $ReallocAsyncCtx4 + 12 | 0; //@line 10249
     HEAP32[$75 >> 2] = $10; //@line 10250
     $76 = $ReallocAsyncCtx4 + 16 | 0; //@line 10251
     HEAP32[$76 >> 2] = $66; //@line 10252
     $77 = $ReallocAsyncCtx4 + 20 | 0; //@line 10253
     HEAP32[$77 >> 2] = $2; //@line 10254
     $78 = $ReallocAsyncCtx4 + 24 | 0; //@line 10255
     HEAP32[$78 >> 2] = $8; //@line 10256
     $79 = $ReallocAsyncCtx4 + 28 | 0; //@line 10257
     HEAP32[$79 >> 2] = $68; //@line 10258
     $80 = $ReallocAsyncCtx4 + 32 | 0; //@line 10259
     HEAP32[$80 >> 2] = $16; //@line 10260
     $81 = $ReallocAsyncCtx4 + 36 | 0; //@line 10261
     HEAP32[$81 >> 2] = $18; //@line 10262
     $82 = $ReallocAsyncCtx4 + 40 | 0; //@line 10263
     HEAP32[$82 >> 2] = $20; //@line 10264
     $83 = $ReallocAsyncCtx4 + 44 | 0; //@line 10265
     HEAP32[$83 >> 2] = $22; //@line 10266
     $84 = $ReallocAsyncCtx4 + 48 | 0; //@line 10267
     HEAP32[$84 >> 2] = $26; //@line 10268
     $85 = $ReallocAsyncCtx4 + 52 | 0; //@line 10269
     HEAP32[$85 >> 2] = $14; //@line 10270
     sp = STACKTOP; //@line 10271
     return;
    }
    ___async_unwind = 0; //@line 10274
    HEAP32[$ReallocAsyncCtx4 >> 2] = 163; //@line 10275
    $73 = $ReallocAsyncCtx4 + 4 | 0; //@line 10276
    HEAP32[$73 >> 2] = $4; //@line 10277
    $74 = $ReallocAsyncCtx4 + 8 | 0; //@line 10278
    HEAP32[$74 >> 2] = $6; //@line 10279
    $75 = $ReallocAsyncCtx4 + 12 | 0; //@line 10280
    HEAP32[$75 >> 2] = $10; //@line 10281
    $76 = $ReallocAsyncCtx4 + 16 | 0; //@line 10282
    HEAP32[$76 >> 2] = $66; //@line 10283
    $77 = $ReallocAsyncCtx4 + 20 | 0; //@line 10284
    HEAP32[$77 >> 2] = $2; //@line 10285
    $78 = $ReallocAsyncCtx4 + 24 | 0; //@line 10286
    HEAP32[$78 >> 2] = $8; //@line 10287
    $79 = $ReallocAsyncCtx4 + 28 | 0; //@line 10288
    HEAP32[$79 >> 2] = $68; //@line 10289
    $80 = $ReallocAsyncCtx4 + 32 | 0; //@line 10290
    HEAP32[$80 >> 2] = $16; //@line 10291
    $81 = $ReallocAsyncCtx4 + 36 | 0; //@line 10292
    HEAP32[$81 >> 2] = $18; //@line 10293
    $82 = $ReallocAsyncCtx4 + 40 | 0; //@line 10294
    HEAP32[$82 >> 2] = $20; //@line 10295
    $83 = $ReallocAsyncCtx4 + 44 | 0; //@line 10296
    HEAP32[$83 >> 2] = $22; //@line 10297
    $84 = $ReallocAsyncCtx4 + 48 | 0; //@line 10298
    HEAP32[$84 >> 2] = $26; //@line 10299
    $85 = $ReallocAsyncCtx4 + 52 | 0; //@line 10300
    HEAP32[$85 >> 2] = $14; //@line 10301
    sp = STACKTOP; //@line 10302
    return;
   }
   $86 = $10 + 12 | 0; //@line 10305
   $87 = HEAP32[$86 >> 2] | 0; //@line 10306
   if (!$87) {
    HEAP32[$68 >> 2] = 0; //@line 10309
    break;
   }
   $90 = HEAP32[$87 + 4 >> 2] | 0; //@line 10313
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 10314
   FUNCTION_TABLE_vii[$90 & 7]($66, $10); //@line 10315
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 10318
    $91 = $ReallocAsyncCtx5 + 4 | 0; //@line 10319
    HEAP32[$91 >> 2] = $4; //@line 10320
    $92 = $ReallocAsyncCtx5 + 8 | 0; //@line 10321
    HEAP32[$92 >> 2] = $6; //@line 10322
    $93 = $ReallocAsyncCtx5 + 12 | 0; //@line 10323
    HEAP32[$93 >> 2] = $2; //@line 10324
    $94 = $ReallocAsyncCtx5 + 16 | 0; //@line 10325
    HEAP32[$94 >> 2] = $8; //@line 10326
    $95 = $ReallocAsyncCtx5 + 20 | 0; //@line 10327
    HEAP32[$95 >> 2] = $68; //@line 10328
    $96 = $ReallocAsyncCtx5 + 24 | 0; //@line 10329
    HEAP32[$96 >> 2] = $16; //@line 10330
    $97 = $ReallocAsyncCtx5 + 28 | 0; //@line 10331
    HEAP32[$97 >> 2] = $18; //@line 10332
    $98 = $ReallocAsyncCtx5 + 32 | 0; //@line 10333
    HEAP32[$98 >> 2] = $86; //@line 10334
    $99 = $ReallocAsyncCtx5 + 36 | 0; //@line 10335
    HEAP32[$99 >> 2] = $20; //@line 10336
    $100 = $ReallocAsyncCtx5 + 40 | 0; //@line 10337
    HEAP32[$100 >> 2] = $66; //@line 10338
    $101 = $ReallocAsyncCtx5 + 44 | 0; //@line 10339
    HEAP32[$101 >> 2] = $22; //@line 10340
    $102 = $ReallocAsyncCtx5 + 48 | 0; //@line 10341
    HEAP32[$102 >> 2] = $26; //@line 10342
    $103 = $ReallocAsyncCtx5 + 52 | 0; //@line 10343
    HEAP32[$103 >> 2] = $14; //@line 10344
    sp = STACKTOP; //@line 10345
    return;
   }
   ___async_unwind = 0; //@line 10348
   HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 10349
   $91 = $ReallocAsyncCtx5 + 4 | 0; //@line 10350
   HEAP32[$91 >> 2] = $4; //@line 10351
   $92 = $ReallocAsyncCtx5 + 8 | 0; //@line 10352
   HEAP32[$92 >> 2] = $6; //@line 10353
   $93 = $ReallocAsyncCtx5 + 12 | 0; //@line 10354
   HEAP32[$93 >> 2] = $2; //@line 10355
   $94 = $ReallocAsyncCtx5 + 16 | 0; //@line 10356
   HEAP32[$94 >> 2] = $8; //@line 10357
   $95 = $ReallocAsyncCtx5 + 20 | 0; //@line 10358
   HEAP32[$95 >> 2] = $68; //@line 10359
   $96 = $ReallocAsyncCtx5 + 24 | 0; //@line 10360
   HEAP32[$96 >> 2] = $16; //@line 10361
   $97 = $ReallocAsyncCtx5 + 28 | 0; //@line 10362
   HEAP32[$97 >> 2] = $18; //@line 10363
   $98 = $ReallocAsyncCtx5 + 32 | 0; //@line 10364
   HEAP32[$98 >> 2] = $86; //@line 10365
   $99 = $ReallocAsyncCtx5 + 36 | 0; //@line 10366
   HEAP32[$99 >> 2] = $20; //@line 10367
   $100 = $ReallocAsyncCtx5 + 40 | 0; //@line 10368
   HEAP32[$100 >> 2] = $66; //@line 10369
   $101 = $ReallocAsyncCtx5 + 44 | 0; //@line 10370
   HEAP32[$101 >> 2] = $22; //@line 10371
   $102 = $ReallocAsyncCtx5 + 48 | 0; //@line 10372
   HEAP32[$102 >> 2] = $26; //@line 10373
   $103 = $ReallocAsyncCtx5 + 52 | 0; //@line 10374
   HEAP32[$103 >> 2] = $14; //@line 10375
   sp = STACKTOP; //@line 10376
   return;
  }
 } while (0);
 HEAP32[$6 + 8 >> 2] = $2; //@line 10381
 HEAP32[$6 + 48 >> 2] = $16; //@line 10383
 HEAP32[$6 + 52 >> 2] = $18; //@line 10385
 $107 = $6 + 56 | 0; //@line 10386
 HEAP32[$107 >> 2] = 0; //@line 10387
 $108 = $6 + 60 | 0; //@line 10388
 HEAP32[$108 >> 2] = 0; //@line 10389
 HEAP32[$6 + 64 >> 2] = 0; //@line 10391
 HEAP8[$6 + 82 >> 0] = 0; //@line 10393
 HEAP8[$6 + 83 >> 0] = 1; //@line 10395
 HEAP8[$6 + 84 >> 0] = 3; //@line 10397
 HEAP8[$6 + 85 >> 0] = 0; //@line 10399
 HEAP16[$6 + 80 >> 1] = 0; //@line 10401
 HEAP32[$6 + 76 >> 2] = 0; //@line 10403
 $116 = $6 + 72 | 0; //@line 10404
 HEAP32[$116 >> 2] = 15500; //@line 10405
 HEAP8[$6 + 86 >> 0] = 0; //@line 10407
 HEAP32[$6 + 88 >> 2] = 0; //@line 10409
 $119 = HEAP32[177] | 0; //@line 10410
 HEAP32[177] = $119 + 1; //@line 10412
 HEAP32[$6 >> 2] = ($119 | 0) > 32767 ? 1 : $119; //@line 10415
 $122 = HEAP32[1685] | 0; //@line 10416
 if (!$122) {
  $$1 = 0; //@line 10419
  $173 = 0; //@line 10419
 } else {
  $125 = HEAP32[$122 + 56 >> 2] | 0; //@line 10422
  if (!$125) {
   $$1 = 1; //@line 10425
   $173 = 0; //@line 10425
  } else {
   if ((HEAP32[$122 + 8 >> 2] | 0) == ($2 | 0)) {
    HEAP32[$107 >> 2] = $125; //@line 10431
    HEAP32[$108 >> 2] = HEAP32[$122 + 60 >> 2]; //@line 10434
    $$1 = 1; //@line 10435
    $173 = $125; //@line 10435
   } else {
    $$1 = 1; //@line 10437
    $173 = 0; //@line 10437
   }
  }
 }
 $132 = HEAP32[1686] | 0; //@line 10441
 if (!$132) {
  $$1$1 = $$1; //@line 10444
  $186 = $173; //@line 10444
 } else {
  if (!$173) {
   $175 = HEAP32[$132 + 56 >> 2] | 0; //@line 10449
   if (!$175) {
    $227 = 0; //@line 10452
   } else {
    if ((HEAP32[$132 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$107 >> 2] = $175; //@line 10458
     HEAP32[$108 >> 2] = HEAP32[$132 + 60 >> 2]; //@line 10461
     $227 = $175; //@line 10462
    } else {
     $227 = 0; //@line 10464
    }
   }
  } else {
   $227 = $173; //@line 10468
  }
  $$1$1 = $$1 + 1 | 0; //@line 10471
  $186 = $227; //@line 10471
 }
 $183 = HEAP32[1687] | 0; //@line 10473
 if (!$183) {
  $$1$2 = $$1$1; //@line 10476
  $199 = $186; //@line 10476
 } else {
  if (!$186) {
   $188 = HEAP32[$183 + 56 >> 2] | 0; //@line 10481
   if (!$188) {
    $228 = 0; //@line 10484
   } else {
    if ((HEAP32[$183 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$107 >> 2] = $188; //@line 10490
     HEAP32[$108 >> 2] = HEAP32[$183 + 60 >> 2]; //@line 10493
     $228 = $188; //@line 10494
    } else {
     $228 = 0; //@line 10496
    }
   }
  } else {
   $228 = $186; //@line 10500
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 10503
  $199 = $228; //@line 10503
 }
 $196 = HEAP32[1688] | 0; //@line 10505
 if (!$196) {
  $$1$3 = $$1$2; //@line 10508
  $212 = $199; //@line 10508
 } else {
  if (!$199) {
   $201 = HEAP32[$196 + 56 >> 2] | 0; //@line 10513
   if (!$201) {
    $229 = 0; //@line 10516
   } else {
    if ((HEAP32[$196 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$107 >> 2] = $201; //@line 10522
     HEAP32[$108 >> 2] = HEAP32[$196 + 60 >> 2]; //@line 10525
     $229 = $201; //@line 10526
    } else {
     $229 = 0; //@line 10528
    }
   }
  } else {
   $229 = $199; //@line 10532
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 10535
  $212 = $229; //@line 10535
 }
 $209 = HEAP32[1689] | 0; //@line 10537
 if (!$209) {
  $$1$4 = $$1$3; //@line 10540
 } else {
  if (!$212) {
   $214 = HEAP32[$209 + 56 >> 2] | 0; //@line 10545
   if ($214 | 0) {
    if ((HEAP32[$209 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$107 >> 2] = $214; //@line 10552
     HEAP32[$108 >> 2] = HEAP32[$209 + 60 >> 2]; //@line 10555
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 10560
 }
 HEAP32[6740 + ($4 << 2) >> 2] = $6; //@line 10563
 HEAP32[$116 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 10566
 if (HEAP8[7620] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 10570
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 10571
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 10574
   $169 = $ReallocAsyncCtx13 + 4 | 0; //@line 10575
   HEAP32[$169 >> 2] = $6; //@line 10576
   $170 = $ReallocAsyncCtx13 + 8 | 0; //@line 10577
   HEAP32[$170 >> 2] = $8; //@line 10578
   sp = STACKTOP; //@line 10579
   return;
  }
  ___async_unwind = 0; //@line 10582
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 10583
  $169 = $ReallocAsyncCtx13 + 4 | 0; //@line 10584
  HEAP32[$169 >> 2] = $6; //@line 10585
  $170 = $ReallocAsyncCtx13 + 8 | 0; //@line 10586
  HEAP32[$170 >> 2] = $8; //@line 10587
  sp = STACKTOP; //@line 10588
  return;
 }
 $134 = $6 + 44 | 0; //@line 10591
 $135 = HEAP32[$134 >> 2] | 0; //@line 10592
 if (!$135) {
  $149 = $20 + 12 | 0; //@line 10595
  HEAP32[$149 >> 2] = 0; //@line 10596
  $151 = $22 + 4 | 0; //@line 10598
  HEAP32[$151 >> 2] = 0; //@line 10600
  HEAP32[$151 + 4 >> 2] = 0; //@line 10603
  HEAP32[$22 >> 2] = 3; //@line 10604
  $155 = $22 + 12 | 0; //@line 10605
  HEAP32[$155 >> 2] = 712; //@line 10606
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 10607
  $156 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 100, $22) | 0; //@line 10608
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 10611
   $157 = $ReallocAsyncCtx14 + 4 | 0; //@line 10612
   HEAP32[$157 >> 2] = $6; //@line 10613
   $158 = $ReallocAsyncCtx14 + 8 | 0; //@line 10614
   HEAP32[$158 >> 2] = $6; //@line 10615
   $159 = $ReallocAsyncCtx14 + 12 | 0; //@line 10616
   HEAP32[$159 >> 2] = $8; //@line 10617
   $160 = $ReallocAsyncCtx14 + 16 | 0; //@line 10618
   HEAP32[$160 >> 2] = $155; //@line 10619
   $161 = $ReallocAsyncCtx14 + 20 | 0; //@line 10620
   HEAP32[$161 >> 2] = $149; //@line 10621
   $162 = $ReallocAsyncCtx14 + 24 | 0; //@line 10622
   HEAP32[$162 >> 2] = $22; //@line 10623
   $163 = $ReallocAsyncCtx14 + 28 | 0; //@line 10624
   HEAP32[$163 >> 2] = $14; //@line 10625
   $164 = $ReallocAsyncCtx14 + 32 | 0; //@line 10626
   HEAP32[$164 >> 2] = $26; //@line 10627
   $165 = $ReallocAsyncCtx14 + 36 | 0; //@line 10628
   HEAP32[$165 >> 2] = $20; //@line 10629
   $166 = $ReallocAsyncCtx14 + 40 | 0; //@line 10630
   HEAP32[$166 >> 2] = $66; //@line 10631
   $167 = $ReallocAsyncCtx14 + 44 | 0; //@line 10632
   HEAP32[$167 >> 2] = $134; //@line 10633
   sp = STACKTOP; //@line 10634
   return;
  }
  HEAP32[___async_retval >> 2] = $156; //@line 10638
  ___async_unwind = 0; //@line 10639
  HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 10640
  $157 = $ReallocAsyncCtx14 + 4 | 0; //@line 10641
  HEAP32[$157 >> 2] = $6; //@line 10642
  $158 = $ReallocAsyncCtx14 + 8 | 0; //@line 10643
  HEAP32[$158 >> 2] = $6; //@line 10644
  $159 = $ReallocAsyncCtx14 + 12 | 0; //@line 10645
  HEAP32[$159 >> 2] = $8; //@line 10646
  $160 = $ReallocAsyncCtx14 + 16 | 0; //@line 10647
  HEAP32[$160 >> 2] = $155; //@line 10648
  $161 = $ReallocAsyncCtx14 + 20 | 0; //@line 10649
  HEAP32[$161 >> 2] = $149; //@line 10650
  $162 = $ReallocAsyncCtx14 + 24 | 0; //@line 10651
  HEAP32[$162 >> 2] = $22; //@line 10652
  $163 = $ReallocAsyncCtx14 + 28 | 0; //@line 10653
  HEAP32[$163 >> 2] = $14; //@line 10654
  $164 = $ReallocAsyncCtx14 + 32 | 0; //@line 10655
  HEAP32[$164 >> 2] = $26; //@line 10656
  $165 = $ReallocAsyncCtx14 + 36 | 0; //@line 10657
  HEAP32[$165 >> 2] = $20; //@line 10658
  $166 = $ReallocAsyncCtx14 + 40 | 0; //@line 10659
  HEAP32[$166 >> 2] = $66; //@line 10660
  $167 = $ReallocAsyncCtx14 + 44 | 0; //@line 10661
  HEAP32[$167 >> 2] = $134; //@line 10662
  sp = STACKTOP; //@line 10663
  return;
 } else {
  $138 = HEAP32[$135 + 4 >> 2] | 0; //@line 10667
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 10668
  FUNCTION_TABLE_vii[$138 & 7]($20, $66); //@line 10669
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 10672
   $139 = $ReallocAsyncCtx6 + 4 | 0; //@line 10673
   HEAP32[$139 >> 2] = $6; //@line 10674
   $140 = $ReallocAsyncCtx6 + 8 | 0; //@line 10675
   HEAP32[$140 >> 2] = $8; //@line 10676
   $141 = $ReallocAsyncCtx6 + 12 | 0; //@line 10677
   HEAP32[$141 >> 2] = $134; //@line 10678
   $142 = $ReallocAsyncCtx6 + 16 | 0; //@line 10679
   HEAP32[$142 >> 2] = $22; //@line 10680
   $143 = $ReallocAsyncCtx6 + 20 | 0; //@line 10681
   HEAP32[$143 >> 2] = $20; //@line 10682
   $144 = $ReallocAsyncCtx6 + 24 | 0; //@line 10683
   HEAP32[$144 >> 2] = $26; //@line 10684
   $145 = $ReallocAsyncCtx6 + 28 | 0; //@line 10685
   HEAP32[$145 >> 2] = $14; //@line 10686
   $146 = $ReallocAsyncCtx6 + 32 | 0; //@line 10687
   HEAP32[$146 >> 2] = $6; //@line 10688
   $147 = $ReallocAsyncCtx6 + 36 | 0; //@line 10689
   HEAP32[$147 >> 2] = $66; //@line 10690
   $148 = $ReallocAsyncCtx6 + 40 | 0; //@line 10691
   HEAP32[$148 >> 2] = $134; //@line 10692
   sp = STACKTOP; //@line 10693
   return;
  }
  ___async_unwind = 0; //@line 10696
  HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 10697
  $139 = $ReallocAsyncCtx6 + 4 | 0; //@line 10698
  HEAP32[$139 >> 2] = $6; //@line 10699
  $140 = $ReallocAsyncCtx6 + 8 | 0; //@line 10700
  HEAP32[$140 >> 2] = $8; //@line 10701
  $141 = $ReallocAsyncCtx6 + 12 | 0; //@line 10702
  HEAP32[$141 >> 2] = $134; //@line 10703
  $142 = $ReallocAsyncCtx6 + 16 | 0; //@line 10704
  HEAP32[$142 >> 2] = $22; //@line 10705
  $143 = $ReallocAsyncCtx6 + 20 | 0; //@line 10706
  HEAP32[$143 >> 2] = $20; //@line 10707
  $144 = $ReallocAsyncCtx6 + 24 | 0; //@line 10708
  HEAP32[$144 >> 2] = $26; //@line 10709
  $145 = $ReallocAsyncCtx6 + 28 | 0; //@line 10710
  HEAP32[$145 >> 2] = $14; //@line 10711
  $146 = $ReallocAsyncCtx6 + 32 | 0; //@line 10712
  HEAP32[$146 >> 2] = $6; //@line 10713
  $147 = $ReallocAsyncCtx6 + 36 | 0; //@line 10714
  HEAP32[$147 >> 2] = $66; //@line 10715
  $148 = $ReallocAsyncCtx6 + 40 | 0; //@line 10716
  HEAP32[$148 >> 2] = $134; //@line 10717
  sp = STACKTOP; //@line 10718
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_59($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1107 = 0, $$byval_copy = 0, $$byval_copy24 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $97 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21578
 STACKTOP = STACKTOP + 48 | 0; //@line 21579
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 21579
 $$byval_copy24 = sp + 20 | 0; //@line 21580
 $$byval_copy = sp; //@line 21581
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21583
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21585
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21587
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21589
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21591
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21593
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21595
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21597
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21599
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21601
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21603
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 21605
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21607
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21609
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21611
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21613
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21615
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21617
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21619
 $40 = HEAP8[$0 + 80 >> 0] | 0; //@line 21621
 $42 = HEAP8[$0 + 81 >> 0] | 0; //@line 21623
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 21625
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 21627
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 21629
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 21631
 $52 = HEAP8[$0 + 100 >> 0] | 0; //@line 21633
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 21635
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $150 = $42 + 1 << 24 >> 24; //@line 21640
  $151 = $40 + -1 << 24 >> 24; //@line 21641
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 21642
  $152 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($36, 0, $4, 512) | 0; //@line 21643
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 21646
   $153 = $ReallocAsyncCtx3 + 4 | 0; //@line 21647
   HEAP32[$153 >> 2] = $2; //@line 21648
   $154 = $ReallocAsyncCtx3 + 8 | 0; //@line 21649
   HEAP32[$154 >> 2] = $4; //@line 21650
   $155 = $ReallocAsyncCtx3 + 12 | 0; //@line 21651
   HEAP32[$155 >> 2] = $6; //@line 21652
   $156 = $ReallocAsyncCtx3 + 16 | 0; //@line 21653
   HEAP32[$156 >> 2] = $8; //@line 21654
   $157 = $ReallocAsyncCtx3 + 20 | 0; //@line 21655
   HEAP32[$157 >> 2] = $10; //@line 21656
   $158 = $ReallocAsyncCtx3 + 24 | 0; //@line 21657
   HEAP32[$158 >> 2] = $12; //@line 21658
   $159 = $ReallocAsyncCtx3 + 28 | 0; //@line 21659
   HEAP32[$159 >> 2] = $14; //@line 21660
   $160 = $ReallocAsyncCtx3 + 32 | 0; //@line 21661
   HEAP32[$160 >> 2] = $16; //@line 21662
   $161 = $ReallocAsyncCtx3 + 36 | 0; //@line 21663
   HEAP32[$161 >> 2] = $18; //@line 21664
   $162 = $ReallocAsyncCtx3 + 40 | 0; //@line 21665
   HEAP32[$162 >> 2] = $20; //@line 21666
   $163 = $ReallocAsyncCtx3 + 44 | 0; //@line 21667
   HEAP32[$163 >> 2] = $22; //@line 21668
   $164 = $ReallocAsyncCtx3 + 48 | 0; //@line 21669
   HEAP8[$164 >> 0] = $24; //@line 21670
   $165 = $ReallocAsyncCtx3 + 49 | 0; //@line 21671
   HEAP8[$165 >> 0] = $151; //@line 21672
   $166 = $ReallocAsyncCtx3 + 50 | 0; //@line 21673
   HEAP8[$166 >> 0] = $150; //@line 21674
   $167 = $ReallocAsyncCtx3 + 52 | 0; //@line 21675
   HEAP32[$167 >> 2] = $26; //@line 21676
   $168 = $ReallocAsyncCtx3 + 56 | 0; //@line 21677
   HEAP32[$168 >> 2] = $28; //@line 21678
   $169 = $ReallocAsyncCtx3 + 60 | 0; //@line 21679
   HEAP32[$169 >> 2] = $30; //@line 21680
   $170 = $ReallocAsyncCtx3 + 64 | 0; //@line 21681
   HEAP32[$170 >> 2] = $32; //@line 21682
   $171 = $ReallocAsyncCtx3 + 68 | 0; //@line 21683
   HEAP32[$171 >> 2] = $34; //@line 21684
   $172 = $ReallocAsyncCtx3 + 72 | 0; //@line 21685
   HEAP32[$172 >> 2] = $36; //@line 21686
   $173 = $ReallocAsyncCtx3 + 76 | 0; //@line 21687
   HEAP32[$173 >> 2] = $38; //@line 21688
   $174 = $ReallocAsyncCtx3 + 80 | 0; //@line 21689
   HEAP32[$174 >> 2] = $44; //@line 21690
   $175 = $ReallocAsyncCtx3 + 84 | 0; //@line 21691
   HEAP32[$175 >> 2] = $46; //@line 21692
   $176 = $ReallocAsyncCtx3 + 88 | 0; //@line 21693
   HEAP32[$176 >> 2] = $48; //@line 21694
   $177 = $ReallocAsyncCtx3 + 92 | 0; //@line 21695
   HEAP32[$177 >> 2] = $50; //@line 21696
   $178 = $ReallocAsyncCtx3 + 96 | 0; //@line 21697
   HEAP8[$178 >> 0] = $52; //@line 21698
   $179 = $ReallocAsyncCtx3 + 100 | 0; //@line 21699
   HEAP32[$179 >> 2] = $54; //@line 21700
   sp = STACKTOP; //@line 21701
   STACKTOP = sp; //@line 21702
   return;
  }
  HEAP32[___async_retval >> 2] = $152; //@line 21705
  ___async_unwind = 0; //@line 21706
  HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 21707
  $153 = $ReallocAsyncCtx3 + 4 | 0; //@line 21708
  HEAP32[$153 >> 2] = $2; //@line 21709
  $154 = $ReallocAsyncCtx3 + 8 | 0; //@line 21710
  HEAP32[$154 >> 2] = $4; //@line 21711
  $155 = $ReallocAsyncCtx3 + 12 | 0; //@line 21712
  HEAP32[$155 >> 2] = $6; //@line 21713
  $156 = $ReallocAsyncCtx3 + 16 | 0; //@line 21714
  HEAP32[$156 >> 2] = $8; //@line 21715
  $157 = $ReallocAsyncCtx3 + 20 | 0; //@line 21716
  HEAP32[$157 >> 2] = $10; //@line 21717
  $158 = $ReallocAsyncCtx3 + 24 | 0; //@line 21718
  HEAP32[$158 >> 2] = $12; //@line 21719
  $159 = $ReallocAsyncCtx3 + 28 | 0; //@line 21720
  HEAP32[$159 >> 2] = $14; //@line 21721
  $160 = $ReallocAsyncCtx3 + 32 | 0; //@line 21722
  HEAP32[$160 >> 2] = $16; //@line 21723
  $161 = $ReallocAsyncCtx3 + 36 | 0; //@line 21724
  HEAP32[$161 >> 2] = $18; //@line 21725
  $162 = $ReallocAsyncCtx3 + 40 | 0; //@line 21726
  HEAP32[$162 >> 2] = $20; //@line 21727
  $163 = $ReallocAsyncCtx3 + 44 | 0; //@line 21728
  HEAP32[$163 >> 2] = $22; //@line 21729
  $164 = $ReallocAsyncCtx3 + 48 | 0; //@line 21730
  HEAP8[$164 >> 0] = $24; //@line 21731
  $165 = $ReallocAsyncCtx3 + 49 | 0; //@line 21732
  HEAP8[$165 >> 0] = $151; //@line 21733
  $166 = $ReallocAsyncCtx3 + 50 | 0; //@line 21734
  HEAP8[$166 >> 0] = $150; //@line 21735
  $167 = $ReallocAsyncCtx3 + 52 | 0; //@line 21736
  HEAP32[$167 >> 2] = $26; //@line 21737
  $168 = $ReallocAsyncCtx3 + 56 | 0; //@line 21738
  HEAP32[$168 >> 2] = $28; //@line 21739
  $169 = $ReallocAsyncCtx3 + 60 | 0; //@line 21740
  HEAP32[$169 >> 2] = $30; //@line 21741
  $170 = $ReallocAsyncCtx3 + 64 | 0; //@line 21742
  HEAP32[$170 >> 2] = $32; //@line 21743
  $171 = $ReallocAsyncCtx3 + 68 | 0; //@line 21744
  HEAP32[$171 >> 2] = $34; //@line 21745
  $172 = $ReallocAsyncCtx3 + 72 | 0; //@line 21746
  HEAP32[$172 >> 2] = $36; //@line 21747
  $173 = $ReallocAsyncCtx3 + 76 | 0; //@line 21748
  HEAP32[$173 >> 2] = $38; //@line 21749
  $174 = $ReallocAsyncCtx3 + 80 | 0; //@line 21750
  HEAP32[$174 >> 2] = $44; //@line 21751
  $175 = $ReallocAsyncCtx3 + 84 | 0; //@line 21752
  HEAP32[$175 >> 2] = $46; //@line 21753
  $176 = $ReallocAsyncCtx3 + 88 | 0; //@line 21754
  HEAP32[$176 >> 2] = $48; //@line 21755
  $177 = $ReallocAsyncCtx3 + 92 | 0; //@line 21756
  HEAP32[$177 >> 2] = $50; //@line 21757
  $178 = $ReallocAsyncCtx3 + 96 | 0; //@line 21758
  HEAP8[$178 >> 0] = $52; //@line 21759
  $179 = $ReallocAsyncCtx3 + 100 | 0; //@line 21760
  HEAP32[$179 >> 2] = $54; //@line 21761
  sp = STACKTOP; //@line 21762
  STACKTOP = sp; //@line 21763
  return;
 }
 $58 = $24 + 1 << 24 >> 24; //@line 21765
 HEAP32[$28 >> 2] = 0; //@line 21766
 HEAP32[$28 + 4 >> 2] = 0; //@line 21766
 HEAP32[$28 + 8 >> 2] = 0; //@line 21766
 HEAP32[$28 + 12 >> 2] = 0; //@line 21766
 HEAP32[$28 + 16 >> 2] = 0; //@line 21766
 HEAP32[$$byval_copy >> 2] = HEAP32[$30 >> 2]; //@line 21767
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$30 + 4 >> 2]; //@line 21767
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$30 + 8 >> 2]; //@line 21767
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$30 + 12 >> 2]; //@line 21767
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$30 + 16 >> 2]; //@line 21767
 __ZN13SocketAddressC2E10nsapi_addrt($2, $$byval_copy, 0); //@line 21768
 do {
  if ($40 << 24 >> 24) {
   if (($58 & 255) > 9) {
    if (!($42 << 24 >> 24)) {
     break;
    } else {
     $$1107 = 0; //@line 21778
     $62 = 0; //@line 21778
    }
   } else {
    if (($58 & 255) < 5) {
     $$1107 = $42; //@line 21783
     $62 = $58; //@line 21783
    } else {
     $97 = 608 + ((($58 & 255) + -5 | 0) * 20 | 0) | 0; //@line 21787
     HEAP32[$$byval_copy24 >> 2] = HEAP32[$97 >> 2]; //@line 21788
     HEAP32[$$byval_copy24 + 4 >> 2] = HEAP32[$97 + 4 >> 2]; //@line 21788
     HEAP32[$$byval_copy24 + 8 >> 2] = HEAP32[$97 + 8 >> 2]; //@line 21788
     HEAP32[$$byval_copy24 + 12 >> 2] = HEAP32[$97 + 12 >> 2]; //@line 21788
     HEAP32[$$byval_copy24 + 16 >> 2] = HEAP32[$97 + 16 >> 2]; //@line 21788
     __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy24); //@line 21789
     __ZN13SocketAddress8set_portEt($2, 53); //@line 21790
     HEAP8[$4 >> 0] = 0; //@line 21791
     HEAP8[$6 >> 0] = 1; //@line 21792
     HEAP8[$8 >> 0] = 1; //@line 21793
     HEAP8[$10 >> 0] = 0; //@line 21794
     HEAP8[$12 >> 0] = 0; //@line 21795
     HEAP8[$14 >> 0] = 1; //@line 21796
     HEAP8[$16 >> 0] = 0; //@line 21797
     HEAP8[$16 + 1 >> 0] = 0; //@line 21797
     HEAP8[$16 + 2 >> 0] = 0; //@line 21797
     HEAP8[$16 + 3 >> 0] = 0; //@line 21797
     HEAP8[$16 + 4 >> 0] = 0; //@line 21797
     HEAP8[$16 + 5 >> 0] = 0; //@line 21797
     if (!(HEAP8[$18 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $50; //@line 21801
     } else {
      $$048$i = $18; //@line 21803
      $$sroa$0$0$in47$i = $50; //@line 21803
      while (1) {
       $100 = _strcspn($$048$i, 4016) | 0; //@line 21805
       $102 = $$sroa$0$0$in47$i + 1 | 0; //@line 21807
       HEAP8[$$sroa$0$0$in47$i >> 0] = $100; //@line 21808
       $103 = $100 & 255; //@line 21809
       _memcpy($102 | 0, $$048$i | 0, $103 | 0) | 0; //@line 21810
       $104 = $102 + $103 | 0; //@line 21811
       $$048$i = $$048$i + ($100 + ((HEAP8[$$048$i + $100 >> 0] | 0) == 46 & 1)) | 0; //@line 21817
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $104; //@line 21821
        break;
       } else {
        $$sroa$0$0$in47$i = $104; //@line 21824
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 21829
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 21831
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $52; //@line 21833
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 21835
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 21838
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 21840
     $120 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($36, $2, $4, $$sroa$0$0$in$lcssa$i + 5 - $54 | 0) | 0; //@line 21841
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 21844
      $121 = $ReallocAsyncCtx4 + 4 | 0; //@line 21845
      HEAP32[$121 >> 2] = $2; //@line 21846
      $122 = $ReallocAsyncCtx4 + 8 | 0; //@line 21847
      HEAP32[$122 >> 2] = $4; //@line 21848
      $123 = $ReallocAsyncCtx4 + 12 | 0; //@line 21849
      HEAP32[$123 >> 2] = $6; //@line 21850
      $124 = $ReallocAsyncCtx4 + 16 | 0; //@line 21851
      HEAP32[$124 >> 2] = $8; //@line 21852
      $125 = $ReallocAsyncCtx4 + 20 | 0; //@line 21853
      HEAP32[$125 >> 2] = $10; //@line 21854
      $126 = $ReallocAsyncCtx4 + 24 | 0; //@line 21855
      HEAP32[$126 >> 2] = $12; //@line 21856
      $127 = $ReallocAsyncCtx4 + 28 | 0; //@line 21857
      HEAP32[$127 >> 2] = $14; //@line 21858
      $128 = $ReallocAsyncCtx4 + 32 | 0; //@line 21859
      HEAP32[$128 >> 2] = $16; //@line 21860
      $129 = $ReallocAsyncCtx4 + 36 | 0; //@line 21861
      HEAP32[$129 >> 2] = $18; //@line 21862
      $130 = $ReallocAsyncCtx4 + 40 | 0; //@line 21863
      HEAP32[$130 >> 2] = $20; //@line 21864
      $131 = $ReallocAsyncCtx4 + 44 | 0; //@line 21865
      HEAP32[$131 >> 2] = $22; //@line 21866
      $132 = $ReallocAsyncCtx4 + 48 | 0; //@line 21867
      HEAP8[$132 >> 0] = $58; //@line 21868
      $133 = $ReallocAsyncCtx4 + 52 | 0; //@line 21869
      HEAP32[$133 >> 2] = $26; //@line 21870
      $134 = $ReallocAsyncCtx4 + 56 | 0; //@line 21871
      HEAP32[$134 >> 2] = $28; //@line 21872
      $135 = $ReallocAsyncCtx4 + 60 | 0; //@line 21873
      HEAP32[$135 >> 2] = $30; //@line 21874
      $136 = $ReallocAsyncCtx4 + 64 | 0; //@line 21875
      HEAP32[$136 >> 2] = $32; //@line 21876
      $137 = $ReallocAsyncCtx4 + 68 | 0; //@line 21877
      HEAP32[$137 >> 2] = $34; //@line 21878
      $138 = $ReallocAsyncCtx4 + 72 | 0; //@line 21879
      HEAP32[$138 >> 2] = $36; //@line 21880
      $139 = $ReallocAsyncCtx4 + 76 | 0; //@line 21881
      HEAP32[$139 >> 2] = $38; //@line 21882
      $140 = $ReallocAsyncCtx4 + 80 | 0; //@line 21883
      HEAP8[$140 >> 0] = $40; //@line 21884
      $141 = $ReallocAsyncCtx4 + 81 | 0; //@line 21885
      HEAP8[$141 >> 0] = $42; //@line 21886
      $142 = $ReallocAsyncCtx4 + 84 | 0; //@line 21887
      HEAP32[$142 >> 2] = $44; //@line 21888
      $143 = $ReallocAsyncCtx4 + 88 | 0; //@line 21889
      HEAP32[$143 >> 2] = $46; //@line 21890
      $144 = $ReallocAsyncCtx4 + 92 | 0; //@line 21891
      HEAP32[$144 >> 2] = $48; //@line 21892
      $145 = $ReallocAsyncCtx4 + 96 | 0; //@line 21893
      HEAP32[$145 >> 2] = $50; //@line 21894
      $146 = $ReallocAsyncCtx4 + 100 | 0; //@line 21895
      HEAP8[$146 >> 0] = $52; //@line 21896
      $147 = $ReallocAsyncCtx4 + 104 | 0; //@line 21897
      HEAP32[$147 >> 2] = $54; //@line 21898
      sp = STACKTOP; //@line 21899
      STACKTOP = sp; //@line 21900
      return;
     }
     HEAP32[___async_retval >> 2] = $120; //@line 21903
     ___async_unwind = 0; //@line 21904
     HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 21905
     $121 = $ReallocAsyncCtx4 + 4 | 0; //@line 21906
     HEAP32[$121 >> 2] = $2; //@line 21907
     $122 = $ReallocAsyncCtx4 + 8 | 0; //@line 21908
     HEAP32[$122 >> 2] = $4; //@line 21909
     $123 = $ReallocAsyncCtx4 + 12 | 0; //@line 21910
     HEAP32[$123 >> 2] = $6; //@line 21911
     $124 = $ReallocAsyncCtx4 + 16 | 0; //@line 21912
     HEAP32[$124 >> 2] = $8; //@line 21913
     $125 = $ReallocAsyncCtx4 + 20 | 0; //@line 21914
     HEAP32[$125 >> 2] = $10; //@line 21915
     $126 = $ReallocAsyncCtx4 + 24 | 0; //@line 21916
     HEAP32[$126 >> 2] = $12; //@line 21917
     $127 = $ReallocAsyncCtx4 + 28 | 0; //@line 21918
     HEAP32[$127 >> 2] = $14; //@line 21919
     $128 = $ReallocAsyncCtx4 + 32 | 0; //@line 21920
     HEAP32[$128 >> 2] = $16; //@line 21921
     $129 = $ReallocAsyncCtx4 + 36 | 0; //@line 21922
     HEAP32[$129 >> 2] = $18; //@line 21923
     $130 = $ReallocAsyncCtx4 + 40 | 0; //@line 21924
     HEAP32[$130 >> 2] = $20; //@line 21925
     $131 = $ReallocAsyncCtx4 + 44 | 0; //@line 21926
     HEAP32[$131 >> 2] = $22; //@line 21927
     $132 = $ReallocAsyncCtx4 + 48 | 0; //@line 21928
     HEAP8[$132 >> 0] = $58; //@line 21929
     $133 = $ReallocAsyncCtx4 + 52 | 0; //@line 21930
     HEAP32[$133 >> 2] = $26; //@line 21931
     $134 = $ReallocAsyncCtx4 + 56 | 0; //@line 21932
     HEAP32[$134 >> 2] = $28; //@line 21933
     $135 = $ReallocAsyncCtx4 + 60 | 0; //@line 21934
     HEAP32[$135 >> 2] = $30; //@line 21935
     $136 = $ReallocAsyncCtx4 + 64 | 0; //@line 21936
     HEAP32[$136 >> 2] = $32; //@line 21937
     $137 = $ReallocAsyncCtx4 + 68 | 0; //@line 21938
     HEAP32[$137 >> 2] = $34; //@line 21939
     $138 = $ReallocAsyncCtx4 + 72 | 0; //@line 21940
     HEAP32[$138 >> 2] = $36; //@line 21941
     $139 = $ReallocAsyncCtx4 + 76 | 0; //@line 21942
     HEAP32[$139 >> 2] = $38; //@line 21943
     $140 = $ReallocAsyncCtx4 + 80 | 0; //@line 21944
     HEAP8[$140 >> 0] = $40; //@line 21945
     $141 = $ReallocAsyncCtx4 + 81 | 0; //@line 21946
     HEAP8[$141 >> 0] = $42; //@line 21947
     $142 = $ReallocAsyncCtx4 + 84 | 0; //@line 21948
     HEAP32[$142 >> 2] = $44; //@line 21949
     $143 = $ReallocAsyncCtx4 + 88 | 0; //@line 21950
     HEAP32[$143 >> 2] = $46; //@line 21951
     $144 = $ReallocAsyncCtx4 + 92 | 0; //@line 21952
     HEAP32[$144 >> 2] = $48; //@line 21953
     $145 = $ReallocAsyncCtx4 + 96 | 0; //@line 21954
     HEAP32[$145 >> 2] = $50; //@line 21955
     $146 = $ReallocAsyncCtx4 + 100 | 0; //@line 21956
     HEAP8[$146 >> 0] = $52; //@line 21957
     $147 = $ReallocAsyncCtx4 + 104 | 0; //@line 21958
     HEAP32[$147 >> 2] = $54; //@line 21959
     sp = STACKTOP; //@line 21960
     STACKTOP = sp; //@line 21961
     return;
    }
   }
   $65 = HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0; //@line 21967
   $ReallocAsyncCtx = _emscripten_realloc_async_context(112) | 0; //@line 21968
   $66 = FUNCTION_TABLE_iiii[$65 & 31]($22, $62 & 255, $2) | 0; //@line 21969
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 21972
    $67 = $ReallocAsyncCtx + 4 | 0; //@line 21973
    HEAP8[$67 >> 0] = $$1107; //@line 21974
    $68 = $ReallocAsyncCtx + 8 | 0; //@line 21975
    HEAP32[$68 >> 2] = $2; //@line 21976
    $69 = $ReallocAsyncCtx + 12 | 0; //@line 21977
    HEAP8[$69 >> 0] = $62; //@line 21978
    $70 = $ReallocAsyncCtx + 16 | 0; //@line 21979
    HEAP32[$70 >> 2] = $4; //@line 21980
    $71 = $ReallocAsyncCtx + 20 | 0; //@line 21981
    HEAP32[$71 >> 2] = $6; //@line 21982
    $72 = $ReallocAsyncCtx + 24 | 0; //@line 21983
    HEAP32[$72 >> 2] = $8; //@line 21984
    $73 = $ReallocAsyncCtx + 28 | 0; //@line 21985
    HEAP32[$73 >> 2] = $10; //@line 21986
    $74 = $ReallocAsyncCtx + 32 | 0; //@line 21987
    HEAP32[$74 >> 2] = $12; //@line 21988
    $75 = $ReallocAsyncCtx + 36 | 0; //@line 21989
    HEAP32[$75 >> 2] = $14; //@line 21990
    $76 = $ReallocAsyncCtx + 40 | 0; //@line 21991
    HEAP32[$76 >> 2] = $16; //@line 21992
    $77 = $ReallocAsyncCtx + 44 | 0; //@line 21993
    HEAP32[$77 >> 2] = $18; //@line 21994
    $78 = $ReallocAsyncCtx + 48 | 0; //@line 21995
    HEAP32[$78 >> 2] = $20; //@line 21996
    $79 = $ReallocAsyncCtx + 52 | 0; //@line 21997
    HEAP32[$79 >> 2] = $22; //@line 21998
    $80 = $ReallocAsyncCtx + 56 | 0; //@line 21999
    HEAP32[$80 >> 2] = $26; //@line 22000
    $81 = $ReallocAsyncCtx + 60 | 0; //@line 22001
    HEAP32[$81 >> 2] = $28; //@line 22002
    $82 = $ReallocAsyncCtx + 64 | 0; //@line 22003
    HEAP32[$82 >> 2] = $30; //@line 22004
    $83 = $ReallocAsyncCtx + 68 | 0; //@line 22005
    HEAP32[$83 >> 2] = $36; //@line 22006
    $84 = $ReallocAsyncCtx + 72 | 0; //@line 22007
    HEAP32[$84 >> 2] = $34; //@line 22008
    $85 = $ReallocAsyncCtx + 76 | 0; //@line 22009
    HEAP32[$85 >> 2] = $32; //@line 22010
    $86 = $ReallocAsyncCtx + 80 | 0; //@line 22011
    HEAP8[$86 >> 0] = $40; //@line 22012
    $87 = $ReallocAsyncCtx + 84 | 0; //@line 22013
    HEAP32[$87 >> 2] = $44; //@line 22014
    $88 = $ReallocAsyncCtx + 88 | 0; //@line 22015
    HEAP32[$88 >> 2] = $46; //@line 22016
    $89 = $ReallocAsyncCtx + 92 | 0; //@line 22017
    HEAP32[$89 >> 2] = $48; //@line 22018
    $90 = $ReallocAsyncCtx + 96 | 0; //@line 22019
    HEAP32[$90 >> 2] = $38; //@line 22020
    $91 = $ReallocAsyncCtx + 100 | 0; //@line 22021
    HEAP32[$91 >> 2] = $50; //@line 22022
    $92 = $ReallocAsyncCtx + 104 | 0; //@line 22023
    HEAP8[$92 >> 0] = $52; //@line 22024
    $93 = $ReallocAsyncCtx + 108 | 0; //@line 22025
    HEAP32[$93 >> 2] = $54; //@line 22026
    sp = STACKTOP; //@line 22027
    STACKTOP = sp; //@line 22028
    return;
   }
   HEAP32[___async_retval >> 2] = $66; //@line 22031
   ___async_unwind = 0; //@line 22032
   HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 22033
   $67 = $ReallocAsyncCtx + 4 | 0; //@line 22034
   HEAP8[$67 >> 0] = $$1107; //@line 22035
   $68 = $ReallocAsyncCtx + 8 | 0; //@line 22036
   HEAP32[$68 >> 2] = $2; //@line 22037
   $69 = $ReallocAsyncCtx + 12 | 0; //@line 22038
   HEAP8[$69 >> 0] = $62; //@line 22039
   $70 = $ReallocAsyncCtx + 16 | 0; //@line 22040
   HEAP32[$70 >> 2] = $4; //@line 22041
   $71 = $ReallocAsyncCtx + 20 | 0; //@line 22042
   HEAP32[$71 >> 2] = $6; //@line 22043
   $72 = $ReallocAsyncCtx + 24 | 0; //@line 22044
   HEAP32[$72 >> 2] = $8; //@line 22045
   $73 = $ReallocAsyncCtx + 28 | 0; //@line 22046
   HEAP32[$73 >> 2] = $10; //@line 22047
   $74 = $ReallocAsyncCtx + 32 | 0; //@line 22048
   HEAP32[$74 >> 2] = $12; //@line 22049
   $75 = $ReallocAsyncCtx + 36 | 0; //@line 22050
   HEAP32[$75 >> 2] = $14; //@line 22051
   $76 = $ReallocAsyncCtx + 40 | 0; //@line 22052
   HEAP32[$76 >> 2] = $16; //@line 22053
   $77 = $ReallocAsyncCtx + 44 | 0; //@line 22054
   HEAP32[$77 >> 2] = $18; //@line 22055
   $78 = $ReallocAsyncCtx + 48 | 0; //@line 22056
   HEAP32[$78 >> 2] = $20; //@line 22057
   $79 = $ReallocAsyncCtx + 52 | 0; //@line 22058
   HEAP32[$79 >> 2] = $22; //@line 22059
   $80 = $ReallocAsyncCtx + 56 | 0; //@line 22060
   HEAP32[$80 >> 2] = $26; //@line 22061
   $81 = $ReallocAsyncCtx + 60 | 0; //@line 22062
   HEAP32[$81 >> 2] = $28; //@line 22063
   $82 = $ReallocAsyncCtx + 64 | 0; //@line 22064
   HEAP32[$82 >> 2] = $30; //@line 22065
   $83 = $ReallocAsyncCtx + 68 | 0; //@line 22066
   HEAP32[$83 >> 2] = $36; //@line 22067
   $84 = $ReallocAsyncCtx + 72 | 0; //@line 22068
   HEAP32[$84 >> 2] = $34; //@line 22069
   $85 = $ReallocAsyncCtx + 76 | 0; //@line 22070
   HEAP32[$85 >> 2] = $32; //@line 22071
   $86 = $ReallocAsyncCtx + 80 | 0; //@line 22072
   HEAP8[$86 >> 0] = $40; //@line 22073
   $87 = $ReallocAsyncCtx + 84 | 0; //@line 22074
   HEAP32[$87 >> 2] = $44; //@line 22075
   $88 = $ReallocAsyncCtx + 88 | 0; //@line 22076
   HEAP32[$88 >> 2] = $46; //@line 22077
   $89 = $ReallocAsyncCtx + 92 | 0; //@line 22078
   HEAP32[$89 >> 2] = $48; //@line 22079
   $90 = $ReallocAsyncCtx + 96 | 0; //@line 22080
   HEAP32[$90 >> 2] = $38; //@line 22081
   $91 = $ReallocAsyncCtx + 100 | 0; //@line 22082
   HEAP32[$91 >> 2] = $50; //@line 22083
   $92 = $ReallocAsyncCtx + 104 | 0; //@line 22084
   HEAP8[$92 >> 0] = $52; //@line 22085
   $93 = $ReallocAsyncCtx + 108 | 0; //@line 22086
   HEAP32[$93 >> 2] = $54; //@line 22087
   sp = STACKTOP; //@line 22088
   STACKTOP = sp; //@line 22089
   return;
  }
 } while (0);
 _free($4); //@line 22092
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 22093
 $181 = __ZN6Socket5closeEv($34) | 0; //@line 22094
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 22097
  $182 = $ReallocAsyncCtx6 + 4 | 0; //@line 22098
  HEAP32[$182 >> 2] = -3009; //@line 22099
  $183 = $ReallocAsyncCtx6 + 8 | 0; //@line 22100
  HEAP32[$183 >> 2] = $36; //@line 22101
  $184 = $ReallocAsyncCtx6 + 12 | 0; //@line 22102
  HEAP32[$184 >> 2] = $38; //@line 22103
  sp = STACKTOP; //@line 22104
  STACKTOP = sp; //@line 22105
  return;
 }
 HEAP32[___async_retval >> 2] = $181; //@line 22108
 ___async_unwind = 0; //@line 22109
 HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 22110
 $182 = $ReallocAsyncCtx6 + 4 | 0; //@line 22111
 HEAP32[$182 >> 2] = -3009; //@line 22112
 $183 = $ReallocAsyncCtx6 + 8 | 0; //@line 22113
 HEAP32[$183 >> 2] = $36; //@line 22114
 $184 = $ReallocAsyncCtx6 + 12 | 0; //@line 22115
 HEAP32[$184 >> 2] = $38; //@line 22116
 sp = STACKTOP; //@line 22117
 STACKTOP = sp; //@line 22118
 return;
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 10112
 STACKTOP = STACKTOP + 64 | 0; //@line 10113
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 10113
 $5 = sp + 16 | 0; //@line 10114
 $6 = sp; //@line 10115
 $7 = sp + 24 | 0; //@line 10116
 $8 = sp + 8 | 0; //@line 10117
 $9 = sp + 20 | 0; //@line 10118
 HEAP32[$5 >> 2] = $1; //@line 10119
 $10 = ($0 | 0) != 0; //@line 10120
 $11 = $7 + 40 | 0; //@line 10121
 $12 = $11; //@line 10122
 $13 = $7 + 39 | 0; //@line 10123
 $14 = $8 + 4 | 0; //@line 10124
 $$0243 = 0; //@line 10125
 $$0247 = 0; //@line 10125
 $$0269 = 0; //@line 10125
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 10134
     $$1248 = -1; //@line 10135
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 10139
     break;
    }
   } else {
    $$1248 = $$0247; //@line 10143
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 10146
  $21 = HEAP8[$20 >> 0] | 0; //@line 10147
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 10150
   break;
  } else {
   $23 = $21; //@line 10153
   $25 = $20; //@line 10153
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 10158
     $27 = $25; //@line 10158
     label = 9; //@line 10159
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 10164
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 10171
   HEAP32[$5 >> 2] = $24; //@line 10172
   $23 = HEAP8[$24 >> 0] | 0; //@line 10174
   $25 = $24; //@line 10174
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 10179
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 10184
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 10187
     $27 = $27 + 2 | 0; //@line 10188
     HEAP32[$5 >> 2] = $27; //@line 10189
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 10196
      break;
     } else {
      $$0249303 = $30; //@line 10193
      label = 9; //@line 10194
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 10204
  if ($10) {
   _out_670($0, $20, $36); //@line 10206
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 10210
   $$0247 = $$1248; //@line 10210
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 10218
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 10219
  if ($43) {
   $$0253 = -1; //@line 10221
   $$1270 = $$0269; //@line 10221
   $$sink = 1; //@line 10221
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 10231
    $$1270 = 1; //@line 10231
    $$sink = 3; //@line 10231
   } else {
    $$0253 = -1; //@line 10233
    $$1270 = $$0269; //@line 10233
    $$sink = 1; //@line 10233
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 10236
  HEAP32[$5 >> 2] = $51; //@line 10237
  $52 = HEAP8[$51 >> 0] | 0; //@line 10238
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 10240
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 10247
   $$lcssa291 = $52; //@line 10247
   $$lcssa292 = $51; //@line 10247
  } else {
   $$0262309 = 0; //@line 10249
   $60 = $52; //@line 10249
   $65 = $51; //@line 10249
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 10254
    $64 = $65 + 1 | 0; //@line 10255
    HEAP32[$5 >> 2] = $64; //@line 10256
    $66 = HEAP8[$64 >> 0] | 0; //@line 10257
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 10259
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 10266
     $$lcssa291 = $66; //@line 10266
     $$lcssa292 = $64; //@line 10266
     break;
    } else {
     $$0262309 = $63; //@line 10269
     $60 = $66; //@line 10269
     $65 = $64; //@line 10269
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 10281
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 10283
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 10288
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10293
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10305
     $$2271 = 1; //@line 10305
     $storemerge274 = $79 + 3 | 0; //@line 10305
    } else {
     label = 23; //@line 10307
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 10311
    if ($$1270 | 0) {
     $$0 = -1; //@line 10314
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10329
     $106 = HEAP32[$105 >> 2] | 0; //@line 10330
     HEAP32[$2 >> 2] = $105 + 4; //@line 10332
     $363 = $106; //@line 10333
    } else {
     $363 = 0; //@line 10335
    }
    $$0259 = $363; //@line 10339
    $$2271 = 0; //@line 10339
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 10339
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 10341
   $109 = ($$0259 | 0) < 0; //@line 10342
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 10347
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 10347
   $$3272 = $$2271; //@line 10347
   $115 = $storemerge274; //@line 10347
  } else {
   $112 = _getint_671($5) | 0; //@line 10349
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 10352
    break;
   }
   $$1260 = $112; //@line 10356
   $$1263 = $$0262$lcssa; //@line 10356
   $$3272 = $$1270; //@line 10356
   $115 = HEAP32[$5 >> 2] | 0; //@line 10356
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 10367
     $156 = _getint_671($5) | 0; //@line 10368
     $$0254 = $156; //@line 10370
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 10370
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 10379
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 10384
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10389
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10396
      $144 = $125 + 4 | 0; //@line 10400
      HEAP32[$5 >> 2] = $144; //@line 10401
      $$0254 = $140; //@line 10402
      $$pre345 = $144; //@line 10402
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 10408
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10423
     $152 = HEAP32[$151 >> 2] | 0; //@line 10424
     HEAP32[$2 >> 2] = $151 + 4; //@line 10426
     $364 = $152; //@line 10427
    } else {
     $364 = 0; //@line 10429
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 10432
    HEAP32[$5 >> 2] = $154; //@line 10433
    $$0254 = $364; //@line 10434
    $$pre345 = $154; //@line 10434
   } else {
    $$0254 = -1; //@line 10436
    $$pre345 = $115; //@line 10436
   }
  } while (0);
  $$0252 = 0; //@line 10439
  $158 = $$pre345; //@line 10439
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 10446
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 10449
   HEAP32[$5 >> 2] = $158; //@line 10450
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (3484 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 10455
   $168 = $167 & 255; //@line 10456
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 10460
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 10467
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 10471
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 10475
     break L1;
    } else {
     label = 50; //@line 10478
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 10483
     $176 = $3 + ($$0253 << 3) | 0; //@line 10485
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 10490
     $182 = $6; //@line 10491
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 10493
     HEAP32[$182 + 4 >> 2] = $181; //@line 10496
     label = 50; //@line 10497
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 10501
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 10504
    $187 = HEAP32[$5 >> 2] | 0; //@line 10506
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 10510
   if ($10) {
    $187 = $158; //@line 10512
   } else {
    $$0243 = 0; //@line 10514
    $$0247 = $$1248; //@line 10514
    $$0269 = $$3272; //@line 10514
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 10520
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 10526
  $196 = $$1263 & -65537; //@line 10529
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 10530
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10538
       $$0243 = 0; //@line 10539
       $$0247 = $$1248; //@line 10539
       $$0269 = $$3272; //@line 10539
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10545
       $$0243 = 0; //@line 10546
       $$0247 = $$1248; //@line 10546
       $$0269 = $$3272; //@line 10546
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 10554
       HEAP32[$208 >> 2] = $$1248; //@line 10556
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10559
       $$0243 = 0; //@line 10560
       $$0247 = $$1248; //@line 10560
       $$0269 = $$3272; //@line 10560
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 10567
       $$0243 = 0; //@line 10568
       $$0247 = $$1248; //@line 10568
       $$0269 = $$3272; //@line 10568
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 10575
       $$0243 = 0; //@line 10576
       $$0247 = $$1248; //@line 10576
       $$0269 = $$3272; //@line 10576
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10582
       $$0243 = 0; //@line 10583
       $$0247 = $$1248; //@line 10583
       $$0269 = $$3272; //@line 10583
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 10591
       HEAP32[$220 >> 2] = $$1248; //@line 10593
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10596
       $$0243 = 0; //@line 10597
       $$0247 = $$1248; //@line 10597
       $$0269 = $$3272; //@line 10597
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 10602
       $$0247 = $$1248; //@line 10602
       $$0269 = $$3272; //@line 10602
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 10612
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 10612
     $$3265 = $$1263$ | 8; //@line 10612
     label = 62; //@line 10613
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 10617
     $$1255 = $$0254; //@line 10617
     $$3265 = $$1263$; //@line 10617
     label = 62; //@line 10618
     break;
    }
   case 111:
    {
     $242 = $6; //@line 10622
     $244 = HEAP32[$242 >> 2] | 0; //@line 10624
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 10627
     $248 = _fmt_o($244, $247, $11) | 0; //@line 10628
     $252 = $12 - $248 | 0; //@line 10632
     $$0228 = $248; //@line 10637
     $$1233 = 0; //@line 10637
     $$1238 = 3948; //@line 10637
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 10637
     $$4266 = $$1263$; //@line 10637
     $281 = $244; //@line 10637
     $283 = $247; //@line 10637
     label = 68; //@line 10638
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 10642
     $258 = HEAP32[$256 >> 2] | 0; //@line 10644
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 10647
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 10650
      $264 = tempRet0; //@line 10651
      $265 = $6; //@line 10652
      HEAP32[$265 >> 2] = $263; //@line 10654
      HEAP32[$265 + 4 >> 2] = $264; //@line 10657
      $$0232 = 1; //@line 10658
      $$0237 = 3948; //@line 10658
      $275 = $263; //@line 10658
      $276 = $264; //@line 10658
      label = 67; //@line 10659
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 10671
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 3948 : 3950 : 3949; //@line 10671
      $275 = $258; //@line 10671
      $276 = $261; //@line 10671
      label = 67; //@line 10672
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 10678
     $$0232 = 0; //@line 10684
     $$0237 = 3948; //@line 10684
     $275 = HEAP32[$197 >> 2] | 0; //@line 10684
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 10684
     label = 67; //@line 10685
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 10696
     $$2 = $13; //@line 10697
     $$2234 = 0; //@line 10697
     $$2239 = 3948; //@line 10697
     $$2251 = $11; //@line 10697
     $$5 = 1; //@line 10697
     $$6268 = $196; //@line 10697
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 10704
     label = 72; //@line 10705
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 10709
     $$1 = $302 | 0 ? $302 : 3958; //@line 10712
     label = 72; //@line 10713
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 10723
     HEAP32[$14 >> 2] = 0; //@line 10724
     HEAP32[$6 >> 2] = $8; //@line 10725
     $$4258354 = -1; //@line 10726
     $365 = $8; //@line 10726
     label = 76; //@line 10727
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 10731
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 10734
      $$0240$lcssa356 = 0; //@line 10735
      label = 85; //@line 10736
     } else {
      $$4258354 = $$0254; //@line 10738
      $365 = $$pre348; //@line 10738
      label = 76; //@line 10739
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 10746
     $$0247 = $$1248; //@line 10746
     $$0269 = $$3272; //@line 10746
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 10751
     $$2234 = 0; //@line 10751
     $$2239 = 3948; //@line 10751
     $$2251 = $11; //@line 10751
     $$5 = $$0254; //@line 10751
     $$6268 = $$1263$; //@line 10751
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 10757
    $227 = $6; //@line 10758
    $229 = HEAP32[$227 >> 2] | 0; //@line 10760
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 10763
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 10765
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 10771
    $$0228 = $234; //@line 10776
    $$1233 = $or$cond278 ? 0 : 2; //@line 10776
    $$1238 = $or$cond278 ? 3948 : 3948 + ($$1236 >> 4) | 0; //@line 10776
    $$2256 = $$1255; //@line 10776
    $$4266 = $$3265; //@line 10776
    $281 = $229; //@line 10776
    $283 = $232; //@line 10776
    label = 68; //@line 10777
   } else if ((label | 0) == 67) {
    label = 0; //@line 10780
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 10782
    $$1233 = $$0232; //@line 10782
    $$1238 = $$0237; //@line 10782
    $$2256 = $$0254; //@line 10782
    $$4266 = $$1263$; //@line 10782
    $281 = $275; //@line 10782
    $283 = $276; //@line 10782
    label = 68; //@line 10783
   } else if ((label | 0) == 72) {
    label = 0; //@line 10786
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 10787
    $306 = ($305 | 0) == 0; //@line 10788
    $$2 = $$1; //@line 10795
    $$2234 = 0; //@line 10795
    $$2239 = 3948; //@line 10795
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 10795
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 10795
    $$6268 = $196; //@line 10795
   } else if ((label | 0) == 76) {
    label = 0; //@line 10798
    $$0229316 = $365; //@line 10799
    $$0240315 = 0; //@line 10799
    $$1244314 = 0; //@line 10799
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 10801
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 10804
      $$2245 = $$1244314; //@line 10804
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 10807
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 10813
      $$2245 = $320; //@line 10813
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 10817
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 10820
      $$0240315 = $325; //@line 10820
      $$1244314 = $320; //@line 10820
     } else {
      $$0240$lcssa = $325; //@line 10822
      $$2245 = $320; //@line 10822
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 10828
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 10831
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 10834
     label = 85; //@line 10835
    } else {
     $$1230327 = $365; //@line 10837
     $$1241326 = 0; //@line 10837
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 10839
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10842
       label = 85; //@line 10843
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 10846
      $$1241326 = $331 + $$1241326 | 0; //@line 10847
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10850
       label = 85; //@line 10851
       break L97;
      }
      _out_670($0, $9, $331); //@line 10855
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10860
       label = 85; //@line 10861
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 10858
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 10869
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 10875
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 10877
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 10882
   $$2 = $or$cond ? $$0228 : $11; //@line 10887
   $$2234 = $$1233; //@line 10887
   $$2239 = $$1238; //@line 10887
   $$2251 = $11; //@line 10887
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 10887
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 10887
  } else if ((label | 0) == 85) {
   label = 0; //@line 10890
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 10892
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 10895
   $$0247 = $$1248; //@line 10895
   $$0269 = $$3272; //@line 10895
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 10900
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 10902
  $345 = $$$5 + $$2234 | 0; //@line 10903
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 10905
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 10906
  _out_670($0, $$2239, $$2234); //@line 10907
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 10909
  _pad_676($0, 48, $$$5, $343, 0); //@line 10910
  _out_670($0, $$2, $343); //@line 10911
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 10913
  $$0243 = $$2261; //@line 10914
  $$0247 = $$1248; //@line 10914
  $$0269 = $$3272; //@line 10914
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 10922
    } else {
     $$2242302 = 1; //@line 10924
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 10927
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 10930
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 10934
      $356 = $$2242302 + 1 | 0; //@line 10935
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 10938
      } else {
       $$2242$lcssa = $356; //@line 10940
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 10946
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 10952
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 10958
       } else {
        $$0 = 1; //@line 10960
        break;
       }
      }
     } else {
      $$0 = 1; //@line 10965
     }
    }
   } else {
    $$0 = $$1248; //@line 10969
   }
  }
 } while (0);
 STACKTOP = sp; //@line 10973
 return $$0 | 0; //@line 10973
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_58($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$048$i = 0, $$094 = 0, $$097 = 0, $$1107 = 0, $$4$ph = 0, $$4110 = 0, $$byval_copy = 0, $$byval_copy20 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $96 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21072
 STACKTOP = STACKTOP + 48 | 0; //@line 21073
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 21073
 $$byval_copy20 = sp + 20 | 0; //@line 21074
 $$byval_copy = sp; //@line 21075
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21077
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21079
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21081
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21083
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21085
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21087
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21089
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21091
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21093
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21095
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21097
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 21099
 $26 = HEAP8[$0 + 49 >> 0] | 0; //@line 21101
 $28 = HEAP8[$0 + 50 >> 0] | 0; //@line 21103
 $30 = HEAP32[$0 + 52 >> 2] | 0; //@line 21105
 $32 = HEAP32[$0 + 56 >> 2] | 0; //@line 21107
 $34 = HEAP32[$0 + 60 >> 2] | 0; //@line 21109
 $36 = HEAP32[$0 + 64 >> 2] | 0; //@line 21111
 $38 = HEAP32[$0 + 68 >> 2] | 0; //@line 21113
 $40 = HEAP32[$0 + 72 >> 2] | 0; //@line 21115
 $42 = HEAP32[$0 + 76 >> 2] | 0; //@line 21117
 $44 = HEAP32[$0 + 80 >> 2] | 0; //@line 21119
 $46 = HEAP32[$0 + 84 >> 2] | 0; //@line 21121
 $48 = HEAP32[$0 + 88 >> 2] | 0; //@line 21123
 $50 = HEAP32[$0 + 92 >> 2] | 0; //@line 21125
 $52 = HEAP8[$0 + 96 >> 0] | 0; //@line 21127
 $54 = HEAP32[$0 + 100 >> 2] | 0; //@line 21129
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21131
 do {
  if (($AsyncRetVal | 0) == -3001) {
   $$0 = $28; //@line 21136
   $$094 = $26; //@line 21136
   $$097 = $24 + 1 << 24 >> 24; //@line 21136
   label = 2; //@line 21137
  } else {
   if (($AsyncRetVal | 0) < 0) {
    $$4$ph = $AsyncRetVal; //@line 21141
    label = 23; //@line 21142
   } else {
    $150 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($4, 1, $44, $46, $48) | 0; //@line 21144
    if (($150 | 0) <= 0) {
     if (($150 | 0) < 0) {
      $$0 = $28; //@line 21149
      $$094 = $26; //@line 21149
      $$097 = $24; //@line 21149
      label = 2; //@line 21150
      break;
     } else {
      $$4110 = -3009; //@line 21153
      break;
     }
    }
    $152 = HEAP32[$44 >> 2] | 0; //@line 21157
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 21158
    __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($18, $46, $152); //@line 21159
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 146; //@line 21162
     $153 = $ReallocAsyncCtx2 + 4 | 0; //@line 21163
     HEAP32[$153 >> 2] = $150; //@line 21164
     $154 = $ReallocAsyncCtx2 + 8 | 0; //@line 21165
     HEAP32[$154 >> 2] = $36; //@line 21166
     $155 = $ReallocAsyncCtx2 + 12 | 0; //@line 21167
     HEAP32[$155 >> 2] = $30; //@line 21168
     $156 = $ReallocAsyncCtx2 + 16 | 0; //@line 21169
     HEAP32[$156 >> 2] = $4; //@line 21170
     $157 = $ReallocAsyncCtx2 + 20 | 0; //@line 21171
     HEAP32[$157 >> 2] = $38; //@line 21172
     $158 = $ReallocAsyncCtx2 + 24 | 0; //@line 21173
     HEAP32[$158 >> 2] = $40; //@line 21174
     $159 = $ReallocAsyncCtx2 + 28 | 0; //@line 21175
     HEAP32[$159 >> 2] = $42; //@line 21176
     sp = STACKTOP; //@line 21177
     STACKTOP = sp; //@line 21178
     return;
    }
    ___async_unwind = 0; //@line 21180
    HEAP32[$ReallocAsyncCtx2 >> 2] = 146; //@line 21181
    $153 = $ReallocAsyncCtx2 + 4 | 0; //@line 21182
    HEAP32[$153 >> 2] = $150; //@line 21183
    $154 = $ReallocAsyncCtx2 + 8 | 0; //@line 21184
    HEAP32[$154 >> 2] = $36; //@line 21185
    $155 = $ReallocAsyncCtx2 + 12 | 0; //@line 21186
    HEAP32[$155 >> 2] = $30; //@line 21187
    $156 = $ReallocAsyncCtx2 + 16 | 0; //@line 21188
    HEAP32[$156 >> 2] = $4; //@line 21189
    $157 = $ReallocAsyncCtx2 + 20 | 0; //@line 21190
    HEAP32[$157 >> 2] = $38; //@line 21191
    $158 = $ReallocAsyncCtx2 + 24 | 0; //@line 21192
    HEAP32[$158 >> 2] = $40; //@line 21193
    $159 = $ReallocAsyncCtx2 + 28 | 0; //@line 21194
    HEAP32[$159 >> 2] = $42; //@line 21195
    sp = STACKTOP; //@line 21196
    STACKTOP = sp; //@line 21197
    return;
   }
  }
 } while (0);
 do {
  if ((label | 0) == 2) {
   HEAP32[$32 >> 2] = 0; //@line 21203
   HEAP32[$32 + 4 >> 2] = 0; //@line 21203
   HEAP32[$32 + 8 >> 2] = 0; //@line 21203
   HEAP32[$32 + 12 >> 2] = 0; //@line 21203
   HEAP32[$32 + 16 >> 2] = 0; //@line 21203
   HEAP32[$$byval_copy >> 2] = HEAP32[$34 >> 2]; //@line 21204
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$34 + 4 >> 2]; //@line 21204
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$34 + 8 >> 2]; //@line 21204
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$34 + 12 >> 2]; //@line 21204
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$34 + 16 >> 2]; //@line 21204
   __ZN13SocketAddressC2E10nsapi_addrt($2, $$byval_copy, 0); //@line 21205
   if (!($$094 << 24 >> 24)) {
    $$4$ph = -3009; //@line 21208
    label = 23; //@line 21209
   } else {
    if (($$097 & 255) > 9) {
     if (!($$0 << 24 >> 24)) {
      $$4$ph = -3009; //@line 21215
      label = 23; //@line 21216
      break;
     } else {
      $$1107 = 0; //@line 21219
      $61 = 0; //@line 21219
     }
    } else {
     if (($$097 & 255) < 5) {
      $$1107 = $$0; //@line 21224
      $61 = $$097; //@line 21224
     } else {
      $96 = 608 + ((($$097 & 255) + -5 | 0) * 20 | 0) | 0; //@line 21228
      HEAP32[$$byval_copy20 >> 2] = HEAP32[$96 >> 2]; //@line 21229
      HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$96 + 4 >> 2]; //@line 21229
      HEAP32[$$byval_copy20 + 8 >> 2] = HEAP32[$96 + 8 >> 2]; //@line 21229
      HEAP32[$$byval_copy20 + 12 >> 2] = HEAP32[$96 + 12 >> 2]; //@line 21229
      HEAP32[$$byval_copy20 + 16 >> 2] = HEAP32[$96 + 16 >> 2]; //@line 21229
      __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy20); //@line 21230
      __ZN13SocketAddress8set_portEt($2, 53); //@line 21231
      HEAP8[$4 >> 0] = 0; //@line 21232
      HEAP8[$6 >> 0] = 1; //@line 21233
      HEAP8[$8 >> 0] = 1; //@line 21234
      HEAP8[$10 >> 0] = 0; //@line 21235
      HEAP8[$12 >> 0] = 0; //@line 21236
      HEAP8[$14 >> 0] = 1; //@line 21237
      HEAP8[$16 >> 0] = 0; //@line 21238
      HEAP8[$16 + 1 >> 0] = 0; //@line 21238
      HEAP8[$16 + 2 >> 0] = 0; //@line 21238
      HEAP8[$16 + 3 >> 0] = 0; //@line 21238
      HEAP8[$16 + 4 >> 0] = 0; //@line 21238
      HEAP8[$16 + 5 >> 0] = 0; //@line 21238
      if (!(HEAP8[$18 >> 0] | 0)) {
       $$sroa$0$0$in$lcssa$i = $50; //@line 21242
      } else {
       $$048$i = $18; //@line 21244
       $$sroa$0$0$in47$i = $50; //@line 21244
       while (1) {
        $99 = _strcspn($$048$i, 4016) | 0; //@line 21246
        $101 = $$sroa$0$0$in47$i + 1 | 0; //@line 21248
        HEAP8[$$sroa$0$0$in47$i >> 0] = $99; //@line 21249
        $102 = $99 & 255; //@line 21250
        _memcpy($101 | 0, $$048$i | 0, $102 | 0) | 0; //@line 21251
        $103 = $101 + $102 | 0; //@line 21252
        $$048$i = $$048$i + ($99 + ((HEAP8[$$048$i + $99 >> 0] | 0) == 46 & 1)) | 0; //@line 21258
        if (!(HEAP8[$$048$i >> 0] | 0)) {
         $$sroa$0$0$in$lcssa$i = $103; //@line 21262
         break;
        } else {
         $$sroa$0$0$in47$i = $103; //@line 21265
        }
       }
      }
      HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 21270
      HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 21272
      HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $52; //@line 21274
      HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 21276
      HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 21279
      $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 21281
      $119 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($40, $2, $4, $$sroa$0$0$in$lcssa$i + 5 - $54 | 0) | 0; //@line 21282
      if (___async) {
       HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 21285
       $120 = $ReallocAsyncCtx4 + 4 | 0; //@line 21286
       HEAP32[$120 >> 2] = $2; //@line 21287
       $121 = $ReallocAsyncCtx4 + 8 | 0; //@line 21288
       HEAP32[$121 >> 2] = $4; //@line 21289
       $122 = $ReallocAsyncCtx4 + 12 | 0; //@line 21290
       HEAP32[$122 >> 2] = $6; //@line 21291
       $123 = $ReallocAsyncCtx4 + 16 | 0; //@line 21292
       HEAP32[$123 >> 2] = $8; //@line 21293
       $124 = $ReallocAsyncCtx4 + 20 | 0; //@line 21294
       HEAP32[$124 >> 2] = $10; //@line 21295
       $125 = $ReallocAsyncCtx4 + 24 | 0; //@line 21296
       HEAP32[$125 >> 2] = $12; //@line 21297
       $126 = $ReallocAsyncCtx4 + 28 | 0; //@line 21298
       HEAP32[$126 >> 2] = $14; //@line 21299
       $127 = $ReallocAsyncCtx4 + 32 | 0; //@line 21300
       HEAP32[$127 >> 2] = $16; //@line 21301
       $128 = $ReallocAsyncCtx4 + 36 | 0; //@line 21302
       HEAP32[$128 >> 2] = $18; //@line 21303
       $129 = $ReallocAsyncCtx4 + 40 | 0; //@line 21304
       HEAP32[$129 >> 2] = $20; //@line 21305
       $130 = $ReallocAsyncCtx4 + 44 | 0; //@line 21306
       HEAP32[$130 >> 2] = $22; //@line 21307
       $131 = $ReallocAsyncCtx4 + 48 | 0; //@line 21308
       HEAP8[$131 >> 0] = $$097; //@line 21309
       $132 = $ReallocAsyncCtx4 + 52 | 0; //@line 21310
       HEAP32[$132 >> 2] = $30; //@line 21311
       $133 = $ReallocAsyncCtx4 + 56 | 0; //@line 21312
       HEAP32[$133 >> 2] = $32; //@line 21313
       $134 = $ReallocAsyncCtx4 + 60 | 0; //@line 21314
       HEAP32[$134 >> 2] = $34; //@line 21315
       $135 = $ReallocAsyncCtx4 + 64 | 0; //@line 21316
       HEAP32[$135 >> 2] = $36; //@line 21317
       $136 = $ReallocAsyncCtx4 + 68 | 0; //@line 21318
       HEAP32[$136 >> 2] = $38; //@line 21319
       $137 = $ReallocAsyncCtx4 + 72 | 0; //@line 21320
       HEAP32[$137 >> 2] = $40; //@line 21321
       $138 = $ReallocAsyncCtx4 + 76 | 0; //@line 21322
       HEAP32[$138 >> 2] = $42; //@line 21323
       $139 = $ReallocAsyncCtx4 + 80 | 0; //@line 21324
       HEAP8[$139 >> 0] = $$094; //@line 21325
       $140 = $ReallocAsyncCtx4 + 81 | 0; //@line 21326
       HEAP8[$140 >> 0] = $$0; //@line 21327
       $141 = $ReallocAsyncCtx4 + 84 | 0; //@line 21328
       HEAP32[$141 >> 2] = $44; //@line 21329
       $142 = $ReallocAsyncCtx4 + 88 | 0; //@line 21330
       HEAP32[$142 >> 2] = $46; //@line 21331
       $143 = $ReallocAsyncCtx4 + 92 | 0; //@line 21332
       HEAP32[$143 >> 2] = $48; //@line 21333
       $144 = $ReallocAsyncCtx4 + 96 | 0; //@line 21334
       HEAP32[$144 >> 2] = $50; //@line 21335
       $145 = $ReallocAsyncCtx4 + 100 | 0; //@line 21336
       HEAP8[$145 >> 0] = $52; //@line 21337
       $146 = $ReallocAsyncCtx4 + 104 | 0; //@line 21338
       HEAP32[$146 >> 2] = $54; //@line 21339
       sp = STACKTOP; //@line 21340
       STACKTOP = sp; //@line 21341
       return;
      }
      HEAP32[___async_retval >> 2] = $119; //@line 21344
      ___async_unwind = 0; //@line 21345
      HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 21346
      $120 = $ReallocAsyncCtx4 + 4 | 0; //@line 21347
      HEAP32[$120 >> 2] = $2; //@line 21348
      $121 = $ReallocAsyncCtx4 + 8 | 0; //@line 21349
      HEAP32[$121 >> 2] = $4; //@line 21350
      $122 = $ReallocAsyncCtx4 + 12 | 0; //@line 21351
      HEAP32[$122 >> 2] = $6; //@line 21352
      $123 = $ReallocAsyncCtx4 + 16 | 0; //@line 21353
      HEAP32[$123 >> 2] = $8; //@line 21354
      $124 = $ReallocAsyncCtx4 + 20 | 0; //@line 21355
      HEAP32[$124 >> 2] = $10; //@line 21356
      $125 = $ReallocAsyncCtx4 + 24 | 0; //@line 21357
      HEAP32[$125 >> 2] = $12; //@line 21358
      $126 = $ReallocAsyncCtx4 + 28 | 0; //@line 21359
      HEAP32[$126 >> 2] = $14; //@line 21360
      $127 = $ReallocAsyncCtx4 + 32 | 0; //@line 21361
      HEAP32[$127 >> 2] = $16; //@line 21362
      $128 = $ReallocAsyncCtx4 + 36 | 0; //@line 21363
      HEAP32[$128 >> 2] = $18; //@line 21364
      $129 = $ReallocAsyncCtx4 + 40 | 0; //@line 21365
      HEAP32[$129 >> 2] = $20; //@line 21366
      $130 = $ReallocAsyncCtx4 + 44 | 0; //@line 21367
      HEAP32[$130 >> 2] = $22; //@line 21368
      $131 = $ReallocAsyncCtx4 + 48 | 0; //@line 21369
      HEAP8[$131 >> 0] = $$097; //@line 21370
      $132 = $ReallocAsyncCtx4 + 52 | 0; //@line 21371
      HEAP32[$132 >> 2] = $30; //@line 21372
      $133 = $ReallocAsyncCtx4 + 56 | 0; //@line 21373
      HEAP32[$133 >> 2] = $32; //@line 21374
      $134 = $ReallocAsyncCtx4 + 60 | 0; //@line 21375
      HEAP32[$134 >> 2] = $34; //@line 21376
      $135 = $ReallocAsyncCtx4 + 64 | 0; //@line 21377
      HEAP32[$135 >> 2] = $36; //@line 21378
      $136 = $ReallocAsyncCtx4 + 68 | 0; //@line 21379
      HEAP32[$136 >> 2] = $38; //@line 21380
      $137 = $ReallocAsyncCtx4 + 72 | 0; //@line 21381
      HEAP32[$137 >> 2] = $40; //@line 21382
      $138 = $ReallocAsyncCtx4 + 76 | 0; //@line 21383
      HEAP32[$138 >> 2] = $42; //@line 21384
      $139 = $ReallocAsyncCtx4 + 80 | 0; //@line 21385
      HEAP8[$139 >> 0] = $$094; //@line 21386
      $140 = $ReallocAsyncCtx4 + 81 | 0; //@line 21387
      HEAP8[$140 >> 0] = $$0; //@line 21388
      $141 = $ReallocAsyncCtx4 + 84 | 0; //@line 21389
      HEAP32[$141 >> 2] = $44; //@line 21390
      $142 = $ReallocAsyncCtx4 + 88 | 0; //@line 21391
      HEAP32[$142 >> 2] = $46; //@line 21392
      $143 = $ReallocAsyncCtx4 + 92 | 0; //@line 21393
      HEAP32[$143 >> 2] = $48; //@line 21394
      $144 = $ReallocAsyncCtx4 + 96 | 0; //@line 21395
      HEAP32[$144 >> 2] = $50; //@line 21396
      $145 = $ReallocAsyncCtx4 + 100 | 0; //@line 21397
      HEAP8[$145 >> 0] = $52; //@line 21398
      $146 = $ReallocAsyncCtx4 + 104 | 0; //@line 21399
      HEAP32[$146 >> 2] = $54; //@line 21400
      sp = STACKTOP; //@line 21401
      STACKTOP = sp; //@line 21402
      return;
     }
    }
    $64 = HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0; //@line 21408
    $ReallocAsyncCtx = _emscripten_realloc_async_context(112) | 0; //@line 21409
    $65 = FUNCTION_TABLE_iiii[$64 & 31]($22, $61 & 255, $2) | 0; //@line 21410
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 21413
     $66 = $ReallocAsyncCtx + 4 | 0; //@line 21414
     HEAP8[$66 >> 0] = $$1107; //@line 21415
     $67 = $ReallocAsyncCtx + 8 | 0; //@line 21416
     HEAP32[$67 >> 2] = $2; //@line 21417
     $68 = $ReallocAsyncCtx + 12 | 0; //@line 21418
     HEAP8[$68 >> 0] = $61; //@line 21419
     $69 = $ReallocAsyncCtx + 16 | 0; //@line 21420
     HEAP32[$69 >> 2] = $4; //@line 21421
     $70 = $ReallocAsyncCtx + 20 | 0; //@line 21422
     HEAP32[$70 >> 2] = $6; //@line 21423
     $71 = $ReallocAsyncCtx + 24 | 0; //@line 21424
     HEAP32[$71 >> 2] = $8; //@line 21425
     $72 = $ReallocAsyncCtx + 28 | 0; //@line 21426
     HEAP32[$72 >> 2] = $10; //@line 21427
     $73 = $ReallocAsyncCtx + 32 | 0; //@line 21428
     HEAP32[$73 >> 2] = $12; //@line 21429
     $74 = $ReallocAsyncCtx + 36 | 0; //@line 21430
     HEAP32[$74 >> 2] = $14; //@line 21431
     $75 = $ReallocAsyncCtx + 40 | 0; //@line 21432
     HEAP32[$75 >> 2] = $16; //@line 21433
     $76 = $ReallocAsyncCtx + 44 | 0; //@line 21434
     HEAP32[$76 >> 2] = $18; //@line 21435
     $77 = $ReallocAsyncCtx + 48 | 0; //@line 21436
     HEAP32[$77 >> 2] = $20; //@line 21437
     $78 = $ReallocAsyncCtx + 52 | 0; //@line 21438
     HEAP32[$78 >> 2] = $22; //@line 21439
     $79 = $ReallocAsyncCtx + 56 | 0; //@line 21440
     HEAP32[$79 >> 2] = $30; //@line 21441
     $80 = $ReallocAsyncCtx + 60 | 0; //@line 21442
     HEAP32[$80 >> 2] = $32; //@line 21443
     $81 = $ReallocAsyncCtx + 64 | 0; //@line 21444
     HEAP32[$81 >> 2] = $34; //@line 21445
     $82 = $ReallocAsyncCtx + 68 | 0; //@line 21446
     HEAP32[$82 >> 2] = $40; //@line 21447
     $83 = $ReallocAsyncCtx + 72 | 0; //@line 21448
     HEAP32[$83 >> 2] = $38; //@line 21449
     $84 = $ReallocAsyncCtx + 76 | 0; //@line 21450
     HEAP32[$84 >> 2] = $36; //@line 21451
     $85 = $ReallocAsyncCtx + 80 | 0; //@line 21452
     HEAP8[$85 >> 0] = $$094; //@line 21453
     $86 = $ReallocAsyncCtx + 84 | 0; //@line 21454
     HEAP32[$86 >> 2] = $44; //@line 21455
     $87 = $ReallocAsyncCtx + 88 | 0; //@line 21456
     HEAP32[$87 >> 2] = $46; //@line 21457
     $88 = $ReallocAsyncCtx + 92 | 0; //@line 21458
     HEAP32[$88 >> 2] = $48; //@line 21459
     $89 = $ReallocAsyncCtx + 96 | 0; //@line 21460
     HEAP32[$89 >> 2] = $42; //@line 21461
     $90 = $ReallocAsyncCtx + 100 | 0; //@line 21462
     HEAP32[$90 >> 2] = $50; //@line 21463
     $91 = $ReallocAsyncCtx + 104 | 0; //@line 21464
     HEAP8[$91 >> 0] = $52; //@line 21465
     $92 = $ReallocAsyncCtx + 108 | 0; //@line 21466
     HEAP32[$92 >> 2] = $54; //@line 21467
     sp = STACKTOP; //@line 21468
     STACKTOP = sp; //@line 21469
     return;
    }
    HEAP32[___async_retval >> 2] = $65; //@line 21472
    ___async_unwind = 0; //@line 21473
    HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 21474
    $66 = $ReallocAsyncCtx + 4 | 0; //@line 21475
    HEAP8[$66 >> 0] = $$1107; //@line 21476
    $67 = $ReallocAsyncCtx + 8 | 0; //@line 21477
    HEAP32[$67 >> 2] = $2; //@line 21478
    $68 = $ReallocAsyncCtx + 12 | 0; //@line 21479
    HEAP8[$68 >> 0] = $61; //@line 21480
    $69 = $ReallocAsyncCtx + 16 | 0; //@line 21481
    HEAP32[$69 >> 2] = $4; //@line 21482
    $70 = $ReallocAsyncCtx + 20 | 0; //@line 21483
    HEAP32[$70 >> 2] = $6; //@line 21484
    $71 = $ReallocAsyncCtx + 24 | 0; //@line 21485
    HEAP32[$71 >> 2] = $8; //@line 21486
    $72 = $ReallocAsyncCtx + 28 | 0; //@line 21487
    HEAP32[$72 >> 2] = $10; //@line 21488
    $73 = $ReallocAsyncCtx + 32 | 0; //@line 21489
    HEAP32[$73 >> 2] = $12; //@line 21490
    $74 = $ReallocAsyncCtx + 36 | 0; //@line 21491
    HEAP32[$74 >> 2] = $14; //@line 21492
    $75 = $ReallocAsyncCtx + 40 | 0; //@line 21493
    HEAP32[$75 >> 2] = $16; //@line 21494
    $76 = $ReallocAsyncCtx + 44 | 0; //@line 21495
    HEAP32[$76 >> 2] = $18; //@line 21496
    $77 = $ReallocAsyncCtx + 48 | 0; //@line 21497
    HEAP32[$77 >> 2] = $20; //@line 21498
    $78 = $ReallocAsyncCtx + 52 | 0; //@line 21499
    HEAP32[$78 >> 2] = $22; //@line 21500
    $79 = $ReallocAsyncCtx + 56 | 0; //@line 21501
    HEAP32[$79 >> 2] = $30; //@line 21502
    $80 = $ReallocAsyncCtx + 60 | 0; //@line 21503
    HEAP32[$80 >> 2] = $32; //@line 21504
    $81 = $ReallocAsyncCtx + 64 | 0; //@line 21505
    HEAP32[$81 >> 2] = $34; //@line 21506
    $82 = $ReallocAsyncCtx + 68 | 0; //@line 21507
    HEAP32[$82 >> 2] = $40; //@line 21508
    $83 = $ReallocAsyncCtx + 72 | 0; //@line 21509
    HEAP32[$83 >> 2] = $38; //@line 21510
    $84 = $ReallocAsyncCtx + 76 | 0; //@line 21511
    HEAP32[$84 >> 2] = $36; //@line 21512
    $85 = $ReallocAsyncCtx + 80 | 0; //@line 21513
    HEAP8[$85 >> 0] = $$094; //@line 21514
    $86 = $ReallocAsyncCtx + 84 | 0; //@line 21515
    HEAP32[$86 >> 2] = $44; //@line 21516
    $87 = $ReallocAsyncCtx + 88 | 0; //@line 21517
    HEAP32[$87 >> 2] = $46; //@line 21518
    $88 = $ReallocAsyncCtx + 92 | 0; //@line 21519
    HEAP32[$88 >> 2] = $48; //@line 21520
    $89 = $ReallocAsyncCtx + 96 | 0; //@line 21521
    HEAP32[$89 >> 2] = $42; //@line 21522
    $90 = $ReallocAsyncCtx + 100 | 0; //@line 21523
    HEAP32[$90 >> 2] = $50; //@line 21524
    $91 = $ReallocAsyncCtx + 104 | 0; //@line 21525
    HEAP8[$91 >> 0] = $52; //@line 21526
    $92 = $ReallocAsyncCtx + 108 | 0; //@line 21527
    HEAP32[$92 >> 2] = $54; //@line 21528
    sp = STACKTOP; //@line 21529
    STACKTOP = sp; //@line 21530
    return;
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  $$4110 = $$4$ph; //@line 21535
 }
 _free($4); //@line 21537
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 21538
 $162 = __ZN6Socket5closeEv($38) | 0; //@line 21539
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 21542
  $163 = $ReallocAsyncCtx6 + 4 | 0; //@line 21543
  HEAP32[$163 >> 2] = $$4110; //@line 21544
  $164 = $ReallocAsyncCtx6 + 8 | 0; //@line 21545
  HEAP32[$164 >> 2] = $40; //@line 21546
  $165 = $ReallocAsyncCtx6 + 12 | 0; //@line 21547
  HEAP32[$165 >> 2] = $42; //@line 21548
  sp = STACKTOP; //@line 21549
  STACKTOP = sp; //@line 21550
  return;
 }
 HEAP32[___async_retval >> 2] = $162; //@line 21553
 ___async_unwind = 0; //@line 21554
 HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 21555
 $163 = $ReallocAsyncCtx6 + 4 | 0; //@line 21556
 HEAP32[$163 >> 2] = $$4110; //@line 21557
 $164 = $ReallocAsyncCtx6 + 8 | 0; //@line 21558
 HEAP32[$164 >> 2] = $40; //@line 21559
 $165 = $ReallocAsyncCtx6 + 12 | 0; //@line 21560
 HEAP32[$165 >> 2] = $42; //@line 21561
 sp = STACKTOP; //@line 21562
 STACKTOP = sp; //@line 21563
 return;
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1724
 STACKTOP = STACKTOP + 96 | 0; //@line 1725
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 1725
 $vararg_buffer23 = sp + 72 | 0; //@line 1726
 $vararg_buffer20 = sp + 64 | 0; //@line 1727
 $vararg_buffer18 = sp + 56 | 0; //@line 1728
 $vararg_buffer15 = sp + 48 | 0; //@line 1729
 $vararg_buffer12 = sp + 40 | 0; //@line 1730
 $vararg_buffer9 = sp + 32 | 0; //@line 1731
 $vararg_buffer6 = sp + 24 | 0; //@line 1732
 $vararg_buffer3 = sp + 16 | 0; //@line 1733
 $vararg_buffer1 = sp + 8 | 0; //@line 1734
 $vararg_buffer = sp; //@line 1735
 $4 = sp + 80 | 0; //@line 1736
 $5 = HEAP32[131] | 0; //@line 1737
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 1741
   FUNCTION_TABLE_v[$5 & 7](); //@line 1742
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 61; //@line 1745
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 1747
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 1749
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 1751
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 1753
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer3; //@line 1755
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer18; //@line 1757
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer18; //@line 1759
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer15; //@line 1761
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer15; //@line 1763
    HEAP8[$AsyncCtx + 40 >> 0] = $0; //@line 1765
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer; //@line 1767
    HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer; //@line 1769
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer1; //@line 1771
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer1; //@line 1773
    HEAP32[$AsyncCtx + 60 >> 2] = $4; //@line 1775
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer6; //@line 1777
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer6; //@line 1779
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer9; //@line 1781
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer9; //@line 1783
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer23; //@line 1785
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer23; //@line 1787
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer12; //@line 1789
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer12; //@line 1791
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer20; //@line 1793
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer20; //@line 1795
    sp = STACKTOP; //@line 1796
    STACKTOP = sp; //@line 1797
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1799
    HEAP32[133] = (HEAP32[133] | 0) + 1; //@line 1802
    break;
   }
  }
 } while (0);
 $34 = HEAP32[122] | 0; //@line 1807
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 1811
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[119] | 0; //@line 1817
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 1824
       break;
      }
     }
     $43 = HEAP32[120] | 0; //@line 1828
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 1832
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 1837
      } else {
       label = 11; //@line 1839
      }
     }
    } else {
     label = 11; //@line 1843
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 1847
   }
   if (!((HEAP32[129] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[126] = HEAP32[124]; //@line 1859
    break;
   }
   $54 = HEAPU8[472] | 0; //@line 1863
   $55 = $0 & 255; //@line 1864
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 1869
    $$lobit = $59 >>> 6; //@line 1870
    $60 = $$lobit & 255; //@line 1871
    $64 = ($54 & 32 | 0) == 0; //@line 1875
    $65 = HEAP32[123] | 0; //@line 1876
    $66 = HEAP32[122] | 0; //@line 1877
    $67 = $0 << 24 >> 24 == 1; //@line 1878
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1882
      _vsnprintf($66, $65, $2, $3) | 0; //@line 1883
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 62; //@line 1886
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 1889
       sp = STACKTOP; //@line 1890
       STACKTOP = sp; //@line 1891
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 1893
      $69 = HEAP32[130] | 0; //@line 1894
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[129] | 0; //@line 1898
       $74 = HEAP32[122] | 0; //@line 1899
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1900
       FUNCTION_TABLE_vi[$73 & 511]($74); //@line 1901
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 65; //@line 1904
        sp = STACKTOP; //@line 1905
        STACKTOP = sp; //@line 1906
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1908
        break;
       }
      }
      $71 = HEAP32[122] | 0; //@line 1912
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1913
      FUNCTION_TABLE_vi[$69 & 511]($71); //@line 1914
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 63; //@line 1917
       sp = STACKTOP; //@line 1918
       STACKTOP = sp; //@line 1919
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 1921
      $72 = HEAP32[130] | 0; //@line 1922
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1923
      FUNCTION_TABLE_vi[$72 & 511](2635); //@line 1924
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 64; //@line 1927
       sp = STACKTOP; //@line 1928
       STACKTOP = sp; //@line 1929
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1931
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 1938
       $$1143 = $66; //@line 1938
       $$1145 = $65; //@line 1938
       $$3154 = 0; //@line 1938
       label = 38; //@line 1939
      } else {
       if ($64) {
        $$0142 = $66; //@line 1942
        $$0144 = $65; //@line 1942
       } else {
        $76 = _snprintf($66, $65, 2637, $vararg_buffer) | 0; //@line 1944
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 1946
        $78 = ($$ | 0) > 0; //@line 1947
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 1952
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 1952
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 1956
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 2655; //@line 1962
          label = 35; //@line 1963
          break;
         }
        case 1:
         {
          $$sink = 2661; //@line 1967
          label = 35; //@line 1968
          break;
         }
        case 3:
         {
          $$sink = 2649; //@line 1972
          label = 35; //@line 1973
          break;
         }
        case 7:
         {
          $$sink = 2643; //@line 1977
          label = 35; //@line 1978
          break;
         }
        default:
         {
          $$0141 = 0; //@line 1982
          $$1152 = 0; //@line 1982
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 1986
         $$0141 = $60 & 1; //@line 1989
         $$1152 = _snprintf($$0142, $$0144, 2667, $vararg_buffer1) | 0; //@line 1989
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 1992
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 1994
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 1996
         $$1$off0 = $extract$t159; //@line 2001
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 2001
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 2001
         $$3154 = $$1152; //@line 2001
         label = 38; //@line 2002
        } else {
         $$1$off0 = $extract$t159; //@line 2004
         $$1143 = $$0142; //@line 2004
         $$1145 = $$0144; //@line 2004
         $$3154 = $$1152$; //@line 2004
         label = 38; //@line 2005
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[127] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 2018
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 2019
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 2020
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 66; //@line 2023
           HEAP32[$AsyncCtx60 + 4 >> 2] = $2; //@line 2025
           HEAP32[$AsyncCtx60 + 8 >> 2] = $3; //@line 2027
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer18; //@line 2029
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer18; //@line 2031
           HEAP32[$AsyncCtx60 + 20 >> 2] = $vararg_buffer15; //@line 2033
           HEAP32[$AsyncCtx60 + 24 >> 2] = $1; //@line 2035
           HEAP32[$AsyncCtx60 + 28 >> 2] = $vararg_buffer15; //@line 2037
           HEAP32[$AsyncCtx60 + 32 >> 2] = $vararg_buffer6; //@line 2039
           HEAP32[$AsyncCtx60 + 36 >> 2] = $vararg_buffer6; //@line 2041
           HEAP32[$AsyncCtx60 + 40 >> 2] = $vararg_buffer9; //@line 2043
           HEAP32[$AsyncCtx60 + 44 >> 2] = $vararg_buffer9; //@line 2045
           HEAP32[$AsyncCtx60 + 48 >> 2] = $$1143; //@line 2047
           HEAP32[$AsyncCtx60 + 52 >> 2] = $$1145; //@line 2049
           HEAP32[$AsyncCtx60 + 56 >> 2] = $55; //@line 2051
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer23; //@line 2053
           HEAP32[$AsyncCtx60 + 64 >> 2] = $vararg_buffer23; //@line 2055
           HEAP8[$AsyncCtx60 + 68 >> 0] = $$1$off0 & 1; //@line 2058
           HEAP32[$AsyncCtx60 + 72 >> 2] = $vararg_buffer12; //@line 2060
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer12; //@line 2062
           HEAP32[$AsyncCtx60 + 80 >> 2] = $vararg_buffer20; //@line 2064
           HEAP32[$AsyncCtx60 + 84 >> 2] = $vararg_buffer20; //@line 2066
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer3; //@line 2068
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer3; //@line 2070
           HEAP32[$AsyncCtx60 + 96 >> 2] = $4; //@line 2072
           HEAP32[$AsyncCtx60 + 100 >> 2] = $$3154; //@line 2074
           sp = STACKTOP; //@line 2075
           STACKTOP = sp; //@line 2076
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 2078
          $125 = HEAP32[127] | 0; //@line 2083
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 2084
          $126 = FUNCTION_TABLE_ii[$125 & 31](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 2085
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 67; //@line 2088
           HEAP32[$AsyncCtx38 + 4 >> 2] = $2; //@line 2090
           HEAP32[$AsyncCtx38 + 8 >> 2] = $3; //@line 2092
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer18; //@line 2094
           HEAP32[$AsyncCtx38 + 16 >> 2] = $vararg_buffer18; //@line 2096
           HEAP32[$AsyncCtx38 + 20 >> 2] = $vararg_buffer15; //@line 2098
           HEAP32[$AsyncCtx38 + 24 >> 2] = $1; //@line 2100
           HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer15; //@line 2102
           HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer6; //@line 2104
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer6; //@line 2106
           HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer9; //@line 2108
           HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer9; //@line 2110
           HEAP32[$AsyncCtx38 + 48 >> 2] = $$1143; //@line 2112
           HEAP32[$AsyncCtx38 + 52 >> 2] = $$1145; //@line 2114
           HEAP32[$AsyncCtx38 + 56 >> 2] = $55; //@line 2116
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer23; //@line 2118
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer23; //@line 2120
           HEAP8[$AsyncCtx38 + 68 >> 0] = $$1$off0 & 1; //@line 2123
           HEAP32[$AsyncCtx38 + 72 >> 2] = $vararg_buffer12; //@line 2125
           HEAP32[$AsyncCtx38 + 76 >> 2] = $vararg_buffer12; //@line 2127
           HEAP32[$AsyncCtx38 + 80 >> 2] = $vararg_buffer20; //@line 2129
           HEAP32[$AsyncCtx38 + 84 >> 2] = $vararg_buffer20; //@line 2131
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer3; //@line 2133
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer3; //@line 2135
           HEAP32[$AsyncCtx38 + 96 >> 2] = $4; //@line 2137
           sp = STACKTOP; //@line 2138
           STACKTOP = sp; //@line 2139
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 2141
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 2142
           $151 = _snprintf($$1143, $$1145, 2667, $vararg_buffer3) | 0; //@line 2143
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 2145
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 2150
            $$3147 = $$1145 - $$10 | 0; //@line 2150
            label = 44; //@line 2151
            break;
           } else {
            $$3147168 = $$1145; //@line 2154
            $$3169 = $$1143; //@line 2154
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 2159
          $$3147 = $$1145; //@line 2159
          label = 44; //@line 2160
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 2166
          $$3169 = $$3; //@line 2166
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 2171
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 2177
          $$5156 = _snprintf($$3169, $$3147168, 2670, $vararg_buffer6) | 0; //@line 2179
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 2183
          $$5156 = _snprintf($$3169, $$3147168, 2685, $vararg_buffer9) | 0; //@line 2185
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 2189
          $$5156 = _snprintf($$3169, $$3147168, 2700, $vararg_buffer12) | 0; //@line 2191
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 2195
          $$5156 = _snprintf($$3169, $$3147168, 2715, $vararg_buffer15) | 0; //@line 2197
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 2730, $vararg_buffer18) | 0; //@line 2202
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 2206
        $168 = $$3169 + $$5156$ | 0; //@line 2208
        $169 = $$3147168 - $$5156$ | 0; //@line 2209
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2213
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 2214
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 68; //@line 2217
          HEAP32[$AsyncCtx56 + 4 >> 2] = $169; //@line 2219
          HEAP32[$AsyncCtx56 + 8 >> 2] = $168; //@line 2221
          HEAP32[$AsyncCtx56 + 12 >> 2] = $vararg_buffer20; //@line 2223
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer20; //@line 2225
          HEAP8[$AsyncCtx56 + 20 >> 0] = $$1$off0 & 1; //@line 2228
          HEAP32[$AsyncCtx56 + 24 >> 2] = $vararg_buffer23; //@line 2230
          HEAP32[$AsyncCtx56 + 28 >> 2] = $vararg_buffer23; //@line 2232
          sp = STACKTOP; //@line 2233
          STACKTOP = sp; //@line 2234
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 2236
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 2238
         $181 = $168 + $$13 | 0; //@line 2240
         $182 = $169 - $$13 | 0; //@line 2241
         if (($$13 | 0) > 0) {
          $184 = HEAP32[128] | 0; //@line 2244
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2249
            $186 = FUNCTION_TABLE_i[$184 & 0]() | 0; //@line 2250
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 69; //@line 2253
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 2255
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 2257
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 2259
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 2261
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 2264
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 2266
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 2268
             sp = STACKTOP; //@line 2269
             STACKTOP = sp; //@line 2270
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 2272
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 2273
             $194 = _snprintf($181, $182, 2667, $vararg_buffer20) | 0; //@line 2274
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 2276
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 2281
              $$6150 = $182 - $$18 | 0; //@line 2281
              $$9 = $$18; //@line 2281
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 2288
            $$6150 = $182; //@line 2288
            $$9 = $$13; //@line 2288
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 2745, $vararg_buffer23) | 0; //@line 2297
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[129] | 0; //@line 2303
      $202 = HEAP32[122] | 0; //@line 2304
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2305
      FUNCTION_TABLE_vi[$201 & 511]($202); //@line 2306
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 70; //@line 2309
       sp = STACKTOP; //@line 2310
       STACKTOP = sp; //@line 2311
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 2313
       break;
      }
     }
    } while (0);
    HEAP32[126] = HEAP32[124]; //@line 2319
   }
  }
 } while (0);
 $204 = HEAP32[132] | 0; //@line 2323
 if (!$204) {
  STACKTOP = sp; //@line 2326
  return;
 }
 $206 = HEAP32[133] | 0; //@line 2328
 HEAP32[133] = 0; //@line 2329
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2330
 FUNCTION_TABLE_v[$204 & 7](); //@line 2331
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 71; //@line 2334
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 2336
  sp = STACKTOP; //@line 2337
  STACKTOP = sp; //@line 2338
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 2340
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 2343
 } else {
  STACKTOP = sp; //@line 2345
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 2348
  $$pre = HEAP32[132] | 0; //@line 2349
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2350
  FUNCTION_TABLE_v[$$pre & 7](); //@line 2351
  if (___async) {
   label = 70; //@line 2354
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 2357
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 2360
  } else {
   label = 72; //@line 2362
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 72; //@line 2367
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 2369
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 2371
  sp = STACKTOP; //@line 2372
  STACKTOP = sp; //@line 2373
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 2376
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_186($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $101 = 0, $104 = 0, $111 = 0, $113 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $151 = 0, $153 = 0, $16 = 0, $161 = 0, $164 = 0, $166 = 0, $174 = 0, $177 = 0, $179 = 0, $18 = 0, $187 = 0, $190 = 0, $192 = 0, $2 = 0, $20 = 0, $205 = 0, $206 = 0, $207 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $86 = 0, $87 = 0, $95 = 0, $98 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7579
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7581
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7583
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7585
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7587
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7589
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7591
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7593
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7595
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7597
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7599
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7601
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7603
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7605
 $27 = $10 + 12 | 0; //@line 7606
 $28 = HEAP32[$27 >> 2] | 0; //@line 7607
 if ($28 | 0) {
  $31 = HEAP32[$28 + 4 >> 2] | 0; //@line 7611
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 7612
  FUNCTION_TABLE_vii[$31 & 7]($12, $10); //@line 7613
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 162; //@line 7616
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 7617
   HEAP32[$32 >> 2] = $2; //@line 7618
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 7619
   HEAP32[$33 >> 2] = $4; //@line 7620
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 7621
   HEAP32[$34 >> 2] = $6; //@line 7622
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 7623
   HEAP32[$35 >> 2] = $8; //@line 7624
   $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 7625
   HEAP32[$36 >> 2] = $14; //@line 7626
   $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 7627
   HEAP32[$37 >> 2] = $16; //@line 7628
   $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 7629
   HEAP32[$38 >> 2] = $18; //@line 7630
   $39 = $ReallocAsyncCtx3 + 32 | 0; //@line 7631
   HEAP32[$39 >> 2] = $20; //@line 7632
   $40 = $ReallocAsyncCtx3 + 36 | 0; //@line 7633
   HEAP32[$40 >> 2] = $22; //@line 7634
   $41 = $ReallocAsyncCtx3 + 40 | 0; //@line 7635
   HEAP32[$41 >> 2] = $24; //@line 7636
   $42 = $ReallocAsyncCtx3 + 44 | 0; //@line 7637
   HEAP32[$42 >> 2] = $26; //@line 7638
   $43 = $ReallocAsyncCtx3 + 48 | 0; //@line 7639
   HEAP32[$43 >> 2] = $12; //@line 7640
   $44 = $ReallocAsyncCtx3 + 52 | 0; //@line 7641
   HEAP32[$44 >> 2] = $27; //@line 7642
   sp = STACKTOP; //@line 7643
   return;
  }
  ___async_unwind = 0; //@line 7646
  HEAP32[$ReallocAsyncCtx3 >> 2] = 162; //@line 7647
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 7648
  HEAP32[$32 >> 2] = $2; //@line 7649
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 7650
  HEAP32[$33 >> 2] = $4; //@line 7651
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 7652
  HEAP32[$34 >> 2] = $6; //@line 7653
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 7654
  HEAP32[$35 >> 2] = $8; //@line 7655
  $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 7656
  HEAP32[$36 >> 2] = $14; //@line 7657
  $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 7658
  HEAP32[$37 >> 2] = $16; //@line 7659
  $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 7660
  HEAP32[$38 >> 2] = $18; //@line 7661
  $39 = $ReallocAsyncCtx3 + 32 | 0; //@line 7662
  HEAP32[$39 >> 2] = $20; //@line 7663
  $40 = $ReallocAsyncCtx3 + 36 | 0; //@line 7664
  HEAP32[$40 >> 2] = $22; //@line 7665
  $41 = $ReallocAsyncCtx3 + 40 | 0; //@line 7666
  HEAP32[$41 >> 2] = $24; //@line 7667
  $42 = $ReallocAsyncCtx3 + 44 | 0; //@line 7668
  HEAP32[$42 >> 2] = $26; //@line 7669
  $43 = $ReallocAsyncCtx3 + 48 | 0; //@line 7670
  HEAP32[$43 >> 2] = $12; //@line 7671
  $44 = $ReallocAsyncCtx3 + 52 | 0; //@line 7672
  HEAP32[$44 >> 2] = $27; //@line 7673
  sp = STACKTOP; //@line 7674
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 7677
 $45 = $6 + 32 | 0; //@line 7678
 do {
  if (($45 | 0) != ($8 | 0)) {
   $47 = $6 + 44 | 0; //@line 7682
   $48 = HEAP32[$47 >> 2] | 0; //@line 7683
   if ($48 | 0) {
    $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 7687
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 7688
    FUNCTION_TABLE_vi[$51 & 511]($45); //@line 7689
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 163; //@line 7692
     $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 7693
     HEAP32[$52 >> 2] = $4; //@line 7694
     $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 7695
     HEAP32[$53 >> 2] = $6; //@line 7696
     $54 = $ReallocAsyncCtx4 + 12 | 0; //@line 7697
     HEAP32[$54 >> 2] = $8; //@line 7698
     $55 = $ReallocAsyncCtx4 + 16 | 0; //@line 7699
     HEAP32[$55 >> 2] = $45; //@line 7700
     $56 = $ReallocAsyncCtx4 + 20 | 0; //@line 7701
     HEAP32[$56 >> 2] = $14; //@line 7702
     $57 = $ReallocAsyncCtx4 + 24 | 0; //@line 7703
     HEAP32[$57 >> 2] = $16; //@line 7704
     $58 = $ReallocAsyncCtx4 + 28 | 0; //@line 7705
     HEAP32[$58 >> 2] = $47; //@line 7706
     $59 = $ReallocAsyncCtx4 + 32 | 0; //@line 7707
     HEAP32[$59 >> 2] = $18; //@line 7708
     $60 = $ReallocAsyncCtx4 + 36 | 0; //@line 7709
     HEAP32[$60 >> 2] = $20; //@line 7710
     $61 = $ReallocAsyncCtx4 + 40 | 0; //@line 7711
     HEAP32[$61 >> 2] = $22; //@line 7712
     $62 = $ReallocAsyncCtx4 + 44 | 0; //@line 7713
     HEAP32[$62 >> 2] = $24; //@line 7714
     $63 = $ReallocAsyncCtx4 + 48 | 0; //@line 7715
     HEAP32[$63 >> 2] = $26; //@line 7716
     $64 = $ReallocAsyncCtx4 + 52 | 0; //@line 7717
     HEAP32[$64 >> 2] = $12; //@line 7718
     sp = STACKTOP; //@line 7719
     return;
    }
    ___async_unwind = 0; //@line 7722
    HEAP32[$ReallocAsyncCtx4 >> 2] = 163; //@line 7723
    $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 7724
    HEAP32[$52 >> 2] = $4; //@line 7725
    $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 7726
    HEAP32[$53 >> 2] = $6; //@line 7727
    $54 = $ReallocAsyncCtx4 + 12 | 0; //@line 7728
    HEAP32[$54 >> 2] = $8; //@line 7729
    $55 = $ReallocAsyncCtx4 + 16 | 0; //@line 7730
    HEAP32[$55 >> 2] = $45; //@line 7731
    $56 = $ReallocAsyncCtx4 + 20 | 0; //@line 7732
    HEAP32[$56 >> 2] = $14; //@line 7733
    $57 = $ReallocAsyncCtx4 + 24 | 0; //@line 7734
    HEAP32[$57 >> 2] = $16; //@line 7735
    $58 = $ReallocAsyncCtx4 + 28 | 0; //@line 7736
    HEAP32[$58 >> 2] = $47; //@line 7737
    $59 = $ReallocAsyncCtx4 + 32 | 0; //@line 7738
    HEAP32[$59 >> 2] = $18; //@line 7739
    $60 = $ReallocAsyncCtx4 + 36 | 0; //@line 7740
    HEAP32[$60 >> 2] = $20; //@line 7741
    $61 = $ReallocAsyncCtx4 + 40 | 0; //@line 7742
    HEAP32[$61 >> 2] = $22; //@line 7743
    $62 = $ReallocAsyncCtx4 + 44 | 0; //@line 7744
    HEAP32[$62 >> 2] = $24; //@line 7745
    $63 = $ReallocAsyncCtx4 + 48 | 0; //@line 7746
    HEAP32[$63 >> 2] = $26; //@line 7747
    $64 = $ReallocAsyncCtx4 + 52 | 0; //@line 7748
    HEAP32[$64 >> 2] = $12; //@line 7749
    sp = STACKTOP; //@line 7750
    return;
   }
   $65 = $8 + 12 | 0; //@line 7753
   $66 = HEAP32[$65 >> 2] | 0; //@line 7754
   if (!$66) {
    HEAP32[$47 >> 2] = 0; //@line 7757
    break;
   }
   $69 = HEAP32[$66 + 4 >> 2] | 0; //@line 7761
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 7762
   FUNCTION_TABLE_vii[$69 & 7]($45, $8); //@line 7763
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 7766
    $70 = $ReallocAsyncCtx5 + 4 | 0; //@line 7767
    HEAP32[$70 >> 2] = $4; //@line 7768
    $71 = $ReallocAsyncCtx5 + 8 | 0; //@line 7769
    HEAP32[$71 >> 2] = $6; //@line 7770
    $72 = $ReallocAsyncCtx5 + 12 | 0; //@line 7771
    HEAP32[$72 >> 2] = $14; //@line 7772
    $73 = $ReallocAsyncCtx5 + 16 | 0; //@line 7773
    HEAP32[$73 >> 2] = $16; //@line 7774
    $74 = $ReallocAsyncCtx5 + 20 | 0; //@line 7775
    HEAP32[$74 >> 2] = $47; //@line 7776
    $75 = $ReallocAsyncCtx5 + 24 | 0; //@line 7777
    HEAP32[$75 >> 2] = $18; //@line 7778
    $76 = $ReallocAsyncCtx5 + 28 | 0; //@line 7779
    HEAP32[$76 >> 2] = $20; //@line 7780
    $77 = $ReallocAsyncCtx5 + 32 | 0; //@line 7781
    HEAP32[$77 >> 2] = $65; //@line 7782
    $78 = $ReallocAsyncCtx5 + 36 | 0; //@line 7783
    HEAP32[$78 >> 2] = $22; //@line 7784
    $79 = $ReallocAsyncCtx5 + 40 | 0; //@line 7785
    HEAP32[$79 >> 2] = $45; //@line 7786
    $80 = $ReallocAsyncCtx5 + 44 | 0; //@line 7787
    HEAP32[$80 >> 2] = $24; //@line 7788
    $81 = $ReallocAsyncCtx5 + 48 | 0; //@line 7789
    HEAP32[$81 >> 2] = $26; //@line 7790
    $82 = $ReallocAsyncCtx5 + 52 | 0; //@line 7791
    HEAP32[$82 >> 2] = $12; //@line 7792
    sp = STACKTOP; //@line 7793
    return;
   }
   ___async_unwind = 0; //@line 7796
   HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 7797
   $70 = $ReallocAsyncCtx5 + 4 | 0; //@line 7798
   HEAP32[$70 >> 2] = $4; //@line 7799
   $71 = $ReallocAsyncCtx5 + 8 | 0; //@line 7800
   HEAP32[$71 >> 2] = $6; //@line 7801
   $72 = $ReallocAsyncCtx5 + 12 | 0; //@line 7802
   HEAP32[$72 >> 2] = $14; //@line 7803
   $73 = $ReallocAsyncCtx5 + 16 | 0; //@line 7804
   HEAP32[$73 >> 2] = $16; //@line 7805
   $74 = $ReallocAsyncCtx5 + 20 | 0; //@line 7806
   HEAP32[$74 >> 2] = $47; //@line 7807
   $75 = $ReallocAsyncCtx5 + 24 | 0; //@line 7808
   HEAP32[$75 >> 2] = $18; //@line 7809
   $76 = $ReallocAsyncCtx5 + 28 | 0; //@line 7810
   HEAP32[$76 >> 2] = $20; //@line 7811
   $77 = $ReallocAsyncCtx5 + 32 | 0; //@line 7812
   HEAP32[$77 >> 2] = $65; //@line 7813
   $78 = $ReallocAsyncCtx5 + 36 | 0; //@line 7814
   HEAP32[$78 >> 2] = $22; //@line 7815
   $79 = $ReallocAsyncCtx5 + 40 | 0; //@line 7816
   HEAP32[$79 >> 2] = $45; //@line 7817
   $80 = $ReallocAsyncCtx5 + 44 | 0; //@line 7818
   HEAP32[$80 >> 2] = $24; //@line 7819
   $81 = $ReallocAsyncCtx5 + 48 | 0; //@line 7820
   HEAP32[$81 >> 2] = $26; //@line 7821
   $82 = $ReallocAsyncCtx5 + 52 | 0; //@line 7822
   HEAP32[$82 >> 2] = $12; //@line 7823
   sp = STACKTOP; //@line 7824
   return;
  }
 } while (0);
 HEAP32[$6 + 8 >> 2] = $14; //@line 7829
 HEAP32[$6 + 48 >> 2] = $18; //@line 7831
 HEAP32[$6 + 52 >> 2] = $20; //@line 7833
 $86 = $6 + 56 | 0; //@line 7834
 HEAP32[$86 >> 2] = 0; //@line 7835
 $87 = $6 + 60 | 0; //@line 7836
 HEAP32[$87 >> 2] = 0; //@line 7837
 HEAP32[$6 + 64 >> 2] = 0; //@line 7839
 HEAP8[$6 + 82 >> 0] = 0; //@line 7841
 HEAP8[$6 + 83 >> 0] = 1; //@line 7843
 HEAP8[$6 + 84 >> 0] = 3; //@line 7845
 HEAP8[$6 + 85 >> 0] = 0; //@line 7847
 HEAP16[$6 + 80 >> 1] = 0; //@line 7849
 HEAP32[$6 + 76 >> 2] = 0; //@line 7851
 $95 = $6 + 72 | 0; //@line 7852
 HEAP32[$95 >> 2] = 15500; //@line 7853
 HEAP8[$6 + 86 >> 0] = 0; //@line 7855
 HEAP32[$6 + 88 >> 2] = 0; //@line 7857
 $98 = HEAP32[177] | 0; //@line 7858
 HEAP32[177] = $98 + 1; //@line 7860
 HEAP32[$6 >> 2] = ($98 | 0) > 32767 ? 1 : $98; //@line 7863
 $101 = HEAP32[1685] | 0; //@line 7864
 if (!$101) {
  $$1 = 0; //@line 7867
  $151 = 0; //@line 7867
 } else {
  $104 = HEAP32[$101 + 56 >> 2] | 0; //@line 7870
  if (!$104) {
   $$1 = 1; //@line 7873
   $151 = 0; //@line 7873
  } else {
   if ((HEAP32[$101 + 8 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$86 >> 2] = $104; //@line 7879
    HEAP32[$87 >> 2] = HEAP32[$101 + 60 >> 2]; //@line 7882
    $$1 = 1; //@line 7883
    $151 = $104; //@line 7883
   } else {
    $$1 = 1; //@line 7885
    $151 = 0; //@line 7885
   }
  }
 }
 $111 = HEAP32[1686] | 0; //@line 7889
 if (!$111) {
  $$1$1 = $$1; //@line 7892
  $164 = $151; //@line 7892
 } else {
  if (!$151) {
   $153 = HEAP32[$111 + 56 >> 2] | 0; //@line 7897
   if (!$153) {
    $205 = 0; //@line 7900
   } else {
    if ((HEAP32[$111 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$86 >> 2] = $153; //@line 7906
     HEAP32[$87 >> 2] = HEAP32[$111 + 60 >> 2]; //@line 7909
     $205 = $153; //@line 7910
    } else {
     $205 = 0; //@line 7912
    }
   }
  } else {
   $205 = $151; //@line 7916
  }
  $$1$1 = $$1 + 1 | 0; //@line 7919
  $164 = $205; //@line 7919
 }
 $161 = HEAP32[1687] | 0; //@line 7921
 if (!$161) {
  $$1$2 = $$1$1; //@line 7924
  $177 = $164; //@line 7924
 } else {
  if (!$164) {
   $166 = HEAP32[$161 + 56 >> 2] | 0; //@line 7929
   if (!$166) {
    $206 = 0; //@line 7932
   } else {
    if ((HEAP32[$161 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$86 >> 2] = $166; //@line 7938
     HEAP32[$87 >> 2] = HEAP32[$161 + 60 >> 2]; //@line 7941
     $206 = $166; //@line 7942
    } else {
     $206 = 0; //@line 7944
    }
   }
  } else {
   $206 = $164; //@line 7948
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 7951
  $177 = $206; //@line 7951
 }
 $174 = HEAP32[1688] | 0; //@line 7953
 if (!$174) {
  $$1$3 = $$1$2; //@line 7956
  $190 = $177; //@line 7956
 } else {
  if (!$177) {
   $179 = HEAP32[$174 + 56 >> 2] | 0; //@line 7961
   if (!$179) {
    $207 = 0; //@line 7964
   } else {
    if ((HEAP32[$174 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$86 >> 2] = $179; //@line 7970
     HEAP32[$87 >> 2] = HEAP32[$174 + 60 >> 2]; //@line 7973
     $207 = $179; //@line 7974
    } else {
     $207 = 0; //@line 7976
    }
   }
  } else {
   $207 = $177; //@line 7980
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 7983
  $190 = $207; //@line 7983
 }
 $187 = HEAP32[1689] | 0; //@line 7985
 if (!$187) {
  $$1$4 = $$1$3; //@line 7988
 } else {
  if (!$190) {
   $192 = HEAP32[$187 + 56 >> 2] | 0; //@line 7993
   if ($192 | 0) {
    if ((HEAP32[$187 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$86 >> 2] = $192; //@line 8000
     HEAP32[$87 >> 2] = HEAP32[$187 + 60 >> 2]; //@line 8003
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 8008
 }
 HEAP32[6740 + ($4 << 2) >> 2] = $6; //@line 8011
 HEAP32[$95 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 8014
 if (HEAP8[7620] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 8018
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 8019
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 8022
   $148 = $ReallocAsyncCtx13 + 4 | 0; //@line 8023
   HEAP32[$148 >> 2] = $6; //@line 8024
   $149 = $ReallocAsyncCtx13 + 8 | 0; //@line 8025
   HEAP32[$149 >> 2] = $16; //@line 8026
   sp = STACKTOP; //@line 8027
   return;
  }
  ___async_unwind = 0; //@line 8030
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 8031
  $148 = $ReallocAsyncCtx13 + 4 | 0; //@line 8032
  HEAP32[$148 >> 2] = $6; //@line 8033
  $149 = $ReallocAsyncCtx13 + 8 | 0; //@line 8034
  HEAP32[$149 >> 2] = $16; //@line 8035
  sp = STACKTOP; //@line 8036
  return;
 }
 $113 = $6 + 44 | 0; //@line 8039
 $114 = HEAP32[$113 >> 2] | 0; //@line 8040
 if (!$114) {
  $128 = $22 + 12 | 0; //@line 8043
  HEAP32[$128 >> 2] = 0; //@line 8044
  $130 = $24 + 4 | 0; //@line 8046
  HEAP32[$130 >> 2] = 0; //@line 8048
  HEAP32[$130 + 4 >> 2] = 0; //@line 8051
  HEAP32[$24 >> 2] = 3; //@line 8052
  $134 = $24 + 12 | 0; //@line 8053
  HEAP32[$134 >> 2] = 712; //@line 8054
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 8055
  $135 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 100, $24) | 0; //@line 8056
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 8059
   $136 = $ReallocAsyncCtx14 + 4 | 0; //@line 8060
   HEAP32[$136 >> 2] = $6; //@line 8061
   $137 = $ReallocAsyncCtx14 + 8 | 0; //@line 8062
   HEAP32[$137 >> 2] = $6; //@line 8063
   $138 = $ReallocAsyncCtx14 + 12 | 0; //@line 8064
   HEAP32[$138 >> 2] = $16; //@line 8065
   $139 = $ReallocAsyncCtx14 + 16 | 0; //@line 8066
   HEAP32[$139 >> 2] = $134; //@line 8067
   $140 = $ReallocAsyncCtx14 + 20 | 0; //@line 8068
   HEAP32[$140 >> 2] = $128; //@line 8069
   $141 = $ReallocAsyncCtx14 + 24 | 0; //@line 8070
   HEAP32[$141 >> 2] = $24; //@line 8071
   $142 = $ReallocAsyncCtx14 + 28 | 0; //@line 8072
   HEAP32[$142 >> 2] = $12; //@line 8073
   $143 = $ReallocAsyncCtx14 + 32 | 0; //@line 8074
   HEAP32[$143 >> 2] = $26; //@line 8075
   $144 = $ReallocAsyncCtx14 + 36 | 0; //@line 8076
   HEAP32[$144 >> 2] = $22; //@line 8077
   $145 = $ReallocAsyncCtx14 + 40 | 0; //@line 8078
   HEAP32[$145 >> 2] = $45; //@line 8079
   $146 = $ReallocAsyncCtx14 + 44 | 0; //@line 8080
   HEAP32[$146 >> 2] = $113; //@line 8081
   sp = STACKTOP; //@line 8082
   return;
  }
  HEAP32[___async_retval >> 2] = $135; //@line 8086
  ___async_unwind = 0; //@line 8087
  HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 8088
  $136 = $ReallocAsyncCtx14 + 4 | 0; //@line 8089
  HEAP32[$136 >> 2] = $6; //@line 8090
  $137 = $ReallocAsyncCtx14 + 8 | 0; //@line 8091
  HEAP32[$137 >> 2] = $6; //@line 8092
  $138 = $ReallocAsyncCtx14 + 12 | 0; //@line 8093
  HEAP32[$138 >> 2] = $16; //@line 8094
  $139 = $ReallocAsyncCtx14 + 16 | 0; //@line 8095
  HEAP32[$139 >> 2] = $134; //@line 8096
  $140 = $ReallocAsyncCtx14 + 20 | 0; //@line 8097
  HEAP32[$140 >> 2] = $128; //@line 8098
  $141 = $ReallocAsyncCtx14 + 24 | 0; //@line 8099
  HEAP32[$141 >> 2] = $24; //@line 8100
  $142 = $ReallocAsyncCtx14 + 28 | 0; //@line 8101
  HEAP32[$142 >> 2] = $12; //@line 8102
  $143 = $ReallocAsyncCtx14 + 32 | 0; //@line 8103
  HEAP32[$143 >> 2] = $26; //@line 8104
  $144 = $ReallocAsyncCtx14 + 36 | 0; //@line 8105
  HEAP32[$144 >> 2] = $22; //@line 8106
  $145 = $ReallocAsyncCtx14 + 40 | 0; //@line 8107
  HEAP32[$145 >> 2] = $45; //@line 8108
  $146 = $ReallocAsyncCtx14 + 44 | 0; //@line 8109
  HEAP32[$146 >> 2] = $113; //@line 8110
  sp = STACKTOP; //@line 8111
  return;
 } else {
  $117 = HEAP32[$114 + 4 >> 2] | 0; //@line 8115
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 8116
  FUNCTION_TABLE_vii[$117 & 7]($22, $45); //@line 8117
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 8120
   $118 = $ReallocAsyncCtx6 + 4 | 0; //@line 8121
   HEAP32[$118 >> 2] = $6; //@line 8122
   $119 = $ReallocAsyncCtx6 + 8 | 0; //@line 8123
   HEAP32[$119 >> 2] = $16; //@line 8124
   $120 = $ReallocAsyncCtx6 + 12 | 0; //@line 8125
   HEAP32[$120 >> 2] = $113; //@line 8126
   $121 = $ReallocAsyncCtx6 + 16 | 0; //@line 8127
   HEAP32[$121 >> 2] = $24; //@line 8128
   $122 = $ReallocAsyncCtx6 + 20 | 0; //@line 8129
   HEAP32[$122 >> 2] = $22; //@line 8130
   $123 = $ReallocAsyncCtx6 + 24 | 0; //@line 8131
   HEAP32[$123 >> 2] = $26; //@line 8132
   $124 = $ReallocAsyncCtx6 + 28 | 0; //@line 8133
   HEAP32[$124 >> 2] = $12; //@line 8134
   $125 = $ReallocAsyncCtx6 + 32 | 0; //@line 8135
   HEAP32[$125 >> 2] = $6; //@line 8136
   $126 = $ReallocAsyncCtx6 + 36 | 0; //@line 8137
   HEAP32[$126 >> 2] = $45; //@line 8138
   $127 = $ReallocAsyncCtx6 + 40 | 0; //@line 8139
   HEAP32[$127 >> 2] = $113; //@line 8140
   sp = STACKTOP; //@line 8141
   return;
  }
  ___async_unwind = 0; //@line 8144
  HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 8145
  $118 = $ReallocAsyncCtx6 + 4 | 0; //@line 8146
  HEAP32[$118 >> 2] = $6; //@line 8147
  $119 = $ReallocAsyncCtx6 + 8 | 0; //@line 8148
  HEAP32[$119 >> 2] = $16; //@line 8149
  $120 = $ReallocAsyncCtx6 + 12 | 0; //@line 8150
  HEAP32[$120 >> 2] = $113; //@line 8151
  $121 = $ReallocAsyncCtx6 + 16 | 0; //@line 8152
  HEAP32[$121 >> 2] = $24; //@line 8153
  $122 = $ReallocAsyncCtx6 + 20 | 0; //@line 8154
  HEAP32[$122 >> 2] = $22; //@line 8155
  $123 = $ReallocAsyncCtx6 + 24 | 0; //@line 8156
  HEAP32[$123 >> 2] = $26; //@line 8157
  $124 = $ReallocAsyncCtx6 + 28 | 0; //@line 8158
  HEAP32[$124 >> 2] = $12; //@line 8159
  $125 = $ReallocAsyncCtx6 + 32 | 0; //@line 8160
  HEAP32[$125 >> 2] = $6; //@line 8161
  $126 = $ReallocAsyncCtx6 + 36 | 0; //@line 8162
  HEAP32[$126 >> 2] = $45; //@line 8163
  $127 = $ReallocAsyncCtx6 + 40 | 0; //@line 8164
  HEAP32[$127 >> 2] = $113; //@line 8165
  sp = STACKTOP; //@line 8166
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_62($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1107 = 0, $$2 = 0, $$byval_copy = 0, $$byval_copy16 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22177
 STACKTOP = STACKTOP + 48 | 0; //@line 22178
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 22178
 $$byval_copy16 = sp + 20 | 0; //@line 22179
 $$byval_copy = sp; //@line 22180
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22182
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22184
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22186
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22188
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22190
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22192
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22194
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22196
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22198
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22200
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22202
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22204
 if (!$AsyncRetVal) {
  __ZN6Socket11set_timeoutEi($16, 5e3); //@line 22207
  $25 = _malloc(512) | 0; //@line 22208
  if (!$25) {
   $$2 = -3007; //@line 22211
  } else {
   $27 = $25; //@line 22213
   $28 = $25 + 1 | 0; //@line 22214
   $29 = $25 + 2 | 0; //@line 22215
   $30 = $25 + 3 | 0; //@line 22216
   $31 = $25 + 4 | 0; //@line 22217
   $32 = $25 + 5 | 0; //@line 22218
   $33 = $25 + 6 | 0; //@line 22219
   $34 = $25 + 12 | 0; //@line 22220
   $$sink$i = ($10 | 0) == 2 ? 28 : 1; //@line 22222
   HEAP32[$8 >> 2] = 0; //@line 22223
   HEAP32[$8 + 4 >> 2] = 0; //@line 22223
   HEAP32[$8 + 8 >> 2] = 0; //@line 22223
   HEAP32[$8 + 12 >> 2] = 0; //@line 22223
   HEAP32[$8 + 16 >> 2] = 0; //@line 22223
   HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2]; //@line 22224
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 22224
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 22224
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$8 + 12 >> 2]; //@line 22224
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$8 + 16 >> 2]; //@line 22224
   __ZN13SocketAddressC2E10nsapi_addrt($2, $$byval_copy, 0); //@line 22225
   do {
    if (3) {
     if (0 > 9) {
      if (!0) {
       break;
      } else {
       $$1107 = 0; //@line 22235
       $41 = 0; //@line 22235
      }
     } else {
      if (0 < 5) {
       $$1107 = 0; //@line 22240
       $41 = 0; //@line 22240
      } else {
       $76 = 608 + ((0 + -5 | 0) * 20 | 0) | 0; //@line 22244
       HEAP32[$$byval_copy16 >> 2] = HEAP32[$76 >> 2]; //@line 22245
       HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$76 + 4 >> 2]; //@line 22245
       HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$76 + 8 >> 2]; //@line 22245
       HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$76 + 12 >> 2]; //@line 22245
       HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$76 + 16 >> 2]; //@line 22245
       __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy16); //@line 22246
       __ZN13SocketAddress8set_portEt($2, 53); //@line 22247
       HEAP8[$25 >> 0] = 0; //@line 22248
       HEAP8[$28 >> 0] = 1; //@line 22249
       HEAP8[$29 >> 0] = 1; //@line 22250
       HEAP8[$30 >> 0] = 0; //@line 22251
       HEAP8[$31 >> 0] = 0; //@line 22252
       HEAP8[$32 >> 0] = 1; //@line 22253
       HEAP8[$33 >> 0] = 0; //@line 22254
       HEAP8[$33 + 1 >> 0] = 0; //@line 22254
       HEAP8[$33 + 2 >> 0] = 0; //@line 22254
       HEAP8[$33 + 3 >> 0] = 0; //@line 22254
       HEAP8[$33 + 4 >> 0] = 0; //@line 22254
       HEAP8[$33 + 5 >> 0] = 0; //@line 22254
       if (!(HEAP8[$4 >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $34; //@line 22258
       } else {
        $$048$i = $4; //@line 22260
        $$sroa$0$0$in47$i = $34; //@line 22260
        while (1) {
         $79 = _strcspn($$048$i, 4016) | 0; //@line 22262
         $81 = $$sroa$0$0$in47$i + 1 | 0; //@line 22264
         HEAP8[$$sroa$0$0$in47$i >> 0] = $79; //@line 22265
         $82 = $79 & 255; //@line 22266
         _memcpy($81 | 0, $$048$i | 0, $82 | 0) | 0; //@line 22267
         $83 = $81 + $82 | 0; //@line 22268
         $$048$i = $$048$i + ($79 + ((HEAP8[$$048$i + $79 >> 0] | 0) == 46 & 1)) | 0; //@line 22274
         if (!(HEAP8[$$048$i >> 0] | 0)) {
          $$sroa$0$0$in$lcssa$i = $83; //@line 22278
          break;
         } else {
          $$sroa$0$0$in47$i = $83; //@line 22281
         }
        }
       }
       HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 22286
       HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 22288
       HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 22290
       HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 22292
       HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 22295
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 22297
       $99 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($18, $2, $25, $$sroa$0$0$in$lcssa$i + 5 - $27 | 0) | 0; //@line 22298
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 22301
        $100 = $ReallocAsyncCtx4 + 4 | 0; //@line 22302
        HEAP32[$100 >> 2] = $2; //@line 22303
        $101 = $ReallocAsyncCtx4 + 8 | 0; //@line 22304
        HEAP32[$101 >> 2] = $25; //@line 22305
        $102 = $ReallocAsyncCtx4 + 12 | 0; //@line 22306
        HEAP32[$102 >> 2] = $28; //@line 22307
        $103 = $ReallocAsyncCtx4 + 16 | 0; //@line 22308
        HEAP32[$103 >> 2] = $29; //@line 22309
        $104 = $ReallocAsyncCtx4 + 20 | 0; //@line 22310
        HEAP32[$104 >> 2] = $30; //@line 22311
        $105 = $ReallocAsyncCtx4 + 24 | 0; //@line 22312
        HEAP32[$105 >> 2] = $31; //@line 22313
        $106 = $ReallocAsyncCtx4 + 28 | 0; //@line 22314
        HEAP32[$106 >> 2] = $32; //@line 22315
        $107 = $ReallocAsyncCtx4 + 32 | 0; //@line 22316
        HEAP32[$107 >> 2] = $33; //@line 22317
        $108 = $ReallocAsyncCtx4 + 36 | 0; //@line 22318
        HEAP32[$108 >> 2] = $4; //@line 22319
        $109 = $ReallocAsyncCtx4 + 40 | 0; //@line 22320
        HEAP32[$109 >> 2] = $6; //@line 22321
        $110 = $ReallocAsyncCtx4 + 44 | 0; //@line 22322
        HEAP32[$110 >> 2] = $6; //@line 22323
        $111 = $ReallocAsyncCtx4 + 48 | 0; //@line 22324
        HEAP8[$111 >> 0] = 0; //@line 22325
        $112 = $ReallocAsyncCtx4 + 52 | 0; //@line 22326
        HEAP32[$112 >> 2] = $2; //@line 22327
        $113 = $ReallocAsyncCtx4 + 56 | 0; //@line 22328
        HEAP32[$113 >> 2] = $8; //@line 22329
        $114 = $ReallocAsyncCtx4 + 60 | 0; //@line 22330
        HEAP32[$114 >> 2] = $8; //@line 22331
        $115 = $ReallocAsyncCtx4 + 64 | 0; //@line 22332
        HEAP32[$115 >> 2] = $12; //@line 22333
        $116 = $ReallocAsyncCtx4 + 68 | 0; //@line 22334
        HEAP32[$116 >> 2] = $16; //@line 22335
        $117 = $ReallocAsyncCtx4 + 72 | 0; //@line 22336
        HEAP32[$117 >> 2] = $18; //@line 22337
        $118 = $ReallocAsyncCtx4 + 76 | 0; //@line 22338
        HEAP32[$118 >> 2] = $14; //@line 22339
        $119 = $ReallocAsyncCtx4 + 80 | 0; //@line 22340
        HEAP8[$119 >> 0] = 3; //@line 22341
        $120 = $ReallocAsyncCtx4 + 81 | 0; //@line 22342
        HEAP8[$120 >> 0] = 0; //@line 22343
        $121 = $ReallocAsyncCtx4 + 84 | 0; //@line 22344
        HEAP32[$121 >> 2] = $12; //@line 22345
        $122 = $ReallocAsyncCtx4 + 88 | 0; //@line 22346
        HEAP32[$122 >> 2] = $20; //@line 22347
        $123 = $ReallocAsyncCtx4 + 92 | 0; //@line 22348
        HEAP32[$123 >> 2] = $22; //@line 22349
        $124 = $ReallocAsyncCtx4 + 96 | 0; //@line 22350
        HEAP32[$124 >> 2] = $34; //@line 22351
        $125 = $ReallocAsyncCtx4 + 100 | 0; //@line 22352
        HEAP8[$125 >> 0] = $$sink$i; //@line 22353
        $126 = $ReallocAsyncCtx4 + 104 | 0; //@line 22354
        HEAP32[$126 >> 2] = $27; //@line 22355
        sp = STACKTOP; //@line 22356
        STACKTOP = sp; //@line 22357
        return;
       }
       HEAP32[___async_retval >> 2] = $99; //@line 22360
       ___async_unwind = 0; //@line 22361
       HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 22362
       $100 = $ReallocAsyncCtx4 + 4 | 0; //@line 22363
       HEAP32[$100 >> 2] = $2; //@line 22364
       $101 = $ReallocAsyncCtx4 + 8 | 0; //@line 22365
       HEAP32[$101 >> 2] = $25; //@line 22366
       $102 = $ReallocAsyncCtx4 + 12 | 0; //@line 22367
       HEAP32[$102 >> 2] = $28; //@line 22368
       $103 = $ReallocAsyncCtx4 + 16 | 0; //@line 22369
       HEAP32[$103 >> 2] = $29; //@line 22370
       $104 = $ReallocAsyncCtx4 + 20 | 0; //@line 22371
       HEAP32[$104 >> 2] = $30; //@line 22372
       $105 = $ReallocAsyncCtx4 + 24 | 0; //@line 22373
       HEAP32[$105 >> 2] = $31; //@line 22374
       $106 = $ReallocAsyncCtx4 + 28 | 0; //@line 22375
       HEAP32[$106 >> 2] = $32; //@line 22376
       $107 = $ReallocAsyncCtx4 + 32 | 0; //@line 22377
       HEAP32[$107 >> 2] = $33; //@line 22378
       $108 = $ReallocAsyncCtx4 + 36 | 0; //@line 22379
       HEAP32[$108 >> 2] = $4; //@line 22380
       $109 = $ReallocAsyncCtx4 + 40 | 0; //@line 22381
       HEAP32[$109 >> 2] = $6; //@line 22382
       $110 = $ReallocAsyncCtx4 + 44 | 0; //@line 22383
       HEAP32[$110 >> 2] = $6; //@line 22384
       $111 = $ReallocAsyncCtx4 + 48 | 0; //@line 22385
       HEAP8[$111 >> 0] = 0; //@line 22386
       $112 = $ReallocAsyncCtx4 + 52 | 0; //@line 22387
       HEAP32[$112 >> 2] = $2; //@line 22388
       $113 = $ReallocAsyncCtx4 + 56 | 0; //@line 22389
       HEAP32[$113 >> 2] = $8; //@line 22390
       $114 = $ReallocAsyncCtx4 + 60 | 0; //@line 22391
       HEAP32[$114 >> 2] = $8; //@line 22392
       $115 = $ReallocAsyncCtx4 + 64 | 0; //@line 22393
       HEAP32[$115 >> 2] = $12; //@line 22394
       $116 = $ReallocAsyncCtx4 + 68 | 0; //@line 22395
       HEAP32[$116 >> 2] = $16; //@line 22396
       $117 = $ReallocAsyncCtx4 + 72 | 0; //@line 22397
       HEAP32[$117 >> 2] = $18; //@line 22398
       $118 = $ReallocAsyncCtx4 + 76 | 0; //@line 22399
       HEAP32[$118 >> 2] = $14; //@line 22400
       $119 = $ReallocAsyncCtx4 + 80 | 0; //@line 22401
       HEAP8[$119 >> 0] = 3; //@line 22402
       $120 = $ReallocAsyncCtx4 + 81 | 0; //@line 22403
       HEAP8[$120 >> 0] = 0; //@line 22404
       $121 = $ReallocAsyncCtx4 + 84 | 0; //@line 22405
       HEAP32[$121 >> 2] = $12; //@line 22406
       $122 = $ReallocAsyncCtx4 + 88 | 0; //@line 22407
       HEAP32[$122 >> 2] = $20; //@line 22408
       $123 = $ReallocAsyncCtx4 + 92 | 0; //@line 22409
       HEAP32[$123 >> 2] = $22; //@line 22410
       $124 = $ReallocAsyncCtx4 + 96 | 0; //@line 22411
       HEAP32[$124 >> 2] = $34; //@line 22412
       $125 = $ReallocAsyncCtx4 + 100 | 0; //@line 22413
       HEAP8[$125 >> 0] = $$sink$i; //@line 22414
       $126 = $ReallocAsyncCtx4 + 104 | 0; //@line 22415
       HEAP32[$126 >> 2] = $27; //@line 22416
       sp = STACKTOP; //@line 22417
       STACKTOP = sp; //@line 22418
       return;
      }
     }
     $44 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 22424
     $ReallocAsyncCtx = _emscripten_realloc_async_context(112) | 0; //@line 22425
     $45 = FUNCTION_TABLE_iiii[$44 & 31]($6, $41 & 255, $2) | 0; //@line 22426
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 22429
      $46 = $ReallocAsyncCtx + 4 | 0; //@line 22430
      HEAP8[$46 >> 0] = $$1107; //@line 22431
      $47 = $ReallocAsyncCtx + 8 | 0; //@line 22432
      HEAP32[$47 >> 2] = $2; //@line 22433
      $48 = $ReallocAsyncCtx + 12 | 0; //@line 22434
      HEAP8[$48 >> 0] = $41; //@line 22435
      $49 = $ReallocAsyncCtx + 16 | 0; //@line 22436
      HEAP32[$49 >> 2] = $25; //@line 22437
      $50 = $ReallocAsyncCtx + 20 | 0; //@line 22438
      HEAP32[$50 >> 2] = $28; //@line 22439
      $51 = $ReallocAsyncCtx + 24 | 0; //@line 22440
      HEAP32[$51 >> 2] = $29; //@line 22441
      $52 = $ReallocAsyncCtx + 28 | 0; //@line 22442
      HEAP32[$52 >> 2] = $30; //@line 22443
      $53 = $ReallocAsyncCtx + 32 | 0; //@line 22444
      HEAP32[$53 >> 2] = $31; //@line 22445
      $54 = $ReallocAsyncCtx + 36 | 0; //@line 22446
      HEAP32[$54 >> 2] = $32; //@line 22447
      $55 = $ReallocAsyncCtx + 40 | 0; //@line 22448
      HEAP32[$55 >> 2] = $33; //@line 22449
      $56 = $ReallocAsyncCtx + 44 | 0; //@line 22450
      HEAP32[$56 >> 2] = $4; //@line 22451
      $57 = $ReallocAsyncCtx + 48 | 0; //@line 22452
      HEAP32[$57 >> 2] = $6; //@line 22453
      $58 = $ReallocAsyncCtx + 52 | 0; //@line 22454
      HEAP32[$58 >> 2] = $6; //@line 22455
      $59 = $ReallocAsyncCtx + 56 | 0; //@line 22456
      HEAP32[$59 >> 2] = $2; //@line 22457
      $60 = $ReallocAsyncCtx + 60 | 0; //@line 22458
      HEAP32[$60 >> 2] = $8; //@line 22459
      $61 = $ReallocAsyncCtx + 64 | 0; //@line 22460
      HEAP32[$61 >> 2] = $8; //@line 22461
      $62 = $ReallocAsyncCtx + 68 | 0; //@line 22462
      HEAP32[$62 >> 2] = $18; //@line 22463
      $63 = $ReallocAsyncCtx + 72 | 0; //@line 22464
      HEAP32[$63 >> 2] = $16; //@line 22465
      $64 = $ReallocAsyncCtx + 76 | 0; //@line 22466
      HEAP32[$64 >> 2] = $12; //@line 22467
      $65 = $ReallocAsyncCtx + 80 | 0; //@line 22468
      HEAP8[$65 >> 0] = 3; //@line 22469
      $66 = $ReallocAsyncCtx + 84 | 0; //@line 22470
      HEAP32[$66 >> 2] = $12; //@line 22471
      $67 = $ReallocAsyncCtx + 88 | 0; //@line 22472
      HEAP32[$67 >> 2] = $20; //@line 22473
      $68 = $ReallocAsyncCtx + 92 | 0; //@line 22474
      HEAP32[$68 >> 2] = $22; //@line 22475
      $69 = $ReallocAsyncCtx + 96 | 0; //@line 22476
      HEAP32[$69 >> 2] = $14; //@line 22477
      $70 = $ReallocAsyncCtx + 100 | 0; //@line 22478
      HEAP32[$70 >> 2] = $34; //@line 22479
      $71 = $ReallocAsyncCtx + 104 | 0; //@line 22480
      HEAP8[$71 >> 0] = $$sink$i; //@line 22481
      $72 = $ReallocAsyncCtx + 108 | 0; //@line 22482
      HEAP32[$72 >> 2] = $27; //@line 22483
      sp = STACKTOP; //@line 22484
      STACKTOP = sp; //@line 22485
      return;
     }
     HEAP32[___async_retval >> 2] = $45; //@line 22488
     ___async_unwind = 0; //@line 22489
     HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 22490
     $46 = $ReallocAsyncCtx + 4 | 0; //@line 22491
     HEAP8[$46 >> 0] = $$1107; //@line 22492
     $47 = $ReallocAsyncCtx + 8 | 0; //@line 22493
     HEAP32[$47 >> 2] = $2; //@line 22494
     $48 = $ReallocAsyncCtx + 12 | 0; //@line 22495
     HEAP8[$48 >> 0] = $41; //@line 22496
     $49 = $ReallocAsyncCtx + 16 | 0; //@line 22497
     HEAP32[$49 >> 2] = $25; //@line 22498
     $50 = $ReallocAsyncCtx + 20 | 0; //@line 22499
     HEAP32[$50 >> 2] = $28; //@line 22500
     $51 = $ReallocAsyncCtx + 24 | 0; //@line 22501
     HEAP32[$51 >> 2] = $29; //@line 22502
     $52 = $ReallocAsyncCtx + 28 | 0; //@line 22503
     HEAP32[$52 >> 2] = $30; //@line 22504
     $53 = $ReallocAsyncCtx + 32 | 0; //@line 22505
     HEAP32[$53 >> 2] = $31; //@line 22506
     $54 = $ReallocAsyncCtx + 36 | 0; //@line 22507
     HEAP32[$54 >> 2] = $32; //@line 22508
     $55 = $ReallocAsyncCtx + 40 | 0; //@line 22509
     HEAP32[$55 >> 2] = $33; //@line 22510
     $56 = $ReallocAsyncCtx + 44 | 0; //@line 22511
     HEAP32[$56 >> 2] = $4; //@line 22512
     $57 = $ReallocAsyncCtx + 48 | 0; //@line 22513
     HEAP32[$57 >> 2] = $6; //@line 22514
     $58 = $ReallocAsyncCtx + 52 | 0; //@line 22515
     HEAP32[$58 >> 2] = $6; //@line 22516
     $59 = $ReallocAsyncCtx + 56 | 0; //@line 22517
     HEAP32[$59 >> 2] = $2; //@line 22518
     $60 = $ReallocAsyncCtx + 60 | 0; //@line 22519
     HEAP32[$60 >> 2] = $8; //@line 22520
     $61 = $ReallocAsyncCtx + 64 | 0; //@line 22521
     HEAP32[$61 >> 2] = $8; //@line 22522
     $62 = $ReallocAsyncCtx + 68 | 0; //@line 22523
     HEAP32[$62 >> 2] = $18; //@line 22524
     $63 = $ReallocAsyncCtx + 72 | 0; //@line 22525
     HEAP32[$63 >> 2] = $16; //@line 22526
     $64 = $ReallocAsyncCtx + 76 | 0; //@line 22527
     HEAP32[$64 >> 2] = $12; //@line 22528
     $65 = $ReallocAsyncCtx + 80 | 0; //@line 22529
     HEAP8[$65 >> 0] = 3; //@line 22530
     $66 = $ReallocAsyncCtx + 84 | 0; //@line 22531
     HEAP32[$66 >> 2] = $12; //@line 22532
     $67 = $ReallocAsyncCtx + 88 | 0; //@line 22533
     HEAP32[$67 >> 2] = $20; //@line 22534
     $68 = $ReallocAsyncCtx + 92 | 0; //@line 22535
     HEAP32[$68 >> 2] = $22; //@line 22536
     $69 = $ReallocAsyncCtx + 96 | 0; //@line 22537
     HEAP32[$69 >> 2] = $14; //@line 22538
     $70 = $ReallocAsyncCtx + 100 | 0; //@line 22539
     HEAP32[$70 >> 2] = $34; //@line 22540
     $71 = $ReallocAsyncCtx + 104 | 0; //@line 22541
     HEAP8[$71 >> 0] = $$sink$i; //@line 22542
     $72 = $ReallocAsyncCtx + 108 | 0; //@line 22543
     HEAP32[$72 >> 2] = $27; //@line 22544
     sp = STACKTOP; //@line 22545
     STACKTOP = sp; //@line 22546
     return;
    }
   } while (0);
   _free($25); //@line 22549
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 22550
   $128 = __ZN6Socket5closeEv($16) | 0; //@line 22551
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 22554
    $129 = $ReallocAsyncCtx6 + 4 | 0; //@line 22555
    HEAP32[$129 >> 2] = -3009; //@line 22556
    $130 = $ReallocAsyncCtx6 + 8 | 0; //@line 22557
    HEAP32[$130 >> 2] = $18; //@line 22558
    $131 = $ReallocAsyncCtx6 + 12 | 0; //@line 22559
    HEAP32[$131 >> 2] = $14; //@line 22560
    sp = STACKTOP; //@line 22561
    STACKTOP = sp; //@line 22562
    return;
   }
   HEAP32[___async_retval >> 2] = $128; //@line 22565
   ___async_unwind = 0; //@line 22566
   HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 22567
   $129 = $ReallocAsyncCtx6 + 4 | 0; //@line 22568
   HEAP32[$129 >> 2] = -3009; //@line 22569
   $130 = $ReallocAsyncCtx6 + 8 | 0; //@line 22570
   HEAP32[$130 >> 2] = $18; //@line 22571
   $131 = $ReallocAsyncCtx6 + 12 | 0; //@line 22572
   HEAP32[$131 >> 2] = $14; //@line 22573
   sp = STACKTOP; //@line 22574
   STACKTOP = sp; //@line 22575
   return;
  }
 } else {
  $$2 = $AsyncRetVal; //@line 22578
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 22580
 __ZN9UDPSocketD2Ev($18); //@line 22581
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 148; //@line 22584
  $133 = $ReallocAsyncCtx5 + 4 | 0; //@line 22585
  HEAP32[$133 >> 2] = $14; //@line 22586
  $134 = $ReallocAsyncCtx5 + 8 | 0; //@line 22587
  HEAP32[$134 >> 2] = $$2; //@line 22588
  sp = STACKTOP; //@line 22589
  STACKTOP = sp; //@line 22590
  return;
 }
 ___async_unwind = 0; //@line 22592
 HEAP32[$ReallocAsyncCtx5 >> 2] = 148; //@line 22593
 $133 = $ReallocAsyncCtx5 + 4 | 0; //@line 22594
 HEAP32[$133 >> 2] = $14; //@line 22595
 $134 = $ReallocAsyncCtx5 + 8 | 0; //@line 22596
 HEAP32[$134 >> 2] = $$2; //@line 22597
 sp = STACKTOP; //@line 22598
 STACKTOP = sp; //@line 22599
 return;
}
function __ZL28nsapi_dns_query_async_createPv($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $$pr$i = 0, $$pr$i72 = 0, $$pre85 = 0, $1 = 0, $104 = 0, $106 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $132 = 0, $14 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $157 = 0, $161 = 0, $163 = 0, $164 = 0, $170 = 0, $173 = 0, $177 = 0, $181 = 0, $189 = 0, $195 = 0, $2 = 0, $20 = 0, $203 = 0, $209 = 0, $217 = 0, $220 = 0, $222 = 0, $232 = 0, $236 = 0, $240 = 0, $244 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $52 = 0, $53 = 0, $57 = 0, $62 = 0, $63 = 0, $64 = 0, $69 = 0, $71 = 0, $76 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx39 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx48 = 0, $AsyncCtx51 = 0, $AsyncCtx54 = 0, $AsyncCtx57 = 0, $AsyncCtx6 = 0, $AsyncCtx61 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9318
 STACKTOP = STACKTOP + 32 | 0; //@line 9319
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9319
 $1 = sp + 16 | 0; //@line 9320
 $2 = sp; //@line 9321
 $3 = $0; //@line 9322
 $4 = HEAP32[1685] | 0; //@line 9323
 $5 = ($4 | 0) == 0; //@line 9324
 if ($5) {
  label = 3; //@line 9326
 } else {
  if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) {
   $$lcssa = $4; //@line 9331
  } else {
   label = 3; //@line 9333
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1686] | 0; //@line 9338
   if ($8 | 0) {
    if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $8; //@line 9344
     break;
    }
   }
   $232 = HEAP32[1687] | 0; //@line 9348
   if ($232 | 0) {
    if ((HEAP32[$232 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $232; //@line 9354
     break;
    }
   }
   $236 = HEAP32[1688] | 0; //@line 9358
   if ($236 | 0) {
    if ((HEAP32[$236 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $236; //@line 9364
     break;
    }
   }
   $240 = HEAP32[1689] | 0; //@line 9368
   if (!$240) {
    STACKTOP = sp; //@line 9371
    return;
   }
   if ((HEAP32[$240 >> 2] | 0) == ($3 | 0)) {
    $$lcssa = $240; //@line 9376
   } else {
    STACKTOP = sp; //@line 9378
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 2) {
  STACKTOP = sp; //@line 9386
  return;
 }
 $13 = $$lcssa + 56 | 0; //@line 9388
 $14 = $$lcssa + 8 | 0; //@line 9389
 $15 = $$lcssa + 60 | 0; //@line 9390
 if (!($5 | ($4 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $20 = HEAP32[$4 + 56 >> 2] | 0; //@line 9398
   if ($20 | 0) {
    if ((HEAP32[$4 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $20; //@line 9406
     HEAP32[$15 >> 2] = HEAP32[$4 + 60 >> 2]; //@line 9409
    }
   }
  }
 }
 $28 = HEAP32[1686] | 0; //@line 9414
 if (!(($28 | 0) == 0 | ($28 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $181 = HEAP32[$28 + 56 >> 2] | 0; //@line 9423
   if ($181 | 0) {
    if ((HEAP32[$28 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $181; //@line 9431
     HEAP32[$15 >> 2] = HEAP32[$28 + 60 >> 2]; //@line 9434
    }
   }
  }
 }
 $189 = HEAP32[1687] | 0; //@line 9439
 if (!(($189 | 0) == 0 | ($189 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $195 = HEAP32[$189 + 56 >> 2] | 0; //@line 9448
   if ($195 | 0) {
    if ((HEAP32[$189 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $195; //@line 9456
     HEAP32[$15 >> 2] = HEAP32[$189 + 60 >> 2]; //@line 9459
    }
   }
  }
 }
 $203 = HEAP32[1688] | 0; //@line 9464
 if (!(($203 | 0) == 0 | ($203 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $209 = HEAP32[$203 + 56 >> 2] | 0; //@line 9473
   if ($209 | 0) {
    if ((HEAP32[$203 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $209; //@line 9481
     HEAP32[$15 >> 2] = HEAP32[$203 + 60 >> 2]; //@line 9484
    }
   }
  }
 }
 $217 = HEAP32[1689] | 0; //@line 9489
 $220 = (HEAP32[$13 >> 2] | 0) == 0; //@line 9494
 if (($217 | 0) == 0 | ($217 | 0) == ($$lcssa | 0)) {
  if ($220) {
   label = 11; //@line 9497
  }
 } else {
  if ($220) {
   $222 = HEAP32[$217 + 56 >> 2] | 0; //@line 9502
   if (!$222) {
    label = 11; //@line 9505
   } else {
    if ((HEAP32[$217 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $222; //@line 9512
     HEAP32[$15 >> 2] = HEAP32[$217 + 60 >> 2]; //@line 9515
    } else {
     label = 11; //@line 9517
    }
   }
  }
 }
 if ((label | 0) == 11) {
  $AsyncCtx39 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9523
  $31 = __ZnwjRKSt9nothrow_t(56, 8661) | 0; //@line 9524
  if (___async) {
   HEAP32[$AsyncCtx39 >> 2] = 199; //@line 9527
   HEAP32[$AsyncCtx39 + 4 >> 2] = $15; //@line 9529
   HEAP32[$AsyncCtx39 + 8 >> 2] = $1; //@line 9531
   HEAP32[$AsyncCtx39 + 12 >> 2] = $$lcssa; //@line 9533
   HEAP32[$AsyncCtx39 + 16 >> 2] = $13; //@line 9535
   HEAP32[$AsyncCtx39 + 20 >> 2] = $2; //@line 9537
   HEAP32[$AsyncCtx39 + 24 >> 2] = $14; //@line 9539
   HEAP32[$AsyncCtx39 + 28 >> 2] = $1; //@line 9541
   sp = STACKTOP; //@line 9542
   STACKTOP = sp; //@line 9543
   return;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 9545
  if (!$31) {
   $52 = $$lcssa + 28 | 0; //@line 9548
   $53 = HEAP32[$52 >> 2] | 0; //@line 9549
   do {
    if (!$53) {
     $63 = 0; //@line 9553
    } else {
     $57 = HEAP32[$53 + 4 >> 2] | 0; //@line 9557
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9558
     FUNCTION_TABLE_vii[$57 & 7]($1, $$lcssa + 16 | 0); //@line 9559
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 201; //@line 9562
      HEAP32[$AsyncCtx + 4 >> 2] = $52; //@line 9564
      HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9566
      HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa; //@line 9568
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9570
      sp = STACKTOP; //@line 9571
      STACKTOP = sp; //@line 9572
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 9574
      $63 = HEAP32[$52 >> 2] | 0; //@line 9576
      break;
     }
    }
   } while (0);
   $62 = $1 + 12 | 0; //@line 9581
   HEAP32[$62 >> 2] = $63; //@line 9582
   $64 = HEAP32[$$lcssa >> 2] | 0; //@line 9583
   $AsyncCtx48 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9584
   __ZL28nsapi_dns_query_async_deletei($64); //@line 9585
   if (___async) {
    HEAP32[$AsyncCtx48 >> 2] = 202; //@line 9588
    HEAP32[$AsyncCtx48 + 4 >> 2] = $62; //@line 9590
    HEAP32[$AsyncCtx48 + 8 >> 2] = $1; //@line 9592
    sp = STACKTOP; //@line 9593
    STACKTOP = sp; //@line 9594
    return;
   }
   _emscripten_free_async_context($AsyncCtx48 | 0); //@line 9596
   $AsyncCtx54 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9597
   __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9598
   if (___async) {
    HEAP32[$AsyncCtx54 >> 2] = 203; //@line 9601
    HEAP32[$AsyncCtx54 + 4 >> 2] = $62; //@line 9603
    HEAP32[$AsyncCtx54 + 8 >> 2] = $1; //@line 9605
    sp = STACKTOP; //@line 9606
    STACKTOP = sp; //@line 9607
    return;
   }
   _emscripten_free_async_context($AsyncCtx54 | 0); //@line 9609
   $69 = HEAP32[$62 >> 2] | 0; //@line 9610
   do {
    if ($69 | 0) {
     $71 = HEAP32[$69 >> 2] | 0; //@line 9614
     $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9615
     FUNCTION_TABLE_viii[$71 & 0]($1, -3007, 0); //@line 9616
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 204; //@line 9619
      HEAP32[$AsyncCtx2 + 4 >> 2] = $62; //@line 9621
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9623
      sp = STACKTOP; //@line 9624
      STACKTOP = sp; //@line 9625
      return;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9627
     $$pr$i = HEAP32[$62 >> 2] | 0; //@line 9628
     if ($$pr$i | 0) {
      $76 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 9632
      $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9633
      FUNCTION_TABLE_vi[$76 & 511]($1); //@line 9634
      if (___async) {
       HEAP32[$AsyncCtx6 >> 2] = 205; //@line 9637
       HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 9639
       sp = STACKTOP; //@line 9640
       STACKTOP = sp; //@line 9641
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx6 | 0); //@line 9643
       break;
      }
     }
    }
   } while (0);
   STACKTOP = sp; //@line 9649
   return;
  }
  __ZN9UDPSocketC2Ev($31); //@line 9651
  $40 = HEAP32[$14 >> 2] | 0; //@line 9652
  $AsyncCtx61 = _emscripten_alloc_async_context(40, sp) | 0; //@line 9653
  $41 = __ZN6Socket4openEP12NetworkStack($31, $40) | 0; //@line 9654
  if (___async) {
   HEAP32[$AsyncCtx61 >> 2] = 200; //@line 9657
   HEAP32[$AsyncCtx61 + 4 >> 2] = $31; //@line 9659
   HEAP32[$AsyncCtx61 + 8 >> 2] = $15; //@line 9661
   HEAP32[$AsyncCtx61 + 12 >> 2] = $1; //@line 9663
   HEAP32[$AsyncCtx61 + 16 >> 2] = $$lcssa; //@line 9665
   HEAP32[$AsyncCtx61 + 20 >> 2] = $13; //@line 9667
   HEAP32[$AsyncCtx61 + 24 >> 2] = $31; //@line 9669
   HEAP32[$AsyncCtx61 + 28 >> 2] = $2; //@line 9671
   HEAP32[$AsyncCtx61 + 32 >> 2] = $14; //@line 9673
   HEAP32[$AsyncCtx61 + 36 >> 2] = $31; //@line 9675
   sp = STACKTOP; //@line 9676
   STACKTOP = sp; //@line 9677
   return;
  }
  _emscripten_free_async_context($AsyncCtx61 | 0); //@line 9679
  if ($41 | 0) {
   $80 = HEAP32[(HEAP32[$31 >> 2] | 0) + 4 >> 2] | 0; //@line 9684
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9685
   FUNCTION_TABLE_vi[$80 & 511]($31); //@line 9686
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 206; //@line 9689
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 9691
    HEAP32[$AsyncCtx9 + 8 >> 2] = $$lcssa; //@line 9693
    HEAP32[$AsyncCtx9 + 12 >> 2] = $41; //@line 9695
    sp = STACKTOP; //@line 9696
    STACKTOP = sp; //@line 9697
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9699
   $84 = $$lcssa + 28 | 0; //@line 9700
   $85 = HEAP32[$84 >> 2] | 0; //@line 9701
   do {
    if (!$85) {
     $96 = 0; //@line 9705
    } else {
     $89 = HEAP32[$85 + 4 >> 2] | 0; //@line 9709
     $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9710
     FUNCTION_TABLE_vii[$89 & 7]($1, $$lcssa + 16 | 0); //@line 9711
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 207; //@line 9714
      HEAP32[$AsyncCtx13 + 4 >> 2] = $84; //@line 9716
      HEAP32[$AsyncCtx13 + 8 >> 2] = $1; //@line 9718
      HEAP32[$AsyncCtx13 + 12 >> 2] = $$lcssa; //@line 9720
      HEAP32[$AsyncCtx13 + 16 >> 2] = $1; //@line 9722
      HEAP32[$AsyncCtx13 + 20 >> 2] = $41; //@line 9724
      sp = STACKTOP; //@line 9725
      STACKTOP = sp; //@line 9726
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 9728
      $96 = HEAP32[$84 >> 2] | 0; //@line 9730
      break;
     }
    }
   } while (0);
   $95 = $1 + 12 | 0; //@line 9735
   HEAP32[$95 >> 2] = $96; //@line 9736
   $97 = HEAP32[$$lcssa >> 2] | 0; //@line 9737
   $AsyncCtx45 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9738
   __ZL28nsapi_dns_query_async_deletei($97); //@line 9739
   if (___async) {
    HEAP32[$AsyncCtx45 >> 2] = 208; //@line 9742
    HEAP32[$AsyncCtx45 + 4 >> 2] = $95; //@line 9744
    HEAP32[$AsyncCtx45 + 8 >> 2] = $1; //@line 9746
    HEAP32[$AsyncCtx45 + 12 >> 2] = $41; //@line 9748
    sp = STACKTOP; //@line 9749
    STACKTOP = sp; //@line 9750
    return;
   }
   _emscripten_free_async_context($AsyncCtx45 | 0); //@line 9752
   $AsyncCtx51 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9753
   __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9754
   if (___async) {
    HEAP32[$AsyncCtx51 >> 2] = 209; //@line 9757
    HEAP32[$AsyncCtx51 + 4 >> 2] = $95; //@line 9759
    HEAP32[$AsyncCtx51 + 8 >> 2] = $1; //@line 9761
    HEAP32[$AsyncCtx51 + 12 >> 2] = $41; //@line 9763
    sp = STACKTOP; //@line 9764
    STACKTOP = sp; //@line 9765
    return;
   }
   _emscripten_free_async_context($AsyncCtx51 | 0); //@line 9767
   $104 = HEAP32[$95 >> 2] | 0; //@line 9768
   do {
    if ($104 | 0) {
     $106 = HEAP32[$104 >> 2] | 0; //@line 9772
     $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9773
     FUNCTION_TABLE_viii[$106 & 0]($1, $41, 0); //@line 9774
     if (___async) {
      HEAP32[$AsyncCtx16 >> 2] = 210; //@line 9777
      HEAP32[$AsyncCtx16 + 4 >> 2] = $95; //@line 9779
      HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 9781
      sp = STACKTOP; //@line 9782
      STACKTOP = sp; //@line 9783
      return;
     }
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 9785
     $$pr$i72 = HEAP32[$95 >> 2] | 0; //@line 9786
     if (!$$pr$i72) {
      break;
     }
     $111 = HEAP32[$$pr$i72 + 8 >> 2] | 0; //@line 9792
     $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9793
     FUNCTION_TABLE_vi[$111 & 511]($1); //@line 9794
     if (___async) {
      HEAP32[$AsyncCtx20 >> 2] = 211; //@line 9797
      HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 9799
      sp = STACKTOP; //@line 9800
      STACKTOP = sp; //@line 9801
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx20 | 0); //@line 9803
      break;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 9808
   return;
  }
  __ZN6Socket11set_timeoutEi($31, 0); //@line 9810
  $113 = HEAP32[$15 >> 2] | 0; //@line 9811
  $115 = $113; //@line 9813
  do {
   if (!$113) {
    $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9816
    $116 = __Znwj(20) | 0; //@line 9817
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 212; //@line 9820
     HEAP32[$AsyncCtx36 + 4 >> 2] = $13; //@line 9822
     HEAP32[$AsyncCtx36 + 8 >> 2] = $31; //@line 9824
     HEAP32[$AsyncCtx36 + 12 >> 2] = $$lcssa; //@line 9826
     HEAP32[$AsyncCtx36 + 16 >> 2] = $2; //@line 9828
     HEAP32[$AsyncCtx36 + 20 >> 2] = $14; //@line 9830
     HEAP32[$AsyncCtx36 + 24 >> 2] = $31; //@line 9832
     HEAP32[$AsyncCtx36 + 28 >> 2] = $15; //@line 9834
     sp = STACKTOP; //@line 9835
     STACKTOP = sp; //@line 9836
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 9838
     HEAP32[$116 >> 2] = 0; //@line 9839
     HEAP32[$116 + 4 >> 2] = 0; //@line 9839
     HEAP32[$116 + 8 >> 2] = 0; //@line 9839
     HEAP32[$116 + 12 >> 2] = 0; //@line 9839
     HEAP32[$15 >> 2] = $116; //@line 9840
     $127 = $116; //@line 9842
     $244 = $116; //@line 9842
     break;
    }
   } else {
    $127 = $113; //@line 9846
    $244 = $115; //@line 9846
   }
  } while (0);
  $125 = $$lcssa + 32 | 0; //@line 9849
  if (($127 | 0) == ($125 | 0)) {
   $161 = $127; //@line 9852
   $163 = $244; //@line 9852
  } else {
   $128 = $127 + 12 | 0; //@line 9854
   $129 = HEAP32[$128 >> 2] | 0; //@line 9855
   do {
    if ($129 | 0) {
     $132 = HEAP32[$129 + 8 >> 2] | 0; //@line 9860
     $AsyncCtx24 = _emscripten_alloc_async_context(44, sp) | 0; //@line 9861
     FUNCTION_TABLE_vi[$132 & 511]($127); //@line 9862
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 213; //@line 9865
      HEAP32[$AsyncCtx24 + 4 >> 2] = $$lcssa; //@line 9867
      HEAP32[$AsyncCtx24 + 8 >> 2] = $2; //@line 9869
      HEAP32[$AsyncCtx24 + 12 >> 2] = $13; //@line 9871
      HEAP32[$AsyncCtx24 + 16 >> 2] = $31; //@line 9873
      HEAP32[$AsyncCtx24 + 20 >> 2] = $127; //@line 9875
      HEAP32[$AsyncCtx24 + 24 >> 2] = $125; //@line 9877
      HEAP32[$AsyncCtx24 + 28 >> 2] = $14; //@line 9879
      HEAP32[$AsyncCtx24 + 32 >> 2] = $31; //@line 9881
      HEAP32[$AsyncCtx24 + 36 >> 2] = $128; //@line 9883
      HEAP32[$AsyncCtx24 + 40 >> 2] = $15; //@line 9885
      sp = STACKTOP; //@line 9886
      STACKTOP = sp; //@line 9887
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 9889
      break;
     }
    }
   } while (0);
   $143 = $$lcssa + 44 | 0; //@line 9894
   $144 = HEAP32[$143 >> 2] | 0; //@line 9895
   do {
    if (!$144) {
     $157 = 0; //@line 9899
    } else {
     $147 = HEAP32[$144 + 4 >> 2] | 0; //@line 9902
     $AsyncCtx28 = _emscripten_alloc_async_context(40, sp) | 0; //@line 9903
     FUNCTION_TABLE_vii[$147 & 7]($127, $125); //@line 9904
     if (___async) {
      HEAP32[$AsyncCtx28 >> 2] = 214; //@line 9907
      HEAP32[$AsyncCtx28 + 4 >> 2] = $143; //@line 9909
      HEAP32[$AsyncCtx28 + 8 >> 2] = $128; //@line 9911
      HEAP32[$AsyncCtx28 + 12 >> 2] = $15; //@line 9913
      HEAP32[$AsyncCtx28 + 16 >> 2] = $14; //@line 9915
      HEAP32[$AsyncCtx28 + 20 >> 2] = $2; //@line 9917
      HEAP32[$AsyncCtx28 + 24 >> 2] = $31; //@line 9919
      HEAP32[$AsyncCtx28 + 28 >> 2] = $13; //@line 9921
      HEAP32[$AsyncCtx28 + 32 >> 2] = $31; //@line 9923
      HEAP32[$AsyncCtx28 + 36 >> 2] = $$lcssa; //@line 9925
      sp = STACKTOP; //@line 9926
      STACKTOP = sp; //@line 9927
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx28 | 0); //@line 9929
      $157 = HEAP32[$143 >> 2] | 0; //@line 9931
      break;
     }
    }
   } while (0);
   HEAP32[$128 >> 2] = $157; //@line 9936
   $$pre85 = HEAP32[$15 >> 2] | 0; //@line 9937
   $161 = $$pre85; //@line 9939
   $163 = $$pre85; //@line 9939
  }
  HEAP32[$161 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 9943
  HEAP32[$2 + 8 >> 2] = 0; //@line 9945
  HEAP32[$2 >> 2] = 215; //@line 9946
  HEAP32[$2 + 4 >> 2] = $163; //@line 9948
  $164 = $2 + 12 | 0; //@line 9949
  HEAP32[$164 >> 2] = 724; //@line 9950
  $AsyncCtx57 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9951
  __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($31, $2); //@line 9952
  if (___async) {
   HEAP32[$AsyncCtx57 >> 2] = 216; //@line 9955
   HEAP32[$AsyncCtx57 + 4 >> 2] = $164; //@line 9957
   HEAP32[$AsyncCtx57 + 8 >> 2] = $13; //@line 9959
   HEAP32[$AsyncCtx57 + 12 >> 2] = $31; //@line 9961
   HEAP32[$AsyncCtx57 + 16 >> 2] = $2; //@line 9963
   HEAP32[$AsyncCtx57 + 20 >> 2] = $$lcssa; //@line 9965
   sp = STACKTOP; //@line 9966
   STACKTOP = sp; //@line 9967
   return;
  }
  _emscripten_free_async_context($AsyncCtx57 | 0); //@line 9969
  $170 = HEAP32[$164 >> 2] | 0; //@line 9970
  do {
   if ($170 | 0) {
    $173 = HEAP32[$170 + 8 >> 2] | 0; //@line 9975
    $AsyncCtx32 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9976
    FUNCTION_TABLE_vi[$173 & 511]($2); //@line 9977
    if (___async) {
     HEAP32[$AsyncCtx32 >> 2] = 217; //@line 9980
     HEAP32[$AsyncCtx32 + 4 >> 2] = $13; //@line 9982
     HEAP32[$AsyncCtx32 + 8 >> 2] = $31; //@line 9984
     HEAP32[$AsyncCtx32 + 12 >> 2] = $$lcssa; //@line 9986
     sp = STACKTOP; //@line 9987
     STACKTOP = sp; //@line 9988
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx32 | 0); //@line 9990
     break;
    }
   }
  } while (0);
  HEAP32[$13 >> 2] = $31; //@line 9995
 }
 $177 = HEAP32[$$lcssa >> 2] | 0; //@line 9997
 $AsyncCtx42 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9998
 __ZL26nsapi_dns_query_async_sendPv($177); //@line 9999
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 218; //@line 10002
  sp = STACKTOP; //@line 10003
  STACKTOP = sp; //@line 10004
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 10006
 STACKTOP = sp; //@line 10007
 return;
}
function __ZL26nsapi_dns_query_async_sendPv($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$byval_copy51 = 0, $$lcssa69 = 0, $$pr$i = 0, $$pr$i52 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $1 = 0, $104 = 0, $107 = 0, $108 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $150 = 0, $152 = 0, $159 = 0, $163 = 0, $164 = 0, $17 = 0, $184 = 0, $190 = 0, $194 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $66 = 0, $67 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx6 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10509
 STACKTOP = STACKTOP + 112 | 0; //@line 10510
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 10510
 $$byval_copy51 = sp + 84 | 0; //@line 10511
 $1 = sp; //@line 10512
 $2 = sp + 64 | 0; //@line 10513
 $3 = $0; //@line 10514
 $4 = HEAP32[1685] | 0; //@line 10515
 if (!$4) {
  label = 3; //@line 10518
 } else {
  if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) {
   $$lcssa69 = $4; //@line 10523
  } else {
   label = 3; //@line 10525
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1686] | 0; //@line 10530
   if ($8 | 0) {
    if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $8; //@line 10536
     break;
    }
   }
   $190 = HEAP32[1687] | 0; //@line 10540
   if ($190 | 0) {
    if ((HEAP32[$190 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $190; //@line 10546
     break;
    }
   }
   $194 = HEAP32[1688] | 0; //@line 10550
   if ($194 | 0) {
    if ((HEAP32[$194 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $194; //@line 10556
     break;
    }
   }
   $198 = HEAP32[1689] | 0; //@line 10560
   if (!$198) {
    STACKTOP = sp; //@line 10563
    return;
   }
   if ((HEAP32[$198 >> 2] | 0) == ($3 | 0)) {
    $$lcssa69 = $198; //@line 10568
   } else {
    STACKTOP = sp; //@line 10570
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa69 + 88 >> 2] | 0) != 1) {
  STACKTOP = sp; //@line 10578
  return;
 }
 $13 = $$lcssa69 + 83 | 0; //@line 10580
 $14 = HEAP8[$13 >> 0] | 0; //@line 10581
 if (!($14 << 24 >> 24)) {
  $17 = $$lcssa69 + 82 | 0; //@line 10584
  HEAP8[$17 >> 0] = (HEAP8[$17 >> 0] | 0) + 1 << 24 >> 24; //@line 10587
  $storemerge = 0; //@line 10588
 } else {
  $storemerge = $14 + -1 << 24 >> 24; //@line 10591
 }
 HEAP8[$13 >> 0] = $storemerge; //@line 10593
 $20 = HEAP16[872] | 0; //@line 10594
 $21 = $20 + 1 << 16 >> 16; //@line 10595
 HEAP16[872] = $21; //@line 10596
 $22 = $$lcssa69 + 80 | 0; //@line 10597
 HEAP16[$22 >> 1] = $20; //@line 10598
 if (!($21 << 16 >> 16)) {
  HEAP16[872] = 1; //@line 10601
 }
 $24 = _malloc(512) | 0; //@line 10603
 if (!$24) {
  $26 = $$lcssa69 + 28 | 0; //@line 10606
  $27 = HEAP32[$26 >> 2] | 0; //@line 10607
  do {
   if (!$27) {
    $37 = 0; //@line 10611
   } else {
    $31 = HEAP32[$27 + 4 >> 2] | 0; //@line 10615
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10616
    FUNCTION_TABLE_vii[$31 & 7]($$byval_copy51, $$lcssa69 + 16 | 0); //@line 10617
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 230; //@line 10620
     HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 10622
     HEAP32[$AsyncCtx + 8 >> 2] = $$byval_copy51; //@line 10624
     HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa69; //@line 10626
     HEAP32[$AsyncCtx + 16 >> 2] = $$byval_copy51; //@line 10628
     sp = STACKTOP; //@line 10629
     STACKTOP = sp; //@line 10630
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 10632
     $37 = HEAP32[$26 >> 2] | 0; //@line 10634
     break;
    }
   }
  } while (0);
  $36 = $$byval_copy51 + 12 | 0; //@line 10639
  HEAP32[$36 >> 2] = $37; //@line 10640
  $38 = HEAP32[$$lcssa69 >> 2] | 0; //@line 10641
  $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10642
  __ZL28nsapi_dns_query_async_deletei($38); //@line 10643
  if (___async) {
   HEAP32[$AsyncCtx27 >> 2] = 231; //@line 10646
   HEAP32[$AsyncCtx27 + 4 >> 2] = $36; //@line 10648
   HEAP32[$AsyncCtx27 + 8 >> 2] = $$byval_copy51; //@line 10650
   sp = STACKTOP; //@line 10651
   STACKTOP = sp; //@line 10652
   return;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 10654
  $AsyncCtx33 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10655
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 10656
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 232; //@line 10659
   HEAP32[$AsyncCtx33 + 4 >> 2] = $36; //@line 10661
   HEAP32[$AsyncCtx33 + 8 >> 2] = $$byval_copy51; //@line 10663
   sp = STACKTOP; //@line 10664
   STACKTOP = sp; //@line 10665
   return;
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 10667
  $43 = HEAP32[$36 >> 2] | 0; //@line 10668
  do {
   if ($43 | 0) {
    $45 = HEAP32[$43 >> 2] | 0; //@line 10672
    $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10673
    FUNCTION_TABLE_viii[$45 & 0]($$byval_copy51, -3007, 0); //@line 10674
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 233; //@line 10677
     HEAP32[$AsyncCtx2 + 4 >> 2] = $36; //@line 10679
     HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy51; //@line 10681
     sp = STACKTOP; //@line 10682
     STACKTOP = sp; //@line 10683
     return;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10685
    $$pr$i52 = HEAP32[$36 >> 2] | 0; //@line 10686
    if ($$pr$i52 | 0) {
     $50 = HEAP32[$$pr$i52 + 8 >> 2] | 0; //@line 10690
     $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10691
     FUNCTION_TABLE_vi[$50 & 511]($$byval_copy51); //@line 10692
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 234; //@line 10695
      HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy51; //@line 10697
      sp = STACKTOP; //@line 10698
      STACKTOP = sp; //@line 10699
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10701
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 10707
  return;
 }
 $52 = HEAP16[$22 >> 1] | 0; //@line 10709
 $54 = HEAP32[$$lcssa69 + 12 >> 2] | 0; //@line 10711
 $56 = HEAP32[$$lcssa69 + 52 >> 2] | 0; //@line 10713
 $57 = $24; //@line 10714
 HEAP8[$24 >> 0] = ($52 & 65535) >>> 8; //@line 10718
 HEAP8[$24 + 1 >> 0] = $52; //@line 10721
 HEAP8[$24 + 2 >> 0] = 1; //@line 10723
 HEAP8[$24 + 3 >> 0] = 0; //@line 10725
 HEAP8[$24 + 4 >> 0] = 0; //@line 10727
 $66 = $24 + 6 | 0; //@line 10728
 HEAP8[$24 + 5 >> 0] = 1; //@line 10729
 $67 = $24 + 12 | 0; //@line 10730
 HEAP8[$66 >> 0] = 0; //@line 10731
 HEAP8[$66 + 1 >> 0] = 0; //@line 10731
 HEAP8[$66 + 2 >> 0] = 0; //@line 10731
 HEAP8[$66 + 3 >> 0] = 0; //@line 10731
 HEAP8[$66 + 4 >> 0] = 0; //@line 10731
 HEAP8[$66 + 5 >> 0] = 0; //@line 10731
 if (!(HEAP8[$54 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $67; //@line 10735
 } else {
  $$048$i = $54; //@line 10737
  $$sroa$0$0$in47$i = $67; //@line 10737
  while (1) {
   $70 = _strcspn($$048$i, 4016) | 0; //@line 10739
   $72 = $$sroa$0$0$in47$i + 1 | 0; //@line 10741
   HEAP8[$$sroa$0$0$in47$i >> 0] = $70; //@line 10742
   $73 = $70 & 255; //@line 10743
   _memcpy($72 | 0, $$048$i | 0, $73 | 0) | 0; //@line 10744
   $74 = $72 + $73 | 0; //@line 10745
   $$048$i = $$048$i + ($70 + ((HEAP8[$$048$i + $70 >> 0] | 0) == 46 & 1)) | 0; //@line 10751
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $74; //@line 10755
    break;
   } else {
    $$sroa$0$0$in47$i = $74; //@line 10758
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 10763
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 10766
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = ($56 | 0) == 2 ? 28 : 1; //@line 10769
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 10771
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 10774
 $90 = $$sroa$0$0$in$lcssa$i + 5 - $57 | 0; //@line 10775
 HEAP32[$2 >> 2] = 0; //@line 10776
 HEAP32[$2 + 4 >> 2] = 0; //@line 10776
 HEAP32[$2 + 8 >> 2] = 0; //@line 10776
 HEAP32[$2 + 12 >> 2] = 0; //@line 10776
 HEAP32[$2 + 16 >> 2] = 0; //@line 10776
 HEAP32[$$byval_copy51 >> 2] = HEAP32[$2 >> 2]; //@line 10777
 HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 10777
 HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 10777
 HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 10777
 HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 10777
 __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy51, 0); //@line 10778
 $91 = $$lcssa69 + 8 | 0; //@line 10779
 $92 = $$lcssa69 + 82 | 0; //@line 10780
 $93 = $$lcssa69 + 84 | 0; //@line 10781
 $94 = $$lcssa69 + 85 | 0; //@line 10782
 L59 : do {
  if (HEAP8[$93 >> 0] | 0) {
   $96 = $$lcssa69 + 56 | 0; //@line 10787
   while (1) {
    $97 = HEAP32[$91 >> 2] | 0; //@line 10789
    $98 = HEAP8[$92 >> 0] | 0; //@line 10790
    if (($98 & 255) > 9) {
     if (!(HEAP8[$94 >> 0] | 0)) {
      break L59;
     }
     HEAP8[$92 >> 0] = 0; //@line 10798
     HEAP8[$94 >> 0] = 0; //@line 10799
     $104 = 0; //@line 10800
     label = 35; //@line 10801
    } else {
     if (($98 & 255) < 5) {
      $104 = $98; //@line 10805
      label = 35; //@line 10806
     } else {
      $124 = $98; //@line 10808
      label = 39; //@line 10809
     }
    }
    if ((label | 0) == 35) {
     label = 0; //@line 10813
     $107 = HEAP32[(HEAP32[$97 >> 2] | 0) + 28 >> 2] | 0; //@line 10817
     $AsyncCtx10 = _emscripten_alloc_async_context(56, sp) | 0; //@line 10818
     $108 = FUNCTION_TABLE_iiii[$107 & 31]($97, $104 & 255, $1) | 0; //@line 10819
     if (___async) {
      label = 36; //@line 10822
      break;
     }
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10825
     if (($108 | 0) < 0) {
      HEAP8[$92 >> 0] = 5; //@line 10828
      $124 = 5; //@line 10829
      label = 39; //@line 10830
     }
    }
    if ((label | 0) == 39) {
     label = 0; //@line 10834
     $126 = 608 + ((($124 & 255) + -5 | 0) * 20 | 0) | 0; //@line 10837
     HEAP32[$$byval_copy51 >> 2] = HEAP32[$126 >> 2]; //@line 10838
     HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$126 + 4 >> 2]; //@line 10838
     HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$126 + 8 >> 2]; //@line 10838
     HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$126 + 12 >> 2]; //@line 10838
     HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$126 + 16 >> 2]; //@line 10838
     __ZN13SocketAddress8set_addrE10nsapi_addr($1, $$byval_copy51); //@line 10839
    }
    __ZN13SocketAddress8set_portEt($1, 53); //@line 10841
    $163 = HEAP32[$96 >> 2] | 0; //@line 10842
    $AsyncCtx37 = _emscripten_alloc_async_context(56, sp) | 0; //@line 10843
    $164 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($163, $1, $24, $90) | 0; //@line 10844
    if (___async) {
     label = 57; //@line 10847
     break;
    }
    _emscripten_free_async_context($AsyncCtx37 | 0); //@line 10850
    if (($164 | 0) >= 0) {
     label = 60; //@line 10853
     break;
    }
    HEAP8[$92 >> 0] = (HEAP8[$92 >> 0] | 0) + 1 << 24 >> 24; //@line 10858
    HEAP32[$2 >> 2] = 0; //@line 10859
    HEAP32[$2 + 4 >> 2] = 0; //@line 10859
    HEAP32[$2 + 8 >> 2] = 0; //@line 10859
    HEAP32[$2 + 12 >> 2] = 0; //@line 10859
    HEAP32[$2 + 16 >> 2] = 0; //@line 10859
    HEAP32[$$byval_copy51 >> 2] = HEAP32[$2 >> 2]; //@line 10860
    HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 10860
    HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 10860
    HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 10860
    HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 10860
    __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy51, 0); //@line 10861
    if (!(HEAP8[$93 >> 0] | 0)) {
     break L59;
    }
   }
   if ((label | 0) == 36) {
    HEAP32[$AsyncCtx10 >> 2] = 235; //@line 10869
    HEAP32[$AsyncCtx10 + 4 >> 2] = $24; //@line 10871
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 10873
    HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 10875
    HEAP32[$AsyncCtx10 + 16 >> 2] = $96; //@line 10877
    HEAP32[$AsyncCtx10 + 20 >> 2] = $90; //@line 10879
    HEAP32[$AsyncCtx10 + 24 >> 2] = $92; //@line 10881
    HEAP32[$AsyncCtx10 + 28 >> 2] = $2; //@line 10883
    HEAP32[$AsyncCtx10 + 32 >> 2] = $2; //@line 10885
    HEAP32[$AsyncCtx10 + 36 >> 2] = $93; //@line 10887
    HEAP32[$AsyncCtx10 + 40 >> 2] = $94; //@line 10889
    HEAP32[$AsyncCtx10 + 44 >> 2] = $$lcssa69; //@line 10891
    HEAP32[$AsyncCtx10 + 48 >> 2] = $$byval_copy51; //@line 10893
    HEAP32[$AsyncCtx10 + 52 >> 2] = $91; //@line 10895
    sp = STACKTOP; //@line 10896
    STACKTOP = sp; //@line 10897
    return;
   } else if ((label | 0) == 57) {
    HEAP32[$AsyncCtx37 >> 2] = 241; //@line 10900
    HEAP32[$AsyncCtx37 + 4 >> 2] = $24; //@line 10902
    HEAP32[$AsyncCtx37 + 8 >> 2] = $1; //@line 10904
    HEAP32[$AsyncCtx37 + 12 >> 2] = $1; //@line 10906
    HEAP32[$AsyncCtx37 + 16 >> 2] = $96; //@line 10908
    HEAP32[$AsyncCtx37 + 20 >> 2] = $90; //@line 10910
    HEAP32[$AsyncCtx37 + 24 >> 2] = $92; //@line 10912
    HEAP32[$AsyncCtx37 + 28 >> 2] = $2; //@line 10914
    HEAP32[$AsyncCtx37 + 32 >> 2] = $2; //@line 10916
    HEAP32[$AsyncCtx37 + 36 >> 2] = $93; //@line 10918
    HEAP32[$AsyncCtx37 + 40 >> 2] = $94; //@line 10920
    HEAP32[$AsyncCtx37 + 44 >> 2] = $$lcssa69; //@line 10922
    HEAP32[$AsyncCtx37 + 48 >> 2] = $$byval_copy51; //@line 10924
    HEAP32[$AsyncCtx37 + 52 >> 2] = $91; //@line 10926
    sp = STACKTOP; //@line 10927
    STACKTOP = sp; //@line 10928
    return;
   } else if ((label | 0) == 60) {
    HEAP8[$94 >> 0] = (HEAP8[$94 >> 0] | 0) + 1 << 24 >> 24; //@line 10933
    $184 = HEAP8[$93 >> 0] | 0; //@line 10934
    if ($184 << 24 >> 24) {
     HEAP8[$93 >> 0] = $184 + -1 << 24 >> 24; //@line 10938
    }
    _free($24); //@line 10940
    HEAP32[$$lcssa69 + 76 >> 2] = 5e3; //@line 10942
    STACKTOP = sp; //@line 10943
    return;
   }
  }
 } while (0);
 $127 = $$lcssa69 + 28 | 0; //@line 10947
 $128 = HEAP32[$127 >> 2] | 0; //@line 10948
 do {
  if (!$128) {
   $140 = 0; //@line 10952
  } else {
   $132 = HEAP32[$128 + 4 >> 2] | 0; //@line 10956
   $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10957
   FUNCTION_TABLE_vii[$132 & 7]($$byval_copy51, $$lcssa69 + 16 | 0); //@line 10958
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 236; //@line 10961
    HEAP32[$AsyncCtx14 + 4 >> 2] = $127; //@line 10963
    HEAP32[$AsyncCtx14 + 8 >> 2] = $$byval_copy51; //@line 10965
    HEAP32[$AsyncCtx14 + 12 >> 2] = $$lcssa69; //@line 10967
    HEAP32[$AsyncCtx14 + 16 >> 2] = $$byval_copy51; //@line 10969
    HEAP32[$AsyncCtx14 + 20 >> 2] = $24; //@line 10971
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 10973
    sp = STACKTOP; //@line 10974
    STACKTOP = sp; //@line 10975
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 10977
    $140 = HEAP32[$127 >> 2] | 0; //@line 10979
    break;
   }
  }
 } while (0);
 $139 = $$byval_copy51 + 12 | 0; //@line 10984
 HEAP32[$139 >> 2] = $140; //@line 10985
 $141 = HEAP32[$$lcssa69 >> 2] | 0; //@line 10986
 $AsyncCtx24 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10987
 __ZL28nsapi_dns_query_async_deletei($141); //@line 10988
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 237; //@line 10991
  HEAP32[$AsyncCtx24 + 4 >> 2] = $139; //@line 10993
  HEAP32[$AsyncCtx24 + 8 >> 2] = $$byval_copy51; //@line 10995
  HEAP32[$AsyncCtx24 + 12 >> 2] = $24; //@line 10997
  HEAP32[$AsyncCtx24 + 16 >> 2] = $1; //@line 10999
  sp = STACKTOP; //@line 11000
  STACKTOP = sp; //@line 11001
  return;
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 11003
 $AsyncCtx30 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11004
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 11005
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 238; //@line 11008
  HEAP32[$AsyncCtx30 + 4 >> 2] = $139; //@line 11010
  HEAP32[$AsyncCtx30 + 8 >> 2] = $$byval_copy51; //@line 11012
  HEAP32[$AsyncCtx30 + 12 >> 2] = $24; //@line 11014
  HEAP32[$AsyncCtx30 + 16 >> 2] = $1; //@line 11016
  sp = STACKTOP; //@line 11017
  STACKTOP = sp; //@line 11018
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 11020
 $150 = HEAP32[$139 >> 2] | 0; //@line 11021
 do {
  if ($150 | 0) {
   $152 = HEAP32[$150 >> 2] | 0; //@line 11025
   $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11026
   FUNCTION_TABLE_viii[$152 & 0]($$byval_copy51, -3019, 0); //@line 11027
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 239; //@line 11030
    HEAP32[$AsyncCtx17 + 4 >> 2] = $139; //@line 11032
    HEAP32[$AsyncCtx17 + 8 >> 2] = $$byval_copy51; //@line 11034
    HEAP32[$AsyncCtx17 + 12 >> 2] = $24; //@line 11036
    HEAP32[$AsyncCtx17 + 16 >> 2] = $1; //@line 11038
    sp = STACKTOP; //@line 11039
    STACKTOP = sp; //@line 11040
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11042
   $$pr$i = HEAP32[$139 >> 2] | 0; //@line 11043
   if ($$pr$i | 0) {
    $159 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 11047
    $AsyncCtx21 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11048
    FUNCTION_TABLE_vi[$159 & 511]($$byval_copy51); //@line 11049
    if (___async) {
     HEAP32[$AsyncCtx21 >> 2] = 240; //@line 11052
     HEAP32[$AsyncCtx21 + 4 >> 2] = $$byval_copy51; //@line 11054
     HEAP32[$AsyncCtx21 + 8 >> 2] = $24; //@line 11056
     HEAP32[$AsyncCtx21 + 12 >> 2] = $1; //@line 11058
     sp = STACKTOP; //@line 11059
     STACKTOP = sp; //@line 11060
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx21 | 0); //@line 11062
     break;
    }
   }
  }
 } while (0);
 _free($24); //@line 11068
 STACKTOP = sp; //@line 11069
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_187($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $14 = 0, $143 = 0, $146 = 0, $148 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $169 = 0, $172 = 0, $174 = 0, $18 = 0, $187 = 0, $188 = 0, $189 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $69 = 0, $77 = 0, $8 = 0, $80 = 0, $83 = 0, $86 = 0, $93 = 0, $95 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8183
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8187
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8189
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8191
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8193
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8195
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8197
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8199
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8201
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8203
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8205
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8207
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] >> 2]; //@line 8211
 $27 = $6 + 32 | 0; //@line 8212
 do {
  if (($27 | 0) != ($8 | 0)) {
   $29 = $6 + 44 | 0; //@line 8216
   $30 = HEAP32[$29 >> 2] | 0; //@line 8217
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 8221
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 8222
    FUNCTION_TABLE_vi[$33 & 511]($27); //@line 8223
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 163; //@line 8226
     $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 8227
     HEAP32[$34 >> 2] = $4; //@line 8228
     $35 = $ReallocAsyncCtx4 + 8 | 0; //@line 8229
     HEAP32[$35 >> 2] = $6; //@line 8230
     $36 = $ReallocAsyncCtx4 + 12 | 0; //@line 8231
     HEAP32[$36 >> 2] = $8; //@line 8232
     $37 = $ReallocAsyncCtx4 + 16 | 0; //@line 8233
     HEAP32[$37 >> 2] = $27; //@line 8234
     $38 = $ReallocAsyncCtx4 + 20 | 0; //@line 8235
     HEAP32[$38 >> 2] = $10; //@line 8236
     $39 = $ReallocAsyncCtx4 + 24 | 0; //@line 8237
     HEAP32[$39 >> 2] = $12; //@line 8238
     $40 = $ReallocAsyncCtx4 + 28 | 0; //@line 8239
     HEAP32[$40 >> 2] = $29; //@line 8240
     $41 = $ReallocAsyncCtx4 + 32 | 0; //@line 8241
     HEAP32[$41 >> 2] = $14; //@line 8242
     $42 = $ReallocAsyncCtx4 + 36 | 0; //@line 8243
     HEAP32[$42 >> 2] = $16; //@line 8244
     $43 = $ReallocAsyncCtx4 + 40 | 0; //@line 8245
     HEAP32[$43 >> 2] = $18; //@line 8246
     $44 = $ReallocAsyncCtx4 + 44 | 0; //@line 8247
     HEAP32[$44 >> 2] = $20; //@line 8248
     $45 = $ReallocAsyncCtx4 + 48 | 0; //@line 8249
     HEAP32[$45 >> 2] = $22; //@line 8250
     $46 = $ReallocAsyncCtx4 + 52 | 0; //@line 8251
     HEAP32[$46 >> 2] = $24; //@line 8252
     sp = STACKTOP; //@line 8253
     return;
    }
    ___async_unwind = 0; //@line 8256
    HEAP32[$ReallocAsyncCtx4 >> 2] = 163; //@line 8257
    $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 8258
    HEAP32[$34 >> 2] = $4; //@line 8259
    $35 = $ReallocAsyncCtx4 + 8 | 0; //@line 8260
    HEAP32[$35 >> 2] = $6; //@line 8261
    $36 = $ReallocAsyncCtx4 + 12 | 0; //@line 8262
    HEAP32[$36 >> 2] = $8; //@line 8263
    $37 = $ReallocAsyncCtx4 + 16 | 0; //@line 8264
    HEAP32[$37 >> 2] = $27; //@line 8265
    $38 = $ReallocAsyncCtx4 + 20 | 0; //@line 8266
    HEAP32[$38 >> 2] = $10; //@line 8267
    $39 = $ReallocAsyncCtx4 + 24 | 0; //@line 8268
    HEAP32[$39 >> 2] = $12; //@line 8269
    $40 = $ReallocAsyncCtx4 + 28 | 0; //@line 8270
    HEAP32[$40 >> 2] = $29; //@line 8271
    $41 = $ReallocAsyncCtx4 + 32 | 0; //@line 8272
    HEAP32[$41 >> 2] = $14; //@line 8273
    $42 = $ReallocAsyncCtx4 + 36 | 0; //@line 8274
    HEAP32[$42 >> 2] = $16; //@line 8275
    $43 = $ReallocAsyncCtx4 + 40 | 0; //@line 8276
    HEAP32[$43 >> 2] = $18; //@line 8277
    $44 = $ReallocAsyncCtx4 + 44 | 0; //@line 8278
    HEAP32[$44 >> 2] = $20; //@line 8279
    $45 = $ReallocAsyncCtx4 + 48 | 0; //@line 8280
    HEAP32[$45 >> 2] = $22; //@line 8281
    $46 = $ReallocAsyncCtx4 + 52 | 0; //@line 8282
    HEAP32[$46 >> 2] = $24; //@line 8283
    sp = STACKTOP; //@line 8284
    return;
   }
   $47 = $8 + 12 | 0; //@line 8287
   $48 = HEAP32[$47 >> 2] | 0; //@line 8288
   if (!$48) {
    HEAP32[$29 >> 2] = 0; //@line 8291
    break;
   }
   $51 = HEAP32[$48 + 4 >> 2] | 0; //@line 8295
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 8296
   FUNCTION_TABLE_vii[$51 & 7]($27, $8); //@line 8297
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 8300
    $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 8301
    HEAP32[$52 >> 2] = $4; //@line 8302
    $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 8303
    HEAP32[$53 >> 2] = $6; //@line 8304
    $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 8305
    HEAP32[$54 >> 2] = $10; //@line 8306
    $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 8307
    HEAP32[$55 >> 2] = $12; //@line 8308
    $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 8309
    HEAP32[$56 >> 2] = $29; //@line 8310
    $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 8311
    HEAP32[$57 >> 2] = $14; //@line 8312
    $58 = $ReallocAsyncCtx5 + 28 | 0; //@line 8313
    HEAP32[$58 >> 2] = $16; //@line 8314
    $59 = $ReallocAsyncCtx5 + 32 | 0; //@line 8315
    HEAP32[$59 >> 2] = $47; //@line 8316
    $60 = $ReallocAsyncCtx5 + 36 | 0; //@line 8317
    HEAP32[$60 >> 2] = $18; //@line 8318
    $61 = $ReallocAsyncCtx5 + 40 | 0; //@line 8319
    HEAP32[$61 >> 2] = $27; //@line 8320
    $62 = $ReallocAsyncCtx5 + 44 | 0; //@line 8321
    HEAP32[$62 >> 2] = $20; //@line 8322
    $63 = $ReallocAsyncCtx5 + 48 | 0; //@line 8323
    HEAP32[$63 >> 2] = $22; //@line 8324
    $64 = $ReallocAsyncCtx5 + 52 | 0; //@line 8325
    HEAP32[$64 >> 2] = $24; //@line 8326
    sp = STACKTOP; //@line 8327
    return;
   }
   ___async_unwind = 0; //@line 8330
   HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 8331
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 8332
   HEAP32[$52 >> 2] = $4; //@line 8333
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 8334
   HEAP32[$53 >> 2] = $6; //@line 8335
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 8336
   HEAP32[$54 >> 2] = $10; //@line 8337
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 8338
   HEAP32[$55 >> 2] = $12; //@line 8339
   $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 8340
   HEAP32[$56 >> 2] = $29; //@line 8341
   $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 8342
   HEAP32[$57 >> 2] = $14; //@line 8343
   $58 = $ReallocAsyncCtx5 + 28 | 0; //@line 8344
   HEAP32[$58 >> 2] = $16; //@line 8345
   $59 = $ReallocAsyncCtx5 + 32 | 0; //@line 8346
   HEAP32[$59 >> 2] = $47; //@line 8347
   $60 = $ReallocAsyncCtx5 + 36 | 0; //@line 8348
   HEAP32[$60 >> 2] = $18; //@line 8349
   $61 = $ReallocAsyncCtx5 + 40 | 0; //@line 8350
   HEAP32[$61 >> 2] = $27; //@line 8351
   $62 = $ReallocAsyncCtx5 + 44 | 0; //@line 8352
   HEAP32[$62 >> 2] = $20; //@line 8353
   $63 = $ReallocAsyncCtx5 + 48 | 0; //@line 8354
   HEAP32[$63 >> 2] = $22; //@line 8355
   $64 = $ReallocAsyncCtx5 + 52 | 0; //@line 8356
   HEAP32[$64 >> 2] = $24; //@line 8357
   sp = STACKTOP; //@line 8358
   return;
  }
 } while (0);
 HEAP32[$6 + 8 >> 2] = $10; //@line 8363
 HEAP32[$6 + 48 >> 2] = $14; //@line 8365
 HEAP32[$6 + 52 >> 2] = $16; //@line 8367
 $68 = $6 + 56 | 0; //@line 8368
 HEAP32[$68 >> 2] = 0; //@line 8369
 $69 = $6 + 60 | 0; //@line 8370
 HEAP32[$69 >> 2] = 0; //@line 8371
 HEAP32[$6 + 64 >> 2] = 0; //@line 8373
 HEAP8[$6 + 82 >> 0] = 0; //@line 8375
 HEAP8[$6 + 83 >> 0] = 1; //@line 8377
 HEAP8[$6 + 84 >> 0] = 3; //@line 8379
 HEAP8[$6 + 85 >> 0] = 0; //@line 8381
 HEAP16[$6 + 80 >> 1] = 0; //@line 8383
 HEAP32[$6 + 76 >> 2] = 0; //@line 8385
 $77 = $6 + 72 | 0; //@line 8386
 HEAP32[$77 >> 2] = 15500; //@line 8387
 HEAP8[$6 + 86 >> 0] = 0; //@line 8389
 HEAP32[$6 + 88 >> 2] = 0; //@line 8391
 $80 = HEAP32[177] | 0; //@line 8392
 HEAP32[177] = $80 + 1; //@line 8394
 HEAP32[$6 >> 2] = ($80 | 0) > 32767 ? 1 : $80; //@line 8397
 $83 = HEAP32[1685] | 0; //@line 8398
 if (!$83) {
  $$1 = 0; //@line 8401
  $133 = 0; //@line 8401
 } else {
  $86 = HEAP32[$83 + 56 >> 2] | 0; //@line 8404
  if (!$86) {
   $$1 = 1; //@line 8407
   $133 = 0; //@line 8407
  } else {
   if ((HEAP32[$83 + 8 >> 2] | 0) == ($10 | 0)) {
    HEAP32[$68 >> 2] = $86; //@line 8413
    HEAP32[$69 >> 2] = HEAP32[$83 + 60 >> 2]; //@line 8416
    $$1 = 1; //@line 8417
    $133 = $86; //@line 8417
   } else {
    $$1 = 1; //@line 8419
    $133 = 0; //@line 8419
   }
  }
 }
 $93 = HEAP32[1686] | 0; //@line 8423
 if (!$93) {
  $$1$1 = $$1; //@line 8426
  $146 = $133; //@line 8426
 } else {
  if (!$133) {
   $135 = HEAP32[$93 + 56 >> 2] | 0; //@line 8431
   if (!$135) {
    $187 = 0; //@line 8434
   } else {
    if ((HEAP32[$93 + 8 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$68 >> 2] = $135; //@line 8440
     HEAP32[$69 >> 2] = HEAP32[$93 + 60 >> 2]; //@line 8443
     $187 = $135; //@line 8444
    } else {
     $187 = 0; //@line 8446
    }
   }
  } else {
   $187 = $133; //@line 8450
  }
  $$1$1 = $$1 + 1 | 0; //@line 8453
  $146 = $187; //@line 8453
 }
 $143 = HEAP32[1687] | 0; //@line 8455
 if (!$143) {
  $$1$2 = $$1$1; //@line 8458
  $159 = $146; //@line 8458
 } else {
  if (!$146) {
   $148 = HEAP32[$143 + 56 >> 2] | 0; //@line 8463
   if (!$148) {
    $188 = 0; //@line 8466
   } else {
    if ((HEAP32[$143 + 8 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$68 >> 2] = $148; //@line 8472
     HEAP32[$69 >> 2] = HEAP32[$143 + 60 >> 2]; //@line 8475
     $188 = $148; //@line 8476
    } else {
     $188 = 0; //@line 8478
    }
   }
  } else {
   $188 = $146; //@line 8482
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 8485
  $159 = $188; //@line 8485
 }
 $156 = HEAP32[1688] | 0; //@line 8487
 if (!$156) {
  $$1$3 = $$1$2; //@line 8490
  $172 = $159; //@line 8490
 } else {
  if (!$159) {
   $161 = HEAP32[$156 + 56 >> 2] | 0; //@line 8495
   if (!$161) {
    $189 = 0; //@line 8498
   } else {
    if ((HEAP32[$156 + 8 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$68 >> 2] = $161; //@line 8504
     HEAP32[$69 >> 2] = HEAP32[$156 + 60 >> 2]; //@line 8507
     $189 = $161; //@line 8508
    } else {
     $189 = 0; //@line 8510
    }
   }
  } else {
   $189 = $159; //@line 8514
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 8517
  $172 = $189; //@line 8517
 }
 $169 = HEAP32[1689] | 0; //@line 8519
 if (!$169) {
  $$1$4 = $$1$3; //@line 8522
 } else {
  if (!$172) {
   $174 = HEAP32[$169 + 56 >> 2] | 0; //@line 8527
   if ($174 | 0) {
    if ((HEAP32[$169 + 8 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$68 >> 2] = $174; //@line 8534
     HEAP32[$69 >> 2] = HEAP32[$169 + 60 >> 2]; //@line 8537
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 8542
 }
 HEAP32[6740 + ($4 << 2) >> 2] = $6; //@line 8545
 HEAP32[$77 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 8548
 if (HEAP8[7620] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 8552
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 8553
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 8556
   $130 = $ReallocAsyncCtx13 + 4 | 0; //@line 8557
   HEAP32[$130 >> 2] = $6; //@line 8558
   $131 = $ReallocAsyncCtx13 + 8 | 0; //@line 8559
   HEAP32[$131 >> 2] = $12; //@line 8560
   sp = STACKTOP; //@line 8561
   return;
  }
  ___async_unwind = 0; //@line 8564
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 8565
  $130 = $ReallocAsyncCtx13 + 4 | 0; //@line 8566
  HEAP32[$130 >> 2] = $6; //@line 8567
  $131 = $ReallocAsyncCtx13 + 8 | 0; //@line 8568
  HEAP32[$131 >> 2] = $12; //@line 8569
  sp = STACKTOP; //@line 8570
  return;
 }
 $95 = $6 + 44 | 0; //@line 8573
 $96 = HEAP32[$95 >> 2] | 0; //@line 8574
 if (!$96) {
  $110 = $18 + 12 | 0; //@line 8577
  HEAP32[$110 >> 2] = 0; //@line 8578
  $112 = $20 + 4 | 0; //@line 8580
  HEAP32[$112 >> 2] = 0; //@line 8582
  HEAP32[$112 + 4 >> 2] = 0; //@line 8585
  HEAP32[$20 >> 2] = 3; //@line 8586
  $116 = $20 + 12 | 0; //@line 8587
  HEAP32[$116 >> 2] = 712; //@line 8588
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 8589
  $117 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 100, $20) | 0; //@line 8590
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 8593
   $118 = $ReallocAsyncCtx14 + 4 | 0; //@line 8594
   HEAP32[$118 >> 2] = $6; //@line 8595
   $119 = $ReallocAsyncCtx14 + 8 | 0; //@line 8596
   HEAP32[$119 >> 2] = $6; //@line 8597
   $120 = $ReallocAsyncCtx14 + 12 | 0; //@line 8598
   HEAP32[$120 >> 2] = $12; //@line 8599
   $121 = $ReallocAsyncCtx14 + 16 | 0; //@line 8600
   HEAP32[$121 >> 2] = $116; //@line 8601
   $122 = $ReallocAsyncCtx14 + 20 | 0; //@line 8602
   HEAP32[$122 >> 2] = $110; //@line 8603
   $123 = $ReallocAsyncCtx14 + 24 | 0; //@line 8604
   HEAP32[$123 >> 2] = $20; //@line 8605
   $124 = $ReallocAsyncCtx14 + 28 | 0; //@line 8606
   HEAP32[$124 >> 2] = $24; //@line 8607
   $125 = $ReallocAsyncCtx14 + 32 | 0; //@line 8608
   HEAP32[$125 >> 2] = $22; //@line 8609
   $126 = $ReallocAsyncCtx14 + 36 | 0; //@line 8610
   HEAP32[$126 >> 2] = $18; //@line 8611
   $127 = $ReallocAsyncCtx14 + 40 | 0; //@line 8612
   HEAP32[$127 >> 2] = $27; //@line 8613
   $128 = $ReallocAsyncCtx14 + 44 | 0; //@line 8614
   HEAP32[$128 >> 2] = $95; //@line 8615
   sp = STACKTOP; //@line 8616
   return;
  }
  HEAP32[___async_retval >> 2] = $117; //@line 8620
  ___async_unwind = 0; //@line 8621
  HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 8622
  $118 = $ReallocAsyncCtx14 + 4 | 0; //@line 8623
  HEAP32[$118 >> 2] = $6; //@line 8624
  $119 = $ReallocAsyncCtx14 + 8 | 0; //@line 8625
  HEAP32[$119 >> 2] = $6; //@line 8626
  $120 = $ReallocAsyncCtx14 + 12 | 0; //@line 8627
  HEAP32[$120 >> 2] = $12; //@line 8628
  $121 = $ReallocAsyncCtx14 + 16 | 0; //@line 8629
  HEAP32[$121 >> 2] = $116; //@line 8630
  $122 = $ReallocAsyncCtx14 + 20 | 0; //@line 8631
  HEAP32[$122 >> 2] = $110; //@line 8632
  $123 = $ReallocAsyncCtx14 + 24 | 0; //@line 8633
  HEAP32[$123 >> 2] = $20; //@line 8634
  $124 = $ReallocAsyncCtx14 + 28 | 0; //@line 8635
  HEAP32[$124 >> 2] = $24; //@line 8636
  $125 = $ReallocAsyncCtx14 + 32 | 0; //@line 8637
  HEAP32[$125 >> 2] = $22; //@line 8638
  $126 = $ReallocAsyncCtx14 + 36 | 0; //@line 8639
  HEAP32[$126 >> 2] = $18; //@line 8640
  $127 = $ReallocAsyncCtx14 + 40 | 0; //@line 8641
  HEAP32[$127 >> 2] = $27; //@line 8642
  $128 = $ReallocAsyncCtx14 + 44 | 0; //@line 8643
  HEAP32[$128 >> 2] = $95; //@line 8644
  sp = STACKTOP; //@line 8645
  return;
 } else {
  $99 = HEAP32[$96 + 4 >> 2] | 0; //@line 8649
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 8650
  FUNCTION_TABLE_vii[$99 & 7]($18, $27); //@line 8651
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 8654
   $100 = $ReallocAsyncCtx6 + 4 | 0; //@line 8655
   HEAP32[$100 >> 2] = $6; //@line 8656
   $101 = $ReallocAsyncCtx6 + 8 | 0; //@line 8657
   HEAP32[$101 >> 2] = $12; //@line 8658
   $102 = $ReallocAsyncCtx6 + 12 | 0; //@line 8659
   HEAP32[$102 >> 2] = $95; //@line 8660
   $103 = $ReallocAsyncCtx6 + 16 | 0; //@line 8661
   HEAP32[$103 >> 2] = $20; //@line 8662
   $104 = $ReallocAsyncCtx6 + 20 | 0; //@line 8663
   HEAP32[$104 >> 2] = $18; //@line 8664
   $105 = $ReallocAsyncCtx6 + 24 | 0; //@line 8665
   HEAP32[$105 >> 2] = $22; //@line 8666
   $106 = $ReallocAsyncCtx6 + 28 | 0; //@line 8667
   HEAP32[$106 >> 2] = $24; //@line 8668
   $107 = $ReallocAsyncCtx6 + 32 | 0; //@line 8669
   HEAP32[$107 >> 2] = $6; //@line 8670
   $108 = $ReallocAsyncCtx6 + 36 | 0; //@line 8671
   HEAP32[$108 >> 2] = $27; //@line 8672
   $109 = $ReallocAsyncCtx6 + 40 | 0; //@line 8673
   HEAP32[$109 >> 2] = $95; //@line 8674
   sp = STACKTOP; //@line 8675
   return;
  }
  ___async_unwind = 0; //@line 8678
  HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 8679
  $100 = $ReallocAsyncCtx6 + 4 | 0; //@line 8680
  HEAP32[$100 >> 2] = $6; //@line 8681
  $101 = $ReallocAsyncCtx6 + 8 | 0; //@line 8682
  HEAP32[$101 >> 2] = $12; //@line 8683
  $102 = $ReallocAsyncCtx6 + 12 | 0; //@line 8684
  HEAP32[$102 >> 2] = $95; //@line 8685
  $103 = $ReallocAsyncCtx6 + 16 | 0; //@line 8686
  HEAP32[$103 >> 2] = $20; //@line 8687
  $104 = $ReallocAsyncCtx6 + 20 | 0; //@line 8688
  HEAP32[$104 >> 2] = $18; //@line 8689
  $105 = $ReallocAsyncCtx6 + 24 | 0; //@line 8690
  HEAP32[$105 >> 2] = $22; //@line 8691
  $106 = $ReallocAsyncCtx6 + 28 | 0; //@line 8692
  HEAP32[$106 >> 2] = $24; //@line 8693
  $107 = $ReallocAsyncCtx6 + 32 | 0; //@line 8694
  HEAP32[$107 >> 2] = $6; //@line 8695
  $108 = $ReallocAsyncCtx6 + 36 | 0; //@line 8696
  HEAP32[$108 >> 2] = $27; //@line 8697
  $109 = $ReallocAsyncCtx6 + 40 | 0; //@line 8698
  HEAP32[$109 >> 2] = $95; //@line 8699
  sp = STACKTOP; //@line 8700
  return;
 }
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17440
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17442
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17444
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17446
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17448
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17450
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17452
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17454
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17456
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17458
 $20 = HEAP8[$0 + 40 >> 0] | 0; //@line 17460
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17462
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17466
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17470
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17472
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17474
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 17476
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 17478
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 17480
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 17482
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 17484
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 17486
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 17488
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 17490
 HEAP32[133] = (HEAP32[133] | 0) + 1; //@line 17493
 $53 = HEAP32[122] | 0; //@line 17494
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 17498
   do {
    if ($20 << 24 >> 24 > -1 & ($6 | 0) != 0) {
     $57 = HEAP32[119] | 0; //@line 17504
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $6) | 0) {
       $$0$i = 1; //@line 17511
       break;
      }
     }
     $62 = HEAP32[120] | 0; //@line 17515
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 17519
     } else {
      if (!(_strstr($62, $6) | 0)) {
       $$0$i = 1; //@line 17524
      } else {
       label = 9; //@line 17526
      }
     }
    } else {
     label = 9; //@line 17530
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 17534
   }
   if (!((HEAP32[129] | 0) != 0 & ((($6 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[126] = HEAP32[124]; //@line 17546
    break;
   }
   $73 = HEAPU8[472] | 0; //@line 17550
   $74 = $20 & 255; //@line 17551
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 17556
    $$lobit = $78 >>> 6; //@line 17557
    $79 = $$lobit & 255; //@line 17558
    $83 = ($73 & 32 | 0) == 0; //@line 17562
    $84 = HEAP32[123] | 0; //@line 17563
    $85 = HEAP32[122] | 0; //@line 17564
    $86 = $20 << 24 >> 24 == 1; //@line 17565
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 17568
     _vsnprintf($85, $84, $2, $4) | 0; //@line 17569
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 62; //@line 17572
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 17573
      $$expand_i1_val = $86 & 1; //@line 17574
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 17575
      sp = STACKTOP; //@line 17576
      return;
     }
     ___async_unwind = 0; //@line 17579
     HEAP32[$ReallocAsyncCtx12 >> 2] = 62; //@line 17580
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 17581
     $$expand_i1_val = $86 & 1; //@line 17582
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 17583
     sp = STACKTOP; //@line 17584
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 17590
     $$1143 = $85; //@line 17590
     $$1145 = $84; //@line 17590
     $$3154 = 0; //@line 17590
     label = 28; //@line 17591
    } else {
     if ($83) {
      $$0142 = $85; //@line 17594
      $$0144 = $84; //@line 17594
     } else {
      $89 = _snprintf($85, $84, 2637, $22) | 0; //@line 17596
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 17598
      $91 = ($$ | 0) > 0; //@line 17599
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 17604
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 17604
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 17608
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 2655; //@line 17614
        label = 25; //@line 17615
        break;
       }
      case 1:
       {
        $$sink = 2661; //@line 17619
        label = 25; //@line 17620
        break;
       }
      case 3:
       {
        $$sink = 2649; //@line 17624
        label = 25; //@line 17625
        break;
       }
      case 7:
       {
        $$sink = 2643; //@line 17629
        label = 25; //@line 17630
        break;
       }
      default:
       {
        $$0141 = 0; //@line 17634
        $$1152 = 0; //@line 17634
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$26 >> 2] = $$sink; //@line 17638
       $$0141 = $79 & 1; //@line 17641
       $$1152 = _snprintf($$0142, $$0144, 2667, $26) | 0; //@line 17641
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 17644
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 17646
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 17648
       $$1$off0 = $extract$t159; //@line 17653
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 17653
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 17653
       $$3154 = $$1152; //@line 17653
       label = 28; //@line 17654
      } else {
       $$1$off0 = $extract$t159; //@line 17656
       $$1143 = $$0142; //@line 17656
       $$1145 = $$0144; //@line 17656
       $$3154 = $$1152$; //@line 17656
       label = 28; //@line 17657
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[127] | 0) != 0) {
      HEAP32[$30 >> 2] = HEAP32[$4 >> 2]; //@line 17668
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 17669
      $108 = _vsnprintf(0, 0, $2, $30) | 0; //@line 17670
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 66; //@line 17673
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 17674
       HEAP32[$109 >> 2] = $2; //@line 17675
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 17676
       HEAP32[$110 >> 2] = $4; //@line 17677
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 17678
       HEAP32[$111 >> 2] = $12; //@line 17679
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 17680
       HEAP32[$112 >> 2] = $14; //@line 17681
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 17682
       HEAP32[$113 >> 2] = $16; //@line 17683
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 17684
       HEAP32[$114 >> 2] = $6; //@line 17685
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 17686
       HEAP32[$115 >> 2] = $18; //@line 17687
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 17688
       HEAP32[$116 >> 2] = $32; //@line 17689
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 17690
       HEAP32[$117 >> 2] = $34; //@line 17691
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 17692
       HEAP32[$118 >> 2] = $36; //@line 17693
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 17694
       HEAP32[$119 >> 2] = $38; //@line 17695
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 17696
       HEAP32[$120 >> 2] = $$1143; //@line 17697
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 17698
       HEAP32[$121 >> 2] = $$1145; //@line 17699
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 17700
       HEAP32[$122 >> 2] = $74; //@line 17701
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 17702
       HEAP32[$123 >> 2] = $40; //@line 17703
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 17704
       HEAP32[$124 >> 2] = $42; //@line 17705
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 17706
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 17707
       HEAP8[$125 >> 0] = $$1$off0$expand_i1_val; //@line 17708
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 17709
       HEAP32[$126 >> 2] = $44; //@line 17710
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 17711
       HEAP32[$127 >> 2] = $46; //@line 17712
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 17713
       HEAP32[$128 >> 2] = $48; //@line 17714
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 17715
       HEAP32[$129 >> 2] = $50; //@line 17716
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 17717
       HEAP32[$130 >> 2] = $8; //@line 17718
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 17719
       HEAP32[$131 >> 2] = $10; //@line 17720
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 17721
       HEAP32[$132 >> 2] = $30; //@line 17722
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 17723
       HEAP32[$133 >> 2] = $$3154; //@line 17724
       sp = STACKTOP; //@line 17725
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 17729
      ___async_unwind = 0; //@line 17730
      HEAP32[$ReallocAsyncCtx11 >> 2] = 66; //@line 17731
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 17732
      HEAP32[$109 >> 2] = $2; //@line 17733
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 17734
      HEAP32[$110 >> 2] = $4; //@line 17735
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 17736
      HEAP32[$111 >> 2] = $12; //@line 17737
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 17738
      HEAP32[$112 >> 2] = $14; //@line 17739
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 17740
      HEAP32[$113 >> 2] = $16; //@line 17741
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 17742
      HEAP32[$114 >> 2] = $6; //@line 17743
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 17744
      HEAP32[$115 >> 2] = $18; //@line 17745
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 17746
      HEAP32[$116 >> 2] = $32; //@line 17747
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 17748
      HEAP32[$117 >> 2] = $34; //@line 17749
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 17750
      HEAP32[$118 >> 2] = $36; //@line 17751
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 17752
      HEAP32[$119 >> 2] = $38; //@line 17753
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 17754
      HEAP32[$120 >> 2] = $$1143; //@line 17755
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 17756
      HEAP32[$121 >> 2] = $$1145; //@line 17757
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 17758
      HEAP32[$122 >> 2] = $74; //@line 17759
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 17760
      HEAP32[$123 >> 2] = $40; //@line 17761
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 17762
      HEAP32[$124 >> 2] = $42; //@line 17763
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 17764
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 17765
      HEAP8[$125 >> 0] = $$1$off0$expand_i1_val; //@line 17766
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 17767
      HEAP32[$126 >> 2] = $44; //@line 17768
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 17769
      HEAP32[$127 >> 2] = $46; //@line 17770
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 17771
      HEAP32[$128 >> 2] = $48; //@line 17772
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 17773
      HEAP32[$129 >> 2] = $50; //@line 17774
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 17775
      HEAP32[$130 >> 2] = $8; //@line 17776
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 17777
      HEAP32[$131 >> 2] = $10; //@line 17778
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 17779
      HEAP32[$132 >> 2] = $30; //@line 17780
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 17781
      HEAP32[$133 >> 2] = $$3154; //@line 17782
      sp = STACKTOP; //@line 17783
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 17788
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$32 >> 2] = $6; //@line 17794
        $$5156 = _snprintf($$1143, $$1145, 2670, $32) | 0; //@line 17796
        break;
       }
      case 1:
       {
        HEAP32[$36 >> 2] = $6; //@line 17800
        $$5156 = _snprintf($$1143, $$1145, 2685, $36) | 0; //@line 17802
        break;
       }
      case 3:
       {
        HEAP32[$44 >> 2] = $6; //@line 17806
        $$5156 = _snprintf($$1143, $$1145, 2700, $44) | 0; //@line 17808
        break;
       }
      case 7:
       {
        HEAP32[$16 >> 2] = $6; //@line 17812
        $$5156 = _snprintf($$1143, $$1145, 2715, $16) | 0; //@line 17814
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 2730, $12) | 0; //@line 17819
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 17823
      $147 = $$1143 + $$5156$ | 0; //@line 17825
      $148 = $$1145 - $$5156$ | 0; //@line 17826
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 17830
       $150 = _vsnprintf($147, $148, $2, $4) | 0; //@line 17831
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 68; //@line 17834
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 17835
        HEAP32[$151 >> 2] = $148; //@line 17836
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 17837
        HEAP32[$152 >> 2] = $147; //@line 17838
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 17839
        HEAP32[$153 >> 2] = $48; //@line 17840
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 17841
        HEAP32[$154 >> 2] = $50; //@line 17842
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 17843
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 17844
        HEAP8[$155 >> 0] = $$1$off0$expand_i1_val18; //@line 17845
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 17846
        HEAP32[$156 >> 2] = $40; //@line 17847
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 17848
        HEAP32[$157 >> 2] = $42; //@line 17849
        sp = STACKTOP; //@line 17850
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 17854
       ___async_unwind = 0; //@line 17855
       HEAP32[$ReallocAsyncCtx10 >> 2] = 68; //@line 17856
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 17857
       HEAP32[$151 >> 2] = $148; //@line 17858
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 17859
       HEAP32[$152 >> 2] = $147; //@line 17860
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 17861
       HEAP32[$153 >> 2] = $48; //@line 17862
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 17863
       HEAP32[$154 >> 2] = $50; //@line 17864
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 17865
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 17866
       HEAP8[$155 >> 0] = $$1$off0$expand_i1_val18; //@line 17867
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 17868
       HEAP32[$156 >> 2] = $40; //@line 17869
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 17870
       HEAP32[$157 >> 2] = $42; //@line 17871
       sp = STACKTOP; //@line 17872
       return;
      }
     }
    }
    $159 = HEAP32[129] | 0; //@line 17877
    $160 = HEAP32[122] | 0; //@line 17878
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 17879
    FUNCTION_TABLE_vi[$159 & 511]($160); //@line 17880
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 17883
     sp = STACKTOP; //@line 17884
     return;
    }
    ___async_unwind = 0; //@line 17887
    HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 17888
    sp = STACKTOP; //@line 17889
    return;
   }
  }
 } while (0);
 $161 = HEAP32[132] | 0; //@line 17894
 if (!$161) {
  return;
 }
 $163 = HEAP32[133] | 0; //@line 17899
 HEAP32[133] = 0; //@line 17900
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 17901
 FUNCTION_TABLE_v[$161 & 7](); //@line 17902
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 17905
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 17906
  HEAP32[$164 >> 2] = $163; //@line 17907
  sp = STACKTOP; //@line 17908
  return;
 }
 ___async_unwind = 0; //@line 17911
 HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 17912
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 17913
 HEAP32[$164 >> 2] = $163; //@line 17914
 sp = STACKTOP; //@line 17915
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$048$i = 0, $$094 = 0, $$097 = 0, $$1105 = 0, $$1106 = 0, $$1107 = 0, $$170 = 0, $$2 = 0, $$296$ph113 = 0, $$299 = 0, $$3 = 0, $$3100 = 0, $$393$ph114 = 0, $$4$ph = 0, $$4110 = 0, $$byval_copy29 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $101 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $162 = 0, $164 = 0, $174 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $78 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5506
 STACKTOP = STACKTOP + 176 | 0; //@line 5507
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 5507
 $$byval_copy29 = sp + 144 | 0; //@line 5508
 $5 = sp + 88 | 0; //@line 5509
 $6 = sp; //@line 5510
 $7 = sp + 64 | 0; //@line 5511
 if (!$1) {
  $$3 = -3003; //@line 5514
  STACKTOP = sp; //@line 5515
  return $$3 | 0; //@line 5515
 }
 $9 = _strlen($1) | 0; //@line 5517
 if (($9 | 0) > 255 | ($9 | 0) == 0) {
  $$3 = -3003; //@line 5522
  STACKTOP = sp; //@line 5523
  return $$3 | 0; //@line 5523
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $4, $2) | 0)) {
  $$3 = 1; //@line 5528
  STACKTOP = sp; //@line 5529
  return $$3 | 0; //@line 5529
 }
 __ZN9UDPSocketC2Ev($5); //@line 5531
 $AsyncCtx21 = _emscripten_alloc_async_context(48, sp) | 0; //@line 5532
 $14 = __ZN6Socket4openEP12NetworkStack($5, $0) | 0; //@line 5533
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 142; //@line 5536
  HEAP32[$AsyncCtx21 + 4 >> 2] = $6; //@line 5538
  HEAP32[$AsyncCtx21 + 8 >> 2] = $1; //@line 5540
  HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 5542
  HEAP32[$AsyncCtx21 + 16 >> 2] = $7; //@line 5544
  HEAP32[$AsyncCtx21 + 20 >> 2] = $4; //@line 5546
  HEAP32[$AsyncCtx21 + 24 >> 2] = $$byval_copy29; //@line 5548
  HEAP32[$AsyncCtx21 + 28 >> 2] = $5; //@line 5550
  HEAP32[$AsyncCtx21 + 32 >> 2] = $5; //@line 5552
  HEAP32[$AsyncCtx21 + 36 >> 2] = $5; //@line 5554
  HEAP32[$AsyncCtx21 + 40 >> 2] = $2; //@line 5556
  HEAP32[$AsyncCtx21 + 44 >> 2] = $3; //@line 5558
  sp = STACKTOP; //@line 5559
  STACKTOP = sp; //@line 5560
  return 0; //@line 5560
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 5562
 do {
  if (!$14) {
   __ZN6Socket11set_timeoutEi($5, 5e3); //@line 5566
   $27 = _malloc(512) | 0; //@line 5567
   if (!$27) {
    $$2 = -3007; //@line 5570
   } else {
    $29 = $27; //@line 5572
    $30 = $27 + 1 | 0; //@line 5573
    $31 = $27 + 2 | 0; //@line 5574
    $32 = $27 + 3 | 0; //@line 5575
    $33 = $27 + 4 | 0; //@line 5576
    $34 = $27 + 5 | 0; //@line 5577
    $35 = $27 + 6 | 0; //@line 5578
    $36 = $27 + 12 | 0; //@line 5579
    $$sink$i = ($4 | 0) == 2 ? 28 : 1; //@line 5581
    $$0 = 0; //@line 5582
    $$094 = 3; //@line 5582
    $$097 = 0; //@line 5582
    while (1) {
     HEAP32[$7 >> 2] = 0; //@line 5584
     HEAP32[$7 + 4 >> 2] = 0; //@line 5584
     HEAP32[$7 + 8 >> 2] = 0; //@line 5584
     HEAP32[$7 + 12 >> 2] = 0; //@line 5584
     HEAP32[$7 + 16 >> 2] = 0; //@line 5584
     HEAP32[$$byval_copy29 >> 2] = HEAP32[$7 >> 2]; //@line 5585
     HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 5585
     HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 5585
     HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 5585
     HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 5585
     __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy29, 0); //@line 5586
     if (!($$094 << 24 >> 24)) {
      $$4$ph = -3009; //@line 5589
      label = 32; //@line 5590
      break;
     }
     if (($$097 & 255) > 9) {
      if (!($$0 << 24 >> 24)) {
       $$4$ph = -3009; //@line 5597
       label = 32; //@line 5598
       break;
      } else {
       $$1107 = 0; //@line 5601
       $43 = 0; //@line 5601
       label = 13; //@line 5602
      }
     } else {
      if (($$097 & 255) < 5) {
       $$1107 = $$0; //@line 5607
       $43 = $$097; //@line 5607
       label = 13; //@line 5608
      } else {
       $$1106 = $$0; //@line 5610
       $$299 = $$097; //@line 5610
       label = 16; //@line 5611
      }
     }
     if ((label | 0) == 13) {
      label = 0; //@line 5615
      $46 = HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0; //@line 5619
      $AsyncCtx = _emscripten_alloc_async_context(112, sp) | 0; //@line 5620
      $47 = FUNCTION_TABLE_iiii[$46 & 31]($0, $43 & 255, $6) | 0; //@line 5621
      if (___async) {
       label = 14; //@line 5624
       break;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 5627
      if (($47 | 0) < 0) {
       $$1106 = $$1107; //@line 5630
       $$299 = 5; //@line 5630
       label = 16; //@line 5631
      } else {
       $$1105 = $$1107; //@line 5633
       $$3100 = $43; //@line 5633
      }
     }
     if ((label | 0) == 16) {
      label = 0; //@line 5637
      $78 = 608 + ((($$299 & 255) + -5 | 0) * 20 | 0) | 0; //@line 5640
      HEAP32[$$byval_copy29 >> 2] = HEAP32[$78 >> 2]; //@line 5641
      HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$78 + 4 >> 2]; //@line 5641
      HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$78 + 8 >> 2]; //@line 5641
      HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$78 + 12 >> 2]; //@line 5641
      HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$78 + 16 >> 2]; //@line 5641
      __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy29); //@line 5642
      $$1105 = $$1106; //@line 5643
      $$3100 = $$299; //@line 5643
     }
     __ZN13SocketAddress8set_portEt($6, 53); //@line 5645
     HEAP8[$27 >> 0] = 0; //@line 5646
     HEAP8[$30 >> 0] = 1; //@line 5647
     HEAP8[$31 >> 0] = 1; //@line 5648
     HEAP8[$32 >> 0] = 0; //@line 5649
     HEAP8[$33 >> 0] = 0; //@line 5650
     HEAP8[$34 >> 0] = 1; //@line 5651
     HEAP8[$35 >> 0] = 0; //@line 5652
     HEAP8[$35 + 1 >> 0] = 0; //@line 5652
     HEAP8[$35 + 2 >> 0] = 0; //@line 5652
     HEAP8[$35 + 3 >> 0] = 0; //@line 5652
     HEAP8[$35 + 4 >> 0] = 0; //@line 5652
     HEAP8[$35 + 5 >> 0] = 0; //@line 5652
     if (!(HEAP8[$1 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $36; //@line 5656
     } else {
      $$048$i = $1; //@line 5658
      $$sroa$0$0$in47$i = $36; //@line 5658
      while (1) {
       $81 = _strcspn($$048$i, 4016) | 0; //@line 5660
       $83 = $$sroa$0$0$in47$i + 1 | 0; //@line 5662
       HEAP8[$$sroa$0$0$in47$i >> 0] = $81; //@line 5663
       $84 = $81 & 255; //@line 5664
       _memcpy($83 | 0, $$048$i | 0, $84 | 0) | 0; //@line 5665
       $85 = $83 + $84 | 0; //@line 5666
       $$048$i = $$048$i + ($81 + ((HEAP8[$$048$i + $81 >> 0] | 0) == 46 & 1)) | 0; //@line 5672
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $85; //@line 5676
        break;
       } else {
        $$sroa$0$0$in47$i = $85; //@line 5679
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 5684
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 5686
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 5688
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 5690
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 5693
     $AsyncCtx9 = _emscripten_alloc_async_context(108, sp) | 0; //@line 5695
     $101 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $27, $$sroa$0$0$in$lcssa$i + 5 - $29 | 0) | 0; //@line 5696
     if (___async) {
      label = 20; //@line 5699
      break;
     }
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5702
     if (($101 | 0) < 0) {
      $$296$ph113 = $$094; //@line 5705
      $$393$ph114 = $$1105; //@line 5705
     } else {
      $130 = $$1105 + 1 << 24 >> 24; //@line 5707
      $131 = $$094 + -1 << 24 >> 24; //@line 5708
      $AsyncCtx6 = _emscripten_alloc_async_context(104, sp) | 0; //@line 5709
      $132 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $27, 512) | 0; //@line 5710
      if (___async) {
       label = 23; //@line 5713
       break;
      }
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5716
      if (($132 | 0) == -3001) {
       $$296$ph113 = $131; //@line 5719
       $$393$ph114 = $130; //@line 5719
      } else {
       if (($132 | 0) < 0) {
        $$4$ph = $132; //@line 5723
        label = 32; //@line 5724
        break;
       }
       $162 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($27, 1, $$byval_copy29, $2, $3) | 0; //@line 5727
       if (($162 | 0) > 0) {
        label = 27; //@line 5730
        break;
       }
       if (($162 | 0) >= 0) {
        $$170 = -3009; //@line 5735
        label = 31; //@line 5736
        break;
       }
       $$0 = $130; //@line 5739
       $$094 = $131; //@line 5739
       $$097 = $$3100; //@line 5739
       continue;
      }
     }
     $$0 = $$393$ph114; //@line 5744
     $$094 = $$296$ph113; //@line 5744
     $$097 = $$3100 + 1 << 24 >> 24; //@line 5744
    }
    do {
     if ((label | 0) == 14) {
      HEAP32[$AsyncCtx >> 2] = 143; //@line 5748
      HEAP8[$AsyncCtx + 4 >> 0] = $$1107; //@line 5750
      HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 5752
      HEAP8[$AsyncCtx + 12 >> 0] = $43; //@line 5754
      HEAP32[$AsyncCtx + 16 >> 2] = $27; //@line 5756
      HEAP32[$AsyncCtx + 20 >> 2] = $30; //@line 5758
      HEAP32[$AsyncCtx + 24 >> 2] = $31; //@line 5760
      HEAP32[$AsyncCtx + 28 >> 2] = $32; //@line 5762
      HEAP32[$AsyncCtx + 32 >> 2] = $33; //@line 5764
      HEAP32[$AsyncCtx + 36 >> 2] = $34; //@line 5766
      HEAP32[$AsyncCtx + 40 >> 2] = $35; //@line 5768
      HEAP32[$AsyncCtx + 44 >> 2] = $1; //@line 5770
      HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 5772
      HEAP32[$AsyncCtx + 52 >> 2] = $0; //@line 5774
      HEAP32[$AsyncCtx + 56 >> 2] = $6; //@line 5776
      HEAP32[$AsyncCtx + 60 >> 2] = $7; //@line 5778
      HEAP32[$AsyncCtx + 64 >> 2] = $7; //@line 5780
      HEAP32[$AsyncCtx + 68 >> 2] = $5; //@line 5782
      HEAP32[$AsyncCtx + 72 >> 2] = $5; //@line 5784
      HEAP32[$AsyncCtx + 76 >> 2] = $$byval_copy29; //@line 5786
      HEAP8[$AsyncCtx + 80 >> 0] = $$094; //@line 5788
      HEAP32[$AsyncCtx + 84 >> 2] = $$byval_copy29; //@line 5790
      HEAP32[$AsyncCtx + 88 >> 2] = $2; //@line 5792
      HEAP32[$AsyncCtx + 92 >> 2] = $3; //@line 5794
      HEAP32[$AsyncCtx + 96 >> 2] = $5; //@line 5796
      HEAP32[$AsyncCtx + 100 >> 2] = $36; //@line 5798
      HEAP8[$AsyncCtx + 104 >> 0] = $$sink$i; //@line 5800
      HEAP32[$AsyncCtx + 108 >> 2] = $29; //@line 5802
      sp = STACKTOP; //@line 5803
      STACKTOP = sp; //@line 5804
      return 0; //@line 5804
     } else if ((label | 0) == 20) {
      HEAP32[$AsyncCtx9 >> 2] = 144; //@line 5807
      HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 5809
      HEAP32[$AsyncCtx9 + 8 >> 2] = $27; //@line 5811
      HEAP32[$AsyncCtx9 + 12 >> 2] = $30; //@line 5813
      HEAP32[$AsyncCtx9 + 16 >> 2] = $31; //@line 5815
      HEAP32[$AsyncCtx9 + 20 >> 2] = $32; //@line 5817
      HEAP32[$AsyncCtx9 + 24 >> 2] = $33; //@line 5819
      HEAP32[$AsyncCtx9 + 28 >> 2] = $34; //@line 5821
      HEAP32[$AsyncCtx9 + 32 >> 2] = $35; //@line 5823
      HEAP32[$AsyncCtx9 + 36 >> 2] = $1; //@line 5825
      HEAP32[$AsyncCtx9 + 40 >> 2] = $0; //@line 5827
      HEAP32[$AsyncCtx9 + 44 >> 2] = $0; //@line 5829
      HEAP8[$AsyncCtx9 + 48 >> 0] = $$3100; //@line 5831
      HEAP32[$AsyncCtx9 + 52 >> 2] = $6; //@line 5833
      HEAP32[$AsyncCtx9 + 56 >> 2] = $7; //@line 5835
      HEAP32[$AsyncCtx9 + 60 >> 2] = $7; //@line 5837
      HEAP32[$AsyncCtx9 + 64 >> 2] = $$byval_copy29; //@line 5839
      HEAP32[$AsyncCtx9 + 68 >> 2] = $5; //@line 5841
      HEAP32[$AsyncCtx9 + 72 >> 2] = $5; //@line 5843
      HEAP32[$AsyncCtx9 + 76 >> 2] = $5; //@line 5845
      HEAP8[$AsyncCtx9 + 80 >> 0] = $$094; //@line 5847
      HEAP8[$AsyncCtx9 + 81 >> 0] = $$1105; //@line 5849
      HEAP32[$AsyncCtx9 + 84 >> 2] = $$byval_copy29; //@line 5851
      HEAP32[$AsyncCtx9 + 88 >> 2] = $2; //@line 5853
      HEAP32[$AsyncCtx9 + 92 >> 2] = $3; //@line 5855
      HEAP32[$AsyncCtx9 + 96 >> 2] = $36; //@line 5857
      HEAP8[$AsyncCtx9 + 100 >> 0] = $$sink$i; //@line 5859
      HEAP32[$AsyncCtx9 + 104 >> 2] = $29; //@line 5861
      sp = STACKTOP; //@line 5862
      STACKTOP = sp; //@line 5863
      return 0; //@line 5863
     } else if ((label | 0) == 23) {
      HEAP32[$AsyncCtx6 >> 2] = 145; //@line 5866
      HEAP32[$AsyncCtx6 + 4 >> 2] = $6; //@line 5868
      HEAP32[$AsyncCtx6 + 8 >> 2] = $27; //@line 5870
      HEAP32[$AsyncCtx6 + 12 >> 2] = $30; //@line 5872
      HEAP32[$AsyncCtx6 + 16 >> 2] = $31; //@line 5874
      HEAP32[$AsyncCtx6 + 20 >> 2] = $32; //@line 5876
      HEAP32[$AsyncCtx6 + 24 >> 2] = $33; //@line 5878
      HEAP32[$AsyncCtx6 + 28 >> 2] = $34; //@line 5880
      HEAP32[$AsyncCtx6 + 32 >> 2] = $35; //@line 5882
      HEAP32[$AsyncCtx6 + 36 >> 2] = $1; //@line 5884
      HEAP32[$AsyncCtx6 + 40 >> 2] = $0; //@line 5886
      HEAP32[$AsyncCtx6 + 44 >> 2] = $0; //@line 5888
      HEAP8[$AsyncCtx6 + 48 >> 0] = $$3100; //@line 5890
      HEAP8[$AsyncCtx6 + 49 >> 0] = $131; //@line 5892
      HEAP8[$AsyncCtx6 + 50 >> 0] = $130; //@line 5894
      HEAP32[$AsyncCtx6 + 52 >> 2] = $6; //@line 5896
      HEAP32[$AsyncCtx6 + 56 >> 2] = $7; //@line 5898
      HEAP32[$AsyncCtx6 + 60 >> 2] = $7; //@line 5900
      HEAP32[$AsyncCtx6 + 64 >> 2] = $$byval_copy29; //@line 5902
      HEAP32[$AsyncCtx6 + 68 >> 2] = $5; //@line 5904
      HEAP32[$AsyncCtx6 + 72 >> 2] = $5; //@line 5906
      HEAP32[$AsyncCtx6 + 76 >> 2] = $5; //@line 5908
      HEAP32[$AsyncCtx6 + 80 >> 2] = $$byval_copy29; //@line 5910
      HEAP32[$AsyncCtx6 + 84 >> 2] = $2; //@line 5912
      HEAP32[$AsyncCtx6 + 88 >> 2] = $3; //@line 5914
      HEAP32[$AsyncCtx6 + 92 >> 2] = $36; //@line 5916
      HEAP8[$AsyncCtx6 + 96 >> 0] = $$sink$i; //@line 5918
      HEAP32[$AsyncCtx6 + 100 >> 2] = $29; //@line 5920
      sp = STACKTOP; //@line 5921
      STACKTOP = sp; //@line 5922
      return 0; //@line 5922
     } else if ((label | 0) == 27) {
      $164 = HEAP32[$$byval_copy29 >> 2] | 0; //@line 5925
      $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5926
      __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($1, $2, $164); //@line 5927
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 146; //@line 5930
       HEAP32[$AsyncCtx2 + 4 >> 2] = $162; //@line 5932
       HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy29; //@line 5934
       HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 5936
       HEAP32[$AsyncCtx2 + 16 >> 2] = $27; //@line 5938
       HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 5940
       HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 5942
       HEAP32[$AsyncCtx2 + 28 >> 2] = $5; //@line 5944
       sp = STACKTOP; //@line 5945
       STACKTOP = sp; //@line 5946
       return 0; //@line 5946
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5948
       $$170 = $162; //@line 5949
       label = 31; //@line 5950
       break;
      }
     } else if ((label | 0) == 32) {
      $$4110 = $$4$ph; //@line 5955
     }
    } while (0);
    if ((label | 0) == 31) {
     $$4110 = $$170; //@line 5959
    }
    _free($27); //@line 5961
    $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5962
    $174 = __ZN6Socket5closeEv($5) | 0; //@line 5963
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 147; //@line 5966
     HEAP32[$AsyncCtx17 + 4 >> 2] = $$4110; //@line 5968
     HEAP32[$AsyncCtx17 + 8 >> 2] = $5; //@line 5970
     HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 5972
     sp = STACKTOP; //@line 5973
     STACKTOP = sp; //@line 5974
     return 0; //@line 5974
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 5976
     $$2 = ($174 | 0) == 0 ? $$4110 : $174; //@line 5979
     break;
    }
   }
  } else {
   $$2 = $14; //@line 5984
  }
 } while (0);
 $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5987
 __ZN9UDPSocketD2Ev($5); //@line 5988
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 148; //@line 5991
  HEAP32[$AsyncCtx13 + 4 >> 2] = $5; //@line 5993
  HEAP32[$AsyncCtx13 + 8 >> 2] = $$2; //@line 5995
  sp = STACKTOP; //@line 5996
  STACKTOP = sp; //@line 5997
  return 0; //@line 5997
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 5999
 $$3 = $$2; //@line 6000
 STACKTOP = sp; //@line 6001
 return $$3 | 0; //@line 6001
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 2372
 $3 = HEAP32[1697] | 0; //@line 2373
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 2376
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 2380
 $7 = $6 & 3; //@line 2381
 if (($7 | 0) == 1) {
  _abort(); //@line 2384
 }
 $9 = $6 & -8; //@line 2387
 $10 = $2 + $9 | 0; //@line 2388
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 2393
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 2399
   $17 = $13 + $9 | 0; //@line 2400
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 2403
   }
   if ((HEAP32[1698] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 2409
    $106 = HEAP32[$105 >> 2] | 0; //@line 2410
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 2414
     $$1382 = $17; //@line 2414
     $114 = $16; //@line 2414
     break;
    }
    HEAP32[1695] = $17; //@line 2417
    HEAP32[$105 >> 2] = $106 & -2; //@line 2419
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 2422
    HEAP32[$16 + $17 >> 2] = $17; //@line 2424
    return;
   }
   $21 = $13 >>> 3; //@line 2427
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 2431
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 2433
    $28 = 6812 + ($21 << 1 << 2) | 0; //@line 2435
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 2440
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2447
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[1693] = HEAP32[1693] & ~(1 << $21); //@line 2457
     $$1 = $16; //@line 2458
     $$1382 = $17; //@line 2458
     $114 = $16; //@line 2458
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 2464
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 2468
     }
     $41 = $26 + 8 | 0; //@line 2471
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 2475
     } else {
      _abort(); //@line 2477
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 2482
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 2483
    $$1 = $16; //@line 2484
    $$1382 = $17; //@line 2484
    $114 = $16; //@line 2484
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 2488
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 2490
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 2494
     $60 = $59 + 4 | 0; //@line 2495
     $61 = HEAP32[$60 >> 2] | 0; //@line 2496
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 2499
      if (!$63) {
       $$3 = 0; //@line 2502
       break;
      } else {
       $$1387 = $63; //@line 2505
       $$1390 = $59; //@line 2505
      }
     } else {
      $$1387 = $61; //@line 2508
      $$1390 = $60; //@line 2508
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 2511
      $66 = HEAP32[$65 >> 2] | 0; //@line 2512
      if ($66 | 0) {
       $$1387 = $66; //@line 2515
       $$1390 = $65; //@line 2515
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 2518
      $69 = HEAP32[$68 >> 2] | 0; //@line 2519
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 2524
       $$1390 = $68; //@line 2524
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 2529
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 2532
      $$3 = $$1387; //@line 2533
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 2538
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 2541
     }
     $53 = $51 + 12 | 0; //@line 2544
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2548
     }
     $56 = $48 + 8 | 0; //@line 2551
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 2555
      HEAP32[$56 >> 2] = $51; //@line 2556
      $$3 = $48; //@line 2557
      break;
     } else {
      _abort(); //@line 2560
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 2567
    $$1382 = $17; //@line 2567
    $114 = $16; //@line 2567
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 2570
    $75 = 7076 + ($74 << 2) | 0; //@line 2571
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 2576
      if (!$$3) {
       HEAP32[1694] = HEAP32[1694] & ~(1 << $74); //@line 2583
       $$1 = $16; //@line 2584
       $$1382 = $17; //@line 2584
       $114 = $16; //@line 2584
       break L10;
      }
     } else {
      if ((HEAP32[1697] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 2591
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 2599
       if (!$$3) {
        $$1 = $16; //@line 2602
        $$1382 = $17; //@line 2602
        $114 = $16; //@line 2602
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[1697] | 0; //@line 2610
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 2613
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 2617
    $92 = $16 + 16 | 0; //@line 2618
    $93 = HEAP32[$92 >> 2] | 0; //@line 2619
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 2625
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 2629
       HEAP32[$93 + 24 >> 2] = $$3; //@line 2631
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 2637
    if (!$99) {
     $$1 = $16; //@line 2640
     $$1382 = $17; //@line 2640
     $114 = $16; //@line 2640
    } else {
     if ((HEAP32[1697] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 2645
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 2649
      HEAP32[$99 + 24 >> 2] = $$3; //@line 2651
      $$1 = $16; //@line 2652
      $$1382 = $17; //@line 2652
      $114 = $16; //@line 2652
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 2658
   $$1382 = $9; //@line 2658
   $114 = $2; //@line 2658
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 2663
 }
 $115 = $10 + 4 | 0; //@line 2666
 $116 = HEAP32[$115 >> 2] | 0; //@line 2667
 if (!($116 & 1)) {
  _abort(); //@line 2671
 }
 if (!($116 & 2)) {
  if ((HEAP32[1699] | 0) == ($10 | 0)) {
   $124 = (HEAP32[1696] | 0) + $$1382 | 0; //@line 2681
   HEAP32[1696] = $124; //@line 2682
   HEAP32[1699] = $$1; //@line 2683
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 2686
   if (($$1 | 0) != (HEAP32[1698] | 0)) {
    return;
   }
   HEAP32[1698] = 0; //@line 2692
   HEAP32[1695] = 0; //@line 2693
   return;
  }
  if ((HEAP32[1698] | 0) == ($10 | 0)) {
   $132 = (HEAP32[1695] | 0) + $$1382 | 0; //@line 2700
   HEAP32[1695] = $132; //@line 2701
   HEAP32[1698] = $114; //@line 2702
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 2705
   HEAP32[$114 + $132 >> 2] = $132; //@line 2707
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 2711
  $138 = $116 >>> 3; //@line 2712
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 2717
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 2719
    $145 = 6812 + ($138 << 1 << 2) | 0; //@line 2721
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[1697] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 2727
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 2734
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[1693] = HEAP32[1693] & ~(1 << $138); //@line 2744
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 2750
    } else {
     if ((HEAP32[1697] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 2755
     }
     $160 = $143 + 8 | 0; //@line 2758
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 2762
     } else {
      _abort(); //@line 2764
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 2769
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 2770
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 2773
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 2775
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 2779
      $180 = $179 + 4 | 0; //@line 2780
      $181 = HEAP32[$180 >> 2] | 0; //@line 2781
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 2784
       if (!$183) {
        $$3400 = 0; //@line 2787
        break;
       } else {
        $$1398 = $183; //@line 2790
        $$1402 = $179; //@line 2790
       }
      } else {
       $$1398 = $181; //@line 2793
       $$1402 = $180; //@line 2793
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 2796
       $186 = HEAP32[$185 >> 2] | 0; //@line 2797
       if ($186 | 0) {
        $$1398 = $186; //@line 2800
        $$1402 = $185; //@line 2800
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 2803
       $189 = HEAP32[$188 >> 2] | 0; //@line 2804
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 2809
        $$1402 = $188; //@line 2809
       }
      }
      if ((HEAP32[1697] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 2815
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 2818
       $$3400 = $$1398; //@line 2819
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 2824
      if ((HEAP32[1697] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 2828
      }
      $173 = $170 + 12 | 0; //@line 2831
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 2835
      }
      $176 = $167 + 8 | 0; //@line 2838
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 2842
       HEAP32[$176 >> 2] = $170; //@line 2843
       $$3400 = $167; //@line 2844
       break;
      } else {
       _abort(); //@line 2847
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 2855
     $196 = 7076 + ($195 << 2) | 0; //@line 2856
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 2861
       if (!$$3400) {
        HEAP32[1694] = HEAP32[1694] & ~(1 << $195); //@line 2868
        break L108;
       }
      } else {
       if ((HEAP32[1697] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 2875
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 2883
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[1697] | 0; //@line 2893
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 2896
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 2900
     $213 = $10 + 16 | 0; //@line 2901
     $214 = HEAP32[$213 >> 2] | 0; //@line 2902
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 2908
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 2912
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 2914
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 2920
     if ($220 | 0) {
      if ((HEAP32[1697] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 2926
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 2930
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 2932
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 2941
  HEAP32[$114 + $137 >> 2] = $137; //@line 2943
  if (($$1 | 0) == (HEAP32[1698] | 0)) {
   HEAP32[1695] = $137; //@line 2947
   return;
  } else {
   $$2 = $137; //@line 2950
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 2954
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 2957
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 2959
  $$2 = $$1382; //@line 2960
 }
 $235 = $$2 >>> 3; //@line 2962
 if ($$2 >>> 0 < 256) {
  $238 = 6812 + ($235 << 1 << 2) | 0; //@line 2966
  $239 = HEAP32[1693] | 0; //@line 2967
  $240 = 1 << $235; //@line 2968
  if (!($239 & $240)) {
   HEAP32[1693] = $239 | $240; //@line 2973
   $$0403 = $238; //@line 2975
   $$pre$phiZ2D = $238 + 8 | 0; //@line 2975
  } else {
   $244 = $238 + 8 | 0; //@line 2977
   $245 = HEAP32[$244 >> 2] | 0; //@line 2978
   if ((HEAP32[1697] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 2982
   } else {
    $$0403 = $245; //@line 2985
    $$pre$phiZ2D = $244; //@line 2985
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 2988
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 2990
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 2992
  HEAP32[$$1 + 12 >> 2] = $238; //@line 2994
  return;
 }
 $251 = $$2 >>> 8; //@line 2997
 if (!$251) {
  $$0396 = 0; //@line 3000
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 3004
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 3008
   $257 = $251 << $256; //@line 3009
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 3012
   $262 = $257 << $260; //@line 3014
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 3017
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 3022
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 3028
  }
 }
 $276 = 7076 + ($$0396 << 2) | 0; //@line 3031
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 3033
 HEAP32[$$1 + 20 >> 2] = 0; //@line 3036
 HEAP32[$$1 + 16 >> 2] = 0; //@line 3037
 $280 = HEAP32[1694] | 0; //@line 3038
 $281 = 1 << $$0396; //@line 3039
 do {
  if (!($280 & $281)) {
   HEAP32[1694] = $280 | $281; //@line 3045
   HEAP32[$276 >> 2] = $$1; //@line 3046
   HEAP32[$$1 + 24 >> 2] = $276; //@line 3048
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 3050
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 3052
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 3060
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 3060
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 3067
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 3071
    $301 = HEAP32[$299 >> 2] | 0; //@line 3073
    if (!$301) {
     label = 121; //@line 3076
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 3079
     $$0384 = $301; //@line 3079
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[1697] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 3086
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 3089
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 3091
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 3093
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 3095
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 3100
    $309 = HEAP32[$308 >> 2] | 0; //@line 3101
    $310 = HEAP32[1697] | 0; //@line 3102
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 3108
     HEAP32[$308 >> 2] = $$1; //@line 3109
     HEAP32[$$1 + 8 >> 2] = $309; //@line 3111
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 3113
     HEAP32[$$1 + 24 >> 2] = 0; //@line 3115
     break;
    } else {
     _abort(); //@line 3118
    }
   }
  }
 } while (0);
 $319 = (HEAP32[1701] | 0) + -1 | 0; //@line 3125
 HEAP32[1701] = $319; //@line 3126
 if (!$319) {
  $$0212$in$i = 7228; //@line 3129
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 3134
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 3140
  }
 }
 HEAP32[1701] = -1; //@line 3143
 return;
}
function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi23Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $288 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0, label = 0;
 $2 = $0 + $1 | 0; //@line 3639
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 3641
 L1 : do {
  if (!($4 & 1)) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 3646
   if (!($4 & 3)) {
    return;
   }
   $11 = $0 + (0 - $7) | 0; //@line 3653
   $12 = $7 + $1 | 0; //@line 3654
   $13 = HEAP32[1697] | 0; //@line 3655
   if ($11 >>> 0 < $13 >>> 0) {
    _abort(); //@line 3658
   }
   if ((HEAP32[1698] | 0) == ($11 | 0)) {
    $101 = $2 + 4 | 0; //@line 3664
    $102 = HEAP32[$101 >> 2] | 0; //@line 3665
    if (($102 & 3 | 0) != 3) {
     $$1 = $11; //@line 3669
     $$1418 = $12; //@line 3669
     break;
    }
    HEAP32[1695] = $12; //@line 3672
    HEAP32[$101 >> 2] = $102 & -2; //@line 3674
    HEAP32[$11 + 4 >> 2] = $12 | 1; //@line 3677
    HEAP32[$2 >> 2] = $12; //@line 3678
    return;
   }
   $17 = $7 >>> 3; //@line 3681
   if ($7 >>> 0 < 256) {
    $20 = HEAP32[$11 + 8 >> 2] | 0; //@line 3685
    $22 = HEAP32[$11 + 12 >> 2] | 0; //@line 3687
    $24 = 6812 + ($17 << 1 << 2) | 0; //@line 3689
    if (($20 | 0) != ($24 | 0)) {
     if ($13 >>> 0 > $20 >>> 0) {
      _abort(); //@line 3694
     }
     if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3701
     }
    }
    if (($22 | 0) == ($20 | 0)) {
     HEAP32[1693] = HEAP32[1693] & ~(1 << $17); //@line 3711
     $$1 = $11; //@line 3712
     $$1418 = $12; //@line 3712
     break;
    }
    if (($22 | 0) == ($24 | 0)) {
     $$pre$phi25Z2D = $22 + 8 | 0; //@line 3718
    } else {
     if ($13 >>> 0 > $22 >>> 0) {
      _abort(); //@line 3722
     }
     $37 = $22 + 8 | 0; //@line 3725
     if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) {
      $$pre$phi25Z2D = $37; //@line 3729
     } else {
      _abort(); //@line 3731
     }
    }
    HEAP32[$20 + 12 >> 2] = $22; //@line 3736
    HEAP32[$$pre$phi25Z2D >> 2] = $20; //@line 3737
    $$1 = $11; //@line 3738
    $$1418 = $12; //@line 3738
    break;
   }
   $42 = HEAP32[$11 + 24 >> 2] | 0; //@line 3742
   $44 = HEAP32[$11 + 12 >> 2] | 0; //@line 3744
   do {
    if (($44 | 0) == ($11 | 0)) {
     $55 = $11 + 16 | 0; //@line 3748
     $56 = $55 + 4 | 0; //@line 3749
     $57 = HEAP32[$56 >> 2] | 0; //@line 3750
     if (!$57) {
      $59 = HEAP32[$55 >> 2] | 0; //@line 3753
      if (!$59) {
       $$3 = 0; //@line 3756
       break;
      } else {
       $$1426 = $59; //@line 3759
       $$1429 = $55; //@line 3759
      }
     } else {
      $$1426 = $57; //@line 3762
      $$1429 = $56; //@line 3762
     }
     while (1) {
      $61 = $$1426 + 20 | 0; //@line 3765
      $62 = HEAP32[$61 >> 2] | 0; //@line 3766
      if ($62 | 0) {
       $$1426 = $62; //@line 3769
       $$1429 = $61; //@line 3769
       continue;
      }
      $64 = $$1426 + 16 | 0; //@line 3772
      $65 = HEAP32[$64 >> 2] | 0; //@line 3773
      if (!$65) {
       break;
      } else {
       $$1426 = $65; //@line 3778
       $$1429 = $64; //@line 3778
      }
     }
     if ($13 >>> 0 > $$1429 >>> 0) {
      _abort(); //@line 3783
     } else {
      HEAP32[$$1429 >> 2] = 0; //@line 3786
      $$3 = $$1426; //@line 3787
      break;
     }
    } else {
     $47 = HEAP32[$11 + 8 >> 2] | 0; //@line 3792
     if ($13 >>> 0 > $47 >>> 0) {
      _abort(); //@line 3795
     }
     $49 = $47 + 12 | 0; //@line 3798
     if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3802
     }
     $52 = $44 + 8 | 0; //@line 3805
     if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$49 >> 2] = $44; //@line 3809
      HEAP32[$52 >> 2] = $47; //@line 3810
      $$3 = $44; //@line 3811
      break;
     } else {
      _abort(); //@line 3814
     }
    }
   } while (0);
   if (!$42) {
    $$1 = $11; //@line 3821
    $$1418 = $12; //@line 3821
   } else {
    $70 = HEAP32[$11 + 28 >> 2] | 0; //@line 3824
    $71 = 7076 + ($70 << 2) | 0; //@line 3825
    do {
     if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$71 >> 2] = $$3; //@line 3830
      if (!$$3) {
       HEAP32[1694] = HEAP32[1694] & ~(1 << $70); //@line 3837
       $$1 = $11; //@line 3838
       $$1418 = $12; //@line 3838
       break L1;
      }
     } else {
      if ((HEAP32[1697] | 0) >>> 0 > $42 >>> 0) {
       _abort(); //@line 3845
      } else {
       HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3; //@line 3853
       if (!$$3) {
        $$1 = $11; //@line 3856
        $$1418 = $12; //@line 3856
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $85 = HEAP32[1697] | 0; //@line 3864
    if ($85 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3867
    }
    HEAP32[$$3 + 24 >> 2] = $42; //@line 3871
    $88 = $11 + 16 | 0; //@line 3872
    $89 = HEAP32[$88 >> 2] | 0; //@line 3873
    do {
     if ($89 | 0) {
      if ($85 >>> 0 > $89 >>> 0) {
       _abort(); //@line 3879
      } else {
       HEAP32[$$3 + 16 >> 2] = $89; //@line 3883
       HEAP32[$89 + 24 >> 2] = $$3; //@line 3885
       break;
      }
     }
    } while (0);
    $95 = HEAP32[$88 + 4 >> 2] | 0; //@line 3891
    if (!$95) {
     $$1 = $11; //@line 3894
     $$1418 = $12; //@line 3894
    } else {
     if ((HEAP32[1697] | 0) >>> 0 > $95 >>> 0) {
      _abort(); //@line 3899
     } else {
      HEAP32[$$3 + 20 >> 2] = $95; //@line 3903
      HEAP32[$95 + 24 >> 2] = $$3; //@line 3905
      $$1 = $11; //@line 3906
      $$1418 = $12; //@line 3906
      break;
     }
    }
   }
  } else {
   $$1 = $0; //@line 3912
   $$1418 = $1; //@line 3912
  }
 } while (0);
 $108 = HEAP32[1697] | 0; //@line 3915
 if ($2 >>> 0 < $108 >>> 0) {
  _abort(); //@line 3918
 }
 $110 = $2 + 4 | 0; //@line 3921
 $111 = HEAP32[$110 >> 2] | 0; //@line 3922
 if (!($111 & 2)) {
  if ((HEAP32[1699] | 0) == ($2 | 0)) {
   $117 = (HEAP32[1696] | 0) + $$1418 | 0; //@line 3930
   HEAP32[1696] = $117; //@line 3931
   HEAP32[1699] = $$1; //@line 3932
   HEAP32[$$1 + 4 >> 2] = $117 | 1; //@line 3935
   if (($$1 | 0) != (HEAP32[1698] | 0)) {
    return;
   }
   HEAP32[1698] = 0; //@line 3941
   HEAP32[1695] = 0; //@line 3942
   return;
  }
  if ((HEAP32[1698] | 0) == ($2 | 0)) {
   $125 = (HEAP32[1695] | 0) + $$1418 | 0; //@line 3949
   HEAP32[1695] = $125; //@line 3950
   HEAP32[1698] = $$1; //@line 3951
   HEAP32[$$1 + 4 >> 2] = $125 | 1; //@line 3954
   HEAP32[$$1 + $125 >> 2] = $125; //@line 3956
   return;
  }
  $130 = ($111 & -8) + $$1418 | 0; //@line 3960
  $131 = $111 >>> 3; //@line 3961
  L96 : do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$2 + 8 >> 2] | 0; //@line 3966
    $136 = HEAP32[$2 + 12 >> 2] | 0; //@line 3968
    $138 = 6812 + ($131 << 1 << 2) | 0; //@line 3970
    if (($134 | 0) != ($138 | 0)) {
     if ($108 >>> 0 > $134 >>> 0) {
      _abort(); //@line 3975
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) {
      _abort(); //@line 3982
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[1693] = HEAP32[1693] & ~(1 << $131); //@line 3992
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi23Z2D = $136 + 8 | 0; //@line 3998
    } else {
     if ($108 >>> 0 > $136 >>> 0) {
      _abort(); //@line 4002
     }
     $151 = $136 + 8 | 0; //@line 4005
     if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) {
      $$pre$phi23Z2D = $151; //@line 4009
     } else {
      _abort(); //@line 4011
     }
    }
    HEAP32[$134 + 12 >> 2] = $136; //@line 4016
    HEAP32[$$pre$phi23Z2D >> 2] = $134; //@line 4017
   } else {
    $156 = HEAP32[$2 + 24 >> 2] | 0; //@line 4020
    $158 = HEAP32[$2 + 12 >> 2] | 0; //@line 4022
    do {
     if (($158 | 0) == ($2 | 0)) {
      $169 = $2 + 16 | 0; //@line 4026
      $170 = $169 + 4 | 0; //@line 4027
      $171 = HEAP32[$170 >> 2] | 0; //@line 4028
      if (!$171) {
       $173 = HEAP32[$169 >> 2] | 0; //@line 4031
       if (!$173) {
        $$3435 = 0; //@line 4034
        break;
       } else {
        $$1433 = $173; //@line 4037
        $$1437 = $169; //@line 4037
       }
      } else {
       $$1433 = $171; //@line 4040
       $$1437 = $170; //@line 4040
      }
      while (1) {
       $175 = $$1433 + 20 | 0; //@line 4043
       $176 = HEAP32[$175 >> 2] | 0; //@line 4044
       if ($176 | 0) {
        $$1433 = $176; //@line 4047
        $$1437 = $175; //@line 4047
        continue;
       }
       $178 = $$1433 + 16 | 0; //@line 4050
       $179 = HEAP32[$178 >> 2] | 0; //@line 4051
       if (!$179) {
        break;
       } else {
        $$1433 = $179; //@line 4056
        $$1437 = $178; //@line 4056
       }
      }
      if ($108 >>> 0 > $$1437 >>> 0) {
       _abort(); //@line 4061
      } else {
       HEAP32[$$1437 >> 2] = 0; //@line 4064
       $$3435 = $$1433; //@line 4065
       break;
      }
     } else {
      $161 = HEAP32[$2 + 8 >> 2] | 0; //@line 4070
      if ($108 >>> 0 > $161 >>> 0) {
       _abort(); //@line 4073
      }
      $163 = $161 + 12 | 0; //@line 4076
      if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) {
       _abort(); //@line 4080
      }
      $166 = $158 + 8 | 0; //@line 4083
      if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$163 >> 2] = $158; //@line 4087
       HEAP32[$166 >> 2] = $161; //@line 4088
       $$3435 = $158; //@line 4089
       break;
      } else {
       _abort(); //@line 4092
      }
     }
    } while (0);
    if ($156 | 0) {
     $184 = HEAP32[$2 + 28 >> 2] | 0; //@line 4100
     $185 = 7076 + ($184 << 2) | 0; //@line 4101
     do {
      if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$185 >> 2] = $$3435; //@line 4106
       if (!$$3435) {
        HEAP32[1694] = HEAP32[1694] & ~(1 << $184); //@line 4113
        break L96;
       }
      } else {
       if ((HEAP32[1697] | 0) >>> 0 > $156 >>> 0) {
        _abort(); //@line 4120
       } else {
        HEAP32[$156 + 16 + (((HEAP32[$156 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435; //@line 4128
        if (!$$3435) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $199 = HEAP32[1697] | 0; //@line 4138
     if ($199 >>> 0 > $$3435 >>> 0) {
      _abort(); //@line 4141
     }
     HEAP32[$$3435 + 24 >> 2] = $156; //@line 4145
     $202 = $2 + 16 | 0; //@line 4146
     $203 = HEAP32[$202 >> 2] | 0; //@line 4147
     do {
      if ($203 | 0) {
       if ($199 >>> 0 > $203 >>> 0) {
        _abort(); //@line 4153
       } else {
        HEAP32[$$3435 + 16 >> 2] = $203; //@line 4157
        HEAP32[$203 + 24 >> 2] = $$3435; //@line 4159
        break;
       }
      }
     } while (0);
     $209 = HEAP32[$202 + 4 >> 2] | 0; //@line 4165
     if ($209 | 0) {
      if ((HEAP32[1697] | 0) >>> 0 > $209 >>> 0) {
       _abort(); //@line 4171
      } else {
       HEAP32[$$3435 + 20 >> 2] = $209; //@line 4175
       HEAP32[$209 + 24 >> 2] = $$3435; //@line 4177
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1; //@line 4186
  HEAP32[$$1 + $130 >> 2] = $130; //@line 4188
  if (($$1 | 0) == (HEAP32[1698] | 0)) {
   HEAP32[1695] = $130; //@line 4192
   return;
  } else {
   $$2 = $130; //@line 4195
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2; //@line 4199
  HEAP32[$$1 + 4 >> 2] = $$1418 | 1; //@line 4202
  HEAP32[$$1 + $$1418 >> 2] = $$1418; //@line 4204
  $$2 = $$1418; //@line 4205
 }
 $224 = $$2 >>> 3; //@line 4207
 if ($$2 >>> 0 < 256) {
  $227 = 6812 + ($224 << 1 << 2) | 0; //@line 4211
  $228 = HEAP32[1693] | 0; //@line 4212
  $229 = 1 << $224; //@line 4213
  if (!($228 & $229)) {
   HEAP32[1693] = $228 | $229; //@line 4218
   $$0438 = $227; //@line 4220
   $$pre$phiZ2D = $227 + 8 | 0; //@line 4220
  } else {
   $233 = $227 + 8 | 0; //@line 4222
   $234 = HEAP32[$233 >> 2] | 0; //@line 4223
   if ((HEAP32[1697] | 0) >>> 0 > $234 >>> 0) {
    _abort(); //@line 4227
   } else {
    $$0438 = $234; //@line 4230
    $$pre$phiZ2D = $233; //@line 4230
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 4233
  HEAP32[$$0438 + 12 >> 2] = $$1; //@line 4235
  HEAP32[$$1 + 8 >> 2] = $$0438; //@line 4237
  HEAP32[$$1 + 12 >> 2] = $227; //@line 4239
  return;
 }
 $240 = $$2 >>> 8; //@line 4242
 if (!$240) {
  $$0431 = 0; //@line 4245
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0431 = 31; //@line 4249
  } else {
   $245 = ($240 + 1048320 | 0) >>> 16 & 8; //@line 4253
   $246 = $240 << $245; //@line 4254
   $249 = ($246 + 520192 | 0) >>> 16 & 4; //@line 4257
   $251 = $246 << $249; //@line 4259
   $254 = ($251 + 245760 | 0) >>> 16 & 2; //@line 4262
   $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0; //@line 4267
   $$0431 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1; //@line 4273
  }
 }
 $265 = 7076 + ($$0431 << 2) | 0; //@line 4276
 HEAP32[$$1 + 28 >> 2] = $$0431; //@line 4278
 HEAP32[$$1 + 20 >> 2] = 0; //@line 4281
 HEAP32[$$1 + 16 >> 2] = 0; //@line 4282
 $269 = HEAP32[1694] | 0; //@line 4283
 $270 = 1 << $$0431; //@line 4284
 if (!($269 & $270)) {
  HEAP32[1694] = $269 | $270; //@line 4289
  HEAP32[$265 >> 2] = $$1; //@line 4290
  HEAP32[$$1 + 24 >> 2] = $265; //@line 4292
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4294
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4296
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0); //@line 4305
 $$0420 = HEAP32[$265 >> 2] | 0; //@line 4305
 while (1) {
  if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   label = 121; //@line 4312
   break;
  }
  $288 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0; //@line 4316
  $290 = HEAP32[$288 >> 2] | 0; //@line 4318
  if (!$290) {
   label = 118; //@line 4321
   break;
  } else {
   $$0419 = $$0419 << 1; //@line 4324
   $$0420 = $290; //@line 4324
  }
 }
 if ((label | 0) == 118) {
  if ((HEAP32[1697] | 0) >>> 0 > $288 >>> 0) {
   _abort(); //@line 4331
  }
  HEAP32[$288 >> 2] = $$1; //@line 4334
  HEAP32[$$1 + 24 >> 2] = $$0420; //@line 4336
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4338
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4340
  return;
 } else if ((label | 0) == 121) {
  $297 = $$0420 + 8 | 0; //@line 4344
  $298 = HEAP32[$297 >> 2] | 0; //@line 4345
  $299 = HEAP32[1697] | 0; //@line 4346
  if (!($299 >>> 0 <= $298 >>> 0 & $299 >>> 0 <= $$0420 >>> 0)) {
   _abort(); //@line 4351
  }
  HEAP32[$298 + 12 >> 2] = $$1; //@line 4355
  HEAP32[$297 >> 2] = $$1; //@line 4356
  HEAP32[$$1 + 8 >> 2] = $298; //@line 4358
  HEAP32[$$1 + 12 >> 2] = $$0420; //@line 4360
  HEAP32[$$1 + 24 >> 2] = 0; //@line 4362
  return;
 }
}
function _main() {
 var $0 = 0, $1 = 0, $2 = 0, $20 = 0, $3 = 0, $51 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12932
 STACKTOP = STACKTOP + 960 | 0; //@line 12933
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(960); //@line 12933
 $vararg_buffer7 = sp + 72 | 0; //@line 12934
 $vararg_buffer4 = sp + 64 | 0; //@line 12935
 $vararg_buffer1 = sp + 56 | 0; //@line 12936
 $vararg_buffer = sp; //@line 12937
 $0 = sp + 84 | 0; //@line 12938
 $1 = sp + 944 | 0; //@line 12939
 $2 = sp + 80 | 0; //@line 12940
 $3 = sp + 76 | 0; //@line 12941
 $AsyncCtx12 = _emscripten_alloc_async_context(56, sp) | 0; //@line 12942
 _puts(3061) | 0; //@line 12943
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 293; //@line 12946
  HEAP32[$AsyncCtx12 + 4 >> 2] = $0; //@line 12948
  HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer; //@line 12950
  HEAP32[$AsyncCtx12 + 12 >> 2] = $vararg_buffer; //@line 12952
  HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer; //@line 12954
  HEAP32[$AsyncCtx12 + 20 >> 2] = $1; //@line 12956
  HEAP32[$AsyncCtx12 + 24 >> 2] = $2; //@line 12958
  HEAP32[$AsyncCtx12 + 28 >> 2] = $3; //@line 12960
  HEAP32[$AsyncCtx12 + 32 >> 2] = $vararg_buffer1; //@line 12962
  HEAP32[$AsyncCtx12 + 36 >> 2] = $vararg_buffer1; //@line 12964
  HEAP32[$AsyncCtx12 + 40 >> 2] = $vararg_buffer4; //@line 12966
  HEAP32[$AsyncCtx12 + 44 >> 2] = $vararg_buffer4; //@line 12968
  HEAP32[$AsyncCtx12 + 48 >> 2] = $vararg_buffer7; //@line 12970
  HEAP32[$AsyncCtx12 + 52 >> 2] = $vararg_buffer7; //@line 12972
  sp = STACKTOP; //@line 12973
  STACKTOP = sp; //@line 12974
  return 0; //@line 12974
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 12976
 __ZN17EthernetInterfaceC2Ev($0); //@line 12977
 if (__ZN17EthernetInterface7connectEv($0) | 0) {
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12981
  _puts(3083) | 0; //@line 12982
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 294; //@line 12985
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12987
   sp = STACKTOP; //@line 12988
   STACKTOP = sp; //@line 12989
   return 0; //@line 12989
  } else {
   _emscripten_free_async_context($AsyncCtx | 0); //@line 12991
   STACKTOP = sp; //@line 12992
   return -1;
  }
 }
 $AsyncCtx46 = _emscripten_alloc_async_context(56, sp) | 0; //@line 12995
 $20 = __ZN17EthernetInterface14get_ip_addressEv($0) | 0; //@line 12996
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 295; //@line 12999
  HEAP32[$AsyncCtx46 + 4 >> 2] = $vararg_buffer; //@line 13001
  HEAP32[$AsyncCtx46 + 8 >> 2] = $0; //@line 13003
  HEAP32[$AsyncCtx46 + 12 >> 2] = $vararg_buffer1; //@line 13005
  HEAP32[$AsyncCtx46 + 16 >> 2] = $vararg_buffer1; //@line 13007
  HEAP32[$AsyncCtx46 + 20 >> 2] = $vararg_buffer4; //@line 13009
  HEAP32[$AsyncCtx46 + 24 >> 2] = $vararg_buffer4; //@line 13011
  HEAP32[$AsyncCtx46 + 28 >> 2] = $2; //@line 13013
  HEAP32[$AsyncCtx46 + 32 >> 2] = $3; //@line 13015
  HEAP32[$AsyncCtx46 + 36 >> 2] = $vararg_buffer7; //@line 13017
  HEAP32[$AsyncCtx46 + 40 >> 2] = $vararg_buffer7; //@line 13019
  HEAP32[$AsyncCtx46 + 44 >> 2] = $vararg_buffer; //@line 13021
  HEAP32[$AsyncCtx46 + 48 >> 2] = $vararg_buffer; //@line 13023
  HEAP32[$AsyncCtx46 + 52 >> 2] = $1; //@line 13025
  sp = STACKTOP; //@line 13026
  STACKTOP = sp; //@line 13027
  return 0; //@line 13027
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 13029
 HEAP32[$vararg_buffer >> 2] = $20 | 0 ? $20 : 3100; //@line 13032
 _printf(3106, $vararg_buffer) | 0; //@line 13033
 while (1) {
  $AsyncCtx16 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13035
  __ZN9UDPSocketC2I17EthernetInterfaceEEPT_($vararg_buffer, $0); //@line 13036
  if (___async) {
   label = 11; //@line 13039
   break;
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 13042
  HEAP8[$1 >> 0] = HEAP8[3125] | 0; //@line 13043
  HEAP8[$1 + 1 >> 0] = HEAP8[3126] | 0; //@line 13043
  HEAP8[$1 + 2 >> 0] = HEAP8[3127] | 0; //@line 13043
  HEAP8[$1 + 3 >> 0] = HEAP8[3128] | 0; //@line 13043
  HEAP8[$1 + 4 >> 0] = HEAP8[3129] | 0; //@line 13043
  $AsyncCtx23 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13044
  $51 = __ZN9UDPSocket6sendtoEPKctPKvj($vararg_buffer, 3130, 37, $1, 5) | 0; //@line 13045
  if (___async) {
   label = 13; //@line 13048
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 13051
  if (($51 | 0) < 0) {
   HEAP32[$vararg_buffer1 >> 2] = $51; //@line 13054
   _printf(3144, $vararg_buffer1) | 0; //@line 13055
   $AsyncCtx42 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13056
   _wait_ms(1e4); //@line 13057
   if (___async) {
    label = 16; //@line 13060
    break;
   }
   _emscripten_free_async_context($AsyncCtx42 | 0); //@line 13063
  } else {
   $AsyncCtx20 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13065
   $83 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($vararg_buffer, 0, $2, 4) | 0; //@line 13066
   if (___async) {
    label = 19; //@line 13069
    break;
   }
   _emscripten_free_async_context($AsyncCtx20 | 0); //@line 13072
   if (($83 | 0) == 4) {
    HEAP32[$3 >> 2] = (_llvm_bswap_i32(HEAP32[$2 >> 2] | 0) | 0) + 2085978496; //@line 13078
    HEAP32[$vararg_buffer7 >> 2] = _ctime($3 | 0) | 0; //@line 13080
    _printf(3191, $vararg_buffer7) | 0; //@line 13081
    $AsyncCtx31 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13082
    __ZN6Socket5closeEv($vararg_buffer) | 0; //@line 13083
    if (___async) {
     label = 25; //@line 13086
     break;
    }
    _emscripten_free_async_context($AsyncCtx31 | 0); //@line 13089
    $AsyncCtx34 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13090
    _wait_ms(1e4); //@line 13091
    if (___async) {
     label = 27; //@line 13094
     break;
    }
    _emscripten_free_async_context($AsyncCtx34 | 0); //@line 13097
   } else {
    HEAP32[$vararg_buffer4 >> 2] = $83; //@line 13099
    _printf(3169, $vararg_buffer4) | 0; //@line 13100
    $AsyncCtx38 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13101
    _wait_ms(1e4); //@line 13102
    if (___async) {
     label = 22; //@line 13105
     break;
    }
    _emscripten_free_async_context($AsyncCtx38 | 0); //@line 13108
   }
  }
  $AsyncCtx27 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13111
  __ZN9UDPSocketD2Ev($vararg_buffer); //@line 13112
  if (___async) {
   label = 31; //@line 13115
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 13118
 }
 if ((label | 0) == 11) {
  HEAP32[$AsyncCtx16 >> 2] = 296; //@line 13121
  HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 13123
  HEAP32[$AsyncCtx16 + 8 >> 2] = $vararg_buffer; //@line 13125
  HEAP32[$AsyncCtx16 + 12 >> 2] = $vararg_buffer; //@line 13127
  HEAP32[$AsyncCtx16 + 16 >> 2] = $0; //@line 13129
  HEAP32[$AsyncCtx16 + 20 >> 2] = $vararg_buffer1; //@line 13131
  HEAP32[$AsyncCtx16 + 24 >> 2] = $vararg_buffer1; //@line 13133
  HEAP32[$AsyncCtx16 + 28 >> 2] = $3; //@line 13135
  HEAP32[$AsyncCtx16 + 32 >> 2] = $vararg_buffer4; //@line 13137
  HEAP32[$AsyncCtx16 + 36 >> 2] = $vararg_buffer4; //@line 13139
  HEAP32[$AsyncCtx16 + 40 >> 2] = $2; //@line 13141
  HEAP32[$AsyncCtx16 + 44 >> 2] = $2; //@line 13143
  HEAP32[$AsyncCtx16 + 48 >> 2] = $3; //@line 13145
  HEAP32[$AsyncCtx16 + 52 >> 2] = $vararg_buffer7; //@line 13147
  HEAP32[$AsyncCtx16 + 56 >> 2] = $vararg_buffer7; //@line 13149
  HEAP32[$AsyncCtx16 + 60 >> 2] = $vararg_buffer; //@line 13151
  sp = STACKTOP; //@line 13152
  STACKTOP = sp; //@line 13153
  return 0; //@line 13153
 } else if ((label | 0) == 13) {
  HEAP32[$AsyncCtx23 >> 2] = 297; //@line 13156
  HEAP32[$AsyncCtx23 + 4 >> 2] = $1; //@line 13158
  HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer; //@line 13160
  HEAP32[$AsyncCtx23 + 12 >> 2] = $vararg_buffer; //@line 13162
  HEAP32[$AsyncCtx23 + 16 >> 2] = $0; //@line 13164
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer1; //@line 13166
  HEAP32[$AsyncCtx23 + 24 >> 2] = $vararg_buffer1; //@line 13168
  HEAP32[$AsyncCtx23 + 28 >> 2] = $3; //@line 13170
  HEAP32[$AsyncCtx23 + 32 >> 2] = $vararg_buffer4; //@line 13172
  HEAP32[$AsyncCtx23 + 36 >> 2] = $vararg_buffer4; //@line 13174
  HEAP32[$AsyncCtx23 + 40 >> 2] = $2; //@line 13176
  HEAP32[$AsyncCtx23 + 44 >> 2] = $2; //@line 13178
  HEAP32[$AsyncCtx23 + 48 >> 2] = $3; //@line 13180
  HEAP32[$AsyncCtx23 + 52 >> 2] = $vararg_buffer7; //@line 13182
  HEAP32[$AsyncCtx23 + 56 >> 2] = $vararg_buffer7; //@line 13184
  HEAP32[$AsyncCtx23 + 60 >> 2] = $vararg_buffer; //@line 13186
  sp = STACKTOP; //@line 13187
  STACKTOP = sp; //@line 13188
  return 0; //@line 13188
 } else if ((label | 0) == 16) {
  HEAP32[$AsyncCtx42 >> 2] = 298; //@line 13191
  HEAP32[$AsyncCtx42 + 4 >> 2] = $1; //@line 13193
  HEAP32[$AsyncCtx42 + 8 >> 2] = $vararg_buffer; //@line 13195
  HEAP32[$AsyncCtx42 + 12 >> 2] = $vararg_buffer; //@line 13197
  HEAP32[$AsyncCtx42 + 16 >> 2] = $0; //@line 13199
  HEAP32[$AsyncCtx42 + 20 >> 2] = $vararg_buffer1; //@line 13201
  HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer1; //@line 13203
  HEAP32[$AsyncCtx42 + 28 >> 2] = $3; //@line 13205
  HEAP32[$AsyncCtx42 + 32 >> 2] = $vararg_buffer4; //@line 13207
  HEAP32[$AsyncCtx42 + 36 >> 2] = $vararg_buffer4; //@line 13209
  HEAP32[$AsyncCtx42 + 40 >> 2] = $2; //@line 13211
  HEAP32[$AsyncCtx42 + 44 >> 2] = $2; //@line 13213
  HEAP32[$AsyncCtx42 + 48 >> 2] = $3; //@line 13215
  HEAP32[$AsyncCtx42 + 52 >> 2] = $vararg_buffer7; //@line 13217
  HEAP32[$AsyncCtx42 + 56 >> 2] = $vararg_buffer7; //@line 13219
  HEAP32[$AsyncCtx42 + 60 >> 2] = $vararg_buffer; //@line 13221
  sp = STACKTOP; //@line 13222
  STACKTOP = sp; //@line 13223
  return 0; //@line 13223
 } else if ((label | 0) == 19) {
  HEAP32[$AsyncCtx20 >> 2] = 299; //@line 13226
  HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 13228
  HEAP32[$AsyncCtx20 + 8 >> 2] = $vararg_buffer; //@line 13230
  HEAP32[$AsyncCtx20 + 12 >> 2] = $vararg_buffer; //@line 13232
  HEAP32[$AsyncCtx20 + 16 >> 2] = $0; //@line 13234
  HEAP32[$AsyncCtx20 + 20 >> 2] = $vararg_buffer1; //@line 13236
  HEAP32[$AsyncCtx20 + 24 >> 2] = $vararg_buffer1; //@line 13238
  HEAP32[$AsyncCtx20 + 28 >> 2] = $3; //@line 13240
  HEAP32[$AsyncCtx20 + 32 >> 2] = $vararg_buffer4; //@line 13242
  HEAP32[$AsyncCtx20 + 36 >> 2] = $vararg_buffer4; //@line 13244
  HEAP32[$AsyncCtx20 + 40 >> 2] = $2; //@line 13246
  HEAP32[$AsyncCtx20 + 44 >> 2] = $2; //@line 13248
  HEAP32[$AsyncCtx20 + 48 >> 2] = $3; //@line 13250
  HEAP32[$AsyncCtx20 + 52 >> 2] = $vararg_buffer7; //@line 13252
  HEAP32[$AsyncCtx20 + 56 >> 2] = $vararg_buffer7; //@line 13254
  HEAP32[$AsyncCtx20 + 60 >> 2] = $vararg_buffer; //@line 13256
  sp = STACKTOP; //@line 13257
  STACKTOP = sp; //@line 13258
  return 0; //@line 13258
 } else if ((label | 0) == 22) {
  HEAP32[$AsyncCtx38 >> 2] = 300; //@line 13261
  HEAP32[$AsyncCtx38 + 4 >> 2] = $1; //@line 13263
  HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer; //@line 13265
  HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer; //@line 13267
  HEAP32[$AsyncCtx38 + 16 >> 2] = $0; //@line 13269
  HEAP32[$AsyncCtx38 + 20 >> 2] = $vararg_buffer1; //@line 13271
  HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer1; //@line 13273
  HEAP32[$AsyncCtx38 + 28 >> 2] = $3; //@line 13275
  HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer4; //@line 13277
  HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer4; //@line 13279
  HEAP32[$AsyncCtx38 + 40 >> 2] = $2; //@line 13281
  HEAP32[$AsyncCtx38 + 44 >> 2] = $2; //@line 13283
  HEAP32[$AsyncCtx38 + 48 >> 2] = $3; //@line 13285
  HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer7; //@line 13287
  HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer7; //@line 13289
  HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer; //@line 13291
  sp = STACKTOP; //@line 13292
  STACKTOP = sp; //@line 13293
  return 0; //@line 13293
 } else if ((label | 0) == 25) {
  HEAP32[$AsyncCtx31 >> 2] = 301; //@line 13296
  HEAP32[$AsyncCtx31 + 4 >> 2] = $1; //@line 13298
  HEAP32[$AsyncCtx31 + 8 >> 2] = $vararg_buffer; //@line 13300
  HEAP32[$AsyncCtx31 + 12 >> 2] = $vararg_buffer; //@line 13302
  HEAP32[$AsyncCtx31 + 16 >> 2] = $0; //@line 13304
  HEAP32[$AsyncCtx31 + 20 >> 2] = $vararg_buffer1; //@line 13306
  HEAP32[$AsyncCtx31 + 24 >> 2] = $vararg_buffer1; //@line 13308
  HEAP32[$AsyncCtx31 + 28 >> 2] = $3; //@line 13310
  HEAP32[$AsyncCtx31 + 32 >> 2] = $vararg_buffer4; //@line 13312
  HEAP32[$AsyncCtx31 + 36 >> 2] = $vararg_buffer4; //@line 13314
  HEAP32[$AsyncCtx31 + 40 >> 2] = $2; //@line 13316
  HEAP32[$AsyncCtx31 + 44 >> 2] = $2; //@line 13318
  HEAP32[$AsyncCtx31 + 48 >> 2] = $3; //@line 13320
  HEAP32[$AsyncCtx31 + 52 >> 2] = $vararg_buffer7; //@line 13322
  HEAP32[$AsyncCtx31 + 56 >> 2] = $vararg_buffer7; //@line 13324
  HEAP32[$AsyncCtx31 + 60 >> 2] = $vararg_buffer; //@line 13326
  sp = STACKTOP; //@line 13327
  STACKTOP = sp; //@line 13328
  return 0; //@line 13328
 } else if ((label | 0) == 27) {
  HEAP32[$AsyncCtx34 >> 2] = 302; //@line 13331
  HEAP32[$AsyncCtx34 + 4 >> 2] = $1; //@line 13333
  HEAP32[$AsyncCtx34 + 8 >> 2] = $vararg_buffer; //@line 13335
  HEAP32[$AsyncCtx34 + 12 >> 2] = $vararg_buffer; //@line 13337
  HEAP32[$AsyncCtx34 + 16 >> 2] = $0; //@line 13339
  HEAP32[$AsyncCtx34 + 20 >> 2] = $vararg_buffer1; //@line 13341
  HEAP32[$AsyncCtx34 + 24 >> 2] = $vararg_buffer1; //@line 13343
  HEAP32[$AsyncCtx34 + 28 >> 2] = $3; //@line 13345
  HEAP32[$AsyncCtx34 + 32 >> 2] = $vararg_buffer4; //@line 13347
  HEAP32[$AsyncCtx34 + 36 >> 2] = $vararg_buffer4; //@line 13349
  HEAP32[$AsyncCtx34 + 40 >> 2] = $2; //@line 13351
  HEAP32[$AsyncCtx34 + 44 >> 2] = $2; //@line 13353
  HEAP32[$AsyncCtx34 + 48 >> 2] = $3; //@line 13355
  HEAP32[$AsyncCtx34 + 52 >> 2] = $vararg_buffer7; //@line 13357
  HEAP32[$AsyncCtx34 + 56 >> 2] = $vararg_buffer7; //@line 13359
  HEAP32[$AsyncCtx34 + 60 >> 2] = $vararg_buffer; //@line 13361
  sp = STACKTOP; //@line 13362
  STACKTOP = sp; //@line 13363
  return 0; //@line 13363
 } else if ((label | 0) == 31) {
  HEAP32[$AsyncCtx27 >> 2] = 303; //@line 13366
  HEAP32[$AsyncCtx27 + 4 >> 2] = $1; //@line 13368
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer; //@line 13370
  HEAP32[$AsyncCtx27 + 12 >> 2] = $vararg_buffer; //@line 13372
  HEAP32[$AsyncCtx27 + 16 >> 2] = $0; //@line 13374
  HEAP32[$AsyncCtx27 + 20 >> 2] = $vararg_buffer1; //@line 13376
  HEAP32[$AsyncCtx27 + 24 >> 2] = $vararg_buffer1; //@line 13378
  HEAP32[$AsyncCtx27 + 28 >> 2] = $3; //@line 13380
  HEAP32[$AsyncCtx27 + 32 >> 2] = $vararg_buffer4; //@line 13382
  HEAP32[$AsyncCtx27 + 36 >> 2] = $vararg_buffer4; //@line 13384
  HEAP32[$AsyncCtx27 + 40 >> 2] = $2; //@line 13386
  HEAP32[$AsyncCtx27 + 44 >> 2] = $2; //@line 13388
  HEAP32[$AsyncCtx27 + 48 >> 2] = $3; //@line 13390
  HEAP32[$AsyncCtx27 + 52 >> 2] = $vararg_buffer7; //@line 13392
  HEAP32[$AsyncCtx27 + 56 >> 2] = $vararg_buffer7; //@line 13394
  HEAP32[$AsyncCtx27 + 60 >> 2] = $vararg_buffer; //@line 13396
  sp = STACKTOP; //@line 13397
  STACKTOP = sp; //@line 13398
  return 0; //@line 13398
 }
 return 0; //@line 13400
}
function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $263 = 0, $265 = 0, $275 = 0, $28 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0;
 L1 : do {
  if ($1 >>> 0 > 36) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 6940
   $289 = 0; //@line 6941
   $290 = 0; //@line 6941
  } else {
   $6 = $0 + 4 | 0; //@line 6943
   $7 = $0 + 100 | 0; //@line 6944
   do {
    $9 = HEAP32[$6 >> 2] | 0; //@line 6946
    if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $9 + 1; //@line 6951
     $16 = HEAPU8[$9 >> 0] | 0; //@line 6954
    } else {
     $16 = ___shgetc($0) | 0; //@line 6957
    }
   } while ((_isspace($16) | 0) != 0);
   L11 : do {
    switch ($16 | 0) {
    case 43:
    case 45:
     {
      $20 = (($16 | 0) == 45) << 31 >> 31; //@line 6969
      $21 = HEAP32[$6 >> 2] | 0; //@line 6970
      if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $21 + 1; //@line 6975
       $$0157 = $20; //@line 6978
       $$0159 = HEAPU8[$21 >> 0] | 0; //@line 6978
       break L11;
      } else {
       $$0157 = $20; //@line 6982
       $$0159 = ___shgetc($0) | 0; //@line 6982
       break L11;
      }
      break;
     }
    default:
     {
      $$0157 = 0; //@line 6988
      $$0159 = $16; //@line 6988
     }
    }
   } while (0);
   $28 = ($1 | 0) == 0; //@line 6992
   do {
    if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
     $32 = HEAP32[$6 >> 2] | 0; //@line 6999
     if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $32 + 1; //@line 7004
      $40 = HEAPU8[$32 >> 0] | 0; //@line 7007
     } else {
      $40 = ___shgetc($0) | 0; //@line 7010
     }
     if (($40 | 32 | 0) != 120) {
      if ($28) {
       $$1160169 = $40; //@line 7016
       $$1165167 = 8; //@line 7016
       label = 46; //@line 7017
       break;
      } else {
       $$1160 = $40; //@line 7020
       $$1165 = $1; //@line 7020
       label = 32; //@line 7021
       break;
      }
     }
     $42 = HEAP32[$6 >> 2] | 0; //@line 7025
     if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $42 + 1; //@line 7030
      $50 = HEAPU8[$42 >> 0] | 0; //@line 7033
     } else {
      $50 = ___shgetc($0) | 0; //@line 7036
     }
     if ((HEAPU8[3219 + $50 >> 0] | 0) > 15) {
      $54 = (HEAP32[$7 >> 2] | 0) == 0; //@line 7043
      if (!$54) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7047
      }
      if (!$2) {
       ___shlim($0, 0); //@line 7051
       $289 = 0; //@line 7052
       $290 = 0; //@line 7052
       break L1;
      }
      if ($54) {
       $289 = 0; //@line 7056
       $290 = 0; //@line 7056
       break L1;
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7061
      $289 = 0; //@line 7062
      $290 = 0; //@line 7062
      break L1;
     } else {
      $$1160169 = $50; //@line 7065
      $$1165167 = 16; //@line 7065
      label = 46; //@line 7066
     }
    } else {
     $$166 = $28 ? 10 : $1; //@line 7069
     if ($$166 >>> 0 > (HEAPU8[3219 + $$0159 >> 0] | 0) >>> 0) {
      $$1160 = $$0159; //@line 7075
      $$1165 = $$166; //@line 7075
      label = 32; //@line 7076
     } else {
      if (HEAP32[$7 >> 2] | 0) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7083
      }
      ___shlim($0, 0); //@line 7085
      HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7087
      $289 = 0; //@line 7088
      $290 = 0; //@line 7088
      break L1;
     }
    }
   } while (0);
   L43 : do {
    if ((label | 0) == 32) {
     if (($$1165 | 0) == 10) {
      $70 = $$1160 + -48 | 0; //@line 7097
      if ($70 >>> 0 < 10) {
       $$0154222 = 0; //@line 7100
       $74 = $70; //@line 7100
       do {
        $$0154222 = ($$0154222 * 10 | 0) + $74 | 0; //@line 7103
        $75 = HEAP32[$6 >> 2] | 0; //@line 7104
        if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $75 + 1; //@line 7109
         $$2161$be = HEAPU8[$75 >> 0] | 0; //@line 7112
        } else {
         $$2161$be = ___shgetc($0) | 0; //@line 7115
        }
        $74 = $$2161$be + -48 | 0; //@line 7117
       } while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
       $$2161$lcssa = $$2161$be; //@line 7127
       $291 = $$0154222; //@line 7127
       $292 = 0; //@line 7127
      } else {
       $$2161$lcssa = $$1160; //@line 7129
       $291 = 0; //@line 7129
       $292 = 0; //@line 7129
      }
      $86 = $$2161$lcssa + -48 | 0; //@line 7131
      if ($86 >>> 0 < 10) {
       $$3162215 = $$2161$lcssa; //@line 7134
       $88 = $291; //@line 7134
       $89 = $292; //@line 7134
       $93 = $86; //@line 7134
       while (1) {
        $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0; //@line 7136
        $91 = tempRet0; //@line 7137
        $94 = (($93 | 0) < 0) << 31 >> 31; //@line 7139
        $96 = ~$94; //@line 7141
        if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
         $$1165168 = 10; //@line 7148
         $$8 = $$3162215; //@line 7148
         $293 = $88; //@line 7148
         $294 = $89; //@line 7148
         label = 72; //@line 7149
         break L43;
        }
        $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0; //@line 7152
        $89 = tempRet0; //@line 7153
        $104 = HEAP32[$6 >> 2] | 0; //@line 7154
        if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $104 + 1; //@line 7159
         $$3162$be = HEAPU8[$104 >> 0] | 0; //@line 7162
        } else {
         $$3162$be = ___shgetc($0) | 0; //@line 7165
        }
        $93 = $$3162$be + -48 | 0; //@line 7167
        if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) {
         break;
        } else {
         $$3162215 = $$3162$be; //@line 7176
        }
       }
       if ($93 >>> 0 > 9) {
        $$1158 = $$0157; //@line 7183
        $263 = $89; //@line 7183
        $265 = $88; //@line 7183
       } else {
        $$1165168 = 10; //@line 7185
        $$8 = $$3162$be; //@line 7185
        $293 = $88; //@line 7185
        $294 = $89; //@line 7185
        label = 72; //@line 7186
       }
      } else {
       $$1158 = $$0157; //@line 7189
       $263 = $292; //@line 7189
       $265 = $291; //@line 7189
      }
     } else {
      $$1160169 = $$1160; //@line 7192
      $$1165167 = $$1165; //@line 7192
      label = 46; //@line 7193
     }
    }
   } while (0);
   L63 : do {
    if ((label | 0) == 46) {
     if (!($$1165167 + -1 & $$1165167)) {
      $131 = HEAP8[3475 + (($$1165167 * 23 | 0) >>> 5 & 7) >> 0] | 0; //@line 7208
      $133 = HEAP8[3219 + $$1160169 >> 0] | 0; //@line 7210
      $134 = $133 & 255; //@line 7211
      if ($$1165167 >>> 0 > $134 >>> 0) {
       $$1155192 = 0; //@line 7214
       $138 = $134; //@line 7214
       do {
        $$1155192 = $138 | $$1155192 << $131; //@line 7217
        $139 = HEAP32[$6 >> 2] | 0; //@line 7218
        if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $139 + 1; //@line 7223
         $$4163$be = HEAPU8[$139 >> 0] | 0; //@line 7226
        } else {
         $$4163$be = ___shgetc($0) | 0; //@line 7229
        }
        $147 = HEAP8[3219 + $$4163$be >> 0] | 0; //@line 7232
        $138 = $147 & 255; //@line 7233
       } while ($$1155192 >>> 0 < 134217728 & $$1165167 >>> 0 > $138 >>> 0);
       $$4163$lcssa = $$4163$be; //@line 7243
       $155 = $147; //@line 7243
       $158 = 0; //@line 7243
       $160 = $$1155192; //@line 7243
      } else {
       $$4163$lcssa = $$1160169; //@line 7245
       $155 = $133; //@line 7245
       $158 = 0; //@line 7245
       $160 = 0; //@line 7245
      }
      $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0; //@line 7247
      $153 = tempRet0; //@line 7248
      if ($$1165167 >>> 0 <= ($155 & 255) >>> 0 | ($153 >>> 0 < $158 >>> 0 | ($153 | 0) == ($158 | 0) & $152 >>> 0 < $160 >>> 0)) {
       $$1165168 = $$1165167; //@line 7258
       $$8 = $$4163$lcssa; //@line 7258
       $293 = $160; //@line 7258
       $294 = $158; //@line 7258
       label = 72; //@line 7259
       break;
      } else {
       $164 = $160; //@line 7262
       $165 = $158; //@line 7262
       $169 = $155; //@line 7262
      }
      while (1) {
       $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0; //@line 7265
       $167 = tempRet0; //@line 7266
       $170 = $166 | $169 & 255; //@line 7268
       $171 = HEAP32[$6 >> 2] | 0; //@line 7269
       if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $171 + 1; //@line 7274
        $$5$be = HEAPU8[$171 >> 0] | 0; //@line 7277
       } else {
        $$5$be = ___shgetc($0) | 0; //@line 7280
       }
       $169 = HEAP8[3219 + $$5$be >> 0] | 0; //@line 7283
       if ($$1165167 >>> 0 <= ($169 & 255) >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
        $$1165168 = $$1165167; //@line 7293
        $$8 = $$5$be; //@line 7293
        $293 = $170; //@line 7293
        $294 = $167; //@line 7293
        label = 72; //@line 7294
        break L63;
       } else {
        $164 = $170; //@line 7297
        $165 = $167; //@line 7297
       }
      }
     }
     $123 = HEAP8[3219 + $$1160169 >> 0] | 0; //@line 7302
     $124 = $123 & 255; //@line 7303
     if ($$1165167 >>> 0 > $124 >>> 0) {
      $$2156210 = 0; //@line 7306
      $189 = $124; //@line 7306
      do {
       $$2156210 = $189 + (Math_imul($$2156210, $$1165167) | 0) | 0; //@line 7309
       $190 = HEAP32[$6 >> 2] | 0; //@line 7310
       if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $190 + 1; //@line 7315
        $$6$be = HEAPU8[$190 >> 0] | 0; //@line 7318
       } else {
        $$6$be = ___shgetc($0) | 0; //@line 7321
       }
       $198 = HEAP8[3219 + $$6$be >> 0] | 0; //@line 7324
       $189 = $198 & 255; //@line 7325
      } while ($$2156210 >>> 0 < 119304647 & $$1165167 >>> 0 > $189 >>> 0);
      $$6$lcssa = $$6$be; //@line 7335
      $204 = $198; //@line 7335
      $295 = $$2156210; //@line 7335
      $296 = 0; //@line 7335
     } else {
      $$6$lcssa = $$1160169; //@line 7337
      $204 = $123; //@line 7337
      $295 = 0; //@line 7337
      $296 = 0; //@line 7337
     }
     if ($$1165167 >>> 0 > ($204 & 255) >>> 0) {
      $206 = ___udivdi3(-1, -1, $$1165167 | 0, 0) | 0; //@line 7342
      $207 = tempRet0; //@line 7343
      $$7198 = $$6$lcssa; //@line 7344
      $209 = $296; //@line 7344
      $211 = $295; //@line 7344
      $218 = $204; //@line 7344
      while (1) {
       if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
        $$1165168 = $$1165167; //@line 7352
        $$8 = $$7198; //@line 7352
        $293 = $211; //@line 7352
        $294 = $209; //@line 7352
        label = 72; //@line 7353
        break L63;
       }
       $215 = ___muldi3($211 | 0, $209 | 0, $$1165167 | 0, 0) | 0; //@line 7356
       $216 = tempRet0; //@line 7357
       $217 = $218 & 255; //@line 7358
       if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
        $$1165168 = $$1165167; //@line 7366
        $$8 = $$7198; //@line 7366
        $293 = $211; //@line 7366
        $294 = $209; //@line 7366
        label = 72; //@line 7367
        break L63;
       }
       $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0; //@line 7370
       $226 = tempRet0; //@line 7371
       $227 = HEAP32[$6 >> 2] | 0; //@line 7372
       if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $227 + 1; //@line 7377
        $$7$be = HEAPU8[$227 >> 0] | 0; //@line 7380
       } else {
        $$7$be = ___shgetc($0) | 0; //@line 7383
       }
       $218 = HEAP8[3219 + $$7$be >> 0] | 0; //@line 7386
       if ($$1165167 >>> 0 <= ($218 & 255) >>> 0) {
        $$1165168 = $$1165167; //@line 7392
        $$8 = $$7$be; //@line 7392
        $293 = $225; //@line 7392
        $294 = $226; //@line 7392
        label = 72; //@line 7393
        break;
       } else {
        $$7198 = $$7$be; //@line 7390
        $209 = $226; //@line 7390
        $211 = $225; //@line 7390
       }
      }
     } else {
      $$1165168 = $$1165167; //@line 7398
      $$8 = $$6$lcssa; //@line 7398
      $293 = $295; //@line 7398
      $294 = $296; //@line 7398
      label = 72; //@line 7399
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    if ($$1165168 >>> 0 > (HEAPU8[3219 + $$8 >> 0] | 0) >>> 0) {
     do {
      $242 = HEAP32[$6 >> 2] | 0; //@line 7410
      if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $242 + 1; //@line 7415
       $$9$be = HEAPU8[$242 >> 0] | 0; //@line 7418
      } else {
       $$9$be = ___shgetc($0) | 0; //@line 7421
      }
     } while ($$1165168 >>> 0 > (HEAPU8[3219 + $$9$be >> 0] | 0) >>> 0);
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7432
     $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0; //@line 7438
     $263 = $4; //@line 7438
     $265 = $3; //@line 7438
    } else {
     $$1158 = $$0157; //@line 7440
     $263 = $294; //@line 7440
     $265 = $293; //@line 7440
    }
   }
   if (HEAP32[$7 >> 2] | 0) {
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7448
   }
   if (!($263 >>> 0 < $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 < $3 >>> 0)) {
    if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7464
     $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0; //@line 7465
     $289 = tempRet0; //@line 7467
     $290 = $275; //@line 7467
     break;
    }
    if ($263 >>> 0 > $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 > $3 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7477
     $289 = $4; //@line 7478
     $290 = $3; //@line 7478
     break;
    }
   }
   $284 = (($$1158 | 0) < 0) << 31 >> 31; //@line 7483
   $287 = _i64Subtract($265 ^ $$1158 | 0, $263 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0; //@line 7486
   $289 = tempRet0; //@line 7488
   $290 = $287; //@line 7488
  }
 } while (0);
 tempRet0 = $289; //@line 7491
 return $290 | 0; //@line 7492
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_188($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $113 = 0, $115 = 0, $12 = 0, $123 = 0, $126 = 0, $128 = 0, $136 = 0, $139 = 0, $14 = 0, $141 = 0, $149 = 0, $152 = 0, $154 = 0, $16 = 0, $167 = 0, $168 = 0, $169 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $57 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8716
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8718
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8720
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8722
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8724
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8726
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8728
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8730
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8732
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8734
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8736
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8738
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8740
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8742
 $27 = $6 + 12 | 0; //@line 8743
 $28 = HEAP32[$27 >> 2] | 0; //@line 8744
 if ($28 | 0) {
  $31 = HEAP32[$28 + 4 >> 2] | 0; //@line 8748
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 8749
  FUNCTION_TABLE_vii[$31 & 7]($8, $6); //@line 8750
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 8753
   $32 = $ReallocAsyncCtx5 + 4 | 0; //@line 8754
   HEAP32[$32 >> 2] = $2; //@line 8755
   $33 = $ReallocAsyncCtx5 + 8 | 0; //@line 8756
   HEAP32[$33 >> 2] = $4; //@line 8757
   $34 = $ReallocAsyncCtx5 + 12 | 0; //@line 8758
   HEAP32[$34 >> 2] = $10; //@line 8759
   $35 = $ReallocAsyncCtx5 + 16 | 0; //@line 8760
   HEAP32[$35 >> 2] = $12; //@line 8761
   $36 = $ReallocAsyncCtx5 + 20 | 0; //@line 8762
   HEAP32[$36 >> 2] = $14; //@line 8763
   $37 = $ReallocAsyncCtx5 + 24 | 0; //@line 8764
   HEAP32[$37 >> 2] = $16; //@line 8765
   $38 = $ReallocAsyncCtx5 + 28 | 0; //@line 8766
   HEAP32[$38 >> 2] = $18; //@line 8767
   $39 = $ReallocAsyncCtx5 + 32 | 0; //@line 8768
   HEAP32[$39 >> 2] = $27; //@line 8769
   $40 = $ReallocAsyncCtx5 + 36 | 0; //@line 8770
   HEAP32[$40 >> 2] = $20; //@line 8771
   $41 = $ReallocAsyncCtx5 + 40 | 0; //@line 8772
   HEAP32[$41 >> 2] = $8; //@line 8773
   $42 = $ReallocAsyncCtx5 + 44 | 0; //@line 8774
   HEAP32[$42 >> 2] = $22; //@line 8775
   $43 = $ReallocAsyncCtx5 + 48 | 0; //@line 8776
   HEAP32[$43 >> 2] = $24; //@line 8777
   $44 = $ReallocAsyncCtx5 + 52 | 0; //@line 8778
   HEAP32[$44 >> 2] = $26; //@line 8779
   sp = STACKTOP; //@line 8780
   return;
  }
  ___async_unwind = 0; //@line 8783
  HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 8784
  $32 = $ReallocAsyncCtx5 + 4 | 0; //@line 8785
  HEAP32[$32 >> 2] = $2; //@line 8786
  $33 = $ReallocAsyncCtx5 + 8 | 0; //@line 8787
  HEAP32[$33 >> 2] = $4; //@line 8788
  $34 = $ReallocAsyncCtx5 + 12 | 0; //@line 8789
  HEAP32[$34 >> 2] = $10; //@line 8790
  $35 = $ReallocAsyncCtx5 + 16 | 0; //@line 8791
  HEAP32[$35 >> 2] = $12; //@line 8792
  $36 = $ReallocAsyncCtx5 + 20 | 0; //@line 8793
  HEAP32[$36 >> 2] = $14; //@line 8794
  $37 = $ReallocAsyncCtx5 + 24 | 0; //@line 8795
  HEAP32[$37 >> 2] = $16; //@line 8796
  $38 = $ReallocAsyncCtx5 + 28 | 0; //@line 8797
  HEAP32[$38 >> 2] = $18; //@line 8798
  $39 = $ReallocAsyncCtx5 + 32 | 0; //@line 8799
  HEAP32[$39 >> 2] = $27; //@line 8800
  $40 = $ReallocAsyncCtx5 + 36 | 0; //@line 8801
  HEAP32[$40 >> 2] = $20; //@line 8802
  $41 = $ReallocAsyncCtx5 + 40 | 0; //@line 8803
  HEAP32[$41 >> 2] = $8; //@line 8804
  $42 = $ReallocAsyncCtx5 + 44 | 0; //@line 8805
  HEAP32[$42 >> 2] = $22; //@line 8806
  $43 = $ReallocAsyncCtx5 + 48 | 0; //@line 8807
  HEAP32[$43 >> 2] = $24; //@line 8808
  $44 = $ReallocAsyncCtx5 + 52 | 0; //@line 8809
  HEAP32[$44 >> 2] = $26; //@line 8810
  sp = STACKTOP; //@line 8811
  return;
 }
 HEAP32[$14 >> 2] = 0; //@line 8814
 HEAP32[$4 + 8 >> 2] = $10; //@line 8816
 HEAP32[$4 + 48 >> 2] = $16; //@line 8818
 HEAP32[$4 + 52 >> 2] = $18; //@line 8820
 $48 = $4 + 56 | 0; //@line 8821
 HEAP32[$48 >> 2] = 0; //@line 8822
 $49 = $4 + 60 | 0; //@line 8823
 HEAP32[$49 >> 2] = 0; //@line 8824
 HEAP32[$4 + 64 >> 2] = 0; //@line 8826
 HEAP8[$4 + 82 >> 0] = 0; //@line 8828
 HEAP8[$4 + 83 >> 0] = 1; //@line 8830
 HEAP8[$4 + 84 >> 0] = 3; //@line 8832
 HEAP8[$4 + 85 >> 0] = 0; //@line 8834
 HEAP16[$4 + 80 >> 1] = 0; //@line 8836
 HEAP32[$4 + 76 >> 2] = 0; //@line 8838
 $57 = $4 + 72 | 0; //@line 8839
 HEAP32[$57 >> 2] = 15500; //@line 8840
 HEAP8[$4 + 86 >> 0] = 0; //@line 8842
 HEAP32[$4 + 88 >> 2] = 0; //@line 8844
 $60 = HEAP32[177] | 0; //@line 8845
 HEAP32[177] = $60 + 1; //@line 8847
 HEAP32[$4 >> 2] = ($60 | 0) > 32767 ? 1 : $60; //@line 8850
 $63 = HEAP32[1685] | 0; //@line 8851
 if (!$63) {
  $$1 = 0; //@line 8854
  $113 = 0; //@line 8854
 } else {
  $66 = HEAP32[$63 + 56 >> 2] | 0; //@line 8857
  if (!$66) {
   $$1 = 1; //@line 8860
   $113 = 0; //@line 8860
  } else {
   if ((HEAP32[$63 + 8 >> 2] | 0) == ($10 | 0)) {
    HEAP32[$48 >> 2] = $66; //@line 8866
    HEAP32[$49 >> 2] = HEAP32[$63 + 60 >> 2]; //@line 8869
    $$1 = 1; //@line 8870
    $113 = $66; //@line 8870
   } else {
    $$1 = 1; //@line 8872
    $113 = 0; //@line 8872
   }
  }
 }
 $73 = HEAP32[1686] | 0; //@line 8876
 if (!$73) {
  $$1$1 = $$1; //@line 8879
  $126 = $113; //@line 8879
 } else {
  if (!$113) {
   $115 = HEAP32[$73 + 56 >> 2] | 0; //@line 8884
   if (!$115) {
    $167 = 0; //@line 8887
   } else {
    if ((HEAP32[$73 + 8 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$48 >> 2] = $115; //@line 8893
     HEAP32[$49 >> 2] = HEAP32[$73 + 60 >> 2]; //@line 8896
     $167 = $115; //@line 8897
    } else {
     $167 = 0; //@line 8899
    }
   }
  } else {
   $167 = $113; //@line 8903
  }
  $$1$1 = $$1 + 1 | 0; //@line 8906
  $126 = $167; //@line 8906
 }
 $123 = HEAP32[1687] | 0; //@line 8908
 if (!$123) {
  $$1$2 = $$1$1; //@line 8911
  $139 = $126; //@line 8911
 } else {
  if (!$126) {
   $128 = HEAP32[$123 + 56 >> 2] | 0; //@line 8916
   if (!$128) {
    $168 = 0; //@line 8919
   } else {
    if ((HEAP32[$123 + 8 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$48 >> 2] = $128; //@line 8925
     HEAP32[$49 >> 2] = HEAP32[$123 + 60 >> 2]; //@line 8928
     $168 = $128; //@line 8929
    } else {
     $168 = 0; //@line 8931
    }
   }
  } else {
   $168 = $126; //@line 8935
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 8938
  $139 = $168; //@line 8938
 }
 $136 = HEAP32[1688] | 0; //@line 8940
 if (!$136) {
  $$1$3 = $$1$2; //@line 8943
  $152 = $139; //@line 8943
 } else {
  if (!$139) {
   $141 = HEAP32[$136 + 56 >> 2] | 0; //@line 8948
   if (!$141) {
    $169 = 0; //@line 8951
   } else {
    if ((HEAP32[$136 + 8 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$48 >> 2] = $141; //@line 8957
     HEAP32[$49 >> 2] = HEAP32[$136 + 60 >> 2]; //@line 8960
     $169 = $141; //@line 8961
    } else {
     $169 = 0; //@line 8963
    }
   }
  } else {
   $169 = $139; //@line 8967
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 8970
  $152 = $169; //@line 8970
 }
 $149 = HEAP32[1689] | 0; //@line 8972
 if (!$149) {
  $$1$4 = $$1$3; //@line 8975
 } else {
  if (!$152) {
   $154 = HEAP32[$149 + 56 >> 2] | 0; //@line 8980
   if ($154 | 0) {
    if ((HEAP32[$149 + 8 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$48 >> 2] = $154; //@line 8987
     HEAP32[$49 >> 2] = HEAP32[$149 + 60 >> 2]; //@line 8990
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 8995
 }
 HEAP32[6740 + ($2 << 2) >> 2] = $4; //@line 8998
 HEAP32[$57 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 9001
 if (HEAP8[7620] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 9005
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9006
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 9009
   $110 = $ReallocAsyncCtx13 + 4 | 0; //@line 9010
   HEAP32[$110 >> 2] = $4; //@line 9011
   $111 = $ReallocAsyncCtx13 + 8 | 0; //@line 9012
   HEAP32[$111 >> 2] = $12; //@line 9013
   sp = STACKTOP; //@line 9014
   return;
  }
  ___async_unwind = 0; //@line 9017
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 9018
  $110 = $ReallocAsyncCtx13 + 4 | 0; //@line 9019
  HEAP32[$110 >> 2] = $4; //@line 9020
  $111 = $ReallocAsyncCtx13 + 8 | 0; //@line 9021
  HEAP32[$111 >> 2] = $12; //@line 9022
  sp = STACKTOP; //@line 9023
  return;
 }
 $75 = $4 + 44 | 0; //@line 9026
 $76 = HEAP32[$75 >> 2] | 0; //@line 9027
 if (!$76) {
  $90 = $20 + 12 | 0; //@line 9030
  HEAP32[$90 >> 2] = 0; //@line 9031
  $92 = $22 + 4 | 0; //@line 9033
  HEAP32[$92 >> 2] = 0; //@line 9035
  HEAP32[$92 + 4 >> 2] = 0; //@line 9038
  HEAP32[$22 >> 2] = 3; //@line 9039
  $96 = $22 + 12 | 0; //@line 9040
  HEAP32[$96 >> 2] = 712; //@line 9041
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 9042
  $97 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 100, $22) | 0; //@line 9043
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 9046
   $98 = $ReallocAsyncCtx14 + 4 | 0; //@line 9047
   HEAP32[$98 >> 2] = $4; //@line 9048
   $99 = $ReallocAsyncCtx14 + 8 | 0; //@line 9049
   HEAP32[$99 >> 2] = $4; //@line 9050
   $100 = $ReallocAsyncCtx14 + 12 | 0; //@line 9051
   HEAP32[$100 >> 2] = $12; //@line 9052
   $101 = $ReallocAsyncCtx14 + 16 | 0; //@line 9053
   HEAP32[$101 >> 2] = $96; //@line 9054
   $102 = $ReallocAsyncCtx14 + 20 | 0; //@line 9055
   HEAP32[$102 >> 2] = $90; //@line 9056
   $103 = $ReallocAsyncCtx14 + 24 | 0; //@line 9057
   HEAP32[$103 >> 2] = $22; //@line 9058
   $104 = $ReallocAsyncCtx14 + 28 | 0; //@line 9059
   HEAP32[$104 >> 2] = $26; //@line 9060
   $105 = $ReallocAsyncCtx14 + 32 | 0; //@line 9061
   HEAP32[$105 >> 2] = $24; //@line 9062
   $106 = $ReallocAsyncCtx14 + 36 | 0; //@line 9063
   HEAP32[$106 >> 2] = $20; //@line 9064
   $107 = $ReallocAsyncCtx14 + 40 | 0; //@line 9065
   HEAP32[$107 >> 2] = $8; //@line 9066
   $108 = $ReallocAsyncCtx14 + 44 | 0; //@line 9067
   HEAP32[$108 >> 2] = $75; //@line 9068
   sp = STACKTOP; //@line 9069
   return;
  }
  HEAP32[___async_retval >> 2] = $97; //@line 9073
  ___async_unwind = 0; //@line 9074
  HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 9075
  $98 = $ReallocAsyncCtx14 + 4 | 0; //@line 9076
  HEAP32[$98 >> 2] = $4; //@line 9077
  $99 = $ReallocAsyncCtx14 + 8 | 0; //@line 9078
  HEAP32[$99 >> 2] = $4; //@line 9079
  $100 = $ReallocAsyncCtx14 + 12 | 0; //@line 9080
  HEAP32[$100 >> 2] = $12; //@line 9081
  $101 = $ReallocAsyncCtx14 + 16 | 0; //@line 9082
  HEAP32[$101 >> 2] = $96; //@line 9083
  $102 = $ReallocAsyncCtx14 + 20 | 0; //@line 9084
  HEAP32[$102 >> 2] = $90; //@line 9085
  $103 = $ReallocAsyncCtx14 + 24 | 0; //@line 9086
  HEAP32[$103 >> 2] = $22; //@line 9087
  $104 = $ReallocAsyncCtx14 + 28 | 0; //@line 9088
  HEAP32[$104 >> 2] = $26; //@line 9089
  $105 = $ReallocAsyncCtx14 + 32 | 0; //@line 9090
  HEAP32[$105 >> 2] = $24; //@line 9091
  $106 = $ReallocAsyncCtx14 + 36 | 0; //@line 9092
  HEAP32[$106 >> 2] = $20; //@line 9093
  $107 = $ReallocAsyncCtx14 + 40 | 0; //@line 9094
  HEAP32[$107 >> 2] = $8; //@line 9095
  $108 = $ReallocAsyncCtx14 + 44 | 0; //@line 9096
  HEAP32[$108 >> 2] = $75; //@line 9097
  sp = STACKTOP; //@line 9098
  return;
 } else {
  $79 = HEAP32[$76 + 4 >> 2] | 0; //@line 9102
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 9103
  FUNCTION_TABLE_vii[$79 & 7]($20, $8); //@line 9104
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 9107
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 9108
   HEAP32[$80 >> 2] = $4; //@line 9109
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 9110
   HEAP32[$81 >> 2] = $12; //@line 9111
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 9112
   HEAP32[$82 >> 2] = $75; //@line 9113
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 9114
   HEAP32[$83 >> 2] = $22; //@line 9115
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 9116
   HEAP32[$84 >> 2] = $20; //@line 9117
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 9118
   HEAP32[$85 >> 2] = $24; //@line 9119
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 9120
   HEAP32[$86 >> 2] = $26; //@line 9121
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 9122
   HEAP32[$87 >> 2] = $4; //@line 9123
   $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 9124
   HEAP32[$88 >> 2] = $8; //@line 9125
   $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 9126
   HEAP32[$89 >> 2] = $75; //@line 9127
   sp = STACKTOP; //@line 9128
   return;
  }
  ___async_unwind = 0; //@line 9131
  HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 9132
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 9133
  HEAP32[$80 >> 2] = $4; //@line 9134
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 9135
  HEAP32[$81 >> 2] = $12; //@line 9136
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 9137
  HEAP32[$82 >> 2] = $75; //@line 9138
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 9139
  HEAP32[$83 >> 2] = $22; //@line 9140
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 9141
  HEAP32[$84 >> 2] = $20; //@line 9142
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 9143
  HEAP32[$85 >> 2] = $24; //@line 9144
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 9145
  HEAP32[$86 >> 2] = $26; //@line 9146
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 9147
  HEAP32[$87 >> 2] = $4; //@line 9148
  $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 9149
  HEAP32[$88 >> 2] = $8; //@line 9150
  $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 9151
  HEAP32[$89 >> 2] = $75; //@line 9152
  sp = STACKTOP; //@line 9153
  return;
 }
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$lcssa88 = 0, $$sroa_idx5$i$i = 0, $1 = 0, $11 = 0, $110 = 0, $111 = 0, $125 = 0, $128 = 0, $13 = 0, $142 = 0, $145 = 0, $15 = 0, $163 = 0, $169 = 0, $175 = 0, $184 = 0, $189 = 0, $194 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $43 = 0, $59 = 0, $62 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $89 = 0, $90 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11085
 STACKTOP = STACKTOP + 32 | 0; //@line 11086
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11086
 $1 = sp + 16 | 0; //@line 11087
 $2 = sp; //@line 11088
 $3 = HEAP32[1685] | 0; //@line 11089
 if (!$3) {
  label = 3; //@line 11092
 } else {
  if ((HEAP32[$3 + 8 >> 2] | 0) == ($0 | 0)) {
   $$lcssa88 = $3; //@line 11098
  } else {
   label = 3; //@line 11100
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1686] | 0; //@line 11105
   if ($8 | 0) {
    if ((HEAP32[$8 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $8; //@line 11112
     break;
    }
   }
   $184 = HEAP32[1687] | 0; //@line 11116
   if ($184 | 0) {
    if ((HEAP32[$184 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $184; //@line 11123
     break;
    }
   }
   $189 = HEAP32[1688] | 0; //@line 11127
   if ($189 | 0) {
    if ((HEAP32[$189 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $189; //@line 11134
     break;
    }
   }
   $194 = HEAP32[1689] | 0; //@line 11138
   if (!$194) {
    STACKTOP = sp; //@line 11141
    return;
   }
   if ((HEAP32[$194 + 8 >> 2] | 0) == ($0 | 0)) {
    $$lcssa88 = $194; //@line 11147
   } else {
    STACKTOP = sp; //@line 11149
    return;
   }
  }
 } while (0);
 $11 = HEAP32[$$lcssa88 + 56 >> 2] | 0; //@line 11154
 if (!$11) {
  STACKTOP = sp; //@line 11157
  return;
 }
 $13 = _malloc(512) | 0; //@line 11159
 if (!$13) {
  STACKTOP = sp; //@line 11162
  return;
 }
 $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11164
 $15 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 11165
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 242; //@line 11168
  HEAP32[$AsyncCtx20 + 4 >> 2] = $13; //@line 11170
  HEAP32[$AsyncCtx20 + 8 >> 2] = $1; //@line 11172
  HEAP32[$AsyncCtx20 + 12 >> 2] = $2; //@line 11174
  HEAP32[$AsyncCtx20 + 16 >> 2] = $11; //@line 11176
  sp = STACKTOP; //@line 11177
  STACKTOP = sp; //@line 11178
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 11180
 L28 : do {
  if (($15 | 0) >= 12) {
   $21 = $13 + 1 | 0; //@line 11184
   $22 = $1 + 12 | 0; //@line 11185
   $23 = $2 + 8 | 0; //@line 11186
   $$sroa_idx5$i$i = $2 + 4 | 0; //@line 11187
   $24 = $2 + 12 | 0; //@line 11188
   L30 : while (1) {
    $30 = (HEAPU8[$13 >> 0] | 0) << 8 | (HEAPU8[$21 >> 0] | 0); //@line 11195
    $31 = $30 & 65535; //@line 11196
    $32 = HEAP32[1685] | 0; //@line 11197
    if (!$32) {
     label = 12; //@line 11200
    } else {
     if (($30 | 0) == (HEAPU16[$32 + 80 >> 1] | 0 | 0)) {
      $$lcssa = $32; //@line 11207
      label = 13; //@line 11208
     } else {
      label = 12; //@line 11210
     }
    }
    do {
     if ((label | 0) == 12) {
      label = 0; //@line 11215
      $38 = HEAP32[1686] | 0; //@line 11216
      if ($38 | 0) {
       if (($30 | 0) == (HEAPU16[$38 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $38; //@line 11224
        label = 13; //@line 11225
        break;
       }
      }
      $163 = HEAP32[1687] | 0; //@line 11229
      if ($163 | 0) {
       if (($30 | 0) == (HEAPU16[$163 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $163; //@line 11237
        label = 13; //@line 11238
        break;
       }
      }
      $169 = HEAP32[1688] | 0; //@line 11242
      if ($169 | 0) {
       if (($30 | 0) == (HEAPU16[$169 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $169; //@line 11250
        label = 13; //@line 11251
        break;
       }
      }
      $175 = HEAP32[1689] | 0; //@line 11255
      if ($175 | 0) {
       if (($30 | 0) == (HEAPU16[$175 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $175; //@line 11263
        label = 13; //@line 11264
       }
      }
     }
    } while (0);
    do {
     if ((label | 0) == 13) {
      label = 0; //@line 11271
      if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
       $59 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 11277
       $$ = $59 >>> 0 > 1 ? $59 : 1; //@line 11279
       $AsyncCtx11 = _emscripten_alloc_async_context(68, sp) | 0; //@line 11283
       $62 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 8661) | 0; //@line 11284
       if (___async) {
        label = 18; //@line 11287
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11290
       $79 = $$lcssa + 64 | 0; //@line 11291
       HEAP32[$79 >> 2] = $62; //@line 11292
       $81 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($13, $31, $$lcssa + 68 | 0, $62, $$) | 0; //@line 11294
       if (($81 | 0) < 0) {
        $83 = HEAP32[$79 >> 2] | 0; //@line 11297
        if ($83 | 0) {
         __ZdaPv($83); //@line 11300
        }
        HEAP32[$79 >> 2] = 0; //@line 11302
        break;
       }
       HEAP8[$$lcssa + 86 >> 0] = $81; //@line 11307
       HEAP32[$$lcssa + 4 >> 2] = -3009; //@line 11309
       HEAP32[$$lcssa + 76 >> 2] = 0; //@line 11311
       $89 = $$lcssa + 44 | 0; //@line 11312
       $90 = HEAP32[$89 >> 2] | 0; //@line 11313
       if (!$90) {
        $110 = 0; //@line 11316
       } else {
        $94 = HEAP32[$90 + 4 >> 2] | 0; //@line 11320
        $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 11321
        FUNCTION_TABLE_vii[$94 & 7]($1, $$lcssa + 32 | 0); //@line 11322
        if (___async) {
         label = 25; //@line 11325
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 11328
        $110 = HEAP32[$89 >> 2] | 0; //@line 11330
       }
       HEAP32[$22 >> 2] = $110; //@line 11332
       $111 = HEAP32[$$lcssa >> 2] | 0; //@line 11333
       HEAP32[$23 >> 2] = 0; //@line 11334
       HEAP32[$2 >> 2] = 175; //@line 11335
       HEAP32[$$sroa_idx5$i$i >> 2] = $111; //@line 11336
       HEAP32[$24 >> 2] = 724; //@line 11337
       $AsyncCtx14 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11338
       __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 11339
       if (___async) {
        label = 28; //@line 11342
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx14 | 0); //@line 11345
       $125 = HEAP32[$24 >> 2] | 0; //@line 11346
       if ($125 | 0) {
        $128 = HEAP32[$125 + 8 >> 2] | 0; //@line 11350
        $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11351
        FUNCTION_TABLE_vi[$128 & 511]($2); //@line 11352
        if (___async) {
         label = 31; //@line 11355
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11358
       }
       $142 = HEAP32[$22 >> 2] | 0; //@line 11360
       if ($142 | 0) {
        $145 = HEAP32[$142 + 8 >> 2] | 0; //@line 11364
        $AsyncCtx7 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11365
        FUNCTION_TABLE_vi[$145 & 511]($1); //@line 11366
        if (___async) {
         label = 35; //@line 11369
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11372
       }
      }
     }
    } while (0);
    $AsyncCtx17 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11377
    $43 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 11378
    if (___async) {
     label = 15; //@line 11381
     break;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11384
    if (($43 | 0) < 12) {
     break L28;
    }
   }
   if ((label | 0) == 15) {
    HEAP32[$AsyncCtx17 >> 2] = 243; //@line 11391
    HEAP32[$AsyncCtx17 + 4 >> 2] = $24; //@line 11393
    HEAP32[$AsyncCtx17 + 8 >> 2] = $13; //@line 11395
    HEAP32[$AsyncCtx17 + 12 >> 2] = $21; //@line 11397
    HEAP32[$AsyncCtx17 + 16 >> 2] = $22; //@line 11399
    HEAP32[$AsyncCtx17 + 20 >> 2] = $2; //@line 11401
    HEAP32[$AsyncCtx17 + 24 >> 2] = $1; //@line 11403
    HEAP32[$AsyncCtx17 + 28 >> 2] = $22; //@line 11405
    HEAP32[$AsyncCtx17 + 32 >> 2] = $23; //@line 11407
    HEAP32[$AsyncCtx17 + 36 >> 2] = $2; //@line 11409
    HEAP32[$AsyncCtx17 + 40 >> 2] = $$sroa_idx5$i$i; //@line 11411
    HEAP32[$AsyncCtx17 + 44 >> 2] = $1; //@line 11413
    HEAP32[$AsyncCtx17 + 48 >> 2] = $2; //@line 11415
    HEAP32[$AsyncCtx17 + 52 >> 2] = $11; //@line 11417
    sp = STACKTOP; //@line 11418
    STACKTOP = sp; //@line 11419
    return;
   } else if ((label | 0) == 18) {
    HEAP32[$AsyncCtx11 >> 2] = 244; //@line 11422
    HEAP32[$AsyncCtx11 + 4 >> 2] = $24; //@line 11424
    HEAP32[$AsyncCtx11 + 8 >> 2] = $13; //@line 11426
    HEAP32[$AsyncCtx11 + 12 >> 2] = $21; //@line 11428
    HEAP32[$AsyncCtx11 + 16 >> 2] = $22; //@line 11430
    HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 11432
    HEAP32[$AsyncCtx11 + 24 >> 2] = $1; //@line 11434
    HEAP32[$AsyncCtx11 + 28 >> 2] = $22; //@line 11436
    HEAP32[$AsyncCtx11 + 32 >> 2] = $23; //@line 11438
    HEAP32[$AsyncCtx11 + 36 >> 2] = $2; //@line 11440
    HEAP32[$AsyncCtx11 + 40 >> 2] = $$sroa_idx5$i$i; //@line 11442
    HEAP32[$AsyncCtx11 + 44 >> 2] = $1; //@line 11444
    HEAP32[$AsyncCtx11 + 48 >> 2] = $2; //@line 11446
    HEAP32[$AsyncCtx11 + 52 >> 2] = $11; //@line 11448
    HEAP32[$AsyncCtx11 + 56 >> 2] = $$lcssa; //@line 11450
    HEAP16[$AsyncCtx11 + 60 >> 1] = $31; //@line 11452
    HEAP32[$AsyncCtx11 + 64 >> 2] = $$; //@line 11454
    sp = STACKTOP; //@line 11455
    STACKTOP = sp; //@line 11456
    return;
   } else if ((label | 0) == 25) {
    HEAP32[$AsyncCtx >> 2] = 245; //@line 11459
    HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 11461
    HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 11463
    HEAP32[$AsyncCtx + 12 >> 2] = $21; //@line 11465
    HEAP32[$AsyncCtx + 16 >> 2] = $89; //@line 11467
    HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 11469
    HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 11471
    HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 11473
    HEAP32[$AsyncCtx + 32 >> 2] = $22; //@line 11475
    HEAP32[$AsyncCtx + 36 >> 2] = $$lcssa; //@line 11477
    HEAP32[$AsyncCtx + 40 >> 2] = $23; //@line 11479
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 11481
    HEAP32[$AsyncCtx + 48 >> 2] = $$sroa_idx5$i$i; //@line 11483
    HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 11485
    HEAP32[$AsyncCtx + 56 >> 2] = $2; //@line 11487
    HEAP32[$AsyncCtx + 60 >> 2] = $11; //@line 11489
    sp = STACKTOP; //@line 11490
    STACKTOP = sp; //@line 11491
    return;
   } else if ((label | 0) == 28) {
    HEAP32[$AsyncCtx14 >> 2] = 246; //@line 11494
    HEAP32[$AsyncCtx14 + 4 >> 2] = $24; //@line 11496
    HEAP32[$AsyncCtx14 + 8 >> 2] = $13; //@line 11498
    HEAP32[$AsyncCtx14 + 12 >> 2] = $21; //@line 11500
    HEAP32[$AsyncCtx14 + 16 >> 2] = $22; //@line 11502
    HEAP32[$AsyncCtx14 + 20 >> 2] = $2; //@line 11504
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 11506
    HEAP32[$AsyncCtx14 + 28 >> 2] = $22; //@line 11508
    HEAP32[$AsyncCtx14 + 32 >> 2] = $23; //@line 11510
    HEAP32[$AsyncCtx14 + 36 >> 2] = $2; //@line 11512
    HEAP32[$AsyncCtx14 + 40 >> 2] = $$sroa_idx5$i$i; //@line 11514
    HEAP32[$AsyncCtx14 + 44 >> 2] = $1; //@line 11516
    HEAP32[$AsyncCtx14 + 48 >> 2] = $2; //@line 11518
    HEAP32[$AsyncCtx14 + 52 >> 2] = $11; //@line 11520
    sp = STACKTOP; //@line 11521
    STACKTOP = sp; //@line 11522
    return;
   } else if ((label | 0) == 31) {
    HEAP32[$AsyncCtx3 >> 2] = 247; //@line 11525
    HEAP32[$AsyncCtx3 + 4 >> 2] = $24; //@line 11527
    HEAP32[$AsyncCtx3 + 8 >> 2] = $13; //@line 11529
    HEAP32[$AsyncCtx3 + 12 >> 2] = $21; //@line 11531
    HEAP32[$AsyncCtx3 + 16 >> 2] = $22; //@line 11533
    HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 11535
    HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 11537
    HEAP32[$AsyncCtx3 + 28 >> 2] = $22; //@line 11539
    HEAP32[$AsyncCtx3 + 32 >> 2] = $23; //@line 11541
    HEAP32[$AsyncCtx3 + 36 >> 2] = $2; //@line 11543
    HEAP32[$AsyncCtx3 + 40 >> 2] = $$sroa_idx5$i$i; //@line 11545
    HEAP32[$AsyncCtx3 + 44 >> 2] = $1; //@line 11547
    HEAP32[$AsyncCtx3 + 48 >> 2] = $2; //@line 11549
    HEAP32[$AsyncCtx3 + 52 >> 2] = $11; //@line 11551
    sp = STACKTOP; //@line 11552
    STACKTOP = sp; //@line 11553
    return;
   } else if ((label | 0) == 35) {
    HEAP32[$AsyncCtx7 >> 2] = 248; //@line 11556
    HEAP32[$AsyncCtx7 + 4 >> 2] = $24; //@line 11558
    HEAP32[$AsyncCtx7 + 8 >> 2] = $13; //@line 11560
    HEAP32[$AsyncCtx7 + 12 >> 2] = $21; //@line 11562
    HEAP32[$AsyncCtx7 + 16 >> 2] = $22; //@line 11564
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 11566
    HEAP32[$AsyncCtx7 + 24 >> 2] = $1; //@line 11568
    HEAP32[$AsyncCtx7 + 28 >> 2] = $22; //@line 11570
    HEAP32[$AsyncCtx7 + 32 >> 2] = $23; //@line 11572
    HEAP32[$AsyncCtx7 + 36 >> 2] = $2; //@line 11574
    HEAP32[$AsyncCtx7 + 40 >> 2] = $$sroa_idx5$i$i; //@line 11576
    HEAP32[$AsyncCtx7 + 44 >> 2] = $1; //@line 11578
    HEAP32[$AsyncCtx7 + 48 >> 2] = $2; //@line 11580
    HEAP32[$AsyncCtx7 + 52 >> 2] = $11; //@line 11582
    sp = STACKTOP; //@line 11583
    STACKTOP = sp; //@line 11584
    return;
   }
  }
 } while (0);
 _free($13); //@line 11588
 STACKTOP = sp; //@line 11589
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_73($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy16 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $97 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22992
 STACKTOP = STACKTOP + 48 | 0; //@line 22993
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 22993
 $$byval_copy16 = sp + 20 | 0; //@line 22994
 $$byval_copy = sp; //@line 22995
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22997
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22999
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23001
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23003
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23005
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23007
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23009
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23011
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23013
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23015
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23017
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23019
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23021
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  HEAP8[$20 >> 0] = (HEAP8[$20 >> 0] | 0) + 1 << 24 >> 24; //@line 23028
  $97 = HEAP8[$18 >> 0] | 0; //@line 23029
  if ($97 << 24 >> 24) {
   HEAP8[$18 >> 0] = $97 + -1 << 24 >> 24; //@line 23033
  }
  _free($2); //@line 23035
  HEAP32[$22 + 76 >> 2] = 5e3; //@line 23037
  STACKTOP = sp; //@line 23038
  return;
 }
 HEAP8[$12 >> 0] = (HEAP8[$12 >> 0] | 0) + 1 << 24 >> 24; //@line 23042
 HEAP32[$14 >> 2] = 0; //@line 23043
 HEAP32[$14 + 4 >> 2] = 0; //@line 23043
 HEAP32[$14 + 8 >> 2] = 0; //@line 23043
 HEAP32[$14 + 12 >> 2] = 0; //@line 23043
 HEAP32[$14 + 16 >> 2] = 0; //@line 23043
 HEAP32[$$byval_copy16 >> 2] = HEAP32[$16 >> 2]; //@line 23044
 HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$16 + 4 >> 2]; //@line 23044
 HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$16 + 8 >> 2]; //@line 23044
 HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$16 + 12 >> 2]; //@line 23044
 HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$16 + 16 >> 2]; //@line 23044
 __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy16, 0); //@line 23045
 do {
  if (HEAP8[$18 >> 0] | 0) {
   $28 = HEAP32[$26 >> 2] | 0; //@line 23050
   $29 = HEAP8[$12 >> 0] | 0; //@line 23051
   if (($29 & 255) > 9) {
    if (!(HEAP8[$20 >> 0] | 0)) {
     break;
    }
    HEAP8[$12 >> 0] = 0; //@line 23059
    HEAP8[$20 >> 0] = 0; //@line 23060
    $35 = 0; //@line 23061
   } else {
    if (($29 & 255) < 5) {
     $35 = $29; //@line 23065
    } else {
     $56 = 608 + ((($29 & 255) + -5 | 0) * 20 | 0) | 0; //@line 23069
     HEAP32[$$byval_copy >> 2] = HEAP32[$56 >> 2]; //@line 23070
     HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$56 + 4 >> 2]; //@line 23070
     HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$56 + 8 >> 2]; //@line 23070
     HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$56 + 12 >> 2]; //@line 23070
     HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$56 + 16 >> 2]; //@line 23070
     __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy); //@line 23071
     __ZN13SocketAddress8set_portEt($6, 53); //@line 23072
     $75 = HEAP32[$8 >> 2] | 0; //@line 23073
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 23074
     $76 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($75, $6, $2, $10) | 0; //@line 23075
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 241; //@line 23078
      $77 = $ReallocAsyncCtx12 + 4 | 0; //@line 23079
      HEAP32[$77 >> 2] = $2; //@line 23080
      $78 = $ReallocAsyncCtx12 + 8 | 0; //@line 23081
      HEAP32[$78 >> 2] = $4; //@line 23082
      $79 = $ReallocAsyncCtx12 + 12 | 0; //@line 23083
      HEAP32[$79 >> 2] = $6; //@line 23084
      $80 = $ReallocAsyncCtx12 + 16 | 0; //@line 23085
      HEAP32[$80 >> 2] = $8; //@line 23086
      $81 = $ReallocAsyncCtx12 + 20 | 0; //@line 23087
      HEAP32[$81 >> 2] = $10; //@line 23088
      $82 = $ReallocAsyncCtx12 + 24 | 0; //@line 23089
      HEAP32[$82 >> 2] = $12; //@line 23090
      $83 = $ReallocAsyncCtx12 + 28 | 0; //@line 23091
      HEAP32[$83 >> 2] = $14; //@line 23092
      $84 = $ReallocAsyncCtx12 + 32 | 0; //@line 23093
      HEAP32[$84 >> 2] = $16; //@line 23094
      $85 = $ReallocAsyncCtx12 + 36 | 0; //@line 23095
      HEAP32[$85 >> 2] = $18; //@line 23096
      $86 = $ReallocAsyncCtx12 + 40 | 0; //@line 23097
      HEAP32[$86 >> 2] = $20; //@line 23098
      $87 = $ReallocAsyncCtx12 + 44 | 0; //@line 23099
      HEAP32[$87 >> 2] = $22; //@line 23100
      $88 = $ReallocAsyncCtx12 + 48 | 0; //@line 23101
      HEAP32[$88 >> 2] = $24; //@line 23102
      $89 = $ReallocAsyncCtx12 + 52 | 0; //@line 23103
      HEAP32[$89 >> 2] = $26; //@line 23104
      sp = STACKTOP; //@line 23105
      STACKTOP = sp; //@line 23106
      return;
     }
     HEAP32[___async_retval >> 2] = $76; //@line 23109
     ___async_unwind = 0; //@line 23110
     HEAP32[$ReallocAsyncCtx12 >> 2] = 241; //@line 23111
     $77 = $ReallocAsyncCtx12 + 4 | 0; //@line 23112
     HEAP32[$77 >> 2] = $2; //@line 23113
     $78 = $ReallocAsyncCtx12 + 8 | 0; //@line 23114
     HEAP32[$78 >> 2] = $4; //@line 23115
     $79 = $ReallocAsyncCtx12 + 12 | 0; //@line 23116
     HEAP32[$79 >> 2] = $6; //@line 23117
     $80 = $ReallocAsyncCtx12 + 16 | 0; //@line 23118
     HEAP32[$80 >> 2] = $8; //@line 23119
     $81 = $ReallocAsyncCtx12 + 20 | 0; //@line 23120
     HEAP32[$81 >> 2] = $10; //@line 23121
     $82 = $ReallocAsyncCtx12 + 24 | 0; //@line 23122
     HEAP32[$82 >> 2] = $12; //@line 23123
     $83 = $ReallocAsyncCtx12 + 28 | 0; //@line 23124
     HEAP32[$83 >> 2] = $14; //@line 23125
     $84 = $ReallocAsyncCtx12 + 32 | 0; //@line 23126
     HEAP32[$84 >> 2] = $16; //@line 23127
     $85 = $ReallocAsyncCtx12 + 36 | 0; //@line 23128
     HEAP32[$85 >> 2] = $18; //@line 23129
     $86 = $ReallocAsyncCtx12 + 40 | 0; //@line 23130
     HEAP32[$86 >> 2] = $20; //@line 23131
     $87 = $ReallocAsyncCtx12 + 44 | 0; //@line 23132
     HEAP32[$87 >> 2] = $22; //@line 23133
     $88 = $ReallocAsyncCtx12 + 48 | 0; //@line 23134
     HEAP32[$88 >> 2] = $24; //@line 23135
     $89 = $ReallocAsyncCtx12 + 52 | 0; //@line 23136
     HEAP32[$89 >> 2] = $26; //@line 23137
     sp = STACKTOP; //@line 23138
     STACKTOP = sp; //@line 23139
     return;
    }
   }
   $38 = HEAP32[(HEAP32[$28 >> 2] | 0) + 28 >> 2] | 0; //@line 23145
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 23146
   $39 = FUNCTION_TABLE_iiii[$38 & 31]($28, $35 & 255, $6) | 0; //@line 23147
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 235; //@line 23150
    $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 23151
    HEAP32[$40 >> 2] = $2; //@line 23152
    $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 23153
    HEAP32[$41 >> 2] = $4; //@line 23154
    $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 23155
    HEAP32[$42 >> 2] = $6; //@line 23156
    $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 23157
    HEAP32[$43 >> 2] = $8; //@line 23158
    $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 23159
    HEAP32[$44 >> 2] = $10; //@line 23160
    $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 23161
    HEAP32[$45 >> 2] = $12; //@line 23162
    $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 23163
    HEAP32[$46 >> 2] = $14; //@line 23164
    $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 23165
    HEAP32[$47 >> 2] = $16; //@line 23166
    $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 23167
    HEAP32[$48 >> 2] = $18; //@line 23168
    $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 23169
    HEAP32[$49 >> 2] = $20; //@line 23170
    $50 = $ReallocAsyncCtx4 + 44 | 0; //@line 23171
    HEAP32[$50 >> 2] = $22; //@line 23172
    $51 = $ReallocAsyncCtx4 + 48 | 0; //@line 23173
    HEAP32[$51 >> 2] = $24; //@line 23174
    $52 = $ReallocAsyncCtx4 + 52 | 0; //@line 23175
    HEAP32[$52 >> 2] = $26; //@line 23176
    sp = STACKTOP; //@line 23177
    STACKTOP = sp; //@line 23178
    return;
   }
   HEAP32[___async_retval >> 2] = $39; //@line 23181
   ___async_unwind = 0; //@line 23182
   HEAP32[$ReallocAsyncCtx4 >> 2] = 235; //@line 23183
   $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 23184
   HEAP32[$40 >> 2] = $2; //@line 23185
   $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 23186
   HEAP32[$41 >> 2] = $4; //@line 23187
   $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 23188
   HEAP32[$42 >> 2] = $6; //@line 23189
   $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 23190
   HEAP32[$43 >> 2] = $8; //@line 23191
   $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 23192
   HEAP32[$44 >> 2] = $10; //@line 23193
   $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 23194
   HEAP32[$45 >> 2] = $12; //@line 23195
   $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 23196
   HEAP32[$46 >> 2] = $14; //@line 23197
   $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 23198
   HEAP32[$47 >> 2] = $16; //@line 23199
   $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 23200
   HEAP32[$48 >> 2] = $18; //@line 23201
   $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 23202
   HEAP32[$49 >> 2] = $20; //@line 23203
   $50 = $ReallocAsyncCtx4 + 44 | 0; //@line 23204
   HEAP32[$50 >> 2] = $22; //@line 23205
   $51 = $ReallocAsyncCtx4 + 48 | 0; //@line 23206
   HEAP32[$51 >> 2] = $24; //@line 23207
   $52 = $ReallocAsyncCtx4 + 52 | 0; //@line 23208
   HEAP32[$52 >> 2] = $26; //@line 23209
   sp = STACKTOP; //@line 23210
   STACKTOP = sp; //@line 23211
   return;
  }
 } while (0);
 $57 = $22 + 28 | 0; //@line 23214
 $58 = HEAP32[$57 >> 2] | 0; //@line 23215
 if (!$58) {
  $69 = $24 + 12 | 0; //@line 23218
  HEAP32[$69 >> 2] = 0; //@line 23219
  $70 = HEAP32[$22 >> 2] | 0; //@line 23220
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 23221
  __ZL28nsapi_dns_query_async_deletei($70); //@line 23222
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 237; //@line 23225
   $71 = $ReallocAsyncCtx8 + 4 | 0; //@line 23226
   HEAP32[$71 >> 2] = $69; //@line 23227
   $72 = $ReallocAsyncCtx8 + 8 | 0; //@line 23228
   HEAP32[$72 >> 2] = $24; //@line 23229
   $73 = $ReallocAsyncCtx8 + 12 | 0; //@line 23230
   HEAP32[$73 >> 2] = $2; //@line 23231
   $74 = $ReallocAsyncCtx8 + 16 | 0; //@line 23232
   HEAP32[$74 >> 2] = $4; //@line 23233
   sp = STACKTOP; //@line 23234
   STACKTOP = sp; //@line 23235
   return;
  }
  ___async_unwind = 0; //@line 23237
  HEAP32[$ReallocAsyncCtx8 >> 2] = 237; //@line 23238
  $71 = $ReallocAsyncCtx8 + 4 | 0; //@line 23239
  HEAP32[$71 >> 2] = $69; //@line 23240
  $72 = $ReallocAsyncCtx8 + 8 | 0; //@line 23241
  HEAP32[$72 >> 2] = $24; //@line 23242
  $73 = $ReallocAsyncCtx8 + 12 | 0; //@line 23243
  HEAP32[$73 >> 2] = $2; //@line 23244
  $74 = $ReallocAsyncCtx8 + 16 | 0; //@line 23245
  HEAP32[$74 >> 2] = $4; //@line 23246
  sp = STACKTOP; //@line 23247
  STACKTOP = sp; //@line 23248
  return;
 } else {
  $62 = HEAP32[$58 + 4 >> 2] | 0; //@line 23252
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 23253
  FUNCTION_TABLE_vii[$62 & 7]($24, $22 + 16 | 0); //@line 23254
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 236; //@line 23257
   $63 = $ReallocAsyncCtx5 + 4 | 0; //@line 23258
   HEAP32[$63 >> 2] = $57; //@line 23259
   $64 = $ReallocAsyncCtx5 + 8 | 0; //@line 23260
   HEAP32[$64 >> 2] = $24; //@line 23261
   $65 = $ReallocAsyncCtx5 + 12 | 0; //@line 23262
   HEAP32[$65 >> 2] = $22; //@line 23263
   $66 = $ReallocAsyncCtx5 + 16 | 0; //@line 23264
   HEAP32[$66 >> 2] = $24; //@line 23265
   $67 = $ReallocAsyncCtx5 + 20 | 0; //@line 23266
   HEAP32[$67 >> 2] = $2; //@line 23267
   $68 = $ReallocAsyncCtx5 + 24 | 0; //@line 23268
   HEAP32[$68 >> 2] = $4; //@line 23269
   sp = STACKTOP; //@line 23270
   STACKTOP = sp; //@line 23271
   return;
  }
  ___async_unwind = 0; //@line 23273
  HEAP32[$ReallocAsyncCtx5 >> 2] = 236; //@line 23274
  $63 = $ReallocAsyncCtx5 + 4 | 0; //@line 23275
  HEAP32[$63 >> 2] = $57; //@line 23276
  $64 = $ReallocAsyncCtx5 + 8 | 0; //@line 23277
  HEAP32[$64 >> 2] = $24; //@line 23278
  $65 = $ReallocAsyncCtx5 + 12 | 0; //@line 23279
  HEAP32[$65 >> 2] = $22; //@line 23280
  $66 = $ReallocAsyncCtx5 + 16 | 0; //@line 23281
  HEAP32[$66 >> 2] = $24; //@line 23282
  $67 = $ReallocAsyncCtx5 + 20 | 0; //@line 23283
  HEAP32[$67 >> 2] = $2; //@line 23284
  $68 = $ReallocAsyncCtx5 + 24 | 0; //@line 23285
  HEAP32[$68 >> 2] = $4; //@line 23286
  sp = STACKTOP; //@line 23287
  STACKTOP = sp; //@line 23288
  return;
 }
}
function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre = 0, $$pre$phi201Z2D = 0.0, $104 = 0, $105 = 0, $106 = 0, $116 = 0, $117 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $143 = 0, $153 = 0, $155 = 0, $166 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $193 = 0.0, $194 = 0, $207 = 0.0, $21 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $65 = 0.0, $7 = 0, $72 = 0, $74 = 0, $83 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, $or$cond168 = 0, label = 0, $105$looptemp = 0;
 $5 = $0 + 4 | 0; //@line 7915
 $6 = HEAP32[$5 >> 2] | 0; //@line 7916
 $7 = $0 + 100 | 0; //@line 7917
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1; //@line 7922
  $$0 = HEAPU8[$6 >> 0] | 0; //@line 7925
  $$0142 = 0; //@line 7925
 } else {
  $$0 = ___shgetc($0) | 0; //@line 7928
  $$0142 = 0; //@line 7928
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8; //@line 7933
    break L4;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0146 = 0; //@line 7941
    $$0148 = 0; //@line 7941
    $$0152 = 1.0; //@line 7941
    $$0155 = 0.0; //@line 7941
    $$0159 = 0; //@line 7941
    $$2 = $$0; //@line 7941
    $$2144 = $$0142; //@line 7941
    $51 = 0; //@line 7941
    $53 = 0; //@line 7941
    $96 = 0; //@line 7941
    $98 = 0; //@line 7941
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0; //@line 7945
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1; //@line 7950
   $$0 = HEAPU8[$14 >> 0] | 0; //@line 7953
   $$0142 = 1; //@line 7953
   continue;
  } else {
   $$0 = ___shgetc($0) | 0; //@line 7957
   $$0142 = 1; //@line 7957
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0; //@line 7962
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1; //@line 7967
   $$1$ph = HEAPU8[$21 >> 0] | 0; //@line 7970
  } else {
   $$1$ph = ___shgetc($0) | 0; //@line 7973
  }
  if (($$1$ph | 0) == 48) {
   $36 = 0; //@line 7977
   $37 = 0; //@line 7977
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0; //@line 7979
    if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $29 + 1; //@line 7984
     $41 = HEAPU8[$29 >> 0] | 0; //@line 7987
    } else {
     $41 = ___shgetc($0) | 0; //@line 7990
    }
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0; //@line 7992
    $39 = tempRet0; //@line 7993
    if (($41 | 0) == 48) {
     $36 = $38; //@line 7996
     $37 = $39; //@line 7996
    } else {
     $$0146 = 1; //@line 7998
     $$0148 = 0; //@line 7998
     $$0152 = 1.0; //@line 7998
     $$0155 = 0.0; //@line 7998
     $$0159 = 0; //@line 7998
     $$2 = $41; //@line 7998
     $$2144 = 1; //@line 7998
     $51 = 0; //@line 7998
     $53 = 0; //@line 7998
     $96 = $38; //@line 7998
     $98 = $39; //@line 7998
     break;
    }
   }
  } else {
   $$0146 = 1; //@line 8003
   $$0148 = 0; //@line 8003
   $$0152 = 1.0; //@line 8003
   $$0155 = 0.0; //@line 8003
   $$0159 = 0; //@line 8003
   $$2 = $$1$ph; //@line 8003
   $$2144 = $$0142; //@line 8003
   $51 = 0; //@line 8003
   $53 = 0; //@line 8003
   $96 = 0; //@line 8003
   $98 = 0; //@line 8003
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0; //@line 8007
  $$pre = $$2 | 32; //@line 8009
  if ($42 >>> 0 < 10) {
   label = 20; //@line 8011
  } else {
   $46 = ($$2 | 0) == 46; //@line 8015
   if (!($46 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$2$lcssa = $$2; //@line 8018
    break;
   }
   if ($46) {
    if (!$$0146) {
     $$1147 = 1; //@line 8024
     $$2150 = $$0148; //@line 8024
     $$2154 = $$0152; //@line 8024
     $$2157 = $$0155; //@line 8024
     $$2161 = $$0159; //@line 8024
     $$3145 = $$2144; //@line 8024
     $211 = $53; //@line 8024
     $212 = $51; //@line 8024
     $213 = $53; //@line 8024
     $214 = $51; //@line 8024
    } else {
     $$2$lcssa = 46; //@line 8026
     break;
    }
   } else {
    label = 20; //@line 8030
   }
  }
  if ((label | 0) == 20) {
   label = 0; //@line 8034
   $$0133 = ($$2 | 0) > 57 ? $$pre + -87 | 0 : $42; //@line 8037
   do {
    if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
     $$1149 = $$0148; //@line 8047
     $$1153 = $$0152; //@line 8047
     $$1156 = $$0155; //@line 8047
     $$1160 = $$0133 + ($$0159 << 4) | 0; //@line 8047
    } else {
     if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
      $65 = $$0152 * .0625; //@line 8056
      $$1149 = $$0148; //@line 8059
      $$1153 = $65; //@line 8059
      $$1156 = $$0155 + $65 * +($$0133 | 0); //@line 8059
      $$1160 = $$0159; //@line 8059
      break;
     } else {
      $or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0; //@line 8064
      $$1149 = $or$cond ? $$0148 : 1; //@line 8069
      $$1153 = $$0152; //@line 8069
      $$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5; //@line 8069
      $$1160 = $$0159; //@line 8069
      break;
     }
    }
   } while (0);
   $72 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0; //@line 8074
   $$1147 = $$0146; //@line 8076
   $$2150 = $$1149; //@line 8076
   $$2154 = $$1153; //@line 8076
   $$2157 = $$1156; //@line 8076
   $$2161 = $$1160; //@line 8076
   $$3145 = 1; //@line 8076
   $211 = $96; //@line 8076
   $212 = $98; //@line 8076
   $213 = $72; //@line 8076
   $214 = tempRet0; //@line 8076
  }
  $74 = HEAP32[$5 >> 2] | 0; //@line 8078
  if ($74 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $74 + 1; //@line 8083
   $$0146 = $$1147; //@line 8086
   $$0148 = $$2150; //@line 8086
   $$0152 = $$2154; //@line 8086
   $$0155 = $$2157; //@line 8086
   $$0159 = $$2161; //@line 8086
   $$2 = HEAPU8[$74 >> 0] | 0; //@line 8086
   $$2144 = $$3145; //@line 8086
   $51 = $214; //@line 8086
   $53 = $213; //@line 8086
   $96 = $211; //@line 8086
   $98 = $212; //@line 8086
   continue;
  } else {
   $$0146 = $$1147; //@line 8090
   $$0148 = $$2150; //@line 8090
   $$0152 = $$2154; //@line 8090
   $$0155 = $$2157; //@line 8090
   $$0159 = $$2161; //@line 8090
   $$2 = ___shgetc($0) | 0; //@line 8090
   $$2144 = $$3145; //@line 8090
   $51 = $214; //@line 8090
   $53 = $213; //@line 8090
   $96 = $211; //@line 8090
   $98 = $212; //@line 8090
   continue;
  }
 }
 do {
  if (!$$2144) {
   $83 = (HEAP32[$7 >> 2] | 0) == 0; //@line 8098
   if (!$83) {
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8102
   }
   if (!$4) {
    ___shlim($0, 0); //@line 8106
   } else {
    if (!$83) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8111
    }
    if (!(($$0146 | 0) == 0 | $83)) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8118
    }
   }
   $$0165 = +($3 | 0) * 0.0; //@line 8123
  } else {
   $94 = ($$0146 | 0) == 0; //@line 8125
   $95 = $94 ? $53 : $96; //@line 8126
   $97 = $94 ? $51 : $98; //@line 8127
   if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
    $$3162183 = $$0159; //@line 8134
    $105 = $53; //@line 8134
    $106 = $51; //@line 8134
    while (1) {
     $104 = $$3162183 << 4; //@line 8136
     $105$looptemp = $105;
     $105 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 8137
     if (!(($106 | 0) < 0 | ($106 | 0) == 0 & $105$looptemp >>> 0 < 7)) {
      $$3162$lcssa = $104; //@line 8147
      break;
     } else {
      $$3162183 = $104; //@line 8145
      $106 = tempRet0; //@line 8145
     }
    }
   } else {
    $$3162$lcssa = $$0159; //@line 8152
   }
   if (($$2$lcssa | 32 | 0) == 112) {
    $116 = _scanexp($0, $4) | 0; //@line 8157
    $117 = tempRet0; //@line 8158
    if (($116 | 0) == 0 & ($117 | 0) == -2147483648) {
     if (!$4) {
      ___shlim($0, 0); //@line 8165
      $$0165 = 0.0; //@line 8166
      break;
     }
     if (!(HEAP32[$7 >> 2] | 0)) {
      $134 = 0; //@line 8172
      $135 = 0; //@line 8172
     } else {
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8176
      $134 = 0; //@line 8177
      $135 = 0; //@line 8177
     }
    } else {
     $134 = $116; //@line 8180
     $135 = $117; //@line 8180
    }
   } else {
    if (!(HEAP32[$7 >> 2] | 0)) {
     $134 = 0; //@line 8186
     $135 = 0; //@line 8186
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8190
     $134 = 0; //@line 8191
     $135 = 0; //@line 8191
    }
   }
   $130 = _bitshift64Shl($95 | 0, $97 | 0, 2) | 0; //@line 8194
   $132 = _i64Add($130 | 0, tempRet0 | 0, -32, -1) | 0; //@line 8196
   $136 = _i64Add($132 | 0, tempRet0 | 0, $134 | 0, $135 | 0) | 0; //@line 8198
   $137 = tempRet0; //@line 8199
   if (!$$3162$lcssa) {
    $$0165 = +($3 | 0) * 0.0; //@line 8204
    break;
   }
   $141 = 0 - $2 | 0; //@line 8207
   $143 = (($141 | 0) < 0) << 31 >> 31; //@line 8209
   if (($137 | 0) > ($143 | 0) | ($137 | 0) == ($143 | 0) & $136 >>> 0 > $141 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8217
    $$0165 = +($3 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8221
    break;
   }
   $153 = $2 + -106 | 0; //@line 8224
   $155 = (($153 | 0) < 0) << 31 >> 31; //@line 8226
   if (($137 | 0) < ($155 | 0) | ($137 | 0) == ($155 | 0) & $136 >>> 0 < $153 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8234
    $$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8238
    break;
   }
   if (($$3162$lcssa | 0) > -1) {
    $$3158179 = $$0155; //@line 8243
    $$4163178 = $$3162$lcssa; //@line 8243
    $170 = $136; //@line 8243
    $171 = $137; //@line 8243
    while (1) {
     $166 = !($$3158179 >= .5); //@line 8245
     $$5164 = $$4163178 << 1 | ($166 ^ 1) & 1; //@line 8250
     $$4 = $$3158179 + ($166 ? $$3158179 : $$3158179 + -1.0); //@line 8252
     $172 = _i64Add($170 | 0, $171 | 0, -1, -1) | 0; //@line 8253
     $173 = tempRet0; //@line 8254
     if (($$5164 | 0) > -1) {
      $$3158179 = $$4; //@line 8257
      $$4163178 = $$5164; //@line 8257
      $170 = $172; //@line 8257
      $171 = $173; //@line 8257
     } else {
      $$3158$lcssa = $$4; //@line 8259
      $$4163$lcssa = $$5164; //@line 8259
      $181 = $172; //@line 8259
      $182 = $173; //@line 8259
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155; //@line 8264
    $$4163$lcssa = $$3162$lcssa; //@line 8264
    $181 = $136; //@line 8264
    $182 = $137; //@line 8264
   }
   $176 = (($1 | 0) < 0) << 31 >> 31; //@line 8267
   $179 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0; //@line 8270
   $183 = _i64Add($179 | 0, tempRet0 | 0, $181 | 0, $182 | 0) | 0; //@line 8272
   $184 = tempRet0; //@line 8273
   if (($184 | 0) < ($176 | 0) | ($184 | 0) == ($176 | 0) & $183 >>> 0 < $1 >>> 0) {
    if (($183 | 0) > 0) {
     $$0166 = $183; //@line 8282
     label = 59; //@line 8283
    } else {
     $$0166170 = 0; //@line 8285
     $194 = 84; //@line 8285
     label = 61; //@line 8286
    }
   } else {
    $$0166 = $1; //@line 8289
    label = 59; //@line 8290
   }
   if ((label | 0) == 59) {
    if (($$0166 | 0) < 53) {
     $$0166170 = $$0166; //@line 8296
     $194 = 84 - $$0166 | 0; //@line 8296
     label = 61; //@line 8297
    } else {
     $$0151 = 0.0; //@line 8300
     $$0166169 = $$0166; //@line 8300
     $$pre$phi201Z2D = +($3 | 0); //@line 8300
    }
   }
   if ((label | 0) == 61) {
    $193 = +($3 | 0); //@line 8304
    $$0151 = +_copysignl(+_scalbn(1.0, $194), $193); //@line 8307
    $$0166169 = $$0166170; //@line 8307
    $$pre$phi201Z2D = $193; //@line 8307
   }
   $or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32); //@line 8314
   $207 = ($or$cond168 ? 0.0 : $$3158$lcssa) * $$pre$phi201Z2D + ($$0151 + $$pre$phi201Z2D * +(($$4163$lcssa + ($or$cond168 & 1) | 0) >>> 0)) - $$0151; //@line 8323
   if (!($207 != 0.0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8327
   }
   $$0165 = +_scalbnl($207, $181); //@line 8330
  }
 } while (0);
 return +$$0165;
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12956
 STACKTOP = STACKTOP + 1056 | 0; //@line 12957
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 12957
 $2 = sp + 1024 | 0; //@line 12958
 $3 = sp; //@line 12959
 HEAP32[$2 >> 2] = 0; //@line 12960
 HEAP32[$2 + 4 >> 2] = 0; //@line 12960
 HEAP32[$2 + 8 >> 2] = 0; //@line 12960
 HEAP32[$2 + 12 >> 2] = 0; //@line 12960
 HEAP32[$2 + 16 >> 2] = 0; //@line 12960
 HEAP32[$2 + 20 >> 2] = 0; //@line 12960
 HEAP32[$2 + 24 >> 2] = 0; //@line 12960
 HEAP32[$2 + 28 >> 2] = 0; //@line 12960
 $4 = HEAP8[$1 >> 0] | 0; //@line 12961
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 12965
   $$0185$ph$lcssa327 = -1; //@line 12965
   $$0187219$ph325326 = 0; //@line 12965
   $$1176$ph$ph$lcssa208 = 1; //@line 12965
   $$1186$ph$lcssa = -1; //@line 12965
   label = 26; //@line 12966
  } else {
   $$0187263 = 0; //@line 12968
   $10 = $4; //@line 12968
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 12974
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 12982
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 12985
    $$0187263 = $$0187263 + 1 | 0; //@line 12986
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 12989
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 12991
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 12999
   if ($23) {
    $$0183$ph260 = 0; //@line 13001
    $$0185$ph259 = -1; //@line 13001
    $130 = 1; //@line 13001
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 13003
     $$0183$ph197$ph253 = $$0183$ph260; //@line 13003
     $131 = $130; //@line 13003
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 13005
      $132 = $131; //@line 13005
      L10 : while (1) {
       $$0179242 = 1; //@line 13007
       $25 = $132; //@line 13007
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 13011
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 13013
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 13019
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 13023
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 13028
         $$0185$ph$lcssa = $$0185$ph259; //@line 13028
         break L6;
        } else {
         $25 = $27; //@line 13026
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 13032
       $132 = $37 + 1 | 0; //@line 13033
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 13038
        $$0185$ph$lcssa = $$0185$ph259; //@line 13038
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 13036
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 13043
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 13047
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 13052
       $$0185$ph$lcssa = $$0185$ph259; //@line 13052
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 13050
       $$0183$ph197$ph253 = $25; //@line 13050
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 13057
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 13062
      $$0185$ph$lcssa = $$0183$ph197248; //@line 13062
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 13060
      $$0185$ph259 = $$0183$ph197248; //@line 13060
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 13067
     $$1186$ph238 = -1; //@line 13067
     $133 = 1; //@line 13067
     while (1) {
      $$1176$ph$ph233 = 1; //@line 13069
      $$1184$ph193$ph232 = $$1184$ph239; //@line 13069
      $135 = $133; //@line 13069
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 13071
       $134 = $135; //@line 13071
       L25 : while (1) {
        $$1180222 = 1; //@line 13073
        $52 = $134; //@line 13073
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 13077
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 13079
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 13085
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 13089
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13094
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13094
          $$0187219$ph325326 = $$0187263; //@line 13094
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 13094
          $$1186$ph$lcssa = $$1186$ph238; //@line 13094
          label = 26; //@line 13095
          break L1;
         } else {
          $52 = $45; //@line 13092
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 13099
        $134 = $56 + 1 | 0; //@line 13100
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13105
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13105
         $$0187219$ph325326 = $$0187263; //@line 13105
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 13105
         $$1186$ph$lcssa = $$1186$ph238; //@line 13105
         label = 26; //@line 13106
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 13103
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 13111
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 13115
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13120
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13120
        $$0187219$ph325326 = $$0187263; //@line 13120
        $$1176$ph$ph$lcssa208 = $60; //@line 13120
        $$1186$ph$lcssa = $$1186$ph238; //@line 13120
        label = 26; //@line 13121
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 13118
        $$1184$ph193$ph232 = $52; //@line 13118
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 13126
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13131
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13131
       $$0187219$ph325326 = $$0187263; //@line 13131
       $$1176$ph$ph$lcssa208 = 1; //@line 13131
       $$1186$ph$lcssa = $$1184$ph193227; //@line 13131
       label = 26; //@line 13132
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 13129
       $$1186$ph238 = $$1184$ph193227; //@line 13129
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13137
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13137
     $$0187219$ph325326 = $$0187263; //@line 13137
     $$1176$ph$ph$lcssa208 = 1; //@line 13137
     $$1186$ph$lcssa = -1; //@line 13137
     label = 26; //@line 13138
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 13141
    $$0185$ph$lcssa327 = -1; //@line 13141
    $$0187219$ph325326 = $$0187263; //@line 13141
    $$1176$ph$ph$lcssa208 = 1; //@line 13141
    $$1186$ph$lcssa = -1; //@line 13141
    label = 26; //@line 13142
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 13150
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 13151
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 13152
   $70 = $$1186$$0185 + 1 | 0; //@line 13154
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 13159
    $$3178 = $$1176$$0175; //@line 13159
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 13162
    $$0168 = 0; //@line 13166
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 13166
   }
   $78 = $$0187219$ph325326 | 63; //@line 13168
   $79 = $$0187219$ph325326 + -1 | 0; //@line 13169
   $80 = ($$0168 | 0) != 0; //@line 13170
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 13171
   $$0166 = $0; //@line 13172
   $$0169 = 0; //@line 13172
   $$0170 = $0; //@line 13172
   while (1) {
    $83 = $$0166; //@line 13175
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 13180
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 13184
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 13191
        break L35;
       } else {
        $$3173 = $86; //@line 13194
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 13199
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 13203
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 13215
      $$2181$sink = $$0187219$ph325326; //@line 13215
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 13220
      if ($105 | 0) {
       $$0169$be = 0; //@line 13228
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 13228
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 13232
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 13234
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 13238
       } else {
        $$3182221 = $111; //@line 13240
        $$pr = $113; //@line 13240
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 13248
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 13250
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 13253
          break L54;
         } else {
          $$3182221 = $118; //@line 13256
         }
        }
        $$0169$be = 0; //@line 13260
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 13260
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 13267
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 13270
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 13279
        $$2181$sink = $$3178; //@line 13279
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 13286
    $$0169 = $$0169$be; //@line 13286
    $$0170 = $$3173; //@line 13286
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13290
 return $$3 | 0; //@line 13290
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$011 = 0, $$013 = 0, $$112 = 0, $$byval_copy42 = 0, $104 = 0, $107 = 0, $112 = 0, $115 = 0, $13 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $4 = 0, $44 = 0, $5 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $94 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3070
 STACKTOP = STACKTOP + 224 | 0; //@line 3071
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 3071
 $$byval_copy42 = sp + 204 | 0; //@line 3072
 $4 = sp + 120 | 0; //@line 3073
 $5 = sp + 184 | 0; //@line 3074
 $6 = sp + 56 | 0; //@line 3075
 $7 = sp + 32 | 0; //@line 3076
 $8 = sp + 16 | 0; //@line 3077
 $9 = sp; //@line 3078
 HEAP32[$5 >> 2] = 0; //@line 3079
 HEAP32[$5 + 4 >> 2] = 0; //@line 3079
 HEAP32[$5 + 8 >> 2] = 0; //@line 3079
 HEAP32[$5 + 12 >> 2] = 0; //@line 3079
 HEAP32[$5 + 16 >> 2] = 0; //@line 3079
 HEAP32[$$byval_copy42 >> 2] = HEAP32[$5 >> 2]; //@line 3080
 HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 3080
 HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 3080
 HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 3080
 HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 3080
 __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy42, 0); //@line 3081
 if (!(HEAP8[$1 >> 0] | 0)) {
  $$013 = -3003; //@line 3085
  STACKTOP = sp; //@line 3086
  return $$013 | 0; //@line 3086
 }
 $13 = ($3 | 0) == 0; //@line 3089
 if (__ZN13SocketAddress14set_ip_addressEPKc($4, $1) | 0) {
  if (!$13) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($4) | 0) != ($3 | 0)) {
    $$013 = -3009; //@line 3095
    STACKTOP = sp; //@line 3096
    return $$013 | 0; //@line 3096
   }
  }
  $16 = $2 + 12 | 0; //@line 3099
  $17 = HEAP32[$16 >> 2] | 0; //@line 3100
  do {
   if (!$17) {
    $AsyncCtx31 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3104
    _mbed_assert_internal(2972, 2977, 1677); //@line 3105
    if (___async) {
     HEAP32[$AsyncCtx31 >> 2] = 88; //@line 3108
     HEAP32[$AsyncCtx31 + 4 >> 2] = $16; //@line 3110
     HEAP32[$AsyncCtx31 + 8 >> 2] = $2; //@line 3112
     HEAP32[$AsyncCtx31 + 12 >> 2] = $4; //@line 3114
     HEAP32[$AsyncCtx31 + 16 >> 2] = $4; //@line 3116
     sp = STACKTOP; //@line 3117
     STACKTOP = sp; //@line 3118
     return 0; //@line 3118
    } else {
     _emscripten_free_async_context($AsyncCtx31 | 0); //@line 3120
     $24 = HEAP32[$16 >> 2] | 0; //@line 3122
     break;
    }
   } else {
    $24 = $17; //@line 3126
   }
  } while (0);
  $23 = HEAP32[$24 >> 2] | 0; //@line 3129
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3130
  FUNCTION_TABLE_viii[$23 & 0]($2, 0, $4); //@line 3131
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 89; //@line 3134
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3136
   sp = STACKTOP; //@line 3137
   STACKTOP = sp; //@line 3138
   return 0; //@line 3138
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3140
  $$013 = 0; //@line 3141
  STACKTOP = sp; //@line 3142
  return $$013 | 0; //@line 3142
 }
 if ($13) {
  HEAP32[$7 >> 2] = 0; //@line 3145
  HEAP32[$7 + 4 >> 2] = 0; //@line 3145
  HEAP32[$7 + 8 >> 2] = 0; //@line 3145
  HEAP32[$7 + 12 >> 2] = 0; //@line 3145
  HEAP32[$7 + 16 >> 2] = 0; //@line 3145
  HEAP32[$$byval_copy42 >> 2] = HEAP32[$7 >> 2]; //@line 3146
  HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 3146
  HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 3146
  HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 3146
  HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 3146
  __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy42, 0); //@line 3147
  $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3150
  $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3151
  $29 = FUNCTION_TABLE_ii[$28 & 31]($0) | 0; //@line 3152
  if (___async) {
   HEAP32[$AsyncCtx2 >> 2] = 90; //@line 3155
   HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 3157
   HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 3159
   HEAP32[$AsyncCtx2 + 12 >> 2] = $8; //@line 3161
   HEAP32[$AsyncCtx2 + 16 >> 2] = $$byval_copy42; //@line 3163
   HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 3165
   HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 3167
   HEAP32[$AsyncCtx2 + 28 >> 2] = $2; //@line 3169
   HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 3171
   HEAP32[$AsyncCtx2 + 36 >> 2] = $9; //@line 3173
   HEAP32[$AsyncCtx2 + 40 >> 2] = $1; //@line 3175
   sp = STACKTOP; //@line 3176
   STACKTOP = sp; //@line 3177
   return 0; //@line 3177
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3179
  if (__ZN13SocketAddress14set_ip_addressEPKc($6, $29) | 0) {
   $$011 = __ZNK13SocketAddress14get_ip_versionEv($6) | 0; //@line 3183
  } else {
   $$011 = 0; //@line 3185
  }
  $$112 = $$011; //@line 3187
 } else {
  $$112 = $3; //@line 3189
 }
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 96 >> 2] | 0; //@line 3193
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3194
 FUNCTION_TABLE_vii[$44 & 7]($$byval_copy42, $0); //@line 3195
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 91; //@line 3198
  HEAP32[$AsyncCtx6 + 4 >> 2] = $8; //@line 3200
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$byval_copy42; //@line 3202
  HEAP32[$AsyncCtx6 + 12 >> 2] = $2; //@line 3204
  HEAP32[$AsyncCtx6 + 16 >> 2] = $4; //@line 3206
  HEAP32[$AsyncCtx6 + 20 >> 2] = $$byval_copy42; //@line 3208
  HEAP32[$AsyncCtx6 + 24 >> 2] = $9; //@line 3210
  HEAP32[$AsyncCtx6 + 28 >> 2] = $0; //@line 3212
  HEAP32[$AsyncCtx6 + 32 >> 2] = $1; //@line 3214
  HEAP32[$AsyncCtx6 + 36 >> 2] = $$112; //@line 3216
  sp = STACKTOP; //@line 3217
  STACKTOP = sp; //@line 3218
  return 0; //@line 3218
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 3220
 $54 = $2 + 12 | 0; //@line 3221
 $55 = HEAP32[$54 >> 2] | 0; //@line 3222
 do {
  if (!$55) {
   $69 = 0; //@line 3226
  } else {
   $58 = HEAP32[$55 + 4 >> 2] | 0; //@line 3229
   $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3230
   FUNCTION_TABLE_vii[$58 & 7]($8, $2); //@line 3231
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 92; //@line 3234
    HEAP32[$AsyncCtx9 + 4 >> 2] = $8; //@line 3236
    HEAP32[$AsyncCtx9 + 8 >> 2] = $$byval_copy42; //@line 3238
    HEAP32[$AsyncCtx9 + 12 >> 2] = $4; //@line 3240
    HEAP32[$AsyncCtx9 + 16 >> 2] = $54; //@line 3242
    HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy42; //@line 3244
    HEAP32[$AsyncCtx9 + 24 >> 2] = $9; //@line 3246
    HEAP32[$AsyncCtx9 + 28 >> 2] = $0; //@line 3248
    HEAP32[$AsyncCtx9 + 32 >> 2] = $1; //@line 3250
    HEAP32[$AsyncCtx9 + 36 >> 2] = $$112; //@line 3252
    sp = STACKTOP; //@line 3253
    STACKTOP = sp; //@line 3254
    return 0; //@line 3254
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 3256
    $69 = HEAP32[$54 >> 2] | 0; //@line 3258
    break;
   }
  }
 } while (0);
 $68 = $8 + 12 | 0; //@line 3263
 HEAP32[$68 >> 2] = $69; //@line 3264
 $70 = $$byval_copy42 + 12 | 0; //@line 3265
 $71 = HEAP32[$70 >> 2] | 0; //@line 3266
 do {
  if (!$71) {
   $85 = 0; //@line 3270
  } else {
   $74 = HEAP32[$71 + 4 >> 2] | 0; //@line 3273
   $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3274
   FUNCTION_TABLE_vii[$74 & 7]($9, $$byval_copy42); //@line 3275
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 93; //@line 3278
    HEAP32[$AsyncCtx12 + 4 >> 2] = $70; //@line 3280
    HEAP32[$AsyncCtx12 + 8 >> 2] = $4; //@line 3282
    HEAP32[$AsyncCtx12 + 12 >> 2] = $$byval_copy42; //@line 3284
    HEAP32[$AsyncCtx12 + 16 >> 2] = $9; //@line 3286
    HEAP32[$AsyncCtx12 + 20 >> 2] = $0; //@line 3288
    HEAP32[$AsyncCtx12 + 24 >> 2] = $1; //@line 3290
    HEAP32[$AsyncCtx12 + 28 >> 2] = $8; //@line 3292
    HEAP32[$AsyncCtx12 + 32 >> 2] = $$112; //@line 3294
    HEAP32[$AsyncCtx12 + 36 >> 2] = $68; //@line 3296
    sp = STACKTOP; //@line 3297
    STACKTOP = sp; //@line 3298
    return 0; //@line 3298
   } else {
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 3300
    $85 = HEAP32[$70 >> 2] | 0; //@line 3302
    break;
   }
  }
 } while (0);
 $84 = $9 + 12 | 0; //@line 3307
 HEAP32[$84 >> 2] = $85; //@line 3308
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 3309
 $86 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $8, $9, $$112) | 0; //@line 3310
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 94; //@line 3313
  HEAP32[$AsyncCtx27 + 4 >> 2] = $84; //@line 3315
  HEAP32[$AsyncCtx27 + 8 >> 2] = $68; //@line 3317
  HEAP32[$AsyncCtx27 + 12 >> 2] = $9; //@line 3319
  HEAP32[$AsyncCtx27 + 16 >> 2] = $70; //@line 3321
  HEAP32[$AsyncCtx27 + 20 >> 2] = $8; //@line 3323
  HEAP32[$AsyncCtx27 + 24 >> 2] = $$byval_copy42; //@line 3325
  HEAP32[$AsyncCtx27 + 28 >> 2] = $4; //@line 3327
  sp = STACKTOP; //@line 3328
  STACKTOP = sp; //@line 3329
  return 0; //@line 3329
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 3331
 $94 = HEAP32[$84 >> 2] | 0; //@line 3332
 do {
  if ($94 | 0) {
   $97 = HEAP32[$94 + 8 >> 2] | 0; //@line 3337
   $AsyncCtx16 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3338
   FUNCTION_TABLE_vi[$97 & 511]($9); //@line 3339
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 95; //@line 3342
    HEAP32[$AsyncCtx16 + 4 >> 2] = $68; //@line 3344
    HEAP32[$AsyncCtx16 + 8 >> 2] = $70; //@line 3346
    HEAP32[$AsyncCtx16 + 12 >> 2] = $8; //@line 3348
    HEAP32[$AsyncCtx16 + 16 >> 2] = $$byval_copy42; //@line 3350
    HEAP32[$AsyncCtx16 + 20 >> 2] = $86; //@line 3352
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 3354
    sp = STACKTOP; //@line 3355
    STACKTOP = sp; //@line 3356
    return 0; //@line 3356
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 3358
    break;
   }
  }
 } while (0);
 $104 = HEAP32[$68 >> 2] | 0; //@line 3363
 do {
  if ($104 | 0) {
   $107 = HEAP32[$104 + 8 >> 2] | 0; //@line 3368
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3369
   FUNCTION_TABLE_vi[$107 & 511]($8); //@line 3370
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 96; //@line 3373
    HEAP32[$AsyncCtx20 + 4 >> 2] = $70; //@line 3375
    HEAP32[$AsyncCtx20 + 8 >> 2] = $$byval_copy42; //@line 3377
    HEAP32[$AsyncCtx20 + 12 >> 2] = $86; //@line 3379
    HEAP32[$AsyncCtx20 + 16 >> 2] = $4; //@line 3381
    sp = STACKTOP; //@line 3382
    STACKTOP = sp; //@line 3383
    return 0; //@line 3383
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 3385
    break;
   }
  }
 } while (0);
 $112 = HEAP32[$70 >> 2] | 0; //@line 3390
 do {
  if ($112 | 0) {
   $115 = HEAP32[$112 + 8 >> 2] | 0; //@line 3395
   $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3396
   FUNCTION_TABLE_vi[$115 & 511]($$byval_copy42); //@line 3397
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 97; //@line 3400
    HEAP32[$AsyncCtx24 + 4 >> 2] = $$byval_copy42; //@line 3402
    HEAP32[$AsyncCtx24 + 8 >> 2] = $86; //@line 3404
    HEAP32[$AsyncCtx24 + 12 >> 2] = $4; //@line 3406
    sp = STACKTOP; //@line 3407
    STACKTOP = sp; //@line 3408
    return 0; //@line 3408
   } else {
    _emscripten_free_async_context($AsyncCtx24 | 0); //@line 3410
    break;
   }
  }
 } while (0);
 $$013 = $86; //@line 3415
 STACKTOP = sp; //@line 3416
 return $$013 | 0; //@line 3416
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_189($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $105 = 0, $108 = 0, $110 = 0, $118 = 0, $12 = 0, $121 = 0, $123 = 0, $131 = 0, $134 = 0, $136 = 0, $14 = 0, $149 = 0, $150 = 0, $151 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $48 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $95 = 0, $97 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 9168
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9170
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9172
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9174
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9176
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9180
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9182
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9186
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9188
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9190
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9192
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9194
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = HEAP32[HEAP32[$0 + 32 >> 2] >> 2]; //@line 9196
 HEAP32[$4 + 8 >> 2] = $6; //@line 9198
 HEAP32[$4 + 48 >> 2] = $12; //@line 9200
 HEAP32[$4 + 52 >> 2] = $14; //@line 9202
 $30 = $4 + 56 | 0; //@line 9203
 HEAP32[$30 >> 2] = 0; //@line 9204
 $31 = $4 + 60 | 0; //@line 9205
 HEAP32[$31 >> 2] = 0; //@line 9206
 HEAP32[$4 + 64 >> 2] = 0; //@line 9208
 HEAP8[$4 + 82 >> 0] = 0; //@line 9210
 HEAP8[$4 + 83 >> 0] = 1; //@line 9212
 HEAP8[$4 + 84 >> 0] = 3; //@line 9214
 HEAP8[$4 + 85 >> 0] = 0; //@line 9216
 HEAP16[$4 + 80 >> 1] = 0; //@line 9218
 HEAP32[$4 + 76 >> 2] = 0; //@line 9220
 $39 = $4 + 72 | 0; //@line 9221
 HEAP32[$39 >> 2] = 15500; //@line 9222
 HEAP8[$4 + 86 >> 0] = 0; //@line 9224
 HEAP32[$4 + 88 >> 2] = 0; //@line 9226
 $42 = HEAP32[177] | 0; //@line 9227
 HEAP32[177] = $42 + 1; //@line 9229
 HEAP32[$4 >> 2] = ($42 | 0) > 32767 ? 1 : $42; //@line 9232
 $45 = HEAP32[1685] | 0; //@line 9233
 if (!$45) {
  $$1 = 0; //@line 9236
  $95 = 0; //@line 9236
 } else {
  $48 = HEAP32[$45 + 56 >> 2] | 0; //@line 9239
  if (!$48) {
   $$1 = 1; //@line 9242
   $95 = 0; //@line 9242
  } else {
   if ((HEAP32[$45 + 8 >> 2] | 0) == ($6 | 0)) {
    HEAP32[$30 >> 2] = $48; //@line 9248
    HEAP32[$31 >> 2] = HEAP32[$45 + 60 >> 2]; //@line 9251
    $$1 = 1; //@line 9252
    $95 = $48; //@line 9252
   } else {
    $$1 = 1; //@line 9254
    $95 = 0; //@line 9254
   }
  }
 }
 $55 = HEAP32[1686] | 0; //@line 9258
 if (!$55) {
  $$1$1 = $$1; //@line 9261
  $108 = $95; //@line 9261
 } else {
  if (!$95) {
   $97 = HEAP32[$55 + 56 >> 2] | 0; //@line 9266
   if (!$97) {
    $149 = 0; //@line 9269
   } else {
    if ((HEAP32[$55 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$30 >> 2] = $97; //@line 9275
     HEAP32[$31 >> 2] = HEAP32[$55 + 60 >> 2]; //@line 9278
     $149 = $97; //@line 9279
    } else {
     $149 = 0; //@line 9281
    }
   }
  } else {
   $149 = $95; //@line 9285
  }
  $$1$1 = $$1 + 1 | 0; //@line 9288
  $108 = $149; //@line 9288
 }
 $105 = HEAP32[1687] | 0; //@line 9290
 if (!$105) {
  $$1$2 = $$1$1; //@line 9293
  $121 = $108; //@line 9293
 } else {
  if (!$108) {
   $110 = HEAP32[$105 + 56 >> 2] | 0; //@line 9298
   if (!$110) {
    $150 = 0; //@line 9301
   } else {
    if ((HEAP32[$105 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$30 >> 2] = $110; //@line 9307
     HEAP32[$31 >> 2] = HEAP32[$105 + 60 >> 2]; //@line 9310
     $150 = $110; //@line 9311
    } else {
     $150 = 0; //@line 9313
    }
   }
  } else {
   $150 = $108; //@line 9317
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 9320
  $121 = $150; //@line 9320
 }
 $118 = HEAP32[1688] | 0; //@line 9322
 if (!$118) {
  $$1$3 = $$1$2; //@line 9325
  $134 = $121; //@line 9325
 } else {
  if (!$121) {
   $123 = HEAP32[$118 + 56 >> 2] | 0; //@line 9330
   if (!$123) {
    $151 = 0; //@line 9333
   } else {
    if ((HEAP32[$118 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$30 >> 2] = $123; //@line 9339
     HEAP32[$31 >> 2] = HEAP32[$118 + 60 >> 2]; //@line 9342
     $151 = $123; //@line 9343
    } else {
     $151 = 0; //@line 9345
    }
   }
  } else {
   $151 = $121; //@line 9349
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 9352
  $134 = $151; //@line 9352
 }
 $131 = HEAP32[1689] | 0; //@line 9354
 if (!$131) {
  $$1$4 = $$1$3; //@line 9357
 } else {
  if (!$134) {
   $136 = HEAP32[$131 + 56 >> 2] | 0; //@line 9362
   if ($136 | 0) {
    if ((HEAP32[$131 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$30 >> 2] = $136; //@line 9369
     HEAP32[$31 >> 2] = HEAP32[$131 + 60 >> 2]; //@line 9372
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 9377
 }
 HEAP32[6740 + ($2 << 2) >> 2] = $4; //@line 9380
 HEAP32[$39 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 9383
 if (HEAP8[7620] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 9387
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9388
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 9391
   $92 = $ReallocAsyncCtx13 + 4 | 0; //@line 9392
   HEAP32[$92 >> 2] = $4; //@line 9393
   $93 = $ReallocAsyncCtx13 + 8 | 0; //@line 9394
   HEAP32[$93 >> 2] = $8; //@line 9395
   sp = STACKTOP; //@line 9396
   return;
  }
  ___async_unwind = 0; //@line 9399
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 9400
  $92 = $ReallocAsyncCtx13 + 4 | 0; //@line 9401
  HEAP32[$92 >> 2] = $4; //@line 9402
  $93 = $ReallocAsyncCtx13 + 8 | 0; //@line 9403
  HEAP32[$93 >> 2] = $8; //@line 9404
  sp = STACKTOP; //@line 9405
  return;
 }
 $57 = $4 + 44 | 0; //@line 9408
 $58 = HEAP32[$57 >> 2] | 0; //@line 9409
 if (!$58) {
  $72 = $18 + 12 | 0; //@line 9412
  HEAP32[$72 >> 2] = 0; //@line 9413
  $74 = $22 + 4 | 0; //@line 9415
  HEAP32[$74 >> 2] = 0; //@line 9417
  HEAP32[$74 + 4 >> 2] = 0; //@line 9420
  HEAP32[$22 >> 2] = 3; //@line 9421
  $78 = $22 + 12 | 0; //@line 9422
  HEAP32[$78 >> 2] = 712; //@line 9423
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 9424
  $79 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 100, $22) | 0; //@line 9425
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 9428
   $80 = $ReallocAsyncCtx14 + 4 | 0; //@line 9429
   HEAP32[$80 >> 2] = $4; //@line 9430
   $81 = $ReallocAsyncCtx14 + 8 | 0; //@line 9431
   HEAP32[$81 >> 2] = $4; //@line 9432
   $82 = $ReallocAsyncCtx14 + 12 | 0; //@line 9433
   HEAP32[$82 >> 2] = $8; //@line 9434
   $83 = $ReallocAsyncCtx14 + 16 | 0; //@line 9435
   HEAP32[$83 >> 2] = $78; //@line 9436
   $84 = $ReallocAsyncCtx14 + 20 | 0; //@line 9437
   HEAP32[$84 >> 2] = $72; //@line 9438
   $85 = $ReallocAsyncCtx14 + 24 | 0; //@line 9439
   HEAP32[$85 >> 2] = $22; //@line 9440
   $86 = $ReallocAsyncCtx14 + 28 | 0; //@line 9441
   HEAP32[$86 >> 2] = $26; //@line 9442
   $87 = $ReallocAsyncCtx14 + 32 | 0; //@line 9443
   HEAP32[$87 >> 2] = $24; //@line 9444
   $88 = $ReallocAsyncCtx14 + 36 | 0; //@line 9445
   HEAP32[$88 >> 2] = $18; //@line 9446
   $89 = $ReallocAsyncCtx14 + 40 | 0; //@line 9447
   HEAP32[$89 >> 2] = $20; //@line 9448
   $90 = $ReallocAsyncCtx14 + 44 | 0; //@line 9449
   HEAP32[$90 >> 2] = $57; //@line 9450
   sp = STACKTOP; //@line 9451
   return;
  }
  HEAP32[___async_retval >> 2] = $79; //@line 9455
  ___async_unwind = 0; //@line 9456
  HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 9457
  $80 = $ReallocAsyncCtx14 + 4 | 0; //@line 9458
  HEAP32[$80 >> 2] = $4; //@line 9459
  $81 = $ReallocAsyncCtx14 + 8 | 0; //@line 9460
  HEAP32[$81 >> 2] = $4; //@line 9461
  $82 = $ReallocAsyncCtx14 + 12 | 0; //@line 9462
  HEAP32[$82 >> 2] = $8; //@line 9463
  $83 = $ReallocAsyncCtx14 + 16 | 0; //@line 9464
  HEAP32[$83 >> 2] = $78; //@line 9465
  $84 = $ReallocAsyncCtx14 + 20 | 0; //@line 9466
  HEAP32[$84 >> 2] = $72; //@line 9467
  $85 = $ReallocAsyncCtx14 + 24 | 0; //@line 9468
  HEAP32[$85 >> 2] = $22; //@line 9469
  $86 = $ReallocAsyncCtx14 + 28 | 0; //@line 9470
  HEAP32[$86 >> 2] = $26; //@line 9471
  $87 = $ReallocAsyncCtx14 + 32 | 0; //@line 9472
  HEAP32[$87 >> 2] = $24; //@line 9473
  $88 = $ReallocAsyncCtx14 + 36 | 0; //@line 9474
  HEAP32[$88 >> 2] = $18; //@line 9475
  $89 = $ReallocAsyncCtx14 + 40 | 0; //@line 9476
  HEAP32[$89 >> 2] = $20; //@line 9477
  $90 = $ReallocAsyncCtx14 + 44 | 0; //@line 9478
  HEAP32[$90 >> 2] = $57; //@line 9479
  sp = STACKTOP; //@line 9480
  return;
 } else {
  $61 = HEAP32[$58 + 4 >> 2] | 0; //@line 9484
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 9485
  FUNCTION_TABLE_vii[$61 & 7]($18, $20); //@line 9486
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 9489
   $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 9490
   HEAP32[$62 >> 2] = $4; //@line 9491
   $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 9492
   HEAP32[$63 >> 2] = $8; //@line 9493
   $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 9494
   HEAP32[$64 >> 2] = $57; //@line 9495
   $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 9496
   HEAP32[$65 >> 2] = $22; //@line 9497
   $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 9498
   HEAP32[$66 >> 2] = $18; //@line 9499
   $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 9500
   HEAP32[$67 >> 2] = $24; //@line 9501
   $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 9502
   HEAP32[$68 >> 2] = $26; //@line 9503
   $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 9504
   HEAP32[$69 >> 2] = $4; //@line 9505
   $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 9506
   HEAP32[$70 >> 2] = $20; //@line 9507
   $71 = $ReallocAsyncCtx6 + 40 | 0; //@line 9508
   HEAP32[$71 >> 2] = $57; //@line 9509
   sp = STACKTOP; //@line 9510
   return;
  }
  ___async_unwind = 0; //@line 9513
  HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 9514
  $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 9515
  HEAP32[$62 >> 2] = $4; //@line 9516
  $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 9517
  HEAP32[$63 >> 2] = $8; //@line 9518
  $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 9519
  HEAP32[$64 >> 2] = $57; //@line 9520
  $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 9521
  HEAP32[$65 >> 2] = $22; //@line 9522
  $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 9523
  HEAP32[$66 >> 2] = $18; //@line 9524
  $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 9525
  HEAP32[$67 >> 2] = $24; //@line 9526
  $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 9527
  HEAP32[$68 >> 2] = $26; //@line 9528
  $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 9529
  HEAP32[$69 >> 2] = $4; //@line 9530
  $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 9531
  HEAP32[$70 >> 2] = $20; //@line 9532
  $71 = $ReallocAsyncCtx6 + 40 | 0; //@line 9533
  HEAP32[$71 >> 2] = $57; //@line 9534
  sp = STACKTOP; //@line 9535
  return;
 }
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_80($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 34
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 36
 $30 = HEAP16[$0 + 60 >> 1] | 0; //@line 38
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 40
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 42
 $49 = $28 + 64 | 0; //@line 43
 HEAP32[$49 >> 2] = $AsyncRetVal; //@line 44
 $51 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($4, $30, $28 + 68 | 0, $AsyncRetVal, $32) | 0; //@line 46
 if (($51 | 0) < 0) {
  $53 = HEAP32[$49 >> 2] | 0; //@line 49
  if ($53 | 0) {
   __ZdaPv($53); //@line 52
  }
  HEAP32[$49 >> 2] = 0; //@line 54
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 55
  $34 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($26, 0, $4, 512) | 0; //@line 56
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 59
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 60
   HEAP32[$35 >> 2] = $2; //@line 61
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 62
   HEAP32[$36 >> 2] = $4; //@line 63
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 64
   HEAP32[$37 >> 2] = $6; //@line 65
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 66
   HEAP32[$38 >> 2] = $8; //@line 67
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 68
   HEAP32[$39 >> 2] = $10; //@line 69
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 70
   HEAP32[$40 >> 2] = $12; //@line 71
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 72
   HEAP32[$41 >> 2] = $14; //@line 73
   $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 74
   HEAP32[$42 >> 2] = $16; //@line 75
   $43 = $ReallocAsyncCtx6 + 36 | 0; //@line 76
   HEAP32[$43 >> 2] = $18; //@line 77
   $44 = $ReallocAsyncCtx6 + 40 | 0; //@line 78
   HEAP32[$44 >> 2] = $20; //@line 79
   $45 = $ReallocAsyncCtx6 + 44 | 0; //@line 80
   HEAP32[$45 >> 2] = $22; //@line 81
   $46 = $ReallocAsyncCtx6 + 48 | 0; //@line 82
   HEAP32[$46 >> 2] = $24; //@line 83
   $47 = $ReallocAsyncCtx6 + 52 | 0; //@line 84
   HEAP32[$47 >> 2] = $26; //@line 85
   sp = STACKTOP; //@line 86
   return;
  }
  HEAP32[___async_retval >> 2] = $34; //@line 90
  ___async_unwind = 0; //@line 91
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 92
  $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 93
  HEAP32[$35 >> 2] = $2; //@line 94
  $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 95
  HEAP32[$36 >> 2] = $4; //@line 96
  $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 97
  HEAP32[$37 >> 2] = $6; //@line 98
  $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 99
  HEAP32[$38 >> 2] = $8; //@line 100
  $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 101
  HEAP32[$39 >> 2] = $10; //@line 102
  $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 103
  HEAP32[$40 >> 2] = $12; //@line 104
  $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 105
  HEAP32[$41 >> 2] = $14; //@line 106
  $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 107
  HEAP32[$42 >> 2] = $16; //@line 108
  $43 = $ReallocAsyncCtx6 + 36 | 0; //@line 109
  HEAP32[$43 >> 2] = $18; //@line 110
  $44 = $ReallocAsyncCtx6 + 40 | 0; //@line 111
  HEAP32[$44 >> 2] = $20; //@line 112
  $45 = $ReallocAsyncCtx6 + 44 | 0; //@line 113
  HEAP32[$45 >> 2] = $22; //@line 114
  $46 = $ReallocAsyncCtx6 + 48 | 0; //@line 115
  HEAP32[$46 >> 2] = $24; //@line 116
  $47 = $ReallocAsyncCtx6 + 52 | 0; //@line 117
  HEAP32[$47 >> 2] = $26; //@line 118
  sp = STACKTOP; //@line 119
  return;
 }
 HEAP8[$28 + 86 >> 0] = $51; //@line 124
 HEAP32[$28 + 4 >> 2] = -3009; //@line 126
 HEAP32[$28 + 76 >> 2] = 0; //@line 128
 $59 = $28 + 44 | 0; //@line 129
 $60 = HEAP32[$59 >> 2] | 0; //@line 130
 if (!$60) {
  HEAP32[$14 >> 2] = 0; //@line 133
  $80 = HEAP32[$28 >> 2] | 0; //@line 134
  HEAP32[$16 >> 2] = 0; //@line 135
  HEAP32[$18 >> 2] = 175; //@line 136
  HEAP32[$20 >> 2] = $80; //@line 137
  HEAP32[$2 >> 2] = 724; //@line 138
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 139
  __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 140
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 246; //@line 143
   $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 144
   HEAP32[$81 >> 2] = $2; //@line 145
   $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 146
   HEAP32[$82 >> 2] = $4; //@line 147
   $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 148
   HEAP32[$83 >> 2] = $6; //@line 149
   $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 150
   HEAP32[$84 >> 2] = $8; //@line 151
   $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 152
   HEAP32[$85 >> 2] = $10; //@line 153
   $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 154
   HEAP32[$86 >> 2] = $12; //@line 155
   $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 156
   HEAP32[$87 >> 2] = $14; //@line 157
   $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 158
   HEAP32[$88 >> 2] = $16; //@line 159
   $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 160
   HEAP32[$89 >> 2] = $18; //@line 161
   $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 162
   HEAP32[$90 >> 2] = $20; //@line 163
   $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 164
   HEAP32[$91 >> 2] = $22; //@line 165
   $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 166
   HEAP32[$92 >> 2] = $24; //@line 167
   $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 168
   HEAP32[$93 >> 2] = $26; //@line 169
   sp = STACKTOP; //@line 170
   return;
  }
  ___async_unwind = 0; //@line 173
  HEAP32[$ReallocAsyncCtx5 >> 2] = 246; //@line 174
  $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 175
  HEAP32[$81 >> 2] = $2; //@line 176
  $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 177
  HEAP32[$82 >> 2] = $4; //@line 178
  $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 179
  HEAP32[$83 >> 2] = $6; //@line 180
  $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 181
  HEAP32[$84 >> 2] = $8; //@line 182
  $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 183
  HEAP32[$85 >> 2] = $10; //@line 184
  $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 185
  HEAP32[$86 >> 2] = $12; //@line 186
  $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 187
  HEAP32[$87 >> 2] = $14; //@line 188
  $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 189
  HEAP32[$88 >> 2] = $16; //@line 190
  $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 191
  HEAP32[$89 >> 2] = $18; //@line 192
  $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 193
  HEAP32[$90 >> 2] = $20; //@line 194
  $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 195
  HEAP32[$91 >> 2] = $22; //@line 196
  $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 197
  HEAP32[$92 >> 2] = $24; //@line 198
  $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 199
  HEAP32[$93 >> 2] = $26; //@line 200
  sp = STACKTOP; //@line 201
  return;
 } else {
  $64 = HEAP32[$60 + 4 >> 2] | 0; //@line 206
  $ReallocAsyncCtx = _emscripten_realloc_async_context(64) | 0; //@line 207
  FUNCTION_TABLE_vii[$64 & 7]($12, $28 + 32 | 0); //@line 208
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 245; //@line 211
   $65 = $ReallocAsyncCtx + 4 | 0; //@line 212
   HEAP32[$65 >> 2] = $2; //@line 213
   $66 = $ReallocAsyncCtx + 8 | 0; //@line 214
   HEAP32[$66 >> 2] = $4; //@line 215
   $67 = $ReallocAsyncCtx + 12 | 0; //@line 216
   HEAP32[$67 >> 2] = $6; //@line 217
   $68 = $ReallocAsyncCtx + 16 | 0; //@line 218
   HEAP32[$68 >> 2] = $59; //@line 219
   $69 = $ReallocAsyncCtx + 20 | 0; //@line 220
   HEAP32[$69 >> 2] = $8; //@line 221
   $70 = $ReallocAsyncCtx + 24 | 0; //@line 222
   HEAP32[$70 >> 2] = $10; //@line 223
   $71 = $ReallocAsyncCtx + 28 | 0; //@line 224
   HEAP32[$71 >> 2] = $12; //@line 225
   $72 = $ReallocAsyncCtx + 32 | 0; //@line 226
   HEAP32[$72 >> 2] = $14; //@line 227
   $73 = $ReallocAsyncCtx + 36 | 0; //@line 228
   HEAP32[$73 >> 2] = $28; //@line 229
   $74 = $ReallocAsyncCtx + 40 | 0; //@line 230
   HEAP32[$74 >> 2] = $16; //@line 231
   $75 = $ReallocAsyncCtx + 44 | 0; //@line 232
   HEAP32[$75 >> 2] = $18; //@line 233
   $76 = $ReallocAsyncCtx + 48 | 0; //@line 234
   HEAP32[$76 >> 2] = $20; //@line 235
   $77 = $ReallocAsyncCtx + 52 | 0; //@line 236
   HEAP32[$77 >> 2] = $22; //@line 237
   $78 = $ReallocAsyncCtx + 56 | 0; //@line 238
   HEAP32[$78 >> 2] = $24; //@line 239
   $79 = $ReallocAsyncCtx + 60 | 0; //@line 240
   HEAP32[$79 >> 2] = $26; //@line 241
   sp = STACKTOP; //@line 242
   return;
  }
  ___async_unwind = 0; //@line 245
  HEAP32[$ReallocAsyncCtx >> 2] = 245; //@line 246
  $65 = $ReallocAsyncCtx + 4 | 0; //@line 247
  HEAP32[$65 >> 2] = $2; //@line 248
  $66 = $ReallocAsyncCtx + 8 | 0; //@line 249
  HEAP32[$66 >> 2] = $4; //@line 250
  $67 = $ReallocAsyncCtx + 12 | 0; //@line 251
  HEAP32[$67 >> 2] = $6; //@line 252
  $68 = $ReallocAsyncCtx + 16 | 0; //@line 253
  HEAP32[$68 >> 2] = $59; //@line 254
  $69 = $ReallocAsyncCtx + 20 | 0; //@line 255
  HEAP32[$69 >> 2] = $8; //@line 256
  $70 = $ReallocAsyncCtx + 24 | 0; //@line 257
  HEAP32[$70 >> 2] = $10; //@line 258
  $71 = $ReallocAsyncCtx + 28 | 0; //@line 259
  HEAP32[$71 >> 2] = $12; //@line 260
  $72 = $ReallocAsyncCtx + 32 | 0; //@line 261
  HEAP32[$72 >> 2] = $14; //@line 262
  $73 = $ReallocAsyncCtx + 36 | 0; //@line 263
  HEAP32[$73 >> 2] = $28; //@line 264
  $74 = $ReallocAsyncCtx + 40 | 0; //@line 265
  HEAP32[$74 >> 2] = $16; //@line 266
  $75 = $ReallocAsyncCtx + 44 | 0; //@line 267
  HEAP32[$75 >> 2] = $18; //@line 268
  $76 = $ReallocAsyncCtx + 48 | 0; //@line 269
  HEAP32[$76 >> 2] = $20; //@line 270
  $77 = $ReallocAsyncCtx + 52 | 0; //@line 271
  HEAP32[$77 >> 2] = $22; //@line 272
  $78 = $ReallocAsyncCtx + 56 | 0; //@line 273
  HEAP32[$78 >> 2] = $24; //@line 274
  $79 = $ReallocAsyncCtx + 60 | 0; //@line 275
  HEAP32[$79 >> 2] = $26; //@line 276
  sp = STACKTOP; //@line 277
  return;
 }
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_140($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 4485
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4487
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4489
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4491
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4493
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4495
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4497
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4499
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4501
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4503
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4505
 if ($AsyncRetVal | 0) {
  $23 = HEAP32[(HEAP32[$12 >> 2] | 0) + 4 >> 2] | 0; //@line 4510
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 4511
  FUNCTION_TABLE_vi[$23 & 511]($18); //@line 4512
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 4515
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 4516
   HEAP32[$24 >> 2] = $6; //@line 4517
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 4518
   HEAP32[$25 >> 2] = $8; //@line 4519
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 4520
   HEAP32[$26 >> 2] = $AsyncRetVal; //@line 4521
   sp = STACKTOP; //@line 4522
   return;
  }
  ___async_unwind = 0; //@line 4525
  HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 4526
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 4527
  HEAP32[$24 >> 2] = $6; //@line 4528
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 4529
  HEAP32[$25 >> 2] = $8; //@line 4530
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 4531
  HEAP32[$26 >> 2] = $AsyncRetVal; //@line 4532
  sp = STACKTOP; //@line 4533
  return;
 }
 __ZN6Socket11set_timeoutEi($2, 0); //@line 4536
 $27 = HEAP32[$4 >> 2] | 0; //@line 4537
 $29 = $27; //@line 4539
 if (!$27) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 4541
  $30 = __Znwj(20) | 0; //@line 4542
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 212; //@line 4545
   $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 4546
   HEAP32[$31 >> 2] = $10; //@line 4547
   $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 4548
   HEAP32[$32 >> 2] = $12; //@line 4549
   $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 4550
   HEAP32[$33 >> 2] = $8; //@line 4551
   $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 4552
   HEAP32[$34 >> 2] = $14; //@line 4553
   $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 4554
   HEAP32[$35 >> 2] = $16; //@line 4555
   $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 4556
   HEAP32[$36 >> 2] = $2; //@line 4557
   $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 4558
   HEAP32[$37 >> 2] = $4; //@line 4559
   sp = STACKTOP; //@line 4560
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 4564
  ___async_unwind = 0; //@line 4565
  HEAP32[$ReallocAsyncCtx11 >> 2] = 212; //@line 4566
  $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 4567
  HEAP32[$31 >> 2] = $10; //@line 4568
  $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 4569
  HEAP32[$32 >> 2] = $12; //@line 4570
  $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 4571
  HEAP32[$33 >> 2] = $8; //@line 4572
  $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 4573
  HEAP32[$34 >> 2] = $14; //@line 4574
  $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 4575
  HEAP32[$35 >> 2] = $16; //@line 4576
  $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 4577
  HEAP32[$36 >> 2] = $2; //@line 4578
  $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 4579
  HEAP32[$37 >> 2] = $4; //@line 4580
  sp = STACKTOP; //@line 4581
  return;
 }
 $39 = $8 + 32 | 0; //@line 4584
 do {
  if (($27 | 0) == ($39 | 0)) {
   $73 = $27; //@line 4588
   $75 = $29; //@line 4588
  } else {
   $41 = $27 + 12 | 0; //@line 4590
   $42 = HEAP32[$41 >> 2] | 0; //@line 4591
   if ($42 | 0) {
    $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 4595
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(44) | 0; //@line 4596
    FUNCTION_TABLE_vi[$45 & 511]($27); //@line 4597
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 213; //@line 4600
     $46 = $ReallocAsyncCtx8 + 4 | 0; //@line 4601
     HEAP32[$46 >> 2] = $8; //@line 4602
     $47 = $ReallocAsyncCtx8 + 8 | 0; //@line 4603
     HEAP32[$47 >> 2] = $14; //@line 4604
     $48 = $ReallocAsyncCtx8 + 12 | 0; //@line 4605
     HEAP32[$48 >> 2] = $10; //@line 4606
     $49 = $ReallocAsyncCtx8 + 16 | 0; //@line 4607
     HEAP32[$49 >> 2] = $12; //@line 4608
     $50 = $ReallocAsyncCtx8 + 20 | 0; //@line 4609
     HEAP32[$50 >> 2] = $27; //@line 4610
     $51 = $ReallocAsyncCtx8 + 24 | 0; //@line 4611
     HEAP32[$51 >> 2] = $39; //@line 4612
     $52 = $ReallocAsyncCtx8 + 28 | 0; //@line 4613
     HEAP32[$52 >> 2] = $16; //@line 4614
     $53 = $ReallocAsyncCtx8 + 32 | 0; //@line 4615
     HEAP32[$53 >> 2] = $2; //@line 4616
     $54 = $ReallocAsyncCtx8 + 36 | 0; //@line 4617
     HEAP32[$54 >> 2] = $41; //@line 4618
     $55 = $ReallocAsyncCtx8 + 40 | 0; //@line 4619
     HEAP32[$55 >> 2] = $4; //@line 4620
     sp = STACKTOP; //@line 4621
     return;
    }
    ___async_unwind = 0; //@line 4624
    HEAP32[$ReallocAsyncCtx8 >> 2] = 213; //@line 4625
    $46 = $ReallocAsyncCtx8 + 4 | 0; //@line 4626
    HEAP32[$46 >> 2] = $8; //@line 4627
    $47 = $ReallocAsyncCtx8 + 8 | 0; //@line 4628
    HEAP32[$47 >> 2] = $14; //@line 4629
    $48 = $ReallocAsyncCtx8 + 12 | 0; //@line 4630
    HEAP32[$48 >> 2] = $10; //@line 4631
    $49 = $ReallocAsyncCtx8 + 16 | 0; //@line 4632
    HEAP32[$49 >> 2] = $12; //@line 4633
    $50 = $ReallocAsyncCtx8 + 20 | 0; //@line 4634
    HEAP32[$50 >> 2] = $27; //@line 4635
    $51 = $ReallocAsyncCtx8 + 24 | 0; //@line 4636
    HEAP32[$51 >> 2] = $39; //@line 4637
    $52 = $ReallocAsyncCtx8 + 28 | 0; //@line 4638
    HEAP32[$52 >> 2] = $16; //@line 4639
    $53 = $ReallocAsyncCtx8 + 32 | 0; //@line 4640
    HEAP32[$53 >> 2] = $2; //@line 4641
    $54 = $ReallocAsyncCtx8 + 36 | 0; //@line 4642
    HEAP32[$54 >> 2] = $41; //@line 4643
    $55 = $ReallocAsyncCtx8 + 40 | 0; //@line 4644
    HEAP32[$55 >> 2] = $4; //@line 4645
    sp = STACKTOP; //@line 4646
    return;
   }
   $56 = $8 + 44 | 0; //@line 4649
   $57 = HEAP32[$56 >> 2] | 0; //@line 4650
   if (!$57) {
    HEAP32[$41 >> 2] = 0; //@line 4653
    $$pre85 = HEAP32[$4 >> 2] | 0; //@line 4654
    $73 = $$pre85; //@line 4656
    $75 = $$pre85; //@line 4656
    break;
   }
   $60 = HEAP32[$57 + 4 >> 2] | 0; //@line 4660
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 4661
   FUNCTION_TABLE_vii[$60 & 7]($27, $39); //@line 4662
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 4665
    $61 = $ReallocAsyncCtx9 + 4 | 0; //@line 4666
    HEAP32[$61 >> 2] = $56; //@line 4667
    $62 = $ReallocAsyncCtx9 + 8 | 0; //@line 4668
    HEAP32[$62 >> 2] = $41; //@line 4669
    $63 = $ReallocAsyncCtx9 + 12 | 0; //@line 4670
    HEAP32[$63 >> 2] = $4; //@line 4671
    $64 = $ReallocAsyncCtx9 + 16 | 0; //@line 4672
    HEAP32[$64 >> 2] = $16; //@line 4673
    $65 = $ReallocAsyncCtx9 + 20 | 0; //@line 4674
    HEAP32[$65 >> 2] = $14; //@line 4675
    $66 = $ReallocAsyncCtx9 + 24 | 0; //@line 4676
    HEAP32[$66 >> 2] = $2; //@line 4677
    $67 = $ReallocAsyncCtx9 + 28 | 0; //@line 4678
    HEAP32[$67 >> 2] = $10; //@line 4679
    $68 = $ReallocAsyncCtx9 + 32 | 0; //@line 4680
    HEAP32[$68 >> 2] = $12; //@line 4681
    $69 = $ReallocAsyncCtx9 + 36 | 0; //@line 4682
    HEAP32[$69 >> 2] = $8; //@line 4683
    sp = STACKTOP; //@line 4684
    return;
   }
   ___async_unwind = 0; //@line 4687
   HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 4688
   $61 = $ReallocAsyncCtx9 + 4 | 0; //@line 4689
   HEAP32[$61 >> 2] = $56; //@line 4690
   $62 = $ReallocAsyncCtx9 + 8 | 0; //@line 4691
   HEAP32[$62 >> 2] = $41; //@line 4692
   $63 = $ReallocAsyncCtx9 + 12 | 0; //@line 4693
   HEAP32[$63 >> 2] = $4; //@line 4694
   $64 = $ReallocAsyncCtx9 + 16 | 0; //@line 4695
   HEAP32[$64 >> 2] = $16; //@line 4696
   $65 = $ReallocAsyncCtx9 + 20 | 0; //@line 4697
   HEAP32[$65 >> 2] = $14; //@line 4698
   $66 = $ReallocAsyncCtx9 + 24 | 0; //@line 4699
   HEAP32[$66 >> 2] = $2; //@line 4700
   $67 = $ReallocAsyncCtx9 + 28 | 0; //@line 4701
   HEAP32[$67 >> 2] = $10; //@line 4702
   $68 = $ReallocAsyncCtx9 + 32 | 0; //@line 4703
   HEAP32[$68 >> 2] = $12; //@line 4704
   $69 = $ReallocAsyncCtx9 + 36 | 0; //@line 4705
   HEAP32[$69 >> 2] = $8; //@line 4706
   sp = STACKTOP; //@line 4707
   return;
  }
 } while (0);
 HEAP32[$73 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 4713
 HEAP32[$14 + 8 >> 2] = 0; //@line 4715
 HEAP32[$14 >> 2] = 215; //@line 4716
 HEAP32[$14 + 4 >> 2] = $75; //@line 4718
 $76 = $14 + 12 | 0; //@line 4719
 HEAP32[$76 >> 2] = 724; //@line 4720
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 4721
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($2, $14); //@line 4722
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 4725
  $77 = $ReallocAsyncCtx18 + 4 | 0; //@line 4726
  HEAP32[$77 >> 2] = $76; //@line 4727
  $78 = $ReallocAsyncCtx18 + 8 | 0; //@line 4728
  HEAP32[$78 >> 2] = $10; //@line 4729
  $79 = $ReallocAsyncCtx18 + 12 | 0; //@line 4730
  HEAP32[$79 >> 2] = $12; //@line 4731
  $80 = $ReallocAsyncCtx18 + 16 | 0; //@line 4732
  HEAP32[$80 >> 2] = $14; //@line 4733
  $81 = $ReallocAsyncCtx18 + 20 | 0; //@line 4734
  HEAP32[$81 >> 2] = $8; //@line 4735
  sp = STACKTOP; //@line 4736
  return;
 }
 ___async_unwind = 0; //@line 4739
 HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 4740
 $77 = $ReallocAsyncCtx18 + 4 | 0; //@line 4741
 HEAP32[$77 >> 2] = $76; //@line 4742
 $78 = $ReallocAsyncCtx18 + 8 | 0; //@line 4743
 HEAP32[$78 >> 2] = $10; //@line 4744
 $79 = $ReallocAsyncCtx18 + 12 | 0; //@line 4745
 HEAP32[$79 >> 2] = $12; //@line 4746
 $80 = $ReallocAsyncCtx18 + 16 | 0; //@line 4747
 HEAP32[$80 >> 2] = $14; //@line 4748
 $81 = $ReallocAsyncCtx18 + 20 | 0; //@line 4749
 HEAP32[$81 >> 2] = $8; //@line 4750
 sp = STACKTOP; //@line 4751
 return;
}
function __ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$2 = 0, $$2$1 = 0, $$2$us = 0, $$2$us$1 = 0, $$pre = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $$pre37 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $106 = 0, $111 = 0, $118 = 0, $12 = 0, $122 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $134 = 0, $139 = 0, $152 = 0, $157 = 0, $160 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $17 = 0, $173 = 0, $186 = 0, $191 = 0, $194 = 0, $24 = 0, $28 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $47 = 0, $54 = 0, $57 = 0, $6 = 0, $65 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $76 = 0, $81 = 0, $88 = 0, $9 = 0, $92 = 0, $98 = 0, label = 0;
 $4 = ($2 | 0) == 0; //@line 6020
 $6 = (HEAP32[1682] | 0) == 0; //@line 6022
 if (!$1) {
  do {
   if ($6) {
    $$2$us = -3006; //@line 6026
   } else {
    $7 = _emscripten_asm_const_i(9) | 0; //@line 6028
    $9 = (($7 | 0) < 0) << 31 >> 31; //@line 6030
    $10 = HEAP32[1682] | 0; //@line 6031
    $12 = $10 + 24 | 0; //@line 6033
    $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 6038
    $24 = HEAP32[$10 + 20 >> 2] | 0; //@line 6045
    if ($17 >>> 0 < $9 >>> 0 | (($17 | 0) == ($9 | 0) ? (HEAP32[$12 >> 2] | 0) >>> 0 < $7 >>> 0 : 0)) {
     if (!$24) {
      $34 = $10; //@line 6049
      label = 11; //@line 6050
     } else {
      __ZdlPv($24); //@line 6052
      $$pre35 = HEAP32[1682] | 0; //@line 6053
      if ($$pre35 | 0) {
       $34 = $$pre35; //@line 6056
       label = 11; //@line 6057
      }
     }
     if ((label | 0) == 11) {
      __ZdlPv($34); //@line 6061
     }
     HEAP32[1682] = 0; //@line 6063
     $$2$us = -3006; //@line 6064
     break;
    } else {
     if (_strcmp($24, $0) | 0) {
      $$2$us = -3006; //@line 6070
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$10 >> 2]; //@line 6074
      HEAP32[$2 + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 6074
      HEAP32[$2 + 8 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 6074
      HEAP32[$2 + 12 >> 2] = HEAP32[$10 + 12 >> 2]; //@line 6074
      HEAP32[$2 + 16 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 6074
     }
     $28 = $10 + 32 | 0; //@line 6077
     HEAP32[$28 >> 2] = $7; //@line 6079
     HEAP32[$28 + 4 >> 2] = $9; //@line 6082
     $$2$us = 0; //@line 6083
     break;
    }
   }
  } while (0);
  do {
   if (!(HEAP32[1683] | 0)) {
    $$2$us$1 = $$2$us; //@line 6092
   } else {
    $71 = _emscripten_asm_const_i(9) | 0; //@line 6094
    $73 = (($71 | 0) < 0) << 31 >> 31; //@line 6096
    $74 = HEAP32[1683] | 0; //@line 6097
    $76 = $74 + 24 | 0; //@line 6099
    $81 = HEAP32[$76 + 4 >> 2] | 0; //@line 6104
    $88 = HEAP32[$74 + 20 >> 2] | 0; //@line 6111
    if ($81 >>> 0 < $73 >>> 0 | (($81 | 0) == ($73 | 0) ? (HEAP32[$76 >> 2] | 0) >>> 0 < $71 >>> 0 : 0)) {
     if (!$88) {
      $98 = $74; //@line 6115
      label = 33; //@line 6116
     } else {
      __ZdlPv($88); //@line 6118
      $$pre36 = HEAP32[1683] | 0; //@line 6119
      if ($$pre36 | 0) {
       $98 = $$pre36; //@line 6122
       label = 33; //@line 6123
      }
     }
     if ((label | 0) == 33) {
      __ZdlPv($98); //@line 6127
     }
     HEAP32[1683] = 0; //@line 6129
     $$2$us$1 = $$2$us; //@line 6130
     break;
    } else {
     if (_strcmp($88, $0) | 0) {
      $$2$us$1 = $$2$us; //@line 6136
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$74 >> 2]; //@line 6140
      HEAP32[$2 + 4 >> 2] = HEAP32[$74 + 4 >> 2]; //@line 6140
      HEAP32[$2 + 8 >> 2] = HEAP32[$74 + 8 >> 2]; //@line 6140
      HEAP32[$2 + 12 >> 2] = HEAP32[$74 + 12 >> 2]; //@line 6140
      HEAP32[$2 + 16 >> 2] = HEAP32[$74 + 16 >> 2]; //@line 6140
     }
     $92 = $74 + 32 | 0; //@line 6143
     HEAP32[$92 >> 2] = $71; //@line 6145
     HEAP32[$92 + 4 >> 2] = $73; //@line 6148
     $$2$us$1 = 0; //@line 6149
     break;
    }
   }
  } while (0);
  if (!(HEAP32[1684] | 0)) {
   $$0$lcssa = $$2$us$1; //@line 6157
   return $$0$lcssa | 0; //@line 6158
  }
  $101 = _emscripten_asm_const_i(9) | 0; //@line 6160
  $103 = (($101 | 0) < 0) << 31 >> 31; //@line 6162
  $104 = HEAP32[1684] | 0; //@line 6163
  $106 = $104 + 24 | 0; //@line 6165
  $111 = HEAP32[$106 + 4 >> 2] | 0; //@line 6170
  $118 = HEAP32[$104 + 20 >> 2] | 0; //@line 6177
  if ($111 >>> 0 < $103 >>> 0 | (($111 | 0) == ($103 | 0) ? (HEAP32[$106 >> 2] | 0) >>> 0 < $101 >>> 0 : 0)) {
   if (!$118) {
    $128 = $104; //@line 6181
    label = 43; //@line 6182
   } else {
    __ZdlPv($118); //@line 6184
    $$pre37 = HEAP32[1684] | 0; //@line 6185
    if ($$pre37 | 0) {
     $128 = $$pre37; //@line 6188
     label = 43; //@line 6189
    }
   }
   if ((label | 0) == 43) {
    __ZdlPv($128); //@line 6193
   }
   HEAP32[1684] = 0; //@line 6195
   $$0$lcssa = $$2$us$1; //@line 6196
   return $$0$lcssa | 0; //@line 6197
  }
  if (_strcmp($118, $0) | 0) {
   $$0$lcssa = $$2$us$1; //@line 6202
   return $$0$lcssa | 0; //@line 6203
  }
  if (!$4) {
   HEAP32[$2 >> 2] = HEAP32[$104 >> 2]; //@line 6206
   HEAP32[$2 + 4 >> 2] = HEAP32[$104 + 4 >> 2]; //@line 6206
   HEAP32[$2 + 8 >> 2] = HEAP32[$104 + 8 >> 2]; //@line 6206
   HEAP32[$2 + 12 >> 2] = HEAP32[$104 + 12 >> 2]; //@line 6206
   HEAP32[$2 + 16 >> 2] = HEAP32[$104 + 16 >> 2]; //@line 6206
  }
  $122 = $104 + 32 | 0; //@line 6209
  HEAP32[$122 >> 2] = $101; //@line 6211
  HEAP32[$122 + 4 >> 2] = $103; //@line 6214
  $$0$lcssa = 0; //@line 6215
  return $$0$lcssa | 0; //@line 6216
 }
 do {
  if ($6) {
   $$2 = -3006; //@line 6220
  } else {
   $37 = _emscripten_asm_const_i(9) | 0; //@line 6222
   $39 = (($37 | 0) < 0) << 31 >> 31; //@line 6224
   $40 = HEAP32[1682] | 0; //@line 6225
   $42 = $40 + 24 | 0; //@line 6227
   $47 = HEAP32[$42 + 4 >> 2] | 0; //@line 6232
   if ($47 >>> 0 < $39 >>> 0 | (($47 | 0) == ($39 | 0) ? (HEAP32[$42 >> 2] | 0) >>> 0 < $37 >>> 0 : 0)) {
    $54 = HEAP32[$40 + 20 >> 2] | 0; //@line 6240
    if (!$54) {
     $57 = $40; //@line 6243
     label = 18; //@line 6244
    } else {
     __ZdlPv($54); //@line 6246
     $$pre = HEAP32[1682] | 0; //@line 6247
     if ($$pre | 0) {
      $57 = $$pre; //@line 6250
      label = 18; //@line 6251
     }
    }
    if ((label | 0) == 18) {
     __ZdlPv($57); //@line 6255
    }
    HEAP32[1682] = 0; //@line 6257
    $$2 = -3006; //@line 6258
    break;
   }
   if ((HEAP32[$40 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$40 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$40 >> 2]; //@line 6270
      HEAP32[$2 + 4 >> 2] = HEAP32[$40 + 4 >> 2]; //@line 6270
      HEAP32[$2 + 8 >> 2] = HEAP32[$40 + 8 >> 2]; //@line 6270
      HEAP32[$2 + 12 >> 2] = HEAP32[$40 + 12 >> 2]; //@line 6270
      HEAP32[$2 + 16 >> 2] = HEAP32[$40 + 16 >> 2]; //@line 6270
     }
     $65 = $40 + 32 | 0; //@line 6273
     HEAP32[$65 >> 2] = $37; //@line 6275
     HEAP32[$65 + 4 >> 2] = $39; //@line 6278
     $$2 = 0; //@line 6279
    } else {
     $$2 = -3006; //@line 6281
    }
   } else {
    $$2 = -3006; //@line 6284
   }
  }
 } while (0);
 do {
  if (!(HEAP32[1683] | 0)) {
   $$2$1 = $$2; //@line 6292
  } else {
   $129 = _emscripten_asm_const_i(9) | 0; //@line 6294
   $131 = (($129 | 0) < 0) << 31 >> 31; //@line 6296
   $132 = HEAP32[1683] | 0; //@line 6297
   $134 = $132 + 24 | 0; //@line 6299
   $139 = HEAP32[$134 + 4 >> 2] | 0; //@line 6304
   if ($139 >>> 0 < $131 >>> 0 | (($139 | 0) == ($131 | 0) ? (HEAP32[$134 >> 2] | 0) >>> 0 < $129 >>> 0 : 0)) {
    $157 = HEAP32[$132 + 20 >> 2] | 0; //@line 6312
    if (!$157) {
     $160 = $132; //@line 6315
     label = 53; //@line 6316
    } else {
     __ZdlPv($157); //@line 6318
     $$pre33 = HEAP32[1683] | 0; //@line 6319
     if ($$pre33 | 0) {
      $160 = $$pre33; //@line 6322
      label = 53; //@line 6323
     }
    }
    if ((label | 0) == 53) {
     __ZdlPv($160); //@line 6327
    }
    HEAP32[1683] = 0; //@line 6329
    $$2$1 = $$2; //@line 6330
    break;
   }
   if ((HEAP32[$132 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$132 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$132 >> 2]; //@line 6342
      HEAP32[$2 + 4 >> 2] = HEAP32[$132 + 4 >> 2]; //@line 6342
      HEAP32[$2 + 8 >> 2] = HEAP32[$132 + 8 >> 2]; //@line 6342
      HEAP32[$2 + 12 >> 2] = HEAP32[$132 + 12 >> 2]; //@line 6342
      HEAP32[$2 + 16 >> 2] = HEAP32[$132 + 16 >> 2]; //@line 6342
     }
     $152 = $132 + 32 | 0; //@line 6345
     HEAP32[$152 >> 2] = $129; //@line 6347
     HEAP32[$152 + 4 >> 2] = $131; //@line 6350
     $$2$1 = 0; //@line 6351
    } else {
     $$2$1 = $$2; //@line 6353
    }
   } else {
    $$2$1 = $$2; //@line 6356
   }
  }
 } while (0);
 if (!(HEAP32[1684] | 0)) {
  $$0$lcssa = $$2$1; //@line 6363
  return $$0$lcssa | 0; //@line 6364
 }
 $163 = _emscripten_asm_const_i(9) | 0; //@line 6366
 $165 = (($163 | 0) < 0) << 31 >> 31; //@line 6368
 $166 = HEAP32[1684] | 0; //@line 6369
 $168 = $166 + 24 | 0; //@line 6371
 $173 = HEAP32[$168 + 4 >> 2] | 0; //@line 6376
 if ($173 >>> 0 < $165 >>> 0 | (($173 | 0) == ($165 | 0) ? (HEAP32[$168 >> 2] | 0) >>> 0 < $163 >>> 0 : 0)) {
  $191 = HEAP32[$166 + 20 >> 2] | 0; //@line 6384
  if (!$191) {
   $194 = $166; //@line 6387
   label = 64; //@line 6388
  } else {
   __ZdlPv($191); //@line 6390
   $$pre34 = HEAP32[1684] | 0; //@line 6391
   if ($$pre34 | 0) {
    $194 = $$pre34; //@line 6394
    label = 64; //@line 6395
   }
  }
  if ((label | 0) == 64) {
   __ZdlPv($194); //@line 6399
  }
  HEAP32[1684] = 0; //@line 6401
  $$0$lcssa = $$2$1; //@line 6402
  return $$0$lcssa | 0; //@line 6403
 }
 if ((HEAP32[$166 >> 2] | 0) != ($1 | 0)) {
  $$0$lcssa = $$2$1; //@line 6408
  return $$0$lcssa | 0; //@line 6409
 }
 if (_strcmp(HEAP32[$166 + 20 >> 2] | 0, $0) | 0) {
  $$0$lcssa = $$2$1; //@line 6416
  return $$0$lcssa | 0; //@line 6417
 }
 if (!$4) {
  HEAP32[$2 >> 2] = HEAP32[$166 >> 2]; //@line 6420
  HEAP32[$2 + 4 >> 2] = HEAP32[$166 + 4 >> 2]; //@line 6420
  HEAP32[$2 + 8 >> 2] = HEAP32[$166 + 8 >> 2]; //@line 6420
  HEAP32[$2 + 12 >> 2] = HEAP32[$166 + 12 >> 2]; //@line 6420
  HEAP32[$2 + 16 >> 2] = HEAP32[$166 + 16 >> 2]; //@line 6420
 }
 $186 = $166 + 32 | 0; //@line 6423
 HEAP32[$186 >> 2] = $163; //@line 6425
 HEAP32[$186 + 4 >> 2] = $165; //@line 6428
 $$0$lcssa = 0; //@line 6429
 return $$0$lcssa | 0; //@line 6430
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15144
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15150
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 15159
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 15164
      $19 = $1 + 44 | 0; //@line 15165
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 15174
      $26 = $1 + 52 | 0; //@line 15175
      $27 = $1 + 53 | 0; //@line 15176
      $28 = $1 + 54 | 0; //@line 15177
      $29 = $0 + 8 | 0; //@line 15178
      $30 = $1 + 24 | 0; //@line 15179
      $$081$off0 = 0; //@line 15180
      $$084 = $0 + 16 | 0; //@line 15180
      $$085$off0 = 0; //@line 15180
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 15184
        label = 20; //@line 15185
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 15188
       HEAP8[$27 >> 0] = 0; //@line 15189
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 15190
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 15191
       if (___async) {
        label = 12; //@line 15194
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15197
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 15201
        label = 20; //@line 15202
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 15209
         $$186$off0 = $$085$off0; //@line 15209
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 15218
           label = 20; //@line 15219
           break L10;
          } else {
           $$182$off0 = 1; //@line 15222
           $$186$off0 = $$085$off0; //@line 15222
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 15229
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 15236
          break L10;
         } else {
          $$182$off0 = 1; //@line 15239
          $$186$off0 = 1; //@line 15239
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 15244
       $$084 = $$084 + 8 | 0; //@line 15244
       $$085$off0 = $$186$off0; //@line 15244
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 344; //@line 15247
       HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 15249
       HEAP32[$AsyncCtx15 + 8 >> 2] = $25; //@line 15251
       HEAP32[$AsyncCtx15 + 12 >> 2] = $26; //@line 15253
       HEAP32[$AsyncCtx15 + 16 >> 2] = $27; //@line 15255
       HEAP32[$AsyncCtx15 + 20 >> 2] = $1; //@line 15257
       HEAP32[$AsyncCtx15 + 24 >> 2] = $2; //@line 15259
       HEAP8[$AsyncCtx15 + 28 >> 0] = $4 & 1; //@line 15262
       HEAP32[$AsyncCtx15 + 32 >> 2] = $30; //@line 15264
       HEAP32[$AsyncCtx15 + 36 >> 2] = $29; //@line 15266
       HEAP8[$AsyncCtx15 + 40 >> 0] = $$085$off0 & 1; //@line 15269
       HEAP8[$AsyncCtx15 + 41 >> 0] = $$081$off0 & 1; //@line 15272
       HEAP32[$AsyncCtx15 + 44 >> 2] = $$084; //@line 15274
       HEAP32[$AsyncCtx15 + 48 >> 2] = $13; //@line 15276
       HEAP32[$AsyncCtx15 + 52 >> 2] = $19; //@line 15278
       sp = STACKTOP; //@line 15279
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 15285
         $61 = $1 + 40 | 0; //@line 15286
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 15289
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 15297
           if ($$283$off0) {
            label = 25; //@line 15299
            break;
           } else {
            $69 = 4; //@line 15302
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 15309
        } else {
         $69 = 4; //@line 15311
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 15316
      }
      HEAP32[$19 >> 2] = $69; //@line 15318
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 15327
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 15332
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 15333
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15334
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 15335
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 345; //@line 15338
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 15340
    HEAP32[$AsyncCtx11 + 8 >> 2] = $73; //@line 15342
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 15344
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 15346
    HEAP8[$AsyncCtx11 + 20 >> 0] = $4 & 1; //@line 15349
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 15351
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 15353
    sp = STACKTOP; //@line 15354
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15357
   $81 = $0 + 24 | 0; //@line 15358
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 15362
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 15366
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 15373
       $$2 = $81; //@line 15374
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 15386
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 15387
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 15392
        $136 = $$2 + 8 | 0; //@line 15393
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 15396
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 348; //@line 15401
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 15403
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 15405
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 15407
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 15409
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 15411
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 15413
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 15415
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 15418
       sp = STACKTOP; //@line 15419
       return;
      }
      $104 = $1 + 24 | 0; //@line 15422
      $105 = $1 + 54 | 0; //@line 15423
      $$1 = $81; //@line 15424
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15440
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 15441
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15446
       $122 = $$1 + 8 | 0; //@line 15447
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 15450
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 347; //@line 15455
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 15457
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 15459
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 15461
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 15463
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 15465
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 15467
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 15469
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 15471
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 15474
      sp = STACKTOP; //@line 15475
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 15479
    $$0 = $81; //@line 15480
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15487
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 15488
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15493
     $100 = $$0 + 8 | 0; //@line 15494
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 15497
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 346; //@line 15502
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 15504
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 15506
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 15508
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 15510
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 15512
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 15514
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 15517
    sp = STACKTOP; //@line 15518
    return;
   }
  }
 } while (0);
 return;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 7
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 8
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 9
 $d_sroa_0_0_extract_trunc = $b$0; //@line 10
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 11
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 12
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 14
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 17
    HEAP32[$rem + 4 >> 2] = 0; //@line 18
   }
   $_0$1 = 0; //@line 20
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 21
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 22
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 25
    $_0$0 = 0; //@line 26
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 27
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 29
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 30
   $_0$1 = 0; //@line 31
   $_0$0 = 0; //@line 32
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 36
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 41
     HEAP32[$rem + 4 >> 2] = 0; //@line 42
    }
    $_0$1 = 0; //@line 44
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 45
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 46
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 50
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 51
    }
    $_0$1 = 0; //@line 53
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 54
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 55
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 57
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 60
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 61
    }
    $_0$1 = 0; //@line 63
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 64
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 65
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 68
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 70
    $58 = 31 - $51 | 0; //@line 71
    $sr_1_ph = $57; //@line 72
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 73
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 74
    $q_sroa_0_1_ph = 0; //@line 75
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 76
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 80
    $_0$0 = 0; //@line 81
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 82
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 84
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 85
   $_0$1 = 0; //@line 86
   $_0$0 = 0; //@line 87
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 88
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 92
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 94
     $126 = 31 - $119 | 0; //@line 95
     $130 = $119 - 31 >> 31; //@line 96
     $sr_1_ph = $125; //@line 97
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 98
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 99
     $q_sroa_0_1_ph = 0; //@line 100
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 101
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 105
     $_0$0 = 0; //@line 106
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 107
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 109
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 110
    $_0$1 = 0; //@line 111
    $_0$0 = 0; //@line 112
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 113
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 115
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 118
    $89 = 64 - $88 | 0; //@line 119
    $91 = 32 - $88 | 0; //@line 120
    $92 = $91 >> 31; //@line 121
    $95 = $88 - 32 | 0; //@line 122
    $105 = $95 >> 31; //@line 123
    $sr_1_ph = $88; //@line 124
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 125
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 126
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 127
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 128
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 132
    HEAP32[$rem + 4 >> 2] = 0; //@line 133
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 136
    $_0$0 = $a$0 | 0 | 0; //@line 137
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 138
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 140
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 141
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 142
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 143
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 148
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 149
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 150
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 151
  $carry_0_lcssa$1 = 0; //@line 152
  $carry_0_lcssa$0 = 0; //@line 153
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 155
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 156
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 157
  $137$1 = tempRet0; //@line 158
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 159
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 160
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 161
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 162
  $sr_1202 = $sr_1_ph; //@line 163
  $carry_0203 = 0; //@line 164
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 166
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 167
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 168
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 169
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 170
   $150$1 = tempRet0; //@line 171
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 172
   $carry_0203 = $151$0 & 1; //@line 173
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 175
   $r_sroa_1_1200 = tempRet0; //@line 176
   $sr_1202 = $sr_1202 - 1 | 0; //@line 177
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 189
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 190
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 191
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 192
  $carry_0_lcssa$1 = 0; //@line 193
  $carry_0_lcssa$0 = $carry_0203; //@line 194
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 196
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 197
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 200
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 201
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 203
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 204
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 205
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1105 = 0, $$3100 = 0, $$byval_copy = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20779
 STACKTOP = STACKTOP + 32 | 0; //@line 20780
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 20780
 $$byval_copy = sp; //@line 20781
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 20783
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20785
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 20787
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20789
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20791
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20793
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20795
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20797
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20799
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20801
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20803
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20805
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20807
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20809
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20811
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20813
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20815
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20817
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20819
 $40 = HEAP8[$0 + 80 >> 0] | 0; //@line 20821
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 20823
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20825
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 20827
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 20829
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 20831
 $52 = HEAP8[$0 + 104 >> 0] | 0; //@line 20833
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 20835
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  $59 = 608 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 20842
  HEAP32[$$byval_copy >> 2] = HEAP32[$59 >> 2]; //@line 20843
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$59 + 4 >> 2]; //@line 20843
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$59 + 8 >> 2]; //@line 20843
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$59 + 12 >> 2]; //@line 20843
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$59 + 16 >> 2]; //@line 20843
  __ZN13SocketAddress8set_addrE10nsapi_addr($4, $$byval_copy); //@line 20844
  $$1105 = $2; //@line 20845
  $$3100 = 5; //@line 20845
 } else {
  $$1105 = $2; //@line 20847
  $$3100 = $6; //@line 20847
 }
 __ZN13SocketAddress8set_portEt($4, 53); //@line 20849
 HEAP8[$8 >> 0] = 0; //@line 20850
 HEAP8[$10 >> 0] = 1; //@line 20851
 HEAP8[$12 >> 0] = 1; //@line 20852
 HEAP8[$14 >> 0] = 0; //@line 20853
 HEAP8[$16 >> 0] = 0; //@line 20854
 HEAP8[$18 >> 0] = 1; //@line 20855
 HEAP8[$20 >> 0] = 0; //@line 20856
 HEAP8[$20 + 1 >> 0] = 0; //@line 20856
 HEAP8[$20 + 2 >> 0] = 0; //@line 20856
 HEAP8[$20 + 3 >> 0] = 0; //@line 20856
 HEAP8[$20 + 4 >> 0] = 0; //@line 20856
 HEAP8[$20 + 5 >> 0] = 0; //@line 20856
 if (!(HEAP8[$22 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $50; //@line 20860
 } else {
  $$048$i = $22; //@line 20862
  $$sroa$0$0$in47$i = $50; //@line 20862
  while (1) {
   $62 = _strcspn($$048$i, 4016) | 0; //@line 20864
   $64 = $$sroa$0$0$in47$i + 1 | 0; //@line 20866
   HEAP8[$$sroa$0$0$in47$i >> 0] = $62; //@line 20867
   $65 = $62 & 255; //@line 20868
   _memcpy($64 | 0, $$048$i | 0, $65 | 0) | 0; //@line 20869
   $66 = $64 + $65 | 0; //@line 20870
   $$048$i = $$048$i + ($62 + ((HEAP8[$$048$i + $62 >> 0] | 0) == 46 & 1)) | 0; //@line 20876
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $66; //@line 20880
    break;
   } else {
    $$sroa$0$0$in47$i = $66; //@line 20883
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 20888
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 20890
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $52; //@line 20892
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 20894
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 20897
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 20899
 $82 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($34, $4, $8, $$sroa$0$0$in$lcssa$i + 5 - $54 | 0) | 0; //@line 20900
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 20903
  $83 = $ReallocAsyncCtx4 + 4 | 0; //@line 20904
  HEAP32[$83 >> 2] = $4; //@line 20905
  $84 = $ReallocAsyncCtx4 + 8 | 0; //@line 20906
  HEAP32[$84 >> 2] = $8; //@line 20907
  $85 = $ReallocAsyncCtx4 + 12 | 0; //@line 20908
  HEAP32[$85 >> 2] = $10; //@line 20909
  $86 = $ReallocAsyncCtx4 + 16 | 0; //@line 20910
  HEAP32[$86 >> 2] = $12; //@line 20911
  $87 = $ReallocAsyncCtx4 + 20 | 0; //@line 20912
  HEAP32[$87 >> 2] = $14; //@line 20913
  $88 = $ReallocAsyncCtx4 + 24 | 0; //@line 20914
  HEAP32[$88 >> 2] = $16; //@line 20915
  $89 = $ReallocAsyncCtx4 + 28 | 0; //@line 20916
  HEAP32[$89 >> 2] = $18; //@line 20917
  $90 = $ReallocAsyncCtx4 + 32 | 0; //@line 20918
  HEAP32[$90 >> 2] = $20; //@line 20919
  $91 = $ReallocAsyncCtx4 + 36 | 0; //@line 20920
  HEAP32[$91 >> 2] = $22; //@line 20921
  $92 = $ReallocAsyncCtx4 + 40 | 0; //@line 20922
  HEAP32[$92 >> 2] = $24; //@line 20923
  $93 = $ReallocAsyncCtx4 + 44 | 0; //@line 20924
  HEAP32[$93 >> 2] = $26; //@line 20925
  $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 20926
  HEAP8[$94 >> 0] = $$3100; //@line 20927
  $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 20928
  HEAP32[$95 >> 2] = $28; //@line 20929
  $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 20930
  HEAP32[$96 >> 2] = $30; //@line 20931
  $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 20932
  HEAP32[$97 >> 2] = $32; //@line 20933
  $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 20934
  HEAP32[$98 >> 2] = $38; //@line 20935
  $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 20936
  HEAP32[$99 >> 2] = $36; //@line 20937
  $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 20938
  HEAP32[$100 >> 2] = $34; //@line 20939
  $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 20940
  HEAP32[$101 >> 2] = $48; //@line 20941
  $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 20942
  HEAP8[$102 >> 0] = $40; //@line 20943
  $103 = $ReallocAsyncCtx4 + 81 | 0; //@line 20944
  HEAP8[$103 >> 0] = $$1105; //@line 20945
  $104 = $ReallocAsyncCtx4 + 84 | 0; //@line 20946
  HEAP32[$104 >> 2] = $42; //@line 20947
  $105 = $ReallocAsyncCtx4 + 88 | 0; //@line 20948
  HEAP32[$105 >> 2] = $44; //@line 20949
  $106 = $ReallocAsyncCtx4 + 92 | 0; //@line 20950
  HEAP32[$106 >> 2] = $46; //@line 20951
  $107 = $ReallocAsyncCtx4 + 96 | 0; //@line 20952
  HEAP32[$107 >> 2] = $50; //@line 20953
  $108 = $ReallocAsyncCtx4 + 100 | 0; //@line 20954
  HEAP8[$108 >> 0] = $52; //@line 20955
  $109 = $ReallocAsyncCtx4 + 104 | 0; //@line 20956
  HEAP32[$109 >> 2] = $54; //@line 20957
  sp = STACKTOP; //@line 20958
  STACKTOP = sp; //@line 20959
  return;
 }
 HEAP32[___async_retval >> 2] = $82; //@line 20962
 ___async_unwind = 0; //@line 20963
 HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 20964
 $83 = $ReallocAsyncCtx4 + 4 | 0; //@line 20965
 HEAP32[$83 >> 2] = $4; //@line 20966
 $84 = $ReallocAsyncCtx4 + 8 | 0; //@line 20967
 HEAP32[$84 >> 2] = $8; //@line 20968
 $85 = $ReallocAsyncCtx4 + 12 | 0; //@line 20969
 HEAP32[$85 >> 2] = $10; //@line 20970
 $86 = $ReallocAsyncCtx4 + 16 | 0; //@line 20971
 HEAP32[$86 >> 2] = $12; //@line 20972
 $87 = $ReallocAsyncCtx4 + 20 | 0; //@line 20973
 HEAP32[$87 >> 2] = $14; //@line 20974
 $88 = $ReallocAsyncCtx4 + 24 | 0; //@line 20975
 HEAP32[$88 >> 2] = $16; //@line 20976
 $89 = $ReallocAsyncCtx4 + 28 | 0; //@line 20977
 HEAP32[$89 >> 2] = $18; //@line 20978
 $90 = $ReallocAsyncCtx4 + 32 | 0; //@line 20979
 HEAP32[$90 >> 2] = $20; //@line 20980
 $91 = $ReallocAsyncCtx4 + 36 | 0; //@line 20981
 HEAP32[$91 >> 2] = $22; //@line 20982
 $92 = $ReallocAsyncCtx4 + 40 | 0; //@line 20983
 HEAP32[$92 >> 2] = $24; //@line 20984
 $93 = $ReallocAsyncCtx4 + 44 | 0; //@line 20985
 HEAP32[$93 >> 2] = $26; //@line 20986
 $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 20987
 HEAP8[$94 >> 0] = $$3100; //@line 20988
 $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 20989
 HEAP32[$95 >> 2] = $28; //@line 20990
 $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 20991
 HEAP32[$96 >> 2] = $30; //@line 20992
 $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 20993
 HEAP32[$97 >> 2] = $32; //@line 20994
 $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 20995
 HEAP32[$98 >> 2] = $38; //@line 20996
 $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 20997
 HEAP32[$99 >> 2] = $36; //@line 20998
 $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 20999
 HEAP32[$100 >> 2] = $34; //@line 21000
 $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 21001
 HEAP32[$101 >> 2] = $48; //@line 21002
 $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 21003
 HEAP8[$102 >> 0] = $40; //@line 21004
 $103 = $ReallocAsyncCtx4 + 81 | 0; //@line 21005
 HEAP8[$103 >> 0] = $$1105; //@line 21006
 $104 = $ReallocAsyncCtx4 + 84 | 0; //@line 21007
 HEAP32[$104 >> 2] = $42; //@line 21008
 $105 = $ReallocAsyncCtx4 + 88 | 0; //@line 21009
 HEAP32[$105 >> 2] = $44; //@line 21010
 $106 = $ReallocAsyncCtx4 + 92 | 0; //@line 21011
 HEAP32[$106 >> 2] = $46; //@line 21012
 $107 = $ReallocAsyncCtx4 + 96 | 0; //@line 21013
 HEAP32[$107 >> 2] = $50; //@line 21014
 $108 = $ReallocAsyncCtx4 + 100 | 0; //@line 21015
 HEAP8[$108 >> 0] = $52; //@line 21016
 $109 = $ReallocAsyncCtx4 + 104 | 0; //@line 21017
 HEAP32[$109 >> 2] = $54; //@line 21018
 sp = STACKTOP; //@line 21019
 STACKTOP = sp; //@line 21020
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_81($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 288
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 290
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 292
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 294
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 296
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 298
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 300
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 302
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 304
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 306
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 308
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 310
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 312
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 314
 $42 = HEAP32[$2 >> 2] | 0; //@line 315
 if ($42 | 0) {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 319
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 320
  FUNCTION_TABLE_vi[$45 & 511]($10); //@line 321
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 247; //@line 324
   $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 325
   HEAP32[$46 >> 2] = $2; //@line 326
   $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 327
   HEAP32[$47 >> 2] = $4; //@line 328
   $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 329
   HEAP32[$48 >> 2] = $6; //@line 330
   $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 331
   HEAP32[$49 >> 2] = $8; //@line 332
   $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 333
   HEAP32[$50 >> 2] = $10; //@line 334
   $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 335
   HEAP32[$51 >> 2] = $12; //@line 336
   $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 337
   HEAP32[$52 >> 2] = $14; //@line 338
   $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 339
   HEAP32[$53 >> 2] = $16; //@line 340
   $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 341
   HEAP32[$54 >> 2] = $18; //@line 342
   $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 343
   HEAP32[$55 >> 2] = $20; //@line 344
   $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 345
   HEAP32[$56 >> 2] = $22; //@line 346
   $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 347
   HEAP32[$57 >> 2] = $24; //@line 348
   $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 349
   HEAP32[$58 >> 2] = $26; //@line 350
   sp = STACKTOP; //@line 351
   return;
  }
  ___async_unwind = 0; //@line 354
  HEAP32[$ReallocAsyncCtx2 >> 2] = 247; //@line 355
  $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 356
  HEAP32[$46 >> 2] = $2; //@line 357
  $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 358
  HEAP32[$47 >> 2] = $4; //@line 359
  $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 360
  HEAP32[$48 >> 2] = $6; //@line 361
  $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 362
  HEAP32[$49 >> 2] = $8; //@line 363
  $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 364
  HEAP32[$50 >> 2] = $10; //@line 365
  $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 366
  HEAP32[$51 >> 2] = $12; //@line 367
  $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 368
  HEAP32[$52 >> 2] = $14; //@line 369
  $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 370
  HEAP32[$53 >> 2] = $16; //@line 371
  $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 372
  HEAP32[$54 >> 2] = $18; //@line 373
  $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 374
  HEAP32[$55 >> 2] = $20; //@line 375
  $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 376
  HEAP32[$56 >> 2] = $22; //@line 377
  $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 378
  HEAP32[$57 >> 2] = $24; //@line 379
  $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 380
  HEAP32[$58 >> 2] = $26; //@line 381
  sp = STACKTOP; //@line 382
  return;
 }
 $59 = HEAP32[$8 >> 2] | 0; //@line 385
 if (!$59) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 388
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($26, 0, $4, 512) | 0; //@line 389
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 392
   $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 393
   HEAP32[$28 >> 2] = $2; //@line 394
   $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 395
   HEAP32[$29 >> 2] = $4; //@line 396
   $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 397
   HEAP32[$30 >> 2] = $6; //@line 398
   $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 399
   HEAP32[$31 >> 2] = $8; //@line 400
   $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 401
   HEAP32[$32 >> 2] = $10; //@line 402
   $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 403
   HEAP32[$33 >> 2] = $12; //@line 404
   $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 405
   HEAP32[$34 >> 2] = $14; //@line 406
   $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 407
   HEAP32[$35 >> 2] = $16; //@line 408
   $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 409
   HEAP32[$36 >> 2] = $18; //@line 410
   $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 411
   HEAP32[$37 >> 2] = $20; //@line 412
   $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 413
   HEAP32[$38 >> 2] = $22; //@line 414
   $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 415
   HEAP32[$39 >> 2] = $24; //@line 416
   $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 417
   HEAP32[$40 >> 2] = $26; //@line 418
   sp = STACKTOP; //@line 419
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 423
  ___async_unwind = 0; //@line 424
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 425
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 426
  HEAP32[$28 >> 2] = $2; //@line 427
  $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 428
  HEAP32[$29 >> 2] = $4; //@line 429
  $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 430
  HEAP32[$30 >> 2] = $6; //@line 431
  $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 432
  HEAP32[$31 >> 2] = $8; //@line 433
  $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 434
  HEAP32[$32 >> 2] = $10; //@line 435
  $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 436
  HEAP32[$33 >> 2] = $12; //@line 437
  $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 438
  HEAP32[$34 >> 2] = $14; //@line 439
  $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 440
  HEAP32[$35 >> 2] = $16; //@line 441
  $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 442
  HEAP32[$36 >> 2] = $18; //@line 443
  $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 444
  HEAP32[$37 >> 2] = $20; //@line 445
  $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 446
  HEAP32[$38 >> 2] = $22; //@line 447
  $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 448
  HEAP32[$39 >> 2] = $24; //@line 449
  $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 450
  HEAP32[$40 >> 2] = $26; //@line 451
  sp = STACKTOP; //@line 452
  return;
 } else {
  $62 = HEAP32[$59 + 8 >> 2] | 0; //@line 456
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 457
  FUNCTION_TABLE_vi[$62 & 511]($12); //@line 458
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 461
   $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 462
   HEAP32[$63 >> 2] = $2; //@line 463
   $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 464
   HEAP32[$64 >> 2] = $4; //@line 465
   $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 466
   HEAP32[$65 >> 2] = $6; //@line 467
   $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 468
   HEAP32[$66 >> 2] = $8; //@line 469
   $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 470
   HEAP32[$67 >> 2] = $10; //@line 471
   $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 472
   HEAP32[$68 >> 2] = $12; //@line 473
   $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 474
   HEAP32[$69 >> 2] = $14; //@line 475
   $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 476
   HEAP32[$70 >> 2] = $16; //@line 477
   $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 478
   HEAP32[$71 >> 2] = $18; //@line 479
   $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 480
   HEAP32[$72 >> 2] = $20; //@line 481
   $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 482
   HEAP32[$73 >> 2] = $22; //@line 483
   $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 484
   HEAP32[$74 >> 2] = $24; //@line 485
   $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 486
   HEAP32[$75 >> 2] = $26; //@line 487
   sp = STACKTOP; //@line 488
   return;
  }
  ___async_unwind = 0; //@line 491
  HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 492
  $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 493
  HEAP32[$63 >> 2] = $2; //@line 494
  $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 495
  HEAP32[$64 >> 2] = $4; //@line 496
  $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 497
  HEAP32[$65 >> 2] = $6; //@line 498
  $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 499
  HEAP32[$66 >> 2] = $8; //@line 500
  $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 501
  HEAP32[$67 >> 2] = $10; //@line 502
  $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 503
  HEAP32[$68 >> 2] = $12; //@line 504
  $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 505
  HEAP32[$69 >> 2] = $14; //@line 506
  $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 507
  HEAP32[$70 >> 2] = $16; //@line 508
  $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 509
  HEAP32[$71 >> 2] = $18; //@line 510
  $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 511
  HEAP32[$72 >> 2] = $20; //@line 512
  $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 513
  HEAP32[$73 >> 2] = $22; //@line 514
  $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 515
  HEAP32[$74 >> 2] = $24; //@line 516
  $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 517
  HEAP32[$75 >> 2] = $26; //@line 518
  sp = STACKTOP; //@line 519
  return;
 }
}
function __ZL30nsapi_dns_query_async_responsePv($0) {
 $0 = $0 | 0;
 var $$048 = 0, $$049 = 0, $$051 = 0, $$byval_copy27 = 0, $$lcssa = 0, $$pr$i = 0, $$pre = 0, $1 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $40 = 0, $45 = 0, $47 = 0, $54 = 0, $55 = 0, $59 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $77 = 0, $79 = 0, $85 = 0, $91 = 0, $95 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11644
 STACKTOP = STACKTOP + 48 | 0; //@line 11645
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11645
 $$byval_copy27 = sp + 20 | 0; //@line 11646
 $1 = sp; //@line 11647
 $2 = $0; //@line 11648
 $3 = HEAP32[1685] | 0; //@line 11649
 if (!$3) {
  label = 3; //@line 11652
 } else {
  if ((HEAP32[$3 >> 2] | 0) == ($2 | 0)) {
   $$lcssa = $3; //@line 11657
  } else {
   label = 3; //@line 11659
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = HEAP32[1686] | 0; //@line 11664
   if ($7 | 0) {
    if ((HEAP32[$7 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $7; //@line 11670
     break;
    }
   }
   $91 = HEAP32[1687] | 0; //@line 11674
   if ($91 | 0) {
    if ((HEAP32[$91 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $91; //@line 11680
     break;
    }
   }
   $95 = HEAP32[1688] | 0; //@line 11684
   if ($95 | 0) {
    if ((HEAP32[$95 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $95; //@line 11690
     break;
    }
   }
   $99 = HEAP32[1689] | 0; //@line 11694
   if (!$99) {
    STACKTOP = sp; //@line 11697
    return;
   }
   if ((HEAP32[$99 >> 2] | 0) == ($2 | 0)) {
    $$lcssa = $99; //@line 11702
   } else {
    STACKTOP = sp; //@line 11704
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa + 88 >> 2] | 0) != 1) {
  STACKTOP = sp; //@line 11712
  return;
 }
 $14 = $$lcssa + 86 | 0; //@line 11716
 $15 = HEAP8[$14 >> 0] | 0; //@line 11717
 $16 = $15 & 255; //@line 11718
 if (!($15 << 24 >> 24)) {
  $$048 = 0; //@line 11721
  $$049 = HEAP32[$$lcssa + 4 >> 2] | 0; //@line 11721
 } else {
  $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11724
  $19 = __ZnajRKSt9nothrow_t($16 << 6, 8661) | 0; //@line 11725
  if (___async) {
   HEAP32[$AsyncCtx13 >> 2] = 250; //@line 11728
   HEAP32[$AsyncCtx13 + 4 >> 2] = $$byval_copy27; //@line 11730
   HEAP32[$AsyncCtx13 + 8 >> 2] = $$lcssa; //@line 11732
   HEAP32[$AsyncCtx13 + 12 >> 2] = $14; //@line 11734
   HEAP32[$AsyncCtx13 + 16 >> 2] = $1; //@line 11736
   HEAP32[$AsyncCtx13 + 20 >> 2] = $16; //@line 11738
   sp = STACKTOP; //@line 11739
   STACKTOP = sp; //@line 11740
   return;
  }
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 11742
  if (!$19) {
   $40 = 0; //@line 11745
  } else {
   $26 = $19 + ($16 << 6) | 0; //@line 11747
   $27 = $19; //@line 11748
   do {
    HEAP32[$1 >> 2] = 0; //@line 11750
    HEAP32[$1 + 4 >> 2] = 0; //@line 11750
    HEAP32[$1 + 8 >> 2] = 0; //@line 11750
    HEAP32[$1 + 12 >> 2] = 0; //@line 11750
    HEAP32[$1 + 16 >> 2] = 0; //@line 11750
    HEAP32[$$byval_copy27 >> 2] = HEAP32[$1 >> 2]; //@line 11751
    HEAP32[$$byval_copy27 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11751
    HEAP32[$$byval_copy27 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11751
    HEAP32[$$byval_copy27 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 11751
    HEAP32[$$byval_copy27 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 11751
    __ZN13SocketAddressC2E10nsapi_addrt($27, $$byval_copy27, 0); //@line 11752
    $27 = $27 + 64 | 0; //@line 11753
   } while (($27 | 0) != ($26 | 0));
   $40 = $19; //@line 11756
  }
  $$pre = $$lcssa + 64 | 0; //@line 11765
  if (HEAP8[$14 >> 0] | 0) {
   $$051 = 0; //@line 11767
   do {
    $45 = $40 + ($$051 << 6) | 0; //@line 11769
    $47 = (HEAP32[$$pre >> 2] | 0) + ($$051 * 20 | 0) | 0; //@line 11771
    HEAP32[$$byval_copy27 >> 2] = HEAP32[$47 >> 2]; //@line 11772
    HEAP32[$$byval_copy27 + 4 >> 2] = HEAP32[$47 + 4 >> 2]; //@line 11772
    HEAP32[$$byval_copy27 + 8 >> 2] = HEAP32[$47 + 8 >> 2]; //@line 11772
    HEAP32[$$byval_copy27 + 12 >> 2] = HEAP32[$47 + 12 >> 2]; //@line 11772
    HEAP32[$$byval_copy27 + 16 >> 2] = HEAP32[$47 + 16 >> 2]; //@line 11772
    __ZN13SocketAddress8set_addrE10nsapi_addr($45, $$byval_copy27); //@line 11773
    $$051 = $$051 + 1 | 0; //@line 11774
   } while (($$051 | 0) < (HEAPU8[$14 >> 0] | 0));
  }
  $33 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 11786
  $34 = HEAP32[$$pre >> 2] | 0; //@line 11787
  $36 = HEAP32[$$lcssa + 68 >> 2] | 0; //@line 11789
  $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11790
  __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($33, $34, $36); //@line 11791
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 251; //@line 11794
   HEAP32[$AsyncCtx9 + 4 >> 2] = $$byval_copy27; //@line 11796
   HEAP32[$AsyncCtx9 + 8 >> 2] = $$lcssa; //@line 11798
   HEAP32[$AsyncCtx9 + 12 >> 2] = $40; //@line 11800
   HEAP32[$AsyncCtx9 + 16 >> 2] = $14; //@line 11802
   sp = STACKTOP; //@line 11803
   STACKTOP = sp; //@line 11804
   return;
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 11806
  if (!(HEAP32[$$lcssa + 48 >> 2] | 0)) {
   $$048 = $40; //@line 11811
   $$049 = 0; //@line 11811
  } else {
   $$048 = $40; //@line 11815
   $$049 = HEAPU8[$14 >> 0] | 0; //@line 11815
  }
 }
 $54 = $$lcssa + 28 | 0; //@line 11818
 $55 = HEAP32[$54 >> 2] | 0; //@line 11819
 do {
  if (!$55) {
   $67 = 0; //@line 11823
  } else {
   $59 = HEAP32[$55 + 4 >> 2] | 0; //@line 11827
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 11828
   FUNCTION_TABLE_vii[$59 & 7]($$byval_copy27, $$lcssa + 16 | 0); //@line 11829
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 252; //@line 11832
    HEAP32[$AsyncCtx + 4 >> 2] = $54; //@line 11834
    HEAP32[$AsyncCtx + 8 >> 2] = $$byval_copy27; //@line 11836
    HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa; //@line 11838
    HEAP32[$AsyncCtx + 16 >> 2] = $$byval_copy27; //@line 11840
    HEAP32[$AsyncCtx + 20 >> 2] = $$048; //@line 11842
    HEAP32[$AsyncCtx + 24 >> 2] = $$049; //@line 11844
    sp = STACKTOP; //@line 11845
    STACKTOP = sp; //@line 11846
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11848
    $67 = HEAP32[$54 >> 2] | 0; //@line 11850
    break;
   }
  }
 } while (0);
 $66 = $$byval_copy27 + 12 | 0; //@line 11855
 HEAP32[$66 >> 2] = $67; //@line 11856
 $68 = HEAP32[$$lcssa >> 2] | 0; //@line 11857
 $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11858
 __ZL28nsapi_dns_query_async_deletei($68); //@line 11859
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 253; //@line 11862
  HEAP32[$AsyncCtx16 + 4 >> 2] = $66; //@line 11864
  HEAP32[$AsyncCtx16 + 8 >> 2] = $$byval_copy27; //@line 11866
  HEAP32[$AsyncCtx16 + 12 >> 2] = $$048; //@line 11868
  HEAP32[$AsyncCtx16 + 16 >> 2] = $$049; //@line 11870
  sp = STACKTOP; //@line 11871
  STACKTOP = sp; //@line 11872
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 11874
 $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11875
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 11876
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 254; //@line 11879
  HEAP32[$AsyncCtx19 + 4 >> 2] = $66; //@line 11881
  HEAP32[$AsyncCtx19 + 8 >> 2] = $$byval_copy27; //@line 11883
  HEAP32[$AsyncCtx19 + 12 >> 2] = $$048; //@line 11885
  HEAP32[$AsyncCtx19 + 16 >> 2] = $$049; //@line 11887
  sp = STACKTOP; //@line 11888
  STACKTOP = sp; //@line 11889
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 11891
 $77 = HEAP32[$66 >> 2] | 0; //@line 11892
 do {
  if ($77 | 0) {
   $79 = HEAP32[$77 >> 2] | 0; //@line 11896
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11897
   FUNCTION_TABLE_viii[$79 & 0]($$byval_copy27, $$049, $$048); //@line 11898
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 255; //@line 11901
    HEAP32[$AsyncCtx2 + 4 >> 2] = $66; //@line 11903
    HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy27; //@line 11905
    HEAP32[$AsyncCtx2 + 12 >> 2] = $$048; //@line 11907
    sp = STACKTOP; //@line 11908
    STACKTOP = sp; //@line 11909
    return;
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11911
   $$pr$i = HEAP32[$66 >> 2] | 0; //@line 11912
   if ($$pr$i | 0) {
    $85 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 11916
    $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11917
    FUNCTION_TABLE_vi[$85 & 511]($$byval_copy27); //@line 11918
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 256; //@line 11921
     HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy27; //@line 11923
     HEAP32[$AsyncCtx6 + 8 >> 2] = $$048; //@line 11925
     sp = STACKTOP; //@line 11926
     STACKTOP = sp; //@line 11927
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 11929
     break;
    }
   }
  }
 } while (0);
 if (!$$048) {
  STACKTOP = sp; //@line 11937
  return;
 }
 __ZdaPv($$048); //@line 11939
 STACKTOP = sp; //@line 11940
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i20 = 0, $$06 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $50 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $65 = 0, $68 = 0, $75 = 0, $76 = 0, $79 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3523
 STACKTOP = STACKTOP + 32 | 0; //@line 3524
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3524
 $3 = sp + 16 | 0; //@line 3525
 $4 = sp; //@line 3526
 if (!(HEAP8[6496] | 0)) {
  if (___cxa_guard_acquire(6496) | 0) {
   HEAP32[1677] = __ZN4mbed16mbed_event_queueEv() | 0; //@line 3534
  }
 }
 $10 = HEAP32[1677] | 0; //@line 3537
 if (!$10) {
  $$06 = -3007; //@line 3540
  STACKTOP = sp; //@line 3541
  return $$06 | 0; //@line 3541
 }
 $13 = $2 + 12 | 0; //@line 3544
 $14 = HEAP32[$13 >> 2] | 0; //@line 3545
 $15 = ($14 | 0) == 0; //@line 3546
 if (($1 | 0) > 0) {
  do {
   if ($15) {
    $23 = 0; //@line 3550
   } else {
    $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 3553
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 3554
    FUNCTION_TABLE_vii[$17 & 7]($3, $2); //@line 3555
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 99; //@line 3558
     HEAP32[$AsyncCtx + 4 >> 2] = $13; //@line 3560
     HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 3562
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 3564
     HEAP32[$AsyncCtx + 16 >> 2] = $10; //@line 3566
     sp = STACKTOP; //@line 3567
     STACKTOP = sp; //@line 3568
     return 0; //@line 3568
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 3570
     $23 = HEAP32[$13 >> 2] | 0; //@line 3572
     break;
    }
   }
  } while (0);
  $22 = $3 + 12 | 0; //@line 3577
  HEAP32[$22 >> 2] = $23; //@line 3578
  $AsyncCtx29 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3579
  $24 = _equeue_alloc($10, 16) | 0; //@line 3580
  if (___async) {
   HEAP32[$AsyncCtx29 >> 2] = 100; //@line 3583
   HEAP32[$AsyncCtx29 + 4 >> 2] = $22; //@line 3585
   HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 3587
   HEAP32[$AsyncCtx29 + 12 >> 2] = $10; //@line 3589
   HEAP32[$AsyncCtx29 + 16 >> 2] = $3; //@line 3591
   HEAP32[$AsyncCtx29 + 20 >> 2] = $22; //@line 3593
   sp = STACKTOP; //@line 3594
   STACKTOP = sp; //@line 3595
   return 0; //@line 3595
  }
  _emscripten_free_async_context($AsyncCtx29 | 0); //@line 3597
  do {
   if (!$24) {
    $$0$i = 0; //@line 3601
   } else {
    $31 = HEAP32[$22 >> 2] | 0; //@line 3603
    do {
     if (!$31) {
      $42 = 0; //@line 3607
     } else {
      $34 = HEAP32[$31 + 4 >> 2] | 0; //@line 3610
      $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3611
      FUNCTION_TABLE_vii[$34 & 7]($24, $3); //@line 3612
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 101; //@line 3615
       HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 3617
       HEAP32[$AsyncCtx2 + 8 >> 2] = $24; //@line 3619
       HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 3621
       HEAP32[$AsyncCtx2 + 16 >> 2] = $10; //@line 3623
       HEAP32[$AsyncCtx2 + 20 >> 2] = $22; //@line 3625
       HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3627
       sp = STACKTOP; //@line 3628
       STACKTOP = sp; //@line 3629
       return 0; //@line 3629
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3631
       $42 = HEAP32[$22 >> 2] | 0; //@line 3633
       break;
      }
     }
    } while (0);
    HEAP32[$24 + 12 >> 2] = $42; //@line 3639
    _equeue_event_delay($24, $1); //@line 3640
    _equeue_event_dtor($24, 102); //@line 3641
    $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3642
    $43 = _equeue_post($10, 103, $24) | 0; //@line 3643
    if (___async) {
     HEAP32[$AsyncCtx23 >> 2] = 104; //@line 3646
     HEAP32[$AsyncCtx23 + 4 >> 2] = $22; //@line 3648
     HEAP32[$AsyncCtx23 + 8 >> 2] = $3; //@line 3650
     sp = STACKTOP; //@line 3651
     STACKTOP = sp; //@line 3652
     return 0; //@line 3652
    } else {
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 3654
     $$0$i = $43; //@line 3655
     break;
    }
   }
  } while (0);
  $46 = ($$0$i | 0) == 0; //@line 3660
  $47 = HEAP32[$22 >> 2] | 0; //@line 3661
  do {
   if ($47 | 0) {
    $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 3666
    $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3667
    FUNCTION_TABLE_vi[$50 & 511]($3); //@line 3668
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 105; //@line 3671
     HEAP8[$AsyncCtx6 + 4 >> 0] = $46 & 1; //@line 3674
     sp = STACKTOP; //@line 3675
     STACKTOP = sp; //@line 3676
     return 0; //@line 3676
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 3678
     break;
    }
   }
  } while (0);
  if ($46) {
   $$06 = -3007; //@line 3684
   STACKTOP = sp; //@line 3685
   return $$06 | 0; //@line 3685
  }
 } else {
  do {
   if ($15) {
    $58 = 0; //@line 3690
   } else {
    $53 = HEAP32[$14 + 4 >> 2] | 0; //@line 3693
    $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3694
    FUNCTION_TABLE_vii[$53 & 7]($4, $2); //@line 3695
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 106; //@line 3698
     HEAP32[$AsyncCtx10 + 4 >> 2] = $4; //@line 3700
     HEAP32[$AsyncCtx10 + 8 >> 2] = $10; //@line 3702
     HEAP32[$AsyncCtx10 + 12 >> 2] = $13; //@line 3704
     sp = STACKTOP; //@line 3705
     STACKTOP = sp; //@line 3706
     return 0; //@line 3706
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 3708
     $58 = HEAP32[$13 >> 2] | 0; //@line 3710
     break;
    }
   }
  } while (0);
  $57 = $4 + 12 | 0; //@line 3715
  HEAP32[$57 >> 2] = $58; //@line 3716
  $AsyncCtx26 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3717
  $59 = _equeue_alloc($10, 16) | 0; //@line 3718
  if (___async) {
   HEAP32[$AsyncCtx26 >> 2] = 107; //@line 3721
   HEAP32[$AsyncCtx26 + 4 >> 2] = $57; //@line 3723
   HEAP32[$AsyncCtx26 + 8 >> 2] = $10; //@line 3725
   HEAP32[$AsyncCtx26 + 12 >> 2] = $4; //@line 3727
   HEAP32[$AsyncCtx26 + 16 >> 2] = $57; //@line 3729
   sp = STACKTOP; //@line 3730
   STACKTOP = sp; //@line 3731
   return 0; //@line 3731
  }
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 3733
  do {
   if (!$59) {
    $$0$i20 = 0; //@line 3737
   } else {
    $65 = HEAP32[$57 >> 2] | 0; //@line 3739
    do {
     if (!$65) {
      $75 = 0; //@line 3743
     } else {
      $68 = HEAP32[$65 + 4 >> 2] | 0; //@line 3746
      $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3747
      FUNCTION_TABLE_vii[$68 & 7]($59, $4); //@line 3748
      if (___async) {
       HEAP32[$AsyncCtx13 >> 2] = 108; //@line 3751
       HEAP32[$AsyncCtx13 + 4 >> 2] = $57; //@line 3753
       HEAP32[$AsyncCtx13 + 8 >> 2] = $59; //@line 3755
       HEAP32[$AsyncCtx13 + 12 >> 2] = $10; //@line 3757
       HEAP32[$AsyncCtx13 + 16 >> 2] = $57; //@line 3759
       HEAP32[$AsyncCtx13 + 20 >> 2] = $4; //@line 3761
       sp = STACKTOP; //@line 3762
       STACKTOP = sp; //@line 3763
       return 0; //@line 3763
      } else {
       _emscripten_free_async_context($AsyncCtx13 | 0); //@line 3765
       $75 = HEAP32[$57 >> 2] | 0; //@line 3767
       break;
      }
     }
    } while (0);
    HEAP32[$59 + 12 >> 2] = $75; //@line 3773
    _equeue_event_dtor($59, 102); //@line 3774
    $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3775
    $76 = _equeue_post($10, 103, $59) | 0; //@line 3776
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 109; //@line 3779
     HEAP32[$AsyncCtx20 + 4 >> 2] = $57; //@line 3781
     HEAP32[$AsyncCtx20 + 8 >> 2] = $4; //@line 3783
     sp = STACKTOP; //@line 3784
     STACKTOP = sp; //@line 3785
     return 0; //@line 3785
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 3787
     $$0$i20 = $76; //@line 3788
     break;
    }
   }
  } while (0);
  $79 = ($$0$i20 | 0) == 0; //@line 3793
  $80 = HEAP32[$57 >> 2] | 0; //@line 3794
  do {
   if ($80 | 0) {
    $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 3799
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3800
    FUNCTION_TABLE_vi[$83 & 511]($4); //@line 3801
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 110; //@line 3804
     HEAP8[$AsyncCtx17 + 4 >> 0] = $79 & 1; //@line 3807
     sp = STACKTOP; //@line 3808
     STACKTOP = sp; //@line 3809
     return 0; //@line 3809
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 3811
     break;
    }
   }
  } while (0);
  if ($79) {
   $$06 = -3007; //@line 3817
   STACKTOP = sp; //@line 3818
   return $$06 | 0; //@line 3818
  }
 }
 $$06 = 0; //@line 3821
 STACKTOP = sp; //@line 3822
 return $$06 | 0; //@line 3822
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_82($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $10 = 0, $100 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $88 = 0, $94 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 531
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 533
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 535
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 537
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 539
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 541
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 543
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 545
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 547
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 549
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 551
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 553
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 555
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 557
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($4); //@line 562
  return;
 }
 $33 = (HEAPU8[$4 >> 0] | 0) << 8 | (HEAPU8[$6 >> 0] | 0); //@line 570
 $34 = $33 & 65535; //@line 571
 $35 = HEAP32[1685] | 0; //@line 572
 if (!$35) {
  label = 4; //@line 575
 } else {
  if (($33 | 0) == (HEAPU16[$35 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $35; //@line 582
   label = 5; //@line 583
  } else {
   label = 4; //@line 585
  }
 }
 do {
  if ((label | 0) == 4) {
   $41 = HEAP32[1686] | 0; //@line 590
   if ($41 | 0) {
    if (($33 | 0) == (HEAPU16[$41 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $41; //@line 598
     label = 5; //@line 599
     break;
    }
   }
   $88 = HEAP32[1687] | 0; //@line 603
   if ($88 | 0) {
    if (($33 | 0) == (HEAPU16[$88 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $88; //@line 611
     label = 5; //@line 612
     break;
    }
   }
   $94 = HEAP32[1688] | 0; //@line 616
   if ($94 | 0) {
    if (($33 | 0) == (HEAPU16[$94 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $94; //@line 624
     label = 5; //@line 625
     break;
    }
   }
   $100 = HEAP32[1689] | 0; //@line 629
   if ($100 | 0) {
    if (($33 | 0) == (HEAPU16[$100 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $100; //@line 637
     label = 5; //@line 638
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
   $63 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 649
   $$ = $63 >>> 0 > 1 ? $63 : 1; //@line 651
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 655
   $66 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 8661) | 0; //@line 656
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 244; //@line 659
    $67 = $ReallocAsyncCtx4 + 4 | 0; //@line 660
    HEAP32[$67 >> 2] = $2; //@line 661
    $68 = $ReallocAsyncCtx4 + 8 | 0; //@line 662
    HEAP32[$68 >> 2] = $4; //@line 663
    $69 = $ReallocAsyncCtx4 + 12 | 0; //@line 664
    HEAP32[$69 >> 2] = $6; //@line 665
    $70 = $ReallocAsyncCtx4 + 16 | 0; //@line 666
    HEAP32[$70 >> 2] = $8; //@line 667
    $71 = $ReallocAsyncCtx4 + 20 | 0; //@line 668
    HEAP32[$71 >> 2] = $10; //@line 669
    $72 = $ReallocAsyncCtx4 + 24 | 0; //@line 670
    HEAP32[$72 >> 2] = $12; //@line 671
    $73 = $ReallocAsyncCtx4 + 28 | 0; //@line 672
    HEAP32[$73 >> 2] = $14; //@line 673
    $74 = $ReallocAsyncCtx4 + 32 | 0; //@line 674
    HEAP32[$74 >> 2] = $16; //@line 675
    $75 = $ReallocAsyncCtx4 + 36 | 0; //@line 676
    HEAP32[$75 >> 2] = $18; //@line 677
    $76 = $ReallocAsyncCtx4 + 40 | 0; //@line 678
    HEAP32[$76 >> 2] = $20; //@line 679
    $77 = $ReallocAsyncCtx4 + 44 | 0; //@line 680
    HEAP32[$77 >> 2] = $22; //@line 681
    $78 = $ReallocAsyncCtx4 + 48 | 0; //@line 682
    HEAP32[$78 >> 2] = $24; //@line 683
    $79 = $ReallocAsyncCtx4 + 52 | 0; //@line 684
    HEAP32[$79 >> 2] = $26; //@line 685
    $80 = $ReallocAsyncCtx4 + 56 | 0; //@line 686
    HEAP32[$80 >> 2] = $$lcssa; //@line 687
    $81 = $ReallocAsyncCtx4 + 60 | 0; //@line 688
    HEAP16[$81 >> 1] = $34; //@line 689
    $82 = $ReallocAsyncCtx4 + 64 | 0; //@line 690
    HEAP32[$82 >> 2] = $$; //@line 691
    sp = STACKTOP; //@line 692
    return;
   }
   HEAP32[___async_retval >> 2] = $66; //@line 696
   ___async_unwind = 0; //@line 697
   HEAP32[$ReallocAsyncCtx4 >> 2] = 244; //@line 698
   $67 = $ReallocAsyncCtx4 + 4 | 0; //@line 699
   HEAP32[$67 >> 2] = $2; //@line 700
   $68 = $ReallocAsyncCtx4 + 8 | 0; //@line 701
   HEAP32[$68 >> 2] = $4; //@line 702
   $69 = $ReallocAsyncCtx4 + 12 | 0; //@line 703
   HEAP32[$69 >> 2] = $6; //@line 704
   $70 = $ReallocAsyncCtx4 + 16 | 0; //@line 705
   HEAP32[$70 >> 2] = $8; //@line 706
   $71 = $ReallocAsyncCtx4 + 20 | 0; //@line 707
   HEAP32[$71 >> 2] = $10; //@line 708
   $72 = $ReallocAsyncCtx4 + 24 | 0; //@line 709
   HEAP32[$72 >> 2] = $12; //@line 710
   $73 = $ReallocAsyncCtx4 + 28 | 0; //@line 711
   HEAP32[$73 >> 2] = $14; //@line 712
   $74 = $ReallocAsyncCtx4 + 32 | 0; //@line 713
   HEAP32[$74 >> 2] = $16; //@line 714
   $75 = $ReallocAsyncCtx4 + 36 | 0; //@line 715
   HEAP32[$75 >> 2] = $18; //@line 716
   $76 = $ReallocAsyncCtx4 + 40 | 0; //@line 717
   HEAP32[$76 >> 2] = $20; //@line 718
   $77 = $ReallocAsyncCtx4 + 44 | 0; //@line 719
   HEAP32[$77 >> 2] = $22; //@line 720
   $78 = $ReallocAsyncCtx4 + 48 | 0; //@line 721
   HEAP32[$78 >> 2] = $24; //@line 722
   $79 = $ReallocAsyncCtx4 + 52 | 0; //@line 723
   HEAP32[$79 >> 2] = $26; //@line 724
   $80 = $ReallocAsyncCtx4 + 56 | 0; //@line 725
   HEAP32[$80 >> 2] = $$lcssa; //@line 726
   $81 = $ReallocAsyncCtx4 + 60 | 0; //@line 727
   HEAP16[$81 >> 1] = $34; //@line 728
   $82 = $ReallocAsyncCtx4 + 64 | 0; //@line 729
   HEAP32[$82 >> 2] = $$; //@line 730
   sp = STACKTOP; //@line 731
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 735
 $46 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($26, 0, $4, 512) | 0; //@line 736
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 739
  $47 = $ReallocAsyncCtx6 + 4 | 0; //@line 740
  HEAP32[$47 >> 2] = $2; //@line 741
  $48 = $ReallocAsyncCtx6 + 8 | 0; //@line 742
  HEAP32[$48 >> 2] = $4; //@line 743
  $49 = $ReallocAsyncCtx6 + 12 | 0; //@line 744
  HEAP32[$49 >> 2] = $6; //@line 745
  $50 = $ReallocAsyncCtx6 + 16 | 0; //@line 746
  HEAP32[$50 >> 2] = $8; //@line 747
  $51 = $ReallocAsyncCtx6 + 20 | 0; //@line 748
  HEAP32[$51 >> 2] = $10; //@line 749
  $52 = $ReallocAsyncCtx6 + 24 | 0; //@line 750
  HEAP32[$52 >> 2] = $12; //@line 751
  $53 = $ReallocAsyncCtx6 + 28 | 0; //@line 752
  HEAP32[$53 >> 2] = $14; //@line 753
  $54 = $ReallocAsyncCtx6 + 32 | 0; //@line 754
  HEAP32[$54 >> 2] = $16; //@line 755
  $55 = $ReallocAsyncCtx6 + 36 | 0; //@line 756
  HEAP32[$55 >> 2] = $18; //@line 757
  $56 = $ReallocAsyncCtx6 + 40 | 0; //@line 758
  HEAP32[$56 >> 2] = $20; //@line 759
  $57 = $ReallocAsyncCtx6 + 44 | 0; //@line 760
  HEAP32[$57 >> 2] = $22; //@line 761
  $58 = $ReallocAsyncCtx6 + 48 | 0; //@line 762
  HEAP32[$58 >> 2] = $24; //@line 763
  $59 = $ReallocAsyncCtx6 + 52 | 0; //@line 764
  HEAP32[$59 >> 2] = $26; //@line 765
  sp = STACKTOP; //@line 766
  return;
 }
 HEAP32[___async_retval >> 2] = $46; //@line 770
 ___async_unwind = 0; //@line 771
 HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 772
 $47 = $ReallocAsyncCtx6 + 4 | 0; //@line 773
 HEAP32[$47 >> 2] = $2; //@line 774
 $48 = $ReallocAsyncCtx6 + 8 | 0; //@line 775
 HEAP32[$48 >> 2] = $4; //@line 776
 $49 = $ReallocAsyncCtx6 + 12 | 0; //@line 777
 HEAP32[$49 >> 2] = $6; //@line 778
 $50 = $ReallocAsyncCtx6 + 16 | 0; //@line 779
 HEAP32[$50 >> 2] = $8; //@line 780
 $51 = $ReallocAsyncCtx6 + 20 | 0; //@line 781
 HEAP32[$51 >> 2] = $10; //@line 782
 $52 = $ReallocAsyncCtx6 + 24 | 0; //@line 783
 HEAP32[$52 >> 2] = $12; //@line 784
 $53 = $ReallocAsyncCtx6 + 28 | 0; //@line 785
 HEAP32[$53 >> 2] = $14; //@line 786
 $54 = $ReallocAsyncCtx6 + 32 | 0; //@line 787
 HEAP32[$54 >> 2] = $16; //@line 788
 $55 = $ReallocAsyncCtx6 + 36 | 0; //@line 789
 HEAP32[$55 >> 2] = $18; //@line 790
 $56 = $ReallocAsyncCtx6 + 40 | 0; //@line 791
 HEAP32[$56 >> 2] = $20; //@line 792
 $57 = $ReallocAsyncCtx6 + 44 | 0; //@line 793
 HEAP32[$57 >> 2] = $22; //@line 794
 $58 = $ReallocAsyncCtx6 + 48 | 0; //@line 795
 HEAP32[$58 >> 2] = $24; //@line 796
 $59 = $ReallocAsyncCtx6 + 52 | 0; //@line 797
 HEAP32[$59 >> 2] = $26; //@line 798
 sp = STACKTOP; //@line 799
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_198($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10742
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10744
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10746
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10748
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10752
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10754
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10756
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10758
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10760
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10762
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10764
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10766
 $24 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 10767
 if ($24 | 0) {
  $27 = HEAP32[$24 + 8 >> 2] | 0; //@line 10771
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(44) | 0; //@line 10772
  FUNCTION_TABLE_vi[$27 & 511]($12); //@line 10773
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 167; //@line 10776
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 10777
   HEAP32[$28 >> 2] = $2; //@line 10778
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 10779
   HEAP32[$29 >> 2] = $6; //@line 10780
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 10781
   HEAP32[$30 >> 2] = $AsyncRetVal; //@line 10782
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 10783
   HEAP32[$31 >> 2] = $10; //@line 10784
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 10785
   HEAP32[$32 >> 2] = $16; //@line 10786
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 10787
   HEAP32[$33 >> 2] = $18; //@line 10788
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 10789
   HEAP32[$34 >> 2] = $14; //@line 10790
   $35 = $ReallocAsyncCtx7 + 32 | 0; //@line 10791
   HEAP32[$35 >> 2] = $4; //@line 10792
   $36 = $ReallocAsyncCtx7 + 36 | 0; //@line 10793
   HEAP32[$36 >> 2] = $20; //@line 10794
   $37 = $ReallocAsyncCtx7 + 40 | 0; //@line 10795
   HEAP32[$37 >> 2] = $22; //@line 10796
   sp = STACKTOP; //@line 10797
   return;
  }
  ___async_unwind = 0; //@line 10800
  HEAP32[$ReallocAsyncCtx7 >> 2] = 167; //@line 10801
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 10802
  HEAP32[$28 >> 2] = $2; //@line 10803
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 10804
  HEAP32[$29 >> 2] = $6; //@line 10805
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 10806
  HEAP32[$30 >> 2] = $AsyncRetVal; //@line 10807
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 10808
  HEAP32[$31 >> 2] = $10; //@line 10809
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 10810
  HEAP32[$32 >> 2] = $16; //@line 10811
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 10812
  HEAP32[$33 >> 2] = $18; //@line 10813
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 10814
  HEAP32[$34 >> 2] = $14; //@line 10815
  $35 = $ReallocAsyncCtx7 + 32 | 0; //@line 10816
  HEAP32[$35 >> 2] = $4; //@line 10817
  $36 = $ReallocAsyncCtx7 + 36 | 0; //@line 10818
  HEAP32[$36 >> 2] = $20; //@line 10819
  $37 = $ReallocAsyncCtx7 + 40 | 0; //@line 10820
  HEAP32[$37 >> 2] = $22; //@line 10821
  sp = STACKTOP; //@line 10822
  return;
 }
 $38 = ($AsyncRetVal | 0) == 0; //@line 10825
 $39 = HEAP32[$10 >> 2] | 0; //@line 10826
 if ($39 | 0) {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 10830
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 10831
  FUNCTION_TABLE_vi[$42 & 511]($18); //@line 10832
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 168; //@line 10835
   $43 = $ReallocAsyncCtx8 + 4 | 0; //@line 10836
   HEAP32[$43 >> 2] = $2; //@line 10837
   $44 = $ReallocAsyncCtx8 + 8 | 0; //@line 10838
   HEAP32[$44 >> 2] = $6; //@line 10839
   $45 = $ReallocAsyncCtx8 + 12 | 0; //@line 10840
   HEAP32[$45 >> 2] = $16; //@line 10841
   $46 = $ReallocAsyncCtx8 + 16 | 0; //@line 10842
   $$expand_i1_val = $38 & 1; //@line 10843
   HEAP8[$46 >> 0] = $$expand_i1_val; //@line 10844
   $47 = $ReallocAsyncCtx8 + 20 | 0; //@line 10845
   HEAP32[$47 >> 2] = $14; //@line 10846
   $48 = $ReallocAsyncCtx8 + 24 | 0; //@line 10847
   HEAP32[$48 >> 2] = $4; //@line 10848
   $49 = $ReallocAsyncCtx8 + 28 | 0; //@line 10849
   HEAP32[$49 >> 2] = $20; //@line 10850
   $50 = $ReallocAsyncCtx8 + 32 | 0; //@line 10851
   HEAP32[$50 >> 2] = $22; //@line 10852
   sp = STACKTOP; //@line 10853
   return;
  }
  ___async_unwind = 0; //@line 10856
  HEAP32[$ReallocAsyncCtx8 >> 2] = 168; //@line 10857
  $43 = $ReallocAsyncCtx8 + 4 | 0; //@line 10858
  HEAP32[$43 >> 2] = $2; //@line 10859
  $44 = $ReallocAsyncCtx8 + 8 | 0; //@line 10860
  HEAP32[$44 >> 2] = $6; //@line 10861
  $45 = $ReallocAsyncCtx8 + 12 | 0; //@line 10862
  HEAP32[$45 >> 2] = $16; //@line 10863
  $46 = $ReallocAsyncCtx8 + 16 | 0; //@line 10864
  $$expand_i1_val = $38 & 1; //@line 10865
  HEAP8[$46 >> 0] = $$expand_i1_val; //@line 10866
  $47 = $ReallocAsyncCtx8 + 20 | 0; //@line 10867
  HEAP32[$47 >> 2] = $14; //@line 10868
  $48 = $ReallocAsyncCtx8 + 24 | 0; //@line 10869
  HEAP32[$48 >> 2] = $4; //@line 10870
  $49 = $ReallocAsyncCtx8 + 28 | 0; //@line 10871
  HEAP32[$49 >> 2] = $20; //@line 10872
  $50 = $ReallocAsyncCtx8 + 32 | 0; //@line 10873
  HEAP32[$50 >> 2] = $22; //@line 10874
  sp = STACKTOP; //@line 10875
  return;
 }
 if ($38) {
  HEAP8[7620] = 1; //@line 10879
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 10880
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 10881
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 10884
   $67 = $ReallocAsyncCtx13 + 4 | 0; //@line 10885
   HEAP32[$67 >> 2] = $2; //@line 10886
   $68 = $ReallocAsyncCtx13 + 8 | 0; //@line 10887
   HEAP32[$68 >> 2] = $6; //@line 10888
   sp = STACKTOP; //@line 10889
   return;
  }
  ___async_unwind = 0; //@line 10892
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 10893
  $67 = $ReallocAsyncCtx13 + 4 | 0; //@line 10894
  HEAP32[$67 >> 2] = $2; //@line 10895
  $68 = $ReallocAsyncCtx13 + 8 | 0; //@line 10896
  HEAP32[$68 >> 2] = $6; //@line 10897
  sp = STACKTOP; //@line 10898
  return;
 }
 $51 = HEAP32[$16 >> 2] | 0; //@line 10901
 if ($51 | 0) {
  __ZdlPv($51); //@line 10904
 }
 $53 = HEAP32[$22 >> 2] | 0; //@line 10906
 if ($53 | 0) {
  $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 10910
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 10911
  FUNCTION_TABLE_vi[$56 & 511]($20); //@line 10912
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 169; //@line 10915
   $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 10916
   HEAP32[$57 >> 2] = $4; //@line 10917
   $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 10918
   HEAP32[$58 >> 2] = $14; //@line 10919
   $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 10920
   HEAP32[$59 >> 2] = $6; //@line 10921
   sp = STACKTOP; //@line 10922
   return;
  }
  ___async_unwind = 0; //@line 10925
  HEAP32[$ReallocAsyncCtx9 >> 2] = 169; //@line 10926
  $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 10927
  HEAP32[$57 >> 2] = $4; //@line 10928
  $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 10929
  HEAP32[$58 >> 2] = $14; //@line 10930
  $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 10931
  HEAP32[$59 >> 2] = $6; //@line 10932
  sp = STACKTOP; //@line 10933
  return;
 }
 $61 = HEAP32[$4 + 28 >> 2] | 0; //@line 10937
 if (!$61) {
  __ZdlPv($4); //@line 10940
  HEAP32[___async_retval >> 2] = -3007; //@line 10942
  return;
 }
 $64 = HEAP32[$61 + 8 >> 2] | 0; //@line 10946
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 10947
 FUNCTION_TABLE_vi[$64 & 511]($14); //@line 10948
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 10951
  $65 = $ReallocAsyncCtx10 + 4 | 0; //@line 10952
  HEAP32[$65 >> 2] = $4; //@line 10953
  $66 = $ReallocAsyncCtx10 + 8 | 0; //@line 10954
  HEAP32[$66 >> 2] = $6; //@line 10955
  sp = STACKTOP; //@line 10956
  return;
 }
 ___async_unwind = 0; //@line 10959
 HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 10960
 $65 = $ReallocAsyncCtx10 + 4 | 0; //@line 10961
 HEAP32[$65 >> 2] = $4; //@line 10962
 $66 = $ReallocAsyncCtx10 + 8 | 0; //@line 10963
 HEAP32[$66 >> 2] = $6; //@line 10964
 sp = STACKTOP; //@line 10965
 return;
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12355
 STACKTOP = STACKTOP + 32 | 0; //@line 12356
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12356
 $0 = sp; //@line 12357
 _gpio_init_out($0, 50); //@line 12358
 while (1) {
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12361
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12362
  _wait_ms(150); //@line 12363
  if (___async) {
   label = 3; //@line 12366
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 12369
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12371
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12372
  _wait_ms(150); //@line 12373
  if (___async) {
   label = 5; //@line 12376
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 12379
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12381
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12382
  _wait_ms(150); //@line 12383
  if (___async) {
   label = 7; //@line 12386
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 12389
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12391
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12392
  _wait_ms(150); //@line 12393
  if (___async) {
   label = 9; //@line 12396
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 12399
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12401
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12402
  _wait_ms(150); //@line 12403
  if (___async) {
   label = 11; //@line 12406
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 12409
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12411
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12412
  _wait_ms(150); //@line 12413
  if (___async) {
   label = 13; //@line 12416
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 12419
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12421
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12422
  _wait_ms(150); //@line 12423
  if (___async) {
   label = 15; //@line 12426
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 12429
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12431
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12432
  _wait_ms(150); //@line 12433
  if (___async) {
   label = 17; //@line 12436
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 12439
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12441
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12442
  _wait_ms(400); //@line 12443
  if (___async) {
   label = 19; //@line 12446
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 12449
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12451
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12452
  _wait_ms(400); //@line 12453
  if (___async) {
   label = 21; //@line 12456
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 12459
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12461
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12462
  _wait_ms(400); //@line 12463
  if (___async) {
   label = 23; //@line 12466
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12469
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12471
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12472
  _wait_ms(400); //@line 12473
  if (___async) {
   label = 25; //@line 12476
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12479
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12481
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12482
  _wait_ms(400); //@line 12483
  if (___async) {
   label = 27; //@line 12486
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12489
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12491
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12492
  _wait_ms(400); //@line 12493
  if (___async) {
   label = 29; //@line 12496
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12499
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12501
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12502
  _wait_ms(400); //@line 12503
  if (___async) {
   label = 31; //@line 12506
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12509
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12511
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12512
  _wait_ms(400); //@line 12513
  if (___async) {
   label = 33; //@line 12516
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12519
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 268; //@line 12523
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 12525
   sp = STACKTOP; //@line 12526
   STACKTOP = sp; //@line 12527
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 269; //@line 12531
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 12533
   sp = STACKTOP; //@line 12534
   STACKTOP = sp; //@line 12535
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 270; //@line 12539
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 12541
   sp = STACKTOP; //@line 12542
   STACKTOP = sp; //@line 12543
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 271; //@line 12547
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 12549
   sp = STACKTOP; //@line 12550
   STACKTOP = sp; //@line 12551
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 272; //@line 12555
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 12557
   sp = STACKTOP; //@line 12558
   STACKTOP = sp; //@line 12559
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 273; //@line 12563
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 12565
   sp = STACKTOP; //@line 12566
   STACKTOP = sp; //@line 12567
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 274; //@line 12571
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 12573
   sp = STACKTOP; //@line 12574
   STACKTOP = sp; //@line 12575
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 275; //@line 12579
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 12581
   sp = STACKTOP; //@line 12582
   STACKTOP = sp; //@line 12583
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 276; //@line 12587
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 12589
   sp = STACKTOP; //@line 12590
   STACKTOP = sp; //@line 12591
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 277; //@line 12595
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 12597
   sp = STACKTOP; //@line 12598
   STACKTOP = sp; //@line 12599
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 278; //@line 12603
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 12605
   sp = STACKTOP; //@line 12606
   STACKTOP = sp; //@line 12607
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 279; //@line 12611
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12613
   sp = STACKTOP; //@line 12614
   STACKTOP = sp; //@line 12615
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 280; //@line 12619
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12621
   sp = STACKTOP; //@line 12622
   STACKTOP = sp; //@line 12623
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 281; //@line 12627
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12629
   sp = STACKTOP; //@line 12630
   STACKTOP = sp; //@line 12631
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 282; //@line 12635
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12637
   sp = STACKTOP; //@line 12638
   STACKTOP = sp; //@line 12639
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 283; //@line 12643
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12645
   sp = STACKTOP; //@line 12646
   STACKTOP = sp; //@line 12647
   return;
  }
 }
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_83($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$sroa_idx5$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $74 = 0, $8 = 0, $80 = 0, $86 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 810
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 812
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 814
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 816
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 818
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($2); //@line 823
  return;
 }
 $11 = $2 + 1 | 0; //@line 826
 $12 = $4 + 12 | 0; //@line 827
 $13 = $6 + 8 | 0; //@line 828
 $$sroa_idx5$i$i = $6 + 4 | 0; //@line 829
 $14 = $6 + 12 | 0; //@line 830
 $20 = (HEAPU8[$2 >> 0] | 0) << 8 | (HEAPU8[$11 >> 0] | 0); //@line 836
 $21 = $20 & 65535; //@line 837
 $22 = HEAP32[1685] | 0; //@line 838
 if (!$22) {
  label = 6; //@line 841
 } else {
  if (($20 | 0) == (HEAPU16[$22 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $22; //@line 848
   label = 7; //@line 849
  } else {
   label = 6; //@line 851
  }
 }
 do {
  if ((label | 0) == 6) {
   $28 = HEAP32[1686] | 0; //@line 856
   if ($28 | 0) {
    if (($20 | 0) == (HEAPU16[$28 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $28; //@line 864
     label = 7; //@line 865
     break;
    }
   }
   $74 = HEAP32[1687] | 0; //@line 869
   if ($74 | 0) {
    if (($20 | 0) == (HEAPU16[$74 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $74; //@line 877
     label = 7; //@line 878
     break;
    }
   }
   $80 = HEAP32[1688] | 0; //@line 882
   if ($80 | 0) {
    if (($20 | 0) == (HEAPU16[$80 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $80; //@line 890
     label = 7; //@line 891
     break;
    }
   }
   $86 = HEAP32[1689] | 0; //@line 895
   if ($86 | 0) {
    if (($20 | 0) == (HEAPU16[$86 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $86; //@line 903
     label = 7; //@line 904
    }
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
   $49 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 915
   $$ = $49 >>> 0 > 1 ? $49 : 1; //@line 917
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 921
   $52 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 8661) | 0; //@line 922
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 244; //@line 925
    $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 926
    HEAP32[$53 >> 2] = $14; //@line 927
    $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 928
    HEAP32[$54 >> 2] = $2; //@line 929
    $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 930
    HEAP32[$55 >> 2] = $11; //@line 931
    $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 932
    HEAP32[$56 >> 2] = $12; //@line 933
    $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 934
    HEAP32[$57 >> 2] = $6; //@line 935
    $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 936
    HEAP32[$58 >> 2] = $4; //@line 937
    $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 938
    HEAP32[$59 >> 2] = $12; //@line 939
    $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 940
    HEAP32[$60 >> 2] = $13; //@line 941
    $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 942
    HEAP32[$61 >> 2] = $6; //@line 943
    $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 944
    HEAP32[$62 >> 2] = $$sroa_idx5$i$i; //@line 945
    $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 946
    HEAP32[$63 >> 2] = $4; //@line 947
    $64 = $ReallocAsyncCtx4 + 48 | 0; //@line 948
    HEAP32[$64 >> 2] = $6; //@line 949
    $65 = $ReallocAsyncCtx4 + 52 | 0; //@line 950
    HEAP32[$65 >> 2] = $8; //@line 951
    $66 = $ReallocAsyncCtx4 + 56 | 0; //@line 952
    HEAP32[$66 >> 2] = $$lcssa; //@line 953
    $67 = $ReallocAsyncCtx4 + 60 | 0; //@line 954
    HEAP16[$67 >> 1] = $21; //@line 955
    $68 = $ReallocAsyncCtx4 + 64 | 0; //@line 956
    HEAP32[$68 >> 2] = $$; //@line 957
    sp = STACKTOP; //@line 958
    return;
   }
   HEAP32[___async_retval >> 2] = $52; //@line 962
   ___async_unwind = 0; //@line 963
   HEAP32[$ReallocAsyncCtx4 >> 2] = 244; //@line 964
   $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 965
   HEAP32[$53 >> 2] = $14; //@line 966
   $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 967
   HEAP32[$54 >> 2] = $2; //@line 968
   $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 969
   HEAP32[$55 >> 2] = $11; //@line 970
   $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 971
   HEAP32[$56 >> 2] = $12; //@line 972
   $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 973
   HEAP32[$57 >> 2] = $6; //@line 974
   $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 975
   HEAP32[$58 >> 2] = $4; //@line 976
   $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 977
   HEAP32[$59 >> 2] = $12; //@line 978
   $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 979
   HEAP32[$60 >> 2] = $13; //@line 980
   $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 981
   HEAP32[$61 >> 2] = $6; //@line 982
   $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 983
   HEAP32[$62 >> 2] = $$sroa_idx5$i$i; //@line 984
   $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 985
   HEAP32[$63 >> 2] = $4; //@line 986
   $64 = $ReallocAsyncCtx4 + 48 | 0; //@line 987
   HEAP32[$64 >> 2] = $6; //@line 988
   $65 = $ReallocAsyncCtx4 + 52 | 0; //@line 989
   HEAP32[$65 >> 2] = $8; //@line 990
   $66 = $ReallocAsyncCtx4 + 56 | 0; //@line 991
   HEAP32[$66 >> 2] = $$lcssa; //@line 992
   $67 = $ReallocAsyncCtx4 + 60 | 0; //@line 993
   HEAP16[$67 >> 1] = $21; //@line 994
   $68 = $ReallocAsyncCtx4 + 64 | 0; //@line 995
   HEAP32[$68 >> 2] = $$; //@line 996
   sp = STACKTOP; //@line 997
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 1001
 $33 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($8, 0, $2, 512) | 0; //@line 1002
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 1005
  $34 = $ReallocAsyncCtx6 + 4 | 0; //@line 1006
  HEAP32[$34 >> 2] = $14; //@line 1007
  $35 = $ReallocAsyncCtx6 + 8 | 0; //@line 1008
  HEAP32[$35 >> 2] = $2; //@line 1009
  $36 = $ReallocAsyncCtx6 + 12 | 0; //@line 1010
  HEAP32[$36 >> 2] = $11; //@line 1011
  $37 = $ReallocAsyncCtx6 + 16 | 0; //@line 1012
  HEAP32[$37 >> 2] = $12; //@line 1013
  $38 = $ReallocAsyncCtx6 + 20 | 0; //@line 1014
  HEAP32[$38 >> 2] = $6; //@line 1015
  $39 = $ReallocAsyncCtx6 + 24 | 0; //@line 1016
  HEAP32[$39 >> 2] = $4; //@line 1017
  $40 = $ReallocAsyncCtx6 + 28 | 0; //@line 1018
  HEAP32[$40 >> 2] = $12; //@line 1019
  $41 = $ReallocAsyncCtx6 + 32 | 0; //@line 1020
  HEAP32[$41 >> 2] = $13; //@line 1021
  $42 = $ReallocAsyncCtx6 + 36 | 0; //@line 1022
  HEAP32[$42 >> 2] = $6; //@line 1023
  $43 = $ReallocAsyncCtx6 + 40 | 0; //@line 1024
  HEAP32[$43 >> 2] = $$sroa_idx5$i$i; //@line 1025
  $44 = $ReallocAsyncCtx6 + 44 | 0; //@line 1026
  HEAP32[$44 >> 2] = $4; //@line 1027
  $45 = $ReallocAsyncCtx6 + 48 | 0; //@line 1028
  HEAP32[$45 >> 2] = $6; //@line 1029
  $46 = $ReallocAsyncCtx6 + 52 | 0; //@line 1030
  HEAP32[$46 >> 2] = $8; //@line 1031
  sp = STACKTOP; //@line 1032
  return;
 }
 HEAP32[___async_retval >> 2] = $33; //@line 1036
 ___async_unwind = 0; //@line 1037
 HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 1038
 $34 = $ReallocAsyncCtx6 + 4 | 0; //@line 1039
 HEAP32[$34 >> 2] = $14; //@line 1040
 $35 = $ReallocAsyncCtx6 + 8 | 0; //@line 1041
 HEAP32[$35 >> 2] = $2; //@line 1042
 $36 = $ReallocAsyncCtx6 + 12 | 0; //@line 1043
 HEAP32[$36 >> 2] = $11; //@line 1044
 $37 = $ReallocAsyncCtx6 + 16 | 0; //@line 1045
 HEAP32[$37 >> 2] = $12; //@line 1046
 $38 = $ReallocAsyncCtx6 + 20 | 0; //@line 1047
 HEAP32[$38 >> 2] = $6; //@line 1048
 $39 = $ReallocAsyncCtx6 + 24 | 0; //@line 1049
 HEAP32[$39 >> 2] = $4; //@line 1050
 $40 = $ReallocAsyncCtx6 + 28 | 0; //@line 1051
 HEAP32[$40 >> 2] = $12; //@line 1052
 $41 = $ReallocAsyncCtx6 + 32 | 0; //@line 1053
 HEAP32[$41 >> 2] = $13; //@line 1054
 $42 = $ReallocAsyncCtx6 + 36 | 0; //@line 1055
 HEAP32[$42 >> 2] = $6; //@line 1056
 $43 = $ReallocAsyncCtx6 + 40 | 0; //@line 1057
 HEAP32[$43 >> 2] = $$sroa_idx5$i$i; //@line 1058
 $44 = $ReallocAsyncCtx6 + 44 | 0; //@line 1059
 HEAP32[$44 >> 2] = $4; //@line 1060
 $45 = $ReallocAsyncCtx6 + 48 | 0; //@line 1061
 HEAP32[$45 >> 2] = $6; //@line 1062
 $46 = $ReallocAsyncCtx6 + 52 | 0; //@line 1063
 HEAP32[$46 >> 2] = $8; //@line 1064
 sp = STACKTOP; //@line 1065
 return;
}
function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $80 = 0, $85 = 0, $93 = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149; //@line 7509
   $$0106$ph = 24; //@line 7509
   label = 4; //@line 7510
   break;
  }
 case 1:
  {
   $$0105$ph = -1074; //@line 7514
   $$0106$ph = 53; //@line 7514
   label = 4; //@line 7515
   break;
  }
 case 2:
  {
   $$0105$ph = -1074; //@line 7519
   $$0106$ph = 53; //@line 7519
   label = 4; //@line 7520
   break;
  }
 default:
  {
   $$0114 = 0.0; //@line 7524
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $3 = $0 + 4 | 0; //@line 7529
   $4 = $0 + 100 | 0; //@line 7530
   do {
    $5 = HEAP32[$3 >> 2] | 0; //@line 7532
    if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $5 + 1; //@line 7537
     $12 = HEAPU8[$5 >> 0] | 0; //@line 7540
    } else {
     $12 = ___shgetc($0) | 0; //@line 7543
    }
   } while ((_isspace($12) | 0) != 0);
   L13 : do {
    switch ($12 | 0) {
    case 43:
    case 45:
     {
      $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0; //@line 7557
      $19 = HEAP32[$3 >> 2] | 0; //@line 7558
      if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $19 + 1; //@line 7563
       $$0 = HEAPU8[$19 >> 0] | 0; //@line 7566
       $$0113 = $18; //@line 7566
       break L13;
      } else {
       $$0 = ___shgetc($0) | 0; //@line 7570
       $$0113 = $18; //@line 7570
       break L13;
      }
      break;
     }
    default:
     {
      $$0 = $12; //@line 7576
      $$0113 = 1; //@line 7576
     }
    }
   } while (0);
   $$0107127 = 0; //@line 7580
   $$1128 = $$0; //@line 7580
   while (1) {
    if (($$1128 | 32 | 0) != (HEAP8[3209 + $$0107127 >> 0] | 0)) {
     $$0107$lcssa = $$0107127; //@line 7588
     $$1$lcssa = $$1128; //@line 7588
     break;
    }
    do {
     if ($$0107127 >>> 0 < 7) {
      $32 = HEAP32[$3 >> 2] | 0; //@line 7594
      if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $32 + 1; //@line 7599
       $$2 = HEAPU8[$32 >> 0] | 0; //@line 7602
       break;
      } else {
       $$2 = ___shgetc($0) | 0; //@line 7606
       break;
      }
     } else {
      $$2 = $$1128; //@line 7610
     }
    } while (0);
    $39 = $$0107127 + 1 | 0; //@line 7613
    if ($39 >>> 0 < 8) {
     $$0107127 = $39; //@line 7616
     $$1128 = $$2; //@line 7616
    } else {
     $$0107$lcssa = $39; //@line 7618
     $$1$lcssa = $$2; //@line 7618
     break;
    }
   }
   L29 : do {
    switch ($$0107$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23; //@line 7628
      break;
     }
    default:
     {
      $42 = ($2 | 0) != 0; //@line 7633
      if ($42 & $$0107$lcssa >>> 0 > 3) {
       if (($$0107$lcssa | 0) == 8) {
        break L29;
       } else {
        label = 23; //@line 7640
        break L29;
       }
      }
      L34 : do {
       if (!$$0107$lcssa) {
        $$2109125 = 0; //@line 7647
        $$3126 = $$1$lcssa; //@line 7647
        while (1) {
         if (($$3126 | 32 | 0) != (HEAP8[3992 + $$2109125 >> 0] | 0)) {
          $$3110 = $$2109125; //@line 7655
          $$5 = $$3126; //@line 7655
          break L34;
         }
         do {
          if ($$2109125 >>> 0 < 2) {
           $63 = HEAP32[$3 >> 2] | 0; //@line 7661
           if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
            HEAP32[$3 >> 2] = $63 + 1; //@line 7666
            $$4 = HEAPU8[$63 >> 0] | 0; //@line 7669
            break;
           } else {
            $$4 = ___shgetc($0) | 0; //@line 7673
            break;
           }
          } else {
           $$4 = $$3126; //@line 7677
          }
         } while (0);
         $70 = $$2109125 + 1 | 0; //@line 7680
         if ($70 >>> 0 < 3) {
          $$2109125 = $70; //@line 7683
          $$3126 = $$4; //@line 7683
         } else {
          $$3110 = $70; //@line 7685
          $$5 = $$4; //@line 7685
          break;
         }
        }
       } else {
        $$3110 = $$0107$lcssa; //@line 7690
        $$5 = $$1$lcssa; //@line 7690
       }
      } while (0);
      switch ($$3110 | 0) {
      case 3:
       {
        $72 = HEAP32[$3 >> 2] | 0; //@line 7695
        if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $72 + 1; //@line 7700
         $80 = HEAPU8[$72 >> 0] | 0; //@line 7703
        } else {
         $80 = ___shgetc($0) | 0; //@line 7706
        }
        if (($80 | 0) == 40) {
         $$4111 = 1; //@line 7710
        } else {
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$0114 = nan; //@line 7715
          break L4;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7720
         $$0114 = nan; //@line 7721
         break L4;
        }
        while (1) {
         $85 = HEAP32[$3 >> 2] | 0; //@line 7725
         if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $85 + 1; //@line 7730
          $93 = HEAPU8[$85 >> 0] | 0; //@line 7733
         } else {
          $93 = ___shgetc($0) | 0; //@line 7736
         }
         if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) {
          if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) {
           break;
          }
         }
         $$4111 = $$4111 + 1 | 0; //@line 7753
        }
        if (($93 | 0) == 41) {
         $$0114 = nan; //@line 7757
         break L4;
        }
        $102 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7761
        if (!$102) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7765
        }
        if (!$42) {
         HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7769
         ___shlim($0, 0); //@line 7770
         $$0114 = 0.0; //@line 7771
         break L4;
        }
        if (!$$4111) {
         $$0114 = nan; //@line 7776
         break L4;
        } else {
         $$in = $$4111; //@line 7779
        }
        while (1) {
         $$in = $$in + -1 | 0; //@line 7782
         if (!$102) {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7786
         }
         if (!$$in) {
          $$0114 = nan; //@line 7790
          break L4;
         }
        }
        break;
       }
      case 0:
       {
        if (($$5 | 0) == 48) {
         $118 = HEAP32[$3 >> 2] | 0; //@line 7801
         if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $118 + 1; //@line 7806
          $126 = HEAPU8[$118 >> 0] | 0; //@line 7809
         } else {
          $126 = ___shgetc($0) | 0; //@line 7812
         }
         if (($126 | 32 | 0) == 120) {
          $$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7818
          break L4;
         }
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$6 = 48; //@line 7824
         } else {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7828
          $$6 = 48; //@line 7829
         }
        } else {
         $$6 = $$5; //@line 7832
        }
        $$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7835
        break L4;
        break;
       }
      default:
       {
        if (HEAP32[$4 >> 2] | 0) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7845
        }
        HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7848
        ___shlim($0, 0); //@line 7849
        $$0114 = 0.0; //@line 7850
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $45 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7859
    if (!$45) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7863
    }
    if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
     $$1108 = $$0107$lcssa; //@line 7869
     do {
      if (!$45) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7874
      }
      $$1108 = $$1108 + -1 | 0; //@line 7876
     } while ($$1108 >>> 0 > 3);
    }
   }
   $$0114 = +($$0113 | 0) * inf; //@line 7889
  }
 } while (0);
 return +$$0114;
}
function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge4 = 0;
 $2 = $0 + 4 | 0; //@line 3211
 $3 = HEAP32[$2 >> 2] | 0; //@line 3212
 $4 = $3 & -8; //@line 3213
 $5 = $0 + $4 | 0; //@line 3214
 $6 = HEAP32[1697] | 0; //@line 3215
 $8 = $3 & 3; //@line 3217
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) {
  _abort(); //@line 3223
 }
 $11 = $5 + 4 | 0; //@line 3226
 $12 = HEAP32[$11 >> 2] | 0; //@line 3227
 if (!($12 & 1)) {
  _abort(); //@line 3231
 }
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0; //@line 3238
   return $$2 | 0; //@line 3239
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) {
   if (($4 - $1 | 0) >>> 0 <= HEAP32[1813] << 1 >>> 0) {
    $$2 = $0; //@line 3249
    return $$2 | 0; //@line 3250
   }
  }
  $$2 = 0; //@line 3253
  return $$2 | 0; //@line 3254
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0; //@line 3258
  if ($24 >>> 0 <= 15) {
   $$2 = $0; //@line 3261
   return $$2 | 0; //@line 3262
  }
  $26 = $0 + $1 | 0; //@line 3264
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3268
  HEAP32[$26 + 4 >> 2] = $24 | 3; //@line 3271
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1; //@line 3274
  _dispose_chunk($26, $24); //@line 3275
  $$2 = $0; //@line 3276
  return $$2 | 0; //@line 3277
 }
 if ((HEAP32[1699] | 0) == ($5 | 0)) {
  $37 = (HEAP32[1696] | 0) + $4 | 0; //@line 3283
  $39 = $37 - $1 | 0; //@line 3285
  $40 = $0 + $1 | 0; //@line 3286
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0; //@line 3288
   return $$2 | 0; //@line 3289
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3296
  HEAP32[$40 + 4 >> 2] = $39 | 1; //@line 3297
  HEAP32[1699] = $40; //@line 3298
  HEAP32[1696] = $39; //@line 3299
  $$2 = $0; //@line 3300
  return $$2 | 0; //@line 3301
 }
 if ((HEAP32[1698] | 0) == ($5 | 0)) {
  $49 = (HEAP32[1695] | 0) + $4 | 0; //@line 3307
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0; //@line 3310
   return $$2 | 0; //@line 3311
  }
  $51 = $49 - $1 | 0; //@line 3313
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0; //@line 3316
   $54 = $0 + $49 | 0; //@line 3317
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3321
   HEAP32[$53 + 4 >> 2] = $51 | 1; //@line 3324
   HEAP32[$54 >> 2] = $51; //@line 3325
   $60 = $54 + 4 | 0; //@line 3326
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2; //@line 3329
   $storemerge = $53; //@line 3330
   $storemerge4 = $51; //@line 3330
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2; //@line 3335
   $67 = $0 + $49 + 4 | 0; //@line 3337
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1; //@line 3340
   $storemerge = 0; //@line 3341
   $storemerge4 = 0; //@line 3341
  }
  HEAP32[1695] = $storemerge4; //@line 3343
  HEAP32[1698] = $storemerge; //@line 3344
  $$2 = $0; //@line 3345
  return $$2 | 0; //@line 3346
 }
 if ($12 & 2 | 0) {
  $$2 = 0; //@line 3351
  return $$2 | 0; //@line 3352
 }
 $73 = ($12 & -8) + $4 | 0; //@line 3355
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0; //@line 3358
  return $$2 | 0; //@line 3359
 }
 $75 = $73 - $1 | 0; //@line 3361
 $76 = $12 >>> 3; //@line 3362
 L49 : do {
  if ($12 >>> 0 < 256) {
   $79 = HEAP32[$5 + 8 >> 2] | 0; //@line 3367
   $81 = HEAP32[$5 + 12 >> 2] | 0; //@line 3369
   $83 = 6812 + ($76 << 1 << 2) | 0; //@line 3371
   if (($79 | 0) != ($83 | 0)) {
    if ($6 >>> 0 > $79 >>> 0) {
     _abort(); //@line 3376
    }
    if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) {
     _abort(); //@line 3383
    }
   }
   if (($81 | 0) == ($79 | 0)) {
    HEAP32[1693] = HEAP32[1693] & ~(1 << $76); //@line 3393
    break;
   }
   if (($81 | 0) == ($83 | 0)) {
    $$pre$phiZ2D = $81 + 8 | 0; //@line 3399
   } else {
    if ($6 >>> 0 > $81 >>> 0) {
     _abort(); //@line 3403
    }
    $96 = $81 + 8 | 0; //@line 3406
    if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) {
     $$pre$phiZ2D = $96; //@line 3410
    } else {
     _abort(); //@line 3412
    }
   }
   HEAP32[$79 + 12 >> 2] = $81; //@line 3417
   HEAP32[$$pre$phiZ2D >> 2] = $79; //@line 3418
  } else {
   $101 = HEAP32[$5 + 24 >> 2] | 0; //@line 3421
   $103 = HEAP32[$5 + 12 >> 2] | 0; //@line 3423
   do {
    if (($103 | 0) == ($5 | 0)) {
     $114 = $5 + 16 | 0; //@line 3427
     $115 = $114 + 4 | 0; //@line 3428
     $116 = HEAP32[$115 >> 2] | 0; //@line 3429
     if (!$116) {
      $118 = HEAP32[$114 >> 2] | 0; //@line 3432
      if (!$118) {
       $$3 = 0; //@line 3435
       break;
      } else {
       $$1272 = $118; //@line 3438
       $$1275 = $114; //@line 3438
      }
     } else {
      $$1272 = $116; //@line 3441
      $$1275 = $115; //@line 3441
     }
     while (1) {
      $120 = $$1272 + 20 | 0; //@line 3444
      $121 = HEAP32[$120 >> 2] | 0; //@line 3445
      if ($121 | 0) {
       $$1272 = $121; //@line 3448
       $$1275 = $120; //@line 3448
       continue;
      }
      $123 = $$1272 + 16 | 0; //@line 3451
      $124 = HEAP32[$123 >> 2] | 0; //@line 3452
      if (!$124) {
       break;
      } else {
       $$1272 = $124; //@line 3457
       $$1275 = $123; //@line 3457
      }
     }
     if ($6 >>> 0 > $$1275 >>> 0) {
      _abort(); //@line 3462
     } else {
      HEAP32[$$1275 >> 2] = 0; //@line 3465
      $$3 = $$1272; //@line 3466
      break;
     }
    } else {
     $106 = HEAP32[$5 + 8 >> 2] | 0; //@line 3471
     if ($6 >>> 0 > $106 >>> 0) {
      _abort(); //@line 3474
     }
     $108 = $106 + 12 | 0; //@line 3477
     if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) {
      _abort(); //@line 3481
     }
     $111 = $103 + 8 | 0; //@line 3484
     if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$108 >> 2] = $103; //@line 3488
      HEAP32[$111 >> 2] = $106; //@line 3489
      $$3 = $103; //@line 3490
      break;
     } else {
      _abort(); //@line 3493
     }
    }
   } while (0);
   if ($101 | 0) {
    $129 = HEAP32[$5 + 28 >> 2] | 0; //@line 3501
    $130 = 7076 + ($129 << 2) | 0; //@line 3502
    do {
     if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$130 >> 2] = $$3; //@line 3507
      if (!$$3) {
       HEAP32[1694] = HEAP32[1694] & ~(1 << $129); //@line 3514
       break L49;
      }
     } else {
      if ((HEAP32[1697] | 0) >>> 0 > $101 >>> 0) {
       _abort(); //@line 3521
      } else {
       HEAP32[$101 + 16 + (((HEAP32[$101 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3; //@line 3529
       if (!$$3) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $144 = HEAP32[1697] | 0; //@line 3539
    if ($144 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3542
    }
    HEAP32[$$3 + 24 >> 2] = $101; //@line 3546
    $147 = $5 + 16 | 0; //@line 3547
    $148 = HEAP32[$147 >> 2] | 0; //@line 3548
    do {
     if ($148 | 0) {
      if ($144 >>> 0 > $148 >>> 0) {
       _abort(); //@line 3554
      } else {
       HEAP32[$$3 + 16 >> 2] = $148; //@line 3558
       HEAP32[$148 + 24 >> 2] = $$3; //@line 3560
       break;
      }
     }
    } while (0);
    $154 = HEAP32[$147 + 4 >> 2] | 0; //@line 3566
    if ($154 | 0) {
     if ((HEAP32[1697] | 0) >>> 0 > $154 >>> 0) {
      _abort(); //@line 3572
     } else {
      HEAP32[$$3 + 20 >> 2] = $154; //@line 3576
      HEAP32[$154 + 24 >> 2] = $$3; //@line 3578
      break;
     }
    }
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $73 | $3 & 1 | 2; //@line 3590
  $165 = $0 + $73 + 4 | 0; //@line 3592
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1; //@line 3595
  $$2 = $0; //@line 3596
  return $$2 | 0; //@line 3597
 } else {
  $168 = $0 + $1 | 0; //@line 3599
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3603
  HEAP32[$168 + 4 >> 2] = $75 | 3; //@line 3606
  $175 = $0 + $73 + 4 | 0; //@line 3608
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1; //@line 3611
  _dispose_chunk($168, $75); //@line 3612
  $$2 = $0; //@line 3613
  return $$2 | 0; //@line 3614
 }
 return 0; //@line 3616
}
function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9447
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9447
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9448
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9449
 $4 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9449
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9450
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 9451
 $8 = $6 & 2047; //@line 9453
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0; //@line 9454
 $11 = $9 & 2047; //@line 9456
 $12 = $3 & -2147483648; //@line 9457
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0; //@line 9458
 $14 = tempRet0; //@line 9459
 L1 : do {
  if (($13 | 0) == 0 & ($14 | 0) == 0) {
   label = 3; //@line 9465
  } else {
   $18 = ___DOUBLE_BITS_563($1) | 0; //@line 9467
   $20 = tempRet0 & 2147483647; //@line 9469
   if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) {
    label = 3; //@line 9478
   } else {
    $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0; //@line 9480
    $30 = tempRet0; //@line 9481
    if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) {
     return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
    }
    if (!$8) {
     $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0; //@line 9497
     $42 = tempRet0; //@line 9498
     if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
      $$073100 = 0; //@line 9505
      $49 = $41; //@line 9505
      $50 = $42; //@line 9505
      while (1) {
       $48 = $$073100 + -1 | 0; //@line 9507
       $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0; //@line 9508
       $50 = tempRet0; //@line 9509
       if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
        $$073$lcssa = $48; //@line 9518
        break;
       } else {
        $$073100 = $48; //@line 9516
       }
      }
     } else {
      $$073$lcssa = 0; //@line 9523
     }
     $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0; //@line 9526
     $$174 = $$073$lcssa; //@line 9528
     $87 = $59; //@line 9528
     $88 = tempRet0; //@line 9528
    } else {
     $$174 = $8; //@line 9532
     $87 = $2; //@line 9532
     $88 = $3 & 1048575 | 1048576; //@line 9532
    }
    if (!$11) {
     $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0; //@line 9536
     $65 = tempRet0; //@line 9537
     if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
      $$07194 = 0; //@line 9544
      $72 = $64; //@line 9544
      $73 = $65; //@line 9544
      while (1) {
       $71 = $$07194 + -1 | 0; //@line 9546
       $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0; //@line 9547
       $73 = tempRet0; //@line 9548
       if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
        $$071$lcssa = $71; //@line 9557
        break;
       } else {
        $$07194 = $71; //@line 9555
       }
      }
     } else {
      $$071$lcssa = 0; //@line 9562
     }
     $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0; //@line 9565
     $$172$ph = $$071$lcssa; //@line 9567
     $89 = $82; //@line 9567
     $90 = tempRet0; //@line 9567
    } else {
     $$172$ph = $11; //@line 9571
     $89 = $4; //@line 9571
     $90 = $5 & 1048575 | 1048576; //@line 9571
    }
    $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0; //@line 9574
    $92 = tempRet0; //@line 9575
    $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295; //@line 9580
    L23 : do {
     if (($$174 | 0) > ($$172$ph | 0)) {
      $$27586 = $$174; //@line 9583
      $101 = $92; //@line 9583
      $156 = $97; //@line 9583
      $157 = $87; //@line 9583
      $158 = $88; //@line 9583
      $99 = $91; //@line 9583
      while (1) {
       if ($156) {
        if (($99 | 0) == 0 & ($101 | 0) == 0) {
         break;
        } else {
         $104 = $99; //@line 9592
         $105 = $101; //@line 9592
        }
       } else {
        $104 = $157; //@line 9595
        $105 = $158; //@line 9595
       }
       $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0; //@line 9597
       $107 = tempRet0; //@line 9598
       $108 = $$27586 + -1 | 0; //@line 9599
       $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0; //@line 9601
       $111 = tempRet0; //@line 9602
       $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295; //@line 9607
       if (($108 | 0) > ($$172$ph | 0)) {
        $$27586 = $108; //@line 9609
        $101 = $111; //@line 9609
        $156 = $116; //@line 9609
        $157 = $106; //@line 9609
        $158 = $107; //@line 9609
        $99 = $110; //@line 9609
       } else {
        $$275$lcssa = $108; //@line 9611
        $$lcssa = $116; //@line 9611
        $118 = $110; //@line 9611
        $120 = $111; //@line 9611
        $159 = $106; //@line 9611
        $160 = $107; //@line 9611
        break L23;
       }
      }
      $$070 = $0 * 0.0; //@line 9616
      break L1;
     } else {
      $$275$lcssa = $$174; //@line 9619
      $$lcssa = $97; //@line 9619
      $118 = $91; //@line 9619
      $120 = $92; //@line 9619
      $159 = $87; //@line 9619
      $160 = $88; //@line 9619
     }
    } while (0);
    if ($$lcssa) {
     if (($118 | 0) == 0 & ($120 | 0) == 0) {
      $$070 = $0 * 0.0; //@line 9628
      break;
     } else {
      $123 = $120; //@line 9631
      $125 = $118; //@line 9631
     }
    } else {
     $123 = $160; //@line 9634
     $125 = $159; //@line 9634
    }
    if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
     $$37683 = $$275$lcssa; //@line 9642
     $130 = $125; //@line 9642
     $131 = $123; //@line 9642
     while (1) {
      $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0; //@line 9644
      $133 = tempRet0; //@line 9645
      $134 = $$37683 + -1 | 0; //@line 9646
      if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
       $$37683 = $134; //@line 9653
       $130 = $132; //@line 9653
       $131 = $133; //@line 9653
      } else {
       $$376$lcssa = $134; //@line 9655
       $141 = $132; //@line 9655
       $142 = $133; //@line 9655
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa; //@line 9660
     $141 = $125; //@line 9660
     $142 = $123; //@line 9660
    }
    if (($$376$lcssa | 0) > 0) {
     $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0; //@line 9664
     $144 = tempRet0; //@line 9665
     $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0; //@line 9666
     $153 = $144 | tempRet0; //@line 9670
     $154 = $143 | $145; //@line 9670
    } else {
     $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0; //@line 9673
     $153 = tempRet0; //@line 9675
     $154 = $150; //@line 9675
    }
    HEAP32[tempDoublePtr >> 2] = $154; //@line 9678
    HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12; //@line 9678
    $$070 = +HEAPF64[tempDoublePtr >> 3]; //@line 9679
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1; //@line 9684
  $$070 = $27 / $27; //@line 9686
 }
 return +$$070;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_132($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3964
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3966
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3968
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3970
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3972
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3974
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3976
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3978
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3980
 HEAP32[$AsyncRetVal >> 2] = 0; //@line 3981
 HEAP32[$AsyncRetVal + 4 >> 2] = 0; //@line 3981
 HEAP32[$AsyncRetVal + 8 >> 2] = 0; //@line 3981
 HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 3981
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 3982
 $17 = $6 + 32 | 0; //@line 3984
 do {
  if (($AsyncRetVal | 0) == ($17 | 0)) {
   $51 = $AsyncRetVal; //@line 3988
   $53 = $AsyncRetVal; //@line 3988
  } else {
   $19 = $AsyncRetVal + 12 | 0; //@line 3990
   $20 = HEAP32[$19 >> 2] | 0; //@line 3991
   if ($20 | 0) {
    $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 3995
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(44) | 0; //@line 3996
    FUNCTION_TABLE_vi[$23 & 511]($AsyncRetVal); //@line 3997
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 213; //@line 4000
     $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 4001
     HEAP32[$24 >> 2] = $6; //@line 4002
     $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 4003
     HEAP32[$25 >> 2] = $8; //@line 4004
     $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 4005
     HEAP32[$26 >> 2] = $2; //@line 4006
     $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 4007
     HEAP32[$27 >> 2] = $4; //@line 4008
     $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 4009
     HEAP32[$28 >> 2] = $AsyncRetVal; //@line 4010
     $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 4011
     HEAP32[$29 >> 2] = $17; //@line 4012
     $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 4013
     HEAP32[$30 >> 2] = $10; //@line 4014
     $31 = $ReallocAsyncCtx8 + 32 | 0; //@line 4015
     HEAP32[$31 >> 2] = $12; //@line 4016
     $32 = $ReallocAsyncCtx8 + 36 | 0; //@line 4017
     HEAP32[$32 >> 2] = $19; //@line 4018
     $33 = $ReallocAsyncCtx8 + 40 | 0; //@line 4019
     HEAP32[$33 >> 2] = $14; //@line 4020
     sp = STACKTOP; //@line 4021
     return;
    }
    ___async_unwind = 0; //@line 4024
    HEAP32[$ReallocAsyncCtx8 >> 2] = 213; //@line 4025
    $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 4026
    HEAP32[$24 >> 2] = $6; //@line 4027
    $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 4028
    HEAP32[$25 >> 2] = $8; //@line 4029
    $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 4030
    HEAP32[$26 >> 2] = $2; //@line 4031
    $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 4032
    HEAP32[$27 >> 2] = $4; //@line 4033
    $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 4034
    HEAP32[$28 >> 2] = $AsyncRetVal; //@line 4035
    $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 4036
    HEAP32[$29 >> 2] = $17; //@line 4037
    $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 4038
    HEAP32[$30 >> 2] = $10; //@line 4039
    $31 = $ReallocAsyncCtx8 + 32 | 0; //@line 4040
    HEAP32[$31 >> 2] = $12; //@line 4041
    $32 = $ReallocAsyncCtx8 + 36 | 0; //@line 4042
    HEAP32[$32 >> 2] = $19; //@line 4043
    $33 = $ReallocAsyncCtx8 + 40 | 0; //@line 4044
    HEAP32[$33 >> 2] = $14; //@line 4045
    sp = STACKTOP; //@line 4046
    return;
   }
   $34 = $6 + 44 | 0; //@line 4049
   $35 = HEAP32[$34 >> 2] | 0; //@line 4050
   if (!$35) {
    HEAP32[$19 >> 2] = 0; //@line 4053
    $$pre85 = HEAP32[$14 >> 2] | 0; //@line 4054
    $51 = $$pre85; //@line 4056
    $53 = $$pre85; //@line 4056
    break;
   }
   $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 4060
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 4061
   FUNCTION_TABLE_vii[$38 & 7]($AsyncRetVal, $17); //@line 4062
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 4065
    $39 = $ReallocAsyncCtx9 + 4 | 0; //@line 4066
    HEAP32[$39 >> 2] = $34; //@line 4067
    $40 = $ReallocAsyncCtx9 + 8 | 0; //@line 4068
    HEAP32[$40 >> 2] = $19; //@line 4069
    $41 = $ReallocAsyncCtx9 + 12 | 0; //@line 4070
    HEAP32[$41 >> 2] = $14; //@line 4071
    $42 = $ReallocAsyncCtx9 + 16 | 0; //@line 4072
    HEAP32[$42 >> 2] = $10; //@line 4073
    $43 = $ReallocAsyncCtx9 + 20 | 0; //@line 4074
    HEAP32[$43 >> 2] = $8; //@line 4075
    $44 = $ReallocAsyncCtx9 + 24 | 0; //@line 4076
    HEAP32[$44 >> 2] = $12; //@line 4077
    $45 = $ReallocAsyncCtx9 + 28 | 0; //@line 4078
    HEAP32[$45 >> 2] = $2; //@line 4079
    $46 = $ReallocAsyncCtx9 + 32 | 0; //@line 4080
    HEAP32[$46 >> 2] = $4; //@line 4081
    $47 = $ReallocAsyncCtx9 + 36 | 0; //@line 4082
    HEAP32[$47 >> 2] = $6; //@line 4083
    sp = STACKTOP; //@line 4084
    return;
   }
   ___async_unwind = 0; //@line 4087
   HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 4088
   $39 = $ReallocAsyncCtx9 + 4 | 0; //@line 4089
   HEAP32[$39 >> 2] = $34; //@line 4090
   $40 = $ReallocAsyncCtx9 + 8 | 0; //@line 4091
   HEAP32[$40 >> 2] = $19; //@line 4092
   $41 = $ReallocAsyncCtx9 + 12 | 0; //@line 4093
   HEAP32[$41 >> 2] = $14; //@line 4094
   $42 = $ReallocAsyncCtx9 + 16 | 0; //@line 4095
   HEAP32[$42 >> 2] = $10; //@line 4096
   $43 = $ReallocAsyncCtx9 + 20 | 0; //@line 4097
   HEAP32[$43 >> 2] = $8; //@line 4098
   $44 = $ReallocAsyncCtx9 + 24 | 0; //@line 4099
   HEAP32[$44 >> 2] = $12; //@line 4100
   $45 = $ReallocAsyncCtx9 + 28 | 0; //@line 4101
   HEAP32[$45 >> 2] = $2; //@line 4102
   $46 = $ReallocAsyncCtx9 + 32 | 0; //@line 4103
   HEAP32[$46 >> 2] = $4; //@line 4104
   $47 = $ReallocAsyncCtx9 + 36 | 0; //@line 4105
   HEAP32[$47 >> 2] = $6; //@line 4106
   sp = STACKTOP; //@line 4107
   return;
  }
 } while (0);
 HEAP32[$51 + 16 >> 2] = HEAP32[$10 >> 2]; //@line 4113
 HEAP32[$8 + 8 >> 2] = 0; //@line 4115
 HEAP32[$8 >> 2] = 215; //@line 4116
 HEAP32[$8 + 4 >> 2] = $53; //@line 4118
 $54 = $8 + 12 | 0; //@line 4119
 HEAP32[$54 >> 2] = 724; //@line 4120
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 4121
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $8); //@line 4122
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 4125
  $55 = $ReallocAsyncCtx18 + 4 | 0; //@line 4126
  HEAP32[$55 >> 2] = $54; //@line 4127
  $56 = $ReallocAsyncCtx18 + 8 | 0; //@line 4128
  HEAP32[$56 >> 2] = $2; //@line 4129
  $57 = $ReallocAsyncCtx18 + 12 | 0; //@line 4130
  HEAP32[$57 >> 2] = $4; //@line 4131
  $58 = $ReallocAsyncCtx18 + 16 | 0; //@line 4132
  HEAP32[$58 >> 2] = $8; //@line 4133
  $59 = $ReallocAsyncCtx18 + 20 | 0; //@line 4134
  HEAP32[$59 >> 2] = $6; //@line 4135
  sp = STACKTOP; //@line 4136
  return;
 }
 ___async_unwind = 0; //@line 4139
 HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 4140
 $55 = $ReallocAsyncCtx18 + 4 | 0; //@line 4141
 HEAP32[$55 >> 2] = $54; //@line 4142
 $56 = $ReallocAsyncCtx18 + 8 | 0; //@line 4143
 HEAP32[$56 >> 2] = $2; //@line 4144
 $57 = $ReallocAsyncCtx18 + 12 | 0; //@line 4145
 HEAP32[$57 >> 2] = $4; //@line 4146
 $58 = $ReallocAsyncCtx18 + 16 | 0; //@line 4147
 HEAP32[$58 >> 2] = $8; //@line 4148
 $59 = $ReallocAsyncCtx18 + 20 | 0; //@line 4149
 HEAP32[$59 >> 2] = $6; //@line 4150
 sp = STACKTOP; //@line 4151
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_13($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16762
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16764
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16766
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16768
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16770
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16772
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16774
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16776
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16778
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16780
 $19 = $6 + 12 | 0; //@line 16781
 $20 = HEAP32[$19 >> 2] | 0; //@line 16782
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 16786
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 16787
  FUNCTION_TABLE_vii[$23 & 7]($2, $6); //@line 16788
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 92; //@line 16791
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 16792
   HEAP32[$24 >> 2] = $2; //@line 16793
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 16794
   HEAP32[$25 >> 2] = $4; //@line 16795
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 16796
   HEAP32[$26 >> 2] = $8; //@line 16797
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 16798
   HEAP32[$27 >> 2] = $19; //@line 16799
   $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 16800
   HEAP32[$28 >> 2] = $10; //@line 16801
   $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 16802
   HEAP32[$29 >> 2] = $12; //@line 16803
   $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 16804
   HEAP32[$30 >> 2] = $14; //@line 16805
   $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 16806
   HEAP32[$31 >> 2] = $16; //@line 16807
   $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 16808
   HEAP32[$32 >> 2] = $18; //@line 16809
   sp = STACKTOP; //@line 16810
   return;
  }
  ___async_unwind = 0; //@line 16813
  HEAP32[$ReallocAsyncCtx4 >> 2] = 92; //@line 16814
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 16815
  HEAP32[$24 >> 2] = $2; //@line 16816
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 16817
  HEAP32[$25 >> 2] = $4; //@line 16818
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 16819
  HEAP32[$26 >> 2] = $8; //@line 16820
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 16821
  HEAP32[$27 >> 2] = $19; //@line 16822
  $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 16823
  HEAP32[$28 >> 2] = $10; //@line 16824
  $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 16825
  HEAP32[$29 >> 2] = $12; //@line 16826
  $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 16827
  HEAP32[$30 >> 2] = $14; //@line 16828
  $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 16829
  HEAP32[$31 >> 2] = $16; //@line 16830
  $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 16831
  HEAP32[$32 >> 2] = $18; //@line 16832
  sp = STACKTOP; //@line 16833
  return;
 }
 $33 = $2 + 12 | 0; //@line 16836
 HEAP32[$33 >> 2] = 0; //@line 16837
 $34 = $4 + 12 | 0; //@line 16838
 $35 = HEAP32[$34 >> 2] | 0; //@line 16839
 if (!$35) {
  $48 = $12 + 12 | 0; //@line 16842
  HEAP32[$48 >> 2] = 0; //@line 16843
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 16844
  $49 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $2, $12, $18) | 0; //@line 16845
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 94; //@line 16848
   $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 16849
   HEAP32[$50 >> 2] = $48; //@line 16850
   $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 16851
   HEAP32[$51 >> 2] = $33; //@line 16852
   $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 16853
   HEAP32[$52 >> 2] = $12; //@line 16854
   $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 16855
   HEAP32[$53 >> 2] = $34; //@line 16856
   $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 16857
   HEAP32[$54 >> 2] = $2; //@line 16858
   $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 16859
   HEAP32[$55 >> 2] = $10; //@line 16860
   $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 16861
   HEAP32[$56 >> 2] = $8; //@line 16862
   sp = STACKTOP; //@line 16863
   return;
  }
  HEAP32[___async_retval >> 2] = $49; //@line 16867
  ___async_unwind = 0; //@line 16868
  HEAP32[$ReallocAsyncCtx9 >> 2] = 94; //@line 16869
  $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 16870
  HEAP32[$50 >> 2] = $48; //@line 16871
  $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 16872
  HEAP32[$51 >> 2] = $33; //@line 16873
  $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 16874
  HEAP32[$52 >> 2] = $12; //@line 16875
  $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 16876
  HEAP32[$53 >> 2] = $34; //@line 16877
  $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 16878
  HEAP32[$54 >> 2] = $2; //@line 16879
  $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 16880
  HEAP32[$55 >> 2] = $10; //@line 16881
  $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 16882
  HEAP32[$56 >> 2] = $8; //@line 16883
  sp = STACKTOP; //@line 16884
  return;
 } else {
  $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 16888
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 16889
  FUNCTION_TABLE_vii[$38 & 7]($12, $10); //@line 16890
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 93; //@line 16893
   $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 16894
   HEAP32[$39 >> 2] = $34; //@line 16895
   $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 16896
   HEAP32[$40 >> 2] = $8; //@line 16897
   $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 16898
   HEAP32[$41 >> 2] = $10; //@line 16899
   $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 16900
   HEAP32[$42 >> 2] = $12; //@line 16901
   $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 16902
   HEAP32[$43 >> 2] = $14; //@line 16903
   $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 16904
   HEAP32[$44 >> 2] = $16; //@line 16905
   $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 16906
   HEAP32[$45 >> 2] = $2; //@line 16907
   $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 16908
   HEAP32[$46 >> 2] = $18; //@line 16909
   $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 16910
   HEAP32[$47 >> 2] = $33; //@line 16911
   sp = STACKTOP; //@line 16912
   return;
  }
  ___async_unwind = 0; //@line 16915
  HEAP32[$ReallocAsyncCtx5 >> 2] = 93; //@line 16916
  $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 16917
  HEAP32[$39 >> 2] = $34; //@line 16918
  $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 16919
  HEAP32[$40 >> 2] = $8; //@line 16920
  $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 16921
  HEAP32[$41 >> 2] = $10; //@line 16922
  $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 16923
  HEAP32[$42 >> 2] = $12; //@line 16924
  $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 16925
  HEAP32[$43 >> 2] = $14; //@line 16926
  $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 16927
  HEAP32[$44 >> 2] = $16; //@line 16928
  $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 16929
  HEAP32[$45 >> 2] = $2; //@line 16930
  $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 16931
  HEAP32[$46 >> 2] = $18; //@line 16932
  $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 16933
  HEAP32[$47 >> 2] = $33; //@line 16934
  sp = STACKTOP; //@line 16935
  return;
 }
}
function __ZL28nsapi_dns_query_async_deletei($0) {
 $0 = $0 | 0;
 var $$04011$lcssa = 0, $$1$off0 = 0, $$1$off0$1 = 0, $$1$off0$2 = 0, $$1$off0$3 = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $1 = 0, $105 = 0, $109 = 0, $113 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $29 = 0, $33 = 0, $36 = 0, $39 = 0, $44 = 0, $47 = 0, $5 = 0, $50 = 0, $54 = 0, $58 = 0, $62 = 0, $7 = 0, $73 = 0, $83 = 0, $93 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10063
 $1 = HEAP32[1685] | 0; //@line 10064
 $2 = ($1 | 0) == 0; //@line 10065
 if ($2) {
  label = 4; //@line 10067
 } else {
  if ((HEAP32[$1 >> 2] | 0) == ($0 | 0)) {
   $$04011$lcssa = 0; //@line 10072
   $$lcssa = $1; //@line 10072
  } else {
   label = 4; //@line 10074
  }
 }
 do {
  if ((label | 0) == 4) {
   $7 = HEAP32[1686] | 0; //@line 10079
   if ($7 | 0) {
    if ((HEAP32[$7 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 1; //@line 10085
     $$lcssa = $7; //@line 10085
     break;
    }
   }
   $105 = HEAP32[1687] | 0; //@line 10089
   if ($105 | 0) {
    if ((HEAP32[$105 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 2; //@line 10095
     $$lcssa = $105; //@line 10095
     break;
    }
   }
   $109 = HEAP32[1688] | 0; //@line 10099
   if ($109 | 0) {
    if ((HEAP32[$109 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 3; //@line 10105
     $$lcssa = $109; //@line 10105
     break;
    }
   }
   $113 = HEAP32[1689] | 0; //@line 10109
   if (!$113) {
    return;
   }
   if ((HEAP32[$113 >> 2] | 0) == ($0 | 0)) {
    $$04011$lcssa = 4; //@line 10117
    $$lcssa = $113; //@line 10117
   } else {
    return;
   }
  }
 } while (0);
 $5 = $$lcssa + 8 | 0; //@line 10123
 if ($2 | ($1 | 0) == ($$lcssa | 0)) {
  $$1$off0 = 1; //@line 10127
 } else {
  if (!(HEAP32[$1 + 56 >> 2] | 0)) {
   $$1$off0 = 1; //@line 10133
  } else {
   $$1$off0 = (HEAP32[$1 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10139
  }
 }
 $16 = HEAP32[1686] | 0; //@line 10142
 if (($16 | 0) == 0 | ($16 | 0) == ($$lcssa | 0)) {
  $$1$off0$1 = $$1$off0; //@line 10147
 } else {
  if (!(HEAP32[$16 + 56 >> 2] | 0)) {
   $$1$off0$1 = $$1$off0; //@line 10153
  } else {
   $$1$off0$1 = $$1$off0 & (HEAP32[$16 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10160
  }
 }
 $73 = HEAP32[1687] | 0; //@line 10163
 if (($73 | 0) == 0 | ($73 | 0) == ($$lcssa | 0)) {
  $$1$off0$2 = $$1$off0$1; //@line 10168
 } else {
  if (!(HEAP32[$73 + 56 >> 2] | 0)) {
   $$1$off0$2 = $$1$off0$1; //@line 10174
  } else {
   $$1$off0$2 = $$1$off0$1 & (HEAP32[$73 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10181
  }
 }
 $83 = HEAP32[1688] | 0; //@line 10184
 if (($83 | 0) == 0 | ($83 | 0) == ($$lcssa | 0)) {
  $$1$off0$3 = $$1$off0$2; //@line 10189
 } else {
  if (!(HEAP32[$83 + 56 >> 2] | 0)) {
   $$1$off0$3 = $$1$off0$2; //@line 10195
  } else {
   $$1$off0$3 = $$1$off0$2 & (HEAP32[$83 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10202
  }
 }
 $93 = HEAP32[1689] | 0; //@line 10205
 if (($93 | 0) == 0 | ($93 | 0) == ($$lcssa | 0)) {
  label = 47; //@line 10210
 } else {
  if (!(HEAP32[$93 + 56 >> 2] | 0)) {
   label = 47; //@line 10216
  } else {
   if ($$1$off0$3 & (HEAP32[$93 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0)) {
    label = 8; //@line 10224
   }
  }
 }
 if ((label | 0) == 47) {
  if ($$1$off0$3) {
   label = 8; //@line 10230
  }
 }
 if ((label | 0) == 8) {
  $19 = $$lcssa + 56 | 0; //@line 10234
  $20 = HEAP32[$19 >> 2] | 0; //@line 10235
  if ($20 | 0) {
   $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10238
   __ZN6Socket5closeEv($20) | 0; //@line 10239
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 220; //@line 10242
    HEAP32[$AsyncCtx15 + 4 >> 2] = $$lcssa; //@line 10244
    HEAP32[$AsyncCtx15 + 8 >> 2] = $$04011$lcssa; //@line 10246
    HEAP32[$AsyncCtx15 + 12 >> 2] = $19; //@line 10248
    sp = STACKTOP; //@line 10249
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10252
   $25 = HEAP32[$19 >> 2] | 0; //@line 10253
   do {
    if ($25 | 0) {
     $29 = HEAP32[(HEAP32[$25 >> 2] | 0) + 4 >> 2] | 0; //@line 10259
     $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10260
     FUNCTION_TABLE_vi[$29 & 511]($25); //@line 10261
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 221; //@line 10264
      HEAP32[$AsyncCtx + 4 >> 2] = $$lcssa; //@line 10266
      HEAP32[$AsyncCtx + 8 >> 2] = $$04011$lcssa; //@line 10268
      sp = STACKTOP; //@line 10269
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10272
      break;
     }
    }
   } while (0);
   $33 = HEAP32[$$lcssa + 60 >> 2] | 0; //@line 10278
   if ($33 | 0) {
    $36 = HEAP32[$33 + 12 >> 2] | 0; //@line 10282
    do {
     if (!$36) {
      $$pre$phiZ2D = $33; //@line 10286
     } else {
      $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 10289
      $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10290
      FUNCTION_TABLE_vi[$39 & 511]($33); //@line 10291
      if (___async) {
       HEAP32[$AsyncCtx3 >> 2] = 222; //@line 10294
       HEAP32[$AsyncCtx3 + 4 >> 2] = $33; //@line 10296
       HEAP32[$AsyncCtx3 + 8 >> 2] = $$lcssa; //@line 10298
       HEAP32[$AsyncCtx3 + 12 >> 2] = $$04011$lcssa; //@line 10300
       sp = STACKTOP; //@line 10301
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10304
       $$pre$phiZ2D = $33; //@line 10305
       break;
      }
     }
    } while (0);
    __ZdlPv($$pre$phiZ2D); //@line 10310
   }
  }
 }
 $44 = HEAP32[$$lcssa + 64 >> 2] | 0; //@line 10315
 if ($44 | 0) {
  __ZdaPv($44); //@line 10318
 }
 $47 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 10321
 if ($47 | 0) {
  __ZdlPv($47); //@line 10324
 }
 $50 = HEAP32[$$lcssa + 44 >> 2] | 0; //@line 10327
 do {
  if ($50 | 0) {
   $54 = HEAP32[$50 + 8 >> 2] | 0; //@line 10333
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10334
   FUNCTION_TABLE_vi[$54 & 511]($$lcssa + 32 | 0); //@line 10335
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 223; //@line 10338
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$lcssa; //@line 10340
    HEAP32[$AsyncCtx7 + 8 >> 2] = $$04011$lcssa; //@line 10342
    sp = STACKTOP; //@line 10343
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10346
    break;
   }
  }
 } while (0);
 $58 = HEAP32[$$lcssa + 28 >> 2] | 0; //@line 10352
 do {
  if ($58 | 0) {
   $62 = HEAP32[$58 + 8 >> 2] | 0; //@line 10358
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10359
   FUNCTION_TABLE_vi[$62 & 511]($$lcssa + 16 | 0); //@line 10360
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 224; //@line 10363
    HEAP32[$AsyncCtx11 + 4 >> 2] = $$lcssa; //@line 10365
    HEAP32[$AsyncCtx11 + 8 >> 2] = $$04011$lcssa; //@line 10367
    sp = STACKTOP; //@line 10368
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10371
    break;
   }
  }
 } while (0);
 __ZdlPv($$lcssa); //@line 10376
 HEAP32[6740 + ($$04011$lcssa << 2) >> 2] = 0; //@line 10378
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv() {
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$433 = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $32 = 0, $35 = 0, $38 = 0, $41 = 0, $42 = 0, $43 = 0, $47 = 0, $48 = 0, $49 = 0, $53 = 0, $54 = 0, $55 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9041
 STACKTOP = STACKTOP + 32 | 0; //@line 9042
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9042
 $0 = sp + 16 | 0; //@line 9043
 $1 = sp; //@line 9044
 $2 = HEAP32[1685] | 0; //@line 9045
 L1 : do {
  if (!$2) {
   $$1 = 0; //@line 9049
   $$124 = 2147483647; //@line 9049
  } else {
   switch (HEAP32[$2 + 88 >> 2] | 0) {
   case 0:
    {
     $$1 = $2; //@line 9056
     $$124 = HEAP32[$2 >> 2] | 0; //@line 9056
     break L1;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9061
     return;
    }
   default:
    {
     $$1 = 0; //@line 9065
     $$124 = 2147483647; //@line 9065
     break L1;
    }
   }
  }
 } while (0);
 $7 = HEAP32[1686] | 0; //@line 9071
 L7 : do {
  if (!$7) {
   $$1$1 = $$1; //@line 9075
   $$124$1 = $$124; //@line 9075
  } else {
   switch (HEAP32[$7 + 88 >> 2] | 0) {
   case 0:
    {
     $41 = HEAP32[$7 >> 2] | 0; //@line 9081
     $42 = ($41 | 0) > ($$124 | 0); //@line 9082
     $$1$1 = $42 ? $$1 : $7; //@line 9085
     $$124$1 = $42 ? $$124 : $41; //@line 9085
     break L7;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9090
     return;
    }
   default:
    {
     $$1$1 = $$1; //@line 9094
     $$124$1 = $$124; //@line 9094
     break L7;
    }
   }
  }
 } while (0);
 $43 = HEAP32[1687] | 0; //@line 9100
 L13 : do {
  if (!$43) {
   $$1$2 = $$1$1; //@line 9104
   $$124$2 = $$124$1; //@line 9104
  } else {
   switch (HEAP32[$43 + 88 >> 2] | 0) {
   case 0:
    {
     $47 = HEAP32[$43 >> 2] | 0; //@line 9110
     $48 = ($47 | 0) > ($$124$1 | 0); //@line 9111
     $$1$2 = $48 ? $$1$1 : $43; //@line 9114
     $$124$2 = $48 ? $$124$1 : $47; //@line 9114
     break L13;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9119
     return;
    }
   default:
    {
     $$1$2 = $$1$1; //@line 9123
     $$124$2 = $$124$1; //@line 9123
     break L13;
    }
   }
  }
 } while (0);
 $49 = HEAP32[1688] | 0; //@line 9129
 L19 : do {
  if (!$49) {
   $$1$3 = $$1$2; //@line 9133
   $$124$3 = $$124$2; //@line 9133
  } else {
   switch (HEAP32[$49 + 88 >> 2] | 0) {
   case 0:
    {
     $53 = HEAP32[$49 >> 2] | 0; //@line 9139
     $54 = ($53 | 0) > ($$124$2 | 0); //@line 9140
     $$1$3 = $54 ? $$1$2 : $49; //@line 9143
     $$124$3 = $54 ? $$124$2 : $53; //@line 9143
     break L19;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9148
     return;
    }
   default:
    {
     $$1$3 = $$1$2; //@line 9152
     $$124$3 = $$124$2; //@line 9152
     break L19;
    }
   }
  }
 } while (0);
 $55 = HEAP32[1689] | 0; //@line 9158
 L25 : do {
  if (!$55) {
   label = 31; //@line 9162
  } else {
   switch (HEAP32[$55 + 88 >> 2] | 0) {
   case 0:
    {
     if ((HEAP32[$55 >> 2] | 0) > ($$124$3 | 0)) {
      label = 31; //@line 9171
      break L25;
     } else {
      $$1$433 = $55; //@line 9174
      break L25;
     }
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9180
     return;
    }
   default:
    {
     label = 31; //@line 9184
     break L25;
    }
   }
  }
 } while (0);
 if ((label | 0) == 31) {
  if (!$$1$3) {
   STACKTOP = sp; //@line 9193
   return;
  } else {
   $$1$433 = $$1$3; //@line 9195
  }
 }
 HEAP32[$$1$433 + 88 >> 2] = 1; //@line 9199
 $10 = $$1$433 + 44 | 0; //@line 9200
 $11 = HEAP32[$10 >> 2] | 0; //@line 9201
 do {
  if (!$11) {
   $21 = 0; //@line 9205
  } else {
   $15 = HEAP32[$11 + 4 >> 2] | 0; //@line 9209
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9210
   FUNCTION_TABLE_vii[$15 & 7]($0, $$1$433 + 32 | 0); //@line 9211
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 194; //@line 9214
    HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 9216
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 9218
    HEAP32[$AsyncCtx + 12 >> 2] = $$1$433; //@line 9220
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9222
    sp = STACKTOP; //@line 9223
    STACKTOP = sp; //@line 9224
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9226
    $21 = HEAP32[$10 >> 2] | 0; //@line 9228
    break;
   }
  }
 } while (0);
 $20 = $0 + 12 | 0; //@line 9233
 HEAP32[$20 >> 2] = $21; //@line 9234
 $22 = HEAP32[$$1$433 >> 2] | 0; //@line 9235
 HEAP32[$1 + 8 >> 2] = 0; //@line 9237
 HEAP32[$1 >> 2] = 195; //@line 9238
 HEAP32[$1 + 4 >> 2] = $22; //@line 9240
 $24 = $1 + 12 | 0; //@line 9241
 HEAP32[$24 >> 2] = 724; //@line 9242
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9243
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, 0, $1) | 0; //@line 9244
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 196; //@line 9247
  HEAP32[$AsyncCtx10 + 4 >> 2] = $24; //@line 9249
  HEAP32[$AsyncCtx10 + 8 >> 2] = $20; //@line 9251
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 9253
  HEAP32[$AsyncCtx10 + 16 >> 2] = $0; //@line 9255
  sp = STACKTOP; //@line 9256
  STACKTOP = sp; //@line 9257
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 9259
 $29 = HEAP32[$24 >> 2] | 0; //@line 9260
 do {
  if ($29 | 0) {
   $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 9265
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9266
   FUNCTION_TABLE_vi[$32 & 511]($1); //@line 9267
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 197; //@line 9270
    HEAP32[$AsyncCtx3 + 4 >> 2] = $20; //@line 9272
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 9274
    sp = STACKTOP; //@line 9275
    STACKTOP = sp; //@line 9276
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9278
    break;
   }
  }
 } while (0);
 $35 = HEAP32[$20 >> 2] | 0; //@line 9283
 if (!$35) {
  STACKTOP = sp; //@line 9286
  return;
 }
 $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 9289
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9290
 FUNCTION_TABLE_vi[$38 & 511]($0); //@line 9291
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 198; //@line 9294
  sp = STACKTOP; //@line 9295
  STACKTOP = sp; //@line 9296
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9298
 STACKTOP = sp; //@line 9299
 return;
}
function __ZN6Socket4openEP12NetworkStack($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$i$i = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $71 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4093
 STACKTOP = STACKTOP + 32 | 0; //@line 4094
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4094
 $2 = sp + 16 | 0; //@line 4095
 $3 = sp; //@line 4096
 $4 = $0 + 4 | 0; //@line 4097
 if (($1 | 0) == 0 | (HEAP32[$4 >> 2] | 0) != 0) {
  $$1 = -3003; //@line 4103
  STACKTOP = sp; //@line 4104
  return $$1 | 0; //@line 4104
 }
 HEAP32[$4 >> 2] = $1; //@line 4106
 $10 = HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] | 0; //@line 4109
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 4112
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 4113
 $14 = FUNCTION_TABLE_ii[$13 & 31]($0) | 0; //@line 4114
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 118; //@line 4117
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4119
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 4121
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 4123
  HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 4125
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 4127
  HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 4129
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 4131
  sp = STACKTOP; //@line 4132
  STACKTOP = sp; //@line 4133
  return 0; //@line 4133
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4135
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4136
 $22 = FUNCTION_TABLE_iiii[$10 & 31]($1, $2, $14) | 0; //@line 4137
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 119; //@line 4140
  HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 4142
  HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 4144
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 4146
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 4148
  HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 4150
  sp = STACKTOP; //@line 4151
  STACKTOP = sp; //@line 4152
  return 0; //@line 4152
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4154
 do {
  if (!$22) {
   $30 = $0 + 8 | 0; //@line 4159
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 4160
   $31 = $3 + 12 | 0; //@line 4161
   HEAP32[$3 >> 2] = 12; //@line 4162
   HEAP32[$3 + 4 >> 2] = 1; //@line 4164
   HEAP32[$3 + 8 >> 2] = $0; //@line 4166
   HEAP32[$31 >> 2] = 572; //@line 4167
   $32 = $0 + 16 | 0; //@line 4168
   do {
    if (($32 | 0) == ($3 | 0)) {
     $60 = 572; //@line 4172
     label = 16; //@line 4173
    } else {
     $34 = $0 + 28 | 0; //@line 4175
     $35 = HEAP32[$34 >> 2] | 0; //@line 4176
     if (!$35) {
      $48 = 572; //@line 4179
     } else {
      $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 4182
      $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4183
      FUNCTION_TABLE_vi[$38 & 511]($32); //@line 4184
      if (___async) {
       HEAP32[$AsyncCtx5 >> 2] = 120; //@line 4187
       HEAP32[$AsyncCtx5 + 4 >> 2] = $31; //@line 4189
       HEAP32[$AsyncCtx5 + 8 >> 2] = $34; //@line 4191
       HEAP32[$AsyncCtx5 + 12 >> 2] = $32; //@line 4193
       HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 4195
       HEAP32[$AsyncCtx5 + 20 >> 2] = $4; //@line 4197
       HEAP32[$AsyncCtx5 + 24 >> 2] = $30; //@line 4199
       HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 4201
       sp = STACKTOP; //@line 4202
       STACKTOP = sp; //@line 4203
       return 0; //@line 4203
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 4205
      $$pre = HEAP32[$31 >> 2] | 0; //@line 4206
      if (!$$pre) {
       HEAP32[$34 >> 2] = 0; //@line 4209
       break;
      } else {
       $48 = $$pre; //@line 4212
      }
     }
     $49 = HEAP32[$48 + 4 >> 2] | 0; //@line 4216
     $AsyncCtx8 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4217
     FUNCTION_TABLE_vii[$49 & 7]($32, $3); //@line 4218
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 121; //@line 4221
      HEAP32[$AsyncCtx8 + 4 >> 2] = $31; //@line 4223
      HEAP32[$AsyncCtx8 + 8 >> 2] = $34; //@line 4225
      HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 4227
      HEAP32[$AsyncCtx8 + 16 >> 2] = $4; //@line 4229
      HEAP32[$AsyncCtx8 + 20 >> 2] = $30; //@line 4231
      HEAP32[$AsyncCtx8 + 24 >> 2] = $32; //@line 4233
      HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 4235
      sp = STACKTOP; //@line 4236
      STACKTOP = sp; //@line 4237
      return 0; //@line 4237
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 4239
      $$pre$i$i = HEAP32[$31 >> 2] | 0; //@line 4240
      HEAP32[$34 >> 2] = $$pre$i$i; //@line 4242
      if (!$$pre$i$i) {
       break;
      } else {
       $60 = $$pre$i$i; //@line 4247
       label = 16; //@line 4248
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 16) {
     $61 = HEAP32[$60 + 8 >> 2] | 0; //@line 4257
     $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4258
     FUNCTION_TABLE_vi[$61 & 511]($3); //@line 4259
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 122; //@line 4262
      HEAP32[$AsyncCtx11 + 4 >> 2] = $3; //@line 4264
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 4266
      HEAP32[$AsyncCtx11 + 12 >> 2] = $30; //@line 4268
      HEAP32[$AsyncCtx11 + 16 >> 2] = $32; //@line 4270
      HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 4272
      sp = STACKTOP; //@line 4273
      STACKTOP = sp; //@line 4274
      return 0; //@line 4274
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4276
      break;
     }
    }
   } while (0);
   $67 = HEAP32[$4 >> 2] | 0; //@line 4281
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 84 >> 2] | 0; //@line 4284
   $71 = HEAP32[$30 >> 2] | 0; //@line 4285
   $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4286
   FUNCTION_TABLE_viiii[$70 & 7]($67, $71, 123, $32); //@line 4287
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 124; //@line 4290
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 4292
    sp = STACKTOP; //@line 4293
    STACKTOP = sp; //@line 4294
    return 0; //@line 4294
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 4296
    $$0 = 0; //@line 4297
    break;
   }
  } else {
   $$0 = $22; //@line 4301
  }
 } while (0);
 $$1 = $$0; //@line 4304
 STACKTOP = sp; //@line 4305
 return $$1 | 0; //@line 4305
}
function __ZN6Socket4openEP12NetworkStack__async_cb_51($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20348
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20350
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20352
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20354
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20356
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20358
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20360
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 20364
  return;
 }
 $14 = $6 + 8 | 0; //@line 20368
 HEAP32[$14 >> 2] = HEAP32[$8 >> 2]; //@line 20369
 $15 = $10 + 12 | 0; //@line 20370
 HEAP32[$10 >> 2] = 12; //@line 20371
 HEAP32[$10 + 4 >> 2] = 1; //@line 20373
 HEAP32[$10 + 8 >> 2] = $6; //@line 20375
 HEAP32[$15 >> 2] = 572; //@line 20376
 $16 = $6 + 16 | 0; //@line 20377
 if (($16 | 0) == ($10 | 0)) {
  $40 = HEAP32[145] | 0; //@line 20381
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 20382
  FUNCTION_TABLE_vi[$40 & 511]($10); //@line 20383
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 122; //@line 20386
   $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 20387
   HEAP32[$41 >> 2] = $10; //@line 20388
   $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 20389
   HEAP32[$42 >> 2] = $2; //@line 20390
   $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 20391
   HEAP32[$43 >> 2] = $14; //@line 20392
   $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 20393
   HEAP32[$44 >> 2] = $16; //@line 20394
   $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 20395
   HEAP32[$45 >> 2] = $4; //@line 20396
   sp = STACKTOP; //@line 20397
   return;
  }
  ___async_unwind = 0; //@line 20400
  HEAP32[$ReallocAsyncCtx5 >> 2] = 122; //@line 20401
  $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 20402
  HEAP32[$41 >> 2] = $10; //@line 20403
  $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 20404
  HEAP32[$42 >> 2] = $2; //@line 20405
  $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 20406
  HEAP32[$43 >> 2] = $14; //@line 20407
  $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 20408
  HEAP32[$44 >> 2] = $16; //@line 20409
  $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 20410
  HEAP32[$45 >> 2] = $4; //@line 20411
  sp = STACKTOP; //@line 20412
  return;
 }
 $18 = $6 + 28 | 0; //@line 20415
 $19 = HEAP32[$18 >> 2] | 0; //@line 20416
 if (!$19) {
  $31 = HEAP32[144] | 0; //@line 20420
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 20421
  FUNCTION_TABLE_vii[$31 & 7]($16, $10); //@line 20422
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 121; //@line 20425
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 20426
   HEAP32[$32 >> 2] = $15; //@line 20427
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 20428
   HEAP32[$33 >> 2] = $18; //@line 20429
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 20430
   HEAP32[$34 >> 2] = $10; //@line 20431
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 20432
   HEAP32[$35 >> 2] = $2; //@line 20433
   $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 20434
   HEAP32[$36 >> 2] = $14; //@line 20435
   $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 20436
   HEAP32[$37 >> 2] = $16; //@line 20437
   $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 20438
   HEAP32[$38 >> 2] = $4; //@line 20439
   sp = STACKTOP; //@line 20440
   return;
  }
  ___async_unwind = 0; //@line 20443
  HEAP32[$ReallocAsyncCtx4 >> 2] = 121; //@line 20444
  $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 20445
  HEAP32[$32 >> 2] = $15; //@line 20446
  $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 20447
  HEAP32[$33 >> 2] = $18; //@line 20448
  $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 20449
  HEAP32[$34 >> 2] = $10; //@line 20450
  $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 20451
  HEAP32[$35 >> 2] = $2; //@line 20452
  $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 20453
  HEAP32[$36 >> 2] = $14; //@line 20454
  $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 20455
  HEAP32[$37 >> 2] = $16; //@line 20456
  $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 20457
  HEAP32[$38 >> 2] = $4; //@line 20458
  sp = STACKTOP; //@line 20459
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 20463
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 20464
  FUNCTION_TABLE_vi[$22 & 511]($16); //@line 20465
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 120; //@line 20468
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 20469
   HEAP32[$23 >> 2] = $15; //@line 20470
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 20471
   HEAP32[$24 >> 2] = $18; //@line 20472
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 20473
   HEAP32[$25 >> 2] = $16; //@line 20474
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 20475
   HEAP32[$26 >> 2] = $10; //@line 20476
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 20477
   HEAP32[$27 >> 2] = $2; //@line 20478
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 20479
   HEAP32[$28 >> 2] = $14; //@line 20480
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 20481
   HEAP32[$29 >> 2] = $4; //@line 20482
   sp = STACKTOP; //@line 20483
   return;
  }
  ___async_unwind = 0; //@line 20486
  HEAP32[$ReallocAsyncCtx3 >> 2] = 120; //@line 20487
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 20488
  HEAP32[$23 >> 2] = $15; //@line 20489
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 20490
  HEAP32[$24 >> 2] = $18; //@line 20491
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 20492
  HEAP32[$25 >> 2] = $16; //@line 20493
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 20494
  HEAP32[$26 >> 2] = $10; //@line 20495
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 20496
  HEAP32[$27 >> 2] = $2; //@line 20497
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 20498
  HEAP32[$28 >> 2] = $14; //@line 20499
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 20500
  HEAP32[$29 >> 2] = $4; //@line 20501
  sp = STACKTOP; //@line 20502
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15839
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15841
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15843
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15845
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15847
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 15850
 $11 = $4 + 12 | 0; //@line 15851
 HEAP32[$11 >> 2] = $$pre$i; //@line 15852
 $12 = $2 + 12 | 0; //@line 15853
 $13 = HEAP32[$12 >> 2] | 0; //@line 15854
 $15 = $$pre$i; //@line 15856
 if (!$13) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 15858
  _mbed_assert_internal(2972, 2977, 1677); //@line 15859
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 15862
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 15863
   HEAP32[$16 >> 2] = $12; //@line 15864
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 15865
   HEAP32[$17 >> 2] = $11; //@line 15866
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 15867
   HEAP32[$18 >> 2] = $2; //@line 15868
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 15869
   HEAP32[$19 >> 2] = $6; //@line 15870
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 15871
   HEAP32[$20 >> 2] = $8; //@line 15872
   $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 15873
   HEAP32[$21 >> 2] = $4; //@line 15874
   $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 15875
   HEAP32[$22 >> 2] = $6; //@line 15876
   $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 15877
   HEAP32[$23 >> 2] = $11; //@line 15878
   sp = STACKTOP; //@line 15879
   return;
  }
  ___async_unwind = 0; //@line 15882
  HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 15883
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 15884
  HEAP32[$16 >> 2] = $12; //@line 15885
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 15886
  HEAP32[$17 >> 2] = $11; //@line 15887
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 15888
  HEAP32[$18 >> 2] = $2; //@line 15889
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 15890
  HEAP32[$19 >> 2] = $6; //@line 15891
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 15892
  HEAP32[$20 >> 2] = $8; //@line 15893
  $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 15894
  HEAP32[$21 >> 2] = $4; //@line 15895
  $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 15896
  HEAP32[$22 >> 2] = $6; //@line 15897
  $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 15898
  HEAP32[$23 >> 2] = $11; //@line 15899
  sp = STACKTOP; //@line 15900
  return;
 }
 $24 = HEAP32[$13 >> 2] | 0; //@line 15903
 if (!$15) {
  $36 = $6 + 12 | 0; //@line 15906
  HEAP32[$36 >> 2] = 0; //@line 15907
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 15908
  $37 = FUNCTION_TABLE_iiii[$24 & 31]($2, $8, $6) | 0; //@line 15909
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 15912
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 15913
   HEAP32[$38 >> 2] = $36; //@line 15914
   $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 15915
   HEAP32[$39 >> 2] = $6; //@line 15916
   $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 15917
   HEAP32[$40 >> 2] = $11; //@line 15918
   $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 15919
   HEAP32[$41 >> 2] = $4; //@line 15920
   sp = STACKTOP; //@line 15921
   return;
  }
  HEAP32[___async_retval >> 2] = $37; //@line 15925
  ___async_unwind = 0; //@line 15926
  HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 15927
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 15928
  HEAP32[$38 >> 2] = $36; //@line 15929
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 15930
  HEAP32[$39 >> 2] = $6; //@line 15931
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 15932
  HEAP32[$40 >> 2] = $11; //@line 15933
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 15934
  HEAP32[$41 >> 2] = $4; //@line 15935
  sp = STACKTOP; //@line 15936
  return;
 } else {
  $27 = HEAP32[$15 + 4 >> 2] | 0; //@line 15940
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 15941
  FUNCTION_TABLE_vii[$27 & 7]($6, $4); //@line 15942
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 259; //@line 15945
   $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 15946
   HEAP32[$28 >> 2] = $11; //@line 15947
   $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 15948
   HEAP32[$29 >> 2] = $6; //@line 15949
   $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 15950
   HEAP32[$30 >> 2] = $2; //@line 15951
   $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 15952
   HEAP32[$31 >> 2] = $8; //@line 15953
   $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 15954
   HEAP32[$32 >> 2] = $24; //@line 15955
   $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 15956
   HEAP32[$33 >> 2] = $6; //@line 15957
   $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 15958
   HEAP32[$34 >> 2] = $11; //@line 15959
   $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 15960
   HEAP32[$35 >> 2] = $4; //@line 15961
   sp = STACKTOP; //@line 15962
   return;
  }
  ___async_unwind = 0; //@line 15965
  HEAP32[$ReallocAsyncCtx2 >> 2] = 259; //@line 15966
  $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 15967
  HEAP32[$28 >> 2] = $11; //@line 15968
  $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 15969
  HEAP32[$29 >> 2] = $6; //@line 15970
  $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 15971
  HEAP32[$30 >> 2] = $2; //@line 15972
  $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 15973
  HEAP32[$31 >> 2] = $8; //@line 15974
  $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 15975
  HEAP32[$32 >> 2] = $24; //@line 15976
  $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 15977
  HEAP32[$33 >> 2] = $6; //@line 15978
  $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 15979
  HEAP32[$34 >> 2] = $11; //@line 15980
  $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 15981
  HEAP32[$35 >> 2] = $4; //@line 15982
  sp = STACKTOP; //@line 15983
  return;
 }
}
function __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0100152 = 0, $$0103157 = 0, $$0104151 = 0, $$0105150 = 0, $$0136$lcssa = 0, $$0136156 = 0, $$098 = 0, $$1 = 0, $$1106 = 0, $$1137$lcssa = 0, $$1137154 = 0, $$2149 = 0, $$4 = 0, $$7 = 0, $103 = 0, $106 = 0, $111 = 0, $112 = 0, $116 = 0, $23 = 0, $30 = 0, $37 = 0, $41 = 0, $47 = 0, $48 = 0, $51 = 0, $55 = 0, $59 = 0, $62 = 0, $64 = 0, $65 = 0, $77 = 0, $85 = 0, label = 0;
 $23 = (HEAPU8[$0 + 4 >> 0] | 0) << 8 | (HEAPU8[$0 + 5 >> 0] | 0); //@line 6468
 $30 = (HEAPU8[$0 + 6 >> 0] | 0) << 8 | (HEAPU8[$0 + 7 >> 0] | 0); //@line 6475
 if (!((HEAP8[$0 + 2 >> 0] & -8) << 24 >> 24 == -128 ? (((HEAPU8[$0 >> 0] | 0) << 8 | (HEAPU8[$0 + 1 >> 0] | 0)) & 65535) << 16 >> 16 == $1 << 16 >> 16 : 0)) {
  $$098 = -1; //@line 6481
  return $$098 | 0; //@line 6482
 }
 $37 = $0 + 12 | 0; //@line 6486
 if (HEAP8[$0 + 3 >> 0] & 15) {
  $$098 = 0; //@line 6490
  return $$098 | 0; //@line 6491
 }
 if (!$23) {
  $$0136$lcssa = $37; //@line 6495
 } else {
  $$0103157 = 0; //@line 6497
  $$0136156 = $37; //@line 6497
  while (1) {
   $41 = HEAP8[$$0136156 >> 0] | 0; //@line 6499
   if (!($41 << 24 >> 24)) {
    $$1137$lcssa = $$0136156; //@line 6502
   } else {
    $$1137154 = $$0136156; //@line 6504
    $47 = $41; //@line 6504
    while (1) {
     $48 = $$1137154 + 1 + ($47 & 255) | 0; //@line 6508
     $47 = HEAP8[$48 >> 0] | 0; //@line 6509
     if (!($47 << 24 >> 24)) {
      $$1137$lcssa = $48; //@line 6512
      break;
     } else {
      $$1137154 = $48; //@line 6515
     }
    }
   }
   $51 = $$1137$lcssa + 5 | 0; //@line 6519
   $$0103157 = $$0103157 + 1 | 0; //@line 6520
   if (($$0103157 | 0) >= ($23 | 0)) {
    $$0136$lcssa = $51; //@line 6525
    break;
   } else {
    $$0136156 = $51; //@line 6523
   }
  }
 }
 if (($4 | 0) != 0 & ($30 | 0) != 0) {
  $$0100152 = $3; //@line 6534
  $$0104151 = 0; //@line 6534
  $$0105150 = 0; //@line 6534
  $$2149 = $$0136$lcssa; //@line 6534
 } else {
  $$098 = 0; //@line 6536
  return $$098 | 0; //@line 6537
 }
 while (1) {
  $55 = HEAP8[$$2149 >> 0] | 0; //@line 6541
  do {
   if (!($55 << 24 >> 24)) {
    $$4 = $$2149 + 1 | 0; //@line 6545
   } else {
    $59 = $55 & 255; //@line 6548
    $62 = $$2149; //@line 6548
    while (1) {
     if ($59 & 192 | 0) {
      label = 11; //@line 6553
      break;
     }
     $64 = $62 + 1 + $59 | 0; //@line 6557
     $65 = HEAP8[$64 >> 0] | 0; //@line 6558
     if (!($65 << 24 >> 24)) {
      label = 13; //@line 6562
      break;
     } else {
      $59 = $65 & 255; //@line 6565
      $62 = $64; //@line 6565
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 6569
     $$4 = $62 + 2 | 0; //@line 6571
     break;
    } else if ((label | 0) == 13) {
     label = 0; //@line 6575
     $$4 = $64 + 1 | 0; //@line 6577
     break;
    }
   }
  } while (0);
  $77 = ((HEAPU8[$$4 >> 0] | 0) << 8 | (HEAPU8[$$4 + 1 >> 0] | 0)) & 65535; //@line 6590
  $85 = (HEAPU8[$$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$$4 + 3 >> 0] | 0); //@line 6598
  $103 = (HEAPU8[$$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$$4 + 7 >> 0] | 0); //@line 6616
  $106 = $$4 + 10 | 0; //@line 6619
  $111 = (HEAPU8[$$4 + 8 >> 0] | 0) << 8 | (HEAPU8[$$4 + 9 >> 0] | 0); //@line 6624
  $112 = $111 & 65535; //@line 6625
  if (!$$0104151) {
   HEAP32[$2 >> 2] = $103 >>> 0 < 2147483647 ? $103 : 2147483647; //@line 6630
  }
  $116 = ($85 | 0) == 1; //@line 6633
  do {
   if ($77 << 16 >> 16 == 1 & $116 & $112 << 16 >> 16 == 4) {
    HEAP32[$$0100152 >> 2] = 1; //@line 6639
    HEAP8[$$0100152 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 6643
    HEAP8[$$0100152 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 6647
    HEAP8[$$0100152 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 6651
    HEAP8[$$0100152 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 6654
    $$1 = $$0100152 + 20 | 0; //@line 6658
    $$1106 = $$0105150 + 1 | 0; //@line 6658
    $$7 = $$4 + 14 | 0; //@line 6658
   } else {
    if ($77 << 16 >> 16 == 28 & $116 & $112 << 16 >> 16 == 16) {
     HEAP32[$$0100152 >> 2] = 2; //@line 6665
     HEAP8[$$0100152 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 6669
     HEAP8[$$0100152 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 6673
     HEAP8[$$0100152 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 6677
     HEAP8[$$0100152 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 6681
     HEAP8[$$0100152 + 8 >> 0] = HEAP8[$$4 + 14 >> 0] | 0; //@line 6685
     HEAP8[$$0100152 + 9 >> 0] = HEAP8[$$4 + 15 >> 0] | 0; //@line 6689
     HEAP8[$$0100152 + 10 >> 0] = HEAP8[$$4 + 16 >> 0] | 0; //@line 6693
     HEAP8[$$0100152 + 11 >> 0] = HEAP8[$$4 + 17 >> 0] | 0; //@line 6697
     HEAP8[$$0100152 + 12 >> 0] = HEAP8[$$4 + 18 >> 0] | 0; //@line 6701
     HEAP8[$$0100152 + 13 >> 0] = HEAP8[$$4 + 19 >> 0] | 0; //@line 6705
     HEAP8[$$0100152 + 14 >> 0] = HEAP8[$$4 + 20 >> 0] | 0; //@line 6709
     HEAP8[$$0100152 + 15 >> 0] = HEAP8[$$4 + 21 >> 0] | 0; //@line 6713
     HEAP8[$$0100152 + 16 >> 0] = HEAP8[$$4 + 22 >> 0] | 0; //@line 6717
     HEAP8[$$0100152 + 17 >> 0] = HEAP8[$$4 + 23 >> 0] | 0; //@line 6721
     HEAP8[$$0100152 + 18 >> 0] = HEAP8[$$4 + 24 >> 0] | 0; //@line 6725
     HEAP8[$$0100152 + 19 >> 0] = HEAP8[$$4 + 25 >> 0] | 0; //@line 6728
     $$1 = $$0100152 + 20 | 0; //@line 6732
     $$1106 = $$0105150 + 1 | 0; //@line 6732
     $$7 = $$4 + 26 | 0; //@line 6732
     break;
    } else {
     $$1 = $$0100152; //@line 6736
     $$1106 = $$0105150; //@line 6736
     $$7 = $106 + $111 | 0; //@line 6736
     break;
    }
   }
  } while (0);
  $$0104151 = $$0104151 + 1 | 0; //@line 6741
  if (!($$1106 >>> 0 < $4 >>> 0 & ($$0104151 | 0) < ($30 | 0))) {
   $$098 = $$1106; //@line 6748
   break;
  } else {
   $$0100152 = $$1; //@line 6746
   $$0105150 = $$1106; //@line 6746
   $$2149 = $$7; //@line 6746
  }
 }
 return $$098 | 0; //@line 6752
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_191($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9618
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9620
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9622
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9628
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9630
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9632
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9634
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9636
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9638
 $21 = (HEAP32[$0 + 12 >> 2] | 0) == 0; //@line 9639
 $22 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 9640
 if ($22 | 0) {
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 9644
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 9645
  FUNCTION_TABLE_vi[$25 & 511]($12); //@line 9646
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 168; //@line 9649
   $26 = $ReallocAsyncCtx8 + 4 | 0; //@line 9650
   HEAP32[$26 >> 2] = $2; //@line 9651
   $27 = $ReallocAsyncCtx8 + 8 | 0; //@line 9652
   HEAP32[$27 >> 2] = $4; //@line 9653
   $28 = $ReallocAsyncCtx8 + 12 | 0; //@line 9654
   HEAP32[$28 >> 2] = $10; //@line 9655
   $29 = $ReallocAsyncCtx8 + 16 | 0; //@line 9656
   $$expand_i1_val = $21 & 1; //@line 9657
   HEAP8[$29 >> 0] = $$expand_i1_val; //@line 9658
   $30 = $ReallocAsyncCtx8 + 20 | 0; //@line 9659
   HEAP32[$30 >> 2] = $14; //@line 9660
   $31 = $ReallocAsyncCtx8 + 24 | 0; //@line 9661
   HEAP32[$31 >> 2] = $16; //@line 9662
   $32 = $ReallocAsyncCtx8 + 28 | 0; //@line 9663
   HEAP32[$32 >> 2] = $18; //@line 9664
   $33 = $ReallocAsyncCtx8 + 32 | 0; //@line 9665
   HEAP32[$33 >> 2] = $20; //@line 9666
   sp = STACKTOP; //@line 9667
   return;
  }
  ___async_unwind = 0; //@line 9670
  HEAP32[$ReallocAsyncCtx8 >> 2] = 168; //@line 9671
  $26 = $ReallocAsyncCtx8 + 4 | 0; //@line 9672
  HEAP32[$26 >> 2] = $2; //@line 9673
  $27 = $ReallocAsyncCtx8 + 8 | 0; //@line 9674
  HEAP32[$27 >> 2] = $4; //@line 9675
  $28 = $ReallocAsyncCtx8 + 12 | 0; //@line 9676
  HEAP32[$28 >> 2] = $10; //@line 9677
  $29 = $ReallocAsyncCtx8 + 16 | 0; //@line 9678
  $$expand_i1_val = $21 & 1; //@line 9679
  HEAP8[$29 >> 0] = $$expand_i1_val; //@line 9680
  $30 = $ReallocAsyncCtx8 + 20 | 0; //@line 9681
  HEAP32[$30 >> 2] = $14; //@line 9682
  $31 = $ReallocAsyncCtx8 + 24 | 0; //@line 9683
  HEAP32[$31 >> 2] = $16; //@line 9684
  $32 = $ReallocAsyncCtx8 + 28 | 0; //@line 9685
  HEAP32[$32 >> 2] = $18; //@line 9686
  $33 = $ReallocAsyncCtx8 + 32 | 0; //@line 9687
  HEAP32[$33 >> 2] = $20; //@line 9688
  sp = STACKTOP; //@line 9689
  return;
 }
 if ($21) {
  HEAP8[7620] = 1; //@line 9693
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 9694
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9695
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 9698
   $50 = $ReallocAsyncCtx13 + 4 | 0; //@line 9699
   HEAP32[$50 >> 2] = $2; //@line 9700
   $51 = $ReallocAsyncCtx13 + 8 | 0; //@line 9701
   HEAP32[$51 >> 2] = $4; //@line 9702
   sp = STACKTOP; //@line 9703
   return;
  }
  ___async_unwind = 0; //@line 9706
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 9707
  $50 = $ReallocAsyncCtx13 + 4 | 0; //@line 9708
  HEAP32[$50 >> 2] = $2; //@line 9709
  $51 = $ReallocAsyncCtx13 + 8 | 0; //@line 9710
  HEAP32[$51 >> 2] = $4; //@line 9711
  sp = STACKTOP; //@line 9712
  return;
 }
 $34 = HEAP32[$10 >> 2] | 0; //@line 9715
 if ($34 | 0) {
  __ZdlPv($34); //@line 9718
 }
 $36 = HEAP32[$20 >> 2] | 0; //@line 9720
 if ($36 | 0) {
  $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 9724
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 9725
  FUNCTION_TABLE_vi[$39 & 511]($18); //@line 9726
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 169; //@line 9729
   $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 9730
   HEAP32[$40 >> 2] = $16; //@line 9731
   $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 9732
   HEAP32[$41 >> 2] = $14; //@line 9733
   $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 9734
   HEAP32[$42 >> 2] = $4; //@line 9735
   sp = STACKTOP; //@line 9736
   return;
  }
  ___async_unwind = 0; //@line 9739
  HEAP32[$ReallocAsyncCtx9 >> 2] = 169; //@line 9740
  $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 9741
  HEAP32[$40 >> 2] = $16; //@line 9742
  $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 9743
  HEAP32[$41 >> 2] = $14; //@line 9744
  $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 9745
  HEAP32[$42 >> 2] = $4; //@line 9746
  sp = STACKTOP; //@line 9747
  return;
 }
 $44 = HEAP32[$16 + 28 >> 2] | 0; //@line 9751
 if (!$44) {
  __ZdlPv($16); //@line 9754
  HEAP32[___async_retval >> 2] = -3007; //@line 9756
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 9760
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 9761
 FUNCTION_TABLE_vi[$47 & 511]($14); //@line 9762
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 9765
  $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 9766
  HEAP32[$48 >> 2] = $16; //@line 9767
  $49 = $ReallocAsyncCtx10 + 8 | 0; //@line 9768
  HEAP32[$49 >> 2] = $4; //@line 9769
  sp = STACKTOP; //@line 9770
  return;
 }
 ___async_unwind = 0; //@line 9773
 HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 9774
 $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 9775
 HEAP32[$48 >> 2] = $16; //@line 9776
 $49 = $ReallocAsyncCtx10 + 8 | 0; //@line 9777
 HEAP32[$49 >> 2] = $4; //@line 9778
 sp = STACKTOP; //@line 9779
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $53 = 0, $58 = 0, $6 = 0, $61 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 11950
 STACKTOP = STACKTOP + 32 | 0; //@line 11951
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11951
 $3 = sp + 16 | 0; //@line 11952
 $4 = sp; //@line 11953
 $5 = $2 + 12 | 0; //@line 11954
 $6 = HEAP32[$5 >> 2] | 0; //@line 11955
 do {
  if (!$6) {
   $16 = 0; //@line 11959
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 11962
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 11963
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 11964
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 257; //@line 11967
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11969
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 11971
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 11973
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 11975
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 11977
    sp = STACKTOP; //@line 11978
    STACKTOP = sp; //@line 11979
    return 0; //@line 11979
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11981
    $16 = HEAP32[$5 >> 2] | 0; //@line 11983
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 11988
 HEAP32[$15 >> 2] = $16; //@line 11989
 $17 = $0 + 12 | 0; //@line 11990
 $18 = HEAP32[$17 >> 2] | 0; //@line 11991
 $20 = $16; //@line 11993
 do {
  if (!$18) {
   $AsyncCtx16 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11996
   _mbed_assert_internal(2972, 2977, 1677); //@line 11997
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 258; //@line 12000
    HEAP32[$AsyncCtx16 + 4 >> 2] = $17; //@line 12002
    HEAP32[$AsyncCtx16 + 8 >> 2] = $15; //@line 12004
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 12006
    HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 12008
    HEAP32[$AsyncCtx16 + 20 >> 2] = $1; //@line 12010
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 12012
    HEAP32[$AsyncCtx16 + 28 >> 2] = $3; //@line 12014
    HEAP32[$AsyncCtx16 + 32 >> 2] = $15; //@line 12016
    sp = STACKTOP; //@line 12017
    STACKTOP = sp; //@line 12018
    return 0; //@line 12018
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 12020
    $30 = HEAP32[$17 >> 2] | 0; //@line 12023
    $32 = HEAP32[$15 >> 2] | 0; //@line 12023
    break;
   }
  } else {
   $30 = $18; //@line 12027
   $32 = $20; //@line 12027
  }
 } while (0);
 $29 = HEAP32[$30 >> 2] | 0; //@line 12030
 do {
  if (!$32) {
   $44 = 0; //@line 12034
  } else {
   $34 = HEAP32[$32 + 4 >> 2] | 0; //@line 12037
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12038
   FUNCTION_TABLE_vii[$34 & 7]($3, $4); //@line 12039
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 259; //@line 12042
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 12044
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 12046
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 12048
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 12050
    HEAP32[$AsyncCtx2 + 20 >> 2] = $29; //@line 12052
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 12054
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 12056
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 12058
    sp = STACKTOP; //@line 12059
    STACKTOP = sp; //@line 12060
    return 0; //@line 12060
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12062
    $44 = HEAP32[$15 >> 2] | 0; //@line 12064
    break;
   }
  }
 } while (0);
 $43 = $3 + 12 | 0; //@line 12069
 HEAP32[$43 >> 2] = $44; //@line 12070
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12071
 $45 = FUNCTION_TABLE_iiii[$29 & 31]($0, $1, $3) | 0; //@line 12072
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 260; //@line 12075
  HEAP32[$AsyncCtx5 + 4 >> 2] = $43; //@line 12077
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 12079
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 12081
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 12083
  sp = STACKTOP; //@line 12084
  STACKTOP = sp; //@line 12085
  return 0; //@line 12085
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12087
 $50 = HEAP32[$43 >> 2] | 0; //@line 12088
 do {
  if ($50 | 0) {
   $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 12093
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12094
   FUNCTION_TABLE_vi[$53 & 511]($3); //@line 12095
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 261; //@line 12098
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 12100
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 12102
    HEAP32[$AsyncCtx9 + 12 >> 2] = $45; //@line 12104
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 12106
    sp = STACKTOP; //@line 12107
    STACKTOP = sp; //@line 12108
    return 0; //@line 12108
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12110
    break;
   }
  }
 } while (0);
 $58 = HEAP32[$15 >> 2] | 0; //@line 12115
 if (!$58) {
  STACKTOP = sp; //@line 12118
  return $45 | 0; //@line 12118
 }
 $61 = HEAP32[$58 + 8 >> 2] | 0; //@line 12121
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12122
 FUNCTION_TABLE_vi[$61 & 511]($4); //@line 12123
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 262; //@line 12126
  HEAP32[$AsyncCtx13 + 4 >> 2] = $45; //@line 12128
  sp = STACKTOP; //@line 12129
  STACKTOP = sp; //@line 12130
  return 0; //@line 12130
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12132
 STACKTOP = sp; //@line 12133
 return $45 | 0; //@line 12133
}
function __ZN13SocketAddress14set_ip_addressEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$016$i = 0, $$02537$i = 0, $$02636$i = 0, $$1$1$i = 0, $$1$2$i = 0, $$1$3$i = 0, $$1$i = 0, $2 = 0, $26 = 0, $35 = 0, $4 = 0, $45 = 0, $56 = 0, $6 = 0, $68 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4592
 STACKTOP = STACKTOP + 32 | 0; //@line 4593
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4593
 $vararg_buffer7 = sp + 24 | 0; //@line 4594
 $vararg_buffer4 = sp + 16 | 0; //@line 4595
 $vararg_buffer1 = sp + 8 | 0; //@line 4596
 $vararg_buffer = sp; //@line 4597
 $2 = sp + 28 | 0; //@line 4598
 HEAP8[$0 >> 0] = 0; //@line 4599
 L1 : do {
  if ($1 | 0) {
   $4 = HEAP8[$1 >> 0] | 0; //@line 4603
   do {
    if ($4 << 24 >> 24) {
     $$016$i = 0; //@line 4607
     $6 = $4; //@line 4607
     while (1) {
      if (!($6 << 24 >> 24 == 46 | ($6 + -48 & 255) < 10)) {
       $$02537$i = 0; //@line 4614
       $$02636$i = 0; //@line 4614
       $56 = $4; //@line 4614
       break;
      }
      $9 = $$016$i + 1 | 0; //@line 4617
      $6 = HEAP8[$1 + $9 >> 0] | 0; //@line 4619
      if (!($6 << 24 >> 24)) {
       label = 5; //@line 4622
       break;
      } else {
       $$016$i = $9; //@line 4625
      }
     }
     if ((label | 0) == 5) {
      if (($$016$i | 0) <= -1) {
       break;
      }
      if ((HEAP8[$1 + $$016$i >> 0] | 0) == 46) {
       $$02537$i = 0; //@line 4637
       $$02636$i = 0; //@line 4637
       $56 = $4; //@line 4637
      } else {
       break;
      }
     }
     do {
      if (!(($56 + -48 & 255) < 10 | ($56 + -97 & 255) < 6)) {
       switch ($56 << 24 >> 24) {
       case 58:
       case 65:
       case 66:
       case 67:
       case 68:
       case 69:
       case 70:
        {
         break;
        }
       default:
        {
         break L1;
        }
       }
      }
      $$02636$i = $$02636$i + ($56 << 24 >> 24 == 58 & 1) | 0; //@line 4660
      $$02537$i = $$02537$i + 1 | 0; //@line 4661
      $56 = HEAP8[$1 + $$02537$i >> 0] | 0; //@line 4663
     } while ($56 << 24 >> 24 != 0);
     if (($$02636$i | 0) <= 1) {
      break L1;
     }
     HEAP32[$0 + 40 >> 2] = 2; //@line 4676
     _stoip6($1, _strlen($1) | 0, $0 + 44 | 0); //@line 4679
     $$0 = 1; //@line 4680
     STACKTOP = sp; //@line 4681
     return $$0 | 0; //@line 4681
    }
   } while (0);
   HEAP32[$0 + 40 >> 2] = 1; //@line 4685
   HEAP32[$vararg_buffer >> 2] = $2; //@line 4686
   L19 : do {
    if ((_sscanf($1, 2800, $vararg_buffer) | 0) >= 1) {
     HEAP8[$0 + 44 >> 0] = HEAP32[$2 >> 2]; //@line 4694
     $$1$i = 0; //@line 4695
     L21 : while (1) {
      switch (HEAP8[$1 + $$1$i >> 0] | 0) {
      case 0:
       {
        break L19;
        break;
       }
      case 46:
       {
        break L21;
        break;
       }
      default:
       {}
      }
      $$1$i = $$1$i + 1 | 0; //@line 4712
     }
     $26 = $$1$i + 1 | 0; //@line 4714
     HEAP32[$vararg_buffer1 >> 2] = $2; //@line 4716
     if ((_sscanf($1 + $26 | 0, 2800, $vararg_buffer1) | 0) >= 1) {
      HEAP8[$0 + 45 >> 0] = HEAP32[$2 >> 2]; //@line 4723
      $$1$1$i = $26; //@line 4724
      L26 : while (1) {
       switch (HEAP8[$1 + $$1$1$i >> 0] | 0) {
       case 0:
        {
         break L19;
         break;
        }
       case 46:
        {
         break L26;
         break;
        }
       default:
        {}
       }
       $$1$1$i = $$1$1$i + 1 | 0; //@line 4741
      }
      $35 = $$1$1$i + 1 | 0; //@line 4743
      HEAP32[$vararg_buffer4 >> 2] = $2; //@line 4745
      if ((_sscanf($1 + $35 | 0, 2800, $vararg_buffer4) | 0) >= 1) {
       HEAP8[$0 + 46 >> 0] = HEAP32[$2 >> 2]; //@line 4752
       $$1$2$i = $35; //@line 4753
       L31 : while (1) {
        switch (HEAP8[$1 + $$1$2$i >> 0] | 0) {
        case 0:
         {
          break L19;
          break;
         }
        case 46:
         {
          break L31;
          break;
         }
        default:
         {}
        }
        $$1$2$i = $$1$2$i + 1 | 0; //@line 4770
       }
       $45 = $$1$2$i + 1 | 0; //@line 4772
       HEAP32[$vararg_buffer7 >> 2] = $2; //@line 4774
       if ((_sscanf($1 + $45 | 0, 2800, $vararg_buffer7) | 0) >= 1) {
        HEAP8[$0 + 47 >> 0] = HEAP32[$2 >> 2]; //@line 4781
        $$1$3$i = $45; //@line 4782
        L36 : while (1) {
         switch (HEAP8[$1 + $$1$3$i >> 0] | 0) {
         case 0:
          {
           break L19;
           break;
          }
         case 46:
          {
           break L36;
           break;
          }
         default:
          {}
         }
         $$1$3$i = $$1$3$i + 1 | 0; //@line 4799
        }
        $$0 = 1; //@line 4801
        STACKTOP = sp; //@line 4802
        return $$0 | 0; //@line 4802
       }
      }
     }
    }
   } while (0);
   $$0 = 1; //@line 4808
   STACKTOP = sp; //@line 4809
   return $$0 | 0; //@line 4809
  }
 } while (0);
 $68 = $0 + 40 | 0; //@line 4812
 HEAP32[$68 >> 2] = 0; //@line 4813
 HEAP32[$68 + 4 >> 2] = 0; //@line 4813
 HEAP32[$68 + 8 >> 2] = 0; //@line 4813
 HEAP32[$68 + 12 >> 2] = 0; //@line 4813
 HEAP32[$68 + 16 >> 2] = 0; //@line 4813
 $$0 = 0; //@line 4814
 STACKTOP = sp; //@line 4815
 return $$0 | 0; //@line 4815
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_133($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx19 = 0, sp = 0;
 sp = STACKTOP; //@line 4159
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4161
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4163
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4165
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4167
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4169
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4171
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4173
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4175
 if ($AsyncRetVal | 0) {
  __ZN9UDPSocketC2Ev($AsyncRetVal); //@line 4178
  $17 = HEAP32[$12 >> 2] | 0; //@line 4179
  $ReallocAsyncCtx19 = _emscripten_realloc_async_context(40) | 0; //@line 4180
  $18 = __ZN6Socket4openEP12NetworkStack($AsyncRetVal, $17) | 0; //@line 4181
  if (___async) {
   HEAP32[$ReallocAsyncCtx19 >> 2] = 200; //@line 4184
   $19 = $ReallocAsyncCtx19 + 4 | 0; //@line 4185
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 4186
   $20 = $ReallocAsyncCtx19 + 8 | 0; //@line 4187
   HEAP32[$20 >> 2] = $2; //@line 4188
   $21 = $ReallocAsyncCtx19 + 12 | 0; //@line 4189
   HEAP32[$21 >> 2] = $4; //@line 4190
   $22 = $ReallocAsyncCtx19 + 16 | 0; //@line 4191
   HEAP32[$22 >> 2] = $6; //@line 4192
   $23 = $ReallocAsyncCtx19 + 20 | 0; //@line 4193
   HEAP32[$23 >> 2] = $8; //@line 4194
   $24 = $ReallocAsyncCtx19 + 24 | 0; //@line 4195
   HEAP32[$24 >> 2] = $AsyncRetVal; //@line 4196
   $25 = $ReallocAsyncCtx19 + 28 | 0; //@line 4197
   HEAP32[$25 >> 2] = $10; //@line 4198
   $26 = $ReallocAsyncCtx19 + 32 | 0; //@line 4199
   HEAP32[$26 >> 2] = $12; //@line 4200
   $27 = $ReallocAsyncCtx19 + 36 | 0; //@line 4201
   HEAP32[$27 >> 2] = $AsyncRetVal; //@line 4202
   sp = STACKTOP; //@line 4203
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 4207
  ___async_unwind = 0; //@line 4208
  HEAP32[$ReallocAsyncCtx19 >> 2] = 200; //@line 4209
  $19 = $ReallocAsyncCtx19 + 4 | 0; //@line 4210
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 4211
  $20 = $ReallocAsyncCtx19 + 8 | 0; //@line 4212
  HEAP32[$20 >> 2] = $2; //@line 4213
  $21 = $ReallocAsyncCtx19 + 12 | 0; //@line 4214
  HEAP32[$21 >> 2] = $4; //@line 4215
  $22 = $ReallocAsyncCtx19 + 16 | 0; //@line 4216
  HEAP32[$22 >> 2] = $6; //@line 4217
  $23 = $ReallocAsyncCtx19 + 20 | 0; //@line 4218
  HEAP32[$23 >> 2] = $8; //@line 4219
  $24 = $ReallocAsyncCtx19 + 24 | 0; //@line 4220
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 4221
  $25 = $ReallocAsyncCtx19 + 28 | 0; //@line 4222
  HEAP32[$25 >> 2] = $10; //@line 4223
  $26 = $ReallocAsyncCtx19 + 32 | 0; //@line 4224
  HEAP32[$26 >> 2] = $12; //@line 4225
  $27 = $ReallocAsyncCtx19 + 36 | 0; //@line 4226
  HEAP32[$27 >> 2] = $AsyncRetVal; //@line 4227
  sp = STACKTOP; //@line 4228
  return;
 }
 $29 = $6 + 28 | 0; //@line 4231
 $30 = HEAP32[$29 >> 2] | 0; //@line 4232
 if (!$30) {
  $39 = $14 + 12 | 0; //@line 4235
  HEAP32[$39 >> 2] = 0; //@line 4236
  $40 = HEAP32[$6 >> 2] | 0; //@line 4237
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 4238
  __ZL28nsapi_dns_query_async_deletei($40); //@line 4239
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 4242
   $41 = $ReallocAsyncCtx15 + 4 | 0; //@line 4243
   HEAP32[$41 >> 2] = $39; //@line 4244
   $42 = $ReallocAsyncCtx15 + 8 | 0; //@line 4245
   HEAP32[$42 >> 2] = $14; //@line 4246
   sp = STACKTOP; //@line 4247
   return;
  }
  ___async_unwind = 0; //@line 4250
  HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 4251
  $41 = $ReallocAsyncCtx15 + 4 | 0; //@line 4252
  HEAP32[$41 >> 2] = $39; //@line 4253
  $42 = $ReallocAsyncCtx15 + 8 | 0; //@line 4254
  HEAP32[$42 >> 2] = $14; //@line 4255
  sp = STACKTOP; //@line 4256
  return;
 } else {
  $34 = HEAP32[$30 + 4 >> 2] | 0; //@line 4261
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 4262
  FUNCTION_TABLE_vii[$34 & 7]($14, $6 + 16 | 0); //@line 4263
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 201; //@line 4266
   $35 = $ReallocAsyncCtx + 4 | 0; //@line 4267
   HEAP32[$35 >> 2] = $29; //@line 4268
   $36 = $ReallocAsyncCtx + 8 | 0; //@line 4269
   HEAP32[$36 >> 2] = $14; //@line 4270
   $37 = $ReallocAsyncCtx + 12 | 0; //@line 4271
   HEAP32[$37 >> 2] = $6; //@line 4272
   $38 = $ReallocAsyncCtx + 16 | 0; //@line 4273
   HEAP32[$38 >> 2] = $14; //@line 4274
   sp = STACKTOP; //@line 4275
   return;
  }
  ___async_unwind = 0; //@line 4278
  HEAP32[$ReallocAsyncCtx >> 2] = 201; //@line 4279
  $35 = $ReallocAsyncCtx + 4 | 0; //@line 4280
  HEAP32[$35 >> 2] = $29; //@line 4281
  $36 = $ReallocAsyncCtx + 8 | 0; //@line 4282
  HEAP32[$36 >> 2] = $14; //@line 4283
  $37 = $ReallocAsyncCtx + 12 | 0; //@line 4284
  HEAP32[$37 >> 2] = $6; //@line 4285
  $38 = $ReallocAsyncCtx + 16 | 0; //@line 4286
  HEAP32[$38 >> 2] = $14; //@line 4287
  sp = STACKTOP; //@line 4288
  return;
 }
}
function _mbed_vtracef__async_cb_24($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18003
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18005
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18007
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18009
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18013
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18015
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18019
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18023
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18027
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18029
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18031
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18033
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18035
 $34 = HEAP8[$0 + 68 >> 0] & 1; //@line 18038
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18040
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 18044
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 18046
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 18048
 HEAP32[$44 >> 2] = HEAP32[___async_retval >> 2]; //@line 18055
 $50 = _snprintf($24, $26, 2667, $44) | 0; //@line 18056
 $$10 = ($50 | 0) >= ($26 | 0) ? 0 : $50; //@line 18058
 $53 = $24 + $$10 | 0; //@line 18060
 $54 = $26 - $$10 | 0; //@line 18061
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 18065
   $$3169 = $53; //@line 18065
   label = 4; //@line 18066
  }
 } else {
  $$3147168 = $26; //@line 18069
  $$3169 = $24; //@line 18069
  label = 4; //@line 18070
 }
 if ((label | 0) == 4) {
  $56 = $28 + -2 | 0; //@line 18073
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$16 >> 2] = $12; //@line 18079
    $$5156 = _snprintf($$3169, $$3147168, 2670, $16) | 0; //@line 18081
    break;
   }
  case 1:
   {
    HEAP32[$20 >> 2] = $12; //@line 18085
    $$5156 = _snprintf($$3169, $$3147168, 2685, $20) | 0; //@line 18087
    break;
   }
  case 3:
   {
    HEAP32[$36 >> 2] = $12; //@line 18091
    $$5156 = _snprintf($$3169, $$3147168, 2700, $36) | 0; //@line 18093
    break;
   }
  case 7:
   {
    HEAP32[$10 >> 2] = $12; //@line 18097
    $$5156 = _snprintf($$3169, $$3147168, 2715, $10) | 0; //@line 18099
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 2730, $6) | 0; //@line 18104
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 18108
  $67 = $$3169 + $$5156$ | 0; //@line 18110
  $68 = $$3147168 - $$5156$ | 0; //@line 18111
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 18115
   $70 = _vsnprintf($67, $68, $2, $4) | 0; //@line 18116
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 68; //@line 18119
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 18120
    HEAP32[$71 >> 2] = $68; //@line 18121
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 18122
    HEAP32[$72 >> 2] = $67; //@line 18123
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 18124
    HEAP32[$73 >> 2] = $40; //@line 18125
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 18126
    HEAP32[$74 >> 2] = $42; //@line 18127
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 18128
    $$expand_i1_val = $34 & 1; //@line 18129
    HEAP8[$75 >> 0] = $$expand_i1_val; //@line 18130
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 18131
    HEAP32[$76 >> 2] = $30; //@line 18132
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 18133
    HEAP32[$77 >> 2] = $32; //@line 18134
    sp = STACKTOP; //@line 18135
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 18139
   ___async_unwind = 0; //@line 18140
   HEAP32[$ReallocAsyncCtx10 >> 2] = 68; //@line 18141
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 18142
   HEAP32[$71 >> 2] = $68; //@line 18143
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 18144
   HEAP32[$72 >> 2] = $67; //@line 18145
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 18146
   HEAP32[$73 >> 2] = $40; //@line 18147
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 18148
   HEAP32[$74 >> 2] = $42; //@line 18149
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 18150
   $$expand_i1_val = $34 & 1; //@line 18151
   HEAP8[$75 >> 0] = $$expand_i1_val; //@line 18152
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 18153
   HEAP32[$76 >> 2] = $30; //@line 18154
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 18155
   HEAP32[$77 >> 2] = $32; //@line 18156
   sp = STACKTOP; //@line 18157
   return;
  }
 }
 $79 = HEAP32[129] | 0; //@line 18161
 $80 = HEAP32[122] | 0; //@line 18162
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 18163
 FUNCTION_TABLE_vi[$79 & 511]($80); //@line 18164
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 18167
  sp = STACKTOP; //@line 18168
  return;
 }
 ___async_unwind = 0; //@line 18171
 HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 18172
 sp = STACKTOP; //@line 18173
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_14($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16944
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16946
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16948
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16950
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16954
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16956
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16958
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16960
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16962
 $19 = $2 + 12 | 0; //@line 16964
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 16965
 $20 = $4 + 12 | 0; //@line 16966
 $21 = HEAP32[$20 >> 2] | 0; //@line 16967
 if (!$21) {
  $34 = $12 + 12 | 0; //@line 16970
  HEAP32[$34 >> 2] = 0; //@line 16971
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 16972
  $35 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $2, $12, $18) | 0; //@line 16973
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 94; //@line 16976
   $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 16977
   HEAP32[$36 >> 2] = $34; //@line 16978
   $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 16979
   HEAP32[$37 >> 2] = $19; //@line 16980
   $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 16981
   HEAP32[$38 >> 2] = $12; //@line 16982
   $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 16983
   HEAP32[$39 >> 2] = $20; //@line 16984
   $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 16985
   HEAP32[$40 >> 2] = $2; //@line 16986
   $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 16987
   HEAP32[$41 >> 2] = $10; //@line 16988
   $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 16989
   HEAP32[$42 >> 2] = $6; //@line 16990
   sp = STACKTOP; //@line 16991
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 16995
  ___async_unwind = 0; //@line 16996
  HEAP32[$ReallocAsyncCtx9 >> 2] = 94; //@line 16997
  $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 16998
  HEAP32[$36 >> 2] = $34; //@line 16999
  $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 17000
  HEAP32[$37 >> 2] = $19; //@line 17001
  $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 17002
  HEAP32[$38 >> 2] = $12; //@line 17003
  $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 17004
  HEAP32[$39 >> 2] = $20; //@line 17005
  $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 17006
  HEAP32[$40 >> 2] = $2; //@line 17007
  $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 17008
  HEAP32[$41 >> 2] = $10; //@line 17009
  $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 17010
  HEAP32[$42 >> 2] = $6; //@line 17011
  sp = STACKTOP; //@line 17012
  return;
 } else {
  $24 = HEAP32[$21 + 4 >> 2] | 0; //@line 17016
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 17017
  FUNCTION_TABLE_vii[$24 & 7]($12, $10); //@line 17018
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 93; //@line 17021
   $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 17022
   HEAP32[$25 >> 2] = $20; //@line 17023
   $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 17024
   HEAP32[$26 >> 2] = $6; //@line 17025
   $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 17026
   HEAP32[$27 >> 2] = $10; //@line 17027
   $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 17028
   HEAP32[$28 >> 2] = $12; //@line 17029
   $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 17030
   HEAP32[$29 >> 2] = $14; //@line 17031
   $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 17032
   HEAP32[$30 >> 2] = $16; //@line 17033
   $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 17034
   HEAP32[$31 >> 2] = $2; //@line 17035
   $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 17036
   HEAP32[$32 >> 2] = $18; //@line 17037
   $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 17038
   HEAP32[$33 >> 2] = $19; //@line 17039
   sp = STACKTOP; //@line 17040
   return;
  }
  ___async_unwind = 0; //@line 17043
  HEAP32[$ReallocAsyncCtx5 >> 2] = 93; //@line 17044
  $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 17045
  HEAP32[$25 >> 2] = $20; //@line 17046
  $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 17047
  HEAP32[$26 >> 2] = $6; //@line 17048
  $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 17049
  HEAP32[$27 >> 2] = $10; //@line 17050
  $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 17051
  HEAP32[$28 >> 2] = $12; //@line 17052
  $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 17053
  HEAP32[$29 >> 2] = $14; //@line 17054
  $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 17055
  HEAP32[$30 >> 2] = $16; //@line 17056
  $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 17057
  HEAP32[$31 >> 2] = $2; //@line 17058
  $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 17059
  HEAP32[$32 >> 2] = $18; //@line 17060
  $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 17061
  HEAP32[$33 >> 2] = $19; //@line 17062
  sp = STACKTOP; //@line 17063
  return;
 }
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$unpack$i = 0, $$unpack4$i = 0, $15 = 0, $16 = 0, $20 = 0, $3 = 0, $30 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $5 = 0, $50 = 0, $55 = 0, $58 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3832
 STACKTOP = STACKTOP + 32 | 0; //@line 3833
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3833
 $3 = sp + 16 | 0; //@line 3834
 $4 = sp; //@line 3835
 $5 = $2 + 12 | 0; //@line 3836
 $6 = HEAP32[$5 >> 2] | 0; //@line 3837
 do {
  if (!$6) {
   $16 = 0; //@line 3841
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 3844
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 3845
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 3846
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 111; //@line 3849
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 3851
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3853
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 3855
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 3857
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 3859
    sp = STACKTOP; //@line 3860
    STACKTOP = sp; //@line 3861
    return 0; //@line 3861
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3863
    $16 = HEAP32[$5 >> 2] | 0; //@line 3865
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 3870
 HEAP32[$15 >> 2] = $16; //@line 3871
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 3874
 $$unpack4$i = HEAP32[$0 + 4 >> 2] | 0; //@line 3876
 $20 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 3878
 if (!($$unpack4$i & 1)) {
  $36 = $$unpack$i; //@line 3884
 } else {
  $36 = HEAP32[(HEAP32[$20 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 3889
 }
 do {
  if (!$16) {
   $41 = 0; //@line 3894
  } else {
   $30 = HEAP32[$16 + 4 >> 2] | 0; //@line 3897
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 3898
   FUNCTION_TABLE_vii[$30 & 7]($3, $4); //@line 3899
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 112; //@line 3902
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 3904
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 3906
    HEAP32[$AsyncCtx2 + 12 >> 2] = $20; //@line 3908
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 3910
    HEAP32[$AsyncCtx2 + 20 >> 2] = $36; //@line 3912
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3914
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 3916
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 3918
    sp = STACKTOP; //@line 3919
    STACKTOP = sp; //@line 3920
    return 0; //@line 3920
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3922
    $41 = HEAP32[$15 >> 2] | 0; //@line 3924
    break;
   }
  }
 } while (0);
 $40 = $3 + 12 | 0; //@line 3929
 HEAP32[$40 >> 2] = $41; //@line 3930
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3931
 $42 = FUNCTION_TABLE_iiii[$36 & 31]($20, $1, $3) | 0; //@line 3932
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 113; //@line 3935
  HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 3937
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 3939
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 3941
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 3943
  sp = STACKTOP; //@line 3944
  STACKTOP = sp; //@line 3945
  return 0; //@line 3945
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3947
 $47 = HEAP32[$40 >> 2] | 0; //@line 3948
 do {
  if ($47 | 0) {
   $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 3953
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3954
   FUNCTION_TABLE_vi[$50 & 511]($3); //@line 3955
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 114; //@line 3958
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 3960
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 3962
    HEAP32[$AsyncCtx9 + 12 >> 2] = $42; //@line 3964
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 3966
    sp = STACKTOP; //@line 3967
    STACKTOP = sp; //@line 3968
    return 0; //@line 3968
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 3970
    break;
   }
  }
 } while (0);
 $55 = HEAP32[$15 >> 2] | 0; //@line 3975
 if (!$55) {
  STACKTOP = sp; //@line 3978
  return $42 | 0; //@line 3978
 }
 $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 3981
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3982
 FUNCTION_TABLE_vi[$58 & 511]($4); //@line 3983
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 115; //@line 3986
  HEAP32[$AsyncCtx13 + 4 >> 2] = $42; //@line 3988
  sp = STACKTOP; //@line 3989
  STACKTOP = sp; //@line 3990
  return 0; //@line 3990
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 3992
 STACKTOP = sp; //@line 3993
 return $42 | 0; //@line 3993
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_19($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17269
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17273
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17275
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17277
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17279
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17281
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17283
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17285
 $16 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17286
 if ($16 | 0) {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 17290
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 17291
  FUNCTION_TABLE_vi[$19 & 511]($6); //@line 17292
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 95; //@line 17295
   $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 17296
   HEAP32[$20 >> 2] = $4; //@line 17297
   $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 17298
   HEAP32[$21 >> 2] = $8; //@line 17299
   $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 17300
   HEAP32[$22 >> 2] = $10; //@line 17301
   $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 17302
   HEAP32[$23 >> 2] = $12; //@line 17303
   $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 17304
   HEAP32[$24 >> 2] = $AsyncRetVal; //@line 17305
   $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 17306
   HEAP32[$25 >> 2] = $14; //@line 17307
   sp = STACKTOP; //@line 17308
   return;
  }
  ___async_unwind = 0; //@line 17311
  HEAP32[$ReallocAsyncCtx6 >> 2] = 95; //@line 17312
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 17313
  HEAP32[$20 >> 2] = $4; //@line 17314
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 17315
  HEAP32[$21 >> 2] = $8; //@line 17316
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 17317
  HEAP32[$22 >> 2] = $10; //@line 17318
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 17319
  HEAP32[$23 >> 2] = $12; //@line 17320
  $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 17321
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 17322
  $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 17323
  HEAP32[$25 >> 2] = $14; //@line 17324
  sp = STACKTOP; //@line 17325
  return;
 }
 $26 = HEAP32[$4 >> 2] | 0; //@line 17328
 if ($26 | 0) {
  $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 17332
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 17333
  FUNCTION_TABLE_vi[$29 & 511]($10); //@line 17334
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 96; //@line 17337
   $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 17338
   HEAP32[$30 >> 2] = $8; //@line 17339
   $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 17340
   HEAP32[$31 >> 2] = $12; //@line 17341
   $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 17342
   HEAP32[$32 >> 2] = $AsyncRetVal; //@line 17343
   $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 17344
   HEAP32[$33 >> 2] = $14; //@line 17345
   sp = STACKTOP; //@line 17346
   return;
  }
  ___async_unwind = 0; //@line 17349
  HEAP32[$ReallocAsyncCtx7 >> 2] = 96; //@line 17350
  $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 17351
  HEAP32[$30 >> 2] = $8; //@line 17352
  $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 17353
  HEAP32[$31 >> 2] = $12; //@line 17354
  $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 17355
  HEAP32[$32 >> 2] = $AsyncRetVal; //@line 17356
  $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 17357
  HEAP32[$33 >> 2] = $14; //@line 17358
  sp = STACKTOP; //@line 17359
  return;
 }
 $34 = HEAP32[$8 >> 2] | 0; //@line 17362
 if (!$34) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 17366
  return;
 }
 $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 17370
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 17371
 FUNCTION_TABLE_vi[$37 & 511]($12); //@line 17372
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 17375
  $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 17376
  HEAP32[$38 >> 2] = $12; //@line 17377
  $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 17378
  HEAP32[$39 >> 2] = $AsyncRetVal; //@line 17379
  $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 17380
  HEAP32[$40 >> 2] = $14; //@line 17381
  sp = STACKTOP; //@line 17382
  return;
 }
 ___async_unwind = 0; //@line 17385
 HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 17386
 $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 17387
 HEAP32[$38 >> 2] = $12; //@line 17388
 $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 17389
 HEAP32[$39 >> 2] = $AsyncRetVal; //@line 17390
 $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 17391
 HEAP32[$40 >> 2] = $14; //@line 17392
 sp = STACKTOP; //@line 17393
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6963
 STACKTOP = STACKTOP + 32 | 0; //@line 6964
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6964
 $5 = sp + 16 | 0; //@line 6965
 $6 = sp; //@line 6966
 $7 = $2 + 12 | 0; //@line 6967
 $8 = HEAP32[$7 >> 2] | 0; //@line 6968
 do {
  if (!$8) {
   $20 = 0; //@line 6972
  } else {
   $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 6975
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 6976
   FUNCTION_TABLE_vii[$11 & 7]($5, $2); //@line 6977
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 152; //@line 6980
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 6982
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 6984
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 6986
    HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 6988
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 6990
    HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 6992
    HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 6994
    sp = STACKTOP; //@line 6995
    STACKTOP = sp; //@line 6996
    return 0; //@line 6996
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6998
    $20 = HEAP32[$7 >> 2] | 0; //@line 7000
    break;
   }
  }
 } while (0);
 $19 = $5 + 12 | 0; //@line 7005
 HEAP32[$19 >> 2] = $20; //@line 7006
 $21 = $3 + 12 | 0; //@line 7007
 $22 = HEAP32[$21 >> 2] | 0; //@line 7008
 do {
  if (!$22) {
   $34 = 0; //@line 7012
  } else {
   $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 7015
   $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7016
   FUNCTION_TABLE_vii[$25 & 7]($6, $3); //@line 7017
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 153; //@line 7020
    HEAP32[$AsyncCtx2 + 4 >> 2] = $21; //@line 7022
    HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 7024
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 7026
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 7028
    HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 7030
    HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 7032
    HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 7034
    sp = STACKTOP; //@line 7035
    STACKTOP = sp; //@line 7036
    return 0; //@line 7036
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7038
    $34 = HEAP32[$21 >> 2] | 0; //@line 7040
    break;
   }
  }
 } while (0);
 $33 = $6 + 12 | 0; //@line 7045
 HEAP32[$33 >> 2] = $34; //@line 7046
 $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7047
 $35 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $5, 0, $6, $4) | 0; //@line 7048
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 154; //@line 7051
  HEAP32[$AsyncCtx13 + 4 >> 2] = $33; //@line 7053
  HEAP32[$AsyncCtx13 + 8 >> 2] = $19; //@line 7055
  HEAP32[$AsyncCtx13 + 12 >> 2] = $6; //@line 7057
  HEAP32[$AsyncCtx13 + 16 >> 2] = $5; //@line 7059
  sp = STACKTOP; //@line 7060
  STACKTOP = sp; //@line 7061
  return 0; //@line 7061
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7063
 $40 = HEAP32[$33 >> 2] | 0; //@line 7064
 do {
  if ($40 | 0) {
   $43 = HEAP32[$40 + 8 >> 2] | 0; //@line 7069
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7070
   FUNCTION_TABLE_vi[$43 & 511]($6); //@line 7071
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 155; //@line 7074
    HEAP32[$AsyncCtx6 + 4 >> 2] = $19; //@line 7076
    HEAP32[$AsyncCtx6 + 8 >> 2] = $35; //@line 7078
    HEAP32[$AsyncCtx6 + 12 >> 2] = $5; //@line 7080
    sp = STACKTOP; //@line 7081
    STACKTOP = sp; //@line 7082
    return 0; //@line 7082
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7084
    break;
   }
  }
 } while (0);
 $47 = HEAP32[$19 >> 2] | 0; //@line 7089
 if (!$47) {
  STACKTOP = sp; //@line 7092
  return $35 | 0; //@line 7092
 }
 $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 7095
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7096
 FUNCTION_TABLE_vi[$50 & 511]($5); //@line 7097
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 156; //@line 7100
  HEAP32[$AsyncCtx10 + 4 >> 2] = $35; //@line 7102
  sp = STACKTOP; //@line 7103
  STACKTOP = sp; //@line 7104
  return 0; //@line 7104
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7106
 STACKTOP = sp; //@line 7107
 return $35 | 0; //@line 7107
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$04 = 0, $11 = 0, $15 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8895
 STACKTOP = STACKTOP + 32 | 0; //@line 8896
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8896
 $3 = sp + 16 | 0; //@line 8897
 $4 = sp; //@line 8898
 $7 = $2 + 12 | 0; //@line 8901
 $8 = HEAP32[$7 >> 2] | 0; //@line 8902
 $9 = ($8 | 0) == 0; //@line 8903
 if (!(HEAP32[1681] | 0)) {
  do {
   if ($9) {
    $30 = 0; //@line 8907
   } else {
    $24 = HEAP32[$8 + 4 >> 2] | 0; //@line 8910
    $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8911
    FUNCTION_TABLE_vii[$24 & 7]($4, $2); //@line 8912
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 191; //@line 8915
     HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 8917
     HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 8919
     HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 8921
     HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 8923
     sp = STACKTOP; //@line 8924
     STACKTOP = sp; //@line 8925
     return 0; //@line 8925
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8927
     $30 = HEAP32[$7 >> 2] | 0; //@line 8929
     break;
    }
   }
  } while (0);
  $29 = $4 + 12 | 0; //@line 8934
  HEAP32[$29 >> 2] = $30; //@line 8935
  $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8936
  $31 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $4) | 0; //@line 8937
  if (___async) {
   HEAP32[$AsyncCtx14 >> 2] = 192; //@line 8940
   HEAP32[$AsyncCtx14 + 4 >> 2] = $29; //@line 8942
   HEAP32[$AsyncCtx14 + 8 >> 2] = $4; //@line 8944
   sp = STACKTOP; //@line 8945
   STACKTOP = sp; //@line 8946
   return 0; //@line 8946
  }
  _emscripten_free_async_context($AsyncCtx14 | 0); //@line 8948
  $34 = HEAP32[$29 >> 2] | 0; //@line 8949
  if (!$34) {
   $$04 = $31; //@line 8952
   STACKTOP = sp; //@line 8953
   return $$04 | 0; //@line 8953
  }
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 8956
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8957
  FUNCTION_TABLE_vi[$37 & 511]($4); //@line 8958
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 193; //@line 8961
   HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 8963
   sp = STACKTOP; //@line 8964
   STACKTOP = sp; //@line 8965
   return 0; //@line 8965
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8967
  $$04 = $31; //@line 8968
  STACKTOP = sp; //@line 8969
  return $$04 | 0; //@line 8969
 } else {
  do {
   if ($9) {
    $16 = 0; //@line 8973
   } else {
    $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 8976
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 8977
    FUNCTION_TABLE_vii[$11 & 7]($3, $2); //@line 8978
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 188; //@line 8981
     HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 8983
     HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 8985
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 8987
     sp = STACKTOP; //@line 8988
     STACKTOP = sp; //@line 8989
     return 0; //@line 8989
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 8991
     $16 = HEAP32[$7 >> 2] | 0; //@line 8993
     break;
    }
   }
  } while (0);
  $15 = $3 + 12 | 0; //@line 8998
  HEAP32[$15 >> 2] = $16; //@line 8999
  $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9000
  __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(6712, $1, $3) | 0; //@line 9001
  if (___async) {
   HEAP32[$AsyncCtx17 >> 2] = 189; //@line 9004
   HEAP32[$AsyncCtx17 + 4 >> 2] = $15; //@line 9006
   HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 9008
   sp = STACKTOP; //@line 9009
   STACKTOP = sp; //@line 9010
   return 0; //@line 9010
  }
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 9012
  $19 = HEAP32[$15 >> 2] | 0; //@line 9013
  if (!$19) {
   $$04 = 0; //@line 9016
   STACKTOP = sp; //@line 9017
   return $$04 | 0; //@line 9017
  }
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 9020
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9021
  FUNCTION_TABLE_vi[$22 & 511]($3); //@line 9022
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 190; //@line 9025
   sp = STACKTOP; //@line 9026
   STACKTOP = sp; //@line 9027
   return 0; //@line 9027
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9029
  $$04 = 0; //@line 9030
  STACKTOP = sp; //@line 9031
  return $$04 | 0; //@line 9031
 }
 return 0; //@line 9033
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_129($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3741
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3743
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3745
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3747
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3749
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3751
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3753
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3755
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3757
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3759
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3761
 $21 = $2 + 44 | 0; //@line 3762
 $22 = HEAP32[$21 >> 2] | 0; //@line 3763
 if ($22 | 0) {
  $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 3767
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 3768
  FUNCTION_TABLE_vii[$25 & 7]($10, $12); //@line 3769
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 3772
   $26 = $ReallocAsyncCtx9 + 4 | 0; //@line 3773
   HEAP32[$26 >> 2] = $21; //@line 3774
   $27 = $ReallocAsyncCtx9 + 8 | 0; //@line 3775
   HEAP32[$27 >> 2] = $18; //@line 3776
   $28 = $ReallocAsyncCtx9 + 12 | 0; //@line 3777
   HEAP32[$28 >> 2] = $20; //@line 3778
   $29 = $ReallocAsyncCtx9 + 16 | 0; //@line 3779
   HEAP32[$29 >> 2] = $14; //@line 3780
   $30 = $ReallocAsyncCtx9 + 20 | 0; //@line 3781
   HEAP32[$30 >> 2] = $4; //@line 3782
   $31 = $ReallocAsyncCtx9 + 24 | 0; //@line 3783
   HEAP32[$31 >> 2] = $16; //@line 3784
   $32 = $ReallocAsyncCtx9 + 28 | 0; //@line 3785
   HEAP32[$32 >> 2] = $6; //@line 3786
   $33 = $ReallocAsyncCtx9 + 32 | 0; //@line 3787
   HEAP32[$33 >> 2] = $8; //@line 3788
   $34 = $ReallocAsyncCtx9 + 36 | 0; //@line 3789
   HEAP32[$34 >> 2] = $2; //@line 3790
   sp = STACKTOP; //@line 3791
   return;
  }
  ___async_unwind = 0; //@line 3794
  HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 3795
  $26 = $ReallocAsyncCtx9 + 4 | 0; //@line 3796
  HEAP32[$26 >> 2] = $21; //@line 3797
  $27 = $ReallocAsyncCtx9 + 8 | 0; //@line 3798
  HEAP32[$27 >> 2] = $18; //@line 3799
  $28 = $ReallocAsyncCtx9 + 12 | 0; //@line 3800
  HEAP32[$28 >> 2] = $20; //@line 3801
  $29 = $ReallocAsyncCtx9 + 16 | 0; //@line 3802
  HEAP32[$29 >> 2] = $14; //@line 3803
  $30 = $ReallocAsyncCtx9 + 20 | 0; //@line 3804
  HEAP32[$30 >> 2] = $4; //@line 3805
  $31 = $ReallocAsyncCtx9 + 24 | 0; //@line 3806
  HEAP32[$31 >> 2] = $16; //@line 3807
  $32 = $ReallocAsyncCtx9 + 28 | 0; //@line 3808
  HEAP32[$32 >> 2] = $6; //@line 3809
  $33 = $ReallocAsyncCtx9 + 32 | 0; //@line 3810
  HEAP32[$33 >> 2] = $8; //@line 3811
  $34 = $ReallocAsyncCtx9 + 36 | 0; //@line 3812
  HEAP32[$34 >> 2] = $2; //@line 3813
  sp = STACKTOP; //@line 3814
  return;
 }
 HEAP32[$18 >> 2] = 0; //@line 3817
 $$pre85 = HEAP32[$20 >> 2] | 0; //@line 3818
 HEAP32[$$pre85 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 3822
 HEAP32[$4 + 8 >> 2] = 0; //@line 3824
 HEAP32[$4 >> 2] = 215; //@line 3825
 HEAP32[$4 + 4 >> 2] = $$pre85; //@line 3827
 $39 = $4 + 12 | 0; //@line 3828
 HEAP32[$39 >> 2] = 724; //@line 3829
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 3830
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($16, $4); //@line 3831
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 3834
  $40 = $ReallocAsyncCtx18 + 4 | 0; //@line 3835
  HEAP32[$40 >> 2] = $39; //@line 3836
  $41 = $ReallocAsyncCtx18 + 8 | 0; //@line 3837
  HEAP32[$41 >> 2] = $6; //@line 3838
  $42 = $ReallocAsyncCtx18 + 12 | 0; //@line 3839
  HEAP32[$42 >> 2] = $8; //@line 3840
  $43 = $ReallocAsyncCtx18 + 16 | 0; //@line 3841
  HEAP32[$43 >> 2] = $4; //@line 3842
  $44 = $ReallocAsyncCtx18 + 20 | 0; //@line 3843
  HEAP32[$44 >> 2] = $2; //@line 3844
  sp = STACKTOP; //@line 3845
  return;
 }
 ___async_unwind = 0; //@line 3848
 HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 3849
 $40 = $ReallocAsyncCtx18 + 4 | 0; //@line 3850
 HEAP32[$40 >> 2] = $39; //@line 3851
 $41 = $ReallocAsyncCtx18 + 8 | 0; //@line 3852
 HEAP32[$41 >> 2] = $6; //@line 3853
 $42 = $ReallocAsyncCtx18 + 12 | 0; //@line 3854
 HEAP32[$42 >> 2] = $8; //@line 3855
 $43 = $ReallocAsyncCtx18 + 16 | 0; //@line 3856
 HEAP32[$43 >> 2] = $4; //@line 3857
 $44 = $ReallocAsyncCtx18 + 20 | 0; //@line 3858
 HEAP32[$44 >> 2] = $2; //@line 3859
 sp = STACKTOP; //@line 3860
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_93($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $7 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1845
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1847
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1849
 $7 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 1852
 if ($7 | 0) {
  $11 = HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0; //@line 1857
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 1858
  FUNCTION_TABLE_vi[$11 & 511]($7); //@line 1859
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 221; //@line 1862
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 1863
   HEAP32[$12 >> 2] = $2; //@line 1864
   $13 = $ReallocAsyncCtx + 8 | 0; //@line 1865
   HEAP32[$13 >> 2] = $4; //@line 1866
   sp = STACKTOP; //@line 1867
   return;
  }
  ___async_unwind = 0; //@line 1870
  HEAP32[$ReallocAsyncCtx >> 2] = 221; //@line 1871
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 1872
  HEAP32[$12 >> 2] = $2; //@line 1873
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 1874
  HEAP32[$13 >> 2] = $4; //@line 1875
  sp = STACKTOP; //@line 1876
  return;
 }
 $15 = HEAP32[$2 + 60 >> 2] | 0; //@line 1880
 do {
  if ($15 | 0) {
   $18 = HEAP32[$15 + 12 >> 2] | 0; //@line 1885
   if (!$18) {
    __ZdlPv($15); //@line 1888
    break;
   }
   $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 1892
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 1893
   FUNCTION_TABLE_vi[$21 & 511]($15); //@line 1894
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 1897
    $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 1898
    HEAP32[$22 >> 2] = $15; //@line 1899
    $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 1900
    HEAP32[$23 >> 2] = $2; //@line 1901
    $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 1902
    HEAP32[$24 >> 2] = $4; //@line 1903
    sp = STACKTOP; //@line 1904
    return;
   }
   ___async_unwind = 0; //@line 1907
   HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 1908
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 1909
   HEAP32[$22 >> 2] = $15; //@line 1910
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 1911
   HEAP32[$23 >> 2] = $2; //@line 1912
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 1913
   HEAP32[$24 >> 2] = $4; //@line 1914
   sp = STACKTOP; //@line 1915
   return;
  }
 } while (0);
 $26 = HEAP32[$2 + 64 >> 2] | 0; //@line 1920
 if ($26 | 0) {
  __ZdaPv($26); //@line 1923
 }
 $29 = HEAP32[$2 + 12 >> 2] | 0; //@line 1926
 if ($29 | 0) {
  __ZdlPv($29); //@line 1929
 }
 $32 = HEAP32[$2 + 44 >> 2] | 0; //@line 1932
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 1937
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 1938
  FUNCTION_TABLE_vi[$36 & 511]($2 + 32 | 0); //@line 1939
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 1942
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 1943
   HEAP32[$37 >> 2] = $2; //@line 1944
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 1945
   HEAP32[$38 >> 2] = $4; //@line 1946
   sp = STACKTOP; //@line 1947
   return;
  }
  ___async_unwind = 0; //@line 1950
  HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 1951
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 1952
  HEAP32[$37 >> 2] = $2; //@line 1953
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 1954
  HEAP32[$38 >> 2] = $4; //@line 1955
  sp = STACKTOP; //@line 1956
  return;
 }
 $40 = HEAP32[$2 + 28 >> 2] | 0; //@line 1960
 if (!$40) {
  __ZdlPv($2); //@line 1963
  HEAP32[6740 + ($4 << 2) >> 2] = 0; //@line 1965
  return;
 }
 $44 = HEAP32[$40 + 8 >> 2] | 0; //@line 1970
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 1971
 FUNCTION_TABLE_vi[$44 & 511]($2 + 16 | 0); //@line 1972
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 1975
  $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 1976
  HEAP32[$45 >> 2] = $2; //@line 1977
  $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 1978
  HEAP32[$46 >> 2] = $4; //@line 1979
  sp = STACKTOP; //@line 1980
  return;
 }
 ___async_unwind = 0; //@line 1983
 HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 1984
 $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 1985
 HEAP32[$45 >> 2] = $2; //@line 1986
 $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 1987
 HEAP32[$46 >> 2] = $4; //@line 1988
 sp = STACKTOP; //@line 1989
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_122($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 3372
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3374
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3376
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3378
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3380
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3382
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3384
 if (!$AsyncRetVal) {
  $28 = 0 == 0; //@line 3387
  $29 = HEAP32[$2 >> 2] | 0; //@line 3388
  if (!$29) {
   if ($28) {
    $$06 = -3007; //@line 3392
    $34 = ___async_retval; //@line 3393
    HEAP32[$34 >> 2] = $$06; //@line 3394
    return;
   }
   $$06 = 0; //@line 3397
   $34 = ___async_retval; //@line 3398
   HEAP32[$34 >> 2] = $$06; //@line 3399
   return;
  } else {
   $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 3403
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 3404
   FUNCTION_TABLE_vi[$32 & 511]($8); //@line 3405
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 105; //@line 3408
    $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 3409
    $$expand_i1_val = $28 & 1; //@line 3410
    HEAP8[$33 >> 0] = $$expand_i1_val; //@line 3411
    sp = STACKTOP; //@line 3412
    return;
   }
   ___async_unwind = 0; //@line 3415
   HEAP32[$ReallocAsyncCtx3 >> 2] = 105; //@line 3416
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 3417
   $$expand_i1_val = $28 & 1; //@line 3418
   HEAP8[$33 >> 0] = $$expand_i1_val; //@line 3419
   sp = STACKTOP; //@line 3420
   return;
  }
 } else {
  $13 = HEAP32[$2 >> 2] | 0; //@line 3424
  if (!$13) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 3428
   _equeue_event_delay($AsyncRetVal, $4); //@line 3429
   _equeue_event_dtor($AsyncRetVal, 102); //@line 3430
   $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 3431
   $24 = _equeue_post($6, 103, $AsyncRetVal) | 0; //@line 3432
   if (___async) {
    HEAP32[$ReallocAsyncCtx8 >> 2] = 104; //@line 3435
    $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 3436
    HEAP32[$25 >> 2] = $2; //@line 3437
    $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 3438
    HEAP32[$26 >> 2] = $8; //@line 3439
    sp = STACKTOP; //@line 3440
    return;
   }
   HEAP32[___async_retval >> 2] = $24; //@line 3444
   ___async_unwind = 0; //@line 3445
   HEAP32[$ReallocAsyncCtx8 >> 2] = 104; //@line 3446
   $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 3447
   HEAP32[$25 >> 2] = $2; //@line 3448
   $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 3449
   HEAP32[$26 >> 2] = $8; //@line 3450
   sp = STACKTOP; //@line 3451
   return;
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 3455
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 3456
   FUNCTION_TABLE_vii[$16 & 7]($AsyncRetVal, $8); //@line 3457
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 3460
    $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 3461
    HEAP32[$17 >> 2] = $10; //@line 3462
    $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 3463
    HEAP32[$18 >> 2] = $AsyncRetVal; //@line 3464
    $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 3465
    HEAP32[$19 >> 2] = $4; //@line 3466
    $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 3467
    HEAP32[$20 >> 2] = $6; //@line 3468
    $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 3469
    HEAP32[$21 >> 2] = $2; //@line 3470
    $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 3471
    HEAP32[$22 >> 2] = $8; //@line 3472
    sp = STACKTOP; //@line 3473
    return;
   }
   ___async_unwind = 0; //@line 3476
   HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 3477
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 3478
   HEAP32[$17 >> 2] = $10; //@line 3479
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 3480
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 3481
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 3482
   HEAP32[$19 >> 2] = $4; //@line 3483
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 3484
   HEAP32[$20 >> 2] = $6; //@line 3485
   $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 3486
   HEAP32[$21 >> 2] = $2; //@line 3487
   $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 3488
   HEAP32[$22 >> 2] = $8; //@line 3489
   sp = STACKTOP; //@line 3490
   return;
  }
 }
}
function __Z28nsapi_dns_query_async_canceli($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$lcssa = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $31 = 0, $35 = 0, $39 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12172
 STACKTOP = STACKTOP + 16 | 0; //@line 12173
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12173
 $1 = sp; //@line 12174
 $2 = HEAP32[1685] | 0; //@line 12175
 if (!$2) {
  label = 3; //@line 12178
 } else {
  if ((HEAP32[$2 >> 2] | 0) == ($0 | 0)) {
   $$lcssa = $2; //@line 12183
  } else {
   label = 3; //@line 12185
  }
 }
 do {
  if ((label | 0) == 3) {
   $6 = HEAP32[1686] | 0; //@line 12190
   if ($6 | 0) {
    if ((HEAP32[$6 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $6; //@line 12196
     break;
    }
   }
   $35 = HEAP32[1687] | 0; //@line 12200
   if ($35 | 0) {
    if ((HEAP32[$35 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $35; //@line 12206
     break;
    }
   }
   $39 = HEAP32[1688] | 0; //@line 12210
   if ($39 | 0) {
    if ((HEAP32[$39 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $39; //@line 12216
     break;
    }
   }
   $43 = HEAP32[1689] | 0; //@line 12220
   if (!$43) {
    $$0 = -3003; //@line 12223
    STACKTOP = sp; //@line 12224
    return $$0 | 0; //@line 12224
   }
   if ((HEAP32[$43 >> 2] | 0) == ($0 | 0)) {
    $$lcssa = $43; //@line 12229
   } else {
    $$0 = -3003; //@line 12231
    STACKTOP = sp; //@line 12232
    return $$0 | 0; //@line 12232
   }
  }
 } while (0);
 $8 = $$lcssa + 88 | 0; //@line 12236
 if ((HEAP32[$8 >> 2] | 0) == 2) {
  $$0 = -3003; //@line 12240
  STACKTOP = sp; //@line 12241
  return $$0 | 0; //@line 12241
 }
 HEAP32[$8 >> 2] = 2; //@line 12243
 HEAP32[$1 >> 2] = 0; //@line 12244
 HEAP32[$1 + 4 >> 2] = 0; //@line 12244
 HEAP32[$1 + 8 >> 2] = 0; //@line 12244
 HEAP32[$1 + 12 >> 2] = 0; //@line 12244
 $11 = $$lcssa + 16 | 0; //@line 12245
 do {
  if (($11 | 0) != ($1 | 0)) {
   $13 = $$lcssa + 28 | 0; //@line 12249
   $14 = HEAP32[$13 >> 2] | 0; //@line 12250
   if ($14 | 0) {
    $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 12254
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 12255
    FUNCTION_TABLE_vi[$17 & 511]($11); //@line 12256
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 264; //@line 12259
     HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12261
     HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 12263
     HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 12265
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 12267
     sp = STACKTOP; //@line 12268
     STACKTOP = sp; //@line 12269
     return 0; //@line 12269
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12271
    $$phi$trans$insert = $1 + 12 | 0; //@line 12272
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 12273
    if ($$pre | 0) {
     $24 = HEAP32[$$pre + 4 >> 2] | 0; //@line 12277
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12278
     FUNCTION_TABLE_vii[$24 & 7]($11, $1); //@line 12279
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 265; //@line 12282
      HEAP32[$AsyncCtx2 + 4 >> 2] = $$phi$trans$insert; //@line 12284
      HEAP32[$AsyncCtx2 + 8 >> 2] = $13; //@line 12286
      HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 12288
      sp = STACKTOP; //@line 12289
      STACKTOP = sp; //@line 12290
      return 0; //@line 12290
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12292
     $$pre$i$i = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 12293
     HEAP32[$13 >> 2] = $$pre$i$i; //@line 12294
     if (!$$pre$i$i) {
      break;
     }
     $31 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 12301
     $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12302
     FUNCTION_TABLE_vi[$31 & 511]($1); //@line 12303
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 266; //@line 12306
      HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 12308
      sp = STACKTOP; //@line 12309
      STACKTOP = sp; //@line 12310
      return 0; //@line 12310
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12312
      break;
     }
    }
   }
   HEAP32[$13 >> 2] = 0; //@line 12317
  }
 } while (0);
 $$0 = 0; //@line 12320
 STACKTOP = sp; //@line 12321
 return $$0 | 0; //@line 12321
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_37($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19184
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19186
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19188
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19190
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19192
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19194
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19196
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 19199
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19201
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19203
 $20 = HEAP8[$0 + 40 >> 0] & 1; //@line 19206
 $22 = HEAP8[$0 + 41 >> 0] & 1; //@line 19209
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 19211
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 19213
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 19215
 L2 : do {
  if (!(HEAP8[$2 >> 0] | 0)) {
   do {
    if (!(HEAP8[$8 >> 0] | 0)) {
     $$182$off0 = $22; //@line 19224
     $$186$off0 = $20; //@line 19224
    } else {
     if (!(HEAP8[$6 >> 0] | 0)) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $20; //@line 19233
       $$283$off0 = 1; //@line 19233
       label = 13; //@line 19234
       break L2;
      } else {
       $$182$off0 = 1; //@line 19237
       $$186$off0 = $20; //@line 19237
       break;
      }
     }
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      label = 18; //@line 19244
      break L2;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      label = 18; //@line 19251
      break L2;
     } else {
      $$182$off0 = 1; //@line 19254
      $$186$off0 = 1; //@line 19254
     }
    }
   } while (0);
   $30 = $24 + 8 | 0; //@line 19258
   if ($30 >>> 0 < $4 >>> 0) {
    HEAP8[$6 >> 0] = 0; //@line 19261
    HEAP8[$8 >> 0] = 0; //@line 19262
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 19263
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $10, $12, $12, 1, $14); //@line 19264
    if (!___async) {
     ___async_unwind = 0; //@line 19267
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 344; //@line 19269
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 19271
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 19273
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 19275
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 19277
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 19279
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 19281
    HEAP8[$ReallocAsyncCtx5 + 28 >> 0] = $14 & 1; //@line 19284
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 19286
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 19288
    HEAP8[$ReallocAsyncCtx5 + 40 >> 0] = $$186$off0 & 1; //@line 19291
    HEAP8[$ReallocAsyncCtx5 + 41 >> 0] = $$182$off0 & 1; //@line 19294
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $30; //@line 19296
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 19298
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 19300
    sp = STACKTOP; //@line 19301
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 19304
    $$283$off0 = $$182$off0; //@line 19304
    label = 13; //@line 19305
   }
  } else {
   $$085$off0$reg2mem$0 = $20; //@line 19308
   $$283$off0 = $22; //@line 19308
   label = 13; //@line 19309
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$26 >> 2] = $12; //@line 19315
    $59 = $10 + 40 | 0; //@line 19316
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 19319
    if ((HEAP32[$10 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$16 >> 2] | 0) == 2) {
      HEAP8[$2 >> 0] = 1; //@line 19327
      if ($$283$off0) {
       label = 18; //@line 19329
       break;
      } else {
       $67 = 4; //@line 19332
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 19339
   } else {
    $67 = 4; //@line 19341
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 19346
 }
 HEAP32[$28 >> 2] = $67; //@line 19348
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $$unpack$i = 0, $$unpack4$i = 0, $10 = 0, $11 = 0, $15 = 0, $18 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5042
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5046
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5048
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5050
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5052
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5053
 $11 = $4 + 12 | 0; //@line 5054
 HEAP32[$11 >> 2] = $$pre$i; //@line 5055
 $$unpack$i = HEAP32[$8 >> 2] | 0; //@line 5058
 $$unpack4$i = HEAP32[$8 + 4 >> 2] | 0; //@line 5060
 $15 = (HEAP32[$8 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 5062
 $18 = $$pre$i; //@line 5065
 if (!($$unpack4$i & 1)) {
  $31 = $$unpack$i; //@line 5068
 } else {
  $31 = HEAP32[(HEAP32[$15 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 5073
 }
 if (!$$pre$i) {
  $35 = $6 + 12 | 0; //@line 5077
  HEAP32[$35 >> 2] = 0; //@line 5078
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 5079
  $36 = FUNCTION_TABLE_iiii[$31 & 31]($15, $10, $6) | 0; //@line 5080
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 113; //@line 5083
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 5084
   HEAP32[$37 >> 2] = $35; //@line 5085
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 5086
   HEAP32[$38 >> 2] = $6; //@line 5087
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 5088
   HEAP32[$39 >> 2] = $11; //@line 5089
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 5090
   HEAP32[$40 >> 2] = $4; //@line 5091
   sp = STACKTOP; //@line 5092
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 5096
  ___async_unwind = 0; //@line 5097
  HEAP32[$ReallocAsyncCtx3 >> 2] = 113; //@line 5098
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 5099
  HEAP32[$37 >> 2] = $35; //@line 5100
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 5101
  HEAP32[$38 >> 2] = $6; //@line 5102
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 5103
  HEAP32[$39 >> 2] = $11; //@line 5104
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 5105
  HEAP32[$40 >> 2] = $4; //@line 5106
  sp = STACKTOP; //@line 5107
  return;
 } else {
  $25 = HEAP32[$18 + 4 >> 2] | 0; //@line 5111
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 5112
  FUNCTION_TABLE_vii[$25 & 7]($6, $4); //@line 5113
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 112; //@line 5116
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 5117
   HEAP32[$26 >> 2] = $11; //@line 5118
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 5119
   HEAP32[$27 >> 2] = $6; //@line 5120
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 5121
   HEAP32[$28 >> 2] = $15; //@line 5122
   $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 5123
   HEAP32[$29 >> 2] = $10; //@line 5124
   $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 5125
   HEAP32[$30 >> 2] = $31; //@line 5126
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 5127
   HEAP32[$32 >> 2] = $6; //@line 5128
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 5129
   HEAP32[$33 >> 2] = $11; //@line 5130
   $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 5131
   HEAP32[$34 >> 2] = $4; //@line 5132
   sp = STACKTOP; //@line 5133
   return;
  }
  ___async_unwind = 0; //@line 5136
  HEAP32[$ReallocAsyncCtx2 >> 2] = 112; //@line 5137
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 5138
  HEAP32[$26 >> 2] = $11; //@line 5139
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 5140
  HEAP32[$27 >> 2] = $6; //@line 5141
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 5142
  HEAP32[$28 >> 2] = $15; //@line 5143
  $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 5144
  HEAP32[$29 >> 2] = $10; //@line 5145
  $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 5146
  HEAP32[$30 >> 2] = $31; //@line 5147
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 5148
  HEAP32[$32 >> 2] = $6; //@line 5149
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 5150
  HEAP32[$33 >> 2] = $11; //@line 5151
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 5152
  HEAP32[$34 >> 2] = $4; //@line 5153
  sp = STACKTOP; //@line 5154
  return;
 }
}
function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $100 = 0, $101 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $80 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 $2 = $0 + 4 | 0; //@line 9183
 $3 = HEAP32[$2 >> 2] | 0; //@line 9184
 $4 = $0 + 100 | 0; //@line 9185
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1; //@line 9190
  $11 = HEAPU8[$3 >> 0] | 0; //@line 9193
 } else {
  $11 = ___shgetc($0) | 0; //@line 9196
 }
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1; //@line 9201
   $14 = HEAP32[$2 >> 2] | 0; //@line 9202
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1; //@line 9207
    $22 = HEAPU8[$14 >> 0] | 0; //@line 9210
   } else {
    $22 = ___shgetc($0) | 0; //@line 9213
   }
   if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) {
    if (!(HEAP32[$4 >> 2] | 0)) {
     $$0 = $13; //@line 9223
     $$049 = $22; //@line 9223
    } else {
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9227
     $$0 = $13; //@line 9228
     $$049 = $22; //@line 9228
    }
   } else {
    $$0 = $13; //@line 9231
    $$049 = $22; //@line 9231
   }
   break;
  }
 default:
  {
   $$0 = 0; //@line 9236
   $$049 = $11; //@line 9236
  }
 }
 if (($$049 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$4 >> 2] | 0)) {
   $100 = -2147483648; //@line 9245
   $101 = 0; //@line 9245
  } else {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9249
   $100 = -2147483648; //@line 9250
   $101 = 0; //@line 9250
  }
 } else {
  $$04860 = 0; //@line 9253
  $$159 = $$049; //@line 9253
  while (1) {
   $$04860 = $$159 + -48 + ($$04860 * 10 | 0) | 0; //@line 9257
   $38 = HEAP32[$2 >> 2] | 0; //@line 9258
   if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $38 + 1; //@line 9263
    $$1$be = HEAPU8[$38 >> 0] | 0; //@line 9266
   } else {
    $$1$be = ___shgetc($0) | 0; //@line 9269
   }
   if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04860 | 0) < 214748364)) {
    break;
   } else {
    $$159 = $$1$be; //@line 9276
   }
  }
  $50 = (($$04860 | 0) < 0) << 31 >> 31; //@line 9282
  if (($$1$be + -48 | 0) >>> 0 < 10) {
   $$254 = $$1$be; //@line 9286
   $55 = $$04860; //@line 9286
   $56 = $50; //@line 9286
   while (1) {
    $57 = ___muldi3($55 | 0, $56 | 0, 10, 0) | 0; //@line 9288
    $58 = tempRet0; //@line 9289
    $61 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 9292
    $63 = _i64Add($61 | 0, tempRet0 | 0, $57 | 0, $58 | 0) | 0; //@line 9294
    $64 = tempRet0; //@line 9295
    $65 = HEAP32[$2 >> 2] | 0; //@line 9296
    if ($65 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $65 + 1; //@line 9301
     $$2$be = HEAPU8[$65 >> 0] | 0; //@line 9304
    } else {
     $$2$be = ___shgetc($0) | 0; //@line 9307
    }
    if (($$2$be + -48 | 0) >>> 0 < 10 & (($64 | 0) < 21474836 | ($64 | 0) == 21474836 & $63 >>> 0 < 2061584302)) {
     $$254 = $$2$be; //@line 9318
     $55 = $63; //@line 9318
     $56 = $64; //@line 9318
    } else {
     $$2$lcssa = $$2$be; //@line 9320
     $94 = $63; //@line 9320
     $95 = $64; //@line 9320
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be; //@line 9325
   $94 = $$04860; //@line 9325
   $95 = $50; //@line 9325
  }
  if (($$2$lcssa + -48 | 0) >>> 0 < 10) {
   do {
    $80 = HEAP32[$2 >> 2] | 0; //@line 9331
    if ($80 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $80 + 1; //@line 9336
     $$3$be = HEAPU8[$80 >> 0] | 0; //@line 9339
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 9342
    }
   } while (($$3$be + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[$4 >> 2] | 0) {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9356
  }
  $93 = ($$0 | 0) != 0; //@line 9358
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0; //@line 9359
  $100 = $93 ? tempRet0 : $95; //@line 9363
  $101 = $93 ? $96 : $94; //@line 9363
 }
 tempRet0 = $100; //@line 9365
 return $101 | 0; //@line 9366
}
function _ip6tos($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$049$be78 = 0, $$04962 = 0, $$05075 = 0, $$05274 = 0, $$05573 = 0, $$05872 = 0, $$1 = 0, $$151$lcssa = 0, $$15165 = 0, $$15364 = 0, $$2 = 0, $$254 = 0, $$257 = 0, $$260 = 0, $$3 = 0, $$461 = 0, $$lcssa = 0, $$shrunk = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $23 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $42 = 0, $45 = 0, $57 = 0, $59 = 0, $9 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2401
 STACKTOP = STACKTOP + 16 | 0; //@line 2402
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2402
 $vararg_buffer = sp; //@line 2403
 $$05075 = 0; //@line 2404
 $$05274 = $0; //@line 2404
 $$05573 = 1; //@line 2404
 $$05872 = -1; //@line 2404
 $15 = 0; //@line 2404
 while (1) {
  $9 = $$05274 + 2 | 0; //@line 2410
  if (!((HEAPU8[$$05274 >> 0] | 0) << 8 | (HEAPU8[$$05274 + 1 >> 0] | 0))) {
   $14 = $15 + 1 | 0; //@line 2416
   $16 = $14 & 255; //@line 2417
   $17 = $14 & 255; //@line 2418
   L5 : do {
    if (($16 & 255) < 8) {
     $$15165 = $16; //@line 2422
     $$15364 = $9; //@line 2422
     $indvars$iv = $17; //@line 2422
     while (1) {
      $23 = $$15364 + 2 | 0; //@line 2428
      if ((HEAPU8[$$15364 >> 0] | 0) << 8 | (HEAPU8[$$15364 + 1 >> 0] | 0) | 0) {
       $$151$lcssa = $indvars$iv & 255; //@line 2435
       $$254 = $23; //@line 2435
       $$lcssa = $indvars$iv; //@line 2435
       break L5;
      }
      $indvars$iv$next = $indvars$iv + 1 | 0; //@line 2438
      $29 = $$15165 + 1 << 24 >> 24; //@line 2439
      if ($indvars$iv$next >>> 0 < 8) {
       $$15165 = $29; //@line 2442
       $$15364 = $23; //@line 2442
       $indvars$iv = $indvars$iv$next; //@line 2442
      } else {
       $$151$lcssa = $29; //@line 2444
       $$254 = $23; //@line 2444
       $$lcssa = $indvars$iv$next; //@line 2444
       break;
      }
     }
    } else {
     $$151$lcssa = $16; //@line 2449
     $$254 = $9; //@line 2449
     $$lcssa = $17; //@line 2449
    }
   } while (0);
   $31 = $$lcssa - $15 | 0; //@line 2452
   $33 = ($31 | 0) > ($$05573 & 255 | 0); //@line 2454
   $$2 = $$151$lcssa; //@line 2458
   $$257 = $33 ? $31 & 255 : $$05573; //@line 2458
   $$260 = $33 ? $$05075 : $$05872; //@line 2458
   $$3 = $$254; //@line 2458
  } else {
   $$2 = $$05075; //@line 2460
   $$257 = $$05573; //@line 2460
   $$260 = $$05872; //@line 2460
   $$3 = $9; //@line 2460
  }
  $35 = $$2 + 1 << 24 >> 24; //@line 2462
  if (($35 & 255) < 8) {
   $$05075 = $35; //@line 2466
   $$05274 = $$3; //@line 2466
   $$05573 = $$257; //@line 2466
   $$05872 = $$260; //@line 2466
   $15 = $35 & 255; //@line 2466
  } else {
   break;
  }
 }
 $2 = $$257 & 255; //@line 2471
 $3 = $2 << 1; //@line 2472
 $4 = $$260 << 24 >> 24 == 0; //@line 2473
 $$04962 = $1; //@line 2474
 $$461 = $0; //@line 2474
 $$shrunk = 0; //@line 2474
 while (1) {
  $42 = $$shrunk & 255; //@line 2476
  if ($$shrunk << 24 >> 24 != $$260 << 24 >> 24) {
   $57 = $$shrunk + 1 << 24 >> 24; //@line 2486
   HEAP32[$vararg_buffer >> 2] = (HEAPU8[$$461 >> 0] | 0) << 8 | (HEAPU8[$$461 + 1 >> 0] | 0); //@line 2487
   $59 = $$04962 + (_sprintf($$04962, 2750, $vararg_buffer) | 0) | 0; //@line 2489
   if ($57 << 24 >> 24 == 8) {
    $$049$be78 = $59; //@line 2492
    label = 9; //@line 2493
    break;
   }
   HEAP8[$59 >> 0] = 58; //@line 2498
   $$04962 = $59 + 1 | 0; //@line 2499
   $$461 = $$461 + 2 | 0; //@line 2499
   $$shrunk = $57; //@line 2499
   continue;
  }
  if ($4) {
   HEAP8[$$04962 >> 0] = 58; //@line 2504
   $$1 = $$04962 + 1 | 0; //@line 2505
  } else {
   $$1 = $$04962; //@line 2507
  }
  $45 = $$1 + 1 | 0; //@line 2509
  HEAP8[$$1 >> 0] = 58; //@line 2510
  $$shrunk = $42 + $2 & 255; //@line 2513
  if (($$shrunk & 255) >= 8) {
   $$049$be78 = $45; //@line 2518
   label = 9; //@line 2519
   break;
  } else {
   $$04962 = $45; //@line 2516
   $$461 = $$461 + $3 | 0; //@line 2516
  }
 }
 if ((label | 0) == 9) {
  HEAP8[$$049$be78 >> 0] = 0; //@line 2524
  STACKTOP = sp; //@line 2529
  return $$049$be78 - $1 & 255 | 0; //@line 2529
 }
 return 0; //@line 2531
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_121($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 3251
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3253
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3255
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3257
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3259
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3261
 if (!$AsyncRetVal) {
  $25 = 0 == 0; //@line 3264
  $26 = HEAP32[$2 >> 2] | 0; //@line 3265
  if (!$26) {
   if ($25) {
    $$06 = -3007; //@line 3269
    $31 = ___async_retval; //@line 3270
    HEAP32[$31 >> 2] = $$06; //@line 3271
    return;
   }
   $$06 = 0; //@line 3274
   $31 = ___async_retval; //@line 3275
   HEAP32[$31 >> 2] = $$06; //@line 3276
   return;
  } else {
   $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 3280
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 3281
   FUNCTION_TABLE_vi[$29 & 511]($6); //@line 3282
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 110; //@line 3285
    $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 3286
    $$expand_i1_val = $25 & 1; //@line 3287
    HEAP8[$30 >> 0] = $$expand_i1_val; //@line 3288
    sp = STACKTOP; //@line 3289
    return;
   }
   ___async_unwind = 0; //@line 3292
   HEAP32[$ReallocAsyncCtx6 >> 2] = 110; //@line 3293
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 3294
   $$expand_i1_val = $25 & 1; //@line 3295
   HEAP8[$30 >> 0] = $$expand_i1_val; //@line 3296
   sp = STACKTOP; //@line 3297
   return;
  }
 } else {
  $11 = HEAP32[$2 >> 2] | 0; //@line 3301
  if (!$11) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 3305
   _equeue_event_dtor($AsyncRetVal, 102); //@line 3306
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 3307
   $21 = _equeue_post($4, 103, $AsyncRetVal) | 0; //@line 3308
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 109; //@line 3311
    $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 3312
    HEAP32[$22 >> 2] = $2; //@line 3313
    $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 3314
    HEAP32[$23 >> 2] = $6; //@line 3315
    sp = STACKTOP; //@line 3316
    return;
   }
   HEAP32[___async_retval >> 2] = $21; //@line 3320
   ___async_unwind = 0; //@line 3321
   HEAP32[$ReallocAsyncCtx7 >> 2] = 109; //@line 3322
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 3323
   HEAP32[$22 >> 2] = $2; //@line 3324
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 3325
   HEAP32[$23 >> 2] = $6; //@line 3326
   sp = STACKTOP; //@line 3327
   return;
  } else {
   $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 3331
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 3332
   FUNCTION_TABLE_vii[$14 & 7]($AsyncRetVal, $6); //@line 3333
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 108; //@line 3336
    $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 3337
    HEAP32[$15 >> 2] = $8; //@line 3338
    $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 3339
    HEAP32[$16 >> 2] = $AsyncRetVal; //@line 3340
    $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 3341
    HEAP32[$17 >> 2] = $4; //@line 3342
    $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 3343
    HEAP32[$18 >> 2] = $2; //@line 3344
    $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 3345
    HEAP32[$19 >> 2] = $6; //@line 3346
    sp = STACKTOP; //@line 3347
    return;
   }
   ___async_unwind = 0; //@line 3350
   HEAP32[$ReallocAsyncCtx5 >> 2] = 108; //@line 3351
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 3352
   HEAP32[$15 >> 2] = $8; //@line 3353
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 3354
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 3355
   $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 3356
   HEAP32[$17 >> 2] = $4; //@line 3357
   $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 3358
   HEAP32[$18 >> 2] = $2; //@line 3359
   $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 3360
   HEAP32[$19 >> 2] = $6; //@line 3361
   sp = STACKTOP; //@line 3362
   return;
  }
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_36($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19028
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19030
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19032
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19034
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19036
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 19039
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19041
 $15 = $12 + 24 | 0; //@line 19044
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 19049
   if (!($18 & 2)) {
    $21 = $2 + 36 | 0; //@line 19053
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $2 + 54 | 0; //@line 19060
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 19071
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $6, $8, $10); //@line 19072
      if (!___async) {
       ___async_unwind = 0; //@line 19075
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 348; //@line 19077
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 19079
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 19081
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 19083
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 19085
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $2; //@line 19087
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $6; //@line 19089
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $8; //@line 19091
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $10 & 1; //@line 19094
      sp = STACKTOP; //@line 19095
      return;
     }
     $36 = $2 + 24 | 0; //@line 19098
     $37 = $2 + 54 | 0; //@line 19099
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 19114
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $6, $8, $10); //@line 19115
     if (!___async) {
      ___async_unwind = 0; //@line 19118
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 347; //@line 19120
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 19122
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 19124
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 19126
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 19128
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 19130
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $2; //@line 19132
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $6; //@line 19134
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $8; //@line 19136
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $10 & 1; //@line 19139
     sp = STACKTOP; //@line 19140
     return;
    }
   }
   $24 = $2 + 54 | 0; //@line 19144
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 19148
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $6, $8, $10); //@line 19149
    if (!___async) {
     ___async_unwind = 0; //@line 19152
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 346; //@line 19154
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 19156
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 19158
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 19160
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 19162
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $6; //@line 19164
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 19166
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $10 & 1; //@line 19169
    sp = STACKTOP; //@line 19170
    return;
   }
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14982
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14987
 } else {
  $9 = $1 + 52 | 0; //@line 14989
  $10 = HEAP8[$9 >> 0] | 0; //@line 14990
  $11 = $1 + 53 | 0; //@line 14991
  $12 = HEAP8[$11 >> 0] | 0; //@line 14992
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 14995
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 14996
  HEAP8[$9 >> 0] = 0; //@line 14997
  HEAP8[$11 >> 0] = 0; //@line 14998
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14999
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 15000
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 342; //@line 15003
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 15005
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15007
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15009
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 15011
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 15013
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 15015
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 15017
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 15019
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 15021
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 15023
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 15026
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 15028
   sp = STACKTOP; //@line 15029
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15032
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 15037
    $32 = $0 + 8 | 0; //@line 15038
    $33 = $1 + 54 | 0; //@line 15039
    $$0 = $0 + 24 | 0; //@line 15040
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 15073
     HEAP8[$11 >> 0] = 0; //@line 15074
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 15075
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 15076
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15081
     $62 = $$0 + 8 | 0; //@line 15082
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 15085
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 343; //@line 15090
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 15092
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 15094
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 15096
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 15098
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 15100
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 15102
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 15104
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 15106
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 15108
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 15110
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 15112
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 15114
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 15116
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 15119
    sp = STACKTOP; //@line 15120
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 15124
  HEAP8[$11 >> 0] = $12; //@line 15125
 }
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16360
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16364
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16366
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16368
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16370
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16372
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16374
 $15 = $4 + 12 | 0; //@line 16376
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16377
 $16 = $6 + 12 | 0; //@line 16378
 $17 = HEAP32[$16 >> 2] | 0; //@line 16379
 if (!$17) {
  $28 = $8 + 12 | 0; //@line 16382
  HEAP32[$28 >> 2] = 0; //@line 16383
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 16384
  $29 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($10, $12, $4, 0, $8, $14) | 0; //@line 16385
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 154; //@line 16388
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 16389
   HEAP32[$30 >> 2] = $28; //@line 16390
   $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 16391
   HEAP32[$31 >> 2] = $15; //@line 16392
   $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 16393
   HEAP32[$32 >> 2] = $8; //@line 16394
   $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 16395
   HEAP32[$33 >> 2] = $4; //@line 16396
   sp = STACKTOP; //@line 16397
   return;
  }
  HEAP32[___async_retval >> 2] = $29; //@line 16401
  ___async_unwind = 0; //@line 16402
  HEAP32[$ReallocAsyncCtx5 >> 2] = 154; //@line 16403
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 16404
  HEAP32[$30 >> 2] = $28; //@line 16405
  $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 16406
  HEAP32[$31 >> 2] = $15; //@line 16407
  $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 16408
  HEAP32[$32 >> 2] = $8; //@line 16409
  $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 16410
  HEAP32[$33 >> 2] = $4; //@line 16411
  sp = STACKTOP; //@line 16412
  return;
 } else {
  $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 16416
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 16417
  FUNCTION_TABLE_vii[$20 & 7]($8, $6); //@line 16418
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 153; //@line 16421
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 16422
   HEAP32[$21 >> 2] = $16; //@line 16423
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 16424
   HEAP32[$22 >> 2] = $8; //@line 16425
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 16426
   HEAP32[$23 >> 2] = $10; //@line 16427
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 16428
   HEAP32[$24 >> 2] = $12; //@line 16429
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 16430
   HEAP32[$25 >> 2] = $4; //@line 16431
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 16432
   HEAP32[$26 >> 2] = $14; //@line 16433
   $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 16434
   HEAP32[$27 >> 2] = $15; //@line 16435
   sp = STACKTOP; //@line 16436
   return;
  }
  ___async_unwind = 0; //@line 16439
  HEAP32[$ReallocAsyncCtx2 >> 2] = 153; //@line 16440
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 16441
  HEAP32[$21 >> 2] = $16; //@line 16442
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 16443
  HEAP32[$22 >> 2] = $8; //@line 16444
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 16445
  HEAP32[$23 >> 2] = $10; //@line 16446
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 16447
  HEAP32[$24 >> 2] = $12; //@line 16448
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 16449
  HEAP32[$25 >> 2] = $4; //@line 16450
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 16451
  HEAP32[$26 >> 2] = $14; //@line 16452
  $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 16453
  HEAP32[$27 >> 2] = $15; //@line 16454
  sp = STACKTOP; //@line 16455
  return;
 }
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11057
      $10 = HEAP32[$9 >> 2] | 0; //@line 11058
      HEAP32[$2 >> 2] = $9 + 4; //@line 11060
      HEAP32[$0 >> 2] = $10; //@line 11061
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11077
      $17 = HEAP32[$16 >> 2] | 0; //@line 11078
      HEAP32[$2 >> 2] = $16 + 4; //@line 11080
      $20 = $0; //@line 11083
      HEAP32[$20 >> 2] = $17; //@line 11085
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 11088
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11104
      $30 = HEAP32[$29 >> 2] | 0; //@line 11105
      HEAP32[$2 >> 2] = $29 + 4; //@line 11107
      $31 = $0; //@line 11108
      HEAP32[$31 >> 2] = $30; //@line 11110
      HEAP32[$31 + 4 >> 2] = 0; //@line 11113
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11129
      $41 = $40; //@line 11130
      $43 = HEAP32[$41 >> 2] | 0; //@line 11132
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 11135
      HEAP32[$2 >> 2] = $40 + 8; //@line 11137
      $47 = $0; //@line 11138
      HEAP32[$47 >> 2] = $43; //@line 11140
      HEAP32[$47 + 4 >> 2] = $46; //@line 11143
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11159
      $57 = HEAP32[$56 >> 2] | 0; //@line 11160
      HEAP32[$2 >> 2] = $56 + 4; //@line 11162
      $59 = ($57 & 65535) << 16 >> 16; //@line 11164
      $62 = $0; //@line 11167
      HEAP32[$62 >> 2] = $59; //@line 11169
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 11172
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11188
      $72 = HEAP32[$71 >> 2] | 0; //@line 11189
      HEAP32[$2 >> 2] = $71 + 4; //@line 11191
      $73 = $0; //@line 11193
      HEAP32[$73 >> 2] = $72 & 65535; //@line 11195
      HEAP32[$73 + 4 >> 2] = 0; //@line 11198
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11214
      $83 = HEAP32[$82 >> 2] | 0; //@line 11215
      HEAP32[$2 >> 2] = $82 + 4; //@line 11217
      $85 = ($83 & 255) << 24 >> 24; //@line 11219
      $88 = $0; //@line 11222
      HEAP32[$88 >> 2] = $85; //@line 11224
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 11227
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11243
      $98 = HEAP32[$97 >> 2] | 0; //@line 11244
      HEAP32[$2 >> 2] = $97 + 4; //@line 11246
      $99 = $0; //@line 11248
      HEAP32[$99 >> 2] = $98 & 255; //@line 11250
      HEAP32[$99 + 4 >> 2] = 0; //@line 11253
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11269
      $109 = +HEAPF64[$108 >> 3]; //@line 11270
      HEAP32[$2 >> 2] = $108 + 8; //@line 11272
      HEAPF64[$0 >> 3] = $109; //@line 11273
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11289
      $116 = +HEAPF64[$115 >> 3]; //@line 11290
      HEAP32[$2 >> 2] = $115 + 8; //@line 11292
      HEAPF64[$0 >> 3] = $116; //@line 11293
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$2 = 0, $$pr = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $27 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $54 = 0, $59 = 0, $61 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $75 = 0, $80 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6763
 if (!$2) {
  return;
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, HEAP32[$1 >> 2] | 0, 0) | 0)) {
  return;
 }
 $7 = HEAP32[1682] | 0; //@line 6774
 if (!$7) {
  $$2 = 0; //@line 6777
 } else {
  $10 = $7 + 32 | 0; //@line 6780
  $12 = HEAP32[$10 >> 2] | 0; //@line 6782
  $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 6785
  $16 = HEAP32[1683] | 0; //@line 6786
  if (!$16) {
   $$2 = 1; //@line 6789
  } else {
   $59 = $16 + 32 | 0; //@line 6792
   $61 = HEAP32[$59 >> 2] | 0; //@line 6794
   $64 = HEAP32[$59 + 4 >> 2] | 0; //@line 6797
   $69 = $64 >>> 0 > $15 >>> 0 | ($64 | 0) == ($15 | 0) & $61 >>> 0 > $12 >>> 0; //@line 6802
   $70 = HEAP32[1684] | 0; //@line 6803
   if (!$70) {
    $$2 = 2; //@line 6806
   } else {
    $73 = $69 ? $15 : $64; //@line 6811
    $75 = $70 + 32 | 0; //@line 6813
    $80 = HEAP32[$75 + 4 >> 2] | 0; //@line 6818
    $$2 = $80 >>> 0 > $73 >>> 0 | (($80 | 0) == ($73 | 0) ? (HEAP32[$75 >> 2] | 0) >>> 0 > ($69 ? $12 : $61) >>> 0 : 0) ? ($69 ^ 1) & 1 : 2; //@line 6825
   }
  }
 }
 $18 = 6728 + ($$2 << 2) | 0; //@line 6829
 $19 = HEAP32[$18 >> 2] | 0; //@line 6830
 do {
  if (!$19) {
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6834
   $21 = __ZnwjRKSt9nothrow_t(40, 8661) | 0; //@line 6835
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 149; //@line 6838
    HEAP32[$AsyncCtx + 4 >> 2] = $18; //@line 6840
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6842
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6844
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6846
    sp = STACKTOP; //@line 6847
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6850
    HEAP32[$18 >> 2] = $21; //@line 6851
    $30 = $21; //@line 6852
    $31 = $21; //@line 6852
    break;
   }
  } else {
   $27 = HEAP32[$19 + 20 >> 2] | 0; //@line 6857
   if (!$27) {
    $$pr = $19; //@line 6860
   } else {
    __ZdlPv($27); //@line 6862
    $$pr = HEAP32[$18 >> 2] | 0; //@line 6864
   }
   $30 = $$pr; //@line 6866
   $31 = $$pr; //@line 6866
  }
 } while (0);
 if (!$30) {
  return;
 }
 HEAP32[$31 >> 2] = HEAP32[$1 >> 2]; //@line 6873
 HEAP32[$31 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6873
 HEAP32[$31 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6873
 HEAP32[$31 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6873
 HEAP32[$31 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 6873
 $33 = (_strlen($0) | 0) + 1 | 0; //@line 6875
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6876
 $34 = __ZnajRKSt9nothrow_t($33, 8661) | 0; //@line 6877
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 150; //@line 6880
  HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 6882
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 6884
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 6886
  HEAP32[$AsyncCtx3 + 16 >> 2] = $18; //@line 6888
  sp = STACKTOP; //@line 6889
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6892
 HEAP32[$30 + 20 >> 2] = $34; //@line 6894
 _strcpy($34, $0) | 0; //@line 6895
 $40 = _emscripten_asm_const_i(9) | 0; //@line 6896
 $42 = (($40 | 0) < 0) << 31 >> 31; //@line 6898
 $43 = ___muldi3($2 | 0, 0, 1e3, 0) | 0; //@line 6899
 $45 = _i64Add($43 | 0, tempRet0 | 0, $40 | 0, $42 | 0) | 0; //@line 6901
 $47 = HEAP32[$18 >> 2] | 0; //@line 6903
 $49 = $47 + 24 | 0; //@line 6905
 HEAP32[$49 >> 2] = $45; //@line 6907
 HEAP32[$49 + 4 >> 2] = tempRet0; //@line 6910
 $54 = $47 + 32 | 0; //@line 6912
 HEAP32[$54 >> 2] = $40; //@line 6914
 HEAP32[$54 + 4 >> 2] = $42; //@line 6917
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 9957
 STACKTOP = STACKTOP + 224 | 0; //@line 9958
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 9958
 $3 = sp + 120 | 0; //@line 9959
 $4 = sp + 80 | 0; //@line 9960
 $5 = sp; //@line 9961
 $6 = sp + 136 | 0; //@line 9962
 dest = $4; //@line 9963
 stop = dest + 40 | 0; //@line 9963
 do {
  HEAP32[dest >> 2] = 0; //@line 9963
  dest = dest + 4 | 0; //@line 9963
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 9965
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 9969
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 9976
  } else {
   $43 = 0; //@line 9978
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 9980
  $14 = $13 & 32; //@line 9981
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 9987
  }
  $19 = $0 + 48 | 0; //@line 9989
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 9994
    $24 = HEAP32[$23 >> 2] | 0; //@line 9995
    HEAP32[$23 >> 2] = $6; //@line 9996
    $25 = $0 + 28 | 0; //@line 9997
    HEAP32[$25 >> 2] = $6; //@line 9998
    $26 = $0 + 20 | 0; //@line 9999
    HEAP32[$26 >> 2] = $6; //@line 10000
    HEAP32[$19 >> 2] = 80; //@line 10001
    $28 = $0 + 16 | 0; //@line 10003
    HEAP32[$28 >> 2] = $6 + 80; //@line 10004
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 10005
    if (!$24) {
     $$1 = $29; //@line 10008
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 10011
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 10012
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 10013
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 315; //@line 10016
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 10018
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 10020
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 10022
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 10024
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 10026
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 10028
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 10030
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 10032
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 10034
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 10036
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 10038
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 10040
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 10042
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 10044
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 10046
      sp = STACKTOP; //@line 10047
      STACKTOP = sp; //@line 10048
      return 0; //@line 10048
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10050
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 10053
      HEAP32[$23 >> 2] = $24; //@line 10054
      HEAP32[$19 >> 2] = 0; //@line 10055
      HEAP32[$28 >> 2] = 0; //@line 10056
      HEAP32[$25 >> 2] = 0; //@line 10057
      HEAP32[$26 >> 2] = 0; //@line 10058
      $$1 = $$; //@line 10059
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 10065
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 10068
  HEAP32[$0 >> 2] = $51 | $14; //@line 10073
  if ($43 | 0) {
   ___unlockfile($0); //@line 10076
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 10078
 }
 STACKTOP = sp; //@line 10080
 return $$0 | 0; //@line 10080
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_202($0) {
 $0 = $0 | 0;
 var $$pre74 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 12896
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12898
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12900
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12902
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12904
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12906
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12908
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12910
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12912
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12914
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12916
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12918
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12920
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12922
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12924
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12926
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 12928
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 12930
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 12932
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 12934
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 12936
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 12938
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 12940
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 12942
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 12944
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 12946
 $$pre74 = HEAP32[$8 >> 2] | 0; //@line 12950
 HEAP32[$36 >> 2] = HEAP32[HEAP32[$0 + 104 >> 2] >> 2]; //@line 12951
 $53 = HEAP32[$$pre74 >> 2] | 0; //@line 12952
 HEAP32[$38 >> 2] = 0; //@line 12953
 HEAP32[$40 >> 2] = 180; //@line 12954
 HEAP32[$42 >> 2] = $53; //@line 12955
 HEAP32[$6 >> 2] = 724; //@line 12956
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 12957
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 12958
 if (!___async) {
  ___async_unwind = 0; //@line 12961
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 12963
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 12965
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $4; //@line 12967
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $6; //@line 12969
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $8; //@line 12971
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $10; //@line 12973
 HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $12; //@line 12975
 HEAP32[$ReallocAsyncCtx13 + 28 >> 2] = $14; //@line 12977
 HEAP32[$ReallocAsyncCtx13 + 32 >> 2] = $16; //@line 12979
 HEAP32[$ReallocAsyncCtx13 + 36 >> 2] = $18; //@line 12981
 HEAP32[$ReallocAsyncCtx13 + 40 >> 2] = $20; //@line 12983
 HEAP32[$ReallocAsyncCtx13 + 44 >> 2] = $22; //@line 12985
 HEAP32[$ReallocAsyncCtx13 + 48 >> 2] = $24; //@line 12987
 HEAP32[$ReallocAsyncCtx13 + 52 >> 2] = $26; //@line 12989
 HEAP32[$ReallocAsyncCtx13 + 56 >> 2] = $28; //@line 12991
 HEAP32[$ReallocAsyncCtx13 + 60 >> 2] = $30; //@line 12993
 HEAP32[$ReallocAsyncCtx13 + 64 >> 2] = $32; //@line 12995
 HEAP32[$ReallocAsyncCtx13 + 68 >> 2] = $34; //@line 12997
 HEAP32[$ReallocAsyncCtx13 + 72 >> 2] = $36; //@line 12999
 HEAP32[$ReallocAsyncCtx13 + 76 >> 2] = $38; //@line 13001
 HEAP32[$ReallocAsyncCtx13 + 80 >> 2] = $40; //@line 13003
 HEAP32[$ReallocAsyncCtx13 + 84 >> 2] = $42; //@line 13005
 HEAP32[$ReallocAsyncCtx13 + 88 >> 2] = $44; //@line 13007
 HEAP32[$ReallocAsyncCtx13 + 92 >> 2] = $46; //@line 13009
 HEAP32[$ReallocAsyncCtx13 + 96 >> 2] = $48; //@line 13011
 HEAP32[$ReallocAsyncCtx13 + 100 >> 2] = $50; //@line 13013
 sp = STACKTOP; //@line 13014
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 11013
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11015
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11017
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11019
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11021
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11023
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11025
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11027
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11029
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11031
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11033
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11035
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11037
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11039
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11041
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11043
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11045
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11047
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11049
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11051
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 11053
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 11055
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 11057
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 11059
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 11061
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 11063
 $$pre = HEAP32[$8 >> 2] | 0; //@line 11067
 HEAP32[$16 >> 2] = HEAP32[HEAP32[$0 + 104 >> 2] >> 2]; //@line 11068
 $53 = HEAP32[$$pre >> 2] | 0; //@line 11069
 HEAP32[$18 >> 2] = 0; //@line 11070
 HEAP32[$20 >> 2] = 175; //@line 11071
 HEAP32[$22 >> 2] = $53; //@line 11072
 HEAP32[$24 >> 2] = 724; //@line 11073
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 11074
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($26, 0, $28) | 0; //@line 11075
 if (!___async) {
  ___async_unwind = 0; //@line 11078
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 11080
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 11082
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 11084
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $6; //@line 11086
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $8; //@line 11088
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $10; //@line 11090
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $12; //@line 11092
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $14; //@line 11094
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $16; //@line 11096
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $18; //@line 11098
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $20; //@line 11100
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $22; //@line 11102
 HEAP32[$ReallocAsyncCtx14 + 48 >> 2] = $24; //@line 11104
 HEAP32[$ReallocAsyncCtx14 + 52 >> 2] = $26; //@line 11106
 HEAP32[$ReallocAsyncCtx14 + 56 >> 2] = $28; //@line 11108
 HEAP32[$ReallocAsyncCtx14 + 60 >> 2] = $30; //@line 11110
 HEAP32[$ReallocAsyncCtx14 + 64 >> 2] = $32; //@line 11112
 HEAP32[$ReallocAsyncCtx14 + 68 >> 2] = $34; //@line 11114
 HEAP32[$ReallocAsyncCtx14 + 72 >> 2] = $36; //@line 11116
 HEAP32[$ReallocAsyncCtx14 + 76 >> 2] = $38; //@line 11118
 HEAP32[$ReallocAsyncCtx14 + 80 >> 2] = $40; //@line 11120
 HEAP32[$ReallocAsyncCtx14 + 84 >> 2] = $42; //@line 11122
 HEAP32[$ReallocAsyncCtx14 + 88 >> 2] = $44; //@line 11124
 HEAP32[$ReallocAsyncCtx14 + 92 >> 2] = $46; //@line 11126
 HEAP32[$ReallocAsyncCtx14 + 96 >> 2] = $48; //@line 11128
 HEAP32[$ReallocAsyncCtx14 + 100 >> 2] = $50; //@line 11130
 sp = STACKTOP; //@line 11131
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_170($0) {
 $0 = $0 | 0;
 var $$051 = 0, $$byval_copy11 = 0, $$pre = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 6358
 STACKTOP = STACKTOP + 32 | 0; //@line 6359
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6359
 $$byval_copy11 = sp; //@line 6360
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6362
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6364
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6366
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6368
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6372
 if (!$AsyncRetVal) {
  $27 = 0; //@line 6375
 } else {
  $13 = $AsyncRetVal + (HEAP32[$0 + 20 >> 2] << 6) | 0; //@line 6377
  $14 = $AsyncRetVal; //@line 6378
  do {
   HEAP32[$8 >> 2] = 0; //@line 6380
   HEAP32[$8 + 4 >> 2] = 0; //@line 6380
   HEAP32[$8 + 8 >> 2] = 0; //@line 6380
   HEAP32[$8 + 12 >> 2] = 0; //@line 6380
   HEAP32[$8 + 16 >> 2] = 0; //@line 6380
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$8 >> 2]; //@line 6381
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 6381
   HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 6381
   HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$8 + 12 >> 2]; //@line 6381
   HEAP32[$$byval_copy11 + 16 >> 2] = HEAP32[$8 + 16 >> 2]; //@line 6381
   __ZN13SocketAddressC2E10nsapi_addrt($14, $$byval_copy11, 0); //@line 6382
   $14 = $14 + 64 | 0; //@line 6383
  } while (($14 | 0) != ($13 | 0));
  $27 = $AsyncRetVal; //@line 6386
 }
 $$pre = $4 + 64 | 0; //@line 6395
 if (HEAP8[$6 >> 0] | 0) {
  $$051 = 0; //@line 6397
  do {
   $29 = $27 + ($$051 << 6) | 0; //@line 6399
   $31 = (HEAP32[$$pre >> 2] | 0) + ($$051 * 20 | 0) | 0; //@line 6401
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$31 >> 2]; //@line 6402
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 6402
   HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$31 + 8 >> 2]; //@line 6402
   HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$31 + 12 >> 2]; //@line 6402
   HEAP32[$$byval_copy11 + 16 >> 2] = HEAP32[$31 + 16 >> 2]; //@line 6402
   __ZN13SocketAddress8set_addrE10nsapi_addr($29, $$byval_copy11); //@line 6403
   $$051 = $$051 + 1 | 0; //@line 6404
  } while (($$051 | 0) < (HEAPU8[$6 >> 0] | 0));
 }
 $20 = HEAP32[$4 + 12 >> 2] | 0; //@line 6416
 $21 = HEAP32[$$pre >> 2] | 0; //@line 6417
 $23 = HEAP32[$4 + 68 >> 2] | 0; //@line 6419
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 6420
 __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($20, $21, $23); //@line 6421
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 251; //@line 6424
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 6425
  HEAP32[$24 >> 2] = $2; //@line 6426
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 6427
  HEAP32[$25 >> 2] = $4; //@line 6428
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 6429
  HEAP32[$26 >> 2] = $27; //@line 6430
  $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 6431
  HEAP32[$28 >> 2] = $6; //@line 6432
  sp = STACKTOP; //@line 6433
  STACKTOP = sp; //@line 6434
  return;
 }
 ___async_unwind = 0; //@line 6436
 HEAP32[$ReallocAsyncCtx4 >> 2] = 251; //@line 6437
 $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 6438
 HEAP32[$24 >> 2] = $2; //@line 6439
 $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 6440
 HEAP32[$25 >> 2] = $4; //@line 6441
 $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 6442
 HEAP32[$26 >> 2] = $27; //@line 6443
 $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 6444
 HEAP32[$28 >> 2] = $6; //@line 6445
 sp = STACKTOP; //@line 6446
 STACKTOP = sp; //@line 6447
 return;
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14517
 STACKTOP = STACKTOP + 64 | 0; //@line 14518
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14518
 $4 = sp; //@line 14519
 $5 = HEAP32[$0 >> 2] | 0; //@line 14520
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 14523
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 14525
 HEAP32[$4 >> 2] = $2; //@line 14526
 HEAP32[$4 + 4 >> 2] = $0; //@line 14528
 HEAP32[$4 + 8 >> 2] = $1; //@line 14530
 HEAP32[$4 + 12 >> 2] = $3; //@line 14532
 $14 = $4 + 16 | 0; //@line 14533
 $15 = $4 + 20 | 0; //@line 14534
 $16 = $4 + 24 | 0; //@line 14535
 $17 = $4 + 28 | 0; //@line 14536
 $18 = $4 + 32 | 0; //@line 14537
 $19 = $4 + 40 | 0; //@line 14538
 dest = $14; //@line 14539
 stop = dest + 36 | 0; //@line 14539
 do {
  HEAP32[dest >> 2] = 0; //@line 14539
  dest = dest + 4 | 0; //@line 14539
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 14539
 HEAP8[$14 + 38 >> 0] = 0; //@line 14539
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 14544
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 14547
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14548
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 14549
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 334; //@line 14552
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 14554
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 14556
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 14558
    sp = STACKTOP; //@line 14559
    STACKTOP = sp; //@line 14560
    return 0; //@line 14560
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14562
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 14566
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 14570
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 14573
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14574
   FUNCTION_TABLE_viiiii[$33 & 3]($10, $4, $8, 1, 0); //@line 14575
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 335; //@line 14578
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 14580
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 14582
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 14584
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 14586
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 14588
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 14590
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 14592
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 14594
    sp = STACKTOP; //@line 14595
    STACKTOP = sp; //@line 14596
    return 0; //@line 14596
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14598
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 14612
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 14620
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 14636
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 14641
  }
 } while (0);
 STACKTOP = sp; //@line 14644
 return $$0 | 0; //@line 14644
}
function __ZN9UDPSocket6sendtoEPKctPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5246
 STACKTOP = STACKTOP + 112 | 0; //@line 5247
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 5247
 $$byval_copy = sp + 88 | 0; //@line 5248
 $5 = sp + 24 | 0; //@line 5249
 $6 = sp; //@line 5250
 HEAP32[$6 >> 2] = 0; //@line 5251
 HEAP32[$6 + 4 >> 2] = 0; //@line 5251
 HEAP32[$6 + 8 >> 2] = 0; //@line 5251
 HEAP32[$6 + 12 >> 2] = 0; //@line 5251
 HEAP32[$6 + 16 >> 2] = 0; //@line 5251
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 5252
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 5252
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 5252
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 5252
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 5252
 __ZN13SocketAddressC2E10nsapi_addrt($5, $$byval_copy, 0); //@line 5253
 $7 = $0 + 4 | 0; //@line 5254
 $8 = HEAP32[$7 >> 2] | 0; //@line 5255
 $10 = HEAP32[HEAP32[$8 >> 2] >> 2] | 0; //@line 5257
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5258
 $11 = FUNCTION_TABLE_iiiii[$10 & 15]($8, $1, $5, 0) | 0; //@line 5259
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 138; //@line 5262
  HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 5264
  HEAP16[$AsyncCtx + 8 >> 1] = $2; //@line 5266
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5268
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 5270
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 5272
  HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 5274
  HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 5276
  sp = STACKTOP; //@line 5277
  STACKTOP = sp; //@line 5278
  return 0; //@line 5278
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5280
 if ($11 | 0) {
  $$0 = -3009; //@line 5283
  STACKTOP = sp; //@line 5284
  return $$0 | 0; //@line 5284
 }
 __ZN13SocketAddress8set_portEt($5, $2); //@line 5286
 $20 = $0 + 8 | 0; //@line 5287
 $21 = $0 + 52 | 0; //@line 5288
 $22 = $0 + 12 | 0; //@line 5289
 while (1) {
  $23 = HEAP32[$20 >> 2] | 0; //@line 5291
  if (!$23) {
   $$0 = -3005; //@line 5294
   label = 9; //@line 5295
   break;
  }
  HEAP32[$21 >> 2] = 0; //@line 5298
  $25 = HEAP32[$7 >> 2] | 0; //@line 5299
  $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 76 >> 2] | 0; //@line 5302
  $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5303
  $29 = FUNCTION_TABLE_iiiiii[$28 & 7]($25, $23, $5, $3, $4) | 0; //@line 5304
  if (___async) {
   label = 7; //@line 5307
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5310
  if (($29 | 0) != -3001 | (HEAP32[$22 >> 2] | 0) == 0) {
   $$0 = $29; //@line 5316
   label = 9; //@line 5317
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx3 >> 2] = 139; //@line 5322
  HEAP32[$AsyncCtx3 + 4 >> 2] = $22; //@line 5324
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 5326
  HEAP32[$AsyncCtx3 + 12 >> 2] = $20; //@line 5328
  HEAP32[$AsyncCtx3 + 16 >> 2] = $21; //@line 5330
  HEAP32[$AsyncCtx3 + 20 >> 2] = $7; //@line 5332
  HEAP32[$AsyncCtx3 + 24 >> 2] = $5; //@line 5334
  HEAP32[$AsyncCtx3 + 28 >> 2] = $3; //@line 5336
  HEAP32[$AsyncCtx3 + 32 >> 2] = $4; //@line 5338
  sp = STACKTOP; //@line 5339
  STACKTOP = sp; //@line 5340
  return 0; //@line 5340
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 5343
  return $$0 | 0; //@line 5343
 }
 return 0; //@line 5345
}
function _main__async_cb_175($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 6714
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6716
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6718
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6720
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6722
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6724
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6726
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6728
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6730
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6732
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6734
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6736
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6738
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6740
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6742
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6744
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6746
 if (($AsyncRetVal | 0) == 4) {
  HEAP32[$24 >> 2] = (_llvm_bswap_i32(HEAP32[$22 >> 2] | 0) | 0) + 2085978496; //@line 6752
  HEAP32[$26 >> 2] = _ctime($24 | 0) | 0; //@line 6754
  _printf(3191, $26) | 0; //@line 6755
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(64) | 0; //@line 6756
  __ZN6Socket5closeEv($30) | 0; //@line 6757
  if (!___async) {
   ___async_unwind = 0; //@line 6760
  }
  HEAP32[$ReallocAsyncCtx7 >> 2] = 301; //@line 6762
  HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 6764
  HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 6766
  HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 6768
  HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 6770
  HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 6772
  HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 6774
  HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 6776
  HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 6778
  HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 6780
  HEAP32[$ReallocAsyncCtx7 + 40 >> 2] = $20; //@line 6782
  HEAP32[$ReallocAsyncCtx7 + 44 >> 2] = $22; //@line 6784
  HEAP32[$ReallocAsyncCtx7 + 48 >> 2] = $24; //@line 6786
  HEAP32[$ReallocAsyncCtx7 + 52 >> 2] = $26; //@line 6788
  HEAP32[$ReallocAsyncCtx7 + 56 >> 2] = $28; //@line 6790
  HEAP32[$ReallocAsyncCtx7 + 60 >> 2] = $30; //@line 6792
  sp = STACKTOP; //@line 6793
  return;
 } else {
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 6796
  _printf(3169, $16) | 0; //@line 6797
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(64) | 0; //@line 6798
  _wait_ms(1e4); //@line 6799
  if (!___async) {
   ___async_unwind = 0; //@line 6802
  }
  HEAP32[$ReallocAsyncCtx9 >> 2] = 300; //@line 6804
  HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 6806
  HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 6808
  HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $6; //@line 6810
  HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 6812
  HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $10; //@line 6814
  HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $12; //@line 6816
  HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $14; //@line 6818
  HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $16; //@line 6820
  HEAP32[$ReallocAsyncCtx9 + 36 >> 2] = $18; //@line 6822
  HEAP32[$ReallocAsyncCtx9 + 40 >> 2] = $20; //@line 6824
  HEAP32[$ReallocAsyncCtx9 + 44 >> 2] = $22; //@line 6826
  HEAP32[$ReallocAsyncCtx9 + 48 >> 2] = $24; //@line 6828
  HEAP32[$ReallocAsyncCtx9 + 52 >> 2] = $26; //@line 6830
  HEAP32[$ReallocAsyncCtx9 + 56 >> 2] = $28; //@line 6832
  HEAP32[$ReallocAsyncCtx9 + 60 >> 2] = $30; //@line 6834
  sp = STACKTOP; //@line 6835
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_192($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9787
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9789
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9791
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9793
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9798
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9800
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9802
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9804
 if (HEAP8[$0 + 16 >> 0] & 1) {
  HEAP8[7620] = 1; //@line 9806
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 9807
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9808
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 9811
   $33 = $ReallocAsyncCtx13 + 4 | 0; //@line 9812
   HEAP32[$33 >> 2] = $2; //@line 9813
   $34 = $ReallocAsyncCtx13 + 8 | 0; //@line 9814
   HEAP32[$34 >> 2] = $4; //@line 9815
   sp = STACKTOP; //@line 9816
   return;
  }
  ___async_unwind = 0; //@line 9819
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 9820
  $33 = $ReallocAsyncCtx13 + 4 | 0; //@line 9821
  HEAP32[$33 >> 2] = $2; //@line 9822
  $34 = $ReallocAsyncCtx13 + 8 | 0; //@line 9823
  HEAP32[$34 >> 2] = $4; //@line 9824
  sp = STACKTOP; //@line 9825
  return;
 }
 $17 = HEAP32[$6 >> 2] | 0; //@line 9828
 if ($17 | 0) {
  __ZdlPv($17); //@line 9831
 }
 $19 = HEAP32[$16 >> 2] | 0; //@line 9833
 if ($19 | 0) {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 9837
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 9838
  FUNCTION_TABLE_vi[$22 & 511]($14); //@line 9839
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 169; //@line 9842
   $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 9843
   HEAP32[$23 >> 2] = $12; //@line 9844
   $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 9845
   HEAP32[$24 >> 2] = $10; //@line 9846
   $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 9847
   HEAP32[$25 >> 2] = $4; //@line 9848
   sp = STACKTOP; //@line 9849
   return;
  }
  ___async_unwind = 0; //@line 9852
  HEAP32[$ReallocAsyncCtx9 >> 2] = 169; //@line 9853
  $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 9854
  HEAP32[$23 >> 2] = $12; //@line 9855
  $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 9856
  HEAP32[$24 >> 2] = $10; //@line 9857
  $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 9858
  HEAP32[$25 >> 2] = $4; //@line 9859
  sp = STACKTOP; //@line 9860
  return;
 }
 $27 = HEAP32[$12 + 28 >> 2] | 0; //@line 9864
 if (!$27) {
  __ZdlPv($12); //@line 9867
  HEAP32[___async_retval >> 2] = -3007; //@line 9869
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 9873
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 9874
 FUNCTION_TABLE_vi[$30 & 511]($10); //@line 9875
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 9878
  $31 = $ReallocAsyncCtx10 + 4 | 0; //@line 9879
  HEAP32[$31 >> 2] = $12; //@line 9880
  $32 = $ReallocAsyncCtx10 + 8 | 0; //@line 9881
  HEAP32[$32 >> 2] = $4; //@line 9882
  sp = STACKTOP; //@line 9883
  return;
 }
 ___async_unwind = 0; //@line 9886
 HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 9887
 $31 = $ReallocAsyncCtx10 + 4 | 0; //@line 9888
 HEAP32[$31 >> 2] = $12; //@line 9889
 $32 = $ReallocAsyncCtx10 + 8 | 0; //@line 9890
 HEAP32[$32 >> 2] = $4; //@line 9891
 sp = STACKTOP; //@line 9892
 return;
}
function _stoip6($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$0$lcssa6667 = 0, $$015$i = 0, $$016$i = 0, $$04857 = 0, $$049 = 0, $$050$lcssa = 0, $$05056 = 0, $$052$lcssa = 0, $$052$lcssa6568 = 0, $$05255 = 0, $$058 = 0, $$1 = 0, $$151 = 0, $$sink18$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $6 = 0, $9 = 0;
 if ($1 >>> 0 > 39) {
  return;
 }
 $4 = $0; //@line 2546
 do {
  if (!$1) {
   $$0$lcssa6667 = $2; //@line 2550
   $$052$lcssa6568 = 0; //@line 2550
  } else {
   $$04857 = $0; //@line 2552
   $$05056 = -1; //@line 2552
   $$05255 = 0; //@line 2552
   $$058 = $2; //@line 2552
   while (1) {
    $6 = HEAP8[$$04857 >> 0] | 0; //@line 2554
    if ($$05255 << 24 >> 24 < 8 & $6 << 24 >> 24 != 0) {
     $$049 = $$04857; //@line 2559
     $9 = $6; //@line 2559
    } else {
     $$0$lcssa = $$058; //@line 2561
     $$050$lcssa = $$05056; //@line 2561
     $$052$lcssa = $$05255; //@line 2561
     break;
    }
    L7 : while (1) {
     switch ($9 << 24 >> 24) {
     case 58:
     case 0:
      {
       $$015$i = $$04857; //@line 2567
       $$016$i = 0; //@line 2567
       $13 = $6; //@line 2567
       break L7;
       break;
      }
     default:
      {}
     }
     $10 = $$049 + 1 | 0; //@line 2574
     $$049 = $10; //@line 2576
     $9 = HEAP8[$10 >> 0] | 0; //@line 2576
    }
    while (1) {
     $11 = $$015$i + 1 | 0; //@line 2579
     $12 = $13 << 24 >> 24; //@line 2580
     if (($13 + -48 & 255) < 10) {
      $$sink18$i = -48; //@line 2584
     } else {
      if (($13 + -65 & 255) < 6) {
       $$sink18$i = -55; //@line 2589
      } else {
       if (($13 + -97 & 255) < 6) {
        $$sink18$i = 65449; //@line 2594
       } else {
        break;
       }
      }
     }
     $$015$i = $11; //@line 2606
     $$016$i = ($$sink18$i + $12 | ($$016$i & 65535) << 4) & 65535; //@line 2606
     $13 = HEAP8[$11 >> 0] | 0; //@line 2606
    }
    $21 = _common_write_16_bit($$016$i, $$058) | 0; //@line 2608
    $22 = $$05255 + 1 << 24 >> 24; //@line 2609
    if (($$049 - $4 | 0) >>> 0 < $1 >>> 0) {
     if ((HEAP8[$$049 >> 0] | 0) == 58) {
      $27 = $$049 + 1 | 0; //@line 2617
      $29 = (HEAP8[$27 >> 0] | 0) == 58; //@line 2619
      $$1 = $29 ? $27 : $$049; //@line 2622
      $$151 = $29 ? $22 : $$05056; //@line 2622
     } else {
      $$1 = $$049; //@line 2624
      $$151 = $$05056; //@line 2624
     }
    } else {
     $$1 = $$049; //@line 2627
     $$151 = $$05056; //@line 2627
    }
    $$04857 = $$1 + 1 | 0; //@line 2629
    if (($$04857 - $4 | 0) >>> 0 >= $1 >>> 0) {
     $$0$lcssa = $21; //@line 2636
     $$050$lcssa = $$151; //@line 2636
     $$052$lcssa = $22; //@line 2636
     break;
    } else {
     $$05056 = $$151; //@line 2634
     $$05255 = $22; //@line 2634
     $$058 = $21; //@line 2634
    }
   }
   if ($$050$lcssa << 24 >> 24 == -1) {
    if ($$052$lcssa << 24 >> 24 != 8) {
     $$0$lcssa6667 = $$0$lcssa; //@line 2644
     $$052$lcssa6568 = $$052$lcssa; //@line 2644
     break;
    }
    return;
   } else {
    $36 = $$050$lcssa << 24 >> 24 << 1; //@line 2650
    $39 = 8 - ($$052$lcssa << 24 >> 24) << 1; //@line 2653
    $42 = $39 & 254; //@line 2656
    $44 = $2 + ($36 & 254) | 0; //@line 2658
    _memmove($44 + $42 | 0, $44 | 0, 16 - $36 - $39 & 254 | 0) | 0; //@line 2661
    _memset($44 | 0, 0, $42 | 0) | 0; //@line 2662
    return;
   }
  }
 } while (0);
 _memset($$0$lcssa6667 | 0, 0, 16 - ($$052$lcssa6568 << 24 >> 24 << 1) | 0) | 0; //@line 2670
 return;
}
function _main__async_cb_176($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $48 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 6845
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6847
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6851
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6853
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6855
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6857
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6859
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6861
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6863
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6865
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6867
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6869
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6871
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6873
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6875
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6877
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 6880
  _printf(3144, $10) | 0; //@line 6881
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(64) | 0; //@line 6882
  _wait_ms(1e4); //@line 6883
  if (!___async) {
   ___async_unwind = 0; //@line 6886
  }
  HEAP32[$ReallocAsyncCtx10 >> 2] = 298; //@line 6888
  HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 6890
  HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 6892
  HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $6; //@line 6894
  HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $8; //@line 6896
  HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $10; //@line 6898
  HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $12; //@line 6900
  HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $14; //@line 6902
  HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $16; //@line 6904
  HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $18; //@line 6906
  HEAP32[$ReallocAsyncCtx10 + 40 >> 2] = $20; //@line 6908
  HEAP32[$ReallocAsyncCtx10 + 44 >> 2] = $22; //@line 6910
  HEAP32[$ReallocAsyncCtx10 + 48 >> 2] = $24; //@line 6912
  HEAP32[$ReallocAsyncCtx10 + 52 >> 2] = $26; //@line 6914
  HEAP32[$ReallocAsyncCtx10 + 56 >> 2] = $28; //@line 6916
  HEAP32[$ReallocAsyncCtx10 + 60 >> 2] = $30; //@line 6918
  sp = STACKTOP; //@line 6919
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 6922
  $48 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($4, 0, $20, 4) | 0; //@line 6923
  if (!___async) {
   HEAP32[___async_retval >> 2] = $48; //@line 6927
   ___async_unwind = 0; //@line 6928
  }
  HEAP32[$ReallocAsyncCtx4 >> 2] = 299; //@line 6930
  HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 6932
  HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 6934
  HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 6936
  HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 6938
  HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 6940
  HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $12; //@line 6942
  HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $14; //@line 6944
  HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $16; //@line 6946
  HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $18; //@line 6948
  HEAP32[$ReallocAsyncCtx4 + 40 >> 2] = $20; //@line 6950
  HEAP32[$ReallocAsyncCtx4 + 44 >> 2] = $22; //@line 6952
  HEAP32[$ReallocAsyncCtx4 + 48 >> 2] = $24; //@line 6954
  HEAP32[$ReallocAsyncCtx4 + 52 >> 2] = $26; //@line 6956
  HEAP32[$ReallocAsyncCtx4 + 56 >> 2] = $28; //@line 6958
  HEAP32[$ReallocAsyncCtx4 + 60 >> 2] = $30; //@line 6960
  sp = STACKTOP; //@line 6961
  return;
 }
}
function __ZL28nsapi_dns_query_async_deletei__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1583
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1585
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1587
 $6 = HEAP32[$2 + 60 >> 2] | 0; //@line 1589
 do {
  if ($6 | 0) {
   $9 = HEAP32[$6 + 12 >> 2] | 0; //@line 1594
   if (!$9) {
    __ZdlPv($6); //@line 1597
    break;
   }
   $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 1601
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 1602
   FUNCTION_TABLE_vi[$12 & 511]($6); //@line 1603
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 1606
    $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 1607
    HEAP32[$13 >> 2] = $6; //@line 1608
    $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 1609
    HEAP32[$14 >> 2] = $2; //@line 1610
    $15 = $ReallocAsyncCtx2 + 12 | 0; //@line 1611
    HEAP32[$15 >> 2] = $4; //@line 1612
    sp = STACKTOP; //@line 1613
    return;
   }
   ___async_unwind = 0; //@line 1616
   HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 1617
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 1618
   HEAP32[$13 >> 2] = $6; //@line 1619
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 1620
   HEAP32[$14 >> 2] = $2; //@line 1621
   $15 = $ReallocAsyncCtx2 + 12 | 0; //@line 1622
   HEAP32[$15 >> 2] = $4; //@line 1623
   sp = STACKTOP; //@line 1624
   return;
  }
 } while (0);
 $17 = HEAP32[$2 + 64 >> 2] | 0; //@line 1629
 if ($17 | 0) {
  __ZdaPv($17); //@line 1632
 }
 $20 = HEAP32[$2 + 12 >> 2] | 0; //@line 1635
 if ($20 | 0) {
  __ZdlPv($20); //@line 1638
 }
 $23 = HEAP32[$2 + 44 >> 2] | 0; //@line 1641
 if ($23 | 0) {
  $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 1646
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 1647
  FUNCTION_TABLE_vi[$27 & 511]($2 + 32 | 0); //@line 1648
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 1651
   $28 = $ReallocAsyncCtx3 + 4 | 0; //@line 1652
   HEAP32[$28 >> 2] = $2; //@line 1653
   $29 = $ReallocAsyncCtx3 + 8 | 0; //@line 1654
   HEAP32[$29 >> 2] = $4; //@line 1655
   sp = STACKTOP; //@line 1656
   return;
  }
  ___async_unwind = 0; //@line 1659
  HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 1660
  $28 = $ReallocAsyncCtx3 + 4 | 0; //@line 1661
  HEAP32[$28 >> 2] = $2; //@line 1662
  $29 = $ReallocAsyncCtx3 + 8 | 0; //@line 1663
  HEAP32[$29 >> 2] = $4; //@line 1664
  sp = STACKTOP; //@line 1665
  return;
 }
 $31 = HEAP32[$2 + 28 >> 2] | 0; //@line 1669
 if (!$31) {
  __ZdlPv($2); //@line 1672
  HEAP32[6740 + ($4 << 2) >> 2] = 0; //@line 1674
  return;
 }
 $35 = HEAP32[$31 + 8 >> 2] | 0; //@line 1679
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 1680
 FUNCTION_TABLE_vi[$35 & 511]($2 + 16 | 0); //@line 1681
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 1684
  $36 = $ReallocAsyncCtx4 + 4 | 0; //@line 1685
  HEAP32[$36 >> 2] = $2; //@line 1686
  $37 = $ReallocAsyncCtx4 + 8 | 0; //@line 1687
  HEAP32[$37 >> 2] = $4; //@line 1688
  sp = STACKTOP; //@line 1689
  return;
 }
 ___async_unwind = 0; //@line 1692
 HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 1693
 $36 = $ReallocAsyncCtx4 + 4 | 0; //@line 1694
 HEAP32[$36 >> 2] = $2; //@line 1695
 $37 = $ReallocAsyncCtx4 + 8 | 0; //@line 1696
 HEAP32[$37 >> 2] = $4; //@line 1697
 sp = STACKTOP; //@line 1698
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 9829
 $7 = ($2 | 0) != 0; //@line 9833
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 9837
   $$03555 = $0; //@line 9838
   $$03654 = $2; //@line 9838
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 9843
     $$036$lcssa64 = $$03654; //@line 9843
     label = 6; //@line 9844
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 9847
    $12 = $$03654 + -1 | 0; //@line 9848
    $16 = ($12 | 0) != 0; //@line 9852
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 9855
     $$03654 = $12; //@line 9855
    } else {
     $$035$lcssa = $11; //@line 9857
     $$036$lcssa = $12; //@line 9857
     $$lcssa = $16; //@line 9857
     label = 5; //@line 9858
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 9863
   $$036$lcssa = $2; //@line 9863
   $$lcssa = $7; //@line 9863
   label = 5; //@line 9864
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 9869
   $$036$lcssa64 = $$036$lcssa; //@line 9869
   label = 6; //@line 9870
  } else {
   $$2 = $$035$lcssa; //@line 9872
   $$3 = 0; //@line 9872
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 9878
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 9881
    $$3 = $$036$lcssa64; //@line 9881
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 9883
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 9887
      $$13745 = $$036$lcssa64; //@line 9887
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 9890
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 9899
       $30 = $$13745 + -4 | 0; //@line 9900
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 9903
        $$13745 = $30; //@line 9903
       } else {
        $$0$lcssa = $29; //@line 9905
        $$137$lcssa = $30; //@line 9905
        label = 11; //@line 9906
        break L11;
       }
      }
      $$140 = $$046; //@line 9910
      $$23839 = $$13745; //@line 9910
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 9912
      $$137$lcssa = $$036$lcssa64; //@line 9912
      label = 11; //@line 9913
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 9919
      $$3 = 0; //@line 9919
      break;
     } else {
      $$140 = $$0$lcssa; //@line 9922
      $$23839 = $$137$lcssa; //@line 9922
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 9929
      $$3 = $$23839; //@line 9929
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 9932
     $$23839 = $$23839 + -1 | 0; //@line 9933
     if (!$$23839) {
      $$2 = $35; //@line 9936
      $$3 = 0; //@line 9936
      break;
     } else {
      $$140 = $35; //@line 9939
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 9947
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 5358
 do {
  if (!$0) {
   do {
    if (!(HEAP32[251] | 0)) {
     $34 = 0; //@line 5366
    } else {
     $12 = HEAP32[251] | 0; //@line 5368
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5369
     $13 = _fflush($12) | 0; //@line 5370
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 311; //@line 5373
      sp = STACKTOP; //@line 5374
      return 0; //@line 5375
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 5377
      $34 = $13; //@line 5378
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 5384
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 5388
    } else {
     $$02327 = $$02325; //@line 5390
     $$02426 = $34; //@line 5390
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 5397
      } else {
       $28 = 0; //@line 5399
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5407
       $25 = ___fflush_unlocked($$02327) | 0; //@line 5408
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 5413
       $$1 = $25 | $$02426; //@line 5415
      } else {
       $$1 = $$02426; //@line 5417
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 5421
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 5424
      if (!$$023) {
       $$024$lcssa = $$1; //@line 5427
       break L9;
      } else {
       $$02327 = $$023; //@line 5430
       $$02426 = $$1; //@line 5430
      }
     }
     HEAP32[$AsyncCtx >> 2] = 312; //@line 5433
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 5435
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 5437
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 5439
     sp = STACKTOP; //@line 5440
     return 0; //@line 5441
    }
   } while (0);
   ___ofl_unlock(); //@line 5444
   $$0 = $$024$lcssa; //@line 5445
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5451
    $5 = ___fflush_unlocked($0) | 0; //@line 5452
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 309; //@line 5455
     sp = STACKTOP; //@line 5456
     return 0; //@line 5457
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5459
     $$0 = $5; //@line 5460
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 5465
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5466
   $7 = ___fflush_unlocked($0) | 0; //@line 5467
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 310; //@line 5470
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 5473
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5475
    sp = STACKTOP; //@line 5476
    return 0; //@line 5477
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5479
   if ($phitmp) {
    $$0 = $7; //@line 5481
   } else {
    ___unlockfile($0); //@line 5483
    $$0 = $7; //@line 5484
   }
  }
 } while (0);
 return $$0 | 0; //@line 5488
}
function _mbed_vtracef__async_cb_29($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18333
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18335
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18339
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18341
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 18344
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18346
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18348
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18350
 $$13 = ($AsyncRetVal | 0) >= ($2 | 0) ? 0 : $AsyncRetVal; //@line 18352
 $18 = (HEAP32[$0 + 8 >> 2] | 0) + $$13 | 0; //@line 18354
 $19 = $2 - $$13 | 0; //@line 18355
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[128] | 0; //@line 18359
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $10 ^ 1) {
     break;
    }
    _snprintf($18, $19, 2745, $12) | 0; //@line 18371
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 18374
   $23 = FUNCTION_TABLE_i[$21 & 0]() | 0; //@line 18375
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 69; //@line 18378
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 18379
    HEAP32[$24 >> 2] = $6; //@line 18380
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 18381
    HEAP32[$25 >> 2] = $18; //@line 18382
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 18383
    HEAP32[$26 >> 2] = $19; //@line 18384
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 18385
    HEAP32[$27 >> 2] = $8; //@line 18386
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 18387
    $$expand_i1_val = $10 & 1; //@line 18388
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 18389
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 18390
    HEAP32[$29 >> 2] = $12; //@line 18391
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 18392
    HEAP32[$30 >> 2] = $14; //@line 18393
    sp = STACKTOP; //@line 18394
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 18398
   ___async_unwind = 0; //@line 18399
   HEAP32[$ReallocAsyncCtx6 >> 2] = 69; //@line 18400
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 18401
   HEAP32[$24 >> 2] = $6; //@line 18402
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 18403
   HEAP32[$25 >> 2] = $18; //@line 18404
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 18405
   HEAP32[$26 >> 2] = $19; //@line 18406
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 18407
   HEAP32[$27 >> 2] = $8; //@line 18408
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 18409
   $$expand_i1_val = $10 & 1; //@line 18410
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 18411
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 18412
   HEAP32[$29 >> 2] = $12; //@line 18413
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 18414
   HEAP32[$30 >> 2] = $14; //@line 18415
   sp = STACKTOP; //@line 18416
   return;
  }
 } while (0);
 $34 = HEAP32[129] | 0; //@line 18420
 $35 = HEAP32[122] | 0; //@line 18421
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 18422
 FUNCTION_TABLE_vi[$34 & 511]($35); //@line 18423
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 18426
  sp = STACKTOP; //@line 18427
  return;
 }
 ___async_unwind = 0; //@line 18430
 HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 18431
 sp = STACKTOP; //@line 18432
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14699
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14705
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 14711
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 14714
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14715
    FUNCTION_TABLE_viiiii[$53 & 3]($50, $1, $2, $3, $4); //@line 14716
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 338; //@line 14719
     sp = STACKTOP; //@line 14720
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14723
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 14731
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 14736
     $19 = $1 + 44 | 0; //@line 14737
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 14743
     HEAP8[$22 >> 0] = 0; //@line 14744
     $23 = $1 + 53 | 0; //@line 14745
     HEAP8[$23 >> 0] = 0; //@line 14746
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 14748
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 14751
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14752
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 14753
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 337; //@line 14756
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 14758
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14760
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 14762
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 14764
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 14766
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 14768
      sp = STACKTOP; //@line 14769
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 14772
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 14776
      label = 13; //@line 14777
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 14782
       label = 13; //@line 14783
      } else {
       $$037$off039 = 3; //@line 14785
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 14789
      $39 = $1 + 40 | 0; //@line 14790
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 14793
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14803
        $$037$off039 = $$037$off038; //@line 14804
       } else {
        $$037$off039 = $$037$off038; //@line 14806
       }
      } else {
       $$037$off039 = $$037$off038; //@line 14809
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 14812
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 14819
   }
  }
 } while (0);
 return;
}
function _mbed_vtracef__async_cb_30($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18442
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18444
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18446
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18448
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18450
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18452
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18454
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18456
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18458
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18460
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18462
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18464
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18466
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18468
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18470
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18472
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18474
 $34 = HEAP8[$0 + 68 >> 0] & 1; //@line 18477
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18479
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 18481
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 18483
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 18485
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 18487
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 18489
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 18491
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 18493
 $55 = ($50 | 0 ? 4 : 0) + $50 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 18499
 $56 = HEAP32[127] | 0; //@line 18500
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 18501
 $57 = FUNCTION_TABLE_ii[$56 & 31]($55) | 0; //@line 18502
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 18506
  ___async_unwind = 0; //@line 18507
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 67; //@line 18509
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 18511
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 18513
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 18515
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 18517
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 18519
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 18521
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 18523
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 18525
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 18527
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 18529
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 18531
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $24; //@line 18533
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $26; //@line 18535
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $28; //@line 18537
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $30; //@line 18539
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $32; //@line 18541
 HEAP8[$ReallocAsyncCtx5 + 68 >> 0] = $34 & 1; //@line 18544
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $36; //@line 18546
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $38; //@line 18548
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $40; //@line 18550
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $42; //@line 18552
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $44; //@line 18554
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $46; //@line 18556
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $48; //@line 18558
 sp = STACKTOP; //@line 18559
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_169($0) {
 $0 = $0 | 0;
 var $$049 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6257
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6259
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6261
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6263
 if (!(HEAP32[$4 + 48 >> 2] | 0)) {
  $$049 = 0; //@line 6270
 } else {
  $$049 = HEAPU8[HEAP32[$0 + 16 >> 2] >> 0] | 0; //@line 6274
 }
 $14 = $4 + 28 | 0; //@line 6276
 $15 = HEAP32[$14 >> 2] | 0; //@line 6277
 if (!$15) {
  $26 = $2 + 12 | 0; //@line 6280
  HEAP32[$26 >> 2] = 0; //@line 6281
  $27 = HEAP32[$4 >> 2] | 0; //@line 6282
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 6283
  __ZL28nsapi_dns_query_async_deletei($27); //@line 6284
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 253; //@line 6287
   $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 6288
   HEAP32[$28 >> 2] = $26; //@line 6289
   $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 6290
   HEAP32[$29 >> 2] = $2; //@line 6291
   $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 6292
   HEAP32[$30 >> 2] = $6; //@line 6293
   $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 6294
   HEAP32[$31 >> 2] = $$049; //@line 6295
   sp = STACKTOP; //@line 6296
   return;
  }
  ___async_unwind = 0; //@line 6299
  HEAP32[$ReallocAsyncCtx6 >> 2] = 253; //@line 6300
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 6301
  HEAP32[$28 >> 2] = $26; //@line 6302
  $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 6303
  HEAP32[$29 >> 2] = $2; //@line 6304
  $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 6305
  HEAP32[$30 >> 2] = $6; //@line 6306
  $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 6307
  HEAP32[$31 >> 2] = $$049; //@line 6308
  sp = STACKTOP; //@line 6309
  return;
 } else {
  $19 = HEAP32[$15 + 4 >> 2] | 0; //@line 6314
  $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 6315
  FUNCTION_TABLE_vii[$19 & 7]($2, $4 + 16 | 0); //@line 6316
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 252; //@line 6319
   $20 = $ReallocAsyncCtx + 4 | 0; //@line 6320
   HEAP32[$20 >> 2] = $14; //@line 6321
   $21 = $ReallocAsyncCtx + 8 | 0; //@line 6322
   HEAP32[$21 >> 2] = $2; //@line 6323
   $22 = $ReallocAsyncCtx + 12 | 0; //@line 6324
   HEAP32[$22 >> 2] = $4; //@line 6325
   $23 = $ReallocAsyncCtx + 16 | 0; //@line 6326
   HEAP32[$23 >> 2] = $2; //@line 6327
   $24 = $ReallocAsyncCtx + 20 | 0; //@line 6328
   HEAP32[$24 >> 2] = $6; //@line 6329
   $25 = $ReallocAsyncCtx + 24 | 0; //@line 6330
   HEAP32[$25 >> 2] = $$049; //@line 6331
   sp = STACKTOP; //@line 6332
   return;
  }
  ___async_unwind = 0; //@line 6335
  HEAP32[$ReallocAsyncCtx >> 2] = 252; //@line 6336
  $20 = $ReallocAsyncCtx + 4 | 0; //@line 6337
  HEAP32[$20 >> 2] = $14; //@line 6338
  $21 = $ReallocAsyncCtx + 8 | 0; //@line 6339
  HEAP32[$21 >> 2] = $2; //@line 6340
  $22 = $ReallocAsyncCtx + 12 | 0; //@line 6341
  HEAP32[$22 >> 2] = $4; //@line 6342
  $23 = $ReallocAsyncCtx + 16 | 0; //@line 6343
  HEAP32[$23 >> 2] = $2; //@line 6344
  $24 = $ReallocAsyncCtx + 20 | 0; //@line 6345
  HEAP32[$24 >> 2] = $6; //@line 6346
  $25 = $ReallocAsyncCtx + 24 | 0; //@line 6347
  HEAP32[$25 >> 2] = $$049; //@line 6348
  sp = STACKTOP; //@line 6349
  return;
 }
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1429
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 1440
 $14 = $1 + 20 | 0; //@line 1441
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1443
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 1448
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 1452
 $24 = $0 + 128 | 0; //@line 1453
 _equeue_mutex_lock($24); //@line 1454
 $25 = HEAP32[$0 >> 2] | 0; //@line 1455
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 1459
   label = 5; //@line 1460
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 1462
   $$053 = $0; //@line 1463
   $29 = $25; //@line 1463
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 1472
    $34 = HEAP32[$33 >> 2] | 0; //@line 1473
    if (!$34) {
     $$051$ph = $33; //@line 1476
     label = 5; //@line 1477
     break L1;
    } else {
     $$053 = $33; //@line 1480
     $29 = $34; //@line 1480
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 1488
    HEAP32[$49 >> 2] = $29; //@line 1489
    HEAP32[$29 + 16 >> 2] = $49; //@line 1491
    $$0515859 = $$053; //@line 1492
    label = 11; //@line 1493
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 1497
   $43 = $1 + 8 | 0; //@line 1498
   HEAP32[$43 >> 2] = $42; //@line 1499
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 1503
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 1505
   $47 = $1 + 12 | 0; //@line 1506
   HEAP32[$47 >> 2] = $46; //@line 1507
   HEAP32[$46 + 16 >> 2] = $47; //@line 1509
   $$05157 = $$053; //@line 1510
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 1515
  $$0515859 = $$051$ph; //@line 1516
  label = 11; //@line 1517
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 1521
  $$05157 = $$0515859; //@line 1522
 }
 HEAP32[$$05157 >> 2] = $1; //@line 1524
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 1526
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 1528
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 1531
  return $13 | 0; //@line 1532
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 1538
  return $13 | 0; //@line 1539
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 1544
  return $13 | 0; //@line 1545
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 1551
  return $13 | 0; //@line 1552
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 1555
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1557
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1561
 FUNCTION_TABLE_vii[$54 & 7]($65, $67 & ~($67 >> 31)); //@line 1562
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 58; //@line 1565
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 1567
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 1569
  sp = STACKTOP; //@line 1570
  return 0; //@line 1571
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1573
 _equeue_mutex_unlock($24); //@line 1574
 return $13 | 0; //@line 1575
}
function __ZL37nsapi_dns_query_async_socket_callbackPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $26 = 0, $29 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10386
 STACKTOP = STACKTOP + 32 | 0; //@line 10387
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10387
 $1 = sp + 16 | 0; //@line 10388
 $2 = sp; //@line 10389
 if (!$0) {
  STACKTOP = sp; //@line 10392
  return;
 }
 $4 = $0 + 12 | 0; //@line 10394
 $5 = HEAP32[$4 >> 2] | 0; //@line 10395
 do {
  if (!$5) {
   $14 = 0; //@line 10399
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 10402
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10403
   FUNCTION_TABLE_vii[$8 & 7]($1, $0); //@line 10404
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 225; //@line 10407
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10409
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10411
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 10413
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 10415
    sp = STACKTOP; //@line 10416
    STACKTOP = sp; //@line 10417
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10419
    $14 = HEAP32[$4 >> 2] | 0; //@line 10421
    break;
   }
  }
 } while (0);
 $13 = $1 + 12 | 0; //@line 10426
 HEAP32[$13 >> 2] = $14; //@line 10427
 $16 = HEAP32[$0 + 16 >> 2] | 0; //@line 10429
 HEAP32[$2 + 8 >> 2] = 0; //@line 10431
 HEAP32[$2 >> 2] = 226; //@line 10432
 HEAP32[$2 + 4 >> 2] = $16; //@line 10434
 $18 = $2 + 12 | 0; //@line 10435
 HEAP32[$18 >> 2] = 736; //@line 10436
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10437
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 10438
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 227; //@line 10441
  HEAP32[$AsyncCtx10 + 4 >> 2] = $18; //@line 10443
  HEAP32[$AsyncCtx10 + 8 >> 2] = $13; //@line 10445
  HEAP32[$AsyncCtx10 + 12 >> 2] = $2; //@line 10447
  HEAP32[$AsyncCtx10 + 16 >> 2] = $1; //@line 10449
  sp = STACKTOP; //@line 10450
  STACKTOP = sp; //@line 10451
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10453
 $23 = HEAP32[$18 >> 2] | 0; //@line 10454
 do {
  if ($23 | 0) {
   $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 10459
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10460
   FUNCTION_TABLE_vi[$26 & 511]($2); //@line 10461
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 228; //@line 10464
    HEAP32[$AsyncCtx3 + 4 >> 2] = $13; //@line 10466
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 10468
    sp = STACKTOP; //@line 10469
    STACKTOP = sp; //@line 10470
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10472
    break;
   }
  }
 } while (0);
 $29 = HEAP32[$13 >> 2] | 0; //@line 10477
 if (!$29) {
  STACKTOP = sp; //@line 10480
  return;
 }
 $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 10483
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10484
 FUNCTION_TABLE_vi[$32 & 511]($1); //@line 10485
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 229; //@line 10488
  sp = STACKTOP; //@line 10489
  STACKTOP = sp; //@line 10490
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10492
 STACKTOP = sp; //@line 10493
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 14011
 STACKTOP = STACKTOP + 48 | 0; //@line 14012
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14012
 $vararg_buffer10 = sp + 32 | 0; //@line 14013
 $vararg_buffer7 = sp + 24 | 0; //@line 14014
 $vararg_buffer3 = sp + 16 | 0; //@line 14015
 $vararg_buffer = sp; //@line 14016
 $0 = sp + 36 | 0; //@line 14017
 $1 = ___cxa_get_globals_fast() | 0; //@line 14018
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 14021
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 14026
   $9 = HEAP32[$7 >> 2] | 0; //@line 14028
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 14031
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 6046; //@line 14037
    _abort_message(5996, $vararg_buffer7); //@line 14038
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 14047
   } else {
    $22 = $3 + 80 | 0; //@line 14049
   }
   HEAP32[$0 >> 2] = $22; //@line 14051
   $23 = HEAP32[$3 >> 2] | 0; //@line 14052
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 14054
   $28 = HEAP32[(HEAP32[26] | 0) + 16 >> 2] | 0; //@line 14057
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14058
   $29 = FUNCTION_TABLE_iiii[$28 & 31](104, $23, $0) | 0; //@line 14059
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 328; //@line 14062
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14064
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 14066
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 14068
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 14070
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 14072
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 14074
    sp = STACKTOP; //@line 14075
    STACKTOP = sp; //@line 14076
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14078
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 6046; //@line 14080
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 14082
    _abort_message(5955, $vararg_buffer3); //@line 14083
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 14086
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 14089
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14090
   $40 = FUNCTION_TABLE_ii[$39 & 31]($36) | 0; //@line 14091
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 329; //@line 14094
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 14096
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 14098
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 14100
    sp = STACKTOP; //@line 14101
    STACKTOP = sp; //@line 14102
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14104
    HEAP32[$vararg_buffer >> 2] = 6046; //@line 14105
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 14107
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 14109
    _abort_message(5910, $vararg_buffer); //@line 14110
   }
  }
 }
 _abort_message(6034, $vararg_buffer10); //@line 14115
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $32 = 0, $35 = 0, $4 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2787
 STACKTOP = STACKTOP + 16 | 0; //@line 2788
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2788
 $4 = sp; //@line 2789
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2792
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 2793
 $8 = FUNCTION_TABLE_ii[$7 & 31]($0) | 0; //@line 2794
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 78; //@line 2797
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 2799
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 2801
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 2803
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 2805
  sp = STACKTOP; //@line 2806
  STACKTOP = sp; //@line 2807
  return 0; //@line 2807
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2809
 $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0; //@line 2812
 $16 = $2 + 12 | 0; //@line 2813
 $17 = HEAP32[$16 >> 2] | 0; //@line 2814
 do {
  if (!$17) {
   $28 = 0; //@line 2818
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 2821
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 2822
   FUNCTION_TABLE_vii[$20 & 7]($4, $2); //@line 2823
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 79; //@line 2826
    HEAP32[$AsyncCtx3 + 4 >> 2] = $16; //@line 2828
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 2830
    HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 2832
    HEAP32[$AsyncCtx3 + 16 >> 2] = $1; //@line 2834
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 2836
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 2838
    sp = STACKTOP; //@line 2839
    STACKTOP = sp; //@line 2840
    return 0; //@line 2840
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2842
    $28 = HEAP32[$16 >> 2] | 0; //@line 2844
    break;
   }
  }
 } while (0);
 $27 = $4 + 12 | 0; //@line 2849
 HEAP32[$27 >> 2] = $28; //@line 2850
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2851
 $29 = FUNCTION_TABLE_iiiii[$15 & 15]($8, $1, $4, $3) | 0; //@line 2852
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 80; //@line 2855
  HEAP32[$AsyncCtx6 + 4 >> 2] = $27; //@line 2857
  HEAP32[$AsyncCtx6 + 8 >> 2] = $4; //@line 2859
  sp = STACKTOP; //@line 2860
  STACKTOP = sp; //@line 2861
  return 0; //@line 2861
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 2863
 $32 = HEAP32[$27 >> 2] | 0; //@line 2864
 if (!$32) {
  STACKTOP = sp; //@line 2867
  return $29 | 0; //@line 2867
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 2870
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2871
 FUNCTION_TABLE_vi[$35 & 511]($4); //@line 2872
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 81; //@line 2875
  HEAP32[$AsyncCtx10 + 4 >> 2] = $29; //@line 2877
  sp = STACKTOP; //@line 2878
  STACKTOP = sp; //@line 2879
  return 0; //@line 2879
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 2881
 STACKTOP = sp; //@line 2882
 return $29 | 0; //@line 2882
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1$i = 0, $14 = 0, $15 = 0, $23 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 820
 $5 = $0 + -4 | 0; //@line 821
 $6 = $1 + 8 | 0; //@line 822
 do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   label = 7; //@line 827
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$6 >> 0] | 0)) {
     label = 7; //@line 835
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 841
   _puts(1746) | 0; //@line 842
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 50; //@line 845
    sp = STACKTOP; //@line 846
    return 0; //@line 847
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 849
   $$1$i = -3012; //@line 850
   return $$1$i | 0; //@line 851
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $14 = HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0; //@line 858
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 859
   $15 = FUNCTION_TABLE_iiii[$14 & 31]($5, $1, $2) | 0; //@line 860
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 51; //@line 863
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 865
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 867
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 869
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 871
    HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 873
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 875
    sp = STACKTOP; //@line 876
    return 0; //@line 877
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 879
   if (($15 | 0) < 0) {
    $$1$i = $15; //@line 882
    return $$1$i | 0; //@line 883
   } else {
    $23 = $1 + 12 | 0; //@line 885
    dest = $23; //@line 886
    src = $2; //@line 886
    stop = dest + 60 | 0; //@line 886
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 886
     dest = dest + 4 | 0; //@line 886
     src = src + 4 | 0; //@line 886
    } while ((dest | 0) < (stop | 0));
    HEAP16[$23 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 886
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 891
 _wait_ms(1); //@line 892
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 52; //@line 895
  HEAP32[$AsyncCtx10 + 4 >> 2] = $5; //@line 897
  HEAP32[$AsyncCtx10 + 8 >> 2] = $5; //@line 899
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 901
  HEAP32[$AsyncCtx10 + 16 >> 2] = $3; //@line 903
  HEAP32[$AsyncCtx10 + 20 >> 2] = $4; //@line 905
  sp = STACKTOP; //@line 906
  return 0; //@line 907
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 909
 $31 = HEAP32[(HEAP32[$5 >> 2] | 0) + 116 >> 2] | 0; //@line 912
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 913
 $32 = FUNCTION_TABLE_iiiii[$31 & 15]($5, $1, $3, $4) | 0; //@line 914
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 53; //@line 917
  sp = STACKTOP; //@line 918
  return 0; //@line 919
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 921
 $$1$i = $32; //@line 922
 return $$1$i | 0; //@line 923
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_78($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $42 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23595
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23597
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23599
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23601
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23603
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23605
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23607
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23609
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23611
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23613
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23615
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23617
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23619
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23621
 $42 = HEAP32[$8 >> 2] | 0; //@line 23622
 if (!$42) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 23625
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($26, 0, $4, 512) | 0; //@line 23626
  if (!___async) {
   HEAP32[___async_retval >> 2] = $27; //@line 23630
   ___async_unwind = 0; //@line 23631
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 23633
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 23635
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 23637
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 23639
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 23641
  HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 23643
  HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 23645
  HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 23647
  HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 23649
  HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 23651
  HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 23653
  HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 23655
  HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 23657
  HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 23659
  sp = STACKTOP; //@line 23660
  return;
 } else {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 23664
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 23665
  FUNCTION_TABLE_vi[$45 & 511]($12); //@line 23666
  if (!___async) {
   ___async_unwind = 0; //@line 23669
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 23671
  HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 23673
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 23675
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 23677
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 23679
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 23681
  HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 23683
  HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 23685
  HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 23687
  HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 23689
  HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 23691
  HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 23693
  HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 23695
  HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $26; //@line 23697
  sp = STACKTOP; //@line 23698
  return;
 }
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4758
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4760
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4762
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4764
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4766
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4768
 $12 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 4 >> 2] | 0; //@line 4771
 $13 = $2 + 12 | 0; //@line 4772
 $14 = HEAP32[$13 >> 2] | 0; //@line 4773
 if (!$14) {
  $24 = $4 + 12 | 0; //@line 4776
  HEAP32[$24 >> 2] = 0; //@line 4777
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 4778
  $25 = FUNCTION_TABLE_iiiii[$12 & 15]($AsyncRetVal, $6, $4, $8) | 0; //@line 4779
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 80; //@line 4782
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 4783
   HEAP32[$26 >> 2] = $24; //@line 4784
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 4785
   HEAP32[$27 >> 2] = $4; //@line 4786
   sp = STACKTOP; //@line 4787
   return;
  }
  HEAP32[___async_retval >> 2] = $25; //@line 4791
  ___async_unwind = 0; //@line 4792
  HEAP32[$ReallocAsyncCtx3 >> 2] = 80; //@line 4793
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 4794
  HEAP32[$26 >> 2] = $24; //@line 4795
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 4796
  HEAP32[$27 >> 2] = $4; //@line 4797
  sp = STACKTOP; //@line 4798
  return;
 } else {
  $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 4802
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 4803
  FUNCTION_TABLE_vii[$17 & 7]($4, $2); //@line 4804
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 79; //@line 4807
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 4808
   HEAP32[$18 >> 2] = $13; //@line 4809
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 4810
   HEAP32[$19 >> 2] = $4; //@line 4811
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 4812
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 4813
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 4814
   HEAP32[$21 >> 2] = $6; //@line 4815
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 4816
   HEAP32[$22 >> 2] = $8; //@line 4817
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 4818
   HEAP32[$23 >> 2] = $12; //@line 4819
   sp = STACKTOP; //@line 4820
   return;
  }
  ___async_unwind = 0; //@line 4823
  HEAP32[$ReallocAsyncCtx2 >> 2] = 79; //@line 4824
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 4825
  HEAP32[$18 >> 2] = $13; //@line 4826
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 4827
  HEAP32[$19 >> 2] = $4; //@line 4828
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 4829
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 4830
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 4831
  HEAP32[$21 >> 2] = $6; //@line 4832
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 4833
  HEAP32[$22 >> 2] = $8; //@line 4834
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 4835
  HEAP32[$23 >> 2] = $12; //@line 4836
  sp = STACKTOP; //@line 4837
  return;
 }
}
function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6766
 STACKTOP = STACKTOP + 16 | 0; //@line 6767
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6767
 $4 = sp; //@line 6768
 $$ = ($3 | 0) == 0 ? 7348 : $3; //@line 6770
 $6 = HEAP32[$$ >> 2] | 0; //@line 6771
 L1 : do {
  if (!$1) {
   if (!$6) {
    $$0 = 0; //@line 6777
   } else {
    label = 17; //@line 6779
   }
  } else {
   $$47 = ($0 | 0) == 0 ? $4 : $0; //@line 6783
   if (!$2) {
    $$0 = -2; //@line 6786
   } else {
    if (!$6) {
     $12 = HEAP8[$1 >> 0] | 0; //@line 6790
     if ($12 << 24 >> 24 > -1) {
      HEAP32[$$47 >> 2] = $12 & 255; //@line 6794
      $$0 = $12 << 24 >> 24 != 0 & 1; //@line 6797
      break;
     }
     $21 = (HEAP32[HEAP32[(___pthread_self_913() | 0) + 188 >> 2] >> 2] | 0) == 0; //@line 6804
     $22 = HEAP8[$1 >> 0] | 0; //@line 6805
     if ($21) {
      HEAP32[$$47 >> 2] = $22 << 24 >> 24 & 57343; //@line 6809
      $$0 = 1; //@line 6810
      break;
     }
     $26 = ($22 & 255) + -194 | 0; //@line 6814
     if ($26 >>> 0 > 50) {
      label = 17; //@line 6817
      break;
     }
     $30 = HEAP32[1008 + ($26 << 2) >> 2] | 0; //@line 6822
     $31 = $2 + -1 | 0; //@line 6823
     if (!$31) {
      $$2 = $30; //@line 6826
     } else {
      $$03952 = $1 + 1 | 0; //@line 6828
      $$04051 = $30; //@line 6828
      $$04350 = $31; //@line 6828
      label = 11; //@line 6829
     }
    } else {
     $$03952 = $1; //@line 6832
     $$04051 = $6; //@line 6832
     $$04350 = $2; //@line 6832
     label = 11; //@line 6833
    }
    L14 : do {
     if ((label | 0) == 11) {
      $33 = HEAP8[$$03952 >> 0] | 0; //@line 6837
      $35 = ($33 & 255) >>> 3; //@line 6839
      if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
       label = 17; //@line 6846
       break L1;
      } else {
       $$1 = $$03952; //@line 6849
       $$141 = $$04051; //@line 6849
       $$144 = $$04350; //@line 6849
       $44 = $33; //@line 6849
      }
      while (1) {
       $$1 = $$1 + 1 | 0; //@line 6853
       $$141 = ($44 & 255) + -128 | $$141 << 6; //@line 6856
       $$144 = $$144 + -1 | 0; //@line 6857
       if (($$141 | 0) >= 0) {
        break;
       }
       if (!$$144) {
        $$2 = $$141; //@line 6864
        break L14;
       }
       $44 = HEAP8[$$1 >> 0] | 0; //@line 6867
       if (($44 & -64) << 24 >> 24 != -128) {
        label = 17; //@line 6873
        break L1;
       }
      }
      HEAP32[$$ >> 2] = 0; //@line 6877
      HEAP32[$$47 >> 2] = $$141; //@line 6878
      $$0 = $2 - $$144 | 0; //@line 6880
      break L1;
     }
    } while (0);
    HEAP32[$$ >> 2] = $$2; //@line 6884
    $$0 = -2; //@line 6885
   }
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0; //@line 6890
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 6892
  $$0 = -1; //@line 6893
 }
 STACKTOP = sp; //@line 6895
 return $$0 | 0; //@line 6895
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_208($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 14861
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14863
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14865
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14867
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14869
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14871
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14873
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14875
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14877
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14879
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14881
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14883
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14885
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 14887
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 14889
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 14891
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 14893
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 14895
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 14897
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 14899
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 14901
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 14903
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 14905
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 14907
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 14909
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(100) | 0; //@line 14910
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 14911
 if (!___async) {
  ___async_unwind = 0; //@line 14914
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 173; //@line 14916
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 14918
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 14920
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 14922
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 14924
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $10; //@line 14926
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $12; //@line 14928
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $14; //@line 14930
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $16; //@line 14932
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $18; //@line 14934
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $20; //@line 14936
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $22; //@line 14938
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $24; //@line 14940
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $26; //@line 14942
 HEAP32[$ReallocAsyncCtx11 + 56 >> 2] = $28; //@line 14944
 HEAP32[$ReallocAsyncCtx11 + 60 >> 2] = $30; //@line 14946
 HEAP32[$ReallocAsyncCtx11 + 64 >> 2] = $32; //@line 14948
 HEAP32[$ReallocAsyncCtx11 + 68 >> 2] = $34; //@line 14950
 HEAP32[$ReallocAsyncCtx11 + 72 >> 2] = $36; //@line 14952
 HEAP32[$ReallocAsyncCtx11 + 76 >> 2] = $38; //@line 14954
 HEAP32[$ReallocAsyncCtx11 + 80 >> 2] = $40; //@line 14956
 HEAP32[$ReallocAsyncCtx11 + 84 >> 2] = $42; //@line 14958
 HEAP32[$ReallocAsyncCtx11 + 88 >> 2] = $44; //@line 14960
 HEAP32[$ReallocAsyncCtx11 + 92 >> 2] = $46; //@line 14962
 HEAP32[$ReallocAsyncCtx11 + 96 >> 2] = $48; //@line 14964
 sp = STACKTOP; //@line 14965
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_52($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20510
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20512
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20514
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20516
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20518
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20520
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20522
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20524
 $$pre = HEAP32[$2 >> 2] | 0; //@line 20525
 if ($$pre | 0) {
  $17 = HEAP32[$$pre + 4 >> 2] | 0; //@line 20529
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 20530
  FUNCTION_TABLE_vii[$17 & 7]($6, $8); //@line 20531
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 121; //@line 20534
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 20535
   HEAP32[$18 >> 2] = $2; //@line 20536
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 20537
   HEAP32[$19 >> 2] = $4; //@line 20538
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 20539
   HEAP32[$20 >> 2] = $8; //@line 20540
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 20541
   HEAP32[$21 >> 2] = $10; //@line 20542
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 20543
   HEAP32[$22 >> 2] = $12; //@line 20544
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 20545
   HEAP32[$23 >> 2] = $6; //@line 20546
   $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 20547
   HEAP32[$24 >> 2] = $14; //@line 20548
   sp = STACKTOP; //@line 20549
   return;
  }
  ___async_unwind = 0; //@line 20552
  HEAP32[$ReallocAsyncCtx4 >> 2] = 121; //@line 20553
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 20554
  HEAP32[$18 >> 2] = $2; //@line 20555
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 20556
  HEAP32[$19 >> 2] = $4; //@line 20557
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 20558
  HEAP32[$20 >> 2] = $8; //@line 20559
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 20560
  HEAP32[$21 >> 2] = $10; //@line 20561
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 20562
  HEAP32[$22 >> 2] = $12; //@line 20563
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 20564
  HEAP32[$23 >> 2] = $6; //@line 20565
  $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 20566
  HEAP32[$24 >> 2] = $14; //@line 20567
  sp = STACKTOP; //@line 20568
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 20571
 $25 = HEAP32[$10 >> 2] | 0; //@line 20572
 $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 84 >> 2] | 0; //@line 20575
 $29 = HEAP32[$12 >> 2] | 0; //@line 20576
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 20577
 FUNCTION_TABLE_viiii[$28 & 7]($25, $29, 123, $6); //@line 20578
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 124; //@line 20581
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 20582
  HEAP32[$30 >> 2] = $14; //@line 20583
  sp = STACKTOP; //@line 20584
  return;
 }
 ___async_unwind = 0; //@line 20587
 HEAP32[$ReallocAsyncCtx6 >> 2] = 124; //@line 20588
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 20589
 HEAP32[$30 >> 2] = $14; //@line 20590
 sp = STACKTOP; //@line 20591
 return;
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1360
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1362
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1364
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1366
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[1690] | 0)) {
  _serial_init(6764, 2, 3); //@line 1374
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 1376
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 1382
  _serial_putc(6764, $9 << 24 >> 24); //@line 1383
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 1386
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 1387
   HEAP32[$18 >> 2] = 0; //@line 1388
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 1389
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 1390
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 1391
   HEAP32[$20 >> 2] = $2; //@line 1392
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 1393
   HEAP8[$21 >> 0] = $9; //@line 1394
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 1395
   HEAP32[$22 >> 2] = $4; //@line 1396
   sp = STACKTOP; //@line 1397
   return;
  }
  ___async_unwind = 0; //@line 1400
  HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 1401
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 1402
  HEAP32[$18 >> 2] = 0; //@line 1403
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 1404
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 1405
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 1406
  HEAP32[$20 >> 2] = $2; //@line 1407
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 1408
  HEAP8[$21 >> 0] = $9; //@line 1409
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 1410
  HEAP32[$22 >> 2] = $4; //@line 1411
  sp = STACKTOP; //@line 1412
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 1415
  _serial_putc(6764, 13); //@line 1416
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 1419
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 1420
   HEAP8[$12 >> 0] = $9; //@line 1421
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 1422
   HEAP32[$13 >> 2] = 0; //@line 1423
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 1424
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 1425
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 1426
   HEAP32[$15 >> 2] = $2; //@line 1427
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 1428
   HEAP32[$16 >> 2] = $4; //@line 1429
   sp = STACKTOP; //@line 1430
   return;
  }
  ___async_unwind = 0; //@line 1433
  HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 1434
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 1435
  HEAP8[$12 >> 0] = $9; //@line 1436
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 1437
  HEAP32[$13 >> 2] = 0; //@line 1438
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 1439
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 1440
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 1441
  HEAP32[$15 >> 2] = $2; //@line 1442
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 1443
  HEAP32[$16 >> 2] = $4; //@line 1444
  sp = STACKTOP; //@line 1445
  return;
 }
}
function _mbed_error_vfprintf__async_cb_88($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1453
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1457
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1459
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1463
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 1464
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 1470
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 1476
  _serial_putc(6764, $13 << 24 >> 24); //@line 1477
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 1480
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 1481
   HEAP32[$22 >> 2] = $12; //@line 1482
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 1483
   HEAP32[$23 >> 2] = $4; //@line 1484
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 1485
   HEAP32[$24 >> 2] = $6; //@line 1486
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 1487
   HEAP8[$25 >> 0] = $13; //@line 1488
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 1489
   HEAP32[$26 >> 2] = $10; //@line 1490
   sp = STACKTOP; //@line 1491
   return;
  }
  ___async_unwind = 0; //@line 1494
  HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 1495
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 1496
  HEAP32[$22 >> 2] = $12; //@line 1497
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 1498
  HEAP32[$23 >> 2] = $4; //@line 1499
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 1500
  HEAP32[$24 >> 2] = $6; //@line 1501
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 1502
  HEAP8[$25 >> 0] = $13; //@line 1503
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 1504
  HEAP32[$26 >> 2] = $10; //@line 1505
  sp = STACKTOP; //@line 1506
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 1509
  _serial_putc(6764, 13); //@line 1510
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 1513
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 1514
   HEAP8[$16 >> 0] = $13; //@line 1515
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 1516
   HEAP32[$17 >> 2] = $12; //@line 1517
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 1518
   HEAP32[$18 >> 2] = $4; //@line 1519
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 1520
   HEAP32[$19 >> 2] = $6; //@line 1521
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 1522
   HEAP32[$20 >> 2] = $10; //@line 1523
   sp = STACKTOP; //@line 1524
   return;
  }
  ___async_unwind = 0; //@line 1527
  HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 1528
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 1529
  HEAP8[$16 >> 0] = $13; //@line 1530
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 1531
  HEAP32[$17 >> 2] = $12; //@line 1532
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 1533
  HEAP32[$18 >> 2] = $4; //@line 1534
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 1535
  HEAP32[$19 >> 2] = $6; //@line 1536
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 1537
  HEAP32[$20 >> 2] = $10; //@line 1538
  sp = STACKTOP; //@line 1539
  return;
 }
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2631
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2633
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 2635
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2637
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2639
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2641
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2643
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2645
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -3009; //@line 2650
  $36 = ___async_retval; //@line 2651
  HEAP32[$36 >> 2] = $$0; //@line 2652
  return;
 }
 __ZN13SocketAddress8set_portEt($2, $4); //@line 2655
 $17 = $6 + 8 | 0; //@line 2656
 $18 = $6 + 52 | 0; //@line 2657
 $19 = $6 + 12 | 0; //@line 2658
 $20 = HEAP32[$17 >> 2] | 0; //@line 2659
 if (!$20) {
  $$0 = -3005; //@line 2662
  $36 = ___async_retval; //@line 2663
  HEAP32[$36 >> 2] = $$0; //@line 2664
  return;
 }
 HEAP32[$18 >> 2] = 0; //@line 2667
 $22 = HEAP32[$10 >> 2] | 0; //@line 2668
 $25 = HEAP32[(HEAP32[$22 >> 2] | 0) + 76 >> 2] | 0; //@line 2671
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 2672
 $26 = FUNCTION_TABLE_iiiiii[$25 & 7]($22, $20, $2, $12, $14) | 0; //@line 2673
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 2676
  $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 2677
  HEAP32[$27 >> 2] = $19; //@line 2678
  $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 2679
  HEAP32[$28 >> 2] = $8; //@line 2680
  $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 2681
  HEAP32[$29 >> 2] = $17; //@line 2682
  $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 2683
  HEAP32[$30 >> 2] = $18; //@line 2684
  $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 2685
  HEAP32[$31 >> 2] = $10; //@line 2686
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 2687
  HEAP32[$32 >> 2] = $2; //@line 2688
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 2689
  HEAP32[$33 >> 2] = $12; //@line 2690
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 2691
  HEAP32[$34 >> 2] = $14; //@line 2692
  sp = STACKTOP; //@line 2693
  return;
 }
 HEAP32[___async_retval >> 2] = $26; //@line 2697
 ___async_unwind = 0; //@line 2698
 HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 2699
 $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 2700
 HEAP32[$27 >> 2] = $19; //@line 2701
 $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 2702
 HEAP32[$28 >> 2] = $8; //@line 2703
 $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 2704
 HEAP32[$29 >> 2] = $17; //@line 2705
 $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 2706
 HEAP32[$30 >> 2] = $18; //@line 2707
 $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 2708
 HEAP32[$31 >> 2] = $10; //@line 2709
 $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 2710
 HEAP32[$32 >> 2] = $2; //@line 2711
 $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 2712
 HEAP32[$33 >> 2] = $12; //@line 2713
 $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 2714
 HEAP32[$34 >> 2] = $14; //@line 2715
 sp = STACKTOP; //@line 2716
 return;
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb_111($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2724
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2726
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2728
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2730
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2732
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2734
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2736
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2738
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2740
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2742
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$0 = $AsyncRetVal; //@line 2748
  $37 = ___async_retval; //@line 2749
  HEAP32[$37 >> 2] = $$0; //@line 2750
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 2753
 if (!$18) {
  $$0 = -3005; //@line 2756
  $37 = ___async_retval; //@line 2757
  HEAP32[$37 >> 2] = $$0; //@line 2758
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 2761
 $20 = HEAP32[$10 >> 2] | 0; //@line 2762
 $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 76 >> 2] | 0; //@line 2765
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 2766
 $24 = FUNCTION_TABLE_iiiiii[$23 & 7]($20, $18, $12, $14, $16) | 0; //@line 2767
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 2770
  $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 2771
  HEAP32[$25 >> 2] = $2; //@line 2772
  $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 2773
  HEAP32[$26 >> 2] = $4; //@line 2774
  $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 2775
  HEAP32[$27 >> 2] = $6; //@line 2776
  $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 2777
  HEAP32[$28 >> 2] = $8; //@line 2778
  $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 2779
  HEAP32[$29 >> 2] = $10; //@line 2780
  $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 2781
  HEAP32[$30 >> 2] = $12; //@line 2782
  $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 2783
  HEAP32[$31 >> 2] = $14; //@line 2784
  $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 2785
  HEAP32[$32 >> 2] = $16; //@line 2786
  sp = STACKTOP; //@line 2787
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 2791
 ___async_unwind = 0; //@line 2792
 HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 2793
 $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 2794
 HEAP32[$25 >> 2] = $2; //@line 2795
 $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 2796
 HEAP32[$26 >> 2] = $4; //@line 2797
 $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 2798
 HEAP32[$27 >> 2] = $6; //@line 2799
 $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 2800
 HEAP32[$28 >> 2] = $8; //@line 2801
 $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 2802
 HEAP32[$29 >> 2] = $10; //@line 2803
 $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 2804
 HEAP32[$30 >> 2] = $12; //@line 2805
 $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 2806
 HEAP32[$31 >> 2] = $14; //@line 2807
 $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 2808
 HEAP32[$32 >> 2] = $16; //@line 2809
 sp = STACKTOP; //@line 2810
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1 = 0, $13 = 0, $14 = 0, $21 = 0, $28 = 0, $29 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 416
 $5 = $1 + 8 | 0; //@line 417
 do {
  if (!(HEAP8[$5 >> 0] | 0)) {
   label = 7; //@line 422
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$5 >> 0] | 0)) {
     label = 7; //@line 430
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 436
   _puts(1746) | 0; //@line 437
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 37; //@line 440
    sp = STACKTOP; //@line 441
    return 0; //@line 442
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 444
   $$1 = -3012; //@line 445
   return $$1 | 0; //@line 446
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 108 >> 2] | 0; //@line 453
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 454
   $14 = FUNCTION_TABLE_iiii[$13 & 31]($0, $1, $2) | 0; //@line 455
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 38; //@line 458
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 460
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 462
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 464
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 466
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 468
    sp = STACKTOP; //@line 469
    return 0; //@line 470
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 472
   if (($14 | 0) < 0) {
    $$1 = $14; //@line 475
    return $$1 | 0; //@line 476
   } else {
    $21 = $1 + 12 | 0; //@line 478
    dest = $21; //@line 479
    src = $2; //@line 479
    stop = dest + 60 | 0; //@line 479
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 479
     dest = dest + 4 | 0; //@line 479
     src = src + 4 | 0; //@line 479
    } while ((dest | 0) < (stop | 0));
    HEAP16[$21 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 479
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 484
 _wait_ms(1); //@line 485
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 39; //@line 488
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 490
  HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 492
  HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 494
  HEAP32[$AsyncCtx10 + 16 >> 2] = $4; //@line 496
  sp = STACKTOP; //@line 497
  return 0; //@line 498
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 500
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 116 >> 2] | 0; //@line 503
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 504
 $29 = FUNCTION_TABLE_iiiii[$28 & 15]($0, $1, $3, $4) | 0; //@line 505
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 40; //@line 508
  sp = STACKTOP; //@line 509
  return 0; //@line 510
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 512
 $$1 = $29; //@line 513
 return $$1 | 0; //@line 514
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$010 = 0, $$1 = 0, $$byval_copy = 0, $14 = 0, $15 = 0, $24 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2981
 STACKTOP = STACKTOP + 112 | 0; //@line 2982
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 2982
 $$byval_copy = sp + 88 | 0; //@line 2983
 $4 = sp + 24 | 0; //@line 2984
 $5 = sp; //@line 2985
 if (!(HEAP8[$1 >> 0] | 0)) {
  $$010 = -3003; //@line 2989
  STACKTOP = sp; //@line 2990
  return $$010 | 0; //@line 2990
 }
 $9 = ($3 | 0) == 0; //@line 2993
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, $1) | 0) {
  if (!$9) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($2) | 0) != ($3 | 0)) {
    $$010 = -3009; //@line 2999
    STACKTOP = sp; //@line 3000
    return $$010 | 0; //@line 3000
   }
  }
  $$010 = 0; //@line 3003
  STACKTOP = sp; //@line 3004
  return $$010 | 0; //@line 3004
 }
 if ($9) {
  HEAP32[$5 >> 2] = 0; //@line 3007
  HEAP32[$5 + 4 >> 2] = 0; //@line 3007
  HEAP32[$5 + 8 >> 2] = 0; //@line 3007
  HEAP32[$5 + 12 >> 2] = 0; //@line 3007
  HEAP32[$5 + 16 >> 2] = 0; //@line 3007
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 3008
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 3008
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 3008
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 3008
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 3008
  __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy, 0); //@line 3009
  $14 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3012
  $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 3013
  $15 = FUNCTION_TABLE_ii[$14 & 31]($0) | 0; //@line 3014
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 86; //@line 3017
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3019
   HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3021
   HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 3023
   HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 3025
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 3027
   HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 3029
   sp = STACKTOP; //@line 3030
   STACKTOP = sp; //@line 3031
   return 0; //@line 3031
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3033
  if (__ZN13SocketAddress14set_ip_addressEPKc($4, $15) | 0) {
   $$0 = __ZNK13SocketAddress14get_ip_versionEv($4) | 0; //@line 3037
  } else {
   $$0 = 0; //@line 3039
  }
  $$1 = $$0; //@line 3041
 } else {
  $$1 = $3; //@line 3043
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3045
 $24 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $$1) | 0; //@line 3046
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 87; //@line 3049
  sp = STACKTOP; //@line 3050
  STACKTOP = sp; //@line 3051
  return 0; //@line 3051
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3053
 $$010 = $24; //@line 3054
 STACKTOP = sp; //@line 3055
 return $$010 | 0; //@line 3055
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4388
 STACKTOP = STACKTOP + 48 | 0; //@line 4389
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 4389
 $vararg_buffer3 = sp + 16 | 0; //@line 4390
 $vararg_buffer = sp; //@line 4391
 $3 = sp + 32 | 0; //@line 4392
 $4 = $0 + 28 | 0; //@line 4393
 $5 = HEAP32[$4 >> 2] | 0; //@line 4394
 HEAP32[$3 >> 2] = $5; //@line 4395
 $7 = $0 + 20 | 0; //@line 4397
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 4399
 HEAP32[$3 + 4 >> 2] = $9; //@line 4400
 HEAP32[$3 + 8 >> 2] = $1; //@line 4402
 HEAP32[$3 + 12 >> 2] = $2; //@line 4404
 $12 = $9 + $2 | 0; //@line 4405
 $13 = $0 + 60 | 0; //@line 4406
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 4409
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 4411
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 4413
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 4415
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 4419
  } else {
   $$04756 = 2; //@line 4421
   $$04855 = $12; //@line 4421
   $$04954 = $3; //@line 4421
   $27 = $17; //@line 4421
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 4427
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 4429
    $38 = $27 >>> 0 > $37 >>> 0; //@line 4430
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 4432
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 4434
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 4436
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 4439
    $44 = $$150 + 4 | 0; //@line 4440
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 4443
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 4446
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 4448
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 4450
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 4452
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 4455
     break L1;
    } else {
     $$04756 = $$1; //@line 4458
     $$04954 = $$150; //@line 4458
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 4462
   HEAP32[$4 >> 2] = 0; //@line 4463
   HEAP32[$7 >> 2] = 0; //@line 4464
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 4467
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 4470
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 4475
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 4481
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4486
  $25 = $20; //@line 4487
  HEAP32[$4 >> 2] = $25; //@line 4488
  HEAP32[$7 >> 2] = $25; //@line 4489
  $$051 = $2; //@line 4490
 }
 STACKTOP = sp; //@line 4492
 return $$051 | 0; //@line 4492
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_65($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 22683
 STACKTOP = STACKTOP + 32 | 0; //@line 22684
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 22684
 $$byval_copy = sp; //@line 22685
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22687
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22689
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22691
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22693
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22695
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22697
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22699
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22701
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22703
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22705
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22707
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22709
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22711
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  HEAP8[$12 >> 0] = 5; //@line 22716
  $31 = 608 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 22719
  HEAP32[$$byval_copy >> 2] = HEAP32[$31 >> 2]; //@line 22720
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 22720
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$31 + 8 >> 2]; //@line 22720
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$31 + 12 >> 2]; //@line 22720
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$31 + 16 >> 2]; //@line 22720
  __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy); //@line 22721
 }
 __ZN13SocketAddress8set_portEt($6, 53); //@line 22723
 $32 = HEAP32[$8 >> 2] | 0; //@line 22724
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 22725
 $33 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($32, $6, $2, $10) | 0; //@line 22726
 if (!___async) {
  HEAP32[___async_retval >> 2] = $33; //@line 22730
  ___async_unwind = 0; //@line 22731
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 241; //@line 22733
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 22735
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 22737
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 22739
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 22741
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 22743
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 22745
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 22747
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 22749
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $18; //@line 22751
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $20; //@line 22753
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $22; //@line 22755
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $24; //@line 22757
 HEAP32[$ReallocAsyncCtx12 + 52 >> 2] = $26; //@line 22759
 sp = STACKTOP; //@line 22760
 STACKTOP = sp; //@line 22761
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_16($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17123
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17127
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17129
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17131
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17133
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17135
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17136
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 17140
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 17141
  FUNCTION_TABLE_vi[$16 & 511]($6); //@line 17142
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 96; //@line 17145
   $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 17146
   HEAP32[$17 >> 2] = $4; //@line 17147
   $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 17148
   HEAP32[$18 >> 2] = $8; //@line 17149
   $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 17150
   HEAP32[$19 >> 2] = $10; //@line 17151
   $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 17152
   HEAP32[$20 >> 2] = $12; //@line 17153
   sp = STACKTOP; //@line 17154
   return;
  }
  ___async_unwind = 0; //@line 17157
  HEAP32[$ReallocAsyncCtx7 >> 2] = 96; //@line 17158
  $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 17159
  HEAP32[$17 >> 2] = $4; //@line 17160
  $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 17161
  HEAP32[$18 >> 2] = $8; //@line 17162
  $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 17163
  HEAP32[$19 >> 2] = $10; //@line 17164
  $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 17165
  HEAP32[$20 >> 2] = $12; //@line 17166
  sp = STACKTOP; //@line 17167
  return;
 }
 $21 = HEAP32[$4 >> 2] | 0; //@line 17170
 if (!$21) {
  HEAP32[___async_retval >> 2] = $10; //@line 17174
  return;
 }
 $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 17178
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 17179
 FUNCTION_TABLE_vi[$24 & 511]($8); //@line 17180
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 17183
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 17184
  HEAP32[$25 >> 2] = $8; //@line 17185
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 17186
  HEAP32[$26 >> 2] = $10; //@line 17187
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 17188
  HEAP32[$27 >> 2] = $12; //@line 17189
  sp = STACKTOP; //@line 17190
  return;
 }
 ___async_unwind = 0; //@line 17193
 HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 17194
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 17195
 HEAP32[$25 >> 2] = $8; //@line 17196
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 17197
 HEAP32[$26 >> 2] = $10; //@line 17198
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 17199
 HEAP32[$27 >> 2] = $12; //@line 17200
 sp = STACKTOP; //@line 17201
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_125($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 3586
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3588
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3590
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3592
 $7 = $4 + 28 | 0; //@line 3593
 $8 = HEAP32[$7 >> 2] | 0; //@line 3594
 if (!$8) {
  $18 = $2 + 12 | 0; //@line 3597
  HEAP32[$18 >> 2] = 0; //@line 3598
  $19 = HEAP32[$4 >> 2] | 0; //@line 3599
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 3600
  __ZL28nsapi_dns_query_async_deletei($19); //@line 3601
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 208; //@line 3604
   $20 = $ReallocAsyncCtx14 + 4 | 0; //@line 3605
   HEAP32[$20 >> 2] = $18; //@line 3606
   $21 = $ReallocAsyncCtx14 + 8 | 0; //@line 3607
   HEAP32[$21 >> 2] = $2; //@line 3608
   $22 = $ReallocAsyncCtx14 + 12 | 0; //@line 3609
   HEAP32[$22 >> 2] = $6; //@line 3610
   sp = STACKTOP; //@line 3611
   return;
  }
  ___async_unwind = 0; //@line 3614
  HEAP32[$ReallocAsyncCtx14 >> 2] = 208; //@line 3615
  $20 = $ReallocAsyncCtx14 + 4 | 0; //@line 3616
  HEAP32[$20 >> 2] = $18; //@line 3617
  $21 = $ReallocAsyncCtx14 + 8 | 0; //@line 3618
  HEAP32[$21 >> 2] = $2; //@line 3619
  $22 = $ReallocAsyncCtx14 + 12 | 0; //@line 3620
  HEAP32[$22 >> 2] = $6; //@line 3621
  sp = STACKTOP; //@line 3622
  return;
 } else {
  $12 = HEAP32[$8 + 4 >> 2] | 0; //@line 3627
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 3628
  FUNCTION_TABLE_vii[$12 & 7]($2, $4 + 16 | 0); //@line 3629
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 3632
   $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 3633
   HEAP32[$13 >> 2] = $7; //@line 3634
   $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 3635
   HEAP32[$14 >> 2] = $2; //@line 3636
   $15 = $ReallocAsyncCtx5 + 12 | 0; //@line 3637
   HEAP32[$15 >> 2] = $4; //@line 3638
   $16 = $ReallocAsyncCtx5 + 16 | 0; //@line 3639
   HEAP32[$16 >> 2] = $2; //@line 3640
   $17 = $ReallocAsyncCtx5 + 20 | 0; //@line 3641
   HEAP32[$17 >> 2] = $6; //@line 3642
   sp = STACKTOP; //@line 3643
   return;
  }
  ___async_unwind = 0; //@line 3646
  HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 3647
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 3648
  HEAP32[$13 >> 2] = $7; //@line 3649
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 3650
  HEAP32[$14 >> 2] = $2; //@line 3651
  $15 = $ReallocAsyncCtx5 + 12 | 0; //@line 3652
  HEAP32[$15 >> 2] = $4; //@line 3653
  $16 = $ReallocAsyncCtx5 + 16 | 0; //@line 3654
  HEAP32[$16 >> 2] = $2; //@line 3655
  $17 = $ReallocAsyncCtx5 + 20 | 0; //@line 3656
  HEAP32[$17 >> 2] = $6; //@line 3657
  sp = STACKTOP; //@line 3658
  return;
 }
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4954
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4956
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4958
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4960
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4962
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4964
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4966
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4968
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4970
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 4976
  $34 = ___async_retval; //@line 4977
  HEAP32[$34 >> 2] = $$2; //@line 4978
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 4981
 if (!$16) {
  $$2 = -3005; //@line 4984
  $34 = ___async_retval; //@line 4985
  HEAP32[$34 >> 2] = $$2; //@line 4986
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 4989
 $18 = HEAP32[$8 >> 2] | 0; //@line 4990
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 80 >> 2] | 0; //@line 4993
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 4994
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 4995
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 141; //@line 4998
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 4999
  HEAP32[$23 >> 2] = $2; //@line 5000
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 5001
  HEAP32[$24 >> 2] = $4; //@line 5002
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 5003
  HEAP32[$25 >> 2] = $6; //@line 5004
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 5005
  HEAP32[$26 >> 2] = $8; //@line 5006
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 5007
  HEAP32[$27 >> 2] = $10; //@line 5008
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 5009
  HEAP32[$28 >> 2] = $12; //@line 5010
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 5011
  HEAP32[$29 >> 2] = $14; //@line 5012
  sp = STACKTOP; //@line 5013
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 5017
 ___async_unwind = 0; //@line 5018
 HEAP32[$ReallocAsyncCtx >> 2] = 141; //@line 5019
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 5020
 HEAP32[$23 >> 2] = $2; //@line 5021
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 5022
 HEAP32[$24 >> 2] = $4; //@line 5023
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 5024
 HEAP32[$25 >> 2] = $6; //@line 5025
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 5026
 HEAP32[$26 >> 2] = $8; //@line 5027
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 5028
 HEAP32[$27 >> 2] = $10; //@line 5029
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 5030
 HEAP32[$28 >> 2] = $12; //@line 5031
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 5032
 HEAP32[$29 >> 2] = $14; //@line 5033
 sp = STACKTOP; //@line 5034
 return;
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2471
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2473
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2475
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2477
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2479
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2481
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2483
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2485
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2487
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 2493
  $34 = ___async_retval; //@line 2494
  HEAP32[$34 >> 2] = $$2; //@line 2495
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 2498
 if (!$16) {
  $$2 = -3005; //@line 2501
  $34 = ___async_retval; //@line 2502
  HEAP32[$34 >> 2] = $$2; //@line 2503
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 2506
 $18 = HEAP32[$8 >> 2] | 0; //@line 2507
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 76 >> 2] | 0; //@line 2510
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 2511
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 2512
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 140; //@line 2515
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 2516
  HEAP32[$23 >> 2] = $2; //@line 2517
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 2518
  HEAP32[$24 >> 2] = $4; //@line 2519
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 2520
  HEAP32[$25 >> 2] = $6; //@line 2521
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 2522
  HEAP32[$26 >> 2] = $8; //@line 2523
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 2524
  HEAP32[$27 >> 2] = $10; //@line 2525
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 2526
  HEAP32[$28 >> 2] = $12; //@line 2527
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 2528
  HEAP32[$29 >> 2] = $14; //@line 2529
  sp = STACKTOP; //@line 2530
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 2534
 ___async_unwind = 0; //@line 2535
 HEAP32[$ReallocAsyncCtx >> 2] = 140; //@line 2536
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 2537
 HEAP32[$23 >> 2] = $2; //@line 2538
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 2539
 HEAP32[$24 >> 2] = $4; //@line 2540
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 2541
 HEAP32[$25 >> 2] = $6; //@line 2542
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 2543
 HEAP32[$26 >> 2] = $8; //@line 2544
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 2545
 HEAP32[$27 >> 2] = $10; //@line 2546
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 2547
 HEAP32[$28 >> 2] = $12; //@line 2548
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 2549
 HEAP32[$29 >> 2] = $14; //@line 2550
 sp = STACKTOP; //@line 2551
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_53($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20598
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20604
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20606
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20608
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20610
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20612
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20613
 $15 = $$pre$i$i; //@line 20614
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 20615
 if (!$$pre$i$i) {
  $24 = HEAP32[$8 >> 2] | 0; //@line 20618
  $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 84 >> 2] | 0; //@line 20621
  $28 = HEAP32[$10 >> 2] | 0; //@line 20622
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 20623
  FUNCTION_TABLE_viiii[$27 & 7]($24, $28, 123, $12); //@line 20624
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 124; //@line 20627
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 20628
   HEAP32[$29 >> 2] = $14; //@line 20629
   sp = STACKTOP; //@line 20630
   return;
  }
  ___async_unwind = 0; //@line 20633
  HEAP32[$ReallocAsyncCtx6 >> 2] = 124; //@line 20634
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 20635
  HEAP32[$29 >> 2] = $14; //@line 20636
  sp = STACKTOP; //@line 20637
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 20641
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 20642
  FUNCTION_TABLE_vi[$18 & 511]($6); //@line 20643
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 122; //@line 20646
   $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 20647
   HEAP32[$19 >> 2] = $6; //@line 20648
   $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 20649
   HEAP32[$20 >> 2] = $8; //@line 20650
   $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 20651
   HEAP32[$21 >> 2] = $10; //@line 20652
   $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 20653
   HEAP32[$22 >> 2] = $12; //@line 20654
   $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 20655
   HEAP32[$23 >> 2] = $14; //@line 20656
   sp = STACKTOP; //@line 20657
   return;
  }
  ___async_unwind = 0; //@line 20660
  HEAP32[$ReallocAsyncCtx5 >> 2] = 122; //@line 20661
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 20662
  HEAP32[$19 >> 2] = $6; //@line 20663
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 20664
  HEAP32[$20 >> 2] = $8; //@line 20665
  $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 20666
  HEAP32[$21 >> 2] = $10; //@line 20667
  $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 20668
  HEAP32[$22 >> 2] = $12; //@line 20669
  $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 20670
  HEAP32[$23 >> 2] = $14; //@line 20671
  sp = STACKTOP; //@line 20672
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_5($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16159
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16163
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16165
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16167
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16169
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16171
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16173
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16175
 $$pre = HEAP32[$4 >> 2] | 0; //@line 16177
 $17 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 16178
 if ($$pre | 0) {
  $20 = HEAP32[$$pre + 4 >> 2] | 0; //@line 16182
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 16183
  FUNCTION_TABLE_vii[$20 & 7]($14, $12); //@line 16184
  if (!___async) {
   ___async_unwind = 0; //@line 16187
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 259; //@line 16189
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $16; //@line 16191
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 16193
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 16195
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $10; //@line 16197
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $17; //@line 16199
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $14; //@line 16201
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 16203
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $12; //@line 16205
  sp = STACKTOP; //@line 16206
  return;
 }
 $29 = $8 + 12 | 0; //@line 16209
 HEAP32[$29 >> 2] = 0; //@line 16210
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 16211
 $30 = FUNCTION_TABLE_iiii[$17 & 31]($6, $10, $8) | 0; //@line 16212
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 16215
  $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 16216
  HEAP32[$31 >> 2] = $29; //@line 16217
  $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 16218
  HEAP32[$32 >> 2] = $14; //@line 16219
  $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 16220
  HEAP32[$33 >> 2] = $4; //@line 16221
  $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 16222
  HEAP32[$34 >> 2] = $12; //@line 16223
  sp = STACKTOP; //@line 16224
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 16228
 ___async_unwind = 0; //@line 16229
 HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 16230
 $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 16231
 HEAP32[$31 >> 2] = $29; //@line 16232
 $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 16233
 HEAP32[$32 >> 2] = $14; //@line 16234
 $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 16235
 HEAP32[$33 >> 2] = $4; //@line 16236
 $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 16237
 HEAP32[$34 >> 2] = $12; //@line 16238
 sp = STACKTOP; //@line 16239
 return;
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 12679
 STACKTOP = STACKTOP + 128 | 0; //@line 12680
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 12680
 $2 = sp; //@line 12681
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12682
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 12683
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 285; //@line 12686
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 12688
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 12690
  sp = STACKTOP; //@line 12691
  STACKTOP = sp; //@line 12692
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12694
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 12697
  return;
 }
 if (!(HEAP32[1690] | 0)) {
  _serial_init(6764, 2, 3); //@line 12702
  $$01213 = 0; //@line 12703
  $$014 = 0; //@line 12703
 } else {
  $$01213 = 0; //@line 12705
  $$014 = 0; //@line 12705
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 12709
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12714
   _serial_putc(6764, 13); //@line 12715
   if (___async) {
    label = 8; //@line 12718
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12721
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12724
  _serial_putc(6764, $$01213 << 24 >> 24); //@line 12725
  if (___async) {
   label = 11; //@line 12728
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12731
  $24 = $$014 + 1 | 0; //@line 12732
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 12735
   break;
  } else {
   $$014 = $24; //@line 12738
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 286; //@line 12742
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 12744
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 12746
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 12748
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 12750
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 12752
  sp = STACKTOP; //@line 12753
  STACKTOP = sp; //@line 12754
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 287; //@line 12757
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 12759
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 12761
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 12763
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 12765
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 12767
  sp = STACKTOP; //@line 12768
  STACKTOP = sp; //@line 12769
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 12772
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_44($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19800
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19804
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19806
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 19808
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19810
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 19812
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19814
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19816
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19818
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19820
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 19823
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19825
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 19829
   $27 = $6 + 24 | 0; //@line 19830
   $28 = $4 + 8 | 0; //@line 19831
   $29 = $6 + 54 | 0; //@line 19832
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 19862
    HEAP8[$14 >> 0] = 0; //@line 19863
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 19864
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 19865
    if (!___async) {
     ___async_unwind = 0; //@line 19868
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 343; //@line 19870
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 19872
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 19874
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 19876
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 19878
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 19880
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 19882
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 19884
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 19886
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 19888
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 19890
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 19892
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 19894
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 19896
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 19899
    sp = STACKTOP; //@line 19900
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 19905
 HEAP8[$14 >> 0] = $12; //@line 19906
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19684
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19688
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19690
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 19692
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19694
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 19696
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19698
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19700
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19702
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19704
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19706
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19708
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19710
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 19713
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 19714
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 19747
    HEAP8[$14 >> 0] = 0; //@line 19748
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 19749
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 19750
    if (!___async) {
     ___async_unwind = 0; //@line 19753
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 343; //@line 19755
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 19757
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 19759
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 19761
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 19763
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 19765
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 19767
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 19769
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 19771
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 19773
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 19775
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 19777
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 19779
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 19781
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 19784
    sp = STACKTOP; //@line 19785
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 19790
 HEAP8[$14 >> 0] = $12; //@line 19791
 return;
}
function ___stpcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $9 = 0, label = 0;
 $2 = $1; //@line 13468
 L1 : do {
  if (!(($2 ^ $0) & 3)) {
   if (!($2 & 3)) {
    $$026$lcssa = $1; //@line 13478
    $$027$lcssa = $0; //@line 13478
   } else {
    $$02642 = $1; //@line 13480
    $$02741 = $0; //@line 13480
    while (1) {
     $9 = HEAP8[$$02642 >> 0] | 0; //@line 13482
     HEAP8[$$02741 >> 0] = $9; //@line 13483
     if (!($9 << 24 >> 24)) {
      $$029 = $$02741; //@line 13486
      break L1;
     }
     $11 = $$02642 + 1 | 0; //@line 13489
     $12 = $$02741 + 1 | 0; //@line 13490
     if (!($11 & 3)) {
      $$026$lcssa = $11; //@line 13495
      $$027$lcssa = $12; //@line 13495
      break;
     } else {
      $$02642 = $11; //@line 13498
      $$02741 = $12; //@line 13498
     }
    }
   }
   $16 = HEAP32[$$026$lcssa >> 2] | 0; //@line 13502
   if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
    $$02536 = $$027$lcssa; //@line 13509
    $$037 = $$026$lcssa; //@line 13509
    $24 = $16; //@line 13509
    while (1) {
     $22 = $$037 + 4 | 0; //@line 13511
     $23 = $$02536 + 4 | 0; //@line 13512
     HEAP32[$$02536 >> 2] = $24; //@line 13513
     $24 = HEAP32[$22 >> 2] | 0; //@line 13514
     if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
      $$0$lcssa = $22; //@line 13523
      $$025$lcssa = $23; //@line 13523
      break;
     } else {
      $$02536 = $23; //@line 13521
      $$037 = $22; //@line 13521
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa; //@line 13528
    $$025$lcssa = $$027$lcssa; //@line 13528
   }
   $$1$ph = $$0$lcssa; //@line 13530
   $$128$ph = $$025$lcssa; //@line 13530
   label = 8; //@line 13531
  } else {
   $$1$ph = $1; //@line 13533
   $$128$ph = $0; //@line 13533
   label = 8; //@line 13534
  }
 } while (0);
 if ((label | 0) == 8) {
  $31 = HEAP8[$$1$ph >> 0] | 0; //@line 13538
  HEAP8[$$128$ph >> 0] = $31; //@line 13539
  if (!($31 << 24 >> 24)) {
   $$029 = $$128$ph; //@line 13542
  } else {
   $$12834 = $$128$ph; //@line 13544
   $$135 = $$1$ph; //@line 13544
   while (1) {
    $$135 = $$135 + 1 | 0; //@line 13546
    $34 = $$12834 + 1 | 0; //@line 13547
    $35 = HEAP8[$$135 >> 0] | 0; //@line 13548
    HEAP8[$34 >> 0] = $35; //@line 13549
    if (!($35 << 24 >> 24)) {
     $$029 = $34; //@line 13552
     break;
    } else {
     $$12834 = $34; //@line 13555
    }
   }
  }
 }
 return $$029 | 0; //@line 13560
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1281
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1287
   _wait_ms(10); //@line 1288
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 56; //@line 1291
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1293
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 1295
    sp = STACKTOP; //@line 1296
    return 0; //@line 1297
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1299
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 1305
 $9 = $0 + 156 | 0; //@line 1306
 _equeue_mutex_lock($9); //@line 1307
 $10 = $0 + 24 | 0; //@line 1308
 $11 = HEAP32[$10 >> 2] | 0; //@line 1309
 L7 : do {
  if (!$11) {
   label = 11; //@line 1313
  } else {
   $$03842$i = $10; //@line 1315
   $14 = $11; //@line 1315
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 1322
    $21 = HEAP32[$20 >> 2] | 0; //@line 1323
    if (!$21) {
     label = 11; //@line 1326
     break L7;
    } else {
     $$03842$i = $20; //@line 1329
     $14 = $21; //@line 1329
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 1333
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 1336
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 1338
    $$038$sink$i = $17 + 8 | 0; //@line 1340
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 1344
   _equeue_mutex_unlock($9); //@line 1345
   $$1$i9 = $14; //@line 1346
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 1351
   $24 = HEAP32[$23 >> 2] | 0; //@line 1352
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 1355
    $$0 = 0; //@line 1356
    return $$0 | 0; //@line 1357
   } else {
    $26 = $0 + 32 | 0; //@line 1359
    $27 = HEAP32[$26 >> 2] | 0; //@line 1360
    HEAP32[$26 >> 2] = $27 + $8; //@line 1362
    HEAP32[$23 >> 2] = $24 - $8; //@line 1364
    HEAP32[$27 >> 2] = $8; //@line 1365
    HEAP8[$27 + 4 >> 0] = 1; //@line 1367
    _equeue_mutex_unlock($9); //@line 1368
    if (!$27) {
     $$0 = 0; //@line 1371
    } else {
     $$1$i9 = $27; //@line 1373
     break;
    }
    return $$0 | 0; //@line 1376
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 1381
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 1383
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 1385
 $$0 = $$1$i9 + 36 | 0; //@line 1387
 return $$0 | 0; //@line 1388
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 314
 }
 ret = dest | 0; //@line 317
 dest_end = dest + num | 0; //@line 318
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 322
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 323
   dest = dest + 1 | 0; //@line 324
   src = src + 1 | 0; //@line 325
   num = num - 1 | 0; //@line 326
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 328
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 329
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 331
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 332
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 333
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 334
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 335
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 336
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 337
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 338
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 339
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 340
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 341
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 342
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 343
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 344
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 345
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 346
   dest = dest + 64 | 0; //@line 347
   src = src + 64 | 0; //@line 348
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 351
   dest = dest + 4 | 0; //@line 352
   src = src + 4 | 0; //@line 353
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 357
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 359
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 360
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 361
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 362
   dest = dest + 4 | 0; //@line 363
   src = src + 4 | 0; //@line 364
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 369
  dest = dest + 1 | 0; //@line 370
  src = src + 1 | 0; //@line 371
 }
 return ret | 0; //@line 373
}
function _main__async_cb_173($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 6543
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6545
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6547
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6549
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6551
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6553
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6555
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6557
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6559
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6561
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6563
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6565
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6567
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6569
 __ZN17EthernetInterfaceC2Ev($2); //@line 6570
 if (!(__ZN17EthernetInterface7connectEv($2) | 0)) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(56) | 0; //@line 6574
  $30 = __ZN17EthernetInterface14get_ip_addressEv($2) | 0; //@line 6575
  if (!___async) {
   HEAP32[___async_retval >> 2] = $30; //@line 6579
   ___async_unwind = 0; //@line 6580
  }
  HEAP32[$ReallocAsyncCtx11 >> 2] = 295; //@line 6582
  HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $4; //@line 6584
  HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $2; //@line 6586
  HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $16; //@line 6588
  HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $18; //@line 6590
  HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $20; //@line 6592
  HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $22; //@line 6594
  HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $12; //@line 6596
  HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $14; //@line 6598
  HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $24; //@line 6600
  HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $26; //@line 6602
  HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $6; //@line 6604
  HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $8; //@line 6606
  HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $10; //@line 6608
  sp = STACKTOP; //@line 6609
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 6612
 _puts(3083) | 0; //@line 6613
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 294; //@line 6616
  $29 = $ReallocAsyncCtx + 4 | 0; //@line 6617
  HEAP32[$29 >> 2] = $2; //@line 6618
  sp = STACKTOP; //@line 6619
  return;
 }
 ___async_unwind = 0; //@line 6622
 HEAP32[$ReallocAsyncCtx >> 2] = 294; //@line 6623
 $29 = $ReallocAsyncCtx + 4 | 0; //@line 6624
 HEAP32[$29 >> 2] = $2; //@line 6625
 sp = STACKTOP; //@line 6626
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_145($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5206
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5210
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5212
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5214
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5216
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5217
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 5221
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 5222
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 5223
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 114; //@line 5226
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 5227
   HEAP32[$14 >> 2] = $4; //@line 5228
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 5229
   HEAP32[$15 >> 2] = $6; //@line 5230
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 5231
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 5232
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 5233
   HEAP32[$17 >> 2] = $8; //@line 5234
   sp = STACKTOP; //@line 5235
   return;
  }
  ___async_unwind = 0; //@line 5238
  HEAP32[$ReallocAsyncCtx4 >> 2] = 114; //@line 5239
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 5240
  HEAP32[$14 >> 2] = $4; //@line 5241
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 5242
  HEAP32[$15 >> 2] = $6; //@line 5243
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 5244
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 5245
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 5246
  HEAP32[$17 >> 2] = $8; //@line 5247
  sp = STACKTOP; //@line 5248
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 5251
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 5255
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 5259
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 5260
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 5261
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 115; //@line 5264
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 5265
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 5266
  sp = STACKTOP; //@line 5267
  return;
 }
 ___async_unwind = 0; //@line 5270
 HEAP32[$ReallocAsyncCtx5 >> 2] = 115; //@line 5271
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 5272
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 5273
 sp = STACKTOP; //@line 5274
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_2($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16035
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16039
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16041
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16043
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16045
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16046
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 16050
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 16051
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 16052
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 261; //@line 16055
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 16056
   HEAP32[$14 >> 2] = $4; //@line 16057
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 16058
   HEAP32[$15 >> 2] = $6; //@line 16059
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 16060
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 16061
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 16062
   HEAP32[$17 >> 2] = $8; //@line 16063
   sp = STACKTOP; //@line 16064
   return;
  }
  ___async_unwind = 0; //@line 16067
  HEAP32[$ReallocAsyncCtx4 >> 2] = 261; //@line 16068
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 16069
  HEAP32[$14 >> 2] = $4; //@line 16070
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 16071
  HEAP32[$15 >> 2] = $6; //@line 16072
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 16073
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 16074
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 16075
  HEAP32[$17 >> 2] = $8; //@line 16076
  sp = STACKTOP; //@line 16077
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 16080
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16084
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 16088
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 16089
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 16090
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 16093
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 16094
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 16095
  sp = STACKTOP; //@line 16096
  return;
 }
 ___async_unwind = 0; //@line 16099
 HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 16100
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 16101
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 16102
 sp = STACKTOP; //@line 16103
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14200
 STACKTOP = STACKTOP + 64 | 0; //@line 14201
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14201
 $3 = sp; //@line 14202
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 14205
 } else {
  if (!$1) {
   $$2 = 0; //@line 14209
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14211
   $6 = ___dynamic_cast($1, 128, 112, 0) | 0; //@line 14212
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 332; //@line 14215
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 14217
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14219
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 14221
    sp = STACKTOP; //@line 14222
    STACKTOP = sp; //@line 14223
    return 0; //@line 14223
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14225
   if (!$6) {
    $$2 = 0; //@line 14228
   } else {
    dest = $3 + 4 | 0; //@line 14231
    stop = dest + 52 | 0; //@line 14231
    do {
     HEAP32[dest >> 2] = 0; //@line 14231
     dest = dest + 4 | 0; //@line 14231
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 14232
    HEAP32[$3 + 8 >> 2] = $0; //@line 14234
    HEAP32[$3 + 12 >> 2] = -1; //@line 14236
    HEAP32[$3 + 48 >> 2] = 1; //@line 14238
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 14241
    $18 = HEAP32[$2 >> 2] | 0; //@line 14242
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14243
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 14244
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 333; //@line 14247
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14249
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14251
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 14253
     sp = STACKTOP; //@line 14254
     STACKTOP = sp; //@line 14255
     return 0; //@line 14255
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14257
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 14264
     $$0 = 1; //@line 14265
    } else {
     $$0 = 0; //@line 14267
    }
    $$2 = $$0; //@line 14269
   }
  }
 }
 STACKTOP = sp; //@line 14273
 return $$2 | 0; //@line 14273
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_195($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 9955
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9957
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9959
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9961
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9963
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9965
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9967
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9969
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9971
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9973
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9975
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9977
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9979
 if (!$AsyncRetVal) {
  HEAP32[___async_retval >> 2] = -3007; //@line 9983
  return;
 }
 $25 = $AsyncRetVal + 16 | 0; //@line 9986
 HEAP32[$25 >> 2] = 0; //@line 9987
 HEAP32[$25 + 4 >> 2] = 0; //@line 9987
 HEAP32[$25 + 8 >> 2] = 0; //@line 9987
 HEAP32[$25 + 12 >> 2] = 0; //@line 9987
 HEAP32[$25 + 16 >> 2] = 0; //@line 9987
 HEAP32[$25 + 20 >> 2] = 0; //@line 9987
 HEAP32[$25 + 24 >> 2] = 0; //@line 9987
 HEAP32[$25 + 28 >> 2] = 0; //@line 9987
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(52) | 0; //@line 9991
 $29 = __ZnajRKSt9nothrow_t(($20 | 0) < -1 ? -1 : $20 + 1 | 0, 8661) | 0; //@line 9992
 if (!___async) {
  HEAP32[___async_retval >> 2] = $29; //@line 9996
  ___async_unwind = 0; //@line 9997
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 160; //@line 9999
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 10001
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 10003
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $AsyncRetVal; //@line 10005
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 10007
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $6; //@line 10009
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $10; //@line 10011
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $25; //@line 10013
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $12; //@line 10015
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $14; //@line 10017
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $16; //@line 10019
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $18; //@line 10021
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $22; //@line 10023
 sp = STACKTOP; //@line 10024
 return;
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 13362
 STACKTOP = STACKTOP + 128 | 0; //@line 13363
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 13363
 $4 = sp + 124 | 0; //@line 13364
 $5 = sp; //@line 13365
 dest = $5; //@line 13366
 src = 1496; //@line 13366
 stop = dest + 124 | 0; //@line 13366
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 13366
  dest = dest + 4 | 0; //@line 13366
  src = src + 4 | 0; //@line 13366
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 13372
   $$015 = 1; //@line 13372
   label = 4; //@line 13373
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 13376
   $$0 = -1; //@line 13377
  }
 } else {
  $$014 = $0; //@line 13380
  $$015 = $1; //@line 13380
  label = 4; //@line 13381
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 13385
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 13387
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 13389
  $14 = $5 + 20 | 0; //@line 13390
  HEAP32[$14 >> 2] = $$014; //@line 13391
  HEAP32[$5 + 44 >> 2] = $$014; //@line 13393
  $16 = $$014 + $$$015 | 0; //@line 13394
  $17 = $5 + 16 | 0; //@line 13395
  HEAP32[$17 >> 2] = $16; //@line 13396
  HEAP32[$5 + 28 >> 2] = $16; //@line 13398
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 13399
  $19 = _vfprintf($5, $2, $3) | 0; //@line 13400
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 317; //@line 13403
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 13405
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 13407
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 13409
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 13411
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 13413
   sp = STACKTOP; //@line 13414
   STACKTOP = sp; //@line 13415
   return 0; //@line 13415
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13417
  if (!$$$015) {
   $$0 = $19; //@line 13420
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 13422
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 13427
   $$0 = $19; //@line 13428
  }
 }
 STACKTOP = sp; //@line 13431
 return $$0 | 0; //@line 13431
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18612
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 18614
 $7 = $4 + 156 | 0; //@line 18615
 _equeue_mutex_lock($7); //@line 18616
 $8 = $4 + 24 | 0; //@line 18617
 $9 = HEAP32[$8 >> 2] | 0; //@line 18618
 L3 : do {
  if (!$9) {
   label = 9; //@line 18622
  } else {
   $$03842$i = $8; //@line 18624
   $12 = $9; //@line 18624
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 18631
    $19 = HEAP32[$18 >> 2] | 0; //@line 18632
    if (!$19) {
     label = 9; //@line 18635
     break L3;
    } else {
     $$03842$i = $18; //@line 18638
     $12 = $19; //@line 18638
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 18642
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 18645
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 18647
    $$038$sink$i = $15 + 8 | 0; //@line 18649
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 18653
   _equeue_mutex_unlock($7); //@line 18654
   $$1$i9 = $12; //@line 18655
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 18660
   $22 = HEAP32[$21 >> 2] | 0; //@line 18661
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 18664
    $$0 = 0; //@line 18665
    $34 = ___async_retval; //@line 18666
    HEAP32[$34 >> 2] = $$0; //@line 18667
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 18670
    $25 = HEAP32[$24 >> 2] | 0; //@line 18671
    HEAP32[$24 >> 2] = $25 + $6; //@line 18673
    HEAP32[$21 >> 2] = $22 - $6; //@line 18675
    HEAP32[$25 >> 2] = $6; //@line 18676
    HEAP8[$25 + 4 >> 0] = 1; //@line 18678
    _equeue_mutex_unlock($7); //@line 18679
    if (!$25) {
     $$0 = 0; //@line 18682
    } else {
     $$1$i9 = $25; //@line 18684
     break;
    }
    $34 = ___async_retval; //@line 18687
    HEAP32[$34 >> 2] = $$0; //@line 18688
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 18694
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 18696
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 18698
 $$0 = $$1$i9 + 36 | 0; //@line 18700
 $34 = ___async_retval; //@line 18701
 HEAP32[$34 >> 2] = $$0; //@line 18702
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15532
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15538
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 15542
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 15543
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15544
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 15545
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 349; //@line 15548
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 15550
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15552
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15554
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 15556
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 15558
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 15560
    sp = STACKTOP; //@line 15561
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15564
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 15568
    $$0 = $0 + 24 | 0; //@line 15569
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15571
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 15572
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15577
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 15583
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 15586
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 350; //@line 15591
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15593
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 15595
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 15597
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15599
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15601
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 15603
    sp = STACKTOP; //@line 15604
    return;
   }
  }
 } while (0);
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 622
 STACKTOP = STACKTOP + 48 | 0; //@line 623
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 623
 $$byval_copy = sp + 20 | 0; //@line 624
 $3 = sp; //@line 625
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 626
 $4 = __Znwj(76) | 0; //@line 627
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 44; //@line 630
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 632
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 634
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 636
  sp = STACKTOP; //@line 637
  STACKTOP = sp; //@line 638
  return 0; //@line 638
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 640
 dest = $4; //@line 641
 stop = dest + 76 | 0; //@line 641
 do {
  HEAP32[dest >> 2] = 0; //@line 641
  dest = dest + 4 | 0; //@line 641
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 642
 HEAP32[$3 >> 2] = 0; //@line 643
 HEAP32[$3 + 4 >> 2] = 0; //@line 643
 HEAP32[$3 + 8 >> 2] = 0; //@line 643
 HEAP32[$3 + 12 >> 2] = 0; //@line 643
 HEAP32[$3 + 16 >> 2] = 0; //@line 643
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 644
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 644
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 644
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 644
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 644
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 645
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 646
 if (($9 | 0) == -1) {
  $$0$i = -3001; //@line 649
  STACKTOP = sp; //@line 650
  return $$0$i | 0; //@line 650
 }
 HEAP32[$4 >> 2] = $9; //@line 652
 HEAP8[$4 + 8 >> 0] = 0; //@line 654
 HEAP32[$4 + 4 >> 2] = $2; //@line 656
 HEAP32[$1 >> 2] = $4; //@line 657
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 658
 _wait_ms(1); //@line 659
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 45; //@line 662
  sp = STACKTOP; //@line 663
  STACKTOP = sp; //@line 664
  return 0; //@line 664
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 666
 $$0$i = 0; //@line 667
 STACKTOP = sp; //@line 668
 return $$0$i | 0; //@line 668
}
function _main__async_cb_174($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6634
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6636
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6638
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6640
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6642
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6644
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6646
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6648
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6650
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6652
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6654
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6656
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6658
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6660
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6662
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6664
 HEAP8[$2 >> 0] = HEAP8[3125] | 0; //@line 6665
 HEAP8[$2 + 1 >> 0] = HEAP8[3126] | 0; //@line 6665
 HEAP8[$2 + 2 >> 0] = HEAP8[3127] | 0; //@line 6665
 HEAP8[$2 + 3 >> 0] = HEAP8[3128] | 0; //@line 6665
 HEAP8[$2 + 4 >> 0] = HEAP8[3129] | 0; //@line 6665
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 6666
 $31 = __ZN9UDPSocket6sendtoEPKctPKvj($4, 3130, 37, $2, 5) | 0; //@line 6667
 if (!___async) {
  HEAP32[___async_retval >> 2] = $31; //@line 6671
  ___async_unwind = 0; //@line 6672
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 297; //@line 6674
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 6676
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 6678
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 6680
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 6682
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 6684
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 6686
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 6688
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 6690
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 6692
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 6694
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 6696
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $24; //@line 6698
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $26; //@line 6700
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $28; //@line 6702
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $30; //@line 6704
 sp = STACKTOP; //@line 6705
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 219
 STACKTOP = STACKTOP + 48 | 0; //@line 220
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 220
 $$byval_copy = sp + 20 | 0; //@line 221
 $3 = sp; //@line 222
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 223
 $4 = __Znwj(76) | 0; //@line 224
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 31; //@line 227
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 229
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 231
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 233
  sp = STACKTOP; //@line 234
  STACKTOP = sp; //@line 235
  return 0; //@line 235
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 237
 dest = $4; //@line 238
 stop = dest + 76 | 0; //@line 238
 do {
  HEAP32[dest >> 2] = 0; //@line 238
  dest = dest + 4 | 0; //@line 238
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 239
 HEAP32[$3 >> 2] = 0; //@line 240
 HEAP32[$3 + 4 >> 2] = 0; //@line 240
 HEAP32[$3 + 8 >> 2] = 0; //@line 240
 HEAP32[$3 + 12 >> 2] = 0; //@line 240
 HEAP32[$3 + 16 >> 2] = 0; //@line 240
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 241
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 241
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 241
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 241
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 241
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 242
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 243
 if (($9 | 0) == -1) {
  $$0 = -3001; //@line 246
  STACKTOP = sp; //@line 247
  return $$0 | 0; //@line 247
 }
 HEAP32[$4 >> 2] = $9; //@line 249
 HEAP8[$4 + 8 >> 0] = 0; //@line 251
 HEAP32[$4 + 4 >> 2] = $2; //@line 253
 HEAP32[$1 >> 2] = $4; //@line 254
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 255
 _wait_ms(1); //@line 256
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 32; //@line 259
  sp = STACKTOP; //@line 260
  STACKTOP = sp; //@line 261
  return 0; //@line 261
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 263
 $$0 = 0; //@line 264
 STACKTOP = sp; //@line 265
 return $$0 | 0; //@line 265
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_10($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16551
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16555
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16557
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16559
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16561
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16562
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 16566
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 16567
  FUNCTION_TABLE_vi[$13 & 511]($6); //@line 16568
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 16571
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 16572
   HEAP32[$14 >> 2] = $4; //@line 16573
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 16574
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 16575
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 16576
   HEAP32[$16 >> 2] = $8; //@line 16577
   sp = STACKTOP; //@line 16578
   return;
  }
  ___async_unwind = 0; //@line 16581
  HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 16582
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 16583
  HEAP32[$14 >> 2] = $4; //@line 16584
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 16585
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 16586
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 16587
  HEAP32[$16 >> 2] = $8; //@line 16588
  sp = STACKTOP; //@line 16589
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 16592
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16596
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 16600
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 16601
 FUNCTION_TABLE_vi[$20 & 511]($8); //@line 16602
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 16605
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 16606
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 16607
  sp = STACKTOP; //@line 16608
  return;
 }
 ___async_unwind = 0; //@line 16611
 HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 16612
 $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 16613
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 16614
 sp = STACKTOP; //@line 16615
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_90($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1705
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1709
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1711
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 1712
 $8 = HEAP32[$4 + 64 >> 2] | 0; //@line 1714
 if ($8 | 0) {
  __ZdaPv($8); //@line 1717
 }
 $11 = HEAP32[$4 + 12 >> 2] | 0; //@line 1720
 if ($11 | 0) {
  __ZdlPv($11); //@line 1723
 }
 $14 = HEAP32[$4 + 44 >> 2] | 0; //@line 1726
 if ($14 | 0) {
  $18 = HEAP32[$14 + 8 >> 2] | 0; //@line 1731
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 1732
  FUNCTION_TABLE_vi[$18 & 511]($4 + 32 | 0); //@line 1733
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 1736
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 1737
   HEAP32[$19 >> 2] = $4; //@line 1738
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 1739
   HEAP32[$20 >> 2] = $6; //@line 1740
   sp = STACKTOP; //@line 1741
   return;
  }
  ___async_unwind = 0; //@line 1744
  HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 1745
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 1746
  HEAP32[$19 >> 2] = $4; //@line 1747
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 1748
  HEAP32[$20 >> 2] = $6; //@line 1749
  sp = STACKTOP; //@line 1750
  return;
 }
 $22 = HEAP32[$4 + 28 >> 2] | 0; //@line 1754
 if (!$22) {
  __ZdlPv($4); //@line 1757
  HEAP32[6740 + ($6 << 2) >> 2] = 0; //@line 1759
  return;
 }
 $26 = HEAP32[$22 + 8 >> 2] | 0; //@line 1764
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 1765
 FUNCTION_TABLE_vi[$26 & 511]($4 + 16 | 0); //@line 1766
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 1769
  $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 1770
  HEAP32[$27 >> 2] = $4; //@line 1771
  $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 1772
  HEAP32[$28 >> 2] = $6; //@line 1773
  sp = STACKTOP; //@line 1774
  return;
 }
 ___async_unwind = 0; //@line 1777
 HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 1778
 $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 1779
 HEAP32[$27 >> 2] = $4; //@line 1780
 $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 1781
 HEAP32[$28 >> 2] = $6; //@line 1782
 sp = STACKTOP; //@line 1783
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23515
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23517
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23519
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23521
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23525
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23527
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23529
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23531
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23533
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23535
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23537
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23539
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23541
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 23543
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23545
 HEAP32[$16 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 23547
 $31 = HEAP32[$18 >> 2] | 0; //@line 23548
 HEAP32[$20 >> 2] = 0; //@line 23549
 HEAP32[$22 >> 2] = 175; //@line 23550
 HEAP32[$24 >> 2] = $31; //@line 23551
 HEAP32[$2 >> 2] = 724; //@line 23552
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 23553
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($26, 0, $28) | 0; //@line 23554
 if (!___async) {
  ___async_unwind = 0; //@line 23557
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 246; //@line 23559
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 23561
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 23563
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 23565
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 23567
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $12; //@line 23569
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 23571
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 23573
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $20; //@line 23575
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $22; //@line 23577
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $24; //@line 23579
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $26; //@line 23581
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $28; //@line 23583
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 23585
 sp = STACKTOP; //@line 23586
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13634
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 13639
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 13644
  } else {
   $20 = $0 & 255; //@line 13646
   $21 = $0 & 255; //@line 13647
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 13653
   } else {
    $26 = $1 + 20 | 0; //@line 13655
    $27 = HEAP32[$26 >> 2] | 0; //@line 13656
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 13662
     HEAP8[$27 >> 0] = $20; //@line 13663
     $34 = $21; //@line 13664
    } else {
     label = 12; //@line 13666
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13671
     $32 = ___overflow($1, $0) | 0; //@line 13672
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 322; //@line 13675
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 13677
      sp = STACKTOP; //@line 13678
      return 0; //@line 13679
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 13681
      $34 = $32; //@line 13682
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 13687
   $$0 = $34; //@line 13688
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 13693
   $8 = $0 & 255; //@line 13694
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 13700
    $14 = HEAP32[$13 >> 2] | 0; //@line 13701
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 13707
     HEAP8[$14 >> 0] = $7; //@line 13708
     $$0 = $8; //@line 13709
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13713
   $19 = ___overflow($1, $0) | 0; //@line 13714
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 321; //@line 13717
    sp = STACKTOP; //@line 13718
    return 0; //@line 13719
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13721
    $$0 = $19; //@line 13722
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 13727
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 5109
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 5112
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 5115
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 5118
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 5124
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 5133
     $24 = $13 >>> 2; //@line 5134
     $$090 = 0; //@line 5135
     $$094 = $7; //@line 5135
     while (1) {
      $25 = $$094 >>> 1; //@line 5137
      $26 = $$090 + $25 | 0; //@line 5138
      $27 = $26 << 1; //@line 5139
      $28 = $27 + $23 | 0; //@line 5140
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 5143
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5147
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 5153
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 5161
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 5165
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 5171
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 5176
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 5179
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 5179
      }
     }
     $46 = $27 + $24 | 0; //@line 5182
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 5185
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5189
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 5201
     } else {
      $$4 = 0; //@line 5203
     }
    } else {
     $$4 = 0; //@line 5206
    }
   } else {
    $$4 = 0; //@line 5209
   }
  } else {
   $$4 = 0; //@line 5212
  }
 } while (0);
 return $$4 | 0; //@line 5215
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4774
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 4779
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 4784
  } else {
   $20 = $0 & 255; //@line 4786
   $21 = $0 & 255; //@line 4787
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 4793
   } else {
    $26 = $1 + 20 | 0; //@line 4795
    $27 = HEAP32[$26 >> 2] | 0; //@line 4796
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 4802
     HEAP8[$27 >> 0] = $20; //@line 4803
     $34 = $21; //@line 4804
    } else {
     label = 12; //@line 4806
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4811
     $32 = ___overflow($1, $0) | 0; //@line 4812
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 307; //@line 4815
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4817
      sp = STACKTOP; //@line 4818
      return 0; //@line 4819
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 4821
      $34 = $32; //@line 4822
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 4827
   $$0 = $34; //@line 4828
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 4833
   $8 = $0 & 255; //@line 4834
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 4840
    $14 = HEAP32[$13 >> 2] | 0; //@line 4841
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 4847
     HEAP8[$14 >> 0] = $7; //@line 4848
     $$0 = $8; //@line 4849
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4853
   $19 = ___overflow($1, $0) | 0; //@line 4854
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 306; //@line 4857
    sp = STACKTOP; //@line 4858
    return 0; //@line 4859
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4861
    $$0 = $19; //@line 4862
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 4867
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5494
 $1 = $0 + 20 | 0; //@line 5495
 $3 = $0 + 28 | 0; //@line 5497
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 5503
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5504
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 5505
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 313; //@line 5508
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5510
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5512
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 5514
    sp = STACKTOP; //@line 5515
    return 0; //@line 5516
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5518
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 5522
     break;
    } else {
     label = 5; //@line 5525
     break;
    }
   }
  } else {
   label = 5; //@line 5530
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 5534
  $14 = HEAP32[$13 >> 2] | 0; //@line 5535
  $15 = $0 + 8 | 0; //@line 5536
  $16 = HEAP32[$15 >> 2] | 0; //@line 5537
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 5545
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5546
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 5547
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 314; //@line 5550
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5552
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 5554
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5556
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 5558
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 5560
     sp = STACKTOP; //@line 5561
     return 0; //@line 5562
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5564
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 5570
  HEAP32[$3 >> 2] = 0; //@line 5571
  HEAP32[$1 >> 2] = 0; //@line 5572
  HEAP32[$15 >> 2] = 0; //@line 5573
  HEAP32[$13 >> 2] = 0; //@line 5574
  $$0 = 0; //@line 5575
 }
 return $$0 | 0; //@line 5577
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 23295
 STACKTOP = STACKTOP + 32 | 0; //@line 23296
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 23296
 $$byval_copy = sp; //@line 23297
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23299
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23301
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23303
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23305
 dest = $AsyncRetVal; //@line 23306
 stop = dest + 76 | 0; //@line 23306
 do {
  HEAP32[dest >> 2] = 0; //@line 23306
  dest = dest + 4 | 0; //@line 23306
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 23307
 HEAP32[$2 >> 2] = 0; //@line 23308
 HEAP32[$2 + 4 >> 2] = 0; //@line 23308
 HEAP32[$2 + 8 >> 2] = 0; //@line 23308
 HEAP32[$2 + 12 >> 2] = 0; //@line 23308
 HEAP32[$2 + 16 >> 2] = 0; //@line 23308
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 23309
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 23309
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 23309
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 23309
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 23309
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 23310
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 23311
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 23315
  STACKTOP = sp; //@line 23316
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 23318
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 23320
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 23322
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 23323
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23324
 _wait_ms(1); //@line 23325
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 23328
  sp = STACKTOP; //@line 23329
  STACKTOP = sp; //@line 23330
  return;
 }
 ___async_unwind = 0; //@line 23332
 HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 23333
 sp = STACKTOP; //@line 23334
 STACKTOP = sp; //@line 23335
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 23460
 STACKTOP = STACKTOP + 32 | 0; //@line 23461
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 23461
 $$byval_copy = sp; //@line 23462
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23464
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23466
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23468
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23470
 dest = $AsyncRetVal; //@line 23471
 stop = dest + 76 | 0; //@line 23471
 do {
  HEAP32[dest >> 2] = 0; //@line 23471
  dest = dest + 4 | 0; //@line 23471
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 23472
 HEAP32[$2 >> 2] = 0; //@line 23473
 HEAP32[$2 + 4 >> 2] = 0; //@line 23473
 HEAP32[$2 + 8 >> 2] = 0; //@line 23473
 HEAP32[$2 + 12 >> 2] = 0; //@line 23473
 HEAP32[$2 + 16 >> 2] = 0; //@line 23473
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 23474
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 23474
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 23474
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 23474
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 23474
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 23475
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 23476
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 23480
  STACKTOP = sp; //@line 23481
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 23483
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 23485
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 23487
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 23488
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23489
 _wait_ms(1); //@line 23490
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 32; //@line 23493
  sp = STACKTOP; //@line 23494
  STACKTOP = sp; //@line 23495
  return;
 }
 ___async_unwind = 0; //@line 23497
 HEAP32[$ReallocAsyncCtx2 >> 2] = 32; //@line 23498
 sp = STACKTOP; //@line 23499
 STACKTOP = sp; //@line 23500
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_130($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 3867
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3873
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3875
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3877
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3879
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3881
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3883
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3885
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 3887
 $$pre85 = HEAP32[$6 >> 2] | 0; //@line 3888
 HEAP32[$$pre85 + 16 >> 2] = HEAP32[$8 >> 2]; //@line 3892
 HEAP32[$10 + 8 >> 2] = 0; //@line 3894
 HEAP32[$10 >> 2] = 215; //@line 3895
 HEAP32[$10 + 4 >> 2] = $$pre85; //@line 3897
 $23 = $10 + 12 | 0; //@line 3898
 HEAP32[$23 >> 2] = 724; //@line 3899
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 3900
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $10); //@line 3901
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 3904
  $24 = $ReallocAsyncCtx18 + 4 | 0; //@line 3905
  HEAP32[$24 >> 2] = $23; //@line 3906
  $25 = $ReallocAsyncCtx18 + 8 | 0; //@line 3907
  HEAP32[$25 >> 2] = $14; //@line 3908
  $26 = $ReallocAsyncCtx18 + 12 | 0; //@line 3909
  HEAP32[$26 >> 2] = $16; //@line 3910
  $27 = $ReallocAsyncCtx18 + 16 | 0; //@line 3911
  HEAP32[$27 >> 2] = $10; //@line 3912
  $28 = $ReallocAsyncCtx18 + 20 | 0; //@line 3913
  HEAP32[$28 >> 2] = $18; //@line 3914
  sp = STACKTOP; //@line 3915
  return;
 }
 ___async_unwind = 0; //@line 3918
 HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 3919
 $24 = $ReallocAsyncCtx18 + 4 | 0; //@line 3920
 HEAP32[$24 >> 2] = $23; //@line 3921
 $25 = $ReallocAsyncCtx18 + 8 | 0; //@line 3922
 HEAP32[$25 >> 2] = $14; //@line 3923
 $26 = $ReallocAsyncCtx18 + 12 | 0; //@line 3924
 HEAP32[$26 >> 2] = $16; //@line 3925
 $27 = $ReallocAsyncCtx18 + 16 | 0; //@line 3926
 HEAP32[$27 >> 2] = $10; //@line 3927
 $28 = $ReallocAsyncCtx18 + 20 | 0; //@line 3928
 HEAP32[$28 >> 2] = $18; //@line 3929
 sp = STACKTOP; //@line 3930
 return;
}
function __ZN6Socket5closeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4402
 $1 = $0 + 8 | 0; //@line 4403
 $2 = HEAP32[$1 >> 2] | 0; //@line 4404
 $$pre = $0 + 4 | 0; //@line 4406
 do {
  if (!$2) {
   $$0 = 0; //@line 4409
  } else {
   $4 = HEAP32[$$pre >> 2] | 0; //@line 4411
   $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 84 >> 2] | 0; //@line 4414
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4415
   FUNCTION_TABLE_viiii[$7 & 7]($4, $2, 0, 0); //@line 4416
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 128; //@line 4419
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4421
    HEAP32[$AsyncCtx + 8 >> 2] = $$pre; //@line 4423
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4425
    sp = STACKTOP; //@line 4426
    return 0; //@line 4427
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4429
   $11 = HEAP32[$1 >> 2] | 0; //@line 4430
   HEAP32[$1 >> 2] = 0; //@line 4431
   $12 = HEAP32[$$pre >> 2] | 0; //@line 4432
   $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 48 >> 2] | 0; //@line 4435
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4436
   $16 = FUNCTION_TABLE_iii[$15 & 15]($12, $11) | 0; //@line 4437
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 129; //@line 4440
    HEAP32[$AsyncCtx2 + 4 >> 2] = $$pre; //@line 4442
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4444
    sp = STACKTOP; //@line 4445
    return 0; //@line 4446
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4448
    $$0 = $16; //@line 4449
    break;
   }
  }
 } while (0);
 HEAP32[$$pre >> 2] = 0; //@line 4454
 $21 = HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0; //@line 4457
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4458
 FUNCTION_TABLE_vi[$21 & 511]($0); //@line 4459
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 130; //@line 4462
  HEAP32[$AsyncCtx5 + 4 >> 2] = $$0; //@line 4464
  sp = STACKTOP; //@line 4465
  return 0; //@line 4466
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 4468
  return $$0 | 0; //@line 4469
 }
 return 0; //@line 4471
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 1031
 STACKTOP = STACKTOP + 48 | 0; //@line 1032
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1032
 $vararg_buffer12 = sp + 32 | 0; //@line 1033
 $vararg_buffer8 = sp + 24 | 0; //@line 1034
 $vararg_buffer4 = sp + 16 | 0; //@line 1035
 $vararg_buffer = sp; //@line 1036
 $6 = $4 & 255; //@line 1037
 $7 = $5 & 255; //@line 1038
 HEAP32[$vararg_buffer >> 2] = $2; //@line 1039
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 1041
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 1043
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 1045
 _mbed_tracef(16, 2405, 2410, $vararg_buffer); //@line 1046
 _emscripten_asm_const_i(8) | 0; //@line 1047
 $10 = HEAP32[$0 + 752 >> 2] | 0; //@line 1049
 if (($10 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $10; //@line 1052
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 1054
  _mbed_tracef(16, 2405, 2492, $vararg_buffer4); //@line 1055
  STACKTOP = sp; //@line 1056
  return;
 }
 $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 1059
 if (($13 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $13; //@line 1062
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 1064
  _mbed_tracef(16, 2405, 2539, $vararg_buffer8); //@line 1065
  STACKTOP = sp; //@line 1066
  return;
 }
 $16 = HEAP32[$0 + 692 >> 2] | 0; //@line 1069
 if (($16 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 1073
  HEAP8[$0 + 782 >> 0] = $2; //@line 1076
  HEAP8[$0 + 781 >> 0] = -35; //@line 1078
  HEAP8[$0 + 780 >> 0] = -5; //@line 1080
  HEAP8[$0 + 783 >> 0] = 1; //@line 1082
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(9) | 0; //@line 1085
  STACKTOP = sp; //@line 1086
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $16; //@line 1088
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 1090
  _mbed_tracef(16, 2405, 2586, $vararg_buffer12); //@line 1091
  STACKTOP = sp; //@line 1092
  return;
 }
}
function __ZNK13SocketAddresscvbEv($0) {
 $0 = $0 | 0;
 var $12 = 0;
 switch (HEAP32[$0 + 40 >> 2] | 0) {
 case 1:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 4917
    return $12 | 0; //@line 4918
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 4924
    return $12 | 0; //@line 4925
   }
   if (!(HEAP8[$0 + 46 >> 0] | 0)) {
    return (HEAP8[$0 + 47 >> 0] | 0) != 0 | 0; //@line 4934
   } else {
    $12 = 1; //@line 4936
    return $12 | 0; //@line 4937
   }
   break;
  }
 case 2:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 4946
    return $12 | 0; //@line 4947
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 4953
    return $12 | 0; //@line 4954
   }
   if (HEAP8[$0 + 46 >> 0] | 0) {
    $12 = 1; //@line 4960
    return $12 | 0; //@line 4961
   }
   if (HEAP8[$0 + 47 >> 0] | 0) {
    $12 = 1; //@line 4967
    return $12 | 0; //@line 4968
   }
   if (HEAP8[$0 + 48 >> 0] | 0) {
    $12 = 1; //@line 4974
    return $12 | 0; //@line 4975
   }
   if (HEAP8[$0 + 49 >> 0] | 0) {
    $12 = 1; //@line 4981
    return $12 | 0; //@line 4982
   }
   if (HEAP8[$0 + 50 >> 0] | 0) {
    $12 = 1; //@line 4988
    return $12 | 0; //@line 4989
   }
   if (HEAP8[$0 + 51 >> 0] | 0) {
    $12 = 1; //@line 4995
    return $12 | 0; //@line 4996
   }
   if (HEAP8[$0 + 52 >> 0] | 0) {
    $12 = 1; //@line 5002
    return $12 | 0; //@line 5003
   }
   if (HEAP8[$0 + 53 >> 0] | 0) {
    $12 = 1; //@line 5009
    return $12 | 0; //@line 5010
   }
   if (HEAP8[$0 + 54 >> 0] | 0) {
    $12 = 1; //@line 5016
    return $12 | 0; //@line 5017
   }
   if (HEAP8[$0 + 55 >> 0] | 0) {
    $12 = 1; //@line 5023
    return $12 | 0; //@line 5024
   }
   if (HEAP8[$0 + 56 >> 0] | 0) {
    $12 = 1; //@line 5030
    return $12 | 0; //@line 5031
   }
   if (HEAP8[$0 + 57 >> 0] | 0) {
    $12 = 1; //@line 5037
    return $12 | 0; //@line 5038
   }
   if (HEAP8[$0 + 58 >> 0] | 0) {
    $12 = 1; //@line 5044
    return $12 | 0; //@line 5045
   }
   $12 = (HEAP8[$0 + 59 >> 0] | 0) != 0; //@line 5050
   return $12 | 0; //@line 5051
  }
 default:
  {
   $12 = 0; //@line 5055
   return $12 | 0; //@line 5056
  }
 }
 return 0; //@line 5059
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19978
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19980
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19982
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19984
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19986
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19988
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 19989
 if (!$AsyncRetVal) {
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = HEAP32[$4 >> 2]; //@line 19994
 HEAP32[$AsyncRetVal + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 19994
 HEAP32[$AsyncRetVal + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 19994
 HEAP32[$AsyncRetVal + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 19994
 HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 19994
 $12 = (_strlen($6) | 0) + 1 | 0; //@line 19996
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 19997
 $13 = __ZnajRKSt9nothrow_t($12, 8661) | 0; //@line 19998
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 20001
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 20002
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 20003
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 20004
  HEAP32[$15 >> 2] = $6; //@line 20005
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 20006
  HEAP32[$16 >> 2] = $8; //@line 20007
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 20008
  HEAP32[$17 >> 2] = $2; //@line 20009
  sp = STACKTOP; //@line 20010
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 20014
 ___async_unwind = 0; //@line 20015
 HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 20016
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 20017
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 20018
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 20019
 HEAP32[$15 >> 2] = $6; //@line 20020
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 20021
 HEAP32[$16 >> 2] = $8; //@line 20022
 $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 20023
 HEAP32[$17 >> 2] = $2; //@line 20024
 sp = STACKTOP; //@line 20025
 return;
}
function _main__async_cb_182($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7350
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7352
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7354
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7356
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7358
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7360
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7362
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7364
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7366
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7368
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7370
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7372
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7376
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7378
 HEAP32[$22 >> 2] = $AsyncRetVal | 0 ? $AsyncRetVal : 3100; //@line 7381
 _printf(3106, $22) | 0; //@line 7382
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 7383
 __ZN9UDPSocketC2I17EthernetInterfaceEEPT_($2, $4); //@line 7384
 if (!___async) {
  ___async_unwind = 0; //@line 7387
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 296; //@line 7389
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $26; //@line 7391
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 7393
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $2; //@line 7395
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $4; //@line 7397
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $6; //@line 7399
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 7401
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $16; //@line 7403
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $10; //@line 7405
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $12; //@line 7407
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $14; //@line 7409
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $14; //@line 7411
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $16; //@line 7413
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $18; //@line 7415
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $20; //@line 7417
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $2; //@line 7419
 sp = STACKTOP; //@line 7420
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_190($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $27 = 0, $28 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 9544
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9546
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9548
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9552
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9554
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9556
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9558
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9560
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9562
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9564
 $21 = $10 + 12 | 0; //@line 9566
 HEAP32[$21 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 9567
 $23 = $8 + 4 | 0; //@line 9569
 HEAP32[$23 >> 2] = 0; //@line 9571
 HEAP32[$23 + 4 >> 2] = 0; //@line 9574
 HEAP32[$8 >> 2] = 3; //@line 9575
 $27 = $8 + 12 | 0; //@line 9576
 HEAP32[$27 >> 2] = 712; //@line 9577
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 9578
 $28 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 100, $8) | 0; //@line 9579
 if (!___async) {
  HEAP32[___async_retval >> 2] = $28; //@line 9583
  ___async_unwind = 0; //@line 9584
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 9586
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 9588
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $16; //@line 9590
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $4; //@line 9592
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $27; //@line 9594
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $21; //@line 9596
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $8; //@line 9598
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $14; //@line 9600
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $12; //@line 9602
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $10; //@line 9604
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $18; //@line 9606
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $20; //@line 9608
 sp = STACKTOP; //@line 9609
 return;
}
function _main__async_cb_177($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6970
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6972
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6974
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6976
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6978
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6980
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6982
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6984
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6986
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6988
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6990
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6992
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6994
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6996
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6998
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7000
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 7001
 __ZN9UDPSocketC2I17EthernetInterfaceEEPT_($4, $8); //@line 7002
 if (!___async) {
  ___async_unwind = 0; //@line 7005
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 296; //@line 7007
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 7009
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 7011
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 7013
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 7015
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 7017
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 7019
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 7021
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 7023
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 7025
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 7027
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 7029
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 7031
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $26; //@line 7033
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $28; //@line 7035
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $30; //@line 7037
 sp = STACKTOP; //@line 7038
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 5816
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5818
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5820
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5822
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5824
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5826
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5828
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 5832
  return;
 }
 $13 = $2 + 12 | 0; //@line 5835
 dest = $13; //@line 5836
 src = $4; //@line 5836
 stop = dest + 60 | 0; //@line 5836
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 5836
  dest = dest + 4 | 0; //@line 5836
  src = src + 4 | 0; //@line 5836
 } while ((dest | 0) < (stop | 0));
 HEAP16[$13 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 5836
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 5837
 _wait_ms(1); //@line 5838
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 39; //@line 5841
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 5842
  HEAP32[$14 >> 2] = $6; //@line 5843
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 5844
  HEAP32[$15 >> 2] = $2; //@line 5845
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 5846
  HEAP32[$16 >> 2] = $8; //@line 5847
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 5848
  HEAP32[$17 >> 2] = $10; //@line 5849
  sp = STACKTOP; //@line 5850
  return;
 }
 ___async_unwind = 0; //@line 5853
 HEAP32[$ReallocAsyncCtx4 >> 2] = 39; //@line 5854
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 5855
 HEAP32[$14 >> 2] = $6; //@line 5856
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 5857
 HEAP32[$15 >> 2] = $2; //@line 5858
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 5859
 HEAP32[$16 >> 2] = $8; //@line 5860
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 5861
 HEAP32[$17 >> 2] = $10; //@line 5862
 sp = STACKTOP; //@line 5863
 return;
}
function _main__async_cb_181($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7274
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7276
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7278
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7280
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7282
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7284
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7286
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7288
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7290
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7292
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7294
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7296
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7298
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7300
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7302
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7304
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 7305
 __ZN9UDPSocketD2Ev($4); //@line 7306
 if (!___async) {
  ___async_unwind = 0; //@line 7309
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 303; //@line 7311
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 7313
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 7315
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 7317
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 7319
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 7321
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 7323
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 7325
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 7327
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 7329
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 7331
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 7333
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 7335
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 7337
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $28; //@line 7339
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $30; //@line 7341
 sp = STACKTOP; //@line 7342
 return;
}
function _main__async_cb_180($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7198
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7200
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7202
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7204
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7206
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7208
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7210
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7212
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7214
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7216
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7218
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7220
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7222
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7224
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7226
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7228
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 7229
 __ZN9UDPSocketD2Ev($4); //@line 7230
 if (!___async) {
  ___async_unwind = 0; //@line 7233
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 303; //@line 7235
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 7237
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 7239
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 7241
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 7243
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 7245
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 7247
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 7249
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 7251
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 7253
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 7255
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 7257
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 7259
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 7261
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $28; //@line 7263
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $30; //@line 7265
 sp = STACKTOP; //@line 7266
 return;
}
function _main__async_cb_179($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7122
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7124
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7126
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7128
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7130
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7132
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7134
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7136
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7138
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7140
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7142
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7144
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7146
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7148
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7150
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7152
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 7153
 __ZN9UDPSocketD2Ev($4); //@line 7154
 if (!___async) {
  ___async_unwind = 0; //@line 7157
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 303; //@line 7159
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 7161
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 7163
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 7165
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 7167
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 7169
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 7171
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 7173
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 7175
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 7177
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 7179
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 7181
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 7183
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 7185
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $28; //@line 7187
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $30; //@line 7189
 sp = STACKTOP; //@line 7190
 return;
}
function _main__async_cb_178($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7046
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7048
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7050
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7052
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7054
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7056
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7058
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7060
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7062
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7064
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7066
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7068
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7070
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7072
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7074
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7076
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(64) | 0; //@line 7077
 _wait_ms(1e4); //@line 7078
 if (!___async) {
  ___async_unwind = 0; //@line 7081
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 302; //@line 7083
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 7085
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 7087
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 7089
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 7091
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 7093
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $12; //@line 7095
 HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $14; //@line 7097
 HEAP32[$ReallocAsyncCtx8 + 32 >> 2] = $16; //@line 7099
 HEAP32[$ReallocAsyncCtx8 + 36 >> 2] = $18; //@line 7101
 HEAP32[$ReallocAsyncCtx8 + 40 >> 2] = $20; //@line 7103
 HEAP32[$ReallocAsyncCtx8 + 44 >> 2] = $22; //@line 7105
 HEAP32[$ReallocAsyncCtx8 + 48 >> 2] = $24; //@line 7107
 HEAP32[$ReallocAsyncCtx8 + 52 >> 2] = $26; //@line 7109
 HEAP32[$ReallocAsyncCtx8 + 56 >> 2] = $28; //@line 7111
 HEAP32[$ReallocAsyncCtx8 + 60 >> 2] = $30; //@line 7113
 sp = STACKTOP; //@line 7114
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_79($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23707
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23709
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23711
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23713
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23715
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23717
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23719
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23721
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23723
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23725
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23727
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23729
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23731
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23733
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 23734
 $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($26, 0, $4, 512) | 0; //@line 23735
 if (!___async) {
  HEAP32[___async_retval >> 2] = $27; //@line 23739
  ___async_unwind = 0; //@line 23740
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 23742
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 23744
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 23746
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 23748
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 23750
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 23752
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 23754
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 23756
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 23758
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 23760
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 23762
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 23764
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 23766
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 23768
 sp = STACKTOP; //@line 23769
 return;
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 5258
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 5264
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 5270
   } else {
    $7 = $1 & 255; //@line 5272
    $$03039 = $0; //@line 5273
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 5275
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 5280
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 5283
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 5288
      break;
     } else {
      $$03039 = $13; //@line 5291
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 5295
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 5296
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 5304
     $25 = $18; //@line 5304
     while (1) {
      $24 = $25 ^ $17; //@line 5306
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 5313
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 5316
      $25 = HEAP32[$31 >> 2] | 0; //@line 5317
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 5326
       break;
      } else {
       $$02936 = $31; //@line 5324
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 5331
    }
   } while (0);
   $38 = $1 & 255; //@line 5334
   $$1 = $$029$lcssa; //@line 5335
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 5337
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 5343
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 5346
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 5351
}
function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0; //@line 6584
 $2 = HEAP32[$1 >> 2] | 0; //@line 6585
 if (!$2) {
  label = 3; //@line 6588
 } else {
  if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3; //@line 6594
  } else {
   label = 4; //@line 6596
  }
 }
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0; //@line 6600
  if (($7 | 0) < 0) {
   label = 4; //@line 6603
  } else {
   $10 = HEAP32[$1 >> 2] | 0; //@line 6605
   $$phi$trans$insert = $0 + 8 | 0; //@line 6607
   if (!$10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6609
    $$sink = $$pre; //@line 6610
    $26 = $$pre; //@line 6610
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6612
    $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 6614
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0; //@line 6619
    $21 = $12; //@line 6621
    if (($12 - $14 | 0) < ($19 | 0)) {
     $$sink = $21; //@line 6623
     $26 = $21; //@line 6623
    } else {
     $$sink = $14 + ($19 + -1) | 0; //@line 6627
     $26 = $21; //@line 6627
    }
   }
   HEAP32[$0 + 100 >> 2] = $$sink; //@line 6631
   $$phi$trans$insert29 = $0 + 4 | 0; //@line 6633
   if (!$26) {
    $36 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6636
   } else {
    $27 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6638
    $29 = $0 + 108 | 0; //@line 6640
    HEAP32[$29 >> 2] = $26 + 1 - $27 + (HEAP32[$29 >> 2] | 0); //@line 6645
    $36 = $27; //@line 6647
   }
   $35 = $36 + -1 | 0; //@line 6649
   if (($7 | 0) == (HEAPU8[$35 >> 0] | 0 | 0)) {
    $$0 = $7; //@line 6654
   } else {
    HEAP8[$35 >> 0] = $7; //@line 6657
    $$0 = $7; //@line 6658
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0; //@line 6664
  $$0 = -1; //@line 6665
 }
 return $$0 | 0; //@line 6667
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 5000
 $4 = HEAP32[$3 >> 2] | 0; //@line 5001
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 5008
   label = 5; //@line 5009
  } else {
   $$1 = 0; //@line 5011
  }
 } else {
  $12 = $4; //@line 5015
  label = 5; //@line 5016
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 5020
   $10 = HEAP32[$9 >> 2] | 0; //@line 5021
   $14 = $10; //@line 5024
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 5029
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 5037
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 5041
       $$141 = $0; //@line 5041
       $$143 = $1; //@line 5041
       $31 = $14; //@line 5041
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 5044
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 5051
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 5056
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 5059
      break L5;
     }
     $$139 = $$038; //@line 5065
     $$141 = $0 + $$038 | 0; //@line 5065
     $$143 = $1 - $$038 | 0; //@line 5065
     $31 = HEAP32[$9 >> 2] | 0; //@line 5065
    } else {
     $$139 = 0; //@line 5067
     $$141 = $0; //@line 5067
     $$143 = $1; //@line 5067
     $31 = $14; //@line 5067
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 5070
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 5073
   $$1 = $$139 + $$143 | 0; //@line 5075
  }
 } while (0);
 return $$1 | 0; //@line 5078
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_139($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 4422
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4426
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4428
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4430
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4432
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 4433
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 4437
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 4438
  FUNCTION_TABLE_vi[$14 & 511]($8); //@line 4439
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 217; //@line 4442
   $15 = $ReallocAsyncCtx10 + 4 | 0; //@line 4443
   HEAP32[$15 >> 2] = $4; //@line 4444
   $16 = $ReallocAsyncCtx10 + 8 | 0; //@line 4445
   HEAP32[$16 >> 2] = $6; //@line 4446
   $17 = $ReallocAsyncCtx10 + 12 | 0; //@line 4447
   HEAP32[$17 >> 2] = $10; //@line 4448
   sp = STACKTOP; //@line 4449
   return;
  }
  ___async_unwind = 0; //@line 4452
  HEAP32[$ReallocAsyncCtx10 >> 2] = 217; //@line 4453
  $15 = $ReallocAsyncCtx10 + 4 | 0; //@line 4454
  HEAP32[$15 >> 2] = $4; //@line 4455
  $16 = $ReallocAsyncCtx10 + 8 | 0; //@line 4456
  HEAP32[$16 >> 2] = $6; //@line 4457
  $17 = $ReallocAsyncCtx10 + 12 | 0; //@line 4458
  HEAP32[$17 >> 2] = $10; //@line 4459
  sp = STACKTOP; //@line 4460
  return;
 }
 HEAP32[$4 >> 2] = $6; //@line 4463
 $18 = HEAP32[$10 >> 2] | 0; //@line 4464
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 4465
 __ZL26nsapi_dns_query_async_sendPv($18); //@line 4466
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 218; //@line 4469
  sp = STACKTOP; //@line 4470
  return;
 }
 ___async_unwind = 0; //@line 4473
 HEAP32[$ReallocAsyncCtx13 >> 2] = 218; //@line 4474
 sp = STACKTOP; //@line 4475
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_34($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18899
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18903
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18905
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18907
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18909
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18911
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18913
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18915
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 18918
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 18919
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 18935
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 18936
    if (!___async) {
     ___async_unwind = 0; //@line 18939
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 347; //@line 18941
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 18943
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 18945
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 18947
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 18949
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 18951
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 18953
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 18955
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 18957
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 18960
    sp = STACKTOP; //@line 18961
    return;
   }
  }
 } while (0);
 return;
}
function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $3 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13798
 STACKTOP = STACKTOP + 32 | 0; //@line 13799
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13799
 $2 = sp; //@line 13800
 $3 = HEAP8[$1 >> 0] | 0; //@line 13801
 L1 : do {
  if (!($3 << 24 >> 24)) {
   label = 3; //@line 13805
  } else {
   if (!(HEAP8[$1 + 1 >> 0] | 0)) {
    label = 3; //@line 13811
   } else {
    _memset($2 | 0, 0, 32) | 0; //@line 13813
    $10 = HEAP8[$1 >> 0] | 0; //@line 13814
    if ($10 << 24 >> 24) {
     $$01824 = $1; //@line 13817
     $15 = $10; //@line 13817
     do {
      $19 = $2 + ((($15 & 255) >>> 5 & 255) << 2) | 0; //@line 13824
      HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1 << ($15 & 31); //@line 13827
      $$01824 = $$01824 + 1 | 0; //@line 13828
      $15 = HEAP8[$$01824 >> 0] | 0; //@line 13829
     } while ($15 << 24 >> 24 != 0);
    }
    $12 = HEAP8[$0 >> 0] | 0; //@line 13838
    if (!($12 << 24 >> 24)) {
     $$019$sink = $0; //@line 13841
    } else {
     $$01922 = $0; //@line 13843
     $25 = $12; //@line 13843
     while (1) {
      if (HEAP32[$2 + ((($25 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($25 & 31) | 0) {
       $$019$sink = $$01922; //@line 13855
       break L1;
      }
      $34 = $$01922 + 1 | 0; //@line 13858
      $25 = HEAP8[$34 >> 0] | 0; //@line 13859
      if (!($25 << 24 >> 24)) {
       $$019$sink = $34; //@line 13862
       break;
      } else {
       $$01922 = $34; //@line 13865
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $$019$sink = ___strchrnul($0, $3 << 24 >> 24) | 0; //@line 13875
 }
 STACKTOP = sp; //@line 13880
 return $$019$sink - $0 | 0; //@line 13880
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1213
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1219
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1221
 $9 = $4 + 12 | 0; //@line 1223
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 1224
 $11 = HEAP32[$6 + 16 >> 2] | 0; //@line 1226
 HEAP32[$8 + 8 >> 2] = 0; //@line 1228
 HEAP32[$8 >> 2] = 226; //@line 1229
 HEAP32[$8 + 4 >> 2] = $11; //@line 1231
 $13 = $8 + 12 | 0; //@line 1232
 HEAP32[$13 >> 2] = 736; //@line 1233
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 1234
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $8) | 0; //@line 1235
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 227; //@line 1238
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 1239
  HEAP32[$14 >> 2] = $13; //@line 1240
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 1241
  HEAP32[$15 >> 2] = $9; //@line 1242
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 1243
  HEAP32[$16 >> 2] = $8; //@line 1244
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 1245
  HEAP32[$17 >> 2] = $4; //@line 1246
  sp = STACKTOP; //@line 1247
  return;
 }
 ___async_unwind = 0; //@line 1250
 HEAP32[$ReallocAsyncCtx4 >> 2] = 227; //@line 1251
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 1252
 HEAP32[$14 >> 2] = $13; //@line 1253
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 1254
 HEAP32[$15 >> 2] = $9; //@line 1255
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 1256
 HEAP32[$16 >> 2] = $8; //@line 1257
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 1258
 HEAP32[$17 >> 2] = $4; //@line 1259
 sp = STACKTOP; //@line 1260
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 6004
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6008
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6010
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6012
 $9 = $4 + 12 | 0; //@line 6014
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 6015
 $10 = HEAP32[$6 >> 2] | 0; //@line 6016
 HEAP32[$8 + 8 >> 2] = 0; //@line 6018
 HEAP32[$8 >> 2] = 195; //@line 6019
 HEAP32[$8 + 4 >> 2] = $10; //@line 6021
 $12 = $8 + 12 | 0; //@line 6022
 HEAP32[$12 >> 2] = 724; //@line 6023
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 6024
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $8) | 0; //@line 6025
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 6028
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 6029
  HEAP32[$13 >> 2] = $12; //@line 6030
  $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 6031
  HEAP32[$14 >> 2] = $9; //@line 6032
  $15 = $ReallocAsyncCtx4 + 12 | 0; //@line 6033
  HEAP32[$15 >> 2] = $8; //@line 6034
  $16 = $ReallocAsyncCtx4 + 16 | 0; //@line 6035
  HEAP32[$16 >> 2] = $4; //@line 6036
  sp = STACKTOP; //@line 6037
  return;
 }
 ___async_unwind = 0; //@line 6040
 HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 6041
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 6042
 HEAP32[$13 >> 2] = $12; //@line 6043
 $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 6044
 HEAP32[$14 >> 2] = $9; //@line 6045
 $15 = $ReallocAsyncCtx4 + 12 | 0; //@line 6046
 HEAP32[$15 >> 2] = $8; //@line 6047
 $16 = $ReallocAsyncCtx4 + 16 | 0; //@line 6048
 HEAP32[$16 >> 2] = $4; //@line 6049
 sp = STACKTOP; //@line 6050
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_205($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 14772
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14776
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14778
 $7 = $4 + 12 | 0; //@line 14780
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14781
 $9 = $6 + 4 | 0; //@line 14783
 HEAP32[$9 >> 2] = 0; //@line 14785
 HEAP32[$9 + 4 >> 2] = 0; //@line 14788
 HEAP32[$6 >> 2] = 3; //@line 14789
 $13 = $6 + 12 | 0; //@line 14790
 HEAP32[$13 >> 2] = 712; //@line 14791
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 14792
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $6) | 0; //@line 14793
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 14796
  $14 = $ReallocAsyncCtx12 + 4 | 0; //@line 14797
  HEAP32[$14 >> 2] = $13; //@line 14798
  $15 = $ReallocAsyncCtx12 + 8 | 0; //@line 14799
  HEAP32[$15 >> 2] = $7; //@line 14800
  $16 = $ReallocAsyncCtx12 + 12 | 0; //@line 14801
  HEAP32[$16 >> 2] = $6; //@line 14802
  $17 = $ReallocAsyncCtx12 + 16 | 0; //@line 14803
  HEAP32[$17 >> 2] = $4; //@line 14804
  sp = STACKTOP; //@line 14805
  return;
 }
 ___async_unwind = 0; //@line 14808
 HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 14809
 $14 = $ReallocAsyncCtx12 + 4 | 0; //@line 14810
 HEAP32[$14 >> 2] = $13; //@line 14811
 $15 = $ReallocAsyncCtx12 + 8 | 0; //@line 14812
 HEAP32[$15 >> 2] = $7; //@line 14813
 $16 = $ReallocAsyncCtx12 + 12 | 0; //@line 14814
 HEAP32[$16 >> 2] = $6; //@line 14815
 $17 = $ReallocAsyncCtx12 + 16 | 0; //@line 14816
 HEAP32[$17 >> 2] = $4; //@line 14817
 sp = STACKTOP; //@line 14818
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_12($0) {
 $0 = $0 | 0;
 var $$011 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16697
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16699
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16703
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16705
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 16707
 $12 = HEAP32[$0 + 28 >> 2] | 0; //@line 16709
 $14 = HEAP32[$0 + 32 >> 2] | 0; //@line 16711
 $16 = HEAP32[$0 + 36 >> 2] | 0; //@line 16713
 $18 = HEAP32[$0 + 40 >> 2] | 0; //@line 16715
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$011 = __ZNK13SocketAddress14get_ip_versionEv($2) | 0; //@line 16721
 } else {
  $$011 = 0; //@line 16723
 }
 $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 96 >> 2] | 0; //@line 16727
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 16728
 FUNCTION_TABLE_vii[$24 & 7]($8, $10); //@line 16729
 if (!___async) {
  ___async_unwind = 0; //@line 16732
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 91; //@line 16734
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $6; //@line 16736
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 16738
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $12; //@line 16740
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $14; //@line 16742
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $8; //@line 16744
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $16; //@line 16746
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $10; //@line 16748
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $18; //@line 16750
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $$011; //@line 16752
 sp = STACKTOP; //@line 16753
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4886
 STACKTOP = STACKTOP + 16 | 0; //@line 4887
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4887
 $2 = sp; //@line 4888
 $3 = $1 & 255; //@line 4889
 HEAP8[$2 >> 0] = $3; //@line 4890
 $4 = $0 + 16 | 0; //@line 4891
 $5 = HEAP32[$4 >> 2] | 0; //@line 4892
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 4899
   label = 4; //@line 4900
  } else {
   $$0 = -1; //@line 4902
  }
 } else {
  $12 = $5; //@line 4905
  label = 4; //@line 4906
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 4910
   $10 = HEAP32[$9 >> 2] | 0; //@line 4911
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 4914
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 4921
     HEAP8[$10 >> 0] = $3; //@line 4922
     $$0 = $13; //@line 4923
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 4928
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4929
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 4930
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 308; //@line 4933
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 4935
    sp = STACKTOP; //@line 4936
    STACKTOP = sp; //@line 4937
    return 0; //@line 4937
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4939
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 4944
   } else {
    $$0 = -1; //@line 4946
   }
  }
 } while (0);
 STACKTOP = sp; //@line 4950
 return $$0 | 0; //@line 4950
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_210($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15779
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15783
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15785
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15787
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 15788
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 15792
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 15793
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 15794
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 186; //@line 15797
   $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 15798
   HEAP32[$13 >> 2] = $4; //@line 15799
   $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 15800
   HEAP32[$14 >> 2] = $8; //@line 15801
   sp = STACKTOP; //@line 15802
   return;
  }
  ___async_unwind = 0; //@line 15805
  HEAP32[$ReallocAsyncCtx8 >> 2] = 186; //@line 15806
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 15807
  HEAP32[$13 >> 2] = $4; //@line 15808
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 15809
  HEAP32[$14 >> 2] = $8; //@line 15810
  sp = STACKTOP; //@line 15811
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 15814
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 15820
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 15821
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 15822
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 187; //@line 15825
  sp = STACKTOP; //@line 15826
  return;
 }
 ___async_unwind = 0; //@line 15829
 HEAP32[$ReallocAsyncCtx9 >> 2] = 187; //@line 15830
 sp = STACKTOP; //@line 15831
 return;
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_87($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1301
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1305
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1307
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1309
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1310
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 1314
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 1315
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 1316
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 228; //@line 1319
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 1320
   HEAP32[$13 >> 2] = $4; //@line 1321
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 1322
   HEAP32[$14 >> 2] = $8; //@line 1323
   sp = STACKTOP; //@line 1324
   return;
  }
  ___async_unwind = 0; //@line 1327
  HEAP32[$ReallocAsyncCtx2 >> 2] = 228; //@line 1328
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 1329
  HEAP32[$13 >> 2] = $4; //@line 1330
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 1331
  HEAP32[$14 >> 2] = $8; //@line 1332
  sp = STACKTOP; //@line 1333
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 1336
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 1342
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 1343
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 1344
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 229; //@line 1347
  sp = STACKTOP; //@line 1348
  return;
 }
 ___async_unwind = 0; //@line 1351
 HEAP32[$ReallocAsyncCtx3 >> 2] = 229; //@line 1352
 sp = STACKTOP; //@line 1353
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_166($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6091
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6095
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6097
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6099
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6100
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 6104
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 6105
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 6106
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 197; //@line 6109
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 6110
   HEAP32[$13 >> 2] = $4; //@line 6111
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 6112
   HEAP32[$14 >> 2] = $8; //@line 6113
   sp = STACKTOP; //@line 6114
   return;
  }
  ___async_unwind = 0; //@line 6117
  HEAP32[$ReallocAsyncCtx2 >> 2] = 197; //@line 6118
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 6119
  HEAP32[$13 >> 2] = $4; //@line 6120
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 6121
  HEAP32[$14 >> 2] = $8; //@line 6122
  sp = STACKTOP; //@line 6123
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 6126
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 6132
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 6133
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 6134
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 6137
  sp = STACKTOP; //@line 6138
  return;
 }
 ___async_unwind = 0; //@line 6141
 HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 6142
 sp = STACKTOP; //@line 6143
 return;
}
function _fflush__async_cb_49($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20203
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20205
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 20207
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 20211
  } else {
   $$02327 = $$02325; //@line 20213
   $$02426 = $AsyncRetVal; //@line 20213
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 20220
    } else {
     $16 = 0; //@line 20222
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 20234
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 20237
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 20240
     break L3;
    } else {
     $$02327 = $$023; //@line 20243
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 20246
   $13 = ___fflush_unlocked($$02327) | 0; //@line 20247
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 20251
    ___async_unwind = 0; //@line 20252
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 312; //@line 20254
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 20256
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 20258
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 20260
   sp = STACKTOP; //@line 20261
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 20265
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 20267
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4489
 $2 = $0 + 32 | 0; //@line 4490
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 44 | 0; //@line 4495
 $5 = HEAP32[$4 >> 2] | 0; //@line 4496
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 4501
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4502
   FUNCTION_TABLE_vi[$8 & 511]($2); //@line 4503
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 131; //@line 4506
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4508
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4510
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 4512
    sp = STACKTOP; //@line 4513
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4516
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 4521
 $13 = HEAP32[$12 >> 2] | 0; //@line 4522
 do {
  if (!$13) {
   $19 = 0; //@line 4526
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 4529
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4530
   FUNCTION_TABLE_vii[$16 & 7]($2, $1); //@line 4531
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 132; //@line 4534
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 4536
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 4538
    sp = STACKTOP; //@line 4539
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4542
    $19 = HEAP32[$12 >> 2] | 0; //@line 4544
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 4549
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_15($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17071
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17073
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17075
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17077
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17079
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17081
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17083
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17085
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17087
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17089
 $19 = $8 + 12 | 0; //@line 17091
 HEAP32[$19 >> 2] = HEAP32[$2 >> 2]; //@line 17092
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 17093
 $20 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($10, $12, $14, $8, $16) | 0; //@line 17094
 if (!___async) {
  HEAP32[___async_retval >> 2] = $20; //@line 17098
  ___async_unwind = 0; //@line 17099
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 94; //@line 17101
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $19; //@line 17103
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $18; //@line 17105
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $8; //@line 17107
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $2; //@line 17109
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $14; //@line 17111
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $6; //@line 17113
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $4; //@line 17115
 sp = STACKTOP; //@line 17116
 return;
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5421
 $4 = $0 + 8 | 0; //@line 5422
 $5 = $0 + 52 | 0; //@line 5423
 $6 = $0 + 4 | 0; //@line 5424
 $7 = $0 + 12 | 0; //@line 5425
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 5427
  if (!$8) {
   $$2 = -3005; //@line 5430
   label = 6; //@line 5431
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 5434
  $10 = HEAP32[$6 >> 2] | 0; //@line 5435
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 80 >> 2] | 0; //@line 5438
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5439
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 5440
  if (___async) {
   label = 4; //@line 5443
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5446
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 5452
   label = 6; //@line 5453
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 141; //@line 5458
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 5460
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5462
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 5464
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 5466
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 5468
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 5470
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 5472
  sp = STACKTOP; //@line 5473
  return 0; //@line 5474
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 5477
 }
 return 0; //@line 5479
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5354
 $4 = $0 + 8 | 0; //@line 5355
 $5 = $0 + 52 | 0; //@line 5356
 $6 = $0 + 4 | 0; //@line 5357
 $7 = $0 + 12 | 0; //@line 5358
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 5360
  if (!$8) {
   $$2 = -3005; //@line 5363
   label = 6; //@line 5364
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 5367
  $10 = HEAP32[$6 >> 2] | 0; //@line 5368
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 5371
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5372
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 5373
  if (___async) {
   label = 4; //@line 5376
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5379
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 5385
   label = 6; //@line 5386
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 140; //@line 5391
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 5393
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5395
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 5397
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 5399
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 5401
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 5403
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 5405
  sp = STACKTOP; //@line 5406
  return 0; //@line 5407
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 5410
 }
 return 0; //@line 5412
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18836
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18840
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18842
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18844
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18846
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18848
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18850
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 18853
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 18854
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 18863
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 18864
    if (!___async) {
     ___async_unwind = 0; //@line 18867
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 348; //@line 18869
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 18871
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 18873
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 18875
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 18877
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 18879
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 18881
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 18883
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 18886
    sp = STACKTOP; //@line 18887
    return;
   }
  }
 }
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 398
 value = value & 255; //@line 400
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 403
   ptr = ptr + 1 | 0; //@line 404
  }
  aligned_end = end & -4 | 0; //@line 407
  block_aligned_end = aligned_end - 64 | 0; //@line 408
  value4 = value | value << 8 | value << 16 | value << 24; //@line 409
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 412
   HEAP32[ptr + 4 >> 2] = value4; //@line 413
   HEAP32[ptr + 8 >> 2] = value4; //@line 414
   HEAP32[ptr + 12 >> 2] = value4; //@line 415
   HEAP32[ptr + 16 >> 2] = value4; //@line 416
   HEAP32[ptr + 20 >> 2] = value4; //@line 417
   HEAP32[ptr + 24 >> 2] = value4; //@line 418
   HEAP32[ptr + 28 >> 2] = value4; //@line 419
   HEAP32[ptr + 32 >> 2] = value4; //@line 420
   HEAP32[ptr + 36 >> 2] = value4; //@line 421
   HEAP32[ptr + 40 >> 2] = value4; //@line 422
   HEAP32[ptr + 44 >> 2] = value4; //@line 423
   HEAP32[ptr + 48 >> 2] = value4; //@line 424
   HEAP32[ptr + 52 >> 2] = value4; //@line 425
   HEAP32[ptr + 56 >> 2] = value4; //@line 426
   HEAP32[ptr + 60 >> 2] = value4; //@line 427
   ptr = ptr + 64 | 0; //@line 428
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 432
   ptr = ptr + 4 | 0; //@line 433
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 438
  ptr = ptr + 1 | 0; //@line 439
 }
 return end - num | 0; //@line 441
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20104
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 20114
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 20114
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 20114
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 20118
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 20121
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 20124
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 20132
  } else {
   $20 = 0; //@line 20134
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 20144
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 20148
  HEAP32[___async_retval >> 2] = $$1; //@line 20150
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 20153
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 20154
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 20158
  ___async_unwind = 0; //@line 20159
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 312; //@line 20161
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 20163
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 20165
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 20167
 sp = STACKTOP; //@line 20168
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 5501
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5503
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5505
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5507
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5509
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5511
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5513
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5515
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 5519
  return;
 }
 $15 = $2 + 12 | 0; //@line 5522
 dest = $15; //@line 5523
 src = $4; //@line 5523
 stop = dest + 60 | 0; //@line 5523
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 5523
  dest = dest + 4 | 0; //@line 5523
  src = src + 4 | 0; //@line 5523
 } while ((dest | 0) < (stop | 0));
 HEAP16[$15 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 5523
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 5524
 _wait_ms(1); //@line 5525
 if (!___async) {
  ___async_unwind = 0; //@line 5528
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 5530
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $6; //@line 5532
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $8; //@line 5534
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $2; //@line 5536
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 5538
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $12; //@line 5540
 sp = STACKTOP; //@line 5541
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23349
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23351
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23353
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23355
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 23360
  } else {
   $9 = $4 + 4 | 0; //@line 23362
   $10 = HEAP32[$9 >> 2] | 0; //@line 23363
   $11 = $4 + 8 | 0; //@line 23364
   $12 = HEAP32[$11 >> 2] | 0; //@line 23365
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 23369
    HEAP32[$6 >> 2] = 0; //@line 23370
    HEAP32[$2 >> 2] = 0; //@line 23371
    HEAP32[$11 >> 2] = 0; //@line 23372
    HEAP32[$9 >> 2] = 0; //@line 23373
    $$0 = 0; //@line 23374
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 23381
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 23382
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 23383
   if (!___async) {
    ___async_unwind = 0; //@line 23386
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 314; //@line 23388
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 23390
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 23392
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 23394
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 23396
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 23398
   sp = STACKTOP; //@line 23399
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 23404
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $14 = 0, $5 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 933
 $5 = $0 + -4 | 0; //@line 934
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 120 >> 2] | 0; //@line 937
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 938
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($5, $1, $3, $4) | 0; //@line 939
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 54; //@line 942
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 944
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 946
  sp = STACKTOP; //@line 947
  return 0; //@line 948
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 950
 if (($2 | 0) != 0 & ($9 | 0) > -1) {
  $14 = $1 + 12 | 0; //@line 955
  dest = $2; //@line 956
  src = $14; //@line 956
  stop = dest + 60 | 0; //@line 956
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 956
   dest = dest + 4 | 0; //@line 956
   src = src + 4 | 0; //@line 956
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$14 + 60 >> 1] | 0; //@line 956
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 958
 _wait_ms(1); //@line 959
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 55; //@line 962
  HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 964
  sp = STACKTOP; //@line 965
  return 0; //@line 966
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 968
  return $9 | 0; //@line 969
 }
 return 0; //@line 971
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 1132
 if (!$2) {
  $$0 = -1; //@line 1135
  return $$0 | 0; //@line 1136
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 1139
 $5 = $0 + 20 | 0; //@line 1140
 HEAP32[$5 >> 2] = 0; //@line 1141
 $6 = $0 + 16 | 0; //@line 1142
 HEAP32[$6 >> 2] = 0; //@line 1143
 if ($1 | 0) {
  $$034$i = $1; //@line 1146
  $23 = 0; //@line 1146
  do {
   $23 = $23 + 1 | 0; //@line 1148
   $$034$i = $$034$i >>> 1; //@line 1149
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 1157
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1160
 HEAP32[$0 + 28 >> 2] = $1; //@line 1162
 HEAP32[$0 + 32 >> 2] = $2; //@line 1164
 HEAP32[$0 >> 2] = 0; //@line 1165
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1168
 HEAP8[$0 + 9 >> 0] = 0; //@line 1170
 HEAP8[$0 + 8 >> 0] = 0; //@line 1172
 HEAP8[$0 + 36 >> 0] = 0; //@line 1174
 HEAP32[$0 + 40 >> 2] = 0; //@line 1176
 HEAP32[$0 + 44 >> 2] = 0; //@line 1178
 HEAP8[$0 + 184 >> 0] = 0; //@line 1180
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1182
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 1185
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1188
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 1191
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1194
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 1197
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 1200
 $$0 = $$033$i; //@line 1201
 return $$0 | 0; //@line 1202
}
function __Z28nsapi_dns_query_async_canceli__async_cb($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5404
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5408
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5410
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5412
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 5413
 $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 5414
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 5417
  HEAP32[___async_retval >> 2] = 0; //@line 5419
  return;
 }
 $11 = HEAP32[$$pre + 4 >> 2] | 0; //@line 5423
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 5424
 FUNCTION_TABLE_vii[$11 & 7]($6, $8); //@line 5425
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 265; //@line 5428
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 5429
  HEAP32[$12 >> 2] = $$phi$trans$insert; //@line 5430
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 5431
  HEAP32[$13 >> 2] = $4; //@line 5432
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 5433
  HEAP32[$14 >> 2] = $8; //@line 5434
  sp = STACKTOP; //@line 5435
  return;
 }
 ___async_unwind = 0; //@line 5438
 HEAP32[$ReallocAsyncCtx2 >> 2] = 265; //@line 5439
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 5440
 HEAP32[$12 >> 2] = $$phi$trans$insert; //@line 5441
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 5442
 HEAP32[$13 >> 2] = $4; //@line 5443
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 5444
 HEAP32[$14 >> 2] = $8; //@line 5445
 sp = STACKTOP; //@line 5446
 return;
}
function __ZN9UDPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5111
 HEAP32[$0 >> 2] = 592; //@line 5112
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5113
 __ZN6Socket5closeEv($0) | 0; //@line 5114
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 133; //@line 5117
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5119
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 5121
  sp = STACKTOP; //@line 5122
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5125
 HEAP32[$0 >> 2] = 556; //@line 5126
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 5128
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 5134
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5135
   FUNCTION_TABLE_vi[$8 & 511]($0 + 32 | 0); //@line 5136
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 134; //@line 5139
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5141
    sp = STACKTOP; //@line 5142
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5145
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 5151
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 5158
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5159
 FUNCTION_TABLE_vi[$15 & 511]($0 + 16 | 0); //@line 5160
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 135; //@line 5163
  sp = STACKTOP; //@line 5164
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5167
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 523
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 120 >> 2] | 0; //@line 526
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 527
 $8 = FUNCTION_TABLE_iiiii[$7 & 15]($0, $1, $3, $4) | 0; //@line 528
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 41; //@line 531
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 533
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 535
  sp = STACKTOP; //@line 536
  return 0; //@line 537
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 539
 if (($2 | 0) != 0 & ($8 | 0) > -1) {
  $13 = $1 + 12 | 0; //@line 544
  dest = $2; //@line 545
  src = $13; //@line 545
  stop = dest + 60 | 0; //@line 545
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 545
   dest = dest + 4 | 0; //@line 545
   src = src + 4 | 0; //@line 545
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$13 + 60 >> 1] | 0; //@line 545
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 547
 _wait_ms(1); //@line 548
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 42; //@line 551
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 553
  sp = STACKTOP; //@line 554
  return 0; //@line 555
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 557
  return $8 | 0; //@line 558
 }
 return 0; //@line 560
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6926
 STACKTOP = STACKTOP + 48 | 0; //@line 6927
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6927
 $$byval_copy = sp + 20 | 0; //@line 6928
 $4 = sp; //@line 6929
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6930
 $5 = __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $4, 1, $3) | 0; //@line 6931
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 151; //@line 6934
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6936
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 6938
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 6940
  sp = STACKTOP; //@line 6941
  STACKTOP = sp; //@line 6942
  return 0; //@line 6942
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6944
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 6945
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 6945
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 6945
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 6945
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 6945
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 6946
  STACKTOP = sp; //@line 6949
  return (($5 | 0) < 0 ? $5 : 0) | 0; //@line 6949
 }
 return 0; //@line 6951
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 12508
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 12513
    $$0 = 1; //@line 12514
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 12527
     $$0 = 1; //@line 12528
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12532
     $$0 = -1; //@line 12533
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 12543
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 12547
    $$0 = 2; //@line 12548
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 12560
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 12566
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 12570
    $$0 = 3; //@line 12571
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 12581
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 12587
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 12593
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 12597
    $$0 = 4; //@line 12598
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12602
    $$0 = -1; //@line 12603
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 12608
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_17($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17207
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17211
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17213
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17215
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17216
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 17220
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 17224
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 17225
 FUNCTION_TABLE_vi[$12 & 511]($4); //@line 17226
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 17229
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 17230
  HEAP32[$13 >> 2] = $4; //@line 17231
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 17232
  HEAP32[$14 >> 2] = $6; //@line 17233
  $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 17234
  HEAP32[$15 >> 2] = $8; //@line 17235
  sp = STACKTOP; //@line 17236
  return;
 }
 ___async_unwind = 0; //@line 17239
 HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 17240
 $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 17241
 HEAP32[$13 >> 2] = $4; //@line 17242
 $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 17243
 HEAP32[$14 >> 2] = $6; //@line 17244
 $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 17245
 HEAP32[$15 >> 2] = $8; //@line 17246
 sp = STACKTOP; //@line 17247
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_172($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6482
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6484
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6486
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6488
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6490
 $9 = HEAP32[$2 >> 2] | 0; //@line 6491
 if (!$9) {
  if (!$6) {
   return;
  }
  __ZdaPv($6); //@line 6498
  return;
 } else {
  $11 = HEAP32[$9 >> 2] | 0; //@line 6501
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 6502
  FUNCTION_TABLE_viii[$11 & 0]($4, $8, $6); //@line 6503
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 255; //@line 6506
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 6507
   HEAP32[$12 >> 2] = $2; //@line 6508
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 6509
   HEAP32[$13 >> 2] = $4; //@line 6510
   $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 6511
   HEAP32[$14 >> 2] = $6; //@line 6512
   sp = STACKTOP; //@line 6513
   return;
  }
  ___async_unwind = 0; //@line 6516
  HEAP32[$ReallocAsyncCtx2 >> 2] = 255; //@line 6517
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 6518
  HEAP32[$12 >> 2] = $2; //@line 6519
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 6520
  HEAP32[$13 >> 2] = $4; //@line 6521
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 6522
  HEAP32[$14 >> 2] = $6; //@line 6523
  sp = STACKTOP; //@line 6524
  return;
 }
}
function __ZN9UDPSocketD2Ev__async_cb_41($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19538
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19542
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 556; //@line 19543
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 19545
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 19550
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 19551
  FUNCTION_TABLE_vi[$10 & 511]($4 + 32 | 0); //@line 19552
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 19555
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 19556
   HEAP32[$11 >> 2] = $4; //@line 19557
   sp = STACKTOP; //@line 19558
   return;
  }
  ___async_unwind = 0; //@line 19561
  HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 19562
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 19563
  HEAP32[$11 >> 2] = $4; //@line 19564
  sp = STACKTOP; //@line 19565
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 19569
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 19576
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 19577
 FUNCTION_TABLE_vi[$17 & 511]($4 + 16 | 0); //@line 19578
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 19581
  sp = STACKTOP; //@line 19582
  return;
 }
 ___async_unwind = 0; //@line 19585
 HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 19586
 sp = STACKTOP; //@line 19587
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_84($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 1125
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1127
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1129
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1131
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1133
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 1138
  return;
 }
 dest = $2 + 4 | 0; //@line 1142
 stop = dest + 52 | 0; //@line 1142
 do {
  HEAP32[dest >> 2] = 0; //@line 1142
  dest = dest + 4 | 0; //@line 1142
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 1143
 HEAP32[$2 + 8 >> 2] = $4; //@line 1145
 HEAP32[$2 + 12 >> 2] = -1; //@line 1147
 HEAP32[$2 + 48 >> 2] = 1; //@line 1149
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 1152
 $16 = HEAP32[$6 >> 2] | 0; //@line 1153
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 1154
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 1155
 if (!___async) {
  ___async_unwind = 0; //@line 1158
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 333; //@line 1160
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 1162
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 1164
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 1166
 sp = STACKTOP; //@line 1167
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_35($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18972
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18976
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18978
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18980
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18982
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18984
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 18987
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 18988
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 18994
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 18995
   if (!___async) {
    ___async_unwind = 0; //@line 18998
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 346; //@line 19000
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 19002
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 19004
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 19006
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 19008
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 19010
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 19012
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 19015
   sp = STACKTOP; //@line 19016
   return;
  }
 }
 return;
}
function __ZNK13SocketAddress14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4838
 STACKTOP = STACKTOP + 16 | 0; //@line 4839
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4839
 $vararg_buffer = sp; //@line 4840
 $2 = HEAP32[$0 + 40 >> 2] | 0; //@line 4842
 if (!$2) {
  $$0 = 0; //@line 4845
  STACKTOP = sp; //@line 4846
  return $$0 | 0; //@line 4846
 }
 if (HEAP8[$0 >> 0] | 0) {
  $$0 = $0; //@line 4851
  STACKTOP = sp; //@line 4852
  return $$0 | 0; //@line 4852
 }
 switch ($2 | 0) {
 case 1:
  {
   $11 = HEAPU8[$0 + 45 >> 0] | 0; //@line 4861
   $14 = HEAPU8[$0 + 46 >> 0] | 0; //@line 4864
   $17 = HEAPU8[$0 + 47 >> 0] | 0; //@line 4867
   HEAP32[$vararg_buffer >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 4868
   HEAP32[$vararg_buffer + 4 >> 2] = $11; //@line 4870
   HEAP32[$vararg_buffer + 8 >> 2] = $14; //@line 4872
   HEAP32[$vararg_buffer + 12 >> 2] = $17; //@line 4874
   _sprintf($0, 2803, $vararg_buffer) | 0; //@line 4875
   $$0 = $0; //@line 4876
   STACKTOP = sp; //@line 4877
   return $$0 | 0; //@line 4877
  }
 case 2:
  {
   _ip6tos($0 + 44 | 0, $0) | 0; //@line 4882
   $$0 = $0; //@line 4883
   STACKTOP = sp; //@line 4884
   return $$0 | 0; //@line 4884
  }
 default:
  {
   $$0 = $0; //@line 4888
   STACKTOP = sp; //@line 4889
   return $$0 | 0; //@line 4889
  }
 }
 return 0; //@line 4892
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_67($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22805
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22809
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22811
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22813
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22814
 if (!$$pr$i) {
  _free($6); //@line 22817
  return;
 }
 $11 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 22821
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 22822
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 22823
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 240; //@line 22826
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 22827
  HEAP32[$12 >> 2] = $4; //@line 22828
  $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 22829
  HEAP32[$13 >> 2] = $6; //@line 22830
  $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 22831
  HEAP32[$14 >> 2] = $8; //@line 22832
  sp = STACKTOP; //@line 22833
  return;
 }
 ___async_unwind = 0; //@line 22836
 HEAP32[$ReallocAsyncCtx7 >> 2] = 240; //@line 22837
 $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 22838
 HEAP32[$12 >> 2] = $4; //@line 22839
 $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 22840
 HEAP32[$13 >> 2] = $6; //@line 22841
 $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 22842
 HEAP32[$14 >> 2] = $8; //@line 22843
 sp = STACKTOP; //@line 22844
 return;
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 1212
 HEAP32[$0 + 20 >> 2] = 0; //@line 1214
 $5 = $0 + 16 | 0; //@line 1215
 HEAP32[$5 >> 2] = 0; //@line 1216
 if ($1 | 0) {
  $$034 = $1; //@line 1219
  $22 = 0; //@line 1219
  do {
   $22 = $22 + 1 | 0; //@line 1221
   $$034 = $$034 >>> 1; //@line 1222
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 1230
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1233
 HEAP32[$0 + 28 >> 2] = $1; //@line 1235
 HEAP32[$0 + 32 >> 2] = $2; //@line 1237
 HEAP32[$0 >> 2] = 0; //@line 1238
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1241
 HEAP8[$0 + 9 >> 0] = 0; //@line 1243
 HEAP8[$0 + 8 >> 0] = 0; //@line 1245
 HEAP8[$0 + 36 >> 0] = 0; //@line 1247
 HEAP32[$0 + 40 >> 2] = 0; //@line 1249
 HEAP32[$0 + 44 >> 2] = 0; //@line 1251
 HEAP8[$0 + 184 >> 0] = 0; //@line 1253
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1255
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 1258
  return $$033 | 0; //@line 1259
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1262
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 1265
  return $$033 | 0; //@line 1266
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1269
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 1272
 return $$033 | 0; //@line 1273
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 11392
  $8 = $0; //@line 11392
  $9 = $1; //@line 11392
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11394
   $$0914 = $$0914 + -1 | 0; //@line 11398
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 11399
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11400
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 11408
   }
  }
  $$010$lcssa$off0 = $8; //@line 11413
  $$09$lcssa = $$0914; //@line 11413
 } else {
  $$010$lcssa$off0 = $0; //@line 11415
  $$09$lcssa = $2; //@line 11415
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 11419
 } else {
  $$012 = $$010$lcssa$off0; //@line 11421
  $$111 = $$09$lcssa; //@line 11421
  while (1) {
   $26 = $$111 + -1 | 0; //@line 11426
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 11427
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 11431
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 11434
    $$111 = $26; //@line 11434
   }
  }
 }
 return $$1$lcssa | 0; //@line 11438
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_141($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4845
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4851
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4853
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4855
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4857
 $13 = $4 + 12 | 0; //@line 4859
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4860
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 4861
 $14 = FUNCTION_TABLE_iiiii[$12 & 15]($6, $8, $4, $10) | 0; //@line 4862
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 80; //@line 4865
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 4866
  HEAP32[$15 >> 2] = $13; //@line 4867
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 4868
  HEAP32[$16 >> 2] = $4; //@line 4869
  sp = STACKTOP; //@line 4870
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 4874
 ___async_unwind = 0; //@line 4875
 HEAP32[$ReallocAsyncCtx3 >> 2] = 80; //@line 4876
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 4877
 HEAP32[$15 >> 2] = $13; //@line 4878
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 4879
 HEAP32[$16 >> 2] = $4; //@line 4880
 sp = STACKTOP; //@line 4881
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_120($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3202
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3206
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 3209
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3210
 if (!$7) {
  if ($6) {
   $$06 = -3007; //@line 3214
   $12 = ___async_retval; //@line 3215
   HEAP32[$12 >> 2] = $$06; //@line 3216
   return;
  }
  $$06 = 0; //@line 3219
  $12 = ___async_retval; //@line 3220
  HEAP32[$12 >> 2] = $$06; //@line 3221
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 3225
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 3226
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 3227
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 105; //@line 3230
   $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 3231
   $$expand_i1_val = $6 & 1; //@line 3232
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 3233
   sp = STACKTOP; //@line 3234
   return;
  }
  ___async_unwind = 0; //@line 3237
  HEAP32[$ReallocAsyncCtx3 >> 2] = 105; //@line 3238
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 3239
  $$expand_i1_val = $6 & 1; //@line 3240
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 3241
  sp = STACKTOP; //@line 3242
  return;
 }
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_119($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3155
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3159
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 3162
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3163
 if (!$7) {
  if ($6) {
   $$06 = -3007; //@line 3167
   $12 = ___async_retval; //@line 3168
   HEAP32[$12 >> 2] = $$06; //@line 3169
   return;
  }
  $$06 = 0; //@line 3172
  $12 = ___async_retval; //@line 3173
  HEAP32[$12 >> 2] = $$06; //@line 3174
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 3178
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 3179
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 3180
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 110; //@line 3183
   $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 3184
   $$expand_i1_val = $6 & 1; //@line 3185
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 3186
   sp = STACKTOP; //@line 3187
   return;
  }
  ___async_unwind = 0; //@line 3190
  HEAP32[$ReallocAsyncCtx6 >> 2] = 110; //@line 3191
  $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 3192
  $$expand_i1_val = $6 & 1; //@line 3193
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 3194
  sp = STACKTOP; //@line 3195
  return;
 }
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_114($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 3005
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3009
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3011
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3013
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3015
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3017
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 3020
 _equeue_event_delay($4, $6); //@line 3021
 _equeue_event_dtor($4, 102); //@line 3022
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 3023
 $14 = _equeue_post($8, 103, $4) | 0; //@line 3024
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 104; //@line 3027
  $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 3028
  HEAP32[$15 >> 2] = $10; //@line 3029
  $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 3030
  HEAP32[$16 >> 2] = $12; //@line 3031
  sp = STACKTOP; //@line 3032
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 3036
 ___async_unwind = 0; //@line 3037
 HEAP32[$ReallocAsyncCtx8 >> 2] = 104; //@line 3038
 $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 3039
 HEAP32[$15 >> 2] = $10; //@line 3040
 $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 3041
 HEAP32[$16 >> 2] = $12; //@line 3042
 sp = STACKTOP; //@line 3043
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_7($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16463
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16467
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16469
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16471
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16473
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16475
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16477
 $15 = $4 + 12 | 0; //@line 16479
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16480
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 16481
 $16 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($6, $8, $10, 0, $4, $12) | 0; //@line 16482
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 16486
  ___async_unwind = 0; //@line 16487
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 154; //@line 16489
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $15; //@line 16491
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $14; //@line 16493
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $4; //@line 16495
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 16497
 sp = STACKTOP; //@line 16498
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18743
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18745
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18749
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18751
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18753
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18755
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 18759
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 18762
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 18763
   if (!___async) {
    ___async_unwind = 0; //@line 18766
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 350; //@line 18768
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 18770
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 18772
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 18774
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 18776
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 18778
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 18780
   sp = STACKTOP; //@line 18781
   return;
  }
 }
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_193($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 9898
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9900
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9902
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9904
 $8 = HEAP32[$2 + 28 >> 2] | 0; //@line 9906
 if (!$8) {
  __ZdlPv($2); //@line 9909
  HEAP32[___async_retval >> 2] = -3007; //@line 9911
  return;
 }
 $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 9915
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 9916
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 9917
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 9920
  $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 9921
  HEAP32[$12 >> 2] = $2; //@line 9922
  $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 9923
  HEAP32[$13 >> 2] = $6; //@line 9924
  sp = STACKTOP; //@line 9925
  return;
 }
 ___async_unwind = 0; //@line 9928
 HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 9929
 $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 9930
 HEAP32[$12 >> 2] = $2; //@line 9931
 $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 9932
 HEAP32[$13 >> 2] = $6; //@line 9933
 sp = STACKTOP; //@line 9934
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 19637
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19639
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19643
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 19648
  dest = $2; //@line 19649
  src = $8; //@line 19649
  stop = dest + 60 | 0; //@line 19649
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 19649
   dest = dest + 4 | 0; //@line 19649
   src = src + 4 | 0; //@line 19649
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 19649
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19651
 _wait_ms(1); //@line 19652
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 55; //@line 19655
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 19656
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 19657
  sp = STACKTOP; //@line 19658
  return;
 }
 ___async_unwind = 0; //@line 19661
 HEAP32[$ReallocAsyncCtx2 >> 2] = 55; //@line 19662
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 19663
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 19664
 sp = STACKTOP; //@line 19665
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 4652
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 4657
   label = 4; //@line 4658
  } else {
   $$01519 = $0; //@line 4660
   $23 = $1; //@line 4660
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 4665
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 4668
    $23 = $6; //@line 4669
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 4673
     label = 4; //@line 4674
     break;
    } else {
     $$01519 = $6; //@line 4677
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 4683
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 4685
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 4693
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 4701
  } else {
   $$pn = $$0; //@line 4703
   while (1) {
    $19 = $$pn + 1 | 0; //@line 4705
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 4709
     break;
    } else {
     $$pn = $19; //@line 4712
    }
   }
  }
  $$sink = $$1$lcssa; //@line 4717
 }
 return $$sink - $1 | 0; //@line 4720
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 19593
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19595
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19599
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 19604
  dest = $2; //@line 19605
  src = $8; //@line 19605
  stop = dest + 60 | 0; //@line 19605
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 19605
   dest = dest + 4 | 0; //@line 19605
   src = src + 4 | 0; //@line 19605
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 19605
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19607
 _wait_ms(1); //@line 19608
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 42; //@line 19611
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 19612
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 19613
  sp = STACKTOP; //@line 19614
  return;
 }
 ___async_unwind = 0; //@line 19617
 HEAP32[$ReallocAsyncCtx2 >> 2] = 42; //@line 19618
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 19619
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 19620
 sp = STACKTOP; //@line 19621
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 14447
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 14454
   $10 = $1 + 16 | 0; //@line 14455
   $11 = HEAP32[$10 >> 2] | 0; //@line 14456
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 14459
    HEAP32[$1 + 24 >> 2] = $4; //@line 14461
    HEAP32[$1 + 36 >> 2] = 1; //@line 14463
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 14473
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 14478
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 14481
    HEAP8[$1 + 54 >> 0] = 1; //@line 14483
    break;
   }
   $21 = $1 + 24 | 0; //@line 14486
   $22 = HEAP32[$21 >> 2] | 0; //@line 14487
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 14490
    $28 = $4; //@line 14491
   } else {
    $28 = $22; //@line 14493
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 14502
   }
  }
 } while (0);
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13733
 $1 = HEAP32[219] | 0; //@line 13734
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 13740
 } else {
  $19 = 0; //@line 13742
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 13748
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 13754
    $12 = HEAP32[$11 >> 2] | 0; //@line 13755
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 13761
     HEAP8[$12 >> 0] = 10; //@line 13762
     $22 = 0; //@line 13763
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13767
   $17 = ___overflow($1, 10) | 0; //@line 13768
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 323; //@line 13771
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 13773
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 13775
    sp = STACKTOP; //@line 13776
    return 0; //@line 13777
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13779
    $22 = $17 >> 31; //@line 13781
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 13788
 }
 return $22 | 0; //@line 13790
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_144($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5162
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5166
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5168
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5170
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5172
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5174
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5176
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5178
 $17 = $4 + 12 | 0; //@line 5180
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 5181
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 5182
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 5183
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 5187
  ___async_unwind = 0; //@line 5188
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 113; //@line 5190
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 5192
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 5194
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 5196
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 5198
 sp = STACKTOP; //@line 5199
 return;
}
function __ZN6Socket5closeEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7426
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7428
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7430
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7432
 $7 = HEAP32[$2 >> 2] | 0; //@line 7433
 HEAP32[$2 >> 2] = 0; //@line 7434
 $8 = HEAP32[$4 >> 2] | 0; //@line 7435
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0; //@line 7438
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 7439
 $12 = FUNCTION_TABLE_iii[$11 & 15]($8, $7) | 0; //@line 7440
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 129; //@line 7443
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 7444
  HEAP32[$13 >> 2] = $4; //@line 7445
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 7446
  HEAP32[$14 >> 2] = $6; //@line 7447
  sp = STACKTOP; //@line 7448
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 7452
 ___async_unwind = 0; //@line 7453
 HEAP32[$ReallocAsyncCtx2 >> 2] = 129; //@line 7454
 $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 7455
 HEAP32[$13 >> 2] = $4; //@line 7456
 $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 7457
 HEAP32[$14 >> 2] = $6; //@line 7458
 sp = STACKTOP; //@line 7459
 return;
}
function _mbed_vtracef__async_cb_25($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18180
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18182
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18184
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18186
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 18191
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18193
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 18198
 $16 = _snprintf($4, $6, 2667, $2) | 0; //@line 18199
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 18201
 $19 = $4 + $$18 | 0; //@line 18203
 $20 = $6 - $$18 | 0; //@line 18204
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 2745, $12) | 0; //@line 18212
  }
 }
 $23 = HEAP32[129] | 0; //@line 18215
 $24 = HEAP32[122] | 0; //@line 18216
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 18217
 FUNCTION_TABLE_vi[$23 & 511]($24); //@line 18218
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 18221
  sp = STACKTOP; //@line 18222
  return;
 }
 ___async_unwind = 0; //@line 18225
 HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 18226
 sp = STACKTOP; //@line 18227
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_117($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 3098
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3102
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3104
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3106
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3108
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 3111
 _equeue_event_dtor($4, 102); //@line 3112
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 3113
 $12 = _equeue_post($6, 103, $4) | 0; //@line 3114
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 109; //@line 3117
  $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 3118
  HEAP32[$13 >> 2] = $8; //@line 3119
  $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 3120
  HEAP32[$14 >> 2] = $10; //@line 3121
  sp = STACKTOP; //@line 3122
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 3126
 ___async_unwind = 0; //@line 3127
 HEAP32[$ReallocAsyncCtx7 >> 2] = 109; //@line 3128
 $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 3129
 HEAP32[$13 >> 2] = $8; //@line 3130
 $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 3131
 HEAP32[$14 >> 2] = $10; //@line 3132
 sp = STACKTOP; //@line 3133
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20304
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20306
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20308
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20310
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20312
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20314
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20316
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20318
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20320
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 20321
 $16 = FUNCTION_TABLE_iiii[$6 & 31]($2, $4, $AsyncRetVal) | 0; //@line 20322
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 20326
  ___async_unwind = 0; //@line 20327
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 119; //@line 20329
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 20331
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 20333
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $12; //@line 20335
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $4; //@line 20337
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 20339
 sp = STACKTOP; //@line 20340
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_33($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18791
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18797
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18799
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18801
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18803
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 18808
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 18810
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 18811
 if (!___async) {
  ___async_unwind = 0; //@line 18814
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 350; //@line 18816
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 18818
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 18820
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 18822
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 18824
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 18826
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 18828
 sp = STACKTOP; //@line 18829
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_156($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5679
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5683
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5685
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5687
 $9 = $4 + 12 | 0; //@line 5689
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 5690
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 5691
 $10 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($6, $8, $4) | 0; //@line 5692
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 192; //@line 5695
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 5696
  HEAP32[$11 >> 2] = $9; //@line 5697
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 5698
  HEAP32[$12 >> 2] = $4; //@line 5699
  sp = STACKTOP; //@line 5700
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 5704
 ___async_unwind = 0; //@line 5705
 HEAP32[$ReallocAsyncCtx5 >> 2] = 192; //@line 5706
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 5707
 HEAP32[$11 >> 2] = $9; //@line 5708
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 5709
 HEAP32[$12 >> 2] = $4; //@line 5710
 sp = STACKTOP; //@line 5711
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_1($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15991
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15995
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15997
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15999
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16001
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16003
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16005
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16007
 $17 = $4 + 12 | 0; //@line 16009
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16010
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 16011
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 16012
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 16016
  ___async_unwind = 0; //@line 16017
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 16019
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 16021
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 16023
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 16025
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 16027
 sp = STACKTOP; //@line 16028
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2405
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2407
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2409
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2411
 $7 = $2 + 12 | 0; //@line 2412
 $8 = HEAP32[$7 >> 2] | 0; //@line 2413
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 2416
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 2420
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 2421
 FUNCTION_TABLE_vii[$11 & 7]($6, $2); //@line 2422
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 132; //@line 2425
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 2426
  HEAP32[$12 >> 2] = $7; //@line 2427
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 2428
  HEAP32[$13 >> 2] = $4; //@line 2429
  sp = STACKTOP; //@line 2430
  return;
 }
 ___async_unwind = 0; //@line 2433
 HEAP32[$ReallocAsyncCtx2 >> 2] = 132; //@line 2434
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 2435
 HEAP32[$12 >> 2] = $7; //@line 2436
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 2437
 HEAP32[$13 >> 2] = $4; //@line 2438
 sp = STACKTOP; //@line 2439
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2745
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2748
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2749
 $7 = FUNCTION_TABLE_ii[$6 & 31]($0) | 0; //@line 2750
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 76; //@line 2753
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2755
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2757
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 2759
  sp = STACKTOP; //@line 2760
  return 0; //@line 2761
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2763
 $12 = HEAP32[HEAP32[$7 >> 2] >> 2] | 0; //@line 2765
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2766
 $13 = FUNCTION_TABLE_iiiii[$12 & 15]($7, $1, $2, $3) | 0; //@line 2767
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 77; //@line 2770
  sp = STACKTOP; //@line 2771
  return 0; //@line 2772
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2774
  return $13 | 0; //@line 2775
 }
 return 0; //@line 2777
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19913
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19915
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19917
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19919
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 19921
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 19923
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 6046; //@line 19928
  HEAP32[$4 + 4 >> 2] = $6; //@line 19930
  _abort_message(5955, $4); //@line 19931
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 19934
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 19937
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 19938
 $16 = FUNCTION_TABLE_ii[$15 & 31]($12) | 0; //@line 19939
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 19943
  ___async_unwind = 0; //@line 19944
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 329; //@line 19946
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 19948
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 19950
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 19952
 sp = STACKTOP; //@line 19953
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_167($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6198
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6202
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6204
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6205
 if (!$$pr$i) {
  if (!$6) {
   return;
  }
  __ZdaPv($6); //@line 6212
  return;
 } else {
  $9 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 6216
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 6217
  FUNCTION_TABLE_vi[$9 & 511]($4); //@line 6218
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 256; //@line 6221
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 6222
   HEAP32[$10 >> 2] = $4; //@line 6223
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 6224
   HEAP32[$11 >> 2] = $6; //@line 6225
   sp = STACKTOP; //@line 6226
   return;
  }
  ___async_unwind = 0; //@line 6229
  HEAP32[$ReallocAsyncCtx3 >> 2] = 256; //@line 6230
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 6231
  HEAP32[$10 >> 2] = $4; //@line 6232
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 6233
  HEAP32[$11 >> 2] = $6; //@line 6234
  sp = STACKTOP; //@line 6235
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16626
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16628
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16630
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16634
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 16638
  label = 4; //@line 16639
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 16644
   label = 4; //@line 16645
  } else {
   $$037$off039 = 3; //@line 16647
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 16651
  $17 = $8 + 40 | 0; //@line 16652
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 16655
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 16665
    $$037$off039 = $$037$off038; //@line 16666
   } else {
    $$037$off039 = $$037$off038; //@line 16668
   }
  } else {
   $$037$off039 = $$037$off038; //@line 16671
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 16674
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14306
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 14315
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 14320
      HEAP32[$13 >> 2] = $2; //@line 14321
      $19 = $1 + 40 | 0; //@line 14322
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 14325
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14335
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 14339
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 14346
    }
   }
  }
 } while (0);
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 12628
 while (1) {
  if ((HEAPU8[4018 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 12635
   break;
  }
  $7 = $$016 + 1 | 0; //@line 12638
  if (($7 | 0) == 87) {
   $$01214 = 4106; //@line 12641
   $$115 = 87; //@line 12641
   label = 5; //@line 12642
   break;
  } else {
   $$016 = $7; //@line 12645
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 4106; //@line 12651
  } else {
   $$01214 = 4106; //@line 12653
   $$115 = $$016; //@line 12653
   label = 5; //@line 12654
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 12659
   $$113 = $$01214; //@line 12660
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 12664
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 12671
   if (!$$115) {
    $$012$lcssa = $$113; //@line 12674
    break;
   } else {
    $$01214 = $$113; //@line 12677
    label = 5; //@line 12678
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 12685
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_61($0) {
 $0 = $0 | 0;
 var $$4$ = 0, $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22135
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22139
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22141
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22143
 $$4$ = ($AsyncRetVal | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : $AsyncRetVal; //@line 22145
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 22146
 __ZN9UDPSocketD2Ev($4); //@line 22147
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 148; //@line 22150
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 22151
  HEAP32[$9 >> 2] = $6; //@line 22152
  $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 22153
  HEAP32[$10 >> 2] = $$4$; //@line 22154
  sp = STACKTOP; //@line 22155
  return;
 }
 ___async_unwind = 0; //@line 22158
 HEAP32[$ReallocAsyncCtx5 >> 2] = 148; //@line 22159
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 22160
 HEAP32[$9 >> 2] = $6; //@line 22161
 $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 22162
 HEAP32[$10 >> 2] = $$4$; //@line 22163
 sp = STACKTOP; //@line 22164
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_91($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1789
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1791
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1793
 $6 = HEAP32[$2 + 28 >> 2] | 0; //@line 1795
 if (!$6) {
  __ZdlPv($2); //@line 1798
  HEAP32[6740 + ($4 << 2) >> 2] = 0; //@line 1800
  return;
 }
 $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 1805
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 1806
 FUNCTION_TABLE_vi[$10 & 511]($2 + 16 | 0); //@line 1807
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 1810
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 1811
  HEAP32[$11 >> 2] = $2; //@line 1812
  $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 1813
  HEAP32[$12 >> 2] = $4; //@line 1814
  sp = STACKTOP; //@line 1815
  return;
 }
 ___async_unwind = 0; //@line 1818
 HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 1819
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 1820
 HEAP32[$11 >> 2] = $2; //@line 1821
 $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 1822
 HEAP32[$12 >> 2] = $4; //@line 1823
 sp = STACKTOP; //@line 1824
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 12701
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 12705
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 12708
   if (!$5) {
    $$0 = 0; //@line 12711
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 12717
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 12723
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 12730
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 12737
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 12744
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 12751
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 12758
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 12762
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 12772
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 22604
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22610
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22612
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 22614
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22615
 $10 = HEAP32[$6 >> 2] | 0; //@line 22616
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 22617
 __ZL28nsapi_dns_query_async_deletei($10); //@line 22618
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 231; //@line 22621
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 22622
  HEAP32[$11 >> 2] = $9; //@line 22623
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 22624
  HEAP32[$12 >> 2] = $8; //@line 22625
  sp = STACKTOP; //@line 22626
  return;
 }
 ___async_unwind = 0; //@line 22629
 HEAP32[$ReallocAsyncCtx9 >> 2] = 231; //@line 22630
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 22631
 HEAP32[$11 >> 2] = $9; //@line 22632
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 22633
 HEAP32[$12 >> 2] = $8; //@line 22634
 sp = STACKTOP; //@line 22635
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2699
 $1 = $0 + 12 | 0; //@line 2700
 $2 = HEAP32[$1 >> 2] | 0; //@line 2701
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2705
   _mbed_assert_internal(2972, 2977, 528); //@line 2706
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 74; //@line 2709
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 2711
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 2713
    sp = STACKTOP; //@line 2714
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2717
    $7 = HEAP32[$1 >> 2] | 0; //@line 2719
    break;
   }
  } else {
   $7 = $2; //@line 2723
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 2726
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2727
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 2728
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 75; //@line 2731
  sp = STACKTOP; //@line 2732
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2735
  return;
 }
}
function __ZL28nsapi_dns_query_async_createPv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 3508
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3514
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3516
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 3518
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 3519
 $10 = HEAP32[$6 >> 2] | 0; //@line 3520
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 3521
 __ZL28nsapi_dns_query_async_deletei($10); //@line 3522
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 3525
  $11 = $ReallocAsyncCtx15 + 4 | 0; //@line 3526
  HEAP32[$11 >> 2] = $9; //@line 3527
  $12 = $ReallocAsyncCtx15 + 8 | 0; //@line 3528
  HEAP32[$12 >> 2] = $8; //@line 3529
  sp = STACKTOP; //@line 3530
  return;
 }
 ___async_unwind = 0; //@line 3533
 HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 3534
 $11 = $ReallocAsyncCtx15 + 4 | 0; //@line 3535
 HEAP32[$11 >> 2] = $9; //@line 3536
 $12 = $ReallocAsyncCtx15 + 8 | 0; //@line 3537
 HEAP32[$12 >> 2] = $8; //@line 3538
 sp = STACKTOP; //@line 3539
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_137($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4349
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4351
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4353
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4355
 $7 = HEAP32[$2 >> 2] | 0; //@line 4356
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 4361
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 4362
 FUNCTION_TABLE_viii[$9 & 0]($4, $6, 0); //@line 4363
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 210; //@line 4366
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 4367
  HEAP32[$10 >> 2] = $2; //@line 4368
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 4369
  HEAP32[$11 >> 2] = $4; //@line 4370
  sp = STACKTOP; //@line 4371
  return;
 }
 ___async_unwind = 0; //@line 4374
 HEAP32[$ReallocAsyncCtx6 >> 2] = 210; //@line 4375
 $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 4376
 HEAP32[$10 >> 2] = $2; //@line 4377
 $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 4378
 HEAP32[$11 >> 2] = $4; //@line 4379
 sp = STACKTOP; //@line 4380
 return;
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 12897
 $32 = $0 + 3 | 0; //@line 12911
 $33 = HEAP8[$32 >> 0] | 0; //@line 12912
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 12914
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 12919
  $$sink21$lcssa = $32; //@line 12919
 } else {
  $$sink2123 = $32; //@line 12921
  $39 = $35; //@line 12921
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 12924
   $41 = HEAP8[$40 >> 0] | 0; //@line 12925
   $39 = $39 << 8 | $41 & 255; //@line 12927
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 12932
    $$sink21$lcssa = $40; //@line 12932
    break;
   } else {
    $$sink2123 = $40; //@line 12935
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 12942
}
function _mbed_vtracef__async_cb_31($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18565
 $3 = HEAP32[130] | 0; //@line 18569
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[122] | 0; //@line 18573
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18574
  FUNCTION_TABLE_vi[$3 & 511]($5); //@line 18575
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 18578
   sp = STACKTOP; //@line 18579
   return;
  }
  ___async_unwind = 0; //@line 18582
  HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 18583
  sp = STACKTOP; //@line 18584
  return;
 } else {
  $6 = HEAP32[129] | 0; //@line 18587
  $7 = HEAP32[122] | 0; //@line 18588
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 18589
  FUNCTION_TABLE_vi[$6 & 511]($7); //@line 18590
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 65; //@line 18593
   sp = STACKTOP; //@line 18594
   return;
  }
  ___async_unwind = 0; //@line 18597
  HEAP32[$ReallocAsyncCtx4 >> 2] = 65; //@line 18598
  sp = STACKTOP; //@line 18599
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4310
 $1 = $0 + 12 | 0; //@line 4311
 $2 = HEAP32[$1 >> 2] | 0; //@line 4312
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4316
   _mbed_assert_internal(2972, 2977, 528); //@line 4317
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 125; //@line 4320
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 4322
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4324
    sp = STACKTOP; //@line 4325
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4328
    $7 = HEAP32[$1 >> 2] | 0; //@line 4330
    break;
   }
  } else {
   $7 = $2; //@line 4334
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 4337
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4338
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 4339
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 126; //@line 4342
  sp = STACKTOP; //@line 4343
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4346
  return;
 }
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12853
 $2 = $0 + 12 | 0; //@line 12855
 $3 = HEAP32[$2 >> 2] | 0; //@line 12856
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12860
   _mbed_assert_internal(2972, 2977, 528); //@line 12861
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 290; //@line 12864
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 12866
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 12868
    sp = STACKTOP; //@line 12869
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12872
    $8 = HEAP32[$2 >> 2] | 0; //@line 12874
    break;
   }
  } else {
   $8 = $3; //@line 12878
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 12881
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12883
 FUNCTION_TABLE_vi[$7 & 511]($0); //@line 12884
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 291; //@line 12887
  sp = STACKTOP; //@line 12888
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12891
  return;
 }
}
function __ZN6SocketD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4033
 HEAP32[$0 >> 2] = 556; //@line 4034
 $2 = HEAP32[$0 + 44 >> 2] | 0; //@line 4036
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4042
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4043
   FUNCTION_TABLE_vi[$6 & 511]($0 + 32 | 0); //@line 4044
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 116; //@line 4047
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4049
    sp = STACKTOP; //@line 4050
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4053
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 28 >> 2] | 0; //@line 4059
 if (!$9) {
  return;
 }
 $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 4066
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4067
 FUNCTION_TABLE_vi[$13 & 511]($0 + 16 | 0); //@line 4068
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 117; //@line 4071
  sp = STACKTOP; //@line 4072
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4075
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_72($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22952
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22954
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22956
 $5 = HEAP32[$2 >> 2] | 0; //@line 22957
 if (!$5) {
  return;
 }
 $7 = HEAP32[$5 >> 2] | 0; //@line 22962
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 22963
 FUNCTION_TABLE_viii[$7 & 0]($4, -3007, 0); //@line 22964
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 233; //@line 22967
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 22968
  HEAP32[$8 >> 2] = $2; //@line 22969
  $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 22970
  HEAP32[$9 >> 2] = $4; //@line 22971
  sp = STACKTOP; //@line 22972
  return;
 }
 ___async_unwind = 0; //@line 22975
 HEAP32[$ReallocAsyncCtx2 >> 2] = 233; //@line 22976
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 22977
 HEAP32[$8 >> 2] = $2; //@line 22978
 $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 22979
 HEAP32[$9 >> 2] = $4; //@line 22980
 sp = STACKTOP; //@line 22981
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14139
 STACKTOP = STACKTOP + 16 | 0; //@line 14140
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14140
 $1 = sp; //@line 14141
 HEAP32[$1 >> 2] = $varargs; //@line 14142
 $2 = HEAP32[187] | 0; //@line 14143
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14144
 _vfprintf($2, $0, $1) | 0; //@line 14145
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 330; //@line 14148
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14150
  sp = STACKTOP; //@line 14151
  STACKTOP = sp; //@line 14152
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14154
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14155
 _fputc(10, $2) | 0; //@line 14156
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 331; //@line 14159
  sp = STACKTOP; //@line 14160
  STACKTOP = sp; //@line 14161
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14163
  _abort(); //@line 14164
 }
}
function __ZN9UDPSocketC2I17EthernetInterfaceEEPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13406
 __ZN6SocketC2Ev($0); //@line 13407
 HEAP32[$0 >> 2] = 592; //@line 13408
 HEAP32[$0 + 52 >> 2] = 0; //@line 13410
 $5 = HEAP32[(HEAP32[$1 >> 2] | 0) + 88 >> 2] | 0; //@line 13413
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13414
 $6 = FUNCTION_TABLE_ii[$5 & 31]($1) | 0; //@line 13415
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 304; //@line 13418
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13420
  sp = STACKTOP; //@line 13421
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13424
 $8 = __Z18nsapi_create_stackP12NetworkStack($6) | 0; //@line 13425
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13426
 __ZN6Socket4openEP12NetworkStack($0, $8) | 0; //@line 13427
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 305; //@line 13430
  sp = STACKTOP; //@line 13431
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13434
  return;
 }
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_142($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 4887
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4891
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4893
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 4894
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 4898
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 4902
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 4903
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 4904
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 81; //@line 4907
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 4908
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 4909
  sp = STACKTOP; //@line 4910
  return;
 }
 ___async_unwind = 0; //@line 4913
 HEAP32[$ReallocAsyncCtx4 >> 2] = 81; //@line 4914
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 4915
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 4916
 sp = STACKTOP; //@line 4917
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16276
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16278
 $6 = HEAP32[$0 + 16 >> 2] | 0; //@line 16282
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 16284
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 16286
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$0 = __ZNK13SocketAddress14get_ip_versionEv($2) | 0; //@line 16292
 } else {
  $$0 = 0; //@line 16294
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16296
 $14 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($6, $8, $10, $$0) | 0; //@line 16297
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 16300
  sp = STACKTOP; //@line 16301
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 16305
 ___async_unwind = 0; //@line 16306
 HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 16307
 sp = STACKTOP; //@line 16308
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_138($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4386
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4388
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4390
 $5 = HEAP32[$2 >> 2] | 0; //@line 4391
 if (!$5) {
  return;
 }
 $7 = HEAP32[$5 >> 2] | 0; //@line 4396
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 4397
 FUNCTION_TABLE_viii[$7 & 0]($4, -3007, 0); //@line 4398
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 204; //@line 4401
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 4402
  HEAP32[$8 >> 2] = $2; //@line 4403
  $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 4404
  HEAP32[$9 >> 2] = $4; //@line 4405
  sp = STACKTOP; //@line 4406
  return;
 }
 ___async_unwind = 0; //@line 4409
 HEAP32[$ReallocAsyncCtx2 >> 2] = 204; //@line 4410
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 4411
 HEAP32[$8 >> 2] = $2; //@line 4412
 $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 4413
 HEAP32[$9 >> 2] = $4; //@line 4414
 sp = STACKTOP; //@line 4415
 return;
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 12831
 $23 = $0 + 2 | 0; //@line 12840
 $24 = HEAP8[$23 >> 0] | 0; //@line 12841
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 12844
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 12849
  $$lcssa = $24; //@line 12849
 } else {
  $$01618 = $23; //@line 12851
  $$019 = $27; //@line 12851
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 12853
   $31 = HEAP8[$30 >> 0] | 0; //@line 12854
   $$019 = ($$019 | $31 & 255) << 8; //@line 12857
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 12862
    $$lcssa = $31; //@line 12862
    break;
   } else {
    $$01618 = $30; //@line 12865
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 12872
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_8($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16504
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16508
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16510
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16511
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 16515
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 16519
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 16520
 FUNCTION_TABLE_vi[$10 & 511]($6); //@line 16521
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 16524
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 16525
  HEAP32[$11 >> 2] = $4; //@line 16526
  sp = STACKTOP; //@line 16527
  return;
 }
 ___async_unwind = 0; //@line 16530
 HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 16531
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 16532
 HEAP32[$11 >> 2] = $4; //@line 16533
 sp = STACKTOP; //@line 16534
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2923
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2926
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2927
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 2928
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 84; //@line 2931
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2933
  sp = STACKTOP; //@line 2934
  return 0; //@line 2935
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2937
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0; //@line 2940
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2941
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 2942
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 85; //@line 2945
  sp = STACKTOP; //@line 2946
  return 0; //@line 2947
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2949
  return $10 | 0; //@line 2950
 }
 return 0; //@line 2952
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12459
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12459
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12460
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 12461
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 12470
    $$016 = $9; //@line 12473
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 12473
   } else {
    $$016 = $0; //@line 12475
    $storemerge = 0; //@line 12475
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 12477
   $$0 = $$016; //@line 12478
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 12482
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 12488
   HEAP32[tempDoublePtr >> 2] = $2; //@line 12491
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 12491
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 12492
  }
 }
 return +$$0;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2888
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2891
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2892
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 2893
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 82; //@line 2896
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2898
  sp = STACKTOP; //@line 2899
  return 0; //@line 2900
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2902
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0; //@line 2905
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2906
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 2907
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 83; //@line 2910
  sp = STACKTOP; //@line 2911
  return 0; //@line 2912
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2914
  return $10 | 0; //@line 2915
 }
 return 0; //@line 2917
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_158($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 5727
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5731
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5733
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5734
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 5738
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 5742
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 5743
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 5744
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 193; //@line 5747
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 5748
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 5749
  sp = STACKTOP; //@line 5750
  return;
 }
 ___async_unwind = 0; //@line 5753
 HEAP32[$ReallocAsyncCtx4 >> 2] = 193; //@line 5754
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 5755
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 5756
 sp = STACKTOP; //@line 5757
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_66($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22767
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22773
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22775
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22777
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22779
 $13 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 22781
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22782
 $14 = HEAP32[$6 >> 2] | 0; //@line 22783
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 22784
 __ZL28nsapi_dns_query_async_deletei($14); //@line 22785
 if (!___async) {
  ___async_unwind = 0; //@line 22788
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 237; //@line 22790
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $13; //@line 22792
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $8; //@line 22794
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $10; //@line 22796
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $12; //@line 22798
 sp = STACKTOP; //@line 22799
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_146($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5280
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5286
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5288
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 5289
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 5293
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 5297
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 5298
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 5299
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 115; //@line 5302
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 5303
  HEAP32[$13 >> 2] = $6; //@line 5304
  sp = STACKTOP; //@line 5305
  return;
 }
 ___async_unwind = 0; //@line 5308
 HEAP32[$ReallocAsyncCtx5 >> 2] = 115; //@line 5309
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 5310
 HEAP32[$13 >> 2] = $6; //@line 5311
 sp = STACKTOP; //@line 5312
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15777
 STACKTOP = STACKTOP + 16 | 0; //@line 15778
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15778
 $3 = sp; //@line 15779
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 15781
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 15784
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15785
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 15786
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 354; //@line 15789
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15791
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15793
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 15795
  sp = STACKTOP; //@line 15796
  STACKTOP = sp; //@line 15797
  return 0; //@line 15797
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15799
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 15803
 }
 STACKTOP = sp; //@line 15805
 return $8 & 1 | 0; //@line 15805
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, sp = 0;
 sp = STACKTOP; //@line 16324
 STACKTOP = STACKTOP + 32 | 0; //@line 16325
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 16325
 $$byval_copy = sp; //@line 16326
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16328
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16330
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16334
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 16335
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 16335
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 16335
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 16335
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 16335
 __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 16336
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) < 0 ? $AsyncRetVal : 0; //@line 16340
 STACKTOP = sp; //@line 16341
 return;
}
function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8.98846567431158e+307; //@line 9376
  $5 = ($1 | 0) > 2046; //@line 9378
  $7 = $1 + -2046 | 0; //@line 9380
  $$0 = $5 ? $3 * 8.98846567431158e+307 : $3; //@line 9385
  $$020 = $5 ? ($7 | 0) < 1023 ? $7 : 1023 : $1 + -1023 | 0; //@line 9385
 } else {
  if (($1 | 0) < -1022) {
   $10 = $0 * 2.2250738585072014e-308; //@line 9389
   $12 = ($1 | 0) < -2044; //@line 9391
   $14 = $1 + 2044 | 0; //@line 9393
   $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10; //@line 9398
   $$020 = $12 ? ($14 | 0) > -1022 ? $14 : -1022 : $1 + 1022 | 0; //@line 9398
  } else {
   $$0 = $0; //@line 9400
   $$020 = $1; //@line 9400
  }
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0; //@line 9404
 $18 = tempRet0; //@line 9405
 HEAP32[tempDoublePtr >> 2] = $17; //@line 9406
 HEAP32[tempDoublePtr + 4 >> 2] = $18; //@line 9406
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6160
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6166
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6168
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6170
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6172
 $13 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 6174
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 6175
 $14 = HEAP32[$6 >> 2] | 0; //@line 6176
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 6177
 __ZL28nsapi_dns_query_async_deletei($14); //@line 6178
 if (!___async) {
  ___async_unwind = 0; //@line 6181
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 253; //@line 6183
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $13; //@line 6185
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $8; //@line 6187
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $10; //@line 6189
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $12; //@line 6191
 sp = STACKTOP; //@line 6192
 return;
}
function _mbed_vtracef__async_cb_28($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18296
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18300
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 18305
 $$pre = HEAP32[132] | 0; //@line 18306
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 18307
 FUNCTION_TABLE_v[$$pre & 7](); //@line 18308
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 72; //@line 18311
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 18312
  HEAP32[$6 >> 2] = $4; //@line 18313
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 18314
  HEAP32[$7 >> 2] = $5; //@line 18315
  sp = STACKTOP; //@line 18316
  return;
 }
 ___async_unwind = 0; //@line 18319
 HEAP32[$ReallocAsyncCtx9 >> 2] = 72; //@line 18320
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 18321
 HEAP32[$6 >> 2] = $4; //@line 18322
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 18323
 HEAP32[$7 >> 2] = $5; //@line 18324
 sp = STACKTOP; //@line 18325
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_46($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20036
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20038
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20040
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20042
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 20 >> 2] = $AsyncRetVal; //@line 20044
 _strcpy($AsyncRetVal, $4) | 0; //@line 20045
 $11 = _emscripten_asm_const_i(9) | 0; //@line 20046
 $13 = (($11 | 0) < 0) << 31 >> 31; //@line 20048
 $14 = ___muldi3($6 | 0, 0, 1e3, 0) | 0; //@line 20049
 $16 = _i64Add($14 | 0, tempRet0 | 0, $11 | 0, $13 | 0) | 0; //@line 20051
 $18 = HEAP32[$8 >> 2] | 0; //@line 20053
 $20 = $18 + 24 | 0; //@line 20055
 HEAP32[$20 >> 2] = $16; //@line 20057
 HEAP32[$20 + 4 >> 2] = tempRet0; //@line 20060
 $25 = $18 + 32 | 0; //@line 20062
 HEAP32[$25 >> 2] = $11; //@line 20064
 HEAP32[$25 + 4 >> 2] = $13; //@line 20067
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 2967
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2971
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2973
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2975
 $9 = $4 + 12 | 0; //@line 2977
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 2978
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 2979
 $10 = _equeue_alloc($8, 16) | 0; //@line 2980
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 2984
  ___async_unwind = 0; //@line 2985
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 100; //@line 2987
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $9; //@line 2989
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $6; //@line 2991
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $8; //@line 2993
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $4; //@line 2995
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $9; //@line 2997
 sp = STACKTOP; //@line 2998
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_54($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20679
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20687
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20689
 $11 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 20690
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 84 >> 2] | 0; //@line 20693
 $15 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 20694
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 20695
 FUNCTION_TABLE_viiii[$14 & 7]($11, $15, 123, $8); //@line 20696
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 124; //@line 20699
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 20700
  HEAP32[$16 >> 2] = $10; //@line 20701
  sp = STACKTOP; //@line 20702
  return;
 }
 ___async_unwind = 0; //@line 20705
 HEAP32[$ReallocAsyncCtx6 >> 2] = 124; //@line 20706
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 20707
 HEAP32[$16 >> 2] = $10; //@line 20708
 sp = STACKTOP; //@line 20709
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14662
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14668
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 14671
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 14674
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14675
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 14676
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 336; //@line 14679
    sp = STACKTOP; //@line 14680
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14683
    break;
   }
  }
 } while (0);
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5921
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5929
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5931
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5933
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5935
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 5937
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 5939
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 5941
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 5952
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 5953
 HEAP32[$10 >> 2] = 0; //@line 5954
 HEAP32[$12 >> 2] = 0; //@line 5955
 HEAP32[$14 >> 2] = 0; //@line 5956
 HEAP32[$2 >> 2] = 0; //@line 5957
 $33 = HEAP32[$16 >> 2] | 0; //@line 5958
 HEAP32[$16 >> 2] = $33 | $18; //@line 5963
 if ($20 | 0) {
  ___unlockfile($22); //@line 5966
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 5969
 return;
}
function _mbed_vtracef__async_cb_27($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18263
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18265
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 18270
 $$pre = HEAP32[132] | 0; //@line 18271
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 18272
 FUNCTION_TABLE_v[$$pre & 7](); //@line 18273
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 72; //@line 18276
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 18277
  HEAP32[$5 >> 2] = $2; //@line 18278
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 18279
  HEAP32[$6 >> 2] = $4; //@line 18280
  sp = STACKTOP; //@line 18281
  return;
 }
 ___async_unwind = 0; //@line 18284
 HEAP32[$ReallocAsyncCtx9 >> 2] = 72; //@line 18285
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 18286
 HEAP32[$5 >> 2] = $2; //@line 18287
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 18288
 HEAP32[$6 >> 2] = $4; //@line 18289
 sp = STACKTOP; //@line 18290
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_71($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22915
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22917
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22919
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22921
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22923
 $9 = HEAP32[$2 >> 2] | 0; //@line 22924
 if (!$9) {
  _free($6); //@line 22927
  return;
 }
 $11 = HEAP32[$9 >> 2] | 0; //@line 22930
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22931
 FUNCTION_TABLE_viii[$11 & 0]($4, -3019, 0); //@line 22932
 if (!___async) {
  ___async_unwind = 0; //@line 22935
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 239; //@line 22937
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 22939
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 22941
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 22943
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 22945
 sp = STACKTOP; //@line 22946
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb_150($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5452
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5458
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5459
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 5460
 if (!$$pre$i$i) {
  HEAP32[___async_retval >> 2] = 0; //@line 5464
  return;
 }
 $10 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 5469
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 5470
 FUNCTION_TABLE_vi[$10 & 511]($6); //@line 5471
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 266; //@line 5474
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 5475
  HEAP32[$11 >> 2] = $6; //@line 5476
  sp = STACKTOP; //@line 5477
  return;
 }
 ___async_unwind = 0; //@line 5480
 HEAP32[$ReallocAsyncCtx3 >> 2] = 266; //@line 5481
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 5482
 HEAP32[$11 >> 2] = $6; //@line 5483
 sp = STACKTOP; //@line 5484
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_3($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16109
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16115
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16117
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 16118
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 16122
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 16126
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 16127
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 16128
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 16131
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 16132
  HEAP32[$13 >> 2] = $6; //@line 16133
  sp = STACKTOP; //@line 16134
  return;
 }
 ___async_unwind = 0; //@line 16137
 HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 16138
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 16139
 HEAP32[$13 >> 2] = $6; //@line 16140
 sp = STACKTOP; //@line 16141
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_20($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17399
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17403
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17405
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17407
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 17409
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 17410
 FUNCTION_TABLE_viii[$9 & 0]($4, 0, $6); //@line 17411
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 89; //@line 17414
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 17415
  HEAP32[$10 >> 2] = $8; //@line 17416
  sp = STACKTOP; //@line 17417
  return;
 }
 ___async_unwind = 0; //@line 17420
 HEAP32[$ReallocAsyncCtx >> 2] = 89; //@line 17421
 $10 = $ReallocAsyncCtx + 4 | 0; //@line 17422
 HEAP32[$10 >> 2] = $8; //@line 17423
 sp = STACKTOP; //@line 17424
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15661
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 15663
 $8 = $7 >> 8; //@line 15664
 if (!($7 & 1)) {
  $$0 = $8; //@line 15668
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 15673
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 15675
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 15678
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15683
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 15684
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 352; //@line 15687
  sp = STACKTOP; //@line 15688
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15691
  return;
 }
}
function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $2 = 0, $4 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13885
 $$ = ($0 | 0) == 0 ? 1 : $0; //@line 13887
 while (1) {
  $2 = _malloc($$) | 0; //@line 13889
  if ($2 | 0) {
   $$lcssa = $2; //@line 13892
   label = 7; //@line 13893
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0; //@line 13896
  if (!$4) {
   $$lcssa = 0; //@line 13899
   label = 7; //@line 13900
   break;
  }
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13903
  FUNCTION_TABLE_v[$4 & 7](); //@line 13904
  if (___async) {
   label = 5; //@line 13907
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13910
 }
 if ((label | 0) == 5) {
  HEAP32[$AsyncCtx >> 2] = 324; //@line 13913
  HEAP32[$AsyncCtx + 4 >> 2] = $$; //@line 13915
  sp = STACKTOP; //@line 13916
  return 0; //@line 13917
 } else if ((label | 0) == 7) {
  return $$lcssa | 0; //@line 13920
 }
 return 0; //@line 13922
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14831
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14837
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 14840
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 14843
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14844
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 14845
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 339; //@line 14848
    sp = STACKTOP; //@line 14849
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14852
    break;
   }
  }
 } while (0);
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_57($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21026
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21028
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21036
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21038
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21040
 _free(HEAP32[$0 + 16 >> 2] | 0); //@line 21041
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 21042
 $15 = __ZN6Socket5closeEv($10) | 0; //@line 21043
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 21047
  ___async_unwind = 0; //@line 21048
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 21050
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 21052
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $12; //@line 21054
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $14; //@line 21056
 sp = STACKTOP; //@line 21057
 return;
}
function ___dynamic_cast__async_cb_39($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19414
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19416
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19418
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19424
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 19439
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 19455
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 19460
    break;
   }
  default:
   {
    $$0 = 0; //@line 19464
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 19469
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15703
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 15705
 $7 = $6 >> 8; //@line 15706
 if (!($6 & 1)) {
  $$0 = $7; //@line 15710
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 15715
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 15717
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 15720
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15725
 FUNCTION_TABLE_viiiii[$16 & 3]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 15726
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 353; //@line 15729
  sp = STACKTOP; //@line 15730
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15733
  return;
 }
}
function _mbed_error_vfprintf__async_cb_89($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1546
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 1548
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1550
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1552
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1554
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1556
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 1558
 _serial_putc(6764, $2 << 24 >> 24); //@line 1559
 if (!___async) {
  ___async_unwind = 0; //@line 1562
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 1564
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 1566
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 1568
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 1570
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 1572
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 1574
 sp = STACKTOP; //@line 1575
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15618
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 15620
 $6 = $5 >> 8; //@line 15621
 if (!($5 & 1)) {
  $$0 = $6; //@line 15625
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 15630
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 15632
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 15635
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15640
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 15641
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 351; //@line 15644
  sp = STACKTOP; //@line 15645
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15648
  return;
 }
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_126($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 3665
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3671
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3673
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3675
 $11 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 3677
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 3678
 $12 = HEAP32[$6 >> 2] | 0; //@line 3679
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 3680
 __ZL28nsapi_dns_query_async_deletei($12); //@line 3681
 if (!___async) {
  ___async_unwind = 0; //@line 3684
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 208; //@line 3686
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $11; //@line 3688
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $8; //@line 3690
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $10; //@line 3692
 sp = STACKTOP; //@line 3693
 return;
}
function __ZN6Socket5closeEv__async_cb_183($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7465
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7469
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7471
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 7472
 $8 = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0; //@line 7475
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 7476
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 7477
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 130; //@line 7480
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 7481
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 7482
  sp = STACKTOP; //@line 7483
  return;
 }
 ___async_unwind = 0; //@line 7486
 HEAP32[$ReallocAsyncCtx3 >> 2] = 130; //@line 7487
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 7488
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 7489
 sp = STACKTOP; //@line 7490
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2872
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2874
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2876
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2878
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2880
 $9 = HEAP32[HEAP32[$AsyncRetVal >> 2] >> 2] | 0; //@line 2882
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 2883
 $10 = FUNCTION_TABLE_iiiii[$9 & 15]($AsyncRetVal, $2, $4, $6) | 0; //@line 2884
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 77; //@line 2887
  sp = STACKTOP; //@line 2888
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 2892
 ___async_unwind = 0; //@line 2893
 HEAP32[$ReallocAsyncCtx2 >> 2] = 77; //@line 2894
 sp = STACKTOP; //@line 2895
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_199($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10971
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10975
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10977
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10979
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10981
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 10983
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 10984
 FUNCTION_TABLE_viii[$11 & 0]($4, 0, $6); //@line 10985
 if (!___async) {
  ___async_unwind = 0; //@line 10988
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 158; //@line 10990
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $8; //@line 10992
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $10; //@line 10994
 sp = STACKTOP; //@line 10995
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_154($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5565
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5569
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5571
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5573
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5575
 $13 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 116 >> 2] | 0; //@line 5578
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5579
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($4, $6, $8, $10) | 0; //@line 5580
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 5583
  sp = STACKTOP; //@line 5584
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 5588
 ___async_unwind = 0; //@line 5589
 HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 5590
 sp = STACKTOP; //@line 5591
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_116($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3065
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3067
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3069
 $7 = $2 + 12 | 0; //@line 3073
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 3074
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 3075
 $8 = _equeue_alloc($4, 16) | 0; //@line 3076
 if (!___async) {
  HEAP32[___async_retval >> 2] = $8; //@line 3080
  ___async_unwind = 0; //@line 3081
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 107; //@line 3083
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $7; //@line 3085
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 3087
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $2; //@line 3089
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $7; //@line 3091
 sp = STACKTOP; //@line 3092
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 11457
 STACKTOP = STACKTOP + 256 | 0; //@line 11458
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 11458
 $5 = sp; //@line 11459
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 11465
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 11469
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 11472
   $$011 = $9; //@line 11473
   do {
    _out_670($0, $5, 256); //@line 11475
    $$011 = $$011 + -256 | 0; //@line 11476
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 11485
  } else {
   $$0$lcssa = $9; //@line 11487
  }
  _out_670($0, $5, $$0$lcssa); //@line 11489
 }
 STACKTOP = sp; //@line 11491
 return;
}
function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0; //@line 9750
 $3 = HEAP8[$1 >> 0] | 0; //@line 9752
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 9756
 $7 = $0 + 20 | 0; //@line 9757
 $9 = $0 + 28 | 0; //@line 9759
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0; //@line 9765
 }
 HEAP32[$0 + 16 >> 2] = 0; //@line 9768
 HEAP32[$9 >> 2] = 0; //@line 9769
 HEAP32[$7 >> 2] = 0; //@line 9770
 $15 = HEAP32[$0 >> 2] | 0; //@line 9771
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0; //@line 9779
  HEAP32[$0 + 8 >> 2] = $23; //@line 9781
  HEAP32[$0 + 4 >> 2] = $23; //@line 9783
  $$0 = $15 << 27 >> 31; //@line 9786
 } else {
  HEAP32[$0 >> 2] = $15 | 32; //@line 9789
  $$0 = -1; //@line 9790
 }
 return $$0 | 0; //@line 9792
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_63($0) {
 $0 = $0 | 0;
 var $$pr$i52 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22641
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22645
 $$pr$i52 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22646
 if (!$$pr$i52) {
  return;
 }
 $7 = HEAP32[$$pr$i52 + 8 >> 2] | 0; //@line 22652
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22653
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 22654
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 234; //@line 22657
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 22658
  HEAP32[$8 >> 2] = $4; //@line 22659
  sp = STACKTOP; //@line 22660
  return;
 }
 ___async_unwind = 0; //@line 22663
 HEAP32[$ReallocAsyncCtx3 >> 2] = 234; //@line 22664
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 22665
 HEAP32[$8 >> 2] = $4; //@line 22666
 sp = STACKTOP; //@line 22667
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 720
 $3 = HEAP32[$1 >> 2] | 0; //@line 721
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 723
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0$i = -3012; //@line 729
  return $$0$i | 0; //@line 730
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 732
 _wait_ms(1); //@line 733
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 47; //@line 736
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 738
  sp = STACKTOP; //@line 739
  return 0; //@line 740
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 742
 HEAP8[$1 + 8 >> 0] = 1; //@line 744
 $$0$i = 0; //@line 745
 return $$0$i | 0; //@line 746
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_162($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5887
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5889
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5891
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5893
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5895
 $11 = HEAP32[(HEAP32[$2 >> 2] | 0) + 116 >> 2] | 0; //@line 5898
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5899
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($2, $4, $6, $8) | 0; //@line 5900
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 40; //@line 5903
  sp = STACKTOP; //@line 5904
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 5908
 ___async_unwind = 0; //@line 5909
 HEAP32[$ReallocAsyncCtx2 >> 2] = 40; //@line 5910
 sp = STACKTOP; //@line 5911
 return;
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0; //@line 3155
  return $$1 | 0; //@line 3156
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 3161
  $$1 = 0; //@line 3162
  return $$1 | 0; //@line 3163
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0; //@line 3170
 if ($11 | 0) {
  $$1 = $11 + 8 | 0; //@line 3174
  return $$1 | 0; //@line 3175
 }
 $14 = _malloc($1) | 0; //@line 3177
 if (!$14) {
  $$1 = 0; //@line 3180
  return $$1 | 0; //@line 3181
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0; //@line 3184
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 3189
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0; //@line 3192
 _free($0); //@line 3193
 $$1 = $14; //@line 3194
 return $$1 | 0; //@line 3195
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_127($0) {
 $0 = $0 | 0;
 var $$pr$i72 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 3699
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3703
 $$pr$i72 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3704
 if (!$$pr$i72) {
  return;
 }
 $7 = HEAP32[$$pr$i72 + 8 >> 2] | 0; //@line 3710
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 3711
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 3712
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 211; //@line 3715
  $8 = $ReallocAsyncCtx7 + 4 | 0; //@line 3716
  HEAP32[$8 >> 2] = $4; //@line 3717
  sp = STACKTOP; //@line 3718
  return;
 }
 ___async_unwind = 0; //@line 3721
 HEAP32[$ReallocAsyncCtx7 >> 2] = 211; //@line 3722
 $8 = $ReallocAsyncCtx7 + 4 | 0; //@line 3723
 HEAP32[$8 >> 2] = $4; //@line 3724
 sp = STACKTOP; //@line 3725
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 317
 $3 = HEAP32[$1 >> 2] | 0; //@line 318
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 320
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0 = -3012; //@line 326
  return $$0 | 0; //@line 327
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 329
 _wait_ms(1); //@line 330
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 34; //@line 333
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 335
  sp = STACKTOP; //@line 336
  return 0; //@line 337
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 339
 HEAP8[$1 + 8 >> 0] = 1; //@line 341
 $$0 = 0; //@line 342
 return $$0 | 0; //@line 343
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_123($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3545
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3549
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3550
 if (!$$pr$i) {
  return;
 }
 $7 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 3556
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 3557
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 3558
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 205; //@line 3561
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 3562
  HEAP32[$8 >> 2] = $4; //@line 3563
  sp = STACKTOP; //@line 3564
  return;
 }
 ___async_unwind = 0; //@line 3567
 HEAP32[$ReallocAsyncCtx3 >> 2] = 205; //@line 3568
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 3569
 HEAP32[$8 >> 2] = $4; //@line 3570
 sp = STACKTOP; //@line 3571
 return;
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 12328
 STACKTOP = STACKTOP + 16 | 0; //@line 12329
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12329
 $vararg_buffer = sp; //@line 12330
 HEAP32[$vararg_buffer >> 2] = $0; //@line 12331
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 12333
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 12335
 _mbed_error_printf(2849, $vararg_buffer); //@line 12336
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12337
 _mbed_die(); //@line 12338
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 267; //@line 12341
  sp = STACKTOP; //@line 12342
  STACKTOP = sp; //@line 12343
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12345
  STACKTOP = sp; //@line 12346
  return;
 }
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_69($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 22863
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22865
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22867
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22869
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22871
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 22872
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 22873
 if (!___async) {
  ___async_unwind = 0; //@line 22876
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 238; //@line 22878
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 22880
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 22882
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $6; //@line 22884
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $8; //@line 22886
 sp = STACKTOP; //@line 22887
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4499
 STACKTOP = STACKTOP + 32 | 0; //@line 4500
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4500
 $vararg_buffer = sp; //@line 4501
 $3 = sp + 20 | 0; //@line 4502
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4506
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 4508
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 4510
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 4512
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 4514
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 4519
  $10 = -1; //@line 4520
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 4523
 }
 STACKTOP = sp; //@line 4525
 return $10 | 0; //@line 4525
}
function __ZN12NetworkStack14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 3440
 STACKTOP = STACKTOP + 48 | 0; //@line 3441
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 3441
 $$byval_copy = sp + 20 | 0; //@line 3442
 $2 = sp; //@line 3443
 __ZNK13SocketAddress8get_addrEv($2, $1); //@line 3444
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 3445
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 3445
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 3445
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 3445
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 3445
 $3 = _nsapi_dns_add_server($$byval_copy) | 0; //@line 3446
 STACKTOP = sp; //@line 3447
 return $3 | 0; //@line 3447
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13609
 STACKTOP = STACKTOP + 16 | 0; //@line 13610
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13610
 $1 = sp; //@line 13611
 HEAP32[$1 >> 2] = $varargs; //@line 13612
 $2 = HEAP32[219] | 0; //@line 13613
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13614
 $3 = _vfprintf($2, $0, $1) | 0; //@line 13615
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 320; //@line 13618
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 13620
  sp = STACKTOP; //@line 13621
  STACKTOP = sp; //@line 13622
  return 0; //@line 13622
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13624
  STACKTOP = sp; //@line 13625
  return $3 | 0; //@line 13625
 }
 return 0; //@line 13627
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_171($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6452
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6454
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6456
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6458
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6460
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 6461
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 6462
 if (!___async) {
  ___async_unwind = 0; //@line 6465
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 254; //@line 6467
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 6469
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 6471
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 6473
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 6475
 sp = STACKTOP; //@line 6476
 return;
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13336
 STACKTOP = STACKTOP + 16 | 0; //@line 13337
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13337
 $3 = sp; //@line 13338
 HEAP32[$3 >> 2] = $varargs; //@line 13339
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13340
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 13341
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 316; //@line 13344
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 13346
  sp = STACKTOP; //@line 13347
  STACKTOP = sp; //@line 13348
  return 0; //@line 13348
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13350
  STACKTOP = sp; //@line 13351
  return $4 | 0; //@line 13351
 }
 return 0; //@line 13353
}
function _mbed_vtracef__async_cb_26($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 18233
 HEAP32[126] = HEAP32[124]; //@line 18235
 $2 = HEAP32[132] | 0; //@line 18236
 if (!$2) {
  return;
 }
 $4 = HEAP32[133] | 0; //@line 18241
 HEAP32[133] = 0; //@line 18242
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 18243
 FUNCTION_TABLE_v[$2 & 7](); //@line 18244
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 18247
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 18248
  HEAP32[$5 >> 2] = $4; //@line 18249
  sp = STACKTOP; //@line 18250
  return;
 }
 ___async_unwind = 0; //@line 18253
 HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 18254
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 18255
 HEAP32[$5 >> 2] = $4; //@line 18256
 sp = STACKTOP; //@line 18257
 return;
}
function _mbed_vtracef__async_cb_23($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17969
 HEAP32[126] = HEAP32[124]; //@line 17971
 $2 = HEAP32[132] | 0; //@line 17972
 if (!$2) {
  return;
 }
 $4 = HEAP32[133] | 0; //@line 17977
 HEAP32[133] = 0; //@line 17978
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 17979
 FUNCTION_TABLE_v[$2 & 7](); //@line 17980
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 17983
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 17984
  HEAP32[$5 >> 2] = $4; //@line 17985
  sp = STACKTOP; //@line 17986
  return;
 }
 ___async_unwind = 0; //@line 17989
 HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 17990
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 17991
 HEAP32[$5 >> 2] = $4; //@line 17992
 sp = STACKTOP; //@line 17993
 return;
}
function _mbed_vtracef__async_cb_22($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17939
 HEAP32[126] = HEAP32[124]; //@line 17941
 $2 = HEAP32[132] | 0; //@line 17942
 if (!$2) {
  return;
 }
 $4 = HEAP32[133] | 0; //@line 17947
 HEAP32[133] = 0; //@line 17948
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 17949
 FUNCTION_TABLE_v[$2 & 7](); //@line 17950
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 17953
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 17954
  HEAP32[$5 >> 2] = $4; //@line 17955
  sp = STACKTOP; //@line 17956
  return;
 }
 ___async_unwind = 0; //@line 17959
 HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 17960
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 17961
 HEAP32[$5 >> 2] = $4; //@line 17962
 sp = STACKTOP; //@line 17963
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4353
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 4356
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 4358
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 4360
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 4365
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 4370
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4372
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 4373
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 127; //@line 4376
  sp = STACKTOP; //@line 4377
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4380
  return;
 }
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13567
 STACKTOP = STACKTOP + 16 | 0; //@line 13568
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13568
 $2 = sp; //@line 13569
 HEAP32[$2 >> 2] = $varargs; //@line 13570
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13571
 $3 = _vsprintf($0, $1, $2) | 0; //@line 13572
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 318; //@line 13575
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 13577
  sp = STACKTOP; //@line 13578
  STACKTOP = sp; //@line 13579
  return 0; //@line 13579
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13581
  STACKTOP = sp; //@line 13582
  return $3 | 0; //@line 13582
 }
 return 0; //@line 13584
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 14384
 $5 = HEAP32[$4 >> 2] | 0; //@line 14385
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 14389
   HEAP32[$1 + 24 >> 2] = $3; //@line 14391
   HEAP32[$1 + 36 >> 2] = 1; //@line 14393
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 14397
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 14400
    HEAP32[$1 + 24 >> 2] = 2; //@line 14402
    HEAP8[$1 + 54 >> 0] = 1; //@line 14404
    break;
   }
   $10 = $1 + 24 | 0; //@line 14407
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 14411
   }
  }
 } while (0);
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20737
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20739
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20741
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 12 >> 2] | 0; //@line 20744
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20745
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 20746
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 85; //@line 20749
  sp = STACKTOP; //@line 20750
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 20754
 ___async_unwind = 0; //@line 20755
 HEAP32[$ReallocAsyncCtx2 >> 2] = 85; //@line 20756
 sp = STACKTOP; //@line 20757
 return;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5361
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5363
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5365
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 8 >> 2] | 0; //@line 5368
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5369
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 5370
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 83; //@line 5373
  sp = STACKTOP; //@line 5374
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 5378
 ___async_unwind = 0; //@line 5379
 HEAP32[$ReallocAsyncCtx2 >> 2] = 83; //@line 5380
 sp = STACKTOP; //@line 5381
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1395
 $4 = _equeue_tick() | 0; //@line 1397
 HEAP32[$2 + -4 >> 2] = $1; //@line 1399
 $6 = $2 + -16 | 0; //@line 1400
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 1403
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1404
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 1405
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 57; //@line 1408
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1410
  sp = STACKTOP; //@line 1411
  return 0; //@line 1412
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1414
  _equeue_sema_signal($0 + 48 | 0); //@line 1416
  return $9 | 0; //@line 1417
 }
 return 0; //@line 1419
}
function __ZneRK13SocketAddressS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $5 = 0, label = 0;
 if (__ZNK13SocketAddresscvbEv($0) | 0) {
  label = 3; //@line 5068
 } else {
  if (__ZNK13SocketAddresscvbEv($1) | 0) {
   label = 3; //@line 5072
  } else {
   $$0$i = 1; //@line 5074
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = HEAP32[$0 + 40 >> 2] | 0; //@line 5080
   if (($5 | 0) == (HEAP32[$1 + 40 >> 2] | 0)) {
    $10 = $0 + 44 | 0; //@line 5086
    $11 = $1 + 44 | 0; //@line 5087
    if (($5 | 0) == 1) {
     $$0$i = (_memcmp($10, $11, 4) | 0) == 0; //@line 5091
     break;
    } else {
     $$0$i = (_memcmp($10, $11, 16) | 0) == 0; //@line 5096
     break;
    }
   } else {
    $$0$i = 0; //@line 5100
   }
  }
 } while (0);
 return $$0$i ^ 1 | 0; //@line 5105
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12825
 $2 = HEAP32[219] | 0; //@line 12826
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12827
 _putc($1, $2) | 0; //@line 12828
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 288; //@line 12831
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 12833
  sp = STACKTOP; //@line 12834
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12837
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12838
 _fflush($2) | 0; //@line 12839
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 289; //@line 12842
  sp = STACKTOP; //@line 12843
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12846
  return;
 }
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14934
 STACKTOP = STACKTOP + 16 | 0; //@line 14935
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14935
 $vararg_buffer = sp; //@line 14936
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14937
 FUNCTION_TABLE_v[$0 & 7](); //@line 14938
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 341; //@line 14941
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 14943
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14945
  sp = STACKTOP; //@line 14946
  STACKTOP = sp; //@line 14947
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14949
  _abort_message(6337, $vararg_buffer); //@line 14950
 }
}
function __Znwj__async_cb($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $3 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2580
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2582
 $3 = _malloc($2) | 0; //@line 2583
 if (!$3) {
  $5 = __ZSt15get_new_handlerv() | 0; //@line 2586
  if (!$5) {
   $$lcssa = 0; //@line 2589
  } else {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 2591
   FUNCTION_TABLE_v[$5 & 7](); //@line 2592
   if (!___async) {
    ___async_unwind = 0; //@line 2595
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 324; //@line 2597
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 2599
   sp = STACKTOP; //@line 2600
   return;
  }
 } else {
  $$lcssa = $3; //@line 2604
 }
 HEAP32[___async_retval >> 2] = $$lcssa; //@line 2607
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5644
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5648
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5650
 $7 = $4 + 12 | 0; //@line 5652
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 5653
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 5654
 __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(6712, $6, $4) | 0; //@line 5655
 if (!___async) {
  ___async_unwind = 0; //@line 5658
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 189; //@line 5660
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $7; //@line 5662
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 5664
 sp = STACKTOP; //@line 5665
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 4606
 $3 = HEAP8[$1 >> 0] | 0; //@line 4607
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 4612
  $$lcssa8 = $2; //@line 4612
 } else {
  $$011 = $1; //@line 4614
  $$0710 = $0; //@line 4614
  do {
   $$0710 = $$0710 + 1 | 0; //@line 4616
   $$011 = $$011 + 1 | 0; //@line 4617
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 4618
   $9 = HEAP8[$$011 >> 0] | 0; //@line 4619
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 4624
  $$lcssa8 = $8; //@line 4624
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 4634
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 13301
  } else {
   $$01318 = $0; //@line 13303
   $$01417 = $2; //@line 13303
   $$019 = $1; //@line 13303
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 13305
    $5 = HEAP8[$$019 >> 0] | 0; //@line 13306
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 13311
    if (!$$01417) {
     $14 = 0; //@line 13316
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 13319
     $$019 = $$019 + 1 | 0; //@line 13319
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 13325
  }
 } while (0);
 return $14 | 0; //@line 13328
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1686
 STACKTOP = STACKTOP + 16 | 0; //@line 1687
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1687
 $3 = sp; //@line 1688
 HEAP32[$3 >> 2] = $varargs; //@line 1689
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1690
 _mbed_vtracef($0, $1, $2, $3); //@line 1691
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 60; //@line 1694
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 1696
  sp = STACKTOP; //@line 1697
  STACKTOP = sp; //@line 1698
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1700
  STACKTOP = sp; //@line 1701
  return;
 }
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4558
 STACKTOP = STACKTOP + 32 | 0; //@line 4559
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4559
 $vararg_buffer = sp; //@line 4560
 HEAP32[$0 + 36 >> 2] = 12; //@line 4563
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4571
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 4573
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 4575
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 4580
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 4583
 STACKTOP = sp; //@line 4584
 return $14 | 0; //@line 4584
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_159($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5763
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5767
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5768
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 5772
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 5776
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5777
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 5778
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 190; //@line 5781
  sp = STACKTOP; //@line 5782
  return;
 }
 ___async_unwind = 0; //@line 5785
 HEAP32[$ReallocAsyncCtx2 >> 2] = 190; //@line 5786
 sp = STACKTOP; //@line 5787
 return;
}
function _mbed_die__async_cb_107($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 2360
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2362
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2364
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 2365
 _wait_ms(150); //@line 2366
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 270; //@line 2369
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 2370
  HEAP32[$4 >> 2] = $2; //@line 2371
  sp = STACKTOP; //@line 2372
  return;
 }
 ___async_unwind = 0; //@line 2375
 HEAP32[$ReallocAsyncCtx14 >> 2] = 270; //@line 2376
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 2377
 HEAP32[$4 >> 2] = $2; //@line 2378
 sp = STACKTOP; //@line 2379
 return;
}
function _mbed_die__async_cb_106($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 2335
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2337
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2339
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 2340
 _wait_ms(150); //@line 2341
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 271; //@line 2344
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 2345
  HEAP32[$4 >> 2] = $2; //@line 2346
  sp = STACKTOP; //@line 2347
  return;
 }
 ___async_unwind = 0; //@line 2350
 HEAP32[$ReallocAsyncCtx13 >> 2] = 271; //@line 2351
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 2352
 HEAP32[$4 >> 2] = $2; //@line 2353
 sp = STACKTOP; //@line 2354
 return;
}
function _mbed_die__async_cb_105($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 2310
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2312
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2314
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 2315
 _wait_ms(150); //@line 2316
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 272; //@line 2319
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 2320
  HEAP32[$4 >> 2] = $2; //@line 2321
  sp = STACKTOP; //@line 2322
  return;
 }
 ___async_unwind = 0; //@line 2325
 HEAP32[$ReallocAsyncCtx12 >> 2] = 272; //@line 2326
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 2327
 HEAP32[$4 >> 2] = $2; //@line 2328
 sp = STACKTOP; //@line 2329
 return;
}
function _mbed_die__async_cb_104($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 2285
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2287
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2289
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 2290
 _wait_ms(150); //@line 2291
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 273; //@line 2294
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 2295
  HEAP32[$4 >> 2] = $2; //@line 2296
  sp = STACKTOP; //@line 2297
  return;
 }
 ___async_unwind = 0; //@line 2300
 HEAP32[$ReallocAsyncCtx11 >> 2] = 273; //@line 2301
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 2302
 HEAP32[$4 >> 2] = $2; //@line 2303
 sp = STACKTOP; //@line 2304
 return;
}
function _mbed_die__async_cb_103($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 2260
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2262
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2264
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 2265
 _wait_ms(150); //@line 2266
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 274; //@line 2269
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 2270
  HEAP32[$4 >> 2] = $2; //@line 2271
  sp = STACKTOP; //@line 2272
  return;
 }
 ___async_unwind = 0; //@line 2275
 HEAP32[$ReallocAsyncCtx10 >> 2] = 274; //@line 2276
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 2277
 HEAP32[$4 >> 2] = $2; //@line 2278
 sp = STACKTOP; //@line 2279
 return;
}
function _mbed_die__async_cb_102($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2235
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2237
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2239
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 2240
 _wait_ms(150); //@line 2241
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 275; //@line 2244
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 2245
  HEAP32[$4 >> 2] = $2; //@line 2246
  sp = STACKTOP; //@line 2247
  return;
 }
 ___async_unwind = 0; //@line 2250
 HEAP32[$ReallocAsyncCtx9 >> 2] = 275; //@line 2251
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 2252
 HEAP32[$4 >> 2] = $2; //@line 2253
 sp = STACKTOP; //@line 2254
 return;
}
function _mbed_die__async_cb_101($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 2210
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2212
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2214
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 2215
 _wait_ms(400); //@line 2216
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 276; //@line 2219
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 2220
  HEAP32[$4 >> 2] = $2; //@line 2221
  sp = STACKTOP; //@line 2222
  return;
 }
 ___async_unwind = 0; //@line 2225
 HEAP32[$ReallocAsyncCtx8 >> 2] = 276; //@line 2226
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 2227
 HEAP32[$4 >> 2] = $2; //@line 2228
 sp = STACKTOP; //@line 2229
 return;
}
function _mbed_die__async_cb_100($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2185
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2187
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2189
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 2190
 _wait_ms(400); //@line 2191
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 277; //@line 2194
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 2195
  HEAP32[$4 >> 2] = $2; //@line 2196
  sp = STACKTOP; //@line 2197
  return;
 }
 ___async_unwind = 0; //@line 2200
 HEAP32[$ReallocAsyncCtx7 >> 2] = 277; //@line 2201
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 2202
 HEAP32[$4 >> 2] = $2; //@line 2203
 sp = STACKTOP; //@line 2204
 return;
}
function _mbed_die__async_cb_99($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2160
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2162
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2164
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 2165
 _wait_ms(400); //@line 2166
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 278; //@line 2169
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 2170
  HEAP32[$4 >> 2] = $2; //@line 2171
  sp = STACKTOP; //@line 2172
  return;
 }
 ___async_unwind = 0; //@line 2175
 HEAP32[$ReallocAsyncCtx6 >> 2] = 278; //@line 2176
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 2177
 HEAP32[$4 >> 2] = $2; //@line 2178
 sp = STACKTOP; //@line 2179
 return;
}
function _mbed_die__async_cb_98($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2135
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2137
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2139
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 2140
 _wait_ms(400); //@line 2141
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 279; //@line 2144
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 2145
  HEAP32[$4 >> 2] = $2; //@line 2146
  sp = STACKTOP; //@line 2147
  return;
 }
 ___async_unwind = 0; //@line 2150
 HEAP32[$ReallocAsyncCtx5 >> 2] = 279; //@line 2151
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 2152
 HEAP32[$4 >> 2] = $2; //@line 2153
 sp = STACKTOP; //@line 2154
 return;
}
function _mbed_die__async_cb_97($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2110
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2112
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2114
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 2115
 _wait_ms(400); //@line 2116
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 280; //@line 2119
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 2120
  HEAP32[$4 >> 2] = $2; //@line 2121
  sp = STACKTOP; //@line 2122
  return;
 }
 ___async_unwind = 0; //@line 2125
 HEAP32[$ReallocAsyncCtx4 >> 2] = 280; //@line 2126
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 2127
 HEAP32[$4 >> 2] = $2; //@line 2128
 sp = STACKTOP; //@line 2129
 return;
}
function _mbed_die__async_cb_96($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2085
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2087
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2089
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 2090
 _wait_ms(400); //@line 2091
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 2094
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 2095
  HEAP32[$4 >> 2] = $2; //@line 2096
  sp = STACKTOP; //@line 2097
  return;
 }
 ___async_unwind = 0; //@line 2100
 HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 2101
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 2102
 HEAP32[$4 >> 2] = $2; //@line 2103
 sp = STACKTOP; //@line 2104
 return;
}
function _mbed_die__async_cb_95($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2060
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2062
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2064
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 2065
 _wait_ms(400); //@line 2066
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 2069
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 2070
  HEAP32[$4 >> 2] = $2; //@line 2071
  sp = STACKTOP; //@line 2072
  return;
 }
 ___async_unwind = 0; //@line 2075
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 2076
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 2077
 HEAP32[$4 >> 2] = $2; //@line 2078
 sp = STACKTOP; //@line 2079
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_135($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 4301
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4303
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4305
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4307
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 4308
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 4309
 if (!___async) {
  ___async_unwind = 0; //@line 4312
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 209; //@line 4314
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 4316
 HEAP32[$ReallocAsyncCtx16 + 8 >> 2] = $4; //@line 4318
 HEAP32[$ReallocAsyncCtx16 + 12 >> 2] = $6; //@line 4320
 sp = STACKTOP; //@line 4321
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12656
 STACKTOP = STACKTOP + 16 | 0; //@line 12657
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12657
 $1 = sp; //@line 12658
 HEAP32[$1 >> 2] = $varargs; //@line 12659
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12660
 _mbed_error_vfprintf($0, $1); //@line 12661
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 284; //@line 12664
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12666
  sp = STACKTOP; //@line 12667
  STACKTOP = sp; //@line 12668
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12670
  STACKTOP = sp; //@line 12671
  return;
 }
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 788
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 791
 if (($6 | 0) < 0) {
  $$0$i = -3001; //@line 794
  return $$0$i | 0; //@line 795
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 797
 _wait_ms(1); //@line 798
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 801
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 803
  sp = STACKTOP; //@line 804
  return 0; //@line 805
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 807
 $$0$i = $6; //@line 808
 return $$0$i | 0; //@line 809
}
function _mbed_die__async_cb_94($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2035
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2037
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2039
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 2040
 _wait_ms(400); //@line 2041
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 283; //@line 2044
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 2045
  HEAP32[$4 >> 2] = $2; //@line 2046
  sp = STACKTOP; //@line 2047
  return;
 }
 ___async_unwind = 0; //@line 2050
 HEAP32[$ReallocAsyncCtx >> 2] = 283; //@line 2051
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 2052
 HEAP32[$4 >> 2] = $2; //@line 2053
 sp = STACKTOP; //@line 2054
 return;
}
function _store_int_728($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do {
  if ($0 | 0) {
   switch ($1 | 0) {
   case -2:
    {
     HEAP8[$0 >> 0] = $2; //@line 6719
     break L1;
     break;
    }
   case -1:
    {
     HEAP16[$0 >> 1] = $2; //@line 6725
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = $2; //@line 6730
     break L1;
     break;
    }
   case 1:
    {
     HEAP32[$0 >> 2] = $2; //@line 6735
     break L1;
     break;
    }
   case 3:
    {
     $7 = $0; //@line 6740
     HEAP32[$7 >> 2] = $2; //@line 6742
     HEAP32[$7 + 4 >> 2] = $3; //@line 6745
     break L1;
     break;
    }
   default:
    {
     break L1;
    }
   }
  }
 } while (0);
 return;
}
function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 5596
 STACKTOP = STACKTOP + 128 | 0; //@line 5597
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 5597
 $3 = sp; //@line 5598
 dest = $3; //@line 5599
 stop = dest + 124 | 0; //@line 5599
 do {
  HEAP32[dest >> 2] = 0; //@line 5599
  dest = dest + 4 | 0; //@line 5599
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 17; //@line 5601
 HEAP32[$3 + 44 >> 2] = $0; //@line 5603
 HEAP32[$3 + 76 >> 2] = -1; //@line 5605
 HEAP32[$3 + 84 >> 2] = $0; //@line 5607
 $8 = _vfscanf($3, $1, $2) | 0; //@line 5608
 STACKTOP = sp; //@line 5609
 return $8 | 0; //@line 5609
}
function __ZN17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 385
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 388
 if (($6 | 0) < 0) {
  $$0 = -3001; //@line 391
  return $$0 | 0; //@line 392
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 394
 _wait_ms(1); //@line 395
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 36; //@line 398
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 400
  sp = STACKTOP; //@line 401
  return 0; //@line 402
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 404
 $$0 = $6; //@line 405
 return $$0 | 0; //@line 406
}
function __ZThn4_N17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 674
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 676
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 677
 _wait_ms(1); //@line 678
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 46; //@line 681
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 683
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 685
  sp = STACKTOP; //@line 686
  return 0; //@line 687
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 689
 HEAP8[$1 + 8 >> 0] = 0; //@line 691
 if (!$1) {
  return $3 | 0; //@line 694
 }
 __ZdlPv($1); //@line 696
 return $3 | 0; //@line 697
}
function __ZN17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 271
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 273
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 274
 _wait_ms(1); //@line 275
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 33; //@line 278
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 280
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 282
  sp = STACKTOP; //@line 283
  return 0; //@line 284
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 286
 HEAP8[$1 + 8 >> 0] = 0; //@line 288
 if (!$1) {
  return $3 | 0; //@line 291
 }
 __ZdlPv($1); //@line 293
 return $3 | 0; //@line 294
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 11318
 } else {
  $$056 = $2; //@line 11320
  $15 = $1; //@line 11320
  $8 = $0; //@line 11320
  while (1) {
   $14 = $$056 + -1 | 0; //@line 11328
   HEAP8[$14 >> 0] = HEAPU8[4e3 + ($8 & 15) >> 0] | 0 | $3; //@line 11329
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 11330
   $15 = tempRet0; //@line 11331
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 11336
    break;
   } else {
    $$056 = $14; //@line 11339
   }
  }
 }
 return $$05$lcssa | 0; //@line 11343
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 4740
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 4742
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 4748
  $11 = ___fwritex($0, $4, $3) | 0; //@line 4749
  if ($phitmp) {
   $13 = $11; //@line 4751
  } else {
   ___unlockfile($3); //@line 4753
   $13 = $11; //@line 4754
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 4758
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 4762
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 4765
 }
 return $15 | 0; //@line 4767
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_206($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14824
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14828
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14829
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 14835
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 14836
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 14837
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 187; //@line 14840
  sp = STACKTOP; //@line 14841
  return;
 }
 ___async_unwind = 0; //@line 14844
 HEAP32[$ReallocAsyncCtx9 >> 2] = 187; //@line 14845
 sp = STACKTOP; //@line 14846
 return;
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_85($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1266
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1270
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1271
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 1277
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 1278
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 1279
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 229; //@line 1282
  sp = STACKTOP; //@line 1283
  return;
 }
 ___async_unwind = 0; //@line 1286
 HEAP32[$ReallocAsyncCtx3 >> 2] = 229; //@line 1287
 sp = STACKTOP; //@line 1288
 return;
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 457
 newDynamicTop = oldDynamicTop + increment | 0; //@line 458
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 462
  ___setErrNo(12); //@line 463
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 467
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 471
   ___setErrNo(12); //@line 472
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 476
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_164($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6056
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6060
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6061
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 6067
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 6068
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 6069
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 6072
  sp = STACKTOP; //@line 6073
  return;
 }
 ___async_unwind = 0; //@line 6076
 HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 6077
 sp = STACKTOP; //@line 6078
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 14899
 $0 = ___cxa_get_globals_fast() | 0; //@line 14900
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 14903
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 14907
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 14919
    _emscripten_alloc_async_context(4, sp) | 0; //@line 14920
    __ZSt11__terminatePFvvE($16); //@line 14921
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 14926
 _emscripten_alloc_async_context(4, sp) | 0; //@line 14927
 __ZSt11__terminatePFvvE($17); //@line 14928
}
function __ZN9UDPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5198
 $1 = $0 + 52 | 0; //@line 5199
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 5202
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 5205
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 5215
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5216
 FUNCTION_TABLE_vi[$$pre & 511]($0 + 32 | 0); //@line 5217
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 137; //@line 5220
  sp = STACKTOP; //@line 5221
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5224
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_131($0) {
 $0 = $0 | 0;
 var $6 = 0, $7 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 3936
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3942
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 3943
 $7 = HEAP32[$6 >> 2] | 0; //@line 3944
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 3945
 __ZL26nsapi_dns_query_async_sendPv($7); //@line 3946
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 218; //@line 3949
  sp = STACKTOP; //@line 3950
  return;
 }
 ___async_unwind = 0; //@line 3953
 HEAP32[$ReallocAsyncCtx13 >> 2] = 218; //@line 3954
 sp = STACKTOP; //@line 3955
 return;
}
function __ZN9UDPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19503
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19505
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 19507
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19514
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 19515
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 19516
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 19519
  sp = STACKTOP; //@line 19520
  return;
 }
 ___async_unwind = 0; //@line 19523
 HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 19524
 sp = STACKTOP; //@line 19525
 return;
}
function __ZN6SocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18708
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18710
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 18712
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 18719
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18720
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 18721
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 117; //@line 18724
  sp = STACKTOP; //@line 18725
  return;
 }
 ___async_unwind = 0; //@line 18728
 HEAP32[$ReallocAsyncCtx2 >> 2] = 117; //@line 18729
 sp = STACKTOP; //@line 18730
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 4957
 $3 = HEAP8[$1 >> 0] | 0; //@line 4959
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 4963
 $7 = HEAP32[$0 >> 2] | 0; //@line 4964
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 4969
  HEAP32[$0 + 4 >> 2] = 0; //@line 4971
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 4973
  HEAP32[$0 + 28 >> 2] = $14; //@line 4975
  HEAP32[$0 + 20 >> 2] = $14; //@line 4977
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4983
  $$0 = 0; //@line 4984
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 4987
  $$0 = -1; //@line 4988
 }
 return $$0 | 0; //@line 4990
}
function __ZN9UDPSocketC2I17EthernetInterfaceEEPT___async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5975
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5977
 $4 = __Z18nsapi_create_stackP12NetworkStack(HEAP32[___async_retval >> 2] | 0) | 0; //@line 5980
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5981
 __ZN6Socket4openEP12NetworkStack($2, $4) | 0; //@line 5982
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 5985
  sp = STACKTOP; //@line 5986
  return;
 }
 ___async_unwind = 0; //@line 5989
 HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 5990
 sp = STACKTOP; //@line 5991
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_213($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17955
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17959
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 17961
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 17962
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 17963
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 75; //@line 17966
  sp = STACKTOP; //@line 17967
  return;
 }
 ___async_unwind = 0; //@line 17970
 HEAP32[$ReallocAsyncCtx >> 2] = 75; //@line 17971
 sp = STACKTOP; //@line 17972
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 766
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 767
 _wait_ms(1); //@line 768
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 48; //@line 771
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 773
  sp = STACKTOP; //@line 774
  return 0; //@line 775
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 777
  return $6 | 0; //@line 778
 }
 return 0; //@line 780
}
function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 84 | 0; //@line 9800
 $4 = HEAP32[$3 >> 2] | 0; //@line 9801
 $5 = $2 + 256 | 0; //@line 9802
 $6 = _memchr($4, 0, $5) | 0; //@line 9803
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0; //@line 9808
 $$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2; //@line 9810
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0; //@line 9811
 HEAP32[$0 + 4 >> 2] = $4 + $$027$; //@line 9814
 $14 = $4 + $$027 | 0; //@line 9815
 HEAP32[$0 + 8 >> 2] = $14; //@line 9817
 HEAP32[$3 >> 2] = $14; //@line 9818
 return $$027$ | 0; //@line 9819
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 12786
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 12789
 $$sink17$sink = $0; //@line 12789
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 12791
  $12 = HEAP8[$11 >> 0] | 0; //@line 12792
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 12800
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 12805
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 12810
}
function __ZN17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 360
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 363
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 364
 _wait_ms(1); //@line 365
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 35; //@line 368
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 370
  sp = STACKTOP; //@line 371
  return 0; //@line 372
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 374
  return $6 | 0; //@line 375
 }
 return 0; //@line 377
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 11355
 } else {
  $$06 = $2; //@line 11357
  $11 = $1; //@line 11357
  $7 = $0; //@line 11357
  while (1) {
   $10 = $$06 + -1 | 0; //@line 11362
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 11363
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 11364
   $11 = tempRet0; //@line 11365
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 11370
    break;
   } else {
    $$06 = $10; //@line 11373
   }
  }
 }
 return $$0$lcssa | 0; //@line 11377
}
function _arg_n_727($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 6674
 STACKTOP = STACKTOP + 16 | 0; //@line 6675
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6675
 $2 = sp; //@line 6676
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2]; //@line 6678
 $$0 = $1; //@line 6679
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 6693
  $10 = HEAP32[$9 >> 2] | 0; //@line 6694
  HEAP32[$2 >> 2] = $9 + 4; //@line 6696
  if ($$0 >>> 0 > 1) {
   $$0 = $$0 + -1 | 0; //@line 6699
  } else {
   break;
  }
 }
 STACKTOP = sp; //@line 6704
 return $10 | 0; //@line 6704
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_70($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 22893
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22895
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22897
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 22898
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 22899
 if (!___async) {
  ___async_unwind = 0; //@line 22902
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 232; //@line 22904
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 22906
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 22908
 sp = STACKTOP; //@line 22909
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_136($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 4327
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4329
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4331
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 4332
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 4333
 if (!___async) {
  ___async_unwind = 0; //@line 4336
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 203; //@line 4338
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $2; //@line 4340
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $4; //@line 4342
 sp = STACKTOP; //@line 4343
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_38($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19366
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19370
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 19372
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 19373
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 19374
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 126; //@line 19377
  sp = STACKTOP; //@line 19378
  return;
 }
 ___async_unwind = 0; //@line 19381
 HEAP32[$ReallocAsyncCtx >> 2] = 126; //@line 19382
 sp = STACKTOP; //@line 19383
 return;
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15810
 do {
  if (!$0) {
   $3 = 0; //@line 15814
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15816
   $2 = ___dynamic_cast($0, 128, 184, 0) | 0; //@line 15817
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 355; //@line 15820
    sp = STACKTOP; //@line 15821
    return 0; //@line 15822
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15824
    $3 = ($2 | 0) != 0 & 1; //@line 15827
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 15832
}
function _invoke_ticker__async_cb_50($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20279
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 20285
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 20286
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 20287
 FUNCTION_TABLE_vi[$5 & 511]($6); //@line 20288
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 291; //@line 20291
  sp = STACKTOP; //@line 20292
  return;
 }
 ___async_unwind = 0; //@line 20295
 HEAP32[$ReallocAsyncCtx >> 2] = 291; //@line 20296
 sp = STACKTOP; //@line 20297
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 10999
 } else {
  $$04 = 0; //@line 11001
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 11004
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 11008
   $12 = $7 + 1 | 0; //@line 11009
   HEAP32[$0 >> 2] = $12; //@line 11010
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 11016
    break;
   } else {
    $$04 = $11; //@line 11019
   }
  }
 }
 return $$0$lcssa | 0; //@line 11023
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 18005
 $y_sroa_0_0_extract_trunc = $b$0; //@line 18006
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 18007
 $1$1 = tempRet0; //@line 18008
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 18010
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11594
 $1 = HEAP32[$0 >> 2] | 0; //@line 11595
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 11597
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11598
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 11599
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 249; //@line 11602
  sp = STACKTOP; //@line 11603
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11606
  return;
 }
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 17990
 $2 = $b & 65535; //@line 17991
 $3 = Math_imul($2, $1) | 0; //@line 17992
 $6 = $a >>> 16; //@line 17993
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 17994
 $11 = $b >>> 16; //@line 17995
 $12 = Math_imul($11, $1) | 0; //@line 17996
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 17997
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10012
 $1 = HEAP32[$0 >> 2] | 0; //@line 10013
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 10015
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10016
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 10017
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 219; //@line 10020
  sp = STACKTOP; //@line 10021
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10024
  return;
 }
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 593
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 595
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 596
 _wait_ms(1); //@line 597
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 43; //@line 600
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 602
  sp = STACKTOP; //@line 603
  return 0; //@line 604
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 606
  return $2 | 0; //@line 607
 }
 return 0; //@line 609
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2676
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 2678
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 2684
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2685
 FUNCTION_TABLE_vi[$5 & 511]($0); //@line 2686
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 73; //@line 2689
  sp = STACKTOP; //@line 2690
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2693
 return;
}
function __ZN6SocketC2Ev($0) {
 $0 = $0 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 556; //@line 4019
 HEAP32[$0 + 4 >> 2] = 0; //@line 4021
 HEAP32[$0 + 8 >> 2] = 0; //@line 4023
 HEAP32[$0 + 12 >> 2] = -1; //@line 4025
 $4 = $0 + 16 | 0; //@line 4026
 HEAP32[$4 >> 2] = 0; //@line 4027
 HEAP32[$4 + 4 >> 2] = 0; //@line 4027
 HEAP32[$4 + 8 >> 2] = 0; //@line 4027
 HEAP32[$4 + 12 >> 2] = 0; //@line 4027
 HEAP32[$4 + 16 >> 2] = 0; //@line 4027
 HEAP32[$4 + 20 >> 2] = 0; //@line 4027
 HEAP32[$4 + 24 >> 2] = 0; //@line 4027
 HEAP32[$4 + 28 >> 2] = 0; //@line 4027
 return;
}
function __ZN17EthernetInterface11get_netmaskEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 103
 $2 = _emscripten_asm_const_ii(2, 0) | 0; //@line 105
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 106
 _wait_ms(1); //@line 107
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 28; //@line 110
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 112
  sp = STACKTOP; //@line 113
  return 0; //@line 114
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 116
  return $2 | 0; //@line 117
 }
 return 0; //@line 119
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 380
  src = src + num | 0; //@line 381
  dest = dest + num | 0; //@line 382
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 384
   src = src - 1 | 0; //@line 385
   num = num - 1 | 0; //@line 386
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 387
  }
  dest = ret; //@line 389
 } else {
  _memcpy(dest, src, num) | 0; //@line 391
 }
 return dest | 0; //@line 393
}
function __ZN17EthernetInterface15get_mac_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 61
 $2 = _emscripten_asm_const_ii(0, 0) | 0; //@line 63
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 64
 _wait_ms(1); //@line 65
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 26; //@line 68
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 70
  sp = STACKTOP; //@line 71
  return 0; //@line 72
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 74
  return $2 | 0; //@line 75
 }
 return 0; //@line 77
}
function __ZN17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 82
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 84
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _wait_ms(1); //@line 86
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 27; //@line 89
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 91
  sp = STACKTOP; //@line 92
  return 0; //@line 93
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 95
  return $2 | 0; //@line 96
 }
 return 0; //@line 98
}
function _mbed_die__async_cb_108($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 2385
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2387
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2389
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 2390
 _wait_ms(150); //@line 2391
 if (!___async) {
  ___async_unwind = 0; //@line 2394
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 269; //@line 2396
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 2398
 sp = STACKTOP; //@line 2399
 return;
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 2015
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2017
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2019
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 2020
 _wait_ms(150); //@line 2021
 if (!___async) {
  ___async_unwind = 0; //@line 2024
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 268; //@line 2026
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 2028
 sp = STACKTOP; //@line 2029
 return;
}
function ___fflush_unlocked__async_cb_75($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23414
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23416
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23418
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23420
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 23422
 HEAP32[$4 >> 2] = 0; //@line 23423
 HEAP32[$6 >> 2] = 0; //@line 23424
 HEAP32[$8 >> 2] = 0; //@line 23425
 HEAP32[$10 >> 2] = 0; //@line 23426
 HEAP32[___async_retval >> 2] = 0; //@line 23428
 return;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3422
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3423
 $2 = __Z28nsapi_dns_query_async_canceli($1) | 0; //@line 3424
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 98; //@line 3427
  sp = STACKTOP; //@line 3428
  return 0; //@line 3429
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3431
  return $2 | 0; //@line 3432
 }
 return 0; //@line 3434
}
function _mbed_vtracef__async_cb_21($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17921
 $1 = HEAP32[130] | 0; //@line 17922
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 17923
 FUNCTION_TABLE_vi[$1 & 511](2635); //@line 17924
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 64; //@line 17927
  sp = STACKTOP; //@line 17928
  return;
 }
 ___async_unwind = 0; //@line 17931
 HEAP32[$ReallocAsyncCtx3 >> 2] = 64; //@line 17932
 sp = STACKTOP; //@line 17933
 return;
}
function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 9723
 STACKTOP = STACKTOP + 16 | 0; //@line 9724
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9724
 $1 = sp; //@line 9725
 if (!(___toread($0) | 0)) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 31]($0, $1, 1) | 0) == 1) {
   $$0 = HEAPU8[$1 >> 0] | 0; //@line 9736
  } else {
   $$0 = -1; //@line 9738
  }
 } else {
  $$0 = -1; //@line 9741
 }
 STACKTOP = sp; //@line 9743
 return $$0 | 0; //@line 9743
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13591
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13592
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 13593
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 319; //@line 13596
  sp = STACKTOP; //@line 13597
  return 0; //@line 13598
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13600
  return $3 | 0; //@line 13601
 }
 return 0; //@line 13603
}
function _serial_putc__async_cb_76($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23440
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23442
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 23443
 _fflush($2) | 0; //@line 23444
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 23447
  sp = STACKTOP; //@line 23448
  return;
 }
 ___async_unwind = 0; //@line 23451
 HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 23452
 sp = STACKTOP; //@line 23453
 return;
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 133
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 134
 _puts(2231) | 0; //@line 135
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 29; //@line 138
  sp = STACKTOP; //@line 139
  return 0; //@line 140
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 142
  return 0; //@line 143
 }
 return 0; //@line 145
}
function __ZN13SocketAddressC2E10nsapi_addrt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP8[$0 >> 0] = 0; //@line 4558
 $3 = $0 + 40 | 0; //@line 4559
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2]; //@line 4560
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4560
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4560
 HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 4560
 HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 4560
 HEAP16[$0 + 60 >> 1] = $2; //@line 4562
 return;
}
function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9704
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9704
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9705
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9706
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647; //@line 9710
 HEAP32[tempDoublePtr >> 2] = $2; //@line 9711
 HEAP32[tempDoublePtr + 4 >> 2] = $8; //@line 9711
 return +(+HEAPF64[tempDoublePtr >> 3]);
}
function __ZnwjRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13928
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13929
 $2 = __Znwj($0) | 0; //@line 13930
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 325; //@line 13933
  sp = STACKTOP; //@line 13934
  return 0; //@line 13935
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13937
  return $2 | 0; //@line 13938
 }
 return 0; //@line 13940
}
function __ZnajRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13963
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13964
 $2 = __Znaj($0) | 0; //@line 13965
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 327; //@line 13968
  sp = STACKTOP; //@line 13969
  return 0; //@line 13970
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13972
  return $2 | 0; //@line 13973
 }
 return 0; //@line 13975
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12138
 $1 = HEAP32[$0 >> 2] | 0; //@line 12139
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12140
 FUNCTION_TABLE_v[$1 & 7](); //@line 12141
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 263; //@line 12144
  sp = STACKTOP; //@line 12145
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12148
  return;
 }
}
function _emscripten_async_resume() {
 ___async = 0; //@line 280
 ___async_unwind = 1; //@line 281
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 287
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 291
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 295
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 297
 }
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4369
 STACKTOP = STACKTOP + 16 | 0; //@line 4370
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4370
 $vararg_buffer = sp; //@line 4371
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 4375
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 4377
 STACKTOP = sp; //@line 4378
 return $5 | 0; //@line 4378
}
function __ZN9UDPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5173
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5174
 __ZN9UDPSocketD2Ev($0); //@line 5175
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 136; //@line 5178
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5180
  sp = STACKTOP; //@line 5181
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5184
  __ZdlPv($0); //@line 5185
  return;
 }
}
function __ZN17EthernetInterface8set_dhcpEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 151
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 152
 _puts(2186) | 0; //@line 153
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 30; //@line 156
  sp = STACKTOP; //@line 157
  return 0; //@line 158
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 160
  return 0; //@line 161
 }
 return 0; //@line 163
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 18035
 if ((ret | 0) < 8) return ret | 0; //@line 18036
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 18037
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 18038
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 18039
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 18040
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 18041
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 222
 STACKTOP = STACKTOP + 16 | 0; //@line 223
 $rem = __stackBase__ | 0; //@line 224
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 225
 STACKTOP = __stackBase__; //@line 226
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 227
}
function __Znaj($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13945
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13946
 $1 = __Znwj($0) | 0; //@line 13947
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 326; //@line 13950
  sp = STACKTOP; //@line 13951
  return 0; //@line 13952
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13954
  return $1 | 0; //@line 13955
 }
 return 0; //@line 13957
}
function __ZN13SocketAddress8set_addrE10nsapi_addr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP8[$0 >> 0] = 0; //@line 4570
 $2 = $0 + 40 | 0; //@line 4571
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2]; //@line 4572
 HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4572
 HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4572
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 4572
 HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 4572
 return;
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 14120
 STACKTOP = STACKTOP + 16 | 0; //@line 14121
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14121
 if (!(_pthread_once(7352, 4) | 0)) {
  $3 = _pthread_getspecific(HEAP32[1839] | 0) | 0; //@line 14127
  STACKTOP = sp; //@line 14128
  return $3 | 0; //@line 14128
 } else {
  _abort_message(6185, sp); //@line 14130
 }
 return 0; //@line 14133
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14288
 }
 return;
}
function __ZThn4_N17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1079
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1081
 HEAP8[$2 + 8 >> 0] = 0; //@line 1083
 if (!$2) {
  $7 = ___async_retval; //@line 1086
  HEAP32[$7 >> 2] = $4; //@line 1087
  return;
 }
 __ZdlPv($2); //@line 1090
 $7 = ___async_retval; //@line 1091
 HEAP32[$7 >> 2] = $4; //@line 1092
 return;
}
function __ZL25default_terminate_handlerv__async_cb_45($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19961
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19963
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19965
 HEAP32[$2 >> 2] = 6046; //@line 19966
 HEAP32[$2 + 4 >> 2] = $4; //@line 19968
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 19970
 _abort_message(5910, $2); //@line 19971
}
function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 5584
 STACKTOP = STACKTOP + 16 | 0; //@line 5585
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5585
 $2 = sp; //@line 5586
 HEAP32[$2 >> 2] = $varargs; //@line 5587
 $3 = _vsscanf($0, $1, $2) | 0; //@line 5588
 STACKTOP = sp; //@line 5589
 return $3 | 0; //@line 5589
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 13441
 $6 = HEAP32[$5 >> 2] | 0; //@line 13442
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 13443
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 13445
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 13447
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 13450
 return $2 | 0; //@line 13451
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 1101
 HEAP32[$3 >> 2] = 0; //@line 1102
 HEAP32[$3 + 4 >> 2] = 0; //@line 1102
 HEAP32[$3 + 8 >> 2] = 0; //@line 1102
 HEAP32[$3 + 12 >> 2] = 0; //@line 1102
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 1105
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 1108
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5328
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5330
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5331
 _fputc(10, $2) | 0; //@line 5332
 if (!___async) {
  ___async_unwind = 0; //@line 5335
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 331; //@line 5337
 sp = STACKTOP; //@line 5338
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20086
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 20089
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 20094
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 20097
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 14882
 STACKTOP = STACKTOP + 16 | 0; //@line 14883
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14883
 _free($0); //@line 14885
 if (!(_pthread_setspecific(HEAP32[1839] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 14890
  return;
 } else {
  _abort_message(6284, sp); //@line 14892
 }
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 12804
 HEAP32[$0 >> 2] = $1; //@line 12805
 HEAP32[1690] = 1; //@line 12806
 $4 = $0; //@line 12807
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 12812
 $10 = 6764; //@line 12813
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 12815
 HEAP32[$10 + 4 >> 2] = $9; //@line 12818
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1100
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 1111
  $$0 = 1; //@line 1112
 } else {
  $$0 = 0; //@line 1114
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 1118
 return;
}
function __ZNK13SocketAddress8get_addrEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $1 + 40 | 0; //@line 4822
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 4823
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 4823
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 4823
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 4823
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 4823
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14364
 }
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12908
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12909
 _emscripten_sleep($0 | 0); //@line 12910
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 292; //@line 12913
  sp = STACKTOP; //@line 12914
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12917
  return;
 }
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1667
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1668
 _puts($0) | 0; //@line 1669
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 1672
  sp = STACKTOP; //@line 1673
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1676
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 1634
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 1638
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 1642
   $$0 = 0; //@line 1643
  } else {
   $$0 = $4; //@line 1645
  }
 } else {
  $$0 = $1; //@line 1648
 }
 return $$0 | 0; //@line 1650
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 1597
 STACKTOP = STACKTOP + 16 | 0; //@line 1598
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1598
 $0 = sp; //@line 1599
 _gettimeofday($0 | 0, 0) | 0; //@line 1600
 STACKTOP = sp; //@line 1607
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 1607
}
function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1; //@line 6559
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6561
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 6563
 $7 = $4 - $6 | 0; //@line 6564
 HEAP32[$0 + 108 >> 2] = $7; //@line 6566
 HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($7 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4; //@line 6575
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 14428
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 14432
  }
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 14867
 STACKTOP = STACKTOP + 16 | 0; //@line 14868
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14868
 if (!(_pthread_key_create(7356, 340) | 0)) {
  STACKTOP = sp; //@line 14873
  return;
 } else {
  _abort_message(6234, sp); //@line 14875
 }
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 11615
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 11620
 $8 = $0; //@line 11621
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 11623
 HEAP32[$8 + 4 >> 2] = $7; //@line 11626
 return;
}
function _nsapi_dns_add_server($0) {
 $0 = $0 | 0;
 _memmove(628, 608, 80) | 0; //@line 5485
 HEAP32[152] = HEAP32[$0 >> 2]; //@line 5486
 HEAP32[153] = HEAP32[$0 + 4 >> 2]; //@line 5486
 HEAP32[154] = HEAP32[$0 + 8 >> 2]; //@line 5486
 HEAP32[155] = HEAP32[$0 + 12 >> 2]; //@line 5486
 HEAP32[156] = HEAP32[$0 + 16 >> 2]; //@line 5486
 return 0; //@line 5487
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 256
 HEAP32[new_frame + 4 >> 2] = sp; //@line 258
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 260
 ___async_cur_frame = new_frame; //@line 261
 return ___async_cur_frame + 8 | 0; //@line 262
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 10033
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 10038
 $8 = $0; //@line 10039
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 10041
 HEAP32[$8 + 4 >> 2] = $7; //@line 10044
 return;
}
function __ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = $0 + -4 | 0; //@line 980
 $5 = HEAP32[$1 >> 2] | 0; //@line 981
 HEAP32[$4 + 60 + ($5 << 3) >> 2] = $2; //@line 983
 HEAP32[$4 + 60 + ($5 << 3) + 4 >> 2] = $3; //@line 985
 return;
}
function __ZN17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19487
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19489
 HEAP8[$2 + 8 >> 0] = 0; //@line 19491
 if ($2 | 0) {
  __ZdlPv($2); //@line 19494
 }
 HEAP32[___async_retval >> 2] = $4; //@line 19497
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 4000
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4000
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4000
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 2825
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 2829
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 2832
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 245
  return low << bits; //@line 246
 }
 tempRet0 = low << bits - 32; //@line 248
 return 0; //@line 249
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 234
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 235
 }
 tempRet0 = 0; //@line 237
 return high >>> bits - 32 | 0; //@line 238
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 4389
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4389
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4389
 return;
}
function __ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = HEAP32[$1 >> 2] | 0; //@line 569
 HEAP32[$0 + 60 + ($4 << 3) >> 2] = $2; //@line 571
 HEAP32[$0 + 60 + ($4 << 3) + 4 >> 2] = $3; //@line 573
 return;
}
function _fflush__async_cb_47($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20181
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 20183
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 20186
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_194($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 9945
 HEAP32[___async_retval >> 2] = -3007; //@line 9947
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16249
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 16251
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16253
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 4940
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 4943
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 4946
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 525
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 2920
 } else {
  $$0 = -1; //@line 2922
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 2925
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_118($0) {
 $0 = $0 | 0;
 var $$06 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$06 = -3007; //@line 3144
 } else {
  $$06 = 0; //@line 3146
 }
 HEAP32[___async_retval >> 2] = $$06; //@line 3149
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_115($0) {
 $0 = $0 | 0;
 var $$06 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$06 = -3007; //@line 3054
 } else {
  $$06 = 0; //@line 3056
 }
 HEAP32[___async_retval >> 2] = $$06; //@line 3059
 return;
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 5087
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 5093
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 5097
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_197($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 10732
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 574
}
function __ZN12NetworkStack20get_call_in_callbackEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 100; //@line 3505
 HEAP32[$0 + 4 >> 2] = 1; //@line 3507
 HEAP32[$0 + 8 >> 2] = $1; //@line 3509
 HEAP32[$0 + 12 >> 2] = 536; //@line 3510
 return;
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2947
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 2948
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 2950
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2561
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 2562
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 2564
 return;
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 268
 stackRestore(___async_cur_frame | 0); //@line 269
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 270
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 12780
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 12786
 _emscripten_asm_const_iii(11, $0 | 0, $1 | 0) | 0; //@line 12787
 return;
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12440
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12440
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12442
 return $1 | 0; //@line 12443
}
function ___DOUBLE_BITS_563($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9694
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9694
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9696
 return $1 | 0; //@line 9697
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1656
 HEAP8[$0 + 76 >> 0] = 1; //@line 1658
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 1660
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1661
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 18028
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 18029
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 18030
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 4535
  $$0 = -1; //@line 4536
 } else {
  $$0 = $0; //@line 4538
 }
 return $$0 | 0; //@line 4540
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 518
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_92($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1834
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 1835
 HEAP32[6740 + ($4 << 2) >> 2] = 0; //@line 1837
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_9($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16544
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1002
 ___cxa_begin_catch($0 | 0) | 0; //@line 1003
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1004
 __ZSt9terminatev(); //@line 1005
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1193
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 1194
 HEAP32[___async_retval >> 2] = $4; //@line 1196
 return;
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 567
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 1019
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 15744
 } else {
  HEAP8[$0 >> 0] = 1; //@line 15746
  $$0 = 1; //@line 15747
 }
 return $$0 | 0; //@line 15749
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_147($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5322
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 7562
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 2864
 HEAP32[___async_retval >> 2] = 0; //@line 2866
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_143($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 4927
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 2842
 HEAP32[___async_retval >> 2] = 0; //@line 2844
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_18($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 17261
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 511
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 18020
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 18022
}
function __ZN4mbed16mbed_event_queueEv() {
 if (!(HEAP8[6488] | 0)) {
  if (___cxa_guard_acquire(6488) | 0) {
   __ZN6events10EventQueueC2EjPh(6504, 256, 7364); //@line 1121
  }
 }
 return 6504; //@line 1124
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 560
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_112($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2905
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 11500
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 11503
 }
 return $$0 | 0; //@line 11505
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 5232
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 5237
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_60($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 22129
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_152($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5551
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_6($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16318
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 16690
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_168($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6246
 if ($4 | 0) {
  __ZdaPv($4); //@line 6249
 }
 return;
}
function _common_write_16_bit($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$1 >> 0] = ($0 & 65535) >>> 8; //@line 2387
 HEAP8[$1 + 1 >> 0] = $0; //@line 2390
 return $1 + 2 | 0; //@line 2391
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_160($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5873
 return;
}
function __ZN17EthernetInterfaceC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 224; //@line 993
 HEAP32[$0 + 4 >> 2] = 368; //@line 994
 _memset($0 + 60 | 0, 0, 800) | 0; //@line 996
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_43($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 19675
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 504
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 19400
 return;
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 4727
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 4731
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 214
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_56($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20767
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_42($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 19631
 return;
}
function b54(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 719
 return 0; //@line 719
}
function b53(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 716
 return 0; //@line 716
}
function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) {
  $4 = 1; //@line 6903
 } else {
  $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1; //@line 6908
 }
 return $4 | 0; //@line 6910
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_149($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5391
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_157($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5721
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 275
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 276
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_109($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 2451
 return;
}
function __ZN12NetworkStack10getsockoptEPviiS0_Pj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 0](a1 | 0, a2 | 0, a3 | 0); //@line 553
}
function __ZN12NetworkStack10setsockoptEPviiPKvj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19479
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_153($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 5559
 return;
}
function __ZN9UDPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 5231
 HEAP32[$0 >> 2] = 592; //@line 5232
 HEAP32[$0 + 52 >> 2] = 0; //@line 5234
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14967
 __ZdlPv($0); //@line 14968
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14650
 __ZdlPv($0); //@line 14651
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 5223
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 5225
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_161($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 5881
 return;
}
function __ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14178
 __ZdlPv($0); //@line 14179
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16269
 return;
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5803
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 10985
 }
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_74($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 23342
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function b51(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 713
 return 0; //@line 713
}
function b50(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 710
 return 0; //@line 710
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 2463
 return;
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 1177
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_4($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16151
 return;
}
function __ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_155($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 5673
 return;
}
function b229(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 1226
}
function __ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 12158
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0; //@line 497
}
function __ZN17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 7516
 return;
}
function __ZN17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5609
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 14375
}
function __ZN17EthernetInterface15get_mac_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 2617
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_77($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 23507
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[1840] | 0; //@line 15766
 HEAP32[1840] = $0 + 0; //@line 15768
 return $0 | 0; //@line 15770
}
function __ZN17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5355
 return;
}
function __ZN12NetworkStack11setstackoptEiiPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN12NetworkStack11getstackoptEiiPvPj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN17EthernetInterface11get_netmaskEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 3502
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[405] | 0; //@line 14957
 HEAP32[405] = $0 + 0; //@line 14959
 return $0 | 0; //@line 14961
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 7](a1 | 0, a2 | 0); //@line 546
}
function __ZN6Socket11set_timeoutEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 12 >> 2] = ($1 | 0) > -1 ? $1 : -1; //@line 4481
 return;
}
function __ZnwjRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2854
 return;
}
function __ZnajRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 7526
 return;
}
function b48(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(15); //@line 707
 return 0; //@line 707
}
function b47(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(14); //@line 704
 return 0; //@line 704
}
function b46(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(13); //@line 701
 return 0; //@line 701
}
function b45(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(12); //@line 698
 return 0; //@line 698
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 5638
 return;
}
function b44(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 695
 return 0; //@line 695
}
function __ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_11($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b227(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 1223
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 302
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6Socket5closeEv__async_cb_184($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 7500
 return;
}
function __ZN17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 11448
}
function _fflush__async_cb_48($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20196
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb_151($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 5494
 return;
}
function _fputc__async_cb_113($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2960
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1206
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20731
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5621
 return;
}
function _putc__async_cb_110($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2574
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_55($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 20719
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12NetworkStack14get_dns_serverEiP13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_68($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 8 >> 2] | 0); //@line 22857
 return;
}
function __ZN17EthernetInterface8set_dhcpEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 11003
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2937
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 31](a1 | 0) | 0; //@line 490
}
function __Znaj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 6153
 return;
}
function __ZThn4_N17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN13SocketAddress8set_portEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP16[$0 + 60 >> 1] = $1; //@line 4581
 return;
}
function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0; //@line 5618
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(6337, HEAP32[$0 + 4 >> 2] | 0); //@line 17981
}
function b42(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 692
 return 0; //@line 692
}
function b41(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 689
 return 0; //@line 689
}
function b40(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 686
 return 0; //@line 686
}
function b39(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 683
 return 0; //@line 683
}
function b38(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 680
 return 0; //@line 680
}
function b37(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 677
 return 0; //@line 677
}
function b36(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 674
 return 0; //@line 674
}
function b35(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 671
 return 0; //@line 671
}
function b34(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 668
 return 0; //@line 668
}
function b33(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 665
 return 0; //@line 665
}
function b32(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 662
 return 0; //@line 662
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 659
 return 0; //@line 659
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 656
 return 0; //@line 656
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(18); //@line 653
 return 0; //@line 653
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 650
 return 0; //@line 650
}
function _strcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 ___stpcpy($0, $1) | 0; //@line 13458
 return $0 | 0; //@line 13459
}
function __ZN17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function b225(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 1220
}
function b224(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 1217
}
function b223(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 1214
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 511](a1 | 0); //@line 539
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 1583
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 1592
 return;
}
function __ZNK13SocketAddress14get_ip_versionEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 40 >> 2] | 0; //@line 4900
}
function __ZN9UDPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 5630
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0; //@line 4645
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 12693
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1627
 return;
}
function __ZNK13SocketAddress8get_portEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 60 >> 1] | 0; //@line 4832
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 1614
}
function __ZdlPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdlPv($0); //@line 13989
 return;
}
function __ZdaPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdaPv($0); //@line 14004
 return;
}
function __ZThn4_N17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0 + -4 | 0); //@line 587
 return;
}
function b26(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(15); //@line 647
 return 0; //@line 647
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(14); //@line 644
 return 0; //@line 644
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(13); //@line 641
 return 0; //@line 641
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(12); //@line 638
 return 0; //@line 638
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(11); //@line 635
 return 0; //@line 635
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(10); //@line 632
 return 0; //@line 632
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(9); //@line 629
 return 0; //@line 629
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 626
 return 0; //@line 626
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1620
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 0]() | 0; //@line 483
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 6535
 return;
}
function b221(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 1211
}
function __ZN16NetworkInterface12set_blockingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterface9get_stackEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 212
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_86($0) {
 $0 = $0 | 0;
 return;
}
function __Z18nsapi_create_stackP12NetworkStack($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 4013
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_165($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocketC2I17EthernetInterfaceEEPT___async_cb_163($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12NetworkStack19onboardNetworkStackEv($0) {
 $0 = $0 | 0;
 return 0; //@line 615
}
function __ZNK16NetworkInterface21get_connection_statusEv($0) {
 $0 = $0 | 0;
 return -3002;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7](); //@line 532
}
function __ZN16NetworkInterface13wifiInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 187
}
function __ZN16NetworkInterface13meshInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 193
}
function __ZN16NetworkInterface13emacInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 205
}
function __ZN17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 55
 return;
}
function __ZN17EthernetInterface11get_gatewayEv($0) {
 $0 = $0 | 0;
 return 0; //@line 125
}
function __ZN16NetworkInterface12ethInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 181
}
function __ZN16NetworkInterface12cellularBaseEv($0) {
 $0 = $0 | 0;
 return 0; //@line 199
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 4593
}
function __ZN17EthernetInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 175
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_207($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_134($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_128($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_124($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function b17(p0) {
 p0 = p0 | 0;
 nullFunc_ii(31); //@line 623
 return 0; //@line 623
}
function b16(p0) {
 p0 = p0 | 0;
 nullFunc_ii(30); //@line 620
 return 0; //@line 620
}
function b15(p0) {
 p0 = p0 | 0;
 nullFunc_ii(29); //@line 617
 return 0; //@line 617
}
function b14(p0) {
 p0 = p0 | 0;
 nullFunc_ii(28); //@line 614
 return 0; //@line 614
}
function b13(p0) {
 p0 = p0 | 0;
 nullFunc_ii(27); //@line 611
 return 0; //@line 611
}
function b12(p0) {
 p0 = p0 | 0;
 nullFunc_ii(26); //@line 608
 return 0; //@line 608
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(25); //@line 605
 return 0; //@line 605
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(24); //@line 602
 return 0; //@line 602
}
function __ZN17EthernetInterface7connectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 169
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_64($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(23); //@line 599
 return 0; //@line 599
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(22); //@line 596
 return 0; //@line 596
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(21); //@line 593
 return 0; //@line 593
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(20); //@line 590
 return 0; //@line 590
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(19); //@line 587
 return 0; //@line 587
}
function b4(p0) {
 p0 = p0 | 0;
 nullFunc_ii(18); //@line 584
 return 0; //@line 584
}
function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 581
 return 0; //@line 581
}
function b219(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 1208
}
function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}
function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}
function _abort_message__async_cb_148($0) {
 $0 = $0 | 0;
 _abort(); //@line 5345
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(7336); //@line 5242
 return 7344; //@line 5243
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __ZN9UDPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 1; //@line 5193
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 725
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 12614
}
function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}
function ___pthread_self_913() {
 return _pthread_self() | 0; //@line 9718
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 12620
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZdaPv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 13996
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function __ZN6SocketD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 4082
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 13981
 return;
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 449
}
function __ZThn4_N17EthernetInterfaceD1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_40($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 445
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function b1() {
 nullFunc_i(0); //@line 578
 return 0; //@line 578
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(7336); //@line 5248
 return;
}
function __ZN6SocketD2Ev__async_cb_32($0) {
 $0 = $0 | 0;
 return;
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(511); //@line 1205
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(510); //@line 1202
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(509); //@line 1199
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(508); //@line 1196
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(507); //@line 1193
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(506); //@line 1190
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(505); //@line 1187
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(504); //@line 1184
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(503); //@line 1181
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(502); //@line 1178
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(501); //@line 1175
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(500); //@line 1172
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(499); //@line 1169
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(498); //@line 1166
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(497); //@line 1163
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(496); //@line 1160
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(495); //@line 1157
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(494); //@line 1154
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(493); //@line 1151
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(492); //@line 1148
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(491); //@line 1145
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(490); //@line 1142
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(489); //@line 1139
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(488); //@line 1136
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(487); //@line 1133
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(486); //@line 1130
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(485); //@line 1127
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(484); //@line 1124
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(483); //@line 1121
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(482); //@line 1118
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(481); //@line 1115
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(480); //@line 1112
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(479); //@line 1109
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(478); //@line 1106
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(477); //@line 1103
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(476); //@line 1100
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(475); //@line 1097
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(474); //@line 1094
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(473); //@line 1091
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(472); //@line 1088
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(471); //@line 1085
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(470); //@line 1082
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(469); //@line 1079
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(468); //@line 1076
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(467); //@line 1073
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(466); //@line 1070
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(465); //@line 1067
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(464); //@line 1064
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(463); //@line 1061
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(462); //@line 1058
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(461); //@line 1055
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(460); //@line 1052
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(459); //@line 1049
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(458); //@line 1046
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(457); //@line 1043
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(456); //@line 1040
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(455); //@line 1037
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(454); //@line 1034
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(453); //@line 1031
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(452); //@line 1028
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(451); //@line 1025
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(450); //@line 1022
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(449); //@line 1019
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(448); //@line 1016
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(447); //@line 1013
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(446); //@line 1010
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(445); //@line 1007
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(444); //@line 1004
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(443); //@line 1001
}
function __ZN17EthernetInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(442); //@line 998
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(441); //@line 995
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(440); //@line 992
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(439); //@line 989
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(438); //@line 986
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(437); //@line 983
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(436); //@line 980
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(435); //@line 977
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(434); //@line 974
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(433); //@line 971
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(432); //@line 968
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(431); //@line 965
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(430); //@line 962
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(429); //@line 959
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(428); //@line 956
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(427); //@line 953
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(426); //@line 950
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(425); //@line 947
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(424); //@line 944
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(423); //@line 941
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(422); //@line 938
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(421); //@line 935
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(420); //@line 932
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(419); //@line 929
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(418); //@line 926
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(417); //@line 923
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(416); //@line 920
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(415); //@line 917
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(414); //@line 914
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(413); //@line 911
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(412); //@line 908
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(411); //@line 905
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(410); //@line 902
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(409); //@line 899
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(408); //@line 896
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(407); //@line 893
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(406); //@line 890
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(405); //@line 887
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(404); //@line 884
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(403); //@line 881
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(402); //@line 878
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(401); //@line 875
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(400); //@line 872
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(399); //@line 869
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(398); //@line 866
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(397); //@line 863
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(396); //@line 860
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(395); //@line 857
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(394); //@line 854
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 4551
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 4879
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(393); //@line 851
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(392); //@line 848
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(391); //@line 845
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(390); //@line 842
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(389); //@line 839
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(388); //@line 836
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(387); //@line 833
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(386); //@line 830
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(385); //@line 827
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(384); //@line 824
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(383); //@line 821
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(382); //@line 818
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(381); //@line 815
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(380); //@line 812
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(379); //@line 809
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(378); //@line 806
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(377); //@line 803
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(376); //@line 800
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(375); //@line 797
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(374); //@line 794
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(373); //@line 791
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(372); //@line 788
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(371); //@line 785
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(370); //@line 782
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(369); //@line 779
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(368); //@line 776
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(367); //@line 773
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(366); //@line 770
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(365); //@line 767
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(364); //@line 764
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(363); //@line 761
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(362); //@line 758
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(361); //@line 755
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(360); //@line 752
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(359); //@line 749
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(358); //@line 746
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(357); //@line 743
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(356); //@line 740
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 737
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt9terminatev__async_cb_185($0) {
 $0 = $0 | 0;
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function ___errno_location() {
 return 7332; //@line 4545
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _pthread_self() {
 return 1212; //@line 4598
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b59() {
 nullFunc_v(7); //@line 734
}
function b58() {
 nullFunc_v(6); //@line 731
}
function b57() {
 nullFunc_v(5); //@line 728
}
function b56() {
 nullFunc_v(0); //@line 722
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1];
var FUNCTION_TABLE_ii = [b3,__ZN17EthernetInterface15get_mac_addressEv,__ZN17EthernetInterface14get_ip_addressEv,__ZN17EthernetInterface11get_netmaskEv,__ZN17EthernetInterface11get_gatewayEv,__ZN17EthernetInterface7connectEv,__ZN17EthernetInterface10disconnectEv,__ZNK16NetworkInterface21get_connection_statusEv,__ZN16NetworkInterface12ethInterfaceEv,__ZN16NetworkInterface13wifiInterfaceEv,__ZN16NetworkInterface13meshInterfaceEv,__ZN16NetworkInterface12cellularBaseEv,__ZN16NetworkInterface13emacInterfaceEv,__ZN17EthernetInterface9get_stackEv,__ZThn4_N17EthernetInterface14get_ip_addressEv,__ZN12NetworkStack19onboardNetworkStackEv,__ZN9UDPSocket9get_protoEv,___stdio_close,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14
,b15,b16,b17];
var FUNCTION_TABLE_iii = [b19,__ZN16NetworkInterface26gethostbyname_async_cancelEi,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress,__ZN17EthernetInterface8set_dhcpEb,__ZN16NetworkInterface12set_blockingEb,__ZN17EthernetInterface12socket_closeEPv,__ZN12NetworkStack26gethostbyname_async_cancelEi,__ZN12NetworkStack14add_dns_serverERK13SocketAddress,__ZThn4_N17EthernetInterface12socket_closeEPv,b20,b21,b22,b23,b24,b25,b26];
var FUNCTION_TABLE_iiii = [b28,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZN17EthernetInterface13socket_listenEPvi,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack14get_dns_serverEiP13SocketAddress,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZThn4_N17EthernetInterface13socket_listenEPvi,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_do_read,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39
,b40,b41,b42];
var FUNCTION_TABLE_iiiii = [b44,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZN17EthernetInterface11set_networkEPKcS1_S1_,__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZN17EthernetInterface11socket_sendEPvPKvj,__ZN17EthernetInterface11socket_recvEPvS0_j,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j,b45,b46,b47,b48];
var FUNCTION_TABLE_iiiiii = [b50,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,__ZN12NetworkStack11setstackoptEiiPKvj,__ZN12NetworkStack11getstackoptEiiPvPj,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,b51];
var FUNCTION_TABLE_iiiiiii = [b53,__ZN12NetworkStack10setsockoptEPviiPKvj,__ZN12NetworkStack10getsockoptEPviiS0_Pj,b54];
var FUNCTION_TABLE_v = [b56,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZL29nsapi_dns_query_async_timeoutv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b57,b58,b59];
var FUNCTION_TABLE_vi = [b61,__ZN17EthernetInterfaceD2Ev,__ZN17EthernetInterfaceD0Ev,__ZThn4_N17EthernetInterfaceD1Ev,__ZThn4_N17EthernetInterfaceD0Ev,_mbed_trace_default_print,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv,__ZN6SocketD2Ev,__ZN6SocketD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv,__ZN9UDPSocketD2Ev,__ZN9UDPSocketD0Ev,__ZN9UDPSocket5eventEv,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN17EthernetInterface15get_mac_addressEv__async_cb,__ZN17EthernetInterface14get_ip_addressEv__async_cb,__ZN17EthernetInterface11get_netmaskEv__async_cb
,__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb,__ZN17EthernetInterface8set_dhcpEb__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_77,__ZN17EthernetInterface12socket_closeEPv__async_cb,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_161,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_162,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_160,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_42,__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_74,__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_153,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_154,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_152,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_43,_equeue_alloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb
,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_31,_mbed_vtracef__async_cb_21,_mbed_vtracef__async_cb_22,_mbed_vtracef__async_cb_23,_mbed_vtracef__async_cb_30,_mbed_vtracef__async_cb_24,_mbed_vtracef__async_cb_29,_mbed_vtracef__async_cb_25,_mbed_vtracef__async_cb_26,_mbed_vtracef__async_cb_27,_mbed_vtracef__async_cb_28,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_213,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_112,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_141,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_142,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_143,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_149,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_56,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_6,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_20
,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_12,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_13,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_14,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_15,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_19,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_16,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_17,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_18,__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_122,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_114,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_120,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_115,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_116,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_121,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_117,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_119,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_118,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_144,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_145,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_146,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_147,__ZN6SocketD2Ev__async_cb,__ZN6SocketD2Ev__async_cb_32,__ZN6Socket4openEP12NetworkStack__async_cb
,__ZN6Socket4openEP12NetworkStack__async_cb_51,__ZN6Socket4openEP12NetworkStack__async_cb_52,__ZN6Socket4openEP12NetworkStack__async_cb_53,__ZN6Socket4openEP12NetworkStack__async_cb_54,__ZN4mbed8CallbackIFvvEE5thunkEPv,__ZN6Socket4openEP12NetworkStack__async_cb_55,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_38,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb,__ZN6Socket5closeEv__async_cb,__ZN6Socket5closeEv__async_cb_183,__ZN6Socket5closeEv__async_cb_184,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_109,__ZN9UDPSocketD2Ev__async_cb_41,__ZN9UDPSocketD2Ev__async_cb,__ZN9UDPSocketD2Ev__async_cb_40,__ZN9UDPSocketD0Ev__async_cb,__ZN9UDPSocket5eventEv__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_111,__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb,__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_62,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_59,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_58,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_57,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_61,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_60
,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_46,__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_7,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_10,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_8,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_9,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_199,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_195,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_196,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_186,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_187,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_188,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_189,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_190,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_198,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_191,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_192,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_193,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_194,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_197,__ZL29nsapi_dns_query_async_timeoutv__async_cb_208,__ZL29nsapi_dns_query_async_timeoutv__async_cb_209,__ZL29nsapi_dns_query_async_timeoutv__async_cb,__ZL30nsapi_dns_query_async_responsePv,__ZL29nsapi_dns_query_async_timeoutv__async_cb_212,__ZL29nsapi_dns_query_async_timeoutv__async_cb_200,__ZL29nsapi_dns_query_async_timeoutv__async_cb_201
,__ZL29nsapi_dns_query_async_timeoutv__async_cb_202,__ZL26nsapi_dns_query_async_sendPv,__ZL29nsapi_dns_query_async_timeoutv__async_cb_211,__ZL29nsapi_dns_query_async_timeoutv__async_cb_203,__ZL29nsapi_dns_query_async_timeoutv__async_cb_204,__ZL29nsapi_dns_query_async_timeoutv__async_cb_205,__ZL29nsapi_dns_query_async_timeoutv__async_cb_210,__ZL29nsapi_dns_query_async_timeoutv__async_cb_206,__ZL29nsapi_dns_query_async_timeoutv__async_cb_207,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_159,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_155,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_156,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_158,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_157,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb,__ZL28nsapi_dns_query_async_createPv,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_166,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_164,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_165,__ZL28nsapi_dns_query_async_createPv__async_cb_133,__ZL28nsapi_dns_query_async_createPv__async_cb_140,__ZL28nsapi_dns_query_async_createPv__async_cb,__ZL28nsapi_dns_query_async_createPv__async_cb_136,__ZL28nsapi_dns_query_async_createPv__async_cb_138,__ZL28nsapi_dns_query_async_createPv__async_cb_123,__ZL28nsapi_dns_query_async_createPv__async_cb_124,__ZL28nsapi_dns_query_async_createPv__async_cb_125,__ZL28nsapi_dns_query_async_createPv__async_cb_126,__ZL28nsapi_dns_query_async_createPv__async_cb_135
,__ZL28nsapi_dns_query_async_createPv__async_cb_137,__ZL28nsapi_dns_query_async_createPv__async_cb_127,__ZL28nsapi_dns_query_async_createPv__async_cb_128,__ZL28nsapi_dns_query_async_createPv__async_cb_132,__ZL28nsapi_dns_query_async_createPv__async_cb_129,__ZL28nsapi_dns_query_async_createPv__async_cb_130,__ZL37nsapi_dns_query_async_socket_callbackPv,__ZL28nsapi_dns_query_async_createPv__async_cb_139,__ZL28nsapi_dns_query_async_createPv__async_cb_131,__ZL28nsapi_dns_query_async_createPv__async_cb_134,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb,__ZL28nsapi_dns_query_async_deletei__async_cb_93,__ZL28nsapi_dns_query_async_deletei__async_cb,__ZL28nsapi_dns_query_async_deletei__async_cb_90,__ZL28nsapi_dns_query_async_deletei__async_cb_91,__ZL28nsapi_dns_query_async_deletei__async_cb_92,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_87,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_85,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_86,__ZL26nsapi_dns_query_async_sendPv__async_cb,__ZL26nsapi_dns_query_async_sendPv__async_cb_70,__ZL26nsapi_dns_query_async_sendPv__async_cb_72,__ZL26nsapi_dns_query_async_sendPv__async_cb_63,__ZL26nsapi_dns_query_async_sendPv__async_cb_64,__ZL26nsapi_dns_query_async_sendPv__async_cb_65,__ZL26nsapi_dns_query_async_sendPv__async_cb_66,__ZL26nsapi_dns_query_async_sendPv__async_cb_69,__ZL26nsapi_dns_query_async_sendPv__async_cb_71
,__ZL26nsapi_dns_query_async_sendPv__async_cb_67,__ZL26nsapi_dns_query_async_sendPv__async_cb_68,__ZL26nsapi_dns_query_async_sendPv__async_cb_73,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_83,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_82,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_80,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_81,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_78,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_79,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_170,__ZL30nsapi_dns_query_async_responsePv__async_cb_169,__ZL30nsapi_dns_query_async_responsePv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_171,__ZL30nsapi_dns_query_async_responsePv__async_cb_172,__ZL30nsapi_dns_query_async_responsePv__async_cb_167,__ZL30nsapi_dns_query_async_responsePv__async_cb_168,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_5,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_1,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_2,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_3,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_4,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb,__Z28nsapi_dns_query_async_canceli__async_cb,__Z28nsapi_dns_query_async_canceli__async_cb_150,__Z28nsapi_dns_query_async_canceli__async_cb_151,_mbed_assert_internal__async_cb,_mbed_die__async_cb_108
,_mbed_die__async_cb_107,_mbed_die__async_cb_106,_mbed_die__async_cb_105,_mbed_die__async_cb_104,_mbed_die__async_cb_103,_mbed_die__async_cb_102,_mbed_die__async_cb_101,_mbed_die__async_cb_100,_mbed_die__async_cb_99,_mbed_die__async_cb_98,_mbed_die__async_cb_97,_mbed_die__async_cb_96,_mbed_die__async_cb_95,_mbed_die__async_cb_94,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_89,_mbed_error_vfprintf__async_cb_88,_serial_putc__async_cb_76,_serial_putc__async_cb,_invoke_ticker__async_cb_50,_invoke_ticker__async_cb,_wait_ms__async_cb,_main__async_cb_173,_main__async_cb,_main__async_cb_182,_main__async_cb_174,_main__async_cb_176,_main__async_cb_181
,_main__async_cb_175,_main__async_cb_180,_main__async_cb_178,_main__async_cb_179,_main__async_cb_177,__ZN9UDPSocketC2I17EthernetInterfaceEEPT___async_cb,__ZN9UDPSocketC2I17EthernetInterfaceEEPT___async_cb_163,_putc__async_cb_110,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_48,_fflush__async_cb_47,_fflush__async_cb_49,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_75,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_fputc__async_cb_113,_fputc__async_cb,_puts__async_cb,__Znwj__async_cb,__ZnwjRKSt9nothrow_t__async_cb,__Znaj__async_cb,__ZnajRKSt9nothrow_t__async_cb,__ZL25default_terminate_handlerv__async_cb
,__ZL25default_terminate_handlerv__async_cb_45,_abort_message__async_cb,_abort_message__async_cb_148,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_84,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_39,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_11,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_44,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_37,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_36,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_35,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_34,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_33,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b62,b63,b64
,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94
,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124
,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154
,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184
,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214
,b215,b216,b217];
var FUNCTION_TABLE_vii = [b219,__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE,__ZN12NetworkStack20get_call_in_callbackEv,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv];
var FUNCTION_TABLE_viii = [b221];
var FUNCTION_TABLE_viiii = [b223,__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b224,b225];
var FUNCTION_TABLE_viiiii = [b227,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b229,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];

  return { ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=ntp.js.map