// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0) { return window.MbedJSHal.network.get_mac_address(); },
 function($0) { return window.MbedJSHal.network.get_ip_address(); },
 function($0) { return window.MbedJSHal.network.get_netmask(); },
 function($0) { return window.MbedJSHal.network.socket_open($0); },
 function($0) { return window.MbedJSHal.network.socket_close($0); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_connect($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_send($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_recv($0, $1, $2); },
 function() { return Date.now(); },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 8624;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "ntp.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=STATICTOP; STATICTOP += 16;;
  
  var _daylight=STATICTOP; STATICTOP += 16;;
  
  var _timezone=STATICTOP; STATICTOP += 16;;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by getTimezoneOffset().
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((_timezone)>>2)]=(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }
  
  
  var ___tm_formatted=STATICTOP; STATICTOP += 48;;
  
  function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        // Attention: some regions don't have DST at all.
        HEAP32[(((tmPtr)+(32))>>2)]=Number(summerOffset != winterOffset && dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
  
      // asctime_r is specced to behave in an undefined manner if the algorithm would attempt
      // to write out more than 26 bytes (including the null terminator).
      // See http://pubs.opengroup.org/onlinepubs/9699919799/functions/asctime.html
      // Our undefined behavior is to truncate the write to at most 26 bytes, including null terminator.
      stringToUTF8(s, buf, 26);
      return buf;
    }function _ctime_r(time, buf) {
      var stack = stackSave();
      var rv = _asctime_r(_localtime_r(time, stackAlloc(44)), buf);
      stackRestore(stack);
      return rv;
    }function _ctime(timer) {
      return _ctime_r(timer, ___tm_current);
    }

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0"];
var debug_table_ii = ["0", "__ZN17EthernetInterface15get_mac_addressEv", "__ZN17EthernetInterface14get_ip_addressEv", "__ZN17EthernetInterface11get_netmaskEv", "__ZN17EthernetInterface11get_gatewayEv", "__ZN17EthernetInterface7connectEv", "__ZN17EthernetInterface10disconnectEv", "__ZNK16NetworkInterface21get_connection_statusEv", "__ZN16NetworkInterface12ethInterfaceEv", "__ZN16NetworkInterface13wifiInterfaceEv", "__ZN16NetworkInterface13meshInterfaceEv", "__ZN16NetworkInterface12cellularBaseEv", "__ZN16NetworkInterface13emacInterfaceEv", "__ZN17EthernetInterface9get_stackEv", "__ZThn4_N17EthernetInterface14get_ip_addressEv", "__ZN12NetworkStack19onboardNetworkStackEv", "__ZN9UDPSocket9get_protoEv", "___stdio_close", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16NetworkInterface26gethostbyname_async_cancelEi", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress", "__ZN17EthernetInterface8set_dhcpEb", "__ZN16NetworkInterface12set_blockingEb", "__ZN17EthernetInterface12socket_closeEPv", "__ZN12NetworkStack26gethostbyname_async_cancelEi", "__ZN12NetworkStack14add_dns_serverERK13SocketAddress", "__ZThn4_N17EthernetInterface12socket_closeEPv", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZN17EthernetInterface13socket_listenEPvi", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack14get_dns_serverEiP13SocketAddress", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface13socket_listenEPvi", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_do_read", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZN17EthernetInterface11set_networkEPKcS1_S1_", "__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZN17EthernetInterface11socket_sendEPvPKvj", "__ZN17EthernetInterface11socket_recvEPvS0_j", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j", "0", "0", "0", "0"];
var debug_table_iiiiii = ["0", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "__ZN12NetworkStack11setstackoptEiiPKvj", "__ZN12NetworkStack11getstackoptEiiPvPj", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "0"];
var debug_table_iiiiiii = ["0", "__ZN12NetworkStack10setsockoptEPviiPKvj", "__ZN12NetworkStack10getsockoptEPviiS0_Pj", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "__ZL25default_terminate_handlerv", "__ZL29nsapi_dns_query_async_timeoutv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN17EthernetInterfaceD2Ev", "__ZN17EthernetInterfaceD0Ev", "__ZThn4_N17EthernetInterfaceD1Ev", "__ZThn4_N17EthernetInterfaceD0Ev", "_mbed_trace_default_print", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv", "__ZN6SocketD2Ev", "__ZN6SocketD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv", "__ZN9UDPSocketD2Ev", "__ZN9UDPSocketD0Ev", "__ZN9UDPSocket5eventEv", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN17EthernetInterface15get_mac_addressEv__async_cb", "__ZN17EthernetInterface14get_ip_addressEv__async_cb", "__ZN17EthernetInterface11get_netmaskEv__async_cb", "__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb", "__ZN17EthernetInterface8set_dhcpEb__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_75", "__ZN17EthernetInterface12socket_closeEPv__async_cb", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_167", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_168", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_166", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_121", "__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_74", "__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_164", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_165", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_163", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_149", "_equeue_alloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_113", "_mbed_vtracef__async_cb_103", "_mbed_vtracef__async_cb_104", "_mbed_vtracef__async_cb_105", "_mbed_vtracef__async_cb_112", "_mbed_vtracef__async_cb_106", "_mbed_vtracef__async_cb_111", "_mbed_vtracef__async_cb_107", "_mbed_vtracef__async_cb_108", "_mbed_vtracef__async_cb_109", "_mbed_vtracef__async_cb_110", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_206", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_17", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_18", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_19", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_20", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_73", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_88", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_96", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_131", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_123", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_124", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_125", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_126", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_130", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_127", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_128", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_129", "__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_41", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_33", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_39", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_34", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_35", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_40", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_36", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_38", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_37", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_23", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_24", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_25", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_26", "__ZN6SocketD2Ev__async_cb", "__ZN6SocketD2Ev__async_cb_97", "__ZN6Socket4openEP12NetworkStack__async_cb", "__ZN6Socket4openEP12NetworkStack__async_cb_140", "__ZN6Socket4openEP12NetworkStack__async_cb_141", "__ZN6Socket4openEP12NetworkStack__async_cb_142", "__ZN6Socket4openEP12NetworkStack__async_cb_143", "__ZN4mbed8CallbackIFvvEE5thunkEPv", "__ZN6Socket4openEP12NetworkStack__async_cb_144", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_122", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb", "__ZN6Socket5closeEv__async_cb", "__ZN6Socket5closeEv__async_cb_184", "__ZN6Socket5closeEv__async_cb_185", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_16", "__ZN9UDPSocketD2Ev__async_cb_116", "__ZN9UDPSocketD2Ev__async_cb", "__ZN9UDPSocketD2Ev__async_cb_115", "__ZN9UDPSocketD0Ev__async_cb", "__ZN9UDPSocket5eventEv__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_32", "__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb", "__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_69", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_66", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_65", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_64", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_68", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_67", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_146", "__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_99", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_102", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_100", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_101", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_204", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_200", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_201", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_191", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_192", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_193", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_194", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_195", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_203", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_196", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_197", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_198", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_199", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_202", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_158", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_159", "__ZL29nsapi_dns_query_async_timeoutv__async_cb", "__ZL30nsapi_dns_query_async_responsePv", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_162", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_150", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_151", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_152", "__ZL26nsapi_dns_query_async_sendPv", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_161", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_153", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_154", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_155", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_160", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_156", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_157", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_173", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_169", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_170", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_172", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_171", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb", "__ZL28nsapi_dns_query_async_createPv", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_29", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_27", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_28", "__ZL28nsapi_dns_query_async_createPv__async_cb_52", "__ZL28nsapi_dns_query_async_createPv__async_cb_59", "__ZL28nsapi_dns_query_async_createPv__async_cb", "__ZL28nsapi_dns_query_async_createPv__async_cb_55", "__ZL28nsapi_dns_query_async_createPv__async_cb_57", "__ZL28nsapi_dns_query_async_createPv__async_cb_42", "__ZL28nsapi_dns_query_async_createPv__async_cb_43", "__ZL28nsapi_dns_query_async_createPv__async_cb_44", "__ZL28nsapi_dns_query_async_createPv__async_cb_45", "__ZL28nsapi_dns_query_async_createPv__async_cb_54", "__ZL28nsapi_dns_query_async_createPv__async_cb_56", "__ZL28nsapi_dns_query_async_createPv__async_cb_46", "__ZL28nsapi_dns_query_async_createPv__async_cb_47", "__ZL28nsapi_dns_query_async_createPv__async_cb_51", "__ZL28nsapi_dns_query_async_createPv__async_cb_48", "__ZL28nsapi_dns_query_async_createPv__async_cb_49", "__ZL37nsapi_dns_query_async_socket_callbackPv", "__ZL28nsapi_dns_query_async_createPv__async_cb_58", "__ZL28nsapi_dns_query_async_createPv__async_cb_50", "__ZL28nsapi_dns_query_async_createPv__async_cb_53", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb", "__ZL28nsapi_dns_query_async_deletei__async_cb_94", "__ZL28nsapi_dns_query_async_deletei__async_cb", "__ZL28nsapi_dns_query_async_deletei__async_cb_91", "__ZL28nsapi_dns_query_async_deletei__async_cb_92", "__ZL28nsapi_dns_query_async_deletei__async_cb_93", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_63", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_61", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_62", "__ZL26nsapi_dns_query_async_sendPv__async_cb", "__ZL26nsapi_dns_query_async_sendPv__async_cb_83", "__ZL26nsapi_dns_query_async_sendPv__async_cb_85", "__ZL26nsapi_dns_query_async_sendPv__async_cb_76", "__ZL26nsapi_dns_query_async_sendPv__async_cb_77", "__ZL26nsapi_dns_query_async_sendPv__async_cb_78", "__ZL26nsapi_dns_query_async_sendPv__async_cb_79", "__ZL26nsapi_dns_query_async_sendPv__async_cb_82", "__ZL26nsapi_dns_query_async_sendPv__async_cb_84", "__ZL26nsapi_dns_query_async_sendPv__async_cb_80", "__ZL26nsapi_dns_query_async_sendPv__async_cb_81", "__ZL26nsapi_dns_query_async_sendPv__async_cb_86", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_137", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_136", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_134", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_135", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_132", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_133", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_210", "__ZL30nsapi_dns_query_async_responsePv__async_cb_209", "__ZL30nsapi_dns_query_async_responsePv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_211", "__ZL30nsapi_dns_query_async_responsePv__async_cb_212", "__ZL30nsapi_dns_query_async_responsePv__async_cb_207", "__ZL30nsapi_dns_query_async_responsePv__async_cb_208", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_190", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_186", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_187", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_188", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_189", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb", "__Z28nsapi_dns_query_async_canceli__async_cb", "__Z28nsapi_dns_query_async_canceli__async_cb_21", "__Z28nsapi_dns_query_async_canceli__async_cb_22", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_15", "_mbed_die__async_cb_14", "_mbed_die__async_cb_13", "_mbed_die__async_cb_12", "_mbed_die__async_cb_11", "_mbed_die__async_cb_10", "_mbed_die__async_cb_9", "_mbed_die__async_cb_8", "_mbed_die__async_cb_7", "_mbed_die__async_cb_6", "_mbed_die__async_cb_5", "_mbed_die__async_cb_4", "_mbed_die__async_cb_3", "_mbed_die__async_cb_2", "_mbed_die__async_cb_1", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_90", "_mbed_error_vfprintf__async_cb_89", "_serial_putc__async_cb_147", "_serial_putc__async_cb", "_invoke_ticker__async_cb_145", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "_main__async_cb_174", "_main__async_cb", "_main__async_cb_183", "_main__async_cb_175", "_main__async_cb_177", "_main__async_cb_182", "_main__async_cb_176", "_main__async_cb_181", "_main__async_cb_179", "_main__async_cb_180", "_main__async_cb_178", "__ZN9UDPSocketC2I17EthernetInterfaceEEPT___async_cb", "__ZN9UDPSocketC2I17EthernetInterfaceEEPT___async_cb_205", "_putc__async_cb_95", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_71", "_fflush__async_cb_70", "_fflush__async_cb_72", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_60", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_fputc__async_cb_31", "_fputc__async_cb", "_puts__async_cb", "__Znwj__async_cb", "__ZnwjRKSt9nothrow_t__async_cb", "__Znaj__async_cb", "__ZnajRKSt9nothrow_t__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_138", "_abort_message__async_cb", "_abort_message__async_cb_87", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_30", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_148", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_98", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_139", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_120", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_119", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_118", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_117", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_114", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE", "__ZN12NetworkStack20get_call_in_callbackEv", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv"];
var debug_table_viii = ["0"];
var debug_table_viiii = ["0", "__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_asctime_r": _asctime_r, "_ctime": _ctime, "_ctime_r": _ctime_r, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_trap": _llvm_trap, "_localtime_r": _localtime_r, "_mktime": _mktime, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_tzset": _tzset, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _asctime_r=env._asctime_r;
  var _ctime=env._ctime;
  var _ctime_r=env._ctime_r;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_trap=env._llvm_trap;
  var _localtime_r=env._localtime_r;
  var _mktime=env._mktime;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var _tzset=env._tzset;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 61
 STACKTOP = STACKTOP + 16 | 0; //@line 62
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62
 $1 = sp; //@line 63
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 70
   $7 = $6 >>> 3; //@line 71
   $8 = HEAP32[1683] | 0; //@line 72
   $9 = $8 >>> $7; //@line 73
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 79
    $16 = 6772 + ($14 << 1 << 2) | 0; //@line 81
    $17 = $16 + 8 | 0; //@line 82
    $18 = HEAP32[$17 >> 2] | 0; //@line 83
    $19 = $18 + 8 | 0; //@line 84
    $20 = HEAP32[$19 >> 2] | 0; //@line 85
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[1683] = $8 & ~(1 << $14); //@line 92
     } else {
      if ((HEAP32[1687] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 97
      }
      $27 = $20 + 12 | 0; //@line 100
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 104
       HEAP32[$17 >> 2] = $20; //@line 105
       break;
      } else {
       _abort(); //@line 108
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 113
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 116
    $34 = $18 + $30 + 4 | 0; //@line 118
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 121
    $$0 = $19; //@line 122
    STACKTOP = sp; //@line 123
    return $$0 | 0; //@line 123
   }
   $37 = HEAP32[1685] | 0; //@line 125
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 131
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 134
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 137
     $49 = $47 >>> 12 & 16; //@line 139
     $50 = $47 >>> $49; //@line 140
     $52 = $50 >>> 5 & 8; //@line 142
     $54 = $50 >>> $52; //@line 144
     $56 = $54 >>> 2 & 4; //@line 146
     $58 = $54 >>> $56; //@line 148
     $60 = $58 >>> 1 & 2; //@line 150
     $62 = $58 >>> $60; //@line 152
     $64 = $62 >>> 1 & 1; //@line 154
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 157
     $69 = 6772 + ($67 << 1 << 2) | 0; //@line 159
     $70 = $69 + 8 | 0; //@line 160
     $71 = HEAP32[$70 >> 2] | 0; //@line 161
     $72 = $71 + 8 | 0; //@line 162
     $73 = HEAP32[$72 >> 2] | 0; //@line 163
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 169
       HEAP32[1683] = $77; //@line 170
       $98 = $77; //@line 171
      } else {
       if ((HEAP32[1687] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 176
       }
       $80 = $73 + 12 | 0; //@line 179
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 183
        HEAP32[$70 >> 2] = $73; //@line 184
        $98 = $8; //@line 185
        break;
       } else {
        _abort(); //@line 188
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 193
     $84 = $83 - $6 | 0; //@line 194
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 197
     $87 = $71 + $6 | 0; //@line 198
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 201
     HEAP32[$71 + $83 >> 2] = $84; //@line 203
     if ($37 | 0) {
      $92 = HEAP32[1688] | 0; //@line 206
      $93 = $37 >>> 3; //@line 207
      $95 = 6772 + ($93 << 1 << 2) | 0; //@line 209
      $96 = 1 << $93; //@line 210
      if (!($98 & $96)) {
       HEAP32[1683] = $98 | $96; //@line 215
       $$0199 = $95; //@line 217
       $$pre$phiZ2D = $95 + 8 | 0; //@line 217
      } else {
       $101 = $95 + 8 | 0; //@line 219
       $102 = HEAP32[$101 >> 2] | 0; //@line 220
       if ((HEAP32[1687] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 224
       } else {
        $$0199 = $102; //@line 227
        $$pre$phiZ2D = $101; //@line 227
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 230
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 232
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 234
      HEAP32[$92 + 12 >> 2] = $95; //@line 236
     }
     HEAP32[1685] = $84; //@line 238
     HEAP32[1688] = $87; //@line 239
     $$0 = $72; //@line 240
     STACKTOP = sp; //@line 241
     return $$0 | 0; //@line 241
    }
    $108 = HEAP32[1684] | 0; //@line 243
    if (!$108) {
     $$0197 = $6; //@line 246
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 250
     $114 = $112 >>> 12 & 16; //@line 252
     $115 = $112 >>> $114; //@line 253
     $117 = $115 >>> 5 & 8; //@line 255
     $119 = $115 >>> $117; //@line 257
     $121 = $119 >>> 2 & 4; //@line 259
     $123 = $119 >>> $121; //@line 261
     $125 = $123 >>> 1 & 2; //@line 263
     $127 = $123 >>> $125; //@line 265
     $129 = $127 >>> 1 & 1; //@line 267
     $134 = HEAP32[7036 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 272
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 276
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 282
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 285
      $$0193$lcssa$i = $138; //@line 285
     } else {
      $$01926$i = $134; //@line 287
      $$01935$i = $138; //@line 287
      $146 = $143; //@line 287
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 292
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 293
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 294
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 295
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 301
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 304
        $$0193$lcssa$i = $$$0193$i; //@line 304
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 307
        $$01935$i = $$$0193$i; //@line 307
       }
      }
     }
     $157 = HEAP32[1687] | 0; //@line 311
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 314
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 317
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 320
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 324
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 326
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 330
       $176 = HEAP32[$175 >> 2] | 0; //@line 331
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 334
        $179 = HEAP32[$178 >> 2] | 0; //@line 335
        if (!$179) {
         $$3$i = 0; //@line 338
         break;
        } else {
         $$1196$i = $179; //@line 341
         $$1198$i = $178; //@line 341
        }
       } else {
        $$1196$i = $176; //@line 344
        $$1198$i = $175; //@line 344
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 347
        $182 = HEAP32[$181 >> 2] | 0; //@line 348
        if ($182 | 0) {
         $$1196$i = $182; //@line 351
         $$1198$i = $181; //@line 351
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 354
        $185 = HEAP32[$184 >> 2] | 0; //@line 355
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 360
         $$1198$i = $184; //@line 360
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 365
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 368
        $$3$i = $$1196$i; //@line 369
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 374
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 377
       }
       $169 = $167 + 12 | 0; //@line 380
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 384
       }
       $172 = $164 + 8 | 0; //@line 387
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 391
        HEAP32[$172 >> 2] = $167; //@line 392
        $$3$i = $164; //@line 393
        break;
       } else {
        _abort(); //@line 396
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 405
       $191 = 7036 + ($190 << 2) | 0; //@line 406
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 411
         if (!$$3$i) {
          HEAP32[1684] = $108 & ~(1 << $190); //@line 417
          break L73;
         }
        } else {
         if ((HEAP32[1687] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 424
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 432
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[1687] | 0; //@line 442
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 445
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 449
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 451
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 457
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 461
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 463
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 469
       if ($214 | 0) {
        if ((HEAP32[1687] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 475
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 479
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 481
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 489
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 492
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 494
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 497
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 501
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 504
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 506
      if ($37 | 0) {
       $234 = HEAP32[1688] | 0; //@line 509
       $235 = $37 >>> 3; //@line 510
       $237 = 6772 + ($235 << 1 << 2) | 0; //@line 512
       $238 = 1 << $235; //@line 513
       if (!($8 & $238)) {
        HEAP32[1683] = $8 | $238; //@line 518
        $$0189$i = $237; //@line 520
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 520
       } else {
        $242 = $237 + 8 | 0; //@line 522
        $243 = HEAP32[$242 >> 2] | 0; //@line 523
        if ((HEAP32[1687] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 527
        } else {
         $$0189$i = $243; //@line 530
         $$pre$phi$iZ2D = $242; //@line 530
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 533
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 535
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 537
       HEAP32[$234 + 12 >> 2] = $237; //@line 539
      }
      HEAP32[1685] = $$0193$lcssa$i; //@line 541
      HEAP32[1688] = $159; //@line 542
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 545
     STACKTOP = sp; //@line 546
     return $$0 | 0; //@line 546
    }
   } else {
    $$0197 = $6; //@line 549
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 554
   } else {
    $251 = $0 + 11 | 0; //@line 556
    $252 = $251 & -8; //@line 557
    $253 = HEAP32[1684] | 0; //@line 558
    if (!$253) {
     $$0197 = $252; //@line 561
    } else {
     $255 = 0 - $252 | 0; //@line 563
     $256 = $251 >>> 8; //@line 564
     if (!$256) {
      $$0358$i = 0; //@line 567
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 571
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 575
       $262 = $256 << $261; //@line 576
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 579
       $267 = $262 << $265; //@line 581
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 584
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 589
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 595
      }
     }
     $282 = HEAP32[7036 + ($$0358$i << 2) >> 2] | 0; //@line 599
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 603
       $$3$i203 = 0; //@line 603
       $$3350$i = $255; //@line 603
       label = 81; //@line 604
      } else {
       $$0342$i = 0; //@line 611
       $$0347$i = $255; //@line 611
       $$0353$i = $282; //@line 611
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 611
       $$0362$i = 0; //@line 611
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 616
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 621
          $$435113$i = 0; //@line 621
          $$435712$i = $$0353$i; //@line 621
          label = 85; //@line 622
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 625
          $$1348$i = $292; //@line 625
         }
        } else {
         $$1343$i = $$0342$i; //@line 628
         $$1348$i = $$0347$i; //@line 628
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 631
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 634
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 638
        $302 = ($$0353$i | 0) == 0; //@line 639
        if ($302) {
         $$2355$i = $$1363$i; //@line 644
         $$3$i203 = $$1343$i; //@line 644
         $$3350$i = $$1348$i; //@line 644
         label = 81; //@line 645
         break;
        } else {
         $$0342$i = $$1343$i; //@line 648
         $$0347$i = $$1348$i; //@line 648
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 648
         $$0362$i = $$1363$i; //@line 648
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 658
       $309 = $253 & ($306 | 0 - $306); //@line 661
       if (!$309) {
        $$0197 = $252; //@line 664
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 669
       $315 = $313 >>> 12 & 16; //@line 671
       $316 = $313 >>> $315; //@line 672
       $318 = $316 >>> 5 & 8; //@line 674
       $320 = $316 >>> $318; //@line 676
       $322 = $320 >>> 2 & 4; //@line 678
       $324 = $320 >>> $322; //@line 680
       $326 = $324 >>> 1 & 2; //@line 682
       $328 = $324 >>> $326; //@line 684
       $330 = $328 >>> 1 & 1; //@line 686
       $$4$ph$i = 0; //@line 692
       $$4357$ph$i = HEAP32[7036 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 692
      } else {
       $$4$ph$i = $$3$i203; //@line 694
       $$4357$ph$i = $$2355$i; //@line 694
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 698
       $$4351$lcssa$i = $$3350$i; //@line 698
      } else {
       $$414$i = $$4$ph$i; //@line 700
       $$435113$i = $$3350$i; //@line 700
       $$435712$i = $$4357$ph$i; //@line 700
       label = 85; //@line 701
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 706
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 710
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 711
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 712
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 713
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 719
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 722
        $$4351$lcssa$i = $$$4351$i; //@line 722
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 725
        $$435113$i = $$$4351$i; //@line 725
        label = 85; //@line 726
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 732
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[1685] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[1687] | 0; //@line 738
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 741
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 744
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 747
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 751
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 753
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 757
         $371 = HEAP32[$370 >> 2] | 0; //@line 758
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 761
          $374 = HEAP32[$373 >> 2] | 0; //@line 762
          if (!$374) {
           $$3372$i = 0; //@line 765
           break;
          } else {
           $$1370$i = $374; //@line 768
           $$1374$i = $373; //@line 768
          }
         } else {
          $$1370$i = $371; //@line 771
          $$1374$i = $370; //@line 771
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 774
          $377 = HEAP32[$376 >> 2] | 0; //@line 775
          if ($377 | 0) {
           $$1370$i = $377; //@line 778
           $$1374$i = $376; //@line 778
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 781
          $380 = HEAP32[$379 >> 2] | 0; //@line 782
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 787
           $$1374$i = $379; //@line 787
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 792
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 795
          $$3372$i = $$1370$i; //@line 796
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 801
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 804
         }
         $364 = $362 + 12 | 0; //@line 807
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 811
         }
         $367 = $359 + 8 | 0; //@line 814
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 818
          HEAP32[$367 >> 2] = $362; //@line 819
          $$3372$i = $359; //@line 820
          break;
         } else {
          _abort(); //@line 823
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 831
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 834
         $386 = 7036 + ($385 << 2) | 0; //@line 835
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 840
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 845
            HEAP32[1684] = $391; //@line 846
            $475 = $391; //@line 847
            break L164;
           }
          } else {
           if ((HEAP32[1687] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 854
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 862
            if (!$$3372$i) {
             $475 = $253; //@line 865
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[1687] | 0; //@line 873
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 876
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 880
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 882
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 888
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 892
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 894
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 900
         if (!$409) {
          $475 = $253; //@line 903
         } else {
          if ((HEAP32[1687] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 908
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 912
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 914
           $475 = $253; //@line 915
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 924
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 927
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 929
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 932
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 936
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 939
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 941
         $428 = $$4351$lcssa$i >>> 3; //@line 942
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 6772 + ($428 << 1 << 2) | 0; //@line 946
          $432 = HEAP32[1683] | 0; //@line 947
          $433 = 1 << $428; //@line 948
          if (!($432 & $433)) {
           HEAP32[1683] = $432 | $433; //@line 953
           $$0368$i = $431; //@line 955
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 955
          } else {
           $437 = $431 + 8 | 0; //@line 957
           $438 = HEAP32[$437 >> 2] | 0; //@line 958
           if ((HEAP32[1687] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 962
           } else {
            $$0368$i = $438; //@line 965
            $$pre$phi$i211Z2D = $437; //@line 965
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 968
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 970
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 972
          HEAP32[$354 + 12 >> 2] = $431; //@line 974
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 977
         if (!$444) {
          $$0361$i = 0; //@line 980
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 984
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 988
           $450 = $444 << $449; //@line 989
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 992
           $455 = $450 << $453; //@line 994
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 997
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 1002
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 1008
          }
         }
         $469 = 7036 + ($$0361$i << 2) | 0; //@line 1011
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 1013
         $471 = $354 + 16 | 0; //@line 1014
         HEAP32[$471 + 4 >> 2] = 0; //@line 1016
         HEAP32[$471 >> 2] = 0; //@line 1017
         $473 = 1 << $$0361$i; //@line 1018
         if (!($475 & $473)) {
          HEAP32[1684] = $475 | $473; //@line 1023
          HEAP32[$469 >> 2] = $354; //@line 1024
          HEAP32[$354 + 24 >> 2] = $469; //@line 1026
          HEAP32[$354 + 12 >> 2] = $354; //@line 1028
          HEAP32[$354 + 8 >> 2] = $354; //@line 1030
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 1039
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 1039
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 1046
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 1050
          $494 = HEAP32[$492 >> 2] | 0; //@line 1052
          if (!$494) {
           label = 136; //@line 1055
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 1058
           $$0345$i = $494; //@line 1058
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[1687] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 1065
          } else {
           HEAP32[$492 >> 2] = $354; //@line 1068
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 1070
           HEAP32[$354 + 12 >> 2] = $354; //@line 1072
           HEAP32[$354 + 8 >> 2] = $354; //@line 1074
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 1079
          $502 = HEAP32[$501 >> 2] | 0; //@line 1080
          $503 = HEAP32[1687] | 0; //@line 1081
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 1087
           HEAP32[$501 >> 2] = $354; //@line 1088
           HEAP32[$354 + 8 >> 2] = $502; //@line 1090
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 1092
           HEAP32[$354 + 24 >> 2] = 0; //@line 1094
           break;
          } else {
           _abort(); //@line 1097
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 1104
       STACKTOP = sp; //@line 1105
       return $$0 | 0; //@line 1105
      } else {
       $$0197 = $252; //@line 1107
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[1685] | 0; //@line 1114
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 1117
  $515 = HEAP32[1688] | 0; //@line 1118
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 1121
   HEAP32[1688] = $517; //@line 1122
   HEAP32[1685] = $514; //@line 1123
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 1126
   HEAP32[$515 + $512 >> 2] = $514; //@line 1128
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 1131
  } else {
   HEAP32[1685] = 0; //@line 1133
   HEAP32[1688] = 0; //@line 1134
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 1137
   $526 = $515 + $512 + 4 | 0; //@line 1139
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 1142
  }
  $$0 = $515 + 8 | 0; //@line 1145
  STACKTOP = sp; //@line 1146
  return $$0 | 0; //@line 1146
 }
 $530 = HEAP32[1686] | 0; //@line 1148
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 1151
  HEAP32[1686] = $532; //@line 1152
  $533 = HEAP32[1689] | 0; //@line 1153
  $534 = $533 + $$0197 | 0; //@line 1154
  HEAP32[1689] = $534; //@line 1155
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 1158
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 1161
  $$0 = $533 + 8 | 0; //@line 1163
  STACKTOP = sp; //@line 1164
  return $$0 | 0; //@line 1164
 }
 if (!(HEAP32[1801] | 0)) {
  HEAP32[1803] = 4096; //@line 1169
  HEAP32[1802] = 4096; //@line 1170
  HEAP32[1804] = -1; //@line 1171
  HEAP32[1805] = -1; //@line 1172
  HEAP32[1806] = 0; //@line 1173
  HEAP32[1794] = 0; //@line 1174
  HEAP32[1801] = $1 & -16 ^ 1431655768; //@line 1178
  $548 = 4096; //@line 1179
 } else {
  $548 = HEAP32[1803] | 0; //@line 1182
 }
 $545 = $$0197 + 48 | 0; //@line 1184
 $546 = $$0197 + 47 | 0; //@line 1185
 $547 = $548 + $546 | 0; //@line 1186
 $549 = 0 - $548 | 0; //@line 1187
 $550 = $547 & $549; //@line 1188
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 1191
  STACKTOP = sp; //@line 1192
  return $$0 | 0; //@line 1192
 }
 $552 = HEAP32[1793] | 0; //@line 1194
 if ($552 | 0) {
  $554 = HEAP32[1791] | 0; //@line 1197
  $555 = $554 + $550 | 0; //@line 1198
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 1203
   STACKTOP = sp; //@line 1204
   return $$0 | 0; //@line 1204
  }
 }
 L244 : do {
  if (!(HEAP32[1794] & 4)) {
   $561 = HEAP32[1689] | 0; //@line 1212
   L246 : do {
    if (!$561) {
     label = 163; //@line 1216
    } else {
     $$0$i$i = 7180; //@line 1218
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 1220
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 1223
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 1232
      if (!$570) {
       label = 163; //@line 1235
       break L246;
      } else {
       $$0$i$i = $570; //@line 1238
      }
     }
     $595 = $547 - $530 & $549; //@line 1242
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 1245
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 1253
       } else {
        $$723947$i = $595; //@line 1255
        $$748$i = $597; //@line 1255
        label = 180; //@line 1256
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 1260
       $$2253$ph$i = $595; //@line 1260
       label = 171; //@line 1261
      }
     } else {
      $$2234243136$i = 0; //@line 1264
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 1270
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 1273
     } else {
      $574 = $572; //@line 1275
      $575 = HEAP32[1802] | 0; //@line 1276
      $576 = $575 + -1 | 0; //@line 1277
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 1285
      $584 = HEAP32[1791] | 0; //@line 1286
      $585 = $$$i + $584 | 0; //@line 1287
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[1793] | 0; //@line 1292
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 1299
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 1303
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 1306
        $$748$i = $572; //@line 1306
        label = 180; //@line 1307
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 1310
        $$2253$ph$i = $$$i; //@line 1310
        label = 171; //@line 1311
       }
      } else {
       $$2234243136$i = 0; //@line 1314
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 1321
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 1330
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 1333
       $$748$i = $$2247$ph$i; //@line 1333
       label = 180; //@line 1334
       break L244;
      }
     }
     $607 = HEAP32[1803] | 0; //@line 1338
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 1342
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 1345
      $$748$i = $$2247$ph$i; //@line 1345
      label = 180; //@line 1346
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 1352
      $$2234243136$i = 0; //@line 1353
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 1357
      $$748$i = $$2247$ph$i; //@line 1357
      label = 180; //@line 1358
      break L244;
     }
    }
   } while (0);
   HEAP32[1794] = HEAP32[1794] | 4; //@line 1365
   $$4236$i = $$2234243136$i; //@line 1366
   label = 178; //@line 1367
  } else {
   $$4236$i = 0; //@line 1369
   label = 178; //@line 1370
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 1376
   $621 = _sbrk(0) | 0; //@line 1377
   $627 = $621 - $620 | 0; //@line 1385
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 1387
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 1395
    $$748$i = $620; //@line 1395
    label = 180; //@line 1396
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[1791] | 0) + $$723947$i | 0; //@line 1402
  HEAP32[1791] = $633; //@line 1403
  if ($633 >>> 0 > (HEAP32[1792] | 0) >>> 0) {
   HEAP32[1792] = $633; //@line 1407
  }
  $636 = HEAP32[1689] | 0; //@line 1409
  do {
   if (!$636) {
    $638 = HEAP32[1687] | 0; //@line 1413
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[1687] = $$748$i; //@line 1418
    }
    HEAP32[1795] = $$748$i; //@line 1420
    HEAP32[1796] = $$723947$i; //@line 1421
    HEAP32[1798] = 0; //@line 1422
    HEAP32[1692] = HEAP32[1801]; //@line 1424
    HEAP32[1691] = -1; //@line 1425
    HEAP32[1696] = 6772; //@line 1426
    HEAP32[1695] = 6772; //@line 1427
    HEAP32[1698] = 6780; //@line 1428
    HEAP32[1697] = 6780; //@line 1429
    HEAP32[1700] = 6788; //@line 1430
    HEAP32[1699] = 6788; //@line 1431
    HEAP32[1702] = 6796; //@line 1432
    HEAP32[1701] = 6796; //@line 1433
    HEAP32[1704] = 6804; //@line 1434
    HEAP32[1703] = 6804; //@line 1435
    HEAP32[1706] = 6812; //@line 1436
    HEAP32[1705] = 6812; //@line 1437
    HEAP32[1708] = 6820; //@line 1438
    HEAP32[1707] = 6820; //@line 1439
    HEAP32[1710] = 6828; //@line 1440
    HEAP32[1709] = 6828; //@line 1441
    HEAP32[1712] = 6836; //@line 1442
    HEAP32[1711] = 6836; //@line 1443
    HEAP32[1714] = 6844; //@line 1444
    HEAP32[1713] = 6844; //@line 1445
    HEAP32[1716] = 6852; //@line 1446
    HEAP32[1715] = 6852; //@line 1447
    HEAP32[1718] = 6860; //@line 1448
    HEAP32[1717] = 6860; //@line 1449
    HEAP32[1720] = 6868; //@line 1450
    HEAP32[1719] = 6868; //@line 1451
    HEAP32[1722] = 6876; //@line 1452
    HEAP32[1721] = 6876; //@line 1453
    HEAP32[1724] = 6884; //@line 1454
    HEAP32[1723] = 6884; //@line 1455
    HEAP32[1726] = 6892; //@line 1456
    HEAP32[1725] = 6892; //@line 1457
    HEAP32[1728] = 6900; //@line 1458
    HEAP32[1727] = 6900; //@line 1459
    HEAP32[1730] = 6908; //@line 1460
    HEAP32[1729] = 6908; //@line 1461
    HEAP32[1732] = 6916; //@line 1462
    HEAP32[1731] = 6916; //@line 1463
    HEAP32[1734] = 6924; //@line 1464
    HEAP32[1733] = 6924; //@line 1465
    HEAP32[1736] = 6932; //@line 1466
    HEAP32[1735] = 6932; //@line 1467
    HEAP32[1738] = 6940; //@line 1468
    HEAP32[1737] = 6940; //@line 1469
    HEAP32[1740] = 6948; //@line 1470
    HEAP32[1739] = 6948; //@line 1471
    HEAP32[1742] = 6956; //@line 1472
    HEAP32[1741] = 6956; //@line 1473
    HEAP32[1744] = 6964; //@line 1474
    HEAP32[1743] = 6964; //@line 1475
    HEAP32[1746] = 6972; //@line 1476
    HEAP32[1745] = 6972; //@line 1477
    HEAP32[1748] = 6980; //@line 1478
    HEAP32[1747] = 6980; //@line 1479
    HEAP32[1750] = 6988; //@line 1480
    HEAP32[1749] = 6988; //@line 1481
    HEAP32[1752] = 6996; //@line 1482
    HEAP32[1751] = 6996; //@line 1483
    HEAP32[1754] = 7004; //@line 1484
    HEAP32[1753] = 7004; //@line 1485
    HEAP32[1756] = 7012; //@line 1486
    HEAP32[1755] = 7012; //@line 1487
    HEAP32[1758] = 7020; //@line 1488
    HEAP32[1757] = 7020; //@line 1489
    $642 = $$723947$i + -40 | 0; //@line 1490
    $644 = $$748$i + 8 | 0; //@line 1492
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 1497
    $650 = $$748$i + $649 | 0; //@line 1498
    $651 = $642 - $649 | 0; //@line 1499
    HEAP32[1689] = $650; //@line 1500
    HEAP32[1686] = $651; //@line 1501
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 1504
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 1507
    HEAP32[1690] = HEAP32[1805]; //@line 1509
   } else {
    $$024367$i = 7180; //@line 1511
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 1513
     $658 = $$024367$i + 4 | 0; //@line 1514
     $659 = HEAP32[$658 >> 2] | 0; //@line 1515
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 1519
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 1523
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 1528
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 1542
       $673 = (HEAP32[1686] | 0) + $$723947$i | 0; //@line 1544
       $675 = $636 + 8 | 0; //@line 1546
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 1551
       $681 = $636 + $680 | 0; //@line 1552
       $682 = $673 - $680 | 0; //@line 1553
       HEAP32[1689] = $681; //@line 1554
       HEAP32[1686] = $682; //@line 1555
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 1558
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 1561
       HEAP32[1690] = HEAP32[1805]; //@line 1563
       break;
      }
     }
    }
    $688 = HEAP32[1687] | 0; //@line 1568
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[1687] = $$748$i; //@line 1571
     $753 = $$748$i; //@line 1572
    } else {
     $753 = $688; //@line 1574
    }
    $690 = $$748$i + $$723947$i | 0; //@line 1576
    $$124466$i = 7180; //@line 1577
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 1582
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 1586
     if (!$694) {
      $$0$i$i$i = 7180; //@line 1589
      break;
     } else {
      $$124466$i = $694; //@line 1592
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 1601
      $700 = $$124466$i + 4 | 0; //@line 1602
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 1605
      $704 = $$748$i + 8 | 0; //@line 1607
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 1613
      $712 = $690 + 8 | 0; //@line 1615
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 1621
      $722 = $710 + $$0197 | 0; //@line 1625
      $723 = $718 - $710 - $$0197 | 0; //@line 1626
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 1629
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[1686] | 0) + $723 | 0; //@line 1634
        HEAP32[1686] = $728; //@line 1635
        HEAP32[1689] = $722; //@line 1636
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 1639
       } else {
        if ((HEAP32[1688] | 0) == ($718 | 0)) {
         $734 = (HEAP32[1685] | 0) + $723 | 0; //@line 1645
         HEAP32[1685] = $734; //@line 1646
         HEAP32[1688] = $722; //@line 1647
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 1650
         HEAP32[$722 + $734 >> 2] = $734; //@line 1652
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 1656
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 1660
         $743 = $739 >>> 3; //@line 1661
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 1666
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 1668
           $750 = 6772 + ($743 << 1 << 2) | 0; //@line 1670
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 1676
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 1685
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[1683] = HEAP32[1683] & ~(1 << $743); //@line 1695
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 1702
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 1706
             }
             $764 = $748 + 8 | 0; //@line 1709
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 1713
              break;
             }
             _abort(); //@line 1716
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 1721
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 1722
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 1725
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 1727
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 1731
             $783 = $782 + 4 | 0; //@line 1732
             $784 = HEAP32[$783 >> 2] | 0; //@line 1733
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 1736
              if (!$786) {
               $$3$i$i = 0; //@line 1739
               break;
              } else {
               $$1291$i$i = $786; //@line 1742
               $$1293$i$i = $782; //@line 1742
              }
             } else {
              $$1291$i$i = $784; //@line 1745
              $$1293$i$i = $783; //@line 1745
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 1748
              $789 = HEAP32[$788 >> 2] | 0; //@line 1749
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 1752
               $$1293$i$i = $788; //@line 1752
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 1755
              $792 = HEAP32[$791 >> 2] | 0; //@line 1756
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 1761
               $$1293$i$i = $791; //@line 1761
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 1766
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 1769
              $$3$i$i = $$1291$i$i; //@line 1770
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 1775
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 1778
             }
             $776 = $774 + 12 | 0; //@line 1781
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 1785
             }
             $779 = $771 + 8 | 0; //@line 1788
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 1792
              HEAP32[$779 >> 2] = $774; //@line 1793
              $$3$i$i = $771; //@line 1794
              break;
             } else {
              _abort(); //@line 1797
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 1807
           $798 = 7036 + ($797 << 2) | 0; //@line 1808
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 1813
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[1684] = HEAP32[1684] & ~(1 << $797); //@line 1822
             break L311;
            } else {
             if ((HEAP32[1687] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 1828
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 1836
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[1687] | 0; //@line 1846
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 1849
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 1853
           $815 = $718 + 16 | 0; //@line 1854
           $816 = HEAP32[$815 >> 2] | 0; //@line 1855
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 1861
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 1865
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 1867
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 1873
           if (!$822) {
            break;
           }
           if ((HEAP32[1687] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 1881
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 1885
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 1887
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 1894
         $$0287$i$i = $742 + $723 | 0; //@line 1894
        } else {
         $$0$i17$i = $718; //@line 1896
         $$0287$i$i = $723; //@line 1896
        }
        $830 = $$0$i17$i + 4 | 0; //@line 1898
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 1901
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 1904
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 1906
        $836 = $$0287$i$i >>> 3; //@line 1907
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 6772 + ($836 << 1 << 2) | 0; //@line 1911
         $840 = HEAP32[1683] | 0; //@line 1912
         $841 = 1 << $836; //@line 1913
         do {
          if (!($840 & $841)) {
           HEAP32[1683] = $840 | $841; //@line 1919
           $$0295$i$i = $839; //@line 1921
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 1921
          } else {
           $845 = $839 + 8 | 0; //@line 1923
           $846 = HEAP32[$845 >> 2] | 0; //@line 1924
           if ((HEAP32[1687] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 1928
            $$pre$phi$i19$iZ2D = $845; //@line 1928
            break;
           }
           _abort(); //@line 1931
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 1935
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 1937
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 1939
         HEAP32[$722 + 12 >> 2] = $839; //@line 1941
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 1944
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 1948
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 1952
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 1957
          $858 = $852 << $857; //@line 1958
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 1961
          $863 = $858 << $861; //@line 1963
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 1966
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 1971
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 1977
         }
        } while (0);
        $877 = 7036 + ($$0296$i$i << 2) | 0; //@line 1980
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 1982
        $879 = $722 + 16 | 0; //@line 1983
        HEAP32[$879 + 4 >> 2] = 0; //@line 1985
        HEAP32[$879 >> 2] = 0; //@line 1986
        $881 = HEAP32[1684] | 0; //@line 1987
        $882 = 1 << $$0296$i$i; //@line 1988
        if (!($881 & $882)) {
         HEAP32[1684] = $881 | $882; //@line 1993
         HEAP32[$877 >> 2] = $722; //@line 1994
         HEAP32[$722 + 24 >> 2] = $877; //@line 1996
         HEAP32[$722 + 12 >> 2] = $722; //@line 1998
         HEAP32[$722 + 8 >> 2] = $722; //@line 2000
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 2009
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 2009
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 2016
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 2020
         $902 = HEAP32[$900 >> 2] | 0; //@line 2022
         if (!$902) {
          label = 260; //@line 2025
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 2028
          $$0289$i$i = $902; //@line 2028
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[1687] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 2035
         } else {
          HEAP32[$900 >> 2] = $722; //@line 2038
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 2040
          HEAP32[$722 + 12 >> 2] = $722; //@line 2042
          HEAP32[$722 + 8 >> 2] = $722; //@line 2044
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 2049
         $910 = HEAP32[$909 >> 2] | 0; //@line 2050
         $911 = HEAP32[1687] | 0; //@line 2051
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 2057
          HEAP32[$909 >> 2] = $722; //@line 2058
          HEAP32[$722 + 8 >> 2] = $910; //@line 2060
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 2062
          HEAP32[$722 + 24 >> 2] = 0; //@line 2064
          break;
         } else {
          _abort(); //@line 2067
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 2074
      STACKTOP = sp; //@line 2075
      return $$0 | 0; //@line 2075
     } else {
      $$0$i$i$i = 7180; //@line 2077
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 2081
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 2086
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 2094
    }
    $927 = $923 + -47 | 0; //@line 2096
    $929 = $927 + 8 | 0; //@line 2098
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 2104
    $936 = $636 + 16 | 0; //@line 2105
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 2107
    $939 = $938 + 8 | 0; //@line 2108
    $940 = $938 + 24 | 0; //@line 2109
    $941 = $$723947$i + -40 | 0; //@line 2110
    $943 = $$748$i + 8 | 0; //@line 2112
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 2117
    $949 = $$748$i + $948 | 0; //@line 2118
    $950 = $941 - $948 | 0; //@line 2119
    HEAP32[1689] = $949; //@line 2120
    HEAP32[1686] = $950; //@line 2121
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 2124
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 2127
    HEAP32[1690] = HEAP32[1805]; //@line 2129
    $956 = $938 + 4 | 0; //@line 2130
    HEAP32[$956 >> 2] = 27; //@line 2131
    HEAP32[$939 >> 2] = HEAP32[1795]; //@line 2132
    HEAP32[$939 + 4 >> 2] = HEAP32[1796]; //@line 2132
    HEAP32[$939 + 8 >> 2] = HEAP32[1797]; //@line 2132
    HEAP32[$939 + 12 >> 2] = HEAP32[1798]; //@line 2132
    HEAP32[1795] = $$748$i; //@line 2133
    HEAP32[1796] = $$723947$i; //@line 2134
    HEAP32[1798] = 0; //@line 2135
    HEAP32[1797] = $939; //@line 2136
    $958 = $940; //@line 2137
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 2139
     HEAP32[$958 >> 2] = 7; //@line 2140
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 2153
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 2156
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 2159
     HEAP32[$938 >> 2] = $964; //@line 2160
     $969 = $964 >>> 3; //@line 2161
     if ($964 >>> 0 < 256) {
      $972 = 6772 + ($969 << 1 << 2) | 0; //@line 2165
      $973 = HEAP32[1683] | 0; //@line 2166
      $974 = 1 << $969; //@line 2167
      if (!($973 & $974)) {
       HEAP32[1683] = $973 | $974; //@line 2172
       $$0211$i$i = $972; //@line 2174
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 2174
      } else {
       $978 = $972 + 8 | 0; //@line 2176
       $979 = HEAP32[$978 >> 2] | 0; //@line 2177
       if ((HEAP32[1687] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 2181
       } else {
        $$0211$i$i = $979; //@line 2184
        $$pre$phi$i$iZ2D = $978; //@line 2184
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 2187
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 2189
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 2191
      HEAP32[$636 + 12 >> 2] = $972; //@line 2193
      break;
     }
     $985 = $964 >>> 8; //@line 2196
     if (!$985) {
      $$0212$i$i = 0; //@line 2199
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 2203
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 2207
       $991 = $985 << $990; //@line 2208
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 2211
       $996 = $991 << $994; //@line 2213
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 2216
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 2221
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 2227
      }
     }
     $1010 = 7036 + ($$0212$i$i << 2) | 0; //@line 2230
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 2232
     HEAP32[$636 + 20 >> 2] = 0; //@line 2234
     HEAP32[$936 >> 2] = 0; //@line 2235
     $1013 = HEAP32[1684] | 0; //@line 2236
     $1014 = 1 << $$0212$i$i; //@line 2237
     if (!($1013 & $1014)) {
      HEAP32[1684] = $1013 | $1014; //@line 2242
      HEAP32[$1010 >> 2] = $636; //@line 2243
      HEAP32[$636 + 24 >> 2] = $1010; //@line 2245
      HEAP32[$636 + 12 >> 2] = $636; //@line 2247
      HEAP32[$636 + 8 >> 2] = $636; //@line 2249
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 2258
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 2258
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 2265
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 2269
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 2271
      if (!$1034) {
       label = 286; //@line 2274
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 2277
       $$0207$i$i = $1034; //@line 2277
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[1687] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 2284
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 2287
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 2289
       HEAP32[$636 + 12 >> 2] = $636; //@line 2291
       HEAP32[$636 + 8 >> 2] = $636; //@line 2293
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 2298
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 2299
      $1043 = HEAP32[1687] | 0; //@line 2300
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 2306
       HEAP32[$1041 >> 2] = $636; //@line 2307
       HEAP32[$636 + 8 >> 2] = $1042; //@line 2309
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 2311
       HEAP32[$636 + 24 >> 2] = 0; //@line 2313
       break;
      } else {
       _abort(); //@line 2316
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[1686] | 0; //@line 2323
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 2326
   HEAP32[1686] = $1054; //@line 2327
   $1055 = HEAP32[1689] | 0; //@line 2328
   $1056 = $1055 + $$0197 | 0; //@line 2329
   HEAP32[1689] = $1056; //@line 2330
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 2333
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 2336
   $$0 = $1055 + 8 | 0; //@line 2338
   STACKTOP = sp; //@line 2339
   return $$0 | 0; //@line 2339
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 2343
 $$0 = 0; //@line 2344
 STACKTOP = sp; //@line 2345
 return $$0 | 0; //@line 2345
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_162($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $214 = 0, $215 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $286 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 10995
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10997
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10999
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11001
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11003
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11005
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11007
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11009
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11011
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11013
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11015
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11017
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11019
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11021
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11023
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11025
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11027
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11029
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11031
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11033
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 11035
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 11037
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 11039
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 11041
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 11043
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 11045
 $150 = HEAP32[$32 >> 2] | 0; //@line 11046
 if ($150 | 0) {
  $153 = HEAP32[$150 + 8 >> 2] | 0; //@line 11050
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(104) | 0; //@line 11051
  FUNCTION_TABLE_vi[$153 & 511]($42); //@line 11052
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 177; //@line 11055
   $154 = $ReallocAsyncCtx2 + 4 | 0; //@line 11056
   HEAP32[$154 >> 2] = $2; //@line 11057
   $155 = $ReallocAsyncCtx2 + 8 | 0; //@line 11058
   HEAP32[$155 >> 2] = $4; //@line 11059
   $156 = $ReallocAsyncCtx2 + 12 | 0; //@line 11060
   HEAP32[$156 >> 2] = $6; //@line 11061
   $157 = $ReallocAsyncCtx2 + 16 | 0; //@line 11062
   HEAP32[$157 >> 2] = $8; //@line 11063
   $158 = $ReallocAsyncCtx2 + 20 | 0; //@line 11064
   HEAP32[$158 >> 2] = $10; //@line 11065
   $159 = $ReallocAsyncCtx2 + 24 | 0; //@line 11066
   HEAP32[$159 >> 2] = $12; //@line 11067
   $160 = $ReallocAsyncCtx2 + 28 | 0; //@line 11068
   HEAP32[$160 >> 2] = $14; //@line 11069
   $161 = $ReallocAsyncCtx2 + 32 | 0; //@line 11070
   HEAP32[$161 >> 2] = $16; //@line 11071
   $162 = $ReallocAsyncCtx2 + 36 | 0; //@line 11072
   HEAP32[$162 >> 2] = $18; //@line 11073
   $163 = $ReallocAsyncCtx2 + 40 | 0; //@line 11074
   HEAP32[$163 >> 2] = $22; //@line 11075
   $164 = $ReallocAsyncCtx2 + 44 | 0; //@line 11076
   HEAP32[$164 >> 2] = $50; //@line 11077
   $165 = $ReallocAsyncCtx2 + 48 | 0; //@line 11078
   HEAP32[$165 >> 2] = $24; //@line 11079
   $166 = $ReallocAsyncCtx2 + 52 | 0; //@line 11080
   HEAP32[$166 >> 2] = $26; //@line 11081
   $167 = $ReallocAsyncCtx2 + 56 | 0; //@line 11082
   HEAP32[$167 >> 2] = $28; //@line 11083
   $168 = $ReallocAsyncCtx2 + 60 | 0; //@line 11084
   HEAP32[$168 >> 2] = $30; //@line 11085
   $169 = $ReallocAsyncCtx2 + 64 | 0; //@line 11086
   HEAP32[$169 >> 2] = $32; //@line 11087
   $170 = $ReallocAsyncCtx2 + 68 | 0; //@line 11088
   HEAP32[$170 >> 2] = $34; //@line 11089
   $171 = $ReallocAsyncCtx2 + 72 | 0; //@line 11090
   HEAP32[$171 >> 2] = $36; //@line 11091
   $172 = $ReallocAsyncCtx2 + 76 | 0; //@line 11092
   HEAP32[$172 >> 2] = $38; //@line 11093
   $173 = $ReallocAsyncCtx2 + 80 | 0; //@line 11094
   HEAP32[$173 >> 2] = $20; //@line 11095
   $174 = $ReallocAsyncCtx2 + 84 | 0; //@line 11096
   HEAP32[$174 >> 2] = $40; //@line 11097
   $175 = $ReallocAsyncCtx2 + 88 | 0; //@line 11098
   HEAP32[$175 >> 2] = $42; //@line 11099
   $176 = $ReallocAsyncCtx2 + 92 | 0; //@line 11100
   HEAP32[$176 >> 2] = $44; //@line 11101
   $177 = $ReallocAsyncCtx2 + 96 | 0; //@line 11102
   HEAP32[$177 >> 2] = $46; //@line 11103
   $178 = $ReallocAsyncCtx2 + 100 | 0; //@line 11104
   HEAP32[$178 >> 2] = $48; //@line 11105
   sp = STACKTOP; //@line 11106
   return;
  }
  ___async_unwind = 0; //@line 11109
  HEAP32[$ReallocAsyncCtx2 >> 2] = 177; //@line 11110
  $154 = $ReallocAsyncCtx2 + 4 | 0; //@line 11111
  HEAP32[$154 >> 2] = $2; //@line 11112
  $155 = $ReallocAsyncCtx2 + 8 | 0; //@line 11113
  HEAP32[$155 >> 2] = $4; //@line 11114
  $156 = $ReallocAsyncCtx2 + 12 | 0; //@line 11115
  HEAP32[$156 >> 2] = $6; //@line 11116
  $157 = $ReallocAsyncCtx2 + 16 | 0; //@line 11117
  HEAP32[$157 >> 2] = $8; //@line 11118
  $158 = $ReallocAsyncCtx2 + 20 | 0; //@line 11119
  HEAP32[$158 >> 2] = $10; //@line 11120
  $159 = $ReallocAsyncCtx2 + 24 | 0; //@line 11121
  HEAP32[$159 >> 2] = $12; //@line 11122
  $160 = $ReallocAsyncCtx2 + 28 | 0; //@line 11123
  HEAP32[$160 >> 2] = $14; //@line 11124
  $161 = $ReallocAsyncCtx2 + 32 | 0; //@line 11125
  HEAP32[$161 >> 2] = $16; //@line 11126
  $162 = $ReallocAsyncCtx2 + 36 | 0; //@line 11127
  HEAP32[$162 >> 2] = $18; //@line 11128
  $163 = $ReallocAsyncCtx2 + 40 | 0; //@line 11129
  HEAP32[$163 >> 2] = $22; //@line 11130
  $164 = $ReallocAsyncCtx2 + 44 | 0; //@line 11131
  HEAP32[$164 >> 2] = $50; //@line 11132
  $165 = $ReallocAsyncCtx2 + 48 | 0; //@line 11133
  HEAP32[$165 >> 2] = $24; //@line 11134
  $166 = $ReallocAsyncCtx2 + 52 | 0; //@line 11135
  HEAP32[$166 >> 2] = $26; //@line 11136
  $167 = $ReallocAsyncCtx2 + 56 | 0; //@line 11137
  HEAP32[$167 >> 2] = $28; //@line 11138
  $168 = $ReallocAsyncCtx2 + 60 | 0; //@line 11139
  HEAP32[$168 >> 2] = $30; //@line 11140
  $169 = $ReallocAsyncCtx2 + 64 | 0; //@line 11141
  HEAP32[$169 >> 2] = $32; //@line 11142
  $170 = $ReallocAsyncCtx2 + 68 | 0; //@line 11143
  HEAP32[$170 >> 2] = $34; //@line 11144
  $171 = $ReallocAsyncCtx2 + 72 | 0; //@line 11145
  HEAP32[$171 >> 2] = $36; //@line 11146
  $172 = $ReallocAsyncCtx2 + 76 | 0; //@line 11147
  HEAP32[$172 >> 2] = $38; //@line 11148
  $173 = $ReallocAsyncCtx2 + 80 | 0; //@line 11149
  HEAP32[$173 >> 2] = $20; //@line 11150
  $174 = $ReallocAsyncCtx2 + 84 | 0; //@line 11151
  HEAP32[$174 >> 2] = $40; //@line 11152
  $175 = $ReallocAsyncCtx2 + 88 | 0; //@line 11153
  HEAP32[$175 >> 2] = $42; //@line 11154
  $176 = $ReallocAsyncCtx2 + 92 | 0; //@line 11155
  HEAP32[$176 >> 2] = $44; //@line 11156
  $177 = $ReallocAsyncCtx2 + 96 | 0; //@line 11157
  HEAP32[$177 >> 2] = $46; //@line 11158
  $178 = $ReallocAsyncCtx2 + 100 | 0; //@line 11159
  HEAP32[$178 >> 2] = $48; //@line 11160
  sp = STACKTOP; //@line 11161
  return;
 }
 $179 = HEAP32[$44 >> 2] | 0; //@line 11164
 if (!$179) {
  $$02972$reg2mem$0 = $48; //@line 11167
  $$03071$reg2mem$0 = $46; //@line 11167
  $$reg2mem$0 = $50; //@line 11167
 } else {
  $182 = HEAP32[$179 + 8 >> 2] | 0; //@line 11170
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 11171
  FUNCTION_TABLE_vi[$182 & 511]($40); //@line 11172
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 178; //@line 11175
   $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 11176
   HEAP32[$183 >> 2] = $2; //@line 11177
   $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 11178
   HEAP32[$184 >> 2] = $4; //@line 11179
   $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 11180
   HEAP32[$185 >> 2] = $6; //@line 11181
   $186 = $ReallocAsyncCtx3 + 16 | 0; //@line 11182
   HEAP32[$186 >> 2] = $8; //@line 11183
   $187 = $ReallocAsyncCtx3 + 20 | 0; //@line 11184
   HEAP32[$187 >> 2] = $10; //@line 11185
   $188 = $ReallocAsyncCtx3 + 24 | 0; //@line 11186
   HEAP32[$188 >> 2] = $12; //@line 11187
   $189 = $ReallocAsyncCtx3 + 28 | 0; //@line 11188
   HEAP32[$189 >> 2] = $14; //@line 11189
   $190 = $ReallocAsyncCtx3 + 32 | 0; //@line 11190
   HEAP32[$190 >> 2] = $16; //@line 11191
   $191 = $ReallocAsyncCtx3 + 36 | 0; //@line 11192
   HEAP32[$191 >> 2] = $18; //@line 11193
   $192 = $ReallocAsyncCtx3 + 40 | 0; //@line 11194
   HEAP32[$192 >> 2] = $22; //@line 11195
   $193 = $ReallocAsyncCtx3 + 44 | 0; //@line 11196
   HEAP32[$193 >> 2] = $50; //@line 11197
   $194 = $ReallocAsyncCtx3 + 48 | 0; //@line 11198
   HEAP32[$194 >> 2] = $24; //@line 11199
   $195 = $ReallocAsyncCtx3 + 52 | 0; //@line 11200
   HEAP32[$195 >> 2] = $26; //@line 11201
   $196 = $ReallocAsyncCtx3 + 56 | 0; //@line 11202
   HEAP32[$196 >> 2] = $28; //@line 11203
   $197 = $ReallocAsyncCtx3 + 60 | 0; //@line 11204
   HEAP32[$197 >> 2] = $30; //@line 11205
   $198 = $ReallocAsyncCtx3 + 64 | 0; //@line 11206
   HEAP32[$198 >> 2] = $32; //@line 11207
   $199 = $ReallocAsyncCtx3 + 68 | 0; //@line 11208
   HEAP32[$199 >> 2] = $34; //@line 11209
   $200 = $ReallocAsyncCtx3 + 72 | 0; //@line 11210
   HEAP32[$200 >> 2] = $36; //@line 11211
   $201 = $ReallocAsyncCtx3 + 76 | 0; //@line 11212
   HEAP32[$201 >> 2] = $38; //@line 11213
   $202 = $ReallocAsyncCtx3 + 80 | 0; //@line 11214
   HEAP32[$202 >> 2] = $20; //@line 11215
   $203 = $ReallocAsyncCtx3 + 84 | 0; //@line 11216
   HEAP32[$203 >> 2] = $40; //@line 11217
   $204 = $ReallocAsyncCtx3 + 88 | 0; //@line 11218
   HEAP32[$204 >> 2] = $42; //@line 11219
   $205 = $ReallocAsyncCtx3 + 92 | 0; //@line 11220
   HEAP32[$205 >> 2] = $44; //@line 11221
   $206 = $ReallocAsyncCtx3 + 96 | 0; //@line 11222
   HEAP32[$206 >> 2] = $46; //@line 11223
   $207 = $ReallocAsyncCtx3 + 100 | 0; //@line 11224
   HEAP32[$207 >> 2] = $48; //@line 11225
   sp = STACKTOP; //@line 11226
   return;
  }
  ___async_unwind = 0; //@line 11229
  HEAP32[$ReallocAsyncCtx3 >> 2] = 178; //@line 11230
  $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 11231
  HEAP32[$183 >> 2] = $2; //@line 11232
  $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 11233
  HEAP32[$184 >> 2] = $4; //@line 11234
  $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 11235
  HEAP32[$185 >> 2] = $6; //@line 11236
  $186 = $ReallocAsyncCtx3 + 16 | 0; //@line 11237
  HEAP32[$186 >> 2] = $8; //@line 11238
  $187 = $ReallocAsyncCtx3 + 20 | 0; //@line 11239
  HEAP32[$187 >> 2] = $10; //@line 11240
  $188 = $ReallocAsyncCtx3 + 24 | 0; //@line 11241
  HEAP32[$188 >> 2] = $12; //@line 11242
  $189 = $ReallocAsyncCtx3 + 28 | 0; //@line 11243
  HEAP32[$189 >> 2] = $14; //@line 11244
  $190 = $ReallocAsyncCtx3 + 32 | 0; //@line 11245
  HEAP32[$190 >> 2] = $16; //@line 11246
  $191 = $ReallocAsyncCtx3 + 36 | 0; //@line 11247
  HEAP32[$191 >> 2] = $18; //@line 11248
  $192 = $ReallocAsyncCtx3 + 40 | 0; //@line 11249
  HEAP32[$192 >> 2] = $22; //@line 11250
  $193 = $ReallocAsyncCtx3 + 44 | 0; //@line 11251
  HEAP32[$193 >> 2] = $50; //@line 11252
  $194 = $ReallocAsyncCtx3 + 48 | 0; //@line 11253
  HEAP32[$194 >> 2] = $24; //@line 11254
  $195 = $ReallocAsyncCtx3 + 52 | 0; //@line 11255
  HEAP32[$195 >> 2] = $26; //@line 11256
  $196 = $ReallocAsyncCtx3 + 56 | 0; //@line 11257
  HEAP32[$196 >> 2] = $28; //@line 11258
  $197 = $ReallocAsyncCtx3 + 60 | 0; //@line 11259
  HEAP32[$197 >> 2] = $30; //@line 11260
  $198 = $ReallocAsyncCtx3 + 64 | 0; //@line 11261
  HEAP32[$198 >> 2] = $32; //@line 11262
  $199 = $ReallocAsyncCtx3 + 68 | 0; //@line 11263
  HEAP32[$199 >> 2] = $34; //@line 11264
  $200 = $ReallocAsyncCtx3 + 72 | 0; //@line 11265
  HEAP32[$200 >> 2] = $36; //@line 11266
  $201 = $ReallocAsyncCtx3 + 76 | 0; //@line 11267
  HEAP32[$201 >> 2] = $38; //@line 11268
  $202 = $ReallocAsyncCtx3 + 80 | 0; //@line 11269
  HEAP32[$202 >> 2] = $20; //@line 11270
  $203 = $ReallocAsyncCtx3 + 84 | 0; //@line 11271
  HEAP32[$203 >> 2] = $40; //@line 11272
  $204 = $ReallocAsyncCtx3 + 88 | 0; //@line 11273
  HEAP32[$204 >> 2] = $42; //@line 11274
  $205 = $ReallocAsyncCtx3 + 92 | 0; //@line 11275
  HEAP32[$205 >> 2] = $44; //@line 11276
  $206 = $ReallocAsyncCtx3 + 96 | 0; //@line 11277
  HEAP32[$206 >> 2] = $46; //@line 11278
  $207 = $ReallocAsyncCtx3 + 100 | 0; //@line 11279
  HEAP32[$207 >> 2] = $48; //@line 11280
  sp = STACKTOP; //@line 11281
  return;
 }
 L15 : while (1) {
  $208 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 11285
  $209 = $208 + 76 | 0; //@line 11286
  $210 = HEAP32[$209 >> 2] | 0; //@line 11287
  if ($210 | 0) {
   if ($210 >>> 0 <= 100) {
    label = 29; //@line 11292
    break;
   }
   HEAP32[$209 >> 2] = $210 + -100; //@line 11296
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 11301
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 11301
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 11303
   $$131 = $$03071$reg2mem$0; //@line 11303
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 11306
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 11309
    break L15;
   }
   $52 = 6700 + ($$02972$reg2mem$1 << 2) | 0; //@line 11312
   $54 = HEAP32[$52 >> 2] | 0; //@line 11313
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 11325
   break;
  }
  $84 = $54 + 72 | 0; //@line 11328
  $85 = HEAP32[$84 >> 2] | 0; //@line 11329
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 11333
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 11334
   $$03071$reg2mem$0 = $$131; //@line 11334
   $$reg2mem$0 = $52; //@line 11334
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 11341
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 11344
    $$03071$reg2mem$0 = $$131; //@line 11344
    $$reg2mem$0 = $52; //@line 11344
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7580] = 0; //@line 11352
   return;
  }
  $275 = $$131 + 44 | 0; //@line 11355
  $276 = HEAP32[$275 >> 2] | 0; //@line 11356
  if (!$276) {
   $284 = $20 + 12 | 0; //@line 11359
   HEAP32[$284 >> 2] = 0; //@line 11360
   $286 = $38 + 4 | 0; //@line 11362
   HEAP32[$286 >> 2] = 0; //@line 11364
   HEAP32[$286 + 4 >> 2] = 0; //@line 11367
   HEAP32[$38 >> 2] = 3; //@line 11368
   $290 = $38 + 12 | 0; //@line 11369
   HEAP32[$290 >> 2] = 712; //@line 11370
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 11371
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 100, $38) | 0; //@line 11372
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 11375
    $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 11376
    HEAP32[$291 >> 2] = $290; //@line 11377
    $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 11378
    HEAP32[$292 >> 2] = $284; //@line 11379
    $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 11380
    HEAP32[$293 >> 2] = $38; //@line 11381
    $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 11382
    HEAP32[$294 >> 2] = $20; //@line 11383
    sp = STACKTOP; //@line 11384
    return;
   }
   ___async_unwind = 0; //@line 11387
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 11388
   $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 11389
   HEAP32[$291 >> 2] = $290; //@line 11390
   $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 11391
   HEAP32[$292 >> 2] = $284; //@line 11392
   $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 11393
   HEAP32[$293 >> 2] = $38; //@line 11394
   $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 11395
   HEAP32[$294 >> 2] = $20; //@line 11396
   sp = STACKTOP; //@line 11397
   return;
  } else {
   $280 = HEAP32[$276 + 4 >> 2] | 0; //@line 11402
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 11403
   FUNCTION_TABLE_vii[$280 & 7]($20, $$131 + 32 | 0); //@line 11404
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 11407
    $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 11408
    HEAP32[$281 >> 2] = $275; //@line 11409
    $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 11410
    HEAP32[$282 >> 2] = $20; //@line 11411
    $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 11412
    HEAP32[$283 >> 2] = $38; //@line 11413
    sp = STACKTOP; //@line 11414
    return;
   }
   ___async_unwind = 0; //@line 11417
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 11418
   $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 11419
   HEAP32[$281 >> 2] = $275; //@line 11420
   $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 11421
   HEAP32[$282 >> 2] = $20; //@line 11422
   $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 11423
   HEAP32[$283 >> 2] = $38; //@line 11424
   sp = STACKTOP; //@line 11425
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 11430
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 11431
  __ZL28nsapi_dns_query_async_deletei($59); //@line 11432
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 11435
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 11436
   HEAP32[$60 >> 2] = $2; //@line 11437
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 11438
   HEAP32[$61 >> 2] = $4; //@line 11439
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 11440
   HEAP32[$62 >> 2] = $6; //@line 11441
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 11442
   HEAP32[$63 >> 2] = $8; //@line 11443
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 11444
   HEAP32[$64 >> 2] = $10; //@line 11445
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 11446
   HEAP32[$65 >> 2] = $12; //@line 11447
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 11448
   HEAP32[$66 >> 2] = $14; //@line 11449
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 11450
   HEAP32[$67 >> 2] = $16; //@line 11451
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 11452
   HEAP32[$68 >> 2] = $18; //@line 11453
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 11454
   HEAP32[$69 >> 2] = $20; //@line 11455
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 11456
   HEAP32[$70 >> 2] = $22; //@line 11457
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 11458
   HEAP32[$71 >> 2] = $24; //@line 11459
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 11460
   HEAP32[$72 >> 2] = $26; //@line 11461
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 11462
   HEAP32[$73 >> 2] = $28; //@line 11463
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 11464
   HEAP32[$74 >> 2] = $30; //@line 11465
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 11466
   HEAP32[$75 >> 2] = $32; //@line 11467
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 11468
   HEAP32[$76 >> 2] = $34; //@line 11469
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 11470
   HEAP32[$77 >> 2] = $36; //@line 11471
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 11472
   HEAP32[$78 >> 2] = $38; //@line 11473
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 11474
   HEAP32[$79 >> 2] = $40; //@line 11475
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 11476
   HEAP32[$80 >> 2] = $42; //@line 11477
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 11478
   HEAP32[$81 >> 2] = $44; //@line 11479
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 11480
   HEAP32[$82 >> 2] = $$131; //@line 11481
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 11482
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 11483
   sp = STACKTOP; //@line 11484
   return;
  }
  ___async_unwind = 0; //@line 11487
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 11488
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 11489
  HEAP32[$60 >> 2] = $2; //@line 11490
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 11491
  HEAP32[$61 >> 2] = $4; //@line 11492
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 11493
  HEAP32[$62 >> 2] = $6; //@line 11494
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 11495
  HEAP32[$63 >> 2] = $8; //@line 11496
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 11497
  HEAP32[$64 >> 2] = $10; //@line 11498
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 11499
  HEAP32[$65 >> 2] = $12; //@line 11500
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 11501
  HEAP32[$66 >> 2] = $14; //@line 11502
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 11503
  HEAP32[$67 >> 2] = $16; //@line 11504
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 11505
  HEAP32[$68 >> 2] = $18; //@line 11506
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 11507
  HEAP32[$69 >> 2] = $20; //@line 11508
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 11509
  HEAP32[$70 >> 2] = $22; //@line 11510
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 11511
  HEAP32[$71 >> 2] = $24; //@line 11512
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 11513
  HEAP32[$72 >> 2] = $26; //@line 11514
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 11515
  HEAP32[$73 >> 2] = $28; //@line 11516
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 11517
  HEAP32[$74 >> 2] = $30; //@line 11518
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 11519
  HEAP32[$75 >> 2] = $32; //@line 11520
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 11521
  HEAP32[$76 >> 2] = $34; //@line 11522
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 11523
  HEAP32[$77 >> 2] = $36; //@line 11524
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 11525
  HEAP32[$78 >> 2] = $38; //@line 11526
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 11527
  HEAP32[$79 >> 2] = $40; //@line 11528
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 11529
  HEAP32[$80 >> 2] = $42; //@line 11530
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 11531
  HEAP32[$81 >> 2] = $44; //@line 11532
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 11533
  HEAP32[$82 >> 2] = $$131; //@line 11534
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 11535
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 11536
  sp = STACKTOP; //@line 11537
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 11542
  $92 = $54 + 44 | 0; //@line 11543
  $93 = HEAP32[$92 >> 2] | 0; //@line 11544
  if (!$93) {
   HEAP32[$24 >> 2] = 0; //@line 11547
   $124 = HEAP32[$54 >> 2] | 0; //@line 11548
   HEAP32[$26 >> 2] = 0; //@line 11549
   HEAP32[$28 >> 2] = 175; //@line 11550
   HEAP32[$30 >> 2] = $124; //@line 11551
   HEAP32[$32 >> 2] = 724; //@line 11552
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 11553
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($34, 0, $36) | 0; //@line 11554
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 11557
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 11558
    HEAP32[$125 >> 2] = $2; //@line 11559
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 11560
    HEAP32[$126 >> 2] = $4; //@line 11561
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 11562
    HEAP32[$127 >> 2] = $6; //@line 11563
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 11564
    HEAP32[$128 >> 2] = $8; //@line 11565
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 11566
    HEAP32[$129 >> 2] = $10; //@line 11567
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 11568
    HEAP32[$130 >> 2] = $12; //@line 11569
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 11570
    HEAP32[$131 >> 2] = $14; //@line 11571
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 11572
    HEAP32[$132 >> 2] = $16; //@line 11573
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 11574
    HEAP32[$133 >> 2] = $18; //@line 11575
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 11576
    HEAP32[$134 >> 2] = $20; //@line 11577
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 11578
    HEAP32[$135 >> 2] = $22; //@line 11579
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 11580
    HEAP32[$136 >> 2] = $24; //@line 11581
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 11582
    HEAP32[$137 >> 2] = $26; //@line 11583
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 11584
    HEAP32[$138 >> 2] = $28; //@line 11585
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 11586
    HEAP32[$139 >> 2] = $30; //@line 11587
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 11588
    HEAP32[$140 >> 2] = $32; //@line 11589
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 11590
    HEAP32[$141 >> 2] = $34; //@line 11591
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 11592
    HEAP32[$142 >> 2] = $36; //@line 11593
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 11594
    HEAP32[$143 >> 2] = $38; //@line 11595
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 11596
    HEAP32[$144 >> 2] = $40; //@line 11597
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 11598
    HEAP32[$145 >> 2] = $42; //@line 11599
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 11600
    HEAP32[$146 >> 2] = $44; //@line 11601
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 11602
    HEAP32[$147 >> 2] = $$131; //@line 11603
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 11604
    HEAP32[$148 >> 2] = $$02972$reg2mem$1; //@line 11605
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 11606
    HEAP32[$149 >> 2] = $52; //@line 11607
    sp = STACKTOP; //@line 11608
    return;
   }
   ___async_unwind = 0; //@line 11611
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 11612
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 11613
   HEAP32[$125 >> 2] = $2; //@line 11614
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 11615
   HEAP32[$126 >> 2] = $4; //@line 11616
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 11617
   HEAP32[$127 >> 2] = $6; //@line 11618
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 11619
   HEAP32[$128 >> 2] = $8; //@line 11620
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 11621
   HEAP32[$129 >> 2] = $10; //@line 11622
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 11623
   HEAP32[$130 >> 2] = $12; //@line 11624
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 11625
   HEAP32[$131 >> 2] = $14; //@line 11626
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 11627
   HEAP32[$132 >> 2] = $16; //@line 11628
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 11629
   HEAP32[$133 >> 2] = $18; //@line 11630
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 11631
   HEAP32[$134 >> 2] = $20; //@line 11632
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 11633
   HEAP32[$135 >> 2] = $22; //@line 11634
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 11635
   HEAP32[$136 >> 2] = $24; //@line 11636
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 11637
   HEAP32[$137 >> 2] = $26; //@line 11638
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 11639
   HEAP32[$138 >> 2] = $28; //@line 11640
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 11641
   HEAP32[$139 >> 2] = $30; //@line 11642
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 11643
   HEAP32[$140 >> 2] = $32; //@line 11644
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 11645
   HEAP32[$141 >> 2] = $34; //@line 11646
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 11647
   HEAP32[$142 >> 2] = $36; //@line 11648
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 11649
   HEAP32[$143 >> 2] = $38; //@line 11650
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 11651
   HEAP32[$144 >> 2] = $40; //@line 11652
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 11653
   HEAP32[$145 >> 2] = $42; //@line 11654
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 11655
   HEAP32[$146 >> 2] = $44; //@line 11656
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 11657
   HEAP32[$147 >> 2] = $$131; //@line 11658
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 11659
   HEAP32[$148 >> 2] = $$02972$reg2mem$1; //@line 11660
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 11661
   HEAP32[$149 >> 2] = $52; //@line 11662
   sp = STACKTOP; //@line 11663
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 11668
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 11669
   FUNCTION_TABLE_vii[$97 & 7]($40, $54 + 32 | 0); //@line 11670
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 11673
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 11674
    HEAP32[$98 >> 2] = $2; //@line 11675
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 11676
    HEAP32[$99 >> 2] = $4; //@line 11677
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 11678
    HEAP32[$100 >> 2] = $6; //@line 11679
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 11680
    HEAP32[$101 >> 2] = $8; //@line 11681
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 11682
    HEAP32[$102 >> 2] = $10; //@line 11683
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 11684
    HEAP32[$103 >> 2] = $12; //@line 11685
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 11686
    HEAP32[$104 >> 2] = $14; //@line 11687
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 11688
    HEAP32[$105 >> 2] = $16; //@line 11689
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 11690
    HEAP32[$106 >> 2] = $18; //@line 11691
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 11692
    HEAP32[$107 >> 2] = $22; //@line 11693
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 11694
    HEAP32[$108 >> 2] = $52; //@line 11695
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 11696
    HEAP32[$109 >> 2] = $24; //@line 11697
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 11698
    HEAP32[$110 >> 2] = $26; //@line 11699
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 11700
    HEAP32[$111 >> 2] = $28; //@line 11701
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 11702
    HEAP32[$112 >> 2] = $30; //@line 11703
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 11704
    HEAP32[$113 >> 2] = $32; //@line 11705
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 11706
    HEAP32[$114 >> 2] = $34; //@line 11707
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 11708
    HEAP32[$115 >> 2] = $36; //@line 11709
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 11710
    HEAP32[$116 >> 2] = $38; //@line 11711
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 11712
    HEAP32[$117 >> 2] = $20; //@line 11713
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 11714
    HEAP32[$118 >> 2] = $40; //@line 11715
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 11716
    HEAP32[$119 >> 2] = $42; //@line 11717
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 11718
    HEAP32[$120 >> 2] = $44; //@line 11719
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 11720
    HEAP32[$121 >> 2] = $$131; //@line 11721
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 11722
    HEAP32[$122 >> 2] = $92; //@line 11723
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 11724
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 11725
    sp = STACKTOP; //@line 11726
    return;
   }
   ___async_unwind = 0; //@line 11729
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 11730
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 11731
   HEAP32[$98 >> 2] = $2; //@line 11732
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 11733
   HEAP32[$99 >> 2] = $4; //@line 11734
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 11735
   HEAP32[$100 >> 2] = $6; //@line 11736
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 11737
   HEAP32[$101 >> 2] = $8; //@line 11738
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 11739
   HEAP32[$102 >> 2] = $10; //@line 11740
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 11741
   HEAP32[$103 >> 2] = $12; //@line 11742
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 11743
   HEAP32[$104 >> 2] = $14; //@line 11744
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 11745
   HEAP32[$105 >> 2] = $16; //@line 11746
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 11747
   HEAP32[$106 >> 2] = $18; //@line 11748
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 11749
   HEAP32[$107 >> 2] = $22; //@line 11750
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 11751
   HEAP32[$108 >> 2] = $52; //@line 11752
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 11753
   HEAP32[$109 >> 2] = $24; //@line 11754
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 11755
   HEAP32[$110 >> 2] = $26; //@line 11756
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 11757
   HEAP32[$111 >> 2] = $28; //@line 11758
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 11759
   HEAP32[$112 >> 2] = $30; //@line 11760
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 11761
   HEAP32[$113 >> 2] = $32; //@line 11762
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 11763
   HEAP32[$114 >> 2] = $34; //@line 11764
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 11765
   HEAP32[$115 >> 2] = $36; //@line 11766
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 11767
   HEAP32[$116 >> 2] = $38; //@line 11768
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 11769
   HEAP32[$117 >> 2] = $20; //@line 11770
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 11771
   HEAP32[$118 >> 2] = $40; //@line 11772
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 11773
   HEAP32[$119 >> 2] = $42; //@line 11774
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 11775
   HEAP32[$120 >> 2] = $44; //@line 11776
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 11777
   HEAP32[$121 >> 2] = $$131; //@line 11778
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 11779
   HEAP32[$122 >> 2] = $92; //@line 11780
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 11781
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 11782
   sp = STACKTOP; //@line 11783
   return;
  }
 } else if ((label | 0) == 29) {
  HEAP32[$209 >> 2] = 0; //@line 11788
  $214 = $208 + 44 | 0; //@line 11789
  $215 = HEAP32[$214 >> 2] | 0; //@line 11790
  if (!$215) {
   HEAP32[$6 >> 2] = 0; //@line 11793
   $246 = HEAP32[$208 >> 2] | 0; //@line 11794
   HEAP32[$8 >> 2] = 0; //@line 11795
   HEAP32[$10 >> 2] = 180; //@line 11796
   HEAP32[$12 >> 2] = $246; //@line 11797
   HEAP32[$14 >> 2] = 724; //@line 11798
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 11799
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 0, $18) | 0; //@line 11800
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 11803
    $247 = $ReallocAsyncCtx13 + 4 | 0; //@line 11804
    HEAP32[$247 >> 2] = $2; //@line 11805
    $248 = $ReallocAsyncCtx13 + 8 | 0; //@line 11806
    HEAP32[$248 >> 2] = $4; //@line 11807
    $249 = $ReallocAsyncCtx13 + 12 | 0; //@line 11808
    HEAP32[$249 >> 2] = $6; //@line 11809
    $250 = $ReallocAsyncCtx13 + 16 | 0; //@line 11810
    HEAP32[$250 >> 2] = $8; //@line 11811
    $251 = $ReallocAsyncCtx13 + 20 | 0; //@line 11812
    HEAP32[$251 >> 2] = $10; //@line 11813
    $252 = $ReallocAsyncCtx13 + 24 | 0; //@line 11814
    HEAP32[$252 >> 2] = $12; //@line 11815
    $253 = $ReallocAsyncCtx13 + 28 | 0; //@line 11816
    HEAP32[$253 >> 2] = $14; //@line 11817
    $254 = $ReallocAsyncCtx13 + 32 | 0; //@line 11818
    HEAP32[$254 >> 2] = $16; //@line 11819
    $255 = $ReallocAsyncCtx13 + 36 | 0; //@line 11820
    HEAP32[$255 >> 2] = $18; //@line 11821
    $256 = $ReallocAsyncCtx13 + 40 | 0; //@line 11822
    HEAP32[$256 >> 2] = $20; //@line 11823
    $257 = $ReallocAsyncCtx13 + 44 | 0; //@line 11824
    HEAP32[$257 >> 2] = $22; //@line 11825
    $258 = $ReallocAsyncCtx13 + 48 | 0; //@line 11826
    HEAP32[$258 >> 2] = $24; //@line 11827
    $259 = $ReallocAsyncCtx13 + 52 | 0; //@line 11828
    HEAP32[$259 >> 2] = $26; //@line 11829
    $260 = $ReallocAsyncCtx13 + 56 | 0; //@line 11830
    HEAP32[$260 >> 2] = $28; //@line 11831
    $261 = $ReallocAsyncCtx13 + 60 | 0; //@line 11832
    HEAP32[$261 >> 2] = $30; //@line 11833
    $262 = $ReallocAsyncCtx13 + 64 | 0; //@line 11834
    HEAP32[$262 >> 2] = $32; //@line 11835
    $263 = $ReallocAsyncCtx13 + 68 | 0; //@line 11836
    HEAP32[$263 >> 2] = $34; //@line 11837
    $264 = $ReallocAsyncCtx13 + 72 | 0; //@line 11838
    HEAP32[$264 >> 2] = $36; //@line 11839
    $265 = $ReallocAsyncCtx13 + 76 | 0; //@line 11840
    HEAP32[$265 >> 2] = $38; //@line 11841
    $266 = $ReallocAsyncCtx13 + 80 | 0; //@line 11842
    HEAP32[$266 >> 2] = $40; //@line 11843
    $267 = $ReallocAsyncCtx13 + 84 | 0; //@line 11844
    HEAP32[$267 >> 2] = $42; //@line 11845
    $268 = $ReallocAsyncCtx13 + 88 | 0; //@line 11846
    HEAP32[$268 >> 2] = $44; //@line 11847
    $269 = $ReallocAsyncCtx13 + 92 | 0; //@line 11848
    HEAP32[$269 >> 2] = $$03071$reg2mem$0; //@line 11849
    $270 = $ReallocAsyncCtx13 + 96 | 0; //@line 11850
    HEAP32[$270 >> 2] = $$02972$reg2mem$0; //@line 11851
    $271 = $ReallocAsyncCtx13 + 100 | 0; //@line 11852
    HEAP32[$271 >> 2] = $$reg2mem$0; //@line 11853
    sp = STACKTOP; //@line 11854
    return;
   }
   ___async_unwind = 0; //@line 11857
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 11858
   $247 = $ReallocAsyncCtx13 + 4 | 0; //@line 11859
   HEAP32[$247 >> 2] = $2; //@line 11860
   $248 = $ReallocAsyncCtx13 + 8 | 0; //@line 11861
   HEAP32[$248 >> 2] = $4; //@line 11862
   $249 = $ReallocAsyncCtx13 + 12 | 0; //@line 11863
   HEAP32[$249 >> 2] = $6; //@line 11864
   $250 = $ReallocAsyncCtx13 + 16 | 0; //@line 11865
   HEAP32[$250 >> 2] = $8; //@line 11866
   $251 = $ReallocAsyncCtx13 + 20 | 0; //@line 11867
   HEAP32[$251 >> 2] = $10; //@line 11868
   $252 = $ReallocAsyncCtx13 + 24 | 0; //@line 11869
   HEAP32[$252 >> 2] = $12; //@line 11870
   $253 = $ReallocAsyncCtx13 + 28 | 0; //@line 11871
   HEAP32[$253 >> 2] = $14; //@line 11872
   $254 = $ReallocAsyncCtx13 + 32 | 0; //@line 11873
   HEAP32[$254 >> 2] = $16; //@line 11874
   $255 = $ReallocAsyncCtx13 + 36 | 0; //@line 11875
   HEAP32[$255 >> 2] = $18; //@line 11876
   $256 = $ReallocAsyncCtx13 + 40 | 0; //@line 11877
   HEAP32[$256 >> 2] = $20; //@line 11878
   $257 = $ReallocAsyncCtx13 + 44 | 0; //@line 11879
   HEAP32[$257 >> 2] = $22; //@line 11880
   $258 = $ReallocAsyncCtx13 + 48 | 0; //@line 11881
   HEAP32[$258 >> 2] = $24; //@line 11882
   $259 = $ReallocAsyncCtx13 + 52 | 0; //@line 11883
   HEAP32[$259 >> 2] = $26; //@line 11884
   $260 = $ReallocAsyncCtx13 + 56 | 0; //@line 11885
   HEAP32[$260 >> 2] = $28; //@line 11886
   $261 = $ReallocAsyncCtx13 + 60 | 0; //@line 11887
   HEAP32[$261 >> 2] = $30; //@line 11888
   $262 = $ReallocAsyncCtx13 + 64 | 0; //@line 11889
   HEAP32[$262 >> 2] = $32; //@line 11890
   $263 = $ReallocAsyncCtx13 + 68 | 0; //@line 11891
   HEAP32[$263 >> 2] = $34; //@line 11892
   $264 = $ReallocAsyncCtx13 + 72 | 0; //@line 11893
   HEAP32[$264 >> 2] = $36; //@line 11894
   $265 = $ReallocAsyncCtx13 + 76 | 0; //@line 11895
   HEAP32[$265 >> 2] = $38; //@line 11896
   $266 = $ReallocAsyncCtx13 + 80 | 0; //@line 11897
   HEAP32[$266 >> 2] = $40; //@line 11898
   $267 = $ReallocAsyncCtx13 + 84 | 0; //@line 11899
   HEAP32[$267 >> 2] = $42; //@line 11900
   $268 = $ReallocAsyncCtx13 + 88 | 0; //@line 11901
   HEAP32[$268 >> 2] = $44; //@line 11902
   $269 = $ReallocAsyncCtx13 + 92 | 0; //@line 11903
   HEAP32[$269 >> 2] = $$03071$reg2mem$0; //@line 11904
   $270 = $ReallocAsyncCtx13 + 96 | 0; //@line 11905
   HEAP32[$270 >> 2] = $$02972$reg2mem$0; //@line 11906
   $271 = $ReallocAsyncCtx13 + 100 | 0; //@line 11907
   HEAP32[$271 >> 2] = $$reg2mem$0; //@line 11908
   sp = STACKTOP; //@line 11909
   return;
  } else {
   $219 = HEAP32[$215 + 4 >> 2] | 0; //@line 11914
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 11915
   FUNCTION_TABLE_vii[$219 & 7]($4, $208 + 32 | 0); //@line 11916
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 11919
    $220 = $ReallocAsyncCtx4 + 4 | 0; //@line 11920
    HEAP32[$220 >> 2] = $2; //@line 11921
    $221 = $ReallocAsyncCtx4 + 8 | 0; //@line 11922
    HEAP32[$221 >> 2] = $4; //@line 11923
    $222 = $ReallocAsyncCtx4 + 12 | 0; //@line 11924
    HEAP32[$222 >> 2] = $6; //@line 11925
    $223 = $ReallocAsyncCtx4 + 16 | 0; //@line 11926
    HEAP32[$223 >> 2] = $8; //@line 11927
    $224 = $ReallocAsyncCtx4 + 20 | 0; //@line 11928
    HEAP32[$224 >> 2] = $10; //@line 11929
    $225 = $ReallocAsyncCtx4 + 24 | 0; //@line 11930
    HEAP32[$225 >> 2] = $12; //@line 11931
    $226 = $ReallocAsyncCtx4 + 28 | 0; //@line 11932
    HEAP32[$226 >> 2] = $14; //@line 11933
    $227 = $ReallocAsyncCtx4 + 32 | 0; //@line 11934
    HEAP32[$227 >> 2] = $16; //@line 11935
    $228 = $ReallocAsyncCtx4 + 36 | 0; //@line 11936
    HEAP32[$228 >> 2] = $18; //@line 11937
    $229 = $ReallocAsyncCtx4 + 40 | 0; //@line 11938
    HEAP32[$229 >> 2] = $22; //@line 11939
    $230 = $ReallocAsyncCtx4 + 44 | 0; //@line 11940
    HEAP32[$230 >> 2] = $214; //@line 11941
    $231 = $ReallocAsyncCtx4 + 48 | 0; //@line 11942
    HEAP32[$231 >> 2] = $$reg2mem$0; //@line 11943
    $232 = $ReallocAsyncCtx4 + 52 | 0; //@line 11944
    HEAP32[$232 >> 2] = $24; //@line 11945
    $233 = $ReallocAsyncCtx4 + 56 | 0; //@line 11946
    HEAP32[$233 >> 2] = $26; //@line 11947
    $234 = $ReallocAsyncCtx4 + 60 | 0; //@line 11948
    HEAP32[$234 >> 2] = $28; //@line 11949
    $235 = $ReallocAsyncCtx4 + 64 | 0; //@line 11950
    HEAP32[$235 >> 2] = $30; //@line 11951
    $236 = $ReallocAsyncCtx4 + 68 | 0; //@line 11952
    HEAP32[$236 >> 2] = $32; //@line 11953
    $237 = $ReallocAsyncCtx4 + 72 | 0; //@line 11954
    HEAP32[$237 >> 2] = $34; //@line 11955
    $238 = $ReallocAsyncCtx4 + 76 | 0; //@line 11956
    HEAP32[$238 >> 2] = $36; //@line 11957
    $239 = $ReallocAsyncCtx4 + 80 | 0; //@line 11958
    HEAP32[$239 >> 2] = $38; //@line 11959
    $240 = $ReallocAsyncCtx4 + 84 | 0; //@line 11960
    HEAP32[$240 >> 2] = $20; //@line 11961
    $241 = $ReallocAsyncCtx4 + 88 | 0; //@line 11962
    HEAP32[$241 >> 2] = $40; //@line 11963
    $242 = $ReallocAsyncCtx4 + 92 | 0; //@line 11964
    HEAP32[$242 >> 2] = $42; //@line 11965
    $243 = $ReallocAsyncCtx4 + 96 | 0; //@line 11966
    HEAP32[$243 >> 2] = $44; //@line 11967
    $244 = $ReallocAsyncCtx4 + 100 | 0; //@line 11968
    HEAP32[$244 >> 2] = $$03071$reg2mem$0; //@line 11969
    $245 = $ReallocAsyncCtx4 + 104 | 0; //@line 11970
    HEAP32[$245 >> 2] = $$02972$reg2mem$0; //@line 11971
    sp = STACKTOP; //@line 11972
    return;
   }
   ___async_unwind = 0; //@line 11975
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 11976
   $220 = $ReallocAsyncCtx4 + 4 | 0; //@line 11977
   HEAP32[$220 >> 2] = $2; //@line 11978
   $221 = $ReallocAsyncCtx4 + 8 | 0; //@line 11979
   HEAP32[$221 >> 2] = $4; //@line 11980
   $222 = $ReallocAsyncCtx4 + 12 | 0; //@line 11981
   HEAP32[$222 >> 2] = $6; //@line 11982
   $223 = $ReallocAsyncCtx4 + 16 | 0; //@line 11983
   HEAP32[$223 >> 2] = $8; //@line 11984
   $224 = $ReallocAsyncCtx4 + 20 | 0; //@line 11985
   HEAP32[$224 >> 2] = $10; //@line 11986
   $225 = $ReallocAsyncCtx4 + 24 | 0; //@line 11987
   HEAP32[$225 >> 2] = $12; //@line 11988
   $226 = $ReallocAsyncCtx4 + 28 | 0; //@line 11989
   HEAP32[$226 >> 2] = $14; //@line 11990
   $227 = $ReallocAsyncCtx4 + 32 | 0; //@line 11991
   HEAP32[$227 >> 2] = $16; //@line 11992
   $228 = $ReallocAsyncCtx4 + 36 | 0; //@line 11993
   HEAP32[$228 >> 2] = $18; //@line 11994
   $229 = $ReallocAsyncCtx4 + 40 | 0; //@line 11995
   HEAP32[$229 >> 2] = $22; //@line 11996
   $230 = $ReallocAsyncCtx4 + 44 | 0; //@line 11997
   HEAP32[$230 >> 2] = $214; //@line 11998
   $231 = $ReallocAsyncCtx4 + 48 | 0; //@line 11999
   HEAP32[$231 >> 2] = $$reg2mem$0; //@line 12000
   $232 = $ReallocAsyncCtx4 + 52 | 0; //@line 12001
   HEAP32[$232 >> 2] = $24; //@line 12002
   $233 = $ReallocAsyncCtx4 + 56 | 0; //@line 12003
   HEAP32[$233 >> 2] = $26; //@line 12004
   $234 = $ReallocAsyncCtx4 + 60 | 0; //@line 12005
   HEAP32[$234 >> 2] = $28; //@line 12006
   $235 = $ReallocAsyncCtx4 + 64 | 0; //@line 12007
   HEAP32[$235 >> 2] = $30; //@line 12008
   $236 = $ReallocAsyncCtx4 + 68 | 0; //@line 12009
   HEAP32[$236 >> 2] = $32; //@line 12010
   $237 = $ReallocAsyncCtx4 + 72 | 0; //@line 12011
   HEAP32[$237 >> 2] = $34; //@line 12012
   $238 = $ReallocAsyncCtx4 + 76 | 0; //@line 12013
   HEAP32[$238 >> 2] = $36; //@line 12014
   $239 = $ReallocAsyncCtx4 + 80 | 0; //@line 12015
   HEAP32[$239 >> 2] = $38; //@line 12016
   $240 = $ReallocAsyncCtx4 + 84 | 0; //@line 12017
   HEAP32[$240 >> 2] = $20; //@line 12018
   $241 = $ReallocAsyncCtx4 + 88 | 0; //@line 12019
   HEAP32[$241 >> 2] = $40; //@line 12020
   $242 = $ReallocAsyncCtx4 + 92 | 0; //@line 12021
   HEAP32[$242 >> 2] = $42; //@line 12022
   $243 = $ReallocAsyncCtx4 + 96 | 0; //@line 12023
   HEAP32[$243 >> 2] = $44; //@line 12024
   $244 = $ReallocAsyncCtx4 + 100 | 0; //@line 12025
   HEAP32[$244 >> 2] = $$03071$reg2mem$0; //@line 12026
   $245 = $ReallocAsyncCtx4 + 104 | 0; //@line 12027
   HEAP32[$245 >> 2] = $$02972$reg2mem$0; //@line 12028
   sp = STACKTOP; //@line 12029
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_161($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $286 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 9940
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9942
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9944
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9946
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9948
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9950
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9952
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9954
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9956
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9958
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9960
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9962
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9964
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9966
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9968
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9970
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9972
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9974
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9976
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9978
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9980
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9982
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9984
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 9986
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 9988
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 9990
 $214 = HEAP32[$14 >> 2] | 0; //@line 9991
 if ($214 | 0) {
  $217 = HEAP32[$214 + 8 >> 2] | 0; //@line 9995
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(104) | 0; //@line 9996
  FUNCTION_TABLE_vi[$217 & 511]($2); //@line 9997
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 182; //@line 10000
   $218 = $ReallocAsyncCtx5 + 4 | 0; //@line 10001
   HEAP32[$218 >> 2] = $2; //@line 10002
   $219 = $ReallocAsyncCtx5 + 8 | 0; //@line 10003
   HEAP32[$219 >> 2] = $4; //@line 10004
   $220 = $ReallocAsyncCtx5 + 12 | 0; //@line 10005
   HEAP32[$220 >> 2] = $6; //@line 10006
   $221 = $ReallocAsyncCtx5 + 16 | 0; //@line 10007
   HEAP32[$221 >> 2] = $8; //@line 10008
   $222 = $ReallocAsyncCtx5 + 20 | 0; //@line 10009
   HEAP32[$222 >> 2] = $10; //@line 10010
   $223 = $ReallocAsyncCtx5 + 24 | 0; //@line 10011
   HEAP32[$223 >> 2] = $12; //@line 10012
   $224 = $ReallocAsyncCtx5 + 28 | 0; //@line 10013
   HEAP32[$224 >> 2] = $14; //@line 10014
   $225 = $ReallocAsyncCtx5 + 32 | 0; //@line 10015
   HEAP32[$225 >> 2] = $16; //@line 10016
   $226 = $ReallocAsyncCtx5 + 36 | 0; //@line 10017
   HEAP32[$226 >> 2] = $18; //@line 10018
   $227 = $ReallocAsyncCtx5 + 40 | 0; //@line 10019
   HEAP32[$227 >> 2] = $22; //@line 10020
   $228 = $ReallocAsyncCtx5 + 44 | 0; //@line 10021
   HEAP32[$228 >> 2] = $24; //@line 10022
   $229 = $ReallocAsyncCtx5 + 48 | 0; //@line 10023
   HEAP32[$229 >> 2] = $26; //@line 10024
   $230 = $ReallocAsyncCtx5 + 52 | 0; //@line 10025
   HEAP32[$230 >> 2] = $28; //@line 10026
   $231 = $ReallocAsyncCtx5 + 56 | 0; //@line 10027
   HEAP32[$231 >> 2] = $30; //@line 10028
   $232 = $ReallocAsyncCtx5 + 60 | 0; //@line 10029
   HEAP32[$232 >> 2] = $32; //@line 10030
   $233 = $ReallocAsyncCtx5 + 64 | 0; //@line 10031
   HEAP32[$233 >> 2] = $34; //@line 10032
   $234 = $ReallocAsyncCtx5 + 68 | 0; //@line 10033
   HEAP32[$234 >> 2] = $36; //@line 10034
   $235 = $ReallocAsyncCtx5 + 72 | 0; //@line 10035
   HEAP32[$235 >> 2] = $38; //@line 10036
   $236 = $ReallocAsyncCtx5 + 76 | 0; //@line 10037
   HEAP32[$236 >> 2] = $20; //@line 10038
   $237 = $ReallocAsyncCtx5 + 80 | 0; //@line 10039
   HEAP32[$237 >> 2] = $40; //@line 10040
   $238 = $ReallocAsyncCtx5 + 84 | 0; //@line 10041
   HEAP32[$238 >> 2] = $42; //@line 10042
   $239 = $ReallocAsyncCtx5 + 88 | 0; //@line 10043
   HEAP32[$239 >> 2] = $44; //@line 10044
   $240 = $ReallocAsyncCtx5 + 92 | 0; //@line 10045
   HEAP32[$240 >> 2] = $46; //@line 10046
   $241 = $ReallocAsyncCtx5 + 96 | 0; //@line 10047
   HEAP32[$241 >> 2] = $48; //@line 10048
   $242 = $ReallocAsyncCtx5 + 100 | 0; //@line 10049
   HEAP32[$242 >> 2] = $50; //@line 10050
   sp = STACKTOP; //@line 10051
   return;
  }
  ___async_unwind = 0; //@line 10054
  HEAP32[$ReallocAsyncCtx5 >> 2] = 182; //@line 10055
  $218 = $ReallocAsyncCtx5 + 4 | 0; //@line 10056
  HEAP32[$218 >> 2] = $2; //@line 10057
  $219 = $ReallocAsyncCtx5 + 8 | 0; //@line 10058
  HEAP32[$219 >> 2] = $4; //@line 10059
  $220 = $ReallocAsyncCtx5 + 12 | 0; //@line 10060
  HEAP32[$220 >> 2] = $6; //@line 10061
  $221 = $ReallocAsyncCtx5 + 16 | 0; //@line 10062
  HEAP32[$221 >> 2] = $8; //@line 10063
  $222 = $ReallocAsyncCtx5 + 20 | 0; //@line 10064
  HEAP32[$222 >> 2] = $10; //@line 10065
  $223 = $ReallocAsyncCtx5 + 24 | 0; //@line 10066
  HEAP32[$223 >> 2] = $12; //@line 10067
  $224 = $ReallocAsyncCtx5 + 28 | 0; //@line 10068
  HEAP32[$224 >> 2] = $14; //@line 10069
  $225 = $ReallocAsyncCtx5 + 32 | 0; //@line 10070
  HEAP32[$225 >> 2] = $16; //@line 10071
  $226 = $ReallocAsyncCtx5 + 36 | 0; //@line 10072
  HEAP32[$226 >> 2] = $18; //@line 10073
  $227 = $ReallocAsyncCtx5 + 40 | 0; //@line 10074
  HEAP32[$227 >> 2] = $22; //@line 10075
  $228 = $ReallocAsyncCtx5 + 44 | 0; //@line 10076
  HEAP32[$228 >> 2] = $24; //@line 10077
  $229 = $ReallocAsyncCtx5 + 48 | 0; //@line 10078
  HEAP32[$229 >> 2] = $26; //@line 10079
  $230 = $ReallocAsyncCtx5 + 52 | 0; //@line 10080
  HEAP32[$230 >> 2] = $28; //@line 10081
  $231 = $ReallocAsyncCtx5 + 56 | 0; //@line 10082
  HEAP32[$231 >> 2] = $30; //@line 10083
  $232 = $ReallocAsyncCtx5 + 60 | 0; //@line 10084
  HEAP32[$232 >> 2] = $32; //@line 10085
  $233 = $ReallocAsyncCtx5 + 64 | 0; //@line 10086
  HEAP32[$233 >> 2] = $34; //@line 10087
  $234 = $ReallocAsyncCtx5 + 68 | 0; //@line 10088
  HEAP32[$234 >> 2] = $36; //@line 10089
  $235 = $ReallocAsyncCtx5 + 72 | 0; //@line 10090
  HEAP32[$235 >> 2] = $38; //@line 10091
  $236 = $ReallocAsyncCtx5 + 76 | 0; //@line 10092
  HEAP32[$236 >> 2] = $20; //@line 10093
  $237 = $ReallocAsyncCtx5 + 80 | 0; //@line 10094
  HEAP32[$237 >> 2] = $40; //@line 10095
  $238 = $ReallocAsyncCtx5 + 84 | 0; //@line 10096
  HEAP32[$238 >> 2] = $42; //@line 10097
  $239 = $ReallocAsyncCtx5 + 88 | 0; //@line 10098
  HEAP32[$239 >> 2] = $44; //@line 10099
  $240 = $ReallocAsyncCtx5 + 92 | 0; //@line 10100
  HEAP32[$240 >> 2] = $46; //@line 10101
  $241 = $ReallocAsyncCtx5 + 96 | 0; //@line 10102
  HEAP32[$241 >> 2] = $48; //@line 10103
  $242 = $ReallocAsyncCtx5 + 100 | 0; //@line 10104
  HEAP32[$242 >> 2] = $50; //@line 10105
  sp = STACKTOP; //@line 10106
  return;
 }
 $243 = HEAP32[$22 >> 2] | 0; //@line 10109
 if (!$243) {
  $$02972$reg2mem$0 = $48; //@line 10112
  $$03071$reg2mem$0 = $46; //@line 10112
  $$reg2mem$0 = $50; //@line 10112
 } else {
  $246 = HEAP32[$243 + 8 >> 2] | 0; //@line 10115
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 10116
  FUNCTION_TABLE_vi[$246 & 511]($4); //@line 10117
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 183; //@line 10120
   $247 = $ReallocAsyncCtx6 + 4 | 0; //@line 10121
   HEAP32[$247 >> 2] = $2; //@line 10122
   $248 = $ReallocAsyncCtx6 + 8 | 0; //@line 10123
   HEAP32[$248 >> 2] = $4; //@line 10124
   $249 = $ReallocAsyncCtx6 + 12 | 0; //@line 10125
   HEAP32[$249 >> 2] = $6; //@line 10126
   $250 = $ReallocAsyncCtx6 + 16 | 0; //@line 10127
   HEAP32[$250 >> 2] = $8; //@line 10128
   $251 = $ReallocAsyncCtx6 + 20 | 0; //@line 10129
   HEAP32[$251 >> 2] = $10; //@line 10130
   $252 = $ReallocAsyncCtx6 + 24 | 0; //@line 10131
   HEAP32[$252 >> 2] = $12; //@line 10132
   $253 = $ReallocAsyncCtx6 + 28 | 0; //@line 10133
   HEAP32[$253 >> 2] = $14; //@line 10134
   $254 = $ReallocAsyncCtx6 + 32 | 0; //@line 10135
   HEAP32[$254 >> 2] = $16; //@line 10136
   $255 = $ReallocAsyncCtx6 + 36 | 0; //@line 10137
   HEAP32[$255 >> 2] = $18; //@line 10138
   $256 = $ReallocAsyncCtx6 + 40 | 0; //@line 10139
   HEAP32[$256 >> 2] = $22; //@line 10140
   $257 = $ReallocAsyncCtx6 + 44 | 0; //@line 10141
   HEAP32[$257 >> 2] = $24; //@line 10142
   $258 = $ReallocAsyncCtx6 + 48 | 0; //@line 10143
   HEAP32[$258 >> 2] = $26; //@line 10144
   $259 = $ReallocAsyncCtx6 + 52 | 0; //@line 10145
   HEAP32[$259 >> 2] = $28; //@line 10146
   $260 = $ReallocAsyncCtx6 + 56 | 0; //@line 10147
   HEAP32[$260 >> 2] = $30; //@line 10148
   $261 = $ReallocAsyncCtx6 + 60 | 0; //@line 10149
   HEAP32[$261 >> 2] = $32; //@line 10150
   $262 = $ReallocAsyncCtx6 + 64 | 0; //@line 10151
   HEAP32[$262 >> 2] = $34; //@line 10152
   $263 = $ReallocAsyncCtx6 + 68 | 0; //@line 10153
   HEAP32[$263 >> 2] = $36; //@line 10154
   $264 = $ReallocAsyncCtx6 + 72 | 0; //@line 10155
   HEAP32[$264 >> 2] = $38; //@line 10156
   $265 = $ReallocAsyncCtx6 + 76 | 0; //@line 10157
   HEAP32[$265 >> 2] = $20; //@line 10158
   $266 = $ReallocAsyncCtx6 + 80 | 0; //@line 10159
   HEAP32[$266 >> 2] = $40; //@line 10160
   $267 = $ReallocAsyncCtx6 + 84 | 0; //@line 10161
   HEAP32[$267 >> 2] = $42; //@line 10162
   $268 = $ReallocAsyncCtx6 + 88 | 0; //@line 10163
   HEAP32[$268 >> 2] = $44; //@line 10164
   $269 = $ReallocAsyncCtx6 + 92 | 0; //@line 10165
   HEAP32[$269 >> 2] = $46; //@line 10166
   $270 = $ReallocAsyncCtx6 + 96 | 0; //@line 10167
   HEAP32[$270 >> 2] = $48; //@line 10168
   $271 = $ReallocAsyncCtx6 + 100 | 0; //@line 10169
   HEAP32[$271 >> 2] = $50; //@line 10170
   sp = STACKTOP; //@line 10171
   return;
  }
  ___async_unwind = 0; //@line 10174
  HEAP32[$ReallocAsyncCtx6 >> 2] = 183; //@line 10175
  $247 = $ReallocAsyncCtx6 + 4 | 0; //@line 10176
  HEAP32[$247 >> 2] = $2; //@line 10177
  $248 = $ReallocAsyncCtx6 + 8 | 0; //@line 10178
  HEAP32[$248 >> 2] = $4; //@line 10179
  $249 = $ReallocAsyncCtx6 + 12 | 0; //@line 10180
  HEAP32[$249 >> 2] = $6; //@line 10181
  $250 = $ReallocAsyncCtx6 + 16 | 0; //@line 10182
  HEAP32[$250 >> 2] = $8; //@line 10183
  $251 = $ReallocAsyncCtx6 + 20 | 0; //@line 10184
  HEAP32[$251 >> 2] = $10; //@line 10185
  $252 = $ReallocAsyncCtx6 + 24 | 0; //@line 10186
  HEAP32[$252 >> 2] = $12; //@line 10187
  $253 = $ReallocAsyncCtx6 + 28 | 0; //@line 10188
  HEAP32[$253 >> 2] = $14; //@line 10189
  $254 = $ReallocAsyncCtx6 + 32 | 0; //@line 10190
  HEAP32[$254 >> 2] = $16; //@line 10191
  $255 = $ReallocAsyncCtx6 + 36 | 0; //@line 10192
  HEAP32[$255 >> 2] = $18; //@line 10193
  $256 = $ReallocAsyncCtx6 + 40 | 0; //@line 10194
  HEAP32[$256 >> 2] = $22; //@line 10195
  $257 = $ReallocAsyncCtx6 + 44 | 0; //@line 10196
  HEAP32[$257 >> 2] = $24; //@line 10197
  $258 = $ReallocAsyncCtx6 + 48 | 0; //@line 10198
  HEAP32[$258 >> 2] = $26; //@line 10199
  $259 = $ReallocAsyncCtx6 + 52 | 0; //@line 10200
  HEAP32[$259 >> 2] = $28; //@line 10201
  $260 = $ReallocAsyncCtx6 + 56 | 0; //@line 10202
  HEAP32[$260 >> 2] = $30; //@line 10203
  $261 = $ReallocAsyncCtx6 + 60 | 0; //@line 10204
  HEAP32[$261 >> 2] = $32; //@line 10205
  $262 = $ReallocAsyncCtx6 + 64 | 0; //@line 10206
  HEAP32[$262 >> 2] = $34; //@line 10207
  $263 = $ReallocAsyncCtx6 + 68 | 0; //@line 10208
  HEAP32[$263 >> 2] = $36; //@line 10209
  $264 = $ReallocAsyncCtx6 + 72 | 0; //@line 10210
  HEAP32[$264 >> 2] = $38; //@line 10211
  $265 = $ReallocAsyncCtx6 + 76 | 0; //@line 10212
  HEAP32[$265 >> 2] = $20; //@line 10213
  $266 = $ReallocAsyncCtx6 + 80 | 0; //@line 10214
  HEAP32[$266 >> 2] = $40; //@line 10215
  $267 = $ReallocAsyncCtx6 + 84 | 0; //@line 10216
  HEAP32[$267 >> 2] = $42; //@line 10217
  $268 = $ReallocAsyncCtx6 + 88 | 0; //@line 10218
  HEAP32[$268 >> 2] = $44; //@line 10219
  $269 = $ReallocAsyncCtx6 + 92 | 0; //@line 10220
  HEAP32[$269 >> 2] = $46; //@line 10221
  $270 = $ReallocAsyncCtx6 + 96 | 0; //@line 10222
  HEAP32[$270 >> 2] = $48; //@line 10223
  $271 = $ReallocAsyncCtx6 + 100 | 0; //@line 10224
  HEAP32[$271 >> 2] = $50; //@line 10225
  sp = STACKTOP; //@line 10226
  return;
 }
 L15 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 10233
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 10233
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 10235
   $$131 = $$03071$reg2mem$0; //@line 10235
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 10238
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 10241
    break L15;
   }
   $52 = 6700 + ($$02972$reg2mem$1 << 2) | 0; //@line 10244
   $54 = HEAP32[$52 >> 2] | 0; //@line 10245
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 10257
   break;
  }
  $84 = $54 + 72 | 0; //@line 10260
  $85 = HEAP32[$84 >> 2] | 0; //@line 10261
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 10265
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 10271
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 10275
  $151 = $150 + 76 | 0; //@line 10276
  $152 = HEAP32[$151 >> 2] | 0; //@line 10277
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 10280
   $$03071$reg2mem$0 = $$131; //@line 10280
   $$reg2mem$0 = $52; //@line 10280
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 10285
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 10289
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 10290
  $$03071$reg2mem$0 = $$131; //@line 10290
  $$reg2mem$0 = $52; //@line 10290
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7580] = 0; //@line 10295
   return;
  }
  $275 = $$131 + 44 | 0; //@line 10298
  $276 = HEAP32[$275 >> 2] | 0; //@line 10299
  if (!$276) {
   $284 = $20 + 12 | 0; //@line 10302
   HEAP32[$284 >> 2] = 0; //@line 10303
   $286 = $38 + 4 | 0; //@line 10305
   HEAP32[$286 >> 2] = 0; //@line 10307
   HEAP32[$286 + 4 >> 2] = 0; //@line 10310
   HEAP32[$38 >> 2] = 3; //@line 10311
   $290 = $38 + 12 | 0; //@line 10312
   HEAP32[$290 >> 2] = 712; //@line 10313
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 10314
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 100, $38) | 0; //@line 10315
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 10318
    $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 10319
    HEAP32[$291 >> 2] = $290; //@line 10320
    $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 10321
    HEAP32[$292 >> 2] = $284; //@line 10322
    $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 10323
    HEAP32[$293 >> 2] = $38; //@line 10324
    $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 10325
    HEAP32[$294 >> 2] = $20; //@line 10326
    sp = STACKTOP; //@line 10327
    return;
   }
   ___async_unwind = 0; //@line 10330
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 10331
   $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 10332
   HEAP32[$291 >> 2] = $290; //@line 10333
   $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 10334
   HEAP32[$292 >> 2] = $284; //@line 10335
   $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 10336
   HEAP32[$293 >> 2] = $38; //@line 10337
   $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 10338
   HEAP32[$294 >> 2] = $20; //@line 10339
   sp = STACKTOP; //@line 10340
   return;
  } else {
   $280 = HEAP32[$276 + 4 >> 2] | 0; //@line 10345
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 10346
   FUNCTION_TABLE_vii[$280 & 7]($20, $$131 + 32 | 0); //@line 10347
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 10350
    $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 10351
    HEAP32[$281 >> 2] = $275; //@line 10352
    $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 10353
    HEAP32[$282 >> 2] = $20; //@line 10354
    $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 10355
    HEAP32[$283 >> 2] = $38; //@line 10356
    sp = STACKTOP; //@line 10357
    return;
   }
   ___async_unwind = 0; //@line 10360
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 10361
   $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 10362
   HEAP32[$281 >> 2] = $275; //@line 10363
   $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 10364
   HEAP32[$282 >> 2] = $20; //@line 10365
   $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 10366
   HEAP32[$283 >> 2] = $38; //@line 10367
   sp = STACKTOP; //@line 10368
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 10373
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 10374
  __ZL28nsapi_dns_query_async_deletei($59); //@line 10375
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 10378
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 10379
   HEAP32[$60 >> 2] = $2; //@line 10380
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 10381
   HEAP32[$61 >> 2] = $4; //@line 10382
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 10383
   HEAP32[$62 >> 2] = $6; //@line 10384
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 10385
   HEAP32[$63 >> 2] = $8; //@line 10386
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 10387
   HEAP32[$64 >> 2] = $10; //@line 10388
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 10389
   HEAP32[$65 >> 2] = $12; //@line 10390
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 10391
   HEAP32[$66 >> 2] = $14; //@line 10392
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 10393
   HEAP32[$67 >> 2] = $16; //@line 10394
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 10395
   HEAP32[$68 >> 2] = $18; //@line 10396
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 10397
   HEAP32[$69 >> 2] = $20; //@line 10398
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 10399
   HEAP32[$70 >> 2] = $22; //@line 10400
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 10401
   HEAP32[$71 >> 2] = $24; //@line 10402
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 10403
   HEAP32[$72 >> 2] = $26; //@line 10404
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 10405
   HEAP32[$73 >> 2] = $28; //@line 10406
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 10407
   HEAP32[$74 >> 2] = $30; //@line 10408
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 10409
   HEAP32[$75 >> 2] = $32; //@line 10410
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 10411
   HEAP32[$76 >> 2] = $34; //@line 10412
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 10413
   HEAP32[$77 >> 2] = $36; //@line 10414
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 10415
   HEAP32[$78 >> 2] = $38; //@line 10416
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 10417
   HEAP32[$79 >> 2] = $40; //@line 10418
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 10419
   HEAP32[$80 >> 2] = $42; //@line 10420
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 10421
   HEAP32[$81 >> 2] = $44; //@line 10422
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 10423
   HEAP32[$82 >> 2] = $$131; //@line 10424
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 10425
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 10426
   sp = STACKTOP; //@line 10427
   return;
  }
  ___async_unwind = 0; //@line 10430
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 10431
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 10432
  HEAP32[$60 >> 2] = $2; //@line 10433
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 10434
  HEAP32[$61 >> 2] = $4; //@line 10435
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 10436
  HEAP32[$62 >> 2] = $6; //@line 10437
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 10438
  HEAP32[$63 >> 2] = $8; //@line 10439
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 10440
  HEAP32[$64 >> 2] = $10; //@line 10441
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 10442
  HEAP32[$65 >> 2] = $12; //@line 10443
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 10444
  HEAP32[$66 >> 2] = $14; //@line 10445
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 10446
  HEAP32[$67 >> 2] = $16; //@line 10447
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 10448
  HEAP32[$68 >> 2] = $18; //@line 10449
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 10450
  HEAP32[$69 >> 2] = $20; //@line 10451
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 10452
  HEAP32[$70 >> 2] = $22; //@line 10453
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 10454
  HEAP32[$71 >> 2] = $24; //@line 10455
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 10456
  HEAP32[$72 >> 2] = $26; //@line 10457
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 10458
  HEAP32[$73 >> 2] = $28; //@line 10459
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 10460
  HEAP32[$74 >> 2] = $30; //@line 10461
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 10462
  HEAP32[$75 >> 2] = $32; //@line 10463
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 10464
  HEAP32[$76 >> 2] = $34; //@line 10465
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 10466
  HEAP32[$77 >> 2] = $36; //@line 10467
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 10468
  HEAP32[$78 >> 2] = $38; //@line 10469
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 10470
  HEAP32[$79 >> 2] = $40; //@line 10471
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 10472
  HEAP32[$80 >> 2] = $42; //@line 10473
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 10474
  HEAP32[$81 >> 2] = $44; //@line 10475
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 10476
  HEAP32[$82 >> 2] = $$131; //@line 10477
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 10478
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 10479
  sp = STACKTOP; //@line 10480
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 10485
  $92 = $54 + 44 | 0; //@line 10486
  $93 = HEAP32[$92 >> 2] | 0; //@line 10487
  if (!$93) {
   HEAP32[$24 >> 2] = 0; //@line 10490
   $124 = HEAP32[$54 >> 2] | 0; //@line 10491
   HEAP32[$26 >> 2] = 0; //@line 10492
   HEAP32[$28 >> 2] = 175; //@line 10493
   HEAP32[$30 >> 2] = $124; //@line 10494
   HEAP32[$32 >> 2] = 724; //@line 10495
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 10496
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($34, 0, $36) | 0; //@line 10497
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 10500
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 10501
    HEAP32[$125 >> 2] = $2; //@line 10502
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 10503
    HEAP32[$126 >> 2] = $4; //@line 10504
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 10505
    HEAP32[$127 >> 2] = $6; //@line 10506
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 10507
    HEAP32[$128 >> 2] = $8; //@line 10508
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 10509
    HEAP32[$129 >> 2] = $10; //@line 10510
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 10511
    HEAP32[$130 >> 2] = $12; //@line 10512
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 10513
    HEAP32[$131 >> 2] = $14; //@line 10514
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 10515
    HEAP32[$132 >> 2] = $16; //@line 10516
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 10517
    HEAP32[$133 >> 2] = $18; //@line 10518
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 10519
    HEAP32[$134 >> 2] = $20; //@line 10520
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 10521
    HEAP32[$135 >> 2] = $22; //@line 10522
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 10523
    HEAP32[$136 >> 2] = $24; //@line 10524
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 10525
    HEAP32[$137 >> 2] = $26; //@line 10526
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 10527
    HEAP32[$138 >> 2] = $28; //@line 10528
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 10529
    HEAP32[$139 >> 2] = $30; //@line 10530
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 10531
    HEAP32[$140 >> 2] = $32; //@line 10532
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 10533
    HEAP32[$141 >> 2] = $34; //@line 10534
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 10535
    HEAP32[$142 >> 2] = $36; //@line 10536
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 10537
    HEAP32[$143 >> 2] = $38; //@line 10538
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 10539
    HEAP32[$144 >> 2] = $40; //@line 10540
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 10541
    HEAP32[$145 >> 2] = $42; //@line 10542
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 10543
    HEAP32[$146 >> 2] = $44; //@line 10544
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 10545
    HEAP32[$147 >> 2] = $$131; //@line 10546
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 10547
    HEAP32[$148 >> 2] = $$02972$reg2mem$1; //@line 10548
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 10549
    HEAP32[$149 >> 2] = $52; //@line 10550
    sp = STACKTOP; //@line 10551
    return;
   }
   ___async_unwind = 0; //@line 10554
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 10555
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 10556
   HEAP32[$125 >> 2] = $2; //@line 10557
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 10558
   HEAP32[$126 >> 2] = $4; //@line 10559
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 10560
   HEAP32[$127 >> 2] = $6; //@line 10561
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 10562
   HEAP32[$128 >> 2] = $8; //@line 10563
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 10564
   HEAP32[$129 >> 2] = $10; //@line 10565
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 10566
   HEAP32[$130 >> 2] = $12; //@line 10567
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 10568
   HEAP32[$131 >> 2] = $14; //@line 10569
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 10570
   HEAP32[$132 >> 2] = $16; //@line 10571
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 10572
   HEAP32[$133 >> 2] = $18; //@line 10573
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 10574
   HEAP32[$134 >> 2] = $20; //@line 10575
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 10576
   HEAP32[$135 >> 2] = $22; //@line 10577
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 10578
   HEAP32[$136 >> 2] = $24; //@line 10579
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 10580
   HEAP32[$137 >> 2] = $26; //@line 10581
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 10582
   HEAP32[$138 >> 2] = $28; //@line 10583
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 10584
   HEAP32[$139 >> 2] = $30; //@line 10585
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 10586
   HEAP32[$140 >> 2] = $32; //@line 10587
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 10588
   HEAP32[$141 >> 2] = $34; //@line 10589
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 10590
   HEAP32[$142 >> 2] = $36; //@line 10591
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 10592
   HEAP32[$143 >> 2] = $38; //@line 10593
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 10594
   HEAP32[$144 >> 2] = $40; //@line 10595
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 10596
   HEAP32[$145 >> 2] = $42; //@line 10597
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 10598
   HEAP32[$146 >> 2] = $44; //@line 10599
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 10600
   HEAP32[$147 >> 2] = $$131; //@line 10601
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 10602
   HEAP32[$148 >> 2] = $$02972$reg2mem$1; //@line 10603
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 10604
   HEAP32[$149 >> 2] = $52; //@line 10605
   sp = STACKTOP; //@line 10606
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 10611
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 10612
   FUNCTION_TABLE_vii[$97 & 7]($40, $54 + 32 | 0); //@line 10613
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 10616
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 10617
    HEAP32[$98 >> 2] = $2; //@line 10618
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 10619
    HEAP32[$99 >> 2] = $4; //@line 10620
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 10621
    HEAP32[$100 >> 2] = $6; //@line 10622
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 10623
    HEAP32[$101 >> 2] = $8; //@line 10624
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 10625
    HEAP32[$102 >> 2] = $10; //@line 10626
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 10627
    HEAP32[$103 >> 2] = $12; //@line 10628
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 10629
    HEAP32[$104 >> 2] = $14; //@line 10630
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 10631
    HEAP32[$105 >> 2] = $16; //@line 10632
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 10633
    HEAP32[$106 >> 2] = $18; //@line 10634
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 10635
    HEAP32[$107 >> 2] = $22; //@line 10636
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 10637
    HEAP32[$108 >> 2] = $52; //@line 10638
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 10639
    HEAP32[$109 >> 2] = $24; //@line 10640
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 10641
    HEAP32[$110 >> 2] = $26; //@line 10642
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 10643
    HEAP32[$111 >> 2] = $28; //@line 10644
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 10645
    HEAP32[$112 >> 2] = $30; //@line 10646
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 10647
    HEAP32[$113 >> 2] = $32; //@line 10648
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 10649
    HEAP32[$114 >> 2] = $34; //@line 10650
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 10651
    HEAP32[$115 >> 2] = $36; //@line 10652
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 10653
    HEAP32[$116 >> 2] = $38; //@line 10654
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 10655
    HEAP32[$117 >> 2] = $20; //@line 10656
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 10657
    HEAP32[$118 >> 2] = $40; //@line 10658
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 10659
    HEAP32[$119 >> 2] = $42; //@line 10660
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 10661
    HEAP32[$120 >> 2] = $44; //@line 10662
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 10663
    HEAP32[$121 >> 2] = $$131; //@line 10664
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 10665
    HEAP32[$122 >> 2] = $92; //@line 10666
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 10667
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 10668
    sp = STACKTOP; //@line 10669
    return;
   }
   ___async_unwind = 0; //@line 10672
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 10673
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 10674
   HEAP32[$98 >> 2] = $2; //@line 10675
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 10676
   HEAP32[$99 >> 2] = $4; //@line 10677
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 10678
   HEAP32[$100 >> 2] = $6; //@line 10679
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 10680
   HEAP32[$101 >> 2] = $8; //@line 10681
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 10682
   HEAP32[$102 >> 2] = $10; //@line 10683
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 10684
   HEAP32[$103 >> 2] = $12; //@line 10685
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 10686
   HEAP32[$104 >> 2] = $14; //@line 10687
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 10688
   HEAP32[$105 >> 2] = $16; //@line 10689
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 10690
   HEAP32[$106 >> 2] = $18; //@line 10691
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 10692
   HEAP32[$107 >> 2] = $22; //@line 10693
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 10694
   HEAP32[$108 >> 2] = $52; //@line 10695
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 10696
   HEAP32[$109 >> 2] = $24; //@line 10697
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 10698
   HEAP32[$110 >> 2] = $26; //@line 10699
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 10700
   HEAP32[$111 >> 2] = $28; //@line 10701
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 10702
   HEAP32[$112 >> 2] = $30; //@line 10703
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 10704
   HEAP32[$113 >> 2] = $32; //@line 10705
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 10706
   HEAP32[$114 >> 2] = $34; //@line 10707
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 10708
   HEAP32[$115 >> 2] = $36; //@line 10709
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 10710
   HEAP32[$116 >> 2] = $38; //@line 10711
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 10712
   HEAP32[$117 >> 2] = $20; //@line 10713
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 10714
   HEAP32[$118 >> 2] = $40; //@line 10715
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 10716
   HEAP32[$119 >> 2] = $42; //@line 10717
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 10718
   HEAP32[$120 >> 2] = $44; //@line 10719
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 10720
   HEAP32[$121 >> 2] = $$131; //@line 10721
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 10722
   HEAP32[$122 >> 2] = $92; //@line 10723
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 10724
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 10725
   sp = STACKTOP; //@line 10726
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 10731
  $156 = $150 + 44 | 0; //@line 10732
  $157 = HEAP32[$156 >> 2] | 0; //@line 10733
  if (!$157) {
   HEAP32[$6 >> 2] = 0; //@line 10736
   $188 = HEAP32[$150 >> 2] | 0; //@line 10737
   HEAP32[$8 >> 2] = 0; //@line 10738
   HEAP32[$10 >> 2] = 180; //@line 10739
   HEAP32[$12 >> 2] = $188; //@line 10740
   HEAP32[$14 >> 2] = 724; //@line 10741
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 10742
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 0, $18) | 0; //@line 10743
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 10746
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 10747
    HEAP32[$189 >> 2] = $2; //@line 10748
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 10749
    HEAP32[$190 >> 2] = $4; //@line 10750
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 10751
    HEAP32[$191 >> 2] = $6; //@line 10752
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 10753
    HEAP32[$192 >> 2] = $8; //@line 10754
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 10755
    HEAP32[$193 >> 2] = $10; //@line 10756
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 10757
    HEAP32[$194 >> 2] = $12; //@line 10758
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 10759
    HEAP32[$195 >> 2] = $14; //@line 10760
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 10761
    HEAP32[$196 >> 2] = $16; //@line 10762
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 10763
    HEAP32[$197 >> 2] = $18; //@line 10764
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 10765
    HEAP32[$198 >> 2] = $20; //@line 10766
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 10767
    HEAP32[$199 >> 2] = $22; //@line 10768
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 10769
    HEAP32[$200 >> 2] = $24; //@line 10770
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 10771
    HEAP32[$201 >> 2] = $26; //@line 10772
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 10773
    HEAP32[$202 >> 2] = $28; //@line 10774
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 10775
    HEAP32[$203 >> 2] = $30; //@line 10776
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 10777
    HEAP32[$204 >> 2] = $32; //@line 10778
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 10779
    HEAP32[$205 >> 2] = $34; //@line 10780
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 10781
    HEAP32[$206 >> 2] = $36; //@line 10782
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 10783
    HEAP32[$207 >> 2] = $38; //@line 10784
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 10785
    HEAP32[$208 >> 2] = $40; //@line 10786
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 10787
    HEAP32[$209 >> 2] = $42; //@line 10788
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 10789
    HEAP32[$210 >> 2] = $44; //@line 10790
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 10791
    HEAP32[$211 >> 2] = $$131; //@line 10792
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 10793
    HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 10794
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 10795
    HEAP32[$213 >> 2] = $52; //@line 10796
    sp = STACKTOP; //@line 10797
    return;
   }
   ___async_unwind = 0; //@line 10800
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 10801
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 10802
   HEAP32[$189 >> 2] = $2; //@line 10803
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 10804
   HEAP32[$190 >> 2] = $4; //@line 10805
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 10806
   HEAP32[$191 >> 2] = $6; //@line 10807
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 10808
   HEAP32[$192 >> 2] = $8; //@line 10809
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 10810
   HEAP32[$193 >> 2] = $10; //@line 10811
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 10812
   HEAP32[$194 >> 2] = $12; //@line 10813
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 10814
   HEAP32[$195 >> 2] = $14; //@line 10815
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 10816
   HEAP32[$196 >> 2] = $16; //@line 10817
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 10818
   HEAP32[$197 >> 2] = $18; //@line 10819
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 10820
   HEAP32[$198 >> 2] = $20; //@line 10821
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 10822
   HEAP32[$199 >> 2] = $22; //@line 10823
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 10824
   HEAP32[$200 >> 2] = $24; //@line 10825
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 10826
   HEAP32[$201 >> 2] = $26; //@line 10827
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 10828
   HEAP32[$202 >> 2] = $28; //@line 10829
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 10830
   HEAP32[$203 >> 2] = $30; //@line 10831
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 10832
   HEAP32[$204 >> 2] = $32; //@line 10833
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 10834
   HEAP32[$205 >> 2] = $34; //@line 10835
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 10836
   HEAP32[$206 >> 2] = $36; //@line 10837
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 10838
   HEAP32[$207 >> 2] = $38; //@line 10839
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 10840
   HEAP32[$208 >> 2] = $40; //@line 10841
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 10842
   HEAP32[$209 >> 2] = $42; //@line 10843
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 10844
   HEAP32[$210 >> 2] = $44; //@line 10845
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 10846
   HEAP32[$211 >> 2] = $$131; //@line 10847
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 10848
   HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 10849
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 10850
   HEAP32[$213 >> 2] = $52; //@line 10851
   sp = STACKTOP; //@line 10852
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 10857
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 10858
   FUNCTION_TABLE_vii[$161 & 7]($4, $150 + 32 | 0); //@line 10859
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 10862
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 10863
    HEAP32[$162 >> 2] = $2; //@line 10864
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 10865
    HEAP32[$163 >> 2] = $4; //@line 10866
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 10867
    HEAP32[$164 >> 2] = $6; //@line 10868
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 10869
    HEAP32[$165 >> 2] = $8; //@line 10870
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 10871
    HEAP32[$166 >> 2] = $10; //@line 10872
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 10873
    HEAP32[$167 >> 2] = $12; //@line 10874
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 10875
    HEAP32[$168 >> 2] = $14; //@line 10876
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 10877
    HEAP32[$169 >> 2] = $16; //@line 10878
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 10879
    HEAP32[$170 >> 2] = $18; //@line 10880
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 10881
    HEAP32[$171 >> 2] = $22; //@line 10882
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 10883
    HEAP32[$172 >> 2] = $156; //@line 10884
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 10885
    HEAP32[$173 >> 2] = $52; //@line 10886
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 10887
    HEAP32[$174 >> 2] = $24; //@line 10888
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 10889
    HEAP32[$175 >> 2] = $26; //@line 10890
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 10891
    HEAP32[$176 >> 2] = $28; //@line 10892
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 10893
    HEAP32[$177 >> 2] = $30; //@line 10894
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 10895
    HEAP32[$178 >> 2] = $32; //@line 10896
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 10897
    HEAP32[$179 >> 2] = $34; //@line 10898
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 10899
    HEAP32[$180 >> 2] = $36; //@line 10900
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 10901
    HEAP32[$181 >> 2] = $38; //@line 10902
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 10903
    HEAP32[$182 >> 2] = $20; //@line 10904
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 10905
    HEAP32[$183 >> 2] = $40; //@line 10906
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 10907
    HEAP32[$184 >> 2] = $42; //@line 10908
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 10909
    HEAP32[$185 >> 2] = $44; //@line 10910
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 10911
    HEAP32[$186 >> 2] = $$131; //@line 10912
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 10913
    HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 10914
    sp = STACKTOP; //@line 10915
    return;
   }
   ___async_unwind = 0; //@line 10918
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 10919
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 10920
   HEAP32[$162 >> 2] = $2; //@line 10921
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 10922
   HEAP32[$163 >> 2] = $4; //@line 10923
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 10924
   HEAP32[$164 >> 2] = $6; //@line 10925
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 10926
   HEAP32[$165 >> 2] = $8; //@line 10927
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 10928
   HEAP32[$166 >> 2] = $10; //@line 10929
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 10930
   HEAP32[$167 >> 2] = $12; //@line 10931
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 10932
   HEAP32[$168 >> 2] = $14; //@line 10933
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 10934
   HEAP32[$169 >> 2] = $16; //@line 10935
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 10936
   HEAP32[$170 >> 2] = $18; //@line 10937
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 10938
   HEAP32[$171 >> 2] = $22; //@line 10939
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 10940
   HEAP32[$172 >> 2] = $156; //@line 10941
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 10942
   HEAP32[$173 >> 2] = $52; //@line 10943
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 10944
   HEAP32[$174 >> 2] = $24; //@line 10945
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 10946
   HEAP32[$175 >> 2] = $26; //@line 10947
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 10948
   HEAP32[$176 >> 2] = $28; //@line 10949
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 10950
   HEAP32[$177 >> 2] = $30; //@line 10951
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 10952
   HEAP32[$178 >> 2] = $32; //@line 10953
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 10954
   HEAP32[$179 >> 2] = $34; //@line 10955
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 10956
   HEAP32[$180 >> 2] = $36; //@line 10957
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 10958
   HEAP32[$181 >> 2] = $38; //@line 10959
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 10960
   HEAP32[$182 >> 2] = $20; //@line 10961
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 10962
   HEAP32[$183 >> 2] = $40; //@line 10963
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 10964
   HEAP32[$184 >> 2] = $42; //@line 10965
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 10966
   HEAP32[$185 >> 2] = $44; //@line 10967
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 10968
   HEAP32[$186 >> 2] = $$131; //@line 10969
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 10970
   HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 10971
   sp = STACKTOP; //@line 10972
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_150($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $185 = 0, $186 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $246 = 0, $247 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 5239
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5241
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5243
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5245
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5247
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5249
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5251
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5253
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5255
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 5257
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 5259
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 5261
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 5263
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 5265
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 5267
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 5269
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 5271
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 5273
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 5275
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 5277
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 5279
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 5281
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 5283
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 5285
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 5287
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 5289
 $150 = HEAP32[$46 >> 2] | 0; //@line 5290
 if (!$150) {
  $$02972$reg2mem$0 = $50; //@line 5293
  $$03071$reg2mem$0 = $48; //@line 5293
  $$reg2mem$0 = $22; //@line 5293
 } else {
  $153 = HEAP32[$150 + 8 >> 2] | 0; //@line 5296
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 5297
  FUNCTION_TABLE_vi[$153 & 511]($42); //@line 5298
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 178; //@line 5301
   $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 5302
   HEAP32[$154 >> 2] = $2; //@line 5303
   $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 5304
   HEAP32[$155 >> 2] = $4; //@line 5305
   $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 5306
   HEAP32[$156 >> 2] = $6; //@line 5307
   $157 = $ReallocAsyncCtx3 + 16 | 0; //@line 5308
   HEAP32[$157 >> 2] = $8; //@line 5309
   $158 = $ReallocAsyncCtx3 + 20 | 0; //@line 5310
   HEAP32[$158 >> 2] = $10; //@line 5311
   $159 = $ReallocAsyncCtx3 + 24 | 0; //@line 5312
   HEAP32[$159 >> 2] = $12; //@line 5313
   $160 = $ReallocAsyncCtx3 + 28 | 0; //@line 5314
   HEAP32[$160 >> 2] = $14; //@line 5315
   $161 = $ReallocAsyncCtx3 + 32 | 0; //@line 5316
   HEAP32[$161 >> 2] = $16; //@line 5317
   $162 = $ReallocAsyncCtx3 + 36 | 0; //@line 5318
   HEAP32[$162 >> 2] = $18; //@line 5319
   $163 = $ReallocAsyncCtx3 + 40 | 0; //@line 5320
   HEAP32[$163 >> 2] = $20; //@line 5321
   $164 = $ReallocAsyncCtx3 + 44 | 0; //@line 5322
   HEAP32[$164 >> 2] = $22; //@line 5323
   $165 = $ReallocAsyncCtx3 + 48 | 0; //@line 5324
   HEAP32[$165 >> 2] = $24; //@line 5325
   $166 = $ReallocAsyncCtx3 + 52 | 0; //@line 5326
   HEAP32[$166 >> 2] = $26; //@line 5327
   $167 = $ReallocAsyncCtx3 + 56 | 0; //@line 5328
   HEAP32[$167 >> 2] = $28; //@line 5329
   $168 = $ReallocAsyncCtx3 + 60 | 0; //@line 5330
   HEAP32[$168 >> 2] = $30; //@line 5331
   $169 = $ReallocAsyncCtx3 + 64 | 0; //@line 5332
   HEAP32[$169 >> 2] = $32; //@line 5333
   $170 = $ReallocAsyncCtx3 + 68 | 0; //@line 5334
   HEAP32[$170 >> 2] = $34; //@line 5335
   $171 = $ReallocAsyncCtx3 + 72 | 0; //@line 5336
   HEAP32[$171 >> 2] = $36; //@line 5337
   $172 = $ReallocAsyncCtx3 + 76 | 0; //@line 5338
   HEAP32[$172 >> 2] = $38; //@line 5339
   $173 = $ReallocAsyncCtx3 + 80 | 0; //@line 5340
   HEAP32[$173 >> 2] = $40; //@line 5341
   $174 = $ReallocAsyncCtx3 + 84 | 0; //@line 5342
   HEAP32[$174 >> 2] = $42; //@line 5343
   $175 = $ReallocAsyncCtx3 + 88 | 0; //@line 5344
   HEAP32[$175 >> 2] = $44; //@line 5345
   $176 = $ReallocAsyncCtx3 + 92 | 0; //@line 5346
   HEAP32[$176 >> 2] = $46; //@line 5347
   $177 = $ReallocAsyncCtx3 + 96 | 0; //@line 5348
   HEAP32[$177 >> 2] = $48; //@line 5349
   $178 = $ReallocAsyncCtx3 + 100 | 0; //@line 5350
   HEAP32[$178 >> 2] = $50; //@line 5351
   sp = STACKTOP; //@line 5352
   return;
  }
  ___async_unwind = 0; //@line 5355
  HEAP32[$ReallocAsyncCtx3 >> 2] = 178; //@line 5356
  $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 5357
  HEAP32[$154 >> 2] = $2; //@line 5358
  $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 5359
  HEAP32[$155 >> 2] = $4; //@line 5360
  $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 5361
  HEAP32[$156 >> 2] = $6; //@line 5362
  $157 = $ReallocAsyncCtx3 + 16 | 0; //@line 5363
  HEAP32[$157 >> 2] = $8; //@line 5364
  $158 = $ReallocAsyncCtx3 + 20 | 0; //@line 5365
  HEAP32[$158 >> 2] = $10; //@line 5366
  $159 = $ReallocAsyncCtx3 + 24 | 0; //@line 5367
  HEAP32[$159 >> 2] = $12; //@line 5368
  $160 = $ReallocAsyncCtx3 + 28 | 0; //@line 5369
  HEAP32[$160 >> 2] = $14; //@line 5370
  $161 = $ReallocAsyncCtx3 + 32 | 0; //@line 5371
  HEAP32[$161 >> 2] = $16; //@line 5372
  $162 = $ReallocAsyncCtx3 + 36 | 0; //@line 5373
  HEAP32[$162 >> 2] = $18; //@line 5374
  $163 = $ReallocAsyncCtx3 + 40 | 0; //@line 5375
  HEAP32[$163 >> 2] = $20; //@line 5376
  $164 = $ReallocAsyncCtx3 + 44 | 0; //@line 5377
  HEAP32[$164 >> 2] = $22; //@line 5378
  $165 = $ReallocAsyncCtx3 + 48 | 0; //@line 5379
  HEAP32[$165 >> 2] = $24; //@line 5380
  $166 = $ReallocAsyncCtx3 + 52 | 0; //@line 5381
  HEAP32[$166 >> 2] = $26; //@line 5382
  $167 = $ReallocAsyncCtx3 + 56 | 0; //@line 5383
  HEAP32[$167 >> 2] = $28; //@line 5384
  $168 = $ReallocAsyncCtx3 + 60 | 0; //@line 5385
  HEAP32[$168 >> 2] = $30; //@line 5386
  $169 = $ReallocAsyncCtx3 + 64 | 0; //@line 5387
  HEAP32[$169 >> 2] = $32; //@line 5388
  $170 = $ReallocAsyncCtx3 + 68 | 0; //@line 5389
  HEAP32[$170 >> 2] = $34; //@line 5390
  $171 = $ReallocAsyncCtx3 + 72 | 0; //@line 5391
  HEAP32[$171 >> 2] = $36; //@line 5392
  $172 = $ReallocAsyncCtx3 + 76 | 0; //@line 5393
  HEAP32[$172 >> 2] = $38; //@line 5394
  $173 = $ReallocAsyncCtx3 + 80 | 0; //@line 5395
  HEAP32[$173 >> 2] = $40; //@line 5396
  $174 = $ReallocAsyncCtx3 + 84 | 0; //@line 5397
  HEAP32[$174 >> 2] = $42; //@line 5398
  $175 = $ReallocAsyncCtx3 + 88 | 0; //@line 5399
  HEAP32[$175 >> 2] = $44; //@line 5400
  $176 = $ReallocAsyncCtx3 + 92 | 0; //@line 5401
  HEAP32[$176 >> 2] = $46; //@line 5402
  $177 = $ReallocAsyncCtx3 + 96 | 0; //@line 5403
  HEAP32[$177 >> 2] = $48; //@line 5404
  $178 = $ReallocAsyncCtx3 + 100 | 0; //@line 5405
  HEAP32[$178 >> 2] = $50; //@line 5406
  sp = STACKTOP; //@line 5407
  return;
 }
 L9 : while (1) {
  $179 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 5411
  $180 = $179 + 76 | 0; //@line 5412
  $181 = HEAP32[$180 >> 2] | 0; //@line 5413
  if ($181 | 0) {
   if ($181 >>> 0 <= 100) {
    label = 26; //@line 5418
    break;
   }
   HEAP32[$180 >> 2] = $181 + -100; //@line 5422
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 5427
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 5427
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 5429
   $$131 = $$03071$reg2mem$0; //@line 5429
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 5432
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 5435
    break L9;
   }
   $52 = 6700 + ($$02972$reg2mem$1 << 2) | 0; //@line 5438
   $54 = HEAP32[$52 >> 2] | 0; //@line 5439
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 5451
   break;
  }
  $84 = $54 + 72 | 0; //@line 5454
  $85 = HEAP32[$84 >> 2] | 0; //@line 5455
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 5459
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 5460
   $$03071$reg2mem$0 = $$131; //@line 5460
   $$reg2mem$0 = $52; //@line 5460
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 5467
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 5470
    $$03071$reg2mem$0 = $$131; //@line 5470
    $$reg2mem$0 = $52; //@line 5470
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7580] = 0; //@line 5478
   return;
  }
  $246 = $$131 + 44 | 0; //@line 5481
  $247 = HEAP32[$246 >> 2] | 0; //@line 5482
  if (!$247) {
   $255 = $40 + 12 | 0; //@line 5485
   HEAP32[$255 >> 2] = 0; //@line 5486
   $257 = $38 + 4 | 0; //@line 5488
   HEAP32[$257 >> 2] = 0; //@line 5490
   HEAP32[$257 + 4 >> 2] = 0; //@line 5493
   HEAP32[$38 >> 2] = 3; //@line 5494
   $261 = $38 + 12 | 0; //@line 5495
   HEAP32[$261 >> 2] = 712; //@line 5496
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 5497
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($40, 100, $38) | 0; //@line 5498
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 5501
    $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 5502
    HEAP32[$262 >> 2] = $261; //@line 5503
    $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 5504
    HEAP32[$263 >> 2] = $255; //@line 5505
    $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 5506
    HEAP32[$264 >> 2] = $38; //@line 5507
    $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 5508
    HEAP32[$265 >> 2] = $40; //@line 5509
    sp = STACKTOP; //@line 5510
    return;
   }
   ___async_unwind = 0; //@line 5513
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 5514
   $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 5515
   HEAP32[$262 >> 2] = $261; //@line 5516
   $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 5517
   HEAP32[$263 >> 2] = $255; //@line 5518
   $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 5519
   HEAP32[$264 >> 2] = $38; //@line 5520
   $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 5521
   HEAP32[$265 >> 2] = $40; //@line 5522
   sp = STACKTOP; //@line 5523
   return;
  } else {
   $251 = HEAP32[$247 + 4 >> 2] | 0; //@line 5528
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 5529
   FUNCTION_TABLE_vii[$251 & 7]($40, $$131 + 32 | 0); //@line 5530
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 5533
    $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 5534
    HEAP32[$252 >> 2] = $246; //@line 5535
    $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 5536
    HEAP32[$253 >> 2] = $40; //@line 5537
    $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 5538
    HEAP32[$254 >> 2] = $38; //@line 5539
    sp = STACKTOP; //@line 5540
    return;
   }
   ___async_unwind = 0; //@line 5543
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 5544
   $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 5545
   HEAP32[$252 >> 2] = $246; //@line 5546
   $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 5547
   HEAP32[$253 >> 2] = $40; //@line 5548
   $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 5549
   HEAP32[$254 >> 2] = $38; //@line 5550
   sp = STACKTOP; //@line 5551
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 5556
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 5557
  __ZL28nsapi_dns_query_async_deletei($59); //@line 5558
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 5561
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 5562
   HEAP32[$60 >> 2] = $2; //@line 5563
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 5564
   HEAP32[$61 >> 2] = $4; //@line 5565
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 5566
   HEAP32[$62 >> 2] = $6; //@line 5567
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 5568
   HEAP32[$63 >> 2] = $8; //@line 5569
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 5570
   HEAP32[$64 >> 2] = $10; //@line 5571
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 5572
   HEAP32[$65 >> 2] = $12; //@line 5573
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 5574
   HEAP32[$66 >> 2] = $14; //@line 5575
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 5576
   HEAP32[$67 >> 2] = $16; //@line 5577
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 5578
   HEAP32[$68 >> 2] = $18; //@line 5579
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 5580
   HEAP32[$69 >> 2] = $40; //@line 5581
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 5582
   HEAP32[$70 >> 2] = $20; //@line 5583
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 5584
   HEAP32[$71 >> 2] = $24; //@line 5585
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 5586
   HEAP32[$72 >> 2] = $26; //@line 5587
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 5588
   HEAP32[$73 >> 2] = $28; //@line 5589
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 5590
   HEAP32[$74 >> 2] = $30; //@line 5591
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 5592
   HEAP32[$75 >> 2] = $32; //@line 5593
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 5594
   HEAP32[$76 >> 2] = $34; //@line 5595
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 5596
   HEAP32[$77 >> 2] = $36; //@line 5597
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 5598
   HEAP32[$78 >> 2] = $38; //@line 5599
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 5600
   HEAP32[$79 >> 2] = $42; //@line 5601
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 5602
   HEAP32[$80 >> 2] = $44; //@line 5603
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 5604
   HEAP32[$81 >> 2] = $46; //@line 5605
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 5606
   HEAP32[$82 >> 2] = $$131; //@line 5607
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 5608
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 5609
   sp = STACKTOP; //@line 5610
   return;
  }
  ___async_unwind = 0; //@line 5613
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 5614
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 5615
  HEAP32[$60 >> 2] = $2; //@line 5616
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 5617
  HEAP32[$61 >> 2] = $4; //@line 5618
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 5619
  HEAP32[$62 >> 2] = $6; //@line 5620
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 5621
  HEAP32[$63 >> 2] = $8; //@line 5622
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 5623
  HEAP32[$64 >> 2] = $10; //@line 5624
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 5625
  HEAP32[$65 >> 2] = $12; //@line 5626
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 5627
  HEAP32[$66 >> 2] = $14; //@line 5628
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 5629
  HEAP32[$67 >> 2] = $16; //@line 5630
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 5631
  HEAP32[$68 >> 2] = $18; //@line 5632
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 5633
  HEAP32[$69 >> 2] = $40; //@line 5634
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 5635
  HEAP32[$70 >> 2] = $20; //@line 5636
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 5637
  HEAP32[$71 >> 2] = $24; //@line 5638
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 5639
  HEAP32[$72 >> 2] = $26; //@line 5640
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 5641
  HEAP32[$73 >> 2] = $28; //@line 5642
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 5643
  HEAP32[$74 >> 2] = $30; //@line 5644
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 5645
  HEAP32[$75 >> 2] = $32; //@line 5646
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 5647
  HEAP32[$76 >> 2] = $34; //@line 5648
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 5649
  HEAP32[$77 >> 2] = $36; //@line 5650
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 5651
  HEAP32[$78 >> 2] = $38; //@line 5652
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 5653
  HEAP32[$79 >> 2] = $42; //@line 5654
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 5655
  HEAP32[$80 >> 2] = $44; //@line 5656
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 5657
  HEAP32[$81 >> 2] = $46; //@line 5658
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 5659
  HEAP32[$82 >> 2] = $$131; //@line 5660
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 5661
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 5662
  sp = STACKTOP; //@line 5663
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 5668
  $92 = $54 + 44 | 0; //@line 5669
  $93 = HEAP32[$92 >> 2] | 0; //@line 5670
  if (!$93) {
   HEAP32[$24 >> 2] = 0; //@line 5673
   $124 = HEAP32[$54 >> 2] | 0; //@line 5674
   HEAP32[$26 >> 2] = 0; //@line 5675
   HEAP32[$28 >> 2] = 175; //@line 5676
   HEAP32[$30 >> 2] = $124; //@line 5677
   HEAP32[$32 >> 2] = 724; //@line 5678
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 5679
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($34, 0, $36) | 0; //@line 5680
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 5683
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 5684
    HEAP32[$125 >> 2] = $2; //@line 5685
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 5686
    HEAP32[$126 >> 2] = $4; //@line 5687
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 5688
    HEAP32[$127 >> 2] = $6; //@line 5689
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 5690
    HEAP32[$128 >> 2] = $8; //@line 5691
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 5692
    HEAP32[$129 >> 2] = $10; //@line 5693
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 5694
    HEAP32[$130 >> 2] = $12; //@line 5695
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 5696
    HEAP32[$131 >> 2] = $14; //@line 5697
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 5698
    HEAP32[$132 >> 2] = $16; //@line 5699
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 5700
    HEAP32[$133 >> 2] = $18; //@line 5701
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 5702
    HEAP32[$134 >> 2] = $40; //@line 5703
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 5704
    HEAP32[$135 >> 2] = $20; //@line 5705
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 5706
    HEAP32[$136 >> 2] = $24; //@line 5707
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 5708
    HEAP32[$137 >> 2] = $26; //@line 5709
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 5710
    HEAP32[$138 >> 2] = $28; //@line 5711
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 5712
    HEAP32[$139 >> 2] = $30; //@line 5713
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 5714
    HEAP32[$140 >> 2] = $32; //@line 5715
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 5716
    HEAP32[$141 >> 2] = $34; //@line 5717
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 5718
    HEAP32[$142 >> 2] = $36; //@line 5719
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 5720
    HEAP32[$143 >> 2] = $38; //@line 5721
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 5722
    HEAP32[$144 >> 2] = $42; //@line 5723
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 5724
    HEAP32[$145 >> 2] = $44; //@line 5725
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 5726
    HEAP32[$146 >> 2] = $46; //@line 5727
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 5728
    HEAP32[$147 >> 2] = $$131; //@line 5729
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 5730
    HEAP32[$148 >> 2] = $$02972$reg2mem$1; //@line 5731
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 5732
    HEAP32[$149 >> 2] = $52; //@line 5733
    sp = STACKTOP; //@line 5734
    return;
   }
   ___async_unwind = 0; //@line 5737
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 5738
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 5739
   HEAP32[$125 >> 2] = $2; //@line 5740
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 5741
   HEAP32[$126 >> 2] = $4; //@line 5742
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 5743
   HEAP32[$127 >> 2] = $6; //@line 5744
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 5745
   HEAP32[$128 >> 2] = $8; //@line 5746
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 5747
   HEAP32[$129 >> 2] = $10; //@line 5748
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 5749
   HEAP32[$130 >> 2] = $12; //@line 5750
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 5751
   HEAP32[$131 >> 2] = $14; //@line 5752
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 5753
   HEAP32[$132 >> 2] = $16; //@line 5754
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 5755
   HEAP32[$133 >> 2] = $18; //@line 5756
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 5757
   HEAP32[$134 >> 2] = $40; //@line 5758
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 5759
   HEAP32[$135 >> 2] = $20; //@line 5760
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 5761
   HEAP32[$136 >> 2] = $24; //@line 5762
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 5763
   HEAP32[$137 >> 2] = $26; //@line 5764
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 5765
   HEAP32[$138 >> 2] = $28; //@line 5766
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 5767
   HEAP32[$139 >> 2] = $30; //@line 5768
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 5769
   HEAP32[$140 >> 2] = $32; //@line 5770
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 5771
   HEAP32[$141 >> 2] = $34; //@line 5772
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 5773
   HEAP32[$142 >> 2] = $36; //@line 5774
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 5775
   HEAP32[$143 >> 2] = $38; //@line 5776
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 5777
   HEAP32[$144 >> 2] = $42; //@line 5778
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 5779
   HEAP32[$145 >> 2] = $44; //@line 5780
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 5781
   HEAP32[$146 >> 2] = $46; //@line 5782
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 5783
   HEAP32[$147 >> 2] = $$131; //@line 5784
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 5785
   HEAP32[$148 >> 2] = $$02972$reg2mem$1; //@line 5786
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 5787
   HEAP32[$149 >> 2] = $52; //@line 5788
   sp = STACKTOP; //@line 5789
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 5794
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 5795
   FUNCTION_TABLE_vii[$97 & 7]($42, $54 + 32 | 0); //@line 5796
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 5799
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 5800
    HEAP32[$98 >> 2] = $2; //@line 5801
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 5802
    HEAP32[$99 >> 2] = $4; //@line 5803
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 5804
    HEAP32[$100 >> 2] = $6; //@line 5805
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 5806
    HEAP32[$101 >> 2] = $8; //@line 5807
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 5808
    HEAP32[$102 >> 2] = $10; //@line 5809
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 5810
    HEAP32[$103 >> 2] = $12; //@line 5811
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 5812
    HEAP32[$104 >> 2] = $14; //@line 5813
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 5814
    HEAP32[$105 >> 2] = $16; //@line 5815
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 5816
    HEAP32[$106 >> 2] = $18; //@line 5817
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 5818
    HEAP32[$107 >> 2] = $20; //@line 5819
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 5820
    HEAP32[$108 >> 2] = $52; //@line 5821
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 5822
    HEAP32[$109 >> 2] = $24; //@line 5823
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 5824
    HEAP32[$110 >> 2] = $26; //@line 5825
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 5826
    HEAP32[$111 >> 2] = $28; //@line 5827
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 5828
    HEAP32[$112 >> 2] = $30; //@line 5829
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 5830
    HEAP32[$113 >> 2] = $32; //@line 5831
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 5832
    HEAP32[$114 >> 2] = $34; //@line 5833
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 5834
    HEAP32[$115 >> 2] = $36; //@line 5835
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 5836
    HEAP32[$116 >> 2] = $38; //@line 5837
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 5838
    HEAP32[$117 >> 2] = $40; //@line 5839
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 5840
    HEAP32[$118 >> 2] = $42; //@line 5841
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 5842
    HEAP32[$119 >> 2] = $44; //@line 5843
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 5844
    HEAP32[$120 >> 2] = $46; //@line 5845
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 5846
    HEAP32[$121 >> 2] = $$131; //@line 5847
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 5848
    HEAP32[$122 >> 2] = $92; //@line 5849
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 5850
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 5851
    sp = STACKTOP; //@line 5852
    return;
   }
   ___async_unwind = 0; //@line 5855
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 5856
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 5857
   HEAP32[$98 >> 2] = $2; //@line 5858
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 5859
   HEAP32[$99 >> 2] = $4; //@line 5860
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 5861
   HEAP32[$100 >> 2] = $6; //@line 5862
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 5863
   HEAP32[$101 >> 2] = $8; //@line 5864
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 5865
   HEAP32[$102 >> 2] = $10; //@line 5866
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 5867
   HEAP32[$103 >> 2] = $12; //@line 5868
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 5869
   HEAP32[$104 >> 2] = $14; //@line 5870
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 5871
   HEAP32[$105 >> 2] = $16; //@line 5872
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 5873
   HEAP32[$106 >> 2] = $18; //@line 5874
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 5875
   HEAP32[$107 >> 2] = $20; //@line 5876
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 5877
   HEAP32[$108 >> 2] = $52; //@line 5878
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 5879
   HEAP32[$109 >> 2] = $24; //@line 5880
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 5881
   HEAP32[$110 >> 2] = $26; //@line 5882
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 5883
   HEAP32[$111 >> 2] = $28; //@line 5884
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 5885
   HEAP32[$112 >> 2] = $30; //@line 5886
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 5887
   HEAP32[$113 >> 2] = $32; //@line 5888
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 5889
   HEAP32[$114 >> 2] = $34; //@line 5890
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 5891
   HEAP32[$115 >> 2] = $36; //@line 5892
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 5893
   HEAP32[$116 >> 2] = $38; //@line 5894
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 5895
   HEAP32[$117 >> 2] = $40; //@line 5896
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 5897
   HEAP32[$118 >> 2] = $42; //@line 5898
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 5899
   HEAP32[$119 >> 2] = $44; //@line 5900
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 5901
   HEAP32[$120 >> 2] = $46; //@line 5902
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 5903
   HEAP32[$121 >> 2] = $$131; //@line 5904
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 5905
   HEAP32[$122 >> 2] = $92; //@line 5906
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 5907
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 5908
   sp = STACKTOP; //@line 5909
   return;
  }
 } else if ((label | 0) == 26) {
  HEAP32[$180 >> 2] = 0; //@line 5914
  $185 = $179 + 44 | 0; //@line 5915
  $186 = HEAP32[$185 >> 2] | 0; //@line 5916
  if (!$186) {
   HEAP32[$6 >> 2] = 0; //@line 5919
   $217 = HEAP32[$179 >> 2] | 0; //@line 5920
   HEAP32[$8 >> 2] = 0; //@line 5921
   HEAP32[$10 >> 2] = 180; //@line 5922
   HEAP32[$12 >> 2] = $217; //@line 5923
   HEAP32[$14 >> 2] = 724; //@line 5924
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 5925
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 0, $18) | 0; //@line 5926
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 5929
    $218 = $ReallocAsyncCtx13 + 4 | 0; //@line 5930
    HEAP32[$218 >> 2] = $2; //@line 5931
    $219 = $ReallocAsyncCtx13 + 8 | 0; //@line 5932
    HEAP32[$219 >> 2] = $4; //@line 5933
    $220 = $ReallocAsyncCtx13 + 12 | 0; //@line 5934
    HEAP32[$220 >> 2] = $6; //@line 5935
    $221 = $ReallocAsyncCtx13 + 16 | 0; //@line 5936
    HEAP32[$221 >> 2] = $8; //@line 5937
    $222 = $ReallocAsyncCtx13 + 20 | 0; //@line 5938
    HEAP32[$222 >> 2] = $10; //@line 5939
    $223 = $ReallocAsyncCtx13 + 24 | 0; //@line 5940
    HEAP32[$223 >> 2] = $12; //@line 5941
    $224 = $ReallocAsyncCtx13 + 28 | 0; //@line 5942
    HEAP32[$224 >> 2] = $14; //@line 5943
    $225 = $ReallocAsyncCtx13 + 32 | 0; //@line 5944
    HEAP32[$225 >> 2] = $16; //@line 5945
    $226 = $ReallocAsyncCtx13 + 36 | 0; //@line 5946
    HEAP32[$226 >> 2] = $18; //@line 5947
    $227 = $ReallocAsyncCtx13 + 40 | 0; //@line 5948
    HEAP32[$227 >> 2] = $40; //@line 5949
    $228 = $ReallocAsyncCtx13 + 44 | 0; //@line 5950
    HEAP32[$228 >> 2] = $20; //@line 5951
    $229 = $ReallocAsyncCtx13 + 48 | 0; //@line 5952
    HEAP32[$229 >> 2] = $24; //@line 5953
    $230 = $ReallocAsyncCtx13 + 52 | 0; //@line 5954
    HEAP32[$230 >> 2] = $26; //@line 5955
    $231 = $ReallocAsyncCtx13 + 56 | 0; //@line 5956
    HEAP32[$231 >> 2] = $28; //@line 5957
    $232 = $ReallocAsyncCtx13 + 60 | 0; //@line 5958
    HEAP32[$232 >> 2] = $30; //@line 5959
    $233 = $ReallocAsyncCtx13 + 64 | 0; //@line 5960
    HEAP32[$233 >> 2] = $32; //@line 5961
    $234 = $ReallocAsyncCtx13 + 68 | 0; //@line 5962
    HEAP32[$234 >> 2] = $34; //@line 5963
    $235 = $ReallocAsyncCtx13 + 72 | 0; //@line 5964
    HEAP32[$235 >> 2] = $36; //@line 5965
    $236 = $ReallocAsyncCtx13 + 76 | 0; //@line 5966
    HEAP32[$236 >> 2] = $38; //@line 5967
    $237 = $ReallocAsyncCtx13 + 80 | 0; //@line 5968
    HEAP32[$237 >> 2] = $42; //@line 5969
    $238 = $ReallocAsyncCtx13 + 84 | 0; //@line 5970
    HEAP32[$238 >> 2] = $44; //@line 5971
    $239 = $ReallocAsyncCtx13 + 88 | 0; //@line 5972
    HEAP32[$239 >> 2] = $46; //@line 5973
    $240 = $ReallocAsyncCtx13 + 92 | 0; //@line 5974
    HEAP32[$240 >> 2] = $$03071$reg2mem$0; //@line 5975
    $241 = $ReallocAsyncCtx13 + 96 | 0; //@line 5976
    HEAP32[$241 >> 2] = $$02972$reg2mem$0; //@line 5977
    $242 = $ReallocAsyncCtx13 + 100 | 0; //@line 5978
    HEAP32[$242 >> 2] = $$reg2mem$0; //@line 5979
    sp = STACKTOP; //@line 5980
    return;
   }
   ___async_unwind = 0; //@line 5983
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 5984
   $218 = $ReallocAsyncCtx13 + 4 | 0; //@line 5985
   HEAP32[$218 >> 2] = $2; //@line 5986
   $219 = $ReallocAsyncCtx13 + 8 | 0; //@line 5987
   HEAP32[$219 >> 2] = $4; //@line 5988
   $220 = $ReallocAsyncCtx13 + 12 | 0; //@line 5989
   HEAP32[$220 >> 2] = $6; //@line 5990
   $221 = $ReallocAsyncCtx13 + 16 | 0; //@line 5991
   HEAP32[$221 >> 2] = $8; //@line 5992
   $222 = $ReallocAsyncCtx13 + 20 | 0; //@line 5993
   HEAP32[$222 >> 2] = $10; //@line 5994
   $223 = $ReallocAsyncCtx13 + 24 | 0; //@line 5995
   HEAP32[$223 >> 2] = $12; //@line 5996
   $224 = $ReallocAsyncCtx13 + 28 | 0; //@line 5997
   HEAP32[$224 >> 2] = $14; //@line 5998
   $225 = $ReallocAsyncCtx13 + 32 | 0; //@line 5999
   HEAP32[$225 >> 2] = $16; //@line 6000
   $226 = $ReallocAsyncCtx13 + 36 | 0; //@line 6001
   HEAP32[$226 >> 2] = $18; //@line 6002
   $227 = $ReallocAsyncCtx13 + 40 | 0; //@line 6003
   HEAP32[$227 >> 2] = $40; //@line 6004
   $228 = $ReallocAsyncCtx13 + 44 | 0; //@line 6005
   HEAP32[$228 >> 2] = $20; //@line 6006
   $229 = $ReallocAsyncCtx13 + 48 | 0; //@line 6007
   HEAP32[$229 >> 2] = $24; //@line 6008
   $230 = $ReallocAsyncCtx13 + 52 | 0; //@line 6009
   HEAP32[$230 >> 2] = $26; //@line 6010
   $231 = $ReallocAsyncCtx13 + 56 | 0; //@line 6011
   HEAP32[$231 >> 2] = $28; //@line 6012
   $232 = $ReallocAsyncCtx13 + 60 | 0; //@line 6013
   HEAP32[$232 >> 2] = $30; //@line 6014
   $233 = $ReallocAsyncCtx13 + 64 | 0; //@line 6015
   HEAP32[$233 >> 2] = $32; //@line 6016
   $234 = $ReallocAsyncCtx13 + 68 | 0; //@line 6017
   HEAP32[$234 >> 2] = $34; //@line 6018
   $235 = $ReallocAsyncCtx13 + 72 | 0; //@line 6019
   HEAP32[$235 >> 2] = $36; //@line 6020
   $236 = $ReallocAsyncCtx13 + 76 | 0; //@line 6021
   HEAP32[$236 >> 2] = $38; //@line 6022
   $237 = $ReallocAsyncCtx13 + 80 | 0; //@line 6023
   HEAP32[$237 >> 2] = $42; //@line 6024
   $238 = $ReallocAsyncCtx13 + 84 | 0; //@line 6025
   HEAP32[$238 >> 2] = $44; //@line 6026
   $239 = $ReallocAsyncCtx13 + 88 | 0; //@line 6027
   HEAP32[$239 >> 2] = $46; //@line 6028
   $240 = $ReallocAsyncCtx13 + 92 | 0; //@line 6029
   HEAP32[$240 >> 2] = $$03071$reg2mem$0; //@line 6030
   $241 = $ReallocAsyncCtx13 + 96 | 0; //@line 6031
   HEAP32[$241 >> 2] = $$02972$reg2mem$0; //@line 6032
   $242 = $ReallocAsyncCtx13 + 100 | 0; //@line 6033
   HEAP32[$242 >> 2] = $$reg2mem$0; //@line 6034
   sp = STACKTOP; //@line 6035
   return;
  } else {
   $190 = HEAP32[$186 + 4 >> 2] | 0; //@line 6040
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 6041
   FUNCTION_TABLE_vii[$190 & 7]($4, $179 + 32 | 0); //@line 6042
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 6045
    $191 = $ReallocAsyncCtx4 + 4 | 0; //@line 6046
    HEAP32[$191 >> 2] = $2; //@line 6047
    $192 = $ReallocAsyncCtx4 + 8 | 0; //@line 6048
    HEAP32[$192 >> 2] = $4; //@line 6049
    $193 = $ReallocAsyncCtx4 + 12 | 0; //@line 6050
    HEAP32[$193 >> 2] = $6; //@line 6051
    $194 = $ReallocAsyncCtx4 + 16 | 0; //@line 6052
    HEAP32[$194 >> 2] = $8; //@line 6053
    $195 = $ReallocAsyncCtx4 + 20 | 0; //@line 6054
    HEAP32[$195 >> 2] = $10; //@line 6055
    $196 = $ReallocAsyncCtx4 + 24 | 0; //@line 6056
    HEAP32[$196 >> 2] = $12; //@line 6057
    $197 = $ReallocAsyncCtx4 + 28 | 0; //@line 6058
    HEAP32[$197 >> 2] = $14; //@line 6059
    $198 = $ReallocAsyncCtx4 + 32 | 0; //@line 6060
    HEAP32[$198 >> 2] = $16; //@line 6061
    $199 = $ReallocAsyncCtx4 + 36 | 0; //@line 6062
    HEAP32[$199 >> 2] = $18; //@line 6063
    $200 = $ReallocAsyncCtx4 + 40 | 0; //@line 6064
    HEAP32[$200 >> 2] = $20; //@line 6065
    $201 = $ReallocAsyncCtx4 + 44 | 0; //@line 6066
    HEAP32[$201 >> 2] = $185; //@line 6067
    $202 = $ReallocAsyncCtx4 + 48 | 0; //@line 6068
    HEAP32[$202 >> 2] = $$reg2mem$0; //@line 6069
    $203 = $ReallocAsyncCtx4 + 52 | 0; //@line 6070
    HEAP32[$203 >> 2] = $24; //@line 6071
    $204 = $ReallocAsyncCtx4 + 56 | 0; //@line 6072
    HEAP32[$204 >> 2] = $26; //@line 6073
    $205 = $ReallocAsyncCtx4 + 60 | 0; //@line 6074
    HEAP32[$205 >> 2] = $28; //@line 6075
    $206 = $ReallocAsyncCtx4 + 64 | 0; //@line 6076
    HEAP32[$206 >> 2] = $30; //@line 6077
    $207 = $ReallocAsyncCtx4 + 68 | 0; //@line 6078
    HEAP32[$207 >> 2] = $32; //@line 6079
    $208 = $ReallocAsyncCtx4 + 72 | 0; //@line 6080
    HEAP32[$208 >> 2] = $34; //@line 6081
    $209 = $ReallocAsyncCtx4 + 76 | 0; //@line 6082
    HEAP32[$209 >> 2] = $36; //@line 6083
    $210 = $ReallocAsyncCtx4 + 80 | 0; //@line 6084
    HEAP32[$210 >> 2] = $38; //@line 6085
    $211 = $ReallocAsyncCtx4 + 84 | 0; //@line 6086
    HEAP32[$211 >> 2] = $40; //@line 6087
    $212 = $ReallocAsyncCtx4 + 88 | 0; //@line 6088
    HEAP32[$212 >> 2] = $42; //@line 6089
    $213 = $ReallocAsyncCtx4 + 92 | 0; //@line 6090
    HEAP32[$213 >> 2] = $44; //@line 6091
    $214 = $ReallocAsyncCtx4 + 96 | 0; //@line 6092
    HEAP32[$214 >> 2] = $46; //@line 6093
    $215 = $ReallocAsyncCtx4 + 100 | 0; //@line 6094
    HEAP32[$215 >> 2] = $$03071$reg2mem$0; //@line 6095
    $216 = $ReallocAsyncCtx4 + 104 | 0; //@line 6096
    HEAP32[$216 >> 2] = $$02972$reg2mem$0; //@line 6097
    sp = STACKTOP; //@line 6098
    return;
   }
   ___async_unwind = 0; //@line 6101
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 6102
   $191 = $ReallocAsyncCtx4 + 4 | 0; //@line 6103
   HEAP32[$191 >> 2] = $2; //@line 6104
   $192 = $ReallocAsyncCtx4 + 8 | 0; //@line 6105
   HEAP32[$192 >> 2] = $4; //@line 6106
   $193 = $ReallocAsyncCtx4 + 12 | 0; //@line 6107
   HEAP32[$193 >> 2] = $6; //@line 6108
   $194 = $ReallocAsyncCtx4 + 16 | 0; //@line 6109
   HEAP32[$194 >> 2] = $8; //@line 6110
   $195 = $ReallocAsyncCtx4 + 20 | 0; //@line 6111
   HEAP32[$195 >> 2] = $10; //@line 6112
   $196 = $ReallocAsyncCtx4 + 24 | 0; //@line 6113
   HEAP32[$196 >> 2] = $12; //@line 6114
   $197 = $ReallocAsyncCtx4 + 28 | 0; //@line 6115
   HEAP32[$197 >> 2] = $14; //@line 6116
   $198 = $ReallocAsyncCtx4 + 32 | 0; //@line 6117
   HEAP32[$198 >> 2] = $16; //@line 6118
   $199 = $ReallocAsyncCtx4 + 36 | 0; //@line 6119
   HEAP32[$199 >> 2] = $18; //@line 6120
   $200 = $ReallocAsyncCtx4 + 40 | 0; //@line 6121
   HEAP32[$200 >> 2] = $20; //@line 6122
   $201 = $ReallocAsyncCtx4 + 44 | 0; //@line 6123
   HEAP32[$201 >> 2] = $185; //@line 6124
   $202 = $ReallocAsyncCtx4 + 48 | 0; //@line 6125
   HEAP32[$202 >> 2] = $$reg2mem$0; //@line 6126
   $203 = $ReallocAsyncCtx4 + 52 | 0; //@line 6127
   HEAP32[$203 >> 2] = $24; //@line 6128
   $204 = $ReallocAsyncCtx4 + 56 | 0; //@line 6129
   HEAP32[$204 >> 2] = $26; //@line 6130
   $205 = $ReallocAsyncCtx4 + 60 | 0; //@line 6131
   HEAP32[$205 >> 2] = $28; //@line 6132
   $206 = $ReallocAsyncCtx4 + 64 | 0; //@line 6133
   HEAP32[$206 >> 2] = $30; //@line 6134
   $207 = $ReallocAsyncCtx4 + 68 | 0; //@line 6135
   HEAP32[$207 >> 2] = $32; //@line 6136
   $208 = $ReallocAsyncCtx4 + 72 | 0; //@line 6137
   HEAP32[$208 >> 2] = $34; //@line 6138
   $209 = $ReallocAsyncCtx4 + 76 | 0; //@line 6139
   HEAP32[$209 >> 2] = $36; //@line 6140
   $210 = $ReallocAsyncCtx4 + 80 | 0; //@line 6141
   HEAP32[$210 >> 2] = $38; //@line 6142
   $211 = $ReallocAsyncCtx4 + 84 | 0; //@line 6143
   HEAP32[$211 >> 2] = $40; //@line 6144
   $212 = $ReallocAsyncCtx4 + 88 | 0; //@line 6145
   HEAP32[$212 >> 2] = $42; //@line 6146
   $213 = $ReallocAsyncCtx4 + 92 | 0; //@line 6147
   HEAP32[$213 >> 2] = $44; //@line 6148
   $214 = $ReallocAsyncCtx4 + 96 | 0; //@line 6149
   HEAP32[$214 >> 2] = $46; //@line 6150
   $215 = $ReallocAsyncCtx4 + 100 | 0; //@line 6151
   HEAP32[$215 >> 2] = $$03071$reg2mem$0; //@line 6152
   $216 = $ReallocAsyncCtx4 + 104 | 0; //@line 6153
   HEAP32[$216 >> 2] = $$02972$reg2mem$0; //@line 6154
   sp = STACKTOP; //@line 6155
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_153($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $246 = 0, $247 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 7122
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7124
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7126
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7128
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7130
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7132
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7134
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7136
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7138
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7140
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7142
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7144
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7146
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7148
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7150
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7152
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 7154
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 7156
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 7158
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 7160
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 7162
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 7164
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 7166
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 7168
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 7170
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 7172
 $214 = HEAP32[$20 >> 2] | 0; //@line 7173
 if (!$214) {
  $$02972$reg2mem$0 = $48; //@line 7176
  $$03071$reg2mem$0 = $46; //@line 7176
  $$reg2mem$0 = $50; //@line 7176
 } else {
  $217 = HEAP32[$214 + 8 >> 2] | 0; //@line 7179
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 7180
  FUNCTION_TABLE_vi[$217 & 511]($4); //@line 7181
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 183; //@line 7184
   $218 = $ReallocAsyncCtx6 + 4 | 0; //@line 7185
   HEAP32[$218 >> 2] = $2; //@line 7186
   $219 = $ReallocAsyncCtx6 + 8 | 0; //@line 7187
   HEAP32[$219 >> 2] = $4; //@line 7188
   $220 = $ReallocAsyncCtx6 + 12 | 0; //@line 7189
   HEAP32[$220 >> 2] = $6; //@line 7190
   $221 = $ReallocAsyncCtx6 + 16 | 0; //@line 7191
   HEAP32[$221 >> 2] = $8; //@line 7192
   $222 = $ReallocAsyncCtx6 + 20 | 0; //@line 7193
   HEAP32[$222 >> 2] = $10; //@line 7194
   $223 = $ReallocAsyncCtx6 + 24 | 0; //@line 7195
   HEAP32[$223 >> 2] = $12; //@line 7196
   $224 = $ReallocAsyncCtx6 + 28 | 0; //@line 7197
   HEAP32[$224 >> 2] = $14; //@line 7198
   $225 = $ReallocAsyncCtx6 + 32 | 0; //@line 7199
   HEAP32[$225 >> 2] = $16; //@line 7200
   $226 = $ReallocAsyncCtx6 + 36 | 0; //@line 7201
   HEAP32[$226 >> 2] = $18; //@line 7202
   $227 = $ReallocAsyncCtx6 + 40 | 0; //@line 7203
   HEAP32[$227 >> 2] = $20; //@line 7204
   $228 = $ReallocAsyncCtx6 + 44 | 0; //@line 7205
   HEAP32[$228 >> 2] = $22; //@line 7206
   $229 = $ReallocAsyncCtx6 + 48 | 0; //@line 7207
   HEAP32[$229 >> 2] = $24; //@line 7208
   $230 = $ReallocAsyncCtx6 + 52 | 0; //@line 7209
   HEAP32[$230 >> 2] = $26; //@line 7210
   $231 = $ReallocAsyncCtx6 + 56 | 0; //@line 7211
   HEAP32[$231 >> 2] = $28; //@line 7212
   $232 = $ReallocAsyncCtx6 + 60 | 0; //@line 7213
   HEAP32[$232 >> 2] = $30; //@line 7214
   $233 = $ReallocAsyncCtx6 + 64 | 0; //@line 7215
   HEAP32[$233 >> 2] = $32; //@line 7216
   $234 = $ReallocAsyncCtx6 + 68 | 0; //@line 7217
   HEAP32[$234 >> 2] = $34; //@line 7218
   $235 = $ReallocAsyncCtx6 + 72 | 0; //@line 7219
   HEAP32[$235 >> 2] = $36; //@line 7220
   $236 = $ReallocAsyncCtx6 + 76 | 0; //@line 7221
   HEAP32[$236 >> 2] = $38; //@line 7222
   $237 = $ReallocAsyncCtx6 + 80 | 0; //@line 7223
   HEAP32[$237 >> 2] = $40; //@line 7224
   $238 = $ReallocAsyncCtx6 + 84 | 0; //@line 7225
   HEAP32[$238 >> 2] = $42; //@line 7226
   $239 = $ReallocAsyncCtx6 + 88 | 0; //@line 7227
   HEAP32[$239 >> 2] = $44; //@line 7228
   $240 = $ReallocAsyncCtx6 + 92 | 0; //@line 7229
   HEAP32[$240 >> 2] = $46; //@line 7230
   $241 = $ReallocAsyncCtx6 + 96 | 0; //@line 7231
   HEAP32[$241 >> 2] = $48; //@line 7232
   $242 = $ReallocAsyncCtx6 + 100 | 0; //@line 7233
   HEAP32[$242 >> 2] = $50; //@line 7234
   sp = STACKTOP; //@line 7235
   return;
  }
  ___async_unwind = 0; //@line 7238
  HEAP32[$ReallocAsyncCtx6 >> 2] = 183; //@line 7239
  $218 = $ReallocAsyncCtx6 + 4 | 0; //@line 7240
  HEAP32[$218 >> 2] = $2; //@line 7241
  $219 = $ReallocAsyncCtx6 + 8 | 0; //@line 7242
  HEAP32[$219 >> 2] = $4; //@line 7243
  $220 = $ReallocAsyncCtx6 + 12 | 0; //@line 7244
  HEAP32[$220 >> 2] = $6; //@line 7245
  $221 = $ReallocAsyncCtx6 + 16 | 0; //@line 7246
  HEAP32[$221 >> 2] = $8; //@line 7247
  $222 = $ReallocAsyncCtx6 + 20 | 0; //@line 7248
  HEAP32[$222 >> 2] = $10; //@line 7249
  $223 = $ReallocAsyncCtx6 + 24 | 0; //@line 7250
  HEAP32[$223 >> 2] = $12; //@line 7251
  $224 = $ReallocAsyncCtx6 + 28 | 0; //@line 7252
  HEAP32[$224 >> 2] = $14; //@line 7253
  $225 = $ReallocAsyncCtx6 + 32 | 0; //@line 7254
  HEAP32[$225 >> 2] = $16; //@line 7255
  $226 = $ReallocAsyncCtx6 + 36 | 0; //@line 7256
  HEAP32[$226 >> 2] = $18; //@line 7257
  $227 = $ReallocAsyncCtx6 + 40 | 0; //@line 7258
  HEAP32[$227 >> 2] = $20; //@line 7259
  $228 = $ReallocAsyncCtx6 + 44 | 0; //@line 7260
  HEAP32[$228 >> 2] = $22; //@line 7261
  $229 = $ReallocAsyncCtx6 + 48 | 0; //@line 7262
  HEAP32[$229 >> 2] = $24; //@line 7263
  $230 = $ReallocAsyncCtx6 + 52 | 0; //@line 7264
  HEAP32[$230 >> 2] = $26; //@line 7265
  $231 = $ReallocAsyncCtx6 + 56 | 0; //@line 7266
  HEAP32[$231 >> 2] = $28; //@line 7267
  $232 = $ReallocAsyncCtx6 + 60 | 0; //@line 7268
  HEAP32[$232 >> 2] = $30; //@line 7269
  $233 = $ReallocAsyncCtx6 + 64 | 0; //@line 7270
  HEAP32[$233 >> 2] = $32; //@line 7271
  $234 = $ReallocAsyncCtx6 + 68 | 0; //@line 7272
  HEAP32[$234 >> 2] = $34; //@line 7273
  $235 = $ReallocAsyncCtx6 + 72 | 0; //@line 7274
  HEAP32[$235 >> 2] = $36; //@line 7275
  $236 = $ReallocAsyncCtx6 + 76 | 0; //@line 7276
  HEAP32[$236 >> 2] = $38; //@line 7277
  $237 = $ReallocAsyncCtx6 + 80 | 0; //@line 7278
  HEAP32[$237 >> 2] = $40; //@line 7279
  $238 = $ReallocAsyncCtx6 + 84 | 0; //@line 7280
  HEAP32[$238 >> 2] = $42; //@line 7281
  $239 = $ReallocAsyncCtx6 + 88 | 0; //@line 7282
  HEAP32[$239 >> 2] = $44; //@line 7283
  $240 = $ReallocAsyncCtx6 + 92 | 0; //@line 7284
  HEAP32[$240 >> 2] = $46; //@line 7285
  $241 = $ReallocAsyncCtx6 + 96 | 0; //@line 7286
  HEAP32[$241 >> 2] = $48; //@line 7287
  $242 = $ReallocAsyncCtx6 + 100 | 0; //@line 7288
  HEAP32[$242 >> 2] = $50; //@line 7289
  sp = STACKTOP; //@line 7290
  return;
 }
 L9 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 7297
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 7297
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 7299
   $$131 = $$03071$reg2mem$0; //@line 7299
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 7302
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 7305
    break L9;
   }
   $52 = 6700 + ($$02972$reg2mem$1 << 2) | 0; //@line 7308
   $54 = HEAP32[$52 >> 2] | 0; //@line 7309
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 7321
   break;
  }
  $84 = $54 + 72 | 0; //@line 7324
  $85 = HEAP32[$84 >> 2] | 0; //@line 7325
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 7329
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 7335
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 7339
  $151 = $150 + 76 | 0; //@line 7340
  $152 = HEAP32[$151 >> 2] | 0; //@line 7341
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 7344
   $$03071$reg2mem$0 = $$131; //@line 7344
   $$reg2mem$0 = $52; //@line 7344
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 7349
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 7353
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 7354
  $$03071$reg2mem$0 = $$131; //@line 7354
  $$reg2mem$0 = $52; //@line 7354
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7580] = 0; //@line 7359
   return;
  }
  $246 = $$131 + 44 | 0; //@line 7362
  $247 = HEAP32[$246 >> 2] | 0; //@line 7363
  if (!$247) {
   $255 = $38 + 12 | 0; //@line 7366
   HEAP32[$255 >> 2] = 0; //@line 7367
   $257 = $36 + 4 | 0; //@line 7369
   HEAP32[$257 >> 2] = 0; //@line 7371
   HEAP32[$257 + 4 >> 2] = 0; //@line 7374
   HEAP32[$36 >> 2] = 3; //@line 7375
   $261 = $36 + 12 | 0; //@line 7376
   HEAP32[$261 >> 2] = 712; //@line 7377
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 7378
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($38, 100, $36) | 0; //@line 7379
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 7382
    $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 7383
    HEAP32[$262 >> 2] = $261; //@line 7384
    $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 7385
    HEAP32[$263 >> 2] = $255; //@line 7386
    $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 7387
    HEAP32[$264 >> 2] = $36; //@line 7388
    $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 7389
    HEAP32[$265 >> 2] = $38; //@line 7390
    sp = STACKTOP; //@line 7391
    return;
   }
   ___async_unwind = 0; //@line 7394
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 7395
   $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 7396
   HEAP32[$262 >> 2] = $261; //@line 7397
   $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 7398
   HEAP32[$263 >> 2] = $255; //@line 7399
   $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 7400
   HEAP32[$264 >> 2] = $36; //@line 7401
   $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 7402
   HEAP32[$265 >> 2] = $38; //@line 7403
   sp = STACKTOP; //@line 7404
   return;
  } else {
   $251 = HEAP32[$247 + 4 >> 2] | 0; //@line 7409
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 7410
   FUNCTION_TABLE_vii[$251 & 7]($38, $$131 + 32 | 0); //@line 7411
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 7414
    $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 7415
    HEAP32[$252 >> 2] = $246; //@line 7416
    $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 7417
    HEAP32[$253 >> 2] = $38; //@line 7418
    $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 7419
    HEAP32[$254 >> 2] = $36; //@line 7420
    sp = STACKTOP; //@line 7421
    return;
   }
   ___async_unwind = 0; //@line 7424
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 7425
   $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 7426
   HEAP32[$252 >> 2] = $246; //@line 7427
   $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 7428
   HEAP32[$253 >> 2] = $38; //@line 7429
   $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 7430
   HEAP32[$254 >> 2] = $36; //@line 7431
   sp = STACKTOP; //@line 7432
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 7437
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 7438
  __ZL28nsapi_dns_query_async_deletei($59); //@line 7439
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 7442
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 7443
   HEAP32[$60 >> 2] = $2; //@line 7444
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 7445
   HEAP32[$61 >> 2] = $4; //@line 7446
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 7447
   HEAP32[$62 >> 2] = $6; //@line 7448
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 7449
   HEAP32[$63 >> 2] = $8; //@line 7450
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 7451
   HEAP32[$64 >> 2] = $10; //@line 7452
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 7453
   HEAP32[$65 >> 2] = $12; //@line 7454
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 7455
   HEAP32[$66 >> 2] = $14; //@line 7456
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 7457
   HEAP32[$67 >> 2] = $16; //@line 7458
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 7459
   HEAP32[$68 >> 2] = $18; //@line 7460
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 7461
   HEAP32[$69 >> 2] = $38; //@line 7462
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 7463
   HEAP32[$70 >> 2] = $20; //@line 7464
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 7465
   HEAP32[$71 >> 2] = $22; //@line 7466
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 7467
   HEAP32[$72 >> 2] = $24; //@line 7468
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 7469
   HEAP32[$73 >> 2] = $26; //@line 7470
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 7471
   HEAP32[$74 >> 2] = $28; //@line 7472
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 7473
   HEAP32[$75 >> 2] = $30; //@line 7474
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 7475
   HEAP32[$76 >> 2] = $32; //@line 7476
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 7477
   HEAP32[$77 >> 2] = $34; //@line 7478
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 7479
   HEAP32[$78 >> 2] = $36; //@line 7480
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 7481
   HEAP32[$79 >> 2] = $40; //@line 7482
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 7483
   HEAP32[$80 >> 2] = $42; //@line 7484
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 7485
   HEAP32[$81 >> 2] = $44; //@line 7486
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 7487
   HEAP32[$82 >> 2] = $$131; //@line 7488
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 7489
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 7490
   sp = STACKTOP; //@line 7491
   return;
  }
  ___async_unwind = 0; //@line 7494
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 7495
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 7496
  HEAP32[$60 >> 2] = $2; //@line 7497
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 7498
  HEAP32[$61 >> 2] = $4; //@line 7499
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 7500
  HEAP32[$62 >> 2] = $6; //@line 7501
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 7502
  HEAP32[$63 >> 2] = $8; //@line 7503
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 7504
  HEAP32[$64 >> 2] = $10; //@line 7505
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 7506
  HEAP32[$65 >> 2] = $12; //@line 7507
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 7508
  HEAP32[$66 >> 2] = $14; //@line 7509
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 7510
  HEAP32[$67 >> 2] = $16; //@line 7511
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 7512
  HEAP32[$68 >> 2] = $18; //@line 7513
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 7514
  HEAP32[$69 >> 2] = $38; //@line 7515
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 7516
  HEAP32[$70 >> 2] = $20; //@line 7517
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 7518
  HEAP32[$71 >> 2] = $22; //@line 7519
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 7520
  HEAP32[$72 >> 2] = $24; //@line 7521
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 7522
  HEAP32[$73 >> 2] = $26; //@line 7523
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 7524
  HEAP32[$74 >> 2] = $28; //@line 7525
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 7526
  HEAP32[$75 >> 2] = $30; //@line 7527
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 7528
  HEAP32[$76 >> 2] = $32; //@line 7529
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 7530
  HEAP32[$77 >> 2] = $34; //@line 7531
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 7532
  HEAP32[$78 >> 2] = $36; //@line 7533
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 7534
  HEAP32[$79 >> 2] = $40; //@line 7535
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 7536
  HEAP32[$80 >> 2] = $42; //@line 7537
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 7538
  HEAP32[$81 >> 2] = $44; //@line 7539
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 7540
  HEAP32[$82 >> 2] = $$131; //@line 7541
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 7542
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 7543
  sp = STACKTOP; //@line 7544
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 7549
  $92 = $54 + 44 | 0; //@line 7550
  $93 = HEAP32[$92 >> 2] | 0; //@line 7551
  if (!$93) {
   HEAP32[$22 >> 2] = 0; //@line 7554
   $124 = HEAP32[$54 >> 2] | 0; //@line 7555
   HEAP32[$24 >> 2] = 0; //@line 7556
   HEAP32[$26 >> 2] = 175; //@line 7557
   HEAP32[$28 >> 2] = $124; //@line 7558
   HEAP32[$30 >> 2] = 724; //@line 7559
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 7560
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($32, 0, $34) | 0; //@line 7561
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 7564
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 7565
    HEAP32[$125 >> 2] = $2; //@line 7566
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 7567
    HEAP32[$126 >> 2] = $4; //@line 7568
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 7569
    HEAP32[$127 >> 2] = $6; //@line 7570
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 7571
    HEAP32[$128 >> 2] = $8; //@line 7572
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 7573
    HEAP32[$129 >> 2] = $10; //@line 7574
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 7575
    HEAP32[$130 >> 2] = $12; //@line 7576
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 7577
    HEAP32[$131 >> 2] = $14; //@line 7578
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 7579
    HEAP32[$132 >> 2] = $16; //@line 7580
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 7581
    HEAP32[$133 >> 2] = $18; //@line 7582
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 7583
    HEAP32[$134 >> 2] = $38; //@line 7584
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 7585
    HEAP32[$135 >> 2] = $20; //@line 7586
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 7587
    HEAP32[$136 >> 2] = $22; //@line 7588
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 7589
    HEAP32[$137 >> 2] = $24; //@line 7590
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 7591
    HEAP32[$138 >> 2] = $26; //@line 7592
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 7593
    HEAP32[$139 >> 2] = $28; //@line 7594
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 7595
    HEAP32[$140 >> 2] = $30; //@line 7596
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 7597
    HEAP32[$141 >> 2] = $32; //@line 7598
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 7599
    HEAP32[$142 >> 2] = $34; //@line 7600
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 7601
    HEAP32[$143 >> 2] = $36; //@line 7602
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 7603
    HEAP32[$144 >> 2] = $40; //@line 7604
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 7605
    HEAP32[$145 >> 2] = $42; //@line 7606
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 7607
    HEAP32[$146 >> 2] = $44; //@line 7608
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 7609
    HEAP32[$147 >> 2] = $$131; //@line 7610
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 7611
    HEAP32[$148 >> 2] = $$02972$reg2mem$1; //@line 7612
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 7613
    HEAP32[$149 >> 2] = $52; //@line 7614
    sp = STACKTOP; //@line 7615
    return;
   }
   ___async_unwind = 0; //@line 7618
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 7619
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 7620
   HEAP32[$125 >> 2] = $2; //@line 7621
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 7622
   HEAP32[$126 >> 2] = $4; //@line 7623
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 7624
   HEAP32[$127 >> 2] = $6; //@line 7625
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 7626
   HEAP32[$128 >> 2] = $8; //@line 7627
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 7628
   HEAP32[$129 >> 2] = $10; //@line 7629
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 7630
   HEAP32[$130 >> 2] = $12; //@line 7631
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 7632
   HEAP32[$131 >> 2] = $14; //@line 7633
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 7634
   HEAP32[$132 >> 2] = $16; //@line 7635
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 7636
   HEAP32[$133 >> 2] = $18; //@line 7637
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 7638
   HEAP32[$134 >> 2] = $38; //@line 7639
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 7640
   HEAP32[$135 >> 2] = $20; //@line 7641
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 7642
   HEAP32[$136 >> 2] = $22; //@line 7643
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 7644
   HEAP32[$137 >> 2] = $24; //@line 7645
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 7646
   HEAP32[$138 >> 2] = $26; //@line 7647
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 7648
   HEAP32[$139 >> 2] = $28; //@line 7649
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 7650
   HEAP32[$140 >> 2] = $30; //@line 7651
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 7652
   HEAP32[$141 >> 2] = $32; //@line 7653
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 7654
   HEAP32[$142 >> 2] = $34; //@line 7655
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 7656
   HEAP32[$143 >> 2] = $36; //@line 7657
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 7658
   HEAP32[$144 >> 2] = $40; //@line 7659
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 7660
   HEAP32[$145 >> 2] = $42; //@line 7661
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 7662
   HEAP32[$146 >> 2] = $44; //@line 7663
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 7664
   HEAP32[$147 >> 2] = $$131; //@line 7665
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 7666
   HEAP32[$148 >> 2] = $$02972$reg2mem$1; //@line 7667
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 7668
   HEAP32[$149 >> 2] = $52; //@line 7669
   sp = STACKTOP; //@line 7670
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 7675
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 7676
   FUNCTION_TABLE_vii[$97 & 7]($40, $54 + 32 | 0); //@line 7677
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 7680
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 7681
    HEAP32[$98 >> 2] = $2; //@line 7682
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 7683
    HEAP32[$99 >> 2] = $4; //@line 7684
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 7685
    HEAP32[$100 >> 2] = $6; //@line 7686
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 7687
    HEAP32[$101 >> 2] = $8; //@line 7688
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 7689
    HEAP32[$102 >> 2] = $10; //@line 7690
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 7691
    HEAP32[$103 >> 2] = $12; //@line 7692
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 7693
    HEAP32[$104 >> 2] = $14; //@line 7694
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 7695
    HEAP32[$105 >> 2] = $16; //@line 7696
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 7697
    HEAP32[$106 >> 2] = $18; //@line 7698
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 7699
    HEAP32[$107 >> 2] = $20; //@line 7700
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 7701
    HEAP32[$108 >> 2] = $52; //@line 7702
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 7703
    HEAP32[$109 >> 2] = $22; //@line 7704
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 7705
    HEAP32[$110 >> 2] = $24; //@line 7706
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 7707
    HEAP32[$111 >> 2] = $26; //@line 7708
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 7709
    HEAP32[$112 >> 2] = $28; //@line 7710
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 7711
    HEAP32[$113 >> 2] = $30; //@line 7712
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 7713
    HEAP32[$114 >> 2] = $32; //@line 7714
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 7715
    HEAP32[$115 >> 2] = $34; //@line 7716
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 7717
    HEAP32[$116 >> 2] = $36; //@line 7718
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 7719
    HEAP32[$117 >> 2] = $38; //@line 7720
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 7721
    HEAP32[$118 >> 2] = $40; //@line 7722
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 7723
    HEAP32[$119 >> 2] = $42; //@line 7724
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 7725
    HEAP32[$120 >> 2] = $44; //@line 7726
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 7727
    HEAP32[$121 >> 2] = $$131; //@line 7728
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 7729
    HEAP32[$122 >> 2] = $92; //@line 7730
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 7731
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 7732
    sp = STACKTOP; //@line 7733
    return;
   }
   ___async_unwind = 0; //@line 7736
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 7737
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 7738
   HEAP32[$98 >> 2] = $2; //@line 7739
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 7740
   HEAP32[$99 >> 2] = $4; //@line 7741
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 7742
   HEAP32[$100 >> 2] = $6; //@line 7743
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 7744
   HEAP32[$101 >> 2] = $8; //@line 7745
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 7746
   HEAP32[$102 >> 2] = $10; //@line 7747
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 7748
   HEAP32[$103 >> 2] = $12; //@line 7749
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 7750
   HEAP32[$104 >> 2] = $14; //@line 7751
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 7752
   HEAP32[$105 >> 2] = $16; //@line 7753
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 7754
   HEAP32[$106 >> 2] = $18; //@line 7755
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 7756
   HEAP32[$107 >> 2] = $20; //@line 7757
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 7758
   HEAP32[$108 >> 2] = $52; //@line 7759
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 7760
   HEAP32[$109 >> 2] = $22; //@line 7761
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 7762
   HEAP32[$110 >> 2] = $24; //@line 7763
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 7764
   HEAP32[$111 >> 2] = $26; //@line 7765
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 7766
   HEAP32[$112 >> 2] = $28; //@line 7767
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 7768
   HEAP32[$113 >> 2] = $30; //@line 7769
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 7770
   HEAP32[$114 >> 2] = $32; //@line 7771
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 7772
   HEAP32[$115 >> 2] = $34; //@line 7773
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 7774
   HEAP32[$116 >> 2] = $36; //@line 7775
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 7776
   HEAP32[$117 >> 2] = $38; //@line 7777
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 7778
   HEAP32[$118 >> 2] = $40; //@line 7779
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 7780
   HEAP32[$119 >> 2] = $42; //@line 7781
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 7782
   HEAP32[$120 >> 2] = $44; //@line 7783
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 7784
   HEAP32[$121 >> 2] = $$131; //@line 7785
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 7786
   HEAP32[$122 >> 2] = $92; //@line 7787
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 7788
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 7789
   sp = STACKTOP; //@line 7790
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 7795
  $156 = $150 + 44 | 0; //@line 7796
  $157 = HEAP32[$156 >> 2] | 0; //@line 7797
  if (!$157) {
   HEAP32[$6 >> 2] = 0; //@line 7800
   $188 = HEAP32[$150 >> 2] | 0; //@line 7801
   HEAP32[$8 >> 2] = 0; //@line 7802
   HEAP32[$10 >> 2] = 180; //@line 7803
   HEAP32[$12 >> 2] = $188; //@line 7804
   HEAP32[$14 >> 2] = 724; //@line 7805
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 7806
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 0, $18) | 0; //@line 7807
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 7810
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 7811
    HEAP32[$189 >> 2] = $2; //@line 7812
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 7813
    HEAP32[$190 >> 2] = $4; //@line 7814
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 7815
    HEAP32[$191 >> 2] = $6; //@line 7816
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 7817
    HEAP32[$192 >> 2] = $8; //@line 7818
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 7819
    HEAP32[$193 >> 2] = $10; //@line 7820
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 7821
    HEAP32[$194 >> 2] = $12; //@line 7822
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 7823
    HEAP32[$195 >> 2] = $14; //@line 7824
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 7825
    HEAP32[$196 >> 2] = $16; //@line 7826
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 7827
    HEAP32[$197 >> 2] = $18; //@line 7828
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 7829
    HEAP32[$198 >> 2] = $38; //@line 7830
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 7831
    HEAP32[$199 >> 2] = $20; //@line 7832
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 7833
    HEAP32[$200 >> 2] = $22; //@line 7834
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 7835
    HEAP32[$201 >> 2] = $24; //@line 7836
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 7837
    HEAP32[$202 >> 2] = $26; //@line 7838
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 7839
    HEAP32[$203 >> 2] = $28; //@line 7840
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 7841
    HEAP32[$204 >> 2] = $30; //@line 7842
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 7843
    HEAP32[$205 >> 2] = $32; //@line 7844
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 7845
    HEAP32[$206 >> 2] = $34; //@line 7846
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 7847
    HEAP32[$207 >> 2] = $36; //@line 7848
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 7849
    HEAP32[$208 >> 2] = $40; //@line 7850
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 7851
    HEAP32[$209 >> 2] = $42; //@line 7852
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 7853
    HEAP32[$210 >> 2] = $44; //@line 7854
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 7855
    HEAP32[$211 >> 2] = $$131; //@line 7856
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 7857
    HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 7858
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 7859
    HEAP32[$213 >> 2] = $52; //@line 7860
    sp = STACKTOP; //@line 7861
    return;
   }
   ___async_unwind = 0; //@line 7864
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 7865
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 7866
   HEAP32[$189 >> 2] = $2; //@line 7867
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 7868
   HEAP32[$190 >> 2] = $4; //@line 7869
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 7870
   HEAP32[$191 >> 2] = $6; //@line 7871
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 7872
   HEAP32[$192 >> 2] = $8; //@line 7873
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 7874
   HEAP32[$193 >> 2] = $10; //@line 7875
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 7876
   HEAP32[$194 >> 2] = $12; //@line 7877
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 7878
   HEAP32[$195 >> 2] = $14; //@line 7879
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 7880
   HEAP32[$196 >> 2] = $16; //@line 7881
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 7882
   HEAP32[$197 >> 2] = $18; //@line 7883
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 7884
   HEAP32[$198 >> 2] = $38; //@line 7885
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 7886
   HEAP32[$199 >> 2] = $20; //@line 7887
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 7888
   HEAP32[$200 >> 2] = $22; //@line 7889
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 7890
   HEAP32[$201 >> 2] = $24; //@line 7891
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 7892
   HEAP32[$202 >> 2] = $26; //@line 7893
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 7894
   HEAP32[$203 >> 2] = $28; //@line 7895
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 7896
   HEAP32[$204 >> 2] = $30; //@line 7897
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 7898
   HEAP32[$205 >> 2] = $32; //@line 7899
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 7900
   HEAP32[$206 >> 2] = $34; //@line 7901
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 7902
   HEAP32[$207 >> 2] = $36; //@line 7903
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 7904
   HEAP32[$208 >> 2] = $40; //@line 7905
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 7906
   HEAP32[$209 >> 2] = $42; //@line 7907
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 7908
   HEAP32[$210 >> 2] = $44; //@line 7909
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 7910
   HEAP32[$211 >> 2] = $$131; //@line 7911
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 7912
   HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 7913
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 7914
   HEAP32[$213 >> 2] = $52; //@line 7915
   sp = STACKTOP; //@line 7916
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 7921
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 7922
   FUNCTION_TABLE_vii[$161 & 7]($4, $150 + 32 | 0); //@line 7923
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 7926
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 7927
    HEAP32[$162 >> 2] = $2; //@line 7928
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 7929
    HEAP32[$163 >> 2] = $4; //@line 7930
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 7931
    HEAP32[$164 >> 2] = $6; //@line 7932
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 7933
    HEAP32[$165 >> 2] = $8; //@line 7934
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 7935
    HEAP32[$166 >> 2] = $10; //@line 7936
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 7937
    HEAP32[$167 >> 2] = $12; //@line 7938
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 7939
    HEAP32[$168 >> 2] = $14; //@line 7940
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 7941
    HEAP32[$169 >> 2] = $16; //@line 7942
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 7943
    HEAP32[$170 >> 2] = $18; //@line 7944
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 7945
    HEAP32[$171 >> 2] = $20; //@line 7946
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 7947
    HEAP32[$172 >> 2] = $156; //@line 7948
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 7949
    HEAP32[$173 >> 2] = $52; //@line 7950
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 7951
    HEAP32[$174 >> 2] = $22; //@line 7952
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 7953
    HEAP32[$175 >> 2] = $24; //@line 7954
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 7955
    HEAP32[$176 >> 2] = $26; //@line 7956
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 7957
    HEAP32[$177 >> 2] = $28; //@line 7958
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 7959
    HEAP32[$178 >> 2] = $30; //@line 7960
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 7961
    HEAP32[$179 >> 2] = $32; //@line 7962
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 7963
    HEAP32[$180 >> 2] = $34; //@line 7964
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 7965
    HEAP32[$181 >> 2] = $36; //@line 7966
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 7967
    HEAP32[$182 >> 2] = $38; //@line 7968
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 7969
    HEAP32[$183 >> 2] = $40; //@line 7970
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 7971
    HEAP32[$184 >> 2] = $42; //@line 7972
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 7973
    HEAP32[$185 >> 2] = $44; //@line 7974
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 7975
    HEAP32[$186 >> 2] = $$131; //@line 7976
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 7977
    HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 7978
    sp = STACKTOP; //@line 7979
    return;
   }
   ___async_unwind = 0; //@line 7982
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 7983
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 7984
   HEAP32[$162 >> 2] = $2; //@line 7985
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 7986
   HEAP32[$163 >> 2] = $4; //@line 7987
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 7988
   HEAP32[$164 >> 2] = $6; //@line 7989
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 7990
   HEAP32[$165 >> 2] = $8; //@line 7991
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 7992
   HEAP32[$166 >> 2] = $10; //@line 7993
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 7994
   HEAP32[$167 >> 2] = $12; //@line 7995
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 7996
   HEAP32[$168 >> 2] = $14; //@line 7997
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 7998
   HEAP32[$169 >> 2] = $16; //@line 7999
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 8000
   HEAP32[$170 >> 2] = $18; //@line 8001
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 8002
   HEAP32[$171 >> 2] = $20; //@line 8003
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 8004
   HEAP32[$172 >> 2] = $156; //@line 8005
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 8006
   HEAP32[$173 >> 2] = $52; //@line 8007
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 8008
   HEAP32[$174 >> 2] = $22; //@line 8009
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 8010
   HEAP32[$175 >> 2] = $24; //@line 8011
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 8012
   HEAP32[$176 >> 2] = $26; //@line 8013
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 8014
   HEAP32[$177 >> 2] = $28; //@line 8015
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 8016
   HEAP32[$178 >> 2] = $30; //@line 8017
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 8018
   HEAP32[$179 >> 2] = $32; //@line 8019
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 8020
   HEAP32[$180 >> 2] = $34; //@line 8021
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 8022
   HEAP32[$181 >> 2] = $36; //@line 8023
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 8024
   HEAP32[$182 >> 2] = $38; //@line 8025
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 8026
   HEAP32[$183 >> 2] = $40; //@line 8027
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 8028
   HEAP32[$184 >> 2] = $42; //@line 8029
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 8030
   HEAP32[$185 >> 2] = $44; //@line 8031
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 8032
   HEAP32[$186 >> 2] = $$131; //@line 8033
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 8034
   HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 8035
   sp = STACKTOP; //@line 8036
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_151($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 6175
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6177
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6179
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6181
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6183
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6185
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6187
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6189
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6191
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6193
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6195
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6199
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6201
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6203
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6205
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6207
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 6209
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6211
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 6213
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 6215
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 6217
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 6219
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 6221
 $$02972$reg2mem$0 = HEAP32[$0 + 100 >> 2] | 0; //@line 6226
 $$03071$reg2mem$0 = HEAP32[$0 + 96 >> 2] | 0; //@line 6226
 $$reg2mem$0 = HEAP32[$0 + 44 >> 2] | 0; //@line 6226
 L2 : while (1) {
  $150 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 6228
  $151 = $150 + 76 | 0; //@line 6229
  $152 = HEAP32[$151 >> 2] | 0; //@line 6230
  if ($152 | 0) {
   if ($152 >>> 0 <= 100) {
    label = 22; //@line 6235
    break;
   }
   HEAP32[$151 >> 2] = $152 + -100; //@line 6239
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 6244
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 6244
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 6246
   $$131 = $$03071$reg2mem$0; //@line 6246
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 6249
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 6252
    break L2;
   }
   $52 = 6700 + ($$02972$reg2mem$1 << 2) | 0; //@line 6255
   $54 = HEAP32[$52 >> 2] | 0; //@line 6256
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 6268
   break;
  }
  $84 = $54 + 72 | 0; //@line 6271
  $85 = HEAP32[$84 >> 2] | 0; //@line 6272
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 6276
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 6277
   $$03071$reg2mem$0 = $$131; //@line 6277
   $$reg2mem$0 = $52; //@line 6277
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 6284
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 6287
    $$03071$reg2mem$0 = $$131; //@line 6287
    $$reg2mem$0 = $52; //@line 6287
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7580] = 0; //@line 6295
   return;
  }
  $217 = $$131 + 44 | 0; //@line 6298
  $218 = HEAP32[$217 >> 2] | 0; //@line 6299
  if (!$218) {
   $226 = $40 + 12 | 0; //@line 6302
   HEAP32[$226 >> 2] = 0; //@line 6303
   $228 = $38 + 4 | 0; //@line 6305
   HEAP32[$228 >> 2] = 0; //@line 6307
   HEAP32[$228 + 4 >> 2] = 0; //@line 6310
   HEAP32[$38 >> 2] = 3; //@line 6311
   $232 = $38 + 12 | 0; //@line 6312
   HEAP32[$232 >> 2] = 712; //@line 6313
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 6314
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($40, 100, $38) | 0; //@line 6315
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 6318
    $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 6319
    HEAP32[$233 >> 2] = $232; //@line 6320
    $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 6321
    HEAP32[$234 >> 2] = $226; //@line 6322
    $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 6323
    HEAP32[$235 >> 2] = $38; //@line 6324
    $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 6325
    HEAP32[$236 >> 2] = $40; //@line 6326
    sp = STACKTOP; //@line 6327
    return;
   }
   ___async_unwind = 0; //@line 6330
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 6331
   $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 6332
   HEAP32[$233 >> 2] = $232; //@line 6333
   $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 6334
   HEAP32[$234 >> 2] = $226; //@line 6335
   $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 6336
   HEAP32[$235 >> 2] = $38; //@line 6337
   $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 6338
   HEAP32[$236 >> 2] = $40; //@line 6339
   sp = STACKTOP; //@line 6340
   return;
  } else {
   $222 = HEAP32[$218 + 4 >> 2] | 0; //@line 6345
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 6346
   FUNCTION_TABLE_vii[$222 & 7]($40, $$131 + 32 | 0); //@line 6347
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 6350
    $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 6351
    HEAP32[$223 >> 2] = $217; //@line 6352
    $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 6353
    HEAP32[$224 >> 2] = $40; //@line 6354
    $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 6355
    HEAP32[$225 >> 2] = $38; //@line 6356
    sp = STACKTOP; //@line 6357
    return;
   }
   ___async_unwind = 0; //@line 6360
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 6361
   $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 6362
   HEAP32[$223 >> 2] = $217; //@line 6363
   $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 6364
   HEAP32[$224 >> 2] = $40; //@line 6365
   $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 6366
   HEAP32[$225 >> 2] = $38; //@line 6367
   sp = STACKTOP; //@line 6368
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 6373
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 6374
  __ZL28nsapi_dns_query_async_deletei($59); //@line 6375
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 6378
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 6379
   HEAP32[$60 >> 2] = $2; //@line 6380
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 6381
   HEAP32[$61 >> 2] = $4; //@line 6382
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 6383
   HEAP32[$62 >> 2] = $6; //@line 6384
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 6385
   HEAP32[$63 >> 2] = $8; //@line 6386
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 6387
   HEAP32[$64 >> 2] = $10; //@line 6388
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 6389
   HEAP32[$65 >> 2] = $12; //@line 6390
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 6391
   HEAP32[$66 >> 2] = $14; //@line 6392
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 6393
   HEAP32[$67 >> 2] = $16; //@line 6394
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 6395
   HEAP32[$68 >> 2] = $18; //@line 6396
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 6397
   HEAP32[$69 >> 2] = $40; //@line 6398
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 6399
   HEAP32[$70 >> 2] = $20; //@line 6400
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 6401
   HEAP32[$71 >> 2] = $24; //@line 6402
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 6403
   HEAP32[$72 >> 2] = $26; //@line 6404
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 6405
   HEAP32[$73 >> 2] = $28; //@line 6406
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 6407
   HEAP32[$74 >> 2] = $30; //@line 6408
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 6409
   HEAP32[$75 >> 2] = $32; //@line 6410
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 6411
   HEAP32[$76 >> 2] = $34; //@line 6412
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 6413
   HEAP32[$77 >> 2] = $36; //@line 6414
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 6415
   HEAP32[$78 >> 2] = $38; //@line 6416
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 6417
   HEAP32[$79 >> 2] = $42; //@line 6418
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 6419
   HEAP32[$80 >> 2] = $44; //@line 6420
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 6421
   HEAP32[$81 >> 2] = $46; //@line 6422
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 6423
   HEAP32[$82 >> 2] = $$131; //@line 6424
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 6425
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 6426
   sp = STACKTOP; //@line 6427
   return;
  }
  ___async_unwind = 0; //@line 6430
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 6431
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 6432
  HEAP32[$60 >> 2] = $2; //@line 6433
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 6434
  HEAP32[$61 >> 2] = $4; //@line 6435
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 6436
  HEAP32[$62 >> 2] = $6; //@line 6437
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 6438
  HEAP32[$63 >> 2] = $8; //@line 6439
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 6440
  HEAP32[$64 >> 2] = $10; //@line 6441
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 6442
  HEAP32[$65 >> 2] = $12; //@line 6443
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 6444
  HEAP32[$66 >> 2] = $14; //@line 6445
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 6446
  HEAP32[$67 >> 2] = $16; //@line 6447
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 6448
  HEAP32[$68 >> 2] = $18; //@line 6449
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 6450
  HEAP32[$69 >> 2] = $40; //@line 6451
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 6452
  HEAP32[$70 >> 2] = $20; //@line 6453
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 6454
  HEAP32[$71 >> 2] = $24; //@line 6455
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 6456
  HEAP32[$72 >> 2] = $26; //@line 6457
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 6458
  HEAP32[$73 >> 2] = $28; //@line 6459
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 6460
  HEAP32[$74 >> 2] = $30; //@line 6461
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 6462
  HEAP32[$75 >> 2] = $32; //@line 6463
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 6464
  HEAP32[$76 >> 2] = $34; //@line 6465
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 6466
  HEAP32[$77 >> 2] = $36; //@line 6467
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 6468
  HEAP32[$78 >> 2] = $38; //@line 6469
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 6470
  HEAP32[$79 >> 2] = $42; //@line 6471
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 6472
  HEAP32[$80 >> 2] = $44; //@line 6473
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 6474
  HEAP32[$81 >> 2] = $46; //@line 6475
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 6476
  HEAP32[$82 >> 2] = $$131; //@line 6477
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 6478
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 6479
  sp = STACKTOP; //@line 6480
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 6485
  $92 = $54 + 44 | 0; //@line 6486
  $93 = HEAP32[$92 >> 2] | 0; //@line 6487
  if (!$93) {
   HEAP32[$24 >> 2] = 0; //@line 6490
   $124 = HEAP32[$54 >> 2] | 0; //@line 6491
   HEAP32[$26 >> 2] = 0; //@line 6492
   HEAP32[$28 >> 2] = 175; //@line 6493
   HEAP32[$30 >> 2] = $124; //@line 6494
   HEAP32[$32 >> 2] = 724; //@line 6495
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 6496
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($34, 0, $36) | 0; //@line 6497
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 6500
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 6501
    HEAP32[$125 >> 2] = $2; //@line 6502
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 6503
    HEAP32[$126 >> 2] = $4; //@line 6504
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 6505
    HEAP32[$127 >> 2] = $6; //@line 6506
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 6507
    HEAP32[$128 >> 2] = $8; //@line 6508
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 6509
    HEAP32[$129 >> 2] = $10; //@line 6510
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 6511
    HEAP32[$130 >> 2] = $12; //@line 6512
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 6513
    HEAP32[$131 >> 2] = $14; //@line 6514
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 6515
    HEAP32[$132 >> 2] = $16; //@line 6516
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 6517
    HEAP32[$133 >> 2] = $18; //@line 6518
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 6519
    HEAP32[$134 >> 2] = $40; //@line 6520
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 6521
    HEAP32[$135 >> 2] = $20; //@line 6522
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 6523
    HEAP32[$136 >> 2] = $24; //@line 6524
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 6525
    HEAP32[$137 >> 2] = $26; //@line 6526
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 6527
    HEAP32[$138 >> 2] = $28; //@line 6528
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 6529
    HEAP32[$139 >> 2] = $30; //@line 6530
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 6531
    HEAP32[$140 >> 2] = $32; //@line 6532
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 6533
    HEAP32[$141 >> 2] = $34; //@line 6534
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 6535
    HEAP32[$142 >> 2] = $36; //@line 6536
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 6537
    HEAP32[$143 >> 2] = $38; //@line 6538
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 6539
    HEAP32[$144 >> 2] = $42; //@line 6540
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 6541
    HEAP32[$145 >> 2] = $44; //@line 6542
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 6543
    HEAP32[$146 >> 2] = $46; //@line 6544
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 6545
    HEAP32[$147 >> 2] = $$131; //@line 6546
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 6547
    HEAP32[$148 >> 2] = $$02972$reg2mem$1; //@line 6548
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 6549
    HEAP32[$149 >> 2] = $52; //@line 6550
    sp = STACKTOP; //@line 6551
    return;
   }
   ___async_unwind = 0; //@line 6554
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 6555
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 6556
   HEAP32[$125 >> 2] = $2; //@line 6557
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 6558
   HEAP32[$126 >> 2] = $4; //@line 6559
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 6560
   HEAP32[$127 >> 2] = $6; //@line 6561
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 6562
   HEAP32[$128 >> 2] = $8; //@line 6563
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 6564
   HEAP32[$129 >> 2] = $10; //@line 6565
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 6566
   HEAP32[$130 >> 2] = $12; //@line 6567
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 6568
   HEAP32[$131 >> 2] = $14; //@line 6569
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 6570
   HEAP32[$132 >> 2] = $16; //@line 6571
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 6572
   HEAP32[$133 >> 2] = $18; //@line 6573
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 6574
   HEAP32[$134 >> 2] = $40; //@line 6575
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 6576
   HEAP32[$135 >> 2] = $20; //@line 6577
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 6578
   HEAP32[$136 >> 2] = $24; //@line 6579
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 6580
   HEAP32[$137 >> 2] = $26; //@line 6581
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 6582
   HEAP32[$138 >> 2] = $28; //@line 6583
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 6584
   HEAP32[$139 >> 2] = $30; //@line 6585
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 6586
   HEAP32[$140 >> 2] = $32; //@line 6587
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 6588
   HEAP32[$141 >> 2] = $34; //@line 6589
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 6590
   HEAP32[$142 >> 2] = $36; //@line 6591
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 6592
   HEAP32[$143 >> 2] = $38; //@line 6593
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 6594
   HEAP32[$144 >> 2] = $42; //@line 6595
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 6596
   HEAP32[$145 >> 2] = $44; //@line 6597
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 6598
   HEAP32[$146 >> 2] = $46; //@line 6599
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 6600
   HEAP32[$147 >> 2] = $$131; //@line 6601
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 6602
   HEAP32[$148 >> 2] = $$02972$reg2mem$1; //@line 6603
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 6604
   HEAP32[$149 >> 2] = $52; //@line 6605
   sp = STACKTOP; //@line 6606
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 6611
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 6612
   FUNCTION_TABLE_vii[$97 & 7]($42, $54 + 32 | 0); //@line 6613
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 6616
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 6617
    HEAP32[$98 >> 2] = $2; //@line 6618
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 6619
    HEAP32[$99 >> 2] = $4; //@line 6620
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 6621
    HEAP32[$100 >> 2] = $6; //@line 6622
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 6623
    HEAP32[$101 >> 2] = $8; //@line 6624
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 6625
    HEAP32[$102 >> 2] = $10; //@line 6626
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 6627
    HEAP32[$103 >> 2] = $12; //@line 6628
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 6629
    HEAP32[$104 >> 2] = $14; //@line 6630
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 6631
    HEAP32[$105 >> 2] = $16; //@line 6632
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 6633
    HEAP32[$106 >> 2] = $18; //@line 6634
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 6635
    HEAP32[$107 >> 2] = $20; //@line 6636
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 6637
    HEAP32[$108 >> 2] = $52; //@line 6638
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 6639
    HEAP32[$109 >> 2] = $24; //@line 6640
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 6641
    HEAP32[$110 >> 2] = $26; //@line 6642
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 6643
    HEAP32[$111 >> 2] = $28; //@line 6644
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 6645
    HEAP32[$112 >> 2] = $30; //@line 6646
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 6647
    HEAP32[$113 >> 2] = $32; //@line 6648
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 6649
    HEAP32[$114 >> 2] = $34; //@line 6650
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 6651
    HEAP32[$115 >> 2] = $36; //@line 6652
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 6653
    HEAP32[$116 >> 2] = $38; //@line 6654
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 6655
    HEAP32[$117 >> 2] = $40; //@line 6656
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 6657
    HEAP32[$118 >> 2] = $42; //@line 6658
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 6659
    HEAP32[$119 >> 2] = $44; //@line 6660
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 6661
    HEAP32[$120 >> 2] = $46; //@line 6662
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 6663
    HEAP32[$121 >> 2] = $$131; //@line 6664
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 6665
    HEAP32[$122 >> 2] = $92; //@line 6666
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 6667
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 6668
    sp = STACKTOP; //@line 6669
    return;
   }
   ___async_unwind = 0; //@line 6672
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 6673
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 6674
   HEAP32[$98 >> 2] = $2; //@line 6675
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 6676
   HEAP32[$99 >> 2] = $4; //@line 6677
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 6678
   HEAP32[$100 >> 2] = $6; //@line 6679
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 6680
   HEAP32[$101 >> 2] = $8; //@line 6681
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 6682
   HEAP32[$102 >> 2] = $10; //@line 6683
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 6684
   HEAP32[$103 >> 2] = $12; //@line 6685
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 6686
   HEAP32[$104 >> 2] = $14; //@line 6687
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 6688
   HEAP32[$105 >> 2] = $16; //@line 6689
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 6690
   HEAP32[$106 >> 2] = $18; //@line 6691
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 6692
   HEAP32[$107 >> 2] = $20; //@line 6693
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 6694
   HEAP32[$108 >> 2] = $52; //@line 6695
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 6696
   HEAP32[$109 >> 2] = $24; //@line 6697
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 6698
   HEAP32[$110 >> 2] = $26; //@line 6699
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 6700
   HEAP32[$111 >> 2] = $28; //@line 6701
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 6702
   HEAP32[$112 >> 2] = $30; //@line 6703
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 6704
   HEAP32[$113 >> 2] = $32; //@line 6705
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 6706
   HEAP32[$114 >> 2] = $34; //@line 6707
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 6708
   HEAP32[$115 >> 2] = $36; //@line 6709
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 6710
   HEAP32[$116 >> 2] = $38; //@line 6711
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 6712
   HEAP32[$117 >> 2] = $40; //@line 6713
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 6714
   HEAP32[$118 >> 2] = $42; //@line 6715
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 6716
   HEAP32[$119 >> 2] = $44; //@line 6717
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 6718
   HEAP32[$120 >> 2] = $46; //@line 6719
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 6720
   HEAP32[$121 >> 2] = $$131; //@line 6721
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 6722
   HEAP32[$122 >> 2] = $92; //@line 6723
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 6724
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 6725
   sp = STACKTOP; //@line 6726
   return;
  }
 } else if ((label | 0) == 22) {
  HEAP32[$151 >> 2] = 0; //@line 6731
  $156 = $150 + 44 | 0; //@line 6732
  $157 = HEAP32[$156 >> 2] | 0; //@line 6733
  if (!$157) {
   HEAP32[$6 >> 2] = 0; //@line 6736
   $188 = HEAP32[$150 >> 2] | 0; //@line 6737
   HEAP32[$8 >> 2] = 0; //@line 6738
   HEAP32[$10 >> 2] = 180; //@line 6739
   HEAP32[$12 >> 2] = $188; //@line 6740
   HEAP32[$14 >> 2] = 724; //@line 6741
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 6742
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 0, $18) | 0; //@line 6743
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 6746
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 6747
    HEAP32[$189 >> 2] = $2; //@line 6748
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 6749
    HEAP32[$190 >> 2] = $4; //@line 6750
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 6751
    HEAP32[$191 >> 2] = $6; //@line 6752
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 6753
    HEAP32[$192 >> 2] = $8; //@line 6754
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 6755
    HEAP32[$193 >> 2] = $10; //@line 6756
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 6757
    HEAP32[$194 >> 2] = $12; //@line 6758
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 6759
    HEAP32[$195 >> 2] = $14; //@line 6760
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 6761
    HEAP32[$196 >> 2] = $16; //@line 6762
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 6763
    HEAP32[$197 >> 2] = $18; //@line 6764
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 6765
    HEAP32[$198 >> 2] = $40; //@line 6766
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 6767
    HEAP32[$199 >> 2] = $20; //@line 6768
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 6769
    HEAP32[$200 >> 2] = $24; //@line 6770
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 6771
    HEAP32[$201 >> 2] = $26; //@line 6772
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 6773
    HEAP32[$202 >> 2] = $28; //@line 6774
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 6775
    HEAP32[$203 >> 2] = $30; //@line 6776
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 6777
    HEAP32[$204 >> 2] = $32; //@line 6778
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 6779
    HEAP32[$205 >> 2] = $34; //@line 6780
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 6781
    HEAP32[$206 >> 2] = $36; //@line 6782
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 6783
    HEAP32[$207 >> 2] = $38; //@line 6784
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 6785
    HEAP32[$208 >> 2] = $42; //@line 6786
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 6787
    HEAP32[$209 >> 2] = $44; //@line 6788
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 6789
    HEAP32[$210 >> 2] = $46; //@line 6790
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 6791
    HEAP32[$211 >> 2] = $$03071$reg2mem$0; //@line 6792
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 6793
    HEAP32[$212 >> 2] = $$02972$reg2mem$0; //@line 6794
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 6795
    HEAP32[$213 >> 2] = $$reg2mem$0; //@line 6796
    sp = STACKTOP; //@line 6797
    return;
   }
   ___async_unwind = 0; //@line 6800
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 6801
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 6802
   HEAP32[$189 >> 2] = $2; //@line 6803
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 6804
   HEAP32[$190 >> 2] = $4; //@line 6805
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 6806
   HEAP32[$191 >> 2] = $6; //@line 6807
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 6808
   HEAP32[$192 >> 2] = $8; //@line 6809
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 6810
   HEAP32[$193 >> 2] = $10; //@line 6811
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 6812
   HEAP32[$194 >> 2] = $12; //@line 6813
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 6814
   HEAP32[$195 >> 2] = $14; //@line 6815
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 6816
   HEAP32[$196 >> 2] = $16; //@line 6817
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 6818
   HEAP32[$197 >> 2] = $18; //@line 6819
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 6820
   HEAP32[$198 >> 2] = $40; //@line 6821
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 6822
   HEAP32[$199 >> 2] = $20; //@line 6823
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 6824
   HEAP32[$200 >> 2] = $24; //@line 6825
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 6826
   HEAP32[$201 >> 2] = $26; //@line 6827
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 6828
   HEAP32[$202 >> 2] = $28; //@line 6829
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 6830
   HEAP32[$203 >> 2] = $30; //@line 6831
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 6832
   HEAP32[$204 >> 2] = $32; //@line 6833
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 6834
   HEAP32[$205 >> 2] = $34; //@line 6835
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 6836
   HEAP32[$206 >> 2] = $36; //@line 6837
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 6838
   HEAP32[$207 >> 2] = $38; //@line 6839
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 6840
   HEAP32[$208 >> 2] = $42; //@line 6841
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 6842
   HEAP32[$209 >> 2] = $44; //@line 6843
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 6844
   HEAP32[$210 >> 2] = $46; //@line 6845
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 6846
   HEAP32[$211 >> 2] = $$03071$reg2mem$0; //@line 6847
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 6848
   HEAP32[$212 >> 2] = $$02972$reg2mem$0; //@line 6849
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 6850
   HEAP32[$213 >> 2] = $$reg2mem$0; //@line 6851
   sp = STACKTOP; //@line 6852
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 6857
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 6858
   FUNCTION_TABLE_vii[$161 & 7]($4, $150 + 32 | 0); //@line 6859
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 6862
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 6863
    HEAP32[$162 >> 2] = $2; //@line 6864
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 6865
    HEAP32[$163 >> 2] = $4; //@line 6866
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 6867
    HEAP32[$164 >> 2] = $6; //@line 6868
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 6869
    HEAP32[$165 >> 2] = $8; //@line 6870
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 6871
    HEAP32[$166 >> 2] = $10; //@line 6872
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 6873
    HEAP32[$167 >> 2] = $12; //@line 6874
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 6875
    HEAP32[$168 >> 2] = $14; //@line 6876
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 6877
    HEAP32[$169 >> 2] = $16; //@line 6878
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 6879
    HEAP32[$170 >> 2] = $18; //@line 6880
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 6881
    HEAP32[$171 >> 2] = $20; //@line 6882
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 6883
    HEAP32[$172 >> 2] = $156; //@line 6884
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 6885
    HEAP32[$173 >> 2] = $$reg2mem$0; //@line 6886
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 6887
    HEAP32[$174 >> 2] = $24; //@line 6888
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 6889
    HEAP32[$175 >> 2] = $26; //@line 6890
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 6891
    HEAP32[$176 >> 2] = $28; //@line 6892
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 6893
    HEAP32[$177 >> 2] = $30; //@line 6894
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 6895
    HEAP32[$178 >> 2] = $32; //@line 6896
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 6897
    HEAP32[$179 >> 2] = $34; //@line 6898
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 6899
    HEAP32[$180 >> 2] = $36; //@line 6900
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 6901
    HEAP32[$181 >> 2] = $38; //@line 6902
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 6903
    HEAP32[$182 >> 2] = $40; //@line 6904
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 6905
    HEAP32[$183 >> 2] = $42; //@line 6906
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 6907
    HEAP32[$184 >> 2] = $44; //@line 6908
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 6909
    HEAP32[$185 >> 2] = $46; //@line 6910
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 6911
    HEAP32[$186 >> 2] = $$03071$reg2mem$0; //@line 6912
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 6913
    HEAP32[$187 >> 2] = $$02972$reg2mem$0; //@line 6914
    sp = STACKTOP; //@line 6915
    return;
   }
   ___async_unwind = 0; //@line 6918
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 6919
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 6920
   HEAP32[$162 >> 2] = $2; //@line 6921
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 6922
   HEAP32[$163 >> 2] = $4; //@line 6923
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 6924
   HEAP32[$164 >> 2] = $6; //@line 6925
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 6926
   HEAP32[$165 >> 2] = $8; //@line 6927
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 6928
   HEAP32[$166 >> 2] = $10; //@line 6929
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 6930
   HEAP32[$167 >> 2] = $12; //@line 6931
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 6932
   HEAP32[$168 >> 2] = $14; //@line 6933
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 6934
   HEAP32[$169 >> 2] = $16; //@line 6935
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 6936
   HEAP32[$170 >> 2] = $18; //@line 6937
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 6938
   HEAP32[$171 >> 2] = $20; //@line 6939
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 6940
   HEAP32[$172 >> 2] = $156; //@line 6941
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 6942
   HEAP32[$173 >> 2] = $$reg2mem$0; //@line 6943
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 6944
   HEAP32[$174 >> 2] = $24; //@line 6945
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 6946
   HEAP32[$175 >> 2] = $26; //@line 6947
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 6948
   HEAP32[$176 >> 2] = $28; //@line 6949
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 6950
   HEAP32[$177 >> 2] = $30; //@line 6951
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 6952
   HEAP32[$178 >> 2] = $32; //@line 6953
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 6954
   HEAP32[$179 >> 2] = $34; //@line 6955
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 6956
   HEAP32[$180 >> 2] = $36; //@line 6957
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 6958
   HEAP32[$181 >> 2] = $38; //@line 6959
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 6960
   HEAP32[$182 >> 2] = $40; //@line 6961
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 6962
   HEAP32[$183 >> 2] = $42; //@line 6963
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 6964
   HEAP32[$184 >> 2] = $44; //@line 6965
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 6966
   HEAP32[$185 >> 2] = $46; //@line 6967
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 6968
   HEAP32[$186 >> 2] = $$03071$reg2mem$0; //@line 6969
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 6970
   HEAP32[$187 >> 2] = $$02972$reg2mem$0; //@line 6971
   sp = STACKTOP; //@line 6972
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_154($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $22 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 8056
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8058
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8060
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8062
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8064
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8066
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8068
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8070
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8072
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8074
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8076
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8078
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8080
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8082
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8084
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8086
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8088
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 8090
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 8092
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 8094
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 8096
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 8098
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 8100
 $$02972$reg2mem$0 = HEAP32[$0 + 96 >> 2] | 0; //@line 8107
 $$03071$reg2mem$0 = HEAP32[$0 + 92 >> 2] | 0; //@line 8107
 $$reg2mem$0 = HEAP32[$0 + 100 >> 2] | 0; //@line 8107
 L2 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 8112
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 8112
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 8114
   $$131 = $$03071$reg2mem$0; //@line 8114
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 8117
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 8120
    break L2;
   }
   $52 = 6700 + ($$02972$reg2mem$1 << 2) | 0; //@line 8123
   $54 = HEAP32[$52 >> 2] | 0; //@line 8124
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 8136
   break;
  }
  $84 = $54 + 72 | 0; //@line 8139
  $85 = HEAP32[$84 >> 2] | 0; //@line 8140
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 8144
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 8150
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 8154
  $151 = $150 + 76 | 0; //@line 8155
  $152 = HEAP32[$151 >> 2] | 0; //@line 8156
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 8159
   $$03071$reg2mem$0 = $$131; //@line 8159
   $$reg2mem$0 = $52; //@line 8159
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 8164
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 8168
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 8169
  $$03071$reg2mem$0 = $$131; //@line 8169
  $$reg2mem$0 = $52; //@line 8169
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7580] = 0; //@line 8174
   return;
  }
  $217 = $$131 + 44 | 0; //@line 8177
  $218 = HEAP32[$217 >> 2] | 0; //@line 8178
  if (!$218) {
   $226 = $38 + 12 | 0; //@line 8181
   HEAP32[$226 >> 2] = 0; //@line 8182
   $228 = $36 + 4 | 0; //@line 8184
   HEAP32[$228 >> 2] = 0; //@line 8186
   HEAP32[$228 + 4 >> 2] = 0; //@line 8189
   HEAP32[$36 >> 2] = 3; //@line 8190
   $232 = $36 + 12 | 0; //@line 8191
   HEAP32[$232 >> 2] = 712; //@line 8192
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 8193
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($38, 100, $36) | 0; //@line 8194
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 8197
    $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 8198
    HEAP32[$233 >> 2] = $232; //@line 8199
    $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 8200
    HEAP32[$234 >> 2] = $226; //@line 8201
    $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 8202
    HEAP32[$235 >> 2] = $36; //@line 8203
    $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 8204
    HEAP32[$236 >> 2] = $38; //@line 8205
    sp = STACKTOP; //@line 8206
    return;
   }
   ___async_unwind = 0; //@line 8209
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 8210
   $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 8211
   HEAP32[$233 >> 2] = $232; //@line 8212
   $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 8213
   HEAP32[$234 >> 2] = $226; //@line 8214
   $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 8215
   HEAP32[$235 >> 2] = $36; //@line 8216
   $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 8217
   HEAP32[$236 >> 2] = $38; //@line 8218
   sp = STACKTOP; //@line 8219
   return;
  } else {
   $222 = HEAP32[$218 + 4 >> 2] | 0; //@line 8224
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 8225
   FUNCTION_TABLE_vii[$222 & 7]($38, $$131 + 32 | 0); //@line 8226
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 8229
    $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 8230
    HEAP32[$223 >> 2] = $217; //@line 8231
    $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 8232
    HEAP32[$224 >> 2] = $38; //@line 8233
    $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 8234
    HEAP32[$225 >> 2] = $36; //@line 8235
    sp = STACKTOP; //@line 8236
    return;
   }
   ___async_unwind = 0; //@line 8239
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 8240
   $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 8241
   HEAP32[$223 >> 2] = $217; //@line 8242
   $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 8243
   HEAP32[$224 >> 2] = $38; //@line 8244
   $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 8245
   HEAP32[$225 >> 2] = $36; //@line 8246
   sp = STACKTOP; //@line 8247
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 8252
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 8253
  __ZL28nsapi_dns_query_async_deletei($59); //@line 8254
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 8257
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 8258
   HEAP32[$60 >> 2] = $2; //@line 8259
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 8260
   HEAP32[$61 >> 2] = $4; //@line 8261
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 8262
   HEAP32[$62 >> 2] = $6; //@line 8263
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 8264
   HEAP32[$63 >> 2] = $8; //@line 8265
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 8266
   HEAP32[$64 >> 2] = $10; //@line 8267
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 8268
   HEAP32[$65 >> 2] = $12; //@line 8269
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 8270
   HEAP32[$66 >> 2] = $14; //@line 8271
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 8272
   HEAP32[$67 >> 2] = $16; //@line 8273
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 8274
   HEAP32[$68 >> 2] = $18; //@line 8275
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 8276
   HEAP32[$69 >> 2] = $38; //@line 8277
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 8278
   HEAP32[$70 >> 2] = $20; //@line 8279
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 8280
   HEAP32[$71 >> 2] = $22; //@line 8281
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 8282
   HEAP32[$72 >> 2] = $24; //@line 8283
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 8284
   HEAP32[$73 >> 2] = $26; //@line 8285
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 8286
   HEAP32[$74 >> 2] = $28; //@line 8287
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 8288
   HEAP32[$75 >> 2] = $30; //@line 8289
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 8290
   HEAP32[$76 >> 2] = $32; //@line 8291
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 8292
   HEAP32[$77 >> 2] = $34; //@line 8293
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 8294
   HEAP32[$78 >> 2] = $36; //@line 8295
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 8296
   HEAP32[$79 >> 2] = $40; //@line 8297
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 8298
   HEAP32[$80 >> 2] = $42; //@line 8299
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 8300
   HEAP32[$81 >> 2] = $44; //@line 8301
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 8302
   HEAP32[$82 >> 2] = $$131; //@line 8303
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 8304
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 8305
   sp = STACKTOP; //@line 8306
   return;
  }
  ___async_unwind = 0; //@line 8309
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 8310
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 8311
  HEAP32[$60 >> 2] = $2; //@line 8312
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 8313
  HEAP32[$61 >> 2] = $4; //@line 8314
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 8315
  HEAP32[$62 >> 2] = $6; //@line 8316
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 8317
  HEAP32[$63 >> 2] = $8; //@line 8318
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 8319
  HEAP32[$64 >> 2] = $10; //@line 8320
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 8321
  HEAP32[$65 >> 2] = $12; //@line 8322
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 8323
  HEAP32[$66 >> 2] = $14; //@line 8324
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 8325
  HEAP32[$67 >> 2] = $16; //@line 8326
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 8327
  HEAP32[$68 >> 2] = $18; //@line 8328
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 8329
  HEAP32[$69 >> 2] = $38; //@line 8330
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 8331
  HEAP32[$70 >> 2] = $20; //@line 8332
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 8333
  HEAP32[$71 >> 2] = $22; //@line 8334
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 8335
  HEAP32[$72 >> 2] = $24; //@line 8336
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 8337
  HEAP32[$73 >> 2] = $26; //@line 8338
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 8339
  HEAP32[$74 >> 2] = $28; //@line 8340
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 8341
  HEAP32[$75 >> 2] = $30; //@line 8342
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 8343
  HEAP32[$76 >> 2] = $32; //@line 8344
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 8345
  HEAP32[$77 >> 2] = $34; //@line 8346
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 8347
  HEAP32[$78 >> 2] = $36; //@line 8348
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 8349
  HEAP32[$79 >> 2] = $40; //@line 8350
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 8351
  HEAP32[$80 >> 2] = $42; //@line 8352
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 8353
  HEAP32[$81 >> 2] = $44; //@line 8354
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 8355
  HEAP32[$82 >> 2] = $$131; //@line 8356
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 8357
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 8358
  sp = STACKTOP; //@line 8359
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 8364
  $92 = $54 + 44 | 0; //@line 8365
  $93 = HEAP32[$92 >> 2] | 0; //@line 8366
  if (!$93) {
   HEAP32[$22 >> 2] = 0; //@line 8369
   $124 = HEAP32[$54 >> 2] | 0; //@line 8370
   HEAP32[$24 >> 2] = 0; //@line 8371
   HEAP32[$26 >> 2] = 175; //@line 8372
   HEAP32[$28 >> 2] = $124; //@line 8373
   HEAP32[$30 >> 2] = 724; //@line 8374
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 8375
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($32, 0, $34) | 0; //@line 8376
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 8379
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 8380
    HEAP32[$125 >> 2] = $2; //@line 8381
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 8382
    HEAP32[$126 >> 2] = $4; //@line 8383
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 8384
    HEAP32[$127 >> 2] = $6; //@line 8385
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 8386
    HEAP32[$128 >> 2] = $8; //@line 8387
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 8388
    HEAP32[$129 >> 2] = $10; //@line 8389
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 8390
    HEAP32[$130 >> 2] = $12; //@line 8391
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 8392
    HEAP32[$131 >> 2] = $14; //@line 8393
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 8394
    HEAP32[$132 >> 2] = $16; //@line 8395
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 8396
    HEAP32[$133 >> 2] = $18; //@line 8397
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 8398
    HEAP32[$134 >> 2] = $38; //@line 8399
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 8400
    HEAP32[$135 >> 2] = $20; //@line 8401
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 8402
    HEAP32[$136 >> 2] = $22; //@line 8403
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 8404
    HEAP32[$137 >> 2] = $24; //@line 8405
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 8406
    HEAP32[$138 >> 2] = $26; //@line 8407
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 8408
    HEAP32[$139 >> 2] = $28; //@line 8409
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 8410
    HEAP32[$140 >> 2] = $30; //@line 8411
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 8412
    HEAP32[$141 >> 2] = $32; //@line 8413
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 8414
    HEAP32[$142 >> 2] = $34; //@line 8415
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 8416
    HEAP32[$143 >> 2] = $36; //@line 8417
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 8418
    HEAP32[$144 >> 2] = $40; //@line 8419
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 8420
    HEAP32[$145 >> 2] = $42; //@line 8421
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 8422
    HEAP32[$146 >> 2] = $44; //@line 8423
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 8424
    HEAP32[$147 >> 2] = $$131; //@line 8425
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 8426
    HEAP32[$148 >> 2] = $$02972$reg2mem$1; //@line 8427
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 8428
    HEAP32[$149 >> 2] = $52; //@line 8429
    sp = STACKTOP; //@line 8430
    return;
   }
   ___async_unwind = 0; //@line 8433
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 8434
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 8435
   HEAP32[$125 >> 2] = $2; //@line 8436
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 8437
   HEAP32[$126 >> 2] = $4; //@line 8438
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 8439
   HEAP32[$127 >> 2] = $6; //@line 8440
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 8441
   HEAP32[$128 >> 2] = $8; //@line 8442
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 8443
   HEAP32[$129 >> 2] = $10; //@line 8444
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 8445
   HEAP32[$130 >> 2] = $12; //@line 8446
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 8447
   HEAP32[$131 >> 2] = $14; //@line 8448
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 8449
   HEAP32[$132 >> 2] = $16; //@line 8450
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 8451
   HEAP32[$133 >> 2] = $18; //@line 8452
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 8453
   HEAP32[$134 >> 2] = $38; //@line 8454
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 8455
   HEAP32[$135 >> 2] = $20; //@line 8456
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 8457
   HEAP32[$136 >> 2] = $22; //@line 8458
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 8459
   HEAP32[$137 >> 2] = $24; //@line 8460
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 8461
   HEAP32[$138 >> 2] = $26; //@line 8462
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 8463
   HEAP32[$139 >> 2] = $28; //@line 8464
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 8465
   HEAP32[$140 >> 2] = $30; //@line 8466
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 8467
   HEAP32[$141 >> 2] = $32; //@line 8468
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 8469
   HEAP32[$142 >> 2] = $34; //@line 8470
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 8471
   HEAP32[$143 >> 2] = $36; //@line 8472
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 8473
   HEAP32[$144 >> 2] = $40; //@line 8474
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 8475
   HEAP32[$145 >> 2] = $42; //@line 8476
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 8477
   HEAP32[$146 >> 2] = $44; //@line 8478
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 8479
   HEAP32[$147 >> 2] = $$131; //@line 8480
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 8481
   HEAP32[$148 >> 2] = $$02972$reg2mem$1; //@line 8482
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 8483
   HEAP32[$149 >> 2] = $52; //@line 8484
   sp = STACKTOP; //@line 8485
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 8490
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 8491
   FUNCTION_TABLE_vii[$97 & 7]($40, $54 + 32 | 0); //@line 8492
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 8495
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 8496
    HEAP32[$98 >> 2] = $2; //@line 8497
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 8498
    HEAP32[$99 >> 2] = $4; //@line 8499
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 8500
    HEAP32[$100 >> 2] = $6; //@line 8501
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 8502
    HEAP32[$101 >> 2] = $8; //@line 8503
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 8504
    HEAP32[$102 >> 2] = $10; //@line 8505
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 8506
    HEAP32[$103 >> 2] = $12; //@line 8507
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 8508
    HEAP32[$104 >> 2] = $14; //@line 8509
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 8510
    HEAP32[$105 >> 2] = $16; //@line 8511
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 8512
    HEAP32[$106 >> 2] = $18; //@line 8513
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 8514
    HEAP32[$107 >> 2] = $20; //@line 8515
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 8516
    HEAP32[$108 >> 2] = $52; //@line 8517
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 8518
    HEAP32[$109 >> 2] = $22; //@line 8519
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 8520
    HEAP32[$110 >> 2] = $24; //@line 8521
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 8522
    HEAP32[$111 >> 2] = $26; //@line 8523
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 8524
    HEAP32[$112 >> 2] = $28; //@line 8525
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 8526
    HEAP32[$113 >> 2] = $30; //@line 8527
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 8528
    HEAP32[$114 >> 2] = $32; //@line 8529
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 8530
    HEAP32[$115 >> 2] = $34; //@line 8531
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 8532
    HEAP32[$116 >> 2] = $36; //@line 8533
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 8534
    HEAP32[$117 >> 2] = $38; //@line 8535
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 8536
    HEAP32[$118 >> 2] = $40; //@line 8537
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 8538
    HEAP32[$119 >> 2] = $42; //@line 8539
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 8540
    HEAP32[$120 >> 2] = $44; //@line 8541
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 8542
    HEAP32[$121 >> 2] = $$131; //@line 8543
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 8544
    HEAP32[$122 >> 2] = $92; //@line 8545
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 8546
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 8547
    sp = STACKTOP; //@line 8548
    return;
   }
   ___async_unwind = 0; //@line 8551
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 8552
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 8553
   HEAP32[$98 >> 2] = $2; //@line 8554
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 8555
   HEAP32[$99 >> 2] = $4; //@line 8556
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 8557
   HEAP32[$100 >> 2] = $6; //@line 8558
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 8559
   HEAP32[$101 >> 2] = $8; //@line 8560
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 8561
   HEAP32[$102 >> 2] = $10; //@line 8562
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 8563
   HEAP32[$103 >> 2] = $12; //@line 8564
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 8565
   HEAP32[$104 >> 2] = $14; //@line 8566
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 8567
   HEAP32[$105 >> 2] = $16; //@line 8568
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 8569
   HEAP32[$106 >> 2] = $18; //@line 8570
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 8571
   HEAP32[$107 >> 2] = $20; //@line 8572
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 8573
   HEAP32[$108 >> 2] = $52; //@line 8574
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 8575
   HEAP32[$109 >> 2] = $22; //@line 8576
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 8577
   HEAP32[$110 >> 2] = $24; //@line 8578
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 8579
   HEAP32[$111 >> 2] = $26; //@line 8580
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 8581
   HEAP32[$112 >> 2] = $28; //@line 8582
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 8583
   HEAP32[$113 >> 2] = $30; //@line 8584
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 8585
   HEAP32[$114 >> 2] = $32; //@line 8586
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 8587
   HEAP32[$115 >> 2] = $34; //@line 8588
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 8589
   HEAP32[$116 >> 2] = $36; //@line 8590
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 8591
   HEAP32[$117 >> 2] = $38; //@line 8592
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 8593
   HEAP32[$118 >> 2] = $40; //@line 8594
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 8595
   HEAP32[$119 >> 2] = $42; //@line 8596
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 8597
   HEAP32[$120 >> 2] = $44; //@line 8598
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 8599
   HEAP32[$121 >> 2] = $$131; //@line 8600
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 8601
   HEAP32[$122 >> 2] = $92; //@line 8602
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 8603
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 8604
   sp = STACKTOP; //@line 8605
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 8610
  $156 = $150 + 44 | 0; //@line 8611
  $157 = HEAP32[$156 >> 2] | 0; //@line 8612
  if (!$157) {
   HEAP32[$6 >> 2] = 0; //@line 8615
   $188 = HEAP32[$150 >> 2] | 0; //@line 8616
   HEAP32[$8 >> 2] = 0; //@line 8617
   HEAP32[$10 >> 2] = 180; //@line 8618
   HEAP32[$12 >> 2] = $188; //@line 8619
   HEAP32[$14 >> 2] = 724; //@line 8620
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 8621
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 0, $18) | 0; //@line 8622
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 8625
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 8626
    HEAP32[$189 >> 2] = $2; //@line 8627
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 8628
    HEAP32[$190 >> 2] = $4; //@line 8629
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 8630
    HEAP32[$191 >> 2] = $6; //@line 8631
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 8632
    HEAP32[$192 >> 2] = $8; //@line 8633
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 8634
    HEAP32[$193 >> 2] = $10; //@line 8635
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 8636
    HEAP32[$194 >> 2] = $12; //@line 8637
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 8638
    HEAP32[$195 >> 2] = $14; //@line 8639
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 8640
    HEAP32[$196 >> 2] = $16; //@line 8641
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 8642
    HEAP32[$197 >> 2] = $18; //@line 8643
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 8644
    HEAP32[$198 >> 2] = $38; //@line 8645
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 8646
    HEAP32[$199 >> 2] = $20; //@line 8647
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 8648
    HEAP32[$200 >> 2] = $22; //@line 8649
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 8650
    HEAP32[$201 >> 2] = $24; //@line 8651
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 8652
    HEAP32[$202 >> 2] = $26; //@line 8653
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 8654
    HEAP32[$203 >> 2] = $28; //@line 8655
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 8656
    HEAP32[$204 >> 2] = $30; //@line 8657
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 8658
    HEAP32[$205 >> 2] = $32; //@line 8659
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 8660
    HEAP32[$206 >> 2] = $34; //@line 8661
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 8662
    HEAP32[$207 >> 2] = $36; //@line 8663
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 8664
    HEAP32[$208 >> 2] = $40; //@line 8665
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 8666
    HEAP32[$209 >> 2] = $42; //@line 8667
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 8668
    HEAP32[$210 >> 2] = $44; //@line 8669
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 8670
    HEAP32[$211 >> 2] = $$131; //@line 8671
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 8672
    HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 8673
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 8674
    HEAP32[$213 >> 2] = $52; //@line 8675
    sp = STACKTOP; //@line 8676
    return;
   }
   ___async_unwind = 0; //@line 8679
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 8680
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 8681
   HEAP32[$189 >> 2] = $2; //@line 8682
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 8683
   HEAP32[$190 >> 2] = $4; //@line 8684
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 8685
   HEAP32[$191 >> 2] = $6; //@line 8686
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 8687
   HEAP32[$192 >> 2] = $8; //@line 8688
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 8689
   HEAP32[$193 >> 2] = $10; //@line 8690
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 8691
   HEAP32[$194 >> 2] = $12; //@line 8692
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 8693
   HEAP32[$195 >> 2] = $14; //@line 8694
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 8695
   HEAP32[$196 >> 2] = $16; //@line 8696
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 8697
   HEAP32[$197 >> 2] = $18; //@line 8698
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 8699
   HEAP32[$198 >> 2] = $38; //@line 8700
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 8701
   HEAP32[$199 >> 2] = $20; //@line 8702
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 8703
   HEAP32[$200 >> 2] = $22; //@line 8704
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 8705
   HEAP32[$201 >> 2] = $24; //@line 8706
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 8707
   HEAP32[$202 >> 2] = $26; //@line 8708
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 8709
   HEAP32[$203 >> 2] = $28; //@line 8710
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 8711
   HEAP32[$204 >> 2] = $30; //@line 8712
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 8713
   HEAP32[$205 >> 2] = $32; //@line 8714
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 8715
   HEAP32[$206 >> 2] = $34; //@line 8716
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 8717
   HEAP32[$207 >> 2] = $36; //@line 8718
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 8719
   HEAP32[$208 >> 2] = $40; //@line 8720
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 8721
   HEAP32[$209 >> 2] = $42; //@line 8722
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 8723
   HEAP32[$210 >> 2] = $44; //@line 8724
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 8725
   HEAP32[$211 >> 2] = $$131; //@line 8726
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 8727
   HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 8728
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 8729
   HEAP32[$213 >> 2] = $52; //@line 8730
   sp = STACKTOP; //@line 8731
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 8736
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 8737
   FUNCTION_TABLE_vii[$161 & 7]($4, $150 + 32 | 0); //@line 8738
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 8741
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 8742
    HEAP32[$162 >> 2] = $2; //@line 8743
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 8744
    HEAP32[$163 >> 2] = $4; //@line 8745
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 8746
    HEAP32[$164 >> 2] = $6; //@line 8747
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 8748
    HEAP32[$165 >> 2] = $8; //@line 8749
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 8750
    HEAP32[$166 >> 2] = $10; //@line 8751
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 8752
    HEAP32[$167 >> 2] = $12; //@line 8753
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 8754
    HEAP32[$168 >> 2] = $14; //@line 8755
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 8756
    HEAP32[$169 >> 2] = $16; //@line 8757
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 8758
    HEAP32[$170 >> 2] = $18; //@line 8759
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 8760
    HEAP32[$171 >> 2] = $20; //@line 8761
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 8762
    HEAP32[$172 >> 2] = $156; //@line 8763
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 8764
    HEAP32[$173 >> 2] = $52; //@line 8765
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 8766
    HEAP32[$174 >> 2] = $22; //@line 8767
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 8768
    HEAP32[$175 >> 2] = $24; //@line 8769
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 8770
    HEAP32[$176 >> 2] = $26; //@line 8771
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 8772
    HEAP32[$177 >> 2] = $28; //@line 8773
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 8774
    HEAP32[$178 >> 2] = $30; //@line 8775
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 8776
    HEAP32[$179 >> 2] = $32; //@line 8777
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 8778
    HEAP32[$180 >> 2] = $34; //@line 8779
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 8780
    HEAP32[$181 >> 2] = $36; //@line 8781
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 8782
    HEAP32[$182 >> 2] = $38; //@line 8783
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 8784
    HEAP32[$183 >> 2] = $40; //@line 8785
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 8786
    HEAP32[$184 >> 2] = $42; //@line 8787
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 8788
    HEAP32[$185 >> 2] = $44; //@line 8789
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 8790
    HEAP32[$186 >> 2] = $$131; //@line 8791
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 8792
    HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 8793
    sp = STACKTOP; //@line 8794
    return;
   }
   ___async_unwind = 0; //@line 8797
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 8798
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 8799
   HEAP32[$162 >> 2] = $2; //@line 8800
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 8801
   HEAP32[$163 >> 2] = $4; //@line 8802
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 8803
   HEAP32[$164 >> 2] = $6; //@line 8804
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 8805
   HEAP32[$165 >> 2] = $8; //@line 8806
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 8807
   HEAP32[$166 >> 2] = $10; //@line 8808
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 8809
   HEAP32[$167 >> 2] = $12; //@line 8810
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 8811
   HEAP32[$168 >> 2] = $14; //@line 8812
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 8813
   HEAP32[$169 >> 2] = $16; //@line 8814
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 8815
   HEAP32[$170 >> 2] = $18; //@line 8816
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 8817
   HEAP32[$171 >> 2] = $20; //@line 8818
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 8819
   HEAP32[$172 >> 2] = $156; //@line 8820
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 8821
   HEAP32[$173 >> 2] = $52; //@line 8822
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 8823
   HEAP32[$174 >> 2] = $22; //@line 8824
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 8825
   HEAP32[$175 >> 2] = $24; //@line 8826
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 8827
   HEAP32[$176 >> 2] = $26; //@line 8828
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 8829
   HEAP32[$177 >> 2] = $28; //@line 8830
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 8831
   HEAP32[$178 >> 2] = $30; //@line 8832
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 8833
   HEAP32[$179 >> 2] = $32; //@line 8834
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 8835
   HEAP32[$180 >> 2] = $34; //@line 8836
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 8837
   HEAP32[$181 >> 2] = $36; //@line 8838
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 8839
   HEAP32[$182 >> 2] = $38; //@line 8840
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 8841
   HEAP32[$183 >> 2] = $40; //@line 8842
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 8843
   HEAP32[$184 >> 2] = $42; //@line 8844
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 8845
   HEAP32[$185 >> 2] = $44; //@line 8846
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 8847
   HEAP32[$186 >> 2] = $$131; //@line 8848
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 8849
   HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 8850
   sp = STACKTOP; //@line 8851
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_159($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$131 = 0, $$131$phi = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $154 = 0, $155 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $215 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $226 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $90 = 0, $91 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9071
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9073
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9075
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9077
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9079
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9081
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9083
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9085
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9087
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9089
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9091
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9093
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9095
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9097
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9099
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9101
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9103
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9105
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9107
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9109
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9111
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9113
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9115
 $$02972$reg2mem$0 = HEAP32[$0 + 96 >> 2] | 0; //@line 9120
 $$131 = HEAP32[$0 + 92 >> 2] | 0; //@line 9120
 while (1) {
  $51 = $$02972$reg2mem$0 + 1 | 0; //@line 9122
  if (($$02972$reg2mem$0 | 0) >= 4) {
   label = 2; //@line 9125
   break;
  }
  $50 = 6700 + ($51 << 2) | 0; //@line 9128
  $52 = HEAP32[$50 >> 2] | 0; //@line 9129
  if (!$52) {
   $$131$phi = $$131; //@line 9132
   $$02972$reg2mem$0 = $51; //@line 9132
   $$131 = $$131$phi; //@line 9132
   continue;
  }
  if ((HEAP32[$52 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 9139
   break;
  }
  $82 = $52 + 72 | 0; //@line 9142
  $83 = HEAP32[$82 >> 2] | 0; //@line 9143
  if ($83 >>> 0 > 100) {
   HEAP32[$82 >> 2] = $83 + -100; //@line 9147
  } else {
   if ((HEAP32[$52 + 4 >> 2] | 0) == -3019) {
    label = 12; //@line 9153
    break;
   }
  }
  $148 = HEAP32[$50 >> 2] | 0; //@line 9157
  $149 = $148 + 76 | 0; //@line 9158
  $150 = HEAP32[$149 >> 2] | 0; //@line 9159
  if ($150 | 0) {
   if ($150 >>> 0 <= 100) {
    label = 22; //@line 9164
    break;
   }
   HEAP32[$149 >> 2] = $150 + -100; //@line 9168
  }
  if ($$131 | 0) {
   $$131$phi = $$131; //@line 9172
   $$02972$reg2mem$0 = $51; //@line 9172
   $$131 = $$131$phi; //@line 9172
   continue;
  }
  $$02972$reg2mem$0 = $51; //@line 9176
  $$131 = HEAP32[$50 >> 2] | 0; //@line 9176
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[7580] = 0; //@line 9181
   return;
  }
  $215 = $$131 + 44 | 0; //@line 9184
  $216 = HEAP32[$215 >> 2] | 0; //@line 9185
  if (!$216) {
   $224 = $20 + 12 | 0; //@line 9188
   HEAP32[$224 >> 2] = 0; //@line 9189
   $226 = $38 + 4 | 0; //@line 9191
   HEAP32[$226 >> 2] = 0; //@line 9193
   HEAP32[$226 + 4 >> 2] = 0; //@line 9196
   HEAP32[$38 >> 2] = 3; //@line 9197
   $230 = $38 + 12 | 0; //@line 9198
   HEAP32[$230 >> 2] = 712; //@line 9199
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 9200
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 100, $38) | 0; //@line 9201
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 9204
    $231 = $ReallocAsyncCtx12 + 4 | 0; //@line 9205
    HEAP32[$231 >> 2] = $230; //@line 9206
    $232 = $ReallocAsyncCtx12 + 8 | 0; //@line 9207
    HEAP32[$232 >> 2] = $224; //@line 9208
    $233 = $ReallocAsyncCtx12 + 12 | 0; //@line 9209
    HEAP32[$233 >> 2] = $38; //@line 9210
    $234 = $ReallocAsyncCtx12 + 16 | 0; //@line 9211
    HEAP32[$234 >> 2] = $20; //@line 9212
    sp = STACKTOP; //@line 9213
    return;
   }
   ___async_unwind = 0; //@line 9216
   HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 9217
   $231 = $ReallocAsyncCtx12 + 4 | 0; //@line 9218
   HEAP32[$231 >> 2] = $230; //@line 9219
   $232 = $ReallocAsyncCtx12 + 8 | 0; //@line 9220
   HEAP32[$232 >> 2] = $224; //@line 9221
   $233 = $ReallocAsyncCtx12 + 12 | 0; //@line 9222
   HEAP32[$233 >> 2] = $38; //@line 9223
   $234 = $ReallocAsyncCtx12 + 16 | 0; //@line 9224
   HEAP32[$234 >> 2] = $20; //@line 9225
   sp = STACKTOP; //@line 9226
   return;
  } else {
   $220 = HEAP32[$216 + 4 >> 2] | 0; //@line 9231
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 9232
   FUNCTION_TABLE_vii[$220 & 7]($20, $$131 + 32 | 0); //@line 9233
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 9236
    $221 = $ReallocAsyncCtx7 + 4 | 0; //@line 9237
    HEAP32[$221 >> 2] = $215; //@line 9238
    $222 = $ReallocAsyncCtx7 + 8 | 0; //@line 9239
    HEAP32[$222 >> 2] = $20; //@line 9240
    $223 = $ReallocAsyncCtx7 + 12 | 0; //@line 9241
    HEAP32[$223 >> 2] = $38; //@line 9242
    sp = STACKTOP; //@line 9243
    return;
   }
   ___async_unwind = 0; //@line 9246
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 9247
   $221 = $ReallocAsyncCtx7 + 4 | 0; //@line 9248
   HEAP32[$221 >> 2] = $215; //@line 9249
   $222 = $ReallocAsyncCtx7 + 8 | 0; //@line 9250
   HEAP32[$222 >> 2] = $20; //@line 9251
   $223 = $ReallocAsyncCtx7 + 12 | 0; //@line 9252
   HEAP32[$223 >> 2] = $38; //@line 9253
   sp = STACKTOP; //@line 9254
   return;
  }
 } else if ((label | 0) == 5) {
  $57 = HEAP32[$52 >> 2] | 0; //@line 9259
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 9260
  __ZL28nsapi_dns_query_async_deletei($57); //@line 9261
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 9264
   $58 = $ReallocAsyncCtx10 + 4 | 0; //@line 9265
   HEAP32[$58 >> 2] = $2; //@line 9266
   $59 = $ReallocAsyncCtx10 + 8 | 0; //@line 9267
   HEAP32[$59 >> 2] = $4; //@line 9268
   $60 = $ReallocAsyncCtx10 + 12 | 0; //@line 9269
   HEAP32[$60 >> 2] = $6; //@line 9270
   $61 = $ReallocAsyncCtx10 + 16 | 0; //@line 9271
   HEAP32[$61 >> 2] = $8; //@line 9272
   $62 = $ReallocAsyncCtx10 + 20 | 0; //@line 9273
   HEAP32[$62 >> 2] = $10; //@line 9274
   $63 = $ReallocAsyncCtx10 + 24 | 0; //@line 9275
   HEAP32[$63 >> 2] = $12; //@line 9276
   $64 = $ReallocAsyncCtx10 + 28 | 0; //@line 9277
   HEAP32[$64 >> 2] = $14; //@line 9278
   $65 = $ReallocAsyncCtx10 + 32 | 0; //@line 9279
   HEAP32[$65 >> 2] = $16; //@line 9280
   $66 = $ReallocAsyncCtx10 + 36 | 0; //@line 9281
   HEAP32[$66 >> 2] = $18; //@line 9282
   $67 = $ReallocAsyncCtx10 + 40 | 0; //@line 9283
   HEAP32[$67 >> 2] = $20; //@line 9284
   $68 = $ReallocAsyncCtx10 + 44 | 0; //@line 9285
   HEAP32[$68 >> 2] = $22; //@line 9286
   $69 = $ReallocAsyncCtx10 + 48 | 0; //@line 9287
   HEAP32[$69 >> 2] = $24; //@line 9288
   $70 = $ReallocAsyncCtx10 + 52 | 0; //@line 9289
   HEAP32[$70 >> 2] = $26; //@line 9290
   $71 = $ReallocAsyncCtx10 + 56 | 0; //@line 9291
   HEAP32[$71 >> 2] = $28; //@line 9292
   $72 = $ReallocAsyncCtx10 + 60 | 0; //@line 9293
   HEAP32[$72 >> 2] = $30; //@line 9294
   $73 = $ReallocAsyncCtx10 + 64 | 0; //@line 9295
   HEAP32[$73 >> 2] = $32; //@line 9296
   $74 = $ReallocAsyncCtx10 + 68 | 0; //@line 9297
   HEAP32[$74 >> 2] = $34; //@line 9298
   $75 = $ReallocAsyncCtx10 + 72 | 0; //@line 9299
   HEAP32[$75 >> 2] = $36; //@line 9300
   $76 = $ReallocAsyncCtx10 + 76 | 0; //@line 9301
   HEAP32[$76 >> 2] = $38; //@line 9302
   $77 = $ReallocAsyncCtx10 + 80 | 0; //@line 9303
   HEAP32[$77 >> 2] = $40; //@line 9304
   $78 = $ReallocAsyncCtx10 + 84 | 0; //@line 9305
   HEAP32[$78 >> 2] = $42; //@line 9306
   $79 = $ReallocAsyncCtx10 + 88 | 0; //@line 9307
   HEAP32[$79 >> 2] = $44; //@line 9308
   $80 = $ReallocAsyncCtx10 + 92 | 0; //@line 9309
   HEAP32[$80 >> 2] = $$131; //@line 9310
   $81 = $ReallocAsyncCtx10 + 96 | 0; //@line 9311
   HEAP32[$81 >> 2] = $51; //@line 9312
   sp = STACKTOP; //@line 9313
   return;
  }
  ___async_unwind = 0; //@line 9316
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 9317
  $58 = $ReallocAsyncCtx10 + 4 | 0; //@line 9318
  HEAP32[$58 >> 2] = $2; //@line 9319
  $59 = $ReallocAsyncCtx10 + 8 | 0; //@line 9320
  HEAP32[$59 >> 2] = $4; //@line 9321
  $60 = $ReallocAsyncCtx10 + 12 | 0; //@line 9322
  HEAP32[$60 >> 2] = $6; //@line 9323
  $61 = $ReallocAsyncCtx10 + 16 | 0; //@line 9324
  HEAP32[$61 >> 2] = $8; //@line 9325
  $62 = $ReallocAsyncCtx10 + 20 | 0; //@line 9326
  HEAP32[$62 >> 2] = $10; //@line 9327
  $63 = $ReallocAsyncCtx10 + 24 | 0; //@line 9328
  HEAP32[$63 >> 2] = $12; //@line 9329
  $64 = $ReallocAsyncCtx10 + 28 | 0; //@line 9330
  HEAP32[$64 >> 2] = $14; //@line 9331
  $65 = $ReallocAsyncCtx10 + 32 | 0; //@line 9332
  HEAP32[$65 >> 2] = $16; //@line 9333
  $66 = $ReallocAsyncCtx10 + 36 | 0; //@line 9334
  HEAP32[$66 >> 2] = $18; //@line 9335
  $67 = $ReallocAsyncCtx10 + 40 | 0; //@line 9336
  HEAP32[$67 >> 2] = $20; //@line 9337
  $68 = $ReallocAsyncCtx10 + 44 | 0; //@line 9338
  HEAP32[$68 >> 2] = $22; //@line 9339
  $69 = $ReallocAsyncCtx10 + 48 | 0; //@line 9340
  HEAP32[$69 >> 2] = $24; //@line 9341
  $70 = $ReallocAsyncCtx10 + 52 | 0; //@line 9342
  HEAP32[$70 >> 2] = $26; //@line 9343
  $71 = $ReallocAsyncCtx10 + 56 | 0; //@line 9344
  HEAP32[$71 >> 2] = $28; //@line 9345
  $72 = $ReallocAsyncCtx10 + 60 | 0; //@line 9346
  HEAP32[$72 >> 2] = $30; //@line 9347
  $73 = $ReallocAsyncCtx10 + 64 | 0; //@line 9348
  HEAP32[$73 >> 2] = $32; //@line 9349
  $74 = $ReallocAsyncCtx10 + 68 | 0; //@line 9350
  HEAP32[$74 >> 2] = $34; //@line 9351
  $75 = $ReallocAsyncCtx10 + 72 | 0; //@line 9352
  HEAP32[$75 >> 2] = $36; //@line 9353
  $76 = $ReallocAsyncCtx10 + 76 | 0; //@line 9354
  HEAP32[$76 >> 2] = $38; //@line 9355
  $77 = $ReallocAsyncCtx10 + 80 | 0; //@line 9356
  HEAP32[$77 >> 2] = $40; //@line 9357
  $78 = $ReallocAsyncCtx10 + 84 | 0; //@line 9358
  HEAP32[$78 >> 2] = $42; //@line 9359
  $79 = $ReallocAsyncCtx10 + 88 | 0; //@line 9360
  HEAP32[$79 >> 2] = $44; //@line 9361
  $80 = $ReallocAsyncCtx10 + 92 | 0; //@line 9362
  HEAP32[$80 >> 2] = $$131; //@line 9363
  $81 = $ReallocAsyncCtx10 + 96 | 0; //@line 9364
  HEAP32[$81 >> 2] = $51; //@line 9365
  sp = STACKTOP; //@line 9366
  return;
 } else if ((label | 0) == 12) {
  HEAP32[$52 + 76 >> 2] = 0; //@line 9371
  $90 = $52 + 44 | 0; //@line 9372
  $91 = HEAP32[$90 >> 2] | 0; //@line 9373
  if (!$91) {
   HEAP32[$24 >> 2] = 0; //@line 9376
   $122 = HEAP32[$52 >> 2] | 0; //@line 9377
   HEAP32[$26 >> 2] = 0; //@line 9378
   HEAP32[$28 >> 2] = 175; //@line 9379
   HEAP32[$30 >> 2] = $122; //@line 9380
   HEAP32[$32 >> 2] = 724; //@line 9381
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 9382
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($34, 0, $36) | 0; //@line 9383
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 9386
    $123 = $ReallocAsyncCtx14 + 4 | 0; //@line 9387
    HEAP32[$123 >> 2] = $2; //@line 9388
    $124 = $ReallocAsyncCtx14 + 8 | 0; //@line 9389
    HEAP32[$124 >> 2] = $4; //@line 9390
    $125 = $ReallocAsyncCtx14 + 12 | 0; //@line 9391
    HEAP32[$125 >> 2] = $6; //@line 9392
    $126 = $ReallocAsyncCtx14 + 16 | 0; //@line 9393
    HEAP32[$126 >> 2] = $8; //@line 9394
    $127 = $ReallocAsyncCtx14 + 20 | 0; //@line 9395
    HEAP32[$127 >> 2] = $10; //@line 9396
    $128 = $ReallocAsyncCtx14 + 24 | 0; //@line 9397
    HEAP32[$128 >> 2] = $12; //@line 9398
    $129 = $ReallocAsyncCtx14 + 28 | 0; //@line 9399
    HEAP32[$129 >> 2] = $14; //@line 9400
    $130 = $ReallocAsyncCtx14 + 32 | 0; //@line 9401
    HEAP32[$130 >> 2] = $16; //@line 9402
    $131 = $ReallocAsyncCtx14 + 36 | 0; //@line 9403
    HEAP32[$131 >> 2] = $18; //@line 9404
    $132 = $ReallocAsyncCtx14 + 40 | 0; //@line 9405
    HEAP32[$132 >> 2] = $20; //@line 9406
    $133 = $ReallocAsyncCtx14 + 44 | 0; //@line 9407
    HEAP32[$133 >> 2] = $22; //@line 9408
    $134 = $ReallocAsyncCtx14 + 48 | 0; //@line 9409
    HEAP32[$134 >> 2] = $24; //@line 9410
    $135 = $ReallocAsyncCtx14 + 52 | 0; //@line 9411
    HEAP32[$135 >> 2] = $26; //@line 9412
    $136 = $ReallocAsyncCtx14 + 56 | 0; //@line 9413
    HEAP32[$136 >> 2] = $28; //@line 9414
    $137 = $ReallocAsyncCtx14 + 60 | 0; //@line 9415
    HEAP32[$137 >> 2] = $30; //@line 9416
    $138 = $ReallocAsyncCtx14 + 64 | 0; //@line 9417
    HEAP32[$138 >> 2] = $32; //@line 9418
    $139 = $ReallocAsyncCtx14 + 68 | 0; //@line 9419
    HEAP32[$139 >> 2] = $34; //@line 9420
    $140 = $ReallocAsyncCtx14 + 72 | 0; //@line 9421
    HEAP32[$140 >> 2] = $36; //@line 9422
    $141 = $ReallocAsyncCtx14 + 76 | 0; //@line 9423
    HEAP32[$141 >> 2] = $38; //@line 9424
    $142 = $ReallocAsyncCtx14 + 80 | 0; //@line 9425
    HEAP32[$142 >> 2] = $40; //@line 9426
    $143 = $ReallocAsyncCtx14 + 84 | 0; //@line 9427
    HEAP32[$143 >> 2] = $42; //@line 9428
    $144 = $ReallocAsyncCtx14 + 88 | 0; //@line 9429
    HEAP32[$144 >> 2] = $44; //@line 9430
    $145 = $ReallocAsyncCtx14 + 92 | 0; //@line 9431
    HEAP32[$145 >> 2] = $$131; //@line 9432
    $146 = $ReallocAsyncCtx14 + 96 | 0; //@line 9433
    HEAP32[$146 >> 2] = $51; //@line 9434
    $147 = $ReallocAsyncCtx14 + 100 | 0; //@line 9435
    HEAP32[$147 >> 2] = $50; //@line 9436
    sp = STACKTOP; //@line 9437
    return;
   }
   ___async_unwind = 0; //@line 9440
   HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 9441
   $123 = $ReallocAsyncCtx14 + 4 | 0; //@line 9442
   HEAP32[$123 >> 2] = $2; //@line 9443
   $124 = $ReallocAsyncCtx14 + 8 | 0; //@line 9444
   HEAP32[$124 >> 2] = $4; //@line 9445
   $125 = $ReallocAsyncCtx14 + 12 | 0; //@line 9446
   HEAP32[$125 >> 2] = $6; //@line 9447
   $126 = $ReallocAsyncCtx14 + 16 | 0; //@line 9448
   HEAP32[$126 >> 2] = $8; //@line 9449
   $127 = $ReallocAsyncCtx14 + 20 | 0; //@line 9450
   HEAP32[$127 >> 2] = $10; //@line 9451
   $128 = $ReallocAsyncCtx14 + 24 | 0; //@line 9452
   HEAP32[$128 >> 2] = $12; //@line 9453
   $129 = $ReallocAsyncCtx14 + 28 | 0; //@line 9454
   HEAP32[$129 >> 2] = $14; //@line 9455
   $130 = $ReallocAsyncCtx14 + 32 | 0; //@line 9456
   HEAP32[$130 >> 2] = $16; //@line 9457
   $131 = $ReallocAsyncCtx14 + 36 | 0; //@line 9458
   HEAP32[$131 >> 2] = $18; //@line 9459
   $132 = $ReallocAsyncCtx14 + 40 | 0; //@line 9460
   HEAP32[$132 >> 2] = $20; //@line 9461
   $133 = $ReallocAsyncCtx14 + 44 | 0; //@line 9462
   HEAP32[$133 >> 2] = $22; //@line 9463
   $134 = $ReallocAsyncCtx14 + 48 | 0; //@line 9464
   HEAP32[$134 >> 2] = $24; //@line 9465
   $135 = $ReallocAsyncCtx14 + 52 | 0; //@line 9466
   HEAP32[$135 >> 2] = $26; //@line 9467
   $136 = $ReallocAsyncCtx14 + 56 | 0; //@line 9468
   HEAP32[$136 >> 2] = $28; //@line 9469
   $137 = $ReallocAsyncCtx14 + 60 | 0; //@line 9470
   HEAP32[$137 >> 2] = $30; //@line 9471
   $138 = $ReallocAsyncCtx14 + 64 | 0; //@line 9472
   HEAP32[$138 >> 2] = $32; //@line 9473
   $139 = $ReallocAsyncCtx14 + 68 | 0; //@line 9474
   HEAP32[$139 >> 2] = $34; //@line 9475
   $140 = $ReallocAsyncCtx14 + 72 | 0; //@line 9476
   HEAP32[$140 >> 2] = $36; //@line 9477
   $141 = $ReallocAsyncCtx14 + 76 | 0; //@line 9478
   HEAP32[$141 >> 2] = $38; //@line 9479
   $142 = $ReallocAsyncCtx14 + 80 | 0; //@line 9480
   HEAP32[$142 >> 2] = $40; //@line 9481
   $143 = $ReallocAsyncCtx14 + 84 | 0; //@line 9482
   HEAP32[$143 >> 2] = $42; //@line 9483
   $144 = $ReallocAsyncCtx14 + 88 | 0; //@line 9484
   HEAP32[$144 >> 2] = $44; //@line 9485
   $145 = $ReallocAsyncCtx14 + 92 | 0; //@line 9486
   HEAP32[$145 >> 2] = $$131; //@line 9487
   $146 = $ReallocAsyncCtx14 + 96 | 0; //@line 9488
   HEAP32[$146 >> 2] = $51; //@line 9489
   $147 = $ReallocAsyncCtx14 + 100 | 0; //@line 9490
   HEAP32[$147 >> 2] = $50; //@line 9491
   sp = STACKTOP; //@line 9492
   return;
  } else {
   $95 = HEAP32[$91 + 4 >> 2] | 0; //@line 9497
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 9498
   FUNCTION_TABLE_vii[$95 & 7]($40, $52 + 32 | 0); //@line 9499
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 9502
    $96 = $ReallocAsyncCtx + 4 | 0; //@line 9503
    HEAP32[$96 >> 2] = $2; //@line 9504
    $97 = $ReallocAsyncCtx + 8 | 0; //@line 9505
    HEAP32[$97 >> 2] = $4; //@line 9506
    $98 = $ReallocAsyncCtx + 12 | 0; //@line 9507
    HEAP32[$98 >> 2] = $6; //@line 9508
    $99 = $ReallocAsyncCtx + 16 | 0; //@line 9509
    HEAP32[$99 >> 2] = $8; //@line 9510
    $100 = $ReallocAsyncCtx + 20 | 0; //@line 9511
    HEAP32[$100 >> 2] = $10; //@line 9512
    $101 = $ReallocAsyncCtx + 24 | 0; //@line 9513
    HEAP32[$101 >> 2] = $12; //@line 9514
    $102 = $ReallocAsyncCtx + 28 | 0; //@line 9515
    HEAP32[$102 >> 2] = $14; //@line 9516
    $103 = $ReallocAsyncCtx + 32 | 0; //@line 9517
    HEAP32[$103 >> 2] = $16; //@line 9518
    $104 = $ReallocAsyncCtx + 36 | 0; //@line 9519
    HEAP32[$104 >> 2] = $18; //@line 9520
    $105 = $ReallocAsyncCtx + 40 | 0; //@line 9521
    HEAP32[$105 >> 2] = $22; //@line 9522
    $106 = $ReallocAsyncCtx + 44 | 0; //@line 9523
    HEAP32[$106 >> 2] = $50; //@line 9524
    $107 = $ReallocAsyncCtx + 48 | 0; //@line 9525
    HEAP32[$107 >> 2] = $24; //@line 9526
    $108 = $ReallocAsyncCtx + 52 | 0; //@line 9527
    HEAP32[$108 >> 2] = $26; //@line 9528
    $109 = $ReallocAsyncCtx + 56 | 0; //@line 9529
    HEAP32[$109 >> 2] = $28; //@line 9530
    $110 = $ReallocAsyncCtx + 60 | 0; //@line 9531
    HEAP32[$110 >> 2] = $30; //@line 9532
    $111 = $ReallocAsyncCtx + 64 | 0; //@line 9533
    HEAP32[$111 >> 2] = $32; //@line 9534
    $112 = $ReallocAsyncCtx + 68 | 0; //@line 9535
    HEAP32[$112 >> 2] = $34; //@line 9536
    $113 = $ReallocAsyncCtx + 72 | 0; //@line 9537
    HEAP32[$113 >> 2] = $36; //@line 9538
    $114 = $ReallocAsyncCtx + 76 | 0; //@line 9539
    HEAP32[$114 >> 2] = $38; //@line 9540
    $115 = $ReallocAsyncCtx + 80 | 0; //@line 9541
    HEAP32[$115 >> 2] = $20; //@line 9542
    $116 = $ReallocAsyncCtx + 84 | 0; //@line 9543
    HEAP32[$116 >> 2] = $40; //@line 9544
    $117 = $ReallocAsyncCtx + 88 | 0; //@line 9545
    HEAP32[$117 >> 2] = $42; //@line 9546
    $118 = $ReallocAsyncCtx + 92 | 0; //@line 9547
    HEAP32[$118 >> 2] = $44; //@line 9548
    $119 = $ReallocAsyncCtx + 96 | 0; //@line 9549
    HEAP32[$119 >> 2] = $$131; //@line 9550
    $120 = $ReallocAsyncCtx + 100 | 0; //@line 9551
    HEAP32[$120 >> 2] = $90; //@line 9552
    $121 = $ReallocAsyncCtx + 104 | 0; //@line 9553
    HEAP32[$121 >> 2] = $51; //@line 9554
    sp = STACKTOP; //@line 9555
    return;
   }
   ___async_unwind = 0; //@line 9558
   HEAP32[$ReallocAsyncCtx >> 2] = 174; //@line 9559
   $96 = $ReallocAsyncCtx + 4 | 0; //@line 9560
   HEAP32[$96 >> 2] = $2; //@line 9561
   $97 = $ReallocAsyncCtx + 8 | 0; //@line 9562
   HEAP32[$97 >> 2] = $4; //@line 9563
   $98 = $ReallocAsyncCtx + 12 | 0; //@line 9564
   HEAP32[$98 >> 2] = $6; //@line 9565
   $99 = $ReallocAsyncCtx + 16 | 0; //@line 9566
   HEAP32[$99 >> 2] = $8; //@line 9567
   $100 = $ReallocAsyncCtx + 20 | 0; //@line 9568
   HEAP32[$100 >> 2] = $10; //@line 9569
   $101 = $ReallocAsyncCtx + 24 | 0; //@line 9570
   HEAP32[$101 >> 2] = $12; //@line 9571
   $102 = $ReallocAsyncCtx + 28 | 0; //@line 9572
   HEAP32[$102 >> 2] = $14; //@line 9573
   $103 = $ReallocAsyncCtx + 32 | 0; //@line 9574
   HEAP32[$103 >> 2] = $16; //@line 9575
   $104 = $ReallocAsyncCtx + 36 | 0; //@line 9576
   HEAP32[$104 >> 2] = $18; //@line 9577
   $105 = $ReallocAsyncCtx + 40 | 0; //@line 9578
   HEAP32[$105 >> 2] = $22; //@line 9579
   $106 = $ReallocAsyncCtx + 44 | 0; //@line 9580
   HEAP32[$106 >> 2] = $50; //@line 9581
   $107 = $ReallocAsyncCtx + 48 | 0; //@line 9582
   HEAP32[$107 >> 2] = $24; //@line 9583
   $108 = $ReallocAsyncCtx + 52 | 0; //@line 9584
   HEAP32[$108 >> 2] = $26; //@line 9585
   $109 = $ReallocAsyncCtx + 56 | 0; //@line 9586
   HEAP32[$109 >> 2] = $28; //@line 9587
   $110 = $ReallocAsyncCtx + 60 | 0; //@line 9588
   HEAP32[$110 >> 2] = $30; //@line 9589
   $111 = $ReallocAsyncCtx + 64 | 0; //@line 9590
   HEAP32[$111 >> 2] = $32; //@line 9591
   $112 = $ReallocAsyncCtx + 68 | 0; //@line 9592
   HEAP32[$112 >> 2] = $34; //@line 9593
   $113 = $ReallocAsyncCtx + 72 | 0; //@line 9594
   HEAP32[$113 >> 2] = $36; //@line 9595
   $114 = $ReallocAsyncCtx + 76 | 0; //@line 9596
   HEAP32[$114 >> 2] = $38; //@line 9597
   $115 = $ReallocAsyncCtx + 80 | 0; //@line 9598
   HEAP32[$115 >> 2] = $20; //@line 9599
   $116 = $ReallocAsyncCtx + 84 | 0; //@line 9600
   HEAP32[$116 >> 2] = $40; //@line 9601
   $117 = $ReallocAsyncCtx + 88 | 0; //@line 9602
   HEAP32[$117 >> 2] = $42; //@line 9603
   $118 = $ReallocAsyncCtx + 92 | 0; //@line 9604
   HEAP32[$118 >> 2] = $44; //@line 9605
   $119 = $ReallocAsyncCtx + 96 | 0; //@line 9606
   HEAP32[$119 >> 2] = $$131; //@line 9607
   $120 = $ReallocAsyncCtx + 100 | 0; //@line 9608
   HEAP32[$120 >> 2] = $90; //@line 9609
   $121 = $ReallocAsyncCtx + 104 | 0; //@line 9610
   HEAP32[$121 >> 2] = $51; //@line 9611
   sp = STACKTOP; //@line 9612
   return;
  }
 } else if ((label | 0) == 22) {
  HEAP32[$149 >> 2] = 0; //@line 9617
  $154 = $148 + 44 | 0; //@line 9618
  $155 = HEAP32[$154 >> 2] | 0; //@line 9619
  if (!$155) {
   HEAP32[$6 >> 2] = 0; //@line 9622
   $186 = HEAP32[$148 >> 2] | 0; //@line 9623
   HEAP32[$8 >> 2] = 0; //@line 9624
   HEAP32[$10 >> 2] = 180; //@line 9625
   HEAP32[$12 >> 2] = $186; //@line 9626
   HEAP32[$14 >> 2] = 724; //@line 9627
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 9628
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 0, $18) | 0; //@line 9629
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 9632
    $187 = $ReallocAsyncCtx13 + 4 | 0; //@line 9633
    HEAP32[$187 >> 2] = $2; //@line 9634
    $188 = $ReallocAsyncCtx13 + 8 | 0; //@line 9635
    HEAP32[$188 >> 2] = $4; //@line 9636
    $189 = $ReallocAsyncCtx13 + 12 | 0; //@line 9637
    HEAP32[$189 >> 2] = $6; //@line 9638
    $190 = $ReallocAsyncCtx13 + 16 | 0; //@line 9639
    HEAP32[$190 >> 2] = $8; //@line 9640
    $191 = $ReallocAsyncCtx13 + 20 | 0; //@line 9641
    HEAP32[$191 >> 2] = $10; //@line 9642
    $192 = $ReallocAsyncCtx13 + 24 | 0; //@line 9643
    HEAP32[$192 >> 2] = $12; //@line 9644
    $193 = $ReallocAsyncCtx13 + 28 | 0; //@line 9645
    HEAP32[$193 >> 2] = $14; //@line 9646
    $194 = $ReallocAsyncCtx13 + 32 | 0; //@line 9647
    HEAP32[$194 >> 2] = $16; //@line 9648
    $195 = $ReallocAsyncCtx13 + 36 | 0; //@line 9649
    HEAP32[$195 >> 2] = $18; //@line 9650
    $196 = $ReallocAsyncCtx13 + 40 | 0; //@line 9651
    HEAP32[$196 >> 2] = $20; //@line 9652
    $197 = $ReallocAsyncCtx13 + 44 | 0; //@line 9653
    HEAP32[$197 >> 2] = $22; //@line 9654
    $198 = $ReallocAsyncCtx13 + 48 | 0; //@line 9655
    HEAP32[$198 >> 2] = $24; //@line 9656
    $199 = $ReallocAsyncCtx13 + 52 | 0; //@line 9657
    HEAP32[$199 >> 2] = $26; //@line 9658
    $200 = $ReallocAsyncCtx13 + 56 | 0; //@line 9659
    HEAP32[$200 >> 2] = $28; //@line 9660
    $201 = $ReallocAsyncCtx13 + 60 | 0; //@line 9661
    HEAP32[$201 >> 2] = $30; //@line 9662
    $202 = $ReallocAsyncCtx13 + 64 | 0; //@line 9663
    HEAP32[$202 >> 2] = $32; //@line 9664
    $203 = $ReallocAsyncCtx13 + 68 | 0; //@line 9665
    HEAP32[$203 >> 2] = $34; //@line 9666
    $204 = $ReallocAsyncCtx13 + 72 | 0; //@line 9667
    HEAP32[$204 >> 2] = $36; //@line 9668
    $205 = $ReallocAsyncCtx13 + 76 | 0; //@line 9669
    HEAP32[$205 >> 2] = $38; //@line 9670
    $206 = $ReallocAsyncCtx13 + 80 | 0; //@line 9671
    HEAP32[$206 >> 2] = $40; //@line 9672
    $207 = $ReallocAsyncCtx13 + 84 | 0; //@line 9673
    HEAP32[$207 >> 2] = $42; //@line 9674
    $208 = $ReallocAsyncCtx13 + 88 | 0; //@line 9675
    HEAP32[$208 >> 2] = $44; //@line 9676
    $209 = $ReallocAsyncCtx13 + 92 | 0; //@line 9677
    HEAP32[$209 >> 2] = $$131; //@line 9678
    $210 = $ReallocAsyncCtx13 + 96 | 0; //@line 9679
    HEAP32[$210 >> 2] = $51; //@line 9680
    $211 = $ReallocAsyncCtx13 + 100 | 0; //@line 9681
    HEAP32[$211 >> 2] = $50; //@line 9682
    sp = STACKTOP; //@line 9683
    return;
   }
   ___async_unwind = 0; //@line 9686
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 9687
   $187 = $ReallocAsyncCtx13 + 4 | 0; //@line 9688
   HEAP32[$187 >> 2] = $2; //@line 9689
   $188 = $ReallocAsyncCtx13 + 8 | 0; //@line 9690
   HEAP32[$188 >> 2] = $4; //@line 9691
   $189 = $ReallocAsyncCtx13 + 12 | 0; //@line 9692
   HEAP32[$189 >> 2] = $6; //@line 9693
   $190 = $ReallocAsyncCtx13 + 16 | 0; //@line 9694
   HEAP32[$190 >> 2] = $8; //@line 9695
   $191 = $ReallocAsyncCtx13 + 20 | 0; //@line 9696
   HEAP32[$191 >> 2] = $10; //@line 9697
   $192 = $ReallocAsyncCtx13 + 24 | 0; //@line 9698
   HEAP32[$192 >> 2] = $12; //@line 9699
   $193 = $ReallocAsyncCtx13 + 28 | 0; //@line 9700
   HEAP32[$193 >> 2] = $14; //@line 9701
   $194 = $ReallocAsyncCtx13 + 32 | 0; //@line 9702
   HEAP32[$194 >> 2] = $16; //@line 9703
   $195 = $ReallocAsyncCtx13 + 36 | 0; //@line 9704
   HEAP32[$195 >> 2] = $18; //@line 9705
   $196 = $ReallocAsyncCtx13 + 40 | 0; //@line 9706
   HEAP32[$196 >> 2] = $20; //@line 9707
   $197 = $ReallocAsyncCtx13 + 44 | 0; //@line 9708
   HEAP32[$197 >> 2] = $22; //@line 9709
   $198 = $ReallocAsyncCtx13 + 48 | 0; //@line 9710
   HEAP32[$198 >> 2] = $24; //@line 9711
   $199 = $ReallocAsyncCtx13 + 52 | 0; //@line 9712
   HEAP32[$199 >> 2] = $26; //@line 9713
   $200 = $ReallocAsyncCtx13 + 56 | 0; //@line 9714
   HEAP32[$200 >> 2] = $28; //@line 9715
   $201 = $ReallocAsyncCtx13 + 60 | 0; //@line 9716
   HEAP32[$201 >> 2] = $30; //@line 9717
   $202 = $ReallocAsyncCtx13 + 64 | 0; //@line 9718
   HEAP32[$202 >> 2] = $32; //@line 9719
   $203 = $ReallocAsyncCtx13 + 68 | 0; //@line 9720
   HEAP32[$203 >> 2] = $34; //@line 9721
   $204 = $ReallocAsyncCtx13 + 72 | 0; //@line 9722
   HEAP32[$204 >> 2] = $36; //@line 9723
   $205 = $ReallocAsyncCtx13 + 76 | 0; //@line 9724
   HEAP32[$205 >> 2] = $38; //@line 9725
   $206 = $ReallocAsyncCtx13 + 80 | 0; //@line 9726
   HEAP32[$206 >> 2] = $40; //@line 9727
   $207 = $ReallocAsyncCtx13 + 84 | 0; //@line 9728
   HEAP32[$207 >> 2] = $42; //@line 9729
   $208 = $ReallocAsyncCtx13 + 88 | 0; //@line 9730
   HEAP32[$208 >> 2] = $44; //@line 9731
   $209 = $ReallocAsyncCtx13 + 92 | 0; //@line 9732
   HEAP32[$209 >> 2] = $$131; //@line 9733
   $210 = $ReallocAsyncCtx13 + 96 | 0; //@line 9734
   HEAP32[$210 >> 2] = $51; //@line 9735
   $211 = $ReallocAsyncCtx13 + 100 | 0; //@line 9736
   HEAP32[$211 >> 2] = $50; //@line 9737
   sp = STACKTOP; //@line 9738
   return;
  } else {
   $159 = HEAP32[$155 + 4 >> 2] | 0; //@line 9743
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 9744
   FUNCTION_TABLE_vii[$159 & 7]($4, $148 + 32 | 0); //@line 9745
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 9748
    $160 = $ReallocAsyncCtx4 + 4 | 0; //@line 9749
    HEAP32[$160 >> 2] = $2; //@line 9750
    $161 = $ReallocAsyncCtx4 + 8 | 0; //@line 9751
    HEAP32[$161 >> 2] = $4; //@line 9752
    $162 = $ReallocAsyncCtx4 + 12 | 0; //@line 9753
    HEAP32[$162 >> 2] = $6; //@line 9754
    $163 = $ReallocAsyncCtx4 + 16 | 0; //@line 9755
    HEAP32[$163 >> 2] = $8; //@line 9756
    $164 = $ReallocAsyncCtx4 + 20 | 0; //@line 9757
    HEAP32[$164 >> 2] = $10; //@line 9758
    $165 = $ReallocAsyncCtx4 + 24 | 0; //@line 9759
    HEAP32[$165 >> 2] = $12; //@line 9760
    $166 = $ReallocAsyncCtx4 + 28 | 0; //@line 9761
    HEAP32[$166 >> 2] = $14; //@line 9762
    $167 = $ReallocAsyncCtx4 + 32 | 0; //@line 9763
    HEAP32[$167 >> 2] = $16; //@line 9764
    $168 = $ReallocAsyncCtx4 + 36 | 0; //@line 9765
    HEAP32[$168 >> 2] = $18; //@line 9766
    $169 = $ReallocAsyncCtx4 + 40 | 0; //@line 9767
    HEAP32[$169 >> 2] = $22; //@line 9768
    $170 = $ReallocAsyncCtx4 + 44 | 0; //@line 9769
    HEAP32[$170 >> 2] = $154; //@line 9770
    $171 = $ReallocAsyncCtx4 + 48 | 0; //@line 9771
    HEAP32[$171 >> 2] = $50; //@line 9772
    $172 = $ReallocAsyncCtx4 + 52 | 0; //@line 9773
    HEAP32[$172 >> 2] = $24; //@line 9774
    $173 = $ReallocAsyncCtx4 + 56 | 0; //@line 9775
    HEAP32[$173 >> 2] = $26; //@line 9776
    $174 = $ReallocAsyncCtx4 + 60 | 0; //@line 9777
    HEAP32[$174 >> 2] = $28; //@line 9778
    $175 = $ReallocAsyncCtx4 + 64 | 0; //@line 9779
    HEAP32[$175 >> 2] = $30; //@line 9780
    $176 = $ReallocAsyncCtx4 + 68 | 0; //@line 9781
    HEAP32[$176 >> 2] = $32; //@line 9782
    $177 = $ReallocAsyncCtx4 + 72 | 0; //@line 9783
    HEAP32[$177 >> 2] = $34; //@line 9784
    $178 = $ReallocAsyncCtx4 + 76 | 0; //@line 9785
    HEAP32[$178 >> 2] = $36; //@line 9786
    $179 = $ReallocAsyncCtx4 + 80 | 0; //@line 9787
    HEAP32[$179 >> 2] = $38; //@line 9788
    $180 = $ReallocAsyncCtx4 + 84 | 0; //@line 9789
    HEAP32[$180 >> 2] = $20; //@line 9790
    $181 = $ReallocAsyncCtx4 + 88 | 0; //@line 9791
    HEAP32[$181 >> 2] = $40; //@line 9792
    $182 = $ReallocAsyncCtx4 + 92 | 0; //@line 9793
    HEAP32[$182 >> 2] = $42; //@line 9794
    $183 = $ReallocAsyncCtx4 + 96 | 0; //@line 9795
    HEAP32[$183 >> 2] = $44; //@line 9796
    $184 = $ReallocAsyncCtx4 + 100 | 0; //@line 9797
    HEAP32[$184 >> 2] = $$131; //@line 9798
    $185 = $ReallocAsyncCtx4 + 104 | 0; //@line 9799
    HEAP32[$185 >> 2] = $51; //@line 9800
    sp = STACKTOP; //@line 9801
    return;
   }
   ___async_unwind = 0; //@line 9804
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 9805
   $160 = $ReallocAsyncCtx4 + 4 | 0; //@line 9806
   HEAP32[$160 >> 2] = $2; //@line 9807
   $161 = $ReallocAsyncCtx4 + 8 | 0; //@line 9808
   HEAP32[$161 >> 2] = $4; //@line 9809
   $162 = $ReallocAsyncCtx4 + 12 | 0; //@line 9810
   HEAP32[$162 >> 2] = $6; //@line 9811
   $163 = $ReallocAsyncCtx4 + 16 | 0; //@line 9812
   HEAP32[$163 >> 2] = $8; //@line 9813
   $164 = $ReallocAsyncCtx4 + 20 | 0; //@line 9814
   HEAP32[$164 >> 2] = $10; //@line 9815
   $165 = $ReallocAsyncCtx4 + 24 | 0; //@line 9816
   HEAP32[$165 >> 2] = $12; //@line 9817
   $166 = $ReallocAsyncCtx4 + 28 | 0; //@line 9818
   HEAP32[$166 >> 2] = $14; //@line 9819
   $167 = $ReallocAsyncCtx4 + 32 | 0; //@line 9820
   HEAP32[$167 >> 2] = $16; //@line 9821
   $168 = $ReallocAsyncCtx4 + 36 | 0; //@line 9822
   HEAP32[$168 >> 2] = $18; //@line 9823
   $169 = $ReallocAsyncCtx4 + 40 | 0; //@line 9824
   HEAP32[$169 >> 2] = $22; //@line 9825
   $170 = $ReallocAsyncCtx4 + 44 | 0; //@line 9826
   HEAP32[$170 >> 2] = $154; //@line 9827
   $171 = $ReallocAsyncCtx4 + 48 | 0; //@line 9828
   HEAP32[$171 >> 2] = $50; //@line 9829
   $172 = $ReallocAsyncCtx4 + 52 | 0; //@line 9830
   HEAP32[$172 >> 2] = $24; //@line 9831
   $173 = $ReallocAsyncCtx4 + 56 | 0; //@line 9832
   HEAP32[$173 >> 2] = $26; //@line 9833
   $174 = $ReallocAsyncCtx4 + 60 | 0; //@line 9834
   HEAP32[$174 >> 2] = $28; //@line 9835
   $175 = $ReallocAsyncCtx4 + 64 | 0; //@line 9836
   HEAP32[$175 >> 2] = $30; //@line 9837
   $176 = $ReallocAsyncCtx4 + 68 | 0; //@line 9838
   HEAP32[$176 >> 2] = $32; //@line 9839
   $177 = $ReallocAsyncCtx4 + 72 | 0; //@line 9840
   HEAP32[$177 >> 2] = $34; //@line 9841
   $178 = $ReallocAsyncCtx4 + 76 | 0; //@line 9842
   HEAP32[$178 >> 2] = $36; //@line 9843
   $179 = $ReallocAsyncCtx4 + 80 | 0; //@line 9844
   HEAP32[$179 >> 2] = $38; //@line 9845
   $180 = $ReallocAsyncCtx4 + 84 | 0; //@line 9846
   HEAP32[$180 >> 2] = $20; //@line 9847
   $181 = $ReallocAsyncCtx4 + 88 | 0; //@line 9848
   HEAP32[$181 >> 2] = $40; //@line 9849
   $182 = $ReallocAsyncCtx4 + 92 | 0; //@line 9850
   HEAP32[$182 >> 2] = $42; //@line 9851
   $183 = $ReallocAsyncCtx4 + 96 | 0; //@line 9852
   HEAP32[$183 >> 2] = $44; //@line 9853
   $184 = $ReallocAsyncCtx4 + 100 | 0; //@line 9854
   HEAP32[$184 >> 2] = $$131; //@line 9855
   $185 = $ReallocAsyncCtx4 + 104 | 0; //@line 9856
   HEAP32[$185 >> 2] = $51; //@line 9857
   sp = STACKTOP; //@line 9858
   return;
  }
 }
}
function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$ph = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $101 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $120 = 0, $122 = 0, $127 = 0, $13 = 0, $134 = 0, $14 = 0, $140 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $192 = 0, $193 = 0, $20 = 0, $201 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $227 = 0, $23 = 0, $235 = 0, $236 = 0, $239 = 0, $247 = 0, $254 = 0, $262 = 0, $269 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $292 = 0.0, $3 = 0, $312 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $35 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $65 = 0, $90 = 0, $91 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5645
 STACKTOP = STACKTOP + 288 | 0; //@line 5646
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 5646
 $3 = sp + 8 | 0; //@line 5647
 $4 = sp + 17 | 0; //@line 5648
 $5 = sp; //@line 5649
 $6 = sp + 16 | 0; //@line 5650
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $314 = ___lockfile($0) | 0; //@line 5656
 } else {
  $314 = 0; //@line 5658
 }
 $11 = HEAP8[$1 >> 0] | 0; //@line 5660
 L4 : do {
  if (!($11 << 24 >> 24)) {
   $$3291 = 0; //@line 5664
  } else {
   $13 = $0 + 4 | 0; //@line 5666
   $14 = $0 + 100 | 0; //@line 5667
   $15 = $0 + 108 | 0; //@line 5668
   $16 = $0 + 8 | 0; //@line 5669
   $17 = $4 + 10 | 0; //@line 5670
   $18 = $4 + 33 | 0; //@line 5671
   $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0; //@line 5672
   $$0273408 = $1; //@line 5673
   $$0283407 = 0; //@line 5673
   $$0288404 = 0; //@line 5673
   $$0305402 = 0; //@line 5673
   $20 = $11; //@line 5673
   $315 = 0; //@line 5673
   L6 : while (1) {
    L8 : do {
     if (!(_isspace($20 & 255) | 0)) {
      $50 = (HEAP8[$$0273408 >> 0] | 0) == 37; //@line 5681
      L10 : do {
       if ($50) {
        $51 = $$0273408 + 1 | 0; //@line 5684
        $52 = HEAP8[$51 >> 0] | 0; //@line 5685
        L12 : do {
         switch ($52 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $$0293 = 0; //@line 5694
           $$2275 = $$0273408 + 2 | 0; //@line 5694
           break;
          }
         default:
          {
           if (_isdigit($52 & 255) | 0) {
            if ((HEAP8[$$0273408 + 2 >> 0] | 0) == 36) {
             $$0293 = _arg_n_727($2, (HEAPU8[$51 >> 0] | 0) + -48 | 0) | 0; //@line 5711
             $$2275 = $$0273408 + 3 | 0; //@line 5711
             break L12;
            }
           }
           $90 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5726
           $91 = HEAP32[$90 >> 2] | 0; //@line 5727
           HEAP32[$2 >> 2] = $90 + 4; //@line 5729
           $$0293 = $91; //@line 5730
           $$2275 = $51; //@line 5730
          }
         }
        } while (0);
        if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
         $$0266$lcssa = 0; //@line 5739
         $$3$lcssa = $$2275; //@line 5739
        } else {
         $$0266397 = 0; //@line 5741
         $$3396 = $$2275; //@line 5741
         while (1) {
          $100 = ($$0266397 * 10 | 0) + -48 + (HEAPU8[$$3396 >> 0] | 0) | 0; //@line 5747
          $101 = $$3396 + 1 | 0; //@line 5748
          if (!(_isdigit(HEAPU8[$101 >> 0] | 0) | 0)) {
           $$0266$lcssa = $100; //@line 5754
           $$3$lcssa = $101; //@line 5754
           break;
          } else {
           $$0266397 = $100; //@line 5757
           $$3396 = $101; //@line 5757
          }
         }
        }
        $106 = HEAP8[$$3$lcssa >> 0] | 0; //@line 5761
        $108 = $$3$lcssa + 1 | 0; //@line 5763
        if ($106 << 24 >> 24 == 109) {
         $$0270 = ($$0293 | 0) != 0 & 1; //@line 5768
         $$1306 = 0; //@line 5768
         $$4 = $108; //@line 5768
         $112 = HEAP8[$108 >> 0] | 0; //@line 5768
         $318 = 0; //@line 5768
        } else {
         $$0270 = 0; //@line 5770
         $$1306 = $$0305402; //@line 5770
         $$4 = $$3$lcssa; //@line 5770
         $112 = $106; //@line 5770
         $318 = $315; //@line 5770
        }
        $111 = $$4 + 1 | 0; //@line 5772
        switch ($112 << 24 >> 24) {
        case 104:
         {
          $114 = (HEAP8[$111 >> 0] | 0) == 104; //@line 5776
          $$0268 = $114 ? -2 : -1; //@line 5780
          $$5 = $114 ? $$4 + 2 | 0 : $111; //@line 5780
          break;
         }
        case 108:
         {
          $117 = (HEAP8[$111 >> 0] | 0) == 108; //@line 5785
          $$0268 = $117 ? 3 : 1; //@line 5789
          $$5 = $117 ? $$4 + 2 | 0 : $111; //@line 5789
          break;
         }
        case 106:
         {
          $$0268 = 3; //@line 5793
          $$5 = $111; //@line 5793
          break;
         }
        case 116:
        case 122:
         {
          $$0268 = 1; //@line 5797
          $$5 = $111; //@line 5797
          break;
         }
        case 76:
         {
          $$0268 = 2; //@line 5801
          $$5 = $111; //@line 5801
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $$0268 = 0; //@line 5805
          $$5 = $$4; //@line 5805
          break;
         }
        default:
         {
          $$7312 = $$1306; //@line 5809
          $319 = $318; //@line 5809
          label = 136; //@line 5810
          break L6;
         }
        }
        $120 = HEAPU8[$$5 >> 0] | 0; //@line 5815
        $122 = ($120 & 47 | 0) == 3; //@line 5817
        $$ = $122 ? $120 | 32 : $120; //@line 5819
        $$$0268 = $122 ? 1 : $$0268; //@line 5820
        $trunc = $$ & 255; //@line 5821
        switch ($trunc << 24 >> 24) {
        case 99:
         {
          $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1; //@line 5826
          $$1284 = $$0283407; //@line 5826
          break;
         }
        case 91:
         {
          $$1267 = $$0266$lcssa; //@line 5830
          $$1284 = $$0283407; //@line 5830
          break;
         }
        case 110:
         {
          _store_int_728($$0293, $$$0268, $$0283407, (($$0283407 | 0) < 0) << 31 >> 31); //@line 5836
          $$11 = $$5; //@line 5837
          $$1289 = $$0288404; //@line 5837
          $$2285 = $$0283407; //@line 5837
          $$6311 = $$1306; //@line 5837
          $316 = $318; //@line 5837
          break L8;
          break;
         }
        default:
         {
          ___shlim($0, 0); //@line 5842
          do {
           $127 = HEAP32[$13 >> 2] | 0; //@line 5844
           if ($127 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $127 + 1; //@line 5849
            $134 = HEAPU8[$127 >> 0] | 0; //@line 5852
           } else {
            $134 = ___shgetc($0) | 0; //@line 5855
           }
          } while ((_isspace($134) | 0) != 0);
          if (!(HEAP32[$14 >> 2] | 0)) {
           $146 = HEAP32[$13 >> 2] | 0; //@line 5867
          } else {
           $140 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 5870
           HEAP32[$13 >> 2] = $140; //@line 5871
           $146 = $140; //@line 5873
          }
          $$1267 = $$0266$lcssa; //@line 5880
          $$1284 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $146 - (HEAP32[$16 >> 2] | 0) | 0; //@line 5880
         }
        }
        ___shlim($0, $$1267); //@line 5883
        $148 = HEAP32[$13 >> 2] | 0; //@line 5884
        $149 = HEAP32[$14 >> 2] | 0; //@line 5885
        if ($148 >>> 0 < $149 >>> 0) {
         HEAP32[$13 >> 2] = $148 + 1; //@line 5889
         $155 = $149; //@line 5890
        } else {
         if ((___shgetc($0) | 0) < 0) {
          $$7312 = $$1306; //@line 5895
          $319 = $318; //@line 5895
          label = 136; //@line 5896
          break L6;
         }
         $155 = HEAP32[$14 >> 2] | 0; //@line 5900
        }
        if ($155 | 0) {
         HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 5906
        }
        L58 : do {
         switch ($trunc << 24 >> 24) {
         case 91:
         case 99:
         case 115:
          {
           $158 = ($$ | 0) == 99; //@line 5911
           L60 : do {
            if (($$ | 16 | 0) == 115) {
             _memset($4 | 0, -1, 257) | 0; //@line 5917
             HEAP8[$4 >> 0] = 0; //@line 5918
             if (($$ | 0) == 115) {
              HEAP8[$18 >> 0] = 0; //@line 5920
              HEAP8[$17 >> 0] = 0; //@line 5921
              HEAP8[$17 + 1 >> 0] = 0; //@line 5921
              HEAP8[$17 + 2 >> 0] = 0; //@line 5921
              HEAP8[$17 + 3 >> 0] = 0; //@line 5921
              HEAP8[$17 + 4 >> 0] = 0; //@line 5921
              $$9 = $$5; //@line 5922
             } else {
              $$9 = $$5; //@line 5924
             }
            } else {
             $162 = $$5 + 1 | 0; //@line 5927
             $164 = (HEAP8[$162 >> 0] | 0) == 94; //@line 5929
             $$0292 = $164 & 1; //@line 5931
             $$6 = $164 ? $$5 + 2 | 0 : $162; //@line 5932
             _memset($4 | 0, $$0292 | 0, 257) | 0; //@line 5933
             HEAP8[$4 >> 0] = 0; //@line 5934
             $166 = HEAP8[$$6 >> 0] | 0; //@line 5935
             switch ($166 << 24 >> 24) {
             case 45:
              {
               $$6$pn = $$6; //@line 5938
               $$sink330 = 46; //@line 5938
               label = 65; //@line 5939
               break;
              }
             case 93:
              {
               $$6$pn = $$6; //@line 5943
               $$sink330 = 94; //@line 5943
               label = 65; //@line 5944
               break;
              }
             default:
              {
               $$7 = $$6; //@line 5948
               $168 = $166; //@line 5948
              }
             }
             while (1) {
              if ((label | 0) == 65) {
               label = 0; //@line 5953
               HEAP8[$4 + $$sink330 >> 0] = $$0292 ^ 1; //@line 5957
               $$7$ph = $$6$pn + 1 | 0; //@line 5958
               $$7 = $$7$ph; //@line 5960
               $168 = HEAP8[$$7$ph >> 0] | 0; //@line 5960
              }
              L70 : do {
               switch ($168 << 24 >> 24) {
               case 0:
                {
                 $$7312 = $$1306; //@line 5965
                 $319 = $318; //@line 5965
                 label = 136; //@line 5966
                 break L6;
                 break;
                }
               case 93:
                {
                 $$9 = $$7; //@line 5971
                 break L60;
                 break;
                }
               case 45:
                {
                 $169 = $$7 + 1 | 0; //@line 5976
                 $170 = HEAP8[$169 >> 0] | 0; //@line 5977
                 switch ($170 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $$8 = $$7; //@line 5980
                   $183 = 45; //@line 5980
                   break L70;
                   break;
                  }
                 default:
                  {}
                 }
                 $172 = HEAP8[$$7 + -1 >> 0] | 0; //@line 5988
                 if (($172 & 255) < ($170 & 255)) {
                  $176 = ($$0292 ^ 1) & 255; //@line 5993
                  $$0286399 = $172 & 255; //@line 5994
                  do {
                   $$0286399 = $$0286399 + 1 | 0; //@line 5996
                   HEAP8[$4 + $$0286399 >> 0] = $176; //@line 5998
                   $179 = HEAP8[$169 >> 0] | 0; //@line 5999
                  } while (($$0286399 | 0) < ($179 & 255 | 0));
                  $$8 = $169; //@line 6005
                  $183 = $179; //@line 6005
                 } else {
                  $$8 = $169; //@line 6010
                  $183 = $170; //@line 6010
                 }
                 break;
                }
               default:
                {
                 $$8 = $$7; //@line 6015
                 $183 = $168; //@line 6015
                }
               }
              } while (0);
              $$6$pn = $$8; //@line 6021
              $$sink330 = ($183 & 255) + 1 | 0; //@line 6021
              label = 65; //@line 6022
             }
            }
           } while (0);
           $186 = $158 ? $$1267 + 1 | 0 : 31; //@line 6027
           $187 = ($$$0268 | 0) == 1; //@line 6028
           $188 = ($$0270 | 0) != 0; //@line 6029
           L78 : do {
            if ($187) {
             if ($188) {
              $190 = _malloc($186 << 2) | 0; //@line 6034
              if (!$190) {
               $$7312 = 0; //@line 6037
               $319 = 0; //@line 6037
               label = 136; //@line 6038
               break L6;
              } else {
               $321 = $190; //@line 6041
              }
             } else {
              $321 = $$0293; //@line 6044
             }
             HEAP32[$3 >> 2] = 0; //@line 6046
             HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0; //@line 6047
             $$0276$ph = $186; //@line 6048
             $$0278$ph = 0; //@line 6048
             $$ph = $321; //@line 6048
             L83 : while (1) {
              $192 = ($$ph | 0) == 0; //@line 6050
              $$0278$ph336 = $$0278$ph; //@line 6051
              while (1) {
               L87 : while (1) {
                $193 = HEAP32[$13 >> 2] | 0; //@line 6054
                if ($193 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $193 + 1; //@line 6059
                 $201 = HEAPU8[$193 >> 0] | 0; //@line 6062
                } else {
                 $201 = ___shgetc($0) | 0; //@line 6065
                }
                if (!(HEAP8[$4 + ($201 + 1) >> 0] | 0)) {
                 break L83;
                }
                HEAP8[$6 >> 0] = $201; //@line 6075
                switch (_mbrtowc($5, $6, 1, $3) | 0) {
                case -1:
                 {
                  $$7312 = 0; //@line 6079
                  $319 = $$ph; //@line 6079
                  label = 136; //@line 6080
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L87;
                 }
                }
               }
               if ($192) {
                $$1279 = $$0278$ph336; //@line 6093
               } else {
                HEAP32[$$ph + ($$0278$ph336 << 2) >> 2] = HEAP32[$5 >> 2]; //@line 6098
                $$1279 = $$0278$ph336 + 1 | 0; //@line 6099
               }
               if ($188 & ($$1279 | 0) == ($$0276$ph | 0)) {
                break;
               } else {
                $$0278$ph336 = $$1279; //@line 6106
               }
              }
              $211 = $$0276$ph << 1 | 1; //@line 6110
              $213 = _realloc($$ph, $211 << 2) | 0; //@line 6112
              if (!$213) {
               $$7312 = 0; //@line 6115
               $319 = $$ph; //@line 6115
               label = 136; //@line 6116
               break L6;
              } else {
               $$0278$ph$phi = $$0276$ph; //@line 6119
               $$0276$ph = $211; //@line 6119
               $$ph = $213; //@line 6119
               $$0278$ph = $$0278$ph$phi; //@line 6119
              }
             }
             if (!(_mbsinit($3) | 0)) {
              $$7312 = 0; //@line 6125
              $319 = $$ph; //@line 6125
              label = 136; //@line 6126
              break L6;
             } else {
              $$4282 = $$0278$ph336; //@line 6129
              $$4309 = 0; //@line 6129
              $$5299 = $$ph; //@line 6129
              $322 = $$ph; //@line 6129
             }
            } else {
             if ($188) {
              $217 = _malloc($186) | 0; //@line 6133
              if (!$217) {
               $$7312 = 0; //@line 6136
               $319 = 0; //@line 6136
               label = 136; //@line 6137
               break L6;
              } else {
               $$1277$ph = $186; //@line 6140
               $$2280$ph = 0; //@line 6140
               $$2307$ph = $217; //@line 6140
              }
              while (1) {
               $$2280 = $$2280$ph; //@line 6143
               do {
                $219 = HEAP32[$13 >> 2] | 0; //@line 6145
                if ($219 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $219 + 1; //@line 6150
                 $227 = HEAPU8[$219 >> 0] | 0; //@line 6153
                } else {
                 $227 = ___shgetc($0) | 0; //@line 6156
                }
                if (!(HEAP8[$4 + ($227 + 1) >> 0] | 0)) {
                 $$4282 = $$2280; //@line 6163
                 $$4309 = $$2307$ph; //@line 6163
                 $$5299 = 0; //@line 6163
                 $322 = 0; //@line 6163
                 break L78;
                }
                HEAP8[$$2307$ph + $$2280 >> 0] = $227; //@line 6169
                $$2280 = $$2280 + 1 | 0; //@line 6167
               } while (($$2280 | 0) != ($$1277$ph | 0));
               $235 = $$1277$ph << 1 | 1; //@line 6178
               $236 = _realloc($$2307$ph, $235) | 0; //@line 6179
               if (!$236) {
                $$7312 = $$2307$ph; //@line 6182
                $319 = 0; //@line 6182
                label = 136; //@line 6183
                break L6;
               } else {
                $$2280$ph$phi = $$1277$ph; //@line 6186
                $$1277$ph = $235; //@line 6186
                $$2307$ph = $236; //@line 6186
                $$2280$ph = $$2280$ph$phi; //@line 6186
               }
              }
             }
             if (!$$0293) {
              while (1) {
               $254 = HEAP32[$13 >> 2] | 0; //@line 6193
               if ($254 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                HEAP32[$13 >> 2] = $254 + 1; //@line 6198
                $262 = HEAPU8[$254 >> 0] | 0; //@line 6201
               } else {
                $262 = ___shgetc($0) | 0; //@line 6204
               }
               if (!(HEAP8[$4 + ($262 + 1) >> 0] | 0)) {
                $$4282 = 0; //@line 6211
                $$4309 = 0; //@line 6211
                $$5299 = 0; //@line 6211
                $322 = 0; //@line 6211
                break L78;
               }
              }
             } else {
              $$3281 = 0; //@line 6216
             }
             while (1) {
              $239 = HEAP32[$13 >> 2] | 0; //@line 6219
              if ($239 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
               HEAP32[$13 >> 2] = $239 + 1; //@line 6224
               $247 = HEAPU8[$239 >> 0] | 0; //@line 6227
              } else {
               $247 = ___shgetc($0) | 0; //@line 6230
              }
              if (!(HEAP8[$4 + ($247 + 1) >> 0] | 0)) {
               $$4282 = $$3281; //@line 6237
               $$4309 = $$0293; //@line 6237
               $$5299 = 0; //@line 6237
               $322 = 0; //@line 6237
               break L78;
              }
              HEAP8[$$0293 + $$3281 >> 0] = $247; //@line 6243
              $$3281 = $$3281 + 1 | 0; //@line 6244
             }
            }
           } while (0);
           if (!(HEAP32[$14 >> 2] | 0)) {
            $274 = HEAP32[$13 >> 2] | 0; //@line 6252
           } else {
            $269 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6255
            HEAP32[$13 >> 2] = $269; //@line 6256
            $274 = $269; //@line 6258
           }
           $275 = $274 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0; //@line 6263
           if (!$275) {
            $$2 = $$0270; //@line 6266
            $$2290 = $$0288404; //@line 6266
            $$9314 = $$4309; //@line 6266
            $312 = $322; //@line 6266
            break L6;
           }
           if (!(($275 | 0) == ($$1267 | 0) | $158 ^ 1)) {
            $$2 = $$0270; //@line 6273
            $$2290 = $$0288404; //@line 6273
            $$9314 = $$4309; //@line 6273
            $312 = $322; //@line 6273
            break L6;
           }
           do {
            if ($188) {
             if ($187) {
              HEAP32[$$0293 >> 2] = $$5299; //@line 6279
              break;
             } else {
              HEAP32[$$0293 >> 2] = $$4309; //@line 6282
              break;
             }
            }
           } while (0);
           if ($158) {
            $$10 = $$9; //@line 6288
            $$5310 = $$4309; //@line 6288
            $320 = $322; //@line 6288
           } else {
            if ($$5299 | 0) {
             HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0; //@line 6293
            }
            if (!$$4309) {
             $$10 = $$9; //@line 6297
             $$5310 = 0; //@line 6297
             $320 = $322; //@line 6297
             break L58;
            }
            HEAP8[$$4309 + $$4282 >> 0] = 0; //@line 6301
            $$10 = $$9; //@line 6302
            $$5310 = $$4309; //@line 6302
            $320 = $322; //@line 6302
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $$0272 = 16; //@line 6307
           label = 124; //@line 6308
           break;
          }
         case 111:
          {
           $$0272 = 8; //@line 6312
           label = 124; //@line 6313
           break;
          }
         case 117:
         case 100:
          {
           $$0272 = 10; //@line 6317
           label = 124; //@line 6318
           break;
          }
         case 105:
          {
           $$0272 = 0; //@line 6322
           label = 124; //@line 6323
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $292 = +___floatscan($0, $$$0268, 0); //@line 6327
           if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
            $$2 = $$0270; //@line 6334
            $$2290 = $$0288404; //@line 6334
            $$9314 = $$1306; //@line 6334
            $312 = $318; //@line 6334
            break L6;
           }
           if (!$$0293) {
            $$10 = $$5; //@line 6339
            $$5310 = $$1306; //@line 6339
            $320 = $318; //@line 6339
           } else {
            switch ($$$0268 | 0) {
            case 0:
             {
              HEAPF32[$$0293 >> 2] = $292; //@line 6344
              $$10 = $$5; //@line 6345
              $$5310 = $$1306; //@line 6345
              $320 = $318; //@line 6345
              break L58;
              break;
             }
            case 1:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6350
              $$10 = $$5; //@line 6351
              $$5310 = $$1306; //@line 6351
              $320 = $318; //@line 6351
              break L58;
              break;
             }
            case 2:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6356
              $$10 = $$5; //@line 6357
              $$5310 = $$1306; //@line 6357
              $320 = $318; //@line 6357
              break L58;
              break;
             }
            default:
             {
              $$10 = $$5; //@line 6362
              $$5310 = $$1306; //@line 6362
              $320 = $318; //@line 6362
              break L58;
             }
            }
           }
           break;
          }
         default:
          {
           $$10 = $$5; //@line 6370
           $$5310 = $$1306; //@line 6370
           $320 = $318; //@line 6370
          }
         }
        } while (0);
        do {
         if ((label | 0) == 124) {
          label = 0; //@line 6376
          $282 = ___intscan($0, $$0272, 0, -1, -1) | 0; //@line 6377
          if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
           $$2 = $$0270; //@line 6385
           $$2290 = $$0288404; //@line 6385
           $$9314 = $$1306; //@line 6385
           $312 = $318; //@line 6385
           break L6;
          }
          if (($$0293 | 0) != 0 & ($$ | 0) == 112) {
           HEAP32[$$0293 >> 2] = $282; //@line 6393
           $$10 = $$5; //@line 6394
           $$5310 = $$1306; //@line 6394
           $320 = $318; //@line 6394
           break;
          } else {
           _store_int_728($$0293, $$$0268, $282, tempRet0); //@line 6397
           $$10 = $$5; //@line 6398
           $$5310 = $$1306; //@line 6398
           $320 = $318; //@line 6398
           break;
          }
         }
        } while (0);
        $$11 = $$10; //@line 6412
        $$1289 = $$0288404 + (($$0293 | 0) != 0 & 1) | 0; //@line 6412
        $$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0; //@line 6412
        $$6311 = $$5310; //@line 6412
        $316 = $320; //@line 6412
        break L8;
       }
      } while (0);
      $54 = $$0273408 + ($50 & 1) | 0; //@line 6417
      ___shlim($0, 0); //@line 6418
      $55 = HEAP32[$13 >> 2] | 0; //@line 6419
      if ($55 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
       HEAP32[$13 >> 2] = $55 + 1; //@line 6424
       $65 = HEAPU8[$55 >> 0] | 0; //@line 6427
      } else {
       $65 = ___shgetc($0) | 0; //@line 6430
      }
      if (($65 | 0) != (HEAPU8[$54 >> 0] | 0)) {
       label = 22; //@line 6436
       break L6;
      }
      $$11 = $54; //@line 6440
      $$1289 = $$0288404; //@line 6440
      $$2285 = $$0283407 + 1 | 0; //@line 6440
      $$6311 = $$0305402; //@line 6440
      $316 = $315; //@line 6440
     } else {
      $$1274 = $$0273408; //@line 6442
      while (1) {
       $23 = $$1274 + 1 | 0; //@line 6444
       if (!(_isspace(HEAPU8[$23 >> 0] | 0) | 0)) {
        break;
       } else {
        $$1274 = $23; //@line 6452
       }
      }
      ___shlim($0, 0); //@line 6455
      do {
       $28 = HEAP32[$13 >> 2] | 0; //@line 6457
       if ($28 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
        HEAP32[$13 >> 2] = $28 + 1; //@line 6462
        $35 = HEAPU8[$28 >> 0] | 0; //@line 6465
       } else {
        $35 = ___shgetc($0) | 0; //@line 6468
       }
      } while ((_isspace($35) | 0) != 0);
      if (!(HEAP32[$14 >> 2] | 0)) {
       $47 = HEAP32[$13 >> 2] | 0; //@line 6480
      } else {
       $41 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6483
       HEAP32[$13 >> 2] = $41; //@line 6484
       $47 = $41; //@line 6486
      }
      $$11 = $$1274; //@line 6493
      $$1289 = $$0288404; //@line 6493
      $$2285 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $47 - (HEAP32[$16 >> 2] | 0) | 0; //@line 6493
      $$6311 = $$0305402; //@line 6493
      $316 = $315; //@line 6493
     }
    } while (0);
    $$0273408 = $$11 + 1 | 0; //@line 6496
    $20 = HEAP8[$$0273408 >> 0] | 0; //@line 6497
    if (!($20 << 24 >> 24)) {
     $$3291 = $$1289; //@line 6500
     break L4;
    } else {
     $$0283407 = $$2285; //@line 6503
     $$0288404 = $$1289; //@line 6503
     $$0305402 = $$6311; //@line 6503
     $315 = $316; //@line 6503
    }
   }
   if ((label | 0) == 22) {
    if (HEAP32[$14 >> 2] | 0) {
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 6512
    }
    if (($$0288404 | 0) != 0 | ($65 | 0) > -1) {
     $$3291 = $$0288404; //@line 6518
     break;
    } else {
     $$1271 = 0; //@line 6521
     $$8313 = $$0305402; //@line 6521
     $317 = $315; //@line 6521
     label = 137; //@line 6522
    }
   } else if ((label | 0) == 136) {
    if (!$$0288404) {
     $$1271 = $$0270; //@line 6528
     $$8313 = $$7312; //@line 6528
     $317 = $319; //@line 6528
     label = 137; //@line 6529
    } else {
     $$2 = $$0270; //@line 6531
     $$2290 = $$0288404; //@line 6531
     $$9314 = $$7312; //@line 6531
     $312 = $319; //@line 6531
    }
   }
   if ((label | 0) == 137) {
    $$2 = $$1271; //@line 6535
    $$2290 = -1; //@line 6535
    $$9314 = $$8313; //@line 6535
    $312 = $317; //@line 6535
   }
   if (!$$2) {
    $$3291 = $$2290; //@line 6539
   } else {
    _free($$9314); //@line 6541
    _free($312); //@line 6542
    $$3291 = $$2290; //@line 6543
   }
  }
 } while (0);
 if ($314 | 0) {
  ___unlockfile($0); //@line 6549
 }
 STACKTOP = sp; //@line 6551
 return $$3291 | 0; //@line 6551
}
function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0, $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$423 = 0, $$4349493 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$pre = 0, $$pre551 = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $122 = 0, $124 = 0, $134 = 0, $136 = 0, $148 = 0, $150 = 0, $17 = 0, $172 = 0, $184 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $229 = 0, $231 = 0, $236 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $28 = 0, $289 = 0, $29 = 0, $294 = 0, $299 = 0, $302 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $320 = 0.0, $323 = 0.0, $327 = 0, $330 = 0, $354 = 0.0, $359 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond418 = 0, $or$cond424 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8368
 STACKTOP = STACKTOP + 512 | 0; //@line 8369
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 8369
 $6 = sp; //@line 8370
 $sum = $3 + $2 | 0; //@line 8371
 $7 = 0 - $sum | 0; //@line 8372
 $8 = $0 + 4 | 0; //@line 8373
 $9 = $0 + 100 | 0; //@line 8374
 $$0329 = $1; //@line 8375
 $$0396 = 0; //@line 8375
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6; //@line 8379
    break L1;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0393 = 0; //@line 8387
    $$2 = $$0329; //@line 8387
    $$2398 = $$0396; //@line 8387
    $368 = 0; //@line 8387
    $369 = 0; //@line 8387
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0; //@line 8391
  if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $10 + 1; //@line 8396
   $$0329 = HEAPU8[$10 >> 0] | 0; //@line 8399
   $$0396 = 1; //@line 8399
   continue;
  } else {
   $$0329 = ___shgetc($0) | 0; //@line 8403
   $$0396 = 1; //@line 8403
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 8408
  if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $17 + 1; //@line 8413
   $$1330$ph = HEAPU8[$17 >> 0] | 0; //@line 8416
  } else {
   $$1330$ph = ___shgetc($0) | 0; //@line 8419
  }
  if (($$1330$ph | 0) == 48) {
   $25 = 0; //@line 8423
   $26 = 0; //@line 8423
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0; //@line 8425
    $28 = tempRet0; //@line 8426
    $29 = HEAP32[$8 >> 2] | 0; //@line 8427
    if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $29 + 1; //@line 8432
     $$1330$be = HEAPU8[$29 >> 0] | 0; //@line 8435
    } else {
     $$1330$be = ___shgetc($0) | 0; //@line 8438
    }
    if (($$1330$be | 0) == 48) {
     $25 = $27; //@line 8442
     $26 = $28; //@line 8442
    } else {
     $$0393 = 1; //@line 8444
     $$2 = $$1330$be; //@line 8444
     $$2398 = 1; //@line 8444
     $368 = $27; //@line 8444
     $369 = $28; //@line 8444
     break;
    }
   }
  } else {
   $$0393 = 1; //@line 8449
   $$2 = $$1330$ph; //@line 8449
   $$2398 = $$0396; //@line 8449
   $368 = 0; //@line 8449
   $369 = 0; //@line 8449
  }
 }
 HEAP32[$6 >> 2] = 0; //@line 8452
 $37 = $$2 + -48 | 0; //@line 8453
 $39 = ($$2 | 0) == 46; //@line 8455
 L20 : do {
  if ($39 | $37 >>> 0 < 10) {
   $41 = $6 + 496 | 0; //@line 8459
   $$0341511 = 0; //@line 8460
   $$0345510 = 0; //@line 8460
   $$0401507 = 0; //@line 8460
   $$1394509 = $$0393; //@line 8460
   $$3399508 = $$2398; //@line 8460
   $$3512 = $$2; //@line 8460
   $370 = $39; //@line 8460
   $371 = $37; //@line 8460
   $372 = $368; //@line 8460
   $373 = $369; //@line 8460
   $44 = 0; //@line 8460
   $45 = 0; //@line 8460
   L22 : while (1) {
    do {
     if ($370) {
      if (!$$1394509) {
       $$2343 = $$0341511; //@line 8466
       $$2347 = $$0345510; //@line 8466
       $$2395 = 1; //@line 8466
       $$2403 = $$0401507; //@line 8466
       $$4400 = $$3399508; //@line 8466
       $374 = $44; //@line 8466
       $375 = $45; //@line 8466
       $376 = $44; //@line 8466
       $377 = $45; //@line 8466
      } else {
       break L22;
      }
     } else {
      $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0; //@line 8472
      $47 = tempRet0; //@line 8473
      $48 = ($$3512 | 0) != 48; //@line 8474
      if (($$0345510 | 0) >= 125) {
       if (!$48) {
        $$2343 = $$0341511; //@line 8477
        $$2347 = $$0345510; //@line 8477
        $$2395 = $$1394509; //@line 8477
        $$2403 = $$0401507; //@line 8477
        $$4400 = $$3399508; //@line 8477
        $374 = $372; //@line 8477
        $375 = $373; //@line 8477
        $376 = $46; //@line 8477
        $377 = $47; //@line 8477
        break;
       }
       HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1; //@line 8482
       $$2343 = $$0341511; //@line 8483
       $$2347 = $$0345510; //@line 8483
       $$2395 = $$1394509; //@line 8483
       $$2403 = $$0401507; //@line 8483
       $$4400 = $$3399508; //@line 8483
       $374 = $372; //@line 8483
       $375 = $373; //@line 8483
       $376 = $46; //@line 8483
       $377 = $47; //@line 8483
       break;
      }
      $$pre551 = $6 + ($$0345510 << 2) | 0; //@line 8488
      if (!$$0341511) {
       $$sink = $371; //@line 8490
      } else {
       $$sink = $$3512 + -48 + ((HEAP32[$$pre551 >> 2] | 0) * 10 | 0) | 0; //@line 8496
      }
      HEAP32[$$pre551 >> 2] = $$sink; //@line 8498
      $54 = $$0341511 + 1 | 0; //@line 8499
      $55 = ($54 | 0) == 9; //@line 8500
      $$2343 = $55 ? 0 : $54; //@line 8504
      $$2347 = $$0345510 + ($55 & 1) | 0; //@line 8504
      $$2395 = $$1394509; //@line 8504
      $$2403 = $48 ? $46 : $$0401507; //@line 8504
      $$4400 = 1; //@line 8504
      $374 = $372; //@line 8504
      $375 = $373; //@line 8504
      $376 = $46; //@line 8504
      $377 = $47; //@line 8504
     }
    } while (0);
    $59 = HEAP32[$8 >> 2] | 0; //@line 8507
    if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $59 + 1; //@line 8512
     $$3$be = HEAPU8[$59 >> 0] | 0; //@line 8515
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 8518
    }
    $371 = $$3$be + -48 | 0; //@line 8520
    $370 = ($$3$be | 0) == 46; //@line 8522
    if (!($370 | $371 >>> 0 < 10)) {
     $$0341$lcssa = $$2343; //@line 8527
     $$0345$lcssa = $$2347; //@line 8527
     $$0401$lcssa = $$2403; //@line 8527
     $$1394$lcssa = $$2395; //@line 8527
     $$3$lcssa = $$3$be; //@line 8527
     $$3399$lcssa = $$4400; //@line 8527
     $72 = $376; //@line 8527
     $73 = $374; //@line 8527
     $75 = $377; //@line 8527
     $76 = $375; //@line 8527
     label = 29; //@line 8528
     break L20;
    } else {
     $$0341511 = $$2343; //@line 8525
     $$0345510 = $$2347; //@line 8525
     $$0401507 = $$2403; //@line 8525
     $$1394509 = $$2395; //@line 8525
     $$3399508 = $$4400; //@line 8525
     $$3512 = $$3$be; //@line 8525
     $372 = $374; //@line 8525
     $373 = $375; //@line 8525
     $44 = $376; //@line 8525
     $45 = $377; //@line 8525
    }
   }
   $$0341463 = $$0341511; //@line 8533
   $$0345467 = $$0345510; //@line 8533
   $$0401473 = $$0401507; //@line 8533
   $378 = $44; //@line 8533
   $379 = $45; //@line 8533
   $380 = $372; //@line 8533
   $381 = $373; //@line 8533
   $382 = ($$3399508 | 0) != 0; //@line 8533
   label = 37; //@line 8534
  } else {
   $$0341$lcssa = 0; //@line 8536
   $$0345$lcssa = 0; //@line 8536
   $$0401$lcssa = 0; //@line 8536
   $$1394$lcssa = $$0393; //@line 8536
   $$3$lcssa = $$2; //@line 8536
   $$3399$lcssa = $$2398; //@line 8536
   $72 = 0; //@line 8536
   $73 = $368; //@line 8536
   $75 = 0; //@line 8536
   $76 = $369; //@line 8536
   label = 29; //@line 8537
  }
 } while (0);
 do {
  if ((label | 0) == 29) {
   $70 = ($$1394$lcssa | 0) == 0; //@line 8542
   $71 = $70 ? $72 : $73; //@line 8543
   $74 = $70 ? $75 : $76; //@line 8544
   $77 = ($$3399$lcssa | 0) != 0; //@line 8545
   if (!($77 & ($$3$lcssa | 32 | 0) == 101)) {
    if (($$3$lcssa | 0) > -1) {
     $$0341463 = $$0341$lcssa; //@line 8552
     $$0345467 = $$0345$lcssa; //@line 8552
     $$0401473 = $$0401$lcssa; //@line 8552
     $378 = $72; //@line 8552
     $379 = $75; //@line 8552
     $380 = $71; //@line 8552
     $381 = $74; //@line 8552
     $382 = $77; //@line 8552
     label = 37; //@line 8553
     break;
    } else {
     $$0341462 = $$0341$lcssa; //@line 8556
     $$0345466 = $$0345$lcssa; //@line 8556
     $$0401472 = $$0401$lcssa; //@line 8556
     $383 = $72; //@line 8556
     $384 = $75; //@line 8556
     $385 = $77; //@line 8556
     $386 = $71; //@line 8556
     $387 = $74; //@line 8556
     label = 39; //@line 8557
     break;
    }
   }
   $80 = _scanexp($0, $5) | 0; //@line 8561
   $81 = tempRet0; //@line 8562
   if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
    if (!$5) {
     ___shlim($0, 0); //@line 8569
     $$1 = 0.0; //@line 8570
     break;
    }
    if (!(HEAP32[$9 >> 2] | 0)) {
     $90 = 0; //@line 8576
     $91 = 0; //@line 8576
    } else {
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8580
     $90 = 0; //@line 8581
     $91 = 0; //@line 8581
    }
   } else {
    $90 = $80; //@line 8584
    $91 = $81; //@line 8584
   }
   $92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0; //@line 8586
   $$0341461 = $$0341$lcssa; //@line 8588
   $$0345465 = $$0345$lcssa; //@line 8588
   $$0401471 = $$0401$lcssa; //@line 8588
   $105 = $92; //@line 8588
   $106 = $72; //@line 8588
   $108 = tempRet0; //@line 8588
   $109 = $75; //@line 8588
   label = 41; //@line 8589
  }
 } while (0);
 if ((label | 0) == 37) {
  if (!(HEAP32[$9 >> 2] | 0)) {
   $$0341462 = $$0341463; //@line 8596
   $$0345466 = $$0345467; //@line 8596
   $$0401472 = $$0401473; //@line 8596
   $383 = $378; //@line 8596
   $384 = $379; //@line 8596
   $385 = $382; //@line 8596
   $386 = $380; //@line 8596
   $387 = $381; //@line 8596
   label = 39; //@line 8597
  } else {
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8601
   if ($382) {
    $$0341461 = $$0341463; //@line 8603
    $$0345465 = $$0345467; //@line 8603
    $$0401471 = $$0401473; //@line 8603
    $105 = $380; //@line 8603
    $106 = $378; //@line 8603
    $108 = $381; //@line 8603
    $109 = $379; //@line 8603
    label = 41; //@line 8604
   } else {
    label = 40; //@line 8606
   }
  }
 }
 if ((label | 0) == 39) {
  if ($385) {
   $$0341461 = $$0341462; //@line 8612
   $$0345465 = $$0345466; //@line 8612
   $$0401471 = $$0401472; //@line 8612
   $105 = $386; //@line 8612
   $106 = $383; //@line 8612
   $108 = $387; //@line 8612
   $109 = $384; //@line 8612
   label = 41; //@line 8613
  } else {
   label = 40; //@line 8615
  }
 }
 do {
  if ((label | 0) == 40) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 8621
   ___shlim($0, 0); //@line 8622
   $$1 = 0.0; //@line 8623
  } else if ((label | 0) == 41) {
   $100 = HEAP32[$6 >> 2] | 0; //@line 8626
   if (!$100) {
    $$1 = +($4 | 0) * 0.0; //@line 8631
    break;
   }
   if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($105 | 0) == ($106 | 0) & ($108 | 0) == ($109 | 0))) {
    if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
     $$1 = +($4 | 0) * +($100 >>> 0); //@line 8652
     break;
    }
   }
   $122 = ($3 | 0) / -2 | 0; //@line 8656
   $124 = (($122 | 0) < 0) << 31 >> 31; //@line 8658
   if (($108 | 0) > ($124 | 0) | ($108 | 0) == ($124 | 0) & $105 >>> 0 > $122 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8666
    $$1 = +($4 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8670
    break;
   }
   $134 = $3 + -106 | 0; //@line 8673
   $136 = (($134 | 0) < 0) << 31 >> 31; //@line 8675
   if (($108 | 0) < ($136 | 0) | ($108 | 0) == ($136 | 0) & $105 >>> 0 < $134 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8683
    $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8687
    break;
   }
   if (!$$0341461) {
    $$3348 = $$0345465; //@line 8692
   } else {
    if (($$0341461 | 0) < 9) {
     $148 = $6 + ($$0345465 << 2) | 0; //@line 8696
     $$3344501 = $$0341461; //@line 8698
     $150 = HEAP32[$148 >> 2] | 0; //@line 8698
     while (1) {
      $150 = $150 * 10 | 0; //@line 8700
      if (($$3344501 | 0) >= 8) {
       break;
      } else {
       $$3344501 = $$3344501 + 1 | 0; //@line 8704
      }
     }
     HEAP32[$148 >> 2] = $150; //@line 8709
    }
    $$3348 = $$0345465 + 1 | 0; //@line 8712
   }
   if (($$0401471 | 0) < 9) {
    if (($$0401471 | 0) <= ($105 | 0) & ($105 | 0) < 18) {
     if (($105 | 0) == 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0); //@line 8726
      break;
     }
     if (($105 | 0) < 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[1456 + (8 - $105 << 2) >> 2] | 0); //@line 8740
      break;
     }
     $172 = $2 + 27 + (Math_imul($105, -3) | 0) | 0; //@line 8745
     $$pre = HEAP32[$6 >> 2] | 0; //@line 8747
     if (($172 | 0) > 30 | ($$pre >>> $172 | 0) == 0) {
      $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[1456 + ($105 + -10 << 2) >> 2] | 0); //@line 8760
      break;
     }
    }
   }
   $184 = ($105 | 0) % 9 | 0; //@line 8765
   if (!$184) {
    $$0380$ph = 0; //@line 8768
    $$1373$ph446 = $$3348; //@line 8768
    $$2352$ph447 = 0; //@line 8768
    $$2387$ph445 = $105; //@line 8768
   } else {
    $188 = ($105 | 0) > -1 ? $184 : $184 + 9 | 0; //@line 8772
    $191 = HEAP32[1456 + (8 - $188 << 2) >> 2] | 0; //@line 8775
    if (!$$3348) {
     $$0350$lcssa553 = 0; //@line 8778
     $$0372 = 0; //@line 8778
     $$0385$lcssa552 = $105; //@line 8778
    } else {
     $193 = 1e9 / ($191 | 0) | 0; //@line 8780
     $$0340494 = 0; //@line 8781
     $$0350492 = 0; //@line 8781
     $$0385491 = $105; //@line 8781
     $$4349493 = 0; //@line 8781
     do {
      $194 = $6 + ($$4349493 << 2) | 0; //@line 8783
      $195 = HEAP32[$194 >> 2] | 0; //@line 8784
      $198 = (($195 >>> 0) / ($191 >>> 0) | 0) + $$0340494 | 0; //@line 8787
      HEAP32[$194 >> 2] = $198; //@line 8788
      $$0340494 = Math_imul($193, ($195 >>> 0) % ($191 >>> 0) | 0) | 0; //@line 8789
      $or$cond418 = ($$4349493 | 0) == ($$0350492 | 0) & ($198 | 0) == 0; //@line 8792
      $$0385491 = $or$cond418 ? $$0385491 + -9 | 0 : $$0385491; //@line 8796
      $$0350492 = $or$cond418 ? $$0350492 + 1 & 127 : $$0350492; //@line 8797
      $$4349493 = $$4349493 + 1 | 0; //@line 8798
     } while (($$4349493 | 0) != ($$3348 | 0));
     if (!$$0340494) {
      $$0350$lcssa553 = $$0350492; //@line 8808
      $$0372 = $$3348; //@line 8808
      $$0385$lcssa552 = $$0385491; //@line 8808
     } else {
      HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340494; //@line 8812
      $$0350$lcssa553 = $$0350492; //@line 8813
      $$0372 = $$3348 + 1 | 0; //@line 8813
      $$0385$lcssa552 = $$0385491; //@line 8813
     }
    }
    $$0380$ph = 0; //@line 8818
    $$1373$ph446 = $$0372; //@line 8818
    $$2352$ph447 = $$0350$lcssa553; //@line 8818
    $$2387$ph445 = 9 - $188 + $$0385$lcssa552 | 0; //@line 8818
   }
   L101 : while (1) {
    $212 = ($$2387$ph445 | 0) < 18; //@line 8821
    $213 = ($$2387$ph445 | 0) == 18; //@line 8822
    $214 = $6 + ($$2352$ph447 << 2) | 0; //@line 8823
    $$0380 = $$0380$ph; //@line 8824
    $$1373 = $$1373$ph446; //@line 8824
    while (1) {
     if (!$212) {
      if (!$213) {
       $$1381$ph = $$0380; //@line 8828
       $$4354$ph = $$2352$ph447; //@line 8828
       $$4389$ph443 = $$2387$ph445; //@line 8828
       $$6378$ph = $$1373; //@line 8828
       break L101;
      }
      if ((HEAP32[$214 >> 2] | 0) >>> 0 >= 9007199) {
       $$1381$ph = $$0380; //@line 8834
       $$4354$ph = $$2352$ph447; //@line 8834
       $$4389$ph443 = 18; //@line 8834
       $$6378$ph = $$1373; //@line 8834
       break L101;
      }
     }
     $$0334 = 0; //@line 8839
     $$2374 = $$1373; //@line 8839
     $$5$in = $$1373 + 127 | 0; //@line 8839
     while (1) {
      $$5 = $$5$in & 127; //@line 8841
      $218 = $6 + ($$5 << 2) | 0; //@line 8842
      $220 = _bitshift64Shl(HEAP32[$218 >> 2] | 0, 0, 29) | 0; //@line 8844
      $222 = _i64Add($220 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0; //@line 8846
      $223 = tempRet0; //@line 8847
      if ($223 >>> 0 > 0 | ($223 | 0) == 0 & $222 >>> 0 > 1e9) {
       $229 = ___udivdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8854
       $231 = ___uremdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8856
       $$1335 = $229; //@line 8858
       $$sink419$off0 = $231; //@line 8858
      } else {
       $$1335 = 0; //@line 8860
       $$sink419$off0 = $222; //@line 8860
      }
      HEAP32[$218 >> 2] = $$sink419$off0; //@line 8862
      $236 = ($$5 | 0) == ($$2352$ph447 | 0); //@line 8866
      $$2374 = ($$sink419$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $236) ^ 1) ? $$5 : $$2374; //@line 8871
      if ($236) {
       break;
      } else {
       $$0334 = $$1335; //@line 8876
       $$5$in = $$5 + -1 | 0; //@line 8876
      }
     }
     $$0380 = $$0380 + -29 | 0; //@line 8879
     if ($$1335 | 0) {
      break;
     } else {
      $$1373 = $$2374; //@line 8882
     }
    }
    $243 = $$2352$ph447 + 127 & 127; //@line 8889
    $246 = $$2374 + 127 & 127; //@line 8892
    $249 = $6 + (($$2374 + 126 & 127) << 2) | 0; //@line 8895
    if (($243 | 0) == ($$2374 | 0)) {
     HEAP32[$249 >> 2] = HEAP32[$249 >> 2] | HEAP32[$6 + ($246 << 2) >> 2]; //@line 8901
     $$4376 = $246; //@line 8902
    } else {
     $$4376 = $$2374; //@line 8904
    }
    HEAP32[$6 + ($243 << 2) >> 2] = $$1335; //@line 8907
    $$0380$ph = $$0380; //@line 8908
    $$1373$ph446 = $$4376; //@line 8908
    $$2352$ph447 = $243; //@line 8908
    $$2387$ph445 = $$2387$ph445 + 9 | 0; //@line 8908
   }
   L119 : while (1) {
    $289 = $$6378$ph + 1 & 127; //@line 8912
    $294 = $6 + (($$6378$ph + 127 & 127) << 2) | 0; //@line 8915
    $$1381$ph557 = $$1381$ph; //@line 8916
    $$4354$ph558 = $$4354$ph; //@line 8916
    $$4389$ph = $$4389$ph443; //@line 8916
    while (1) {
     $267 = ($$4389$ph | 0) == 18; //@line 8918
     $$423 = ($$4389$ph | 0) > 27 ? 9 : 1; //@line 8920
     $$1381 = $$1381$ph557; //@line 8921
     $$4354 = $$4354$ph558; //@line 8921
     while (1) {
      $$0336484 = 0; //@line 8923
      while (1) {
       $256 = $$0336484 + $$4354 & 127; //@line 8926
       if (($256 | 0) == ($$6378$ph | 0)) {
        $$1337 = 2; //@line 8929
        label = 88; //@line 8930
        break;
       }
       $259 = HEAP32[$6 + ($256 << 2) >> 2] | 0; //@line 8934
       $261 = HEAP32[1488 + ($$0336484 << 2) >> 2] | 0; //@line 8936
       if ($259 >>> 0 < $261 >>> 0) {
        $$1337 = 2; //@line 8939
        label = 88; //@line 8940
        break;
       }
       if ($259 >>> 0 > $261 >>> 0) {
        break;
       }
       $264 = $$0336484 + 1 | 0; //@line 8947
       if (($$0336484 | 0) < 1) {
        $$0336484 = $264; //@line 8950
       } else {
        $$1337 = $264; //@line 8952
        label = 88; //@line 8953
        break;
       }
      }
      if ((label | 0) == 88) {
       label = 0; //@line 8958
       if ($267 & ($$1337 | 0) == 2) {
        $$0365482 = 0.0; //@line 8962
        $$4483 = 0; //@line 8962
        $$9481 = $$6378$ph; //@line 8962
        break L119;
       }
      }
      $268 = $$423 + $$1381 | 0; //@line 8966
      if (($$4354 | 0) == ($$6378$ph | 0)) {
       $$1381 = $268; //@line 8969
       $$4354 = $$6378$ph; //@line 8969
      } else {
       break;
      }
     }
     $271 = (1 << $$423) + -1 | 0; //@line 8975
     $272 = 1e9 >>> $$423; //@line 8976
     $$0332488 = 0; //@line 8977
     $$5355486 = $$4354; //@line 8977
     $$5390485 = $$4389$ph; //@line 8977
     $$6487 = $$4354; //@line 8977
     do {
      $273 = $6 + ($$6487 << 2) | 0; //@line 8979
      $274 = HEAP32[$273 >> 2] | 0; //@line 8980
      $277 = ($274 >>> $$423) + $$0332488 | 0; //@line 8983
      HEAP32[$273 >> 2] = $277; //@line 8984
      $$0332488 = Math_imul($274 & $271, $272) | 0; //@line 8985
      $or$cond424 = ($$6487 | 0) == ($$5355486 | 0) & ($277 | 0) == 0; //@line 8988
      $$5390485 = $or$cond424 ? $$5390485 + -9 | 0 : $$5390485; //@line 8992
      $$5355486 = $or$cond424 ? $$5355486 + 1 & 127 : $$5355486; //@line 8993
      $$6487 = $$6487 + 1 & 127; //@line 8995
     } while (($$6487 | 0) != ($$6378$ph | 0));
     if (!$$0332488) {
      $$1381$ph557 = $268; //@line 9005
      $$4354$ph558 = $$5355486; //@line 9005
      $$4389$ph = $$5390485; //@line 9005
      continue;
     }
     if (($289 | 0) != ($$5355486 | 0)) {
      break;
     }
     HEAP32[$294 >> 2] = HEAP32[$294 >> 2] | 1; //@line 9014
     $$1381$ph557 = $268; //@line 9015
     $$4354$ph558 = $$5355486; //@line 9015
     $$4389$ph = $$5390485; //@line 9015
    }
    HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332488; //@line 9018
    $$1381$ph = $268; //@line 9019
    $$4354$ph = $$5355486; //@line 9019
    $$4389$ph443 = $$5390485; //@line 9019
    $$6378$ph = $289; //@line 9019
   }
   while (1) {
    $299 = $$4483 + $$4354 & 127; //@line 9023
    $302 = $$9481 + 1 & 127; //@line 9026
    if (($299 | 0) == ($$9481 | 0)) {
     HEAP32[$6 + ($302 + -1 << 2) >> 2] = 0; //@line 9030
     $$10 = $302; //@line 9031
    } else {
     $$10 = $$9481; //@line 9033
    }
    $$0365482 = $$0365482 * 1.0e9 + +((HEAP32[$6 + ($299 << 2) >> 2] | 0) >>> 0); //@line 9039
    $$4483 = $$4483 + 1 | 0; //@line 9040
    if (($$4483 | 0) == 2) {
     break;
    } else {
     $$9481 = $$10; //@line 9045
    }
   }
   $311 = +($4 | 0); //@line 9048
   $312 = $$0365482 * $311; //@line 9049
   $313 = $$1381 + 53 | 0; //@line 9050
   $314 = $313 - $3 | 0; //@line 9051
   $315 = ($314 | 0) < ($2 | 0); //@line 9052
   $$0333 = $315 ? ($314 | 0) > 0 ? $314 : 0 : $2; //@line 9055
   if (($$0333 | 0) < 53) {
    $320 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $312); //@line 9060
    $323 = +_fmodl($312, +_scalbn(1.0, 53 - $$0333 | 0)); //@line 9063
    $$0360 = $320; //@line 9066
    $$0361 = $323; //@line 9066
    $$1366 = $320 + ($312 - $323); //@line 9066
   } else {
    $$0360 = 0.0; //@line 9068
    $$0361 = 0.0; //@line 9068
    $$1366 = $312; //@line 9068
   }
   $327 = $$4354 + 2 & 127; //@line 9071
   if (($327 | 0) == ($$10 | 0)) {
    $$3364 = $$0361; //@line 9074
   } else {
    $330 = HEAP32[$6 + ($327 << 2) >> 2] | 0; //@line 9077
    do {
     if ($330 >>> 0 < 5e8) {
      if (!$330) {
       if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
        $$1362 = $$0361; //@line 9087
        break;
       }
      }
      $$1362 = $311 * .25 + $$0361; //@line 9093
     } else {
      if (($330 | 0) != 5e8) {
       $$1362 = $311 * .75 + $$0361; //@line 9099
       break;
      }
      if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
       $$1362 = $311 * .5 + $$0361; //@line 9108
       break;
      } else {
       $$1362 = $311 * .75 + $$0361; //@line 9113
       break;
      }
     }
    } while (0);
    if ((53 - $$0333 | 0) > 1) {
     if (+_fmodl($$1362, 1.0) != 0.0) {
      $$3364 = $$1362; //@line 9124
     } else {
      $$3364 = $$1362 + 1.0; //@line 9127
     }
    } else {
     $$3364 = $$1362; //@line 9130
    }
   }
   $354 = $$1366 + $$3364 - $$0360; //@line 9134
   do {
    if (($313 & 2147483647 | 0) > (-2 - $sum | 0)) {
     $359 = !(+Math_abs(+$354) >= 9007199254740992.0); //@line 9141
     $$3383 = $$1381 + (($359 ^ 1) & 1) | 0; //@line 9145
     $$2367 = $359 ? $354 : $354 * .5; //@line 9146
     if (($$3383 + 50 | 0) <= ($7 | 0)) {
      if (!($$3364 != 0.0 & ($315 & (($$0333 | 0) != ($314 | 0) | $359)))) {
       $$3368 = $$2367; //@line 9156
       $$4384 = $$3383; //@line 9156
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 9161
     $$3368 = $$2367; //@line 9162
     $$4384 = $$3383; //@line 9162
    } else {
     $$3368 = $354; //@line 9164
     $$4384 = $$1381; //@line 9164
    }
   } while (0);
   $$1 = +_scalbnl($$3368, $$4384); //@line 9168
  }
 } while (0);
 STACKTOP = sp; //@line 9171
 return +$$1;
}
function __ZL29nsapi_dns_query_async_timeoutv() {
 var $$02972 = 0, $$03071 = 0, $$131 = 0, $$sroa_idx5$i$i = 0, $$sroa_idx5$i$i43 = 0, $0 = 0, $1 = 0, $10 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $13 = 0, $136 = 0, $139 = 0, $14 = 0, $165 = 0, $168 = 0, $19 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $200 = 0, $201 = 0, $205 = 0, $232 = 0, $233 = 0, $234 = 0, $260 = 0, $263 = 0, $289 = 0, $292 = 0, $3 = 0, $322 = 0, $323 = 0, $327 = 0, $331 = 0, $332 = 0, $334 = 0, $338 = 0, $343 = 0, $346 = 0, $349 = 0, $352 = 0, $4 = 0, $5 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7993
 STACKTOP = STACKTOP + 96 | 0; //@line 7994
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 7994
 $0 = sp + 80 | 0; //@line 7995
 $1 = sp + 64 | 0; //@line 7996
 $2 = sp + 48 | 0; //@line 7997
 $3 = sp + 32 | 0; //@line 7998
 $4 = sp + 16 | 0; //@line 7999
 $5 = sp; //@line 8000
 $6 = $2 + 12 | 0; //@line 8001
 $7 = $3 + 8 | 0; //@line 8002
 $$sroa_idx5$i$i43 = $3 + 4 | 0; //@line 8003
 $8 = $3 + 12 | 0; //@line 8004
 $9 = $0 + 12 | 0; //@line 8005
 $10 = $1 + 8 | 0; //@line 8006
 $$sroa_idx5$i$i = $1 + 4 | 0; //@line 8007
 $11 = $1 + 12 | 0; //@line 8008
 $$02972 = 0; //@line 8009
 $$03071 = 0; //@line 8009
 L1 : while (1) {
  $13 = 6700 + ($$02972 << 2) | 0; //@line 8011
  $14 = HEAP32[$13 >> 2] | 0; //@line 8012
  do {
   if (!$14) {
    $$131 = $$03071; //@line 8016
   } else {
    if ((HEAP32[$14 + 88 >> 2] | 0) == 2) {
     $19 = HEAP32[$14 >> 2] | 0; //@line 8022
     $AsyncCtx35 = _emscripten_alloc_async_context(100, sp) | 0; //@line 8023
     __ZL28nsapi_dns_query_async_deletei($19); //@line 8024
     if (___async) {
      label = 6; //@line 8027
      break L1;
     }
     _emscripten_free_async_context($AsyncCtx35 | 0); //@line 8030
     $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 8031
     __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 8032
     if (___async) {
      label = 8; //@line 8035
      break L1;
     }
     _emscripten_free_async_context($AsyncCtx38 | 0); //@line 8038
     $$131 = $$03071; //@line 8039
     break;
    }
    $68 = $14 + 72 | 0; //@line 8042
    $69 = HEAP32[$68 >> 2] | 0; //@line 8043
    if ($69 >>> 0 > 100) {
     HEAP32[$68 >> 2] = $69 + -100; //@line 8047
    } else {
     if ((HEAP32[$14 + 4 >> 2] | 0) == -3019) {
      HEAP32[$14 + 76 >> 2] = 0; //@line 8054
      $76 = $14 + 44 | 0; //@line 8055
      $77 = HEAP32[$76 >> 2] | 0; //@line 8056
      if (!$77) {
       $108 = 0; //@line 8059
       $110 = $14; //@line 8059
      } else {
       $81 = HEAP32[$77 + 4 >> 2] | 0; //@line 8063
       $AsyncCtx = _emscripten_alloc_async_context(108, sp) | 0; //@line 8064
       FUNCTION_TABLE_vii[$81 & 7]($0, $14 + 32 | 0); //@line 8065
       if (___async) {
        label = 15; //@line 8068
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 8071
       $108 = HEAP32[$76 >> 2] | 0; //@line 8074
       $110 = HEAP32[$13 >> 2] | 0; //@line 8074
      }
      HEAP32[$9 >> 2] = $108; //@line 8076
      $109 = HEAP32[$110 >> 2] | 0; //@line 8077
      HEAP32[$10 >> 2] = 0; //@line 8078
      HEAP32[$1 >> 2] = 175; //@line 8079
      HEAP32[$$sroa_idx5$i$i >> 2] = $109; //@line 8080
      HEAP32[$11 >> 2] = 724; //@line 8081
      $AsyncCtx47 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8082
      __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, 0, $1) | 0; //@line 8083
      if (___async) {
       label = 18; //@line 8086
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx47 | 0); //@line 8089
      $136 = HEAP32[$11 >> 2] | 0; //@line 8090
      if ($136 | 0) {
       $139 = HEAP32[$136 + 8 >> 2] | 0; //@line 8094
       $AsyncCtx3 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8095
       FUNCTION_TABLE_vi[$139 & 511]($1); //@line 8096
       if (___async) {
        label = 21; //@line 8099
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8102
      }
      $165 = HEAP32[$9 >> 2] | 0; //@line 8104
      if ($165 | 0) {
       $168 = HEAP32[$165 + 8 >> 2] | 0; //@line 8108
       $AsyncCtx7 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8109
       FUNCTION_TABLE_vi[$168 & 511]($0); //@line 8110
       if (___async) {
        label = 25; //@line 8113
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8116
      }
     }
    }
    $194 = HEAP32[$13 >> 2] | 0; //@line 8120
    $195 = $194 + 76 | 0; //@line 8121
    $196 = HEAP32[$195 >> 2] | 0; //@line 8122
    do {
     if ($196 | 0) {
      if ($196 >>> 0 > 100) {
       HEAP32[$195 >> 2] = $196 + -100; //@line 8129
       break;
      }
      HEAP32[$195 >> 2] = 0; //@line 8132
      $200 = $194 + 44 | 0; //@line 8133
      $201 = HEAP32[$200 >> 2] | 0; //@line 8134
      if (!$201) {
       $232 = 0; //@line 8137
       $234 = $194; //@line 8137
      } else {
       $205 = HEAP32[$201 + 4 >> 2] | 0; //@line 8141
       $AsyncCtx11 = _emscripten_alloc_async_context(108, sp) | 0; //@line 8142
       FUNCTION_TABLE_vii[$205 & 7]($2, $194 + 32 | 0); //@line 8143
       if (___async) {
        label = 32; //@line 8146
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8149
       $232 = HEAP32[$200 >> 2] | 0; //@line 8152
       $234 = HEAP32[$13 >> 2] | 0; //@line 8152
      }
      HEAP32[$6 >> 2] = $232; //@line 8154
      $233 = HEAP32[$234 >> 2] | 0; //@line 8155
      HEAP32[$7 >> 2] = 0; //@line 8156
      HEAP32[$3 >> 2] = 180; //@line 8157
      HEAP32[$$sroa_idx5$i$i43 >> 2] = $233; //@line 8158
      HEAP32[$8 >> 2] = 724; //@line 8159
      $AsyncCtx44 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8160
      __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 0, $3) | 0; //@line 8161
      if (___async) {
       label = 35; //@line 8164
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx44 | 0); //@line 8167
      $260 = HEAP32[$8 >> 2] | 0; //@line 8168
      if ($260 | 0) {
       $263 = HEAP32[$260 + 8 >> 2] | 0; //@line 8172
       $AsyncCtx15 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8173
       FUNCTION_TABLE_vi[$263 & 511]($3); //@line 8174
       if (___async) {
        label = 38; //@line 8177
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8180
      }
      $289 = HEAP32[$6 >> 2] | 0; //@line 8182
      if ($289 | 0) {
       $292 = HEAP32[$289 + 8 >> 2] | 0; //@line 8186
       $AsyncCtx19 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8187
       FUNCTION_TABLE_vi[$292 & 511]($2); //@line 8188
       if (___async) {
        label = 42; //@line 8191
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx19 | 0); //@line 8194
      }
     }
    } while (0);
    if (!$$03071) {
     $$131 = HEAP32[$13 >> 2] | 0; //@line 8201
    } else {
     $$131 = $$03071; //@line 8203
    }
   }
  } while (0);
  if (($$02972 | 0) < 4) {
   $$02972 = $$02972 + 1 | 0; //@line 8210
   $$03071 = $$131; //@line 8210
  } else {
   label = 2; //@line 8212
   break;
  }
 }
 switch (label | 0) {
 case 2:
  {
   if (!$$131) {
    HEAP8[7580] = 0; //@line 8220
    STACKTOP = sp; //@line 8221
    return;
   }
   $322 = $$131 + 44 | 0; //@line 8223
   $323 = HEAP32[$322 >> 2] | 0; //@line 8224
   do {
    if (!$323) {
     $332 = 0; //@line 8228
    } else {
     $327 = HEAP32[$323 + 4 >> 2] | 0; //@line 8232
     $AsyncCtx23 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8233
     FUNCTION_TABLE_vii[$327 & 7]($4, $$131 + 32 | 0); //@line 8234
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 184; //@line 8237
      HEAP32[$AsyncCtx23 + 4 >> 2] = $322; //@line 8239
      HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 8241
      HEAP32[$AsyncCtx23 + 12 >> 2] = $5; //@line 8243
      sp = STACKTOP; //@line 8244
      STACKTOP = sp; //@line 8245
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 8247
      $332 = HEAP32[$322 >> 2] | 0; //@line 8249
      break;
     }
    }
   } while (0);
   $331 = $4 + 12 | 0; //@line 8254
   HEAP32[$331 >> 2] = $332; //@line 8255
   $334 = $5 + 4 | 0; //@line 8257
   HEAP32[$334 >> 2] = 0; //@line 8259
   HEAP32[$334 + 4 >> 2] = 0; //@line 8262
   HEAP32[$5 >> 2] = 3; //@line 8263
   $338 = $5 + 12 | 0; //@line 8264
   HEAP32[$338 >> 2] = 712; //@line 8265
   $AsyncCtx41 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8266
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $5) | 0; //@line 8267
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 185; //@line 8270
    HEAP32[$AsyncCtx41 + 4 >> 2] = $338; //@line 8272
    HEAP32[$AsyncCtx41 + 8 >> 2] = $331; //@line 8274
    HEAP32[$AsyncCtx41 + 12 >> 2] = $5; //@line 8276
    HEAP32[$AsyncCtx41 + 16 >> 2] = $4; //@line 8278
    sp = STACKTOP; //@line 8279
    STACKTOP = sp; //@line 8280
    return;
   }
   _emscripten_free_async_context($AsyncCtx41 | 0); //@line 8282
   $343 = HEAP32[$338 >> 2] | 0; //@line 8283
   do {
    if ($343 | 0) {
     $346 = HEAP32[$343 + 8 >> 2] | 0; //@line 8288
     $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8289
     FUNCTION_TABLE_vi[$346 & 511]($5); //@line 8290
     if (___async) {
      HEAP32[$AsyncCtx27 >> 2] = 186; //@line 8293
      HEAP32[$AsyncCtx27 + 4 >> 2] = $331; //@line 8295
      HEAP32[$AsyncCtx27 + 8 >> 2] = $4; //@line 8297
      sp = STACKTOP; //@line 8298
      STACKTOP = sp; //@line 8299
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 8301
      break;
     }
    }
   } while (0);
   $349 = HEAP32[$331 >> 2] | 0; //@line 8306
   if (!$349) {
    STACKTOP = sp; //@line 8309
    return;
   }
   $352 = HEAP32[$349 + 8 >> 2] | 0; //@line 8312
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8313
   FUNCTION_TABLE_vi[$352 & 511]($4); //@line 8314
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 187; //@line 8317
    sp = STACKTOP; //@line 8318
    STACKTOP = sp; //@line 8319
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 8321
   STACKTOP = sp; //@line 8322
   return;
  }
 case 6:
  {
   HEAP32[$AsyncCtx35 >> 2] = 172; //@line 8326
   HEAP32[$AsyncCtx35 + 4 >> 2] = $3; //@line 8328
   HEAP32[$AsyncCtx35 + 8 >> 2] = $2; //@line 8330
   HEAP32[$AsyncCtx35 + 12 >> 2] = $6; //@line 8332
   HEAP32[$AsyncCtx35 + 16 >> 2] = $7; //@line 8334
   HEAP32[$AsyncCtx35 + 20 >> 2] = $3; //@line 8336
   HEAP32[$AsyncCtx35 + 24 >> 2] = $$sroa_idx5$i$i43; //@line 8338
   HEAP32[$AsyncCtx35 + 28 >> 2] = $8; //@line 8340
   HEAP32[$AsyncCtx35 + 32 >> 2] = $2; //@line 8342
   HEAP32[$AsyncCtx35 + 36 >> 2] = $3; //@line 8344
   HEAP32[$AsyncCtx35 + 40 >> 2] = $4; //@line 8346
   HEAP32[$AsyncCtx35 + 44 >> 2] = $6; //@line 8348
   HEAP32[$AsyncCtx35 + 48 >> 2] = $9; //@line 8350
   HEAP32[$AsyncCtx35 + 52 >> 2] = $10; //@line 8352
   HEAP32[$AsyncCtx35 + 56 >> 2] = $1; //@line 8354
   HEAP32[$AsyncCtx35 + 60 >> 2] = $$sroa_idx5$i$i; //@line 8356
   HEAP32[$AsyncCtx35 + 64 >> 2] = $11; //@line 8358
   HEAP32[$AsyncCtx35 + 68 >> 2] = $0; //@line 8360
   HEAP32[$AsyncCtx35 + 72 >> 2] = $1; //@line 8362
   HEAP32[$AsyncCtx35 + 76 >> 2] = $5; //@line 8364
   HEAP32[$AsyncCtx35 + 80 >> 2] = $0; //@line 8366
   HEAP32[$AsyncCtx35 + 84 >> 2] = $1; //@line 8368
   HEAP32[$AsyncCtx35 + 88 >> 2] = $9; //@line 8370
   HEAP32[$AsyncCtx35 + 92 >> 2] = $$03071; //@line 8372
   HEAP32[$AsyncCtx35 + 96 >> 2] = $$02972; //@line 8374
   sp = STACKTOP; //@line 8375
   STACKTOP = sp; //@line 8376
   return;
  }
 case 8:
  {
   HEAP32[$AsyncCtx38 >> 2] = 173; //@line 8380
   HEAP32[$AsyncCtx38 + 4 >> 2] = $3; //@line 8382
   HEAP32[$AsyncCtx38 + 8 >> 2] = $2; //@line 8384
   HEAP32[$AsyncCtx38 + 12 >> 2] = $6; //@line 8386
   HEAP32[$AsyncCtx38 + 16 >> 2] = $7; //@line 8388
   HEAP32[$AsyncCtx38 + 20 >> 2] = $3; //@line 8390
   HEAP32[$AsyncCtx38 + 24 >> 2] = $$sroa_idx5$i$i43; //@line 8392
   HEAP32[$AsyncCtx38 + 28 >> 2] = $8; //@line 8394
   HEAP32[$AsyncCtx38 + 32 >> 2] = $2; //@line 8396
   HEAP32[$AsyncCtx38 + 36 >> 2] = $3; //@line 8398
   HEAP32[$AsyncCtx38 + 40 >> 2] = $4; //@line 8400
   HEAP32[$AsyncCtx38 + 44 >> 2] = $6; //@line 8402
   HEAP32[$AsyncCtx38 + 48 >> 2] = $9; //@line 8404
   HEAP32[$AsyncCtx38 + 52 >> 2] = $10; //@line 8406
   HEAP32[$AsyncCtx38 + 56 >> 2] = $1; //@line 8408
   HEAP32[$AsyncCtx38 + 60 >> 2] = $$sroa_idx5$i$i; //@line 8410
   HEAP32[$AsyncCtx38 + 64 >> 2] = $11; //@line 8412
   HEAP32[$AsyncCtx38 + 68 >> 2] = $0; //@line 8414
   HEAP32[$AsyncCtx38 + 72 >> 2] = $1; //@line 8416
   HEAP32[$AsyncCtx38 + 76 >> 2] = $5; //@line 8418
   HEAP32[$AsyncCtx38 + 80 >> 2] = $0; //@line 8420
   HEAP32[$AsyncCtx38 + 84 >> 2] = $1; //@line 8422
   HEAP32[$AsyncCtx38 + 88 >> 2] = $9; //@line 8424
   HEAP32[$AsyncCtx38 + 92 >> 2] = $$03071; //@line 8426
   HEAP32[$AsyncCtx38 + 96 >> 2] = $$02972; //@line 8428
   sp = STACKTOP; //@line 8429
   STACKTOP = sp; //@line 8430
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx >> 2] = 174; //@line 8434
   HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 8436
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 8438
   HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 8440
   HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 8442
   HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 8444
   HEAP32[$AsyncCtx + 24 >> 2] = $$sroa_idx5$i$i43; //@line 8446
   HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 8448
   HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 8450
   HEAP32[$AsyncCtx + 36 >> 2] = $3; //@line 8452
   HEAP32[$AsyncCtx + 40 >> 2] = $6; //@line 8454
   HEAP32[$AsyncCtx + 44 >> 2] = $13; //@line 8456
   HEAP32[$AsyncCtx + 48 >> 2] = $9; //@line 8458
   HEAP32[$AsyncCtx + 52 >> 2] = $10; //@line 8460
   HEAP32[$AsyncCtx + 56 >> 2] = $1; //@line 8462
   HEAP32[$AsyncCtx + 60 >> 2] = $$sroa_idx5$i$i; //@line 8464
   HEAP32[$AsyncCtx + 64 >> 2] = $11; //@line 8466
   HEAP32[$AsyncCtx + 68 >> 2] = $0; //@line 8468
   HEAP32[$AsyncCtx + 72 >> 2] = $1; //@line 8470
   HEAP32[$AsyncCtx + 76 >> 2] = $5; //@line 8472
   HEAP32[$AsyncCtx + 80 >> 2] = $4; //@line 8474
   HEAP32[$AsyncCtx + 84 >> 2] = $0; //@line 8476
   HEAP32[$AsyncCtx + 88 >> 2] = $1; //@line 8478
   HEAP32[$AsyncCtx + 92 >> 2] = $9; //@line 8480
   HEAP32[$AsyncCtx + 96 >> 2] = $$03071; //@line 8482
   HEAP32[$AsyncCtx + 100 >> 2] = $76; //@line 8484
   HEAP32[$AsyncCtx + 104 >> 2] = $$02972; //@line 8486
   sp = STACKTOP; //@line 8487
   STACKTOP = sp; //@line 8488
   return;
  }
 case 18:
  {
   HEAP32[$AsyncCtx47 >> 2] = 176; //@line 8492
   HEAP32[$AsyncCtx47 + 4 >> 2] = $3; //@line 8494
   HEAP32[$AsyncCtx47 + 8 >> 2] = $2; //@line 8496
   HEAP32[$AsyncCtx47 + 12 >> 2] = $6; //@line 8498
   HEAP32[$AsyncCtx47 + 16 >> 2] = $7; //@line 8500
   HEAP32[$AsyncCtx47 + 20 >> 2] = $3; //@line 8502
   HEAP32[$AsyncCtx47 + 24 >> 2] = $$sroa_idx5$i$i43; //@line 8504
   HEAP32[$AsyncCtx47 + 28 >> 2] = $8; //@line 8506
   HEAP32[$AsyncCtx47 + 32 >> 2] = $2; //@line 8508
   HEAP32[$AsyncCtx47 + 36 >> 2] = $3; //@line 8510
   HEAP32[$AsyncCtx47 + 40 >> 2] = $4; //@line 8512
   HEAP32[$AsyncCtx47 + 44 >> 2] = $6; //@line 8514
   HEAP32[$AsyncCtx47 + 48 >> 2] = $9; //@line 8516
   HEAP32[$AsyncCtx47 + 52 >> 2] = $10; //@line 8518
   HEAP32[$AsyncCtx47 + 56 >> 2] = $1; //@line 8520
   HEAP32[$AsyncCtx47 + 60 >> 2] = $$sroa_idx5$i$i; //@line 8522
   HEAP32[$AsyncCtx47 + 64 >> 2] = $11; //@line 8524
   HEAP32[$AsyncCtx47 + 68 >> 2] = $0; //@line 8526
   HEAP32[$AsyncCtx47 + 72 >> 2] = $1; //@line 8528
   HEAP32[$AsyncCtx47 + 76 >> 2] = $5; //@line 8530
   HEAP32[$AsyncCtx47 + 80 >> 2] = $0; //@line 8532
   HEAP32[$AsyncCtx47 + 84 >> 2] = $1; //@line 8534
   HEAP32[$AsyncCtx47 + 88 >> 2] = $9; //@line 8536
   HEAP32[$AsyncCtx47 + 92 >> 2] = $$03071; //@line 8538
   HEAP32[$AsyncCtx47 + 96 >> 2] = $$02972; //@line 8540
   HEAP32[$AsyncCtx47 + 100 >> 2] = $13; //@line 8542
   sp = STACKTOP; //@line 8543
   STACKTOP = sp; //@line 8544
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx3 >> 2] = 177; //@line 8548
   HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 8550
   HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 8552
   HEAP32[$AsyncCtx3 + 12 >> 2] = $6; //@line 8554
   HEAP32[$AsyncCtx3 + 16 >> 2] = $7; //@line 8556
   HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 8558
   HEAP32[$AsyncCtx3 + 24 >> 2] = $$sroa_idx5$i$i43; //@line 8560
   HEAP32[$AsyncCtx3 + 28 >> 2] = $8; //@line 8562
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 8564
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 8566
   HEAP32[$AsyncCtx3 + 40 >> 2] = $6; //@line 8568
   HEAP32[$AsyncCtx3 + 44 >> 2] = $13; //@line 8570
   HEAP32[$AsyncCtx3 + 48 >> 2] = $9; //@line 8572
   HEAP32[$AsyncCtx3 + 52 >> 2] = $10; //@line 8574
   HEAP32[$AsyncCtx3 + 56 >> 2] = $1; //@line 8576
   HEAP32[$AsyncCtx3 + 60 >> 2] = $$sroa_idx5$i$i; //@line 8578
   HEAP32[$AsyncCtx3 + 64 >> 2] = $11; //@line 8580
   HEAP32[$AsyncCtx3 + 68 >> 2] = $0; //@line 8582
   HEAP32[$AsyncCtx3 + 72 >> 2] = $1; //@line 8584
   HEAP32[$AsyncCtx3 + 76 >> 2] = $5; //@line 8586
   HEAP32[$AsyncCtx3 + 80 >> 2] = $4; //@line 8588
   HEAP32[$AsyncCtx3 + 84 >> 2] = $0; //@line 8590
   HEAP32[$AsyncCtx3 + 88 >> 2] = $1; //@line 8592
   HEAP32[$AsyncCtx3 + 92 >> 2] = $9; //@line 8594
   HEAP32[$AsyncCtx3 + 96 >> 2] = $$03071; //@line 8596
   HEAP32[$AsyncCtx3 + 100 >> 2] = $$02972; //@line 8598
   sp = STACKTOP; //@line 8599
   STACKTOP = sp; //@line 8600
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx7 >> 2] = 178; //@line 8604
   HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 8606
   HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 8608
   HEAP32[$AsyncCtx7 + 12 >> 2] = $6; //@line 8610
   HEAP32[$AsyncCtx7 + 16 >> 2] = $7; //@line 8612
   HEAP32[$AsyncCtx7 + 20 >> 2] = $3; //@line 8614
   HEAP32[$AsyncCtx7 + 24 >> 2] = $$sroa_idx5$i$i43; //@line 8616
   HEAP32[$AsyncCtx7 + 28 >> 2] = $8; //@line 8618
   HEAP32[$AsyncCtx7 + 32 >> 2] = $2; //@line 8620
   HEAP32[$AsyncCtx7 + 36 >> 2] = $3; //@line 8622
   HEAP32[$AsyncCtx7 + 40 >> 2] = $6; //@line 8624
   HEAP32[$AsyncCtx7 + 44 >> 2] = $13; //@line 8626
   HEAP32[$AsyncCtx7 + 48 >> 2] = $9; //@line 8628
   HEAP32[$AsyncCtx7 + 52 >> 2] = $10; //@line 8630
   HEAP32[$AsyncCtx7 + 56 >> 2] = $1; //@line 8632
   HEAP32[$AsyncCtx7 + 60 >> 2] = $$sroa_idx5$i$i; //@line 8634
   HEAP32[$AsyncCtx7 + 64 >> 2] = $11; //@line 8636
   HEAP32[$AsyncCtx7 + 68 >> 2] = $0; //@line 8638
   HEAP32[$AsyncCtx7 + 72 >> 2] = $1; //@line 8640
   HEAP32[$AsyncCtx7 + 76 >> 2] = $5; //@line 8642
   HEAP32[$AsyncCtx7 + 80 >> 2] = $4; //@line 8644
   HEAP32[$AsyncCtx7 + 84 >> 2] = $0; //@line 8646
   HEAP32[$AsyncCtx7 + 88 >> 2] = $1; //@line 8648
   HEAP32[$AsyncCtx7 + 92 >> 2] = $9; //@line 8650
   HEAP32[$AsyncCtx7 + 96 >> 2] = $$03071; //@line 8652
   HEAP32[$AsyncCtx7 + 100 >> 2] = $$02972; //@line 8654
   sp = STACKTOP; //@line 8655
   STACKTOP = sp; //@line 8656
   return;
  }
 case 32:
  {
   HEAP32[$AsyncCtx11 >> 2] = 179; //@line 8660
   HEAP32[$AsyncCtx11 + 4 >> 2] = $3; //@line 8662
   HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 8664
   HEAP32[$AsyncCtx11 + 12 >> 2] = $6; //@line 8666
   HEAP32[$AsyncCtx11 + 16 >> 2] = $7; //@line 8668
   HEAP32[$AsyncCtx11 + 20 >> 2] = $3; //@line 8670
   HEAP32[$AsyncCtx11 + 24 >> 2] = $$sroa_idx5$i$i43; //@line 8672
   HEAP32[$AsyncCtx11 + 28 >> 2] = $8; //@line 8674
   HEAP32[$AsyncCtx11 + 32 >> 2] = $2; //@line 8676
   HEAP32[$AsyncCtx11 + 36 >> 2] = $3; //@line 8678
   HEAP32[$AsyncCtx11 + 40 >> 2] = $6; //@line 8680
   HEAP32[$AsyncCtx11 + 44 >> 2] = $200; //@line 8682
   HEAP32[$AsyncCtx11 + 48 >> 2] = $13; //@line 8684
   HEAP32[$AsyncCtx11 + 52 >> 2] = $9; //@line 8686
   HEAP32[$AsyncCtx11 + 56 >> 2] = $10; //@line 8688
   HEAP32[$AsyncCtx11 + 60 >> 2] = $1; //@line 8690
   HEAP32[$AsyncCtx11 + 64 >> 2] = $$sroa_idx5$i$i; //@line 8692
   HEAP32[$AsyncCtx11 + 68 >> 2] = $11; //@line 8694
   HEAP32[$AsyncCtx11 + 72 >> 2] = $0; //@line 8696
   HEAP32[$AsyncCtx11 + 76 >> 2] = $1; //@line 8698
   HEAP32[$AsyncCtx11 + 80 >> 2] = $5; //@line 8700
   HEAP32[$AsyncCtx11 + 84 >> 2] = $4; //@line 8702
   HEAP32[$AsyncCtx11 + 88 >> 2] = $0; //@line 8704
   HEAP32[$AsyncCtx11 + 92 >> 2] = $1; //@line 8706
   HEAP32[$AsyncCtx11 + 96 >> 2] = $9; //@line 8708
   HEAP32[$AsyncCtx11 + 100 >> 2] = $$03071; //@line 8710
   HEAP32[$AsyncCtx11 + 104 >> 2] = $$02972; //@line 8712
   sp = STACKTOP; //@line 8713
   STACKTOP = sp; //@line 8714
   return;
  }
 case 35:
  {
   HEAP32[$AsyncCtx44 >> 2] = 181; //@line 8718
   HEAP32[$AsyncCtx44 + 4 >> 2] = $3; //@line 8720
   HEAP32[$AsyncCtx44 + 8 >> 2] = $2; //@line 8722
   HEAP32[$AsyncCtx44 + 12 >> 2] = $6; //@line 8724
   HEAP32[$AsyncCtx44 + 16 >> 2] = $7; //@line 8726
   HEAP32[$AsyncCtx44 + 20 >> 2] = $3; //@line 8728
   HEAP32[$AsyncCtx44 + 24 >> 2] = $$sroa_idx5$i$i43; //@line 8730
   HEAP32[$AsyncCtx44 + 28 >> 2] = $8; //@line 8732
   HEAP32[$AsyncCtx44 + 32 >> 2] = $2; //@line 8734
   HEAP32[$AsyncCtx44 + 36 >> 2] = $3; //@line 8736
   HEAP32[$AsyncCtx44 + 40 >> 2] = $4; //@line 8738
   HEAP32[$AsyncCtx44 + 44 >> 2] = $6; //@line 8740
   HEAP32[$AsyncCtx44 + 48 >> 2] = $9; //@line 8742
   HEAP32[$AsyncCtx44 + 52 >> 2] = $10; //@line 8744
   HEAP32[$AsyncCtx44 + 56 >> 2] = $1; //@line 8746
   HEAP32[$AsyncCtx44 + 60 >> 2] = $$sroa_idx5$i$i; //@line 8748
   HEAP32[$AsyncCtx44 + 64 >> 2] = $11; //@line 8750
   HEAP32[$AsyncCtx44 + 68 >> 2] = $0; //@line 8752
   HEAP32[$AsyncCtx44 + 72 >> 2] = $1; //@line 8754
   HEAP32[$AsyncCtx44 + 76 >> 2] = $5; //@line 8756
   HEAP32[$AsyncCtx44 + 80 >> 2] = $0; //@line 8758
   HEAP32[$AsyncCtx44 + 84 >> 2] = $1; //@line 8760
   HEAP32[$AsyncCtx44 + 88 >> 2] = $9; //@line 8762
   HEAP32[$AsyncCtx44 + 92 >> 2] = $$03071; //@line 8764
   HEAP32[$AsyncCtx44 + 96 >> 2] = $$02972; //@line 8766
   HEAP32[$AsyncCtx44 + 100 >> 2] = $13; //@line 8768
   sp = STACKTOP; //@line 8769
   STACKTOP = sp; //@line 8770
   return;
  }
 case 38:
  {
   HEAP32[$AsyncCtx15 >> 2] = 182; //@line 8774
   HEAP32[$AsyncCtx15 + 4 >> 2] = $3; //@line 8776
   HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 8778
   HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 8780
   HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 8782
   HEAP32[$AsyncCtx15 + 20 >> 2] = $3; //@line 8784
   HEAP32[$AsyncCtx15 + 24 >> 2] = $$sroa_idx5$i$i43; //@line 8786
   HEAP32[$AsyncCtx15 + 28 >> 2] = $8; //@line 8788
   HEAP32[$AsyncCtx15 + 32 >> 2] = $2; //@line 8790
   HEAP32[$AsyncCtx15 + 36 >> 2] = $3; //@line 8792
   HEAP32[$AsyncCtx15 + 40 >> 2] = $6; //@line 8794
   HEAP32[$AsyncCtx15 + 44 >> 2] = $9; //@line 8796
   HEAP32[$AsyncCtx15 + 48 >> 2] = $10; //@line 8798
   HEAP32[$AsyncCtx15 + 52 >> 2] = $1; //@line 8800
   HEAP32[$AsyncCtx15 + 56 >> 2] = $$sroa_idx5$i$i; //@line 8802
   HEAP32[$AsyncCtx15 + 60 >> 2] = $11; //@line 8804
   HEAP32[$AsyncCtx15 + 64 >> 2] = $0; //@line 8806
   HEAP32[$AsyncCtx15 + 68 >> 2] = $1; //@line 8808
   HEAP32[$AsyncCtx15 + 72 >> 2] = $5; //@line 8810
   HEAP32[$AsyncCtx15 + 76 >> 2] = $4; //@line 8812
   HEAP32[$AsyncCtx15 + 80 >> 2] = $0; //@line 8814
   HEAP32[$AsyncCtx15 + 84 >> 2] = $1; //@line 8816
   HEAP32[$AsyncCtx15 + 88 >> 2] = $9; //@line 8818
   HEAP32[$AsyncCtx15 + 92 >> 2] = $$03071; //@line 8820
   HEAP32[$AsyncCtx15 + 96 >> 2] = $$02972; //@line 8822
   HEAP32[$AsyncCtx15 + 100 >> 2] = $13; //@line 8824
   sp = STACKTOP; //@line 8825
   STACKTOP = sp; //@line 8826
   return;
  }
 case 42:
  {
   HEAP32[$AsyncCtx19 >> 2] = 183; //@line 8830
   HEAP32[$AsyncCtx19 + 4 >> 2] = $3; //@line 8832
   HEAP32[$AsyncCtx19 + 8 >> 2] = $2; //@line 8834
   HEAP32[$AsyncCtx19 + 12 >> 2] = $6; //@line 8836
   HEAP32[$AsyncCtx19 + 16 >> 2] = $7; //@line 8838
   HEAP32[$AsyncCtx19 + 20 >> 2] = $3; //@line 8840
   HEAP32[$AsyncCtx19 + 24 >> 2] = $$sroa_idx5$i$i43; //@line 8842
   HEAP32[$AsyncCtx19 + 28 >> 2] = $8; //@line 8844
   HEAP32[$AsyncCtx19 + 32 >> 2] = $2; //@line 8846
   HEAP32[$AsyncCtx19 + 36 >> 2] = $3; //@line 8848
   HEAP32[$AsyncCtx19 + 40 >> 2] = $6; //@line 8850
   HEAP32[$AsyncCtx19 + 44 >> 2] = $9; //@line 8852
   HEAP32[$AsyncCtx19 + 48 >> 2] = $10; //@line 8854
   HEAP32[$AsyncCtx19 + 52 >> 2] = $1; //@line 8856
   HEAP32[$AsyncCtx19 + 56 >> 2] = $$sroa_idx5$i$i; //@line 8858
   HEAP32[$AsyncCtx19 + 60 >> 2] = $11; //@line 8860
   HEAP32[$AsyncCtx19 + 64 >> 2] = $0; //@line 8862
   HEAP32[$AsyncCtx19 + 68 >> 2] = $1; //@line 8864
   HEAP32[$AsyncCtx19 + 72 >> 2] = $5; //@line 8866
   HEAP32[$AsyncCtx19 + 76 >> 2] = $4; //@line 8868
   HEAP32[$AsyncCtx19 + 80 >> 2] = $0; //@line 8870
   HEAP32[$AsyncCtx19 + 84 >> 2] = $1; //@line 8872
   HEAP32[$AsyncCtx19 + 88 >> 2] = $9; //@line 8874
   HEAP32[$AsyncCtx19 + 92 >> 2] = $$03071; //@line 8876
   HEAP32[$AsyncCtx19 + 96 >> 2] = $$02972; //@line 8878
   HEAP32[$AsyncCtx19 + 100 >> 2] = $13; //@line 8880
   sp = STACKTOP; //@line 8881
   STACKTOP = sp; //@line 8882
   return;
  }
 }
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11540
 STACKTOP = STACKTOP + 560 | 0; //@line 11541
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 11541
 $6 = sp + 8 | 0; //@line 11542
 $7 = sp; //@line 11543
 $8 = sp + 524 | 0; //@line 11544
 $9 = $8; //@line 11545
 $10 = sp + 512 | 0; //@line 11546
 HEAP32[$7 >> 2] = 0; //@line 11547
 $11 = $10 + 12 | 0; //@line 11548
 ___DOUBLE_BITS_677($1) | 0; //@line 11549
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 11554
  $$0520 = 1; //@line 11554
  $$0521 = 3924; //@line 11554
 } else {
  $$0471 = $1; //@line 11565
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 11565
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 3925 : 3930 : 3927; //@line 11565
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 11567
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 11576
   $31 = $$0520 + 3 | 0; //@line 11581
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 11583
   _out_670($0, $$0521, $$0520); //@line 11584
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 3951 : 3955 : $27 ? 3943 : 3947, 3); //@line 11585
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 11587
   $$sink560 = $31; //@line 11588
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 11591
   $36 = $35 != 0.0; //@line 11592
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 11596
   }
   $39 = $5 | 32; //@line 11598
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 11601
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 11604
    $44 = $$0520 | 2; //@line 11605
    $46 = 12 - $3 | 0; //@line 11607
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 11612
     } else {
      $$0509585 = 8.0; //@line 11614
      $$1508586 = $46; //@line 11614
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 11616
       $$0509585 = $$0509585 * 16.0; //@line 11617
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 11632
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 11637
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 11642
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 11645
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 11648
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 11651
     HEAP8[$68 >> 0] = 48; //@line 11652
     $$0511 = $68; //@line 11653
    } else {
     $$0511 = $66; //@line 11655
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 11662
    $76 = $$0511 + -2 | 0; //@line 11665
    HEAP8[$76 >> 0] = $5 + 15; //@line 11666
    $77 = ($3 | 0) < 1; //@line 11667
    $79 = ($4 & 8 | 0) == 0; //@line 11669
    $$0523 = $8; //@line 11670
    $$2473 = $$1472; //@line 11670
    while (1) {
     $80 = ~~$$2473; //@line 11672
     $86 = $$0523 + 1 | 0; //@line 11678
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[3959 + $80 >> 0]; //@line 11679
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 11682
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 11691
      } else {
       HEAP8[$86 >> 0] = 46; //@line 11694
       $$1524 = $$0523 + 2 | 0; //@line 11695
      }
     } else {
      $$1524 = $86; //@line 11698
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 11702
     }
    }
    $$pre693 = $$1524; //@line 11708
    if (!$3) {
     label = 24; //@line 11710
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 11718
      $$sink = $3 + 2 | 0; //@line 11718
     } else {
      label = 24; //@line 11720
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 11724
     $$pre$phi691Z2D = $101; //@line 11725
     $$sink = $101; //@line 11725
    }
    $104 = $11 - $76 | 0; //@line 11729
    $106 = $104 + $44 + $$sink | 0; //@line 11731
    _pad_676($0, 32, $2, $106, $4); //@line 11732
    _out_670($0, $$0521$, $44); //@line 11733
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 11735
    _out_670($0, $8, $$pre$phi691Z2D); //@line 11736
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 11738
    _out_670($0, $76, $104); //@line 11739
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 11741
    $$sink560 = $106; //@line 11742
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 11746
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 11750
    HEAP32[$7 >> 2] = $113; //@line 11751
    $$3 = $35 * 268435456.0; //@line 11752
    $$pr = $113; //@line 11752
   } else {
    $$3 = $35; //@line 11755
    $$pr = HEAP32[$7 >> 2] | 0; //@line 11755
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 11759
   $$0498 = $$561; //@line 11760
   $$4 = $$3; //@line 11760
   do {
    $116 = ~~$$4 >>> 0; //@line 11762
    HEAP32[$$0498 >> 2] = $116; //@line 11763
    $$0498 = $$0498 + 4 | 0; //@line 11764
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 11767
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 11777
    $$1499662 = $$0498; //@line 11777
    $124 = $$pr; //@line 11777
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 11780
     $$0488655 = $$1499662 + -4 | 0; //@line 11781
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 11784
     } else {
      $$0488657 = $$0488655; //@line 11786
      $$0497656 = 0; //@line 11786
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 11789
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 11791
       $131 = tempRet0; //@line 11792
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11793
       HEAP32[$$0488657 >> 2] = $132; //@line 11795
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11796
       $$0488657 = $$0488657 + -4 | 0; //@line 11798
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 11808
      } else {
       $138 = $$1482663 + -4 | 0; //@line 11810
       HEAP32[$138 >> 2] = $$0497656; //@line 11811
       $$2483$ph = $138; //@line 11812
      }
     }
     $$2500 = $$1499662; //@line 11815
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 11821
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 11825
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 11831
     HEAP32[$7 >> 2] = $144; //@line 11832
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 11835
      $$1499662 = $$2500; //@line 11835
      $124 = $144; //@line 11835
     } else {
      $$1482$lcssa = $$2483$ph; //@line 11837
      $$1499$lcssa = $$2500; //@line 11837
      $$pr566 = $144; //@line 11837
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 11842
    $$1499$lcssa = $$0498; //@line 11842
    $$pr566 = $$pr; //@line 11842
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 11848
    $150 = ($39 | 0) == 102; //@line 11849
    $$3484650 = $$1482$lcssa; //@line 11850
    $$3501649 = $$1499$lcssa; //@line 11850
    $152 = $$pr566; //@line 11850
    while (1) {
     $151 = 0 - $152 | 0; //@line 11852
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 11854
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 11858
      $161 = 1e9 >>> $154; //@line 11859
      $$0487644 = 0; //@line 11860
      $$1489643 = $$3484650; //@line 11860
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 11862
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 11866
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 11867
       $$1489643 = $$1489643 + 4 | 0; //@line 11868
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11879
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 11882
       $$4502 = $$3501649; //@line 11882
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 11885
       $$$3484700 = $$$3484; //@line 11886
       $$4502 = $$3501649 + 4 | 0; //@line 11886
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11893
      $$4502 = $$3501649; //@line 11893
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 11895
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 11902
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 11904
     HEAP32[$7 >> 2] = $152; //@line 11905
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 11910
      $$3501$lcssa = $$$4502; //@line 11910
      break;
     } else {
      $$3484650 = $$$3484700; //@line 11908
      $$3501649 = $$$4502; //@line 11908
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 11915
    $$3501$lcssa = $$1499$lcssa; //@line 11915
   }
   $185 = $$561; //@line 11918
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 11923
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 11924
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 11927
    } else {
     $$0514639 = $189; //@line 11929
     $$0530638 = 10; //@line 11929
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 11931
      $193 = $$0514639 + 1 | 0; //@line 11932
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 11935
       break;
      } else {
       $$0514639 = $193; //@line 11938
      }
     }
    }
   } else {
    $$1515 = 0; //@line 11943
   }
   $198 = ($39 | 0) == 103; //@line 11948
   $199 = ($$540 | 0) != 0; //@line 11949
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 11952
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 11961
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 11964
    $213 = ($209 | 0) % 9 | 0; //@line 11965
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 11968
     $$1531632 = 10; //@line 11968
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 11971
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 11974
       $$1531632 = $215; //@line 11974
      } else {
       $$1531$lcssa = $215; //@line 11976
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 11981
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 11983
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 11984
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 11987
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 11990
     $$4518 = $$1515; //@line 11990
     $$8 = $$3484$lcssa; //@line 11990
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 11995
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 11996
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 12001
     if (!$$0520) {
      $$1467 = $$$564; //@line 12004
      $$1469 = $$543; //@line 12004
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 12007
      $$1467 = $230 ? -$$$564 : $$$564; //@line 12012
      $$1469 = $230 ? -$$543 : $$543; //@line 12012
     }
     $233 = $217 - $218 | 0; //@line 12014
     HEAP32[$212 >> 2] = $233; //@line 12015
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 12019
      HEAP32[$212 >> 2] = $236; //@line 12020
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 12023
       $$sink547625 = $212; //@line 12023
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 12025
        HEAP32[$$sink547625 >> 2] = 0; //@line 12026
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 12029
         HEAP32[$240 >> 2] = 0; //@line 12030
         $$6 = $240; //@line 12031
        } else {
         $$6 = $$5486626; //@line 12033
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 12036
        HEAP32[$238 >> 2] = $242; //@line 12037
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 12040
         $$sink547625 = $238; //@line 12040
        } else {
         $$5486$lcssa = $$6; //@line 12042
         $$sink547$lcssa = $238; //@line 12042
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 12047
       $$sink547$lcssa = $212; //@line 12047
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 12052
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 12053
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 12056
       $$4518 = $247; //@line 12056
       $$8 = $$5486$lcssa; //@line 12056
      } else {
       $$2516621 = $247; //@line 12058
       $$2532620 = 10; //@line 12058
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 12060
        $251 = $$2516621 + 1 | 0; //@line 12061
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 12064
         $$4518 = $251; //@line 12064
         $$8 = $$5486$lcssa; //@line 12064
         break;
        } else {
         $$2516621 = $251; //@line 12067
        }
       }
      }
     } else {
      $$4492 = $212; //@line 12072
      $$4518 = $$1515; //@line 12072
      $$8 = $$3484$lcssa; //@line 12072
     }
    }
    $253 = $$4492 + 4 | 0; //@line 12075
    $$5519$ph = $$4518; //@line 12078
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 12078
    $$9$ph = $$8; //@line 12078
   } else {
    $$5519$ph = $$1515; //@line 12080
    $$7505$ph = $$3501$lcssa; //@line 12080
    $$9$ph = $$3484$lcssa; //@line 12080
   }
   $$7505 = $$7505$ph; //@line 12082
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 12086
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 12089
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 12093
    } else {
     $$lcssa675 = 1; //@line 12095
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 12099
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 12104
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 12112
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 12112
     } else {
      $$0479 = $5 + -2 | 0; //@line 12116
      $$2476 = $$540$ + -1 | 0; //@line 12116
     }
     $267 = $4 & 8; //@line 12118
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 12123
       if (!$270) {
        $$2529 = 9; //@line 12126
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 12131
         $$3533616 = 10; //@line 12131
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 12133
          $275 = $$1528617 + 1 | 0; //@line 12134
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 12140
           break;
          } else {
           $$1528617 = $275; //@line 12138
          }
         }
        } else {
         $$2529 = 0; //@line 12145
        }
       }
      } else {
       $$2529 = 9; //@line 12149
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 12157
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 12159
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 12161
       $$1480 = $$0479; //@line 12164
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 12164
       $$pre$phi698Z2D = 0; //@line 12164
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 12168
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 12170
       $$1480 = $$0479; //@line 12173
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 12173
       $$pre$phi698Z2D = 0; //@line 12173
       break;
      }
     } else {
      $$1480 = $$0479; //@line 12177
      $$3477 = $$2476; //@line 12177
      $$pre$phi698Z2D = $267; //@line 12177
     }
    } else {
     $$1480 = $5; //@line 12181
     $$3477 = $$540; //@line 12181
     $$pre$phi698Z2D = $4 & 8; //@line 12181
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 12184
   $294 = ($292 | 0) != 0 & 1; //@line 12186
   $296 = ($$1480 | 32 | 0) == 102; //@line 12188
   if ($296) {
    $$2513 = 0; //@line 12192
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 12192
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 12195
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 12198
    $304 = $11; //@line 12199
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 12204
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 12206
      HEAP8[$308 >> 0] = 48; //@line 12207
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 12212
      } else {
       $$1512$lcssa = $308; //@line 12214
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 12219
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 12226
    $318 = $$1512$lcssa + -2 | 0; //@line 12228
    HEAP8[$318 >> 0] = $$1480; //@line 12229
    $$2513 = $318; //@line 12232
    $$pn = $304 - $318 | 0; //@line 12232
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 12237
   _pad_676($0, 32, $2, $323, $4); //@line 12238
   _out_670($0, $$0521, $$0520); //@line 12239
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 12241
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 12244
    $326 = $8 + 9 | 0; //@line 12245
    $327 = $326; //@line 12246
    $328 = $8 + 8 | 0; //@line 12247
    $$5493600 = $$0496$$9; //@line 12248
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 12251
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 12256
       $$1465 = $328; //@line 12257
      } else {
       $$1465 = $330; //@line 12259
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 12266
       $$0464597 = $330; //@line 12267
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 12269
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 12272
        } else {
         $$1465 = $335; //@line 12274
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 12279
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 12284
     $$5493600 = $$5493600 + 4 | 0; //@line 12285
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 3975, 1); //@line 12295
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 12301
     $$6494592 = $$5493600; //@line 12301
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 12304
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 12309
       $$0463587 = $347; //@line 12310
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 12312
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 12315
        } else {
         $$0463$lcssa = $351; //@line 12317
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 12322
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 12326
      $$6494592 = $$6494592 + 4 | 0; //@line 12327
      $356 = $$4478593 + -9 | 0; //@line 12328
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 12335
       break;
      } else {
       $$4478593 = $356; //@line 12333
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 12340
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 12343
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 12346
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 12349
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 12350
     $365 = $363; //@line 12351
     $366 = 0 - $9 | 0; //@line 12352
     $367 = $8 + 8 | 0; //@line 12353
     $$5605 = $$3477; //@line 12354
     $$7495604 = $$9$ph; //@line 12354
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 12357
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 12360
       $$0 = $367; //@line 12361
      } else {
       $$0 = $369; //@line 12363
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 12368
        _out_670($0, $$0, 1); //@line 12369
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 12373
         break;
        }
        _out_670($0, 3975, 1); //@line 12376
        $$2 = $375; //@line 12377
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 12381
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 12386
        $$1601 = $$0; //@line 12387
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 12389
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 12392
         } else {
          $$2 = $373; //@line 12394
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 12401
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 12404
      $381 = $$5605 - $378 | 0; //@line 12405
      $$7495604 = $$7495604 + 4 | 0; //@line 12406
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 12413
       break;
      } else {
       $$5605 = $381; //@line 12411
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 12418
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 12421
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 12425
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 12428
   $$sink560 = $323; //@line 12429
  }
 } while (0);
 STACKTOP = sp; //@line 12434
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 12434
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$090114$lcssa = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $$3 = 0, $$5 = 0, $$byval_copy = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $110 = 0, $12 = 0, $124 = 0, $125 = 0, $128 = 0, $142 = 0, $146 = 0, $147 = 0, $155 = 0, $158 = 0, $161 = 0, $164 = 0, $171 = 0, $173 = 0, $174 = 0, $177 = 0, $188 = 0, $189 = 0, $19 = 0, $191 = 0, $195 = 0, $196 = 0, $20 = 0, $208 = 0, $211 = 0, $222 = 0, $223 = 0, $226 = 0, $235 = 0, $237 = 0, $240 = 0, $245 = 0, $248 = 0, $255 = 0, $257 = 0, $265 = 0, $268 = 0, $27 = 0, $270 = 0, $278 = 0, $28 = 0, $281 = 0, $283 = 0, $291 = 0, $294 = 0, $296 = 0, $315 = 0, $316 = 0, $317 = 0, $33 = 0, $46 = 0, $50 = 0, $6 = 0, $63 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $8 = 0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7134
 STACKTOP = STACKTOP + 144 | 0; //@line 7135
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 7135
 $$byval_copy = sp + 116 | 0; //@line 7136
 $6 = sp + 96 | 0; //@line 7137
 $7 = sp + 32 | 0; //@line 7138
 $8 = sp + 16 | 0; //@line 7139
 $9 = sp; //@line 7140
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$5 = -3003; //@line 7145
  STACKTOP = sp; //@line 7146
  return $$5 | 0; //@line 7146
 }
 $12 = _strlen($1) | 0; //@line 7148
 if (($12 | 0) > 255 | ($12 | 0) == 0) {
  $$5 = -3003; //@line 7153
  STACKTOP = sp; //@line 7154
  return $$5 | 0; //@line 7154
 }
 L7 : do {
  if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $5, $6) | 0)) {
   HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 7160
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 7160
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 7160
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 7160
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 7160
   __ZN13SocketAddressC2E10nsapi_addrt($7, $$byval_copy, 0); //@line 7161
   $19 = $2 + 12 | 0; //@line 7162
   $20 = HEAP32[$19 >> 2] | 0; //@line 7163
   do {
    if (!$20) {
     $AsyncCtx53 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7167
     _mbed_assert_internal(2931, 2936, 1677); //@line 7168
     if (___async) {
      HEAP32[$AsyncCtx53 >> 2] = 157; //@line 7171
      HEAP32[$AsyncCtx53 + 4 >> 2] = $19; //@line 7173
      HEAP32[$AsyncCtx53 + 8 >> 2] = $2; //@line 7175
      HEAP32[$AsyncCtx53 + 12 >> 2] = $7; //@line 7177
      HEAP32[$AsyncCtx53 + 16 >> 2] = $7; //@line 7179
      HEAP32[$AsyncCtx53 + 20 >> 2] = $6; //@line 7181
      sp = STACKTOP; //@line 7182
      STACKTOP = sp; //@line 7183
      return 0; //@line 7183
     } else {
      _emscripten_free_async_context($AsyncCtx53 | 0); //@line 7185
      $28 = HEAP32[$19 >> 2] | 0; //@line 7187
      break;
     }
    } else {
     $28 = $20; //@line 7191
    }
   } while (0);
   $27 = HEAP32[$28 >> 2] | 0; //@line 7194
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7195
   FUNCTION_TABLE_viii[$27 & 0]($2, 0, $7); //@line 7196
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 158; //@line 7199
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 7201
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 7203
    sp = STACKTOP; //@line 7204
    STACKTOP = sp; //@line 7205
    return 0; //@line 7205
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7207
    $$3 = 0; //@line 7208
    break;
   }
  } else {
   if (!(HEAP32[1675] | 0)) {
    $$090114$lcssa = 0; //@line 7215
   } else {
    if (!(HEAP32[1676] | 0)) {
     $$090114$lcssa = 1; //@line 7220
    } else {
     if (!(HEAP32[1677] | 0)) {
      $$090114$lcssa = 2; //@line 7225
     } else {
      if (!(HEAP32[1678] | 0)) {
       $$090114$lcssa = 3; //@line 7230
      } else {
       if (!(HEAP32[1679] | 0)) {
        $$090114$lcssa = 4; //@line 7235
       } else {
        $$3 = -3007; //@line 7237
        break;
       }
      }
     }
    }
   }
   $AsyncCtx38 = _emscripten_alloc_async_context(48, sp) | 0; //@line 7244
   $33 = __ZnwjRKSt9nothrow_t(92, 8621) | 0; //@line 7245
   if (___async) {
    HEAP32[$AsyncCtx38 >> 2] = 159; //@line 7248
    HEAP32[$AsyncCtx38 + 4 >> 2] = $8; //@line 7250
    HEAP32[$AsyncCtx38 + 8 >> 2] = $9; //@line 7252
    HEAP32[$AsyncCtx38 + 12 >> 2] = $0; //@line 7254
    HEAP32[$AsyncCtx38 + 16 >> 2] = $4; //@line 7256
    HEAP32[$AsyncCtx38 + 20 >> 2] = $3; //@line 7258
    HEAP32[$AsyncCtx38 + 24 >> 2] = $5; //@line 7260
    HEAP32[$AsyncCtx38 + 28 >> 2] = $6; //@line 7262
    HEAP32[$AsyncCtx38 + 32 >> 2] = $$090114$lcssa; //@line 7264
    HEAP32[$AsyncCtx38 + 36 >> 2] = $2; //@line 7266
    HEAP32[$AsyncCtx38 + 40 >> 2] = $12; //@line 7268
    HEAP32[$AsyncCtx38 + 44 >> 2] = $1; //@line 7270
    sp = STACKTOP; //@line 7271
    STACKTOP = sp; //@line 7272
    return 0; //@line 7272
   }
   _emscripten_free_async_context($AsyncCtx38 | 0); //@line 7274
   if (!$33) {
    $$3 = -3007; //@line 7277
   } else {
    $46 = $33 + 16 | 0; //@line 7279
    HEAP32[$46 >> 2] = 0; //@line 7280
    HEAP32[$46 + 4 >> 2] = 0; //@line 7280
    HEAP32[$46 + 8 >> 2] = 0; //@line 7280
    HEAP32[$46 + 12 >> 2] = 0; //@line 7280
    HEAP32[$46 + 16 >> 2] = 0; //@line 7280
    HEAP32[$46 + 20 >> 2] = 0; //@line 7280
    HEAP32[$46 + 24 >> 2] = 0; //@line 7280
    HEAP32[$46 + 28 >> 2] = 0; //@line 7280
    $AsyncCtx42 = _emscripten_alloc_async_context(52, sp) | 0; //@line 7284
    $50 = __ZnajRKSt9nothrow_t(($12 | 0) < -1 ? -1 : $12 + 1 | 0, 8621) | 0; //@line 7285
    if (___async) {
     HEAP32[$AsyncCtx42 >> 2] = 160; //@line 7288
     HEAP32[$AsyncCtx42 + 4 >> 2] = $8; //@line 7290
     HEAP32[$AsyncCtx42 + 8 >> 2] = $9; //@line 7292
     HEAP32[$AsyncCtx42 + 12 >> 2] = $0; //@line 7294
     HEAP32[$AsyncCtx42 + 16 >> 2] = $33; //@line 7296
     HEAP32[$AsyncCtx42 + 20 >> 2] = $46; //@line 7298
     HEAP32[$AsyncCtx42 + 24 >> 2] = $4; //@line 7300
     HEAP32[$AsyncCtx42 + 28 >> 2] = $3; //@line 7302
     HEAP32[$AsyncCtx42 + 32 >> 2] = $5; //@line 7304
     HEAP32[$AsyncCtx42 + 36 >> 2] = $6; //@line 7306
     HEAP32[$AsyncCtx42 + 40 >> 2] = $$090114$lcssa; //@line 7308
     HEAP32[$AsyncCtx42 + 44 >> 2] = $2; //@line 7310
     HEAP32[$AsyncCtx42 + 48 >> 2] = $1; //@line 7312
     sp = STACKTOP; //@line 7313
     STACKTOP = sp; //@line 7314
     return 0; //@line 7314
    }
    _emscripten_free_async_context($AsyncCtx42 | 0); //@line 7316
    $63 = $33 + 12 | 0; //@line 7317
    HEAP32[$63 >> 2] = $50; //@line 7318
    if (!$50) {
     __ZdlPv($33); //@line 7321
     $$3 = -3007; //@line 7322
     break;
    }
    _strcpy($50, $1) | 0; //@line 7325
    HEAP32[$33 + 4 >> 2] = -3019; //@line 7327
    if (($46 | 0) != ($2 | 0)) {
     $67 = $33 + 28 | 0; //@line 7330
     $68 = HEAP32[$67 >> 2] | 0; //@line 7331
     do {
      if ($68 | 0) {
       $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 7336
       $AsyncCtx2 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7337
       FUNCTION_TABLE_vi[$71 & 511]($46); //@line 7338
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 161; //@line 7341
        HEAP32[$AsyncCtx2 + 4 >> 2] = $8; //@line 7343
        HEAP32[$AsyncCtx2 + 8 >> 2] = $9; //@line 7345
        HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 7347
        HEAP32[$AsyncCtx2 + 16 >> 2] = $33; //@line 7349
        HEAP32[$AsyncCtx2 + 20 >> 2] = $63; //@line 7351
        HEAP32[$AsyncCtx2 + 24 >> 2] = $2; //@line 7353
        HEAP32[$AsyncCtx2 + 28 >> 2] = $46; //@line 7355
        HEAP32[$AsyncCtx2 + 32 >> 2] = $67; //@line 7357
        HEAP32[$AsyncCtx2 + 36 >> 2] = $4; //@line 7359
        HEAP32[$AsyncCtx2 + 40 >> 2] = $3; //@line 7361
        HEAP32[$AsyncCtx2 + 44 >> 2] = $5; //@line 7363
        HEAP32[$AsyncCtx2 + 48 >> 2] = $6; //@line 7365
        HEAP32[$AsyncCtx2 + 52 >> 2] = $$090114$lcssa; //@line 7367
        sp = STACKTOP; //@line 7368
        STACKTOP = sp; //@line 7369
        return 0; //@line 7369
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7371
        break;
       }
      }
     } while (0);
     $85 = $2 + 12 | 0; //@line 7376
     $86 = HEAP32[$85 >> 2] | 0; //@line 7377
     do {
      if (!$86) {
       $103 = 0; //@line 7381
      } else {
       $89 = HEAP32[$86 + 4 >> 2] | 0; //@line 7384
       $AsyncCtx6 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7385
       FUNCTION_TABLE_vii[$89 & 7]($46, $2); //@line 7386
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 162; //@line 7389
        HEAP32[$AsyncCtx6 + 4 >> 2] = $8; //@line 7391
        HEAP32[$AsyncCtx6 + 8 >> 2] = $9; //@line 7393
        HEAP32[$AsyncCtx6 + 12 >> 2] = $0; //@line 7395
        HEAP32[$AsyncCtx6 + 16 >> 2] = $33; //@line 7397
        HEAP32[$AsyncCtx6 + 20 >> 2] = $85; //@line 7399
        HEAP32[$AsyncCtx6 + 24 >> 2] = $63; //@line 7401
        HEAP32[$AsyncCtx6 + 28 >> 2] = $67; //@line 7403
        HEAP32[$AsyncCtx6 + 32 >> 2] = $46; //@line 7405
        HEAP32[$AsyncCtx6 + 36 >> 2] = $4; //@line 7407
        HEAP32[$AsyncCtx6 + 40 >> 2] = $3; //@line 7409
        HEAP32[$AsyncCtx6 + 44 >> 2] = $5; //@line 7411
        HEAP32[$AsyncCtx6 + 48 >> 2] = $6; //@line 7413
        HEAP32[$AsyncCtx6 + 52 >> 2] = $$090114$lcssa; //@line 7415
        sp = STACKTOP; //@line 7416
        STACKTOP = sp; //@line 7417
        return 0; //@line 7417
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7419
        $103 = HEAP32[$85 >> 2] | 0; //@line 7421
        break;
       }
      }
     } while (0);
     HEAP32[$67 >> 2] = $103; //@line 7426
    }
    $104 = $33 + 32 | 0; //@line 7428
    if (($104 | 0) != ($4 | 0)) {
     $106 = $33 + 44 | 0; //@line 7431
     $107 = HEAP32[$106 >> 2] | 0; //@line 7432
     do {
      if ($107 | 0) {
       $110 = HEAP32[$107 + 8 >> 2] | 0; //@line 7437
       $AsyncCtx10 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7438
       FUNCTION_TABLE_vi[$110 & 511]($104); //@line 7439
       if (___async) {
        HEAP32[$AsyncCtx10 >> 2] = 163; //@line 7442
        HEAP32[$AsyncCtx10 + 4 >> 2] = $8; //@line 7444
        HEAP32[$AsyncCtx10 + 8 >> 2] = $9; //@line 7446
        HEAP32[$AsyncCtx10 + 12 >> 2] = $104; //@line 7448
        HEAP32[$AsyncCtx10 + 16 >> 2] = $0; //@line 7450
        HEAP32[$AsyncCtx10 + 20 >> 2] = $33; //@line 7452
        HEAP32[$AsyncCtx10 + 24 >> 2] = $63; //@line 7454
        HEAP32[$AsyncCtx10 + 28 >> 2] = $46; //@line 7456
        HEAP32[$AsyncCtx10 + 32 >> 2] = $4; //@line 7458
        HEAP32[$AsyncCtx10 + 36 >> 2] = $106; //@line 7460
        HEAP32[$AsyncCtx10 + 40 >> 2] = $3; //@line 7462
        HEAP32[$AsyncCtx10 + 44 >> 2] = $5; //@line 7464
        HEAP32[$AsyncCtx10 + 48 >> 2] = $6; //@line 7466
        HEAP32[$AsyncCtx10 + 52 >> 2] = $$090114$lcssa; //@line 7468
        sp = STACKTOP; //@line 7469
        STACKTOP = sp; //@line 7470
        return 0; //@line 7470
       } else {
        _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7472
        break;
       }
      }
     } while (0);
     $124 = $4 + 12 | 0; //@line 7477
     $125 = HEAP32[$124 >> 2] | 0; //@line 7478
     do {
      if (!$125) {
       $142 = 0; //@line 7482
      } else {
       $128 = HEAP32[$125 + 4 >> 2] | 0; //@line 7485
       $AsyncCtx14 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7486
       FUNCTION_TABLE_vii[$128 & 7]($104, $4); //@line 7487
       if (___async) {
        HEAP32[$AsyncCtx14 >> 2] = 164; //@line 7490
        HEAP32[$AsyncCtx14 + 4 >> 2] = $8; //@line 7492
        HEAP32[$AsyncCtx14 + 8 >> 2] = $9; //@line 7494
        HEAP32[$AsyncCtx14 + 12 >> 2] = $104; //@line 7496
        HEAP32[$AsyncCtx14 + 16 >> 2] = $0; //@line 7498
        HEAP32[$AsyncCtx14 + 20 >> 2] = $33; //@line 7500
        HEAP32[$AsyncCtx14 + 24 >> 2] = $124; //@line 7502
        HEAP32[$AsyncCtx14 + 28 >> 2] = $63; //@line 7504
        HEAP32[$AsyncCtx14 + 32 >> 2] = $46; //@line 7506
        HEAP32[$AsyncCtx14 + 36 >> 2] = $106; //@line 7508
        HEAP32[$AsyncCtx14 + 40 >> 2] = $3; //@line 7510
        HEAP32[$AsyncCtx14 + 44 >> 2] = $5; //@line 7512
        HEAP32[$AsyncCtx14 + 48 >> 2] = $6; //@line 7514
        HEAP32[$AsyncCtx14 + 52 >> 2] = $$090114$lcssa; //@line 7516
        sp = STACKTOP; //@line 7517
        STACKTOP = sp; //@line 7518
        return 0; //@line 7518
       } else {
        _emscripten_free_async_context($AsyncCtx14 | 0); //@line 7520
        $142 = HEAP32[$124 >> 2] | 0; //@line 7522
        break;
       }
      }
     } while (0);
     HEAP32[$106 >> 2] = $142; //@line 7527
    }
    HEAP32[$33 + 8 >> 2] = $0; //@line 7530
    HEAP32[$33 + 48 >> 2] = $3; //@line 7532
    HEAP32[$33 + 52 >> 2] = $5; //@line 7534
    $146 = $33 + 56 | 0; //@line 7535
    HEAP32[$146 >> 2] = 0; //@line 7536
    $147 = $33 + 60 | 0; //@line 7537
    HEAP32[$147 >> 2] = 0; //@line 7538
    HEAP32[$33 + 64 >> 2] = 0; //@line 7540
    HEAP8[$33 + 82 >> 0] = 0; //@line 7542
    HEAP8[$33 + 83 >> 0] = 1; //@line 7544
    HEAP8[$33 + 84 >> 0] = 3; //@line 7546
    HEAP8[$33 + 85 >> 0] = 0; //@line 7548
    HEAP16[$33 + 80 >> 1] = 0; //@line 7550
    HEAP32[$33 + 76 >> 2] = 0; //@line 7552
    $155 = $33 + 72 | 0; //@line 7553
    HEAP32[$155 >> 2] = 15500; //@line 7554
    HEAP8[$33 + 86 >> 0] = 0; //@line 7556
    HEAP32[$33 + 88 >> 2] = 0; //@line 7558
    $158 = HEAP32[177] | 0; //@line 7559
    HEAP32[177] = $158 + 1; //@line 7561
    HEAP32[$33 >> 2] = ($158 | 0) > 32767 ? 1 : $158; //@line 7564
    $161 = HEAP32[1675] | 0; //@line 7565
    if (!$161) {
     $$1 = 0; //@line 7568
     $255 = 0; //@line 7568
    } else {
     $164 = HEAP32[$161 + 56 >> 2] | 0; //@line 7571
     if (!$164) {
      $$1 = 1; //@line 7574
      $255 = 0; //@line 7574
     } else {
      if ((HEAP32[$161 + 8 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$146 >> 2] = $164; //@line 7580
       HEAP32[$147 >> 2] = HEAP32[$161 + 60 >> 2]; //@line 7583
       $$1 = 1; //@line 7584
       $255 = $164; //@line 7584
      } else {
       $$1 = 1; //@line 7586
       $255 = 0; //@line 7586
      }
     }
    }
    $171 = HEAP32[1676] | 0; //@line 7590
    if (!$171) {
     $$1$1 = $$1; //@line 7593
     $268 = $255; //@line 7593
    } else {
     if (!$255) {
      $257 = HEAP32[$171 + 56 >> 2] | 0; //@line 7598
      if (!$257) {
       $315 = 0; //@line 7601
      } else {
       if ((HEAP32[$171 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $257; //@line 7607
        HEAP32[$147 >> 2] = HEAP32[$171 + 60 >> 2]; //@line 7610
        $315 = $257; //@line 7611
       } else {
        $315 = 0; //@line 7613
       }
      }
     } else {
      $315 = $255; //@line 7617
     }
     $$1$1 = $$1 + 1 | 0; //@line 7620
     $268 = $315; //@line 7620
    }
    $265 = HEAP32[1677] | 0; //@line 7622
    if (!$265) {
     $$1$2 = $$1$1; //@line 7625
     $281 = $268; //@line 7625
    } else {
     if (!$268) {
      $270 = HEAP32[$265 + 56 >> 2] | 0; //@line 7630
      if (!$270) {
       $316 = 0; //@line 7633
      } else {
       if ((HEAP32[$265 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $270; //@line 7639
        HEAP32[$147 >> 2] = HEAP32[$265 + 60 >> 2]; //@line 7642
        $316 = $270; //@line 7643
       } else {
        $316 = 0; //@line 7645
       }
      }
     } else {
      $316 = $268; //@line 7649
     }
     $$1$2 = $$1$1 + 1 | 0; //@line 7652
     $281 = $316; //@line 7652
    }
    $278 = HEAP32[1678] | 0; //@line 7654
    if (!$278) {
     $$1$3 = $$1$2; //@line 7657
     $294 = $281; //@line 7657
    } else {
     if (!$281) {
      $283 = HEAP32[$278 + 56 >> 2] | 0; //@line 7662
      if (!$283) {
       $317 = 0; //@line 7665
      } else {
       if ((HEAP32[$278 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $283; //@line 7671
        HEAP32[$147 >> 2] = HEAP32[$278 + 60 >> 2]; //@line 7674
        $317 = $283; //@line 7675
       } else {
        $317 = 0; //@line 7677
       }
      }
     } else {
      $317 = $281; //@line 7681
     }
     $$1$3 = $$1$2 + 1 | 0; //@line 7684
     $294 = $317; //@line 7684
    }
    $291 = HEAP32[1679] | 0; //@line 7686
    if (!$291) {
     $$1$4 = $$1$3; //@line 7689
    } else {
     do {
      if (!$294) {
       $296 = HEAP32[$291 + 56 >> 2] | 0; //@line 7695
       if ($296 | 0) {
        if ((HEAP32[$291 + 8 >> 2] | 0) != ($0 | 0)) {
         break;
        }
        HEAP32[$146 >> 2] = $296; //@line 7704
        HEAP32[$147 >> 2] = HEAP32[$291 + 60 >> 2]; //@line 7707
       }
      }
     } while (0);
     $$1$4 = $$1$3 + 1 | 0; //@line 7712
    }
    HEAP32[6700 + ($$090114$lcssa << 2) >> 2] = $33; //@line 7715
    HEAP32[$155 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 7718
    do {
     if (!(HEAP8[7580] | 0)) {
      $173 = $33 + 44 | 0; //@line 7723
      $174 = HEAP32[$173 >> 2] | 0; //@line 7724
      do {
       if (!$174) {
        $189 = 0; //@line 7728
       } else {
        $177 = HEAP32[$174 + 4 >> 2] | 0; //@line 7731
        $AsyncCtx18 = _emscripten_alloc_async_context(44, sp) | 0; //@line 7732
        FUNCTION_TABLE_vii[$177 & 7]($8, $104); //@line 7733
        if (___async) {
         HEAP32[$AsyncCtx18 >> 2] = 165; //@line 7736
         HEAP32[$AsyncCtx18 + 4 >> 2] = $8; //@line 7738
         HEAP32[$AsyncCtx18 + 8 >> 2] = $9; //@line 7740
         HEAP32[$AsyncCtx18 + 12 >> 2] = $173; //@line 7742
         HEAP32[$AsyncCtx18 + 16 >> 2] = $33; //@line 7744
         HEAP32[$AsyncCtx18 + 20 >> 2] = $33; //@line 7746
         HEAP32[$AsyncCtx18 + 24 >> 2] = $104; //@line 7748
         HEAP32[$AsyncCtx18 + 28 >> 2] = $63; //@line 7750
         HEAP32[$AsyncCtx18 + 32 >> 2] = $46; //@line 7752
         HEAP32[$AsyncCtx18 + 36 >> 2] = $6; //@line 7754
         HEAP32[$AsyncCtx18 + 40 >> 2] = $173; //@line 7756
         sp = STACKTOP; //@line 7757
         STACKTOP = sp; //@line 7758
         return 0; //@line 7758
        } else {
         _emscripten_free_async_context($AsyncCtx18 | 0); //@line 7760
         $189 = HEAP32[$173 >> 2] | 0; //@line 7762
         break;
        }
       }
      } while (0);
      $188 = $8 + 12 | 0; //@line 7767
      HEAP32[$188 >> 2] = $189; //@line 7768
      $191 = $9 + 4 | 0; //@line 7770
      HEAP32[$191 >> 2] = 0; //@line 7772
      HEAP32[$191 + 4 >> 2] = 0; //@line 7775
      HEAP32[$9 >> 2] = 3; //@line 7776
      $195 = $9 + 12 | 0; //@line 7777
      HEAP32[$195 >> 2] = 712; //@line 7778
      $AsyncCtx49 = _emscripten_alloc_async_context(48, sp) | 0; //@line 7779
      $196 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $9) | 0; //@line 7780
      if (___async) {
       HEAP32[$AsyncCtx49 >> 2] = 166; //@line 7783
       HEAP32[$AsyncCtx49 + 4 >> 2] = $9; //@line 7785
       HEAP32[$AsyncCtx49 + 8 >> 2] = $33; //@line 7787
       HEAP32[$AsyncCtx49 + 12 >> 2] = $46; //@line 7789
       HEAP32[$AsyncCtx49 + 16 >> 2] = $6; //@line 7791
       HEAP32[$AsyncCtx49 + 20 >> 2] = $173; //@line 7793
       HEAP32[$AsyncCtx49 + 24 >> 2] = $33; //@line 7795
       HEAP32[$AsyncCtx49 + 28 >> 2] = $195; //@line 7797
       HEAP32[$AsyncCtx49 + 32 >> 2] = $104; //@line 7799
       HEAP32[$AsyncCtx49 + 36 >> 2] = $8; //@line 7801
       HEAP32[$AsyncCtx49 + 40 >> 2] = $188; //@line 7803
       HEAP32[$AsyncCtx49 + 44 >> 2] = $63; //@line 7805
       sp = STACKTOP; //@line 7806
       STACKTOP = sp; //@line 7807
       return 0; //@line 7807
      }
      _emscripten_free_async_context($AsyncCtx49 | 0); //@line 7809
      $208 = HEAP32[$195 >> 2] | 0; //@line 7810
      do {
       if ($208 | 0) {
        $211 = HEAP32[$208 + 8 >> 2] | 0; //@line 7815
        $AsyncCtx22 = _emscripten_alloc_async_context(44, sp) | 0; //@line 7816
        FUNCTION_TABLE_vi[$211 & 511]($9); //@line 7817
        if (___async) {
         HEAP32[$AsyncCtx22 >> 2] = 167; //@line 7820
         HEAP32[$AsyncCtx22 + 4 >> 2] = $173; //@line 7822
         HEAP32[$AsyncCtx22 + 8 >> 2] = $33; //@line 7824
         HEAP32[$AsyncCtx22 + 12 >> 2] = $33; //@line 7826
         HEAP32[$AsyncCtx22 + 16 >> 2] = $104; //@line 7828
         HEAP32[$AsyncCtx22 + 20 >> 2] = $8; //@line 7830
         HEAP32[$AsyncCtx22 + 24 >> 2] = $196; //@line 7832
         HEAP32[$AsyncCtx22 + 28 >> 2] = $188; //@line 7834
         HEAP32[$AsyncCtx22 + 32 >> 2] = $63; //@line 7836
         HEAP32[$AsyncCtx22 + 36 >> 2] = $46; //@line 7838
         HEAP32[$AsyncCtx22 + 40 >> 2] = $6; //@line 7840
         sp = STACKTOP; //@line 7841
         STACKTOP = sp; //@line 7842
         return 0; //@line 7842
        } else {
         _emscripten_free_async_context($AsyncCtx22 | 0); //@line 7844
         break;
        }
       }
      } while (0);
      $222 = ($196 | 0) == 0; //@line 7849
      $223 = HEAP32[$188 >> 2] | 0; //@line 7850
      do {
       if ($223 | 0) {
        $226 = HEAP32[$223 + 8 >> 2] | 0; //@line 7855
        $AsyncCtx26 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7856
        FUNCTION_TABLE_vi[$226 & 511]($8); //@line 7857
        if (___async) {
         HEAP32[$AsyncCtx26 >> 2] = 168; //@line 7860
         HEAP32[$AsyncCtx26 + 4 >> 2] = $173; //@line 7862
         HEAP32[$AsyncCtx26 + 8 >> 2] = $33; //@line 7864
         HEAP32[$AsyncCtx26 + 12 >> 2] = $33; //@line 7866
         HEAP32[$AsyncCtx26 + 16 >> 2] = $104; //@line 7868
         HEAP32[$AsyncCtx26 + 20 >> 2] = $63; //@line 7870
         HEAP8[$AsyncCtx26 + 24 >> 0] = $222 & 1; //@line 7873
         HEAP32[$AsyncCtx26 + 28 >> 2] = $46; //@line 7875
         HEAP32[$AsyncCtx26 + 32 >> 2] = $6; //@line 7877
         sp = STACKTOP; //@line 7878
         STACKTOP = sp; //@line 7879
         return 0; //@line 7879
        } else {
         _emscripten_free_async_context($AsyncCtx26 | 0); //@line 7881
         break;
        }
       }
      } while (0);
      if ($222) {
       HEAP8[7580] = 1; //@line 7887
       break;
      }
      $235 = HEAP32[$63 >> 2] | 0; //@line 7890
      if ($235 | 0) {
       __ZdlPv($235); //@line 7893
      }
      $237 = HEAP32[$173 >> 2] | 0; //@line 7895
      do {
       if ($237 | 0) {
        $240 = HEAP32[$237 + 8 >> 2] | 0; //@line 7900
        $AsyncCtx30 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7901
        FUNCTION_TABLE_vi[$240 & 511]($104); //@line 7902
        if (___async) {
         HEAP32[$AsyncCtx30 >> 2] = 169; //@line 7905
         HEAP32[$AsyncCtx30 + 4 >> 2] = $33; //@line 7907
         HEAP32[$AsyncCtx30 + 8 >> 2] = $46; //@line 7909
         HEAP32[$AsyncCtx30 + 12 >> 2] = $6; //@line 7911
         sp = STACKTOP; //@line 7912
         STACKTOP = sp; //@line 7913
         return 0; //@line 7913
        } else {
         _emscripten_free_async_context($AsyncCtx30 | 0); //@line 7915
         break;
        }
       }
      } while (0);
      $245 = HEAP32[$33 + 28 >> 2] | 0; //@line 7921
      do {
       if ($245 | 0) {
        $248 = HEAP32[$245 + 8 >> 2] | 0; //@line 7926
        $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7927
        FUNCTION_TABLE_vi[$248 & 511]($46); //@line 7928
        if (___async) {
         HEAP32[$AsyncCtx34 >> 2] = 170; //@line 7931
         HEAP32[$AsyncCtx34 + 4 >> 2] = $33; //@line 7933
         HEAP32[$AsyncCtx34 + 8 >> 2] = $6; //@line 7935
         sp = STACKTOP; //@line 7936
         STACKTOP = sp; //@line 7937
         return 0; //@line 7937
        } else {
         _emscripten_free_async_context($AsyncCtx34 | 0); //@line 7939
         break;
        }
       }
      } while (0);
      __ZdlPv($33); //@line 7944
      $$3 = -3007; //@line 7945
      break L7;
     }
    } while (0);
    $AsyncCtx46 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7949
    __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 7950
    if (___async) {
     HEAP32[$AsyncCtx46 >> 2] = 171; //@line 7953
     HEAP32[$AsyncCtx46 + 4 >> 2] = $33; //@line 7955
     HEAP32[$AsyncCtx46 + 8 >> 2] = $6; //@line 7957
     sp = STACKTOP; //@line 7958
     STACKTOP = sp; //@line 7959
     return 0; //@line 7959
    } else {
     _emscripten_free_async_context($AsyncCtx46 | 0); //@line 7961
     $$3 = HEAP32[$33 >> 2] | 0; //@line 7963
     break;
    }
   }
  }
 } while (0);
 $$5 = $$3; //@line 7969
 STACKTOP = sp; //@line 7970
 return $$5 | 0; //@line 7970
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_201($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $107 = 0, $108 = 0, $116 = 0, $119 = 0, $12 = 0, $122 = 0, $125 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $173 = 0, $175 = 0, $18 = 0, $183 = 0, $186 = 0, $188 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $209 = 0, $212 = 0, $214 = 0, $22 = 0, $227 = 0, $228 = 0, $229 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16381
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16383
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16385
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16387
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16389
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16391
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16393
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16395
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16397
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16399
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16401
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16403
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16405
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16407
 $26 = $8 + 12 | 0; //@line 16408
 HEAP32[$26 >> 2] = $AsyncRetVal; //@line 16409
 if (!$AsyncRetVal) {
  __ZdlPv($8); //@line 16412
  HEAP32[___async_retval >> 2] = -3007; //@line 16414
  return;
 }
 _strcpy($AsyncRetVal, $24) | 0; //@line 16417
 HEAP32[$8 + 4 >> 2] = -3019; //@line 16419
 do {
  if (($10 | 0) != ($22 | 0)) {
   $30 = $8 + 28 | 0; //@line 16423
   $31 = HEAP32[$30 >> 2] | 0; //@line 16424
   if ($31 | 0) {
    $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 16428
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 16429
    FUNCTION_TABLE_vi[$34 & 511]($10); //@line 16430
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 161; //@line 16433
     $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 16434
     HEAP32[$35 >> 2] = $2; //@line 16435
     $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 16436
     HEAP32[$36 >> 2] = $4; //@line 16437
     $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 16438
     HEAP32[$37 >> 2] = $6; //@line 16439
     $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 16440
     HEAP32[$38 >> 2] = $8; //@line 16441
     $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 16442
     HEAP32[$39 >> 2] = $26; //@line 16443
     $40 = $ReallocAsyncCtx2 + 24 | 0; //@line 16444
     HEAP32[$40 >> 2] = $22; //@line 16445
     $41 = $ReallocAsyncCtx2 + 28 | 0; //@line 16446
     HEAP32[$41 >> 2] = $10; //@line 16447
     $42 = $ReallocAsyncCtx2 + 32 | 0; //@line 16448
     HEAP32[$42 >> 2] = $30; //@line 16449
     $43 = $ReallocAsyncCtx2 + 36 | 0; //@line 16450
     HEAP32[$43 >> 2] = $12; //@line 16451
     $44 = $ReallocAsyncCtx2 + 40 | 0; //@line 16452
     HEAP32[$44 >> 2] = $14; //@line 16453
     $45 = $ReallocAsyncCtx2 + 44 | 0; //@line 16454
     HEAP32[$45 >> 2] = $16; //@line 16455
     $46 = $ReallocAsyncCtx2 + 48 | 0; //@line 16456
     HEAP32[$46 >> 2] = $18; //@line 16457
     $47 = $ReallocAsyncCtx2 + 52 | 0; //@line 16458
     HEAP32[$47 >> 2] = $20; //@line 16459
     sp = STACKTOP; //@line 16460
     return;
    }
    ___async_unwind = 0; //@line 16463
    HEAP32[$ReallocAsyncCtx2 >> 2] = 161; //@line 16464
    $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 16465
    HEAP32[$35 >> 2] = $2; //@line 16466
    $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 16467
    HEAP32[$36 >> 2] = $4; //@line 16468
    $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 16469
    HEAP32[$37 >> 2] = $6; //@line 16470
    $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 16471
    HEAP32[$38 >> 2] = $8; //@line 16472
    $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 16473
    HEAP32[$39 >> 2] = $26; //@line 16474
    $40 = $ReallocAsyncCtx2 + 24 | 0; //@line 16475
    HEAP32[$40 >> 2] = $22; //@line 16476
    $41 = $ReallocAsyncCtx2 + 28 | 0; //@line 16477
    HEAP32[$41 >> 2] = $10; //@line 16478
    $42 = $ReallocAsyncCtx2 + 32 | 0; //@line 16479
    HEAP32[$42 >> 2] = $30; //@line 16480
    $43 = $ReallocAsyncCtx2 + 36 | 0; //@line 16481
    HEAP32[$43 >> 2] = $12; //@line 16482
    $44 = $ReallocAsyncCtx2 + 40 | 0; //@line 16483
    HEAP32[$44 >> 2] = $14; //@line 16484
    $45 = $ReallocAsyncCtx2 + 44 | 0; //@line 16485
    HEAP32[$45 >> 2] = $16; //@line 16486
    $46 = $ReallocAsyncCtx2 + 48 | 0; //@line 16487
    HEAP32[$46 >> 2] = $18; //@line 16488
    $47 = $ReallocAsyncCtx2 + 52 | 0; //@line 16489
    HEAP32[$47 >> 2] = $20; //@line 16490
    sp = STACKTOP; //@line 16491
    return;
   }
   $48 = $22 + 12 | 0; //@line 16494
   $49 = HEAP32[$48 >> 2] | 0; //@line 16495
   if (!$49) {
    HEAP32[$30 >> 2] = 0; //@line 16498
    break;
   }
   $52 = HEAP32[$49 + 4 >> 2] | 0; //@line 16502
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 16503
   FUNCTION_TABLE_vii[$52 & 7]($10, $22); //@line 16504
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 162; //@line 16507
    $53 = $ReallocAsyncCtx3 + 4 | 0; //@line 16508
    HEAP32[$53 >> 2] = $2; //@line 16509
    $54 = $ReallocAsyncCtx3 + 8 | 0; //@line 16510
    HEAP32[$54 >> 2] = $4; //@line 16511
    $55 = $ReallocAsyncCtx3 + 12 | 0; //@line 16512
    HEAP32[$55 >> 2] = $6; //@line 16513
    $56 = $ReallocAsyncCtx3 + 16 | 0; //@line 16514
    HEAP32[$56 >> 2] = $8; //@line 16515
    $57 = $ReallocAsyncCtx3 + 20 | 0; //@line 16516
    HEAP32[$57 >> 2] = $48; //@line 16517
    $58 = $ReallocAsyncCtx3 + 24 | 0; //@line 16518
    HEAP32[$58 >> 2] = $26; //@line 16519
    $59 = $ReallocAsyncCtx3 + 28 | 0; //@line 16520
    HEAP32[$59 >> 2] = $30; //@line 16521
    $60 = $ReallocAsyncCtx3 + 32 | 0; //@line 16522
    HEAP32[$60 >> 2] = $10; //@line 16523
    $61 = $ReallocAsyncCtx3 + 36 | 0; //@line 16524
    HEAP32[$61 >> 2] = $12; //@line 16525
    $62 = $ReallocAsyncCtx3 + 40 | 0; //@line 16526
    HEAP32[$62 >> 2] = $14; //@line 16527
    $63 = $ReallocAsyncCtx3 + 44 | 0; //@line 16528
    HEAP32[$63 >> 2] = $16; //@line 16529
    $64 = $ReallocAsyncCtx3 + 48 | 0; //@line 16530
    HEAP32[$64 >> 2] = $18; //@line 16531
    $65 = $ReallocAsyncCtx3 + 52 | 0; //@line 16532
    HEAP32[$65 >> 2] = $20; //@line 16533
    sp = STACKTOP; //@line 16534
    return;
   }
   ___async_unwind = 0; //@line 16537
   HEAP32[$ReallocAsyncCtx3 >> 2] = 162; //@line 16538
   $53 = $ReallocAsyncCtx3 + 4 | 0; //@line 16539
   HEAP32[$53 >> 2] = $2; //@line 16540
   $54 = $ReallocAsyncCtx3 + 8 | 0; //@line 16541
   HEAP32[$54 >> 2] = $4; //@line 16542
   $55 = $ReallocAsyncCtx3 + 12 | 0; //@line 16543
   HEAP32[$55 >> 2] = $6; //@line 16544
   $56 = $ReallocAsyncCtx3 + 16 | 0; //@line 16545
   HEAP32[$56 >> 2] = $8; //@line 16546
   $57 = $ReallocAsyncCtx3 + 20 | 0; //@line 16547
   HEAP32[$57 >> 2] = $48; //@line 16548
   $58 = $ReallocAsyncCtx3 + 24 | 0; //@line 16549
   HEAP32[$58 >> 2] = $26; //@line 16550
   $59 = $ReallocAsyncCtx3 + 28 | 0; //@line 16551
   HEAP32[$59 >> 2] = $30; //@line 16552
   $60 = $ReallocAsyncCtx3 + 32 | 0; //@line 16553
   HEAP32[$60 >> 2] = $10; //@line 16554
   $61 = $ReallocAsyncCtx3 + 36 | 0; //@line 16555
   HEAP32[$61 >> 2] = $12; //@line 16556
   $62 = $ReallocAsyncCtx3 + 40 | 0; //@line 16557
   HEAP32[$62 >> 2] = $14; //@line 16558
   $63 = $ReallocAsyncCtx3 + 44 | 0; //@line 16559
   HEAP32[$63 >> 2] = $16; //@line 16560
   $64 = $ReallocAsyncCtx3 + 48 | 0; //@line 16561
   HEAP32[$64 >> 2] = $18; //@line 16562
   $65 = $ReallocAsyncCtx3 + 52 | 0; //@line 16563
   HEAP32[$65 >> 2] = $20; //@line 16564
   sp = STACKTOP; //@line 16565
   return;
  }
 } while (0);
 $66 = $8 + 32 | 0; //@line 16569
 do {
  if (($66 | 0) != ($12 | 0)) {
   $68 = $8 + 44 | 0; //@line 16573
   $69 = HEAP32[$68 >> 2] | 0; //@line 16574
   if ($69 | 0) {
    $72 = HEAP32[$69 + 8 >> 2] | 0; //@line 16578
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 16579
    FUNCTION_TABLE_vi[$72 & 511]($66); //@line 16580
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 163; //@line 16583
     $73 = $ReallocAsyncCtx4 + 4 | 0; //@line 16584
     HEAP32[$73 >> 2] = $2; //@line 16585
     $74 = $ReallocAsyncCtx4 + 8 | 0; //@line 16586
     HEAP32[$74 >> 2] = $4; //@line 16587
     $75 = $ReallocAsyncCtx4 + 12 | 0; //@line 16588
     HEAP32[$75 >> 2] = $66; //@line 16589
     $76 = $ReallocAsyncCtx4 + 16 | 0; //@line 16590
     HEAP32[$76 >> 2] = $6; //@line 16591
     $77 = $ReallocAsyncCtx4 + 20 | 0; //@line 16592
     HEAP32[$77 >> 2] = $8; //@line 16593
     $78 = $ReallocAsyncCtx4 + 24 | 0; //@line 16594
     HEAP32[$78 >> 2] = $26; //@line 16595
     $79 = $ReallocAsyncCtx4 + 28 | 0; //@line 16596
     HEAP32[$79 >> 2] = $10; //@line 16597
     $80 = $ReallocAsyncCtx4 + 32 | 0; //@line 16598
     HEAP32[$80 >> 2] = $12; //@line 16599
     $81 = $ReallocAsyncCtx4 + 36 | 0; //@line 16600
     HEAP32[$81 >> 2] = $68; //@line 16601
     $82 = $ReallocAsyncCtx4 + 40 | 0; //@line 16602
     HEAP32[$82 >> 2] = $14; //@line 16603
     $83 = $ReallocAsyncCtx4 + 44 | 0; //@line 16604
     HEAP32[$83 >> 2] = $16; //@line 16605
     $84 = $ReallocAsyncCtx4 + 48 | 0; //@line 16606
     HEAP32[$84 >> 2] = $18; //@line 16607
     $85 = $ReallocAsyncCtx4 + 52 | 0; //@line 16608
     HEAP32[$85 >> 2] = $20; //@line 16609
     sp = STACKTOP; //@line 16610
     return;
    }
    ___async_unwind = 0; //@line 16613
    HEAP32[$ReallocAsyncCtx4 >> 2] = 163; //@line 16614
    $73 = $ReallocAsyncCtx4 + 4 | 0; //@line 16615
    HEAP32[$73 >> 2] = $2; //@line 16616
    $74 = $ReallocAsyncCtx4 + 8 | 0; //@line 16617
    HEAP32[$74 >> 2] = $4; //@line 16618
    $75 = $ReallocAsyncCtx4 + 12 | 0; //@line 16619
    HEAP32[$75 >> 2] = $66; //@line 16620
    $76 = $ReallocAsyncCtx4 + 16 | 0; //@line 16621
    HEAP32[$76 >> 2] = $6; //@line 16622
    $77 = $ReallocAsyncCtx4 + 20 | 0; //@line 16623
    HEAP32[$77 >> 2] = $8; //@line 16624
    $78 = $ReallocAsyncCtx4 + 24 | 0; //@line 16625
    HEAP32[$78 >> 2] = $26; //@line 16626
    $79 = $ReallocAsyncCtx4 + 28 | 0; //@line 16627
    HEAP32[$79 >> 2] = $10; //@line 16628
    $80 = $ReallocAsyncCtx4 + 32 | 0; //@line 16629
    HEAP32[$80 >> 2] = $12; //@line 16630
    $81 = $ReallocAsyncCtx4 + 36 | 0; //@line 16631
    HEAP32[$81 >> 2] = $68; //@line 16632
    $82 = $ReallocAsyncCtx4 + 40 | 0; //@line 16633
    HEAP32[$82 >> 2] = $14; //@line 16634
    $83 = $ReallocAsyncCtx4 + 44 | 0; //@line 16635
    HEAP32[$83 >> 2] = $16; //@line 16636
    $84 = $ReallocAsyncCtx4 + 48 | 0; //@line 16637
    HEAP32[$84 >> 2] = $18; //@line 16638
    $85 = $ReallocAsyncCtx4 + 52 | 0; //@line 16639
    HEAP32[$85 >> 2] = $20; //@line 16640
    sp = STACKTOP; //@line 16641
    return;
   }
   $86 = $12 + 12 | 0; //@line 16644
   $87 = HEAP32[$86 >> 2] | 0; //@line 16645
   if (!$87) {
    HEAP32[$68 >> 2] = 0; //@line 16648
    break;
   }
   $90 = HEAP32[$87 + 4 >> 2] | 0; //@line 16652
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 16653
   FUNCTION_TABLE_vii[$90 & 7]($66, $12); //@line 16654
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 16657
    $91 = $ReallocAsyncCtx5 + 4 | 0; //@line 16658
    HEAP32[$91 >> 2] = $2; //@line 16659
    $92 = $ReallocAsyncCtx5 + 8 | 0; //@line 16660
    HEAP32[$92 >> 2] = $4; //@line 16661
    $93 = $ReallocAsyncCtx5 + 12 | 0; //@line 16662
    HEAP32[$93 >> 2] = $66; //@line 16663
    $94 = $ReallocAsyncCtx5 + 16 | 0; //@line 16664
    HEAP32[$94 >> 2] = $6; //@line 16665
    $95 = $ReallocAsyncCtx5 + 20 | 0; //@line 16666
    HEAP32[$95 >> 2] = $8; //@line 16667
    $96 = $ReallocAsyncCtx5 + 24 | 0; //@line 16668
    HEAP32[$96 >> 2] = $86; //@line 16669
    $97 = $ReallocAsyncCtx5 + 28 | 0; //@line 16670
    HEAP32[$97 >> 2] = $26; //@line 16671
    $98 = $ReallocAsyncCtx5 + 32 | 0; //@line 16672
    HEAP32[$98 >> 2] = $10; //@line 16673
    $99 = $ReallocAsyncCtx5 + 36 | 0; //@line 16674
    HEAP32[$99 >> 2] = $68; //@line 16675
    $100 = $ReallocAsyncCtx5 + 40 | 0; //@line 16676
    HEAP32[$100 >> 2] = $14; //@line 16677
    $101 = $ReallocAsyncCtx5 + 44 | 0; //@line 16678
    HEAP32[$101 >> 2] = $16; //@line 16679
    $102 = $ReallocAsyncCtx5 + 48 | 0; //@line 16680
    HEAP32[$102 >> 2] = $18; //@line 16681
    $103 = $ReallocAsyncCtx5 + 52 | 0; //@line 16682
    HEAP32[$103 >> 2] = $20; //@line 16683
    sp = STACKTOP; //@line 16684
    return;
   }
   ___async_unwind = 0; //@line 16687
   HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 16688
   $91 = $ReallocAsyncCtx5 + 4 | 0; //@line 16689
   HEAP32[$91 >> 2] = $2; //@line 16690
   $92 = $ReallocAsyncCtx5 + 8 | 0; //@line 16691
   HEAP32[$92 >> 2] = $4; //@line 16692
   $93 = $ReallocAsyncCtx5 + 12 | 0; //@line 16693
   HEAP32[$93 >> 2] = $66; //@line 16694
   $94 = $ReallocAsyncCtx5 + 16 | 0; //@line 16695
   HEAP32[$94 >> 2] = $6; //@line 16696
   $95 = $ReallocAsyncCtx5 + 20 | 0; //@line 16697
   HEAP32[$95 >> 2] = $8; //@line 16698
   $96 = $ReallocAsyncCtx5 + 24 | 0; //@line 16699
   HEAP32[$96 >> 2] = $86; //@line 16700
   $97 = $ReallocAsyncCtx5 + 28 | 0; //@line 16701
   HEAP32[$97 >> 2] = $26; //@line 16702
   $98 = $ReallocAsyncCtx5 + 32 | 0; //@line 16703
   HEAP32[$98 >> 2] = $10; //@line 16704
   $99 = $ReallocAsyncCtx5 + 36 | 0; //@line 16705
   HEAP32[$99 >> 2] = $68; //@line 16706
   $100 = $ReallocAsyncCtx5 + 40 | 0; //@line 16707
   HEAP32[$100 >> 2] = $14; //@line 16708
   $101 = $ReallocAsyncCtx5 + 44 | 0; //@line 16709
   HEAP32[$101 >> 2] = $16; //@line 16710
   $102 = $ReallocAsyncCtx5 + 48 | 0; //@line 16711
   HEAP32[$102 >> 2] = $18; //@line 16712
   $103 = $ReallocAsyncCtx5 + 52 | 0; //@line 16713
   HEAP32[$103 >> 2] = $20; //@line 16714
   sp = STACKTOP; //@line 16715
   return;
  }
 } while (0);
 HEAP32[$8 + 8 >> 2] = $6; //@line 16720
 HEAP32[$8 + 48 >> 2] = $14; //@line 16722
 HEAP32[$8 + 52 >> 2] = $16; //@line 16724
 $107 = $8 + 56 | 0; //@line 16725
 HEAP32[$107 >> 2] = 0; //@line 16726
 $108 = $8 + 60 | 0; //@line 16727
 HEAP32[$108 >> 2] = 0; //@line 16728
 HEAP32[$8 + 64 >> 2] = 0; //@line 16730
 HEAP8[$8 + 82 >> 0] = 0; //@line 16732
 HEAP8[$8 + 83 >> 0] = 1; //@line 16734
 HEAP8[$8 + 84 >> 0] = 3; //@line 16736
 HEAP8[$8 + 85 >> 0] = 0; //@line 16738
 HEAP16[$8 + 80 >> 1] = 0; //@line 16740
 HEAP32[$8 + 76 >> 2] = 0; //@line 16742
 $116 = $8 + 72 | 0; //@line 16743
 HEAP32[$116 >> 2] = 15500; //@line 16744
 HEAP8[$8 + 86 >> 0] = 0; //@line 16746
 HEAP32[$8 + 88 >> 2] = 0; //@line 16748
 $119 = HEAP32[177] | 0; //@line 16749
 HEAP32[177] = $119 + 1; //@line 16751
 HEAP32[$8 >> 2] = ($119 | 0) > 32767 ? 1 : $119; //@line 16754
 $122 = HEAP32[1675] | 0; //@line 16755
 if (!$122) {
  $$1 = 0; //@line 16758
  $173 = 0; //@line 16758
 } else {
  $125 = HEAP32[$122 + 56 >> 2] | 0; //@line 16761
  if (!$125) {
   $$1 = 1; //@line 16764
   $173 = 0; //@line 16764
  } else {
   if ((HEAP32[$122 + 8 >> 2] | 0) == ($6 | 0)) {
    HEAP32[$107 >> 2] = $125; //@line 16770
    HEAP32[$108 >> 2] = HEAP32[$122 + 60 >> 2]; //@line 16773
    $$1 = 1; //@line 16774
    $173 = $125; //@line 16774
   } else {
    $$1 = 1; //@line 16776
    $173 = 0; //@line 16776
   }
  }
 }
 $132 = HEAP32[1676] | 0; //@line 16780
 if (!$132) {
  $$1$1 = $$1; //@line 16783
  $186 = $173; //@line 16783
 } else {
  if (!$173) {
   $175 = HEAP32[$132 + 56 >> 2] | 0; //@line 16788
   if (!$175) {
    $227 = 0; //@line 16791
   } else {
    if ((HEAP32[$132 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$107 >> 2] = $175; //@line 16797
     HEAP32[$108 >> 2] = HEAP32[$132 + 60 >> 2]; //@line 16800
     $227 = $175; //@line 16801
    } else {
     $227 = 0; //@line 16803
    }
   }
  } else {
   $227 = $173; //@line 16807
  }
  $$1$1 = $$1 + 1 | 0; //@line 16810
  $186 = $227; //@line 16810
 }
 $183 = HEAP32[1677] | 0; //@line 16812
 if (!$183) {
  $$1$2 = $$1$1; //@line 16815
  $199 = $186; //@line 16815
 } else {
  if (!$186) {
   $188 = HEAP32[$183 + 56 >> 2] | 0; //@line 16820
   if (!$188) {
    $228 = 0; //@line 16823
   } else {
    if ((HEAP32[$183 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$107 >> 2] = $188; //@line 16829
     HEAP32[$108 >> 2] = HEAP32[$183 + 60 >> 2]; //@line 16832
     $228 = $188; //@line 16833
    } else {
     $228 = 0; //@line 16835
    }
   }
  } else {
   $228 = $186; //@line 16839
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 16842
  $199 = $228; //@line 16842
 }
 $196 = HEAP32[1678] | 0; //@line 16844
 if (!$196) {
  $$1$3 = $$1$2; //@line 16847
  $212 = $199; //@line 16847
 } else {
  if (!$199) {
   $201 = HEAP32[$196 + 56 >> 2] | 0; //@line 16852
   if (!$201) {
    $229 = 0; //@line 16855
   } else {
    if ((HEAP32[$196 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$107 >> 2] = $201; //@line 16861
     HEAP32[$108 >> 2] = HEAP32[$196 + 60 >> 2]; //@line 16864
     $229 = $201; //@line 16865
    } else {
     $229 = 0; //@line 16867
    }
   }
  } else {
   $229 = $199; //@line 16871
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 16874
  $212 = $229; //@line 16874
 }
 $209 = HEAP32[1679] | 0; //@line 16876
 if (!$209) {
  $$1$4 = $$1$3; //@line 16879
 } else {
  if (!$212) {
   $214 = HEAP32[$209 + 56 >> 2] | 0; //@line 16884
   if ($214 | 0) {
    if ((HEAP32[$209 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$107 >> 2] = $214; //@line 16891
     HEAP32[$108 >> 2] = HEAP32[$209 + 60 >> 2]; //@line 16894
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 16899
 }
 HEAP32[6700 + ($20 << 2) >> 2] = $8; //@line 16902
 HEAP32[$116 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 16905
 if (HEAP8[7580] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 16909
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 16910
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 16913
   $169 = $ReallocAsyncCtx13 + 4 | 0; //@line 16914
   HEAP32[$169 >> 2] = $8; //@line 16915
   $170 = $ReallocAsyncCtx13 + 8 | 0; //@line 16916
   HEAP32[$170 >> 2] = $18; //@line 16917
   sp = STACKTOP; //@line 16918
   return;
  }
  ___async_unwind = 0; //@line 16921
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 16922
  $169 = $ReallocAsyncCtx13 + 4 | 0; //@line 16923
  HEAP32[$169 >> 2] = $8; //@line 16924
  $170 = $ReallocAsyncCtx13 + 8 | 0; //@line 16925
  HEAP32[$170 >> 2] = $18; //@line 16926
  sp = STACKTOP; //@line 16927
  return;
 }
 $134 = $8 + 44 | 0; //@line 16930
 $135 = HEAP32[$134 >> 2] | 0; //@line 16931
 if (!$135) {
  $149 = $2 + 12 | 0; //@line 16934
  HEAP32[$149 >> 2] = 0; //@line 16935
  $151 = $4 + 4 | 0; //@line 16937
  HEAP32[$151 >> 2] = 0; //@line 16939
  HEAP32[$151 + 4 >> 2] = 0; //@line 16942
  HEAP32[$4 >> 2] = 3; //@line 16943
  $155 = $4 + 12 | 0; //@line 16944
  HEAP32[$155 >> 2] = 712; //@line 16945
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 16946
  $156 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $4) | 0; //@line 16947
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 16950
   $157 = $ReallocAsyncCtx14 + 4 | 0; //@line 16951
   HEAP32[$157 >> 2] = $4; //@line 16952
   $158 = $ReallocAsyncCtx14 + 8 | 0; //@line 16953
   HEAP32[$158 >> 2] = $8; //@line 16954
   $159 = $ReallocAsyncCtx14 + 12 | 0; //@line 16955
   HEAP32[$159 >> 2] = $10; //@line 16956
   $160 = $ReallocAsyncCtx14 + 16 | 0; //@line 16957
   HEAP32[$160 >> 2] = $18; //@line 16958
   $161 = $ReallocAsyncCtx14 + 20 | 0; //@line 16959
   HEAP32[$161 >> 2] = $134; //@line 16960
   $162 = $ReallocAsyncCtx14 + 24 | 0; //@line 16961
   HEAP32[$162 >> 2] = $8; //@line 16962
   $163 = $ReallocAsyncCtx14 + 28 | 0; //@line 16963
   HEAP32[$163 >> 2] = $155; //@line 16964
   $164 = $ReallocAsyncCtx14 + 32 | 0; //@line 16965
   HEAP32[$164 >> 2] = $66; //@line 16966
   $165 = $ReallocAsyncCtx14 + 36 | 0; //@line 16967
   HEAP32[$165 >> 2] = $2; //@line 16968
   $166 = $ReallocAsyncCtx14 + 40 | 0; //@line 16969
   HEAP32[$166 >> 2] = $149; //@line 16970
   $167 = $ReallocAsyncCtx14 + 44 | 0; //@line 16971
   HEAP32[$167 >> 2] = $26; //@line 16972
   sp = STACKTOP; //@line 16973
   return;
  }
  HEAP32[___async_retval >> 2] = $156; //@line 16977
  ___async_unwind = 0; //@line 16978
  HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 16979
  $157 = $ReallocAsyncCtx14 + 4 | 0; //@line 16980
  HEAP32[$157 >> 2] = $4; //@line 16981
  $158 = $ReallocAsyncCtx14 + 8 | 0; //@line 16982
  HEAP32[$158 >> 2] = $8; //@line 16983
  $159 = $ReallocAsyncCtx14 + 12 | 0; //@line 16984
  HEAP32[$159 >> 2] = $10; //@line 16985
  $160 = $ReallocAsyncCtx14 + 16 | 0; //@line 16986
  HEAP32[$160 >> 2] = $18; //@line 16987
  $161 = $ReallocAsyncCtx14 + 20 | 0; //@line 16988
  HEAP32[$161 >> 2] = $134; //@line 16989
  $162 = $ReallocAsyncCtx14 + 24 | 0; //@line 16990
  HEAP32[$162 >> 2] = $8; //@line 16991
  $163 = $ReallocAsyncCtx14 + 28 | 0; //@line 16992
  HEAP32[$163 >> 2] = $155; //@line 16993
  $164 = $ReallocAsyncCtx14 + 32 | 0; //@line 16994
  HEAP32[$164 >> 2] = $66; //@line 16995
  $165 = $ReallocAsyncCtx14 + 36 | 0; //@line 16996
  HEAP32[$165 >> 2] = $2; //@line 16997
  $166 = $ReallocAsyncCtx14 + 40 | 0; //@line 16998
  HEAP32[$166 >> 2] = $149; //@line 16999
  $167 = $ReallocAsyncCtx14 + 44 | 0; //@line 17000
  HEAP32[$167 >> 2] = $26; //@line 17001
  sp = STACKTOP; //@line 17002
  return;
 } else {
  $138 = HEAP32[$135 + 4 >> 2] | 0; //@line 17006
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 17007
  FUNCTION_TABLE_vii[$138 & 7]($2, $66); //@line 17008
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 17011
   $139 = $ReallocAsyncCtx6 + 4 | 0; //@line 17012
   HEAP32[$139 >> 2] = $2; //@line 17013
   $140 = $ReallocAsyncCtx6 + 8 | 0; //@line 17014
   HEAP32[$140 >> 2] = $4; //@line 17015
   $141 = $ReallocAsyncCtx6 + 12 | 0; //@line 17016
   HEAP32[$141 >> 2] = $134; //@line 17017
   $142 = $ReallocAsyncCtx6 + 16 | 0; //@line 17018
   HEAP32[$142 >> 2] = $8; //@line 17019
   $143 = $ReallocAsyncCtx6 + 20 | 0; //@line 17020
   HEAP32[$143 >> 2] = $8; //@line 17021
   $144 = $ReallocAsyncCtx6 + 24 | 0; //@line 17022
   HEAP32[$144 >> 2] = $66; //@line 17023
   $145 = $ReallocAsyncCtx6 + 28 | 0; //@line 17024
   HEAP32[$145 >> 2] = $26; //@line 17025
   $146 = $ReallocAsyncCtx6 + 32 | 0; //@line 17026
   HEAP32[$146 >> 2] = $10; //@line 17027
   $147 = $ReallocAsyncCtx6 + 36 | 0; //@line 17028
   HEAP32[$147 >> 2] = $18; //@line 17029
   $148 = $ReallocAsyncCtx6 + 40 | 0; //@line 17030
   HEAP32[$148 >> 2] = $134; //@line 17031
   sp = STACKTOP; //@line 17032
   return;
  }
  ___async_unwind = 0; //@line 17035
  HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 17036
  $139 = $ReallocAsyncCtx6 + 4 | 0; //@line 17037
  HEAP32[$139 >> 2] = $2; //@line 17038
  $140 = $ReallocAsyncCtx6 + 8 | 0; //@line 17039
  HEAP32[$140 >> 2] = $4; //@line 17040
  $141 = $ReallocAsyncCtx6 + 12 | 0; //@line 17041
  HEAP32[$141 >> 2] = $134; //@line 17042
  $142 = $ReallocAsyncCtx6 + 16 | 0; //@line 17043
  HEAP32[$142 >> 2] = $8; //@line 17044
  $143 = $ReallocAsyncCtx6 + 20 | 0; //@line 17045
  HEAP32[$143 >> 2] = $8; //@line 17046
  $144 = $ReallocAsyncCtx6 + 24 | 0; //@line 17047
  HEAP32[$144 >> 2] = $66; //@line 17048
  $145 = $ReallocAsyncCtx6 + 28 | 0; //@line 17049
  HEAP32[$145 >> 2] = $26; //@line 17050
  $146 = $ReallocAsyncCtx6 + 32 | 0; //@line 17051
  HEAP32[$146 >> 2] = $10; //@line 17052
  $147 = $ReallocAsyncCtx6 + 36 | 0; //@line 17053
  HEAP32[$147 >> 2] = $18; //@line 17054
  $148 = $ReallocAsyncCtx6 + 40 | 0; //@line 17055
  HEAP32[$148 >> 2] = $134; //@line 17056
  sp = STACKTOP; //@line 17057
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_66($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1107 = 0, $$byval_copy = 0, $$byval_copy24 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $97 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20526
 STACKTOP = STACKTOP + 48 | 0; //@line 20527
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 20527
 $$byval_copy24 = sp + 20 | 0; //@line 20528
 $$byval_copy = sp; //@line 20529
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20531
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20533
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20535
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20537
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20539
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20541
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 20543
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20545
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20547
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20549
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20551
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20553
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20555
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20557
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20559
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20561
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20563
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20565
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20567
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20569
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 20571
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20573
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 20575
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 20577
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 20579
 $52 = HEAP8[$0 + 104 >> 0] | 0; //@line 20581
 $54 = HEAP8[$0 + 105 >> 0] | 0; //@line 20583
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $150 = $52 + 1 << 24 >> 24; //@line 20588
  $151 = $54 + -1 << 24 >> 24; //@line 20589
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 20590
  $152 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($10, 0, $6, 512) | 0; //@line 20591
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 20594
   $153 = $ReallocAsyncCtx3 + 4 | 0; //@line 20595
   HEAP32[$153 >> 2] = $2; //@line 20596
   $154 = $ReallocAsyncCtx3 + 8 | 0; //@line 20597
   HEAP32[$154 >> 2] = $4; //@line 20598
   $155 = $ReallocAsyncCtx3 + 12 | 0; //@line 20599
   HEAP32[$155 >> 2] = $6; //@line 20600
   $156 = $ReallocAsyncCtx3 + 16 | 0; //@line 20601
   HEAP32[$156 >> 2] = $8; //@line 20602
   $157 = $ReallocAsyncCtx3 + 20 | 0; //@line 20603
   HEAP32[$157 >> 2] = $10; //@line 20604
   $158 = $ReallocAsyncCtx3 + 24 | 0; //@line 20605
   HEAP32[$158 >> 2] = $12; //@line 20606
   $159 = $ReallocAsyncCtx3 + 28 | 0; //@line 20607
   HEAP8[$159 >> 0] = $14; //@line 20608
   $160 = $ReallocAsyncCtx3 + 29 | 0; //@line 20609
   HEAP8[$160 >> 0] = $151; //@line 20610
   $161 = $ReallocAsyncCtx3 + 30 | 0; //@line 20611
   HEAP8[$161 >> 0] = $150; //@line 20612
   $162 = $ReallocAsyncCtx3 + 32 | 0; //@line 20613
   HEAP32[$162 >> 2] = $16; //@line 20614
   $163 = $ReallocAsyncCtx3 + 36 | 0; //@line 20615
   HEAP32[$163 >> 2] = $18; //@line 20616
   $164 = $ReallocAsyncCtx3 + 40 | 0; //@line 20617
   HEAP32[$164 >> 2] = $20; //@line 20618
   $165 = $ReallocAsyncCtx3 + 44 | 0; //@line 20619
   HEAP32[$165 >> 2] = $22; //@line 20620
   $166 = $ReallocAsyncCtx3 + 48 | 0; //@line 20621
   HEAP32[$166 >> 2] = $24; //@line 20622
   $167 = $ReallocAsyncCtx3 + 52 | 0; //@line 20623
   HEAP32[$167 >> 2] = $26; //@line 20624
   $168 = $ReallocAsyncCtx3 + 56 | 0; //@line 20625
   HEAP32[$168 >> 2] = $28; //@line 20626
   $169 = $ReallocAsyncCtx3 + 60 | 0; //@line 20627
   HEAP32[$169 >> 2] = $30; //@line 20628
   $170 = $ReallocAsyncCtx3 + 64 | 0; //@line 20629
   HEAP32[$170 >> 2] = $32; //@line 20630
   $171 = $ReallocAsyncCtx3 + 68 | 0; //@line 20631
   HEAP32[$171 >> 2] = $34; //@line 20632
   $172 = $ReallocAsyncCtx3 + 72 | 0; //@line 20633
   HEAP32[$172 >> 2] = $36; //@line 20634
   $173 = $ReallocAsyncCtx3 + 76 | 0; //@line 20635
   HEAP32[$173 >> 2] = $38; //@line 20636
   $174 = $ReallocAsyncCtx3 + 80 | 0; //@line 20637
   HEAP32[$174 >> 2] = $40; //@line 20638
   $175 = $ReallocAsyncCtx3 + 84 | 0; //@line 20639
   HEAP8[$175 >> 0] = $42; //@line 20640
   $176 = $ReallocAsyncCtx3 + 88 | 0; //@line 20641
   HEAP32[$176 >> 2] = $44; //@line 20642
   $177 = $ReallocAsyncCtx3 + 92 | 0; //@line 20643
   HEAP32[$177 >> 2] = $46; //@line 20644
   $178 = $ReallocAsyncCtx3 + 96 | 0; //@line 20645
   HEAP32[$178 >> 2] = $48; //@line 20646
   $179 = $ReallocAsyncCtx3 + 100 | 0; //@line 20647
   HEAP32[$179 >> 2] = $50; //@line 20648
   sp = STACKTOP; //@line 20649
   STACKTOP = sp; //@line 20650
   return;
  }
  HEAP32[___async_retval >> 2] = $152; //@line 20653
  ___async_unwind = 0; //@line 20654
  HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 20655
  $153 = $ReallocAsyncCtx3 + 4 | 0; //@line 20656
  HEAP32[$153 >> 2] = $2; //@line 20657
  $154 = $ReallocAsyncCtx3 + 8 | 0; //@line 20658
  HEAP32[$154 >> 2] = $4; //@line 20659
  $155 = $ReallocAsyncCtx3 + 12 | 0; //@line 20660
  HEAP32[$155 >> 2] = $6; //@line 20661
  $156 = $ReallocAsyncCtx3 + 16 | 0; //@line 20662
  HEAP32[$156 >> 2] = $8; //@line 20663
  $157 = $ReallocAsyncCtx3 + 20 | 0; //@line 20664
  HEAP32[$157 >> 2] = $10; //@line 20665
  $158 = $ReallocAsyncCtx3 + 24 | 0; //@line 20666
  HEAP32[$158 >> 2] = $12; //@line 20667
  $159 = $ReallocAsyncCtx3 + 28 | 0; //@line 20668
  HEAP8[$159 >> 0] = $14; //@line 20669
  $160 = $ReallocAsyncCtx3 + 29 | 0; //@line 20670
  HEAP8[$160 >> 0] = $151; //@line 20671
  $161 = $ReallocAsyncCtx3 + 30 | 0; //@line 20672
  HEAP8[$161 >> 0] = $150; //@line 20673
  $162 = $ReallocAsyncCtx3 + 32 | 0; //@line 20674
  HEAP32[$162 >> 2] = $16; //@line 20675
  $163 = $ReallocAsyncCtx3 + 36 | 0; //@line 20676
  HEAP32[$163 >> 2] = $18; //@line 20677
  $164 = $ReallocAsyncCtx3 + 40 | 0; //@line 20678
  HEAP32[$164 >> 2] = $20; //@line 20679
  $165 = $ReallocAsyncCtx3 + 44 | 0; //@line 20680
  HEAP32[$165 >> 2] = $22; //@line 20681
  $166 = $ReallocAsyncCtx3 + 48 | 0; //@line 20682
  HEAP32[$166 >> 2] = $24; //@line 20683
  $167 = $ReallocAsyncCtx3 + 52 | 0; //@line 20684
  HEAP32[$167 >> 2] = $26; //@line 20685
  $168 = $ReallocAsyncCtx3 + 56 | 0; //@line 20686
  HEAP32[$168 >> 2] = $28; //@line 20687
  $169 = $ReallocAsyncCtx3 + 60 | 0; //@line 20688
  HEAP32[$169 >> 2] = $30; //@line 20689
  $170 = $ReallocAsyncCtx3 + 64 | 0; //@line 20690
  HEAP32[$170 >> 2] = $32; //@line 20691
  $171 = $ReallocAsyncCtx3 + 68 | 0; //@line 20692
  HEAP32[$171 >> 2] = $34; //@line 20693
  $172 = $ReallocAsyncCtx3 + 72 | 0; //@line 20694
  HEAP32[$172 >> 2] = $36; //@line 20695
  $173 = $ReallocAsyncCtx3 + 76 | 0; //@line 20696
  HEAP32[$173 >> 2] = $38; //@line 20697
  $174 = $ReallocAsyncCtx3 + 80 | 0; //@line 20698
  HEAP32[$174 >> 2] = $40; //@line 20699
  $175 = $ReallocAsyncCtx3 + 84 | 0; //@line 20700
  HEAP8[$175 >> 0] = $42; //@line 20701
  $176 = $ReallocAsyncCtx3 + 88 | 0; //@line 20702
  HEAP32[$176 >> 2] = $44; //@line 20703
  $177 = $ReallocAsyncCtx3 + 92 | 0; //@line 20704
  HEAP32[$177 >> 2] = $46; //@line 20705
  $178 = $ReallocAsyncCtx3 + 96 | 0; //@line 20706
  HEAP32[$178 >> 2] = $48; //@line 20707
  $179 = $ReallocAsyncCtx3 + 100 | 0; //@line 20708
  HEAP32[$179 >> 2] = $50; //@line 20709
  sp = STACKTOP; //@line 20710
  STACKTOP = sp; //@line 20711
  return;
 }
 $58 = $14 + 1 << 24 >> 24; //@line 20713
 HEAP32[$16 >> 2] = 0; //@line 20714
 HEAP32[$16 + 4 >> 2] = 0; //@line 20714
 HEAP32[$16 + 8 >> 2] = 0; //@line 20714
 HEAP32[$16 + 12 >> 2] = 0; //@line 20714
 HEAP32[$16 + 16 >> 2] = 0; //@line 20714
 HEAP32[$$byval_copy >> 2] = HEAP32[$20 >> 2]; //@line 20715
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$20 + 4 >> 2]; //@line 20715
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$20 + 8 >> 2]; //@line 20715
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$20 + 12 >> 2]; //@line 20715
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$20 + 16 >> 2]; //@line 20715
 __ZN13SocketAddressC2E10nsapi_addrt($18, $$byval_copy, 0); //@line 20716
 do {
  if ($54 << 24 >> 24) {
   if (($58 & 255) > 9) {
    if (!($52 << 24 >> 24)) {
     break;
    } else {
     $$1107 = 0; //@line 20726
     $62 = 0; //@line 20726
    }
   } else {
    if (($58 & 255) < 5) {
     $$1107 = $52; //@line 20731
     $62 = $58; //@line 20731
    } else {
     $97 = 608 + ((($58 & 255) + -5 | 0) * 20 | 0) | 0; //@line 20735
     HEAP32[$$byval_copy24 >> 2] = HEAP32[$97 >> 2]; //@line 20736
     HEAP32[$$byval_copy24 + 4 >> 2] = HEAP32[$97 + 4 >> 2]; //@line 20736
     HEAP32[$$byval_copy24 + 8 >> 2] = HEAP32[$97 + 8 >> 2]; //@line 20736
     HEAP32[$$byval_copy24 + 12 >> 2] = HEAP32[$97 + 12 >> 2]; //@line 20736
     HEAP32[$$byval_copy24 + 16 >> 2] = HEAP32[$97 + 16 >> 2]; //@line 20736
     __ZN13SocketAddress8set_addrE10nsapi_addr($18, $$byval_copy24); //@line 20737
     __ZN13SocketAddress8set_portEt($18, 53); //@line 20738
     HEAP8[$6 >> 0] = 0; //@line 20739
     HEAP8[$26 >> 0] = 1; //@line 20740
     HEAP8[$28 >> 0] = 1; //@line 20741
     HEAP8[$30 >> 0] = 0; //@line 20742
     HEAP8[$32 >> 0] = 0; //@line 20743
     HEAP8[$34 >> 0] = 1; //@line 20744
     HEAP8[$36 >> 0] = 0; //@line 20745
     HEAP8[$36 + 1 >> 0] = 0; //@line 20745
     HEAP8[$36 + 2 >> 0] = 0; //@line 20745
     HEAP8[$36 + 3 >> 0] = 0; //@line 20745
     HEAP8[$36 + 4 >> 0] = 0; //@line 20745
     HEAP8[$36 + 5 >> 0] = 0; //@line 20745
     if (!(HEAP8[$38 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $40; //@line 20749
     } else {
      $$048$i = $38; //@line 20751
      $$sroa$0$0$in47$i = $40; //@line 20751
      while (1) {
       $100 = _strcspn($$048$i, 3975) | 0; //@line 20753
       $102 = $$sroa$0$0$in47$i + 1 | 0; //@line 20755
       HEAP8[$$sroa$0$0$in47$i >> 0] = $100; //@line 20756
       $103 = $100 & 255; //@line 20757
       _memcpy($102 | 0, $$048$i | 0, $103 | 0) | 0; //@line 20758
       $104 = $102 + $103 | 0; //@line 20759
       $$048$i = $$048$i + ($100 + ((HEAP8[$$048$i + $100 >> 0] | 0) == 46 & 1)) | 0; //@line 20765
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $104; //@line 20769
        break;
       } else {
        $$sroa$0$0$in47$i = $104; //@line 20772
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 20777
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 20779
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $42; //@line 20781
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 20783
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 20786
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 20788
     $120 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($10, $18, $6, $$sroa$0$0$in$lcssa$i + 5 - $44 | 0) | 0; //@line 20789
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 20792
      $121 = $ReallocAsyncCtx4 + 4 | 0; //@line 20793
      HEAP32[$121 >> 2] = $2; //@line 20794
      $122 = $ReallocAsyncCtx4 + 8 | 0; //@line 20795
      HEAP32[$122 >> 2] = $4; //@line 20796
      $123 = $ReallocAsyncCtx4 + 12 | 0; //@line 20797
      HEAP32[$123 >> 2] = $6; //@line 20798
      $124 = $ReallocAsyncCtx4 + 16 | 0; //@line 20799
      HEAP32[$124 >> 2] = $8; //@line 20800
      $125 = $ReallocAsyncCtx4 + 20 | 0; //@line 20801
      HEAP32[$125 >> 2] = $10; //@line 20802
      $126 = $ReallocAsyncCtx4 + 24 | 0; //@line 20803
      HEAP32[$126 >> 2] = $12; //@line 20804
      $127 = $ReallocAsyncCtx4 + 28 | 0; //@line 20805
      HEAP8[$127 >> 0] = $58; //@line 20806
      $128 = $ReallocAsyncCtx4 + 32 | 0; //@line 20807
      HEAP32[$128 >> 2] = $16; //@line 20808
      $129 = $ReallocAsyncCtx4 + 36 | 0; //@line 20809
      HEAP32[$129 >> 2] = $18; //@line 20810
      $130 = $ReallocAsyncCtx4 + 40 | 0; //@line 20811
      HEAP32[$130 >> 2] = $20; //@line 20812
      $131 = $ReallocAsyncCtx4 + 44 | 0; //@line 20813
      HEAP32[$131 >> 2] = $22; //@line 20814
      $132 = $ReallocAsyncCtx4 + 48 | 0; //@line 20815
      HEAP32[$132 >> 2] = $24; //@line 20816
      $133 = $ReallocAsyncCtx4 + 52 | 0; //@line 20817
      HEAP32[$133 >> 2] = $26; //@line 20818
      $134 = $ReallocAsyncCtx4 + 56 | 0; //@line 20819
      HEAP32[$134 >> 2] = $28; //@line 20820
      $135 = $ReallocAsyncCtx4 + 60 | 0; //@line 20821
      HEAP32[$135 >> 2] = $30; //@line 20822
      $136 = $ReallocAsyncCtx4 + 64 | 0; //@line 20823
      HEAP32[$136 >> 2] = $32; //@line 20824
      $137 = $ReallocAsyncCtx4 + 68 | 0; //@line 20825
      HEAP32[$137 >> 2] = $34; //@line 20826
      $138 = $ReallocAsyncCtx4 + 72 | 0; //@line 20827
      HEAP32[$138 >> 2] = $36; //@line 20828
      $139 = $ReallocAsyncCtx4 + 76 | 0; //@line 20829
      HEAP32[$139 >> 2] = $38; //@line 20830
      $140 = $ReallocAsyncCtx4 + 80 | 0; //@line 20831
      HEAP32[$140 >> 2] = $40; //@line 20832
      $141 = $ReallocAsyncCtx4 + 84 | 0; //@line 20833
      HEAP8[$141 >> 0] = $42; //@line 20834
      $142 = $ReallocAsyncCtx4 + 88 | 0; //@line 20835
      HEAP32[$142 >> 2] = $44; //@line 20836
      $143 = $ReallocAsyncCtx4 + 92 | 0; //@line 20837
      HEAP32[$143 >> 2] = $46; //@line 20838
      $144 = $ReallocAsyncCtx4 + 96 | 0; //@line 20839
      HEAP32[$144 >> 2] = $48; //@line 20840
      $145 = $ReallocAsyncCtx4 + 100 | 0; //@line 20841
      HEAP32[$145 >> 2] = $50; //@line 20842
      $146 = $ReallocAsyncCtx4 + 104 | 0; //@line 20843
      HEAP8[$146 >> 0] = $52; //@line 20844
      $147 = $ReallocAsyncCtx4 + 105 | 0; //@line 20845
      HEAP8[$147 >> 0] = $54; //@line 20846
      sp = STACKTOP; //@line 20847
      STACKTOP = sp; //@line 20848
      return;
     }
     HEAP32[___async_retval >> 2] = $120; //@line 20851
     ___async_unwind = 0; //@line 20852
     HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 20853
     $121 = $ReallocAsyncCtx4 + 4 | 0; //@line 20854
     HEAP32[$121 >> 2] = $2; //@line 20855
     $122 = $ReallocAsyncCtx4 + 8 | 0; //@line 20856
     HEAP32[$122 >> 2] = $4; //@line 20857
     $123 = $ReallocAsyncCtx4 + 12 | 0; //@line 20858
     HEAP32[$123 >> 2] = $6; //@line 20859
     $124 = $ReallocAsyncCtx4 + 16 | 0; //@line 20860
     HEAP32[$124 >> 2] = $8; //@line 20861
     $125 = $ReallocAsyncCtx4 + 20 | 0; //@line 20862
     HEAP32[$125 >> 2] = $10; //@line 20863
     $126 = $ReallocAsyncCtx4 + 24 | 0; //@line 20864
     HEAP32[$126 >> 2] = $12; //@line 20865
     $127 = $ReallocAsyncCtx4 + 28 | 0; //@line 20866
     HEAP8[$127 >> 0] = $58; //@line 20867
     $128 = $ReallocAsyncCtx4 + 32 | 0; //@line 20868
     HEAP32[$128 >> 2] = $16; //@line 20869
     $129 = $ReallocAsyncCtx4 + 36 | 0; //@line 20870
     HEAP32[$129 >> 2] = $18; //@line 20871
     $130 = $ReallocAsyncCtx4 + 40 | 0; //@line 20872
     HEAP32[$130 >> 2] = $20; //@line 20873
     $131 = $ReallocAsyncCtx4 + 44 | 0; //@line 20874
     HEAP32[$131 >> 2] = $22; //@line 20875
     $132 = $ReallocAsyncCtx4 + 48 | 0; //@line 20876
     HEAP32[$132 >> 2] = $24; //@line 20877
     $133 = $ReallocAsyncCtx4 + 52 | 0; //@line 20878
     HEAP32[$133 >> 2] = $26; //@line 20879
     $134 = $ReallocAsyncCtx4 + 56 | 0; //@line 20880
     HEAP32[$134 >> 2] = $28; //@line 20881
     $135 = $ReallocAsyncCtx4 + 60 | 0; //@line 20882
     HEAP32[$135 >> 2] = $30; //@line 20883
     $136 = $ReallocAsyncCtx4 + 64 | 0; //@line 20884
     HEAP32[$136 >> 2] = $32; //@line 20885
     $137 = $ReallocAsyncCtx4 + 68 | 0; //@line 20886
     HEAP32[$137 >> 2] = $34; //@line 20887
     $138 = $ReallocAsyncCtx4 + 72 | 0; //@line 20888
     HEAP32[$138 >> 2] = $36; //@line 20889
     $139 = $ReallocAsyncCtx4 + 76 | 0; //@line 20890
     HEAP32[$139 >> 2] = $38; //@line 20891
     $140 = $ReallocAsyncCtx4 + 80 | 0; //@line 20892
     HEAP32[$140 >> 2] = $40; //@line 20893
     $141 = $ReallocAsyncCtx4 + 84 | 0; //@line 20894
     HEAP8[$141 >> 0] = $42; //@line 20895
     $142 = $ReallocAsyncCtx4 + 88 | 0; //@line 20896
     HEAP32[$142 >> 2] = $44; //@line 20897
     $143 = $ReallocAsyncCtx4 + 92 | 0; //@line 20898
     HEAP32[$143 >> 2] = $46; //@line 20899
     $144 = $ReallocAsyncCtx4 + 96 | 0; //@line 20900
     HEAP32[$144 >> 2] = $48; //@line 20901
     $145 = $ReallocAsyncCtx4 + 100 | 0; //@line 20902
     HEAP32[$145 >> 2] = $50; //@line 20903
     $146 = $ReallocAsyncCtx4 + 104 | 0; //@line 20904
     HEAP8[$146 >> 0] = $52; //@line 20905
     $147 = $ReallocAsyncCtx4 + 105 | 0; //@line 20906
     HEAP8[$147 >> 0] = $54; //@line 20907
     sp = STACKTOP; //@line 20908
     STACKTOP = sp; //@line 20909
     return;
    }
   }
   $65 = HEAP32[(HEAP32[$22 >> 2] | 0) + 28 >> 2] | 0; //@line 20915
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 20916
   $66 = FUNCTION_TABLE_iiii[$65 & 31]($24, $62 & 255, $18) | 0; //@line 20917
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 20920
    $67 = $ReallocAsyncCtx + 4 | 0; //@line 20921
    HEAP32[$67 >> 2] = $6; //@line 20922
    $68 = $ReallocAsyncCtx + 8 | 0; //@line 20923
    HEAP32[$68 >> 2] = $8; //@line 20924
    $69 = $ReallocAsyncCtx + 12 | 0; //@line 20925
    HEAP32[$69 >> 2] = $12; //@line 20926
    $70 = $ReallocAsyncCtx + 16 | 0; //@line 20927
    HEAP32[$70 >> 2] = $10; //@line 20928
    $71 = $ReallocAsyncCtx + 20 | 0; //@line 20929
    HEAP32[$71 >> 2] = $4; //@line 20930
    $72 = $ReallocAsyncCtx + 24 | 0; //@line 20931
    HEAP32[$72 >> 2] = $16; //@line 20932
    $73 = $ReallocAsyncCtx + 28 | 0; //@line 20933
    HEAP32[$73 >> 2] = $18; //@line 20934
    $74 = $ReallocAsyncCtx + 32 | 0; //@line 20935
    HEAP32[$74 >> 2] = $20; //@line 20936
    $75 = $ReallocAsyncCtx + 36 | 0; //@line 20937
    HEAP32[$75 >> 2] = $22; //@line 20938
    $76 = $ReallocAsyncCtx + 40 | 0; //@line 20939
    HEAP32[$76 >> 2] = $24; //@line 20940
    $77 = $ReallocAsyncCtx + 44 | 0; //@line 20941
    HEAP8[$77 >> 0] = $$1107; //@line 20942
    $78 = $ReallocAsyncCtx + 45 | 0; //@line 20943
    HEAP8[$78 >> 0] = $62; //@line 20944
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 20945
    HEAP32[$79 >> 2] = $26; //@line 20946
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 20947
    HEAP32[$80 >> 2] = $28; //@line 20948
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 20949
    HEAP32[$81 >> 2] = $30; //@line 20950
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 20951
    HEAP32[$82 >> 2] = $32; //@line 20952
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 20953
    HEAP32[$83 >> 2] = $34; //@line 20954
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 20955
    HEAP32[$84 >> 2] = $36; //@line 20956
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 20957
    HEAP32[$85 >> 2] = $38; //@line 20958
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 20959
    HEAP32[$86 >> 2] = $40; //@line 20960
    $87 = $ReallocAsyncCtx + 80 | 0; //@line 20961
    HEAP8[$87 >> 0] = $42; //@line 20962
    $88 = $ReallocAsyncCtx + 84 | 0; //@line 20963
    HEAP32[$88 >> 2] = $44; //@line 20964
    $89 = $ReallocAsyncCtx + 88 | 0; //@line 20965
    HEAP8[$89 >> 0] = $54; //@line 20966
    $90 = $ReallocAsyncCtx + 92 | 0; //@line 20967
    HEAP32[$90 >> 2] = $2; //@line 20968
    $91 = $ReallocAsyncCtx + 96 | 0; //@line 20969
    HEAP32[$91 >> 2] = $46; //@line 20970
    $92 = $ReallocAsyncCtx + 100 | 0; //@line 20971
    HEAP32[$92 >> 2] = $48; //@line 20972
    $93 = $ReallocAsyncCtx + 104 | 0; //@line 20973
    HEAP32[$93 >> 2] = $50; //@line 20974
    sp = STACKTOP; //@line 20975
    STACKTOP = sp; //@line 20976
    return;
   }
   HEAP32[___async_retval >> 2] = $66; //@line 20979
   ___async_unwind = 0; //@line 20980
   HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 20981
   $67 = $ReallocAsyncCtx + 4 | 0; //@line 20982
   HEAP32[$67 >> 2] = $6; //@line 20983
   $68 = $ReallocAsyncCtx + 8 | 0; //@line 20984
   HEAP32[$68 >> 2] = $8; //@line 20985
   $69 = $ReallocAsyncCtx + 12 | 0; //@line 20986
   HEAP32[$69 >> 2] = $12; //@line 20987
   $70 = $ReallocAsyncCtx + 16 | 0; //@line 20988
   HEAP32[$70 >> 2] = $10; //@line 20989
   $71 = $ReallocAsyncCtx + 20 | 0; //@line 20990
   HEAP32[$71 >> 2] = $4; //@line 20991
   $72 = $ReallocAsyncCtx + 24 | 0; //@line 20992
   HEAP32[$72 >> 2] = $16; //@line 20993
   $73 = $ReallocAsyncCtx + 28 | 0; //@line 20994
   HEAP32[$73 >> 2] = $18; //@line 20995
   $74 = $ReallocAsyncCtx + 32 | 0; //@line 20996
   HEAP32[$74 >> 2] = $20; //@line 20997
   $75 = $ReallocAsyncCtx + 36 | 0; //@line 20998
   HEAP32[$75 >> 2] = $22; //@line 20999
   $76 = $ReallocAsyncCtx + 40 | 0; //@line 21000
   HEAP32[$76 >> 2] = $24; //@line 21001
   $77 = $ReallocAsyncCtx + 44 | 0; //@line 21002
   HEAP8[$77 >> 0] = $$1107; //@line 21003
   $78 = $ReallocAsyncCtx + 45 | 0; //@line 21004
   HEAP8[$78 >> 0] = $62; //@line 21005
   $79 = $ReallocAsyncCtx + 48 | 0; //@line 21006
   HEAP32[$79 >> 2] = $26; //@line 21007
   $80 = $ReallocAsyncCtx + 52 | 0; //@line 21008
   HEAP32[$80 >> 2] = $28; //@line 21009
   $81 = $ReallocAsyncCtx + 56 | 0; //@line 21010
   HEAP32[$81 >> 2] = $30; //@line 21011
   $82 = $ReallocAsyncCtx + 60 | 0; //@line 21012
   HEAP32[$82 >> 2] = $32; //@line 21013
   $83 = $ReallocAsyncCtx + 64 | 0; //@line 21014
   HEAP32[$83 >> 2] = $34; //@line 21015
   $84 = $ReallocAsyncCtx + 68 | 0; //@line 21016
   HEAP32[$84 >> 2] = $36; //@line 21017
   $85 = $ReallocAsyncCtx + 72 | 0; //@line 21018
   HEAP32[$85 >> 2] = $38; //@line 21019
   $86 = $ReallocAsyncCtx + 76 | 0; //@line 21020
   HEAP32[$86 >> 2] = $40; //@line 21021
   $87 = $ReallocAsyncCtx + 80 | 0; //@line 21022
   HEAP8[$87 >> 0] = $42; //@line 21023
   $88 = $ReallocAsyncCtx + 84 | 0; //@line 21024
   HEAP32[$88 >> 2] = $44; //@line 21025
   $89 = $ReallocAsyncCtx + 88 | 0; //@line 21026
   HEAP8[$89 >> 0] = $54; //@line 21027
   $90 = $ReallocAsyncCtx + 92 | 0; //@line 21028
   HEAP32[$90 >> 2] = $2; //@line 21029
   $91 = $ReallocAsyncCtx + 96 | 0; //@line 21030
   HEAP32[$91 >> 2] = $46; //@line 21031
   $92 = $ReallocAsyncCtx + 100 | 0; //@line 21032
   HEAP32[$92 >> 2] = $48; //@line 21033
   $93 = $ReallocAsyncCtx + 104 | 0; //@line 21034
   HEAP32[$93 >> 2] = $50; //@line 21035
   sp = STACKTOP; //@line 21036
   STACKTOP = sp; //@line 21037
   return;
  }
 } while (0);
 _free($6); //@line 21040
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 21041
 $181 = __ZN6Socket5closeEv($8) | 0; //@line 21042
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 21045
  $182 = $ReallocAsyncCtx6 + 4 | 0; //@line 21046
  HEAP32[$182 >> 2] = -3009; //@line 21047
  $183 = $ReallocAsyncCtx6 + 8 | 0; //@line 21048
  HEAP32[$183 >> 2] = $10; //@line 21049
  $184 = $ReallocAsyncCtx6 + 12 | 0; //@line 21050
  HEAP32[$184 >> 2] = $12; //@line 21051
  sp = STACKTOP; //@line 21052
  STACKTOP = sp; //@line 21053
  return;
 }
 HEAP32[___async_retval >> 2] = $181; //@line 21056
 ___async_unwind = 0; //@line 21057
 HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 21058
 $182 = $ReallocAsyncCtx6 + 4 | 0; //@line 21059
 HEAP32[$182 >> 2] = -3009; //@line 21060
 $183 = $ReallocAsyncCtx6 + 8 | 0; //@line 21061
 HEAP32[$183 >> 2] = $10; //@line 21062
 $184 = $ReallocAsyncCtx6 + 12 | 0; //@line 21063
 HEAP32[$184 >> 2] = $12; //@line 21064
 sp = STACKTOP; //@line 21065
 STACKTOP = sp; //@line 21066
 return;
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 10112
 STACKTOP = STACKTOP + 64 | 0; //@line 10113
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 10113
 $5 = sp + 16 | 0; //@line 10114
 $6 = sp; //@line 10115
 $7 = sp + 24 | 0; //@line 10116
 $8 = sp + 8 | 0; //@line 10117
 $9 = sp + 20 | 0; //@line 10118
 HEAP32[$5 >> 2] = $1; //@line 10119
 $10 = ($0 | 0) != 0; //@line 10120
 $11 = $7 + 40 | 0; //@line 10121
 $12 = $11; //@line 10122
 $13 = $7 + 39 | 0; //@line 10123
 $14 = $8 + 4 | 0; //@line 10124
 $$0243 = 0; //@line 10125
 $$0247 = 0; //@line 10125
 $$0269 = 0; //@line 10125
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 10134
     $$1248 = -1; //@line 10135
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 10139
     break;
    }
   } else {
    $$1248 = $$0247; //@line 10143
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 10146
  $21 = HEAP8[$20 >> 0] | 0; //@line 10147
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 10150
   break;
  } else {
   $23 = $21; //@line 10153
   $25 = $20; //@line 10153
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 10158
     $27 = $25; //@line 10158
     label = 9; //@line 10159
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 10164
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 10171
   HEAP32[$5 >> 2] = $24; //@line 10172
   $23 = HEAP8[$24 >> 0] | 0; //@line 10174
   $25 = $24; //@line 10174
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 10179
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 10184
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 10187
     $27 = $27 + 2 | 0; //@line 10188
     HEAP32[$5 >> 2] = $27; //@line 10189
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 10196
      break;
     } else {
      $$0249303 = $30; //@line 10193
      label = 9; //@line 10194
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 10204
  if ($10) {
   _out_670($0, $20, $36); //@line 10206
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 10210
   $$0247 = $$1248; //@line 10210
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 10218
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 10219
  if ($43) {
   $$0253 = -1; //@line 10221
   $$1270 = $$0269; //@line 10221
   $$sink = 1; //@line 10221
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 10231
    $$1270 = 1; //@line 10231
    $$sink = 3; //@line 10231
   } else {
    $$0253 = -1; //@line 10233
    $$1270 = $$0269; //@line 10233
    $$sink = 1; //@line 10233
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 10236
  HEAP32[$5 >> 2] = $51; //@line 10237
  $52 = HEAP8[$51 >> 0] | 0; //@line 10238
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 10240
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 10247
   $$lcssa291 = $52; //@line 10247
   $$lcssa292 = $51; //@line 10247
  } else {
   $$0262309 = 0; //@line 10249
   $60 = $52; //@line 10249
   $65 = $51; //@line 10249
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 10254
    $64 = $65 + 1 | 0; //@line 10255
    HEAP32[$5 >> 2] = $64; //@line 10256
    $66 = HEAP8[$64 >> 0] | 0; //@line 10257
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 10259
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 10266
     $$lcssa291 = $66; //@line 10266
     $$lcssa292 = $64; //@line 10266
     break;
    } else {
     $$0262309 = $63; //@line 10269
     $60 = $66; //@line 10269
     $65 = $64; //@line 10269
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 10281
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 10283
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 10288
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10293
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10305
     $$2271 = 1; //@line 10305
     $storemerge274 = $79 + 3 | 0; //@line 10305
    } else {
     label = 23; //@line 10307
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 10311
    if ($$1270 | 0) {
     $$0 = -1; //@line 10314
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10329
     $106 = HEAP32[$105 >> 2] | 0; //@line 10330
     HEAP32[$2 >> 2] = $105 + 4; //@line 10332
     $363 = $106; //@line 10333
    } else {
     $363 = 0; //@line 10335
    }
    $$0259 = $363; //@line 10339
    $$2271 = 0; //@line 10339
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 10339
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 10341
   $109 = ($$0259 | 0) < 0; //@line 10342
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 10347
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 10347
   $$3272 = $$2271; //@line 10347
   $115 = $storemerge274; //@line 10347
  } else {
   $112 = _getint_671($5) | 0; //@line 10349
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 10352
    break;
   }
   $$1260 = $112; //@line 10356
   $$1263 = $$0262$lcssa; //@line 10356
   $$3272 = $$1270; //@line 10356
   $115 = HEAP32[$5 >> 2] | 0; //@line 10356
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 10367
     $156 = _getint_671($5) | 0; //@line 10368
     $$0254 = $156; //@line 10370
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 10370
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 10379
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 10384
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10389
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10396
      $144 = $125 + 4 | 0; //@line 10400
      HEAP32[$5 >> 2] = $144; //@line 10401
      $$0254 = $140; //@line 10402
      $$pre345 = $144; //@line 10402
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 10408
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10423
     $152 = HEAP32[$151 >> 2] | 0; //@line 10424
     HEAP32[$2 >> 2] = $151 + 4; //@line 10426
     $364 = $152; //@line 10427
    } else {
     $364 = 0; //@line 10429
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 10432
    HEAP32[$5 >> 2] = $154; //@line 10433
    $$0254 = $364; //@line 10434
    $$pre345 = $154; //@line 10434
   } else {
    $$0254 = -1; //@line 10436
    $$pre345 = $115; //@line 10436
   }
  } while (0);
  $$0252 = 0; //@line 10439
  $158 = $$pre345; //@line 10439
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 10446
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 10449
   HEAP32[$5 >> 2] = $158; //@line 10450
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (3443 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 10455
   $168 = $167 & 255; //@line 10456
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 10460
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 10467
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 10471
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 10475
     break L1;
    } else {
     label = 50; //@line 10478
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 10483
     $176 = $3 + ($$0253 << 3) | 0; //@line 10485
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 10490
     $182 = $6; //@line 10491
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 10493
     HEAP32[$182 + 4 >> 2] = $181; //@line 10496
     label = 50; //@line 10497
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 10501
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 10504
    $187 = HEAP32[$5 >> 2] | 0; //@line 10506
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 10510
   if ($10) {
    $187 = $158; //@line 10512
   } else {
    $$0243 = 0; //@line 10514
    $$0247 = $$1248; //@line 10514
    $$0269 = $$3272; //@line 10514
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 10520
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 10526
  $196 = $$1263 & -65537; //@line 10529
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 10530
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10538
       $$0243 = 0; //@line 10539
       $$0247 = $$1248; //@line 10539
       $$0269 = $$3272; //@line 10539
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10545
       $$0243 = 0; //@line 10546
       $$0247 = $$1248; //@line 10546
       $$0269 = $$3272; //@line 10546
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 10554
       HEAP32[$208 >> 2] = $$1248; //@line 10556
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10559
       $$0243 = 0; //@line 10560
       $$0247 = $$1248; //@line 10560
       $$0269 = $$3272; //@line 10560
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 10567
       $$0243 = 0; //@line 10568
       $$0247 = $$1248; //@line 10568
       $$0269 = $$3272; //@line 10568
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 10575
       $$0243 = 0; //@line 10576
       $$0247 = $$1248; //@line 10576
       $$0269 = $$3272; //@line 10576
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10582
       $$0243 = 0; //@line 10583
       $$0247 = $$1248; //@line 10583
       $$0269 = $$3272; //@line 10583
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 10591
       HEAP32[$220 >> 2] = $$1248; //@line 10593
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10596
       $$0243 = 0; //@line 10597
       $$0247 = $$1248; //@line 10597
       $$0269 = $$3272; //@line 10597
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 10602
       $$0247 = $$1248; //@line 10602
       $$0269 = $$3272; //@line 10602
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 10612
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 10612
     $$3265 = $$1263$ | 8; //@line 10612
     label = 62; //@line 10613
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 10617
     $$1255 = $$0254; //@line 10617
     $$3265 = $$1263$; //@line 10617
     label = 62; //@line 10618
     break;
    }
   case 111:
    {
     $242 = $6; //@line 10622
     $244 = HEAP32[$242 >> 2] | 0; //@line 10624
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 10627
     $248 = _fmt_o($244, $247, $11) | 0; //@line 10628
     $252 = $12 - $248 | 0; //@line 10632
     $$0228 = $248; //@line 10637
     $$1233 = 0; //@line 10637
     $$1238 = 3907; //@line 10637
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 10637
     $$4266 = $$1263$; //@line 10637
     $281 = $244; //@line 10637
     $283 = $247; //@line 10637
     label = 68; //@line 10638
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 10642
     $258 = HEAP32[$256 >> 2] | 0; //@line 10644
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 10647
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 10650
      $264 = tempRet0; //@line 10651
      $265 = $6; //@line 10652
      HEAP32[$265 >> 2] = $263; //@line 10654
      HEAP32[$265 + 4 >> 2] = $264; //@line 10657
      $$0232 = 1; //@line 10658
      $$0237 = 3907; //@line 10658
      $275 = $263; //@line 10658
      $276 = $264; //@line 10658
      label = 67; //@line 10659
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 10671
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 3907 : 3909 : 3908; //@line 10671
      $275 = $258; //@line 10671
      $276 = $261; //@line 10671
      label = 67; //@line 10672
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 10678
     $$0232 = 0; //@line 10684
     $$0237 = 3907; //@line 10684
     $275 = HEAP32[$197 >> 2] | 0; //@line 10684
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 10684
     label = 67; //@line 10685
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 10696
     $$2 = $13; //@line 10697
     $$2234 = 0; //@line 10697
     $$2239 = 3907; //@line 10697
     $$2251 = $11; //@line 10697
     $$5 = 1; //@line 10697
     $$6268 = $196; //@line 10697
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 10704
     label = 72; //@line 10705
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 10709
     $$1 = $302 | 0 ? $302 : 3917; //@line 10712
     label = 72; //@line 10713
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 10723
     HEAP32[$14 >> 2] = 0; //@line 10724
     HEAP32[$6 >> 2] = $8; //@line 10725
     $$4258354 = -1; //@line 10726
     $365 = $8; //@line 10726
     label = 76; //@line 10727
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 10731
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 10734
      $$0240$lcssa356 = 0; //@line 10735
      label = 85; //@line 10736
     } else {
      $$4258354 = $$0254; //@line 10738
      $365 = $$pre348; //@line 10738
      label = 76; //@line 10739
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 10746
     $$0247 = $$1248; //@line 10746
     $$0269 = $$3272; //@line 10746
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 10751
     $$2234 = 0; //@line 10751
     $$2239 = 3907; //@line 10751
     $$2251 = $11; //@line 10751
     $$5 = $$0254; //@line 10751
     $$6268 = $$1263$; //@line 10751
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 10757
    $227 = $6; //@line 10758
    $229 = HEAP32[$227 >> 2] | 0; //@line 10760
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 10763
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 10765
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 10771
    $$0228 = $234; //@line 10776
    $$1233 = $or$cond278 ? 0 : 2; //@line 10776
    $$1238 = $or$cond278 ? 3907 : 3907 + ($$1236 >> 4) | 0; //@line 10776
    $$2256 = $$1255; //@line 10776
    $$4266 = $$3265; //@line 10776
    $281 = $229; //@line 10776
    $283 = $232; //@line 10776
    label = 68; //@line 10777
   } else if ((label | 0) == 67) {
    label = 0; //@line 10780
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 10782
    $$1233 = $$0232; //@line 10782
    $$1238 = $$0237; //@line 10782
    $$2256 = $$0254; //@line 10782
    $$4266 = $$1263$; //@line 10782
    $281 = $275; //@line 10782
    $283 = $276; //@line 10782
    label = 68; //@line 10783
   } else if ((label | 0) == 72) {
    label = 0; //@line 10786
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 10787
    $306 = ($305 | 0) == 0; //@line 10788
    $$2 = $$1; //@line 10795
    $$2234 = 0; //@line 10795
    $$2239 = 3907; //@line 10795
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 10795
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 10795
    $$6268 = $196; //@line 10795
   } else if ((label | 0) == 76) {
    label = 0; //@line 10798
    $$0229316 = $365; //@line 10799
    $$0240315 = 0; //@line 10799
    $$1244314 = 0; //@line 10799
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 10801
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 10804
      $$2245 = $$1244314; //@line 10804
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 10807
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 10813
      $$2245 = $320; //@line 10813
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 10817
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 10820
      $$0240315 = $325; //@line 10820
      $$1244314 = $320; //@line 10820
     } else {
      $$0240$lcssa = $325; //@line 10822
      $$2245 = $320; //@line 10822
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 10828
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 10831
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 10834
     label = 85; //@line 10835
    } else {
     $$1230327 = $365; //@line 10837
     $$1241326 = 0; //@line 10837
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 10839
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10842
       label = 85; //@line 10843
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 10846
      $$1241326 = $331 + $$1241326 | 0; //@line 10847
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10850
       label = 85; //@line 10851
       break L97;
      }
      _out_670($0, $9, $331); //@line 10855
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10860
       label = 85; //@line 10861
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 10858
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 10869
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 10875
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 10877
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 10882
   $$2 = $or$cond ? $$0228 : $11; //@line 10887
   $$2234 = $$1233; //@line 10887
   $$2239 = $$1238; //@line 10887
   $$2251 = $11; //@line 10887
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 10887
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 10887
  } else if ((label | 0) == 85) {
   label = 0; //@line 10890
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 10892
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 10895
   $$0247 = $$1248; //@line 10895
   $$0269 = $$3272; //@line 10895
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 10900
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 10902
  $345 = $$$5 + $$2234 | 0; //@line 10903
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 10905
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 10906
  _out_670($0, $$2239, $$2234); //@line 10907
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 10909
  _pad_676($0, 48, $$$5, $343, 0); //@line 10910
  _out_670($0, $$2, $343); //@line 10911
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 10913
  $$0243 = $$2261; //@line 10914
  $$0247 = $$1248; //@line 10914
  $$0269 = $$3272; //@line 10914
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 10922
    } else {
     $$2242302 = 1; //@line 10924
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 10927
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 10930
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 10934
      $356 = $$2242302 + 1 | 0; //@line 10935
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 10938
      } else {
       $$2242$lcssa = $356; //@line 10940
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 10946
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 10952
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 10958
       } else {
        $$0 = 1; //@line 10960
        break;
       }
      }
     } else {
      $$0 = 1; //@line 10965
     }
    }
   } else {
    $$0 = $$1248; //@line 10969
   }
  }
 } while (0);
 STACKTOP = sp; //@line 10973
 return $$0 | 0; //@line 10973
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_65($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$048$i = 0, $$094 = 0, $$097 = 0, $$1107 = 0, $$4$ph = 0, $$4110 = 0, $$byval_copy = 0, $$byval_copy20 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $96 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20020
 STACKTOP = STACKTOP + 48 | 0; //@line 20021
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 20021
 $$byval_copy20 = sp + 20 | 0; //@line 20022
 $$byval_copy = sp; //@line 20023
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20025
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20027
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20029
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20031
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20033
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20035
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 20037
 $16 = HEAP8[$0 + 29 >> 0] | 0; //@line 20039
 $18 = HEAP8[$0 + 30 >> 0] | 0; //@line 20041
 $20 = HEAP32[$0 + 32 >> 2] | 0; //@line 20043
 $22 = HEAP32[$0 + 36 >> 2] | 0; //@line 20045
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 20047
 $26 = HEAP32[$0 + 44 >> 2] | 0; //@line 20049
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 20051
 $30 = HEAP32[$0 + 52 >> 2] | 0; //@line 20053
 $32 = HEAP32[$0 + 56 >> 2] | 0; //@line 20055
 $34 = HEAP32[$0 + 60 >> 2] | 0; //@line 20057
 $36 = HEAP32[$0 + 64 >> 2] | 0; //@line 20059
 $38 = HEAP32[$0 + 68 >> 2] | 0; //@line 20061
 $40 = HEAP32[$0 + 72 >> 2] | 0; //@line 20063
 $42 = HEAP32[$0 + 76 >> 2] | 0; //@line 20065
 $44 = HEAP32[$0 + 80 >> 2] | 0; //@line 20067
 $46 = HEAP8[$0 + 84 >> 0] | 0; //@line 20069
 $48 = HEAP32[$0 + 88 >> 2] | 0; //@line 20071
 $50 = HEAP32[$0 + 92 >> 2] | 0; //@line 20073
 $52 = HEAP32[$0 + 96 >> 2] | 0; //@line 20075
 $54 = HEAP32[$0 + 100 >> 2] | 0; //@line 20077
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20079
 do {
  if (($AsyncRetVal | 0) == -3001) {
   $$0 = $18; //@line 20084
   $$094 = $16; //@line 20084
   $$097 = $14 + 1 << 24 >> 24; //@line 20084
   label = 2; //@line 20085
  } else {
   if (($AsyncRetVal | 0) < 0) {
    $$4$ph = $AsyncRetVal; //@line 20089
    label = 23; //@line 20090
   } else {
    $150 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($6, 1, $50, $52, $54) | 0; //@line 20092
    if (($150 | 0) <= 0) {
     if (($150 | 0) < 0) {
      $$0 = $18; //@line 20097
      $$094 = $16; //@line 20097
      $$097 = $14; //@line 20097
      label = 2; //@line 20098
      break;
     } else {
      $$4110 = -3009; //@line 20101
      break;
     }
    }
    $152 = HEAP32[$50 >> 2] | 0; //@line 20105
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 20106
    __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($42, $52, $152); //@line 20107
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 146; //@line 20110
     $153 = $ReallocAsyncCtx2 + 4 | 0; //@line 20111
     HEAP32[$153 >> 2] = $150; //@line 20112
     $154 = $ReallocAsyncCtx2 + 8 | 0; //@line 20113
     HEAP32[$154 >> 2] = $2; //@line 20114
     $155 = $ReallocAsyncCtx2 + 12 | 0; //@line 20115
     HEAP32[$155 >> 2] = $4; //@line 20116
     $156 = $ReallocAsyncCtx2 + 16 | 0; //@line 20117
     HEAP32[$156 >> 2] = $6; //@line 20118
     $157 = $ReallocAsyncCtx2 + 20 | 0; //@line 20119
     HEAP32[$157 >> 2] = $8; //@line 20120
     $158 = $ReallocAsyncCtx2 + 24 | 0; //@line 20121
     HEAP32[$158 >> 2] = $10; //@line 20122
     $159 = $ReallocAsyncCtx2 + 28 | 0; //@line 20123
     HEAP32[$159 >> 2] = $12; //@line 20124
     sp = STACKTOP; //@line 20125
     STACKTOP = sp; //@line 20126
     return;
    }
    ___async_unwind = 0; //@line 20128
    HEAP32[$ReallocAsyncCtx2 >> 2] = 146; //@line 20129
    $153 = $ReallocAsyncCtx2 + 4 | 0; //@line 20130
    HEAP32[$153 >> 2] = $150; //@line 20131
    $154 = $ReallocAsyncCtx2 + 8 | 0; //@line 20132
    HEAP32[$154 >> 2] = $2; //@line 20133
    $155 = $ReallocAsyncCtx2 + 12 | 0; //@line 20134
    HEAP32[$155 >> 2] = $4; //@line 20135
    $156 = $ReallocAsyncCtx2 + 16 | 0; //@line 20136
    HEAP32[$156 >> 2] = $6; //@line 20137
    $157 = $ReallocAsyncCtx2 + 20 | 0; //@line 20138
    HEAP32[$157 >> 2] = $8; //@line 20139
    $158 = $ReallocAsyncCtx2 + 24 | 0; //@line 20140
    HEAP32[$158 >> 2] = $10; //@line 20141
    $159 = $ReallocAsyncCtx2 + 28 | 0; //@line 20142
    HEAP32[$159 >> 2] = $12; //@line 20143
    sp = STACKTOP; //@line 20144
    STACKTOP = sp; //@line 20145
    return;
   }
  }
 } while (0);
 do {
  if ((label | 0) == 2) {
   HEAP32[$20 >> 2] = 0; //@line 20151
   HEAP32[$20 + 4 >> 2] = 0; //@line 20151
   HEAP32[$20 + 8 >> 2] = 0; //@line 20151
   HEAP32[$20 + 12 >> 2] = 0; //@line 20151
   HEAP32[$20 + 16 >> 2] = 0; //@line 20151
   HEAP32[$$byval_copy >> 2] = HEAP32[$24 >> 2]; //@line 20152
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$24 + 4 >> 2]; //@line 20152
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$24 + 8 >> 2]; //@line 20152
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$24 + 12 >> 2]; //@line 20152
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$24 + 16 >> 2]; //@line 20152
   __ZN13SocketAddressC2E10nsapi_addrt($22, $$byval_copy, 0); //@line 20153
   if (!($$094 << 24 >> 24)) {
    $$4$ph = -3009; //@line 20156
    label = 23; //@line 20157
   } else {
    if (($$097 & 255) > 9) {
     if (!($$0 << 24 >> 24)) {
      $$4$ph = -3009; //@line 20163
      label = 23; //@line 20164
      break;
     } else {
      $$1107 = 0; //@line 20167
      $61 = 0; //@line 20167
     }
    } else {
     if (($$097 & 255) < 5) {
      $$1107 = $$0; //@line 20172
      $61 = $$097; //@line 20172
     } else {
      $96 = 608 + ((($$097 & 255) + -5 | 0) * 20 | 0) | 0; //@line 20176
      HEAP32[$$byval_copy20 >> 2] = HEAP32[$96 >> 2]; //@line 20177
      HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$96 + 4 >> 2]; //@line 20177
      HEAP32[$$byval_copy20 + 8 >> 2] = HEAP32[$96 + 8 >> 2]; //@line 20177
      HEAP32[$$byval_copy20 + 12 >> 2] = HEAP32[$96 + 12 >> 2]; //@line 20177
      HEAP32[$$byval_copy20 + 16 >> 2] = HEAP32[$96 + 16 >> 2]; //@line 20177
      __ZN13SocketAddress8set_addrE10nsapi_addr($22, $$byval_copy20); //@line 20178
      __ZN13SocketAddress8set_portEt($22, 53); //@line 20179
      HEAP8[$6 >> 0] = 0; //@line 20180
      HEAP8[$30 >> 0] = 1; //@line 20181
      HEAP8[$32 >> 0] = 1; //@line 20182
      HEAP8[$34 >> 0] = 0; //@line 20183
      HEAP8[$36 >> 0] = 0; //@line 20184
      HEAP8[$38 >> 0] = 1; //@line 20185
      HEAP8[$40 >> 0] = 0; //@line 20186
      HEAP8[$40 + 1 >> 0] = 0; //@line 20186
      HEAP8[$40 + 2 >> 0] = 0; //@line 20186
      HEAP8[$40 + 3 >> 0] = 0; //@line 20186
      HEAP8[$40 + 4 >> 0] = 0; //@line 20186
      HEAP8[$40 + 5 >> 0] = 0; //@line 20186
      if (!(HEAP8[$42 >> 0] | 0)) {
       $$sroa$0$0$in$lcssa$i = $44; //@line 20190
      } else {
       $$048$i = $42; //@line 20192
       $$sroa$0$0$in47$i = $44; //@line 20192
       while (1) {
        $99 = _strcspn($$048$i, 3975) | 0; //@line 20194
        $101 = $$sroa$0$0$in47$i + 1 | 0; //@line 20196
        HEAP8[$$sroa$0$0$in47$i >> 0] = $99; //@line 20197
        $102 = $99 & 255; //@line 20198
        _memcpy($101 | 0, $$048$i | 0, $102 | 0) | 0; //@line 20199
        $103 = $101 + $102 | 0; //@line 20200
        $$048$i = $$048$i + ($99 + ((HEAP8[$$048$i + $99 >> 0] | 0) == 46 & 1)) | 0; //@line 20206
        if (!(HEAP8[$$048$i >> 0] | 0)) {
         $$sroa$0$0$in$lcssa$i = $103; //@line 20210
         break;
        } else {
         $$sroa$0$0$in47$i = $103; //@line 20213
        }
       }
      }
      HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 20218
      HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 20220
      HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $46; //@line 20222
      HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 20224
      HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 20227
      $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 20229
      $119 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($10, $22, $6, $$sroa$0$0$in$lcssa$i + 5 - $48 | 0) | 0; //@line 20230
      if (___async) {
       HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 20233
       $120 = $ReallocAsyncCtx4 + 4 | 0; //@line 20234
       HEAP32[$120 >> 2] = $2; //@line 20235
       $121 = $ReallocAsyncCtx4 + 8 | 0; //@line 20236
       HEAP32[$121 >> 2] = $4; //@line 20237
       $122 = $ReallocAsyncCtx4 + 12 | 0; //@line 20238
       HEAP32[$122 >> 2] = $6; //@line 20239
       $123 = $ReallocAsyncCtx4 + 16 | 0; //@line 20240
       HEAP32[$123 >> 2] = $8; //@line 20241
       $124 = $ReallocAsyncCtx4 + 20 | 0; //@line 20242
       HEAP32[$124 >> 2] = $10; //@line 20243
       $125 = $ReallocAsyncCtx4 + 24 | 0; //@line 20244
       HEAP32[$125 >> 2] = $12; //@line 20245
       $126 = $ReallocAsyncCtx4 + 28 | 0; //@line 20246
       HEAP8[$126 >> 0] = $$097; //@line 20247
       $127 = $ReallocAsyncCtx4 + 32 | 0; //@line 20248
       HEAP32[$127 >> 2] = $20; //@line 20249
       $128 = $ReallocAsyncCtx4 + 36 | 0; //@line 20250
       HEAP32[$128 >> 2] = $22; //@line 20251
       $129 = $ReallocAsyncCtx4 + 40 | 0; //@line 20252
       HEAP32[$129 >> 2] = $24; //@line 20253
       $130 = $ReallocAsyncCtx4 + 44 | 0; //@line 20254
       HEAP32[$130 >> 2] = $26; //@line 20255
       $131 = $ReallocAsyncCtx4 + 48 | 0; //@line 20256
       HEAP32[$131 >> 2] = $28; //@line 20257
       $132 = $ReallocAsyncCtx4 + 52 | 0; //@line 20258
       HEAP32[$132 >> 2] = $30; //@line 20259
       $133 = $ReallocAsyncCtx4 + 56 | 0; //@line 20260
       HEAP32[$133 >> 2] = $32; //@line 20261
       $134 = $ReallocAsyncCtx4 + 60 | 0; //@line 20262
       HEAP32[$134 >> 2] = $34; //@line 20263
       $135 = $ReallocAsyncCtx4 + 64 | 0; //@line 20264
       HEAP32[$135 >> 2] = $36; //@line 20265
       $136 = $ReallocAsyncCtx4 + 68 | 0; //@line 20266
       HEAP32[$136 >> 2] = $38; //@line 20267
       $137 = $ReallocAsyncCtx4 + 72 | 0; //@line 20268
       HEAP32[$137 >> 2] = $40; //@line 20269
       $138 = $ReallocAsyncCtx4 + 76 | 0; //@line 20270
       HEAP32[$138 >> 2] = $42; //@line 20271
       $139 = $ReallocAsyncCtx4 + 80 | 0; //@line 20272
       HEAP32[$139 >> 2] = $44; //@line 20273
       $140 = $ReallocAsyncCtx4 + 84 | 0; //@line 20274
       HEAP8[$140 >> 0] = $46; //@line 20275
       $141 = $ReallocAsyncCtx4 + 88 | 0; //@line 20276
       HEAP32[$141 >> 2] = $48; //@line 20277
       $142 = $ReallocAsyncCtx4 + 92 | 0; //@line 20278
       HEAP32[$142 >> 2] = $50; //@line 20279
       $143 = $ReallocAsyncCtx4 + 96 | 0; //@line 20280
       HEAP32[$143 >> 2] = $52; //@line 20281
       $144 = $ReallocAsyncCtx4 + 100 | 0; //@line 20282
       HEAP32[$144 >> 2] = $54; //@line 20283
       $145 = $ReallocAsyncCtx4 + 104 | 0; //@line 20284
       HEAP8[$145 >> 0] = $$0; //@line 20285
       $146 = $ReallocAsyncCtx4 + 105 | 0; //@line 20286
       HEAP8[$146 >> 0] = $$094; //@line 20287
       sp = STACKTOP; //@line 20288
       STACKTOP = sp; //@line 20289
       return;
      }
      HEAP32[___async_retval >> 2] = $119; //@line 20292
      ___async_unwind = 0; //@line 20293
      HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 20294
      $120 = $ReallocAsyncCtx4 + 4 | 0; //@line 20295
      HEAP32[$120 >> 2] = $2; //@line 20296
      $121 = $ReallocAsyncCtx4 + 8 | 0; //@line 20297
      HEAP32[$121 >> 2] = $4; //@line 20298
      $122 = $ReallocAsyncCtx4 + 12 | 0; //@line 20299
      HEAP32[$122 >> 2] = $6; //@line 20300
      $123 = $ReallocAsyncCtx4 + 16 | 0; //@line 20301
      HEAP32[$123 >> 2] = $8; //@line 20302
      $124 = $ReallocAsyncCtx4 + 20 | 0; //@line 20303
      HEAP32[$124 >> 2] = $10; //@line 20304
      $125 = $ReallocAsyncCtx4 + 24 | 0; //@line 20305
      HEAP32[$125 >> 2] = $12; //@line 20306
      $126 = $ReallocAsyncCtx4 + 28 | 0; //@line 20307
      HEAP8[$126 >> 0] = $$097; //@line 20308
      $127 = $ReallocAsyncCtx4 + 32 | 0; //@line 20309
      HEAP32[$127 >> 2] = $20; //@line 20310
      $128 = $ReallocAsyncCtx4 + 36 | 0; //@line 20311
      HEAP32[$128 >> 2] = $22; //@line 20312
      $129 = $ReallocAsyncCtx4 + 40 | 0; //@line 20313
      HEAP32[$129 >> 2] = $24; //@line 20314
      $130 = $ReallocAsyncCtx4 + 44 | 0; //@line 20315
      HEAP32[$130 >> 2] = $26; //@line 20316
      $131 = $ReallocAsyncCtx4 + 48 | 0; //@line 20317
      HEAP32[$131 >> 2] = $28; //@line 20318
      $132 = $ReallocAsyncCtx4 + 52 | 0; //@line 20319
      HEAP32[$132 >> 2] = $30; //@line 20320
      $133 = $ReallocAsyncCtx4 + 56 | 0; //@line 20321
      HEAP32[$133 >> 2] = $32; //@line 20322
      $134 = $ReallocAsyncCtx4 + 60 | 0; //@line 20323
      HEAP32[$134 >> 2] = $34; //@line 20324
      $135 = $ReallocAsyncCtx4 + 64 | 0; //@line 20325
      HEAP32[$135 >> 2] = $36; //@line 20326
      $136 = $ReallocAsyncCtx4 + 68 | 0; //@line 20327
      HEAP32[$136 >> 2] = $38; //@line 20328
      $137 = $ReallocAsyncCtx4 + 72 | 0; //@line 20329
      HEAP32[$137 >> 2] = $40; //@line 20330
      $138 = $ReallocAsyncCtx4 + 76 | 0; //@line 20331
      HEAP32[$138 >> 2] = $42; //@line 20332
      $139 = $ReallocAsyncCtx4 + 80 | 0; //@line 20333
      HEAP32[$139 >> 2] = $44; //@line 20334
      $140 = $ReallocAsyncCtx4 + 84 | 0; //@line 20335
      HEAP8[$140 >> 0] = $46; //@line 20336
      $141 = $ReallocAsyncCtx4 + 88 | 0; //@line 20337
      HEAP32[$141 >> 2] = $48; //@line 20338
      $142 = $ReallocAsyncCtx4 + 92 | 0; //@line 20339
      HEAP32[$142 >> 2] = $50; //@line 20340
      $143 = $ReallocAsyncCtx4 + 96 | 0; //@line 20341
      HEAP32[$143 >> 2] = $52; //@line 20342
      $144 = $ReallocAsyncCtx4 + 100 | 0; //@line 20343
      HEAP32[$144 >> 2] = $54; //@line 20344
      $145 = $ReallocAsyncCtx4 + 104 | 0; //@line 20345
      HEAP8[$145 >> 0] = $$0; //@line 20346
      $146 = $ReallocAsyncCtx4 + 105 | 0; //@line 20347
      HEAP8[$146 >> 0] = $$094; //@line 20348
      sp = STACKTOP; //@line 20349
      STACKTOP = sp; //@line 20350
      return;
     }
    }
    $64 = HEAP32[(HEAP32[$26 >> 2] | 0) + 28 >> 2] | 0; //@line 20356
    $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 20357
    $65 = FUNCTION_TABLE_iiii[$64 & 31]($28, $61 & 255, $22) | 0; //@line 20358
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 20361
     $66 = $ReallocAsyncCtx + 4 | 0; //@line 20362
     HEAP32[$66 >> 2] = $6; //@line 20363
     $67 = $ReallocAsyncCtx + 8 | 0; //@line 20364
     HEAP32[$67 >> 2] = $8; //@line 20365
     $68 = $ReallocAsyncCtx + 12 | 0; //@line 20366
     HEAP32[$68 >> 2] = $12; //@line 20367
     $69 = $ReallocAsyncCtx + 16 | 0; //@line 20368
     HEAP32[$69 >> 2] = $10; //@line 20369
     $70 = $ReallocAsyncCtx + 20 | 0; //@line 20370
     HEAP32[$70 >> 2] = $4; //@line 20371
     $71 = $ReallocAsyncCtx + 24 | 0; //@line 20372
     HEAP32[$71 >> 2] = $20; //@line 20373
     $72 = $ReallocAsyncCtx + 28 | 0; //@line 20374
     HEAP32[$72 >> 2] = $22; //@line 20375
     $73 = $ReallocAsyncCtx + 32 | 0; //@line 20376
     HEAP32[$73 >> 2] = $24; //@line 20377
     $74 = $ReallocAsyncCtx + 36 | 0; //@line 20378
     HEAP32[$74 >> 2] = $26; //@line 20379
     $75 = $ReallocAsyncCtx + 40 | 0; //@line 20380
     HEAP32[$75 >> 2] = $28; //@line 20381
     $76 = $ReallocAsyncCtx + 44 | 0; //@line 20382
     HEAP8[$76 >> 0] = $$1107; //@line 20383
     $77 = $ReallocAsyncCtx + 45 | 0; //@line 20384
     HEAP8[$77 >> 0] = $61; //@line 20385
     $78 = $ReallocAsyncCtx + 48 | 0; //@line 20386
     HEAP32[$78 >> 2] = $30; //@line 20387
     $79 = $ReallocAsyncCtx + 52 | 0; //@line 20388
     HEAP32[$79 >> 2] = $32; //@line 20389
     $80 = $ReallocAsyncCtx + 56 | 0; //@line 20390
     HEAP32[$80 >> 2] = $34; //@line 20391
     $81 = $ReallocAsyncCtx + 60 | 0; //@line 20392
     HEAP32[$81 >> 2] = $36; //@line 20393
     $82 = $ReallocAsyncCtx + 64 | 0; //@line 20394
     HEAP32[$82 >> 2] = $38; //@line 20395
     $83 = $ReallocAsyncCtx + 68 | 0; //@line 20396
     HEAP32[$83 >> 2] = $40; //@line 20397
     $84 = $ReallocAsyncCtx + 72 | 0; //@line 20398
     HEAP32[$84 >> 2] = $42; //@line 20399
     $85 = $ReallocAsyncCtx + 76 | 0; //@line 20400
     HEAP32[$85 >> 2] = $44; //@line 20401
     $86 = $ReallocAsyncCtx + 80 | 0; //@line 20402
     HEAP8[$86 >> 0] = $46; //@line 20403
     $87 = $ReallocAsyncCtx + 84 | 0; //@line 20404
     HEAP32[$87 >> 2] = $48; //@line 20405
     $88 = $ReallocAsyncCtx + 88 | 0; //@line 20406
     HEAP8[$88 >> 0] = $$094; //@line 20407
     $89 = $ReallocAsyncCtx + 92 | 0; //@line 20408
     HEAP32[$89 >> 2] = $2; //@line 20409
     $90 = $ReallocAsyncCtx + 96 | 0; //@line 20410
     HEAP32[$90 >> 2] = $50; //@line 20411
     $91 = $ReallocAsyncCtx + 100 | 0; //@line 20412
     HEAP32[$91 >> 2] = $52; //@line 20413
     $92 = $ReallocAsyncCtx + 104 | 0; //@line 20414
     HEAP32[$92 >> 2] = $54; //@line 20415
     sp = STACKTOP; //@line 20416
     STACKTOP = sp; //@line 20417
     return;
    }
    HEAP32[___async_retval >> 2] = $65; //@line 20420
    ___async_unwind = 0; //@line 20421
    HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 20422
    $66 = $ReallocAsyncCtx + 4 | 0; //@line 20423
    HEAP32[$66 >> 2] = $6; //@line 20424
    $67 = $ReallocAsyncCtx + 8 | 0; //@line 20425
    HEAP32[$67 >> 2] = $8; //@line 20426
    $68 = $ReallocAsyncCtx + 12 | 0; //@line 20427
    HEAP32[$68 >> 2] = $12; //@line 20428
    $69 = $ReallocAsyncCtx + 16 | 0; //@line 20429
    HEAP32[$69 >> 2] = $10; //@line 20430
    $70 = $ReallocAsyncCtx + 20 | 0; //@line 20431
    HEAP32[$70 >> 2] = $4; //@line 20432
    $71 = $ReallocAsyncCtx + 24 | 0; //@line 20433
    HEAP32[$71 >> 2] = $20; //@line 20434
    $72 = $ReallocAsyncCtx + 28 | 0; //@line 20435
    HEAP32[$72 >> 2] = $22; //@line 20436
    $73 = $ReallocAsyncCtx + 32 | 0; //@line 20437
    HEAP32[$73 >> 2] = $24; //@line 20438
    $74 = $ReallocAsyncCtx + 36 | 0; //@line 20439
    HEAP32[$74 >> 2] = $26; //@line 20440
    $75 = $ReallocAsyncCtx + 40 | 0; //@line 20441
    HEAP32[$75 >> 2] = $28; //@line 20442
    $76 = $ReallocAsyncCtx + 44 | 0; //@line 20443
    HEAP8[$76 >> 0] = $$1107; //@line 20444
    $77 = $ReallocAsyncCtx + 45 | 0; //@line 20445
    HEAP8[$77 >> 0] = $61; //@line 20446
    $78 = $ReallocAsyncCtx + 48 | 0; //@line 20447
    HEAP32[$78 >> 2] = $30; //@line 20448
    $79 = $ReallocAsyncCtx + 52 | 0; //@line 20449
    HEAP32[$79 >> 2] = $32; //@line 20450
    $80 = $ReallocAsyncCtx + 56 | 0; //@line 20451
    HEAP32[$80 >> 2] = $34; //@line 20452
    $81 = $ReallocAsyncCtx + 60 | 0; //@line 20453
    HEAP32[$81 >> 2] = $36; //@line 20454
    $82 = $ReallocAsyncCtx + 64 | 0; //@line 20455
    HEAP32[$82 >> 2] = $38; //@line 20456
    $83 = $ReallocAsyncCtx + 68 | 0; //@line 20457
    HEAP32[$83 >> 2] = $40; //@line 20458
    $84 = $ReallocAsyncCtx + 72 | 0; //@line 20459
    HEAP32[$84 >> 2] = $42; //@line 20460
    $85 = $ReallocAsyncCtx + 76 | 0; //@line 20461
    HEAP32[$85 >> 2] = $44; //@line 20462
    $86 = $ReallocAsyncCtx + 80 | 0; //@line 20463
    HEAP8[$86 >> 0] = $46; //@line 20464
    $87 = $ReallocAsyncCtx + 84 | 0; //@line 20465
    HEAP32[$87 >> 2] = $48; //@line 20466
    $88 = $ReallocAsyncCtx + 88 | 0; //@line 20467
    HEAP8[$88 >> 0] = $$094; //@line 20468
    $89 = $ReallocAsyncCtx + 92 | 0; //@line 20469
    HEAP32[$89 >> 2] = $2; //@line 20470
    $90 = $ReallocAsyncCtx + 96 | 0; //@line 20471
    HEAP32[$90 >> 2] = $50; //@line 20472
    $91 = $ReallocAsyncCtx + 100 | 0; //@line 20473
    HEAP32[$91 >> 2] = $52; //@line 20474
    $92 = $ReallocAsyncCtx + 104 | 0; //@line 20475
    HEAP32[$92 >> 2] = $54; //@line 20476
    sp = STACKTOP; //@line 20477
    STACKTOP = sp; //@line 20478
    return;
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  $$4110 = $$4$ph; //@line 20483
 }
 _free($6); //@line 20485
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 20486
 $162 = __ZN6Socket5closeEv($8) | 0; //@line 20487
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 20490
  $163 = $ReallocAsyncCtx6 + 4 | 0; //@line 20491
  HEAP32[$163 >> 2] = $$4110; //@line 20492
  $164 = $ReallocAsyncCtx6 + 8 | 0; //@line 20493
  HEAP32[$164 >> 2] = $10; //@line 20494
  $165 = $ReallocAsyncCtx6 + 12 | 0; //@line 20495
  HEAP32[$165 >> 2] = $12; //@line 20496
  sp = STACKTOP; //@line 20497
  STACKTOP = sp; //@line 20498
  return;
 }
 HEAP32[___async_retval >> 2] = $162; //@line 20501
 ___async_unwind = 0; //@line 20502
 HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 20503
 $163 = $ReallocAsyncCtx6 + 4 | 0; //@line 20504
 HEAP32[$163 >> 2] = $$4110; //@line 20505
 $164 = $ReallocAsyncCtx6 + 8 | 0; //@line 20506
 HEAP32[$164 >> 2] = $10; //@line 20507
 $165 = $ReallocAsyncCtx6 + 12 | 0; //@line 20508
 HEAP32[$165 >> 2] = $12; //@line 20509
 sp = STACKTOP; //@line 20510
 STACKTOP = sp; //@line 20511
 return;
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1723
 STACKTOP = STACKTOP + 96 | 0; //@line 1724
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 1724
 $vararg_buffer23 = sp + 72 | 0; //@line 1725
 $vararg_buffer20 = sp + 64 | 0; //@line 1726
 $vararg_buffer18 = sp + 56 | 0; //@line 1727
 $vararg_buffer15 = sp + 48 | 0; //@line 1728
 $vararg_buffer12 = sp + 40 | 0; //@line 1729
 $vararg_buffer9 = sp + 32 | 0; //@line 1730
 $vararg_buffer6 = sp + 24 | 0; //@line 1731
 $vararg_buffer3 = sp + 16 | 0; //@line 1732
 $vararg_buffer1 = sp + 8 | 0; //@line 1733
 $vararg_buffer = sp; //@line 1734
 $4 = sp + 80 | 0; //@line 1735
 $5 = HEAP32[131] | 0; //@line 1736
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 1740
   FUNCTION_TABLE_v[$5 & 7](); //@line 1741
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 61; //@line 1744
    HEAP8[$AsyncCtx + 4 >> 0] = $0; //@line 1746
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 1748
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 1750
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 1752
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer15; //@line 1754
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer15; //@line 1756
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer18; //@line 1758
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer18; //@line 1760
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer23; //@line 1762
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer23; //@line 1764
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer3; //@line 1766
    HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer3; //@line 1768
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer20; //@line 1770
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer20; //@line 1772
    HEAP32[$AsyncCtx + 60 >> 2] = $4; //@line 1774
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer6; //@line 1776
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer6; //@line 1778
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer12; //@line 1780
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer12; //@line 1782
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer9; //@line 1784
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer9; //@line 1786
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer; //@line 1788
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer; //@line 1790
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer1; //@line 1792
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer1; //@line 1794
    sp = STACKTOP; //@line 1795
    STACKTOP = sp; //@line 1796
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1798
    HEAP32[133] = (HEAP32[133] | 0) + 1; //@line 1801
    break;
   }
  }
 } while (0);
 $34 = HEAP32[122] | 0; //@line 1806
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 1810
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[119] | 0; //@line 1816
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 1823
       break;
      }
     }
     $43 = HEAP32[120] | 0; //@line 1827
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 1831
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 1836
      } else {
       label = 11; //@line 1838
      }
     }
    } else {
     label = 11; //@line 1842
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 1846
   }
   if (!((HEAP32[129] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[126] = HEAP32[124]; //@line 1858
    break;
   }
   $54 = HEAPU8[472] | 0; //@line 1862
   $55 = $0 & 255; //@line 1863
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 1868
    $$lobit = $59 >>> 6; //@line 1869
    $60 = $$lobit & 255; //@line 1870
    $64 = ($54 & 32 | 0) == 0; //@line 1874
    $65 = HEAP32[123] | 0; //@line 1875
    $66 = HEAP32[122] | 0; //@line 1876
    $67 = $0 << 24 >> 24 == 1; //@line 1877
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1881
      _vsnprintf($66, $65, $2, $3) | 0; //@line 1882
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 62; //@line 1885
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 1888
       sp = STACKTOP; //@line 1889
       STACKTOP = sp; //@line 1890
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 1892
      $69 = HEAP32[130] | 0; //@line 1893
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[129] | 0; //@line 1897
       $74 = HEAP32[122] | 0; //@line 1898
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1899
       FUNCTION_TABLE_vi[$73 & 511]($74); //@line 1900
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 65; //@line 1903
        sp = STACKTOP; //@line 1904
        STACKTOP = sp; //@line 1905
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1907
        break;
       }
      }
      $71 = HEAP32[122] | 0; //@line 1911
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1912
      FUNCTION_TABLE_vi[$69 & 511]($71); //@line 1913
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 63; //@line 1916
       sp = STACKTOP; //@line 1917
       STACKTOP = sp; //@line 1918
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 1920
      $72 = HEAP32[130] | 0; //@line 1921
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1922
      FUNCTION_TABLE_vi[$72 & 511](2594); //@line 1923
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 64; //@line 1926
       sp = STACKTOP; //@line 1927
       STACKTOP = sp; //@line 1928
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1930
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 1937
       $$1143 = $66; //@line 1937
       $$1145 = $65; //@line 1937
       $$3154 = 0; //@line 1937
       label = 38; //@line 1938
      } else {
       if ($64) {
        $$0142 = $66; //@line 1941
        $$0144 = $65; //@line 1941
       } else {
        $76 = _snprintf($66, $65, 2596, $vararg_buffer) | 0; //@line 1943
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 1945
        $78 = ($$ | 0) > 0; //@line 1946
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 1951
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 1951
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 1955
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 2614; //@line 1961
          label = 35; //@line 1962
          break;
         }
        case 1:
         {
          $$sink = 2620; //@line 1966
          label = 35; //@line 1967
          break;
         }
        case 3:
         {
          $$sink = 2608; //@line 1971
          label = 35; //@line 1972
          break;
         }
        case 7:
         {
          $$sink = 2602; //@line 1976
          label = 35; //@line 1977
          break;
         }
        default:
         {
          $$0141 = 0; //@line 1981
          $$1152 = 0; //@line 1981
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 1985
         $$0141 = $60 & 1; //@line 1988
         $$1152 = _snprintf($$0142, $$0144, 2626, $vararg_buffer1) | 0; //@line 1988
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 1991
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 1993
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 1995
         $$1$off0 = $extract$t159; //@line 2000
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 2000
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 2000
         $$3154 = $$1152; //@line 2000
         label = 38; //@line 2001
        } else {
         $$1$off0 = $extract$t159; //@line 2003
         $$1143 = $$0142; //@line 2003
         $$1145 = $$0144; //@line 2003
         $$3154 = $$1152$; //@line 2003
         label = 38; //@line 2004
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[127] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 2017
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 2018
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 2019
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 66; //@line 2022
           HEAP8[$AsyncCtx60 + 4 >> 0] = $$1$off0 & 1; //@line 2025
           HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer23; //@line 2027
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer23; //@line 2029
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer20; //@line 2031
           HEAP32[$AsyncCtx60 + 20 >> 2] = $vararg_buffer20; //@line 2033
           HEAP32[$AsyncCtx60 + 24 >> 2] = $$3154; //@line 2035
           HEAP32[$AsyncCtx60 + 28 >> 2] = $2; //@line 2037
           HEAP32[$AsyncCtx60 + 32 >> 2] = $3; //@line 2039
           HEAP32[$AsyncCtx60 + 36 >> 2] = $vararg_buffer15; //@line 2041
           HEAP32[$AsyncCtx60 + 40 >> 2] = $1; //@line 2043
           HEAP32[$AsyncCtx60 + 44 >> 2] = $vararg_buffer15; //@line 2045
           HEAP32[$AsyncCtx60 + 48 >> 2] = $vararg_buffer18; //@line 2047
           HEAP32[$AsyncCtx60 + 52 >> 2] = $vararg_buffer18; //@line 2049
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer3; //@line 2051
           HEAP32[$AsyncCtx60 + 60 >> 2] = $$1143; //@line 2053
           HEAP32[$AsyncCtx60 + 64 >> 2] = $$1145; //@line 2055
           HEAP32[$AsyncCtx60 + 68 >> 2] = $vararg_buffer3; //@line 2057
           HEAP32[$AsyncCtx60 + 72 >> 2] = $4; //@line 2059
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer6; //@line 2061
           HEAP32[$AsyncCtx60 + 80 >> 2] = $vararg_buffer6; //@line 2063
           HEAP32[$AsyncCtx60 + 84 >> 2] = $55; //@line 2065
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer12; //@line 2067
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer12; //@line 2069
           HEAP32[$AsyncCtx60 + 96 >> 2] = $vararg_buffer9; //@line 2071
           HEAP32[$AsyncCtx60 + 100 >> 2] = $vararg_buffer9; //@line 2073
           sp = STACKTOP; //@line 2074
           STACKTOP = sp; //@line 2075
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 2077
          $125 = HEAP32[127] | 0; //@line 2082
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 2083
          $126 = FUNCTION_TABLE_ii[$125 & 31](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 2084
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 67; //@line 2087
           HEAP32[$AsyncCtx38 + 4 >> 2] = $2; //@line 2089
           HEAP32[$AsyncCtx38 + 8 >> 2] = $3; //@line 2091
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer15; //@line 2093
           HEAP32[$AsyncCtx38 + 16 >> 2] = $1; //@line 2095
           HEAP32[$AsyncCtx38 + 20 >> 2] = $vararg_buffer15; //@line 2097
           HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer18; //@line 2099
           HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer18; //@line 2101
           HEAP8[$AsyncCtx38 + 32 >> 0] = $$1$off0 & 1; //@line 2104
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer23; //@line 2106
           HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer23; //@line 2108
           HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer3; //@line 2110
           HEAP32[$AsyncCtx38 + 48 >> 2] = $$1143; //@line 2112
           HEAP32[$AsyncCtx38 + 52 >> 2] = $$1145; //@line 2114
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer3; //@line 2116
           HEAP32[$AsyncCtx38 + 60 >> 2] = $4; //@line 2118
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer20; //@line 2120
           HEAP32[$AsyncCtx38 + 68 >> 2] = $vararg_buffer20; //@line 2122
           HEAP32[$AsyncCtx38 + 72 >> 2] = $vararg_buffer6; //@line 2124
           HEAP32[$AsyncCtx38 + 76 >> 2] = $vararg_buffer6; //@line 2126
           HEAP32[$AsyncCtx38 + 80 >> 2] = $55; //@line 2128
           HEAP32[$AsyncCtx38 + 84 >> 2] = $vararg_buffer12; //@line 2130
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer12; //@line 2132
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer9; //@line 2134
           HEAP32[$AsyncCtx38 + 96 >> 2] = $vararg_buffer9; //@line 2136
           sp = STACKTOP; //@line 2137
           STACKTOP = sp; //@line 2138
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 2140
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 2141
           $151 = _snprintf($$1143, $$1145, 2626, $vararg_buffer3) | 0; //@line 2142
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 2144
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 2149
            $$3147 = $$1145 - $$10 | 0; //@line 2149
            label = 44; //@line 2150
            break;
           } else {
            $$3147168 = $$1145; //@line 2153
            $$3169 = $$1143; //@line 2153
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 2158
          $$3147 = $$1145; //@line 2158
          label = 44; //@line 2159
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 2165
          $$3169 = $$3; //@line 2165
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 2170
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 2176
          $$5156 = _snprintf($$3169, $$3147168, 2629, $vararg_buffer6) | 0; //@line 2178
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 2182
          $$5156 = _snprintf($$3169, $$3147168, 2644, $vararg_buffer9) | 0; //@line 2184
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 2188
          $$5156 = _snprintf($$3169, $$3147168, 2659, $vararg_buffer12) | 0; //@line 2190
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 2194
          $$5156 = _snprintf($$3169, $$3147168, 2674, $vararg_buffer15) | 0; //@line 2196
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 2689, $vararg_buffer18) | 0; //@line 2201
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 2205
        $168 = $$3169 + $$5156$ | 0; //@line 2207
        $169 = $$3147168 - $$5156$ | 0; //@line 2208
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2212
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 2213
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 68; //@line 2216
          HEAP8[$AsyncCtx56 + 4 >> 0] = $$1$off0 & 1; //@line 2219
          HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer23; //@line 2221
          HEAP32[$AsyncCtx56 + 12 >> 2] = $vararg_buffer23; //@line 2223
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer20; //@line 2225
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer20; //@line 2227
          HEAP32[$AsyncCtx56 + 24 >> 2] = $169; //@line 2229
          HEAP32[$AsyncCtx56 + 28 >> 2] = $168; //@line 2231
          sp = STACKTOP; //@line 2232
          STACKTOP = sp; //@line 2233
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 2235
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 2237
         $181 = $168 + $$13 | 0; //@line 2239
         $182 = $169 - $$13 | 0; //@line 2240
         if (($$13 | 0) > 0) {
          $184 = HEAP32[128] | 0; //@line 2243
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2248
            $186 = FUNCTION_TABLE_i[$184 & 0]() | 0; //@line 2249
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 69; //@line 2252
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 2254
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 2256
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 2258
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 2260
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 2263
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 2265
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 2267
             sp = STACKTOP; //@line 2268
             STACKTOP = sp; //@line 2269
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 2271
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 2272
             $194 = _snprintf($181, $182, 2626, $vararg_buffer20) | 0; //@line 2273
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 2275
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 2280
              $$6150 = $182 - $$18 | 0; //@line 2280
              $$9 = $$18; //@line 2280
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 2287
            $$6150 = $182; //@line 2287
            $$9 = $$13; //@line 2287
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 2704, $vararg_buffer23) | 0; //@line 2296
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[129] | 0; //@line 2302
      $202 = HEAP32[122] | 0; //@line 2303
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2304
      FUNCTION_TABLE_vi[$201 & 511]($202); //@line 2305
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 70; //@line 2308
       sp = STACKTOP; //@line 2309
       STACKTOP = sp; //@line 2310
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 2312
       break;
      }
     }
    } while (0);
    HEAP32[126] = HEAP32[124]; //@line 2318
   }
  }
 } while (0);
 $204 = HEAP32[132] | 0; //@line 2322
 if (!$204) {
  STACKTOP = sp; //@line 2325
  return;
 }
 $206 = HEAP32[133] | 0; //@line 2327
 HEAP32[133] = 0; //@line 2328
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2329
 FUNCTION_TABLE_v[$204 & 7](); //@line 2330
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 71; //@line 2333
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 2335
  sp = STACKTOP; //@line 2336
  STACKTOP = sp; //@line 2337
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 2339
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 2342
 } else {
  STACKTOP = sp; //@line 2344
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 2347
  $$pre = HEAP32[132] | 0; //@line 2348
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2349
  FUNCTION_TABLE_v[$$pre & 7](); //@line 2350
  if (___async) {
   label = 70; //@line 2353
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 2356
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 2359
  } else {
   label = 72; //@line 2361
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 72; //@line 2366
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 2368
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 2370
  sp = STACKTOP; //@line 2371
  STACKTOP = sp; //@line 2372
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 2375
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_191($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $101 = 0, $104 = 0, $111 = 0, $113 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $151 = 0, $153 = 0, $16 = 0, $161 = 0, $164 = 0, $166 = 0, $174 = 0, $177 = 0, $179 = 0, $18 = 0, $187 = 0, $190 = 0, $192 = 0, $2 = 0, $20 = 0, $205 = 0, $206 = 0, $207 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $86 = 0, $87 = 0, $95 = 0, $98 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13918
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13920
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13922
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13924
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13926
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13928
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13930
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13932
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13934
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13936
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13938
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13940
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13942
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13944
 $27 = $12 + 12 | 0; //@line 13945
 $28 = HEAP32[$27 >> 2] | 0; //@line 13946
 if ($28 | 0) {
  $31 = HEAP32[$28 + 4 >> 2] | 0; //@line 13950
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 13951
  FUNCTION_TABLE_vii[$31 & 7]($14, $12); //@line 13952
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 162; //@line 13955
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 13956
   HEAP32[$32 >> 2] = $2; //@line 13957
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 13958
   HEAP32[$33 >> 2] = $4; //@line 13959
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 13960
   HEAP32[$34 >> 2] = $6; //@line 13961
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 13962
   HEAP32[$35 >> 2] = $8; //@line 13963
   $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 13964
   HEAP32[$36 >> 2] = $27; //@line 13965
   $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 13966
   HEAP32[$37 >> 2] = $10; //@line 13967
   $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 13968
   HEAP32[$38 >> 2] = $16; //@line 13969
   $39 = $ReallocAsyncCtx3 + 32 | 0; //@line 13970
   HEAP32[$39 >> 2] = $14; //@line 13971
   $40 = $ReallocAsyncCtx3 + 36 | 0; //@line 13972
   HEAP32[$40 >> 2] = $18; //@line 13973
   $41 = $ReallocAsyncCtx3 + 40 | 0; //@line 13974
   HEAP32[$41 >> 2] = $20; //@line 13975
   $42 = $ReallocAsyncCtx3 + 44 | 0; //@line 13976
   HEAP32[$42 >> 2] = $22; //@line 13977
   $43 = $ReallocAsyncCtx3 + 48 | 0; //@line 13978
   HEAP32[$43 >> 2] = $24; //@line 13979
   $44 = $ReallocAsyncCtx3 + 52 | 0; //@line 13980
   HEAP32[$44 >> 2] = $26; //@line 13981
   sp = STACKTOP; //@line 13982
   return;
  }
  ___async_unwind = 0; //@line 13985
  HEAP32[$ReallocAsyncCtx3 >> 2] = 162; //@line 13986
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 13987
  HEAP32[$32 >> 2] = $2; //@line 13988
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 13989
  HEAP32[$33 >> 2] = $4; //@line 13990
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 13991
  HEAP32[$34 >> 2] = $6; //@line 13992
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 13993
  HEAP32[$35 >> 2] = $8; //@line 13994
  $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 13995
  HEAP32[$36 >> 2] = $27; //@line 13996
  $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 13997
  HEAP32[$37 >> 2] = $10; //@line 13998
  $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 13999
  HEAP32[$38 >> 2] = $16; //@line 14000
  $39 = $ReallocAsyncCtx3 + 32 | 0; //@line 14001
  HEAP32[$39 >> 2] = $14; //@line 14002
  $40 = $ReallocAsyncCtx3 + 36 | 0; //@line 14003
  HEAP32[$40 >> 2] = $18; //@line 14004
  $41 = $ReallocAsyncCtx3 + 40 | 0; //@line 14005
  HEAP32[$41 >> 2] = $20; //@line 14006
  $42 = $ReallocAsyncCtx3 + 44 | 0; //@line 14007
  HEAP32[$42 >> 2] = $22; //@line 14008
  $43 = $ReallocAsyncCtx3 + 48 | 0; //@line 14009
  HEAP32[$43 >> 2] = $24; //@line 14010
  $44 = $ReallocAsyncCtx3 + 52 | 0; //@line 14011
  HEAP32[$44 >> 2] = $26; //@line 14012
  sp = STACKTOP; //@line 14013
  return;
 }
 HEAP32[$16 >> 2] = 0; //@line 14016
 $45 = $8 + 32 | 0; //@line 14017
 do {
  if (($45 | 0) != ($18 | 0)) {
   $47 = $8 + 44 | 0; //@line 14021
   $48 = HEAP32[$47 >> 2] | 0; //@line 14022
   if ($48 | 0) {
    $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 14026
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 14027
    FUNCTION_TABLE_vi[$51 & 511]($45); //@line 14028
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 163; //@line 14031
     $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 14032
     HEAP32[$52 >> 2] = $2; //@line 14033
     $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 14034
     HEAP32[$53 >> 2] = $4; //@line 14035
     $54 = $ReallocAsyncCtx4 + 12 | 0; //@line 14036
     HEAP32[$54 >> 2] = $45; //@line 14037
     $55 = $ReallocAsyncCtx4 + 16 | 0; //@line 14038
     HEAP32[$55 >> 2] = $6; //@line 14039
     $56 = $ReallocAsyncCtx4 + 20 | 0; //@line 14040
     HEAP32[$56 >> 2] = $8; //@line 14041
     $57 = $ReallocAsyncCtx4 + 24 | 0; //@line 14042
     HEAP32[$57 >> 2] = $10; //@line 14043
     $58 = $ReallocAsyncCtx4 + 28 | 0; //@line 14044
     HEAP32[$58 >> 2] = $14; //@line 14045
     $59 = $ReallocAsyncCtx4 + 32 | 0; //@line 14046
     HEAP32[$59 >> 2] = $18; //@line 14047
     $60 = $ReallocAsyncCtx4 + 36 | 0; //@line 14048
     HEAP32[$60 >> 2] = $47; //@line 14049
     $61 = $ReallocAsyncCtx4 + 40 | 0; //@line 14050
     HEAP32[$61 >> 2] = $20; //@line 14051
     $62 = $ReallocAsyncCtx4 + 44 | 0; //@line 14052
     HEAP32[$62 >> 2] = $22; //@line 14053
     $63 = $ReallocAsyncCtx4 + 48 | 0; //@line 14054
     HEAP32[$63 >> 2] = $24; //@line 14055
     $64 = $ReallocAsyncCtx4 + 52 | 0; //@line 14056
     HEAP32[$64 >> 2] = $26; //@line 14057
     sp = STACKTOP; //@line 14058
     return;
    }
    ___async_unwind = 0; //@line 14061
    HEAP32[$ReallocAsyncCtx4 >> 2] = 163; //@line 14062
    $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 14063
    HEAP32[$52 >> 2] = $2; //@line 14064
    $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 14065
    HEAP32[$53 >> 2] = $4; //@line 14066
    $54 = $ReallocAsyncCtx4 + 12 | 0; //@line 14067
    HEAP32[$54 >> 2] = $45; //@line 14068
    $55 = $ReallocAsyncCtx4 + 16 | 0; //@line 14069
    HEAP32[$55 >> 2] = $6; //@line 14070
    $56 = $ReallocAsyncCtx4 + 20 | 0; //@line 14071
    HEAP32[$56 >> 2] = $8; //@line 14072
    $57 = $ReallocAsyncCtx4 + 24 | 0; //@line 14073
    HEAP32[$57 >> 2] = $10; //@line 14074
    $58 = $ReallocAsyncCtx4 + 28 | 0; //@line 14075
    HEAP32[$58 >> 2] = $14; //@line 14076
    $59 = $ReallocAsyncCtx4 + 32 | 0; //@line 14077
    HEAP32[$59 >> 2] = $18; //@line 14078
    $60 = $ReallocAsyncCtx4 + 36 | 0; //@line 14079
    HEAP32[$60 >> 2] = $47; //@line 14080
    $61 = $ReallocAsyncCtx4 + 40 | 0; //@line 14081
    HEAP32[$61 >> 2] = $20; //@line 14082
    $62 = $ReallocAsyncCtx4 + 44 | 0; //@line 14083
    HEAP32[$62 >> 2] = $22; //@line 14084
    $63 = $ReallocAsyncCtx4 + 48 | 0; //@line 14085
    HEAP32[$63 >> 2] = $24; //@line 14086
    $64 = $ReallocAsyncCtx4 + 52 | 0; //@line 14087
    HEAP32[$64 >> 2] = $26; //@line 14088
    sp = STACKTOP; //@line 14089
    return;
   }
   $65 = $18 + 12 | 0; //@line 14092
   $66 = HEAP32[$65 >> 2] | 0; //@line 14093
   if (!$66) {
    HEAP32[$47 >> 2] = 0; //@line 14096
    break;
   }
   $69 = HEAP32[$66 + 4 >> 2] | 0; //@line 14100
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 14101
   FUNCTION_TABLE_vii[$69 & 7]($45, $18); //@line 14102
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 14105
    $70 = $ReallocAsyncCtx5 + 4 | 0; //@line 14106
    HEAP32[$70 >> 2] = $2; //@line 14107
    $71 = $ReallocAsyncCtx5 + 8 | 0; //@line 14108
    HEAP32[$71 >> 2] = $4; //@line 14109
    $72 = $ReallocAsyncCtx5 + 12 | 0; //@line 14110
    HEAP32[$72 >> 2] = $45; //@line 14111
    $73 = $ReallocAsyncCtx5 + 16 | 0; //@line 14112
    HEAP32[$73 >> 2] = $6; //@line 14113
    $74 = $ReallocAsyncCtx5 + 20 | 0; //@line 14114
    HEAP32[$74 >> 2] = $8; //@line 14115
    $75 = $ReallocAsyncCtx5 + 24 | 0; //@line 14116
    HEAP32[$75 >> 2] = $65; //@line 14117
    $76 = $ReallocAsyncCtx5 + 28 | 0; //@line 14118
    HEAP32[$76 >> 2] = $10; //@line 14119
    $77 = $ReallocAsyncCtx5 + 32 | 0; //@line 14120
    HEAP32[$77 >> 2] = $14; //@line 14121
    $78 = $ReallocAsyncCtx5 + 36 | 0; //@line 14122
    HEAP32[$78 >> 2] = $47; //@line 14123
    $79 = $ReallocAsyncCtx5 + 40 | 0; //@line 14124
    HEAP32[$79 >> 2] = $20; //@line 14125
    $80 = $ReallocAsyncCtx5 + 44 | 0; //@line 14126
    HEAP32[$80 >> 2] = $22; //@line 14127
    $81 = $ReallocAsyncCtx5 + 48 | 0; //@line 14128
    HEAP32[$81 >> 2] = $24; //@line 14129
    $82 = $ReallocAsyncCtx5 + 52 | 0; //@line 14130
    HEAP32[$82 >> 2] = $26; //@line 14131
    sp = STACKTOP; //@line 14132
    return;
   }
   ___async_unwind = 0; //@line 14135
   HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 14136
   $70 = $ReallocAsyncCtx5 + 4 | 0; //@line 14137
   HEAP32[$70 >> 2] = $2; //@line 14138
   $71 = $ReallocAsyncCtx5 + 8 | 0; //@line 14139
   HEAP32[$71 >> 2] = $4; //@line 14140
   $72 = $ReallocAsyncCtx5 + 12 | 0; //@line 14141
   HEAP32[$72 >> 2] = $45; //@line 14142
   $73 = $ReallocAsyncCtx5 + 16 | 0; //@line 14143
   HEAP32[$73 >> 2] = $6; //@line 14144
   $74 = $ReallocAsyncCtx5 + 20 | 0; //@line 14145
   HEAP32[$74 >> 2] = $8; //@line 14146
   $75 = $ReallocAsyncCtx5 + 24 | 0; //@line 14147
   HEAP32[$75 >> 2] = $65; //@line 14148
   $76 = $ReallocAsyncCtx5 + 28 | 0; //@line 14149
   HEAP32[$76 >> 2] = $10; //@line 14150
   $77 = $ReallocAsyncCtx5 + 32 | 0; //@line 14151
   HEAP32[$77 >> 2] = $14; //@line 14152
   $78 = $ReallocAsyncCtx5 + 36 | 0; //@line 14153
   HEAP32[$78 >> 2] = $47; //@line 14154
   $79 = $ReallocAsyncCtx5 + 40 | 0; //@line 14155
   HEAP32[$79 >> 2] = $20; //@line 14156
   $80 = $ReallocAsyncCtx5 + 44 | 0; //@line 14157
   HEAP32[$80 >> 2] = $22; //@line 14158
   $81 = $ReallocAsyncCtx5 + 48 | 0; //@line 14159
   HEAP32[$81 >> 2] = $24; //@line 14160
   $82 = $ReallocAsyncCtx5 + 52 | 0; //@line 14161
   HEAP32[$82 >> 2] = $26; //@line 14162
   sp = STACKTOP; //@line 14163
   return;
  }
 } while (0);
 HEAP32[$8 + 8 >> 2] = $6; //@line 14168
 HEAP32[$8 + 48 >> 2] = $20; //@line 14170
 HEAP32[$8 + 52 >> 2] = $22; //@line 14172
 $86 = $8 + 56 | 0; //@line 14173
 HEAP32[$86 >> 2] = 0; //@line 14174
 $87 = $8 + 60 | 0; //@line 14175
 HEAP32[$87 >> 2] = 0; //@line 14176
 HEAP32[$8 + 64 >> 2] = 0; //@line 14178
 HEAP8[$8 + 82 >> 0] = 0; //@line 14180
 HEAP8[$8 + 83 >> 0] = 1; //@line 14182
 HEAP8[$8 + 84 >> 0] = 3; //@line 14184
 HEAP8[$8 + 85 >> 0] = 0; //@line 14186
 HEAP16[$8 + 80 >> 1] = 0; //@line 14188
 HEAP32[$8 + 76 >> 2] = 0; //@line 14190
 $95 = $8 + 72 | 0; //@line 14191
 HEAP32[$95 >> 2] = 15500; //@line 14192
 HEAP8[$8 + 86 >> 0] = 0; //@line 14194
 HEAP32[$8 + 88 >> 2] = 0; //@line 14196
 $98 = HEAP32[177] | 0; //@line 14197
 HEAP32[177] = $98 + 1; //@line 14199
 HEAP32[$8 >> 2] = ($98 | 0) > 32767 ? 1 : $98; //@line 14202
 $101 = HEAP32[1675] | 0; //@line 14203
 if (!$101) {
  $$1 = 0; //@line 14206
  $151 = 0; //@line 14206
 } else {
  $104 = HEAP32[$101 + 56 >> 2] | 0; //@line 14209
  if (!$104) {
   $$1 = 1; //@line 14212
   $151 = 0; //@line 14212
  } else {
   if ((HEAP32[$101 + 8 >> 2] | 0) == ($6 | 0)) {
    HEAP32[$86 >> 2] = $104; //@line 14218
    HEAP32[$87 >> 2] = HEAP32[$101 + 60 >> 2]; //@line 14221
    $$1 = 1; //@line 14222
    $151 = $104; //@line 14222
   } else {
    $$1 = 1; //@line 14224
    $151 = 0; //@line 14224
   }
  }
 }
 $111 = HEAP32[1676] | 0; //@line 14228
 if (!$111) {
  $$1$1 = $$1; //@line 14231
  $164 = $151; //@line 14231
 } else {
  if (!$151) {
   $153 = HEAP32[$111 + 56 >> 2] | 0; //@line 14236
   if (!$153) {
    $205 = 0; //@line 14239
   } else {
    if ((HEAP32[$111 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$86 >> 2] = $153; //@line 14245
     HEAP32[$87 >> 2] = HEAP32[$111 + 60 >> 2]; //@line 14248
     $205 = $153; //@line 14249
    } else {
     $205 = 0; //@line 14251
    }
   }
  } else {
   $205 = $151; //@line 14255
  }
  $$1$1 = $$1 + 1 | 0; //@line 14258
  $164 = $205; //@line 14258
 }
 $161 = HEAP32[1677] | 0; //@line 14260
 if (!$161) {
  $$1$2 = $$1$1; //@line 14263
  $177 = $164; //@line 14263
 } else {
  if (!$164) {
   $166 = HEAP32[$161 + 56 >> 2] | 0; //@line 14268
   if (!$166) {
    $206 = 0; //@line 14271
   } else {
    if ((HEAP32[$161 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$86 >> 2] = $166; //@line 14277
     HEAP32[$87 >> 2] = HEAP32[$161 + 60 >> 2]; //@line 14280
     $206 = $166; //@line 14281
    } else {
     $206 = 0; //@line 14283
    }
   }
  } else {
   $206 = $164; //@line 14287
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 14290
  $177 = $206; //@line 14290
 }
 $174 = HEAP32[1678] | 0; //@line 14292
 if (!$174) {
  $$1$3 = $$1$2; //@line 14295
  $190 = $177; //@line 14295
 } else {
  if (!$177) {
   $179 = HEAP32[$174 + 56 >> 2] | 0; //@line 14300
   if (!$179) {
    $207 = 0; //@line 14303
   } else {
    if ((HEAP32[$174 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$86 >> 2] = $179; //@line 14309
     HEAP32[$87 >> 2] = HEAP32[$174 + 60 >> 2]; //@line 14312
     $207 = $179; //@line 14313
    } else {
     $207 = 0; //@line 14315
    }
   }
  } else {
   $207 = $177; //@line 14319
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 14322
  $190 = $207; //@line 14322
 }
 $187 = HEAP32[1679] | 0; //@line 14324
 if (!$187) {
  $$1$4 = $$1$3; //@line 14327
 } else {
  if (!$190) {
   $192 = HEAP32[$187 + 56 >> 2] | 0; //@line 14332
   if ($192 | 0) {
    if ((HEAP32[$187 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$86 >> 2] = $192; //@line 14339
     HEAP32[$87 >> 2] = HEAP32[$187 + 60 >> 2]; //@line 14342
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 14347
 }
 HEAP32[6700 + ($26 << 2) >> 2] = $8; //@line 14350
 HEAP32[$95 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 14353
 if (HEAP8[7580] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 14357
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 14358
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 14361
   $148 = $ReallocAsyncCtx13 + 4 | 0; //@line 14362
   HEAP32[$148 >> 2] = $8; //@line 14363
   $149 = $ReallocAsyncCtx13 + 8 | 0; //@line 14364
   HEAP32[$149 >> 2] = $24; //@line 14365
   sp = STACKTOP; //@line 14366
   return;
  }
  ___async_unwind = 0; //@line 14369
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 14370
  $148 = $ReallocAsyncCtx13 + 4 | 0; //@line 14371
  HEAP32[$148 >> 2] = $8; //@line 14372
  $149 = $ReallocAsyncCtx13 + 8 | 0; //@line 14373
  HEAP32[$149 >> 2] = $24; //@line 14374
  sp = STACKTOP; //@line 14375
  return;
 }
 $113 = $8 + 44 | 0; //@line 14378
 $114 = HEAP32[$113 >> 2] | 0; //@line 14379
 if (!$114) {
  $128 = $2 + 12 | 0; //@line 14382
  HEAP32[$128 >> 2] = 0; //@line 14383
  $130 = $4 + 4 | 0; //@line 14385
  HEAP32[$130 >> 2] = 0; //@line 14387
  HEAP32[$130 + 4 >> 2] = 0; //@line 14390
  HEAP32[$4 >> 2] = 3; //@line 14391
  $134 = $4 + 12 | 0; //@line 14392
  HEAP32[$134 >> 2] = 712; //@line 14393
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 14394
  $135 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $4) | 0; //@line 14395
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 14398
   $136 = $ReallocAsyncCtx14 + 4 | 0; //@line 14399
   HEAP32[$136 >> 2] = $4; //@line 14400
   $137 = $ReallocAsyncCtx14 + 8 | 0; //@line 14401
   HEAP32[$137 >> 2] = $8; //@line 14402
   $138 = $ReallocAsyncCtx14 + 12 | 0; //@line 14403
   HEAP32[$138 >> 2] = $14; //@line 14404
   $139 = $ReallocAsyncCtx14 + 16 | 0; //@line 14405
   HEAP32[$139 >> 2] = $24; //@line 14406
   $140 = $ReallocAsyncCtx14 + 20 | 0; //@line 14407
   HEAP32[$140 >> 2] = $113; //@line 14408
   $141 = $ReallocAsyncCtx14 + 24 | 0; //@line 14409
   HEAP32[$141 >> 2] = $8; //@line 14410
   $142 = $ReallocAsyncCtx14 + 28 | 0; //@line 14411
   HEAP32[$142 >> 2] = $134; //@line 14412
   $143 = $ReallocAsyncCtx14 + 32 | 0; //@line 14413
   HEAP32[$143 >> 2] = $45; //@line 14414
   $144 = $ReallocAsyncCtx14 + 36 | 0; //@line 14415
   HEAP32[$144 >> 2] = $2; //@line 14416
   $145 = $ReallocAsyncCtx14 + 40 | 0; //@line 14417
   HEAP32[$145 >> 2] = $128; //@line 14418
   $146 = $ReallocAsyncCtx14 + 44 | 0; //@line 14419
   HEAP32[$146 >> 2] = $10; //@line 14420
   sp = STACKTOP; //@line 14421
   return;
  }
  HEAP32[___async_retval >> 2] = $135; //@line 14425
  ___async_unwind = 0; //@line 14426
  HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 14427
  $136 = $ReallocAsyncCtx14 + 4 | 0; //@line 14428
  HEAP32[$136 >> 2] = $4; //@line 14429
  $137 = $ReallocAsyncCtx14 + 8 | 0; //@line 14430
  HEAP32[$137 >> 2] = $8; //@line 14431
  $138 = $ReallocAsyncCtx14 + 12 | 0; //@line 14432
  HEAP32[$138 >> 2] = $14; //@line 14433
  $139 = $ReallocAsyncCtx14 + 16 | 0; //@line 14434
  HEAP32[$139 >> 2] = $24; //@line 14435
  $140 = $ReallocAsyncCtx14 + 20 | 0; //@line 14436
  HEAP32[$140 >> 2] = $113; //@line 14437
  $141 = $ReallocAsyncCtx14 + 24 | 0; //@line 14438
  HEAP32[$141 >> 2] = $8; //@line 14439
  $142 = $ReallocAsyncCtx14 + 28 | 0; //@line 14440
  HEAP32[$142 >> 2] = $134; //@line 14441
  $143 = $ReallocAsyncCtx14 + 32 | 0; //@line 14442
  HEAP32[$143 >> 2] = $45; //@line 14443
  $144 = $ReallocAsyncCtx14 + 36 | 0; //@line 14444
  HEAP32[$144 >> 2] = $2; //@line 14445
  $145 = $ReallocAsyncCtx14 + 40 | 0; //@line 14446
  HEAP32[$145 >> 2] = $128; //@line 14447
  $146 = $ReallocAsyncCtx14 + 44 | 0; //@line 14448
  HEAP32[$146 >> 2] = $10; //@line 14449
  sp = STACKTOP; //@line 14450
  return;
 } else {
  $117 = HEAP32[$114 + 4 >> 2] | 0; //@line 14454
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 14455
  FUNCTION_TABLE_vii[$117 & 7]($2, $45); //@line 14456
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 14459
   $118 = $ReallocAsyncCtx6 + 4 | 0; //@line 14460
   HEAP32[$118 >> 2] = $2; //@line 14461
   $119 = $ReallocAsyncCtx6 + 8 | 0; //@line 14462
   HEAP32[$119 >> 2] = $4; //@line 14463
   $120 = $ReallocAsyncCtx6 + 12 | 0; //@line 14464
   HEAP32[$120 >> 2] = $113; //@line 14465
   $121 = $ReallocAsyncCtx6 + 16 | 0; //@line 14466
   HEAP32[$121 >> 2] = $8; //@line 14467
   $122 = $ReallocAsyncCtx6 + 20 | 0; //@line 14468
   HEAP32[$122 >> 2] = $8; //@line 14469
   $123 = $ReallocAsyncCtx6 + 24 | 0; //@line 14470
   HEAP32[$123 >> 2] = $45; //@line 14471
   $124 = $ReallocAsyncCtx6 + 28 | 0; //@line 14472
   HEAP32[$124 >> 2] = $10; //@line 14473
   $125 = $ReallocAsyncCtx6 + 32 | 0; //@line 14474
   HEAP32[$125 >> 2] = $14; //@line 14475
   $126 = $ReallocAsyncCtx6 + 36 | 0; //@line 14476
   HEAP32[$126 >> 2] = $24; //@line 14477
   $127 = $ReallocAsyncCtx6 + 40 | 0; //@line 14478
   HEAP32[$127 >> 2] = $113; //@line 14479
   sp = STACKTOP; //@line 14480
   return;
  }
  ___async_unwind = 0; //@line 14483
  HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 14484
  $118 = $ReallocAsyncCtx6 + 4 | 0; //@line 14485
  HEAP32[$118 >> 2] = $2; //@line 14486
  $119 = $ReallocAsyncCtx6 + 8 | 0; //@line 14487
  HEAP32[$119 >> 2] = $4; //@line 14488
  $120 = $ReallocAsyncCtx6 + 12 | 0; //@line 14489
  HEAP32[$120 >> 2] = $113; //@line 14490
  $121 = $ReallocAsyncCtx6 + 16 | 0; //@line 14491
  HEAP32[$121 >> 2] = $8; //@line 14492
  $122 = $ReallocAsyncCtx6 + 20 | 0; //@line 14493
  HEAP32[$122 >> 2] = $8; //@line 14494
  $123 = $ReallocAsyncCtx6 + 24 | 0; //@line 14495
  HEAP32[$123 >> 2] = $45; //@line 14496
  $124 = $ReallocAsyncCtx6 + 28 | 0; //@line 14497
  HEAP32[$124 >> 2] = $10; //@line 14498
  $125 = $ReallocAsyncCtx6 + 32 | 0; //@line 14499
  HEAP32[$125 >> 2] = $14; //@line 14500
  $126 = $ReallocAsyncCtx6 + 36 | 0; //@line 14501
  HEAP32[$126 >> 2] = $24; //@line 14502
  $127 = $ReallocAsyncCtx6 + 40 | 0; //@line 14503
  HEAP32[$127 >> 2] = $113; //@line 14504
  sp = STACKTOP; //@line 14505
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_69($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1107 = 0, $$2 = 0, $$byval_copy = 0, $$byval_copy16 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21125
 STACKTOP = STACKTOP + 48 | 0; //@line 21126
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 21126
 $$byval_copy16 = sp + 20 | 0; //@line 21127
 $$byval_copy = sp; //@line 21128
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21130
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21132
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21134
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21136
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21138
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21140
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21142
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21144
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21146
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21148
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21150
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21152
 if (!$AsyncRetVal) {
  __ZN6Socket11set_timeoutEi($2, 5e3); //@line 21155
  $25 = _malloc(512) | 0; //@line 21156
  if (!$25) {
   $$2 = -3007; //@line 21159
  } else {
   $27 = $25; //@line 21161
   $28 = $25 + 1 | 0; //@line 21162
   $29 = $25 + 2 | 0; //@line 21163
   $30 = $25 + 3 | 0; //@line 21164
   $31 = $25 + 4 | 0; //@line 21165
   $32 = $25 + 5 | 0; //@line 21166
   $33 = $25 + 6 | 0; //@line 21167
   $34 = $25 + 12 | 0; //@line 21168
   $$sink$i = ($22 | 0) == 2 ? 28 : 1; //@line 21170
   HEAP32[$10 >> 2] = 0; //@line 21171
   HEAP32[$10 + 4 >> 2] = 0; //@line 21171
   HEAP32[$10 + 8 >> 2] = 0; //@line 21171
   HEAP32[$10 + 12 >> 2] = 0; //@line 21171
   HEAP32[$10 + 16 >> 2] = 0; //@line 21171
   HEAP32[$$byval_copy >> 2] = HEAP32[$10 >> 2]; //@line 21172
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 21172
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 21172
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$10 + 12 >> 2]; //@line 21172
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 21172
   __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 21173
   do {
    if (3) {
     if (0 > 9) {
      if (!0) {
       break;
      } else {
       $$1107 = 0; //@line 21183
       $41 = 0; //@line 21183
      }
     } else {
      if (0 < 5) {
       $$1107 = 0; //@line 21188
       $41 = 0; //@line 21188
      } else {
       $76 = 608 + ((0 + -5 | 0) * 20 | 0) | 0; //@line 21192
       HEAP32[$$byval_copy16 >> 2] = HEAP32[$76 >> 2]; //@line 21193
       HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$76 + 4 >> 2]; //@line 21193
       HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$76 + 8 >> 2]; //@line 21193
       HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$76 + 12 >> 2]; //@line 21193
       HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$76 + 16 >> 2]; //@line 21193
       __ZN13SocketAddress8set_addrE10nsapi_addr($8, $$byval_copy16); //@line 21194
       __ZN13SocketAddress8set_portEt($8, 53); //@line 21195
       HEAP8[$25 >> 0] = 0; //@line 21196
       HEAP8[$28 >> 0] = 1; //@line 21197
       HEAP8[$29 >> 0] = 1; //@line 21198
       HEAP8[$30 >> 0] = 0; //@line 21199
       HEAP8[$31 >> 0] = 0; //@line 21200
       HEAP8[$32 >> 0] = 1; //@line 21201
       HEAP8[$33 >> 0] = 0; //@line 21202
       HEAP8[$33 + 1 >> 0] = 0; //@line 21202
       HEAP8[$33 + 2 >> 0] = 0; //@line 21202
       HEAP8[$33 + 3 >> 0] = 0; //@line 21202
       HEAP8[$33 + 4 >> 0] = 0; //@line 21202
       HEAP8[$33 + 5 >> 0] = 0; //@line 21202
       if (!(HEAP8[$14 >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $34; //@line 21206
       } else {
        $$048$i = $14; //@line 21208
        $$sroa$0$0$in47$i = $34; //@line 21208
        while (1) {
         $79 = _strcspn($$048$i, 3975) | 0; //@line 21210
         $81 = $$sroa$0$0$in47$i + 1 | 0; //@line 21212
         HEAP8[$$sroa$0$0$in47$i >> 0] = $79; //@line 21213
         $82 = $79 & 255; //@line 21214
         _memcpy($81 | 0, $$048$i | 0, $82 | 0) | 0; //@line 21215
         $83 = $81 + $82 | 0; //@line 21216
         $$048$i = $$048$i + ($79 + ((HEAP8[$$048$i + $79 >> 0] | 0) == 46 & 1)) | 0; //@line 21222
         if (!(HEAP8[$$048$i >> 0] | 0)) {
          $$sroa$0$0$in$lcssa$i = $83; //@line 21226
          break;
         } else {
          $$sroa$0$0$in47$i = $83; //@line 21229
         }
        }
       }
       HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 21234
       HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 21236
       HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 21238
       HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 21240
       HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 21243
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 21245
       $99 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($4, $8, $25, $$sroa$0$0$in$lcssa$i + 5 - $27 | 0) | 0; //@line 21246
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 21249
        $100 = $ReallocAsyncCtx4 + 4 | 0; //@line 21250
        HEAP32[$100 >> 2] = $16; //@line 21251
        $101 = $ReallocAsyncCtx4 + 8 | 0; //@line 21252
        HEAP32[$101 >> 2] = $8; //@line 21253
        $102 = $ReallocAsyncCtx4 + 12 | 0; //@line 21254
        HEAP32[$102 >> 2] = $25; //@line 21255
        $103 = $ReallocAsyncCtx4 + 16 | 0; //@line 21256
        HEAP32[$103 >> 2] = $2; //@line 21257
        $104 = $ReallocAsyncCtx4 + 20 | 0; //@line 21258
        HEAP32[$104 >> 2] = $4; //@line 21259
        $105 = $ReallocAsyncCtx4 + 24 | 0; //@line 21260
        HEAP32[$105 >> 2] = $6; //@line 21261
        $106 = $ReallocAsyncCtx4 + 28 | 0; //@line 21262
        HEAP8[$106 >> 0] = 0; //@line 21263
        $107 = $ReallocAsyncCtx4 + 32 | 0; //@line 21264
        HEAP32[$107 >> 2] = $10; //@line 21265
        $108 = $ReallocAsyncCtx4 + 36 | 0; //@line 21266
        HEAP32[$108 >> 2] = $8; //@line 21267
        $109 = $ReallocAsyncCtx4 + 40 | 0; //@line 21268
        HEAP32[$109 >> 2] = $10; //@line 21269
        $110 = $ReallocAsyncCtx4 + 44 | 0; //@line 21270
        HEAP32[$110 >> 2] = $12; //@line 21271
        $111 = $ReallocAsyncCtx4 + 48 | 0; //@line 21272
        HEAP32[$111 >> 2] = $12; //@line 21273
        $112 = $ReallocAsyncCtx4 + 52 | 0; //@line 21274
        HEAP32[$112 >> 2] = $28; //@line 21275
        $113 = $ReallocAsyncCtx4 + 56 | 0; //@line 21276
        HEAP32[$113 >> 2] = $29; //@line 21277
        $114 = $ReallocAsyncCtx4 + 60 | 0; //@line 21278
        HEAP32[$114 >> 2] = $30; //@line 21279
        $115 = $ReallocAsyncCtx4 + 64 | 0; //@line 21280
        HEAP32[$115 >> 2] = $31; //@line 21281
        $116 = $ReallocAsyncCtx4 + 68 | 0; //@line 21282
        HEAP32[$116 >> 2] = $32; //@line 21283
        $117 = $ReallocAsyncCtx4 + 72 | 0; //@line 21284
        HEAP32[$117 >> 2] = $33; //@line 21285
        $118 = $ReallocAsyncCtx4 + 76 | 0; //@line 21286
        HEAP32[$118 >> 2] = $14; //@line 21287
        $119 = $ReallocAsyncCtx4 + 80 | 0; //@line 21288
        HEAP32[$119 >> 2] = $34; //@line 21289
        $120 = $ReallocAsyncCtx4 + 84 | 0; //@line 21290
        HEAP8[$120 >> 0] = $$sink$i; //@line 21291
        $121 = $ReallocAsyncCtx4 + 88 | 0; //@line 21292
        HEAP32[$121 >> 2] = $27; //@line 21293
        $122 = $ReallocAsyncCtx4 + 92 | 0; //@line 21294
        HEAP32[$122 >> 2] = $16; //@line 21295
        $123 = $ReallocAsyncCtx4 + 96 | 0; //@line 21296
        HEAP32[$123 >> 2] = $18; //@line 21297
        $124 = $ReallocAsyncCtx4 + 100 | 0; //@line 21298
        HEAP32[$124 >> 2] = $20; //@line 21299
        $125 = $ReallocAsyncCtx4 + 104 | 0; //@line 21300
        HEAP8[$125 >> 0] = 0; //@line 21301
        $126 = $ReallocAsyncCtx4 + 105 | 0; //@line 21302
        HEAP8[$126 >> 0] = 3; //@line 21303
        sp = STACKTOP; //@line 21304
        STACKTOP = sp; //@line 21305
        return;
       }
       HEAP32[___async_retval >> 2] = $99; //@line 21308
       ___async_unwind = 0; //@line 21309
       HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 21310
       $100 = $ReallocAsyncCtx4 + 4 | 0; //@line 21311
       HEAP32[$100 >> 2] = $16; //@line 21312
       $101 = $ReallocAsyncCtx4 + 8 | 0; //@line 21313
       HEAP32[$101 >> 2] = $8; //@line 21314
       $102 = $ReallocAsyncCtx4 + 12 | 0; //@line 21315
       HEAP32[$102 >> 2] = $25; //@line 21316
       $103 = $ReallocAsyncCtx4 + 16 | 0; //@line 21317
       HEAP32[$103 >> 2] = $2; //@line 21318
       $104 = $ReallocAsyncCtx4 + 20 | 0; //@line 21319
       HEAP32[$104 >> 2] = $4; //@line 21320
       $105 = $ReallocAsyncCtx4 + 24 | 0; //@line 21321
       HEAP32[$105 >> 2] = $6; //@line 21322
       $106 = $ReallocAsyncCtx4 + 28 | 0; //@line 21323
       HEAP8[$106 >> 0] = 0; //@line 21324
       $107 = $ReallocAsyncCtx4 + 32 | 0; //@line 21325
       HEAP32[$107 >> 2] = $10; //@line 21326
       $108 = $ReallocAsyncCtx4 + 36 | 0; //@line 21327
       HEAP32[$108 >> 2] = $8; //@line 21328
       $109 = $ReallocAsyncCtx4 + 40 | 0; //@line 21329
       HEAP32[$109 >> 2] = $10; //@line 21330
       $110 = $ReallocAsyncCtx4 + 44 | 0; //@line 21331
       HEAP32[$110 >> 2] = $12; //@line 21332
       $111 = $ReallocAsyncCtx4 + 48 | 0; //@line 21333
       HEAP32[$111 >> 2] = $12; //@line 21334
       $112 = $ReallocAsyncCtx4 + 52 | 0; //@line 21335
       HEAP32[$112 >> 2] = $28; //@line 21336
       $113 = $ReallocAsyncCtx4 + 56 | 0; //@line 21337
       HEAP32[$113 >> 2] = $29; //@line 21338
       $114 = $ReallocAsyncCtx4 + 60 | 0; //@line 21339
       HEAP32[$114 >> 2] = $30; //@line 21340
       $115 = $ReallocAsyncCtx4 + 64 | 0; //@line 21341
       HEAP32[$115 >> 2] = $31; //@line 21342
       $116 = $ReallocAsyncCtx4 + 68 | 0; //@line 21343
       HEAP32[$116 >> 2] = $32; //@line 21344
       $117 = $ReallocAsyncCtx4 + 72 | 0; //@line 21345
       HEAP32[$117 >> 2] = $33; //@line 21346
       $118 = $ReallocAsyncCtx4 + 76 | 0; //@line 21347
       HEAP32[$118 >> 2] = $14; //@line 21348
       $119 = $ReallocAsyncCtx4 + 80 | 0; //@line 21349
       HEAP32[$119 >> 2] = $34; //@line 21350
       $120 = $ReallocAsyncCtx4 + 84 | 0; //@line 21351
       HEAP8[$120 >> 0] = $$sink$i; //@line 21352
       $121 = $ReallocAsyncCtx4 + 88 | 0; //@line 21353
       HEAP32[$121 >> 2] = $27; //@line 21354
       $122 = $ReallocAsyncCtx4 + 92 | 0; //@line 21355
       HEAP32[$122 >> 2] = $16; //@line 21356
       $123 = $ReallocAsyncCtx4 + 96 | 0; //@line 21357
       HEAP32[$123 >> 2] = $18; //@line 21358
       $124 = $ReallocAsyncCtx4 + 100 | 0; //@line 21359
       HEAP32[$124 >> 2] = $20; //@line 21360
       $125 = $ReallocAsyncCtx4 + 104 | 0; //@line 21361
       HEAP8[$125 >> 0] = 0; //@line 21362
       $126 = $ReallocAsyncCtx4 + 105 | 0; //@line 21363
       HEAP8[$126 >> 0] = 3; //@line 21364
       sp = STACKTOP; //@line 21365
       STACKTOP = sp; //@line 21366
       return;
      }
     }
     $44 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 21372
     $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 21373
     $45 = FUNCTION_TABLE_iiii[$44 & 31]($12, $41 & 255, $8) | 0; //@line 21374
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 21377
      $46 = $ReallocAsyncCtx + 4 | 0; //@line 21378
      HEAP32[$46 >> 2] = $25; //@line 21379
      $47 = $ReallocAsyncCtx + 8 | 0; //@line 21380
      HEAP32[$47 >> 2] = $2; //@line 21381
      $48 = $ReallocAsyncCtx + 12 | 0; //@line 21382
      HEAP32[$48 >> 2] = $6; //@line 21383
      $49 = $ReallocAsyncCtx + 16 | 0; //@line 21384
      HEAP32[$49 >> 2] = $4; //@line 21385
      $50 = $ReallocAsyncCtx + 20 | 0; //@line 21386
      HEAP32[$50 >> 2] = $8; //@line 21387
      $51 = $ReallocAsyncCtx + 24 | 0; //@line 21388
      HEAP32[$51 >> 2] = $10; //@line 21389
      $52 = $ReallocAsyncCtx + 28 | 0; //@line 21390
      HEAP32[$52 >> 2] = $8; //@line 21391
      $53 = $ReallocAsyncCtx + 32 | 0; //@line 21392
      HEAP32[$53 >> 2] = $10; //@line 21393
      $54 = $ReallocAsyncCtx + 36 | 0; //@line 21394
      HEAP32[$54 >> 2] = $12; //@line 21395
      $55 = $ReallocAsyncCtx + 40 | 0; //@line 21396
      HEAP32[$55 >> 2] = $12; //@line 21397
      $56 = $ReallocAsyncCtx + 44 | 0; //@line 21398
      HEAP8[$56 >> 0] = $$1107; //@line 21399
      $57 = $ReallocAsyncCtx + 45 | 0; //@line 21400
      HEAP8[$57 >> 0] = $41; //@line 21401
      $58 = $ReallocAsyncCtx + 48 | 0; //@line 21402
      HEAP32[$58 >> 2] = $28; //@line 21403
      $59 = $ReallocAsyncCtx + 52 | 0; //@line 21404
      HEAP32[$59 >> 2] = $29; //@line 21405
      $60 = $ReallocAsyncCtx + 56 | 0; //@line 21406
      HEAP32[$60 >> 2] = $30; //@line 21407
      $61 = $ReallocAsyncCtx + 60 | 0; //@line 21408
      HEAP32[$61 >> 2] = $31; //@line 21409
      $62 = $ReallocAsyncCtx + 64 | 0; //@line 21410
      HEAP32[$62 >> 2] = $32; //@line 21411
      $63 = $ReallocAsyncCtx + 68 | 0; //@line 21412
      HEAP32[$63 >> 2] = $33; //@line 21413
      $64 = $ReallocAsyncCtx + 72 | 0; //@line 21414
      HEAP32[$64 >> 2] = $14; //@line 21415
      $65 = $ReallocAsyncCtx + 76 | 0; //@line 21416
      HEAP32[$65 >> 2] = $34; //@line 21417
      $66 = $ReallocAsyncCtx + 80 | 0; //@line 21418
      HEAP8[$66 >> 0] = $$sink$i; //@line 21419
      $67 = $ReallocAsyncCtx + 84 | 0; //@line 21420
      HEAP32[$67 >> 2] = $27; //@line 21421
      $68 = $ReallocAsyncCtx + 88 | 0; //@line 21422
      HEAP8[$68 >> 0] = 3; //@line 21423
      $69 = $ReallocAsyncCtx + 92 | 0; //@line 21424
      HEAP32[$69 >> 2] = $16; //@line 21425
      $70 = $ReallocAsyncCtx + 96 | 0; //@line 21426
      HEAP32[$70 >> 2] = $16; //@line 21427
      $71 = $ReallocAsyncCtx + 100 | 0; //@line 21428
      HEAP32[$71 >> 2] = $18; //@line 21429
      $72 = $ReallocAsyncCtx + 104 | 0; //@line 21430
      HEAP32[$72 >> 2] = $20; //@line 21431
      sp = STACKTOP; //@line 21432
      STACKTOP = sp; //@line 21433
      return;
     }
     HEAP32[___async_retval >> 2] = $45; //@line 21436
     ___async_unwind = 0; //@line 21437
     HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 21438
     $46 = $ReallocAsyncCtx + 4 | 0; //@line 21439
     HEAP32[$46 >> 2] = $25; //@line 21440
     $47 = $ReallocAsyncCtx + 8 | 0; //@line 21441
     HEAP32[$47 >> 2] = $2; //@line 21442
     $48 = $ReallocAsyncCtx + 12 | 0; //@line 21443
     HEAP32[$48 >> 2] = $6; //@line 21444
     $49 = $ReallocAsyncCtx + 16 | 0; //@line 21445
     HEAP32[$49 >> 2] = $4; //@line 21446
     $50 = $ReallocAsyncCtx + 20 | 0; //@line 21447
     HEAP32[$50 >> 2] = $8; //@line 21448
     $51 = $ReallocAsyncCtx + 24 | 0; //@line 21449
     HEAP32[$51 >> 2] = $10; //@line 21450
     $52 = $ReallocAsyncCtx + 28 | 0; //@line 21451
     HEAP32[$52 >> 2] = $8; //@line 21452
     $53 = $ReallocAsyncCtx + 32 | 0; //@line 21453
     HEAP32[$53 >> 2] = $10; //@line 21454
     $54 = $ReallocAsyncCtx + 36 | 0; //@line 21455
     HEAP32[$54 >> 2] = $12; //@line 21456
     $55 = $ReallocAsyncCtx + 40 | 0; //@line 21457
     HEAP32[$55 >> 2] = $12; //@line 21458
     $56 = $ReallocAsyncCtx + 44 | 0; //@line 21459
     HEAP8[$56 >> 0] = $$1107; //@line 21460
     $57 = $ReallocAsyncCtx + 45 | 0; //@line 21461
     HEAP8[$57 >> 0] = $41; //@line 21462
     $58 = $ReallocAsyncCtx + 48 | 0; //@line 21463
     HEAP32[$58 >> 2] = $28; //@line 21464
     $59 = $ReallocAsyncCtx + 52 | 0; //@line 21465
     HEAP32[$59 >> 2] = $29; //@line 21466
     $60 = $ReallocAsyncCtx + 56 | 0; //@line 21467
     HEAP32[$60 >> 2] = $30; //@line 21468
     $61 = $ReallocAsyncCtx + 60 | 0; //@line 21469
     HEAP32[$61 >> 2] = $31; //@line 21470
     $62 = $ReallocAsyncCtx + 64 | 0; //@line 21471
     HEAP32[$62 >> 2] = $32; //@line 21472
     $63 = $ReallocAsyncCtx + 68 | 0; //@line 21473
     HEAP32[$63 >> 2] = $33; //@line 21474
     $64 = $ReallocAsyncCtx + 72 | 0; //@line 21475
     HEAP32[$64 >> 2] = $14; //@line 21476
     $65 = $ReallocAsyncCtx + 76 | 0; //@line 21477
     HEAP32[$65 >> 2] = $34; //@line 21478
     $66 = $ReallocAsyncCtx + 80 | 0; //@line 21479
     HEAP8[$66 >> 0] = $$sink$i; //@line 21480
     $67 = $ReallocAsyncCtx + 84 | 0; //@line 21481
     HEAP32[$67 >> 2] = $27; //@line 21482
     $68 = $ReallocAsyncCtx + 88 | 0; //@line 21483
     HEAP8[$68 >> 0] = 3; //@line 21484
     $69 = $ReallocAsyncCtx + 92 | 0; //@line 21485
     HEAP32[$69 >> 2] = $16; //@line 21486
     $70 = $ReallocAsyncCtx + 96 | 0; //@line 21487
     HEAP32[$70 >> 2] = $16; //@line 21488
     $71 = $ReallocAsyncCtx + 100 | 0; //@line 21489
     HEAP32[$71 >> 2] = $18; //@line 21490
     $72 = $ReallocAsyncCtx + 104 | 0; //@line 21491
     HEAP32[$72 >> 2] = $20; //@line 21492
     sp = STACKTOP; //@line 21493
     STACKTOP = sp; //@line 21494
     return;
    }
   } while (0);
   _free($25); //@line 21497
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 21498
   $128 = __ZN6Socket5closeEv($2) | 0; //@line 21499
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 21502
    $129 = $ReallocAsyncCtx6 + 4 | 0; //@line 21503
    HEAP32[$129 >> 2] = -3009; //@line 21504
    $130 = $ReallocAsyncCtx6 + 8 | 0; //@line 21505
    HEAP32[$130 >> 2] = $4; //@line 21506
    $131 = $ReallocAsyncCtx6 + 12 | 0; //@line 21507
    HEAP32[$131 >> 2] = $6; //@line 21508
    sp = STACKTOP; //@line 21509
    STACKTOP = sp; //@line 21510
    return;
   }
   HEAP32[___async_retval >> 2] = $128; //@line 21513
   ___async_unwind = 0; //@line 21514
   HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 21515
   $129 = $ReallocAsyncCtx6 + 4 | 0; //@line 21516
   HEAP32[$129 >> 2] = -3009; //@line 21517
   $130 = $ReallocAsyncCtx6 + 8 | 0; //@line 21518
   HEAP32[$130 >> 2] = $4; //@line 21519
   $131 = $ReallocAsyncCtx6 + 12 | 0; //@line 21520
   HEAP32[$131 >> 2] = $6; //@line 21521
   sp = STACKTOP; //@line 21522
   STACKTOP = sp; //@line 21523
   return;
  }
 } else {
  $$2 = $AsyncRetVal; //@line 21526
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 21528
 __ZN9UDPSocketD2Ev($4); //@line 21529
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 148; //@line 21532
  $133 = $ReallocAsyncCtx5 + 4 | 0; //@line 21533
  HEAP32[$133 >> 2] = $6; //@line 21534
  $134 = $ReallocAsyncCtx5 + 8 | 0; //@line 21535
  HEAP32[$134 >> 2] = $$2; //@line 21536
  sp = STACKTOP; //@line 21537
  STACKTOP = sp; //@line 21538
  return;
 }
 ___async_unwind = 0; //@line 21540
 HEAP32[$ReallocAsyncCtx5 >> 2] = 148; //@line 21541
 $133 = $ReallocAsyncCtx5 + 4 | 0; //@line 21542
 HEAP32[$133 >> 2] = $6; //@line 21543
 $134 = $ReallocAsyncCtx5 + 8 | 0; //@line 21544
 HEAP32[$134 >> 2] = $$2; //@line 21545
 sp = STACKTOP; //@line 21546
 STACKTOP = sp; //@line 21547
 return;
}
function __ZL28nsapi_dns_query_async_createPv($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $$pr$i = 0, $$pr$i72 = 0, $$pre85 = 0, $1 = 0, $104 = 0, $106 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $132 = 0, $14 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $157 = 0, $161 = 0, $163 = 0, $164 = 0, $170 = 0, $173 = 0, $177 = 0, $181 = 0, $189 = 0, $195 = 0, $2 = 0, $20 = 0, $203 = 0, $209 = 0, $217 = 0, $220 = 0, $222 = 0, $232 = 0, $236 = 0, $240 = 0, $244 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $52 = 0, $53 = 0, $57 = 0, $62 = 0, $63 = 0, $64 = 0, $69 = 0, $71 = 0, $76 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx39 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx48 = 0, $AsyncCtx51 = 0, $AsyncCtx54 = 0, $AsyncCtx57 = 0, $AsyncCtx6 = 0, $AsyncCtx61 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9317
 STACKTOP = STACKTOP + 32 | 0; //@line 9318
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9318
 $1 = sp + 16 | 0; //@line 9319
 $2 = sp; //@line 9320
 $3 = $0; //@line 9321
 $4 = HEAP32[1675] | 0; //@line 9322
 $5 = ($4 | 0) == 0; //@line 9323
 if ($5) {
  label = 3; //@line 9325
 } else {
  if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) {
   $$lcssa = $4; //@line 9330
  } else {
   label = 3; //@line 9332
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1676] | 0; //@line 9337
   if ($8 | 0) {
    if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $8; //@line 9343
     break;
    }
   }
   $232 = HEAP32[1677] | 0; //@line 9347
   if ($232 | 0) {
    if ((HEAP32[$232 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $232; //@line 9353
     break;
    }
   }
   $236 = HEAP32[1678] | 0; //@line 9357
   if ($236 | 0) {
    if ((HEAP32[$236 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $236; //@line 9363
     break;
    }
   }
   $240 = HEAP32[1679] | 0; //@line 9367
   if (!$240) {
    STACKTOP = sp; //@line 9370
    return;
   }
   if ((HEAP32[$240 >> 2] | 0) == ($3 | 0)) {
    $$lcssa = $240; //@line 9375
   } else {
    STACKTOP = sp; //@line 9377
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 2) {
  STACKTOP = sp; //@line 9385
  return;
 }
 $13 = $$lcssa + 56 | 0; //@line 9387
 $14 = $$lcssa + 8 | 0; //@line 9388
 $15 = $$lcssa + 60 | 0; //@line 9389
 if (!($5 | ($4 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $20 = HEAP32[$4 + 56 >> 2] | 0; //@line 9397
   if ($20 | 0) {
    if ((HEAP32[$4 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $20; //@line 9405
     HEAP32[$15 >> 2] = HEAP32[$4 + 60 >> 2]; //@line 9408
    }
   }
  }
 }
 $28 = HEAP32[1676] | 0; //@line 9413
 if (!(($28 | 0) == 0 | ($28 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $181 = HEAP32[$28 + 56 >> 2] | 0; //@line 9422
   if ($181 | 0) {
    if ((HEAP32[$28 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $181; //@line 9430
     HEAP32[$15 >> 2] = HEAP32[$28 + 60 >> 2]; //@line 9433
    }
   }
  }
 }
 $189 = HEAP32[1677] | 0; //@line 9438
 if (!(($189 | 0) == 0 | ($189 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $195 = HEAP32[$189 + 56 >> 2] | 0; //@line 9447
   if ($195 | 0) {
    if ((HEAP32[$189 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $195; //@line 9455
     HEAP32[$15 >> 2] = HEAP32[$189 + 60 >> 2]; //@line 9458
    }
   }
  }
 }
 $203 = HEAP32[1678] | 0; //@line 9463
 if (!(($203 | 0) == 0 | ($203 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $209 = HEAP32[$203 + 56 >> 2] | 0; //@line 9472
   if ($209 | 0) {
    if ((HEAP32[$203 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $209; //@line 9480
     HEAP32[$15 >> 2] = HEAP32[$203 + 60 >> 2]; //@line 9483
    }
   }
  }
 }
 $217 = HEAP32[1679] | 0; //@line 9488
 $220 = (HEAP32[$13 >> 2] | 0) == 0; //@line 9493
 if (($217 | 0) == 0 | ($217 | 0) == ($$lcssa | 0)) {
  if ($220) {
   label = 11; //@line 9496
  }
 } else {
  if ($220) {
   $222 = HEAP32[$217 + 56 >> 2] | 0; //@line 9501
   if (!$222) {
    label = 11; //@line 9504
   } else {
    if ((HEAP32[$217 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $222; //@line 9511
     HEAP32[$15 >> 2] = HEAP32[$217 + 60 >> 2]; //@line 9514
    } else {
     label = 11; //@line 9516
    }
   }
  }
 }
 if ((label | 0) == 11) {
  $AsyncCtx39 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9522
  $31 = __ZnwjRKSt9nothrow_t(56, 8621) | 0; //@line 9523
  if (___async) {
   HEAP32[$AsyncCtx39 >> 2] = 199; //@line 9526
   HEAP32[$AsyncCtx39 + 4 >> 2] = $1; //@line 9528
   HEAP32[$AsyncCtx39 + 8 >> 2] = $$lcssa; //@line 9530
   HEAP32[$AsyncCtx39 + 12 >> 2] = $1; //@line 9532
   HEAP32[$AsyncCtx39 + 16 >> 2] = $13; //@line 9534
   HEAP32[$AsyncCtx39 + 20 >> 2] = $2; //@line 9536
   HEAP32[$AsyncCtx39 + 24 >> 2] = $14; //@line 9538
   HEAP32[$AsyncCtx39 + 28 >> 2] = $15; //@line 9540
   sp = STACKTOP; //@line 9541
   STACKTOP = sp; //@line 9542
   return;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 9544
  if (!$31) {
   $52 = $$lcssa + 28 | 0; //@line 9547
   $53 = HEAP32[$52 >> 2] | 0; //@line 9548
   do {
    if (!$53) {
     $63 = 0; //@line 9552
    } else {
     $57 = HEAP32[$53 + 4 >> 2] | 0; //@line 9556
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9557
     FUNCTION_TABLE_vii[$57 & 7]($1, $$lcssa + 16 | 0); //@line 9558
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 201; //@line 9561
      HEAP32[$AsyncCtx + 4 >> 2] = $52; //@line 9563
      HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9565
      HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa; //@line 9567
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9569
      sp = STACKTOP; //@line 9570
      STACKTOP = sp; //@line 9571
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 9573
      $63 = HEAP32[$52 >> 2] | 0; //@line 9575
      break;
     }
    }
   } while (0);
   $62 = $1 + 12 | 0; //@line 9580
   HEAP32[$62 >> 2] = $63; //@line 9581
   $64 = HEAP32[$$lcssa >> 2] | 0; //@line 9582
   $AsyncCtx48 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9583
   __ZL28nsapi_dns_query_async_deletei($64); //@line 9584
   if (___async) {
    HEAP32[$AsyncCtx48 >> 2] = 202; //@line 9587
    HEAP32[$AsyncCtx48 + 4 >> 2] = $62; //@line 9589
    HEAP32[$AsyncCtx48 + 8 >> 2] = $1; //@line 9591
    sp = STACKTOP; //@line 9592
    STACKTOP = sp; //@line 9593
    return;
   }
   _emscripten_free_async_context($AsyncCtx48 | 0); //@line 9595
   $AsyncCtx54 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9596
   __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9597
   if (___async) {
    HEAP32[$AsyncCtx54 >> 2] = 203; //@line 9600
    HEAP32[$AsyncCtx54 + 4 >> 2] = $62; //@line 9602
    HEAP32[$AsyncCtx54 + 8 >> 2] = $1; //@line 9604
    sp = STACKTOP; //@line 9605
    STACKTOP = sp; //@line 9606
    return;
   }
   _emscripten_free_async_context($AsyncCtx54 | 0); //@line 9608
   $69 = HEAP32[$62 >> 2] | 0; //@line 9609
   do {
    if ($69 | 0) {
     $71 = HEAP32[$69 >> 2] | 0; //@line 9613
     $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9614
     FUNCTION_TABLE_viii[$71 & 0]($1, -3007, 0); //@line 9615
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 204; //@line 9618
      HEAP32[$AsyncCtx2 + 4 >> 2] = $62; //@line 9620
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9622
      sp = STACKTOP; //@line 9623
      STACKTOP = sp; //@line 9624
      return;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9626
     $$pr$i = HEAP32[$62 >> 2] | 0; //@line 9627
     if ($$pr$i | 0) {
      $76 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 9631
      $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9632
      FUNCTION_TABLE_vi[$76 & 511]($1); //@line 9633
      if (___async) {
       HEAP32[$AsyncCtx6 >> 2] = 205; //@line 9636
       HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 9638
       sp = STACKTOP; //@line 9639
       STACKTOP = sp; //@line 9640
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx6 | 0); //@line 9642
       break;
      }
     }
    }
   } while (0);
   STACKTOP = sp; //@line 9648
   return;
  }
  __ZN9UDPSocketC2Ev($31); //@line 9650
  $40 = HEAP32[$14 >> 2] | 0; //@line 9651
  $AsyncCtx61 = _emscripten_alloc_async_context(40, sp) | 0; //@line 9652
  $41 = __ZN6Socket4openEP12NetworkStack($31, $40) | 0; //@line 9653
  if (___async) {
   HEAP32[$AsyncCtx61 >> 2] = 200; //@line 9656
   HEAP32[$AsyncCtx61 + 4 >> 2] = $$lcssa; //@line 9658
   HEAP32[$AsyncCtx61 + 8 >> 2] = $1; //@line 9660
   HEAP32[$AsyncCtx61 + 12 >> 2] = $31; //@line 9662
   HEAP32[$AsyncCtx61 + 16 >> 2] = $31; //@line 9664
   HEAP32[$AsyncCtx61 + 20 >> 2] = $13; //@line 9666
   HEAP32[$AsyncCtx61 + 24 >> 2] = $2; //@line 9668
   HEAP32[$AsyncCtx61 + 28 >> 2] = $14; //@line 9670
   HEAP32[$AsyncCtx61 + 32 >> 2] = $31; //@line 9672
   HEAP32[$AsyncCtx61 + 36 >> 2] = $15; //@line 9674
   sp = STACKTOP; //@line 9675
   STACKTOP = sp; //@line 9676
   return;
  }
  _emscripten_free_async_context($AsyncCtx61 | 0); //@line 9678
  if ($41 | 0) {
   $80 = HEAP32[(HEAP32[$31 >> 2] | 0) + 4 >> 2] | 0; //@line 9683
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9684
   FUNCTION_TABLE_vi[$80 & 511]($31); //@line 9685
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 206; //@line 9688
    HEAP32[$AsyncCtx9 + 4 >> 2] = $$lcssa; //@line 9690
    HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 9692
    HEAP32[$AsyncCtx9 + 12 >> 2] = $41; //@line 9694
    sp = STACKTOP; //@line 9695
    STACKTOP = sp; //@line 9696
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9698
   $84 = $$lcssa + 28 | 0; //@line 9699
   $85 = HEAP32[$84 >> 2] | 0; //@line 9700
   do {
    if (!$85) {
     $96 = 0; //@line 9704
    } else {
     $89 = HEAP32[$85 + 4 >> 2] | 0; //@line 9708
     $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9709
     FUNCTION_TABLE_vii[$89 & 7]($1, $$lcssa + 16 | 0); //@line 9710
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 207; //@line 9713
      HEAP32[$AsyncCtx13 + 4 >> 2] = $84; //@line 9715
      HEAP32[$AsyncCtx13 + 8 >> 2] = $1; //@line 9717
      HEAP32[$AsyncCtx13 + 12 >> 2] = $$lcssa; //@line 9719
      HEAP32[$AsyncCtx13 + 16 >> 2] = $1; //@line 9721
      HEAP32[$AsyncCtx13 + 20 >> 2] = $41; //@line 9723
      sp = STACKTOP; //@line 9724
      STACKTOP = sp; //@line 9725
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 9727
      $96 = HEAP32[$84 >> 2] | 0; //@line 9729
      break;
     }
    }
   } while (0);
   $95 = $1 + 12 | 0; //@line 9734
   HEAP32[$95 >> 2] = $96; //@line 9735
   $97 = HEAP32[$$lcssa >> 2] | 0; //@line 9736
   $AsyncCtx45 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9737
   __ZL28nsapi_dns_query_async_deletei($97); //@line 9738
   if (___async) {
    HEAP32[$AsyncCtx45 >> 2] = 208; //@line 9741
    HEAP32[$AsyncCtx45 + 4 >> 2] = $95; //@line 9743
    HEAP32[$AsyncCtx45 + 8 >> 2] = $1; //@line 9745
    HEAP32[$AsyncCtx45 + 12 >> 2] = $41; //@line 9747
    sp = STACKTOP; //@line 9748
    STACKTOP = sp; //@line 9749
    return;
   }
   _emscripten_free_async_context($AsyncCtx45 | 0); //@line 9751
   $AsyncCtx51 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9752
   __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9753
   if (___async) {
    HEAP32[$AsyncCtx51 >> 2] = 209; //@line 9756
    HEAP32[$AsyncCtx51 + 4 >> 2] = $95; //@line 9758
    HEAP32[$AsyncCtx51 + 8 >> 2] = $1; //@line 9760
    HEAP32[$AsyncCtx51 + 12 >> 2] = $41; //@line 9762
    sp = STACKTOP; //@line 9763
    STACKTOP = sp; //@line 9764
    return;
   }
   _emscripten_free_async_context($AsyncCtx51 | 0); //@line 9766
   $104 = HEAP32[$95 >> 2] | 0; //@line 9767
   do {
    if ($104 | 0) {
     $106 = HEAP32[$104 >> 2] | 0; //@line 9771
     $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9772
     FUNCTION_TABLE_viii[$106 & 0]($1, $41, 0); //@line 9773
     if (___async) {
      HEAP32[$AsyncCtx16 >> 2] = 210; //@line 9776
      HEAP32[$AsyncCtx16 + 4 >> 2] = $95; //@line 9778
      HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 9780
      sp = STACKTOP; //@line 9781
      STACKTOP = sp; //@line 9782
      return;
     }
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 9784
     $$pr$i72 = HEAP32[$95 >> 2] | 0; //@line 9785
     if (!$$pr$i72) {
      break;
     }
     $111 = HEAP32[$$pr$i72 + 8 >> 2] | 0; //@line 9791
     $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9792
     FUNCTION_TABLE_vi[$111 & 511]($1); //@line 9793
     if (___async) {
      HEAP32[$AsyncCtx20 >> 2] = 211; //@line 9796
      HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 9798
      sp = STACKTOP; //@line 9799
      STACKTOP = sp; //@line 9800
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx20 | 0); //@line 9802
      break;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 9807
   return;
  }
  __ZN6Socket11set_timeoutEi($31, 0); //@line 9809
  $113 = HEAP32[$15 >> 2] | 0; //@line 9810
  $115 = $113; //@line 9812
  do {
   if (!$113) {
    $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9815
    $116 = __Znwj(20) | 0; //@line 9816
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 212; //@line 9819
     HEAP32[$AsyncCtx36 + 4 >> 2] = $$lcssa; //@line 9821
     HEAP32[$AsyncCtx36 + 8 >> 2] = $13; //@line 9823
     HEAP32[$AsyncCtx36 + 12 >> 2] = $31; //@line 9825
     HEAP32[$AsyncCtx36 + 16 >> 2] = $2; //@line 9827
     HEAP32[$AsyncCtx36 + 20 >> 2] = $14; //@line 9829
     HEAP32[$AsyncCtx36 + 24 >> 2] = $31; //@line 9831
     HEAP32[$AsyncCtx36 + 28 >> 2] = $15; //@line 9833
     sp = STACKTOP; //@line 9834
     STACKTOP = sp; //@line 9835
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 9837
     HEAP32[$116 >> 2] = 0; //@line 9838
     HEAP32[$116 + 4 >> 2] = 0; //@line 9838
     HEAP32[$116 + 8 >> 2] = 0; //@line 9838
     HEAP32[$116 + 12 >> 2] = 0; //@line 9838
     HEAP32[$15 >> 2] = $116; //@line 9839
     $127 = $116; //@line 9841
     $244 = $116; //@line 9841
     break;
    }
   } else {
    $127 = $113; //@line 9845
    $244 = $115; //@line 9845
   }
  } while (0);
  $125 = $$lcssa + 32 | 0; //@line 9848
  if (($127 | 0) == ($125 | 0)) {
   $161 = $127; //@line 9851
   $163 = $244; //@line 9851
  } else {
   $128 = $127 + 12 | 0; //@line 9853
   $129 = HEAP32[$128 >> 2] | 0; //@line 9854
   do {
    if ($129 | 0) {
     $132 = HEAP32[$129 + 8 >> 2] | 0; //@line 9859
     $AsyncCtx24 = _emscripten_alloc_async_context(44, sp) | 0; //@line 9860
     FUNCTION_TABLE_vi[$132 & 511]($127); //@line 9861
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 213; //@line 9864
      HEAP32[$AsyncCtx24 + 4 >> 2] = $$lcssa; //@line 9866
      HEAP32[$AsyncCtx24 + 8 >> 2] = $13; //@line 9868
      HEAP32[$AsyncCtx24 + 12 >> 2] = $31; //@line 9870
      HEAP32[$AsyncCtx24 + 16 >> 2] = $2; //@line 9872
      HEAP32[$AsyncCtx24 + 20 >> 2] = $14; //@line 9874
      HEAP32[$AsyncCtx24 + 24 >> 2] = $31; //@line 9876
      HEAP32[$AsyncCtx24 + 28 >> 2] = $128; //@line 9878
      HEAP32[$AsyncCtx24 + 32 >> 2] = $15; //@line 9880
      HEAP32[$AsyncCtx24 + 36 >> 2] = $127; //@line 9882
      HEAP32[$AsyncCtx24 + 40 >> 2] = $125; //@line 9884
      sp = STACKTOP; //@line 9885
      STACKTOP = sp; //@line 9886
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 9888
      break;
     }
    }
   } while (0);
   $143 = $$lcssa + 44 | 0; //@line 9893
   $144 = HEAP32[$143 >> 2] | 0; //@line 9894
   do {
    if (!$144) {
     $157 = 0; //@line 9898
    } else {
     $147 = HEAP32[$144 + 4 >> 2] | 0; //@line 9901
     $AsyncCtx28 = _emscripten_alloc_async_context(40, sp) | 0; //@line 9902
     FUNCTION_TABLE_vii[$147 & 7]($127, $125); //@line 9903
     if (___async) {
      HEAP32[$AsyncCtx28 >> 2] = 214; //@line 9906
      HEAP32[$AsyncCtx28 + 4 >> 2] = $143; //@line 9908
      HEAP32[$AsyncCtx28 + 8 >> 2] = $128; //@line 9910
      HEAP32[$AsyncCtx28 + 12 >> 2] = $15; //@line 9912
      HEAP32[$AsyncCtx28 + 16 >> 2] = $14; //@line 9914
      HEAP32[$AsyncCtx28 + 20 >> 2] = $2; //@line 9916
      HEAP32[$AsyncCtx28 + 24 >> 2] = $31; //@line 9918
      HEAP32[$AsyncCtx28 + 28 >> 2] = $13; //@line 9920
      HEAP32[$AsyncCtx28 + 32 >> 2] = $31; //@line 9922
      HEAP32[$AsyncCtx28 + 36 >> 2] = $$lcssa; //@line 9924
      sp = STACKTOP; //@line 9925
      STACKTOP = sp; //@line 9926
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx28 | 0); //@line 9928
      $157 = HEAP32[$143 >> 2] | 0; //@line 9930
      break;
     }
    }
   } while (0);
   HEAP32[$128 >> 2] = $157; //@line 9935
   $$pre85 = HEAP32[$15 >> 2] | 0; //@line 9936
   $161 = $$pre85; //@line 9938
   $163 = $$pre85; //@line 9938
  }
  HEAP32[$161 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 9942
  HEAP32[$2 + 8 >> 2] = 0; //@line 9944
  HEAP32[$2 >> 2] = 215; //@line 9945
  HEAP32[$2 + 4 >> 2] = $163; //@line 9947
  $164 = $2 + 12 | 0; //@line 9948
  HEAP32[$164 >> 2] = 724; //@line 9949
  $AsyncCtx57 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9950
  __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($31, $2); //@line 9951
  if (___async) {
   HEAP32[$AsyncCtx57 >> 2] = 216; //@line 9954
   HEAP32[$AsyncCtx57 + 4 >> 2] = $164; //@line 9956
   HEAP32[$AsyncCtx57 + 8 >> 2] = $13; //@line 9958
   HEAP32[$AsyncCtx57 + 12 >> 2] = $31; //@line 9960
   HEAP32[$AsyncCtx57 + 16 >> 2] = $2; //@line 9962
   HEAP32[$AsyncCtx57 + 20 >> 2] = $$lcssa; //@line 9964
   sp = STACKTOP; //@line 9965
   STACKTOP = sp; //@line 9966
   return;
  }
  _emscripten_free_async_context($AsyncCtx57 | 0); //@line 9968
  $170 = HEAP32[$164 >> 2] | 0; //@line 9969
  do {
   if ($170 | 0) {
    $173 = HEAP32[$170 + 8 >> 2] | 0; //@line 9974
    $AsyncCtx32 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9975
    FUNCTION_TABLE_vi[$173 & 511]($2); //@line 9976
    if (___async) {
     HEAP32[$AsyncCtx32 >> 2] = 217; //@line 9979
     HEAP32[$AsyncCtx32 + 4 >> 2] = $13; //@line 9981
     HEAP32[$AsyncCtx32 + 8 >> 2] = $31; //@line 9983
     HEAP32[$AsyncCtx32 + 12 >> 2] = $$lcssa; //@line 9985
     sp = STACKTOP; //@line 9986
     STACKTOP = sp; //@line 9987
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx32 | 0); //@line 9989
     break;
    }
   }
  } while (0);
  HEAP32[$13 >> 2] = $31; //@line 9994
 }
 $177 = HEAP32[$$lcssa >> 2] | 0; //@line 9996
 $AsyncCtx42 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9997
 __ZL26nsapi_dns_query_async_sendPv($177); //@line 9998
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 218; //@line 10001
  sp = STACKTOP; //@line 10002
  STACKTOP = sp; //@line 10003
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 10005
 STACKTOP = sp; //@line 10006
 return;
}
function __ZL26nsapi_dns_query_async_sendPv($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$byval_copy51 = 0, $$lcssa69 = 0, $$pr$i = 0, $$pr$i52 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $1 = 0, $104 = 0, $107 = 0, $108 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $150 = 0, $152 = 0, $159 = 0, $163 = 0, $164 = 0, $17 = 0, $184 = 0, $190 = 0, $194 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $66 = 0, $67 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx6 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10508
 STACKTOP = STACKTOP + 112 | 0; //@line 10509
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 10509
 $$byval_copy51 = sp + 84 | 0; //@line 10510
 $1 = sp; //@line 10511
 $2 = sp + 64 | 0; //@line 10512
 $3 = $0; //@line 10513
 $4 = HEAP32[1675] | 0; //@line 10514
 if (!$4) {
  label = 3; //@line 10517
 } else {
  if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) {
   $$lcssa69 = $4; //@line 10522
  } else {
   label = 3; //@line 10524
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1676] | 0; //@line 10529
   if ($8 | 0) {
    if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $8; //@line 10535
     break;
    }
   }
   $190 = HEAP32[1677] | 0; //@line 10539
   if ($190 | 0) {
    if ((HEAP32[$190 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $190; //@line 10545
     break;
    }
   }
   $194 = HEAP32[1678] | 0; //@line 10549
   if ($194 | 0) {
    if ((HEAP32[$194 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $194; //@line 10555
     break;
    }
   }
   $198 = HEAP32[1679] | 0; //@line 10559
   if (!$198) {
    STACKTOP = sp; //@line 10562
    return;
   }
   if ((HEAP32[$198 >> 2] | 0) == ($3 | 0)) {
    $$lcssa69 = $198; //@line 10567
   } else {
    STACKTOP = sp; //@line 10569
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa69 + 88 >> 2] | 0) != 1) {
  STACKTOP = sp; //@line 10577
  return;
 }
 $13 = $$lcssa69 + 83 | 0; //@line 10579
 $14 = HEAP8[$13 >> 0] | 0; //@line 10580
 if (!($14 << 24 >> 24)) {
  $17 = $$lcssa69 + 82 | 0; //@line 10583
  HEAP8[$17 >> 0] = (HEAP8[$17 >> 0] | 0) + 1 << 24 >> 24; //@line 10586
  $storemerge = 0; //@line 10587
 } else {
  $storemerge = $14 + -1 << 24 >> 24; //@line 10590
 }
 HEAP8[$13 >> 0] = $storemerge; //@line 10592
 $20 = HEAP16[872] | 0; //@line 10593
 $21 = $20 + 1 << 16 >> 16; //@line 10594
 HEAP16[872] = $21; //@line 10595
 $22 = $$lcssa69 + 80 | 0; //@line 10596
 HEAP16[$22 >> 1] = $20; //@line 10597
 if (!($21 << 16 >> 16)) {
  HEAP16[872] = 1; //@line 10600
 }
 $24 = _malloc(512) | 0; //@line 10602
 if (!$24) {
  $26 = $$lcssa69 + 28 | 0; //@line 10605
  $27 = HEAP32[$26 >> 2] | 0; //@line 10606
  do {
   if (!$27) {
    $37 = 0; //@line 10610
   } else {
    $31 = HEAP32[$27 + 4 >> 2] | 0; //@line 10614
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10615
    FUNCTION_TABLE_vii[$31 & 7]($$byval_copy51, $$lcssa69 + 16 | 0); //@line 10616
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 230; //@line 10619
     HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 10621
     HEAP32[$AsyncCtx + 8 >> 2] = $$byval_copy51; //@line 10623
     HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa69; //@line 10625
     HEAP32[$AsyncCtx + 16 >> 2] = $$byval_copy51; //@line 10627
     sp = STACKTOP; //@line 10628
     STACKTOP = sp; //@line 10629
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 10631
     $37 = HEAP32[$26 >> 2] | 0; //@line 10633
     break;
    }
   }
  } while (0);
  $36 = $$byval_copy51 + 12 | 0; //@line 10638
  HEAP32[$36 >> 2] = $37; //@line 10639
  $38 = HEAP32[$$lcssa69 >> 2] | 0; //@line 10640
  $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10641
  __ZL28nsapi_dns_query_async_deletei($38); //@line 10642
  if (___async) {
   HEAP32[$AsyncCtx27 >> 2] = 231; //@line 10645
   HEAP32[$AsyncCtx27 + 4 >> 2] = $36; //@line 10647
   HEAP32[$AsyncCtx27 + 8 >> 2] = $$byval_copy51; //@line 10649
   sp = STACKTOP; //@line 10650
   STACKTOP = sp; //@line 10651
   return;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 10653
  $AsyncCtx33 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10654
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 10655
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 232; //@line 10658
   HEAP32[$AsyncCtx33 + 4 >> 2] = $36; //@line 10660
   HEAP32[$AsyncCtx33 + 8 >> 2] = $$byval_copy51; //@line 10662
   sp = STACKTOP; //@line 10663
   STACKTOP = sp; //@line 10664
   return;
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 10666
  $43 = HEAP32[$36 >> 2] | 0; //@line 10667
  do {
   if ($43 | 0) {
    $45 = HEAP32[$43 >> 2] | 0; //@line 10671
    $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10672
    FUNCTION_TABLE_viii[$45 & 0]($$byval_copy51, -3007, 0); //@line 10673
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 233; //@line 10676
     HEAP32[$AsyncCtx2 + 4 >> 2] = $36; //@line 10678
     HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy51; //@line 10680
     sp = STACKTOP; //@line 10681
     STACKTOP = sp; //@line 10682
     return;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10684
    $$pr$i52 = HEAP32[$36 >> 2] | 0; //@line 10685
    if ($$pr$i52 | 0) {
     $50 = HEAP32[$$pr$i52 + 8 >> 2] | 0; //@line 10689
     $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10690
     FUNCTION_TABLE_vi[$50 & 511]($$byval_copy51); //@line 10691
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 234; //@line 10694
      HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy51; //@line 10696
      sp = STACKTOP; //@line 10697
      STACKTOP = sp; //@line 10698
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10700
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 10706
  return;
 }
 $52 = HEAP16[$22 >> 1] | 0; //@line 10708
 $54 = HEAP32[$$lcssa69 + 12 >> 2] | 0; //@line 10710
 $56 = HEAP32[$$lcssa69 + 52 >> 2] | 0; //@line 10712
 $57 = $24; //@line 10713
 HEAP8[$24 >> 0] = ($52 & 65535) >>> 8; //@line 10717
 HEAP8[$24 + 1 >> 0] = $52; //@line 10720
 HEAP8[$24 + 2 >> 0] = 1; //@line 10722
 HEAP8[$24 + 3 >> 0] = 0; //@line 10724
 HEAP8[$24 + 4 >> 0] = 0; //@line 10726
 $66 = $24 + 6 | 0; //@line 10727
 HEAP8[$24 + 5 >> 0] = 1; //@line 10728
 $67 = $24 + 12 | 0; //@line 10729
 HEAP8[$66 >> 0] = 0; //@line 10730
 HEAP8[$66 + 1 >> 0] = 0; //@line 10730
 HEAP8[$66 + 2 >> 0] = 0; //@line 10730
 HEAP8[$66 + 3 >> 0] = 0; //@line 10730
 HEAP8[$66 + 4 >> 0] = 0; //@line 10730
 HEAP8[$66 + 5 >> 0] = 0; //@line 10730
 if (!(HEAP8[$54 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $67; //@line 10734
 } else {
  $$048$i = $54; //@line 10736
  $$sroa$0$0$in47$i = $67; //@line 10736
  while (1) {
   $70 = _strcspn($$048$i, 3975) | 0; //@line 10738
   $72 = $$sroa$0$0$in47$i + 1 | 0; //@line 10740
   HEAP8[$$sroa$0$0$in47$i >> 0] = $70; //@line 10741
   $73 = $70 & 255; //@line 10742
   _memcpy($72 | 0, $$048$i | 0, $73 | 0) | 0; //@line 10743
   $74 = $72 + $73 | 0; //@line 10744
   $$048$i = $$048$i + ($70 + ((HEAP8[$$048$i + $70 >> 0] | 0) == 46 & 1)) | 0; //@line 10750
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $74; //@line 10754
    break;
   } else {
    $$sroa$0$0$in47$i = $74; //@line 10757
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 10762
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 10765
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = ($56 | 0) == 2 ? 28 : 1; //@line 10768
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 10770
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 10773
 $90 = $$sroa$0$0$in$lcssa$i + 5 - $57 | 0; //@line 10774
 HEAP32[$2 >> 2] = 0; //@line 10775
 HEAP32[$2 + 4 >> 2] = 0; //@line 10775
 HEAP32[$2 + 8 >> 2] = 0; //@line 10775
 HEAP32[$2 + 12 >> 2] = 0; //@line 10775
 HEAP32[$2 + 16 >> 2] = 0; //@line 10775
 HEAP32[$$byval_copy51 >> 2] = HEAP32[$2 >> 2]; //@line 10776
 HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 10776
 HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 10776
 HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 10776
 HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 10776
 __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy51, 0); //@line 10777
 $91 = $$lcssa69 + 8 | 0; //@line 10778
 $92 = $$lcssa69 + 82 | 0; //@line 10779
 $93 = $$lcssa69 + 84 | 0; //@line 10780
 $94 = $$lcssa69 + 85 | 0; //@line 10781
 L59 : do {
  if (HEAP8[$93 >> 0] | 0) {
   $96 = $$lcssa69 + 56 | 0; //@line 10786
   while (1) {
    $97 = HEAP32[$91 >> 2] | 0; //@line 10788
    $98 = HEAP8[$92 >> 0] | 0; //@line 10789
    if (($98 & 255) > 9) {
     if (!(HEAP8[$94 >> 0] | 0)) {
      break L59;
     }
     HEAP8[$92 >> 0] = 0; //@line 10797
     HEAP8[$94 >> 0] = 0; //@line 10798
     $104 = 0; //@line 10799
     label = 35; //@line 10800
    } else {
     if (($98 & 255) < 5) {
      $104 = $98; //@line 10804
      label = 35; //@line 10805
     } else {
      $124 = $98; //@line 10807
      label = 39; //@line 10808
     }
    }
    if ((label | 0) == 35) {
     label = 0; //@line 10812
     $107 = HEAP32[(HEAP32[$97 >> 2] | 0) + 28 >> 2] | 0; //@line 10816
     $AsyncCtx10 = _emscripten_alloc_async_context(56, sp) | 0; //@line 10817
     $108 = FUNCTION_TABLE_iiii[$107 & 31]($97, $104 & 255, $1) | 0; //@line 10818
     if (___async) {
      label = 36; //@line 10821
      break;
     }
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10824
     if (($108 | 0) < 0) {
      HEAP8[$92 >> 0] = 5; //@line 10827
      $124 = 5; //@line 10828
      label = 39; //@line 10829
     }
    }
    if ((label | 0) == 39) {
     label = 0; //@line 10833
     $126 = 608 + ((($124 & 255) + -5 | 0) * 20 | 0) | 0; //@line 10836
     HEAP32[$$byval_copy51 >> 2] = HEAP32[$126 >> 2]; //@line 10837
     HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$126 + 4 >> 2]; //@line 10837
     HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$126 + 8 >> 2]; //@line 10837
     HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$126 + 12 >> 2]; //@line 10837
     HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$126 + 16 >> 2]; //@line 10837
     __ZN13SocketAddress8set_addrE10nsapi_addr($1, $$byval_copy51); //@line 10838
    }
    __ZN13SocketAddress8set_portEt($1, 53); //@line 10840
    $163 = HEAP32[$96 >> 2] | 0; //@line 10841
    $AsyncCtx37 = _emscripten_alloc_async_context(56, sp) | 0; //@line 10842
    $164 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($163, $1, $24, $90) | 0; //@line 10843
    if (___async) {
     label = 57; //@line 10846
     break;
    }
    _emscripten_free_async_context($AsyncCtx37 | 0); //@line 10849
    if (($164 | 0) >= 0) {
     label = 60; //@line 10852
     break;
    }
    HEAP8[$92 >> 0] = (HEAP8[$92 >> 0] | 0) + 1 << 24 >> 24; //@line 10857
    HEAP32[$2 >> 2] = 0; //@line 10858
    HEAP32[$2 + 4 >> 2] = 0; //@line 10858
    HEAP32[$2 + 8 >> 2] = 0; //@line 10858
    HEAP32[$2 + 12 >> 2] = 0; //@line 10858
    HEAP32[$2 + 16 >> 2] = 0; //@line 10858
    HEAP32[$$byval_copy51 >> 2] = HEAP32[$2 >> 2]; //@line 10859
    HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 10859
    HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 10859
    HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 10859
    HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 10859
    __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy51, 0); //@line 10860
    if (!(HEAP8[$93 >> 0] | 0)) {
     break L59;
    }
   }
   if ((label | 0) == 36) {
    HEAP32[$AsyncCtx10 >> 2] = 235; //@line 10868
    HEAP32[$AsyncCtx10 + 4 >> 2] = $1; //@line 10870
    HEAP32[$AsyncCtx10 + 8 >> 2] = $$byval_copy51; //@line 10872
    HEAP32[$AsyncCtx10 + 12 >> 2] = $$lcssa69; //@line 10874
    HEAP32[$AsyncCtx10 + 16 >> 2] = $92; //@line 10876
    HEAP32[$AsyncCtx10 + 20 >> 2] = $24; //@line 10878
    HEAP32[$AsyncCtx10 + 24 >> 2] = $1; //@line 10880
    HEAP32[$AsyncCtx10 + 28 >> 2] = $94; //@line 10882
    HEAP32[$AsyncCtx10 + 32 >> 2] = $93; //@line 10884
    HEAP32[$AsyncCtx10 + 36 >> 2] = $96; //@line 10886
    HEAP32[$AsyncCtx10 + 40 >> 2] = $90; //@line 10888
    HEAP32[$AsyncCtx10 + 44 >> 2] = $2; //@line 10890
    HEAP32[$AsyncCtx10 + 48 >> 2] = $2; //@line 10892
    HEAP32[$AsyncCtx10 + 52 >> 2] = $91; //@line 10894
    sp = STACKTOP; //@line 10895
    STACKTOP = sp; //@line 10896
    return;
   } else if ((label | 0) == 57) {
    HEAP32[$AsyncCtx37 >> 2] = 241; //@line 10899
    HEAP32[$AsyncCtx37 + 4 >> 2] = $1; //@line 10901
    HEAP32[$AsyncCtx37 + 8 >> 2] = $$byval_copy51; //@line 10903
    HEAP32[$AsyncCtx37 + 12 >> 2] = $$lcssa69; //@line 10905
    HEAP32[$AsyncCtx37 + 16 >> 2] = $92; //@line 10907
    HEAP32[$AsyncCtx37 + 20 >> 2] = $24; //@line 10909
    HEAP32[$AsyncCtx37 + 24 >> 2] = $1; //@line 10911
    HEAP32[$AsyncCtx37 + 28 >> 2] = $94; //@line 10913
    HEAP32[$AsyncCtx37 + 32 >> 2] = $93; //@line 10915
    HEAP32[$AsyncCtx37 + 36 >> 2] = $96; //@line 10917
    HEAP32[$AsyncCtx37 + 40 >> 2] = $90; //@line 10919
    HEAP32[$AsyncCtx37 + 44 >> 2] = $2; //@line 10921
    HEAP32[$AsyncCtx37 + 48 >> 2] = $2; //@line 10923
    HEAP32[$AsyncCtx37 + 52 >> 2] = $91; //@line 10925
    sp = STACKTOP; //@line 10926
    STACKTOP = sp; //@line 10927
    return;
   } else if ((label | 0) == 60) {
    HEAP8[$94 >> 0] = (HEAP8[$94 >> 0] | 0) + 1 << 24 >> 24; //@line 10932
    $184 = HEAP8[$93 >> 0] | 0; //@line 10933
    if ($184 << 24 >> 24) {
     HEAP8[$93 >> 0] = $184 + -1 << 24 >> 24; //@line 10937
    }
    _free($24); //@line 10939
    HEAP32[$$lcssa69 + 76 >> 2] = 5e3; //@line 10941
    STACKTOP = sp; //@line 10942
    return;
   }
  }
 } while (0);
 $127 = $$lcssa69 + 28 | 0; //@line 10946
 $128 = HEAP32[$127 >> 2] | 0; //@line 10947
 do {
  if (!$128) {
   $140 = 0; //@line 10951
  } else {
   $132 = HEAP32[$128 + 4 >> 2] | 0; //@line 10955
   $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10956
   FUNCTION_TABLE_vii[$132 & 7]($$byval_copy51, $$lcssa69 + 16 | 0); //@line 10957
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 236; //@line 10960
    HEAP32[$AsyncCtx14 + 4 >> 2] = $127; //@line 10962
    HEAP32[$AsyncCtx14 + 8 >> 2] = $$byval_copy51; //@line 10964
    HEAP32[$AsyncCtx14 + 12 >> 2] = $$lcssa69; //@line 10966
    HEAP32[$AsyncCtx14 + 16 >> 2] = $$byval_copy51; //@line 10968
    HEAP32[$AsyncCtx14 + 20 >> 2] = $24; //@line 10970
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 10972
    sp = STACKTOP; //@line 10973
    STACKTOP = sp; //@line 10974
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 10976
    $140 = HEAP32[$127 >> 2] | 0; //@line 10978
    break;
   }
  }
 } while (0);
 $139 = $$byval_copy51 + 12 | 0; //@line 10983
 HEAP32[$139 >> 2] = $140; //@line 10984
 $141 = HEAP32[$$lcssa69 >> 2] | 0; //@line 10985
 $AsyncCtx24 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10986
 __ZL28nsapi_dns_query_async_deletei($141); //@line 10987
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 237; //@line 10990
  HEAP32[$AsyncCtx24 + 4 >> 2] = $139; //@line 10992
  HEAP32[$AsyncCtx24 + 8 >> 2] = $$byval_copy51; //@line 10994
  HEAP32[$AsyncCtx24 + 12 >> 2] = $24; //@line 10996
  HEAP32[$AsyncCtx24 + 16 >> 2] = $1; //@line 10998
  sp = STACKTOP; //@line 10999
  STACKTOP = sp; //@line 11000
  return;
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 11002
 $AsyncCtx30 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11003
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 11004
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 238; //@line 11007
  HEAP32[$AsyncCtx30 + 4 >> 2] = $139; //@line 11009
  HEAP32[$AsyncCtx30 + 8 >> 2] = $$byval_copy51; //@line 11011
  HEAP32[$AsyncCtx30 + 12 >> 2] = $24; //@line 11013
  HEAP32[$AsyncCtx30 + 16 >> 2] = $1; //@line 11015
  sp = STACKTOP; //@line 11016
  STACKTOP = sp; //@line 11017
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 11019
 $150 = HEAP32[$139 >> 2] | 0; //@line 11020
 do {
  if ($150 | 0) {
   $152 = HEAP32[$150 >> 2] | 0; //@line 11024
   $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11025
   FUNCTION_TABLE_viii[$152 & 0]($$byval_copy51, -3019, 0); //@line 11026
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 239; //@line 11029
    HEAP32[$AsyncCtx17 + 4 >> 2] = $139; //@line 11031
    HEAP32[$AsyncCtx17 + 8 >> 2] = $$byval_copy51; //@line 11033
    HEAP32[$AsyncCtx17 + 12 >> 2] = $24; //@line 11035
    HEAP32[$AsyncCtx17 + 16 >> 2] = $1; //@line 11037
    sp = STACKTOP; //@line 11038
    STACKTOP = sp; //@line 11039
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11041
   $$pr$i = HEAP32[$139 >> 2] | 0; //@line 11042
   if ($$pr$i | 0) {
    $159 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 11046
    $AsyncCtx21 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11047
    FUNCTION_TABLE_vi[$159 & 511]($$byval_copy51); //@line 11048
    if (___async) {
     HEAP32[$AsyncCtx21 >> 2] = 240; //@line 11051
     HEAP32[$AsyncCtx21 + 4 >> 2] = $$byval_copy51; //@line 11053
     HEAP32[$AsyncCtx21 + 8 >> 2] = $24; //@line 11055
     HEAP32[$AsyncCtx21 + 12 >> 2] = $1; //@line 11057
     sp = STACKTOP; //@line 11058
     STACKTOP = sp; //@line 11059
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx21 | 0); //@line 11061
     break;
    }
   }
  }
 } while (0);
 _free($24); //@line 11067
 STACKTOP = sp; //@line 11068
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_192($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $143 = 0, $146 = 0, $148 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $169 = 0, $172 = 0, $174 = 0, $18 = 0, $187 = 0, $188 = 0, $189 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $69 = 0, $77 = 0, $8 = 0, $80 = 0, $83 = 0, $86 = 0, $93 = 0, $95 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14522
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14524
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14526
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14528
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14530
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14534
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14538
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14540
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14542
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14544
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14546
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 14548
 HEAP32[HEAP32[$0 + 28 >> 2] >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 14550
 $27 = $8 + 32 | 0; //@line 14551
 do {
  if (($27 | 0) != ($18 | 0)) {
   $29 = $8 + 44 | 0; //@line 14555
   $30 = HEAP32[$29 >> 2] | 0; //@line 14556
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 14560
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 14561
    FUNCTION_TABLE_vi[$33 & 511]($27); //@line 14562
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 163; //@line 14565
     $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 14566
     HEAP32[$34 >> 2] = $2; //@line 14567
     $35 = $ReallocAsyncCtx4 + 8 | 0; //@line 14568
     HEAP32[$35 >> 2] = $4; //@line 14569
     $36 = $ReallocAsyncCtx4 + 12 | 0; //@line 14570
     HEAP32[$36 >> 2] = $27; //@line 14571
     $37 = $ReallocAsyncCtx4 + 16 | 0; //@line 14572
     HEAP32[$37 >> 2] = $6; //@line 14573
     $38 = $ReallocAsyncCtx4 + 20 | 0; //@line 14574
     HEAP32[$38 >> 2] = $8; //@line 14575
     $39 = $ReallocAsyncCtx4 + 24 | 0; //@line 14576
     HEAP32[$39 >> 2] = $12; //@line 14577
     $40 = $ReallocAsyncCtx4 + 28 | 0; //@line 14578
     HEAP32[$40 >> 2] = $16; //@line 14579
     $41 = $ReallocAsyncCtx4 + 32 | 0; //@line 14580
     HEAP32[$41 >> 2] = $18; //@line 14581
     $42 = $ReallocAsyncCtx4 + 36 | 0; //@line 14582
     HEAP32[$42 >> 2] = $29; //@line 14583
     $43 = $ReallocAsyncCtx4 + 40 | 0; //@line 14584
     HEAP32[$43 >> 2] = $20; //@line 14585
     $44 = $ReallocAsyncCtx4 + 44 | 0; //@line 14586
     HEAP32[$44 >> 2] = $22; //@line 14587
     $45 = $ReallocAsyncCtx4 + 48 | 0; //@line 14588
     HEAP32[$45 >> 2] = $24; //@line 14589
     $46 = $ReallocAsyncCtx4 + 52 | 0; //@line 14590
     HEAP32[$46 >> 2] = $26; //@line 14591
     sp = STACKTOP; //@line 14592
     return;
    }
    ___async_unwind = 0; //@line 14595
    HEAP32[$ReallocAsyncCtx4 >> 2] = 163; //@line 14596
    $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 14597
    HEAP32[$34 >> 2] = $2; //@line 14598
    $35 = $ReallocAsyncCtx4 + 8 | 0; //@line 14599
    HEAP32[$35 >> 2] = $4; //@line 14600
    $36 = $ReallocAsyncCtx4 + 12 | 0; //@line 14601
    HEAP32[$36 >> 2] = $27; //@line 14602
    $37 = $ReallocAsyncCtx4 + 16 | 0; //@line 14603
    HEAP32[$37 >> 2] = $6; //@line 14604
    $38 = $ReallocAsyncCtx4 + 20 | 0; //@line 14605
    HEAP32[$38 >> 2] = $8; //@line 14606
    $39 = $ReallocAsyncCtx4 + 24 | 0; //@line 14607
    HEAP32[$39 >> 2] = $12; //@line 14608
    $40 = $ReallocAsyncCtx4 + 28 | 0; //@line 14609
    HEAP32[$40 >> 2] = $16; //@line 14610
    $41 = $ReallocAsyncCtx4 + 32 | 0; //@line 14611
    HEAP32[$41 >> 2] = $18; //@line 14612
    $42 = $ReallocAsyncCtx4 + 36 | 0; //@line 14613
    HEAP32[$42 >> 2] = $29; //@line 14614
    $43 = $ReallocAsyncCtx4 + 40 | 0; //@line 14615
    HEAP32[$43 >> 2] = $20; //@line 14616
    $44 = $ReallocAsyncCtx4 + 44 | 0; //@line 14617
    HEAP32[$44 >> 2] = $22; //@line 14618
    $45 = $ReallocAsyncCtx4 + 48 | 0; //@line 14619
    HEAP32[$45 >> 2] = $24; //@line 14620
    $46 = $ReallocAsyncCtx4 + 52 | 0; //@line 14621
    HEAP32[$46 >> 2] = $26; //@line 14622
    sp = STACKTOP; //@line 14623
    return;
   }
   $47 = $18 + 12 | 0; //@line 14626
   $48 = HEAP32[$47 >> 2] | 0; //@line 14627
   if (!$48) {
    HEAP32[$29 >> 2] = 0; //@line 14630
    break;
   }
   $51 = HEAP32[$48 + 4 >> 2] | 0; //@line 14634
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 14635
   FUNCTION_TABLE_vii[$51 & 7]($27, $18); //@line 14636
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 14639
    $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 14640
    HEAP32[$52 >> 2] = $2; //@line 14641
    $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 14642
    HEAP32[$53 >> 2] = $4; //@line 14643
    $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 14644
    HEAP32[$54 >> 2] = $27; //@line 14645
    $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 14646
    HEAP32[$55 >> 2] = $6; //@line 14647
    $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 14648
    HEAP32[$56 >> 2] = $8; //@line 14649
    $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 14650
    HEAP32[$57 >> 2] = $47; //@line 14651
    $58 = $ReallocAsyncCtx5 + 28 | 0; //@line 14652
    HEAP32[$58 >> 2] = $12; //@line 14653
    $59 = $ReallocAsyncCtx5 + 32 | 0; //@line 14654
    HEAP32[$59 >> 2] = $16; //@line 14655
    $60 = $ReallocAsyncCtx5 + 36 | 0; //@line 14656
    HEAP32[$60 >> 2] = $29; //@line 14657
    $61 = $ReallocAsyncCtx5 + 40 | 0; //@line 14658
    HEAP32[$61 >> 2] = $20; //@line 14659
    $62 = $ReallocAsyncCtx5 + 44 | 0; //@line 14660
    HEAP32[$62 >> 2] = $22; //@line 14661
    $63 = $ReallocAsyncCtx5 + 48 | 0; //@line 14662
    HEAP32[$63 >> 2] = $24; //@line 14663
    $64 = $ReallocAsyncCtx5 + 52 | 0; //@line 14664
    HEAP32[$64 >> 2] = $26; //@line 14665
    sp = STACKTOP; //@line 14666
    return;
   }
   ___async_unwind = 0; //@line 14669
   HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 14670
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 14671
   HEAP32[$52 >> 2] = $2; //@line 14672
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 14673
   HEAP32[$53 >> 2] = $4; //@line 14674
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 14675
   HEAP32[$54 >> 2] = $27; //@line 14676
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 14677
   HEAP32[$55 >> 2] = $6; //@line 14678
   $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 14679
   HEAP32[$56 >> 2] = $8; //@line 14680
   $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 14681
   HEAP32[$57 >> 2] = $47; //@line 14682
   $58 = $ReallocAsyncCtx5 + 28 | 0; //@line 14683
   HEAP32[$58 >> 2] = $12; //@line 14684
   $59 = $ReallocAsyncCtx5 + 32 | 0; //@line 14685
   HEAP32[$59 >> 2] = $16; //@line 14686
   $60 = $ReallocAsyncCtx5 + 36 | 0; //@line 14687
   HEAP32[$60 >> 2] = $29; //@line 14688
   $61 = $ReallocAsyncCtx5 + 40 | 0; //@line 14689
   HEAP32[$61 >> 2] = $20; //@line 14690
   $62 = $ReallocAsyncCtx5 + 44 | 0; //@line 14691
   HEAP32[$62 >> 2] = $22; //@line 14692
   $63 = $ReallocAsyncCtx5 + 48 | 0; //@line 14693
   HEAP32[$63 >> 2] = $24; //@line 14694
   $64 = $ReallocAsyncCtx5 + 52 | 0; //@line 14695
   HEAP32[$64 >> 2] = $26; //@line 14696
   sp = STACKTOP; //@line 14697
   return;
  }
 } while (0);
 HEAP32[$8 + 8 >> 2] = $6; //@line 14702
 HEAP32[$8 + 48 >> 2] = $20; //@line 14704
 HEAP32[$8 + 52 >> 2] = $22; //@line 14706
 $68 = $8 + 56 | 0; //@line 14707
 HEAP32[$68 >> 2] = 0; //@line 14708
 $69 = $8 + 60 | 0; //@line 14709
 HEAP32[$69 >> 2] = 0; //@line 14710
 HEAP32[$8 + 64 >> 2] = 0; //@line 14712
 HEAP8[$8 + 82 >> 0] = 0; //@line 14714
 HEAP8[$8 + 83 >> 0] = 1; //@line 14716
 HEAP8[$8 + 84 >> 0] = 3; //@line 14718
 HEAP8[$8 + 85 >> 0] = 0; //@line 14720
 HEAP16[$8 + 80 >> 1] = 0; //@line 14722
 HEAP32[$8 + 76 >> 2] = 0; //@line 14724
 $77 = $8 + 72 | 0; //@line 14725
 HEAP32[$77 >> 2] = 15500; //@line 14726
 HEAP8[$8 + 86 >> 0] = 0; //@line 14728
 HEAP32[$8 + 88 >> 2] = 0; //@line 14730
 $80 = HEAP32[177] | 0; //@line 14731
 HEAP32[177] = $80 + 1; //@line 14733
 HEAP32[$8 >> 2] = ($80 | 0) > 32767 ? 1 : $80; //@line 14736
 $83 = HEAP32[1675] | 0; //@line 14737
 if (!$83) {
  $$1 = 0; //@line 14740
  $133 = 0; //@line 14740
 } else {
  $86 = HEAP32[$83 + 56 >> 2] | 0; //@line 14743
  if (!$86) {
   $$1 = 1; //@line 14746
   $133 = 0; //@line 14746
  } else {
   if ((HEAP32[$83 + 8 >> 2] | 0) == ($6 | 0)) {
    HEAP32[$68 >> 2] = $86; //@line 14752
    HEAP32[$69 >> 2] = HEAP32[$83 + 60 >> 2]; //@line 14755
    $$1 = 1; //@line 14756
    $133 = $86; //@line 14756
   } else {
    $$1 = 1; //@line 14758
    $133 = 0; //@line 14758
   }
  }
 }
 $93 = HEAP32[1676] | 0; //@line 14762
 if (!$93) {
  $$1$1 = $$1; //@line 14765
  $146 = $133; //@line 14765
 } else {
  if (!$133) {
   $135 = HEAP32[$93 + 56 >> 2] | 0; //@line 14770
   if (!$135) {
    $187 = 0; //@line 14773
   } else {
    if ((HEAP32[$93 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$68 >> 2] = $135; //@line 14779
     HEAP32[$69 >> 2] = HEAP32[$93 + 60 >> 2]; //@line 14782
     $187 = $135; //@line 14783
    } else {
     $187 = 0; //@line 14785
    }
   }
  } else {
   $187 = $133; //@line 14789
  }
  $$1$1 = $$1 + 1 | 0; //@line 14792
  $146 = $187; //@line 14792
 }
 $143 = HEAP32[1677] | 0; //@line 14794
 if (!$143) {
  $$1$2 = $$1$1; //@line 14797
  $159 = $146; //@line 14797
 } else {
  if (!$146) {
   $148 = HEAP32[$143 + 56 >> 2] | 0; //@line 14802
   if (!$148) {
    $188 = 0; //@line 14805
   } else {
    if ((HEAP32[$143 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$68 >> 2] = $148; //@line 14811
     HEAP32[$69 >> 2] = HEAP32[$143 + 60 >> 2]; //@line 14814
     $188 = $148; //@line 14815
    } else {
     $188 = 0; //@line 14817
    }
   }
  } else {
   $188 = $146; //@line 14821
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 14824
  $159 = $188; //@line 14824
 }
 $156 = HEAP32[1678] | 0; //@line 14826
 if (!$156) {
  $$1$3 = $$1$2; //@line 14829
  $172 = $159; //@line 14829
 } else {
  if (!$159) {
   $161 = HEAP32[$156 + 56 >> 2] | 0; //@line 14834
   if (!$161) {
    $189 = 0; //@line 14837
   } else {
    if ((HEAP32[$156 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$68 >> 2] = $161; //@line 14843
     HEAP32[$69 >> 2] = HEAP32[$156 + 60 >> 2]; //@line 14846
     $189 = $161; //@line 14847
    } else {
     $189 = 0; //@line 14849
    }
   }
  } else {
   $189 = $159; //@line 14853
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 14856
  $172 = $189; //@line 14856
 }
 $169 = HEAP32[1679] | 0; //@line 14858
 if (!$169) {
  $$1$4 = $$1$3; //@line 14861
 } else {
  if (!$172) {
   $174 = HEAP32[$169 + 56 >> 2] | 0; //@line 14866
   if ($174 | 0) {
    if ((HEAP32[$169 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$68 >> 2] = $174; //@line 14873
     HEAP32[$69 >> 2] = HEAP32[$169 + 60 >> 2]; //@line 14876
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 14881
 }
 HEAP32[6700 + ($26 << 2) >> 2] = $8; //@line 14884
 HEAP32[$77 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 14887
 if (HEAP8[7580] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 14891
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 14892
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 14895
   $130 = $ReallocAsyncCtx13 + 4 | 0; //@line 14896
   HEAP32[$130 >> 2] = $8; //@line 14897
   $131 = $ReallocAsyncCtx13 + 8 | 0; //@line 14898
   HEAP32[$131 >> 2] = $24; //@line 14899
   sp = STACKTOP; //@line 14900
   return;
  }
  ___async_unwind = 0; //@line 14903
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 14904
  $130 = $ReallocAsyncCtx13 + 4 | 0; //@line 14905
  HEAP32[$130 >> 2] = $8; //@line 14906
  $131 = $ReallocAsyncCtx13 + 8 | 0; //@line 14907
  HEAP32[$131 >> 2] = $24; //@line 14908
  sp = STACKTOP; //@line 14909
  return;
 }
 $95 = $8 + 44 | 0; //@line 14912
 $96 = HEAP32[$95 >> 2] | 0; //@line 14913
 if (!$96) {
  $110 = $2 + 12 | 0; //@line 14916
  HEAP32[$110 >> 2] = 0; //@line 14917
  $112 = $4 + 4 | 0; //@line 14919
  HEAP32[$112 >> 2] = 0; //@line 14921
  HEAP32[$112 + 4 >> 2] = 0; //@line 14924
  HEAP32[$4 >> 2] = 3; //@line 14925
  $116 = $4 + 12 | 0; //@line 14926
  HEAP32[$116 >> 2] = 712; //@line 14927
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 14928
  $117 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $4) | 0; //@line 14929
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 14932
   $118 = $ReallocAsyncCtx14 + 4 | 0; //@line 14933
   HEAP32[$118 >> 2] = $4; //@line 14934
   $119 = $ReallocAsyncCtx14 + 8 | 0; //@line 14935
   HEAP32[$119 >> 2] = $8; //@line 14936
   $120 = $ReallocAsyncCtx14 + 12 | 0; //@line 14937
   HEAP32[$120 >> 2] = $16; //@line 14938
   $121 = $ReallocAsyncCtx14 + 16 | 0; //@line 14939
   HEAP32[$121 >> 2] = $24; //@line 14940
   $122 = $ReallocAsyncCtx14 + 20 | 0; //@line 14941
   HEAP32[$122 >> 2] = $95; //@line 14942
   $123 = $ReallocAsyncCtx14 + 24 | 0; //@line 14943
   HEAP32[$123 >> 2] = $8; //@line 14944
   $124 = $ReallocAsyncCtx14 + 28 | 0; //@line 14945
   HEAP32[$124 >> 2] = $116; //@line 14946
   $125 = $ReallocAsyncCtx14 + 32 | 0; //@line 14947
   HEAP32[$125 >> 2] = $27; //@line 14948
   $126 = $ReallocAsyncCtx14 + 36 | 0; //@line 14949
   HEAP32[$126 >> 2] = $2; //@line 14950
   $127 = $ReallocAsyncCtx14 + 40 | 0; //@line 14951
   HEAP32[$127 >> 2] = $110; //@line 14952
   $128 = $ReallocAsyncCtx14 + 44 | 0; //@line 14953
   HEAP32[$128 >> 2] = $12; //@line 14954
   sp = STACKTOP; //@line 14955
   return;
  }
  HEAP32[___async_retval >> 2] = $117; //@line 14959
  ___async_unwind = 0; //@line 14960
  HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 14961
  $118 = $ReallocAsyncCtx14 + 4 | 0; //@line 14962
  HEAP32[$118 >> 2] = $4; //@line 14963
  $119 = $ReallocAsyncCtx14 + 8 | 0; //@line 14964
  HEAP32[$119 >> 2] = $8; //@line 14965
  $120 = $ReallocAsyncCtx14 + 12 | 0; //@line 14966
  HEAP32[$120 >> 2] = $16; //@line 14967
  $121 = $ReallocAsyncCtx14 + 16 | 0; //@line 14968
  HEAP32[$121 >> 2] = $24; //@line 14969
  $122 = $ReallocAsyncCtx14 + 20 | 0; //@line 14970
  HEAP32[$122 >> 2] = $95; //@line 14971
  $123 = $ReallocAsyncCtx14 + 24 | 0; //@line 14972
  HEAP32[$123 >> 2] = $8; //@line 14973
  $124 = $ReallocAsyncCtx14 + 28 | 0; //@line 14974
  HEAP32[$124 >> 2] = $116; //@line 14975
  $125 = $ReallocAsyncCtx14 + 32 | 0; //@line 14976
  HEAP32[$125 >> 2] = $27; //@line 14977
  $126 = $ReallocAsyncCtx14 + 36 | 0; //@line 14978
  HEAP32[$126 >> 2] = $2; //@line 14979
  $127 = $ReallocAsyncCtx14 + 40 | 0; //@line 14980
  HEAP32[$127 >> 2] = $110; //@line 14981
  $128 = $ReallocAsyncCtx14 + 44 | 0; //@line 14982
  HEAP32[$128 >> 2] = $12; //@line 14983
  sp = STACKTOP; //@line 14984
  return;
 } else {
  $99 = HEAP32[$96 + 4 >> 2] | 0; //@line 14988
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 14989
  FUNCTION_TABLE_vii[$99 & 7]($2, $27); //@line 14990
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 14993
   $100 = $ReallocAsyncCtx6 + 4 | 0; //@line 14994
   HEAP32[$100 >> 2] = $2; //@line 14995
   $101 = $ReallocAsyncCtx6 + 8 | 0; //@line 14996
   HEAP32[$101 >> 2] = $4; //@line 14997
   $102 = $ReallocAsyncCtx6 + 12 | 0; //@line 14998
   HEAP32[$102 >> 2] = $95; //@line 14999
   $103 = $ReallocAsyncCtx6 + 16 | 0; //@line 15000
   HEAP32[$103 >> 2] = $8; //@line 15001
   $104 = $ReallocAsyncCtx6 + 20 | 0; //@line 15002
   HEAP32[$104 >> 2] = $8; //@line 15003
   $105 = $ReallocAsyncCtx6 + 24 | 0; //@line 15004
   HEAP32[$105 >> 2] = $27; //@line 15005
   $106 = $ReallocAsyncCtx6 + 28 | 0; //@line 15006
   HEAP32[$106 >> 2] = $12; //@line 15007
   $107 = $ReallocAsyncCtx6 + 32 | 0; //@line 15008
   HEAP32[$107 >> 2] = $16; //@line 15009
   $108 = $ReallocAsyncCtx6 + 36 | 0; //@line 15010
   HEAP32[$108 >> 2] = $24; //@line 15011
   $109 = $ReallocAsyncCtx6 + 40 | 0; //@line 15012
   HEAP32[$109 >> 2] = $95; //@line 15013
   sp = STACKTOP; //@line 15014
   return;
  }
  ___async_unwind = 0; //@line 15017
  HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 15018
  $100 = $ReallocAsyncCtx6 + 4 | 0; //@line 15019
  HEAP32[$100 >> 2] = $2; //@line 15020
  $101 = $ReallocAsyncCtx6 + 8 | 0; //@line 15021
  HEAP32[$101 >> 2] = $4; //@line 15022
  $102 = $ReallocAsyncCtx6 + 12 | 0; //@line 15023
  HEAP32[$102 >> 2] = $95; //@line 15024
  $103 = $ReallocAsyncCtx6 + 16 | 0; //@line 15025
  HEAP32[$103 >> 2] = $8; //@line 15026
  $104 = $ReallocAsyncCtx6 + 20 | 0; //@line 15027
  HEAP32[$104 >> 2] = $8; //@line 15028
  $105 = $ReallocAsyncCtx6 + 24 | 0; //@line 15029
  HEAP32[$105 >> 2] = $27; //@line 15030
  $106 = $ReallocAsyncCtx6 + 28 | 0; //@line 15031
  HEAP32[$106 >> 2] = $12; //@line 15032
  $107 = $ReallocAsyncCtx6 + 32 | 0; //@line 15033
  HEAP32[$107 >> 2] = $16; //@line 15034
  $108 = $ReallocAsyncCtx6 + 36 | 0; //@line 15035
  HEAP32[$108 >> 2] = $24; //@line 15036
  $109 = $ReallocAsyncCtx6 + 40 | 0; //@line 15037
  HEAP32[$109 >> 2] = $95; //@line 15038
  sp = STACKTOP; //@line 15039
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$048$i = 0, $$094 = 0, $$097 = 0, $$1105 = 0, $$1106 = 0, $$1107 = 0, $$170 = 0, $$2 = 0, $$296$ph113 = 0, $$299 = 0, $$3 = 0, $$3100 = 0, $$393$ph114 = 0, $$4$ph = 0, $$4110 = 0, $$byval_copy29 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $101 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $162 = 0, $164 = 0, $174 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $78 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5505
 STACKTOP = STACKTOP + 176 | 0; //@line 5506
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 5506
 $$byval_copy29 = sp + 144 | 0; //@line 5507
 $5 = sp + 88 | 0; //@line 5508
 $6 = sp; //@line 5509
 $7 = sp + 64 | 0; //@line 5510
 if (!$1) {
  $$3 = -3003; //@line 5513
  STACKTOP = sp; //@line 5514
  return $$3 | 0; //@line 5514
 }
 $9 = _strlen($1) | 0; //@line 5516
 if (($9 | 0) > 255 | ($9 | 0) == 0) {
  $$3 = -3003; //@line 5521
  STACKTOP = sp; //@line 5522
  return $$3 | 0; //@line 5522
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $4, $2) | 0)) {
  $$3 = 1; //@line 5527
  STACKTOP = sp; //@line 5528
  return $$3 | 0; //@line 5528
 }
 __ZN9UDPSocketC2Ev($5); //@line 5530
 $AsyncCtx21 = _emscripten_alloc_async_context(48, sp) | 0; //@line 5531
 $14 = __ZN6Socket4openEP12NetworkStack($5, $0) | 0; //@line 5532
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 142; //@line 5535
  HEAP32[$AsyncCtx21 + 4 >> 2] = $5; //@line 5537
  HEAP32[$AsyncCtx21 + 8 >> 2] = $5; //@line 5539
  HEAP32[$AsyncCtx21 + 12 >> 2] = $5; //@line 5541
  HEAP32[$AsyncCtx21 + 16 >> 2] = $6; //@line 5543
  HEAP32[$AsyncCtx21 + 20 >> 2] = $7; //@line 5545
  HEAP32[$AsyncCtx21 + 24 >> 2] = $0; //@line 5547
  HEAP32[$AsyncCtx21 + 28 >> 2] = $1; //@line 5549
  HEAP32[$AsyncCtx21 + 32 >> 2] = $$byval_copy29; //@line 5551
  HEAP32[$AsyncCtx21 + 36 >> 2] = $2; //@line 5553
  HEAP32[$AsyncCtx21 + 40 >> 2] = $3; //@line 5555
  HEAP32[$AsyncCtx21 + 44 >> 2] = $4; //@line 5557
  sp = STACKTOP; //@line 5558
  STACKTOP = sp; //@line 5559
  return 0; //@line 5559
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 5561
 do {
  if (!$14) {
   __ZN6Socket11set_timeoutEi($5, 5e3); //@line 5565
   $27 = _malloc(512) | 0; //@line 5566
   if (!$27) {
    $$2 = -3007; //@line 5569
   } else {
    $29 = $27; //@line 5571
    $30 = $27 + 1 | 0; //@line 5572
    $31 = $27 + 2 | 0; //@line 5573
    $32 = $27 + 3 | 0; //@line 5574
    $33 = $27 + 4 | 0; //@line 5575
    $34 = $27 + 5 | 0; //@line 5576
    $35 = $27 + 6 | 0; //@line 5577
    $36 = $27 + 12 | 0; //@line 5578
    $$sink$i = ($4 | 0) == 2 ? 28 : 1; //@line 5580
    $$0 = 0; //@line 5581
    $$094 = 3; //@line 5581
    $$097 = 0; //@line 5581
    while (1) {
     HEAP32[$7 >> 2] = 0; //@line 5583
     HEAP32[$7 + 4 >> 2] = 0; //@line 5583
     HEAP32[$7 + 8 >> 2] = 0; //@line 5583
     HEAP32[$7 + 12 >> 2] = 0; //@line 5583
     HEAP32[$7 + 16 >> 2] = 0; //@line 5583
     HEAP32[$$byval_copy29 >> 2] = HEAP32[$7 >> 2]; //@line 5584
     HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 5584
     HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 5584
     HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 5584
     HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 5584
     __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy29, 0); //@line 5585
     if (!($$094 << 24 >> 24)) {
      $$4$ph = -3009; //@line 5588
      label = 32; //@line 5589
      break;
     }
     if (($$097 & 255) > 9) {
      if (!($$0 << 24 >> 24)) {
       $$4$ph = -3009; //@line 5596
       label = 32; //@line 5597
       break;
      } else {
       $$1107 = 0; //@line 5600
       $43 = 0; //@line 5600
       label = 13; //@line 5601
      }
     } else {
      if (($$097 & 255) < 5) {
       $$1107 = $$0; //@line 5606
       $43 = $$097; //@line 5606
       label = 13; //@line 5607
      } else {
       $$1106 = $$0; //@line 5609
       $$299 = $$097; //@line 5609
       label = 16; //@line 5610
      }
     }
     if ((label | 0) == 13) {
      label = 0; //@line 5614
      $46 = HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0; //@line 5618
      $AsyncCtx = _emscripten_alloc_async_context(108, sp) | 0; //@line 5619
      $47 = FUNCTION_TABLE_iiii[$46 & 31]($0, $43 & 255, $6) | 0; //@line 5620
      if (___async) {
       label = 14; //@line 5623
       break;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 5626
      if (($47 | 0) < 0) {
       $$1106 = $$1107; //@line 5629
       $$299 = 5; //@line 5629
       label = 16; //@line 5630
      } else {
       $$1105 = $$1107; //@line 5632
       $$3100 = $43; //@line 5632
      }
     }
     if ((label | 0) == 16) {
      label = 0; //@line 5636
      $78 = 608 + ((($$299 & 255) + -5 | 0) * 20 | 0) | 0; //@line 5639
      HEAP32[$$byval_copy29 >> 2] = HEAP32[$78 >> 2]; //@line 5640
      HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$78 + 4 >> 2]; //@line 5640
      HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$78 + 8 >> 2]; //@line 5640
      HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$78 + 12 >> 2]; //@line 5640
      HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$78 + 16 >> 2]; //@line 5640
      __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy29); //@line 5641
      $$1105 = $$1106; //@line 5642
      $$3100 = $$299; //@line 5642
     }
     __ZN13SocketAddress8set_portEt($6, 53); //@line 5644
     HEAP8[$27 >> 0] = 0; //@line 5645
     HEAP8[$30 >> 0] = 1; //@line 5646
     HEAP8[$31 >> 0] = 1; //@line 5647
     HEAP8[$32 >> 0] = 0; //@line 5648
     HEAP8[$33 >> 0] = 0; //@line 5649
     HEAP8[$34 >> 0] = 1; //@line 5650
     HEAP8[$35 >> 0] = 0; //@line 5651
     HEAP8[$35 + 1 >> 0] = 0; //@line 5651
     HEAP8[$35 + 2 >> 0] = 0; //@line 5651
     HEAP8[$35 + 3 >> 0] = 0; //@line 5651
     HEAP8[$35 + 4 >> 0] = 0; //@line 5651
     HEAP8[$35 + 5 >> 0] = 0; //@line 5651
     if (!(HEAP8[$1 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $36; //@line 5655
     } else {
      $$048$i = $1; //@line 5657
      $$sroa$0$0$in47$i = $36; //@line 5657
      while (1) {
       $81 = _strcspn($$048$i, 3975) | 0; //@line 5659
       $83 = $$sroa$0$0$in47$i + 1 | 0; //@line 5661
       HEAP8[$$sroa$0$0$in47$i >> 0] = $81; //@line 5662
       $84 = $81 & 255; //@line 5663
       _memcpy($83 | 0, $$048$i | 0, $84 | 0) | 0; //@line 5664
       $85 = $83 + $84 | 0; //@line 5665
       $$048$i = $$048$i + ($81 + ((HEAP8[$$048$i + $81 >> 0] | 0) == 46 & 1)) | 0; //@line 5671
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $85; //@line 5675
        break;
       } else {
        $$sroa$0$0$in47$i = $85; //@line 5678
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 5683
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 5685
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 5687
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 5689
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 5692
     $AsyncCtx9 = _emscripten_alloc_async_context(108, sp) | 0; //@line 5694
     $101 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $27, $$sroa$0$0$in$lcssa$i + 5 - $29 | 0) | 0; //@line 5695
     if (___async) {
      label = 20; //@line 5698
      break;
     }
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5701
     if (($101 | 0) < 0) {
      $$296$ph113 = $$094; //@line 5704
      $$393$ph114 = $$1105; //@line 5704
     } else {
      $130 = $$1105 + 1 << 24 >> 24; //@line 5706
      $131 = $$094 + -1 << 24 >> 24; //@line 5707
      $AsyncCtx6 = _emscripten_alloc_async_context(104, sp) | 0; //@line 5708
      $132 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $27, 512) | 0; //@line 5709
      if (___async) {
       label = 23; //@line 5712
       break;
      }
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5715
      if (($132 | 0) == -3001) {
       $$296$ph113 = $131; //@line 5718
       $$393$ph114 = $130; //@line 5718
      } else {
       if (($132 | 0) < 0) {
        $$4$ph = $132; //@line 5722
        label = 32; //@line 5723
        break;
       }
       $162 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($27, 1, $$byval_copy29, $2, $3) | 0; //@line 5726
       if (($162 | 0) > 0) {
        label = 27; //@line 5729
        break;
       }
       if (($162 | 0) >= 0) {
        $$170 = -3009; //@line 5734
        label = 31; //@line 5735
        break;
       }
       $$0 = $130; //@line 5738
       $$094 = $131; //@line 5738
       $$097 = $$3100; //@line 5738
       continue;
      }
     }
     $$0 = $$393$ph114; //@line 5743
     $$094 = $$296$ph113; //@line 5743
     $$097 = $$3100 + 1 << 24 >> 24; //@line 5743
    }
    do {
     if ((label | 0) == 14) {
      HEAP32[$AsyncCtx >> 2] = 143; //@line 5747
      HEAP32[$AsyncCtx + 4 >> 2] = $27; //@line 5749
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5751
      HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 5753
      HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 5755
      HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 5757
      HEAP32[$AsyncCtx + 24 >> 2] = $7; //@line 5759
      HEAP32[$AsyncCtx + 28 >> 2] = $6; //@line 5761
      HEAP32[$AsyncCtx + 32 >> 2] = $7; //@line 5763
      HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 5765
      HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 5767
      HEAP8[$AsyncCtx + 44 >> 0] = $$1107; //@line 5769
      HEAP8[$AsyncCtx + 45 >> 0] = $43; //@line 5771
      HEAP32[$AsyncCtx + 48 >> 2] = $30; //@line 5773
      HEAP32[$AsyncCtx + 52 >> 2] = $31; //@line 5775
      HEAP32[$AsyncCtx + 56 >> 2] = $32; //@line 5777
      HEAP32[$AsyncCtx + 60 >> 2] = $33; //@line 5779
      HEAP32[$AsyncCtx + 64 >> 2] = $34; //@line 5781
      HEAP32[$AsyncCtx + 68 >> 2] = $35; //@line 5783
      HEAP32[$AsyncCtx + 72 >> 2] = $1; //@line 5785
      HEAP32[$AsyncCtx + 76 >> 2] = $36; //@line 5787
      HEAP8[$AsyncCtx + 80 >> 0] = $$sink$i; //@line 5789
      HEAP32[$AsyncCtx + 84 >> 2] = $29; //@line 5791
      HEAP8[$AsyncCtx + 88 >> 0] = $$094; //@line 5793
      HEAP32[$AsyncCtx + 92 >> 2] = $$byval_copy29; //@line 5795
      HEAP32[$AsyncCtx + 96 >> 2] = $$byval_copy29; //@line 5797
      HEAP32[$AsyncCtx + 100 >> 2] = $2; //@line 5799
      HEAP32[$AsyncCtx + 104 >> 2] = $3; //@line 5801
      sp = STACKTOP; //@line 5802
      STACKTOP = sp; //@line 5803
      return 0; //@line 5803
     } else if ((label | 0) == 20) {
      HEAP32[$AsyncCtx9 >> 2] = 144; //@line 5806
      HEAP32[$AsyncCtx9 + 4 >> 2] = $$byval_copy29; //@line 5808
      HEAP32[$AsyncCtx9 + 8 >> 2] = $6; //@line 5810
      HEAP32[$AsyncCtx9 + 12 >> 2] = $27; //@line 5812
      HEAP32[$AsyncCtx9 + 16 >> 2] = $5; //@line 5814
      HEAP32[$AsyncCtx9 + 20 >> 2] = $5; //@line 5816
      HEAP32[$AsyncCtx9 + 24 >> 2] = $5; //@line 5818
      HEAP8[$AsyncCtx9 + 28 >> 0] = $$3100; //@line 5820
      HEAP32[$AsyncCtx9 + 32 >> 2] = $7; //@line 5822
      HEAP32[$AsyncCtx9 + 36 >> 2] = $6; //@line 5824
      HEAP32[$AsyncCtx9 + 40 >> 2] = $7; //@line 5826
      HEAP32[$AsyncCtx9 + 44 >> 2] = $0; //@line 5828
      HEAP32[$AsyncCtx9 + 48 >> 2] = $0; //@line 5830
      HEAP32[$AsyncCtx9 + 52 >> 2] = $30; //@line 5832
      HEAP32[$AsyncCtx9 + 56 >> 2] = $31; //@line 5834
      HEAP32[$AsyncCtx9 + 60 >> 2] = $32; //@line 5836
      HEAP32[$AsyncCtx9 + 64 >> 2] = $33; //@line 5838
      HEAP32[$AsyncCtx9 + 68 >> 2] = $34; //@line 5840
      HEAP32[$AsyncCtx9 + 72 >> 2] = $35; //@line 5842
      HEAP32[$AsyncCtx9 + 76 >> 2] = $1; //@line 5844
      HEAP32[$AsyncCtx9 + 80 >> 2] = $36; //@line 5846
      HEAP8[$AsyncCtx9 + 84 >> 0] = $$sink$i; //@line 5848
      HEAP32[$AsyncCtx9 + 88 >> 2] = $29; //@line 5850
      HEAP32[$AsyncCtx9 + 92 >> 2] = $$byval_copy29; //@line 5852
      HEAP32[$AsyncCtx9 + 96 >> 2] = $2; //@line 5854
      HEAP32[$AsyncCtx9 + 100 >> 2] = $3; //@line 5856
      HEAP8[$AsyncCtx9 + 104 >> 0] = $$1105; //@line 5858
      HEAP8[$AsyncCtx9 + 105 >> 0] = $$094; //@line 5860
      sp = STACKTOP; //@line 5861
      STACKTOP = sp; //@line 5862
      return 0; //@line 5862
     } else if ((label | 0) == 23) {
      HEAP32[$AsyncCtx6 >> 2] = 145; //@line 5865
      HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy29; //@line 5867
      HEAP32[$AsyncCtx6 + 8 >> 2] = $6; //@line 5869
      HEAP32[$AsyncCtx6 + 12 >> 2] = $27; //@line 5871
      HEAP32[$AsyncCtx6 + 16 >> 2] = $5; //@line 5873
      HEAP32[$AsyncCtx6 + 20 >> 2] = $5; //@line 5875
      HEAP32[$AsyncCtx6 + 24 >> 2] = $5; //@line 5877
      HEAP8[$AsyncCtx6 + 28 >> 0] = $$3100; //@line 5879
      HEAP8[$AsyncCtx6 + 29 >> 0] = $131; //@line 5881
      HEAP8[$AsyncCtx6 + 30 >> 0] = $130; //@line 5883
      HEAP32[$AsyncCtx6 + 32 >> 2] = $7; //@line 5885
      HEAP32[$AsyncCtx6 + 36 >> 2] = $6; //@line 5887
      HEAP32[$AsyncCtx6 + 40 >> 2] = $7; //@line 5889
      HEAP32[$AsyncCtx6 + 44 >> 2] = $0; //@line 5891
      HEAP32[$AsyncCtx6 + 48 >> 2] = $0; //@line 5893
      HEAP32[$AsyncCtx6 + 52 >> 2] = $30; //@line 5895
      HEAP32[$AsyncCtx6 + 56 >> 2] = $31; //@line 5897
      HEAP32[$AsyncCtx6 + 60 >> 2] = $32; //@line 5899
      HEAP32[$AsyncCtx6 + 64 >> 2] = $33; //@line 5901
      HEAP32[$AsyncCtx6 + 68 >> 2] = $34; //@line 5903
      HEAP32[$AsyncCtx6 + 72 >> 2] = $35; //@line 5905
      HEAP32[$AsyncCtx6 + 76 >> 2] = $1; //@line 5907
      HEAP32[$AsyncCtx6 + 80 >> 2] = $36; //@line 5909
      HEAP8[$AsyncCtx6 + 84 >> 0] = $$sink$i; //@line 5911
      HEAP32[$AsyncCtx6 + 88 >> 2] = $29; //@line 5913
      HEAP32[$AsyncCtx6 + 92 >> 2] = $$byval_copy29; //@line 5915
      HEAP32[$AsyncCtx6 + 96 >> 2] = $2; //@line 5917
      HEAP32[$AsyncCtx6 + 100 >> 2] = $3; //@line 5919
      sp = STACKTOP; //@line 5920
      STACKTOP = sp; //@line 5921
      return 0; //@line 5921
     } else if ((label | 0) == 27) {
      $164 = HEAP32[$$byval_copy29 >> 2] | 0; //@line 5924
      $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5925
      __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($1, $2, $164); //@line 5926
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 146; //@line 5929
       HEAP32[$AsyncCtx2 + 4 >> 2] = $162; //@line 5931
       HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy29; //@line 5933
       HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 5935
       HEAP32[$AsyncCtx2 + 16 >> 2] = $27; //@line 5937
       HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 5939
       HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 5941
       HEAP32[$AsyncCtx2 + 28 >> 2] = $5; //@line 5943
       sp = STACKTOP; //@line 5944
       STACKTOP = sp; //@line 5945
       return 0; //@line 5945
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5947
       $$170 = $162; //@line 5948
       label = 31; //@line 5949
       break;
      }
     } else if ((label | 0) == 32) {
      $$4110 = $$4$ph; //@line 5954
     }
    } while (0);
    if ((label | 0) == 31) {
     $$4110 = $$170; //@line 5958
    }
    _free($27); //@line 5960
    $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5961
    $174 = __ZN6Socket5closeEv($5) | 0; //@line 5962
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 147; //@line 5965
     HEAP32[$AsyncCtx17 + 4 >> 2] = $$4110; //@line 5967
     HEAP32[$AsyncCtx17 + 8 >> 2] = $5; //@line 5969
     HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 5971
     sp = STACKTOP; //@line 5972
     STACKTOP = sp; //@line 5973
     return 0; //@line 5973
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 5975
     $$2 = ($174 | 0) == 0 ? $$4110 : $174; //@line 5978
     break;
    }
   }
  } else {
   $$2 = $14; //@line 5983
  }
 } while (0);
 $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5986
 __ZN9UDPSocketD2Ev($5); //@line 5987
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 148; //@line 5990
  HEAP32[$AsyncCtx13 + 4 >> 2] = $5; //@line 5992
  HEAP32[$AsyncCtx13 + 8 >> 2] = $$2; //@line 5994
  sp = STACKTOP; //@line 5995
  STACKTOP = sp; //@line 5996
  return 0; //@line 5996
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 5998
 $$3 = $$2; //@line 5999
 STACKTOP = sp; //@line 6000
 return $$3 | 0; //@line 6000
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 2372
 $3 = HEAP32[1687] | 0; //@line 2373
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 2376
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 2380
 $7 = $6 & 3; //@line 2381
 if (($7 | 0) == 1) {
  _abort(); //@line 2384
 }
 $9 = $6 & -8; //@line 2387
 $10 = $2 + $9 | 0; //@line 2388
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 2393
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 2399
   $17 = $13 + $9 | 0; //@line 2400
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 2403
   }
   if ((HEAP32[1688] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 2409
    $106 = HEAP32[$105 >> 2] | 0; //@line 2410
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 2414
     $$1382 = $17; //@line 2414
     $114 = $16; //@line 2414
     break;
    }
    HEAP32[1685] = $17; //@line 2417
    HEAP32[$105 >> 2] = $106 & -2; //@line 2419
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 2422
    HEAP32[$16 + $17 >> 2] = $17; //@line 2424
    return;
   }
   $21 = $13 >>> 3; //@line 2427
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 2431
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 2433
    $28 = 6772 + ($21 << 1 << 2) | 0; //@line 2435
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 2440
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2447
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[1683] = HEAP32[1683] & ~(1 << $21); //@line 2457
     $$1 = $16; //@line 2458
     $$1382 = $17; //@line 2458
     $114 = $16; //@line 2458
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 2464
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 2468
     }
     $41 = $26 + 8 | 0; //@line 2471
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 2475
     } else {
      _abort(); //@line 2477
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 2482
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 2483
    $$1 = $16; //@line 2484
    $$1382 = $17; //@line 2484
    $114 = $16; //@line 2484
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 2488
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 2490
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 2494
     $60 = $59 + 4 | 0; //@line 2495
     $61 = HEAP32[$60 >> 2] | 0; //@line 2496
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 2499
      if (!$63) {
       $$3 = 0; //@line 2502
       break;
      } else {
       $$1387 = $63; //@line 2505
       $$1390 = $59; //@line 2505
      }
     } else {
      $$1387 = $61; //@line 2508
      $$1390 = $60; //@line 2508
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 2511
      $66 = HEAP32[$65 >> 2] | 0; //@line 2512
      if ($66 | 0) {
       $$1387 = $66; //@line 2515
       $$1390 = $65; //@line 2515
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 2518
      $69 = HEAP32[$68 >> 2] | 0; //@line 2519
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 2524
       $$1390 = $68; //@line 2524
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 2529
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 2532
      $$3 = $$1387; //@line 2533
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 2538
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 2541
     }
     $53 = $51 + 12 | 0; //@line 2544
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2548
     }
     $56 = $48 + 8 | 0; //@line 2551
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 2555
      HEAP32[$56 >> 2] = $51; //@line 2556
      $$3 = $48; //@line 2557
      break;
     } else {
      _abort(); //@line 2560
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 2567
    $$1382 = $17; //@line 2567
    $114 = $16; //@line 2567
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 2570
    $75 = 7036 + ($74 << 2) | 0; //@line 2571
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 2576
      if (!$$3) {
       HEAP32[1684] = HEAP32[1684] & ~(1 << $74); //@line 2583
       $$1 = $16; //@line 2584
       $$1382 = $17; //@line 2584
       $114 = $16; //@line 2584
       break L10;
      }
     } else {
      if ((HEAP32[1687] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 2591
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 2599
       if (!$$3) {
        $$1 = $16; //@line 2602
        $$1382 = $17; //@line 2602
        $114 = $16; //@line 2602
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[1687] | 0; //@line 2610
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 2613
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 2617
    $92 = $16 + 16 | 0; //@line 2618
    $93 = HEAP32[$92 >> 2] | 0; //@line 2619
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 2625
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 2629
       HEAP32[$93 + 24 >> 2] = $$3; //@line 2631
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 2637
    if (!$99) {
     $$1 = $16; //@line 2640
     $$1382 = $17; //@line 2640
     $114 = $16; //@line 2640
    } else {
     if ((HEAP32[1687] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 2645
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 2649
      HEAP32[$99 + 24 >> 2] = $$3; //@line 2651
      $$1 = $16; //@line 2652
      $$1382 = $17; //@line 2652
      $114 = $16; //@line 2652
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 2658
   $$1382 = $9; //@line 2658
   $114 = $2; //@line 2658
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 2663
 }
 $115 = $10 + 4 | 0; //@line 2666
 $116 = HEAP32[$115 >> 2] | 0; //@line 2667
 if (!($116 & 1)) {
  _abort(); //@line 2671
 }
 if (!($116 & 2)) {
  if ((HEAP32[1689] | 0) == ($10 | 0)) {
   $124 = (HEAP32[1686] | 0) + $$1382 | 0; //@line 2681
   HEAP32[1686] = $124; //@line 2682
   HEAP32[1689] = $$1; //@line 2683
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 2686
   if (($$1 | 0) != (HEAP32[1688] | 0)) {
    return;
   }
   HEAP32[1688] = 0; //@line 2692
   HEAP32[1685] = 0; //@line 2693
   return;
  }
  if ((HEAP32[1688] | 0) == ($10 | 0)) {
   $132 = (HEAP32[1685] | 0) + $$1382 | 0; //@line 2700
   HEAP32[1685] = $132; //@line 2701
   HEAP32[1688] = $114; //@line 2702
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 2705
   HEAP32[$114 + $132 >> 2] = $132; //@line 2707
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 2711
  $138 = $116 >>> 3; //@line 2712
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 2717
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 2719
    $145 = 6772 + ($138 << 1 << 2) | 0; //@line 2721
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[1687] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 2727
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 2734
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[1683] = HEAP32[1683] & ~(1 << $138); //@line 2744
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 2750
    } else {
     if ((HEAP32[1687] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 2755
     }
     $160 = $143 + 8 | 0; //@line 2758
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 2762
     } else {
      _abort(); //@line 2764
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 2769
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 2770
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 2773
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 2775
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 2779
      $180 = $179 + 4 | 0; //@line 2780
      $181 = HEAP32[$180 >> 2] | 0; //@line 2781
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 2784
       if (!$183) {
        $$3400 = 0; //@line 2787
        break;
       } else {
        $$1398 = $183; //@line 2790
        $$1402 = $179; //@line 2790
       }
      } else {
       $$1398 = $181; //@line 2793
       $$1402 = $180; //@line 2793
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 2796
       $186 = HEAP32[$185 >> 2] | 0; //@line 2797
       if ($186 | 0) {
        $$1398 = $186; //@line 2800
        $$1402 = $185; //@line 2800
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 2803
       $189 = HEAP32[$188 >> 2] | 0; //@line 2804
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 2809
        $$1402 = $188; //@line 2809
       }
      }
      if ((HEAP32[1687] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 2815
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 2818
       $$3400 = $$1398; //@line 2819
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 2824
      if ((HEAP32[1687] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 2828
      }
      $173 = $170 + 12 | 0; //@line 2831
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 2835
      }
      $176 = $167 + 8 | 0; //@line 2838
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 2842
       HEAP32[$176 >> 2] = $170; //@line 2843
       $$3400 = $167; //@line 2844
       break;
      } else {
       _abort(); //@line 2847
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 2855
     $196 = 7036 + ($195 << 2) | 0; //@line 2856
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 2861
       if (!$$3400) {
        HEAP32[1684] = HEAP32[1684] & ~(1 << $195); //@line 2868
        break L108;
       }
      } else {
       if ((HEAP32[1687] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 2875
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 2883
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[1687] | 0; //@line 2893
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 2896
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 2900
     $213 = $10 + 16 | 0; //@line 2901
     $214 = HEAP32[$213 >> 2] | 0; //@line 2902
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 2908
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 2912
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 2914
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 2920
     if ($220 | 0) {
      if ((HEAP32[1687] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 2926
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 2930
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 2932
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 2941
  HEAP32[$114 + $137 >> 2] = $137; //@line 2943
  if (($$1 | 0) == (HEAP32[1688] | 0)) {
   HEAP32[1685] = $137; //@line 2947
   return;
  } else {
   $$2 = $137; //@line 2950
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 2954
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 2957
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 2959
  $$2 = $$1382; //@line 2960
 }
 $235 = $$2 >>> 3; //@line 2962
 if ($$2 >>> 0 < 256) {
  $238 = 6772 + ($235 << 1 << 2) | 0; //@line 2966
  $239 = HEAP32[1683] | 0; //@line 2967
  $240 = 1 << $235; //@line 2968
  if (!($239 & $240)) {
   HEAP32[1683] = $239 | $240; //@line 2973
   $$0403 = $238; //@line 2975
   $$pre$phiZ2D = $238 + 8 | 0; //@line 2975
  } else {
   $244 = $238 + 8 | 0; //@line 2977
   $245 = HEAP32[$244 >> 2] | 0; //@line 2978
   if ((HEAP32[1687] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 2982
   } else {
    $$0403 = $245; //@line 2985
    $$pre$phiZ2D = $244; //@line 2985
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 2988
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 2990
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 2992
  HEAP32[$$1 + 12 >> 2] = $238; //@line 2994
  return;
 }
 $251 = $$2 >>> 8; //@line 2997
 if (!$251) {
  $$0396 = 0; //@line 3000
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 3004
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 3008
   $257 = $251 << $256; //@line 3009
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 3012
   $262 = $257 << $260; //@line 3014
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 3017
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 3022
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 3028
  }
 }
 $276 = 7036 + ($$0396 << 2) | 0; //@line 3031
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 3033
 HEAP32[$$1 + 20 >> 2] = 0; //@line 3036
 HEAP32[$$1 + 16 >> 2] = 0; //@line 3037
 $280 = HEAP32[1684] | 0; //@line 3038
 $281 = 1 << $$0396; //@line 3039
 do {
  if (!($280 & $281)) {
   HEAP32[1684] = $280 | $281; //@line 3045
   HEAP32[$276 >> 2] = $$1; //@line 3046
   HEAP32[$$1 + 24 >> 2] = $276; //@line 3048
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 3050
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 3052
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 3060
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 3060
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 3067
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 3071
    $301 = HEAP32[$299 >> 2] | 0; //@line 3073
    if (!$301) {
     label = 121; //@line 3076
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 3079
     $$0384 = $301; //@line 3079
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[1687] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 3086
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 3089
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 3091
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 3093
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 3095
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 3100
    $309 = HEAP32[$308 >> 2] | 0; //@line 3101
    $310 = HEAP32[1687] | 0; //@line 3102
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 3108
     HEAP32[$308 >> 2] = $$1; //@line 3109
     HEAP32[$$1 + 8 >> 2] = $309; //@line 3111
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 3113
     HEAP32[$$1 + 24 >> 2] = 0; //@line 3115
     break;
    } else {
     _abort(); //@line 3118
    }
   }
  }
 } while (0);
 $319 = (HEAP32[1691] | 0) + -1 | 0; //@line 3125
 HEAP32[1691] = $319; //@line 3126
 if (!$319) {
  $$0212$in$i = 7188; //@line 3129
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 3134
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 3140
  }
 }
 HEAP32[1691] = -1; //@line 3143
 return;
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $48 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 15
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 33
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 35
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 37
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 39
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 41
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 43
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 45
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 47
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 49
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 51
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 53
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 55
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 57
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 61
 HEAP32[133] = (HEAP32[133] | 0) + 1; //@line 66
 $53 = HEAP32[122] | 0; //@line 67
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 71
   do {
    if ($2 << 24 >> 24 > -1 & ($8 | 0) != 0) {
     $57 = HEAP32[119] | 0; //@line 77
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $8) | 0) {
       $$0$i = 1; //@line 84
       break;
      }
     }
     $62 = HEAP32[120] | 0; //@line 88
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 92
     } else {
      if (!(_strstr($62, $8) | 0)) {
       $$0$i = 1; //@line 97
      } else {
       label = 9; //@line 99
      }
     }
    } else {
     label = 9; //@line 103
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 107
   }
   if (!((HEAP32[129] | 0) != 0 & ((($8 | 0) == 0 | (($4 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[126] = HEAP32[124]; //@line 119
    break;
   }
   $73 = HEAPU8[472] | 0; //@line 123
   $74 = $2 & 255; //@line 124
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 129
    $$lobit = $78 >>> 6; //@line 130
    $79 = $$lobit & 255; //@line 131
    $83 = ($73 & 32 | 0) == 0; //@line 135
    $84 = HEAP32[123] | 0; //@line 136
    $85 = HEAP32[122] | 0; //@line 137
    $86 = $2 << 24 >> 24 == 1; //@line 138
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 141
     _vsnprintf($85, $84, $4, $6) | 0; //@line 142
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 62; //@line 145
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 146
      $$expand_i1_val = $86 & 1; //@line 147
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 148
      sp = STACKTOP; //@line 149
      return;
     }
     ___async_unwind = 0; //@line 152
     HEAP32[$ReallocAsyncCtx12 >> 2] = 62; //@line 153
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 154
     $$expand_i1_val = $86 & 1; //@line 155
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 156
     sp = STACKTOP; //@line 157
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 163
     $$1143 = $85; //@line 163
     $$1145 = $84; //@line 163
     $$3154 = 0; //@line 163
     label = 28; //@line 164
    } else {
     if ($83) {
      $$0142 = $85; //@line 167
      $$0144 = $84; //@line 167
     } else {
      $89 = _snprintf($85, $84, 2596, $44) | 0; //@line 169
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 171
      $91 = ($$ | 0) > 0; //@line 172
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 177
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 177
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 181
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 2614; //@line 187
        label = 25; //@line 188
        break;
       }
      case 1:
       {
        $$sink = 2620; //@line 192
        label = 25; //@line 193
        break;
       }
      case 3:
       {
        $$sink = 2608; //@line 197
        label = 25; //@line 198
        break;
       }
      case 7:
       {
        $$sink = 2602; //@line 202
        label = 25; //@line 203
        break;
       }
      default:
       {
        $$0141 = 0; //@line 207
        $$1152 = 0; //@line 207
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$48 >> 2] = $$sink; //@line 211
       $$0141 = $79 & 1; //@line 214
       $$1152 = _snprintf($$0142, $$0144, 2626, $48) | 0; //@line 214
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 217
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 219
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 221
       $$1$off0 = $extract$t159; //@line 226
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 226
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 226
       $$3154 = $$1152; //@line 226
       label = 28; //@line 227
      } else {
       $$1$off0 = $extract$t159; //@line 229
       $$1143 = $$0142; //@line 229
       $$1145 = $$0144; //@line 229
       $$3154 = $$1152$; //@line 229
       label = 28; //@line 230
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[127] | 0) != 0) {
      HEAP32[$30 >> 2] = HEAP32[$6 >> 2]; //@line 241
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 242
      $108 = _vsnprintf(0, 0, $4, $30) | 0; //@line 243
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 66; //@line 246
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 247
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 248
       HEAP8[$109 >> 0] = $$1$off0$expand_i1_val; //@line 249
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 250
       HEAP32[$110 >> 2] = $18; //@line 251
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 252
       HEAP32[$111 >> 2] = $20; //@line 253
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 254
       HEAP32[$112 >> 2] = $26; //@line 255
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 256
       HEAP32[$113 >> 2] = $28; //@line 257
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 258
       HEAP32[$114 >> 2] = $$3154; //@line 259
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 260
       HEAP32[$115 >> 2] = $4; //@line 261
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 262
       HEAP32[$116 >> 2] = $6; //@line 263
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 264
       HEAP32[$117 >> 2] = $10; //@line 265
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 266
       HEAP32[$118 >> 2] = $8; //@line 267
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 268
       HEAP32[$119 >> 2] = $12; //@line 269
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 270
       HEAP32[$120 >> 2] = $14; //@line 271
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 272
       HEAP32[$121 >> 2] = $16; //@line 273
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 274
       HEAP32[$122 >> 2] = $22; //@line 275
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 276
       HEAP32[$123 >> 2] = $$1143; //@line 277
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 278
       HEAP32[$124 >> 2] = $$1145; //@line 279
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 280
       HEAP32[$125 >> 2] = $24; //@line 281
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 282
       HEAP32[$126 >> 2] = $30; //@line 283
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 284
       HEAP32[$127 >> 2] = $32; //@line 285
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 286
       HEAP32[$128 >> 2] = $34; //@line 287
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 288
       HEAP32[$129 >> 2] = $74; //@line 289
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 290
       HEAP32[$130 >> 2] = $36; //@line 291
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 292
       HEAP32[$131 >> 2] = $38; //@line 293
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 294
       HEAP32[$132 >> 2] = $40; //@line 295
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 296
       HEAP32[$133 >> 2] = $42; //@line 297
       sp = STACKTOP; //@line 298
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 302
      ___async_unwind = 0; //@line 303
      HEAP32[$ReallocAsyncCtx11 >> 2] = 66; //@line 304
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 305
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 306
      HEAP8[$109 >> 0] = $$1$off0$expand_i1_val; //@line 307
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 308
      HEAP32[$110 >> 2] = $18; //@line 309
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 310
      HEAP32[$111 >> 2] = $20; //@line 311
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 312
      HEAP32[$112 >> 2] = $26; //@line 313
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 314
      HEAP32[$113 >> 2] = $28; //@line 315
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 316
      HEAP32[$114 >> 2] = $$3154; //@line 317
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 318
      HEAP32[$115 >> 2] = $4; //@line 319
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 320
      HEAP32[$116 >> 2] = $6; //@line 321
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 322
      HEAP32[$117 >> 2] = $10; //@line 323
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 324
      HEAP32[$118 >> 2] = $8; //@line 325
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 326
      HEAP32[$119 >> 2] = $12; //@line 327
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 328
      HEAP32[$120 >> 2] = $14; //@line 329
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 330
      HEAP32[$121 >> 2] = $16; //@line 331
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 332
      HEAP32[$122 >> 2] = $22; //@line 333
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 334
      HEAP32[$123 >> 2] = $$1143; //@line 335
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 336
      HEAP32[$124 >> 2] = $$1145; //@line 337
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 338
      HEAP32[$125 >> 2] = $24; //@line 339
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 340
      HEAP32[$126 >> 2] = $30; //@line 341
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 342
      HEAP32[$127 >> 2] = $32; //@line 343
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 344
      HEAP32[$128 >> 2] = $34; //@line 345
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 346
      HEAP32[$129 >> 2] = $74; //@line 347
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 348
      HEAP32[$130 >> 2] = $36; //@line 349
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 350
      HEAP32[$131 >> 2] = $38; //@line 351
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 352
      HEAP32[$132 >> 2] = $40; //@line 353
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 354
      HEAP32[$133 >> 2] = $42; //@line 355
      sp = STACKTOP; //@line 356
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 361
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$32 >> 2] = $8; //@line 367
        $$5156 = _snprintf($$1143, $$1145, 2629, $32) | 0; //@line 369
        break;
       }
      case 1:
       {
        HEAP32[$40 >> 2] = $8; //@line 373
        $$5156 = _snprintf($$1143, $$1145, 2644, $40) | 0; //@line 375
        break;
       }
      case 3:
       {
        HEAP32[$36 >> 2] = $8; //@line 379
        $$5156 = _snprintf($$1143, $$1145, 2659, $36) | 0; //@line 381
        break;
       }
      case 7:
       {
        HEAP32[$10 >> 2] = $8; //@line 385
        $$5156 = _snprintf($$1143, $$1145, 2674, $10) | 0; //@line 387
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 2689, $14) | 0; //@line 392
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 396
      $147 = $$1143 + $$5156$ | 0; //@line 398
      $148 = $$1145 - $$5156$ | 0; //@line 399
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 403
       $150 = _vsnprintf($147, $148, $4, $6) | 0; //@line 404
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 68; //@line 407
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 408
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 409
        HEAP8[$151 >> 0] = $$1$off0$expand_i1_val18; //@line 410
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 411
        HEAP32[$152 >> 2] = $18; //@line 412
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 413
        HEAP32[$153 >> 2] = $20; //@line 414
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 415
        HEAP32[$154 >> 2] = $26; //@line 416
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 417
        HEAP32[$155 >> 2] = $28; //@line 418
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 419
        HEAP32[$156 >> 2] = $148; //@line 420
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 421
        HEAP32[$157 >> 2] = $147; //@line 422
        sp = STACKTOP; //@line 423
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 427
       ___async_unwind = 0; //@line 428
       HEAP32[$ReallocAsyncCtx10 >> 2] = 68; //@line 429
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 430
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 431
       HEAP8[$151 >> 0] = $$1$off0$expand_i1_val18; //@line 432
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 433
       HEAP32[$152 >> 2] = $18; //@line 434
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 435
       HEAP32[$153 >> 2] = $20; //@line 436
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 437
       HEAP32[$154 >> 2] = $26; //@line 438
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 439
       HEAP32[$155 >> 2] = $28; //@line 440
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 441
       HEAP32[$156 >> 2] = $148; //@line 442
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 443
       HEAP32[$157 >> 2] = $147; //@line 444
       sp = STACKTOP; //@line 445
       return;
      }
     }
    }
    $159 = HEAP32[129] | 0; //@line 450
    $160 = HEAP32[122] | 0; //@line 451
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 452
    FUNCTION_TABLE_vi[$159 & 511]($160); //@line 453
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 456
     sp = STACKTOP; //@line 457
     return;
    }
    ___async_unwind = 0; //@line 460
    HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 461
    sp = STACKTOP; //@line 462
    return;
   }
  }
 } while (0);
 $161 = HEAP32[132] | 0; //@line 467
 if (!$161) {
  return;
 }
 $163 = HEAP32[133] | 0; //@line 472
 HEAP32[133] = 0; //@line 473
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 474
 FUNCTION_TABLE_v[$161 & 7](); //@line 475
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 478
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 479
  HEAP32[$164 >> 2] = $163; //@line 480
  sp = STACKTOP; //@line 481
  return;
 }
 ___async_unwind = 0; //@line 484
 HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 485
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 486
 HEAP32[$164 >> 2] = $163; //@line 487
 sp = STACKTOP; //@line 488
 return;
}
function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi23Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $288 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0, label = 0;
 $2 = $0 + $1 | 0; //@line 3639
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 3641
 L1 : do {
  if (!($4 & 1)) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 3646
   if (!($4 & 3)) {
    return;
   }
   $11 = $0 + (0 - $7) | 0; //@line 3653
   $12 = $7 + $1 | 0; //@line 3654
   $13 = HEAP32[1687] | 0; //@line 3655
   if ($11 >>> 0 < $13 >>> 0) {
    _abort(); //@line 3658
   }
   if ((HEAP32[1688] | 0) == ($11 | 0)) {
    $101 = $2 + 4 | 0; //@line 3664
    $102 = HEAP32[$101 >> 2] | 0; //@line 3665
    if (($102 & 3 | 0) != 3) {
     $$1 = $11; //@line 3669
     $$1418 = $12; //@line 3669
     break;
    }
    HEAP32[1685] = $12; //@line 3672
    HEAP32[$101 >> 2] = $102 & -2; //@line 3674
    HEAP32[$11 + 4 >> 2] = $12 | 1; //@line 3677
    HEAP32[$2 >> 2] = $12; //@line 3678
    return;
   }
   $17 = $7 >>> 3; //@line 3681
   if ($7 >>> 0 < 256) {
    $20 = HEAP32[$11 + 8 >> 2] | 0; //@line 3685
    $22 = HEAP32[$11 + 12 >> 2] | 0; //@line 3687
    $24 = 6772 + ($17 << 1 << 2) | 0; //@line 3689
    if (($20 | 0) != ($24 | 0)) {
     if ($13 >>> 0 > $20 >>> 0) {
      _abort(); //@line 3694
     }
     if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3701
     }
    }
    if (($22 | 0) == ($20 | 0)) {
     HEAP32[1683] = HEAP32[1683] & ~(1 << $17); //@line 3711
     $$1 = $11; //@line 3712
     $$1418 = $12; //@line 3712
     break;
    }
    if (($22 | 0) == ($24 | 0)) {
     $$pre$phi25Z2D = $22 + 8 | 0; //@line 3718
    } else {
     if ($13 >>> 0 > $22 >>> 0) {
      _abort(); //@line 3722
     }
     $37 = $22 + 8 | 0; //@line 3725
     if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) {
      $$pre$phi25Z2D = $37; //@line 3729
     } else {
      _abort(); //@line 3731
     }
    }
    HEAP32[$20 + 12 >> 2] = $22; //@line 3736
    HEAP32[$$pre$phi25Z2D >> 2] = $20; //@line 3737
    $$1 = $11; //@line 3738
    $$1418 = $12; //@line 3738
    break;
   }
   $42 = HEAP32[$11 + 24 >> 2] | 0; //@line 3742
   $44 = HEAP32[$11 + 12 >> 2] | 0; //@line 3744
   do {
    if (($44 | 0) == ($11 | 0)) {
     $55 = $11 + 16 | 0; //@line 3748
     $56 = $55 + 4 | 0; //@line 3749
     $57 = HEAP32[$56 >> 2] | 0; //@line 3750
     if (!$57) {
      $59 = HEAP32[$55 >> 2] | 0; //@line 3753
      if (!$59) {
       $$3 = 0; //@line 3756
       break;
      } else {
       $$1426 = $59; //@line 3759
       $$1429 = $55; //@line 3759
      }
     } else {
      $$1426 = $57; //@line 3762
      $$1429 = $56; //@line 3762
     }
     while (1) {
      $61 = $$1426 + 20 | 0; //@line 3765
      $62 = HEAP32[$61 >> 2] | 0; //@line 3766
      if ($62 | 0) {
       $$1426 = $62; //@line 3769
       $$1429 = $61; //@line 3769
       continue;
      }
      $64 = $$1426 + 16 | 0; //@line 3772
      $65 = HEAP32[$64 >> 2] | 0; //@line 3773
      if (!$65) {
       break;
      } else {
       $$1426 = $65; //@line 3778
       $$1429 = $64; //@line 3778
      }
     }
     if ($13 >>> 0 > $$1429 >>> 0) {
      _abort(); //@line 3783
     } else {
      HEAP32[$$1429 >> 2] = 0; //@line 3786
      $$3 = $$1426; //@line 3787
      break;
     }
    } else {
     $47 = HEAP32[$11 + 8 >> 2] | 0; //@line 3792
     if ($13 >>> 0 > $47 >>> 0) {
      _abort(); //@line 3795
     }
     $49 = $47 + 12 | 0; //@line 3798
     if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3802
     }
     $52 = $44 + 8 | 0; //@line 3805
     if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$49 >> 2] = $44; //@line 3809
      HEAP32[$52 >> 2] = $47; //@line 3810
      $$3 = $44; //@line 3811
      break;
     } else {
      _abort(); //@line 3814
     }
    }
   } while (0);
   if (!$42) {
    $$1 = $11; //@line 3821
    $$1418 = $12; //@line 3821
   } else {
    $70 = HEAP32[$11 + 28 >> 2] | 0; //@line 3824
    $71 = 7036 + ($70 << 2) | 0; //@line 3825
    do {
     if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$71 >> 2] = $$3; //@line 3830
      if (!$$3) {
       HEAP32[1684] = HEAP32[1684] & ~(1 << $70); //@line 3837
       $$1 = $11; //@line 3838
       $$1418 = $12; //@line 3838
       break L1;
      }
     } else {
      if ((HEAP32[1687] | 0) >>> 0 > $42 >>> 0) {
       _abort(); //@line 3845
      } else {
       HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3; //@line 3853
       if (!$$3) {
        $$1 = $11; //@line 3856
        $$1418 = $12; //@line 3856
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $85 = HEAP32[1687] | 0; //@line 3864
    if ($85 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3867
    }
    HEAP32[$$3 + 24 >> 2] = $42; //@line 3871
    $88 = $11 + 16 | 0; //@line 3872
    $89 = HEAP32[$88 >> 2] | 0; //@line 3873
    do {
     if ($89 | 0) {
      if ($85 >>> 0 > $89 >>> 0) {
       _abort(); //@line 3879
      } else {
       HEAP32[$$3 + 16 >> 2] = $89; //@line 3883
       HEAP32[$89 + 24 >> 2] = $$3; //@line 3885
       break;
      }
     }
    } while (0);
    $95 = HEAP32[$88 + 4 >> 2] | 0; //@line 3891
    if (!$95) {
     $$1 = $11; //@line 3894
     $$1418 = $12; //@line 3894
    } else {
     if ((HEAP32[1687] | 0) >>> 0 > $95 >>> 0) {
      _abort(); //@line 3899
     } else {
      HEAP32[$$3 + 20 >> 2] = $95; //@line 3903
      HEAP32[$95 + 24 >> 2] = $$3; //@line 3905
      $$1 = $11; //@line 3906
      $$1418 = $12; //@line 3906
      break;
     }
    }
   }
  } else {
   $$1 = $0; //@line 3912
   $$1418 = $1; //@line 3912
  }
 } while (0);
 $108 = HEAP32[1687] | 0; //@line 3915
 if ($2 >>> 0 < $108 >>> 0) {
  _abort(); //@line 3918
 }
 $110 = $2 + 4 | 0; //@line 3921
 $111 = HEAP32[$110 >> 2] | 0; //@line 3922
 if (!($111 & 2)) {
  if ((HEAP32[1689] | 0) == ($2 | 0)) {
   $117 = (HEAP32[1686] | 0) + $$1418 | 0; //@line 3930
   HEAP32[1686] = $117; //@line 3931
   HEAP32[1689] = $$1; //@line 3932
   HEAP32[$$1 + 4 >> 2] = $117 | 1; //@line 3935
   if (($$1 | 0) != (HEAP32[1688] | 0)) {
    return;
   }
   HEAP32[1688] = 0; //@line 3941
   HEAP32[1685] = 0; //@line 3942
   return;
  }
  if ((HEAP32[1688] | 0) == ($2 | 0)) {
   $125 = (HEAP32[1685] | 0) + $$1418 | 0; //@line 3949
   HEAP32[1685] = $125; //@line 3950
   HEAP32[1688] = $$1; //@line 3951
   HEAP32[$$1 + 4 >> 2] = $125 | 1; //@line 3954
   HEAP32[$$1 + $125 >> 2] = $125; //@line 3956
   return;
  }
  $130 = ($111 & -8) + $$1418 | 0; //@line 3960
  $131 = $111 >>> 3; //@line 3961
  L96 : do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$2 + 8 >> 2] | 0; //@line 3966
    $136 = HEAP32[$2 + 12 >> 2] | 0; //@line 3968
    $138 = 6772 + ($131 << 1 << 2) | 0; //@line 3970
    if (($134 | 0) != ($138 | 0)) {
     if ($108 >>> 0 > $134 >>> 0) {
      _abort(); //@line 3975
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) {
      _abort(); //@line 3982
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[1683] = HEAP32[1683] & ~(1 << $131); //@line 3992
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi23Z2D = $136 + 8 | 0; //@line 3998
    } else {
     if ($108 >>> 0 > $136 >>> 0) {
      _abort(); //@line 4002
     }
     $151 = $136 + 8 | 0; //@line 4005
     if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) {
      $$pre$phi23Z2D = $151; //@line 4009
     } else {
      _abort(); //@line 4011
     }
    }
    HEAP32[$134 + 12 >> 2] = $136; //@line 4016
    HEAP32[$$pre$phi23Z2D >> 2] = $134; //@line 4017
   } else {
    $156 = HEAP32[$2 + 24 >> 2] | 0; //@line 4020
    $158 = HEAP32[$2 + 12 >> 2] | 0; //@line 4022
    do {
     if (($158 | 0) == ($2 | 0)) {
      $169 = $2 + 16 | 0; //@line 4026
      $170 = $169 + 4 | 0; //@line 4027
      $171 = HEAP32[$170 >> 2] | 0; //@line 4028
      if (!$171) {
       $173 = HEAP32[$169 >> 2] | 0; //@line 4031
       if (!$173) {
        $$3435 = 0; //@line 4034
        break;
       } else {
        $$1433 = $173; //@line 4037
        $$1437 = $169; //@line 4037
       }
      } else {
       $$1433 = $171; //@line 4040
       $$1437 = $170; //@line 4040
      }
      while (1) {
       $175 = $$1433 + 20 | 0; //@line 4043
       $176 = HEAP32[$175 >> 2] | 0; //@line 4044
       if ($176 | 0) {
        $$1433 = $176; //@line 4047
        $$1437 = $175; //@line 4047
        continue;
       }
       $178 = $$1433 + 16 | 0; //@line 4050
       $179 = HEAP32[$178 >> 2] | 0; //@line 4051
       if (!$179) {
        break;
       } else {
        $$1433 = $179; //@line 4056
        $$1437 = $178; //@line 4056
       }
      }
      if ($108 >>> 0 > $$1437 >>> 0) {
       _abort(); //@line 4061
      } else {
       HEAP32[$$1437 >> 2] = 0; //@line 4064
       $$3435 = $$1433; //@line 4065
       break;
      }
     } else {
      $161 = HEAP32[$2 + 8 >> 2] | 0; //@line 4070
      if ($108 >>> 0 > $161 >>> 0) {
       _abort(); //@line 4073
      }
      $163 = $161 + 12 | 0; //@line 4076
      if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) {
       _abort(); //@line 4080
      }
      $166 = $158 + 8 | 0; //@line 4083
      if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$163 >> 2] = $158; //@line 4087
       HEAP32[$166 >> 2] = $161; //@line 4088
       $$3435 = $158; //@line 4089
       break;
      } else {
       _abort(); //@line 4092
      }
     }
    } while (0);
    if ($156 | 0) {
     $184 = HEAP32[$2 + 28 >> 2] | 0; //@line 4100
     $185 = 7036 + ($184 << 2) | 0; //@line 4101
     do {
      if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$185 >> 2] = $$3435; //@line 4106
       if (!$$3435) {
        HEAP32[1684] = HEAP32[1684] & ~(1 << $184); //@line 4113
        break L96;
       }
      } else {
       if ((HEAP32[1687] | 0) >>> 0 > $156 >>> 0) {
        _abort(); //@line 4120
       } else {
        HEAP32[$156 + 16 + (((HEAP32[$156 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435; //@line 4128
        if (!$$3435) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $199 = HEAP32[1687] | 0; //@line 4138
     if ($199 >>> 0 > $$3435 >>> 0) {
      _abort(); //@line 4141
     }
     HEAP32[$$3435 + 24 >> 2] = $156; //@line 4145
     $202 = $2 + 16 | 0; //@line 4146
     $203 = HEAP32[$202 >> 2] | 0; //@line 4147
     do {
      if ($203 | 0) {
       if ($199 >>> 0 > $203 >>> 0) {
        _abort(); //@line 4153
       } else {
        HEAP32[$$3435 + 16 >> 2] = $203; //@line 4157
        HEAP32[$203 + 24 >> 2] = $$3435; //@line 4159
        break;
       }
      }
     } while (0);
     $209 = HEAP32[$202 + 4 >> 2] | 0; //@line 4165
     if ($209 | 0) {
      if ((HEAP32[1687] | 0) >>> 0 > $209 >>> 0) {
       _abort(); //@line 4171
      } else {
       HEAP32[$$3435 + 20 >> 2] = $209; //@line 4175
       HEAP32[$209 + 24 >> 2] = $$3435; //@line 4177
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1; //@line 4186
  HEAP32[$$1 + $130 >> 2] = $130; //@line 4188
  if (($$1 | 0) == (HEAP32[1688] | 0)) {
   HEAP32[1685] = $130; //@line 4192
   return;
  } else {
   $$2 = $130; //@line 4195
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2; //@line 4199
  HEAP32[$$1 + 4 >> 2] = $$1418 | 1; //@line 4202
  HEAP32[$$1 + $$1418 >> 2] = $$1418; //@line 4204
  $$2 = $$1418; //@line 4205
 }
 $224 = $$2 >>> 3; //@line 4207
 if ($$2 >>> 0 < 256) {
  $227 = 6772 + ($224 << 1 << 2) | 0; //@line 4211
  $228 = HEAP32[1683] | 0; //@line 4212
  $229 = 1 << $224; //@line 4213
  if (!($228 & $229)) {
   HEAP32[1683] = $228 | $229; //@line 4218
   $$0438 = $227; //@line 4220
   $$pre$phiZ2D = $227 + 8 | 0; //@line 4220
  } else {
   $233 = $227 + 8 | 0; //@line 4222
   $234 = HEAP32[$233 >> 2] | 0; //@line 4223
   if ((HEAP32[1687] | 0) >>> 0 > $234 >>> 0) {
    _abort(); //@line 4227
   } else {
    $$0438 = $234; //@line 4230
    $$pre$phiZ2D = $233; //@line 4230
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 4233
  HEAP32[$$0438 + 12 >> 2] = $$1; //@line 4235
  HEAP32[$$1 + 8 >> 2] = $$0438; //@line 4237
  HEAP32[$$1 + 12 >> 2] = $227; //@line 4239
  return;
 }
 $240 = $$2 >>> 8; //@line 4242
 if (!$240) {
  $$0431 = 0; //@line 4245
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0431 = 31; //@line 4249
  } else {
   $245 = ($240 + 1048320 | 0) >>> 16 & 8; //@line 4253
   $246 = $240 << $245; //@line 4254
   $249 = ($246 + 520192 | 0) >>> 16 & 4; //@line 4257
   $251 = $246 << $249; //@line 4259
   $254 = ($251 + 245760 | 0) >>> 16 & 2; //@line 4262
   $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0; //@line 4267
   $$0431 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1; //@line 4273
  }
 }
 $265 = 7036 + ($$0431 << 2) | 0; //@line 4276
 HEAP32[$$1 + 28 >> 2] = $$0431; //@line 4278
 HEAP32[$$1 + 20 >> 2] = 0; //@line 4281
 HEAP32[$$1 + 16 >> 2] = 0; //@line 4282
 $269 = HEAP32[1684] | 0; //@line 4283
 $270 = 1 << $$0431; //@line 4284
 if (!($269 & $270)) {
  HEAP32[1684] = $269 | $270; //@line 4289
  HEAP32[$265 >> 2] = $$1; //@line 4290
  HEAP32[$$1 + 24 >> 2] = $265; //@line 4292
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4294
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4296
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0); //@line 4305
 $$0420 = HEAP32[$265 >> 2] | 0; //@line 4305
 while (1) {
  if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   label = 121; //@line 4312
   break;
  }
  $288 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0; //@line 4316
  $290 = HEAP32[$288 >> 2] | 0; //@line 4318
  if (!$290) {
   label = 118; //@line 4321
   break;
  } else {
   $$0419 = $$0419 << 1; //@line 4324
   $$0420 = $290; //@line 4324
  }
 }
 if ((label | 0) == 118) {
  if ((HEAP32[1687] | 0) >>> 0 > $288 >>> 0) {
   _abort(); //@line 4331
  }
  HEAP32[$288 >> 2] = $$1; //@line 4334
  HEAP32[$$1 + 24 >> 2] = $$0420; //@line 4336
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4338
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4340
  return;
 } else if ((label | 0) == 121) {
  $297 = $$0420 + 8 | 0; //@line 4344
  $298 = HEAP32[$297 >> 2] | 0; //@line 4345
  $299 = HEAP32[1687] | 0; //@line 4346
  if (!($299 >>> 0 <= $298 >>> 0 & $299 >>> 0 <= $$0420 >>> 0)) {
   _abort(); //@line 4351
  }
  HEAP32[$298 + 12 >> 2] = $$1; //@line 4355
  HEAP32[$297 >> 2] = $$1; //@line 4356
  HEAP32[$$1 + 8 >> 2] = $298; //@line 4358
  HEAP32[$$1 + 12 >> 2] = $$0420; //@line 4360
  HEAP32[$$1 + 24 >> 2] = 0; //@line 4362
  return;
 }
}
function _main() {
 var $0 = 0, $1 = 0, $2 = 0, $20 = 0, $3 = 0, $51 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12931
 STACKTOP = STACKTOP + 960 | 0; //@line 12932
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(960); //@line 12932
 $vararg_buffer7 = sp + 72 | 0; //@line 12933
 $vararg_buffer4 = sp + 64 | 0; //@line 12934
 $vararg_buffer1 = sp + 56 | 0; //@line 12935
 $vararg_buffer = sp; //@line 12936
 $0 = sp + 84 | 0; //@line 12937
 $1 = sp + 944 | 0; //@line 12938
 $2 = sp + 80 | 0; //@line 12939
 $3 = sp + 76 | 0; //@line 12940
 $AsyncCtx12 = _emscripten_alloc_async_context(56, sp) | 0; //@line 12941
 _puts(3020) | 0; //@line 12942
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 293; //@line 12945
  HEAP32[$AsyncCtx12 + 4 >> 2] = $0; //@line 12947
  HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer; //@line 12949
  HEAP32[$AsyncCtx12 + 12 >> 2] = $2; //@line 12951
  HEAP32[$AsyncCtx12 + 16 >> 2] = $3; //@line 12953
  HEAP32[$AsyncCtx12 + 20 >> 2] = $vararg_buffer7; //@line 12955
  HEAP32[$AsyncCtx12 + 24 >> 2] = $vararg_buffer7; //@line 12957
  HEAP32[$AsyncCtx12 + 28 >> 2] = $vararg_buffer; //@line 12959
  HEAP32[$AsyncCtx12 + 32 >> 2] = $vararg_buffer; //@line 12961
  HEAP32[$AsyncCtx12 + 36 >> 2] = $1; //@line 12963
  HEAP32[$AsyncCtx12 + 40 >> 2] = $vararg_buffer1; //@line 12965
  HEAP32[$AsyncCtx12 + 44 >> 2] = $vararg_buffer1; //@line 12967
  HEAP32[$AsyncCtx12 + 48 >> 2] = $vararg_buffer4; //@line 12969
  HEAP32[$AsyncCtx12 + 52 >> 2] = $vararg_buffer4; //@line 12971
  sp = STACKTOP; //@line 12972
  STACKTOP = sp; //@line 12973
  return 0; //@line 12973
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 12975
 __ZN17EthernetInterfaceC2Ev($0); //@line 12976
 if (__ZN17EthernetInterface7connectEv($0) | 0) {
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12980
  _puts(3042) | 0; //@line 12981
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 294; //@line 12984
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12986
   sp = STACKTOP; //@line 12987
   STACKTOP = sp; //@line 12988
   return 0; //@line 12988
  } else {
   _emscripten_free_async_context($AsyncCtx | 0); //@line 12990
   STACKTOP = sp; //@line 12991
   return -1;
  }
 }
 $AsyncCtx46 = _emscripten_alloc_async_context(56, sp) | 0; //@line 12994
 $20 = __ZN17EthernetInterface14get_ip_addressEv($0) | 0; //@line 12995
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 295; //@line 12998
  HEAP32[$AsyncCtx46 + 4 >> 2] = $vararg_buffer; //@line 13000
  HEAP32[$AsyncCtx46 + 8 >> 2] = $2; //@line 13002
  HEAP32[$AsyncCtx46 + 12 >> 2] = $3; //@line 13004
  HEAP32[$AsyncCtx46 + 16 >> 2] = $vararg_buffer7; //@line 13006
  HEAP32[$AsyncCtx46 + 20 >> 2] = $vararg_buffer7; //@line 13008
  HEAP32[$AsyncCtx46 + 24 >> 2] = $vararg_buffer1; //@line 13010
  HEAP32[$AsyncCtx46 + 28 >> 2] = $vararg_buffer1; //@line 13012
  HEAP32[$AsyncCtx46 + 32 >> 2] = $vararg_buffer4; //@line 13014
  HEAP32[$AsyncCtx46 + 36 >> 2] = $vararg_buffer4; //@line 13016
  HEAP32[$AsyncCtx46 + 40 >> 2] = $0; //@line 13018
  HEAP32[$AsyncCtx46 + 44 >> 2] = $vararg_buffer; //@line 13020
  HEAP32[$AsyncCtx46 + 48 >> 2] = $vararg_buffer; //@line 13022
  HEAP32[$AsyncCtx46 + 52 >> 2] = $1; //@line 13024
  sp = STACKTOP; //@line 13025
  STACKTOP = sp; //@line 13026
  return 0; //@line 13026
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 13028
 HEAP32[$vararg_buffer >> 2] = $20 | 0 ? $20 : 3059; //@line 13031
 _printf(3065, $vararg_buffer) | 0; //@line 13032
 while (1) {
  $AsyncCtx16 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13034
  __ZN9UDPSocketC2I17EthernetInterfaceEEPT_($vararg_buffer, $0); //@line 13035
  if (___async) {
   label = 11; //@line 13038
   break;
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 13041
  HEAP8[$1 >> 0] = HEAP8[3084] | 0; //@line 13042
  HEAP8[$1 + 1 >> 0] = HEAP8[3085] | 0; //@line 13042
  HEAP8[$1 + 2 >> 0] = HEAP8[3086] | 0; //@line 13042
  HEAP8[$1 + 3 >> 0] = HEAP8[3087] | 0; //@line 13042
  HEAP8[$1 + 4 >> 0] = HEAP8[3088] | 0; //@line 13042
  $AsyncCtx23 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13043
  $51 = __ZN9UDPSocket6sendtoEPKctPKvj($vararg_buffer, 3089, 37, $1, 5) | 0; //@line 13044
  if (___async) {
   label = 13; //@line 13047
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 13050
  if (($51 | 0) < 0) {
   HEAP32[$vararg_buffer1 >> 2] = $51; //@line 13053
   _printf(3103, $vararg_buffer1) | 0; //@line 13054
   $AsyncCtx42 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13055
   _wait_ms(1e4); //@line 13056
   if (___async) {
    label = 16; //@line 13059
    break;
   }
   _emscripten_free_async_context($AsyncCtx42 | 0); //@line 13062
  } else {
   $AsyncCtx20 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13064
   $83 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($vararg_buffer, 0, $2, 4) | 0; //@line 13065
   if (___async) {
    label = 19; //@line 13068
    break;
   }
   _emscripten_free_async_context($AsyncCtx20 | 0); //@line 13071
   if (($83 | 0) == 4) {
    HEAP32[$3 >> 2] = (_llvm_bswap_i32(HEAP32[$2 >> 2] | 0) | 0) + 2085978496; //@line 13077
    HEAP32[$vararg_buffer7 >> 2] = _ctime($3 | 0) | 0; //@line 13079
    _printf(3150, $vararg_buffer7) | 0; //@line 13080
    $AsyncCtx31 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13081
    __ZN6Socket5closeEv($vararg_buffer) | 0; //@line 13082
    if (___async) {
     label = 25; //@line 13085
     break;
    }
    _emscripten_free_async_context($AsyncCtx31 | 0); //@line 13088
    $AsyncCtx34 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13089
    _wait_ms(1e4); //@line 13090
    if (___async) {
     label = 27; //@line 13093
     break;
    }
    _emscripten_free_async_context($AsyncCtx34 | 0); //@line 13096
   } else {
    HEAP32[$vararg_buffer4 >> 2] = $83; //@line 13098
    _printf(3128, $vararg_buffer4) | 0; //@line 13099
    $AsyncCtx38 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13100
    _wait_ms(1e4); //@line 13101
    if (___async) {
     label = 22; //@line 13104
     break;
    }
    _emscripten_free_async_context($AsyncCtx38 | 0); //@line 13107
   }
  }
  $AsyncCtx27 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13110
  __ZN9UDPSocketD2Ev($vararg_buffer); //@line 13111
  if (___async) {
   label = 31; //@line 13114
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 13117
 }
 if ((label | 0) == 11) {
  HEAP32[$AsyncCtx16 >> 2] = 296; //@line 13120
  HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 13122
  HEAP32[$AsyncCtx16 + 8 >> 2] = $vararg_buffer; //@line 13124
  HEAP32[$AsyncCtx16 + 12 >> 2] = $2; //@line 13126
  HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 13128
  HEAP32[$AsyncCtx16 + 20 >> 2] = $2; //@line 13130
  HEAP32[$AsyncCtx16 + 24 >> 2] = $3; //@line 13132
  HEAP32[$AsyncCtx16 + 28 >> 2] = $vararg_buffer7; //@line 13134
  HEAP32[$AsyncCtx16 + 32 >> 2] = $vararg_buffer7; //@line 13136
  HEAP32[$AsyncCtx16 + 36 >> 2] = $vararg_buffer; //@line 13138
  HEAP32[$AsyncCtx16 + 40 >> 2] = $vararg_buffer1; //@line 13140
  HEAP32[$AsyncCtx16 + 44 >> 2] = $vararg_buffer1; //@line 13142
  HEAP32[$AsyncCtx16 + 48 >> 2] = $vararg_buffer; //@line 13144
  HEAP32[$AsyncCtx16 + 52 >> 2] = $vararg_buffer4; //@line 13146
  HEAP32[$AsyncCtx16 + 56 >> 2] = $vararg_buffer4; //@line 13148
  HEAP32[$AsyncCtx16 + 60 >> 2] = $0; //@line 13150
  sp = STACKTOP; //@line 13151
  STACKTOP = sp; //@line 13152
  return 0; //@line 13152
 } else if ((label | 0) == 13) {
  HEAP32[$AsyncCtx23 >> 2] = 297; //@line 13155
  HEAP32[$AsyncCtx23 + 4 >> 2] = $1; //@line 13157
  HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer; //@line 13159
  HEAP32[$AsyncCtx23 + 12 >> 2] = $2; //@line 13161
  HEAP32[$AsyncCtx23 + 16 >> 2] = $3; //@line 13163
  HEAP32[$AsyncCtx23 + 20 >> 2] = $2; //@line 13165
  HEAP32[$AsyncCtx23 + 24 >> 2] = $3; //@line 13167
  HEAP32[$AsyncCtx23 + 28 >> 2] = $vararg_buffer7; //@line 13169
  HEAP32[$AsyncCtx23 + 32 >> 2] = $vararg_buffer7; //@line 13171
  HEAP32[$AsyncCtx23 + 36 >> 2] = $vararg_buffer; //@line 13173
  HEAP32[$AsyncCtx23 + 40 >> 2] = $vararg_buffer1; //@line 13175
  HEAP32[$AsyncCtx23 + 44 >> 2] = $vararg_buffer1; //@line 13177
  HEAP32[$AsyncCtx23 + 48 >> 2] = $vararg_buffer; //@line 13179
  HEAP32[$AsyncCtx23 + 52 >> 2] = $vararg_buffer4; //@line 13181
  HEAP32[$AsyncCtx23 + 56 >> 2] = $vararg_buffer4; //@line 13183
  HEAP32[$AsyncCtx23 + 60 >> 2] = $0; //@line 13185
  sp = STACKTOP; //@line 13186
  STACKTOP = sp; //@line 13187
  return 0; //@line 13187
 } else if ((label | 0) == 16) {
  HEAP32[$AsyncCtx42 >> 2] = 298; //@line 13190
  HEAP32[$AsyncCtx42 + 4 >> 2] = $1; //@line 13192
  HEAP32[$AsyncCtx42 + 8 >> 2] = $vararg_buffer; //@line 13194
  HEAP32[$AsyncCtx42 + 12 >> 2] = $2; //@line 13196
  HEAP32[$AsyncCtx42 + 16 >> 2] = $3; //@line 13198
  HEAP32[$AsyncCtx42 + 20 >> 2] = $2; //@line 13200
  HEAP32[$AsyncCtx42 + 24 >> 2] = $3; //@line 13202
  HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer7; //@line 13204
  HEAP32[$AsyncCtx42 + 32 >> 2] = $vararg_buffer7; //@line 13206
  HEAP32[$AsyncCtx42 + 36 >> 2] = $vararg_buffer; //@line 13208
  HEAP32[$AsyncCtx42 + 40 >> 2] = $vararg_buffer1; //@line 13210
  HEAP32[$AsyncCtx42 + 44 >> 2] = $vararg_buffer1; //@line 13212
  HEAP32[$AsyncCtx42 + 48 >> 2] = $vararg_buffer; //@line 13214
  HEAP32[$AsyncCtx42 + 52 >> 2] = $vararg_buffer4; //@line 13216
  HEAP32[$AsyncCtx42 + 56 >> 2] = $vararg_buffer4; //@line 13218
  HEAP32[$AsyncCtx42 + 60 >> 2] = $0; //@line 13220
  sp = STACKTOP; //@line 13221
  STACKTOP = sp; //@line 13222
  return 0; //@line 13222
 } else if ((label | 0) == 19) {
  HEAP32[$AsyncCtx20 >> 2] = 299; //@line 13225
  HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 13227
  HEAP32[$AsyncCtx20 + 8 >> 2] = $vararg_buffer; //@line 13229
  HEAP32[$AsyncCtx20 + 12 >> 2] = $2; //@line 13231
  HEAP32[$AsyncCtx20 + 16 >> 2] = $3; //@line 13233
  HEAP32[$AsyncCtx20 + 20 >> 2] = $2; //@line 13235
  HEAP32[$AsyncCtx20 + 24 >> 2] = $3; //@line 13237
  HEAP32[$AsyncCtx20 + 28 >> 2] = $vararg_buffer7; //@line 13239
  HEAP32[$AsyncCtx20 + 32 >> 2] = $vararg_buffer7; //@line 13241
  HEAP32[$AsyncCtx20 + 36 >> 2] = $vararg_buffer; //@line 13243
  HEAP32[$AsyncCtx20 + 40 >> 2] = $vararg_buffer1; //@line 13245
  HEAP32[$AsyncCtx20 + 44 >> 2] = $vararg_buffer1; //@line 13247
  HEAP32[$AsyncCtx20 + 48 >> 2] = $vararg_buffer; //@line 13249
  HEAP32[$AsyncCtx20 + 52 >> 2] = $vararg_buffer4; //@line 13251
  HEAP32[$AsyncCtx20 + 56 >> 2] = $vararg_buffer4; //@line 13253
  HEAP32[$AsyncCtx20 + 60 >> 2] = $0; //@line 13255
  sp = STACKTOP; //@line 13256
  STACKTOP = sp; //@line 13257
  return 0; //@line 13257
 } else if ((label | 0) == 22) {
  HEAP32[$AsyncCtx38 >> 2] = 300; //@line 13260
  HEAP32[$AsyncCtx38 + 4 >> 2] = $1; //@line 13262
  HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer; //@line 13264
  HEAP32[$AsyncCtx38 + 12 >> 2] = $2; //@line 13266
  HEAP32[$AsyncCtx38 + 16 >> 2] = $3; //@line 13268
  HEAP32[$AsyncCtx38 + 20 >> 2] = $2; //@line 13270
  HEAP32[$AsyncCtx38 + 24 >> 2] = $3; //@line 13272
  HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer7; //@line 13274
  HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer7; //@line 13276
  HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer; //@line 13278
  HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer1; //@line 13280
  HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer1; //@line 13282
  HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer; //@line 13284
  HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer4; //@line 13286
  HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer4; //@line 13288
  HEAP32[$AsyncCtx38 + 60 >> 2] = $0; //@line 13290
  sp = STACKTOP; //@line 13291
  STACKTOP = sp; //@line 13292
  return 0; //@line 13292
 } else if ((label | 0) == 25) {
  HEAP32[$AsyncCtx31 >> 2] = 301; //@line 13295
  HEAP32[$AsyncCtx31 + 4 >> 2] = $1; //@line 13297
  HEAP32[$AsyncCtx31 + 8 >> 2] = $vararg_buffer; //@line 13299
  HEAP32[$AsyncCtx31 + 12 >> 2] = $2; //@line 13301
  HEAP32[$AsyncCtx31 + 16 >> 2] = $3; //@line 13303
  HEAP32[$AsyncCtx31 + 20 >> 2] = $2; //@line 13305
  HEAP32[$AsyncCtx31 + 24 >> 2] = $3; //@line 13307
  HEAP32[$AsyncCtx31 + 28 >> 2] = $vararg_buffer7; //@line 13309
  HEAP32[$AsyncCtx31 + 32 >> 2] = $vararg_buffer7; //@line 13311
  HEAP32[$AsyncCtx31 + 36 >> 2] = $vararg_buffer; //@line 13313
  HEAP32[$AsyncCtx31 + 40 >> 2] = $vararg_buffer1; //@line 13315
  HEAP32[$AsyncCtx31 + 44 >> 2] = $vararg_buffer1; //@line 13317
  HEAP32[$AsyncCtx31 + 48 >> 2] = $vararg_buffer; //@line 13319
  HEAP32[$AsyncCtx31 + 52 >> 2] = $vararg_buffer4; //@line 13321
  HEAP32[$AsyncCtx31 + 56 >> 2] = $vararg_buffer4; //@line 13323
  HEAP32[$AsyncCtx31 + 60 >> 2] = $0; //@line 13325
  sp = STACKTOP; //@line 13326
  STACKTOP = sp; //@line 13327
  return 0; //@line 13327
 } else if ((label | 0) == 27) {
  HEAP32[$AsyncCtx34 >> 2] = 302; //@line 13330
  HEAP32[$AsyncCtx34 + 4 >> 2] = $1; //@line 13332
  HEAP32[$AsyncCtx34 + 8 >> 2] = $vararg_buffer; //@line 13334
  HEAP32[$AsyncCtx34 + 12 >> 2] = $2; //@line 13336
  HEAP32[$AsyncCtx34 + 16 >> 2] = $3; //@line 13338
  HEAP32[$AsyncCtx34 + 20 >> 2] = $2; //@line 13340
  HEAP32[$AsyncCtx34 + 24 >> 2] = $3; //@line 13342
  HEAP32[$AsyncCtx34 + 28 >> 2] = $vararg_buffer7; //@line 13344
  HEAP32[$AsyncCtx34 + 32 >> 2] = $vararg_buffer7; //@line 13346
  HEAP32[$AsyncCtx34 + 36 >> 2] = $vararg_buffer; //@line 13348
  HEAP32[$AsyncCtx34 + 40 >> 2] = $vararg_buffer1; //@line 13350
  HEAP32[$AsyncCtx34 + 44 >> 2] = $vararg_buffer1; //@line 13352
  HEAP32[$AsyncCtx34 + 48 >> 2] = $vararg_buffer; //@line 13354
  HEAP32[$AsyncCtx34 + 52 >> 2] = $vararg_buffer4; //@line 13356
  HEAP32[$AsyncCtx34 + 56 >> 2] = $vararg_buffer4; //@line 13358
  HEAP32[$AsyncCtx34 + 60 >> 2] = $0; //@line 13360
  sp = STACKTOP; //@line 13361
  STACKTOP = sp; //@line 13362
  return 0; //@line 13362
 } else if ((label | 0) == 31) {
  HEAP32[$AsyncCtx27 >> 2] = 303; //@line 13365
  HEAP32[$AsyncCtx27 + 4 >> 2] = $1; //@line 13367
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer; //@line 13369
  HEAP32[$AsyncCtx27 + 12 >> 2] = $2; //@line 13371
  HEAP32[$AsyncCtx27 + 16 >> 2] = $3; //@line 13373
  HEAP32[$AsyncCtx27 + 20 >> 2] = $2; //@line 13375
  HEAP32[$AsyncCtx27 + 24 >> 2] = $3; //@line 13377
  HEAP32[$AsyncCtx27 + 28 >> 2] = $vararg_buffer7; //@line 13379
  HEAP32[$AsyncCtx27 + 32 >> 2] = $vararg_buffer7; //@line 13381
  HEAP32[$AsyncCtx27 + 36 >> 2] = $vararg_buffer; //@line 13383
  HEAP32[$AsyncCtx27 + 40 >> 2] = $vararg_buffer1; //@line 13385
  HEAP32[$AsyncCtx27 + 44 >> 2] = $vararg_buffer1; //@line 13387
  HEAP32[$AsyncCtx27 + 48 >> 2] = $vararg_buffer; //@line 13389
  HEAP32[$AsyncCtx27 + 52 >> 2] = $vararg_buffer4; //@line 13391
  HEAP32[$AsyncCtx27 + 56 >> 2] = $vararg_buffer4; //@line 13393
  HEAP32[$AsyncCtx27 + 60 >> 2] = $0; //@line 13395
  sp = STACKTOP; //@line 13396
  STACKTOP = sp; //@line 13397
  return 0; //@line 13397
 }
 return 0; //@line 13399
}
function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $263 = 0, $265 = 0, $275 = 0, $28 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0;
 L1 : do {
  if ($1 >>> 0 > 36) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 6940
   $289 = 0; //@line 6941
   $290 = 0; //@line 6941
  } else {
   $6 = $0 + 4 | 0; //@line 6943
   $7 = $0 + 100 | 0; //@line 6944
   do {
    $9 = HEAP32[$6 >> 2] | 0; //@line 6946
    if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $9 + 1; //@line 6951
     $16 = HEAPU8[$9 >> 0] | 0; //@line 6954
    } else {
     $16 = ___shgetc($0) | 0; //@line 6957
    }
   } while ((_isspace($16) | 0) != 0);
   L11 : do {
    switch ($16 | 0) {
    case 43:
    case 45:
     {
      $20 = (($16 | 0) == 45) << 31 >> 31; //@line 6969
      $21 = HEAP32[$6 >> 2] | 0; //@line 6970
      if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $21 + 1; //@line 6975
       $$0157 = $20; //@line 6978
       $$0159 = HEAPU8[$21 >> 0] | 0; //@line 6978
       break L11;
      } else {
       $$0157 = $20; //@line 6982
       $$0159 = ___shgetc($0) | 0; //@line 6982
       break L11;
      }
      break;
     }
    default:
     {
      $$0157 = 0; //@line 6988
      $$0159 = $16; //@line 6988
     }
    }
   } while (0);
   $28 = ($1 | 0) == 0; //@line 6992
   do {
    if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
     $32 = HEAP32[$6 >> 2] | 0; //@line 6999
     if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $32 + 1; //@line 7004
      $40 = HEAPU8[$32 >> 0] | 0; //@line 7007
     } else {
      $40 = ___shgetc($0) | 0; //@line 7010
     }
     if (($40 | 32 | 0) != 120) {
      if ($28) {
       $$1160169 = $40; //@line 7016
       $$1165167 = 8; //@line 7016
       label = 46; //@line 7017
       break;
      } else {
       $$1160 = $40; //@line 7020
       $$1165 = $1; //@line 7020
       label = 32; //@line 7021
       break;
      }
     }
     $42 = HEAP32[$6 >> 2] | 0; //@line 7025
     if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $42 + 1; //@line 7030
      $50 = HEAPU8[$42 >> 0] | 0; //@line 7033
     } else {
      $50 = ___shgetc($0) | 0; //@line 7036
     }
     if ((HEAPU8[3178 + $50 >> 0] | 0) > 15) {
      $54 = (HEAP32[$7 >> 2] | 0) == 0; //@line 7043
      if (!$54) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7047
      }
      if (!$2) {
       ___shlim($0, 0); //@line 7051
       $289 = 0; //@line 7052
       $290 = 0; //@line 7052
       break L1;
      }
      if ($54) {
       $289 = 0; //@line 7056
       $290 = 0; //@line 7056
       break L1;
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7061
      $289 = 0; //@line 7062
      $290 = 0; //@line 7062
      break L1;
     } else {
      $$1160169 = $50; //@line 7065
      $$1165167 = 16; //@line 7065
      label = 46; //@line 7066
     }
    } else {
     $$166 = $28 ? 10 : $1; //@line 7069
     if ($$166 >>> 0 > (HEAPU8[3178 + $$0159 >> 0] | 0) >>> 0) {
      $$1160 = $$0159; //@line 7075
      $$1165 = $$166; //@line 7075
      label = 32; //@line 7076
     } else {
      if (HEAP32[$7 >> 2] | 0) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7083
      }
      ___shlim($0, 0); //@line 7085
      HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7087
      $289 = 0; //@line 7088
      $290 = 0; //@line 7088
      break L1;
     }
    }
   } while (0);
   L43 : do {
    if ((label | 0) == 32) {
     if (($$1165 | 0) == 10) {
      $70 = $$1160 + -48 | 0; //@line 7097
      if ($70 >>> 0 < 10) {
       $$0154222 = 0; //@line 7100
       $74 = $70; //@line 7100
       do {
        $$0154222 = ($$0154222 * 10 | 0) + $74 | 0; //@line 7103
        $75 = HEAP32[$6 >> 2] | 0; //@line 7104
        if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $75 + 1; //@line 7109
         $$2161$be = HEAPU8[$75 >> 0] | 0; //@line 7112
        } else {
         $$2161$be = ___shgetc($0) | 0; //@line 7115
        }
        $74 = $$2161$be + -48 | 0; //@line 7117
       } while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
       $$2161$lcssa = $$2161$be; //@line 7127
       $291 = $$0154222; //@line 7127
       $292 = 0; //@line 7127
      } else {
       $$2161$lcssa = $$1160; //@line 7129
       $291 = 0; //@line 7129
       $292 = 0; //@line 7129
      }
      $86 = $$2161$lcssa + -48 | 0; //@line 7131
      if ($86 >>> 0 < 10) {
       $$3162215 = $$2161$lcssa; //@line 7134
       $88 = $291; //@line 7134
       $89 = $292; //@line 7134
       $93 = $86; //@line 7134
       while (1) {
        $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0; //@line 7136
        $91 = tempRet0; //@line 7137
        $94 = (($93 | 0) < 0) << 31 >> 31; //@line 7139
        $96 = ~$94; //@line 7141
        if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
         $$1165168 = 10; //@line 7148
         $$8 = $$3162215; //@line 7148
         $293 = $88; //@line 7148
         $294 = $89; //@line 7148
         label = 72; //@line 7149
         break L43;
        }
        $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0; //@line 7152
        $89 = tempRet0; //@line 7153
        $104 = HEAP32[$6 >> 2] | 0; //@line 7154
        if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $104 + 1; //@line 7159
         $$3162$be = HEAPU8[$104 >> 0] | 0; //@line 7162
        } else {
         $$3162$be = ___shgetc($0) | 0; //@line 7165
        }
        $93 = $$3162$be + -48 | 0; //@line 7167
        if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) {
         break;
        } else {
         $$3162215 = $$3162$be; //@line 7176
        }
       }
       if ($93 >>> 0 > 9) {
        $$1158 = $$0157; //@line 7183
        $263 = $89; //@line 7183
        $265 = $88; //@line 7183
       } else {
        $$1165168 = 10; //@line 7185
        $$8 = $$3162$be; //@line 7185
        $293 = $88; //@line 7185
        $294 = $89; //@line 7185
        label = 72; //@line 7186
       }
      } else {
       $$1158 = $$0157; //@line 7189
       $263 = $292; //@line 7189
       $265 = $291; //@line 7189
      }
     } else {
      $$1160169 = $$1160; //@line 7192
      $$1165167 = $$1165; //@line 7192
      label = 46; //@line 7193
     }
    }
   } while (0);
   L63 : do {
    if ((label | 0) == 46) {
     if (!($$1165167 + -1 & $$1165167)) {
      $131 = HEAP8[3434 + (($$1165167 * 23 | 0) >>> 5 & 7) >> 0] | 0; //@line 7208
      $133 = HEAP8[3178 + $$1160169 >> 0] | 0; //@line 7210
      $134 = $133 & 255; //@line 7211
      if ($$1165167 >>> 0 > $134 >>> 0) {
       $$1155192 = 0; //@line 7214
       $138 = $134; //@line 7214
       do {
        $$1155192 = $138 | $$1155192 << $131; //@line 7217
        $139 = HEAP32[$6 >> 2] | 0; //@line 7218
        if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $139 + 1; //@line 7223
         $$4163$be = HEAPU8[$139 >> 0] | 0; //@line 7226
        } else {
         $$4163$be = ___shgetc($0) | 0; //@line 7229
        }
        $147 = HEAP8[3178 + $$4163$be >> 0] | 0; //@line 7232
        $138 = $147 & 255; //@line 7233
       } while ($$1155192 >>> 0 < 134217728 & $$1165167 >>> 0 > $138 >>> 0);
       $$4163$lcssa = $$4163$be; //@line 7243
       $155 = $147; //@line 7243
       $158 = 0; //@line 7243
       $160 = $$1155192; //@line 7243
      } else {
       $$4163$lcssa = $$1160169; //@line 7245
       $155 = $133; //@line 7245
       $158 = 0; //@line 7245
       $160 = 0; //@line 7245
      }
      $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0; //@line 7247
      $153 = tempRet0; //@line 7248
      if ($$1165167 >>> 0 <= ($155 & 255) >>> 0 | ($153 >>> 0 < $158 >>> 0 | ($153 | 0) == ($158 | 0) & $152 >>> 0 < $160 >>> 0)) {
       $$1165168 = $$1165167; //@line 7258
       $$8 = $$4163$lcssa; //@line 7258
       $293 = $160; //@line 7258
       $294 = $158; //@line 7258
       label = 72; //@line 7259
       break;
      } else {
       $164 = $160; //@line 7262
       $165 = $158; //@line 7262
       $169 = $155; //@line 7262
      }
      while (1) {
       $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0; //@line 7265
       $167 = tempRet0; //@line 7266
       $170 = $166 | $169 & 255; //@line 7268
       $171 = HEAP32[$6 >> 2] | 0; //@line 7269
       if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $171 + 1; //@line 7274
        $$5$be = HEAPU8[$171 >> 0] | 0; //@line 7277
       } else {
        $$5$be = ___shgetc($0) | 0; //@line 7280
       }
       $169 = HEAP8[3178 + $$5$be >> 0] | 0; //@line 7283
       if ($$1165167 >>> 0 <= ($169 & 255) >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
        $$1165168 = $$1165167; //@line 7293
        $$8 = $$5$be; //@line 7293
        $293 = $170; //@line 7293
        $294 = $167; //@line 7293
        label = 72; //@line 7294
        break L63;
       } else {
        $164 = $170; //@line 7297
        $165 = $167; //@line 7297
       }
      }
     }
     $123 = HEAP8[3178 + $$1160169 >> 0] | 0; //@line 7302
     $124 = $123 & 255; //@line 7303
     if ($$1165167 >>> 0 > $124 >>> 0) {
      $$2156210 = 0; //@line 7306
      $189 = $124; //@line 7306
      do {
       $$2156210 = $189 + (Math_imul($$2156210, $$1165167) | 0) | 0; //@line 7309
       $190 = HEAP32[$6 >> 2] | 0; //@line 7310
       if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $190 + 1; //@line 7315
        $$6$be = HEAPU8[$190 >> 0] | 0; //@line 7318
       } else {
        $$6$be = ___shgetc($0) | 0; //@line 7321
       }
       $198 = HEAP8[3178 + $$6$be >> 0] | 0; //@line 7324
       $189 = $198 & 255; //@line 7325
      } while ($$2156210 >>> 0 < 119304647 & $$1165167 >>> 0 > $189 >>> 0);
      $$6$lcssa = $$6$be; //@line 7335
      $204 = $198; //@line 7335
      $295 = $$2156210; //@line 7335
      $296 = 0; //@line 7335
     } else {
      $$6$lcssa = $$1160169; //@line 7337
      $204 = $123; //@line 7337
      $295 = 0; //@line 7337
      $296 = 0; //@line 7337
     }
     if ($$1165167 >>> 0 > ($204 & 255) >>> 0) {
      $206 = ___udivdi3(-1, -1, $$1165167 | 0, 0) | 0; //@line 7342
      $207 = tempRet0; //@line 7343
      $$7198 = $$6$lcssa; //@line 7344
      $209 = $296; //@line 7344
      $211 = $295; //@line 7344
      $218 = $204; //@line 7344
      while (1) {
       if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
        $$1165168 = $$1165167; //@line 7352
        $$8 = $$7198; //@line 7352
        $293 = $211; //@line 7352
        $294 = $209; //@line 7352
        label = 72; //@line 7353
        break L63;
       }
       $215 = ___muldi3($211 | 0, $209 | 0, $$1165167 | 0, 0) | 0; //@line 7356
       $216 = tempRet0; //@line 7357
       $217 = $218 & 255; //@line 7358
       if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
        $$1165168 = $$1165167; //@line 7366
        $$8 = $$7198; //@line 7366
        $293 = $211; //@line 7366
        $294 = $209; //@line 7366
        label = 72; //@line 7367
        break L63;
       }
       $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0; //@line 7370
       $226 = tempRet0; //@line 7371
       $227 = HEAP32[$6 >> 2] | 0; //@line 7372
       if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $227 + 1; //@line 7377
        $$7$be = HEAPU8[$227 >> 0] | 0; //@line 7380
       } else {
        $$7$be = ___shgetc($0) | 0; //@line 7383
       }
       $218 = HEAP8[3178 + $$7$be >> 0] | 0; //@line 7386
       if ($$1165167 >>> 0 <= ($218 & 255) >>> 0) {
        $$1165168 = $$1165167; //@line 7392
        $$8 = $$7$be; //@line 7392
        $293 = $225; //@line 7392
        $294 = $226; //@line 7392
        label = 72; //@line 7393
        break;
       } else {
        $$7198 = $$7$be; //@line 7390
        $209 = $226; //@line 7390
        $211 = $225; //@line 7390
       }
      }
     } else {
      $$1165168 = $$1165167; //@line 7398
      $$8 = $$6$lcssa; //@line 7398
      $293 = $295; //@line 7398
      $294 = $296; //@line 7398
      label = 72; //@line 7399
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    if ($$1165168 >>> 0 > (HEAPU8[3178 + $$8 >> 0] | 0) >>> 0) {
     do {
      $242 = HEAP32[$6 >> 2] | 0; //@line 7410
      if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $242 + 1; //@line 7415
       $$9$be = HEAPU8[$242 >> 0] | 0; //@line 7418
      } else {
       $$9$be = ___shgetc($0) | 0; //@line 7421
      }
     } while ($$1165168 >>> 0 > (HEAPU8[3178 + $$9$be >> 0] | 0) >>> 0);
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7432
     $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0; //@line 7438
     $263 = $4; //@line 7438
     $265 = $3; //@line 7438
    } else {
     $$1158 = $$0157; //@line 7440
     $263 = $294; //@line 7440
     $265 = $293; //@line 7440
    }
   }
   if (HEAP32[$7 >> 2] | 0) {
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7448
   }
   if (!($263 >>> 0 < $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 < $3 >>> 0)) {
    if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7464
     $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0; //@line 7465
     $289 = tempRet0; //@line 7467
     $290 = $275; //@line 7467
     break;
    }
    if ($263 >>> 0 > $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 > $3 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7477
     $289 = $4; //@line 7478
     $290 = $3; //@line 7478
     break;
    }
   }
   $284 = (($$1158 | 0) < 0) << 31 >> 31; //@line 7483
   $287 = _i64Subtract($265 ^ $$1158 | 0, $263 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0; //@line 7486
   $289 = tempRet0; //@line 7488
   $290 = $287; //@line 7488
  }
 } while (0);
 tempRet0 = $289; //@line 7491
 return $290 | 0; //@line 7492
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_193($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $113 = 0, $115 = 0, $12 = 0, $123 = 0, $126 = 0, $128 = 0, $136 = 0, $139 = 0, $14 = 0, $141 = 0, $149 = 0, $152 = 0, $154 = 0, $16 = 0, $167 = 0, $168 = 0, $169 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $57 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15055
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15057
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15059
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15061
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15063
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15065
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15067
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15069
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15071
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15073
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15075
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15077
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15079
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15081
 $27 = $16 + 12 | 0; //@line 15082
 $28 = HEAP32[$27 >> 2] | 0; //@line 15083
 if ($28 | 0) {
  $31 = HEAP32[$28 + 4 >> 2] | 0; //@line 15087
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 15088
  FUNCTION_TABLE_vii[$31 & 7]($6, $16); //@line 15089
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 15092
   $32 = $ReallocAsyncCtx5 + 4 | 0; //@line 15093
   HEAP32[$32 >> 2] = $2; //@line 15094
   $33 = $ReallocAsyncCtx5 + 8 | 0; //@line 15095
   HEAP32[$33 >> 2] = $4; //@line 15096
   $34 = $ReallocAsyncCtx5 + 12 | 0; //@line 15097
   HEAP32[$34 >> 2] = $6; //@line 15098
   $35 = $ReallocAsyncCtx5 + 16 | 0; //@line 15099
   HEAP32[$35 >> 2] = $8; //@line 15100
   $36 = $ReallocAsyncCtx5 + 20 | 0; //@line 15101
   HEAP32[$36 >> 2] = $10; //@line 15102
   $37 = $ReallocAsyncCtx5 + 24 | 0; //@line 15103
   HEAP32[$37 >> 2] = $27; //@line 15104
   $38 = $ReallocAsyncCtx5 + 28 | 0; //@line 15105
   HEAP32[$38 >> 2] = $12; //@line 15106
   $39 = $ReallocAsyncCtx5 + 32 | 0; //@line 15107
   HEAP32[$39 >> 2] = $14; //@line 15108
   $40 = $ReallocAsyncCtx5 + 36 | 0; //@line 15109
   HEAP32[$40 >> 2] = $18; //@line 15110
   $41 = $ReallocAsyncCtx5 + 40 | 0; //@line 15111
   HEAP32[$41 >> 2] = $20; //@line 15112
   $42 = $ReallocAsyncCtx5 + 44 | 0; //@line 15113
   HEAP32[$42 >> 2] = $22; //@line 15114
   $43 = $ReallocAsyncCtx5 + 48 | 0; //@line 15115
   HEAP32[$43 >> 2] = $24; //@line 15116
   $44 = $ReallocAsyncCtx5 + 52 | 0; //@line 15117
   HEAP32[$44 >> 2] = $26; //@line 15118
   sp = STACKTOP; //@line 15119
   return;
  }
  ___async_unwind = 0; //@line 15122
  HEAP32[$ReallocAsyncCtx5 >> 2] = 164; //@line 15123
  $32 = $ReallocAsyncCtx5 + 4 | 0; //@line 15124
  HEAP32[$32 >> 2] = $2; //@line 15125
  $33 = $ReallocAsyncCtx5 + 8 | 0; //@line 15126
  HEAP32[$33 >> 2] = $4; //@line 15127
  $34 = $ReallocAsyncCtx5 + 12 | 0; //@line 15128
  HEAP32[$34 >> 2] = $6; //@line 15129
  $35 = $ReallocAsyncCtx5 + 16 | 0; //@line 15130
  HEAP32[$35 >> 2] = $8; //@line 15131
  $36 = $ReallocAsyncCtx5 + 20 | 0; //@line 15132
  HEAP32[$36 >> 2] = $10; //@line 15133
  $37 = $ReallocAsyncCtx5 + 24 | 0; //@line 15134
  HEAP32[$37 >> 2] = $27; //@line 15135
  $38 = $ReallocAsyncCtx5 + 28 | 0; //@line 15136
  HEAP32[$38 >> 2] = $12; //@line 15137
  $39 = $ReallocAsyncCtx5 + 32 | 0; //@line 15138
  HEAP32[$39 >> 2] = $14; //@line 15139
  $40 = $ReallocAsyncCtx5 + 36 | 0; //@line 15140
  HEAP32[$40 >> 2] = $18; //@line 15141
  $41 = $ReallocAsyncCtx5 + 40 | 0; //@line 15142
  HEAP32[$41 >> 2] = $20; //@line 15143
  $42 = $ReallocAsyncCtx5 + 44 | 0; //@line 15144
  HEAP32[$42 >> 2] = $22; //@line 15145
  $43 = $ReallocAsyncCtx5 + 48 | 0; //@line 15146
  HEAP32[$43 >> 2] = $24; //@line 15147
  $44 = $ReallocAsyncCtx5 + 52 | 0; //@line 15148
  HEAP32[$44 >> 2] = $26; //@line 15149
  sp = STACKTOP; //@line 15150
  return;
 }
 HEAP32[$18 >> 2] = 0; //@line 15153
 HEAP32[$10 + 8 >> 2] = $8; //@line 15155
 HEAP32[$10 + 48 >> 2] = $20; //@line 15157
 HEAP32[$10 + 52 >> 2] = $22; //@line 15159
 $48 = $10 + 56 | 0; //@line 15160
 HEAP32[$48 >> 2] = 0; //@line 15161
 $49 = $10 + 60 | 0; //@line 15162
 HEAP32[$49 >> 2] = 0; //@line 15163
 HEAP32[$10 + 64 >> 2] = 0; //@line 15165
 HEAP8[$10 + 82 >> 0] = 0; //@line 15167
 HEAP8[$10 + 83 >> 0] = 1; //@line 15169
 HEAP8[$10 + 84 >> 0] = 3; //@line 15171
 HEAP8[$10 + 85 >> 0] = 0; //@line 15173
 HEAP16[$10 + 80 >> 1] = 0; //@line 15175
 HEAP32[$10 + 76 >> 2] = 0; //@line 15177
 $57 = $10 + 72 | 0; //@line 15178
 HEAP32[$57 >> 2] = 15500; //@line 15179
 HEAP8[$10 + 86 >> 0] = 0; //@line 15181
 HEAP32[$10 + 88 >> 2] = 0; //@line 15183
 $60 = HEAP32[177] | 0; //@line 15184
 HEAP32[177] = $60 + 1; //@line 15186
 HEAP32[$10 >> 2] = ($60 | 0) > 32767 ? 1 : $60; //@line 15189
 $63 = HEAP32[1675] | 0; //@line 15190
 if (!$63) {
  $$1 = 0; //@line 15193
  $113 = 0; //@line 15193
 } else {
  $66 = HEAP32[$63 + 56 >> 2] | 0; //@line 15196
  if (!$66) {
   $$1 = 1; //@line 15199
   $113 = 0; //@line 15199
  } else {
   if ((HEAP32[$63 + 8 >> 2] | 0) == ($8 | 0)) {
    HEAP32[$48 >> 2] = $66; //@line 15205
    HEAP32[$49 >> 2] = HEAP32[$63 + 60 >> 2]; //@line 15208
    $$1 = 1; //@line 15209
    $113 = $66; //@line 15209
   } else {
    $$1 = 1; //@line 15211
    $113 = 0; //@line 15211
   }
  }
 }
 $73 = HEAP32[1676] | 0; //@line 15215
 if (!$73) {
  $$1$1 = $$1; //@line 15218
  $126 = $113; //@line 15218
 } else {
  if (!$113) {
   $115 = HEAP32[$73 + 56 >> 2] | 0; //@line 15223
   if (!$115) {
    $167 = 0; //@line 15226
   } else {
    if ((HEAP32[$73 + 8 >> 2] | 0) == ($8 | 0)) {
     HEAP32[$48 >> 2] = $115; //@line 15232
     HEAP32[$49 >> 2] = HEAP32[$73 + 60 >> 2]; //@line 15235
     $167 = $115; //@line 15236
    } else {
     $167 = 0; //@line 15238
    }
   }
  } else {
   $167 = $113; //@line 15242
  }
  $$1$1 = $$1 + 1 | 0; //@line 15245
  $126 = $167; //@line 15245
 }
 $123 = HEAP32[1677] | 0; //@line 15247
 if (!$123) {
  $$1$2 = $$1$1; //@line 15250
  $139 = $126; //@line 15250
 } else {
  if (!$126) {
   $128 = HEAP32[$123 + 56 >> 2] | 0; //@line 15255
   if (!$128) {
    $168 = 0; //@line 15258
   } else {
    if ((HEAP32[$123 + 8 >> 2] | 0) == ($8 | 0)) {
     HEAP32[$48 >> 2] = $128; //@line 15264
     HEAP32[$49 >> 2] = HEAP32[$123 + 60 >> 2]; //@line 15267
     $168 = $128; //@line 15268
    } else {
     $168 = 0; //@line 15270
    }
   }
  } else {
   $168 = $126; //@line 15274
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 15277
  $139 = $168; //@line 15277
 }
 $136 = HEAP32[1678] | 0; //@line 15279
 if (!$136) {
  $$1$3 = $$1$2; //@line 15282
  $152 = $139; //@line 15282
 } else {
  if (!$139) {
   $141 = HEAP32[$136 + 56 >> 2] | 0; //@line 15287
   if (!$141) {
    $169 = 0; //@line 15290
   } else {
    if ((HEAP32[$136 + 8 >> 2] | 0) == ($8 | 0)) {
     HEAP32[$48 >> 2] = $141; //@line 15296
     HEAP32[$49 >> 2] = HEAP32[$136 + 60 >> 2]; //@line 15299
     $169 = $141; //@line 15300
    } else {
     $169 = 0; //@line 15302
    }
   }
  } else {
   $169 = $139; //@line 15306
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 15309
  $152 = $169; //@line 15309
 }
 $149 = HEAP32[1679] | 0; //@line 15311
 if (!$149) {
  $$1$4 = $$1$3; //@line 15314
 } else {
  if (!$152) {
   $154 = HEAP32[$149 + 56 >> 2] | 0; //@line 15319
   if ($154 | 0) {
    if ((HEAP32[$149 + 8 >> 2] | 0) == ($8 | 0)) {
     HEAP32[$48 >> 2] = $154; //@line 15326
     HEAP32[$49 >> 2] = HEAP32[$149 + 60 >> 2]; //@line 15329
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 15334
 }
 HEAP32[6700 + ($26 << 2) >> 2] = $10; //@line 15337
 HEAP32[$57 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 15340
 if (HEAP8[7580] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 15344
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 15345
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 15348
   $110 = $ReallocAsyncCtx13 + 4 | 0; //@line 15349
   HEAP32[$110 >> 2] = $10; //@line 15350
   $111 = $ReallocAsyncCtx13 + 8 | 0; //@line 15351
   HEAP32[$111 >> 2] = $24; //@line 15352
   sp = STACKTOP; //@line 15353
   return;
  }
  ___async_unwind = 0; //@line 15356
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 15357
  $110 = $ReallocAsyncCtx13 + 4 | 0; //@line 15358
  HEAP32[$110 >> 2] = $10; //@line 15359
  $111 = $ReallocAsyncCtx13 + 8 | 0; //@line 15360
  HEAP32[$111 >> 2] = $24; //@line 15361
  sp = STACKTOP; //@line 15362
  return;
 }
 $75 = $10 + 44 | 0; //@line 15365
 $76 = HEAP32[$75 >> 2] | 0; //@line 15366
 if (!$76) {
  $90 = $2 + 12 | 0; //@line 15369
  HEAP32[$90 >> 2] = 0; //@line 15370
  $92 = $4 + 4 | 0; //@line 15372
  HEAP32[$92 >> 2] = 0; //@line 15374
  HEAP32[$92 + 4 >> 2] = 0; //@line 15377
  HEAP32[$4 >> 2] = 3; //@line 15378
  $96 = $4 + 12 | 0; //@line 15379
  HEAP32[$96 >> 2] = 712; //@line 15380
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 15381
  $97 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $4) | 0; //@line 15382
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 15385
   $98 = $ReallocAsyncCtx14 + 4 | 0; //@line 15386
   HEAP32[$98 >> 2] = $4; //@line 15387
   $99 = $ReallocAsyncCtx14 + 8 | 0; //@line 15388
   HEAP32[$99 >> 2] = $10; //@line 15389
   $100 = $ReallocAsyncCtx14 + 12 | 0; //@line 15390
   HEAP32[$100 >> 2] = $14; //@line 15391
   $101 = $ReallocAsyncCtx14 + 16 | 0; //@line 15392
   HEAP32[$101 >> 2] = $24; //@line 15393
   $102 = $ReallocAsyncCtx14 + 20 | 0; //@line 15394
   HEAP32[$102 >> 2] = $75; //@line 15395
   $103 = $ReallocAsyncCtx14 + 24 | 0; //@line 15396
   HEAP32[$103 >> 2] = $10; //@line 15397
   $104 = $ReallocAsyncCtx14 + 28 | 0; //@line 15398
   HEAP32[$104 >> 2] = $96; //@line 15399
   $105 = $ReallocAsyncCtx14 + 32 | 0; //@line 15400
   HEAP32[$105 >> 2] = $6; //@line 15401
   $106 = $ReallocAsyncCtx14 + 36 | 0; //@line 15402
   HEAP32[$106 >> 2] = $2; //@line 15403
   $107 = $ReallocAsyncCtx14 + 40 | 0; //@line 15404
   HEAP32[$107 >> 2] = $90; //@line 15405
   $108 = $ReallocAsyncCtx14 + 44 | 0; //@line 15406
   HEAP32[$108 >> 2] = $12; //@line 15407
   sp = STACKTOP; //@line 15408
   return;
  }
  HEAP32[___async_retval >> 2] = $97; //@line 15412
  ___async_unwind = 0; //@line 15413
  HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 15414
  $98 = $ReallocAsyncCtx14 + 4 | 0; //@line 15415
  HEAP32[$98 >> 2] = $4; //@line 15416
  $99 = $ReallocAsyncCtx14 + 8 | 0; //@line 15417
  HEAP32[$99 >> 2] = $10; //@line 15418
  $100 = $ReallocAsyncCtx14 + 12 | 0; //@line 15419
  HEAP32[$100 >> 2] = $14; //@line 15420
  $101 = $ReallocAsyncCtx14 + 16 | 0; //@line 15421
  HEAP32[$101 >> 2] = $24; //@line 15422
  $102 = $ReallocAsyncCtx14 + 20 | 0; //@line 15423
  HEAP32[$102 >> 2] = $75; //@line 15424
  $103 = $ReallocAsyncCtx14 + 24 | 0; //@line 15425
  HEAP32[$103 >> 2] = $10; //@line 15426
  $104 = $ReallocAsyncCtx14 + 28 | 0; //@line 15427
  HEAP32[$104 >> 2] = $96; //@line 15428
  $105 = $ReallocAsyncCtx14 + 32 | 0; //@line 15429
  HEAP32[$105 >> 2] = $6; //@line 15430
  $106 = $ReallocAsyncCtx14 + 36 | 0; //@line 15431
  HEAP32[$106 >> 2] = $2; //@line 15432
  $107 = $ReallocAsyncCtx14 + 40 | 0; //@line 15433
  HEAP32[$107 >> 2] = $90; //@line 15434
  $108 = $ReallocAsyncCtx14 + 44 | 0; //@line 15435
  HEAP32[$108 >> 2] = $12; //@line 15436
  sp = STACKTOP; //@line 15437
  return;
 } else {
  $79 = HEAP32[$76 + 4 >> 2] | 0; //@line 15441
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 15442
  FUNCTION_TABLE_vii[$79 & 7]($2, $6); //@line 15443
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 15446
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 15447
   HEAP32[$80 >> 2] = $2; //@line 15448
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 15449
   HEAP32[$81 >> 2] = $4; //@line 15450
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 15451
   HEAP32[$82 >> 2] = $75; //@line 15452
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 15453
   HEAP32[$83 >> 2] = $10; //@line 15454
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 15455
   HEAP32[$84 >> 2] = $10; //@line 15456
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 15457
   HEAP32[$85 >> 2] = $6; //@line 15458
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 15459
   HEAP32[$86 >> 2] = $12; //@line 15460
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 15461
   HEAP32[$87 >> 2] = $14; //@line 15462
   $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 15463
   HEAP32[$88 >> 2] = $24; //@line 15464
   $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 15465
   HEAP32[$89 >> 2] = $75; //@line 15466
   sp = STACKTOP; //@line 15467
   return;
  }
  ___async_unwind = 0; //@line 15470
  HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 15471
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 15472
  HEAP32[$80 >> 2] = $2; //@line 15473
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 15474
  HEAP32[$81 >> 2] = $4; //@line 15475
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 15476
  HEAP32[$82 >> 2] = $75; //@line 15477
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 15478
  HEAP32[$83 >> 2] = $10; //@line 15479
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 15480
  HEAP32[$84 >> 2] = $10; //@line 15481
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 15482
  HEAP32[$85 >> 2] = $6; //@line 15483
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 15484
  HEAP32[$86 >> 2] = $12; //@line 15485
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 15486
  HEAP32[$87 >> 2] = $14; //@line 15487
  $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 15488
  HEAP32[$88 >> 2] = $24; //@line 15489
  $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 15490
  HEAP32[$89 >> 2] = $75; //@line 15491
  sp = STACKTOP; //@line 15492
  return;
 }
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$lcssa88 = 0, $$sroa_idx5$i$i = 0, $1 = 0, $11 = 0, $110 = 0, $111 = 0, $125 = 0, $128 = 0, $13 = 0, $142 = 0, $145 = 0, $15 = 0, $163 = 0, $169 = 0, $175 = 0, $184 = 0, $189 = 0, $194 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $43 = 0, $59 = 0, $62 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $89 = 0, $90 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11084
 STACKTOP = STACKTOP + 32 | 0; //@line 11085
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11085
 $1 = sp + 16 | 0; //@line 11086
 $2 = sp; //@line 11087
 $3 = HEAP32[1675] | 0; //@line 11088
 if (!$3) {
  label = 3; //@line 11091
 } else {
  if ((HEAP32[$3 + 8 >> 2] | 0) == ($0 | 0)) {
   $$lcssa88 = $3; //@line 11097
  } else {
   label = 3; //@line 11099
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1676] | 0; //@line 11104
   if ($8 | 0) {
    if ((HEAP32[$8 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $8; //@line 11111
     break;
    }
   }
   $184 = HEAP32[1677] | 0; //@line 11115
   if ($184 | 0) {
    if ((HEAP32[$184 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $184; //@line 11122
     break;
    }
   }
   $189 = HEAP32[1678] | 0; //@line 11126
   if ($189 | 0) {
    if ((HEAP32[$189 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $189; //@line 11133
     break;
    }
   }
   $194 = HEAP32[1679] | 0; //@line 11137
   if (!$194) {
    STACKTOP = sp; //@line 11140
    return;
   }
   if ((HEAP32[$194 + 8 >> 2] | 0) == ($0 | 0)) {
    $$lcssa88 = $194; //@line 11146
   } else {
    STACKTOP = sp; //@line 11148
    return;
   }
  }
 } while (0);
 $11 = HEAP32[$$lcssa88 + 56 >> 2] | 0; //@line 11153
 if (!$11) {
  STACKTOP = sp; //@line 11156
  return;
 }
 $13 = _malloc(512) | 0; //@line 11158
 if (!$13) {
  STACKTOP = sp; //@line 11161
  return;
 }
 $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11163
 $15 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 11164
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 242; //@line 11167
  HEAP32[$AsyncCtx20 + 4 >> 2] = $13; //@line 11169
  HEAP32[$AsyncCtx20 + 8 >> 2] = $1; //@line 11171
  HEAP32[$AsyncCtx20 + 12 >> 2] = $2; //@line 11173
  HEAP32[$AsyncCtx20 + 16 >> 2] = $11; //@line 11175
  sp = STACKTOP; //@line 11176
  STACKTOP = sp; //@line 11177
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 11179
 L28 : do {
  if (($15 | 0) >= 12) {
   $21 = $13 + 1 | 0; //@line 11183
   $22 = $1 + 12 | 0; //@line 11184
   $23 = $2 + 8 | 0; //@line 11185
   $$sroa_idx5$i$i = $2 + 4 | 0; //@line 11186
   $24 = $2 + 12 | 0; //@line 11187
   L30 : while (1) {
    $30 = (HEAPU8[$13 >> 0] | 0) << 8 | (HEAPU8[$21 >> 0] | 0); //@line 11194
    $31 = $30 & 65535; //@line 11195
    $32 = HEAP32[1675] | 0; //@line 11196
    if (!$32) {
     label = 12; //@line 11199
    } else {
     if (($30 | 0) == (HEAPU16[$32 + 80 >> 1] | 0 | 0)) {
      $$lcssa = $32; //@line 11206
      label = 13; //@line 11207
     } else {
      label = 12; //@line 11209
     }
    }
    do {
     if ((label | 0) == 12) {
      label = 0; //@line 11214
      $38 = HEAP32[1676] | 0; //@line 11215
      if ($38 | 0) {
       if (($30 | 0) == (HEAPU16[$38 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $38; //@line 11223
        label = 13; //@line 11224
        break;
       }
      }
      $163 = HEAP32[1677] | 0; //@line 11228
      if ($163 | 0) {
       if (($30 | 0) == (HEAPU16[$163 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $163; //@line 11236
        label = 13; //@line 11237
        break;
       }
      }
      $169 = HEAP32[1678] | 0; //@line 11241
      if ($169 | 0) {
       if (($30 | 0) == (HEAPU16[$169 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $169; //@line 11249
        label = 13; //@line 11250
        break;
       }
      }
      $175 = HEAP32[1679] | 0; //@line 11254
      if ($175 | 0) {
       if (($30 | 0) == (HEAPU16[$175 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $175; //@line 11262
        label = 13; //@line 11263
       }
      }
     }
    } while (0);
    do {
     if ((label | 0) == 13) {
      label = 0; //@line 11270
      if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
       $59 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 11276
       $$ = $59 >>> 0 > 1 ? $59 : 1; //@line 11278
       $AsyncCtx11 = _emscripten_alloc_async_context(68, sp) | 0; //@line 11282
       $62 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 8621) | 0; //@line 11283
       if (___async) {
        label = 18; //@line 11286
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11289
       $79 = $$lcssa + 64 | 0; //@line 11290
       HEAP32[$79 >> 2] = $62; //@line 11291
       $81 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($13, $31, $$lcssa + 68 | 0, $62, $$) | 0; //@line 11293
       if (($81 | 0) < 0) {
        $83 = HEAP32[$79 >> 2] | 0; //@line 11296
        if ($83 | 0) {
         __ZdaPv($83); //@line 11299
        }
        HEAP32[$79 >> 2] = 0; //@line 11301
        break;
       }
       HEAP8[$$lcssa + 86 >> 0] = $81; //@line 11306
       HEAP32[$$lcssa + 4 >> 2] = -3009; //@line 11308
       HEAP32[$$lcssa + 76 >> 2] = 0; //@line 11310
       $89 = $$lcssa + 44 | 0; //@line 11311
       $90 = HEAP32[$89 >> 2] | 0; //@line 11312
       if (!$90) {
        $110 = 0; //@line 11315
       } else {
        $94 = HEAP32[$90 + 4 >> 2] | 0; //@line 11319
        $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 11320
        FUNCTION_TABLE_vii[$94 & 7]($1, $$lcssa + 32 | 0); //@line 11321
        if (___async) {
         label = 25; //@line 11324
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 11327
        $110 = HEAP32[$89 >> 2] | 0; //@line 11329
       }
       HEAP32[$22 >> 2] = $110; //@line 11331
       $111 = HEAP32[$$lcssa >> 2] | 0; //@line 11332
       HEAP32[$23 >> 2] = 0; //@line 11333
       HEAP32[$2 >> 2] = 175; //@line 11334
       HEAP32[$$sroa_idx5$i$i >> 2] = $111; //@line 11335
       HEAP32[$24 >> 2] = 724; //@line 11336
       $AsyncCtx14 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11337
       __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 11338
       if (___async) {
        label = 28; //@line 11341
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx14 | 0); //@line 11344
       $125 = HEAP32[$24 >> 2] | 0; //@line 11345
       if ($125 | 0) {
        $128 = HEAP32[$125 + 8 >> 2] | 0; //@line 11349
        $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11350
        FUNCTION_TABLE_vi[$128 & 511]($2); //@line 11351
        if (___async) {
         label = 31; //@line 11354
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11357
       }
       $142 = HEAP32[$22 >> 2] | 0; //@line 11359
       if ($142 | 0) {
        $145 = HEAP32[$142 + 8 >> 2] | 0; //@line 11363
        $AsyncCtx7 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11364
        FUNCTION_TABLE_vi[$145 & 511]($1); //@line 11365
        if (___async) {
         label = 35; //@line 11368
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11371
       }
      }
     }
    } while (0);
    $AsyncCtx17 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11376
    $43 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 11377
    if (___async) {
     label = 15; //@line 11380
     break;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11383
    if (($43 | 0) < 12) {
     break L28;
    }
   }
   if ((label | 0) == 15) {
    HEAP32[$AsyncCtx17 >> 2] = 243; //@line 11390
    HEAP32[$AsyncCtx17 + 4 >> 2] = $13; //@line 11392
    HEAP32[$AsyncCtx17 + 8 >> 2] = $2; //@line 11394
    HEAP32[$AsyncCtx17 + 12 >> 2] = $1; //@line 11396
    HEAP32[$AsyncCtx17 + 16 >> 2] = $24; //@line 11398
    HEAP32[$AsyncCtx17 + 20 >> 2] = $22; //@line 11400
    HEAP32[$AsyncCtx17 + 24 >> 2] = $22; //@line 11402
    HEAP32[$AsyncCtx17 + 28 >> 2] = $23; //@line 11404
    HEAP32[$AsyncCtx17 + 32 >> 2] = $2; //@line 11406
    HEAP32[$AsyncCtx17 + 36 >> 2] = $$sroa_idx5$i$i; //@line 11408
    HEAP32[$AsyncCtx17 + 40 >> 2] = $1; //@line 11410
    HEAP32[$AsyncCtx17 + 44 >> 2] = $2; //@line 11412
    HEAP32[$AsyncCtx17 + 48 >> 2] = $11; //@line 11414
    HEAP32[$AsyncCtx17 + 52 >> 2] = $21; //@line 11416
    sp = STACKTOP; //@line 11417
    STACKTOP = sp; //@line 11418
    return;
   } else if ((label | 0) == 18) {
    HEAP32[$AsyncCtx11 >> 2] = 244; //@line 11421
    HEAP32[$AsyncCtx11 + 4 >> 2] = $13; //@line 11423
    HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 11425
    HEAP32[$AsyncCtx11 + 12 >> 2] = $1; //@line 11427
    HEAP32[$AsyncCtx11 + 16 >> 2] = $24; //@line 11429
    HEAP32[$AsyncCtx11 + 20 >> 2] = $22; //@line 11431
    HEAP32[$AsyncCtx11 + 24 >> 2] = $$lcssa; //@line 11433
    HEAP32[$AsyncCtx11 + 28 >> 2] = $22; //@line 11435
    HEAP32[$AsyncCtx11 + 32 >> 2] = $23; //@line 11437
    HEAP32[$AsyncCtx11 + 36 >> 2] = $2; //@line 11439
    HEAP32[$AsyncCtx11 + 40 >> 2] = $$sroa_idx5$i$i; //@line 11441
    HEAP32[$AsyncCtx11 + 44 >> 2] = $1; //@line 11443
    HEAP32[$AsyncCtx11 + 48 >> 2] = $2; //@line 11445
    HEAP32[$AsyncCtx11 + 52 >> 2] = $11; //@line 11447
    HEAP32[$AsyncCtx11 + 56 >> 2] = $21; //@line 11449
    HEAP16[$AsyncCtx11 + 60 >> 1] = $31; //@line 11451
    HEAP32[$AsyncCtx11 + 64 >> 2] = $$; //@line 11453
    sp = STACKTOP; //@line 11454
    STACKTOP = sp; //@line 11455
    return;
   } else if ((label | 0) == 25) {
    HEAP32[$AsyncCtx >> 2] = 245; //@line 11458
    HEAP32[$AsyncCtx + 4 >> 2] = $13; //@line 11460
    HEAP32[$AsyncCtx + 8 >> 2] = $89; //@line 11462
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 11464
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 11466
    HEAP32[$AsyncCtx + 20 >> 2] = $24; //@line 11468
    HEAP32[$AsyncCtx + 24 >> 2] = $22; //@line 11470
    HEAP32[$AsyncCtx + 28 >> 2] = $22; //@line 11472
    HEAP32[$AsyncCtx + 32 >> 2] = $$lcssa; //@line 11474
    HEAP32[$AsyncCtx + 36 >> 2] = $23; //@line 11476
    HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 11478
    HEAP32[$AsyncCtx + 44 >> 2] = $$sroa_idx5$i$i; //@line 11480
    HEAP32[$AsyncCtx + 48 >> 2] = $1; //@line 11482
    HEAP32[$AsyncCtx + 52 >> 2] = $2; //@line 11484
    HEAP32[$AsyncCtx + 56 >> 2] = $11; //@line 11486
    HEAP32[$AsyncCtx + 60 >> 2] = $21; //@line 11488
    sp = STACKTOP; //@line 11489
    STACKTOP = sp; //@line 11490
    return;
   } else if ((label | 0) == 28) {
    HEAP32[$AsyncCtx14 >> 2] = 246; //@line 11493
    HEAP32[$AsyncCtx14 + 4 >> 2] = $13; //@line 11495
    HEAP32[$AsyncCtx14 + 8 >> 2] = $2; //@line 11497
    HEAP32[$AsyncCtx14 + 12 >> 2] = $1; //@line 11499
    HEAP32[$AsyncCtx14 + 16 >> 2] = $24; //@line 11501
    HEAP32[$AsyncCtx14 + 20 >> 2] = $22; //@line 11503
    HEAP32[$AsyncCtx14 + 24 >> 2] = $22; //@line 11505
    HEAP32[$AsyncCtx14 + 28 >> 2] = $23; //@line 11507
    HEAP32[$AsyncCtx14 + 32 >> 2] = $2; //@line 11509
    HEAP32[$AsyncCtx14 + 36 >> 2] = $$sroa_idx5$i$i; //@line 11511
    HEAP32[$AsyncCtx14 + 40 >> 2] = $1; //@line 11513
    HEAP32[$AsyncCtx14 + 44 >> 2] = $2; //@line 11515
    HEAP32[$AsyncCtx14 + 48 >> 2] = $11; //@line 11517
    HEAP32[$AsyncCtx14 + 52 >> 2] = $21; //@line 11519
    sp = STACKTOP; //@line 11520
    STACKTOP = sp; //@line 11521
    return;
   } else if ((label | 0) == 31) {
    HEAP32[$AsyncCtx3 >> 2] = 247; //@line 11524
    HEAP32[$AsyncCtx3 + 4 >> 2] = $13; //@line 11526
    HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 11528
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 11530
    HEAP32[$AsyncCtx3 + 16 >> 2] = $24; //@line 11532
    HEAP32[$AsyncCtx3 + 20 >> 2] = $22; //@line 11534
    HEAP32[$AsyncCtx3 + 24 >> 2] = $22; //@line 11536
    HEAP32[$AsyncCtx3 + 28 >> 2] = $23; //@line 11538
    HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 11540
    HEAP32[$AsyncCtx3 + 36 >> 2] = $$sroa_idx5$i$i; //@line 11542
    HEAP32[$AsyncCtx3 + 40 >> 2] = $1; //@line 11544
    HEAP32[$AsyncCtx3 + 44 >> 2] = $2; //@line 11546
    HEAP32[$AsyncCtx3 + 48 >> 2] = $11; //@line 11548
    HEAP32[$AsyncCtx3 + 52 >> 2] = $21; //@line 11550
    sp = STACKTOP; //@line 11551
    STACKTOP = sp; //@line 11552
    return;
   } else if ((label | 0) == 35) {
    HEAP32[$AsyncCtx7 >> 2] = 248; //@line 11555
    HEAP32[$AsyncCtx7 + 4 >> 2] = $13; //@line 11557
    HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 11559
    HEAP32[$AsyncCtx7 + 12 >> 2] = $1; //@line 11561
    HEAP32[$AsyncCtx7 + 16 >> 2] = $24; //@line 11563
    HEAP32[$AsyncCtx7 + 20 >> 2] = $22; //@line 11565
    HEAP32[$AsyncCtx7 + 24 >> 2] = $22; //@line 11567
    HEAP32[$AsyncCtx7 + 28 >> 2] = $23; //@line 11569
    HEAP32[$AsyncCtx7 + 32 >> 2] = $2; //@line 11571
    HEAP32[$AsyncCtx7 + 36 >> 2] = $$sroa_idx5$i$i; //@line 11573
    HEAP32[$AsyncCtx7 + 40 >> 2] = $1; //@line 11575
    HEAP32[$AsyncCtx7 + 44 >> 2] = $2; //@line 11577
    HEAP32[$AsyncCtx7 + 48 >> 2] = $11; //@line 11579
    HEAP32[$AsyncCtx7 + 52 >> 2] = $21; //@line 11581
    sp = STACKTOP; //@line 11582
    STACKTOP = sp; //@line 11583
    return;
   }
  }
 } while (0);
 _free($13); //@line 11587
 STACKTOP = sp; //@line 11588
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_86($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy16 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $97 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22272
 STACKTOP = STACKTOP + 48 | 0; //@line 22273
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 22273
 $$byval_copy16 = sp + 20 | 0; //@line 22274
 $$byval_copy = sp; //@line 22275
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22277
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22279
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22281
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22283
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22285
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22287
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22289
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22291
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22293
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22295
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22297
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22299
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22301
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  HEAP8[$14 >> 0] = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24; //@line 22308
  $97 = HEAP8[$16 >> 0] | 0; //@line 22309
  if ($97 << 24 >> 24) {
   HEAP8[$16 >> 0] = $97 + -1 << 24 >> 24; //@line 22313
  }
  _free($10); //@line 22315
  HEAP32[$6 + 76 >> 2] = 5e3; //@line 22317
  STACKTOP = sp; //@line 22318
  return;
 }
 HEAP8[$8 >> 0] = (HEAP8[$8 >> 0] | 0) + 1 << 24 >> 24; //@line 22322
 HEAP32[$22 >> 2] = 0; //@line 22323
 HEAP32[$22 + 4 >> 2] = 0; //@line 22323
 HEAP32[$22 + 8 >> 2] = 0; //@line 22323
 HEAP32[$22 + 12 >> 2] = 0; //@line 22323
 HEAP32[$22 + 16 >> 2] = 0; //@line 22323
 HEAP32[$$byval_copy16 >> 2] = HEAP32[$24 >> 2]; //@line 22324
 HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$24 + 4 >> 2]; //@line 22324
 HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$24 + 8 >> 2]; //@line 22324
 HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$24 + 12 >> 2]; //@line 22324
 HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$24 + 16 >> 2]; //@line 22324
 __ZN13SocketAddressC2E10nsapi_addrt($2, $$byval_copy16, 0); //@line 22325
 do {
  if (HEAP8[$16 >> 0] | 0) {
   $28 = HEAP32[$26 >> 2] | 0; //@line 22330
   $29 = HEAP8[$8 >> 0] | 0; //@line 22331
   if (($29 & 255) > 9) {
    if (!(HEAP8[$14 >> 0] | 0)) {
     break;
    }
    HEAP8[$8 >> 0] = 0; //@line 22339
    HEAP8[$14 >> 0] = 0; //@line 22340
    $35 = 0; //@line 22341
   } else {
    if (($29 & 255) < 5) {
     $35 = $29; //@line 22345
    } else {
     $56 = 608 + ((($29 & 255) + -5 | 0) * 20 | 0) | 0; //@line 22349
     HEAP32[$$byval_copy >> 2] = HEAP32[$56 >> 2]; //@line 22350
     HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$56 + 4 >> 2]; //@line 22350
     HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$56 + 8 >> 2]; //@line 22350
     HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$56 + 12 >> 2]; //@line 22350
     HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$56 + 16 >> 2]; //@line 22350
     __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 22351
     __ZN13SocketAddress8set_portEt($2, 53); //@line 22352
     $75 = HEAP32[$18 >> 2] | 0; //@line 22353
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 22354
     $76 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($75, $2, $10, $20) | 0; //@line 22355
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 241; //@line 22358
      $77 = $ReallocAsyncCtx12 + 4 | 0; //@line 22359
      HEAP32[$77 >> 2] = $2; //@line 22360
      $78 = $ReallocAsyncCtx12 + 8 | 0; //@line 22361
      HEAP32[$78 >> 2] = $4; //@line 22362
      $79 = $ReallocAsyncCtx12 + 12 | 0; //@line 22363
      HEAP32[$79 >> 2] = $6; //@line 22364
      $80 = $ReallocAsyncCtx12 + 16 | 0; //@line 22365
      HEAP32[$80 >> 2] = $8; //@line 22366
      $81 = $ReallocAsyncCtx12 + 20 | 0; //@line 22367
      HEAP32[$81 >> 2] = $10; //@line 22368
      $82 = $ReallocAsyncCtx12 + 24 | 0; //@line 22369
      HEAP32[$82 >> 2] = $12; //@line 22370
      $83 = $ReallocAsyncCtx12 + 28 | 0; //@line 22371
      HEAP32[$83 >> 2] = $14; //@line 22372
      $84 = $ReallocAsyncCtx12 + 32 | 0; //@line 22373
      HEAP32[$84 >> 2] = $16; //@line 22374
      $85 = $ReallocAsyncCtx12 + 36 | 0; //@line 22375
      HEAP32[$85 >> 2] = $18; //@line 22376
      $86 = $ReallocAsyncCtx12 + 40 | 0; //@line 22377
      HEAP32[$86 >> 2] = $20; //@line 22378
      $87 = $ReallocAsyncCtx12 + 44 | 0; //@line 22379
      HEAP32[$87 >> 2] = $22; //@line 22380
      $88 = $ReallocAsyncCtx12 + 48 | 0; //@line 22381
      HEAP32[$88 >> 2] = $24; //@line 22382
      $89 = $ReallocAsyncCtx12 + 52 | 0; //@line 22383
      HEAP32[$89 >> 2] = $26; //@line 22384
      sp = STACKTOP; //@line 22385
      STACKTOP = sp; //@line 22386
      return;
     }
     HEAP32[___async_retval >> 2] = $76; //@line 22389
     ___async_unwind = 0; //@line 22390
     HEAP32[$ReallocAsyncCtx12 >> 2] = 241; //@line 22391
     $77 = $ReallocAsyncCtx12 + 4 | 0; //@line 22392
     HEAP32[$77 >> 2] = $2; //@line 22393
     $78 = $ReallocAsyncCtx12 + 8 | 0; //@line 22394
     HEAP32[$78 >> 2] = $4; //@line 22395
     $79 = $ReallocAsyncCtx12 + 12 | 0; //@line 22396
     HEAP32[$79 >> 2] = $6; //@line 22397
     $80 = $ReallocAsyncCtx12 + 16 | 0; //@line 22398
     HEAP32[$80 >> 2] = $8; //@line 22399
     $81 = $ReallocAsyncCtx12 + 20 | 0; //@line 22400
     HEAP32[$81 >> 2] = $10; //@line 22401
     $82 = $ReallocAsyncCtx12 + 24 | 0; //@line 22402
     HEAP32[$82 >> 2] = $12; //@line 22403
     $83 = $ReallocAsyncCtx12 + 28 | 0; //@line 22404
     HEAP32[$83 >> 2] = $14; //@line 22405
     $84 = $ReallocAsyncCtx12 + 32 | 0; //@line 22406
     HEAP32[$84 >> 2] = $16; //@line 22407
     $85 = $ReallocAsyncCtx12 + 36 | 0; //@line 22408
     HEAP32[$85 >> 2] = $18; //@line 22409
     $86 = $ReallocAsyncCtx12 + 40 | 0; //@line 22410
     HEAP32[$86 >> 2] = $20; //@line 22411
     $87 = $ReallocAsyncCtx12 + 44 | 0; //@line 22412
     HEAP32[$87 >> 2] = $22; //@line 22413
     $88 = $ReallocAsyncCtx12 + 48 | 0; //@line 22414
     HEAP32[$88 >> 2] = $24; //@line 22415
     $89 = $ReallocAsyncCtx12 + 52 | 0; //@line 22416
     HEAP32[$89 >> 2] = $26; //@line 22417
     sp = STACKTOP; //@line 22418
     STACKTOP = sp; //@line 22419
     return;
    }
   }
   $38 = HEAP32[(HEAP32[$28 >> 2] | 0) + 28 >> 2] | 0; //@line 22425
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 22426
   $39 = FUNCTION_TABLE_iiii[$38 & 31]($28, $35 & 255, $2) | 0; //@line 22427
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 235; //@line 22430
    $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 22431
    HEAP32[$40 >> 2] = $2; //@line 22432
    $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 22433
    HEAP32[$41 >> 2] = $4; //@line 22434
    $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 22435
    HEAP32[$42 >> 2] = $6; //@line 22436
    $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 22437
    HEAP32[$43 >> 2] = $8; //@line 22438
    $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 22439
    HEAP32[$44 >> 2] = $10; //@line 22440
    $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 22441
    HEAP32[$45 >> 2] = $12; //@line 22442
    $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 22443
    HEAP32[$46 >> 2] = $14; //@line 22444
    $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 22445
    HEAP32[$47 >> 2] = $16; //@line 22446
    $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 22447
    HEAP32[$48 >> 2] = $18; //@line 22448
    $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 22449
    HEAP32[$49 >> 2] = $20; //@line 22450
    $50 = $ReallocAsyncCtx4 + 44 | 0; //@line 22451
    HEAP32[$50 >> 2] = $22; //@line 22452
    $51 = $ReallocAsyncCtx4 + 48 | 0; //@line 22453
    HEAP32[$51 >> 2] = $24; //@line 22454
    $52 = $ReallocAsyncCtx4 + 52 | 0; //@line 22455
    HEAP32[$52 >> 2] = $26; //@line 22456
    sp = STACKTOP; //@line 22457
    STACKTOP = sp; //@line 22458
    return;
   }
   HEAP32[___async_retval >> 2] = $39; //@line 22461
   ___async_unwind = 0; //@line 22462
   HEAP32[$ReallocAsyncCtx4 >> 2] = 235; //@line 22463
   $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 22464
   HEAP32[$40 >> 2] = $2; //@line 22465
   $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 22466
   HEAP32[$41 >> 2] = $4; //@line 22467
   $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 22468
   HEAP32[$42 >> 2] = $6; //@line 22469
   $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 22470
   HEAP32[$43 >> 2] = $8; //@line 22471
   $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 22472
   HEAP32[$44 >> 2] = $10; //@line 22473
   $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 22474
   HEAP32[$45 >> 2] = $12; //@line 22475
   $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 22476
   HEAP32[$46 >> 2] = $14; //@line 22477
   $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 22478
   HEAP32[$47 >> 2] = $16; //@line 22479
   $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 22480
   HEAP32[$48 >> 2] = $18; //@line 22481
   $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 22482
   HEAP32[$49 >> 2] = $20; //@line 22483
   $50 = $ReallocAsyncCtx4 + 44 | 0; //@line 22484
   HEAP32[$50 >> 2] = $22; //@line 22485
   $51 = $ReallocAsyncCtx4 + 48 | 0; //@line 22486
   HEAP32[$51 >> 2] = $24; //@line 22487
   $52 = $ReallocAsyncCtx4 + 52 | 0; //@line 22488
   HEAP32[$52 >> 2] = $26; //@line 22489
   sp = STACKTOP; //@line 22490
   STACKTOP = sp; //@line 22491
   return;
  }
 } while (0);
 $57 = $6 + 28 | 0; //@line 22494
 $58 = HEAP32[$57 >> 2] | 0; //@line 22495
 if (!$58) {
  $69 = $4 + 12 | 0; //@line 22498
  HEAP32[$69 >> 2] = 0; //@line 22499
  $70 = HEAP32[$6 >> 2] | 0; //@line 22500
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 22501
  __ZL28nsapi_dns_query_async_deletei($70); //@line 22502
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 237; //@line 22505
   $71 = $ReallocAsyncCtx8 + 4 | 0; //@line 22506
   HEAP32[$71 >> 2] = $69; //@line 22507
   $72 = $ReallocAsyncCtx8 + 8 | 0; //@line 22508
   HEAP32[$72 >> 2] = $4; //@line 22509
   $73 = $ReallocAsyncCtx8 + 12 | 0; //@line 22510
   HEAP32[$73 >> 2] = $10; //@line 22511
   $74 = $ReallocAsyncCtx8 + 16 | 0; //@line 22512
   HEAP32[$74 >> 2] = $12; //@line 22513
   sp = STACKTOP; //@line 22514
   STACKTOP = sp; //@line 22515
   return;
  }
  ___async_unwind = 0; //@line 22517
  HEAP32[$ReallocAsyncCtx8 >> 2] = 237; //@line 22518
  $71 = $ReallocAsyncCtx8 + 4 | 0; //@line 22519
  HEAP32[$71 >> 2] = $69; //@line 22520
  $72 = $ReallocAsyncCtx8 + 8 | 0; //@line 22521
  HEAP32[$72 >> 2] = $4; //@line 22522
  $73 = $ReallocAsyncCtx8 + 12 | 0; //@line 22523
  HEAP32[$73 >> 2] = $10; //@line 22524
  $74 = $ReallocAsyncCtx8 + 16 | 0; //@line 22525
  HEAP32[$74 >> 2] = $12; //@line 22526
  sp = STACKTOP; //@line 22527
  STACKTOP = sp; //@line 22528
  return;
 } else {
  $62 = HEAP32[$58 + 4 >> 2] | 0; //@line 22532
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 22533
  FUNCTION_TABLE_vii[$62 & 7]($4, $6 + 16 | 0); //@line 22534
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 236; //@line 22537
   $63 = $ReallocAsyncCtx5 + 4 | 0; //@line 22538
   HEAP32[$63 >> 2] = $57; //@line 22539
   $64 = $ReallocAsyncCtx5 + 8 | 0; //@line 22540
   HEAP32[$64 >> 2] = $4; //@line 22541
   $65 = $ReallocAsyncCtx5 + 12 | 0; //@line 22542
   HEAP32[$65 >> 2] = $6; //@line 22543
   $66 = $ReallocAsyncCtx5 + 16 | 0; //@line 22544
   HEAP32[$66 >> 2] = $4; //@line 22545
   $67 = $ReallocAsyncCtx5 + 20 | 0; //@line 22546
   HEAP32[$67 >> 2] = $10; //@line 22547
   $68 = $ReallocAsyncCtx5 + 24 | 0; //@line 22548
   HEAP32[$68 >> 2] = $12; //@line 22549
   sp = STACKTOP; //@line 22550
   STACKTOP = sp; //@line 22551
   return;
  }
  ___async_unwind = 0; //@line 22553
  HEAP32[$ReallocAsyncCtx5 >> 2] = 236; //@line 22554
  $63 = $ReallocAsyncCtx5 + 4 | 0; //@line 22555
  HEAP32[$63 >> 2] = $57; //@line 22556
  $64 = $ReallocAsyncCtx5 + 8 | 0; //@line 22557
  HEAP32[$64 >> 2] = $4; //@line 22558
  $65 = $ReallocAsyncCtx5 + 12 | 0; //@line 22559
  HEAP32[$65 >> 2] = $6; //@line 22560
  $66 = $ReallocAsyncCtx5 + 16 | 0; //@line 22561
  HEAP32[$66 >> 2] = $4; //@line 22562
  $67 = $ReallocAsyncCtx5 + 20 | 0; //@line 22563
  HEAP32[$67 >> 2] = $10; //@line 22564
  $68 = $ReallocAsyncCtx5 + 24 | 0; //@line 22565
  HEAP32[$68 >> 2] = $12; //@line 22566
  sp = STACKTOP; //@line 22567
  STACKTOP = sp; //@line 22568
  return;
 }
}
function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre = 0, $$pre$phi201Z2D = 0.0, $104 = 0, $105 = 0, $106 = 0, $116 = 0, $117 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $143 = 0, $153 = 0, $155 = 0, $166 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $193 = 0.0, $194 = 0, $207 = 0.0, $21 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $65 = 0.0, $7 = 0, $72 = 0, $74 = 0, $83 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, $or$cond168 = 0, label = 0, $105$looptemp = 0;
 $5 = $0 + 4 | 0; //@line 7915
 $6 = HEAP32[$5 >> 2] | 0; //@line 7916
 $7 = $0 + 100 | 0; //@line 7917
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1; //@line 7922
  $$0 = HEAPU8[$6 >> 0] | 0; //@line 7925
  $$0142 = 0; //@line 7925
 } else {
  $$0 = ___shgetc($0) | 0; //@line 7928
  $$0142 = 0; //@line 7928
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8; //@line 7933
    break L4;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0146 = 0; //@line 7941
    $$0148 = 0; //@line 7941
    $$0152 = 1.0; //@line 7941
    $$0155 = 0.0; //@line 7941
    $$0159 = 0; //@line 7941
    $$2 = $$0; //@line 7941
    $$2144 = $$0142; //@line 7941
    $51 = 0; //@line 7941
    $53 = 0; //@line 7941
    $96 = 0; //@line 7941
    $98 = 0; //@line 7941
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0; //@line 7945
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1; //@line 7950
   $$0 = HEAPU8[$14 >> 0] | 0; //@line 7953
   $$0142 = 1; //@line 7953
   continue;
  } else {
   $$0 = ___shgetc($0) | 0; //@line 7957
   $$0142 = 1; //@line 7957
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0; //@line 7962
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1; //@line 7967
   $$1$ph = HEAPU8[$21 >> 0] | 0; //@line 7970
  } else {
   $$1$ph = ___shgetc($0) | 0; //@line 7973
  }
  if (($$1$ph | 0) == 48) {
   $36 = 0; //@line 7977
   $37 = 0; //@line 7977
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0; //@line 7979
    if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $29 + 1; //@line 7984
     $41 = HEAPU8[$29 >> 0] | 0; //@line 7987
    } else {
     $41 = ___shgetc($0) | 0; //@line 7990
    }
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0; //@line 7992
    $39 = tempRet0; //@line 7993
    if (($41 | 0) == 48) {
     $36 = $38; //@line 7996
     $37 = $39; //@line 7996
    } else {
     $$0146 = 1; //@line 7998
     $$0148 = 0; //@line 7998
     $$0152 = 1.0; //@line 7998
     $$0155 = 0.0; //@line 7998
     $$0159 = 0; //@line 7998
     $$2 = $41; //@line 7998
     $$2144 = 1; //@line 7998
     $51 = 0; //@line 7998
     $53 = 0; //@line 7998
     $96 = $38; //@line 7998
     $98 = $39; //@line 7998
     break;
    }
   }
  } else {
   $$0146 = 1; //@line 8003
   $$0148 = 0; //@line 8003
   $$0152 = 1.0; //@line 8003
   $$0155 = 0.0; //@line 8003
   $$0159 = 0; //@line 8003
   $$2 = $$1$ph; //@line 8003
   $$2144 = $$0142; //@line 8003
   $51 = 0; //@line 8003
   $53 = 0; //@line 8003
   $96 = 0; //@line 8003
   $98 = 0; //@line 8003
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0; //@line 8007
  $$pre = $$2 | 32; //@line 8009
  if ($42 >>> 0 < 10) {
   label = 20; //@line 8011
  } else {
   $46 = ($$2 | 0) == 46; //@line 8015
   if (!($46 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$2$lcssa = $$2; //@line 8018
    break;
   }
   if ($46) {
    if (!$$0146) {
     $$1147 = 1; //@line 8024
     $$2150 = $$0148; //@line 8024
     $$2154 = $$0152; //@line 8024
     $$2157 = $$0155; //@line 8024
     $$2161 = $$0159; //@line 8024
     $$3145 = $$2144; //@line 8024
     $211 = $53; //@line 8024
     $212 = $51; //@line 8024
     $213 = $53; //@line 8024
     $214 = $51; //@line 8024
    } else {
     $$2$lcssa = 46; //@line 8026
     break;
    }
   } else {
    label = 20; //@line 8030
   }
  }
  if ((label | 0) == 20) {
   label = 0; //@line 8034
   $$0133 = ($$2 | 0) > 57 ? $$pre + -87 | 0 : $42; //@line 8037
   do {
    if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
     $$1149 = $$0148; //@line 8047
     $$1153 = $$0152; //@line 8047
     $$1156 = $$0155; //@line 8047
     $$1160 = $$0133 + ($$0159 << 4) | 0; //@line 8047
    } else {
     if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
      $65 = $$0152 * .0625; //@line 8056
      $$1149 = $$0148; //@line 8059
      $$1153 = $65; //@line 8059
      $$1156 = $$0155 + $65 * +($$0133 | 0); //@line 8059
      $$1160 = $$0159; //@line 8059
      break;
     } else {
      $or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0; //@line 8064
      $$1149 = $or$cond ? $$0148 : 1; //@line 8069
      $$1153 = $$0152; //@line 8069
      $$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5; //@line 8069
      $$1160 = $$0159; //@line 8069
      break;
     }
    }
   } while (0);
   $72 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0; //@line 8074
   $$1147 = $$0146; //@line 8076
   $$2150 = $$1149; //@line 8076
   $$2154 = $$1153; //@line 8076
   $$2157 = $$1156; //@line 8076
   $$2161 = $$1160; //@line 8076
   $$3145 = 1; //@line 8076
   $211 = $96; //@line 8076
   $212 = $98; //@line 8076
   $213 = $72; //@line 8076
   $214 = tempRet0; //@line 8076
  }
  $74 = HEAP32[$5 >> 2] | 0; //@line 8078
  if ($74 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $74 + 1; //@line 8083
   $$0146 = $$1147; //@line 8086
   $$0148 = $$2150; //@line 8086
   $$0152 = $$2154; //@line 8086
   $$0155 = $$2157; //@line 8086
   $$0159 = $$2161; //@line 8086
   $$2 = HEAPU8[$74 >> 0] | 0; //@line 8086
   $$2144 = $$3145; //@line 8086
   $51 = $214; //@line 8086
   $53 = $213; //@line 8086
   $96 = $211; //@line 8086
   $98 = $212; //@line 8086
   continue;
  } else {
   $$0146 = $$1147; //@line 8090
   $$0148 = $$2150; //@line 8090
   $$0152 = $$2154; //@line 8090
   $$0155 = $$2157; //@line 8090
   $$0159 = $$2161; //@line 8090
   $$2 = ___shgetc($0) | 0; //@line 8090
   $$2144 = $$3145; //@line 8090
   $51 = $214; //@line 8090
   $53 = $213; //@line 8090
   $96 = $211; //@line 8090
   $98 = $212; //@line 8090
   continue;
  }
 }
 do {
  if (!$$2144) {
   $83 = (HEAP32[$7 >> 2] | 0) == 0; //@line 8098
   if (!$83) {
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8102
   }
   if (!$4) {
    ___shlim($0, 0); //@line 8106
   } else {
    if (!$83) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8111
    }
    if (!(($$0146 | 0) == 0 | $83)) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8118
    }
   }
   $$0165 = +($3 | 0) * 0.0; //@line 8123
  } else {
   $94 = ($$0146 | 0) == 0; //@line 8125
   $95 = $94 ? $53 : $96; //@line 8126
   $97 = $94 ? $51 : $98; //@line 8127
   if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
    $$3162183 = $$0159; //@line 8134
    $105 = $53; //@line 8134
    $106 = $51; //@line 8134
    while (1) {
     $104 = $$3162183 << 4; //@line 8136
     $105$looptemp = $105;
     $105 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 8137
     if (!(($106 | 0) < 0 | ($106 | 0) == 0 & $105$looptemp >>> 0 < 7)) {
      $$3162$lcssa = $104; //@line 8147
      break;
     } else {
      $$3162183 = $104; //@line 8145
      $106 = tempRet0; //@line 8145
     }
    }
   } else {
    $$3162$lcssa = $$0159; //@line 8152
   }
   if (($$2$lcssa | 32 | 0) == 112) {
    $116 = _scanexp($0, $4) | 0; //@line 8157
    $117 = tempRet0; //@line 8158
    if (($116 | 0) == 0 & ($117 | 0) == -2147483648) {
     if (!$4) {
      ___shlim($0, 0); //@line 8165
      $$0165 = 0.0; //@line 8166
      break;
     }
     if (!(HEAP32[$7 >> 2] | 0)) {
      $134 = 0; //@line 8172
      $135 = 0; //@line 8172
     } else {
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8176
      $134 = 0; //@line 8177
      $135 = 0; //@line 8177
     }
    } else {
     $134 = $116; //@line 8180
     $135 = $117; //@line 8180
    }
   } else {
    if (!(HEAP32[$7 >> 2] | 0)) {
     $134 = 0; //@line 8186
     $135 = 0; //@line 8186
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8190
     $134 = 0; //@line 8191
     $135 = 0; //@line 8191
    }
   }
   $130 = _bitshift64Shl($95 | 0, $97 | 0, 2) | 0; //@line 8194
   $132 = _i64Add($130 | 0, tempRet0 | 0, -32, -1) | 0; //@line 8196
   $136 = _i64Add($132 | 0, tempRet0 | 0, $134 | 0, $135 | 0) | 0; //@line 8198
   $137 = tempRet0; //@line 8199
   if (!$$3162$lcssa) {
    $$0165 = +($3 | 0) * 0.0; //@line 8204
    break;
   }
   $141 = 0 - $2 | 0; //@line 8207
   $143 = (($141 | 0) < 0) << 31 >> 31; //@line 8209
   if (($137 | 0) > ($143 | 0) | ($137 | 0) == ($143 | 0) & $136 >>> 0 > $141 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8217
    $$0165 = +($3 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8221
    break;
   }
   $153 = $2 + -106 | 0; //@line 8224
   $155 = (($153 | 0) < 0) << 31 >> 31; //@line 8226
   if (($137 | 0) < ($155 | 0) | ($137 | 0) == ($155 | 0) & $136 >>> 0 < $153 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8234
    $$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8238
    break;
   }
   if (($$3162$lcssa | 0) > -1) {
    $$3158179 = $$0155; //@line 8243
    $$4163178 = $$3162$lcssa; //@line 8243
    $170 = $136; //@line 8243
    $171 = $137; //@line 8243
    while (1) {
     $166 = !($$3158179 >= .5); //@line 8245
     $$5164 = $$4163178 << 1 | ($166 ^ 1) & 1; //@line 8250
     $$4 = $$3158179 + ($166 ? $$3158179 : $$3158179 + -1.0); //@line 8252
     $172 = _i64Add($170 | 0, $171 | 0, -1, -1) | 0; //@line 8253
     $173 = tempRet0; //@line 8254
     if (($$5164 | 0) > -1) {
      $$3158179 = $$4; //@line 8257
      $$4163178 = $$5164; //@line 8257
      $170 = $172; //@line 8257
      $171 = $173; //@line 8257
     } else {
      $$3158$lcssa = $$4; //@line 8259
      $$4163$lcssa = $$5164; //@line 8259
      $181 = $172; //@line 8259
      $182 = $173; //@line 8259
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155; //@line 8264
    $$4163$lcssa = $$3162$lcssa; //@line 8264
    $181 = $136; //@line 8264
    $182 = $137; //@line 8264
   }
   $176 = (($1 | 0) < 0) << 31 >> 31; //@line 8267
   $179 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0; //@line 8270
   $183 = _i64Add($179 | 0, tempRet0 | 0, $181 | 0, $182 | 0) | 0; //@line 8272
   $184 = tempRet0; //@line 8273
   if (($184 | 0) < ($176 | 0) | ($184 | 0) == ($176 | 0) & $183 >>> 0 < $1 >>> 0) {
    if (($183 | 0) > 0) {
     $$0166 = $183; //@line 8282
     label = 59; //@line 8283
    } else {
     $$0166170 = 0; //@line 8285
     $194 = 84; //@line 8285
     label = 61; //@line 8286
    }
   } else {
    $$0166 = $1; //@line 8289
    label = 59; //@line 8290
   }
   if ((label | 0) == 59) {
    if (($$0166 | 0) < 53) {
     $$0166170 = $$0166; //@line 8296
     $194 = 84 - $$0166 | 0; //@line 8296
     label = 61; //@line 8297
    } else {
     $$0151 = 0.0; //@line 8300
     $$0166169 = $$0166; //@line 8300
     $$pre$phi201Z2D = +($3 | 0); //@line 8300
    }
   }
   if ((label | 0) == 61) {
    $193 = +($3 | 0); //@line 8304
    $$0151 = +_copysignl(+_scalbn(1.0, $194), $193); //@line 8307
    $$0166169 = $$0166170; //@line 8307
    $$pre$phi201Z2D = $193; //@line 8307
   }
   $or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32); //@line 8314
   $207 = ($or$cond168 ? 0.0 : $$3158$lcssa) * $$pre$phi201Z2D + ($$0151 + $$pre$phi201Z2D * +(($$4163$lcssa + ($or$cond168 & 1) | 0) >>> 0)) - $$0151; //@line 8323
   if (!($207 != 0.0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8327
   }
   $$0165 = +_scalbnl($207, $181); //@line 8330
  }
 } while (0);
 return +$$0165;
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12956
 STACKTOP = STACKTOP + 1056 | 0; //@line 12957
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 12957
 $2 = sp + 1024 | 0; //@line 12958
 $3 = sp; //@line 12959
 HEAP32[$2 >> 2] = 0; //@line 12960
 HEAP32[$2 + 4 >> 2] = 0; //@line 12960
 HEAP32[$2 + 8 >> 2] = 0; //@line 12960
 HEAP32[$2 + 12 >> 2] = 0; //@line 12960
 HEAP32[$2 + 16 >> 2] = 0; //@line 12960
 HEAP32[$2 + 20 >> 2] = 0; //@line 12960
 HEAP32[$2 + 24 >> 2] = 0; //@line 12960
 HEAP32[$2 + 28 >> 2] = 0; //@line 12960
 $4 = HEAP8[$1 >> 0] | 0; //@line 12961
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 12965
   $$0185$ph$lcssa327 = -1; //@line 12965
   $$0187219$ph325326 = 0; //@line 12965
   $$1176$ph$ph$lcssa208 = 1; //@line 12965
   $$1186$ph$lcssa = -1; //@line 12965
   label = 26; //@line 12966
  } else {
   $$0187263 = 0; //@line 12968
   $10 = $4; //@line 12968
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 12974
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 12982
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 12985
    $$0187263 = $$0187263 + 1 | 0; //@line 12986
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 12989
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 12991
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 12999
   if ($23) {
    $$0183$ph260 = 0; //@line 13001
    $$0185$ph259 = -1; //@line 13001
    $130 = 1; //@line 13001
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 13003
     $$0183$ph197$ph253 = $$0183$ph260; //@line 13003
     $131 = $130; //@line 13003
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 13005
      $132 = $131; //@line 13005
      L10 : while (1) {
       $$0179242 = 1; //@line 13007
       $25 = $132; //@line 13007
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 13011
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 13013
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 13019
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 13023
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 13028
         $$0185$ph$lcssa = $$0185$ph259; //@line 13028
         break L6;
        } else {
         $25 = $27; //@line 13026
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 13032
       $132 = $37 + 1 | 0; //@line 13033
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 13038
        $$0185$ph$lcssa = $$0185$ph259; //@line 13038
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 13036
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 13043
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 13047
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 13052
       $$0185$ph$lcssa = $$0185$ph259; //@line 13052
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 13050
       $$0183$ph197$ph253 = $25; //@line 13050
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 13057
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 13062
      $$0185$ph$lcssa = $$0183$ph197248; //@line 13062
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 13060
      $$0185$ph259 = $$0183$ph197248; //@line 13060
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 13067
     $$1186$ph238 = -1; //@line 13067
     $133 = 1; //@line 13067
     while (1) {
      $$1176$ph$ph233 = 1; //@line 13069
      $$1184$ph193$ph232 = $$1184$ph239; //@line 13069
      $135 = $133; //@line 13069
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 13071
       $134 = $135; //@line 13071
       L25 : while (1) {
        $$1180222 = 1; //@line 13073
        $52 = $134; //@line 13073
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 13077
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 13079
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 13085
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 13089
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13094
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13094
          $$0187219$ph325326 = $$0187263; //@line 13094
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 13094
          $$1186$ph$lcssa = $$1186$ph238; //@line 13094
          label = 26; //@line 13095
          break L1;
         } else {
          $52 = $45; //@line 13092
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 13099
        $134 = $56 + 1 | 0; //@line 13100
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13105
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13105
         $$0187219$ph325326 = $$0187263; //@line 13105
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 13105
         $$1186$ph$lcssa = $$1186$ph238; //@line 13105
         label = 26; //@line 13106
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 13103
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 13111
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 13115
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13120
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13120
        $$0187219$ph325326 = $$0187263; //@line 13120
        $$1176$ph$ph$lcssa208 = $60; //@line 13120
        $$1186$ph$lcssa = $$1186$ph238; //@line 13120
        label = 26; //@line 13121
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 13118
        $$1184$ph193$ph232 = $52; //@line 13118
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 13126
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13131
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13131
       $$0187219$ph325326 = $$0187263; //@line 13131
       $$1176$ph$ph$lcssa208 = 1; //@line 13131
       $$1186$ph$lcssa = $$1184$ph193227; //@line 13131
       label = 26; //@line 13132
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 13129
       $$1186$ph238 = $$1184$ph193227; //@line 13129
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13137
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13137
     $$0187219$ph325326 = $$0187263; //@line 13137
     $$1176$ph$ph$lcssa208 = 1; //@line 13137
     $$1186$ph$lcssa = -1; //@line 13137
     label = 26; //@line 13138
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 13141
    $$0185$ph$lcssa327 = -1; //@line 13141
    $$0187219$ph325326 = $$0187263; //@line 13141
    $$1176$ph$ph$lcssa208 = 1; //@line 13141
    $$1186$ph$lcssa = -1; //@line 13141
    label = 26; //@line 13142
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 13150
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 13151
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 13152
   $70 = $$1186$$0185 + 1 | 0; //@line 13154
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 13159
    $$3178 = $$1176$$0175; //@line 13159
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 13162
    $$0168 = 0; //@line 13166
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 13166
   }
   $78 = $$0187219$ph325326 | 63; //@line 13168
   $79 = $$0187219$ph325326 + -1 | 0; //@line 13169
   $80 = ($$0168 | 0) != 0; //@line 13170
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 13171
   $$0166 = $0; //@line 13172
   $$0169 = 0; //@line 13172
   $$0170 = $0; //@line 13172
   while (1) {
    $83 = $$0166; //@line 13175
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 13180
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 13184
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 13191
        break L35;
       } else {
        $$3173 = $86; //@line 13194
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 13199
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 13203
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 13215
      $$2181$sink = $$0187219$ph325326; //@line 13215
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 13220
      if ($105 | 0) {
       $$0169$be = 0; //@line 13228
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 13228
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 13232
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 13234
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 13238
       } else {
        $$3182221 = $111; //@line 13240
        $$pr = $113; //@line 13240
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 13248
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 13250
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 13253
          break L54;
         } else {
          $$3182221 = $118; //@line 13256
         }
        }
        $$0169$be = 0; //@line 13260
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 13260
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 13267
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 13270
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 13279
        $$2181$sink = $$3178; //@line 13279
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 13286
    $$0169 = $$0169$be; //@line 13286
    $$0170 = $$3173; //@line 13286
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13290
 return $$3 | 0; //@line 13290
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$011 = 0, $$013 = 0, $$112 = 0, $$byval_copy42 = 0, $104 = 0, $107 = 0, $112 = 0, $115 = 0, $13 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $4 = 0, $44 = 0, $5 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $94 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3069
 STACKTOP = STACKTOP + 224 | 0; //@line 3070
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 3070
 $$byval_copy42 = sp + 204 | 0; //@line 3071
 $4 = sp + 120 | 0; //@line 3072
 $5 = sp + 184 | 0; //@line 3073
 $6 = sp + 56 | 0; //@line 3074
 $7 = sp + 32 | 0; //@line 3075
 $8 = sp + 16 | 0; //@line 3076
 $9 = sp; //@line 3077
 HEAP32[$5 >> 2] = 0; //@line 3078
 HEAP32[$5 + 4 >> 2] = 0; //@line 3078
 HEAP32[$5 + 8 >> 2] = 0; //@line 3078
 HEAP32[$5 + 12 >> 2] = 0; //@line 3078
 HEAP32[$5 + 16 >> 2] = 0; //@line 3078
 HEAP32[$$byval_copy42 >> 2] = HEAP32[$5 >> 2]; //@line 3079
 HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 3079
 HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 3079
 HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 3079
 HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 3079
 __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy42, 0); //@line 3080
 if (!(HEAP8[$1 >> 0] | 0)) {
  $$013 = -3003; //@line 3084
  STACKTOP = sp; //@line 3085
  return $$013 | 0; //@line 3085
 }
 $13 = ($3 | 0) == 0; //@line 3088
 if (__ZN13SocketAddress14set_ip_addressEPKc($4, $1) | 0) {
  if (!$13) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($4) | 0) != ($3 | 0)) {
    $$013 = -3009; //@line 3094
    STACKTOP = sp; //@line 3095
    return $$013 | 0; //@line 3095
   }
  }
  $16 = $2 + 12 | 0; //@line 3098
  $17 = HEAP32[$16 >> 2] | 0; //@line 3099
  do {
   if (!$17) {
    $AsyncCtx31 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3103
    _mbed_assert_internal(2931, 2936, 1677); //@line 3104
    if (___async) {
     HEAP32[$AsyncCtx31 >> 2] = 88; //@line 3107
     HEAP32[$AsyncCtx31 + 4 >> 2] = $16; //@line 3109
     HEAP32[$AsyncCtx31 + 8 >> 2] = $2; //@line 3111
     HEAP32[$AsyncCtx31 + 12 >> 2] = $4; //@line 3113
     HEAP32[$AsyncCtx31 + 16 >> 2] = $4; //@line 3115
     sp = STACKTOP; //@line 3116
     STACKTOP = sp; //@line 3117
     return 0; //@line 3117
    } else {
     _emscripten_free_async_context($AsyncCtx31 | 0); //@line 3119
     $24 = HEAP32[$16 >> 2] | 0; //@line 3121
     break;
    }
   } else {
    $24 = $17; //@line 3125
   }
  } while (0);
  $23 = HEAP32[$24 >> 2] | 0; //@line 3128
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3129
  FUNCTION_TABLE_viii[$23 & 0]($2, 0, $4); //@line 3130
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 89; //@line 3133
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3135
   sp = STACKTOP; //@line 3136
   STACKTOP = sp; //@line 3137
   return 0; //@line 3137
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3139
  $$013 = 0; //@line 3140
  STACKTOP = sp; //@line 3141
  return $$013 | 0; //@line 3141
 }
 if ($13) {
  HEAP32[$7 >> 2] = 0; //@line 3144
  HEAP32[$7 + 4 >> 2] = 0; //@line 3144
  HEAP32[$7 + 8 >> 2] = 0; //@line 3144
  HEAP32[$7 + 12 >> 2] = 0; //@line 3144
  HEAP32[$7 + 16 >> 2] = 0; //@line 3144
  HEAP32[$$byval_copy42 >> 2] = HEAP32[$7 >> 2]; //@line 3145
  HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 3145
  HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 3145
  HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 3145
  HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 3145
  __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy42, 0); //@line 3146
  $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3149
  $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3150
  $29 = FUNCTION_TABLE_ii[$28 & 31]($0) | 0; //@line 3151
  if (___async) {
   HEAP32[$AsyncCtx2 >> 2] = 90; //@line 3154
   HEAP32[$AsyncCtx2 + 4 >> 2] = $8; //@line 3156
   HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 3158
   HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 3160
   HEAP32[$AsyncCtx2 + 16 >> 2] = $6; //@line 3162
   HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 3164
   HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3166
   HEAP32[$AsyncCtx2 + 28 >> 2] = $$byval_copy42; //@line 3168
   HEAP32[$AsyncCtx2 + 32 >> 2] = $0; //@line 3170
   HEAP32[$AsyncCtx2 + 36 >> 2] = $9; //@line 3172
   HEAP32[$AsyncCtx2 + 40 >> 2] = $1; //@line 3174
   sp = STACKTOP; //@line 3175
   STACKTOP = sp; //@line 3176
   return 0; //@line 3176
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3178
  if (__ZN13SocketAddress14set_ip_addressEPKc($6, $29) | 0) {
   $$011 = __ZNK13SocketAddress14get_ip_versionEv($6) | 0; //@line 3182
  } else {
   $$011 = 0; //@line 3184
  }
  $$112 = $$011; //@line 3186
 } else {
  $$112 = $3; //@line 3188
 }
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 96 >> 2] | 0; //@line 3192
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3193
 FUNCTION_TABLE_vii[$44 & 7]($$byval_copy42, $0); //@line 3194
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 91; //@line 3197
  HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy42; //@line 3199
  HEAP32[$AsyncCtx6 + 8 >> 2] = $8; //@line 3201
  HEAP32[$AsyncCtx6 + 12 >> 2] = $4; //@line 3203
  HEAP32[$AsyncCtx6 + 16 >> 2] = $2; //@line 3205
  HEAP32[$AsyncCtx6 + 20 >> 2] = $9; //@line 3207
  HEAP32[$AsyncCtx6 + 24 >> 2] = $0; //@line 3209
  HEAP32[$AsyncCtx6 + 28 >> 2] = $1; //@line 3211
  HEAP32[$AsyncCtx6 + 32 >> 2] = $$112; //@line 3213
  HEAP32[$AsyncCtx6 + 36 >> 2] = $$byval_copy42; //@line 3215
  sp = STACKTOP; //@line 3216
  STACKTOP = sp; //@line 3217
  return 0; //@line 3217
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 3219
 $54 = $2 + 12 | 0; //@line 3220
 $55 = HEAP32[$54 >> 2] | 0; //@line 3221
 do {
  if (!$55) {
   $69 = 0; //@line 3225
  } else {
   $58 = HEAP32[$55 + 4 >> 2] | 0; //@line 3228
   $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3229
   FUNCTION_TABLE_vii[$58 & 7]($8, $2); //@line 3230
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 92; //@line 3233
    HEAP32[$AsyncCtx9 + 4 >> 2] = $$byval_copy42; //@line 3235
    HEAP32[$AsyncCtx9 + 8 >> 2] = $8; //@line 3237
    HEAP32[$AsyncCtx9 + 12 >> 2] = $4; //@line 3239
    HEAP32[$AsyncCtx9 + 16 >> 2] = $54; //@line 3241
    HEAP32[$AsyncCtx9 + 20 >> 2] = $9; //@line 3243
    HEAP32[$AsyncCtx9 + 24 >> 2] = $0; //@line 3245
    HEAP32[$AsyncCtx9 + 28 >> 2] = $1; //@line 3247
    HEAP32[$AsyncCtx9 + 32 >> 2] = $$112; //@line 3249
    HEAP32[$AsyncCtx9 + 36 >> 2] = $$byval_copy42; //@line 3251
    sp = STACKTOP; //@line 3252
    STACKTOP = sp; //@line 3253
    return 0; //@line 3253
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 3255
    $69 = HEAP32[$54 >> 2] | 0; //@line 3257
    break;
   }
  }
 } while (0);
 $68 = $8 + 12 | 0; //@line 3262
 HEAP32[$68 >> 2] = $69; //@line 3263
 $70 = $$byval_copy42 + 12 | 0; //@line 3264
 $71 = HEAP32[$70 >> 2] | 0; //@line 3265
 do {
  if (!$71) {
   $85 = 0; //@line 3269
  } else {
   $74 = HEAP32[$71 + 4 >> 2] | 0; //@line 3272
   $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3273
   FUNCTION_TABLE_vii[$74 & 7]($9, $$byval_copy42); //@line 3274
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 93; //@line 3277
    HEAP32[$AsyncCtx12 + 4 >> 2] = $$byval_copy42; //@line 3279
    HEAP32[$AsyncCtx12 + 8 >> 2] = $70; //@line 3281
    HEAP32[$AsyncCtx12 + 12 >> 2] = $8; //@line 3283
    HEAP32[$AsyncCtx12 + 16 >> 2] = $68; //@line 3285
    HEAP32[$AsyncCtx12 + 20 >> 2] = $4; //@line 3287
    HEAP32[$AsyncCtx12 + 24 >> 2] = $9; //@line 3289
    HEAP32[$AsyncCtx12 + 28 >> 2] = $0; //@line 3291
    HEAP32[$AsyncCtx12 + 32 >> 2] = $1; //@line 3293
    HEAP32[$AsyncCtx12 + 36 >> 2] = $$112; //@line 3295
    sp = STACKTOP; //@line 3296
    STACKTOP = sp; //@line 3297
    return 0; //@line 3297
   } else {
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 3299
    $85 = HEAP32[$70 >> 2] | 0; //@line 3301
    break;
   }
  }
 } while (0);
 $84 = $9 + 12 | 0; //@line 3306
 HEAP32[$84 >> 2] = $85; //@line 3307
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 3308
 $86 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $8, $9, $$112) | 0; //@line 3309
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 94; //@line 3312
  HEAP32[$AsyncCtx27 + 4 >> 2] = $84; //@line 3314
  HEAP32[$AsyncCtx27 + 8 >> 2] = $68; //@line 3316
  HEAP32[$AsyncCtx27 + 12 >> 2] = $9; //@line 3318
  HEAP32[$AsyncCtx27 + 16 >> 2] = $70; //@line 3320
  HEAP32[$AsyncCtx27 + 20 >> 2] = $8; //@line 3322
  HEAP32[$AsyncCtx27 + 24 >> 2] = $$byval_copy42; //@line 3324
  HEAP32[$AsyncCtx27 + 28 >> 2] = $4; //@line 3326
  sp = STACKTOP; //@line 3327
  STACKTOP = sp; //@line 3328
  return 0; //@line 3328
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 3330
 $94 = HEAP32[$84 >> 2] | 0; //@line 3331
 do {
  if ($94 | 0) {
   $97 = HEAP32[$94 + 8 >> 2] | 0; //@line 3336
   $AsyncCtx16 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3337
   FUNCTION_TABLE_vi[$97 & 511]($9); //@line 3338
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 95; //@line 3341
    HEAP32[$AsyncCtx16 + 4 >> 2] = $68; //@line 3343
    HEAP32[$AsyncCtx16 + 8 >> 2] = $70; //@line 3345
    HEAP32[$AsyncCtx16 + 12 >> 2] = $8; //@line 3347
    HEAP32[$AsyncCtx16 + 16 >> 2] = $$byval_copy42; //@line 3349
    HEAP32[$AsyncCtx16 + 20 >> 2] = $86; //@line 3351
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 3353
    sp = STACKTOP; //@line 3354
    STACKTOP = sp; //@line 3355
    return 0; //@line 3355
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 3357
    break;
   }
  }
 } while (0);
 $104 = HEAP32[$68 >> 2] | 0; //@line 3362
 do {
  if ($104 | 0) {
   $107 = HEAP32[$104 + 8 >> 2] | 0; //@line 3367
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3368
   FUNCTION_TABLE_vi[$107 & 511]($8); //@line 3369
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 96; //@line 3372
    HEAP32[$AsyncCtx20 + 4 >> 2] = $70; //@line 3374
    HEAP32[$AsyncCtx20 + 8 >> 2] = $$byval_copy42; //@line 3376
    HEAP32[$AsyncCtx20 + 12 >> 2] = $86; //@line 3378
    HEAP32[$AsyncCtx20 + 16 >> 2] = $4; //@line 3380
    sp = STACKTOP; //@line 3381
    STACKTOP = sp; //@line 3382
    return 0; //@line 3382
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 3384
    break;
   }
  }
 } while (0);
 $112 = HEAP32[$70 >> 2] | 0; //@line 3389
 do {
  if ($112 | 0) {
   $115 = HEAP32[$112 + 8 >> 2] | 0; //@line 3394
   $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3395
   FUNCTION_TABLE_vi[$115 & 511]($$byval_copy42); //@line 3396
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 97; //@line 3399
    HEAP32[$AsyncCtx24 + 4 >> 2] = $$byval_copy42; //@line 3401
    HEAP32[$AsyncCtx24 + 8 >> 2] = $86; //@line 3403
    HEAP32[$AsyncCtx24 + 12 >> 2] = $4; //@line 3405
    sp = STACKTOP; //@line 3406
    STACKTOP = sp; //@line 3407
    return 0; //@line 3407
   } else {
    _emscripten_free_async_context($AsyncCtx24 | 0); //@line 3409
    break;
   }
  }
 } while (0);
 $$013 = $86; //@line 3414
 STACKTOP = sp; //@line 3415
 return $$013 | 0; //@line 3415
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_194($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $105 = 0, $108 = 0, $110 = 0, $118 = 0, $121 = 0, $123 = 0, $131 = 0, $134 = 0, $136 = 0, $14 = 0, $149 = 0, $150 = 0, $151 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $48 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $95 = 0, $97 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15507
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15509
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15511
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15513
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15515
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15517
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15521
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15523
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15527
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15529
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15531
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15533
 HEAP32[HEAP32[$0 + 36 >> 2] >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 15535
 HEAP32[$10 + 8 >> 2] = $8; //@line 15537
 HEAP32[$10 + 48 >> 2] = $20; //@line 15539
 HEAP32[$10 + 52 >> 2] = $22; //@line 15541
 $30 = $10 + 56 | 0; //@line 15542
 HEAP32[$30 >> 2] = 0; //@line 15543
 $31 = $10 + 60 | 0; //@line 15544
 HEAP32[$31 >> 2] = 0; //@line 15545
 HEAP32[$10 + 64 >> 2] = 0; //@line 15547
 HEAP8[$10 + 82 >> 0] = 0; //@line 15549
 HEAP8[$10 + 83 >> 0] = 1; //@line 15551
 HEAP8[$10 + 84 >> 0] = 3; //@line 15553
 HEAP8[$10 + 85 >> 0] = 0; //@line 15555
 HEAP16[$10 + 80 >> 1] = 0; //@line 15557
 HEAP32[$10 + 76 >> 2] = 0; //@line 15559
 $39 = $10 + 72 | 0; //@line 15560
 HEAP32[$39 >> 2] = 15500; //@line 15561
 HEAP8[$10 + 86 >> 0] = 0; //@line 15563
 HEAP32[$10 + 88 >> 2] = 0; //@line 15565
 $42 = HEAP32[177] | 0; //@line 15566
 HEAP32[177] = $42 + 1; //@line 15568
 HEAP32[$10 >> 2] = ($42 | 0) > 32767 ? 1 : $42; //@line 15571
 $45 = HEAP32[1675] | 0; //@line 15572
 if (!$45) {
  $$1 = 0; //@line 15575
  $95 = 0; //@line 15575
 } else {
  $48 = HEAP32[$45 + 56 >> 2] | 0; //@line 15578
  if (!$48) {
   $$1 = 1; //@line 15581
   $95 = 0; //@line 15581
  } else {
   if ((HEAP32[$45 + 8 >> 2] | 0) == ($8 | 0)) {
    HEAP32[$30 >> 2] = $48; //@line 15587
    HEAP32[$31 >> 2] = HEAP32[$45 + 60 >> 2]; //@line 15590
    $$1 = 1; //@line 15591
    $95 = $48; //@line 15591
   } else {
    $$1 = 1; //@line 15593
    $95 = 0; //@line 15593
   }
  }
 }
 $55 = HEAP32[1676] | 0; //@line 15597
 if (!$55) {
  $$1$1 = $$1; //@line 15600
  $108 = $95; //@line 15600
 } else {
  if (!$95) {
   $97 = HEAP32[$55 + 56 >> 2] | 0; //@line 15605
   if (!$97) {
    $149 = 0; //@line 15608
   } else {
    if ((HEAP32[$55 + 8 >> 2] | 0) == ($8 | 0)) {
     HEAP32[$30 >> 2] = $97; //@line 15614
     HEAP32[$31 >> 2] = HEAP32[$55 + 60 >> 2]; //@line 15617
     $149 = $97; //@line 15618
    } else {
     $149 = 0; //@line 15620
    }
   }
  } else {
   $149 = $95; //@line 15624
  }
  $$1$1 = $$1 + 1 | 0; //@line 15627
  $108 = $149; //@line 15627
 }
 $105 = HEAP32[1677] | 0; //@line 15629
 if (!$105) {
  $$1$2 = $$1$1; //@line 15632
  $121 = $108; //@line 15632
 } else {
  if (!$108) {
   $110 = HEAP32[$105 + 56 >> 2] | 0; //@line 15637
   if (!$110) {
    $150 = 0; //@line 15640
   } else {
    if ((HEAP32[$105 + 8 >> 2] | 0) == ($8 | 0)) {
     HEAP32[$30 >> 2] = $110; //@line 15646
     HEAP32[$31 >> 2] = HEAP32[$105 + 60 >> 2]; //@line 15649
     $150 = $110; //@line 15650
    } else {
     $150 = 0; //@line 15652
    }
   }
  } else {
   $150 = $108; //@line 15656
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 15659
  $121 = $150; //@line 15659
 }
 $118 = HEAP32[1678] | 0; //@line 15661
 if (!$118) {
  $$1$3 = $$1$2; //@line 15664
  $134 = $121; //@line 15664
 } else {
  if (!$121) {
   $123 = HEAP32[$118 + 56 >> 2] | 0; //@line 15669
   if (!$123) {
    $151 = 0; //@line 15672
   } else {
    if ((HEAP32[$118 + 8 >> 2] | 0) == ($8 | 0)) {
     HEAP32[$30 >> 2] = $123; //@line 15678
     HEAP32[$31 >> 2] = HEAP32[$118 + 60 >> 2]; //@line 15681
     $151 = $123; //@line 15682
    } else {
     $151 = 0; //@line 15684
    }
   }
  } else {
   $151 = $121; //@line 15688
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 15691
  $134 = $151; //@line 15691
 }
 $131 = HEAP32[1679] | 0; //@line 15693
 if (!$131) {
  $$1$4 = $$1$3; //@line 15696
 } else {
  if (!$134) {
   $136 = HEAP32[$131 + 56 >> 2] | 0; //@line 15701
   if ($136 | 0) {
    if ((HEAP32[$131 + 8 >> 2] | 0) == ($8 | 0)) {
     HEAP32[$30 >> 2] = $136; //@line 15708
     HEAP32[$31 >> 2] = HEAP32[$131 + 60 >> 2]; //@line 15711
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 15716
 }
 HEAP32[6700 + ($26 << 2) >> 2] = $10; //@line 15719
 HEAP32[$39 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 15722
 if (HEAP8[7580] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 15726
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 15727
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 15730
   $92 = $ReallocAsyncCtx13 + 4 | 0; //@line 15731
   HEAP32[$92 >> 2] = $10; //@line 15732
   $93 = $ReallocAsyncCtx13 + 8 | 0; //@line 15733
   HEAP32[$93 >> 2] = $24; //@line 15734
   sp = STACKTOP; //@line 15735
   return;
  }
  ___async_unwind = 0; //@line 15738
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 15739
  $92 = $ReallocAsyncCtx13 + 4 | 0; //@line 15740
  HEAP32[$92 >> 2] = $10; //@line 15741
  $93 = $ReallocAsyncCtx13 + 8 | 0; //@line 15742
  HEAP32[$93 >> 2] = $24; //@line 15743
  sp = STACKTOP; //@line 15744
  return;
 }
 $57 = $10 + 44 | 0; //@line 15747
 $58 = HEAP32[$57 >> 2] | 0; //@line 15748
 if (!$58) {
  $72 = $2 + 12 | 0; //@line 15751
  HEAP32[$72 >> 2] = 0; //@line 15752
  $74 = $4 + 4 | 0; //@line 15754
  HEAP32[$74 >> 2] = 0; //@line 15756
  HEAP32[$74 + 4 >> 2] = 0; //@line 15759
  HEAP32[$4 >> 2] = 3; //@line 15760
  $78 = $4 + 12 | 0; //@line 15761
  HEAP32[$78 >> 2] = 712; //@line 15762
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 15763
  $79 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $4) | 0; //@line 15764
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 15767
   $80 = $ReallocAsyncCtx14 + 4 | 0; //@line 15768
   HEAP32[$80 >> 2] = $4; //@line 15769
   $81 = $ReallocAsyncCtx14 + 8 | 0; //@line 15770
   HEAP32[$81 >> 2] = $10; //@line 15771
   $82 = $ReallocAsyncCtx14 + 12 | 0; //@line 15772
   HEAP32[$82 >> 2] = $16; //@line 15773
   $83 = $ReallocAsyncCtx14 + 16 | 0; //@line 15774
   HEAP32[$83 >> 2] = $24; //@line 15775
   $84 = $ReallocAsyncCtx14 + 20 | 0; //@line 15776
   HEAP32[$84 >> 2] = $57; //@line 15777
   $85 = $ReallocAsyncCtx14 + 24 | 0; //@line 15778
   HEAP32[$85 >> 2] = $10; //@line 15779
   $86 = $ReallocAsyncCtx14 + 28 | 0; //@line 15780
   HEAP32[$86 >> 2] = $78; //@line 15781
   $87 = $ReallocAsyncCtx14 + 32 | 0; //@line 15782
   HEAP32[$87 >> 2] = $6; //@line 15783
   $88 = $ReallocAsyncCtx14 + 36 | 0; //@line 15784
   HEAP32[$88 >> 2] = $2; //@line 15785
   $89 = $ReallocAsyncCtx14 + 40 | 0; //@line 15786
   HEAP32[$89 >> 2] = $72; //@line 15787
   $90 = $ReallocAsyncCtx14 + 44 | 0; //@line 15788
   HEAP32[$90 >> 2] = $14; //@line 15789
   sp = STACKTOP; //@line 15790
   return;
  }
  HEAP32[___async_retval >> 2] = $79; //@line 15794
  ___async_unwind = 0; //@line 15795
  HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 15796
  $80 = $ReallocAsyncCtx14 + 4 | 0; //@line 15797
  HEAP32[$80 >> 2] = $4; //@line 15798
  $81 = $ReallocAsyncCtx14 + 8 | 0; //@line 15799
  HEAP32[$81 >> 2] = $10; //@line 15800
  $82 = $ReallocAsyncCtx14 + 12 | 0; //@line 15801
  HEAP32[$82 >> 2] = $16; //@line 15802
  $83 = $ReallocAsyncCtx14 + 16 | 0; //@line 15803
  HEAP32[$83 >> 2] = $24; //@line 15804
  $84 = $ReallocAsyncCtx14 + 20 | 0; //@line 15805
  HEAP32[$84 >> 2] = $57; //@line 15806
  $85 = $ReallocAsyncCtx14 + 24 | 0; //@line 15807
  HEAP32[$85 >> 2] = $10; //@line 15808
  $86 = $ReallocAsyncCtx14 + 28 | 0; //@line 15809
  HEAP32[$86 >> 2] = $78; //@line 15810
  $87 = $ReallocAsyncCtx14 + 32 | 0; //@line 15811
  HEAP32[$87 >> 2] = $6; //@line 15812
  $88 = $ReallocAsyncCtx14 + 36 | 0; //@line 15813
  HEAP32[$88 >> 2] = $2; //@line 15814
  $89 = $ReallocAsyncCtx14 + 40 | 0; //@line 15815
  HEAP32[$89 >> 2] = $72; //@line 15816
  $90 = $ReallocAsyncCtx14 + 44 | 0; //@line 15817
  HEAP32[$90 >> 2] = $14; //@line 15818
  sp = STACKTOP; //@line 15819
  return;
 } else {
  $61 = HEAP32[$58 + 4 >> 2] | 0; //@line 15823
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 15824
  FUNCTION_TABLE_vii[$61 & 7]($2, $6); //@line 15825
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 15828
   $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 15829
   HEAP32[$62 >> 2] = $2; //@line 15830
   $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 15831
   HEAP32[$63 >> 2] = $4; //@line 15832
   $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 15833
   HEAP32[$64 >> 2] = $57; //@line 15834
   $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 15835
   HEAP32[$65 >> 2] = $10; //@line 15836
   $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 15837
   HEAP32[$66 >> 2] = $10; //@line 15838
   $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 15839
   HEAP32[$67 >> 2] = $6; //@line 15840
   $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 15841
   HEAP32[$68 >> 2] = $14; //@line 15842
   $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 15843
   HEAP32[$69 >> 2] = $16; //@line 15844
   $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 15845
   HEAP32[$70 >> 2] = $24; //@line 15846
   $71 = $ReallocAsyncCtx6 + 40 | 0; //@line 15847
   HEAP32[$71 >> 2] = $57; //@line 15848
   sp = STACKTOP; //@line 15849
   return;
  }
  ___async_unwind = 0; //@line 15852
  HEAP32[$ReallocAsyncCtx6 >> 2] = 165; //@line 15853
  $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 15854
  HEAP32[$62 >> 2] = $2; //@line 15855
  $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 15856
  HEAP32[$63 >> 2] = $4; //@line 15857
  $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 15858
  HEAP32[$64 >> 2] = $57; //@line 15859
  $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 15860
  HEAP32[$65 >> 2] = $10; //@line 15861
  $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 15862
  HEAP32[$66 >> 2] = $10; //@line 15863
  $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 15864
  HEAP32[$67 >> 2] = $6; //@line 15865
  $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 15866
  HEAP32[$68 >> 2] = $14; //@line 15867
  $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 15868
  HEAP32[$69 >> 2] = $16; //@line 15869
  $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 15870
  HEAP32[$70 >> 2] = $24; //@line 15871
  $71 = $ReallocAsyncCtx6 + 40 | 0; //@line 15872
  HEAP32[$71 >> 2] = $57; //@line 15873
  sp = STACKTOP; //@line 15874
  return;
 }
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_134($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3013
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3015
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3017
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3019
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3021
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3023
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3025
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3027
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3029
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3031
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3033
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3035
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3037
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 3039
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 3041
 $30 = HEAP16[$0 + 60 >> 1] | 0; //@line 3043
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 3045
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3047
 $49 = $12 + 64 | 0; //@line 3048
 HEAP32[$49 >> 2] = $AsyncRetVal; //@line 3049
 $51 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($2, $30, $12 + 68 | 0, $AsyncRetVal, $32) | 0; //@line 3051
 if (($51 | 0) < 0) {
  $53 = HEAP32[$49 >> 2] | 0; //@line 3054
  if ($53 | 0) {
   __ZdaPv($53); //@line 3057
  }
  HEAP32[$49 >> 2] = 0; //@line 3059
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 3060
  $34 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($26, 0, $2, 512) | 0; //@line 3061
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 3064
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 3065
   HEAP32[$35 >> 2] = $2; //@line 3066
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 3067
   HEAP32[$36 >> 2] = $4; //@line 3068
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 3069
   HEAP32[$37 >> 2] = $6; //@line 3070
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 3071
   HEAP32[$38 >> 2] = $8; //@line 3072
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 3073
   HEAP32[$39 >> 2] = $10; //@line 3074
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 3075
   HEAP32[$40 >> 2] = $14; //@line 3076
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 3077
   HEAP32[$41 >> 2] = $16; //@line 3078
   $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 3079
   HEAP32[$42 >> 2] = $18; //@line 3080
   $43 = $ReallocAsyncCtx6 + 36 | 0; //@line 3081
   HEAP32[$43 >> 2] = $20; //@line 3082
   $44 = $ReallocAsyncCtx6 + 40 | 0; //@line 3083
   HEAP32[$44 >> 2] = $22; //@line 3084
   $45 = $ReallocAsyncCtx6 + 44 | 0; //@line 3085
   HEAP32[$45 >> 2] = $24; //@line 3086
   $46 = $ReallocAsyncCtx6 + 48 | 0; //@line 3087
   HEAP32[$46 >> 2] = $26; //@line 3088
   $47 = $ReallocAsyncCtx6 + 52 | 0; //@line 3089
   HEAP32[$47 >> 2] = $28; //@line 3090
   sp = STACKTOP; //@line 3091
   return;
  }
  HEAP32[___async_retval >> 2] = $34; //@line 3095
  ___async_unwind = 0; //@line 3096
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 3097
  $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 3098
  HEAP32[$35 >> 2] = $2; //@line 3099
  $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 3100
  HEAP32[$36 >> 2] = $4; //@line 3101
  $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 3102
  HEAP32[$37 >> 2] = $6; //@line 3103
  $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 3104
  HEAP32[$38 >> 2] = $8; //@line 3105
  $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 3106
  HEAP32[$39 >> 2] = $10; //@line 3107
  $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 3108
  HEAP32[$40 >> 2] = $14; //@line 3109
  $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 3110
  HEAP32[$41 >> 2] = $16; //@line 3111
  $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 3112
  HEAP32[$42 >> 2] = $18; //@line 3113
  $43 = $ReallocAsyncCtx6 + 36 | 0; //@line 3114
  HEAP32[$43 >> 2] = $20; //@line 3115
  $44 = $ReallocAsyncCtx6 + 40 | 0; //@line 3116
  HEAP32[$44 >> 2] = $22; //@line 3117
  $45 = $ReallocAsyncCtx6 + 44 | 0; //@line 3118
  HEAP32[$45 >> 2] = $24; //@line 3119
  $46 = $ReallocAsyncCtx6 + 48 | 0; //@line 3120
  HEAP32[$46 >> 2] = $26; //@line 3121
  $47 = $ReallocAsyncCtx6 + 52 | 0; //@line 3122
  HEAP32[$47 >> 2] = $28; //@line 3123
  sp = STACKTOP; //@line 3124
  return;
 }
 HEAP8[$12 + 86 >> 0] = $51; //@line 3129
 HEAP32[$12 + 4 >> 2] = -3009; //@line 3131
 HEAP32[$12 + 76 >> 2] = 0; //@line 3133
 $59 = $12 + 44 | 0; //@line 3134
 $60 = HEAP32[$59 >> 2] | 0; //@line 3135
 if (!$60) {
  HEAP32[$14 >> 2] = 0; //@line 3138
  $80 = HEAP32[$12 >> 2] | 0; //@line 3139
  HEAP32[$16 >> 2] = 0; //@line 3140
  HEAP32[$18 >> 2] = 175; //@line 3141
  HEAP32[$20 >> 2] = $80; //@line 3142
  HEAP32[$8 >> 2] = 724; //@line 3143
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 3144
  __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 3145
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 246; //@line 3148
   $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 3149
   HEAP32[$81 >> 2] = $2; //@line 3150
   $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 3151
   HEAP32[$82 >> 2] = $4; //@line 3152
   $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 3153
   HEAP32[$83 >> 2] = $6; //@line 3154
   $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 3155
   HEAP32[$84 >> 2] = $8; //@line 3156
   $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 3157
   HEAP32[$85 >> 2] = $10; //@line 3158
   $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 3159
   HEAP32[$86 >> 2] = $14; //@line 3160
   $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 3161
   HEAP32[$87 >> 2] = $16; //@line 3162
   $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 3163
   HEAP32[$88 >> 2] = $18; //@line 3164
   $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 3165
   HEAP32[$89 >> 2] = $20; //@line 3166
   $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 3167
   HEAP32[$90 >> 2] = $22; //@line 3168
   $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 3169
   HEAP32[$91 >> 2] = $24; //@line 3170
   $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 3171
   HEAP32[$92 >> 2] = $26; //@line 3172
   $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 3173
   HEAP32[$93 >> 2] = $28; //@line 3174
   sp = STACKTOP; //@line 3175
   return;
  }
  ___async_unwind = 0; //@line 3178
  HEAP32[$ReallocAsyncCtx5 >> 2] = 246; //@line 3179
  $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 3180
  HEAP32[$81 >> 2] = $2; //@line 3181
  $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 3182
  HEAP32[$82 >> 2] = $4; //@line 3183
  $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 3184
  HEAP32[$83 >> 2] = $6; //@line 3185
  $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 3186
  HEAP32[$84 >> 2] = $8; //@line 3187
  $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 3188
  HEAP32[$85 >> 2] = $10; //@line 3189
  $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 3190
  HEAP32[$86 >> 2] = $14; //@line 3191
  $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 3192
  HEAP32[$87 >> 2] = $16; //@line 3193
  $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 3194
  HEAP32[$88 >> 2] = $18; //@line 3195
  $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 3196
  HEAP32[$89 >> 2] = $20; //@line 3197
  $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 3198
  HEAP32[$90 >> 2] = $22; //@line 3199
  $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 3200
  HEAP32[$91 >> 2] = $24; //@line 3201
  $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 3202
  HEAP32[$92 >> 2] = $26; //@line 3203
  $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 3204
  HEAP32[$93 >> 2] = $28; //@line 3205
  sp = STACKTOP; //@line 3206
  return;
 } else {
  $64 = HEAP32[$60 + 4 >> 2] | 0; //@line 3211
  $ReallocAsyncCtx = _emscripten_realloc_async_context(64) | 0; //@line 3212
  FUNCTION_TABLE_vii[$64 & 7]($6, $12 + 32 | 0); //@line 3213
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 245; //@line 3216
   $65 = $ReallocAsyncCtx + 4 | 0; //@line 3217
   HEAP32[$65 >> 2] = $2; //@line 3218
   $66 = $ReallocAsyncCtx + 8 | 0; //@line 3219
   HEAP32[$66 >> 2] = $59; //@line 3220
   $67 = $ReallocAsyncCtx + 12 | 0; //@line 3221
   HEAP32[$67 >> 2] = $4; //@line 3222
   $68 = $ReallocAsyncCtx + 16 | 0; //@line 3223
   HEAP32[$68 >> 2] = $6; //@line 3224
   $69 = $ReallocAsyncCtx + 20 | 0; //@line 3225
   HEAP32[$69 >> 2] = $8; //@line 3226
   $70 = $ReallocAsyncCtx + 24 | 0; //@line 3227
   HEAP32[$70 >> 2] = $10; //@line 3228
   $71 = $ReallocAsyncCtx + 28 | 0; //@line 3229
   HEAP32[$71 >> 2] = $14; //@line 3230
   $72 = $ReallocAsyncCtx + 32 | 0; //@line 3231
   HEAP32[$72 >> 2] = $12; //@line 3232
   $73 = $ReallocAsyncCtx + 36 | 0; //@line 3233
   HEAP32[$73 >> 2] = $16; //@line 3234
   $74 = $ReallocAsyncCtx + 40 | 0; //@line 3235
   HEAP32[$74 >> 2] = $18; //@line 3236
   $75 = $ReallocAsyncCtx + 44 | 0; //@line 3237
   HEAP32[$75 >> 2] = $20; //@line 3238
   $76 = $ReallocAsyncCtx + 48 | 0; //@line 3239
   HEAP32[$76 >> 2] = $22; //@line 3240
   $77 = $ReallocAsyncCtx + 52 | 0; //@line 3241
   HEAP32[$77 >> 2] = $24; //@line 3242
   $78 = $ReallocAsyncCtx + 56 | 0; //@line 3243
   HEAP32[$78 >> 2] = $26; //@line 3244
   $79 = $ReallocAsyncCtx + 60 | 0; //@line 3245
   HEAP32[$79 >> 2] = $28; //@line 3246
   sp = STACKTOP; //@line 3247
   return;
  }
  ___async_unwind = 0; //@line 3250
  HEAP32[$ReallocAsyncCtx >> 2] = 245; //@line 3251
  $65 = $ReallocAsyncCtx + 4 | 0; //@line 3252
  HEAP32[$65 >> 2] = $2; //@line 3253
  $66 = $ReallocAsyncCtx + 8 | 0; //@line 3254
  HEAP32[$66 >> 2] = $59; //@line 3255
  $67 = $ReallocAsyncCtx + 12 | 0; //@line 3256
  HEAP32[$67 >> 2] = $4; //@line 3257
  $68 = $ReallocAsyncCtx + 16 | 0; //@line 3258
  HEAP32[$68 >> 2] = $6; //@line 3259
  $69 = $ReallocAsyncCtx + 20 | 0; //@line 3260
  HEAP32[$69 >> 2] = $8; //@line 3261
  $70 = $ReallocAsyncCtx + 24 | 0; //@line 3262
  HEAP32[$70 >> 2] = $10; //@line 3263
  $71 = $ReallocAsyncCtx + 28 | 0; //@line 3264
  HEAP32[$71 >> 2] = $14; //@line 3265
  $72 = $ReallocAsyncCtx + 32 | 0; //@line 3266
  HEAP32[$72 >> 2] = $12; //@line 3267
  $73 = $ReallocAsyncCtx + 36 | 0; //@line 3268
  HEAP32[$73 >> 2] = $16; //@line 3269
  $74 = $ReallocAsyncCtx + 40 | 0; //@line 3270
  HEAP32[$74 >> 2] = $18; //@line 3271
  $75 = $ReallocAsyncCtx + 44 | 0; //@line 3272
  HEAP32[$75 >> 2] = $20; //@line 3273
  $76 = $ReallocAsyncCtx + 48 | 0; //@line 3274
  HEAP32[$76 >> 2] = $22; //@line 3275
  $77 = $ReallocAsyncCtx + 52 | 0; //@line 3276
  HEAP32[$77 >> 2] = $24; //@line 3277
  $78 = $ReallocAsyncCtx + 56 | 0; //@line 3278
  HEAP32[$78 >> 2] = $26; //@line 3279
  $79 = $ReallocAsyncCtx + 60 | 0; //@line 3280
  HEAP32[$79 >> 2] = $28; //@line 3281
  sp = STACKTOP; //@line 3282
  return;
 }
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_59($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 19185
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19187
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19189
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19191
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19193
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19195
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19197
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19199
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19201
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19203
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19205
 if ($AsyncRetVal | 0) {
  $23 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 19210
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 19211
  FUNCTION_TABLE_vi[$23 & 511]($8); //@line 19212
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 19215
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 19216
   HEAP32[$24 >> 2] = $2; //@line 19217
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 19218
   HEAP32[$25 >> 2] = $4; //@line 19219
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 19220
   HEAP32[$26 >> 2] = $AsyncRetVal; //@line 19221
   sp = STACKTOP; //@line 19222
   return;
  }
  ___async_unwind = 0; //@line 19225
  HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 19226
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 19227
  HEAP32[$24 >> 2] = $2; //@line 19228
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 19229
  HEAP32[$25 >> 2] = $4; //@line 19230
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 19231
  HEAP32[$26 >> 2] = $AsyncRetVal; //@line 19232
  sp = STACKTOP; //@line 19233
  return;
 }
 __ZN6Socket11set_timeoutEi($16, 0); //@line 19236
 $27 = HEAP32[$18 >> 2] | 0; //@line 19237
 $29 = $27; //@line 19239
 if (!$27) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 19241
  $30 = __Znwj(20) | 0; //@line 19242
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 212; //@line 19245
   $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 19246
   HEAP32[$31 >> 2] = $2; //@line 19247
   $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 19248
   HEAP32[$32 >> 2] = $10; //@line 19249
   $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 19250
   HEAP32[$33 >> 2] = $6; //@line 19251
   $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 19252
   HEAP32[$34 >> 2] = $12; //@line 19253
   $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 19254
   HEAP32[$35 >> 2] = $14; //@line 19255
   $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 19256
   HEAP32[$36 >> 2] = $16; //@line 19257
   $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 19258
   HEAP32[$37 >> 2] = $18; //@line 19259
   sp = STACKTOP; //@line 19260
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 19264
  ___async_unwind = 0; //@line 19265
  HEAP32[$ReallocAsyncCtx11 >> 2] = 212; //@line 19266
  $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 19267
  HEAP32[$31 >> 2] = $2; //@line 19268
  $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 19269
  HEAP32[$32 >> 2] = $10; //@line 19270
  $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 19271
  HEAP32[$33 >> 2] = $6; //@line 19272
  $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 19273
  HEAP32[$34 >> 2] = $12; //@line 19274
  $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 19275
  HEAP32[$35 >> 2] = $14; //@line 19276
  $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 19277
  HEAP32[$36 >> 2] = $16; //@line 19278
  $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 19279
  HEAP32[$37 >> 2] = $18; //@line 19280
  sp = STACKTOP; //@line 19281
  return;
 }
 $39 = $2 + 32 | 0; //@line 19284
 do {
  if (($27 | 0) == ($39 | 0)) {
   $73 = $27; //@line 19288
   $75 = $29; //@line 19288
  } else {
   $41 = $27 + 12 | 0; //@line 19290
   $42 = HEAP32[$41 >> 2] | 0; //@line 19291
   if ($42 | 0) {
    $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 19295
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(44) | 0; //@line 19296
    FUNCTION_TABLE_vi[$45 & 511]($27); //@line 19297
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 213; //@line 19300
     $46 = $ReallocAsyncCtx8 + 4 | 0; //@line 19301
     HEAP32[$46 >> 2] = $2; //@line 19302
     $47 = $ReallocAsyncCtx8 + 8 | 0; //@line 19303
     HEAP32[$47 >> 2] = $10; //@line 19304
     $48 = $ReallocAsyncCtx8 + 12 | 0; //@line 19305
     HEAP32[$48 >> 2] = $6; //@line 19306
     $49 = $ReallocAsyncCtx8 + 16 | 0; //@line 19307
     HEAP32[$49 >> 2] = $12; //@line 19308
     $50 = $ReallocAsyncCtx8 + 20 | 0; //@line 19309
     HEAP32[$50 >> 2] = $14; //@line 19310
     $51 = $ReallocAsyncCtx8 + 24 | 0; //@line 19311
     HEAP32[$51 >> 2] = $16; //@line 19312
     $52 = $ReallocAsyncCtx8 + 28 | 0; //@line 19313
     HEAP32[$52 >> 2] = $41; //@line 19314
     $53 = $ReallocAsyncCtx8 + 32 | 0; //@line 19315
     HEAP32[$53 >> 2] = $18; //@line 19316
     $54 = $ReallocAsyncCtx8 + 36 | 0; //@line 19317
     HEAP32[$54 >> 2] = $27; //@line 19318
     $55 = $ReallocAsyncCtx8 + 40 | 0; //@line 19319
     HEAP32[$55 >> 2] = $39; //@line 19320
     sp = STACKTOP; //@line 19321
     return;
    }
    ___async_unwind = 0; //@line 19324
    HEAP32[$ReallocAsyncCtx8 >> 2] = 213; //@line 19325
    $46 = $ReallocAsyncCtx8 + 4 | 0; //@line 19326
    HEAP32[$46 >> 2] = $2; //@line 19327
    $47 = $ReallocAsyncCtx8 + 8 | 0; //@line 19328
    HEAP32[$47 >> 2] = $10; //@line 19329
    $48 = $ReallocAsyncCtx8 + 12 | 0; //@line 19330
    HEAP32[$48 >> 2] = $6; //@line 19331
    $49 = $ReallocAsyncCtx8 + 16 | 0; //@line 19332
    HEAP32[$49 >> 2] = $12; //@line 19333
    $50 = $ReallocAsyncCtx8 + 20 | 0; //@line 19334
    HEAP32[$50 >> 2] = $14; //@line 19335
    $51 = $ReallocAsyncCtx8 + 24 | 0; //@line 19336
    HEAP32[$51 >> 2] = $16; //@line 19337
    $52 = $ReallocAsyncCtx8 + 28 | 0; //@line 19338
    HEAP32[$52 >> 2] = $41; //@line 19339
    $53 = $ReallocAsyncCtx8 + 32 | 0; //@line 19340
    HEAP32[$53 >> 2] = $18; //@line 19341
    $54 = $ReallocAsyncCtx8 + 36 | 0; //@line 19342
    HEAP32[$54 >> 2] = $27; //@line 19343
    $55 = $ReallocAsyncCtx8 + 40 | 0; //@line 19344
    HEAP32[$55 >> 2] = $39; //@line 19345
    sp = STACKTOP; //@line 19346
    return;
   }
   $56 = $2 + 44 | 0; //@line 19349
   $57 = HEAP32[$56 >> 2] | 0; //@line 19350
   if (!$57) {
    HEAP32[$41 >> 2] = 0; //@line 19353
    $$pre85 = HEAP32[$18 >> 2] | 0; //@line 19354
    $73 = $$pre85; //@line 19356
    $75 = $$pre85; //@line 19356
    break;
   }
   $60 = HEAP32[$57 + 4 >> 2] | 0; //@line 19360
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 19361
   FUNCTION_TABLE_vii[$60 & 7]($27, $39); //@line 19362
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 19365
    $61 = $ReallocAsyncCtx9 + 4 | 0; //@line 19366
    HEAP32[$61 >> 2] = $56; //@line 19367
    $62 = $ReallocAsyncCtx9 + 8 | 0; //@line 19368
    HEAP32[$62 >> 2] = $41; //@line 19369
    $63 = $ReallocAsyncCtx9 + 12 | 0; //@line 19370
    HEAP32[$63 >> 2] = $18; //@line 19371
    $64 = $ReallocAsyncCtx9 + 16 | 0; //@line 19372
    HEAP32[$64 >> 2] = $14; //@line 19373
    $65 = $ReallocAsyncCtx9 + 20 | 0; //@line 19374
    HEAP32[$65 >> 2] = $12; //@line 19375
    $66 = $ReallocAsyncCtx9 + 24 | 0; //@line 19376
    HEAP32[$66 >> 2] = $16; //@line 19377
    $67 = $ReallocAsyncCtx9 + 28 | 0; //@line 19378
    HEAP32[$67 >> 2] = $10; //@line 19379
    $68 = $ReallocAsyncCtx9 + 32 | 0; //@line 19380
    HEAP32[$68 >> 2] = $6; //@line 19381
    $69 = $ReallocAsyncCtx9 + 36 | 0; //@line 19382
    HEAP32[$69 >> 2] = $2; //@line 19383
    sp = STACKTOP; //@line 19384
    return;
   }
   ___async_unwind = 0; //@line 19387
   HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 19388
   $61 = $ReallocAsyncCtx9 + 4 | 0; //@line 19389
   HEAP32[$61 >> 2] = $56; //@line 19390
   $62 = $ReallocAsyncCtx9 + 8 | 0; //@line 19391
   HEAP32[$62 >> 2] = $41; //@line 19392
   $63 = $ReallocAsyncCtx9 + 12 | 0; //@line 19393
   HEAP32[$63 >> 2] = $18; //@line 19394
   $64 = $ReallocAsyncCtx9 + 16 | 0; //@line 19395
   HEAP32[$64 >> 2] = $14; //@line 19396
   $65 = $ReallocAsyncCtx9 + 20 | 0; //@line 19397
   HEAP32[$65 >> 2] = $12; //@line 19398
   $66 = $ReallocAsyncCtx9 + 24 | 0; //@line 19399
   HEAP32[$66 >> 2] = $16; //@line 19400
   $67 = $ReallocAsyncCtx9 + 28 | 0; //@line 19401
   HEAP32[$67 >> 2] = $10; //@line 19402
   $68 = $ReallocAsyncCtx9 + 32 | 0; //@line 19403
   HEAP32[$68 >> 2] = $6; //@line 19404
   $69 = $ReallocAsyncCtx9 + 36 | 0; //@line 19405
   HEAP32[$69 >> 2] = $2; //@line 19406
   sp = STACKTOP; //@line 19407
   return;
  }
 } while (0);
 HEAP32[$73 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 19413
 HEAP32[$12 + 8 >> 2] = 0; //@line 19415
 HEAP32[$12 >> 2] = 215; //@line 19416
 HEAP32[$12 + 4 >> 2] = $75; //@line 19418
 $76 = $12 + 12 | 0; //@line 19419
 HEAP32[$76 >> 2] = 724; //@line 19420
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 19421
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($16, $12); //@line 19422
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 19425
  $77 = $ReallocAsyncCtx18 + 4 | 0; //@line 19426
  HEAP32[$77 >> 2] = $76; //@line 19427
  $78 = $ReallocAsyncCtx18 + 8 | 0; //@line 19428
  HEAP32[$78 >> 2] = $10; //@line 19429
  $79 = $ReallocAsyncCtx18 + 12 | 0; //@line 19430
  HEAP32[$79 >> 2] = $6; //@line 19431
  $80 = $ReallocAsyncCtx18 + 16 | 0; //@line 19432
  HEAP32[$80 >> 2] = $12; //@line 19433
  $81 = $ReallocAsyncCtx18 + 20 | 0; //@line 19434
  HEAP32[$81 >> 2] = $2; //@line 19435
  sp = STACKTOP; //@line 19436
  return;
 }
 ___async_unwind = 0; //@line 19439
 HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 19440
 $77 = $ReallocAsyncCtx18 + 4 | 0; //@line 19441
 HEAP32[$77 >> 2] = $76; //@line 19442
 $78 = $ReallocAsyncCtx18 + 8 | 0; //@line 19443
 HEAP32[$78 >> 2] = $10; //@line 19444
 $79 = $ReallocAsyncCtx18 + 12 | 0; //@line 19445
 HEAP32[$79 >> 2] = $6; //@line 19446
 $80 = $ReallocAsyncCtx18 + 16 | 0; //@line 19447
 HEAP32[$80 >> 2] = $12; //@line 19448
 $81 = $ReallocAsyncCtx18 + 20 | 0; //@line 19449
 HEAP32[$81 >> 2] = $2; //@line 19450
 sp = STACKTOP; //@line 19451
 return;
}
function __ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$2 = 0, $$2$1 = 0, $$2$us = 0, $$2$us$1 = 0, $$pre = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $$pre37 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $106 = 0, $111 = 0, $118 = 0, $12 = 0, $122 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $134 = 0, $139 = 0, $152 = 0, $157 = 0, $160 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $17 = 0, $173 = 0, $186 = 0, $191 = 0, $194 = 0, $24 = 0, $28 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $47 = 0, $54 = 0, $57 = 0, $6 = 0, $65 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $76 = 0, $81 = 0, $88 = 0, $9 = 0, $92 = 0, $98 = 0, label = 0;
 $4 = ($2 | 0) == 0; //@line 6019
 $6 = (HEAP32[1672] | 0) == 0; //@line 6021
 if (!$1) {
  do {
   if ($6) {
    $$2$us = -3006; //@line 6025
   } else {
    $7 = _emscripten_asm_const_i(8) | 0; //@line 6027
    $9 = (($7 | 0) < 0) << 31 >> 31; //@line 6029
    $10 = HEAP32[1672] | 0; //@line 6030
    $12 = $10 + 24 | 0; //@line 6032
    $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 6037
    $24 = HEAP32[$10 + 20 >> 2] | 0; //@line 6044
    if ($17 >>> 0 < $9 >>> 0 | (($17 | 0) == ($9 | 0) ? (HEAP32[$12 >> 2] | 0) >>> 0 < $7 >>> 0 : 0)) {
     if (!$24) {
      $34 = $10; //@line 6048
      label = 11; //@line 6049
     } else {
      __ZdlPv($24); //@line 6051
      $$pre35 = HEAP32[1672] | 0; //@line 6052
      if ($$pre35 | 0) {
       $34 = $$pre35; //@line 6055
       label = 11; //@line 6056
      }
     }
     if ((label | 0) == 11) {
      __ZdlPv($34); //@line 6060
     }
     HEAP32[1672] = 0; //@line 6062
     $$2$us = -3006; //@line 6063
     break;
    } else {
     if (_strcmp($24, $0) | 0) {
      $$2$us = -3006; //@line 6069
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$10 >> 2]; //@line 6073
      HEAP32[$2 + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 6073
      HEAP32[$2 + 8 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 6073
      HEAP32[$2 + 12 >> 2] = HEAP32[$10 + 12 >> 2]; //@line 6073
      HEAP32[$2 + 16 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 6073
     }
     $28 = $10 + 32 | 0; //@line 6076
     HEAP32[$28 >> 2] = $7; //@line 6078
     HEAP32[$28 + 4 >> 2] = $9; //@line 6081
     $$2$us = 0; //@line 6082
     break;
    }
   }
  } while (0);
  do {
   if (!(HEAP32[1673] | 0)) {
    $$2$us$1 = $$2$us; //@line 6091
   } else {
    $71 = _emscripten_asm_const_i(8) | 0; //@line 6093
    $73 = (($71 | 0) < 0) << 31 >> 31; //@line 6095
    $74 = HEAP32[1673] | 0; //@line 6096
    $76 = $74 + 24 | 0; //@line 6098
    $81 = HEAP32[$76 + 4 >> 2] | 0; //@line 6103
    $88 = HEAP32[$74 + 20 >> 2] | 0; //@line 6110
    if ($81 >>> 0 < $73 >>> 0 | (($81 | 0) == ($73 | 0) ? (HEAP32[$76 >> 2] | 0) >>> 0 < $71 >>> 0 : 0)) {
     if (!$88) {
      $98 = $74; //@line 6114
      label = 33; //@line 6115
     } else {
      __ZdlPv($88); //@line 6117
      $$pre36 = HEAP32[1673] | 0; //@line 6118
      if ($$pre36 | 0) {
       $98 = $$pre36; //@line 6121
       label = 33; //@line 6122
      }
     }
     if ((label | 0) == 33) {
      __ZdlPv($98); //@line 6126
     }
     HEAP32[1673] = 0; //@line 6128
     $$2$us$1 = $$2$us; //@line 6129
     break;
    } else {
     if (_strcmp($88, $0) | 0) {
      $$2$us$1 = $$2$us; //@line 6135
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$74 >> 2]; //@line 6139
      HEAP32[$2 + 4 >> 2] = HEAP32[$74 + 4 >> 2]; //@line 6139
      HEAP32[$2 + 8 >> 2] = HEAP32[$74 + 8 >> 2]; //@line 6139
      HEAP32[$2 + 12 >> 2] = HEAP32[$74 + 12 >> 2]; //@line 6139
      HEAP32[$2 + 16 >> 2] = HEAP32[$74 + 16 >> 2]; //@line 6139
     }
     $92 = $74 + 32 | 0; //@line 6142
     HEAP32[$92 >> 2] = $71; //@line 6144
     HEAP32[$92 + 4 >> 2] = $73; //@line 6147
     $$2$us$1 = 0; //@line 6148
     break;
    }
   }
  } while (0);
  if (!(HEAP32[1674] | 0)) {
   $$0$lcssa = $$2$us$1; //@line 6156
   return $$0$lcssa | 0; //@line 6157
  }
  $101 = _emscripten_asm_const_i(8) | 0; //@line 6159
  $103 = (($101 | 0) < 0) << 31 >> 31; //@line 6161
  $104 = HEAP32[1674] | 0; //@line 6162
  $106 = $104 + 24 | 0; //@line 6164
  $111 = HEAP32[$106 + 4 >> 2] | 0; //@line 6169
  $118 = HEAP32[$104 + 20 >> 2] | 0; //@line 6176
  if ($111 >>> 0 < $103 >>> 0 | (($111 | 0) == ($103 | 0) ? (HEAP32[$106 >> 2] | 0) >>> 0 < $101 >>> 0 : 0)) {
   if (!$118) {
    $128 = $104; //@line 6180
    label = 43; //@line 6181
   } else {
    __ZdlPv($118); //@line 6183
    $$pre37 = HEAP32[1674] | 0; //@line 6184
    if ($$pre37 | 0) {
     $128 = $$pre37; //@line 6187
     label = 43; //@line 6188
    }
   }
   if ((label | 0) == 43) {
    __ZdlPv($128); //@line 6192
   }
   HEAP32[1674] = 0; //@line 6194
   $$0$lcssa = $$2$us$1; //@line 6195
   return $$0$lcssa | 0; //@line 6196
  }
  if (_strcmp($118, $0) | 0) {
   $$0$lcssa = $$2$us$1; //@line 6201
   return $$0$lcssa | 0; //@line 6202
  }
  if (!$4) {
   HEAP32[$2 >> 2] = HEAP32[$104 >> 2]; //@line 6205
   HEAP32[$2 + 4 >> 2] = HEAP32[$104 + 4 >> 2]; //@line 6205
   HEAP32[$2 + 8 >> 2] = HEAP32[$104 + 8 >> 2]; //@line 6205
   HEAP32[$2 + 12 >> 2] = HEAP32[$104 + 12 >> 2]; //@line 6205
   HEAP32[$2 + 16 >> 2] = HEAP32[$104 + 16 >> 2]; //@line 6205
  }
  $122 = $104 + 32 | 0; //@line 6208
  HEAP32[$122 >> 2] = $101; //@line 6210
  HEAP32[$122 + 4 >> 2] = $103; //@line 6213
  $$0$lcssa = 0; //@line 6214
  return $$0$lcssa | 0; //@line 6215
 }
 do {
  if ($6) {
   $$2 = -3006; //@line 6219
  } else {
   $37 = _emscripten_asm_const_i(8) | 0; //@line 6221
   $39 = (($37 | 0) < 0) << 31 >> 31; //@line 6223
   $40 = HEAP32[1672] | 0; //@line 6224
   $42 = $40 + 24 | 0; //@line 6226
   $47 = HEAP32[$42 + 4 >> 2] | 0; //@line 6231
   if ($47 >>> 0 < $39 >>> 0 | (($47 | 0) == ($39 | 0) ? (HEAP32[$42 >> 2] | 0) >>> 0 < $37 >>> 0 : 0)) {
    $54 = HEAP32[$40 + 20 >> 2] | 0; //@line 6239
    if (!$54) {
     $57 = $40; //@line 6242
     label = 18; //@line 6243
    } else {
     __ZdlPv($54); //@line 6245
     $$pre = HEAP32[1672] | 0; //@line 6246
     if ($$pre | 0) {
      $57 = $$pre; //@line 6249
      label = 18; //@line 6250
     }
    }
    if ((label | 0) == 18) {
     __ZdlPv($57); //@line 6254
    }
    HEAP32[1672] = 0; //@line 6256
    $$2 = -3006; //@line 6257
    break;
   }
   if ((HEAP32[$40 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$40 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$40 >> 2]; //@line 6269
      HEAP32[$2 + 4 >> 2] = HEAP32[$40 + 4 >> 2]; //@line 6269
      HEAP32[$2 + 8 >> 2] = HEAP32[$40 + 8 >> 2]; //@line 6269
      HEAP32[$2 + 12 >> 2] = HEAP32[$40 + 12 >> 2]; //@line 6269
      HEAP32[$2 + 16 >> 2] = HEAP32[$40 + 16 >> 2]; //@line 6269
     }
     $65 = $40 + 32 | 0; //@line 6272
     HEAP32[$65 >> 2] = $37; //@line 6274
     HEAP32[$65 + 4 >> 2] = $39; //@line 6277
     $$2 = 0; //@line 6278
    } else {
     $$2 = -3006; //@line 6280
    }
   } else {
    $$2 = -3006; //@line 6283
   }
  }
 } while (0);
 do {
  if (!(HEAP32[1673] | 0)) {
   $$2$1 = $$2; //@line 6291
  } else {
   $129 = _emscripten_asm_const_i(8) | 0; //@line 6293
   $131 = (($129 | 0) < 0) << 31 >> 31; //@line 6295
   $132 = HEAP32[1673] | 0; //@line 6296
   $134 = $132 + 24 | 0; //@line 6298
   $139 = HEAP32[$134 + 4 >> 2] | 0; //@line 6303
   if ($139 >>> 0 < $131 >>> 0 | (($139 | 0) == ($131 | 0) ? (HEAP32[$134 >> 2] | 0) >>> 0 < $129 >>> 0 : 0)) {
    $157 = HEAP32[$132 + 20 >> 2] | 0; //@line 6311
    if (!$157) {
     $160 = $132; //@line 6314
     label = 53; //@line 6315
    } else {
     __ZdlPv($157); //@line 6317
     $$pre33 = HEAP32[1673] | 0; //@line 6318
     if ($$pre33 | 0) {
      $160 = $$pre33; //@line 6321
      label = 53; //@line 6322
     }
    }
    if ((label | 0) == 53) {
     __ZdlPv($160); //@line 6326
    }
    HEAP32[1673] = 0; //@line 6328
    $$2$1 = $$2; //@line 6329
    break;
   }
   if ((HEAP32[$132 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$132 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$132 >> 2]; //@line 6341
      HEAP32[$2 + 4 >> 2] = HEAP32[$132 + 4 >> 2]; //@line 6341
      HEAP32[$2 + 8 >> 2] = HEAP32[$132 + 8 >> 2]; //@line 6341
      HEAP32[$2 + 12 >> 2] = HEAP32[$132 + 12 >> 2]; //@line 6341
      HEAP32[$2 + 16 >> 2] = HEAP32[$132 + 16 >> 2]; //@line 6341
     }
     $152 = $132 + 32 | 0; //@line 6344
     HEAP32[$152 >> 2] = $129; //@line 6346
     HEAP32[$152 + 4 >> 2] = $131; //@line 6349
     $$2$1 = 0; //@line 6350
    } else {
     $$2$1 = $$2; //@line 6352
    }
   } else {
    $$2$1 = $$2; //@line 6355
   }
  }
 } while (0);
 if (!(HEAP32[1674] | 0)) {
  $$0$lcssa = $$2$1; //@line 6362
  return $$0$lcssa | 0; //@line 6363
 }
 $163 = _emscripten_asm_const_i(8) | 0; //@line 6365
 $165 = (($163 | 0) < 0) << 31 >> 31; //@line 6367
 $166 = HEAP32[1674] | 0; //@line 6368
 $168 = $166 + 24 | 0; //@line 6370
 $173 = HEAP32[$168 + 4 >> 2] | 0; //@line 6375
 if ($173 >>> 0 < $165 >>> 0 | (($173 | 0) == ($165 | 0) ? (HEAP32[$168 >> 2] | 0) >>> 0 < $163 >>> 0 : 0)) {
  $191 = HEAP32[$166 + 20 >> 2] | 0; //@line 6383
  if (!$191) {
   $194 = $166; //@line 6386
   label = 64; //@line 6387
  } else {
   __ZdlPv($191); //@line 6389
   $$pre34 = HEAP32[1674] | 0; //@line 6390
   if ($$pre34 | 0) {
    $194 = $$pre34; //@line 6393
    label = 64; //@line 6394
   }
  }
  if ((label | 0) == 64) {
   __ZdlPv($194); //@line 6398
  }
  HEAP32[1674] = 0; //@line 6400
  $$0$lcssa = $$2$1; //@line 6401
  return $$0$lcssa | 0; //@line 6402
 }
 if ((HEAP32[$166 >> 2] | 0) != ($1 | 0)) {
  $$0$lcssa = $$2$1; //@line 6407
  return $$0$lcssa | 0; //@line 6408
 }
 if (_strcmp(HEAP32[$166 + 20 >> 2] | 0, $0) | 0) {
  $$0$lcssa = $$2$1; //@line 6415
  return $$0$lcssa | 0; //@line 6416
 }
 if (!$4) {
  HEAP32[$2 >> 2] = HEAP32[$166 >> 2]; //@line 6419
  HEAP32[$2 + 4 >> 2] = HEAP32[$166 + 4 >> 2]; //@line 6419
  HEAP32[$2 + 8 >> 2] = HEAP32[$166 + 8 >> 2]; //@line 6419
  HEAP32[$2 + 12 >> 2] = HEAP32[$166 + 12 >> 2]; //@line 6419
  HEAP32[$2 + 16 >> 2] = HEAP32[$166 + 16 >> 2]; //@line 6419
 }
 $186 = $166 + 32 | 0; //@line 6422
 HEAP32[$186 >> 2] = $163; //@line 6424
 HEAP32[$186 + 4 >> 2] = $165; //@line 6427
 $$0$lcssa = 0; //@line 6428
 return $$0$lcssa | 0; //@line 6429
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15144
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15150
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 15159
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 15164
      $19 = $1 + 44 | 0; //@line 15165
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 15174
      $26 = $1 + 52 | 0; //@line 15175
      $27 = $1 + 53 | 0; //@line 15176
      $28 = $1 + 54 | 0; //@line 15177
      $29 = $0 + 8 | 0; //@line 15178
      $30 = $1 + 24 | 0; //@line 15179
      $$081$off0 = 0; //@line 15180
      $$084 = $0 + 16 | 0; //@line 15180
      $$085$off0 = 0; //@line 15180
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 15184
        label = 20; //@line 15185
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 15188
       HEAP8[$27 >> 0] = 0; //@line 15189
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 15190
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 15191
       if (___async) {
        label = 12; //@line 15194
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15197
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 15201
        label = 20; //@line 15202
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 15209
         $$186$off0 = $$085$off0; //@line 15209
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 15218
           label = 20; //@line 15219
           break L10;
          } else {
           $$182$off0 = 1; //@line 15222
           $$186$off0 = $$085$off0; //@line 15222
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 15229
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 15236
          break L10;
         } else {
          $$182$off0 = 1; //@line 15239
          $$186$off0 = 1; //@line 15239
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 15244
       $$084 = $$084 + 8 | 0; //@line 15244
       $$085$off0 = $$186$off0; //@line 15244
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 344; //@line 15247
       HEAP32[$AsyncCtx15 + 4 >> 2] = $30; //@line 15249
       HEAP32[$AsyncCtx15 + 8 >> 2] = $28; //@line 15251
       HEAP32[$AsyncCtx15 + 12 >> 2] = $19; //@line 15253
       HEAP32[$AsyncCtx15 + 16 >> 2] = $27; //@line 15255
       HEAP32[$AsyncCtx15 + 20 >> 2] = $26; //@line 15257
       HEAP32[$AsyncCtx15 + 24 >> 2] = $29; //@line 15259
       HEAP8[$AsyncCtx15 + 28 >> 0] = $$085$off0 & 1; //@line 15262
       HEAP8[$AsyncCtx15 + 29 >> 0] = $$081$off0 & 1; //@line 15265
       HEAP32[$AsyncCtx15 + 32 >> 2] = $$084; //@line 15267
       HEAP32[$AsyncCtx15 + 36 >> 2] = $2; //@line 15269
       HEAP32[$AsyncCtx15 + 40 >> 2] = $13; //@line 15271
       HEAP32[$AsyncCtx15 + 44 >> 2] = $1; //@line 15273
       HEAP8[$AsyncCtx15 + 48 >> 0] = $4 & 1; //@line 15276
       HEAP32[$AsyncCtx15 + 52 >> 2] = $25; //@line 15278
       sp = STACKTOP; //@line 15279
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 15285
         $61 = $1 + 40 | 0; //@line 15286
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 15289
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 15297
           if ($$283$off0) {
            label = 25; //@line 15299
            break;
           } else {
            $69 = 4; //@line 15302
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 15309
        } else {
         $69 = 4; //@line 15311
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 15316
      }
      HEAP32[$19 >> 2] = $69; //@line 15318
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 15327
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 15332
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 15333
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15334
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 15335
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 345; //@line 15338
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15340
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 15342
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 15344
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 15346
    HEAP8[$AsyncCtx11 + 20 >> 0] = $4 & 1; //@line 15349
    HEAP32[$AsyncCtx11 + 24 >> 2] = $73; //@line 15351
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 15353
    sp = STACKTOP; //@line 15354
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15357
   $81 = $0 + 24 | 0; //@line 15358
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 15362
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 15366
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 15373
       $$2 = $81; //@line 15374
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 15386
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 15387
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 15392
        $136 = $$2 + 8 | 0; //@line 15393
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 15396
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 348; //@line 15401
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 15403
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 15405
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 15407
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 15409
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 15411
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 15413
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 15415
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 15418
       sp = STACKTOP; //@line 15419
       return;
      }
      $104 = $1 + 24 | 0; //@line 15422
      $105 = $1 + 54 | 0; //@line 15423
      $$1 = $81; //@line 15424
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15440
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 15441
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15446
       $122 = $$1 + 8 | 0; //@line 15447
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 15450
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 347; //@line 15455
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 15457
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 15459
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 15461
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 15463
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 15465
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 15467
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 15469
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 15471
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 15474
      sp = STACKTOP; //@line 15475
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 15479
    $$0 = $81; //@line 15480
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15487
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 15488
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15493
     $100 = $$0 + 8 | 0; //@line 15494
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 15497
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 346; //@line 15502
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 15504
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 15506
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 15508
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 15510
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 15512
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 15514
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 15517
    sp = STACKTOP; //@line 15518
    return;
   }
  }
 } while (0);
 return;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 7
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 8
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 9
 $d_sroa_0_0_extract_trunc = $b$0; //@line 10
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 11
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 12
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 14
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 17
    HEAP32[$rem + 4 >> 2] = 0; //@line 18
   }
   $_0$1 = 0; //@line 20
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 21
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 22
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 25
    $_0$0 = 0; //@line 26
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 27
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 29
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 30
   $_0$1 = 0; //@line 31
   $_0$0 = 0; //@line 32
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 36
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 41
     HEAP32[$rem + 4 >> 2] = 0; //@line 42
    }
    $_0$1 = 0; //@line 44
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 45
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 46
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 50
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 51
    }
    $_0$1 = 0; //@line 53
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 54
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 55
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 57
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 60
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 61
    }
    $_0$1 = 0; //@line 63
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 64
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 65
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 68
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 70
    $58 = 31 - $51 | 0; //@line 71
    $sr_1_ph = $57; //@line 72
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 73
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 74
    $q_sroa_0_1_ph = 0; //@line 75
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 76
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 80
    $_0$0 = 0; //@line 81
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 82
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 84
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 85
   $_0$1 = 0; //@line 86
   $_0$0 = 0; //@line 87
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 88
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 92
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 94
     $126 = 31 - $119 | 0; //@line 95
     $130 = $119 - 31 >> 31; //@line 96
     $sr_1_ph = $125; //@line 97
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 98
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 99
     $q_sroa_0_1_ph = 0; //@line 100
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 101
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 105
     $_0$0 = 0; //@line 106
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 107
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 109
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 110
    $_0$1 = 0; //@line 111
    $_0$0 = 0; //@line 112
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 113
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 115
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 118
    $89 = 64 - $88 | 0; //@line 119
    $91 = 32 - $88 | 0; //@line 120
    $92 = $91 >> 31; //@line 121
    $95 = $88 - 32 | 0; //@line 122
    $105 = $95 >> 31; //@line 123
    $sr_1_ph = $88; //@line 124
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 125
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 126
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 127
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 128
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 132
    HEAP32[$rem + 4 >> 2] = 0; //@line 133
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 136
    $_0$0 = $a$0 | 0 | 0; //@line 137
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 138
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 140
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 141
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 142
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 143
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 148
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 149
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 150
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 151
  $carry_0_lcssa$1 = 0; //@line 152
  $carry_0_lcssa$0 = 0; //@line 153
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 155
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 156
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 157
  $137$1 = tempRet0; //@line 158
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 159
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 160
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 161
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 162
  $sr_1202 = $sr_1_ph; //@line 163
  $carry_0203 = 0; //@line 164
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 166
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 167
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 168
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 169
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 170
   $150$1 = tempRet0; //@line 171
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 172
   $carry_0203 = $151$0 & 1; //@line 173
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 175
   $r_sroa_1_1200 = tempRet0; //@line 176
   $sr_1202 = $sr_1202 - 1 | 0; //@line 177
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 189
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 190
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 191
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 192
  $carry_0_lcssa$1 = 0; //@line 193
  $carry_0_lcssa$0 = $carry_0203; //@line 194
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 196
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 197
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 200
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 201
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 203
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 204
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 205
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1105 = 0, $$3100 = 0, $$byval_copy = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19727
 STACKTOP = STACKTOP + 32 | 0; //@line 19728
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 19728
 $$byval_copy = sp; //@line 19729
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19731
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19733
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19735
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19737
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19739
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19741
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19743
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19745
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19747
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19749
 $22 = HEAP8[$0 + 44 >> 0] | 0; //@line 19751
 $24 = HEAP8[$0 + 45 >> 0] | 0; //@line 19753
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 19755
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 19757
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 19759
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 19761
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 19763
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 19765
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 19767
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 19769
 $42 = HEAP8[$0 + 80 >> 0] | 0; //@line 19771
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 19773
 $46 = HEAP8[$0 + 88 >> 0] | 0; //@line 19775
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 19777
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 19779
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 19781
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 19783
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  $59 = 608 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 19790
  HEAP32[$$byval_copy >> 2] = HEAP32[$59 >> 2]; //@line 19791
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$59 + 4 >> 2]; //@line 19791
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$59 + 8 >> 2]; //@line 19791
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$59 + 12 >> 2]; //@line 19791
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$59 + 16 >> 2]; //@line 19791
  __ZN13SocketAddress8set_addrE10nsapi_addr($14, $$byval_copy); //@line 19792
  $$1105 = $22; //@line 19793
  $$3100 = 5; //@line 19793
 } else {
  $$1105 = $22; //@line 19795
  $$3100 = $24; //@line 19795
 }
 __ZN13SocketAddress8set_portEt($14, 53); //@line 19797
 HEAP8[$2 >> 0] = 0; //@line 19798
 HEAP8[$26 >> 0] = 1; //@line 19799
 HEAP8[$28 >> 0] = 1; //@line 19800
 HEAP8[$30 >> 0] = 0; //@line 19801
 HEAP8[$32 >> 0] = 0; //@line 19802
 HEAP8[$34 >> 0] = 1; //@line 19803
 HEAP8[$36 >> 0] = 0; //@line 19804
 HEAP8[$36 + 1 >> 0] = 0; //@line 19804
 HEAP8[$36 + 2 >> 0] = 0; //@line 19804
 HEAP8[$36 + 3 >> 0] = 0; //@line 19804
 HEAP8[$36 + 4 >> 0] = 0; //@line 19804
 HEAP8[$36 + 5 >> 0] = 0; //@line 19804
 if (!(HEAP8[$38 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $40; //@line 19808
 } else {
  $$048$i = $38; //@line 19810
  $$sroa$0$0$in47$i = $40; //@line 19810
  while (1) {
   $62 = _strcspn($$048$i, 3975) | 0; //@line 19812
   $64 = $$sroa$0$0$in47$i + 1 | 0; //@line 19814
   HEAP8[$$sroa$0$0$in47$i >> 0] = $62; //@line 19815
   $65 = $62 & 255; //@line 19816
   _memcpy($64 | 0, $$048$i | 0, $65 | 0) | 0; //@line 19817
   $66 = $64 + $65 | 0; //@line 19818
   $$048$i = $$048$i + ($62 + ((HEAP8[$$048$i + $62 >> 0] | 0) == 46 & 1)) | 0; //@line 19824
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $66; //@line 19828
    break;
   } else {
    $$sroa$0$0$in47$i = $66; //@line 19831
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 19836
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 19838
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $42; //@line 19840
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 19842
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 19845
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 19847
 $82 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($8, $14, $2, $$sroa$0$0$in$lcssa$i + 5 - $44 | 0) | 0; //@line 19848
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 19851
  $83 = $ReallocAsyncCtx4 + 4 | 0; //@line 19852
  HEAP32[$83 >> 2] = $48; //@line 19853
  $84 = $ReallocAsyncCtx4 + 8 | 0; //@line 19854
  HEAP32[$84 >> 2] = $10; //@line 19855
  $85 = $ReallocAsyncCtx4 + 12 | 0; //@line 19856
  HEAP32[$85 >> 2] = $2; //@line 19857
  $86 = $ReallocAsyncCtx4 + 16 | 0; //@line 19858
  HEAP32[$86 >> 2] = $4; //@line 19859
  $87 = $ReallocAsyncCtx4 + 20 | 0; //@line 19860
  HEAP32[$87 >> 2] = $8; //@line 19861
  $88 = $ReallocAsyncCtx4 + 24 | 0; //@line 19862
  HEAP32[$88 >> 2] = $6; //@line 19863
  $89 = $ReallocAsyncCtx4 + 28 | 0; //@line 19864
  HEAP8[$89 >> 0] = $$3100; //@line 19865
  $90 = $ReallocAsyncCtx4 + 32 | 0; //@line 19866
  HEAP32[$90 >> 2] = $12; //@line 19867
  $91 = $ReallocAsyncCtx4 + 36 | 0; //@line 19868
  HEAP32[$91 >> 2] = $14; //@line 19869
  $92 = $ReallocAsyncCtx4 + 40 | 0; //@line 19870
  HEAP32[$92 >> 2] = $16; //@line 19871
  $93 = $ReallocAsyncCtx4 + 44 | 0; //@line 19872
  HEAP32[$93 >> 2] = $18; //@line 19873
  $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 19874
  HEAP32[$94 >> 2] = $20; //@line 19875
  $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 19876
  HEAP32[$95 >> 2] = $26; //@line 19877
  $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 19878
  HEAP32[$96 >> 2] = $28; //@line 19879
  $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 19880
  HEAP32[$97 >> 2] = $30; //@line 19881
  $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 19882
  HEAP32[$98 >> 2] = $32; //@line 19883
  $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 19884
  HEAP32[$99 >> 2] = $34; //@line 19885
  $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 19886
  HEAP32[$100 >> 2] = $36; //@line 19887
  $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 19888
  HEAP32[$101 >> 2] = $38; //@line 19889
  $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 19890
  HEAP32[$102 >> 2] = $40; //@line 19891
  $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 19892
  HEAP8[$103 >> 0] = $42; //@line 19893
  $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 19894
  HEAP32[$104 >> 2] = $44; //@line 19895
  $105 = $ReallocAsyncCtx4 + 92 | 0; //@line 19896
  HEAP32[$105 >> 2] = $50; //@line 19897
  $106 = $ReallocAsyncCtx4 + 96 | 0; //@line 19898
  HEAP32[$106 >> 2] = $52; //@line 19899
  $107 = $ReallocAsyncCtx4 + 100 | 0; //@line 19900
  HEAP32[$107 >> 2] = $54; //@line 19901
  $108 = $ReallocAsyncCtx4 + 104 | 0; //@line 19902
  HEAP8[$108 >> 0] = $$1105; //@line 19903
  $109 = $ReallocAsyncCtx4 + 105 | 0; //@line 19904
  HEAP8[$109 >> 0] = $46; //@line 19905
  sp = STACKTOP; //@line 19906
  STACKTOP = sp; //@line 19907
  return;
 }
 HEAP32[___async_retval >> 2] = $82; //@line 19910
 ___async_unwind = 0; //@line 19911
 HEAP32[$ReallocAsyncCtx4 >> 2] = 144; //@line 19912
 $83 = $ReallocAsyncCtx4 + 4 | 0; //@line 19913
 HEAP32[$83 >> 2] = $48; //@line 19914
 $84 = $ReallocAsyncCtx4 + 8 | 0; //@line 19915
 HEAP32[$84 >> 2] = $10; //@line 19916
 $85 = $ReallocAsyncCtx4 + 12 | 0; //@line 19917
 HEAP32[$85 >> 2] = $2; //@line 19918
 $86 = $ReallocAsyncCtx4 + 16 | 0; //@line 19919
 HEAP32[$86 >> 2] = $4; //@line 19920
 $87 = $ReallocAsyncCtx4 + 20 | 0; //@line 19921
 HEAP32[$87 >> 2] = $8; //@line 19922
 $88 = $ReallocAsyncCtx4 + 24 | 0; //@line 19923
 HEAP32[$88 >> 2] = $6; //@line 19924
 $89 = $ReallocAsyncCtx4 + 28 | 0; //@line 19925
 HEAP8[$89 >> 0] = $$3100; //@line 19926
 $90 = $ReallocAsyncCtx4 + 32 | 0; //@line 19927
 HEAP32[$90 >> 2] = $12; //@line 19928
 $91 = $ReallocAsyncCtx4 + 36 | 0; //@line 19929
 HEAP32[$91 >> 2] = $14; //@line 19930
 $92 = $ReallocAsyncCtx4 + 40 | 0; //@line 19931
 HEAP32[$92 >> 2] = $16; //@line 19932
 $93 = $ReallocAsyncCtx4 + 44 | 0; //@line 19933
 HEAP32[$93 >> 2] = $18; //@line 19934
 $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 19935
 HEAP32[$94 >> 2] = $20; //@line 19936
 $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 19937
 HEAP32[$95 >> 2] = $26; //@line 19938
 $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 19939
 HEAP32[$96 >> 2] = $28; //@line 19940
 $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 19941
 HEAP32[$97 >> 2] = $30; //@line 19942
 $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 19943
 HEAP32[$98 >> 2] = $32; //@line 19944
 $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 19945
 HEAP32[$99 >> 2] = $34; //@line 19946
 $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 19947
 HEAP32[$100 >> 2] = $36; //@line 19948
 $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 19949
 HEAP32[$101 >> 2] = $38; //@line 19950
 $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 19951
 HEAP32[$102 >> 2] = $40; //@line 19952
 $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 19953
 HEAP8[$103 >> 0] = $42; //@line 19954
 $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 19955
 HEAP32[$104 >> 2] = $44; //@line 19956
 $105 = $ReallocAsyncCtx4 + 92 | 0; //@line 19957
 HEAP32[$105 >> 2] = $50; //@line 19958
 $106 = $ReallocAsyncCtx4 + 96 | 0; //@line 19959
 HEAP32[$106 >> 2] = $52; //@line 19960
 $107 = $ReallocAsyncCtx4 + 100 | 0; //@line 19961
 HEAP32[$107 >> 2] = $54; //@line 19962
 $108 = $ReallocAsyncCtx4 + 104 | 0; //@line 19963
 HEAP8[$108 >> 0] = $$1105; //@line 19964
 $109 = $ReallocAsyncCtx4 + 105 | 0; //@line 19965
 HEAP8[$109 >> 0] = $46; //@line 19966
 sp = STACKTOP; //@line 19967
 STACKTOP = sp; //@line 19968
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_135($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3293
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3295
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3297
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3299
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3301
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3303
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3305
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3307
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3309
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3311
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3313
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3315
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3317
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 3319
 $42 = HEAP32[$8 >> 2] | 0; //@line 3320
 if ($42 | 0) {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 3324
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 3325
  FUNCTION_TABLE_vi[$45 & 511]($4); //@line 3326
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 247; //@line 3329
   $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 3330
   HEAP32[$46 >> 2] = $2; //@line 3331
   $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 3332
   HEAP32[$47 >> 2] = $4; //@line 3333
   $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 3334
   HEAP32[$48 >> 2] = $6; //@line 3335
   $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 3336
   HEAP32[$49 >> 2] = $8; //@line 3337
   $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 3338
   HEAP32[$50 >> 2] = $10; //@line 3339
   $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 3340
   HEAP32[$51 >> 2] = $12; //@line 3341
   $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 3342
   HEAP32[$52 >> 2] = $14; //@line 3343
   $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 3344
   HEAP32[$53 >> 2] = $16; //@line 3345
   $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 3346
   HEAP32[$54 >> 2] = $18; //@line 3347
   $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 3348
   HEAP32[$55 >> 2] = $20; //@line 3349
   $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 3350
   HEAP32[$56 >> 2] = $22; //@line 3351
   $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 3352
   HEAP32[$57 >> 2] = $24; //@line 3353
   $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 3354
   HEAP32[$58 >> 2] = $26; //@line 3355
   sp = STACKTOP; //@line 3356
   return;
  }
  ___async_unwind = 0; //@line 3359
  HEAP32[$ReallocAsyncCtx2 >> 2] = 247; //@line 3360
  $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 3361
  HEAP32[$46 >> 2] = $2; //@line 3362
  $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 3363
  HEAP32[$47 >> 2] = $4; //@line 3364
  $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 3365
  HEAP32[$48 >> 2] = $6; //@line 3366
  $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 3367
  HEAP32[$49 >> 2] = $8; //@line 3368
  $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 3369
  HEAP32[$50 >> 2] = $10; //@line 3370
  $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 3371
  HEAP32[$51 >> 2] = $12; //@line 3372
  $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 3373
  HEAP32[$52 >> 2] = $14; //@line 3374
  $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 3375
  HEAP32[$53 >> 2] = $16; //@line 3376
  $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 3377
  HEAP32[$54 >> 2] = $18; //@line 3378
  $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 3379
  HEAP32[$55 >> 2] = $20; //@line 3380
  $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 3381
  HEAP32[$56 >> 2] = $22; //@line 3382
  $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 3383
  HEAP32[$57 >> 2] = $24; //@line 3384
  $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 3385
  HEAP32[$58 >> 2] = $26; //@line 3386
  sp = STACKTOP; //@line 3387
  return;
 }
 $59 = HEAP32[$10 >> 2] | 0; //@line 3390
 if (!$59) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 3393
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 3394
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 3397
   $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 3398
   HEAP32[$28 >> 2] = $2; //@line 3399
   $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 3400
   HEAP32[$29 >> 2] = $4; //@line 3401
   $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 3402
   HEAP32[$30 >> 2] = $6; //@line 3403
   $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 3404
   HEAP32[$31 >> 2] = $8; //@line 3405
   $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 3406
   HEAP32[$32 >> 2] = $10; //@line 3407
   $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 3408
   HEAP32[$33 >> 2] = $12; //@line 3409
   $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 3410
   HEAP32[$34 >> 2] = $14; //@line 3411
   $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 3412
   HEAP32[$35 >> 2] = $16; //@line 3413
   $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 3414
   HEAP32[$36 >> 2] = $18; //@line 3415
   $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 3416
   HEAP32[$37 >> 2] = $20; //@line 3417
   $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 3418
   HEAP32[$38 >> 2] = $22; //@line 3419
   $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 3420
   HEAP32[$39 >> 2] = $24; //@line 3421
   $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 3422
   HEAP32[$40 >> 2] = $26; //@line 3423
   sp = STACKTOP; //@line 3424
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 3428
  ___async_unwind = 0; //@line 3429
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 3430
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 3431
  HEAP32[$28 >> 2] = $2; //@line 3432
  $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 3433
  HEAP32[$29 >> 2] = $4; //@line 3434
  $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 3435
  HEAP32[$30 >> 2] = $6; //@line 3436
  $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 3437
  HEAP32[$31 >> 2] = $8; //@line 3438
  $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 3439
  HEAP32[$32 >> 2] = $10; //@line 3440
  $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 3441
  HEAP32[$33 >> 2] = $12; //@line 3442
  $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 3443
  HEAP32[$34 >> 2] = $14; //@line 3444
  $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 3445
  HEAP32[$35 >> 2] = $16; //@line 3446
  $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 3447
  HEAP32[$36 >> 2] = $18; //@line 3448
  $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 3449
  HEAP32[$37 >> 2] = $20; //@line 3450
  $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 3451
  HEAP32[$38 >> 2] = $22; //@line 3452
  $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 3453
  HEAP32[$39 >> 2] = $24; //@line 3454
  $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 3455
  HEAP32[$40 >> 2] = $26; //@line 3456
  sp = STACKTOP; //@line 3457
  return;
 } else {
  $62 = HEAP32[$59 + 8 >> 2] | 0; //@line 3461
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 3462
  FUNCTION_TABLE_vi[$62 & 511]($6); //@line 3463
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 3466
   $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 3467
   HEAP32[$63 >> 2] = $2; //@line 3468
   $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 3469
   HEAP32[$64 >> 2] = $4; //@line 3470
   $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 3471
   HEAP32[$65 >> 2] = $6; //@line 3472
   $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 3473
   HEAP32[$66 >> 2] = $8; //@line 3474
   $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 3475
   HEAP32[$67 >> 2] = $10; //@line 3476
   $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 3477
   HEAP32[$68 >> 2] = $12; //@line 3478
   $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 3479
   HEAP32[$69 >> 2] = $14; //@line 3480
   $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 3481
   HEAP32[$70 >> 2] = $16; //@line 3482
   $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 3483
   HEAP32[$71 >> 2] = $18; //@line 3484
   $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 3485
   HEAP32[$72 >> 2] = $20; //@line 3486
   $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 3487
   HEAP32[$73 >> 2] = $22; //@line 3488
   $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 3489
   HEAP32[$74 >> 2] = $24; //@line 3490
   $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 3491
   HEAP32[$75 >> 2] = $26; //@line 3492
   sp = STACKTOP; //@line 3493
   return;
  }
  ___async_unwind = 0; //@line 3496
  HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 3497
  $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 3498
  HEAP32[$63 >> 2] = $2; //@line 3499
  $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 3500
  HEAP32[$64 >> 2] = $4; //@line 3501
  $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 3502
  HEAP32[$65 >> 2] = $6; //@line 3503
  $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 3504
  HEAP32[$66 >> 2] = $8; //@line 3505
  $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 3506
  HEAP32[$67 >> 2] = $10; //@line 3507
  $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 3508
  HEAP32[$68 >> 2] = $12; //@line 3509
  $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 3510
  HEAP32[$69 >> 2] = $14; //@line 3511
  $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 3512
  HEAP32[$70 >> 2] = $16; //@line 3513
  $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 3514
  HEAP32[$71 >> 2] = $18; //@line 3515
  $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 3516
  HEAP32[$72 >> 2] = $20; //@line 3517
  $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 3518
  HEAP32[$73 >> 2] = $22; //@line 3519
  $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 3520
  HEAP32[$74 >> 2] = $24; //@line 3521
  $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 3522
  HEAP32[$75 >> 2] = $26; //@line 3523
  sp = STACKTOP; //@line 3524
  return;
 }
}
function __ZL30nsapi_dns_query_async_responsePv($0) {
 $0 = $0 | 0;
 var $$048 = 0, $$049 = 0, $$051 = 0, $$byval_copy27 = 0, $$lcssa = 0, $$pr$i = 0, $$pre = 0, $1 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $40 = 0, $45 = 0, $47 = 0, $54 = 0, $55 = 0, $59 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $77 = 0, $79 = 0, $85 = 0, $91 = 0, $95 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11643
 STACKTOP = STACKTOP + 48 | 0; //@line 11644
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11644
 $$byval_copy27 = sp + 20 | 0; //@line 11645
 $1 = sp; //@line 11646
 $2 = $0; //@line 11647
 $3 = HEAP32[1675] | 0; //@line 11648
 if (!$3) {
  label = 3; //@line 11651
 } else {
  if ((HEAP32[$3 >> 2] | 0) == ($2 | 0)) {
   $$lcssa = $3; //@line 11656
  } else {
   label = 3; //@line 11658
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = HEAP32[1676] | 0; //@line 11663
   if ($7 | 0) {
    if ((HEAP32[$7 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $7; //@line 11669
     break;
    }
   }
   $91 = HEAP32[1677] | 0; //@line 11673
   if ($91 | 0) {
    if ((HEAP32[$91 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $91; //@line 11679
     break;
    }
   }
   $95 = HEAP32[1678] | 0; //@line 11683
   if ($95 | 0) {
    if ((HEAP32[$95 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $95; //@line 11689
     break;
    }
   }
   $99 = HEAP32[1679] | 0; //@line 11693
   if (!$99) {
    STACKTOP = sp; //@line 11696
    return;
   }
   if ((HEAP32[$99 >> 2] | 0) == ($2 | 0)) {
    $$lcssa = $99; //@line 11701
   } else {
    STACKTOP = sp; //@line 11703
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa + 88 >> 2] | 0) != 1) {
  STACKTOP = sp; //@line 11711
  return;
 }
 $14 = $$lcssa + 86 | 0; //@line 11715
 $15 = HEAP8[$14 >> 0] | 0; //@line 11716
 $16 = $15 & 255; //@line 11717
 if (!($15 << 24 >> 24)) {
  $$048 = 0; //@line 11720
  $$049 = HEAP32[$$lcssa + 4 >> 2] | 0; //@line 11720
 } else {
  $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11723
  $19 = __ZnajRKSt9nothrow_t($16 << 6, 8621) | 0; //@line 11724
  if (___async) {
   HEAP32[$AsyncCtx13 >> 2] = 250; //@line 11727
   HEAP32[$AsyncCtx13 + 4 >> 2] = $$byval_copy27; //@line 11729
   HEAP32[$AsyncCtx13 + 8 >> 2] = $$lcssa; //@line 11731
   HEAP32[$AsyncCtx13 + 12 >> 2] = $14; //@line 11733
   HEAP32[$AsyncCtx13 + 16 >> 2] = $1; //@line 11735
   HEAP32[$AsyncCtx13 + 20 >> 2] = $16; //@line 11737
   sp = STACKTOP; //@line 11738
   STACKTOP = sp; //@line 11739
   return;
  }
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 11741
  if (!$19) {
   $40 = 0; //@line 11744
  } else {
   $26 = $19 + ($16 << 6) | 0; //@line 11746
   $27 = $19; //@line 11747
   do {
    HEAP32[$1 >> 2] = 0; //@line 11749
    HEAP32[$1 + 4 >> 2] = 0; //@line 11749
    HEAP32[$1 + 8 >> 2] = 0; //@line 11749
    HEAP32[$1 + 12 >> 2] = 0; //@line 11749
    HEAP32[$1 + 16 >> 2] = 0; //@line 11749
    HEAP32[$$byval_copy27 >> 2] = HEAP32[$1 >> 2]; //@line 11750
    HEAP32[$$byval_copy27 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11750
    HEAP32[$$byval_copy27 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11750
    HEAP32[$$byval_copy27 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 11750
    HEAP32[$$byval_copy27 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 11750
    __ZN13SocketAddressC2E10nsapi_addrt($27, $$byval_copy27, 0); //@line 11751
    $27 = $27 + 64 | 0; //@line 11752
   } while (($27 | 0) != ($26 | 0));
   $40 = $19; //@line 11755
  }
  $$pre = $$lcssa + 64 | 0; //@line 11764
  if (HEAP8[$14 >> 0] | 0) {
   $$051 = 0; //@line 11766
   do {
    $45 = $40 + ($$051 << 6) | 0; //@line 11768
    $47 = (HEAP32[$$pre >> 2] | 0) + ($$051 * 20 | 0) | 0; //@line 11770
    HEAP32[$$byval_copy27 >> 2] = HEAP32[$47 >> 2]; //@line 11771
    HEAP32[$$byval_copy27 + 4 >> 2] = HEAP32[$47 + 4 >> 2]; //@line 11771
    HEAP32[$$byval_copy27 + 8 >> 2] = HEAP32[$47 + 8 >> 2]; //@line 11771
    HEAP32[$$byval_copy27 + 12 >> 2] = HEAP32[$47 + 12 >> 2]; //@line 11771
    HEAP32[$$byval_copy27 + 16 >> 2] = HEAP32[$47 + 16 >> 2]; //@line 11771
    __ZN13SocketAddress8set_addrE10nsapi_addr($45, $$byval_copy27); //@line 11772
    $$051 = $$051 + 1 | 0; //@line 11773
   } while (($$051 | 0) < (HEAPU8[$14 >> 0] | 0));
  }
  $33 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 11785
  $34 = HEAP32[$$pre >> 2] | 0; //@line 11786
  $36 = HEAP32[$$lcssa + 68 >> 2] | 0; //@line 11788
  $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11789
  __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($33, $34, $36); //@line 11790
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 251; //@line 11793
   HEAP32[$AsyncCtx9 + 4 >> 2] = $$byval_copy27; //@line 11795
   HEAP32[$AsyncCtx9 + 8 >> 2] = $$lcssa; //@line 11797
   HEAP32[$AsyncCtx9 + 12 >> 2] = $40; //@line 11799
   HEAP32[$AsyncCtx9 + 16 >> 2] = $14; //@line 11801
   sp = STACKTOP; //@line 11802
   STACKTOP = sp; //@line 11803
   return;
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 11805
  if (!(HEAP32[$$lcssa + 48 >> 2] | 0)) {
   $$048 = $40; //@line 11810
   $$049 = 0; //@line 11810
  } else {
   $$048 = $40; //@line 11814
   $$049 = HEAPU8[$14 >> 0] | 0; //@line 11814
  }
 }
 $54 = $$lcssa + 28 | 0; //@line 11817
 $55 = HEAP32[$54 >> 2] | 0; //@line 11818
 do {
  if (!$55) {
   $67 = 0; //@line 11822
  } else {
   $59 = HEAP32[$55 + 4 >> 2] | 0; //@line 11826
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 11827
   FUNCTION_TABLE_vii[$59 & 7]($$byval_copy27, $$lcssa + 16 | 0); //@line 11828
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 252; //@line 11831
    HEAP32[$AsyncCtx + 4 >> 2] = $54; //@line 11833
    HEAP32[$AsyncCtx + 8 >> 2] = $$byval_copy27; //@line 11835
    HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa; //@line 11837
    HEAP32[$AsyncCtx + 16 >> 2] = $$byval_copy27; //@line 11839
    HEAP32[$AsyncCtx + 20 >> 2] = $$048; //@line 11841
    HEAP32[$AsyncCtx + 24 >> 2] = $$049; //@line 11843
    sp = STACKTOP; //@line 11844
    STACKTOP = sp; //@line 11845
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11847
    $67 = HEAP32[$54 >> 2] | 0; //@line 11849
    break;
   }
  }
 } while (0);
 $66 = $$byval_copy27 + 12 | 0; //@line 11854
 HEAP32[$66 >> 2] = $67; //@line 11855
 $68 = HEAP32[$$lcssa >> 2] | 0; //@line 11856
 $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11857
 __ZL28nsapi_dns_query_async_deletei($68); //@line 11858
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 253; //@line 11861
  HEAP32[$AsyncCtx16 + 4 >> 2] = $66; //@line 11863
  HEAP32[$AsyncCtx16 + 8 >> 2] = $$byval_copy27; //@line 11865
  HEAP32[$AsyncCtx16 + 12 >> 2] = $$048; //@line 11867
  HEAP32[$AsyncCtx16 + 16 >> 2] = $$049; //@line 11869
  sp = STACKTOP; //@line 11870
  STACKTOP = sp; //@line 11871
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 11873
 $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11874
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 11875
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 254; //@line 11878
  HEAP32[$AsyncCtx19 + 4 >> 2] = $66; //@line 11880
  HEAP32[$AsyncCtx19 + 8 >> 2] = $$byval_copy27; //@line 11882
  HEAP32[$AsyncCtx19 + 12 >> 2] = $$048; //@line 11884
  HEAP32[$AsyncCtx19 + 16 >> 2] = $$049; //@line 11886
  sp = STACKTOP; //@line 11887
  STACKTOP = sp; //@line 11888
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 11890
 $77 = HEAP32[$66 >> 2] | 0; //@line 11891
 do {
  if ($77 | 0) {
   $79 = HEAP32[$77 >> 2] | 0; //@line 11895
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11896
   FUNCTION_TABLE_viii[$79 & 0]($$byval_copy27, $$049, $$048); //@line 11897
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 255; //@line 11900
    HEAP32[$AsyncCtx2 + 4 >> 2] = $66; //@line 11902
    HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy27; //@line 11904
    HEAP32[$AsyncCtx2 + 12 >> 2] = $$048; //@line 11906
    sp = STACKTOP; //@line 11907
    STACKTOP = sp; //@line 11908
    return;
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11910
   $$pr$i = HEAP32[$66 >> 2] | 0; //@line 11911
   if ($$pr$i | 0) {
    $85 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 11915
    $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11916
    FUNCTION_TABLE_vi[$85 & 511]($$byval_copy27); //@line 11917
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 256; //@line 11920
     HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy27; //@line 11922
     HEAP32[$AsyncCtx6 + 8 >> 2] = $$048; //@line 11924
     sp = STACKTOP; //@line 11925
     STACKTOP = sp; //@line 11926
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 11928
     break;
    }
   }
  }
 } while (0);
 if (!$$048) {
  STACKTOP = sp; //@line 11936
  return;
 }
 __ZdaPv($$048); //@line 11938
 STACKTOP = sp; //@line 11939
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i20 = 0, $$06 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $50 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $65 = 0, $68 = 0, $75 = 0, $76 = 0, $79 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3522
 STACKTOP = STACKTOP + 32 | 0; //@line 3523
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3523
 $3 = sp + 16 | 0; //@line 3524
 $4 = sp; //@line 3525
 if (!(HEAP8[6456] | 0)) {
  if (___cxa_guard_acquire(6456) | 0) {
   HEAP32[1667] = __ZN4mbed16mbed_event_queueEv() | 0; //@line 3533
  }
 }
 $10 = HEAP32[1667] | 0; //@line 3536
 if (!$10) {
  $$06 = -3007; //@line 3539
  STACKTOP = sp; //@line 3540
  return $$06 | 0; //@line 3540
 }
 $13 = $2 + 12 | 0; //@line 3543
 $14 = HEAP32[$13 >> 2] | 0; //@line 3544
 $15 = ($14 | 0) == 0; //@line 3545
 if (($1 | 0) > 0) {
  do {
   if ($15) {
    $23 = 0; //@line 3549
   } else {
    $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 3552
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 3553
    FUNCTION_TABLE_vii[$17 & 7]($3, $2); //@line 3554
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 99; //@line 3557
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3559
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 3561
     HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 3563
     HEAP32[$AsyncCtx + 16 >> 2] = $13; //@line 3565
     sp = STACKTOP; //@line 3566
     STACKTOP = sp; //@line 3567
     return 0; //@line 3567
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 3569
     $23 = HEAP32[$13 >> 2] | 0; //@line 3571
     break;
    }
   }
  } while (0);
  $22 = $3 + 12 | 0; //@line 3576
  HEAP32[$22 >> 2] = $23; //@line 3577
  $AsyncCtx29 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3578
  $24 = _equeue_alloc($10, 16) | 0; //@line 3579
  if (___async) {
   HEAP32[$AsyncCtx29 >> 2] = 100; //@line 3582
   HEAP32[$AsyncCtx29 + 4 >> 2] = $22; //@line 3584
   HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 3586
   HEAP32[$AsyncCtx29 + 12 >> 2] = $10; //@line 3588
   HEAP32[$AsyncCtx29 + 16 >> 2] = $3; //@line 3590
   HEAP32[$AsyncCtx29 + 20 >> 2] = $22; //@line 3592
   sp = STACKTOP; //@line 3593
   STACKTOP = sp; //@line 3594
   return 0; //@line 3594
  }
  _emscripten_free_async_context($AsyncCtx29 | 0); //@line 3596
  do {
   if (!$24) {
    $$0$i = 0; //@line 3600
   } else {
    $31 = HEAP32[$22 >> 2] | 0; //@line 3602
    do {
     if (!$31) {
      $42 = 0; //@line 3606
     } else {
      $34 = HEAP32[$31 + 4 >> 2] | 0; //@line 3609
      $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3610
      FUNCTION_TABLE_vii[$34 & 7]($24, $3); //@line 3611
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 101; //@line 3614
       HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 3616
       HEAP32[$AsyncCtx2 + 8 >> 2] = $24; //@line 3618
       HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 3620
       HEAP32[$AsyncCtx2 + 16 >> 2] = $10; //@line 3622
       HEAP32[$AsyncCtx2 + 20 >> 2] = $22; //@line 3624
       HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3626
       sp = STACKTOP; //@line 3627
       STACKTOP = sp; //@line 3628
       return 0; //@line 3628
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3630
       $42 = HEAP32[$22 >> 2] | 0; //@line 3632
       break;
      }
     }
    } while (0);
    HEAP32[$24 + 12 >> 2] = $42; //@line 3638
    _equeue_event_delay($24, $1); //@line 3639
    _equeue_event_dtor($24, 102); //@line 3640
    $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3641
    $43 = _equeue_post($10, 103, $24) | 0; //@line 3642
    if (___async) {
     HEAP32[$AsyncCtx23 >> 2] = 104; //@line 3645
     HEAP32[$AsyncCtx23 + 4 >> 2] = $22; //@line 3647
     HEAP32[$AsyncCtx23 + 8 >> 2] = $3; //@line 3649
     sp = STACKTOP; //@line 3650
     STACKTOP = sp; //@line 3651
     return 0; //@line 3651
    } else {
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 3653
     $$0$i = $43; //@line 3654
     break;
    }
   }
  } while (0);
  $46 = ($$0$i | 0) == 0; //@line 3659
  $47 = HEAP32[$22 >> 2] | 0; //@line 3660
  do {
   if ($47 | 0) {
    $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 3665
    $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3666
    FUNCTION_TABLE_vi[$50 & 511]($3); //@line 3667
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 105; //@line 3670
     HEAP8[$AsyncCtx6 + 4 >> 0] = $46 & 1; //@line 3673
     sp = STACKTOP; //@line 3674
     STACKTOP = sp; //@line 3675
     return 0; //@line 3675
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 3677
     break;
    }
   }
  } while (0);
  if ($46) {
   $$06 = -3007; //@line 3683
   STACKTOP = sp; //@line 3684
   return $$06 | 0; //@line 3684
  }
 } else {
  do {
   if ($15) {
    $58 = 0; //@line 3689
   } else {
    $53 = HEAP32[$14 + 4 >> 2] | 0; //@line 3692
    $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3693
    FUNCTION_TABLE_vii[$53 & 7]($4, $2); //@line 3694
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 106; //@line 3697
     HEAP32[$AsyncCtx10 + 4 >> 2] = $13; //@line 3699
     HEAP32[$AsyncCtx10 + 8 >> 2] = $4; //@line 3701
     HEAP32[$AsyncCtx10 + 12 >> 2] = $10; //@line 3703
     sp = STACKTOP; //@line 3704
     STACKTOP = sp; //@line 3705
     return 0; //@line 3705
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 3707
     $58 = HEAP32[$13 >> 2] | 0; //@line 3709
     break;
    }
   }
  } while (0);
  $57 = $4 + 12 | 0; //@line 3714
  HEAP32[$57 >> 2] = $58; //@line 3715
  $AsyncCtx26 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3716
  $59 = _equeue_alloc($10, 16) | 0; //@line 3717
  if (___async) {
   HEAP32[$AsyncCtx26 >> 2] = 107; //@line 3720
   HEAP32[$AsyncCtx26 + 4 >> 2] = $57; //@line 3722
   HEAP32[$AsyncCtx26 + 8 >> 2] = $10; //@line 3724
   HEAP32[$AsyncCtx26 + 12 >> 2] = $4; //@line 3726
   HEAP32[$AsyncCtx26 + 16 >> 2] = $57; //@line 3728
   sp = STACKTOP; //@line 3729
   STACKTOP = sp; //@line 3730
   return 0; //@line 3730
  }
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 3732
  do {
   if (!$59) {
    $$0$i20 = 0; //@line 3736
   } else {
    $65 = HEAP32[$57 >> 2] | 0; //@line 3738
    do {
     if (!$65) {
      $75 = 0; //@line 3742
     } else {
      $68 = HEAP32[$65 + 4 >> 2] | 0; //@line 3745
      $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3746
      FUNCTION_TABLE_vii[$68 & 7]($59, $4); //@line 3747
      if (___async) {
       HEAP32[$AsyncCtx13 >> 2] = 108; //@line 3750
       HEAP32[$AsyncCtx13 + 4 >> 2] = $57; //@line 3752
       HEAP32[$AsyncCtx13 + 8 >> 2] = $59; //@line 3754
       HEAP32[$AsyncCtx13 + 12 >> 2] = $10; //@line 3756
       HEAP32[$AsyncCtx13 + 16 >> 2] = $57; //@line 3758
       HEAP32[$AsyncCtx13 + 20 >> 2] = $4; //@line 3760
       sp = STACKTOP; //@line 3761
       STACKTOP = sp; //@line 3762
       return 0; //@line 3762
      } else {
       _emscripten_free_async_context($AsyncCtx13 | 0); //@line 3764
       $75 = HEAP32[$57 >> 2] | 0; //@line 3766
       break;
      }
     }
    } while (0);
    HEAP32[$59 + 12 >> 2] = $75; //@line 3772
    _equeue_event_dtor($59, 102); //@line 3773
    $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3774
    $76 = _equeue_post($10, 103, $59) | 0; //@line 3775
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 109; //@line 3778
     HEAP32[$AsyncCtx20 + 4 >> 2] = $57; //@line 3780
     HEAP32[$AsyncCtx20 + 8 >> 2] = $4; //@line 3782
     sp = STACKTOP; //@line 3783
     STACKTOP = sp; //@line 3784
     return 0; //@line 3784
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 3786
     $$0$i20 = $76; //@line 3787
     break;
    }
   }
  } while (0);
  $79 = ($$0$i20 | 0) == 0; //@line 3792
  $80 = HEAP32[$57 >> 2] | 0; //@line 3793
  do {
   if ($80 | 0) {
    $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 3798
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3799
    FUNCTION_TABLE_vi[$83 & 511]($4); //@line 3800
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 110; //@line 3803
     HEAP8[$AsyncCtx17 + 4 >> 0] = $79 & 1; //@line 3806
     sp = STACKTOP; //@line 3807
     STACKTOP = sp; //@line 3808
     return 0; //@line 3808
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 3810
     break;
    }
   }
  } while (0);
  if ($79) {
   $$06 = -3007; //@line 3816
   STACKTOP = sp; //@line 3817
   return $$06 | 0; //@line 3817
  }
 }
 $$06 = 0; //@line 3820
 STACKTOP = sp; //@line 3821
 return $$06 | 0; //@line 3821
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_136($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $10 = 0, $100 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $88 = 0, $94 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3536
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3538
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3540
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3542
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3544
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3546
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3548
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3550
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3552
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3554
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3556
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3558
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3560
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 3562
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($2); //@line 3567
  return;
 }
 $33 = (HEAPU8[$2 >> 0] | 0) << 8 | (HEAPU8[$26 >> 0] | 0); //@line 3575
 $34 = $33 & 65535; //@line 3576
 $35 = HEAP32[1675] | 0; //@line 3577
 if (!$35) {
  label = 4; //@line 3580
 } else {
  if (($33 | 0) == (HEAPU16[$35 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $35; //@line 3587
   label = 5; //@line 3588
  } else {
   label = 4; //@line 3590
  }
 }
 do {
  if ((label | 0) == 4) {
   $41 = HEAP32[1676] | 0; //@line 3595
   if ($41 | 0) {
    if (($33 | 0) == (HEAPU16[$41 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $41; //@line 3603
     label = 5; //@line 3604
     break;
    }
   }
   $88 = HEAP32[1677] | 0; //@line 3608
   if ($88 | 0) {
    if (($33 | 0) == (HEAPU16[$88 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $88; //@line 3616
     label = 5; //@line 3617
     break;
    }
   }
   $94 = HEAP32[1678] | 0; //@line 3621
   if ($94 | 0) {
    if (($33 | 0) == (HEAPU16[$94 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $94; //@line 3629
     label = 5; //@line 3630
     break;
    }
   }
   $100 = HEAP32[1679] | 0; //@line 3634
   if ($100 | 0) {
    if (($33 | 0) == (HEAPU16[$100 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $100; //@line 3642
     label = 5; //@line 3643
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
   $63 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 3654
   $$ = $63 >>> 0 > 1 ? $63 : 1; //@line 3656
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 3660
   $66 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 8621) | 0; //@line 3661
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 244; //@line 3664
    $67 = $ReallocAsyncCtx4 + 4 | 0; //@line 3665
    HEAP32[$67 >> 2] = $2; //@line 3666
    $68 = $ReallocAsyncCtx4 + 8 | 0; //@line 3667
    HEAP32[$68 >> 2] = $4; //@line 3668
    $69 = $ReallocAsyncCtx4 + 12 | 0; //@line 3669
    HEAP32[$69 >> 2] = $6; //@line 3670
    $70 = $ReallocAsyncCtx4 + 16 | 0; //@line 3671
    HEAP32[$70 >> 2] = $8; //@line 3672
    $71 = $ReallocAsyncCtx4 + 20 | 0; //@line 3673
    HEAP32[$71 >> 2] = $10; //@line 3674
    $72 = $ReallocAsyncCtx4 + 24 | 0; //@line 3675
    HEAP32[$72 >> 2] = $$lcssa; //@line 3676
    $73 = $ReallocAsyncCtx4 + 28 | 0; //@line 3677
    HEAP32[$73 >> 2] = $12; //@line 3678
    $74 = $ReallocAsyncCtx4 + 32 | 0; //@line 3679
    HEAP32[$74 >> 2] = $14; //@line 3680
    $75 = $ReallocAsyncCtx4 + 36 | 0; //@line 3681
    HEAP32[$75 >> 2] = $16; //@line 3682
    $76 = $ReallocAsyncCtx4 + 40 | 0; //@line 3683
    HEAP32[$76 >> 2] = $18; //@line 3684
    $77 = $ReallocAsyncCtx4 + 44 | 0; //@line 3685
    HEAP32[$77 >> 2] = $20; //@line 3686
    $78 = $ReallocAsyncCtx4 + 48 | 0; //@line 3687
    HEAP32[$78 >> 2] = $22; //@line 3688
    $79 = $ReallocAsyncCtx4 + 52 | 0; //@line 3689
    HEAP32[$79 >> 2] = $24; //@line 3690
    $80 = $ReallocAsyncCtx4 + 56 | 0; //@line 3691
    HEAP32[$80 >> 2] = $26; //@line 3692
    $81 = $ReallocAsyncCtx4 + 60 | 0; //@line 3693
    HEAP16[$81 >> 1] = $34; //@line 3694
    $82 = $ReallocAsyncCtx4 + 64 | 0; //@line 3695
    HEAP32[$82 >> 2] = $$; //@line 3696
    sp = STACKTOP; //@line 3697
    return;
   }
   HEAP32[___async_retval >> 2] = $66; //@line 3701
   ___async_unwind = 0; //@line 3702
   HEAP32[$ReallocAsyncCtx4 >> 2] = 244; //@line 3703
   $67 = $ReallocAsyncCtx4 + 4 | 0; //@line 3704
   HEAP32[$67 >> 2] = $2; //@line 3705
   $68 = $ReallocAsyncCtx4 + 8 | 0; //@line 3706
   HEAP32[$68 >> 2] = $4; //@line 3707
   $69 = $ReallocAsyncCtx4 + 12 | 0; //@line 3708
   HEAP32[$69 >> 2] = $6; //@line 3709
   $70 = $ReallocAsyncCtx4 + 16 | 0; //@line 3710
   HEAP32[$70 >> 2] = $8; //@line 3711
   $71 = $ReallocAsyncCtx4 + 20 | 0; //@line 3712
   HEAP32[$71 >> 2] = $10; //@line 3713
   $72 = $ReallocAsyncCtx4 + 24 | 0; //@line 3714
   HEAP32[$72 >> 2] = $$lcssa; //@line 3715
   $73 = $ReallocAsyncCtx4 + 28 | 0; //@line 3716
   HEAP32[$73 >> 2] = $12; //@line 3717
   $74 = $ReallocAsyncCtx4 + 32 | 0; //@line 3718
   HEAP32[$74 >> 2] = $14; //@line 3719
   $75 = $ReallocAsyncCtx4 + 36 | 0; //@line 3720
   HEAP32[$75 >> 2] = $16; //@line 3721
   $76 = $ReallocAsyncCtx4 + 40 | 0; //@line 3722
   HEAP32[$76 >> 2] = $18; //@line 3723
   $77 = $ReallocAsyncCtx4 + 44 | 0; //@line 3724
   HEAP32[$77 >> 2] = $20; //@line 3725
   $78 = $ReallocAsyncCtx4 + 48 | 0; //@line 3726
   HEAP32[$78 >> 2] = $22; //@line 3727
   $79 = $ReallocAsyncCtx4 + 52 | 0; //@line 3728
   HEAP32[$79 >> 2] = $24; //@line 3729
   $80 = $ReallocAsyncCtx4 + 56 | 0; //@line 3730
   HEAP32[$80 >> 2] = $26; //@line 3731
   $81 = $ReallocAsyncCtx4 + 60 | 0; //@line 3732
   HEAP16[$81 >> 1] = $34; //@line 3733
   $82 = $ReallocAsyncCtx4 + 64 | 0; //@line 3734
   HEAP32[$82 >> 2] = $$; //@line 3735
   sp = STACKTOP; //@line 3736
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 3740
 $46 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 3741
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 3744
  $47 = $ReallocAsyncCtx6 + 4 | 0; //@line 3745
  HEAP32[$47 >> 2] = $2; //@line 3746
  $48 = $ReallocAsyncCtx6 + 8 | 0; //@line 3747
  HEAP32[$48 >> 2] = $4; //@line 3748
  $49 = $ReallocAsyncCtx6 + 12 | 0; //@line 3749
  HEAP32[$49 >> 2] = $6; //@line 3750
  $50 = $ReallocAsyncCtx6 + 16 | 0; //@line 3751
  HEAP32[$50 >> 2] = $8; //@line 3752
  $51 = $ReallocAsyncCtx6 + 20 | 0; //@line 3753
  HEAP32[$51 >> 2] = $10; //@line 3754
  $52 = $ReallocAsyncCtx6 + 24 | 0; //@line 3755
  HEAP32[$52 >> 2] = $12; //@line 3756
  $53 = $ReallocAsyncCtx6 + 28 | 0; //@line 3757
  HEAP32[$53 >> 2] = $14; //@line 3758
  $54 = $ReallocAsyncCtx6 + 32 | 0; //@line 3759
  HEAP32[$54 >> 2] = $16; //@line 3760
  $55 = $ReallocAsyncCtx6 + 36 | 0; //@line 3761
  HEAP32[$55 >> 2] = $18; //@line 3762
  $56 = $ReallocAsyncCtx6 + 40 | 0; //@line 3763
  HEAP32[$56 >> 2] = $20; //@line 3764
  $57 = $ReallocAsyncCtx6 + 44 | 0; //@line 3765
  HEAP32[$57 >> 2] = $22; //@line 3766
  $58 = $ReallocAsyncCtx6 + 48 | 0; //@line 3767
  HEAP32[$58 >> 2] = $24; //@line 3768
  $59 = $ReallocAsyncCtx6 + 52 | 0; //@line 3769
  HEAP32[$59 >> 2] = $26; //@line 3770
  sp = STACKTOP; //@line 3771
  return;
 }
 HEAP32[___async_retval >> 2] = $46; //@line 3775
 ___async_unwind = 0; //@line 3776
 HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 3777
 $47 = $ReallocAsyncCtx6 + 4 | 0; //@line 3778
 HEAP32[$47 >> 2] = $2; //@line 3779
 $48 = $ReallocAsyncCtx6 + 8 | 0; //@line 3780
 HEAP32[$48 >> 2] = $4; //@line 3781
 $49 = $ReallocAsyncCtx6 + 12 | 0; //@line 3782
 HEAP32[$49 >> 2] = $6; //@line 3783
 $50 = $ReallocAsyncCtx6 + 16 | 0; //@line 3784
 HEAP32[$50 >> 2] = $8; //@line 3785
 $51 = $ReallocAsyncCtx6 + 20 | 0; //@line 3786
 HEAP32[$51 >> 2] = $10; //@line 3787
 $52 = $ReallocAsyncCtx6 + 24 | 0; //@line 3788
 HEAP32[$52 >> 2] = $12; //@line 3789
 $53 = $ReallocAsyncCtx6 + 28 | 0; //@line 3790
 HEAP32[$53 >> 2] = $14; //@line 3791
 $54 = $ReallocAsyncCtx6 + 32 | 0; //@line 3792
 HEAP32[$54 >> 2] = $16; //@line 3793
 $55 = $ReallocAsyncCtx6 + 36 | 0; //@line 3794
 HEAP32[$55 >> 2] = $18; //@line 3795
 $56 = $ReallocAsyncCtx6 + 40 | 0; //@line 3796
 HEAP32[$56 >> 2] = $20; //@line 3797
 $57 = $ReallocAsyncCtx6 + 44 | 0; //@line 3798
 HEAP32[$57 >> 2] = $22; //@line 3799
 $58 = $ReallocAsyncCtx6 + 48 | 0; //@line 3800
 HEAP32[$58 >> 2] = $24; //@line 3801
 $59 = $ReallocAsyncCtx6 + 52 | 0; //@line 3802
 HEAP32[$59 >> 2] = $26; //@line 3803
 sp = STACKTOP; //@line 3804
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_137($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$sroa_idx5$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $74 = 0, $8 = 0, $80 = 0, $86 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3815
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3817
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3819
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3821
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3823
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($2); //@line 3828
  return;
 }
 $11 = $2 + 1 | 0; //@line 3831
 $12 = $4 + 12 | 0; //@line 3832
 $13 = $6 + 8 | 0; //@line 3833
 $$sroa_idx5$i$i = $6 + 4 | 0; //@line 3834
 $14 = $6 + 12 | 0; //@line 3835
 $20 = (HEAPU8[$2 >> 0] | 0) << 8 | (HEAPU8[$11 >> 0] | 0); //@line 3841
 $21 = $20 & 65535; //@line 3842
 $22 = HEAP32[1675] | 0; //@line 3843
 if (!$22) {
  label = 6; //@line 3846
 } else {
  if (($20 | 0) == (HEAPU16[$22 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $22; //@line 3853
   label = 7; //@line 3854
  } else {
   label = 6; //@line 3856
  }
 }
 do {
  if ((label | 0) == 6) {
   $28 = HEAP32[1676] | 0; //@line 3861
   if ($28 | 0) {
    if (($20 | 0) == (HEAPU16[$28 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $28; //@line 3869
     label = 7; //@line 3870
     break;
    }
   }
   $74 = HEAP32[1677] | 0; //@line 3874
   if ($74 | 0) {
    if (($20 | 0) == (HEAPU16[$74 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $74; //@line 3882
     label = 7; //@line 3883
     break;
    }
   }
   $80 = HEAP32[1678] | 0; //@line 3887
   if ($80 | 0) {
    if (($20 | 0) == (HEAPU16[$80 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $80; //@line 3895
     label = 7; //@line 3896
     break;
    }
   }
   $86 = HEAP32[1679] | 0; //@line 3900
   if ($86 | 0) {
    if (($20 | 0) == (HEAPU16[$86 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $86; //@line 3908
     label = 7; //@line 3909
    }
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
   $49 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 3920
   $$ = $49 >>> 0 > 1 ? $49 : 1; //@line 3922
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 3926
   $52 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 8621) | 0; //@line 3927
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 244; //@line 3930
    $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 3931
    HEAP32[$53 >> 2] = $2; //@line 3932
    $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 3933
    HEAP32[$54 >> 2] = $6; //@line 3934
    $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 3935
    HEAP32[$55 >> 2] = $4; //@line 3936
    $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 3937
    HEAP32[$56 >> 2] = $14; //@line 3938
    $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 3939
    HEAP32[$57 >> 2] = $12; //@line 3940
    $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 3941
    HEAP32[$58 >> 2] = $$lcssa; //@line 3942
    $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 3943
    HEAP32[$59 >> 2] = $12; //@line 3944
    $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 3945
    HEAP32[$60 >> 2] = $13; //@line 3946
    $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 3947
    HEAP32[$61 >> 2] = $6; //@line 3948
    $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 3949
    HEAP32[$62 >> 2] = $$sroa_idx5$i$i; //@line 3950
    $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 3951
    HEAP32[$63 >> 2] = $4; //@line 3952
    $64 = $ReallocAsyncCtx4 + 48 | 0; //@line 3953
    HEAP32[$64 >> 2] = $6; //@line 3954
    $65 = $ReallocAsyncCtx4 + 52 | 0; //@line 3955
    HEAP32[$65 >> 2] = $8; //@line 3956
    $66 = $ReallocAsyncCtx4 + 56 | 0; //@line 3957
    HEAP32[$66 >> 2] = $11; //@line 3958
    $67 = $ReallocAsyncCtx4 + 60 | 0; //@line 3959
    HEAP16[$67 >> 1] = $21; //@line 3960
    $68 = $ReallocAsyncCtx4 + 64 | 0; //@line 3961
    HEAP32[$68 >> 2] = $$; //@line 3962
    sp = STACKTOP; //@line 3963
    return;
   }
   HEAP32[___async_retval >> 2] = $52; //@line 3967
   ___async_unwind = 0; //@line 3968
   HEAP32[$ReallocAsyncCtx4 >> 2] = 244; //@line 3969
   $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 3970
   HEAP32[$53 >> 2] = $2; //@line 3971
   $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 3972
   HEAP32[$54 >> 2] = $6; //@line 3973
   $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 3974
   HEAP32[$55 >> 2] = $4; //@line 3975
   $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 3976
   HEAP32[$56 >> 2] = $14; //@line 3977
   $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 3978
   HEAP32[$57 >> 2] = $12; //@line 3979
   $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 3980
   HEAP32[$58 >> 2] = $$lcssa; //@line 3981
   $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 3982
   HEAP32[$59 >> 2] = $12; //@line 3983
   $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 3984
   HEAP32[$60 >> 2] = $13; //@line 3985
   $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 3986
   HEAP32[$61 >> 2] = $6; //@line 3987
   $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 3988
   HEAP32[$62 >> 2] = $$sroa_idx5$i$i; //@line 3989
   $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 3990
   HEAP32[$63 >> 2] = $4; //@line 3991
   $64 = $ReallocAsyncCtx4 + 48 | 0; //@line 3992
   HEAP32[$64 >> 2] = $6; //@line 3993
   $65 = $ReallocAsyncCtx4 + 52 | 0; //@line 3994
   HEAP32[$65 >> 2] = $8; //@line 3995
   $66 = $ReallocAsyncCtx4 + 56 | 0; //@line 3996
   HEAP32[$66 >> 2] = $11; //@line 3997
   $67 = $ReallocAsyncCtx4 + 60 | 0; //@line 3998
   HEAP16[$67 >> 1] = $21; //@line 3999
   $68 = $ReallocAsyncCtx4 + 64 | 0; //@line 4000
   HEAP32[$68 >> 2] = $$; //@line 4001
   sp = STACKTOP; //@line 4002
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 4006
 $33 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($8, 0, $2, 512) | 0; //@line 4007
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 4010
  $34 = $ReallocAsyncCtx6 + 4 | 0; //@line 4011
  HEAP32[$34 >> 2] = $2; //@line 4012
  $35 = $ReallocAsyncCtx6 + 8 | 0; //@line 4013
  HEAP32[$35 >> 2] = $6; //@line 4014
  $36 = $ReallocAsyncCtx6 + 12 | 0; //@line 4015
  HEAP32[$36 >> 2] = $4; //@line 4016
  $37 = $ReallocAsyncCtx6 + 16 | 0; //@line 4017
  HEAP32[$37 >> 2] = $14; //@line 4018
  $38 = $ReallocAsyncCtx6 + 20 | 0; //@line 4019
  HEAP32[$38 >> 2] = $12; //@line 4020
  $39 = $ReallocAsyncCtx6 + 24 | 0; //@line 4021
  HEAP32[$39 >> 2] = $12; //@line 4022
  $40 = $ReallocAsyncCtx6 + 28 | 0; //@line 4023
  HEAP32[$40 >> 2] = $13; //@line 4024
  $41 = $ReallocAsyncCtx6 + 32 | 0; //@line 4025
  HEAP32[$41 >> 2] = $6; //@line 4026
  $42 = $ReallocAsyncCtx6 + 36 | 0; //@line 4027
  HEAP32[$42 >> 2] = $$sroa_idx5$i$i; //@line 4028
  $43 = $ReallocAsyncCtx6 + 40 | 0; //@line 4029
  HEAP32[$43 >> 2] = $4; //@line 4030
  $44 = $ReallocAsyncCtx6 + 44 | 0; //@line 4031
  HEAP32[$44 >> 2] = $6; //@line 4032
  $45 = $ReallocAsyncCtx6 + 48 | 0; //@line 4033
  HEAP32[$45 >> 2] = $8; //@line 4034
  $46 = $ReallocAsyncCtx6 + 52 | 0; //@line 4035
  HEAP32[$46 >> 2] = $11; //@line 4036
  sp = STACKTOP; //@line 4037
  return;
 }
 HEAP32[___async_retval >> 2] = $33; //@line 4041
 ___async_unwind = 0; //@line 4042
 HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 4043
 $34 = $ReallocAsyncCtx6 + 4 | 0; //@line 4044
 HEAP32[$34 >> 2] = $2; //@line 4045
 $35 = $ReallocAsyncCtx6 + 8 | 0; //@line 4046
 HEAP32[$35 >> 2] = $6; //@line 4047
 $36 = $ReallocAsyncCtx6 + 12 | 0; //@line 4048
 HEAP32[$36 >> 2] = $4; //@line 4049
 $37 = $ReallocAsyncCtx6 + 16 | 0; //@line 4050
 HEAP32[$37 >> 2] = $14; //@line 4051
 $38 = $ReallocAsyncCtx6 + 20 | 0; //@line 4052
 HEAP32[$38 >> 2] = $12; //@line 4053
 $39 = $ReallocAsyncCtx6 + 24 | 0; //@line 4054
 HEAP32[$39 >> 2] = $12; //@line 4055
 $40 = $ReallocAsyncCtx6 + 28 | 0; //@line 4056
 HEAP32[$40 >> 2] = $13; //@line 4057
 $41 = $ReallocAsyncCtx6 + 32 | 0; //@line 4058
 HEAP32[$41 >> 2] = $6; //@line 4059
 $42 = $ReallocAsyncCtx6 + 36 | 0; //@line 4060
 HEAP32[$42 >> 2] = $$sroa_idx5$i$i; //@line 4061
 $43 = $ReallocAsyncCtx6 + 40 | 0; //@line 4062
 HEAP32[$43 >> 2] = $4; //@line 4063
 $44 = $ReallocAsyncCtx6 + 44 | 0; //@line 4064
 HEAP32[$44 >> 2] = $6; //@line 4065
 $45 = $ReallocAsyncCtx6 + 48 | 0; //@line 4066
 HEAP32[$45 >> 2] = $8; //@line 4067
 $46 = $ReallocAsyncCtx6 + 52 | 0; //@line 4068
 HEAP32[$46 >> 2] = $11; //@line 4069
 sp = STACKTOP; //@line 4070
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_203($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17081
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17083
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17085
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17087
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17089
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17091
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17093
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17097
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17099
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17101
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17103
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17105
 $24 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 17106
 if ($24 | 0) {
  $27 = HEAP32[$24 + 8 >> 2] | 0; //@line 17110
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(44) | 0; //@line 17111
  FUNCTION_TABLE_vi[$27 & 511]($2); //@line 17112
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 167; //@line 17115
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 17116
   HEAP32[$28 >> 2] = $10; //@line 17117
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 17118
   HEAP32[$29 >> 2] = $4; //@line 17119
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 17120
   HEAP32[$30 >> 2] = $12; //@line 17121
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 17122
   HEAP32[$31 >> 2] = $16; //@line 17123
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 17124
   HEAP32[$32 >> 2] = $18; //@line 17125
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 17126
   HEAP32[$33 >> 2] = $AsyncRetVal; //@line 17127
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 17128
   HEAP32[$34 >> 2] = $20; //@line 17129
   $35 = $ReallocAsyncCtx7 + 32 | 0; //@line 17130
   HEAP32[$35 >> 2] = $22; //@line 17131
   $36 = $ReallocAsyncCtx7 + 36 | 0; //@line 17132
   HEAP32[$36 >> 2] = $6; //@line 17133
   $37 = $ReallocAsyncCtx7 + 40 | 0; //@line 17134
   HEAP32[$37 >> 2] = $8; //@line 17135
   sp = STACKTOP; //@line 17136
   return;
  }
  ___async_unwind = 0; //@line 17139
  HEAP32[$ReallocAsyncCtx7 >> 2] = 167; //@line 17140
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 17141
  HEAP32[$28 >> 2] = $10; //@line 17142
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 17143
  HEAP32[$29 >> 2] = $4; //@line 17144
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 17145
  HEAP32[$30 >> 2] = $12; //@line 17146
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 17147
  HEAP32[$31 >> 2] = $16; //@line 17148
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 17149
  HEAP32[$32 >> 2] = $18; //@line 17150
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 17151
  HEAP32[$33 >> 2] = $AsyncRetVal; //@line 17152
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 17153
  HEAP32[$34 >> 2] = $20; //@line 17154
  $35 = $ReallocAsyncCtx7 + 32 | 0; //@line 17155
  HEAP32[$35 >> 2] = $22; //@line 17156
  $36 = $ReallocAsyncCtx7 + 36 | 0; //@line 17157
  HEAP32[$36 >> 2] = $6; //@line 17158
  $37 = $ReallocAsyncCtx7 + 40 | 0; //@line 17159
  HEAP32[$37 >> 2] = $8; //@line 17160
  sp = STACKTOP; //@line 17161
  return;
 }
 $38 = ($AsyncRetVal | 0) == 0; //@line 17164
 $39 = HEAP32[$20 >> 2] | 0; //@line 17165
 if ($39 | 0) {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 17169
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 17170
  FUNCTION_TABLE_vi[$42 & 511]($18); //@line 17171
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 168; //@line 17174
   $43 = $ReallocAsyncCtx8 + 4 | 0; //@line 17175
   HEAP32[$43 >> 2] = $10; //@line 17176
   $44 = $ReallocAsyncCtx8 + 8 | 0; //@line 17177
   HEAP32[$44 >> 2] = $4; //@line 17178
   $45 = $ReallocAsyncCtx8 + 12 | 0; //@line 17179
   HEAP32[$45 >> 2] = $12; //@line 17180
   $46 = $ReallocAsyncCtx8 + 16 | 0; //@line 17181
   HEAP32[$46 >> 2] = $16; //@line 17182
   $47 = $ReallocAsyncCtx8 + 20 | 0; //@line 17183
   HEAP32[$47 >> 2] = $22; //@line 17184
   $48 = $ReallocAsyncCtx8 + 24 | 0; //@line 17185
   $$expand_i1_val = $38 & 1; //@line 17186
   HEAP8[$48 >> 0] = $$expand_i1_val; //@line 17187
   $49 = $ReallocAsyncCtx8 + 28 | 0; //@line 17188
   HEAP32[$49 >> 2] = $6; //@line 17189
   $50 = $ReallocAsyncCtx8 + 32 | 0; //@line 17190
   HEAP32[$50 >> 2] = $8; //@line 17191
   sp = STACKTOP; //@line 17192
   return;
  }
  ___async_unwind = 0; //@line 17195
  HEAP32[$ReallocAsyncCtx8 >> 2] = 168; //@line 17196
  $43 = $ReallocAsyncCtx8 + 4 | 0; //@line 17197
  HEAP32[$43 >> 2] = $10; //@line 17198
  $44 = $ReallocAsyncCtx8 + 8 | 0; //@line 17199
  HEAP32[$44 >> 2] = $4; //@line 17200
  $45 = $ReallocAsyncCtx8 + 12 | 0; //@line 17201
  HEAP32[$45 >> 2] = $12; //@line 17202
  $46 = $ReallocAsyncCtx8 + 16 | 0; //@line 17203
  HEAP32[$46 >> 2] = $16; //@line 17204
  $47 = $ReallocAsyncCtx8 + 20 | 0; //@line 17205
  HEAP32[$47 >> 2] = $22; //@line 17206
  $48 = $ReallocAsyncCtx8 + 24 | 0; //@line 17207
  $$expand_i1_val = $38 & 1; //@line 17208
  HEAP8[$48 >> 0] = $$expand_i1_val; //@line 17209
  $49 = $ReallocAsyncCtx8 + 28 | 0; //@line 17210
  HEAP32[$49 >> 2] = $6; //@line 17211
  $50 = $ReallocAsyncCtx8 + 32 | 0; //@line 17212
  HEAP32[$50 >> 2] = $8; //@line 17213
  sp = STACKTOP; //@line 17214
  return;
 }
 if ($38) {
  HEAP8[7580] = 1; //@line 17218
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 17219
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 17220
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 17223
   $67 = $ReallocAsyncCtx13 + 4 | 0; //@line 17224
   HEAP32[$67 >> 2] = $12; //@line 17225
   $68 = $ReallocAsyncCtx13 + 8 | 0; //@line 17226
   HEAP32[$68 >> 2] = $8; //@line 17227
   sp = STACKTOP; //@line 17228
   return;
  }
  ___async_unwind = 0; //@line 17231
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 17232
  $67 = $ReallocAsyncCtx13 + 4 | 0; //@line 17233
  HEAP32[$67 >> 2] = $12; //@line 17234
  $68 = $ReallocAsyncCtx13 + 8 | 0; //@line 17235
  HEAP32[$68 >> 2] = $8; //@line 17236
  sp = STACKTOP; //@line 17237
  return;
 }
 $51 = HEAP32[$22 >> 2] | 0; //@line 17240
 if ($51 | 0) {
  __ZdlPv($51); //@line 17243
 }
 $53 = HEAP32[$10 >> 2] | 0; //@line 17245
 if ($53 | 0) {
  $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 17249
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 17250
  FUNCTION_TABLE_vi[$56 & 511]($16); //@line 17251
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 169; //@line 17254
   $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 17255
   HEAP32[$57 >> 2] = $4; //@line 17256
   $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 17257
   HEAP32[$58 >> 2] = $6; //@line 17258
   $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 17259
   HEAP32[$59 >> 2] = $8; //@line 17260
   sp = STACKTOP; //@line 17261
   return;
  }
  ___async_unwind = 0; //@line 17264
  HEAP32[$ReallocAsyncCtx9 >> 2] = 169; //@line 17265
  $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 17266
  HEAP32[$57 >> 2] = $4; //@line 17267
  $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 17268
  HEAP32[$58 >> 2] = $6; //@line 17269
  $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 17270
  HEAP32[$59 >> 2] = $8; //@line 17271
  sp = STACKTOP; //@line 17272
  return;
 }
 $61 = HEAP32[$4 + 28 >> 2] | 0; //@line 17276
 if (!$61) {
  __ZdlPv($4); //@line 17279
  HEAP32[___async_retval >> 2] = -3007; //@line 17281
  return;
 }
 $64 = HEAP32[$61 + 8 >> 2] | 0; //@line 17285
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 17286
 FUNCTION_TABLE_vi[$64 & 511]($6); //@line 17287
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 17290
  $65 = $ReallocAsyncCtx10 + 4 | 0; //@line 17291
  HEAP32[$65 >> 2] = $4; //@line 17292
  $66 = $ReallocAsyncCtx10 + 8 | 0; //@line 17293
  HEAP32[$66 >> 2] = $8; //@line 17294
  sp = STACKTOP; //@line 17295
  return;
 }
 ___async_unwind = 0; //@line 17298
 HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 17299
 $65 = $ReallocAsyncCtx10 + 4 | 0; //@line 17300
 HEAP32[$65 >> 2] = $4; //@line 17301
 $66 = $ReallocAsyncCtx10 + 8 | 0; //@line 17302
 HEAP32[$66 >> 2] = $8; //@line 17303
 sp = STACKTOP; //@line 17304
 return;
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12354
 STACKTOP = STACKTOP + 32 | 0; //@line 12355
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12355
 $0 = sp; //@line 12356
 _gpio_init_out($0, 50); //@line 12357
 while (1) {
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12360
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12361
  _wait_ms(150); //@line 12362
  if (___async) {
   label = 3; //@line 12365
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 12368
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12370
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12371
  _wait_ms(150); //@line 12372
  if (___async) {
   label = 5; //@line 12375
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 12378
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12380
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12381
  _wait_ms(150); //@line 12382
  if (___async) {
   label = 7; //@line 12385
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 12388
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12390
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12391
  _wait_ms(150); //@line 12392
  if (___async) {
   label = 9; //@line 12395
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 12398
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12400
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12401
  _wait_ms(150); //@line 12402
  if (___async) {
   label = 11; //@line 12405
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 12408
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12410
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12411
  _wait_ms(150); //@line 12412
  if (___async) {
   label = 13; //@line 12415
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 12418
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12420
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12421
  _wait_ms(150); //@line 12422
  if (___async) {
   label = 15; //@line 12425
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 12428
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12430
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12431
  _wait_ms(150); //@line 12432
  if (___async) {
   label = 17; //@line 12435
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 12438
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12440
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12441
  _wait_ms(400); //@line 12442
  if (___async) {
   label = 19; //@line 12445
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 12448
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12450
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12451
  _wait_ms(400); //@line 12452
  if (___async) {
   label = 21; //@line 12455
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 12458
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12460
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12461
  _wait_ms(400); //@line 12462
  if (___async) {
   label = 23; //@line 12465
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12468
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12470
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12471
  _wait_ms(400); //@line 12472
  if (___async) {
   label = 25; //@line 12475
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12478
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12480
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12481
  _wait_ms(400); //@line 12482
  if (___async) {
   label = 27; //@line 12485
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12488
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12490
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12491
  _wait_ms(400); //@line 12492
  if (___async) {
   label = 29; //@line 12495
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12498
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12500
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12501
  _wait_ms(400); //@line 12502
  if (___async) {
   label = 31; //@line 12505
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12508
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12510
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12511
  _wait_ms(400); //@line 12512
  if (___async) {
   label = 33; //@line 12515
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12518
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 268; //@line 12522
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 12524
   sp = STACKTOP; //@line 12525
   STACKTOP = sp; //@line 12526
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 269; //@line 12530
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 12532
   sp = STACKTOP; //@line 12533
   STACKTOP = sp; //@line 12534
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 270; //@line 12538
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 12540
   sp = STACKTOP; //@line 12541
   STACKTOP = sp; //@line 12542
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 271; //@line 12546
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 12548
   sp = STACKTOP; //@line 12549
   STACKTOP = sp; //@line 12550
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 272; //@line 12554
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 12556
   sp = STACKTOP; //@line 12557
   STACKTOP = sp; //@line 12558
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 273; //@line 12562
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 12564
   sp = STACKTOP; //@line 12565
   STACKTOP = sp; //@line 12566
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 274; //@line 12570
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 12572
   sp = STACKTOP; //@line 12573
   STACKTOP = sp; //@line 12574
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 275; //@line 12578
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 12580
   sp = STACKTOP; //@line 12581
   STACKTOP = sp; //@line 12582
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 276; //@line 12586
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 12588
   sp = STACKTOP; //@line 12589
   STACKTOP = sp; //@line 12590
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 277; //@line 12594
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 12596
   sp = STACKTOP; //@line 12597
   STACKTOP = sp; //@line 12598
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 278; //@line 12602
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 12604
   sp = STACKTOP; //@line 12605
   STACKTOP = sp; //@line 12606
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 279; //@line 12610
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12612
   sp = STACKTOP; //@line 12613
   STACKTOP = sp; //@line 12614
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 280; //@line 12618
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12620
   sp = STACKTOP; //@line 12621
   STACKTOP = sp; //@line 12622
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 281; //@line 12626
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12628
   sp = STACKTOP; //@line 12629
   STACKTOP = sp; //@line 12630
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 282; //@line 12634
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12636
   sp = STACKTOP; //@line 12637
   STACKTOP = sp; //@line 12638
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 283; //@line 12642
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12644
   sp = STACKTOP; //@line 12645
   STACKTOP = sp; //@line 12646
   return;
  }
 }
}
function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $80 = 0, $85 = 0, $93 = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149; //@line 7509
   $$0106$ph = 24; //@line 7509
   label = 4; //@line 7510
   break;
  }
 case 1:
  {
   $$0105$ph = -1074; //@line 7514
   $$0106$ph = 53; //@line 7514
   label = 4; //@line 7515
   break;
  }
 case 2:
  {
   $$0105$ph = -1074; //@line 7519
   $$0106$ph = 53; //@line 7519
   label = 4; //@line 7520
   break;
  }
 default:
  {
   $$0114 = 0.0; //@line 7524
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $3 = $0 + 4 | 0; //@line 7529
   $4 = $0 + 100 | 0; //@line 7530
   do {
    $5 = HEAP32[$3 >> 2] | 0; //@line 7532
    if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $5 + 1; //@line 7537
     $12 = HEAPU8[$5 >> 0] | 0; //@line 7540
    } else {
     $12 = ___shgetc($0) | 0; //@line 7543
    }
   } while ((_isspace($12) | 0) != 0);
   L13 : do {
    switch ($12 | 0) {
    case 43:
    case 45:
     {
      $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0; //@line 7557
      $19 = HEAP32[$3 >> 2] | 0; //@line 7558
      if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $19 + 1; //@line 7563
       $$0 = HEAPU8[$19 >> 0] | 0; //@line 7566
       $$0113 = $18; //@line 7566
       break L13;
      } else {
       $$0 = ___shgetc($0) | 0; //@line 7570
       $$0113 = $18; //@line 7570
       break L13;
      }
      break;
     }
    default:
     {
      $$0 = $12; //@line 7576
      $$0113 = 1; //@line 7576
     }
    }
   } while (0);
   $$0107127 = 0; //@line 7580
   $$1128 = $$0; //@line 7580
   while (1) {
    if (($$1128 | 32 | 0) != (HEAP8[3168 + $$0107127 >> 0] | 0)) {
     $$0107$lcssa = $$0107127; //@line 7588
     $$1$lcssa = $$1128; //@line 7588
     break;
    }
    do {
     if ($$0107127 >>> 0 < 7) {
      $32 = HEAP32[$3 >> 2] | 0; //@line 7594
      if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $32 + 1; //@line 7599
       $$2 = HEAPU8[$32 >> 0] | 0; //@line 7602
       break;
      } else {
       $$2 = ___shgetc($0) | 0; //@line 7606
       break;
      }
     } else {
      $$2 = $$1128; //@line 7610
     }
    } while (0);
    $39 = $$0107127 + 1 | 0; //@line 7613
    if ($39 >>> 0 < 8) {
     $$0107127 = $39; //@line 7616
     $$1128 = $$2; //@line 7616
    } else {
     $$0107$lcssa = $39; //@line 7618
     $$1$lcssa = $$2; //@line 7618
     break;
    }
   }
   L29 : do {
    switch ($$0107$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23; //@line 7628
      break;
     }
    default:
     {
      $42 = ($2 | 0) != 0; //@line 7633
      if ($42 & $$0107$lcssa >>> 0 > 3) {
       if (($$0107$lcssa | 0) == 8) {
        break L29;
       } else {
        label = 23; //@line 7640
        break L29;
       }
      }
      L34 : do {
       if (!$$0107$lcssa) {
        $$2109125 = 0; //@line 7647
        $$3126 = $$1$lcssa; //@line 7647
        while (1) {
         if (($$3126 | 32 | 0) != (HEAP8[3951 + $$2109125 >> 0] | 0)) {
          $$3110 = $$2109125; //@line 7655
          $$5 = $$3126; //@line 7655
          break L34;
         }
         do {
          if ($$2109125 >>> 0 < 2) {
           $63 = HEAP32[$3 >> 2] | 0; //@line 7661
           if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
            HEAP32[$3 >> 2] = $63 + 1; //@line 7666
            $$4 = HEAPU8[$63 >> 0] | 0; //@line 7669
            break;
           } else {
            $$4 = ___shgetc($0) | 0; //@line 7673
            break;
           }
          } else {
           $$4 = $$3126; //@line 7677
          }
         } while (0);
         $70 = $$2109125 + 1 | 0; //@line 7680
         if ($70 >>> 0 < 3) {
          $$2109125 = $70; //@line 7683
          $$3126 = $$4; //@line 7683
         } else {
          $$3110 = $70; //@line 7685
          $$5 = $$4; //@line 7685
          break;
         }
        }
       } else {
        $$3110 = $$0107$lcssa; //@line 7690
        $$5 = $$1$lcssa; //@line 7690
       }
      } while (0);
      switch ($$3110 | 0) {
      case 3:
       {
        $72 = HEAP32[$3 >> 2] | 0; //@line 7695
        if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $72 + 1; //@line 7700
         $80 = HEAPU8[$72 >> 0] | 0; //@line 7703
        } else {
         $80 = ___shgetc($0) | 0; //@line 7706
        }
        if (($80 | 0) == 40) {
         $$4111 = 1; //@line 7710
        } else {
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$0114 = nan; //@line 7715
          break L4;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7720
         $$0114 = nan; //@line 7721
         break L4;
        }
        while (1) {
         $85 = HEAP32[$3 >> 2] | 0; //@line 7725
         if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $85 + 1; //@line 7730
          $93 = HEAPU8[$85 >> 0] | 0; //@line 7733
         } else {
          $93 = ___shgetc($0) | 0; //@line 7736
         }
         if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) {
          if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) {
           break;
          }
         }
         $$4111 = $$4111 + 1 | 0; //@line 7753
        }
        if (($93 | 0) == 41) {
         $$0114 = nan; //@line 7757
         break L4;
        }
        $102 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7761
        if (!$102) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7765
        }
        if (!$42) {
         HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7769
         ___shlim($0, 0); //@line 7770
         $$0114 = 0.0; //@line 7771
         break L4;
        }
        if (!$$4111) {
         $$0114 = nan; //@line 7776
         break L4;
        } else {
         $$in = $$4111; //@line 7779
        }
        while (1) {
         $$in = $$in + -1 | 0; //@line 7782
         if (!$102) {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7786
         }
         if (!$$in) {
          $$0114 = nan; //@line 7790
          break L4;
         }
        }
        break;
       }
      case 0:
       {
        if (($$5 | 0) == 48) {
         $118 = HEAP32[$3 >> 2] | 0; //@line 7801
         if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $118 + 1; //@line 7806
          $126 = HEAPU8[$118 >> 0] | 0; //@line 7809
         } else {
          $126 = ___shgetc($0) | 0; //@line 7812
         }
         if (($126 | 32 | 0) == 120) {
          $$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7818
          break L4;
         }
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$6 = 48; //@line 7824
         } else {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7828
          $$6 = 48; //@line 7829
         }
        } else {
         $$6 = $$5; //@line 7832
        }
        $$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7835
        break L4;
        break;
       }
      default:
       {
        if (HEAP32[$4 >> 2] | 0) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7845
        }
        HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7848
        ___shlim($0, 0); //@line 7849
        $$0114 = 0.0; //@line 7850
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $45 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7859
    if (!$45) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7863
    }
    if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
     $$1108 = $$0107$lcssa; //@line 7869
     do {
      if (!$45) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7874
      }
      $$1108 = $$1108 + -1 | 0; //@line 7876
     } while ($$1108 >>> 0 > 3);
    }
   }
   $$0114 = +($$0113 | 0) * inf; //@line 7889
  }
 } while (0);
 return +$$0114;
}
function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge4 = 0;
 $2 = $0 + 4 | 0; //@line 3211
 $3 = HEAP32[$2 >> 2] | 0; //@line 3212
 $4 = $3 & -8; //@line 3213
 $5 = $0 + $4 | 0; //@line 3214
 $6 = HEAP32[1687] | 0; //@line 3215
 $8 = $3 & 3; //@line 3217
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) {
  _abort(); //@line 3223
 }
 $11 = $5 + 4 | 0; //@line 3226
 $12 = HEAP32[$11 >> 2] | 0; //@line 3227
 if (!($12 & 1)) {
  _abort(); //@line 3231
 }
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0; //@line 3238
   return $$2 | 0; //@line 3239
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) {
   if (($4 - $1 | 0) >>> 0 <= HEAP32[1803] << 1 >>> 0) {
    $$2 = $0; //@line 3249
    return $$2 | 0; //@line 3250
   }
  }
  $$2 = 0; //@line 3253
  return $$2 | 0; //@line 3254
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0; //@line 3258
  if ($24 >>> 0 <= 15) {
   $$2 = $0; //@line 3261
   return $$2 | 0; //@line 3262
  }
  $26 = $0 + $1 | 0; //@line 3264
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3268
  HEAP32[$26 + 4 >> 2] = $24 | 3; //@line 3271
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1; //@line 3274
  _dispose_chunk($26, $24); //@line 3275
  $$2 = $0; //@line 3276
  return $$2 | 0; //@line 3277
 }
 if ((HEAP32[1689] | 0) == ($5 | 0)) {
  $37 = (HEAP32[1686] | 0) + $4 | 0; //@line 3283
  $39 = $37 - $1 | 0; //@line 3285
  $40 = $0 + $1 | 0; //@line 3286
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0; //@line 3288
   return $$2 | 0; //@line 3289
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3296
  HEAP32[$40 + 4 >> 2] = $39 | 1; //@line 3297
  HEAP32[1689] = $40; //@line 3298
  HEAP32[1686] = $39; //@line 3299
  $$2 = $0; //@line 3300
  return $$2 | 0; //@line 3301
 }
 if ((HEAP32[1688] | 0) == ($5 | 0)) {
  $49 = (HEAP32[1685] | 0) + $4 | 0; //@line 3307
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0; //@line 3310
   return $$2 | 0; //@line 3311
  }
  $51 = $49 - $1 | 0; //@line 3313
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0; //@line 3316
   $54 = $0 + $49 | 0; //@line 3317
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3321
   HEAP32[$53 + 4 >> 2] = $51 | 1; //@line 3324
   HEAP32[$54 >> 2] = $51; //@line 3325
   $60 = $54 + 4 | 0; //@line 3326
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2; //@line 3329
   $storemerge = $53; //@line 3330
   $storemerge4 = $51; //@line 3330
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2; //@line 3335
   $67 = $0 + $49 + 4 | 0; //@line 3337
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1; //@line 3340
   $storemerge = 0; //@line 3341
   $storemerge4 = 0; //@line 3341
  }
  HEAP32[1685] = $storemerge4; //@line 3343
  HEAP32[1688] = $storemerge; //@line 3344
  $$2 = $0; //@line 3345
  return $$2 | 0; //@line 3346
 }
 if ($12 & 2 | 0) {
  $$2 = 0; //@line 3351
  return $$2 | 0; //@line 3352
 }
 $73 = ($12 & -8) + $4 | 0; //@line 3355
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0; //@line 3358
  return $$2 | 0; //@line 3359
 }
 $75 = $73 - $1 | 0; //@line 3361
 $76 = $12 >>> 3; //@line 3362
 L49 : do {
  if ($12 >>> 0 < 256) {
   $79 = HEAP32[$5 + 8 >> 2] | 0; //@line 3367
   $81 = HEAP32[$5 + 12 >> 2] | 0; //@line 3369
   $83 = 6772 + ($76 << 1 << 2) | 0; //@line 3371
   if (($79 | 0) != ($83 | 0)) {
    if ($6 >>> 0 > $79 >>> 0) {
     _abort(); //@line 3376
    }
    if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) {
     _abort(); //@line 3383
    }
   }
   if (($81 | 0) == ($79 | 0)) {
    HEAP32[1683] = HEAP32[1683] & ~(1 << $76); //@line 3393
    break;
   }
   if (($81 | 0) == ($83 | 0)) {
    $$pre$phiZ2D = $81 + 8 | 0; //@line 3399
   } else {
    if ($6 >>> 0 > $81 >>> 0) {
     _abort(); //@line 3403
    }
    $96 = $81 + 8 | 0; //@line 3406
    if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) {
     $$pre$phiZ2D = $96; //@line 3410
    } else {
     _abort(); //@line 3412
    }
   }
   HEAP32[$79 + 12 >> 2] = $81; //@line 3417
   HEAP32[$$pre$phiZ2D >> 2] = $79; //@line 3418
  } else {
   $101 = HEAP32[$5 + 24 >> 2] | 0; //@line 3421
   $103 = HEAP32[$5 + 12 >> 2] | 0; //@line 3423
   do {
    if (($103 | 0) == ($5 | 0)) {
     $114 = $5 + 16 | 0; //@line 3427
     $115 = $114 + 4 | 0; //@line 3428
     $116 = HEAP32[$115 >> 2] | 0; //@line 3429
     if (!$116) {
      $118 = HEAP32[$114 >> 2] | 0; //@line 3432
      if (!$118) {
       $$3 = 0; //@line 3435
       break;
      } else {
       $$1272 = $118; //@line 3438
       $$1275 = $114; //@line 3438
      }
     } else {
      $$1272 = $116; //@line 3441
      $$1275 = $115; //@line 3441
     }
     while (1) {
      $120 = $$1272 + 20 | 0; //@line 3444
      $121 = HEAP32[$120 >> 2] | 0; //@line 3445
      if ($121 | 0) {
       $$1272 = $121; //@line 3448
       $$1275 = $120; //@line 3448
       continue;
      }
      $123 = $$1272 + 16 | 0; //@line 3451
      $124 = HEAP32[$123 >> 2] | 0; //@line 3452
      if (!$124) {
       break;
      } else {
       $$1272 = $124; //@line 3457
       $$1275 = $123; //@line 3457
      }
     }
     if ($6 >>> 0 > $$1275 >>> 0) {
      _abort(); //@line 3462
     } else {
      HEAP32[$$1275 >> 2] = 0; //@line 3465
      $$3 = $$1272; //@line 3466
      break;
     }
    } else {
     $106 = HEAP32[$5 + 8 >> 2] | 0; //@line 3471
     if ($6 >>> 0 > $106 >>> 0) {
      _abort(); //@line 3474
     }
     $108 = $106 + 12 | 0; //@line 3477
     if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) {
      _abort(); //@line 3481
     }
     $111 = $103 + 8 | 0; //@line 3484
     if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$108 >> 2] = $103; //@line 3488
      HEAP32[$111 >> 2] = $106; //@line 3489
      $$3 = $103; //@line 3490
      break;
     } else {
      _abort(); //@line 3493
     }
    }
   } while (0);
   if ($101 | 0) {
    $129 = HEAP32[$5 + 28 >> 2] | 0; //@line 3501
    $130 = 7036 + ($129 << 2) | 0; //@line 3502
    do {
     if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$130 >> 2] = $$3; //@line 3507
      if (!$$3) {
       HEAP32[1684] = HEAP32[1684] & ~(1 << $129); //@line 3514
       break L49;
      }
     } else {
      if ((HEAP32[1687] | 0) >>> 0 > $101 >>> 0) {
       _abort(); //@line 3521
      } else {
       HEAP32[$101 + 16 + (((HEAP32[$101 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3; //@line 3529
       if (!$$3) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $144 = HEAP32[1687] | 0; //@line 3539
    if ($144 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3542
    }
    HEAP32[$$3 + 24 >> 2] = $101; //@line 3546
    $147 = $5 + 16 | 0; //@line 3547
    $148 = HEAP32[$147 >> 2] | 0; //@line 3548
    do {
     if ($148 | 0) {
      if ($144 >>> 0 > $148 >>> 0) {
       _abort(); //@line 3554
      } else {
       HEAP32[$$3 + 16 >> 2] = $148; //@line 3558
       HEAP32[$148 + 24 >> 2] = $$3; //@line 3560
       break;
      }
     }
    } while (0);
    $154 = HEAP32[$147 + 4 >> 2] | 0; //@line 3566
    if ($154 | 0) {
     if ((HEAP32[1687] | 0) >>> 0 > $154 >>> 0) {
      _abort(); //@line 3572
     } else {
      HEAP32[$$3 + 20 >> 2] = $154; //@line 3576
      HEAP32[$154 + 24 >> 2] = $$3; //@line 3578
      break;
     }
    }
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $73 | $3 & 1 | 2; //@line 3590
  $165 = $0 + $73 + 4 | 0; //@line 3592
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1; //@line 3595
  $$2 = $0; //@line 3596
  return $$2 | 0; //@line 3597
 } else {
  $168 = $0 + $1 | 0; //@line 3599
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3603
  HEAP32[$168 + 4 >> 2] = $75 | 3; //@line 3606
  $175 = $0 + $73 + 4 | 0; //@line 3608
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1; //@line 3611
  _dispose_chunk($168, $75); //@line 3612
  $$2 = $0; //@line 3613
  return $$2 | 0; //@line 3614
 }
 return 0; //@line 3616
}
function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9447
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9447
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9448
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9449
 $4 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9449
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9450
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 9451
 $8 = $6 & 2047; //@line 9453
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0; //@line 9454
 $11 = $9 & 2047; //@line 9456
 $12 = $3 & -2147483648; //@line 9457
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0; //@line 9458
 $14 = tempRet0; //@line 9459
 L1 : do {
  if (($13 | 0) == 0 & ($14 | 0) == 0) {
   label = 3; //@line 9465
  } else {
   $18 = ___DOUBLE_BITS_563($1) | 0; //@line 9467
   $20 = tempRet0 & 2147483647; //@line 9469
   if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) {
    label = 3; //@line 9478
   } else {
    $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0; //@line 9480
    $30 = tempRet0; //@line 9481
    if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) {
     return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
    }
    if (!$8) {
     $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0; //@line 9497
     $42 = tempRet0; //@line 9498
     if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
      $$073100 = 0; //@line 9505
      $49 = $41; //@line 9505
      $50 = $42; //@line 9505
      while (1) {
       $48 = $$073100 + -1 | 0; //@line 9507
       $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0; //@line 9508
       $50 = tempRet0; //@line 9509
       if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
        $$073$lcssa = $48; //@line 9518
        break;
       } else {
        $$073100 = $48; //@line 9516
       }
      }
     } else {
      $$073$lcssa = 0; //@line 9523
     }
     $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0; //@line 9526
     $$174 = $$073$lcssa; //@line 9528
     $87 = $59; //@line 9528
     $88 = tempRet0; //@line 9528
    } else {
     $$174 = $8; //@line 9532
     $87 = $2; //@line 9532
     $88 = $3 & 1048575 | 1048576; //@line 9532
    }
    if (!$11) {
     $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0; //@line 9536
     $65 = tempRet0; //@line 9537
     if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
      $$07194 = 0; //@line 9544
      $72 = $64; //@line 9544
      $73 = $65; //@line 9544
      while (1) {
       $71 = $$07194 + -1 | 0; //@line 9546
       $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0; //@line 9547
       $73 = tempRet0; //@line 9548
       if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
        $$071$lcssa = $71; //@line 9557
        break;
       } else {
        $$07194 = $71; //@line 9555
       }
      }
     } else {
      $$071$lcssa = 0; //@line 9562
     }
     $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0; //@line 9565
     $$172$ph = $$071$lcssa; //@line 9567
     $89 = $82; //@line 9567
     $90 = tempRet0; //@line 9567
    } else {
     $$172$ph = $11; //@line 9571
     $89 = $4; //@line 9571
     $90 = $5 & 1048575 | 1048576; //@line 9571
    }
    $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0; //@line 9574
    $92 = tempRet0; //@line 9575
    $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295; //@line 9580
    L23 : do {
     if (($$174 | 0) > ($$172$ph | 0)) {
      $$27586 = $$174; //@line 9583
      $101 = $92; //@line 9583
      $156 = $97; //@line 9583
      $157 = $87; //@line 9583
      $158 = $88; //@line 9583
      $99 = $91; //@line 9583
      while (1) {
       if ($156) {
        if (($99 | 0) == 0 & ($101 | 0) == 0) {
         break;
        } else {
         $104 = $99; //@line 9592
         $105 = $101; //@line 9592
        }
       } else {
        $104 = $157; //@line 9595
        $105 = $158; //@line 9595
       }
       $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0; //@line 9597
       $107 = tempRet0; //@line 9598
       $108 = $$27586 + -1 | 0; //@line 9599
       $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0; //@line 9601
       $111 = tempRet0; //@line 9602
       $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295; //@line 9607
       if (($108 | 0) > ($$172$ph | 0)) {
        $$27586 = $108; //@line 9609
        $101 = $111; //@line 9609
        $156 = $116; //@line 9609
        $157 = $106; //@line 9609
        $158 = $107; //@line 9609
        $99 = $110; //@line 9609
       } else {
        $$275$lcssa = $108; //@line 9611
        $$lcssa = $116; //@line 9611
        $118 = $110; //@line 9611
        $120 = $111; //@line 9611
        $159 = $106; //@line 9611
        $160 = $107; //@line 9611
        break L23;
       }
      }
      $$070 = $0 * 0.0; //@line 9616
      break L1;
     } else {
      $$275$lcssa = $$174; //@line 9619
      $$lcssa = $97; //@line 9619
      $118 = $91; //@line 9619
      $120 = $92; //@line 9619
      $159 = $87; //@line 9619
      $160 = $88; //@line 9619
     }
    } while (0);
    if ($$lcssa) {
     if (($118 | 0) == 0 & ($120 | 0) == 0) {
      $$070 = $0 * 0.0; //@line 9628
      break;
     } else {
      $123 = $120; //@line 9631
      $125 = $118; //@line 9631
     }
    } else {
     $123 = $160; //@line 9634
     $125 = $159; //@line 9634
    }
    if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
     $$37683 = $$275$lcssa; //@line 9642
     $130 = $125; //@line 9642
     $131 = $123; //@line 9642
     while (1) {
      $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0; //@line 9644
      $133 = tempRet0; //@line 9645
      $134 = $$37683 + -1 | 0; //@line 9646
      if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
       $$37683 = $134; //@line 9653
       $130 = $132; //@line 9653
       $131 = $133; //@line 9653
      } else {
       $$376$lcssa = $134; //@line 9655
       $141 = $132; //@line 9655
       $142 = $133; //@line 9655
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa; //@line 9660
     $141 = $125; //@line 9660
     $142 = $123; //@line 9660
    }
    if (($$376$lcssa | 0) > 0) {
     $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0; //@line 9664
     $144 = tempRet0; //@line 9665
     $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0; //@line 9666
     $153 = $144 | tempRet0; //@line 9670
     $154 = $143 | $145; //@line 9670
    } else {
     $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0; //@line 9673
     $153 = tempRet0; //@line 9675
     $154 = $150; //@line 9675
    }
    HEAP32[tempDoublePtr >> 2] = $154; //@line 9678
    HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12; //@line 9678
    $$070 = +HEAPF64[tempDoublePtr >> 3]; //@line 9679
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1; //@line 9684
  $$070 = $27 / $27; //@line 9686
 }
 return +$$070;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_51($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18664
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18666
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18668
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18670
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18672
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18674
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18676
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18678
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18680
 HEAP32[$AsyncRetVal >> 2] = 0; //@line 18681
 HEAP32[$AsyncRetVal + 4 >> 2] = 0; //@line 18681
 HEAP32[$AsyncRetVal + 8 >> 2] = 0; //@line 18681
 HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 18681
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 18682
 $17 = $2 + 32 | 0; //@line 18684
 do {
  if (($AsyncRetVal | 0) == ($17 | 0)) {
   $51 = $AsyncRetVal; //@line 18688
   $53 = $AsyncRetVal; //@line 18688
  } else {
   $19 = $AsyncRetVal + 12 | 0; //@line 18690
   $20 = HEAP32[$19 >> 2] | 0; //@line 18691
   if ($20 | 0) {
    $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 18695
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(44) | 0; //@line 18696
    FUNCTION_TABLE_vi[$23 & 511]($AsyncRetVal); //@line 18697
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 213; //@line 18700
     $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 18701
     HEAP32[$24 >> 2] = $2; //@line 18702
     $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 18703
     HEAP32[$25 >> 2] = $4; //@line 18704
     $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 18705
     HEAP32[$26 >> 2] = $6; //@line 18706
     $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 18707
     HEAP32[$27 >> 2] = $8; //@line 18708
     $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 18709
     HEAP32[$28 >> 2] = $10; //@line 18710
     $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 18711
     HEAP32[$29 >> 2] = $12; //@line 18712
     $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 18713
     HEAP32[$30 >> 2] = $19; //@line 18714
     $31 = $ReallocAsyncCtx8 + 32 | 0; //@line 18715
     HEAP32[$31 >> 2] = $14; //@line 18716
     $32 = $ReallocAsyncCtx8 + 36 | 0; //@line 18717
     HEAP32[$32 >> 2] = $AsyncRetVal; //@line 18718
     $33 = $ReallocAsyncCtx8 + 40 | 0; //@line 18719
     HEAP32[$33 >> 2] = $17; //@line 18720
     sp = STACKTOP; //@line 18721
     return;
    }
    ___async_unwind = 0; //@line 18724
    HEAP32[$ReallocAsyncCtx8 >> 2] = 213; //@line 18725
    $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 18726
    HEAP32[$24 >> 2] = $2; //@line 18727
    $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 18728
    HEAP32[$25 >> 2] = $4; //@line 18729
    $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 18730
    HEAP32[$26 >> 2] = $6; //@line 18731
    $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 18732
    HEAP32[$27 >> 2] = $8; //@line 18733
    $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 18734
    HEAP32[$28 >> 2] = $10; //@line 18735
    $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 18736
    HEAP32[$29 >> 2] = $12; //@line 18737
    $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 18738
    HEAP32[$30 >> 2] = $19; //@line 18739
    $31 = $ReallocAsyncCtx8 + 32 | 0; //@line 18740
    HEAP32[$31 >> 2] = $14; //@line 18741
    $32 = $ReallocAsyncCtx8 + 36 | 0; //@line 18742
    HEAP32[$32 >> 2] = $AsyncRetVal; //@line 18743
    $33 = $ReallocAsyncCtx8 + 40 | 0; //@line 18744
    HEAP32[$33 >> 2] = $17; //@line 18745
    sp = STACKTOP; //@line 18746
    return;
   }
   $34 = $2 + 44 | 0; //@line 18749
   $35 = HEAP32[$34 >> 2] | 0; //@line 18750
   if (!$35) {
    HEAP32[$19 >> 2] = 0; //@line 18753
    $$pre85 = HEAP32[$14 >> 2] | 0; //@line 18754
    $51 = $$pre85; //@line 18756
    $53 = $$pre85; //@line 18756
    break;
   }
   $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 18760
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 18761
   FUNCTION_TABLE_vii[$38 & 7]($AsyncRetVal, $17); //@line 18762
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 18765
    $39 = $ReallocAsyncCtx9 + 4 | 0; //@line 18766
    HEAP32[$39 >> 2] = $34; //@line 18767
    $40 = $ReallocAsyncCtx9 + 8 | 0; //@line 18768
    HEAP32[$40 >> 2] = $19; //@line 18769
    $41 = $ReallocAsyncCtx9 + 12 | 0; //@line 18770
    HEAP32[$41 >> 2] = $14; //@line 18771
    $42 = $ReallocAsyncCtx9 + 16 | 0; //@line 18772
    HEAP32[$42 >> 2] = $10; //@line 18773
    $43 = $ReallocAsyncCtx9 + 20 | 0; //@line 18774
    HEAP32[$43 >> 2] = $8; //@line 18775
    $44 = $ReallocAsyncCtx9 + 24 | 0; //@line 18776
    HEAP32[$44 >> 2] = $12; //@line 18777
    $45 = $ReallocAsyncCtx9 + 28 | 0; //@line 18778
    HEAP32[$45 >> 2] = $4; //@line 18779
    $46 = $ReallocAsyncCtx9 + 32 | 0; //@line 18780
    HEAP32[$46 >> 2] = $6; //@line 18781
    $47 = $ReallocAsyncCtx9 + 36 | 0; //@line 18782
    HEAP32[$47 >> 2] = $2; //@line 18783
    sp = STACKTOP; //@line 18784
    return;
   }
   ___async_unwind = 0; //@line 18787
   HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 18788
   $39 = $ReallocAsyncCtx9 + 4 | 0; //@line 18789
   HEAP32[$39 >> 2] = $34; //@line 18790
   $40 = $ReallocAsyncCtx9 + 8 | 0; //@line 18791
   HEAP32[$40 >> 2] = $19; //@line 18792
   $41 = $ReallocAsyncCtx9 + 12 | 0; //@line 18793
   HEAP32[$41 >> 2] = $14; //@line 18794
   $42 = $ReallocAsyncCtx9 + 16 | 0; //@line 18795
   HEAP32[$42 >> 2] = $10; //@line 18796
   $43 = $ReallocAsyncCtx9 + 20 | 0; //@line 18797
   HEAP32[$43 >> 2] = $8; //@line 18798
   $44 = $ReallocAsyncCtx9 + 24 | 0; //@line 18799
   HEAP32[$44 >> 2] = $12; //@line 18800
   $45 = $ReallocAsyncCtx9 + 28 | 0; //@line 18801
   HEAP32[$45 >> 2] = $4; //@line 18802
   $46 = $ReallocAsyncCtx9 + 32 | 0; //@line 18803
   HEAP32[$46 >> 2] = $6; //@line 18804
   $47 = $ReallocAsyncCtx9 + 36 | 0; //@line 18805
   HEAP32[$47 >> 2] = $2; //@line 18806
   sp = STACKTOP; //@line 18807
   return;
  }
 } while (0);
 HEAP32[$51 + 16 >> 2] = HEAP32[$10 >> 2]; //@line 18813
 HEAP32[$8 + 8 >> 2] = 0; //@line 18815
 HEAP32[$8 >> 2] = 215; //@line 18816
 HEAP32[$8 + 4 >> 2] = $53; //@line 18818
 $54 = $8 + 12 | 0; //@line 18819
 HEAP32[$54 >> 2] = 724; //@line 18820
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 18821
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $8); //@line 18822
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 18825
  $55 = $ReallocAsyncCtx18 + 4 | 0; //@line 18826
  HEAP32[$55 >> 2] = $54; //@line 18827
  $56 = $ReallocAsyncCtx18 + 8 | 0; //@line 18828
  HEAP32[$56 >> 2] = $4; //@line 18829
  $57 = $ReallocAsyncCtx18 + 12 | 0; //@line 18830
  HEAP32[$57 >> 2] = $6; //@line 18831
  $58 = $ReallocAsyncCtx18 + 16 | 0; //@line 18832
  HEAP32[$58 >> 2] = $8; //@line 18833
  $59 = $ReallocAsyncCtx18 + 20 | 0; //@line 18834
  HEAP32[$59 >> 2] = $2; //@line 18835
  sp = STACKTOP; //@line 18836
  return;
 }
 ___async_unwind = 0; //@line 18839
 HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 18840
 $55 = $ReallocAsyncCtx18 + 4 | 0; //@line 18841
 HEAP32[$55 >> 2] = $54; //@line 18842
 $56 = $ReallocAsyncCtx18 + 8 | 0; //@line 18843
 HEAP32[$56 >> 2] = $4; //@line 18844
 $57 = $ReallocAsyncCtx18 + 12 | 0; //@line 18845
 HEAP32[$57 >> 2] = $6; //@line 18846
 $58 = $ReallocAsyncCtx18 + 16 | 0; //@line 18847
 HEAP32[$58 >> 2] = $8; //@line 18848
 $59 = $ReallocAsyncCtx18 + 20 | 0; //@line 18849
 HEAP32[$59 >> 2] = $2; //@line 18850
 sp = STACKTOP; //@line 18851
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_124($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2078
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2080
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2082
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2084
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2086
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2088
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2090
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2092
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2094
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2096
 $19 = $8 + 12 | 0; //@line 2097
 $20 = HEAP32[$19 >> 2] | 0; //@line 2098
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 2102
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 2103
  FUNCTION_TABLE_vii[$23 & 7]($4, $8); //@line 2104
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 92; //@line 2107
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 2108
   HEAP32[$24 >> 2] = $2; //@line 2109
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 2110
   HEAP32[$25 >> 2] = $4; //@line 2111
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 2112
   HEAP32[$26 >> 2] = $6; //@line 2113
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 2114
   HEAP32[$27 >> 2] = $19; //@line 2115
   $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 2116
   HEAP32[$28 >> 2] = $10; //@line 2117
   $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 2118
   HEAP32[$29 >> 2] = $12; //@line 2119
   $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 2120
   HEAP32[$30 >> 2] = $14; //@line 2121
   $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 2122
   HEAP32[$31 >> 2] = $16; //@line 2123
   $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 2124
   HEAP32[$32 >> 2] = $18; //@line 2125
   sp = STACKTOP; //@line 2126
   return;
  }
  ___async_unwind = 0; //@line 2129
  HEAP32[$ReallocAsyncCtx4 >> 2] = 92; //@line 2130
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 2131
  HEAP32[$24 >> 2] = $2; //@line 2132
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 2133
  HEAP32[$25 >> 2] = $4; //@line 2134
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 2135
  HEAP32[$26 >> 2] = $6; //@line 2136
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 2137
  HEAP32[$27 >> 2] = $19; //@line 2138
  $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 2139
  HEAP32[$28 >> 2] = $10; //@line 2140
  $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 2141
  HEAP32[$29 >> 2] = $12; //@line 2142
  $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 2143
  HEAP32[$30 >> 2] = $14; //@line 2144
  $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 2145
  HEAP32[$31 >> 2] = $16; //@line 2146
  $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 2147
  HEAP32[$32 >> 2] = $18; //@line 2148
  sp = STACKTOP; //@line 2149
  return;
 }
 $33 = $4 + 12 | 0; //@line 2152
 HEAP32[$33 >> 2] = 0; //@line 2153
 $34 = $18 + 12 | 0; //@line 2154
 $35 = HEAP32[$34 >> 2] | 0; //@line 2155
 if (!$35) {
  $48 = $10 + 12 | 0; //@line 2158
  HEAP32[$48 >> 2] = 0; //@line 2159
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 2160
  $49 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($12, $14, $4, $10, $16) | 0; //@line 2161
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 94; //@line 2164
   $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 2165
   HEAP32[$50 >> 2] = $48; //@line 2166
   $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 2167
   HEAP32[$51 >> 2] = $33; //@line 2168
   $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 2169
   HEAP32[$52 >> 2] = $10; //@line 2170
   $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 2171
   HEAP32[$53 >> 2] = $34; //@line 2172
   $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 2173
   HEAP32[$54 >> 2] = $4; //@line 2174
   $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 2175
   HEAP32[$55 >> 2] = $2; //@line 2176
   $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 2177
   HEAP32[$56 >> 2] = $6; //@line 2178
   sp = STACKTOP; //@line 2179
   return;
  }
  HEAP32[___async_retval >> 2] = $49; //@line 2183
  ___async_unwind = 0; //@line 2184
  HEAP32[$ReallocAsyncCtx9 >> 2] = 94; //@line 2185
  $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 2186
  HEAP32[$50 >> 2] = $48; //@line 2187
  $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 2188
  HEAP32[$51 >> 2] = $33; //@line 2189
  $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 2190
  HEAP32[$52 >> 2] = $10; //@line 2191
  $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 2192
  HEAP32[$53 >> 2] = $34; //@line 2193
  $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 2194
  HEAP32[$54 >> 2] = $4; //@line 2195
  $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 2196
  HEAP32[$55 >> 2] = $2; //@line 2197
  $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 2198
  HEAP32[$56 >> 2] = $6; //@line 2199
  sp = STACKTOP; //@line 2200
  return;
 } else {
  $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 2204
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 2205
  FUNCTION_TABLE_vii[$38 & 7]($10, $2); //@line 2206
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 93; //@line 2209
   $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 2210
   HEAP32[$39 >> 2] = $2; //@line 2211
   $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 2212
   HEAP32[$40 >> 2] = $34; //@line 2213
   $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 2214
   HEAP32[$41 >> 2] = $4; //@line 2215
   $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 2216
   HEAP32[$42 >> 2] = $33; //@line 2217
   $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 2218
   HEAP32[$43 >> 2] = $6; //@line 2219
   $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 2220
   HEAP32[$44 >> 2] = $10; //@line 2221
   $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 2222
   HEAP32[$45 >> 2] = $12; //@line 2223
   $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 2224
   HEAP32[$46 >> 2] = $14; //@line 2225
   $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 2226
   HEAP32[$47 >> 2] = $16; //@line 2227
   sp = STACKTOP; //@line 2228
   return;
  }
  ___async_unwind = 0; //@line 2231
  HEAP32[$ReallocAsyncCtx5 >> 2] = 93; //@line 2232
  $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 2233
  HEAP32[$39 >> 2] = $2; //@line 2234
  $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 2235
  HEAP32[$40 >> 2] = $34; //@line 2236
  $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 2237
  HEAP32[$41 >> 2] = $4; //@line 2238
  $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 2239
  HEAP32[$42 >> 2] = $33; //@line 2240
  $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 2241
  HEAP32[$43 >> 2] = $6; //@line 2242
  $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 2243
  HEAP32[$44 >> 2] = $10; //@line 2244
  $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 2245
  HEAP32[$45 >> 2] = $12; //@line 2246
  $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 2247
  HEAP32[$46 >> 2] = $14; //@line 2248
  $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 2249
  HEAP32[$47 >> 2] = $16; //@line 2250
  sp = STACKTOP; //@line 2251
  return;
 }
}
function __ZL28nsapi_dns_query_async_deletei($0) {
 $0 = $0 | 0;
 var $$04011$lcssa = 0, $$1$off0 = 0, $$1$off0$1 = 0, $$1$off0$2 = 0, $$1$off0$3 = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $1 = 0, $105 = 0, $109 = 0, $113 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $29 = 0, $33 = 0, $36 = 0, $39 = 0, $44 = 0, $47 = 0, $5 = 0, $50 = 0, $54 = 0, $58 = 0, $62 = 0, $7 = 0, $73 = 0, $83 = 0, $93 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10062
 $1 = HEAP32[1675] | 0; //@line 10063
 $2 = ($1 | 0) == 0; //@line 10064
 if ($2) {
  label = 4; //@line 10066
 } else {
  if ((HEAP32[$1 >> 2] | 0) == ($0 | 0)) {
   $$04011$lcssa = 0; //@line 10071
   $$lcssa = $1; //@line 10071
  } else {
   label = 4; //@line 10073
  }
 }
 do {
  if ((label | 0) == 4) {
   $7 = HEAP32[1676] | 0; //@line 10078
   if ($7 | 0) {
    if ((HEAP32[$7 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 1; //@line 10084
     $$lcssa = $7; //@line 10084
     break;
    }
   }
   $105 = HEAP32[1677] | 0; //@line 10088
   if ($105 | 0) {
    if ((HEAP32[$105 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 2; //@line 10094
     $$lcssa = $105; //@line 10094
     break;
    }
   }
   $109 = HEAP32[1678] | 0; //@line 10098
   if ($109 | 0) {
    if ((HEAP32[$109 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 3; //@line 10104
     $$lcssa = $109; //@line 10104
     break;
    }
   }
   $113 = HEAP32[1679] | 0; //@line 10108
   if (!$113) {
    return;
   }
   if ((HEAP32[$113 >> 2] | 0) == ($0 | 0)) {
    $$04011$lcssa = 4; //@line 10116
    $$lcssa = $113; //@line 10116
   } else {
    return;
   }
  }
 } while (0);
 $5 = $$lcssa + 8 | 0; //@line 10122
 if ($2 | ($1 | 0) == ($$lcssa | 0)) {
  $$1$off0 = 1; //@line 10126
 } else {
  if (!(HEAP32[$1 + 56 >> 2] | 0)) {
   $$1$off0 = 1; //@line 10132
  } else {
   $$1$off0 = (HEAP32[$1 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10138
  }
 }
 $16 = HEAP32[1676] | 0; //@line 10141
 if (($16 | 0) == 0 | ($16 | 0) == ($$lcssa | 0)) {
  $$1$off0$1 = $$1$off0; //@line 10146
 } else {
  if (!(HEAP32[$16 + 56 >> 2] | 0)) {
   $$1$off0$1 = $$1$off0; //@line 10152
  } else {
   $$1$off0$1 = $$1$off0 & (HEAP32[$16 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10159
  }
 }
 $73 = HEAP32[1677] | 0; //@line 10162
 if (($73 | 0) == 0 | ($73 | 0) == ($$lcssa | 0)) {
  $$1$off0$2 = $$1$off0$1; //@line 10167
 } else {
  if (!(HEAP32[$73 + 56 >> 2] | 0)) {
   $$1$off0$2 = $$1$off0$1; //@line 10173
  } else {
   $$1$off0$2 = $$1$off0$1 & (HEAP32[$73 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10180
  }
 }
 $83 = HEAP32[1678] | 0; //@line 10183
 if (($83 | 0) == 0 | ($83 | 0) == ($$lcssa | 0)) {
  $$1$off0$3 = $$1$off0$2; //@line 10188
 } else {
  if (!(HEAP32[$83 + 56 >> 2] | 0)) {
   $$1$off0$3 = $$1$off0$2; //@line 10194
  } else {
   $$1$off0$3 = $$1$off0$2 & (HEAP32[$83 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10201
  }
 }
 $93 = HEAP32[1679] | 0; //@line 10204
 if (($93 | 0) == 0 | ($93 | 0) == ($$lcssa | 0)) {
  label = 47; //@line 10209
 } else {
  if (!(HEAP32[$93 + 56 >> 2] | 0)) {
   label = 47; //@line 10215
  } else {
   if ($$1$off0$3 & (HEAP32[$93 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0)) {
    label = 8; //@line 10223
   }
  }
 }
 if ((label | 0) == 47) {
  if ($$1$off0$3) {
   label = 8; //@line 10229
  }
 }
 if ((label | 0) == 8) {
  $19 = $$lcssa + 56 | 0; //@line 10233
  $20 = HEAP32[$19 >> 2] | 0; //@line 10234
  if ($20 | 0) {
   $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10237
   __ZN6Socket5closeEv($20) | 0; //@line 10238
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 220; //@line 10241
    HEAP32[$AsyncCtx15 + 4 >> 2] = $$lcssa; //@line 10243
    HEAP32[$AsyncCtx15 + 8 >> 2] = $$04011$lcssa; //@line 10245
    HEAP32[$AsyncCtx15 + 12 >> 2] = $19; //@line 10247
    sp = STACKTOP; //@line 10248
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10251
   $25 = HEAP32[$19 >> 2] | 0; //@line 10252
   do {
    if ($25 | 0) {
     $29 = HEAP32[(HEAP32[$25 >> 2] | 0) + 4 >> 2] | 0; //@line 10258
     $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10259
     FUNCTION_TABLE_vi[$29 & 511]($25); //@line 10260
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 221; //@line 10263
      HEAP32[$AsyncCtx + 4 >> 2] = $$lcssa; //@line 10265
      HEAP32[$AsyncCtx + 8 >> 2] = $$04011$lcssa; //@line 10267
      sp = STACKTOP; //@line 10268
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10271
      break;
     }
    }
   } while (0);
   $33 = HEAP32[$$lcssa + 60 >> 2] | 0; //@line 10277
   if ($33 | 0) {
    $36 = HEAP32[$33 + 12 >> 2] | 0; //@line 10281
    do {
     if (!$36) {
      $$pre$phiZ2D = $33; //@line 10285
     } else {
      $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 10288
      $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10289
      FUNCTION_TABLE_vi[$39 & 511]($33); //@line 10290
      if (___async) {
       HEAP32[$AsyncCtx3 >> 2] = 222; //@line 10293
       HEAP32[$AsyncCtx3 + 4 >> 2] = $33; //@line 10295
       HEAP32[$AsyncCtx3 + 8 >> 2] = $$lcssa; //@line 10297
       HEAP32[$AsyncCtx3 + 12 >> 2] = $$04011$lcssa; //@line 10299
       sp = STACKTOP; //@line 10300
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10303
       $$pre$phiZ2D = $33; //@line 10304
       break;
      }
     }
    } while (0);
    __ZdlPv($$pre$phiZ2D); //@line 10309
   }
  }
 }
 $44 = HEAP32[$$lcssa + 64 >> 2] | 0; //@line 10314
 if ($44 | 0) {
  __ZdaPv($44); //@line 10317
 }
 $47 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 10320
 if ($47 | 0) {
  __ZdlPv($47); //@line 10323
 }
 $50 = HEAP32[$$lcssa + 44 >> 2] | 0; //@line 10326
 do {
  if ($50 | 0) {
   $54 = HEAP32[$50 + 8 >> 2] | 0; //@line 10332
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10333
   FUNCTION_TABLE_vi[$54 & 511]($$lcssa + 32 | 0); //@line 10334
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 223; //@line 10337
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$lcssa; //@line 10339
    HEAP32[$AsyncCtx7 + 8 >> 2] = $$04011$lcssa; //@line 10341
    sp = STACKTOP; //@line 10342
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10345
    break;
   }
  }
 } while (0);
 $58 = HEAP32[$$lcssa + 28 >> 2] | 0; //@line 10351
 do {
  if ($58 | 0) {
   $62 = HEAP32[$58 + 8 >> 2] | 0; //@line 10357
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10358
   FUNCTION_TABLE_vi[$62 & 511]($$lcssa + 16 | 0); //@line 10359
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 224; //@line 10362
    HEAP32[$AsyncCtx11 + 4 >> 2] = $$lcssa; //@line 10364
    HEAP32[$AsyncCtx11 + 8 >> 2] = $$04011$lcssa; //@line 10366
    sp = STACKTOP; //@line 10367
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10370
    break;
   }
  }
 } while (0);
 __ZdlPv($$lcssa); //@line 10375
 HEAP32[6700 + ($$04011$lcssa << 2) >> 2] = 0; //@line 10377
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv() {
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$433 = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $32 = 0, $35 = 0, $38 = 0, $41 = 0, $42 = 0, $43 = 0, $47 = 0, $48 = 0, $49 = 0, $53 = 0, $54 = 0, $55 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9040
 STACKTOP = STACKTOP + 32 | 0; //@line 9041
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9041
 $0 = sp + 16 | 0; //@line 9042
 $1 = sp; //@line 9043
 $2 = HEAP32[1675] | 0; //@line 9044
 L1 : do {
  if (!$2) {
   $$1 = 0; //@line 9048
   $$124 = 2147483647; //@line 9048
  } else {
   switch (HEAP32[$2 + 88 >> 2] | 0) {
   case 0:
    {
     $$1 = $2; //@line 9055
     $$124 = HEAP32[$2 >> 2] | 0; //@line 9055
     break L1;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9060
     return;
    }
   default:
    {
     $$1 = 0; //@line 9064
     $$124 = 2147483647; //@line 9064
     break L1;
    }
   }
  }
 } while (0);
 $7 = HEAP32[1676] | 0; //@line 9070
 L7 : do {
  if (!$7) {
   $$1$1 = $$1; //@line 9074
   $$124$1 = $$124; //@line 9074
  } else {
   switch (HEAP32[$7 + 88 >> 2] | 0) {
   case 0:
    {
     $41 = HEAP32[$7 >> 2] | 0; //@line 9080
     $42 = ($41 | 0) > ($$124 | 0); //@line 9081
     $$1$1 = $42 ? $$1 : $7; //@line 9084
     $$124$1 = $42 ? $$124 : $41; //@line 9084
     break L7;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9089
     return;
    }
   default:
    {
     $$1$1 = $$1; //@line 9093
     $$124$1 = $$124; //@line 9093
     break L7;
    }
   }
  }
 } while (0);
 $43 = HEAP32[1677] | 0; //@line 9099
 L13 : do {
  if (!$43) {
   $$1$2 = $$1$1; //@line 9103
   $$124$2 = $$124$1; //@line 9103
  } else {
   switch (HEAP32[$43 + 88 >> 2] | 0) {
   case 0:
    {
     $47 = HEAP32[$43 >> 2] | 0; //@line 9109
     $48 = ($47 | 0) > ($$124$1 | 0); //@line 9110
     $$1$2 = $48 ? $$1$1 : $43; //@line 9113
     $$124$2 = $48 ? $$124$1 : $47; //@line 9113
     break L13;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9118
     return;
    }
   default:
    {
     $$1$2 = $$1$1; //@line 9122
     $$124$2 = $$124$1; //@line 9122
     break L13;
    }
   }
  }
 } while (0);
 $49 = HEAP32[1678] | 0; //@line 9128
 L19 : do {
  if (!$49) {
   $$1$3 = $$1$2; //@line 9132
   $$124$3 = $$124$2; //@line 9132
  } else {
   switch (HEAP32[$49 + 88 >> 2] | 0) {
   case 0:
    {
     $53 = HEAP32[$49 >> 2] | 0; //@line 9138
     $54 = ($53 | 0) > ($$124$2 | 0); //@line 9139
     $$1$3 = $54 ? $$1$2 : $49; //@line 9142
     $$124$3 = $54 ? $$124$2 : $53; //@line 9142
     break L19;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9147
     return;
    }
   default:
    {
     $$1$3 = $$1$2; //@line 9151
     $$124$3 = $$124$2; //@line 9151
     break L19;
    }
   }
  }
 } while (0);
 $55 = HEAP32[1679] | 0; //@line 9157
 L25 : do {
  if (!$55) {
   label = 31; //@line 9161
  } else {
   switch (HEAP32[$55 + 88 >> 2] | 0) {
   case 0:
    {
     if ((HEAP32[$55 >> 2] | 0) > ($$124$3 | 0)) {
      label = 31; //@line 9170
      break L25;
     } else {
      $$1$433 = $55; //@line 9173
      break L25;
     }
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9179
     return;
    }
   default:
    {
     label = 31; //@line 9183
     break L25;
    }
   }
  }
 } while (0);
 if ((label | 0) == 31) {
  if (!$$1$3) {
   STACKTOP = sp; //@line 9192
   return;
  } else {
   $$1$433 = $$1$3; //@line 9194
  }
 }
 HEAP32[$$1$433 + 88 >> 2] = 1; //@line 9198
 $10 = $$1$433 + 44 | 0; //@line 9199
 $11 = HEAP32[$10 >> 2] | 0; //@line 9200
 do {
  if (!$11) {
   $21 = 0; //@line 9204
  } else {
   $15 = HEAP32[$11 + 4 >> 2] | 0; //@line 9208
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9209
   FUNCTION_TABLE_vii[$15 & 7]($0, $$1$433 + 32 | 0); //@line 9210
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 194; //@line 9213
    HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 9215
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 9217
    HEAP32[$AsyncCtx + 12 >> 2] = $$1$433; //@line 9219
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9221
    sp = STACKTOP; //@line 9222
    STACKTOP = sp; //@line 9223
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9225
    $21 = HEAP32[$10 >> 2] | 0; //@line 9227
    break;
   }
  }
 } while (0);
 $20 = $0 + 12 | 0; //@line 9232
 HEAP32[$20 >> 2] = $21; //@line 9233
 $22 = HEAP32[$$1$433 >> 2] | 0; //@line 9234
 HEAP32[$1 + 8 >> 2] = 0; //@line 9236
 HEAP32[$1 >> 2] = 195; //@line 9237
 HEAP32[$1 + 4 >> 2] = $22; //@line 9239
 $24 = $1 + 12 | 0; //@line 9240
 HEAP32[$24 >> 2] = 724; //@line 9241
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9242
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, 0, $1) | 0; //@line 9243
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 196; //@line 9246
  HEAP32[$AsyncCtx10 + 4 >> 2] = $24; //@line 9248
  HEAP32[$AsyncCtx10 + 8 >> 2] = $20; //@line 9250
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 9252
  HEAP32[$AsyncCtx10 + 16 >> 2] = $0; //@line 9254
  sp = STACKTOP; //@line 9255
  STACKTOP = sp; //@line 9256
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 9258
 $29 = HEAP32[$24 >> 2] | 0; //@line 9259
 do {
  if ($29 | 0) {
   $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 9264
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9265
   FUNCTION_TABLE_vi[$32 & 511]($1); //@line 9266
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 197; //@line 9269
    HEAP32[$AsyncCtx3 + 4 >> 2] = $20; //@line 9271
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 9273
    sp = STACKTOP; //@line 9274
    STACKTOP = sp; //@line 9275
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9277
    break;
   }
  }
 } while (0);
 $35 = HEAP32[$20 >> 2] | 0; //@line 9282
 if (!$35) {
  STACKTOP = sp; //@line 9285
  return;
 }
 $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 9288
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9289
 FUNCTION_TABLE_vi[$38 & 511]($0); //@line 9290
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 198; //@line 9293
  sp = STACKTOP; //@line 9294
  STACKTOP = sp; //@line 9295
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9297
 STACKTOP = sp; //@line 9298
 return;
}
function __ZN6Socket4openEP12NetworkStack($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$i$i = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $71 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4092
 STACKTOP = STACKTOP + 32 | 0; //@line 4093
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4093
 $2 = sp + 16 | 0; //@line 4094
 $3 = sp; //@line 4095
 $4 = $0 + 4 | 0; //@line 4096
 if (($1 | 0) == 0 | (HEAP32[$4 >> 2] | 0) != 0) {
  $$1 = -3003; //@line 4102
  STACKTOP = sp; //@line 4103
  return $$1 | 0; //@line 4103
 }
 HEAP32[$4 >> 2] = $1; //@line 4105
 $10 = HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] | 0; //@line 4108
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 4111
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 4112
 $14 = FUNCTION_TABLE_ii[$13 & 31]($0) | 0; //@line 4113
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 118; //@line 4116
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 4118
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4120
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 4122
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 4124
  HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 4126
  HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 4128
  HEAP32[$AsyncCtx + 28 >> 2] = $10; //@line 4130
  sp = STACKTOP; //@line 4131
  STACKTOP = sp; //@line 4132
  return 0; //@line 4132
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4134
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4135
 $22 = FUNCTION_TABLE_iiii[$10 & 31]($1, $2, $14) | 0; //@line 4136
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 119; //@line 4139
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 4141
  HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 4143
  HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 4145
  HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 4147
  HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 4149
  sp = STACKTOP; //@line 4150
  STACKTOP = sp; //@line 4151
  return 0; //@line 4151
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4153
 do {
  if (!$22) {
   $30 = $0 + 8 | 0; //@line 4158
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 4159
   $31 = $3 + 12 | 0; //@line 4160
   HEAP32[$3 >> 2] = 12; //@line 4161
   HEAP32[$3 + 4 >> 2] = 1; //@line 4163
   HEAP32[$3 + 8 >> 2] = $0; //@line 4165
   HEAP32[$31 >> 2] = 572; //@line 4166
   $32 = $0 + 16 | 0; //@line 4167
   do {
    if (($32 | 0) == ($3 | 0)) {
     $60 = 572; //@line 4171
     label = 16; //@line 4172
    } else {
     $34 = $0 + 28 | 0; //@line 4174
     $35 = HEAP32[$34 >> 2] | 0; //@line 4175
     if (!$35) {
      $48 = 572; //@line 4178
     } else {
      $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 4181
      $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4182
      FUNCTION_TABLE_vi[$38 & 511]($32); //@line 4183
      if (___async) {
       HEAP32[$AsyncCtx5 >> 2] = 120; //@line 4186
       HEAP32[$AsyncCtx5 + 4 >> 2] = $31; //@line 4188
       HEAP32[$AsyncCtx5 + 8 >> 2] = $34; //@line 4190
       HEAP32[$AsyncCtx5 + 12 >> 2] = $32; //@line 4192
       HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 4194
       HEAP32[$AsyncCtx5 + 20 >> 2] = $4; //@line 4196
       HEAP32[$AsyncCtx5 + 24 >> 2] = $30; //@line 4198
       HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 4200
       sp = STACKTOP; //@line 4201
       STACKTOP = sp; //@line 4202
       return 0; //@line 4202
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 4204
      $$pre = HEAP32[$31 >> 2] | 0; //@line 4205
      if (!$$pre) {
       HEAP32[$34 >> 2] = 0; //@line 4208
       break;
      } else {
       $48 = $$pre; //@line 4211
      }
     }
     $49 = HEAP32[$48 + 4 >> 2] | 0; //@line 4215
     $AsyncCtx8 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4216
     FUNCTION_TABLE_vii[$49 & 7]($32, $3); //@line 4217
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 121; //@line 4220
      HEAP32[$AsyncCtx8 + 4 >> 2] = $31; //@line 4222
      HEAP32[$AsyncCtx8 + 8 >> 2] = $34; //@line 4224
      HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 4226
      HEAP32[$AsyncCtx8 + 16 >> 2] = $4; //@line 4228
      HEAP32[$AsyncCtx8 + 20 >> 2] = $30; //@line 4230
      HEAP32[$AsyncCtx8 + 24 >> 2] = $32; //@line 4232
      HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 4234
      sp = STACKTOP; //@line 4235
      STACKTOP = sp; //@line 4236
      return 0; //@line 4236
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 4238
      $$pre$i$i = HEAP32[$31 >> 2] | 0; //@line 4239
      HEAP32[$34 >> 2] = $$pre$i$i; //@line 4241
      if (!$$pre$i$i) {
       break;
      } else {
       $60 = $$pre$i$i; //@line 4246
       label = 16; //@line 4247
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 16) {
     $61 = HEAP32[$60 + 8 >> 2] | 0; //@line 4256
     $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4257
     FUNCTION_TABLE_vi[$61 & 511]($3); //@line 4258
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 122; //@line 4261
      HEAP32[$AsyncCtx11 + 4 >> 2] = $3; //@line 4263
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 4265
      HEAP32[$AsyncCtx11 + 12 >> 2] = $30; //@line 4267
      HEAP32[$AsyncCtx11 + 16 >> 2] = $32; //@line 4269
      HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 4271
      sp = STACKTOP; //@line 4272
      STACKTOP = sp; //@line 4273
      return 0; //@line 4273
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4275
      break;
     }
    }
   } while (0);
   $67 = HEAP32[$4 >> 2] | 0; //@line 4280
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 84 >> 2] | 0; //@line 4283
   $71 = HEAP32[$30 >> 2] | 0; //@line 4284
   $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4285
   FUNCTION_TABLE_viiii[$70 & 7]($67, $71, 123, $32); //@line 4286
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 124; //@line 4289
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 4291
    sp = STACKTOP; //@line 4292
    STACKTOP = sp; //@line 4293
    return 0; //@line 4293
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 4295
    $$0 = 0; //@line 4296
    break;
   }
  } else {
   $$0 = $22; //@line 4300
  }
 } while (0);
 $$1 = $$0; //@line 4303
 STACKTOP = sp; //@line 4304
 return $$1 | 0; //@line 4304
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13489
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13493
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13495
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13497
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13499
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13500
 $11 = $6 + 12 | 0; //@line 13501
 HEAP32[$11 >> 2] = $$pre$i; //@line 13502
 $12 = $4 + 12 | 0; //@line 13503
 $13 = HEAP32[$12 >> 2] | 0; //@line 13504
 $15 = $$pre$i; //@line 13506
 if (!$13) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 13508
  _mbed_assert_internal(2931, 2936, 1677); //@line 13509
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 13512
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 13513
   HEAP32[$16 >> 2] = $12; //@line 13514
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 13515
   HEAP32[$17 >> 2] = $11; //@line 13516
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 13517
   HEAP32[$18 >> 2] = $4; //@line 13518
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 13519
   HEAP32[$19 >> 2] = $8; //@line 13520
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 13521
   HEAP32[$20 >> 2] = $10; //@line 13522
   $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 13523
   HEAP32[$21 >> 2] = $6; //@line 13524
   $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 13525
   HEAP32[$22 >> 2] = $8; //@line 13526
   $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 13527
   HEAP32[$23 >> 2] = $11; //@line 13528
   sp = STACKTOP; //@line 13529
   return;
  }
  ___async_unwind = 0; //@line 13532
  HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 13533
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 13534
  HEAP32[$16 >> 2] = $12; //@line 13535
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 13536
  HEAP32[$17 >> 2] = $11; //@line 13537
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 13538
  HEAP32[$18 >> 2] = $4; //@line 13539
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 13540
  HEAP32[$19 >> 2] = $8; //@line 13541
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 13542
  HEAP32[$20 >> 2] = $10; //@line 13543
  $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 13544
  HEAP32[$21 >> 2] = $6; //@line 13545
  $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 13546
  HEAP32[$22 >> 2] = $8; //@line 13547
  $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 13548
  HEAP32[$23 >> 2] = $11; //@line 13549
  sp = STACKTOP; //@line 13550
  return;
 }
 $24 = HEAP32[$13 >> 2] | 0; //@line 13553
 if (!$15) {
  $36 = $8 + 12 | 0; //@line 13556
  HEAP32[$36 >> 2] = 0; //@line 13557
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 13558
  $37 = FUNCTION_TABLE_iiii[$24 & 31]($4, $10, $8) | 0; //@line 13559
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 13562
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 13563
   HEAP32[$38 >> 2] = $36; //@line 13564
   $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 13565
   HEAP32[$39 >> 2] = $8; //@line 13566
   $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 13567
   HEAP32[$40 >> 2] = $11; //@line 13568
   $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 13569
   HEAP32[$41 >> 2] = $6; //@line 13570
   sp = STACKTOP; //@line 13571
   return;
  }
  HEAP32[___async_retval >> 2] = $37; //@line 13575
  ___async_unwind = 0; //@line 13576
  HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 13577
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 13578
  HEAP32[$38 >> 2] = $36; //@line 13579
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 13580
  HEAP32[$39 >> 2] = $8; //@line 13581
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 13582
  HEAP32[$40 >> 2] = $11; //@line 13583
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 13584
  HEAP32[$41 >> 2] = $6; //@line 13585
  sp = STACKTOP; //@line 13586
  return;
 } else {
  $27 = HEAP32[$15 + 4 >> 2] | 0; //@line 13590
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 13591
  FUNCTION_TABLE_vii[$27 & 7]($8, $6); //@line 13592
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 259; //@line 13595
   $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 13596
   HEAP32[$28 >> 2] = $11; //@line 13597
   $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 13598
   HEAP32[$29 >> 2] = $8; //@line 13599
   $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 13600
   HEAP32[$30 >> 2] = $4; //@line 13601
   $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 13602
   HEAP32[$31 >> 2] = $10; //@line 13603
   $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 13604
   HEAP32[$32 >> 2] = $24; //@line 13605
   $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 13606
   HEAP32[$33 >> 2] = $8; //@line 13607
   $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 13608
   HEAP32[$34 >> 2] = $11; //@line 13609
   $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 13610
   HEAP32[$35 >> 2] = $6; //@line 13611
   sp = STACKTOP; //@line 13612
   return;
  }
  ___async_unwind = 0; //@line 13615
  HEAP32[$ReallocAsyncCtx2 >> 2] = 259; //@line 13616
  $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 13617
  HEAP32[$28 >> 2] = $11; //@line 13618
  $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 13619
  HEAP32[$29 >> 2] = $8; //@line 13620
  $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 13621
  HEAP32[$30 >> 2] = $4; //@line 13622
  $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 13623
  HEAP32[$31 >> 2] = $10; //@line 13624
  $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 13625
  HEAP32[$32 >> 2] = $24; //@line 13626
  $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 13627
  HEAP32[$33 >> 2] = $8; //@line 13628
  $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 13629
  HEAP32[$34 >> 2] = $11; //@line 13630
  $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 13631
  HEAP32[$35 >> 2] = $6; //@line 13632
  sp = STACKTOP; //@line 13633
  return;
 }
}
function __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0100152 = 0, $$0103157 = 0, $$0104151 = 0, $$0105150 = 0, $$0136$lcssa = 0, $$0136156 = 0, $$098 = 0, $$1 = 0, $$1106 = 0, $$1137$lcssa = 0, $$1137154 = 0, $$2149 = 0, $$4 = 0, $$7 = 0, $103 = 0, $106 = 0, $111 = 0, $112 = 0, $116 = 0, $23 = 0, $30 = 0, $37 = 0, $41 = 0, $47 = 0, $48 = 0, $51 = 0, $55 = 0, $59 = 0, $62 = 0, $64 = 0, $65 = 0, $77 = 0, $85 = 0, label = 0;
 $23 = (HEAPU8[$0 + 4 >> 0] | 0) << 8 | (HEAPU8[$0 + 5 >> 0] | 0); //@line 6467
 $30 = (HEAPU8[$0 + 6 >> 0] | 0) << 8 | (HEAPU8[$0 + 7 >> 0] | 0); //@line 6474
 if (!((HEAP8[$0 + 2 >> 0] & -8) << 24 >> 24 == -128 ? (((HEAPU8[$0 >> 0] | 0) << 8 | (HEAPU8[$0 + 1 >> 0] | 0)) & 65535) << 16 >> 16 == $1 << 16 >> 16 : 0)) {
  $$098 = -1; //@line 6480
  return $$098 | 0; //@line 6481
 }
 $37 = $0 + 12 | 0; //@line 6485
 if (HEAP8[$0 + 3 >> 0] & 15) {
  $$098 = 0; //@line 6489
  return $$098 | 0; //@line 6490
 }
 if (!$23) {
  $$0136$lcssa = $37; //@line 6494
 } else {
  $$0103157 = 0; //@line 6496
  $$0136156 = $37; //@line 6496
  while (1) {
   $41 = HEAP8[$$0136156 >> 0] | 0; //@line 6498
   if (!($41 << 24 >> 24)) {
    $$1137$lcssa = $$0136156; //@line 6501
   } else {
    $$1137154 = $$0136156; //@line 6503
    $47 = $41; //@line 6503
    while (1) {
     $48 = $$1137154 + 1 + ($47 & 255) | 0; //@line 6507
     $47 = HEAP8[$48 >> 0] | 0; //@line 6508
     if (!($47 << 24 >> 24)) {
      $$1137$lcssa = $48; //@line 6511
      break;
     } else {
      $$1137154 = $48; //@line 6514
     }
    }
   }
   $51 = $$1137$lcssa + 5 | 0; //@line 6518
   $$0103157 = $$0103157 + 1 | 0; //@line 6519
   if (($$0103157 | 0) >= ($23 | 0)) {
    $$0136$lcssa = $51; //@line 6524
    break;
   } else {
    $$0136156 = $51; //@line 6522
   }
  }
 }
 if (($4 | 0) != 0 & ($30 | 0) != 0) {
  $$0100152 = $3; //@line 6533
  $$0104151 = 0; //@line 6533
  $$0105150 = 0; //@line 6533
  $$2149 = $$0136$lcssa; //@line 6533
 } else {
  $$098 = 0; //@line 6535
  return $$098 | 0; //@line 6536
 }
 while (1) {
  $55 = HEAP8[$$2149 >> 0] | 0; //@line 6540
  do {
   if (!($55 << 24 >> 24)) {
    $$4 = $$2149 + 1 | 0; //@line 6544
   } else {
    $59 = $55 & 255; //@line 6547
    $62 = $$2149; //@line 6547
    while (1) {
     if ($59 & 192 | 0) {
      label = 11; //@line 6552
      break;
     }
     $64 = $62 + 1 + $59 | 0; //@line 6556
     $65 = HEAP8[$64 >> 0] | 0; //@line 6557
     if (!($65 << 24 >> 24)) {
      label = 13; //@line 6561
      break;
     } else {
      $59 = $65 & 255; //@line 6564
      $62 = $64; //@line 6564
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 6568
     $$4 = $62 + 2 | 0; //@line 6570
     break;
    } else if ((label | 0) == 13) {
     label = 0; //@line 6574
     $$4 = $64 + 1 | 0; //@line 6576
     break;
    }
   }
  } while (0);
  $77 = ((HEAPU8[$$4 >> 0] | 0) << 8 | (HEAPU8[$$4 + 1 >> 0] | 0)) & 65535; //@line 6589
  $85 = (HEAPU8[$$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$$4 + 3 >> 0] | 0); //@line 6597
  $103 = (HEAPU8[$$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$$4 + 7 >> 0] | 0); //@line 6615
  $106 = $$4 + 10 | 0; //@line 6618
  $111 = (HEAPU8[$$4 + 8 >> 0] | 0) << 8 | (HEAPU8[$$4 + 9 >> 0] | 0); //@line 6623
  $112 = $111 & 65535; //@line 6624
  if (!$$0104151) {
   HEAP32[$2 >> 2] = $103 >>> 0 < 2147483647 ? $103 : 2147483647; //@line 6629
  }
  $116 = ($85 | 0) == 1; //@line 6632
  do {
   if ($77 << 16 >> 16 == 1 & $116 & $112 << 16 >> 16 == 4) {
    HEAP32[$$0100152 >> 2] = 1; //@line 6638
    HEAP8[$$0100152 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 6642
    HEAP8[$$0100152 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 6646
    HEAP8[$$0100152 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 6650
    HEAP8[$$0100152 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 6653
    $$1 = $$0100152 + 20 | 0; //@line 6657
    $$1106 = $$0105150 + 1 | 0; //@line 6657
    $$7 = $$4 + 14 | 0; //@line 6657
   } else {
    if ($77 << 16 >> 16 == 28 & $116 & $112 << 16 >> 16 == 16) {
     HEAP32[$$0100152 >> 2] = 2; //@line 6664
     HEAP8[$$0100152 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 6668
     HEAP8[$$0100152 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 6672
     HEAP8[$$0100152 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 6676
     HEAP8[$$0100152 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 6680
     HEAP8[$$0100152 + 8 >> 0] = HEAP8[$$4 + 14 >> 0] | 0; //@line 6684
     HEAP8[$$0100152 + 9 >> 0] = HEAP8[$$4 + 15 >> 0] | 0; //@line 6688
     HEAP8[$$0100152 + 10 >> 0] = HEAP8[$$4 + 16 >> 0] | 0; //@line 6692
     HEAP8[$$0100152 + 11 >> 0] = HEAP8[$$4 + 17 >> 0] | 0; //@line 6696
     HEAP8[$$0100152 + 12 >> 0] = HEAP8[$$4 + 18 >> 0] | 0; //@line 6700
     HEAP8[$$0100152 + 13 >> 0] = HEAP8[$$4 + 19 >> 0] | 0; //@line 6704
     HEAP8[$$0100152 + 14 >> 0] = HEAP8[$$4 + 20 >> 0] | 0; //@line 6708
     HEAP8[$$0100152 + 15 >> 0] = HEAP8[$$4 + 21 >> 0] | 0; //@line 6712
     HEAP8[$$0100152 + 16 >> 0] = HEAP8[$$4 + 22 >> 0] | 0; //@line 6716
     HEAP8[$$0100152 + 17 >> 0] = HEAP8[$$4 + 23 >> 0] | 0; //@line 6720
     HEAP8[$$0100152 + 18 >> 0] = HEAP8[$$4 + 24 >> 0] | 0; //@line 6724
     HEAP8[$$0100152 + 19 >> 0] = HEAP8[$$4 + 25 >> 0] | 0; //@line 6727
     $$1 = $$0100152 + 20 | 0; //@line 6731
     $$1106 = $$0105150 + 1 | 0; //@line 6731
     $$7 = $$4 + 26 | 0; //@line 6731
     break;
    } else {
     $$1 = $$0100152; //@line 6735
     $$1106 = $$0105150; //@line 6735
     $$7 = $106 + $111 | 0; //@line 6735
     break;
    }
   }
  } while (0);
  $$0104151 = $$0104151 + 1 | 0; //@line 6740
  if (!($$1106 >>> 0 < $4 >>> 0 & ($$0104151 | 0) < ($30 | 0))) {
   $$098 = $$1106; //@line 6747
   break;
  } else {
   $$0100152 = $$1; //@line 6745
   $$0105150 = $$1106; //@line 6745
   $$2149 = $$7; //@line 6745
  }
 }
 return $$098 | 0; //@line 6751
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_196($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15957
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15959
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15961
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15963
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15965
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15967
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15973
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15975
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15977
 $21 = (HEAP32[$0 + 24 >> 2] | 0) == 0; //@line 15978
 $22 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 15979
 if ($22 | 0) {
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 15983
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 15984
  FUNCTION_TABLE_vi[$25 & 511]($10); //@line 15985
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 168; //@line 15988
   $26 = $ReallocAsyncCtx8 + 4 | 0; //@line 15989
   HEAP32[$26 >> 2] = $2; //@line 15990
   $27 = $ReallocAsyncCtx8 + 8 | 0; //@line 15991
   HEAP32[$27 >> 2] = $4; //@line 15992
   $28 = $ReallocAsyncCtx8 + 12 | 0; //@line 15993
   HEAP32[$28 >> 2] = $6; //@line 15994
   $29 = $ReallocAsyncCtx8 + 16 | 0; //@line 15995
   HEAP32[$29 >> 2] = $8; //@line 15996
   $30 = $ReallocAsyncCtx8 + 20 | 0; //@line 15997
   HEAP32[$30 >> 2] = $16; //@line 15998
   $31 = $ReallocAsyncCtx8 + 24 | 0; //@line 15999
   $$expand_i1_val = $21 & 1; //@line 16000
   HEAP8[$31 >> 0] = $$expand_i1_val; //@line 16001
   $32 = $ReallocAsyncCtx8 + 28 | 0; //@line 16002
   HEAP32[$32 >> 2] = $18; //@line 16003
   $33 = $ReallocAsyncCtx8 + 32 | 0; //@line 16004
   HEAP32[$33 >> 2] = $20; //@line 16005
   sp = STACKTOP; //@line 16006
   return;
  }
  ___async_unwind = 0; //@line 16009
  HEAP32[$ReallocAsyncCtx8 >> 2] = 168; //@line 16010
  $26 = $ReallocAsyncCtx8 + 4 | 0; //@line 16011
  HEAP32[$26 >> 2] = $2; //@line 16012
  $27 = $ReallocAsyncCtx8 + 8 | 0; //@line 16013
  HEAP32[$27 >> 2] = $4; //@line 16014
  $28 = $ReallocAsyncCtx8 + 12 | 0; //@line 16015
  HEAP32[$28 >> 2] = $6; //@line 16016
  $29 = $ReallocAsyncCtx8 + 16 | 0; //@line 16017
  HEAP32[$29 >> 2] = $8; //@line 16018
  $30 = $ReallocAsyncCtx8 + 20 | 0; //@line 16019
  HEAP32[$30 >> 2] = $16; //@line 16020
  $31 = $ReallocAsyncCtx8 + 24 | 0; //@line 16021
  $$expand_i1_val = $21 & 1; //@line 16022
  HEAP8[$31 >> 0] = $$expand_i1_val; //@line 16023
  $32 = $ReallocAsyncCtx8 + 28 | 0; //@line 16024
  HEAP32[$32 >> 2] = $18; //@line 16025
  $33 = $ReallocAsyncCtx8 + 32 | 0; //@line 16026
  HEAP32[$33 >> 2] = $20; //@line 16027
  sp = STACKTOP; //@line 16028
  return;
 }
 if ($21) {
  HEAP8[7580] = 1; //@line 16032
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 16033
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 16034
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 16037
   $50 = $ReallocAsyncCtx13 + 4 | 0; //@line 16038
   HEAP32[$50 >> 2] = $6; //@line 16039
   $51 = $ReallocAsyncCtx13 + 8 | 0; //@line 16040
   HEAP32[$51 >> 2] = $20; //@line 16041
   sp = STACKTOP; //@line 16042
   return;
  }
  ___async_unwind = 0; //@line 16045
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 16046
  $50 = $ReallocAsyncCtx13 + 4 | 0; //@line 16047
  HEAP32[$50 >> 2] = $6; //@line 16048
  $51 = $ReallocAsyncCtx13 + 8 | 0; //@line 16049
  HEAP32[$51 >> 2] = $20; //@line 16050
  sp = STACKTOP; //@line 16051
  return;
 }
 $34 = HEAP32[$16 >> 2] | 0; //@line 16054
 if ($34 | 0) {
  __ZdlPv($34); //@line 16057
 }
 $36 = HEAP32[$2 >> 2] | 0; //@line 16059
 if ($36 | 0) {
  $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 16063
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 16064
  FUNCTION_TABLE_vi[$39 & 511]($8); //@line 16065
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 169; //@line 16068
   $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 16069
   HEAP32[$40 >> 2] = $4; //@line 16070
   $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 16071
   HEAP32[$41 >> 2] = $18; //@line 16072
   $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 16073
   HEAP32[$42 >> 2] = $20; //@line 16074
   sp = STACKTOP; //@line 16075
   return;
  }
  ___async_unwind = 0; //@line 16078
  HEAP32[$ReallocAsyncCtx9 >> 2] = 169; //@line 16079
  $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 16080
  HEAP32[$40 >> 2] = $4; //@line 16081
  $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 16082
  HEAP32[$41 >> 2] = $18; //@line 16083
  $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 16084
  HEAP32[$42 >> 2] = $20; //@line 16085
  sp = STACKTOP; //@line 16086
  return;
 }
 $44 = HEAP32[$4 + 28 >> 2] | 0; //@line 16090
 if (!$44) {
  __ZdlPv($4); //@line 16093
  HEAP32[___async_retval >> 2] = -3007; //@line 16095
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 16099
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 16100
 FUNCTION_TABLE_vi[$47 & 511]($18); //@line 16101
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 16104
  $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 16105
  HEAP32[$48 >> 2] = $4; //@line 16106
  $49 = $ReallocAsyncCtx10 + 8 | 0; //@line 16107
  HEAP32[$49 >> 2] = $20; //@line 16108
  sp = STACKTOP; //@line 16109
  return;
 }
 ___async_unwind = 0; //@line 16112
 HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 16113
 $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 16114
 HEAP32[$48 >> 2] = $4; //@line 16115
 $49 = $ReallocAsyncCtx10 + 8 | 0; //@line 16116
 HEAP32[$49 >> 2] = $20; //@line 16117
 sp = STACKTOP; //@line 16118
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_140($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4417
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4419
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4421
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4423
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4425
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4427
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4429
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 4433
  return;
 }
 $14 = $8 + 8 | 0; //@line 4437
 HEAP32[$14 >> 2] = HEAP32[$6 >> 2]; //@line 4438
 $15 = $10 + 12 | 0; //@line 4439
 HEAP32[$10 >> 2] = 12; //@line 4440
 HEAP32[$10 + 4 >> 2] = 1; //@line 4442
 HEAP32[$10 + 8 >> 2] = $8; //@line 4444
 HEAP32[$15 >> 2] = 572; //@line 4445
 $16 = $8 + 16 | 0; //@line 4446
 if (($16 | 0) == ($10 | 0)) {
  $40 = HEAP32[145] | 0; //@line 4450
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 4451
  FUNCTION_TABLE_vi[$40 & 511]($10); //@line 4452
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 122; //@line 4455
   $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 4456
   HEAP32[$41 >> 2] = $10; //@line 4457
   $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 4458
   HEAP32[$42 >> 2] = $4; //@line 4459
   $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 4460
   HEAP32[$43 >> 2] = $14; //@line 4461
   $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 4462
   HEAP32[$44 >> 2] = $16; //@line 4463
   $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 4464
   HEAP32[$45 >> 2] = $2; //@line 4465
   sp = STACKTOP; //@line 4466
   return;
  }
  ___async_unwind = 0; //@line 4469
  HEAP32[$ReallocAsyncCtx5 >> 2] = 122; //@line 4470
  $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 4471
  HEAP32[$41 >> 2] = $10; //@line 4472
  $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 4473
  HEAP32[$42 >> 2] = $4; //@line 4474
  $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 4475
  HEAP32[$43 >> 2] = $14; //@line 4476
  $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 4477
  HEAP32[$44 >> 2] = $16; //@line 4478
  $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 4479
  HEAP32[$45 >> 2] = $2; //@line 4480
  sp = STACKTOP; //@line 4481
  return;
 }
 $18 = $8 + 28 | 0; //@line 4484
 $19 = HEAP32[$18 >> 2] | 0; //@line 4485
 if (!$19) {
  $31 = HEAP32[144] | 0; //@line 4489
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 4490
  FUNCTION_TABLE_vii[$31 & 7]($16, $10); //@line 4491
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 121; //@line 4494
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 4495
   HEAP32[$32 >> 2] = $15; //@line 4496
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 4497
   HEAP32[$33 >> 2] = $18; //@line 4498
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 4499
   HEAP32[$34 >> 2] = $10; //@line 4500
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 4501
   HEAP32[$35 >> 2] = $4; //@line 4502
   $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 4503
   HEAP32[$36 >> 2] = $14; //@line 4504
   $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 4505
   HEAP32[$37 >> 2] = $16; //@line 4506
   $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 4507
   HEAP32[$38 >> 2] = $2; //@line 4508
   sp = STACKTOP; //@line 4509
   return;
  }
  ___async_unwind = 0; //@line 4512
  HEAP32[$ReallocAsyncCtx4 >> 2] = 121; //@line 4513
  $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 4514
  HEAP32[$32 >> 2] = $15; //@line 4515
  $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 4516
  HEAP32[$33 >> 2] = $18; //@line 4517
  $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 4518
  HEAP32[$34 >> 2] = $10; //@line 4519
  $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 4520
  HEAP32[$35 >> 2] = $4; //@line 4521
  $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 4522
  HEAP32[$36 >> 2] = $14; //@line 4523
  $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 4524
  HEAP32[$37 >> 2] = $16; //@line 4525
  $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 4526
  HEAP32[$38 >> 2] = $2; //@line 4527
  sp = STACKTOP; //@line 4528
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 4532
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 4533
  FUNCTION_TABLE_vi[$22 & 511]($16); //@line 4534
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 120; //@line 4537
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 4538
   HEAP32[$23 >> 2] = $15; //@line 4539
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 4540
   HEAP32[$24 >> 2] = $18; //@line 4541
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 4542
   HEAP32[$25 >> 2] = $16; //@line 4543
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 4544
   HEAP32[$26 >> 2] = $10; //@line 4545
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 4546
   HEAP32[$27 >> 2] = $4; //@line 4547
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 4548
   HEAP32[$28 >> 2] = $14; //@line 4549
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 4550
   HEAP32[$29 >> 2] = $2; //@line 4551
   sp = STACKTOP; //@line 4552
   return;
  }
  ___async_unwind = 0; //@line 4555
  HEAP32[$ReallocAsyncCtx3 >> 2] = 120; //@line 4556
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 4557
  HEAP32[$23 >> 2] = $15; //@line 4558
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 4559
  HEAP32[$24 >> 2] = $18; //@line 4560
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 4561
  HEAP32[$25 >> 2] = $16; //@line 4562
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 4563
  HEAP32[$26 >> 2] = $10; //@line 4564
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 4565
  HEAP32[$27 >> 2] = $4; //@line 4566
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 4567
  HEAP32[$28 >> 2] = $14; //@line 4568
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 4569
  HEAP32[$29 >> 2] = $2; //@line 4570
  sp = STACKTOP; //@line 4571
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $53 = 0, $58 = 0, $6 = 0, $61 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 11949
 STACKTOP = STACKTOP + 32 | 0; //@line 11950
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11950
 $3 = sp + 16 | 0; //@line 11951
 $4 = sp; //@line 11952
 $5 = $2 + 12 | 0; //@line 11953
 $6 = HEAP32[$5 >> 2] | 0; //@line 11954
 do {
  if (!$6) {
   $16 = 0; //@line 11958
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 11961
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 11962
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 11963
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 257; //@line 11966
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 11968
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11970
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 11972
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 11974
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 11976
    sp = STACKTOP; //@line 11977
    STACKTOP = sp; //@line 11978
    return 0; //@line 11978
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11980
    $16 = HEAP32[$5 >> 2] | 0; //@line 11982
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 11987
 HEAP32[$15 >> 2] = $16; //@line 11988
 $17 = $0 + 12 | 0; //@line 11989
 $18 = HEAP32[$17 >> 2] | 0; //@line 11990
 $20 = $16; //@line 11992
 do {
  if (!$18) {
   $AsyncCtx16 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11995
   _mbed_assert_internal(2931, 2936, 1677); //@line 11996
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 258; //@line 11999
    HEAP32[$AsyncCtx16 + 4 >> 2] = $17; //@line 12001
    HEAP32[$AsyncCtx16 + 8 >> 2] = $15; //@line 12003
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 12005
    HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 12007
    HEAP32[$AsyncCtx16 + 20 >> 2] = $1; //@line 12009
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 12011
    HEAP32[$AsyncCtx16 + 28 >> 2] = $3; //@line 12013
    HEAP32[$AsyncCtx16 + 32 >> 2] = $15; //@line 12015
    sp = STACKTOP; //@line 12016
    STACKTOP = sp; //@line 12017
    return 0; //@line 12017
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 12019
    $30 = HEAP32[$17 >> 2] | 0; //@line 12022
    $32 = HEAP32[$15 >> 2] | 0; //@line 12022
    break;
   }
  } else {
   $30 = $18; //@line 12026
   $32 = $20; //@line 12026
  }
 } while (0);
 $29 = HEAP32[$30 >> 2] | 0; //@line 12029
 do {
  if (!$32) {
   $44 = 0; //@line 12033
  } else {
   $34 = HEAP32[$32 + 4 >> 2] | 0; //@line 12036
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12037
   FUNCTION_TABLE_vii[$34 & 7]($3, $4); //@line 12038
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 259; //@line 12041
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 12043
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 12045
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 12047
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 12049
    HEAP32[$AsyncCtx2 + 20 >> 2] = $29; //@line 12051
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 12053
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 12055
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 12057
    sp = STACKTOP; //@line 12058
    STACKTOP = sp; //@line 12059
    return 0; //@line 12059
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12061
    $44 = HEAP32[$15 >> 2] | 0; //@line 12063
    break;
   }
  }
 } while (0);
 $43 = $3 + 12 | 0; //@line 12068
 HEAP32[$43 >> 2] = $44; //@line 12069
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12070
 $45 = FUNCTION_TABLE_iiii[$29 & 31]($0, $1, $3) | 0; //@line 12071
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 260; //@line 12074
  HEAP32[$AsyncCtx5 + 4 >> 2] = $43; //@line 12076
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 12078
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 12080
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 12082
  sp = STACKTOP; //@line 12083
  STACKTOP = sp; //@line 12084
  return 0; //@line 12084
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12086
 $50 = HEAP32[$43 >> 2] | 0; //@line 12087
 do {
  if ($50 | 0) {
   $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 12092
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12093
   FUNCTION_TABLE_vi[$53 & 511]($3); //@line 12094
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 261; //@line 12097
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 12099
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 12101
    HEAP32[$AsyncCtx9 + 12 >> 2] = $45; //@line 12103
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 12105
    sp = STACKTOP; //@line 12106
    STACKTOP = sp; //@line 12107
    return 0; //@line 12107
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12109
    break;
   }
  }
 } while (0);
 $58 = HEAP32[$15 >> 2] | 0; //@line 12114
 if (!$58) {
  STACKTOP = sp; //@line 12117
  return $45 | 0; //@line 12117
 }
 $61 = HEAP32[$58 + 8 >> 2] | 0; //@line 12120
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12121
 FUNCTION_TABLE_vi[$61 & 511]($4); //@line 12122
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 262; //@line 12125
  HEAP32[$AsyncCtx13 + 4 >> 2] = $45; //@line 12127
  sp = STACKTOP; //@line 12128
  STACKTOP = sp; //@line 12129
  return 0; //@line 12129
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12131
 STACKTOP = sp; //@line 12132
 return $45 | 0; //@line 12132
}
function __ZN13SocketAddress14set_ip_addressEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$016$i = 0, $$02537$i = 0, $$02636$i = 0, $$1$1$i = 0, $$1$2$i = 0, $$1$3$i = 0, $$1$i = 0, $2 = 0, $26 = 0, $35 = 0, $4 = 0, $45 = 0, $56 = 0, $6 = 0, $68 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4591
 STACKTOP = STACKTOP + 32 | 0; //@line 4592
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4592
 $vararg_buffer7 = sp + 24 | 0; //@line 4593
 $vararg_buffer4 = sp + 16 | 0; //@line 4594
 $vararg_buffer1 = sp + 8 | 0; //@line 4595
 $vararg_buffer = sp; //@line 4596
 $2 = sp + 28 | 0; //@line 4597
 HEAP8[$0 >> 0] = 0; //@line 4598
 L1 : do {
  if ($1 | 0) {
   $4 = HEAP8[$1 >> 0] | 0; //@line 4602
   do {
    if ($4 << 24 >> 24) {
     $$016$i = 0; //@line 4606
     $6 = $4; //@line 4606
     while (1) {
      if (!($6 << 24 >> 24 == 46 | ($6 + -48 & 255) < 10)) {
       $$02537$i = 0; //@line 4613
       $$02636$i = 0; //@line 4613
       $56 = $4; //@line 4613
       break;
      }
      $9 = $$016$i + 1 | 0; //@line 4616
      $6 = HEAP8[$1 + $9 >> 0] | 0; //@line 4618
      if (!($6 << 24 >> 24)) {
       label = 5; //@line 4621
       break;
      } else {
       $$016$i = $9; //@line 4624
      }
     }
     if ((label | 0) == 5) {
      if (($$016$i | 0) <= -1) {
       break;
      }
      if ((HEAP8[$1 + $$016$i >> 0] | 0) == 46) {
       $$02537$i = 0; //@line 4636
       $$02636$i = 0; //@line 4636
       $56 = $4; //@line 4636
      } else {
       break;
      }
     }
     do {
      if (!(($56 + -48 & 255) < 10 | ($56 + -97 & 255) < 6)) {
       switch ($56 << 24 >> 24) {
       case 58:
       case 65:
       case 66:
       case 67:
       case 68:
       case 69:
       case 70:
        {
         break;
        }
       default:
        {
         break L1;
        }
       }
      }
      $$02636$i = $$02636$i + ($56 << 24 >> 24 == 58 & 1) | 0; //@line 4659
      $$02537$i = $$02537$i + 1 | 0; //@line 4660
      $56 = HEAP8[$1 + $$02537$i >> 0] | 0; //@line 4662
     } while ($56 << 24 >> 24 != 0);
     if (($$02636$i | 0) <= 1) {
      break L1;
     }
     HEAP32[$0 + 40 >> 2] = 2; //@line 4675
     _stoip6($1, _strlen($1) | 0, $0 + 44 | 0); //@line 4678
     $$0 = 1; //@line 4679
     STACKTOP = sp; //@line 4680
     return $$0 | 0; //@line 4680
    }
   } while (0);
   HEAP32[$0 + 40 >> 2] = 1; //@line 4684
   HEAP32[$vararg_buffer >> 2] = $2; //@line 4685
   L19 : do {
    if ((_sscanf($1, 2759, $vararg_buffer) | 0) >= 1) {
     HEAP8[$0 + 44 >> 0] = HEAP32[$2 >> 2]; //@line 4693
     $$1$i = 0; //@line 4694
     L21 : while (1) {
      switch (HEAP8[$1 + $$1$i >> 0] | 0) {
      case 0:
       {
        break L19;
        break;
       }
      case 46:
       {
        break L21;
        break;
       }
      default:
       {}
      }
      $$1$i = $$1$i + 1 | 0; //@line 4711
     }
     $26 = $$1$i + 1 | 0; //@line 4713
     HEAP32[$vararg_buffer1 >> 2] = $2; //@line 4715
     if ((_sscanf($1 + $26 | 0, 2759, $vararg_buffer1) | 0) >= 1) {
      HEAP8[$0 + 45 >> 0] = HEAP32[$2 >> 2]; //@line 4722
      $$1$1$i = $26; //@line 4723
      L26 : while (1) {
       switch (HEAP8[$1 + $$1$1$i >> 0] | 0) {
       case 0:
        {
         break L19;
         break;
        }
       case 46:
        {
         break L26;
         break;
        }
       default:
        {}
       }
       $$1$1$i = $$1$1$i + 1 | 0; //@line 4740
      }
      $35 = $$1$1$i + 1 | 0; //@line 4742
      HEAP32[$vararg_buffer4 >> 2] = $2; //@line 4744
      if ((_sscanf($1 + $35 | 0, 2759, $vararg_buffer4) | 0) >= 1) {
       HEAP8[$0 + 46 >> 0] = HEAP32[$2 >> 2]; //@line 4751
       $$1$2$i = $35; //@line 4752
       L31 : while (1) {
        switch (HEAP8[$1 + $$1$2$i >> 0] | 0) {
        case 0:
         {
          break L19;
          break;
         }
        case 46:
         {
          break L31;
          break;
         }
        default:
         {}
        }
        $$1$2$i = $$1$2$i + 1 | 0; //@line 4769
       }
       $45 = $$1$2$i + 1 | 0; //@line 4771
       HEAP32[$vararg_buffer7 >> 2] = $2; //@line 4773
       if ((_sscanf($1 + $45 | 0, 2759, $vararg_buffer7) | 0) >= 1) {
        HEAP8[$0 + 47 >> 0] = HEAP32[$2 >> 2]; //@line 4780
        $$1$3$i = $45; //@line 4781
        L36 : while (1) {
         switch (HEAP8[$1 + $$1$3$i >> 0] | 0) {
         case 0:
          {
           break L19;
           break;
          }
         case 46:
          {
           break L36;
           break;
          }
         default:
          {}
         }
         $$1$3$i = $$1$3$i + 1 | 0; //@line 4798
        }
        $$0 = 1; //@line 4800
        STACKTOP = sp; //@line 4801
        return $$0 | 0; //@line 4801
       }
      }
     }
    }
   } while (0);
   $$0 = 1; //@line 4807
   STACKTOP = sp; //@line 4808
   return $$0 | 0; //@line 4808
  }
 } while (0);
 $68 = $0 + 40 | 0; //@line 4811
 HEAP32[$68 >> 2] = 0; //@line 4812
 HEAP32[$68 + 4 >> 2] = 0; //@line 4812
 HEAP32[$68 + 8 >> 2] = 0; //@line 4812
 HEAP32[$68 + 12 >> 2] = 0; //@line 4812
 HEAP32[$68 + 16 >> 2] = 0; //@line 4812
 $$0 = 0; //@line 4813
 STACKTOP = sp; //@line 4814
 return $$0 | 0; //@line 4814
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_52($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx19 = 0, sp = 0;
 sp = STACKTOP; //@line 18859
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18861
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18863
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18865
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18867
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18869
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18871
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18873
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18875
 if ($AsyncRetVal | 0) {
  __ZN9UDPSocketC2Ev($AsyncRetVal); //@line 18878
  $17 = HEAP32[$12 >> 2] | 0; //@line 18879
  $ReallocAsyncCtx19 = _emscripten_realloc_async_context(40) | 0; //@line 18880
  $18 = __ZN6Socket4openEP12NetworkStack($AsyncRetVal, $17) | 0; //@line 18881
  if (___async) {
   HEAP32[$ReallocAsyncCtx19 >> 2] = 200; //@line 18884
   $19 = $ReallocAsyncCtx19 + 4 | 0; //@line 18885
   HEAP32[$19 >> 2] = $4; //@line 18886
   $20 = $ReallocAsyncCtx19 + 8 | 0; //@line 18887
   HEAP32[$20 >> 2] = $6; //@line 18888
   $21 = $ReallocAsyncCtx19 + 12 | 0; //@line 18889
   HEAP32[$21 >> 2] = $AsyncRetVal; //@line 18890
   $22 = $ReallocAsyncCtx19 + 16 | 0; //@line 18891
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 18892
   $23 = $ReallocAsyncCtx19 + 20 | 0; //@line 18893
   HEAP32[$23 >> 2] = $8; //@line 18894
   $24 = $ReallocAsyncCtx19 + 24 | 0; //@line 18895
   HEAP32[$24 >> 2] = $10; //@line 18896
   $25 = $ReallocAsyncCtx19 + 28 | 0; //@line 18897
   HEAP32[$25 >> 2] = $12; //@line 18898
   $26 = $ReallocAsyncCtx19 + 32 | 0; //@line 18899
   HEAP32[$26 >> 2] = $AsyncRetVal; //@line 18900
   $27 = $ReallocAsyncCtx19 + 36 | 0; //@line 18901
   HEAP32[$27 >> 2] = $14; //@line 18902
   sp = STACKTOP; //@line 18903
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 18907
  ___async_unwind = 0; //@line 18908
  HEAP32[$ReallocAsyncCtx19 >> 2] = 200; //@line 18909
  $19 = $ReallocAsyncCtx19 + 4 | 0; //@line 18910
  HEAP32[$19 >> 2] = $4; //@line 18911
  $20 = $ReallocAsyncCtx19 + 8 | 0; //@line 18912
  HEAP32[$20 >> 2] = $6; //@line 18913
  $21 = $ReallocAsyncCtx19 + 12 | 0; //@line 18914
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 18915
  $22 = $ReallocAsyncCtx19 + 16 | 0; //@line 18916
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 18917
  $23 = $ReallocAsyncCtx19 + 20 | 0; //@line 18918
  HEAP32[$23 >> 2] = $8; //@line 18919
  $24 = $ReallocAsyncCtx19 + 24 | 0; //@line 18920
  HEAP32[$24 >> 2] = $10; //@line 18921
  $25 = $ReallocAsyncCtx19 + 28 | 0; //@line 18922
  HEAP32[$25 >> 2] = $12; //@line 18923
  $26 = $ReallocAsyncCtx19 + 32 | 0; //@line 18924
  HEAP32[$26 >> 2] = $AsyncRetVal; //@line 18925
  $27 = $ReallocAsyncCtx19 + 36 | 0; //@line 18926
  HEAP32[$27 >> 2] = $14; //@line 18927
  sp = STACKTOP; //@line 18928
  return;
 }
 $29 = $4 + 28 | 0; //@line 18931
 $30 = HEAP32[$29 >> 2] | 0; //@line 18932
 if (!$30) {
  $39 = $2 + 12 | 0; //@line 18935
  HEAP32[$39 >> 2] = 0; //@line 18936
  $40 = HEAP32[$4 >> 2] | 0; //@line 18937
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 18938
  __ZL28nsapi_dns_query_async_deletei($40); //@line 18939
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 18942
   $41 = $ReallocAsyncCtx15 + 4 | 0; //@line 18943
   HEAP32[$41 >> 2] = $39; //@line 18944
   $42 = $ReallocAsyncCtx15 + 8 | 0; //@line 18945
   HEAP32[$42 >> 2] = $2; //@line 18946
   sp = STACKTOP; //@line 18947
   return;
  }
  ___async_unwind = 0; //@line 18950
  HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 18951
  $41 = $ReallocAsyncCtx15 + 4 | 0; //@line 18952
  HEAP32[$41 >> 2] = $39; //@line 18953
  $42 = $ReallocAsyncCtx15 + 8 | 0; //@line 18954
  HEAP32[$42 >> 2] = $2; //@line 18955
  sp = STACKTOP; //@line 18956
  return;
 } else {
  $34 = HEAP32[$30 + 4 >> 2] | 0; //@line 18961
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 18962
  FUNCTION_TABLE_vii[$34 & 7]($2, $4 + 16 | 0); //@line 18963
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 201; //@line 18966
   $35 = $ReallocAsyncCtx + 4 | 0; //@line 18967
   HEAP32[$35 >> 2] = $29; //@line 18968
   $36 = $ReallocAsyncCtx + 8 | 0; //@line 18969
   HEAP32[$36 >> 2] = $2; //@line 18970
   $37 = $ReallocAsyncCtx + 12 | 0; //@line 18971
   HEAP32[$37 >> 2] = $4; //@line 18972
   $38 = $ReallocAsyncCtx + 16 | 0; //@line 18973
   HEAP32[$38 >> 2] = $2; //@line 18974
   sp = STACKTOP; //@line 18975
   return;
  }
  ___async_unwind = 0; //@line 18978
  HEAP32[$ReallocAsyncCtx >> 2] = 201; //@line 18979
  $35 = $ReallocAsyncCtx + 4 | 0; //@line 18980
  HEAP32[$35 >> 2] = $29; //@line 18981
  $36 = $ReallocAsyncCtx + 8 | 0; //@line 18982
  HEAP32[$36 >> 2] = $2; //@line 18983
  $37 = $ReallocAsyncCtx + 12 | 0; //@line 18984
  HEAP32[$37 >> 2] = $4; //@line 18985
  $38 = $ReallocAsyncCtx + 16 | 0; //@line 18986
  HEAP32[$38 >> 2] = $2; //@line 18987
  sp = STACKTOP; //@line 18988
  return;
 }
}
function _mbed_vtracef__async_cb_106($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $46 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 576
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 578
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 580
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 582
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 584
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 588
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 593
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 595
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 597
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 599
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 601
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 603
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 609
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 611
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 613
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 617
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 619
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 623
 HEAP32[$22 >> 2] = HEAP32[___async_retval >> 2]; //@line 628
 $50 = _snprintf($24, $26, 2626, $22) | 0; //@line 629
 $$10 = ($50 | 0) >= ($26 | 0) ? 0 : $50; //@line 631
 $53 = $24 + $$10 | 0; //@line 633
 $54 = $26 - $$10 | 0; //@line 634
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 638
   $$3169 = $53; //@line 638
   label = 4; //@line 639
  }
 } else {
  $$3147168 = $26; //@line 642
  $$3169 = $24; //@line 642
  label = 4; //@line 643
 }
 if ((label | 0) == 4) {
  $56 = $40 + -2 | 0; //@line 646
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$36 >> 2] = $8; //@line 652
    $$5156 = _snprintf($$3169, $$3147168, 2629, $36) | 0; //@line 654
    break;
   }
  case 1:
   {
    HEAP32[$46 >> 2] = $8; //@line 658
    $$5156 = _snprintf($$3169, $$3147168, 2644, $46) | 0; //@line 660
    break;
   }
  case 3:
   {
    HEAP32[$42 >> 2] = $8; //@line 664
    $$5156 = _snprintf($$3169, $$3147168, 2659, $42) | 0; //@line 666
    break;
   }
  case 7:
   {
    HEAP32[$6 >> 2] = $8; //@line 670
    $$5156 = _snprintf($$3169, $$3147168, 2674, $6) | 0; //@line 672
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 2689, $12) | 0; //@line 677
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 681
  $67 = $$3169 + $$5156$ | 0; //@line 683
  $68 = $$3147168 - $$5156$ | 0; //@line 684
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 688
   $70 = _vsnprintf($67, $68, $2, $4) | 0; //@line 689
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 68; //@line 692
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 693
    $$expand_i1_val = $16 & 1; //@line 694
    HEAP8[$71 >> 0] = $$expand_i1_val; //@line 695
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 696
    HEAP32[$72 >> 2] = $18; //@line 697
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 698
    HEAP32[$73 >> 2] = $20; //@line 699
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 700
    HEAP32[$74 >> 2] = $32; //@line 701
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 702
    HEAP32[$75 >> 2] = $34; //@line 703
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 704
    HEAP32[$76 >> 2] = $68; //@line 705
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 706
    HEAP32[$77 >> 2] = $67; //@line 707
    sp = STACKTOP; //@line 708
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 712
   ___async_unwind = 0; //@line 713
   HEAP32[$ReallocAsyncCtx10 >> 2] = 68; //@line 714
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 715
   $$expand_i1_val = $16 & 1; //@line 716
   HEAP8[$71 >> 0] = $$expand_i1_val; //@line 717
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 718
   HEAP32[$72 >> 2] = $18; //@line 719
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 720
   HEAP32[$73 >> 2] = $20; //@line 721
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 722
   HEAP32[$74 >> 2] = $32; //@line 723
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 724
   HEAP32[$75 >> 2] = $34; //@line 725
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 726
   HEAP32[$76 >> 2] = $68; //@line 727
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 728
   HEAP32[$77 >> 2] = $67; //@line 729
   sp = STACKTOP; //@line 730
   return;
  }
 }
 $79 = HEAP32[129] | 0; //@line 734
 $80 = HEAP32[122] | 0; //@line 735
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 736
 FUNCTION_TABLE_vi[$79 & 511]($80); //@line 737
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 740
  sp = STACKTOP; //@line 741
  return;
 }
 ___async_unwind = 0; //@line 744
 HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 745
 sp = STACKTOP; //@line 746
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_125($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2260
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2262
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2264
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2266
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2270
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2272
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2274
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2276
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2278
 $19 = $4 + 12 | 0; //@line 2280
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 2281
 $20 = $18 + 12 | 0; //@line 2282
 $21 = HEAP32[$20 >> 2] | 0; //@line 2283
 if (!$21) {
  $34 = $10 + 12 | 0; //@line 2286
  HEAP32[$34 >> 2] = 0; //@line 2287
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 2288
  $35 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($12, $14, $4, $10, $16) | 0; //@line 2289
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 94; //@line 2292
   $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 2293
   HEAP32[$36 >> 2] = $34; //@line 2294
   $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 2295
   HEAP32[$37 >> 2] = $19; //@line 2296
   $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 2297
   HEAP32[$38 >> 2] = $10; //@line 2298
   $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 2299
   HEAP32[$39 >> 2] = $20; //@line 2300
   $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 2301
   HEAP32[$40 >> 2] = $4; //@line 2302
   $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 2303
   HEAP32[$41 >> 2] = $2; //@line 2304
   $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 2305
   HEAP32[$42 >> 2] = $6; //@line 2306
   sp = STACKTOP; //@line 2307
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 2311
  ___async_unwind = 0; //@line 2312
  HEAP32[$ReallocAsyncCtx9 >> 2] = 94; //@line 2313
  $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 2314
  HEAP32[$36 >> 2] = $34; //@line 2315
  $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 2316
  HEAP32[$37 >> 2] = $19; //@line 2317
  $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 2318
  HEAP32[$38 >> 2] = $10; //@line 2319
  $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 2320
  HEAP32[$39 >> 2] = $20; //@line 2321
  $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 2322
  HEAP32[$40 >> 2] = $4; //@line 2323
  $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 2324
  HEAP32[$41 >> 2] = $2; //@line 2325
  $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 2326
  HEAP32[$42 >> 2] = $6; //@line 2327
  sp = STACKTOP; //@line 2328
  return;
 } else {
  $24 = HEAP32[$21 + 4 >> 2] | 0; //@line 2332
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 2333
  FUNCTION_TABLE_vii[$24 & 7]($10, $2); //@line 2334
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 93; //@line 2337
   $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 2338
   HEAP32[$25 >> 2] = $2; //@line 2339
   $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 2340
   HEAP32[$26 >> 2] = $20; //@line 2341
   $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 2342
   HEAP32[$27 >> 2] = $4; //@line 2343
   $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 2344
   HEAP32[$28 >> 2] = $19; //@line 2345
   $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 2346
   HEAP32[$29 >> 2] = $6; //@line 2347
   $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 2348
   HEAP32[$30 >> 2] = $10; //@line 2349
   $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 2350
   HEAP32[$31 >> 2] = $12; //@line 2351
   $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 2352
   HEAP32[$32 >> 2] = $14; //@line 2353
   $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 2354
   HEAP32[$33 >> 2] = $16; //@line 2355
   sp = STACKTOP; //@line 2356
   return;
  }
  ___async_unwind = 0; //@line 2359
  HEAP32[$ReallocAsyncCtx5 >> 2] = 93; //@line 2360
  $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 2361
  HEAP32[$25 >> 2] = $2; //@line 2362
  $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 2363
  HEAP32[$26 >> 2] = $20; //@line 2364
  $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 2365
  HEAP32[$27 >> 2] = $4; //@line 2366
  $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 2367
  HEAP32[$28 >> 2] = $19; //@line 2368
  $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 2369
  HEAP32[$29 >> 2] = $6; //@line 2370
  $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 2371
  HEAP32[$30 >> 2] = $10; //@line 2372
  $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 2373
  HEAP32[$31 >> 2] = $12; //@line 2374
  $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 2375
  HEAP32[$32 >> 2] = $14; //@line 2376
  $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 2377
  HEAP32[$33 >> 2] = $16; //@line 2378
  sp = STACKTOP; //@line 2379
  return;
 }
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$unpack$i = 0, $$unpack4$i = 0, $15 = 0, $16 = 0, $20 = 0, $3 = 0, $30 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $5 = 0, $50 = 0, $55 = 0, $58 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3831
 STACKTOP = STACKTOP + 32 | 0; //@line 3832
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3832
 $3 = sp + 16 | 0; //@line 3833
 $4 = sp; //@line 3834
 $5 = $2 + 12 | 0; //@line 3835
 $6 = HEAP32[$5 >> 2] | 0; //@line 3836
 do {
  if (!$6) {
   $16 = 0; //@line 3840
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 3843
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 3844
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 3845
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 111; //@line 3848
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 3850
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3852
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 3854
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 3856
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 3858
    sp = STACKTOP; //@line 3859
    STACKTOP = sp; //@line 3860
    return 0; //@line 3860
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3862
    $16 = HEAP32[$5 >> 2] | 0; //@line 3864
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 3869
 HEAP32[$15 >> 2] = $16; //@line 3870
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 3873
 $$unpack4$i = HEAP32[$0 + 4 >> 2] | 0; //@line 3875
 $20 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 3877
 if (!($$unpack4$i & 1)) {
  $36 = $$unpack$i; //@line 3883
 } else {
  $36 = HEAP32[(HEAP32[$20 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 3888
 }
 do {
  if (!$16) {
   $41 = 0; //@line 3893
  } else {
   $30 = HEAP32[$16 + 4 >> 2] | 0; //@line 3896
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 3897
   FUNCTION_TABLE_vii[$30 & 7]($3, $4); //@line 3898
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 112; //@line 3901
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 3903
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 3905
    HEAP32[$AsyncCtx2 + 12 >> 2] = $20; //@line 3907
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 3909
    HEAP32[$AsyncCtx2 + 20 >> 2] = $36; //@line 3911
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3913
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 3915
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 3917
    sp = STACKTOP; //@line 3918
    STACKTOP = sp; //@line 3919
    return 0; //@line 3919
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3921
    $41 = HEAP32[$15 >> 2] | 0; //@line 3923
    break;
   }
  }
 } while (0);
 $40 = $3 + 12 | 0; //@line 3928
 HEAP32[$40 >> 2] = $41; //@line 3929
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3930
 $42 = FUNCTION_TABLE_iiii[$36 & 31]($20, $1, $3) | 0; //@line 3931
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 113; //@line 3934
  HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 3936
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 3938
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 3940
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 3942
  sp = STACKTOP; //@line 3943
  STACKTOP = sp; //@line 3944
  return 0; //@line 3944
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3946
 $47 = HEAP32[$40 >> 2] | 0; //@line 3947
 do {
  if ($47 | 0) {
   $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 3952
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3953
   FUNCTION_TABLE_vi[$50 & 511]($3); //@line 3954
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 114; //@line 3957
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 3959
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 3961
    HEAP32[$AsyncCtx9 + 12 >> 2] = $42; //@line 3963
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 3965
    sp = STACKTOP; //@line 3966
    STACKTOP = sp; //@line 3967
    return 0; //@line 3967
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 3969
    break;
   }
  }
 } while (0);
 $55 = HEAP32[$15 >> 2] | 0; //@line 3974
 if (!$55) {
  STACKTOP = sp; //@line 3977
  return $42 | 0; //@line 3977
 }
 $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 3980
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3981
 FUNCTION_TABLE_vi[$58 & 511]($4); //@line 3982
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 115; //@line 3985
  HEAP32[$AsyncCtx13 + 4 >> 2] = $42; //@line 3987
  sp = STACKTOP; //@line 3988
  STACKTOP = sp; //@line 3989
  return 0; //@line 3989
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 3991
 STACKTOP = sp; //@line 3992
 return $42 | 0; //@line 3992
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6962
 STACKTOP = STACKTOP + 32 | 0; //@line 6963
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6963
 $5 = sp + 16 | 0; //@line 6964
 $6 = sp; //@line 6965
 $7 = $2 + 12 | 0; //@line 6966
 $8 = HEAP32[$7 >> 2] | 0; //@line 6967
 do {
  if (!$8) {
   $20 = 0; //@line 6971
  } else {
   $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 6974
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 6975
   FUNCTION_TABLE_vii[$11 & 7]($5, $2); //@line 6976
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 152; //@line 6979
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 6981
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 6983
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 6985
    HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 6987
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 6989
    HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 6991
    HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 6993
    sp = STACKTOP; //@line 6994
    STACKTOP = sp; //@line 6995
    return 0; //@line 6995
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6997
    $20 = HEAP32[$7 >> 2] | 0; //@line 6999
    break;
   }
  }
 } while (0);
 $19 = $5 + 12 | 0; //@line 7004
 HEAP32[$19 >> 2] = $20; //@line 7005
 $21 = $3 + 12 | 0; //@line 7006
 $22 = HEAP32[$21 >> 2] | 0; //@line 7007
 do {
  if (!$22) {
   $34 = 0; //@line 7011
  } else {
   $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 7014
   $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7015
   FUNCTION_TABLE_vii[$25 & 7]($6, $3); //@line 7016
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 153; //@line 7019
    HEAP32[$AsyncCtx2 + 4 >> 2] = $21; //@line 7021
    HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 7023
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 7025
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 7027
    HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 7029
    HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 7031
    HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 7033
    sp = STACKTOP; //@line 7034
    STACKTOP = sp; //@line 7035
    return 0; //@line 7035
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7037
    $34 = HEAP32[$21 >> 2] | 0; //@line 7039
    break;
   }
  }
 } while (0);
 $33 = $6 + 12 | 0; //@line 7044
 HEAP32[$33 >> 2] = $34; //@line 7045
 $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7046
 $35 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $5, 0, $6, $4) | 0; //@line 7047
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 154; //@line 7050
  HEAP32[$AsyncCtx13 + 4 >> 2] = $33; //@line 7052
  HEAP32[$AsyncCtx13 + 8 >> 2] = $19; //@line 7054
  HEAP32[$AsyncCtx13 + 12 >> 2] = $6; //@line 7056
  HEAP32[$AsyncCtx13 + 16 >> 2] = $5; //@line 7058
  sp = STACKTOP; //@line 7059
  STACKTOP = sp; //@line 7060
  return 0; //@line 7060
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7062
 $40 = HEAP32[$33 >> 2] | 0; //@line 7063
 do {
  if ($40 | 0) {
   $43 = HEAP32[$40 + 8 >> 2] | 0; //@line 7068
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7069
   FUNCTION_TABLE_vi[$43 & 511]($6); //@line 7070
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 155; //@line 7073
    HEAP32[$AsyncCtx6 + 4 >> 2] = $19; //@line 7075
    HEAP32[$AsyncCtx6 + 8 >> 2] = $35; //@line 7077
    HEAP32[$AsyncCtx6 + 12 >> 2] = $5; //@line 7079
    sp = STACKTOP; //@line 7080
    STACKTOP = sp; //@line 7081
    return 0; //@line 7081
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7083
    break;
   }
  }
 } while (0);
 $47 = HEAP32[$19 >> 2] | 0; //@line 7088
 if (!$47) {
  STACKTOP = sp; //@line 7091
  return $35 | 0; //@line 7091
 }
 $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 7094
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7095
 FUNCTION_TABLE_vi[$50 & 511]($5); //@line 7096
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 156; //@line 7099
  HEAP32[$AsyncCtx10 + 4 >> 2] = $35; //@line 7101
  sp = STACKTOP; //@line 7102
  STACKTOP = sp; //@line 7103
  return 0; //@line 7103
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7105
 STACKTOP = sp; //@line 7106
 return $35 | 0; //@line 7106
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_130($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 2585
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2589
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2591
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2593
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2595
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2597
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2599
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2601
 $16 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2602
 if ($16 | 0) {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 2606
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 2607
  FUNCTION_TABLE_vi[$19 & 511]($6); //@line 2608
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 95; //@line 2611
   $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 2612
   HEAP32[$20 >> 2] = $4; //@line 2613
   $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 2614
   HEAP32[$21 >> 2] = $8; //@line 2615
   $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 2616
   HEAP32[$22 >> 2] = $10; //@line 2617
   $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 2618
   HEAP32[$23 >> 2] = $12; //@line 2619
   $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 2620
   HEAP32[$24 >> 2] = $AsyncRetVal; //@line 2621
   $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 2622
   HEAP32[$25 >> 2] = $14; //@line 2623
   sp = STACKTOP; //@line 2624
   return;
  }
  ___async_unwind = 0; //@line 2627
  HEAP32[$ReallocAsyncCtx6 >> 2] = 95; //@line 2628
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 2629
  HEAP32[$20 >> 2] = $4; //@line 2630
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 2631
  HEAP32[$21 >> 2] = $8; //@line 2632
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 2633
  HEAP32[$22 >> 2] = $10; //@line 2634
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 2635
  HEAP32[$23 >> 2] = $12; //@line 2636
  $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 2637
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 2638
  $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 2639
  HEAP32[$25 >> 2] = $14; //@line 2640
  sp = STACKTOP; //@line 2641
  return;
 }
 $26 = HEAP32[$4 >> 2] | 0; //@line 2644
 if ($26 | 0) {
  $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 2648
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 2649
  FUNCTION_TABLE_vi[$29 & 511]($10); //@line 2650
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 96; //@line 2653
   $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 2654
   HEAP32[$30 >> 2] = $8; //@line 2655
   $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 2656
   HEAP32[$31 >> 2] = $12; //@line 2657
   $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 2658
   HEAP32[$32 >> 2] = $AsyncRetVal; //@line 2659
   $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 2660
   HEAP32[$33 >> 2] = $14; //@line 2661
   sp = STACKTOP; //@line 2662
   return;
  }
  ___async_unwind = 0; //@line 2665
  HEAP32[$ReallocAsyncCtx7 >> 2] = 96; //@line 2666
  $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 2667
  HEAP32[$30 >> 2] = $8; //@line 2668
  $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 2669
  HEAP32[$31 >> 2] = $12; //@line 2670
  $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 2671
  HEAP32[$32 >> 2] = $AsyncRetVal; //@line 2672
  $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 2673
  HEAP32[$33 >> 2] = $14; //@line 2674
  sp = STACKTOP; //@line 2675
  return;
 }
 $34 = HEAP32[$8 >> 2] | 0; //@line 2678
 if (!$34) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 2682
  return;
 }
 $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 2686
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 2687
 FUNCTION_TABLE_vi[$37 & 511]($12); //@line 2688
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 2691
  $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 2692
  HEAP32[$38 >> 2] = $12; //@line 2693
  $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 2694
  HEAP32[$39 >> 2] = $AsyncRetVal; //@line 2695
  $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 2696
  HEAP32[$40 >> 2] = $14; //@line 2697
  sp = STACKTOP; //@line 2698
  return;
 }
 ___async_unwind = 0; //@line 2701
 HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 2702
 $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 2703
 HEAP32[$38 >> 2] = $12; //@line 2704
 $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 2705
 HEAP32[$39 >> 2] = $AsyncRetVal; //@line 2706
 $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 2707
 HEAP32[$40 >> 2] = $14; //@line 2708
 sp = STACKTOP; //@line 2709
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_48($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18441
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18443
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18445
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18447
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18449
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18451
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18453
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18455
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18457
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18459
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18461
 $21 = $2 + 44 | 0; //@line 18462
 $22 = HEAP32[$21 >> 2] | 0; //@line 18463
 if ($22 | 0) {
  $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 18467
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 18468
  FUNCTION_TABLE_vii[$25 & 7]($18, $20); //@line 18469
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 18472
   $26 = $ReallocAsyncCtx9 + 4 | 0; //@line 18473
   HEAP32[$26 >> 2] = $21; //@line 18474
   $27 = $ReallocAsyncCtx9 + 8 | 0; //@line 18475
   HEAP32[$27 >> 2] = $14; //@line 18476
   $28 = $ReallocAsyncCtx9 + 12 | 0; //@line 18477
   HEAP32[$28 >> 2] = $16; //@line 18478
   $29 = $ReallocAsyncCtx9 + 16 | 0; //@line 18479
   HEAP32[$29 >> 2] = $10; //@line 18480
   $30 = $ReallocAsyncCtx9 + 20 | 0; //@line 18481
   HEAP32[$30 >> 2] = $8; //@line 18482
   $31 = $ReallocAsyncCtx9 + 24 | 0; //@line 18483
   HEAP32[$31 >> 2] = $12; //@line 18484
   $32 = $ReallocAsyncCtx9 + 28 | 0; //@line 18485
   HEAP32[$32 >> 2] = $4; //@line 18486
   $33 = $ReallocAsyncCtx9 + 32 | 0; //@line 18487
   HEAP32[$33 >> 2] = $6; //@line 18488
   $34 = $ReallocAsyncCtx9 + 36 | 0; //@line 18489
   HEAP32[$34 >> 2] = $2; //@line 18490
   sp = STACKTOP; //@line 18491
   return;
  }
  ___async_unwind = 0; //@line 18494
  HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 18495
  $26 = $ReallocAsyncCtx9 + 4 | 0; //@line 18496
  HEAP32[$26 >> 2] = $21; //@line 18497
  $27 = $ReallocAsyncCtx9 + 8 | 0; //@line 18498
  HEAP32[$27 >> 2] = $14; //@line 18499
  $28 = $ReallocAsyncCtx9 + 12 | 0; //@line 18500
  HEAP32[$28 >> 2] = $16; //@line 18501
  $29 = $ReallocAsyncCtx9 + 16 | 0; //@line 18502
  HEAP32[$29 >> 2] = $10; //@line 18503
  $30 = $ReallocAsyncCtx9 + 20 | 0; //@line 18504
  HEAP32[$30 >> 2] = $8; //@line 18505
  $31 = $ReallocAsyncCtx9 + 24 | 0; //@line 18506
  HEAP32[$31 >> 2] = $12; //@line 18507
  $32 = $ReallocAsyncCtx9 + 28 | 0; //@line 18508
  HEAP32[$32 >> 2] = $4; //@line 18509
  $33 = $ReallocAsyncCtx9 + 32 | 0; //@line 18510
  HEAP32[$33 >> 2] = $6; //@line 18511
  $34 = $ReallocAsyncCtx9 + 36 | 0; //@line 18512
  HEAP32[$34 >> 2] = $2; //@line 18513
  sp = STACKTOP; //@line 18514
  return;
 }
 HEAP32[$14 >> 2] = 0; //@line 18517
 $$pre85 = HEAP32[$16 >> 2] | 0; //@line 18518
 HEAP32[$$pre85 + 16 >> 2] = HEAP32[$10 >> 2]; //@line 18522
 HEAP32[$8 + 8 >> 2] = 0; //@line 18524
 HEAP32[$8 >> 2] = 215; //@line 18525
 HEAP32[$8 + 4 >> 2] = $$pre85; //@line 18527
 $39 = $8 + 12 | 0; //@line 18528
 HEAP32[$39 >> 2] = 724; //@line 18529
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 18530
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $8); //@line 18531
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 18534
  $40 = $ReallocAsyncCtx18 + 4 | 0; //@line 18535
  HEAP32[$40 >> 2] = $39; //@line 18536
  $41 = $ReallocAsyncCtx18 + 8 | 0; //@line 18537
  HEAP32[$41 >> 2] = $4; //@line 18538
  $42 = $ReallocAsyncCtx18 + 12 | 0; //@line 18539
  HEAP32[$42 >> 2] = $6; //@line 18540
  $43 = $ReallocAsyncCtx18 + 16 | 0; //@line 18541
  HEAP32[$43 >> 2] = $8; //@line 18542
  $44 = $ReallocAsyncCtx18 + 20 | 0; //@line 18543
  HEAP32[$44 >> 2] = $2; //@line 18544
  sp = STACKTOP; //@line 18545
  return;
 }
 ___async_unwind = 0; //@line 18548
 HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 18549
 $40 = $ReallocAsyncCtx18 + 4 | 0; //@line 18550
 HEAP32[$40 >> 2] = $39; //@line 18551
 $41 = $ReallocAsyncCtx18 + 8 | 0; //@line 18552
 HEAP32[$41 >> 2] = $4; //@line 18553
 $42 = $ReallocAsyncCtx18 + 12 | 0; //@line 18554
 HEAP32[$42 >> 2] = $6; //@line 18555
 $43 = $ReallocAsyncCtx18 + 16 | 0; //@line 18556
 HEAP32[$43 >> 2] = $8; //@line 18557
 $44 = $ReallocAsyncCtx18 + 20 | 0; //@line 18558
 HEAP32[$44 >> 2] = $2; //@line 18559
 sp = STACKTOP; //@line 18560
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$04 = 0, $11 = 0, $15 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8894
 STACKTOP = STACKTOP + 32 | 0; //@line 8895
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8895
 $3 = sp + 16 | 0; //@line 8896
 $4 = sp; //@line 8897
 $7 = $2 + 12 | 0; //@line 8900
 $8 = HEAP32[$7 >> 2] | 0; //@line 8901
 $9 = ($8 | 0) == 0; //@line 8902
 if (!(HEAP32[1671] | 0)) {
  do {
   if ($9) {
    $30 = 0; //@line 8906
   } else {
    $24 = HEAP32[$8 + 4 >> 2] | 0; //@line 8909
    $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8910
    FUNCTION_TABLE_vii[$24 & 7]($4, $2); //@line 8911
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 191; //@line 8914
     HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 8916
     HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 8918
     HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 8920
     HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 8922
     sp = STACKTOP; //@line 8923
     STACKTOP = sp; //@line 8924
     return 0; //@line 8924
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8926
     $30 = HEAP32[$7 >> 2] | 0; //@line 8928
     break;
    }
   }
  } while (0);
  $29 = $4 + 12 | 0; //@line 8933
  HEAP32[$29 >> 2] = $30; //@line 8934
  $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8935
  $31 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $4) | 0; //@line 8936
  if (___async) {
   HEAP32[$AsyncCtx14 >> 2] = 192; //@line 8939
   HEAP32[$AsyncCtx14 + 4 >> 2] = $29; //@line 8941
   HEAP32[$AsyncCtx14 + 8 >> 2] = $4; //@line 8943
   sp = STACKTOP; //@line 8944
   STACKTOP = sp; //@line 8945
   return 0; //@line 8945
  }
  _emscripten_free_async_context($AsyncCtx14 | 0); //@line 8947
  $34 = HEAP32[$29 >> 2] | 0; //@line 8948
  if (!$34) {
   $$04 = $31; //@line 8951
   STACKTOP = sp; //@line 8952
   return $$04 | 0; //@line 8952
  }
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 8955
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8956
  FUNCTION_TABLE_vi[$37 & 511]($4); //@line 8957
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 193; //@line 8960
   HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 8962
   sp = STACKTOP; //@line 8963
   STACKTOP = sp; //@line 8964
   return 0; //@line 8964
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8966
  $$04 = $31; //@line 8967
  STACKTOP = sp; //@line 8968
  return $$04 | 0; //@line 8968
 } else {
  do {
   if ($9) {
    $16 = 0; //@line 8972
   } else {
    $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 8975
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 8976
    FUNCTION_TABLE_vii[$11 & 7]($3, $2); //@line 8977
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 188; //@line 8980
     HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 8982
     HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 8984
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 8986
     sp = STACKTOP; //@line 8987
     STACKTOP = sp; //@line 8988
     return 0; //@line 8988
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 8990
     $16 = HEAP32[$7 >> 2] | 0; //@line 8992
     break;
    }
   }
  } while (0);
  $15 = $3 + 12 | 0; //@line 8997
  HEAP32[$15 >> 2] = $16; //@line 8998
  $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8999
  __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(6672, $1, $3) | 0; //@line 9000
  if (___async) {
   HEAP32[$AsyncCtx17 >> 2] = 189; //@line 9003
   HEAP32[$AsyncCtx17 + 4 >> 2] = $15; //@line 9005
   HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 9007
   sp = STACKTOP; //@line 9008
   STACKTOP = sp; //@line 9009
   return 0; //@line 9009
  }
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 9011
  $19 = HEAP32[$15 >> 2] | 0; //@line 9012
  if (!$19) {
   $$04 = 0; //@line 9015
   STACKTOP = sp; //@line 9016
   return $$04 | 0; //@line 9016
  }
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 9019
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9020
  FUNCTION_TABLE_vi[$22 & 511]($3); //@line 9021
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 190; //@line 9024
   sp = STACKTOP; //@line 9025
   STACKTOP = sp; //@line 9026
   return 0; //@line 9026
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9028
  $$04 = 0; //@line 9029
  STACKTOP = sp; //@line 9030
  return $$04 | 0; //@line 9030
 }
 return 0; //@line 9032
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_94($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $7 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23153
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23155
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23157
 $7 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 23160
 if ($7 | 0) {
  $11 = HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0; //@line 23165
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 23166
  FUNCTION_TABLE_vi[$11 & 511]($7); //@line 23167
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 221; //@line 23170
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 23171
   HEAP32[$12 >> 2] = $2; //@line 23172
   $13 = $ReallocAsyncCtx + 8 | 0; //@line 23173
   HEAP32[$13 >> 2] = $4; //@line 23174
   sp = STACKTOP; //@line 23175
   return;
  }
  ___async_unwind = 0; //@line 23178
  HEAP32[$ReallocAsyncCtx >> 2] = 221; //@line 23179
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 23180
  HEAP32[$12 >> 2] = $2; //@line 23181
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 23182
  HEAP32[$13 >> 2] = $4; //@line 23183
  sp = STACKTOP; //@line 23184
  return;
 }
 $15 = HEAP32[$2 + 60 >> 2] | 0; //@line 23188
 do {
  if ($15 | 0) {
   $18 = HEAP32[$15 + 12 >> 2] | 0; //@line 23193
   if (!$18) {
    __ZdlPv($15); //@line 23196
    break;
   }
   $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 23200
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 23201
   FUNCTION_TABLE_vi[$21 & 511]($15); //@line 23202
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 23205
    $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 23206
    HEAP32[$22 >> 2] = $15; //@line 23207
    $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 23208
    HEAP32[$23 >> 2] = $2; //@line 23209
    $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 23210
    HEAP32[$24 >> 2] = $4; //@line 23211
    sp = STACKTOP; //@line 23212
    return;
   }
   ___async_unwind = 0; //@line 23215
   HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 23216
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 23217
   HEAP32[$22 >> 2] = $15; //@line 23218
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 23219
   HEAP32[$23 >> 2] = $2; //@line 23220
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 23221
   HEAP32[$24 >> 2] = $4; //@line 23222
   sp = STACKTOP; //@line 23223
   return;
  }
 } while (0);
 $26 = HEAP32[$2 + 64 >> 2] | 0; //@line 23228
 if ($26 | 0) {
  __ZdaPv($26); //@line 23231
 }
 $29 = HEAP32[$2 + 12 >> 2] | 0; //@line 23234
 if ($29 | 0) {
  __ZdlPv($29); //@line 23237
 }
 $32 = HEAP32[$2 + 44 >> 2] | 0; //@line 23240
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 23245
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 23246
  FUNCTION_TABLE_vi[$36 & 511]($2 + 32 | 0); //@line 23247
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 23250
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 23251
   HEAP32[$37 >> 2] = $2; //@line 23252
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 23253
   HEAP32[$38 >> 2] = $4; //@line 23254
   sp = STACKTOP; //@line 23255
   return;
  }
  ___async_unwind = 0; //@line 23258
  HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 23259
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 23260
  HEAP32[$37 >> 2] = $2; //@line 23261
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 23262
  HEAP32[$38 >> 2] = $4; //@line 23263
  sp = STACKTOP; //@line 23264
  return;
 }
 $40 = HEAP32[$2 + 28 >> 2] | 0; //@line 23268
 if (!$40) {
  __ZdlPv($2); //@line 23271
  HEAP32[6700 + ($4 << 2) >> 2] = 0; //@line 23273
  return;
 }
 $44 = HEAP32[$40 + 8 >> 2] | 0; //@line 23278
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23279
 FUNCTION_TABLE_vi[$44 & 511]($2 + 16 | 0); //@line 23280
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 23283
  $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 23284
  HEAP32[$45 >> 2] = $2; //@line 23285
  $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 23286
  HEAP32[$46 >> 2] = $4; //@line 23287
  sp = STACKTOP; //@line 23288
  return;
 }
 ___async_unwind = 0; //@line 23291
 HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 23292
 $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 23293
 HEAP32[$45 >> 2] = $2; //@line 23294
 $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 23295
 HEAP32[$46 >> 2] = $4; //@line 23296
 sp = STACKTOP; //@line 23297
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_41($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 18072
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18074
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18076
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18078
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18080
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18082
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18084
 if (!$AsyncRetVal) {
  $28 = 0 == 0; //@line 18087
  $29 = HEAP32[$2 >> 2] | 0; //@line 18088
  if (!$29) {
   if ($28) {
    $$06 = -3007; //@line 18092
    $34 = ___async_retval; //@line 18093
    HEAP32[$34 >> 2] = $$06; //@line 18094
    return;
   }
   $$06 = 0; //@line 18097
   $34 = ___async_retval; //@line 18098
   HEAP32[$34 >> 2] = $$06; //@line 18099
   return;
  } else {
   $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 18103
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 18104
   FUNCTION_TABLE_vi[$32 & 511]($8); //@line 18105
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 105; //@line 18108
    $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 18109
    $$expand_i1_val = $28 & 1; //@line 18110
    HEAP8[$33 >> 0] = $$expand_i1_val; //@line 18111
    sp = STACKTOP; //@line 18112
    return;
   }
   ___async_unwind = 0; //@line 18115
   HEAP32[$ReallocAsyncCtx3 >> 2] = 105; //@line 18116
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 18117
   $$expand_i1_val = $28 & 1; //@line 18118
   HEAP8[$33 >> 0] = $$expand_i1_val; //@line 18119
   sp = STACKTOP; //@line 18120
   return;
  }
 } else {
  $13 = HEAP32[$2 >> 2] | 0; //@line 18124
  if (!$13) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 18128
   _equeue_event_delay($AsyncRetVal, $4); //@line 18129
   _equeue_event_dtor($AsyncRetVal, 102); //@line 18130
   $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 18131
   $24 = _equeue_post($6, 103, $AsyncRetVal) | 0; //@line 18132
   if (___async) {
    HEAP32[$ReallocAsyncCtx8 >> 2] = 104; //@line 18135
    $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 18136
    HEAP32[$25 >> 2] = $2; //@line 18137
    $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 18138
    HEAP32[$26 >> 2] = $8; //@line 18139
    sp = STACKTOP; //@line 18140
    return;
   }
   HEAP32[___async_retval >> 2] = $24; //@line 18144
   ___async_unwind = 0; //@line 18145
   HEAP32[$ReallocAsyncCtx8 >> 2] = 104; //@line 18146
   $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 18147
   HEAP32[$25 >> 2] = $2; //@line 18148
   $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 18149
   HEAP32[$26 >> 2] = $8; //@line 18150
   sp = STACKTOP; //@line 18151
   return;
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 18155
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 18156
   FUNCTION_TABLE_vii[$16 & 7]($AsyncRetVal, $8); //@line 18157
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 18160
    $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 18161
    HEAP32[$17 >> 2] = $10; //@line 18162
    $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 18163
    HEAP32[$18 >> 2] = $AsyncRetVal; //@line 18164
    $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 18165
    HEAP32[$19 >> 2] = $4; //@line 18166
    $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 18167
    HEAP32[$20 >> 2] = $6; //@line 18168
    $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 18169
    HEAP32[$21 >> 2] = $2; //@line 18170
    $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 18171
    HEAP32[$22 >> 2] = $8; //@line 18172
    sp = STACKTOP; //@line 18173
    return;
   }
   ___async_unwind = 0; //@line 18176
   HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 18177
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 18178
   HEAP32[$17 >> 2] = $10; //@line 18179
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 18180
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 18181
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 18182
   HEAP32[$19 >> 2] = $4; //@line 18183
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 18184
   HEAP32[$20 >> 2] = $6; //@line 18185
   $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 18186
   HEAP32[$21 >> 2] = $2; //@line 18187
   $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 18188
   HEAP32[$22 >> 2] = $8; //@line 18189
   sp = STACKTOP; //@line 18190
   return;
  }
 }
}
function __Z28nsapi_dns_query_async_canceli($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$lcssa = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $31 = 0, $35 = 0, $39 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12171
 STACKTOP = STACKTOP + 16 | 0; //@line 12172
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12172
 $1 = sp; //@line 12173
 $2 = HEAP32[1675] | 0; //@line 12174
 if (!$2) {
  label = 3; //@line 12177
 } else {
  if ((HEAP32[$2 >> 2] | 0) == ($0 | 0)) {
   $$lcssa = $2; //@line 12182
  } else {
   label = 3; //@line 12184
  }
 }
 do {
  if ((label | 0) == 3) {
   $6 = HEAP32[1676] | 0; //@line 12189
   if ($6 | 0) {
    if ((HEAP32[$6 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $6; //@line 12195
     break;
    }
   }
   $35 = HEAP32[1677] | 0; //@line 12199
   if ($35 | 0) {
    if ((HEAP32[$35 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $35; //@line 12205
     break;
    }
   }
   $39 = HEAP32[1678] | 0; //@line 12209
   if ($39 | 0) {
    if ((HEAP32[$39 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $39; //@line 12215
     break;
    }
   }
   $43 = HEAP32[1679] | 0; //@line 12219
   if (!$43) {
    $$0 = -3003; //@line 12222
    STACKTOP = sp; //@line 12223
    return $$0 | 0; //@line 12223
   }
   if ((HEAP32[$43 >> 2] | 0) == ($0 | 0)) {
    $$lcssa = $43; //@line 12228
   } else {
    $$0 = -3003; //@line 12230
    STACKTOP = sp; //@line 12231
    return $$0 | 0; //@line 12231
   }
  }
 } while (0);
 $8 = $$lcssa + 88 | 0; //@line 12235
 if ((HEAP32[$8 >> 2] | 0) == 2) {
  $$0 = -3003; //@line 12239
  STACKTOP = sp; //@line 12240
  return $$0 | 0; //@line 12240
 }
 HEAP32[$8 >> 2] = 2; //@line 12242
 HEAP32[$1 >> 2] = 0; //@line 12243
 HEAP32[$1 + 4 >> 2] = 0; //@line 12243
 HEAP32[$1 + 8 >> 2] = 0; //@line 12243
 HEAP32[$1 + 12 >> 2] = 0; //@line 12243
 $11 = $$lcssa + 16 | 0; //@line 12244
 do {
  if (($11 | 0) != ($1 | 0)) {
   $13 = $$lcssa + 28 | 0; //@line 12248
   $14 = HEAP32[$13 >> 2] | 0; //@line 12249
   if ($14 | 0) {
    $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 12253
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 12254
    FUNCTION_TABLE_vi[$17 & 511]($11); //@line 12255
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 264; //@line 12258
     HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12260
     HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 12262
     HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 12264
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 12266
     sp = STACKTOP; //@line 12267
     STACKTOP = sp; //@line 12268
     return 0; //@line 12268
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12270
    $$phi$trans$insert = $1 + 12 | 0; //@line 12271
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 12272
    if ($$pre | 0) {
     $24 = HEAP32[$$pre + 4 >> 2] | 0; //@line 12276
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12277
     FUNCTION_TABLE_vii[$24 & 7]($11, $1); //@line 12278
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 265; //@line 12281
      HEAP32[$AsyncCtx2 + 4 >> 2] = $$phi$trans$insert; //@line 12283
      HEAP32[$AsyncCtx2 + 8 >> 2] = $13; //@line 12285
      HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 12287
      sp = STACKTOP; //@line 12288
      STACKTOP = sp; //@line 12289
      return 0; //@line 12289
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12291
     $$pre$i$i = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 12292
     HEAP32[$13 >> 2] = $$pre$i$i; //@line 12293
     if (!$$pre$i$i) {
      break;
     }
     $31 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 12300
     $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12301
     FUNCTION_TABLE_vi[$31 & 511]($1); //@line 12302
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 266; //@line 12305
      HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 12307
      sp = STACKTOP; //@line 12308
      STACKTOP = sp; //@line 12309
      return 0; //@line 12309
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12311
      break;
     }
    }
   }
   HEAP32[$13 >> 2] = 0; //@line 12316
  }
 } while (0);
 $$0 = 0; //@line 12319
 STACKTOP = sp; //@line 12320
 return $$0 | 0; //@line 12320
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $$unpack$i = 0, $$unpack4$i = 0, $10 = 0, $11 = 0, $15 = 0, $18 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16930
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16934
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16936
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16938
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16940
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16941
 $11 = $4 + 12 | 0; //@line 16942
 HEAP32[$11 >> 2] = $$pre$i; //@line 16943
 $$unpack$i = HEAP32[$8 >> 2] | 0; //@line 16946
 $$unpack4$i = HEAP32[$8 + 4 >> 2] | 0; //@line 16948
 $15 = (HEAP32[$8 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 16950
 $18 = $$pre$i; //@line 16953
 if (!($$unpack4$i & 1)) {
  $31 = $$unpack$i; //@line 16956
 } else {
  $31 = HEAP32[(HEAP32[$15 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 16961
 }
 if (!$$pre$i) {
  $35 = $6 + 12 | 0; //@line 16965
  HEAP32[$35 >> 2] = 0; //@line 16966
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 16967
  $36 = FUNCTION_TABLE_iiii[$31 & 31]($15, $10, $6) | 0; //@line 16968
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 113; //@line 16971
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 16972
   HEAP32[$37 >> 2] = $35; //@line 16973
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 16974
   HEAP32[$38 >> 2] = $6; //@line 16975
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 16976
   HEAP32[$39 >> 2] = $11; //@line 16977
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 16978
   HEAP32[$40 >> 2] = $4; //@line 16979
   sp = STACKTOP; //@line 16980
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 16984
  ___async_unwind = 0; //@line 16985
  HEAP32[$ReallocAsyncCtx3 >> 2] = 113; //@line 16986
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 16987
  HEAP32[$37 >> 2] = $35; //@line 16988
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 16989
  HEAP32[$38 >> 2] = $6; //@line 16990
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 16991
  HEAP32[$39 >> 2] = $11; //@line 16992
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 16993
  HEAP32[$40 >> 2] = $4; //@line 16994
  sp = STACKTOP; //@line 16995
  return;
 } else {
  $25 = HEAP32[$18 + 4 >> 2] | 0; //@line 16999
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 17000
  FUNCTION_TABLE_vii[$25 & 7]($6, $4); //@line 17001
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 112; //@line 17004
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 17005
   HEAP32[$26 >> 2] = $11; //@line 17006
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 17007
   HEAP32[$27 >> 2] = $6; //@line 17008
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 17009
   HEAP32[$28 >> 2] = $15; //@line 17010
   $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 17011
   HEAP32[$29 >> 2] = $10; //@line 17012
   $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 17013
   HEAP32[$30 >> 2] = $31; //@line 17014
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 17015
   HEAP32[$32 >> 2] = $6; //@line 17016
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 17017
   HEAP32[$33 >> 2] = $11; //@line 17018
   $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 17019
   HEAP32[$34 >> 2] = $4; //@line 17020
   sp = STACKTOP; //@line 17021
   return;
  }
  ___async_unwind = 0; //@line 17024
  HEAP32[$ReallocAsyncCtx2 >> 2] = 112; //@line 17025
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 17026
  HEAP32[$26 >> 2] = $11; //@line 17027
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 17028
  HEAP32[$27 >> 2] = $6; //@line 17029
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 17030
  HEAP32[$28 >> 2] = $15; //@line 17031
  $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 17032
  HEAP32[$29 >> 2] = $10; //@line 17033
  $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 17034
  HEAP32[$30 >> 2] = $31; //@line 17035
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 17036
  HEAP32[$32 >> 2] = $6; //@line 17037
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 17038
  HEAP32[$33 >> 2] = $11; //@line 17039
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 17040
  HEAP32[$34 >> 2] = $4; //@line 17041
  sp = STACKTOP; //@line 17042
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_120($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1725
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1727
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1729
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1731
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1733
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1735
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1737
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 1740
 $16 = HEAP8[$0 + 29 >> 0] & 1; //@line 1743
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 1745
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 1747
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 1749
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 1751
 $26 = HEAP8[$0 + 48 >> 0] & 1; //@line 1754
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 1756
 L2 : do {
  if (!(HEAP8[$4 >> 0] | 0)) {
   do {
    if (!(HEAP8[$8 >> 0] | 0)) {
     $$182$off0 = $16; //@line 1765
     $$186$off0 = $14; //@line 1765
    } else {
     if (!(HEAP8[$10 >> 0] | 0)) {
      if (!(HEAP32[$12 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $14; //@line 1774
       $$283$off0 = 1; //@line 1774
       label = 13; //@line 1775
       break L2;
      } else {
       $$182$off0 = 1; //@line 1778
       $$186$off0 = $14; //@line 1778
       break;
      }
     }
     if ((HEAP32[$2 >> 2] | 0) == 1) {
      label = 18; //@line 1785
      break L2;
     }
     if (!(HEAP32[$12 >> 2] & 2)) {
      label = 18; //@line 1792
      break L2;
     } else {
      $$182$off0 = 1; //@line 1795
      $$186$off0 = 1; //@line 1795
     }
    }
   } while (0);
   $30 = $18 + 8 | 0; //@line 1799
   if ($30 >>> 0 < $28 >>> 0) {
    HEAP8[$10 >> 0] = 0; //@line 1802
    HEAP8[$8 >> 0] = 0; //@line 1803
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 1804
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $24, $20, $20, 1, $26); //@line 1805
    if (!___async) {
     ___async_unwind = 0; //@line 1808
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 344; //@line 1810
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 1812
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 1814
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 1816
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 1818
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 1820
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 1822
    HEAP8[$ReallocAsyncCtx5 + 28 >> 0] = $$186$off0 & 1; //@line 1825
    HEAP8[$ReallocAsyncCtx5 + 29 >> 0] = $$182$off0 & 1; //@line 1828
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $30; //@line 1830
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 1832
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 1834
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 1836
    HEAP8[$ReallocAsyncCtx5 + 48 >> 0] = $26 & 1; //@line 1839
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 1841
    sp = STACKTOP; //@line 1842
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 1845
    $$283$off0 = $$182$off0; //@line 1845
    label = 13; //@line 1846
   }
  } else {
   $$085$off0$reg2mem$0 = $14; //@line 1849
   $$283$off0 = $16; //@line 1849
   label = 13; //@line 1850
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$22 >> 2] = $20; //@line 1856
    $59 = $24 + 40 | 0; //@line 1857
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 1860
    if ((HEAP32[$24 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$2 >> 2] | 0) == 2) {
      HEAP8[$4 >> 0] = 1; //@line 1868
      if ($$283$off0) {
       label = 18; //@line 1870
       break;
      } else {
       $67 = 4; //@line 1873
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 1880
   } else {
    $67 = 4; //@line 1882
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 1887
 }
 HEAP32[$6 >> 2] = $67; //@line 1889
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_40($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17951
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17953
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17955
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17957
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17959
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17961
 if (!$AsyncRetVal) {
  $25 = 0 == 0; //@line 17964
  $26 = HEAP32[$2 >> 2] | 0; //@line 17965
  if (!$26) {
   if ($25) {
    $$06 = -3007; //@line 17969
    $31 = ___async_retval; //@line 17970
    HEAP32[$31 >> 2] = $$06; //@line 17971
    return;
   }
   $$06 = 0; //@line 17974
   $31 = ___async_retval; //@line 17975
   HEAP32[$31 >> 2] = $$06; //@line 17976
   return;
  } else {
   $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 17980
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 17981
   FUNCTION_TABLE_vi[$29 & 511]($6); //@line 17982
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 110; //@line 17985
    $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 17986
    $$expand_i1_val = $25 & 1; //@line 17987
    HEAP8[$30 >> 0] = $$expand_i1_val; //@line 17988
    sp = STACKTOP; //@line 17989
    return;
   }
   ___async_unwind = 0; //@line 17992
   HEAP32[$ReallocAsyncCtx6 >> 2] = 110; //@line 17993
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 17994
   $$expand_i1_val = $25 & 1; //@line 17995
   HEAP8[$30 >> 0] = $$expand_i1_val; //@line 17996
   sp = STACKTOP; //@line 17997
   return;
  }
 } else {
  $11 = HEAP32[$2 >> 2] | 0; //@line 18001
  if (!$11) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 18005
   _equeue_event_dtor($AsyncRetVal, 102); //@line 18006
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 18007
   $21 = _equeue_post($4, 103, $AsyncRetVal) | 0; //@line 18008
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 109; //@line 18011
    $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 18012
    HEAP32[$22 >> 2] = $2; //@line 18013
    $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 18014
    HEAP32[$23 >> 2] = $6; //@line 18015
    sp = STACKTOP; //@line 18016
    return;
   }
   HEAP32[___async_retval >> 2] = $21; //@line 18020
   ___async_unwind = 0; //@line 18021
   HEAP32[$ReallocAsyncCtx7 >> 2] = 109; //@line 18022
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 18023
   HEAP32[$22 >> 2] = $2; //@line 18024
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 18025
   HEAP32[$23 >> 2] = $6; //@line 18026
   sp = STACKTOP; //@line 18027
   return;
  } else {
   $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 18031
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 18032
   FUNCTION_TABLE_vii[$14 & 7]($AsyncRetVal, $6); //@line 18033
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 108; //@line 18036
    $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 18037
    HEAP32[$15 >> 2] = $8; //@line 18038
    $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 18039
    HEAP32[$16 >> 2] = $AsyncRetVal; //@line 18040
    $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 18041
    HEAP32[$17 >> 2] = $4; //@line 18042
    $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 18043
    HEAP32[$18 >> 2] = $2; //@line 18044
    $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 18045
    HEAP32[$19 >> 2] = $6; //@line 18046
    sp = STACKTOP; //@line 18047
    return;
   }
   ___async_unwind = 0; //@line 18050
   HEAP32[$ReallocAsyncCtx5 >> 2] = 108; //@line 18051
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 18052
   HEAP32[$15 >> 2] = $8; //@line 18053
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 18054
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 18055
   $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 18056
   HEAP32[$17 >> 2] = $4; //@line 18057
   $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 18058
   HEAP32[$18 >> 2] = $2; //@line 18059
   $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 18060
   HEAP32[$19 >> 2] = $6; //@line 18061
   sp = STACKTOP; //@line 18062
   return;
  }
 }
}
function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $100 = 0, $101 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $80 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 $2 = $0 + 4 | 0; //@line 9183
 $3 = HEAP32[$2 >> 2] | 0; //@line 9184
 $4 = $0 + 100 | 0; //@line 9185
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1; //@line 9190
  $11 = HEAPU8[$3 >> 0] | 0; //@line 9193
 } else {
  $11 = ___shgetc($0) | 0; //@line 9196
 }
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1; //@line 9201
   $14 = HEAP32[$2 >> 2] | 0; //@line 9202
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1; //@line 9207
    $22 = HEAPU8[$14 >> 0] | 0; //@line 9210
   } else {
    $22 = ___shgetc($0) | 0; //@line 9213
   }
   if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) {
    if (!(HEAP32[$4 >> 2] | 0)) {
     $$0 = $13; //@line 9223
     $$049 = $22; //@line 9223
    } else {
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9227
     $$0 = $13; //@line 9228
     $$049 = $22; //@line 9228
    }
   } else {
    $$0 = $13; //@line 9231
    $$049 = $22; //@line 9231
   }
   break;
  }
 default:
  {
   $$0 = 0; //@line 9236
   $$049 = $11; //@line 9236
  }
 }
 if (($$049 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$4 >> 2] | 0)) {
   $100 = -2147483648; //@line 9245
   $101 = 0; //@line 9245
  } else {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9249
   $100 = -2147483648; //@line 9250
   $101 = 0; //@line 9250
  }
 } else {
  $$04860 = 0; //@line 9253
  $$159 = $$049; //@line 9253
  while (1) {
   $$04860 = $$159 + -48 + ($$04860 * 10 | 0) | 0; //@line 9257
   $38 = HEAP32[$2 >> 2] | 0; //@line 9258
   if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $38 + 1; //@line 9263
    $$1$be = HEAPU8[$38 >> 0] | 0; //@line 9266
   } else {
    $$1$be = ___shgetc($0) | 0; //@line 9269
   }
   if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04860 | 0) < 214748364)) {
    break;
   } else {
    $$159 = $$1$be; //@line 9276
   }
  }
  $50 = (($$04860 | 0) < 0) << 31 >> 31; //@line 9282
  if (($$1$be + -48 | 0) >>> 0 < 10) {
   $$254 = $$1$be; //@line 9286
   $55 = $$04860; //@line 9286
   $56 = $50; //@line 9286
   while (1) {
    $57 = ___muldi3($55 | 0, $56 | 0, 10, 0) | 0; //@line 9288
    $58 = tempRet0; //@line 9289
    $61 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 9292
    $63 = _i64Add($61 | 0, tempRet0 | 0, $57 | 0, $58 | 0) | 0; //@line 9294
    $64 = tempRet0; //@line 9295
    $65 = HEAP32[$2 >> 2] | 0; //@line 9296
    if ($65 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $65 + 1; //@line 9301
     $$2$be = HEAPU8[$65 >> 0] | 0; //@line 9304
    } else {
     $$2$be = ___shgetc($0) | 0; //@line 9307
    }
    if (($$2$be + -48 | 0) >>> 0 < 10 & (($64 | 0) < 21474836 | ($64 | 0) == 21474836 & $63 >>> 0 < 2061584302)) {
     $$254 = $$2$be; //@line 9318
     $55 = $63; //@line 9318
     $56 = $64; //@line 9318
    } else {
     $$2$lcssa = $$2$be; //@line 9320
     $94 = $63; //@line 9320
     $95 = $64; //@line 9320
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be; //@line 9325
   $94 = $$04860; //@line 9325
   $95 = $50; //@line 9325
  }
  if (($$2$lcssa + -48 | 0) >>> 0 < 10) {
   do {
    $80 = HEAP32[$2 >> 2] | 0; //@line 9331
    if ($80 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $80 + 1; //@line 9336
     $$3$be = HEAPU8[$80 >> 0] | 0; //@line 9339
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 9342
    }
   } while (($$3$be + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[$4 >> 2] | 0) {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9356
  }
  $93 = ($$0 | 0) != 0; //@line 9358
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0; //@line 9359
  $100 = $93 ? tempRet0 : $95; //@line 9363
  $101 = $93 ? $96 : $94; //@line 9363
 }
 tempRet0 = $100; //@line 9365
 return $101 | 0; //@line 9366
}
function _ip6tos($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$049$be78 = 0, $$04962 = 0, $$05075 = 0, $$05274 = 0, $$05573 = 0, $$05872 = 0, $$1 = 0, $$151$lcssa = 0, $$15165 = 0, $$15364 = 0, $$2 = 0, $$254 = 0, $$257 = 0, $$260 = 0, $$3 = 0, $$461 = 0, $$lcssa = 0, $$shrunk = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $23 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $42 = 0, $45 = 0, $57 = 0, $59 = 0, $9 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2400
 STACKTOP = STACKTOP + 16 | 0; //@line 2401
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2401
 $vararg_buffer = sp; //@line 2402
 $$05075 = 0; //@line 2403
 $$05274 = $0; //@line 2403
 $$05573 = 1; //@line 2403
 $$05872 = -1; //@line 2403
 $15 = 0; //@line 2403
 while (1) {
  $9 = $$05274 + 2 | 0; //@line 2409
  if (!((HEAPU8[$$05274 >> 0] | 0) << 8 | (HEAPU8[$$05274 + 1 >> 0] | 0))) {
   $14 = $15 + 1 | 0; //@line 2415
   $16 = $14 & 255; //@line 2416
   $17 = $14 & 255; //@line 2417
   L5 : do {
    if (($16 & 255) < 8) {
     $$15165 = $16; //@line 2421
     $$15364 = $9; //@line 2421
     $indvars$iv = $17; //@line 2421
     while (1) {
      $23 = $$15364 + 2 | 0; //@line 2427
      if ((HEAPU8[$$15364 >> 0] | 0) << 8 | (HEAPU8[$$15364 + 1 >> 0] | 0) | 0) {
       $$151$lcssa = $indvars$iv & 255; //@line 2434
       $$254 = $23; //@line 2434
       $$lcssa = $indvars$iv; //@line 2434
       break L5;
      }
      $indvars$iv$next = $indvars$iv + 1 | 0; //@line 2437
      $29 = $$15165 + 1 << 24 >> 24; //@line 2438
      if ($indvars$iv$next >>> 0 < 8) {
       $$15165 = $29; //@line 2441
       $$15364 = $23; //@line 2441
       $indvars$iv = $indvars$iv$next; //@line 2441
      } else {
       $$151$lcssa = $29; //@line 2443
       $$254 = $23; //@line 2443
       $$lcssa = $indvars$iv$next; //@line 2443
       break;
      }
     }
    } else {
     $$151$lcssa = $16; //@line 2448
     $$254 = $9; //@line 2448
     $$lcssa = $17; //@line 2448
    }
   } while (0);
   $31 = $$lcssa - $15 | 0; //@line 2451
   $33 = ($31 | 0) > ($$05573 & 255 | 0); //@line 2453
   $$2 = $$151$lcssa; //@line 2457
   $$257 = $33 ? $31 & 255 : $$05573; //@line 2457
   $$260 = $33 ? $$05075 : $$05872; //@line 2457
   $$3 = $$254; //@line 2457
  } else {
   $$2 = $$05075; //@line 2459
   $$257 = $$05573; //@line 2459
   $$260 = $$05872; //@line 2459
   $$3 = $9; //@line 2459
  }
  $35 = $$2 + 1 << 24 >> 24; //@line 2461
  if (($35 & 255) < 8) {
   $$05075 = $35; //@line 2465
   $$05274 = $$3; //@line 2465
   $$05573 = $$257; //@line 2465
   $$05872 = $$260; //@line 2465
   $15 = $35 & 255; //@line 2465
  } else {
   break;
  }
 }
 $2 = $$257 & 255; //@line 2470
 $3 = $2 << 1; //@line 2471
 $4 = $$260 << 24 >> 24 == 0; //@line 2472
 $$04962 = $1; //@line 2473
 $$461 = $0; //@line 2473
 $$shrunk = 0; //@line 2473
 while (1) {
  $42 = $$shrunk & 255; //@line 2475
  if ($$shrunk << 24 >> 24 != $$260 << 24 >> 24) {
   $57 = $$shrunk + 1 << 24 >> 24; //@line 2485
   HEAP32[$vararg_buffer >> 2] = (HEAPU8[$$461 >> 0] | 0) << 8 | (HEAPU8[$$461 + 1 >> 0] | 0); //@line 2486
   $59 = $$04962 + (_sprintf($$04962, 2709, $vararg_buffer) | 0) | 0; //@line 2488
   if ($57 << 24 >> 24 == 8) {
    $$049$be78 = $59; //@line 2491
    label = 9; //@line 2492
    break;
   }
   HEAP8[$59 >> 0] = 58; //@line 2497
   $$04962 = $59 + 1 | 0; //@line 2498
   $$461 = $$461 + 2 | 0; //@line 2498
   $$shrunk = $57; //@line 2498
   continue;
  }
  if ($4) {
   HEAP8[$$04962 >> 0] = 58; //@line 2503
   $$1 = $$04962 + 1 | 0; //@line 2504
  } else {
   $$1 = $$04962; //@line 2506
  }
  $45 = $$1 + 1 | 0; //@line 2508
  HEAP8[$$1 >> 0] = 58; //@line 2509
  $$shrunk = $42 + $2 & 255; //@line 2512
  if (($$shrunk & 255) >= 8) {
   $$049$be78 = $45; //@line 2517
   label = 9; //@line 2518
   break;
  } else {
   $$04962 = $45; //@line 2515
   $$461 = $$461 + $3 | 0; //@line 2515
  }
 }
 if ((label | 0) == 9) {
  HEAP8[$$049$be78 >> 0] = 0; //@line 2523
  STACKTOP = sp; //@line 2528
  return $$049$be78 - $1 & 255 | 0; //@line 2528
 }
 return 0; //@line 2530
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14982
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14987
 } else {
  $9 = $1 + 52 | 0; //@line 14989
  $10 = HEAP8[$9 >> 0] | 0; //@line 14990
  $11 = $1 + 53 | 0; //@line 14991
  $12 = HEAP8[$11 >> 0] | 0; //@line 14992
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 14995
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 14996
  HEAP8[$9 >> 0] = 0; //@line 14997
  HEAP8[$11 >> 0] = 0; //@line 14998
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14999
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 15000
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 342; //@line 15003
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 15005
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15007
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15009
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 15011
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 15013
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 15015
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 15017
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 15019
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 15021
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 15023
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 15026
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 15028
   sp = STACKTOP; //@line 15029
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15032
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 15037
    $32 = $0 + 8 | 0; //@line 15038
    $33 = $1 + 54 | 0; //@line 15039
    $$0 = $0 + 24 | 0; //@line 15040
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 15073
     HEAP8[$11 >> 0] = 0; //@line 15074
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 15075
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 15076
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15081
     $62 = $$0 + 8 | 0; //@line 15082
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 15085
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 343; //@line 15090
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 15092
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 15094
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 15096
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 15098
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 15100
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 15102
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 15104
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 15106
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 15108
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 15110
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 15112
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 15114
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 15116
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 15119
    sp = STACKTOP; //@line 15120
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 15124
  HEAP8[$11 >> 0] = $12; //@line 15125
 }
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23675
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23679
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23681
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23683
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23685
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23687
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23689
 $15 = $4 + 12 | 0; //@line 23691
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23692
 $16 = $6 + 12 | 0; //@line 23693
 $17 = HEAP32[$16 >> 2] | 0; //@line 23694
 if (!$17) {
  $28 = $8 + 12 | 0; //@line 23697
  HEAP32[$28 >> 2] = 0; //@line 23698
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 23699
  $29 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($10, $12, $4, 0, $8, $14) | 0; //@line 23700
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 154; //@line 23703
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 23704
   HEAP32[$30 >> 2] = $28; //@line 23705
   $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 23706
   HEAP32[$31 >> 2] = $15; //@line 23707
   $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 23708
   HEAP32[$32 >> 2] = $8; //@line 23709
   $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 23710
   HEAP32[$33 >> 2] = $4; //@line 23711
   sp = STACKTOP; //@line 23712
   return;
  }
  HEAP32[___async_retval >> 2] = $29; //@line 23716
  ___async_unwind = 0; //@line 23717
  HEAP32[$ReallocAsyncCtx5 >> 2] = 154; //@line 23718
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 23719
  HEAP32[$30 >> 2] = $28; //@line 23720
  $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 23721
  HEAP32[$31 >> 2] = $15; //@line 23722
  $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 23723
  HEAP32[$32 >> 2] = $8; //@line 23724
  $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 23725
  HEAP32[$33 >> 2] = $4; //@line 23726
  sp = STACKTOP; //@line 23727
  return;
 } else {
  $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 23731
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 23732
  FUNCTION_TABLE_vii[$20 & 7]($8, $6); //@line 23733
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 153; //@line 23736
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 23737
   HEAP32[$21 >> 2] = $16; //@line 23738
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 23739
   HEAP32[$22 >> 2] = $8; //@line 23740
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 23741
   HEAP32[$23 >> 2] = $10; //@line 23742
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 23743
   HEAP32[$24 >> 2] = $12; //@line 23744
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 23745
   HEAP32[$25 >> 2] = $4; //@line 23746
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 23747
   HEAP32[$26 >> 2] = $14; //@line 23748
   $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 23749
   HEAP32[$27 >> 2] = $15; //@line 23750
   sp = STACKTOP; //@line 23751
   return;
  }
  ___async_unwind = 0; //@line 23754
  HEAP32[$ReallocAsyncCtx2 >> 2] = 153; //@line 23755
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 23756
  HEAP32[$21 >> 2] = $16; //@line 23757
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 23758
  HEAP32[$22 >> 2] = $8; //@line 23759
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 23760
  HEAP32[$23 >> 2] = $10; //@line 23761
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 23762
  HEAP32[$24 >> 2] = $12; //@line 23763
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 23764
  HEAP32[$25 >> 2] = $4; //@line 23765
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 23766
  HEAP32[$26 >> 2] = $14; //@line 23767
  $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 23768
  HEAP32[$27 >> 2] = $15; //@line 23769
  sp = STACKTOP; //@line 23770
  return;
 }
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11057
      $10 = HEAP32[$9 >> 2] | 0; //@line 11058
      HEAP32[$2 >> 2] = $9 + 4; //@line 11060
      HEAP32[$0 >> 2] = $10; //@line 11061
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11077
      $17 = HEAP32[$16 >> 2] | 0; //@line 11078
      HEAP32[$2 >> 2] = $16 + 4; //@line 11080
      $20 = $0; //@line 11083
      HEAP32[$20 >> 2] = $17; //@line 11085
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 11088
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11104
      $30 = HEAP32[$29 >> 2] | 0; //@line 11105
      HEAP32[$2 >> 2] = $29 + 4; //@line 11107
      $31 = $0; //@line 11108
      HEAP32[$31 >> 2] = $30; //@line 11110
      HEAP32[$31 + 4 >> 2] = 0; //@line 11113
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11129
      $41 = $40; //@line 11130
      $43 = HEAP32[$41 >> 2] | 0; //@line 11132
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 11135
      HEAP32[$2 >> 2] = $40 + 8; //@line 11137
      $47 = $0; //@line 11138
      HEAP32[$47 >> 2] = $43; //@line 11140
      HEAP32[$47 + 4 >> 2] = $46; //@line 11143
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11159
      $57 = HEAP32[$56 >> 2] | 0; //@line 11160
      HEAP32[$2 >> 2] = $56 + 4; //@line 11162
      $59 = ($57 & 65535) << 16 >> 16; //@line 11164
      $62 = $0; //@line 11167
      HEAP32[$62 >> 2] = $59; //@line 11169
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 11172
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11188
      $72 = HEAP32[$71 >> 2] | 0; //@line 11189
      HEAP32[$2 >> 2] = $71 + 4; //@line 11191
      $73 = $0; //@line 11193
      HEAP32[$73 >> 2] = $72 & 65535; //@line 11195
      HEAP32[$73 + 4 >> 2] = 0; //@line 11198
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11214
      $83 = HEAP32[$82 >> 2] | 0; //@line 11215
      HEAP32[$2 >> 2] = $82 + 4; //@line 11217
      $85 = ($83 & 255) << 24 >> 24; //@line 11219
      $88 = $0; //@line 11222
      HEAP32[$88 >> 2] = $85; //@line 11224
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 11227
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11243
      $98 = HEAP32[$97 >> 2] | 0; //@line 11244
      HEAP32[$2 >> 2] = $97 + 4; //@line 11246
      $99 = $0; //@line 11248
      HEAP32[$99 >> 2] = $98 & 255; //@line 11250
      HEAP32[$99 + 4 >> 2] = 0; //@line 11253
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11269
      $109 = +HEAPF64[$108 >> 3]; //@line 11270
      HEAP32[$2 >> 2] = $108 + 8; //@line 11272
      HEAPF64[$0 >> 3] = $109; //@line 11273
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11289
      $116 = +HEAPF64[$115 >> 3]; //@line 11290
      HEAP32[$2 >> 2] = $115 + 8; //@line 11292
      HEAPF64[$0 >> 3] = $116; //@line 11293
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_119($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1569
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1571
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1573
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1575
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1577
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 1580
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1582
 $15 = $2 + 24 | 0; //@line 1585
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$2 + 8 >> 2] | 0; //@line 1590
   if (!($18 & 2)) {
    $21 = $4 + 36 | 0; //@line 1594
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $4 + 54 | 0; //@line 1601
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 1612
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 1613
      if (!___async) {
       ___async_unwind = 0; //@line 1616
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 348; //@line 1618
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 1620
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $12; //@line 1622
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 1624
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 1626
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $4; //@line 1628
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $6; //@line 1630
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $8; //@line 1632
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $10 & 1; //@line 1635
      sp = STACKTOP; //@line 1636
      return;
     }
     $36 = $4 + 24 | 0; //@line 1639
     $37 = $4 + 54 | 0; //@line 1640
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 1655
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 1656
     if (!___async) {
      ___async_unwind = 0; //@line 1659
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 347; //@line 1661
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 1663
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $12; //@line 1665
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 1667
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 1669
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 1671
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $4; //@line 1673
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $6; //@line 1675
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $8; //@line 1677
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $10 & 1; //@line 1680
     sp = STACKTOP; //@line 1681
     return;
    }
   }
   $24 = $4 + 54 | 0; //@line 1685
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 1689
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 1690
    if (!___async) {
     ___async_unwind = 0; //@line 1693
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 346; //@line 1695
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 1697
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 1699
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 1701
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $4; //@line 1703
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $6; //@line 1705
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 1707
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $10 & 1; //@line 1710
    sp = STACKTOP; //@line 1711
    return;
   }
  }
 } while (0);
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$2 = 0, $$pr = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $27 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $54 = 0, $59 = 0, $61 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $75 = 0, $80 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6762
 if (!$2) {
  return;
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, HEAP32[$1 >> 2] | 0, 0) | 0)) {
  return;
 }
 $7 = HEAP32[1672] | 0; //@line 6773
 if (!$7) {
  $$2 = 0; //@line 6776
 } else {
  $10 = $7 + 32 | 0; //@line 6779
  $12 = HEAP32[$10 >> 2] | 0; //@line 6781
  $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 6784
  $16 = HEAP32[1673] | 0; //@line 6785
  if (!$16) {
   $$2 = 1; //@line 6788
  } else {
   $59 = $16 + 32 | 0; //@line 6791
   $61 = HEAP32[$59 >> 2] | 0; //@line 6793
   $64 = HEAP32[$59 + 4 >> 2] | 0; //@line 6796
   $69 = $64 >>> 0 > $15 >>> 0 | ($64 | 0) == ($15 | 0) & $61 >>> 0 > $12 >>> 0; //@line 6801
   $70 = HEAP32[1674] | 0; //@line 6802
   if (!$70) {
    $$2 = 2; //@line 6805
   } else {
    $73 = $69 ? $15 : $64; //@line 6810
    $75 = $70 + 32 | 0; //@line 6812
    $80 = HEAP32[$75 + 4 >> 2] | 0; //@line 6817
    $$2 = $80 >>> 0 > $73 >>> 0 | (($80 | 0) == ($73 | 0) ? (HEAP32[$75 >> 2] | 0) >>> 0 > ($69 ? $12 : $61) >>> 0 : 0) ? ($69 ^ 1) & 1 : 2; //@line 6824
   }
  }
 }
 $18 = 6688 + ($$2 << 2) | 0; //@line 6828
 $19 = HEAP32[$18 >> 2] | 0; //@line 6829
 do {
  if (!$19) {
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6833
   $21 = __ZnwjRKSt9nothrow_t(40, 8621) | 0; //@line 6834
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 149; //@line 6837
    HEAP32[$AsyncCtx + 4 >> 2] = $18; //@line 6839
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6841
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6843
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6845
    sp = STACKTOP; //@line 6846
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6849
    HEAP32[$18 >> 2] = $21; //@line 6850
    $30 = $21; //@line 6851
    $31 = $21; //@line 6851
    break;
   }
  } else {
   $27 = HEAP32[$19 + 20 >> 2] | 0; //@line 6856
   if (!$27) {
    $$pr = $19; //@line 6859
   } else {
    __ZdlPv($27); //@line 6861
    $$pr = HEAP32[$18 >> 2] | 0; //@line 6863
   }
   $30 = $$pr; //@line 6865
   $31 = $$pr; //@line 6865
  }
 } while (0);
 if (!$30) {
  return;
 }
 HEAP32[$31 >> 2] = HEAP32[$1 >> 2]; //@line 6872
 HEAP32[$31 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6872
 HEAP32[$31 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6872
 HEAP32[$31 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6872
 HEAP32[$31 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 6872
 $33 = (_strlen($0) | 0) + 1 | 0; //@line 6874
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6875
 $34 = __ZnajRKSt9nothrow_t($33, 8621) | 0; //@line 6876
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 150; //@line 6879
  HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 6881
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 6883
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 6885
  HEAP32[$AsyncCtx3 + 16 >> 2] = $18; //@line 6887
  sp = STACKTOP; //@line 6888
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6891
 HEAP32[$30 + 20 >> 2] = $34; //@line 6893
 _strcpy($34, $0) | 0; //@line 6894
 $40 = _emscripten_asm_const_i(8) | 0; //@line 6895
 $42 = (($40 | 0) < 0) << 31 >> 31; //@line 6897
 $43 = ___muldi3($2 | 0, 0, 1e3, 0) | 0; //@line 6898
 $45 = _i64Add($43 | 0, tempRet0 | 0, $40 | 0, $42 | 0) | 0; //@line 6900
 $47 = HEAP32[$18 >> 2] | 0; //@line 6902
 $49 = $47 + 24 | 0; //@line 6904
 HEAP32[$49 >> 2] = $45; //@line 6906
 HEAP32[$49 + 4 >> 2] = tempRet0; //@line 6909
 $54 = $47 + 32 | 0; //@line 6911
 HEAP32[$54 >> 2] = $40; //@line 6913
 HEAP32[$54 + 4 >> 2] = $42; //@line 6916
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_210($0) {
 $0 = $0 | 0;
 var $$051 = 0, $$byval_copy11 = 0, $$pre = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17625
 STACKTOP = STACKTOP + 32 | 0; //@line 17626
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17626
 $$byval_copy11 = sp; //@line 17627
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17629
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17631
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17633
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17635
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17639
 if (!$AsyncRetVal) {
  $27 = 0; //@line 17642
 } else {
  $13 = $AsyncRetVal + (HEAP32[$0 + 20 >> 2] << 6) | 0; //@line 17644
  $14 = $AsyncRetVal; //@line 17645
  do {
   HEAP32[$8 >> 2] = 0; //@line 17647
   HEAP32[$8 + 4 >> 2] = 0; //@line 17647
   HEAP32[$8 + 8 >> 2] = 0; //@line 17647
   HEAP32[$8 + 12 >> 2] = 0; //@line 17647
   HEAP32[$8 + 16 >> 2] = 0; //@line 17647
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$8 >> 2]; //@line 17648
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 17648
   HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 17648
   HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$8 + 12 >> 2]; //@line 17648
   HEAP32[$$byval_copy11 + 16 >> 2] = HEAP32[$8 + 16 >> 2]; //@line 17648
   __ZN13SocketAddressC2E10nsapi_addrt($14, $$byval_copy11, 0); //@line 17649
   $14 = $14 + 64 | 0; //@line 17650
  } while (($14 | 0) != ($13 | 0));
  $27 = $AsyncRetVal; //@line 17653
 }
 $$pre = $4 + 64 | 0; //@line 17662
 if (HEAP8[$6 >> 0] | 0) {
  $$051 = 0; //@line 17664
  do {
   $29 = $27 + ($$051 << 6) | 0; //@line 17666
   $31 = (HEAP32[$$pre >> 2] | 0) + ($$051 * 20 | 0) | 0; //@line 17668
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$31 >> 2]; //@line 17669
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 17669
   HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$31 + 8 >> 2]; //@line 17669
   HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$31 + 12 >> 2]; //@line 17669
   HEAP32[$$byval_copy11 + 16 >> 2] = HEAP32[$31 + 16 >> 2]; //@line 17669
   __ZN13SocketAddress8set_addrE10nsapi_addr($29, $$byval_copy11); //@line 17670
   $$051 = $$051 + 1 | 0; //@line 17671
  } while (($$051 | 0) < (HEAPU8[$6 >> 0] | 0));
 }
 $20 = HEAP32[$4 + 12 >> 2] | 0; //@line 17683
 $21 = HEAP32[$$pre >> 2] | 0; //@line 17684
 $23 = HEAP32[$4 + 68 >> 2] | 0; //@line 17686
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 17687
 __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($20, $21, $23); //@line 17688
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 251; //@line 17691
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 17692
  HEAP32[$24 >> 2] = $2; //@line 17693
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 17694
  HEAP32[$25 >> 2] = $4; //@line 17695
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 17696
  HEAP32[$26 >> 2] = $27; //@line 17697
  $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 17698
  HEAP32[$28 >> 2] = $6; //@line 17699
  sp = STACKTOP; //@line 17700
  STACKTOP = sp; //@line 17701
  return;
 }
 ___async_unwind = 0; //@line 17703
 HEAP32[$ReallocAsyncCtx4 >> 2] = 251; //@line 17704
 $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 17705
 HEAP32[$24 >> 2] = $2; //@line 17706
 $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 17707
 HEAP32[$25 >> 2] = $4; //@line 17708
 $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 17709
 HEAP32[$26 >> 2] = $27; //@line 17710
 $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 17711
 HEAP32[$28 >> 2] = $6; //@line 17712
 sp = STACKTOP; //@line 17713
 STACKTOP = sp; //@line 17714
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 9957
 STACKTOP = STACKTOP + 224 | 0; //@line 9958
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 9958
 $3 = sp + 120 | 0; //@line 9959
 $4 = sp + 80 | 0; //@line 9960
 $5 = sp; //@line 9961
 $6 = sp + 136 | 0; //@line 9962
 dest = $4; //@line 9963
 stop = dest + 40 | 0; //@line 9963
 do {
  HEAP32[dest >> 2] = 0; //@line 9963
  dest = dest + 4 | 0; //@line 9963
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 9965
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 9969
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 9976
  } else {
   $43 = 0; //@line 9978
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 9980
  $14 = $13 & 32; //@line 9981
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 9987
  }
  $19 = $0 + 48 | 0; //@line 9989
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 9994
    $24 = HEAP32[$23 >> 2] | 0; //@line 9995
    HEAP32[$23 >> 2] = $6; //@line 9996
    $25 = $0 + 28 | 0; //@line 9997
    HEAP32[$25 >> 2] = $6; //@line 9998
    $26 = $0 + 20 | 0; //@line 9999
    HEAP32[$26 >> 2] = $6; //@line 10000
    HEAP32[$19 >> 2] = 80; //@line 10001
    $28 = $0 + 16 | 0; //@line 10003
    HEAP32[$28 >> 2] = $6 + 80; //@line 10004
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 10005
    if (!$24) {
     $$1 = $29; //@line 10008
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 10011
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 10012
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 10013
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 315; //@line 10016
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 10018
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 10020
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 10022
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 10024
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 10026
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 10028
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 10030
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 10032
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 10034
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 10036
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 10038
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 10040
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 10042
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 10044
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 10046
      sp = STACKTOP; //@line 10047
      STACKTOP = sp; //@line 10048
      return 0; //@line 10048
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10050
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 10053
      HEAP32[$23 >> 2] = $24; //@line 10054
      HEAP32[$19 >> 2] = 0; //@line 10055
      HEAP32[$28 >> 2] = 0; //@line 10056
      HEAP32[$25 >> 2] = 0; //@line 10057
      HEAP32[$26 >> 2] = 0; //@line 10058
      $$1 = $$; //@line 10059
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 10065
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 10068
  HEAP32[$0 >> 2] = $51 | $14; //@line 10073
  if ($43 | 0) {
   ___unlockfile($0); //@line 10076
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 10078
 }
 STACKTOP = sp; //@line 10080
 return $$0 | 0; //@line 10080
}
function _main__async_cb_176($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12669
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12671
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12673
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12675
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12677
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12679
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12681
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12683
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12685
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12687
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12689
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12691
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12693
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12695
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12697
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12699
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12701
 if (($AsyncRetVal | 0) == 4) {
  HEAP32[$12 >> 2] = (_llvm_bswap_i32(HEAP32[$10 >> 2] | 0) | 0) + 2085978496; //@line 12707
  HEAP32[$14 >> 2] = _ctime($12 | 0) | 0; //@line 12709
  _printf(3150, $14) | 0; //@line 12710
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(64) | 0; //@line 12711
  __ZN6Socket5closeEv($18) | 0; //@line 12712
  if (!___async) {
   ___async_unwind = 0; //@line 12715
  }
  HEAP32[$ReallocAsyncCtx7 >> 2] = 301; //@line 12717
  HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 12719
  HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 12721
  HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 12723
  HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 12725
  HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 12727
  HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 12729
  HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 12731
  HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 12733
  HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 12735
  HEAP32[$ReallocAsyncCtx7 + 40 >> 2] = $20; //@line 12737
  HEAP32[$ReallocAsyncCtx7 + 44 >> 2] = $22; //@line 12739
  HEAP32[$ReallocAsyncCtx7 + 48 >> 2] = $24; //@line 12741
  HEAP32[$ReallocAsyncCtx7 + 52 >> 2] = $26; //@line 12743
  HEAP32[$ReallocAsyncCtx7 + 56 >> 2] = $28; //@line 12745
  HEAP32[$ReallocAsyncCtx7 + 60 >> 2] = $30; //@line 12747
  sp = STACKTOP; //@line 12748
  return;
 } else {
  HEAP32[$26 >> 2] = $AsyncRetVal; //@line 12751
  _printf(3128, $26) | 0; //@line 12752
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(64) | 0; //@line 12753
  _wait_ms(1e4); //@line 12754
  if (!___async) {
   ___async_unwind = 0; //@line 12757
  }
  HEAP32[$ReallocAsyncCtx9 >> 2] = 300; //@line 12759
  HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 12761
  HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 12763
  HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $6; //@line 12765
  HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 12767
  HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $10; //@line 12769
  HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $12; //@line 12771
  HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $14; //@line 12773
  HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $16; //@line 12775
  HEAP32[$ReallocAsyncCtx9 + 36 >> 2] = $18; //@line 12777
  HEAP32[$ReallocAsyncCtx9 + 40 >> 2] = $20; //@line 12779
  HEAP32[$ReallocAsyncCtx9 + 44 >> 2] = $22; //@line 12781
  HEAP32[$ReallocAsyncCtx9 + 48 >> 2] = $24; //@line 12783
  HEAP32[$ReallocAsyncCtx9 + 52 >> 2] = $26; //@line 12785
  HEAP32[$ReallocAsyncCtx9 + 56 >> 2] = $28; //@line 12787
  HEAP32[$ReallocAsyncCtx9 + 60 >> 2] = $30; //@line 12789
  sp = STACKTOP; //@line 12790
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_197($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16126
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16128
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16130
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16132
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16134
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16136
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16141
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16143
 if (HEAP8[$0 + 24 >> 0] & 1) {
  HEAP8[7580] = 1; //@line 16145
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 16146
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 16147
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 16150
   $33 = $ReallocAsyncCtx13 + 4 | 0; //@line 16151
   HEAP32[$33 >> 2] = $6; //@line 16152
   $34 = $ReallocAsyncCtx13 + 8 | 0; //@line 16153
   HEAP32[$34 >> 2] = $16; //@line 16154
   sp = STACKTOP; //@line 16155
   return;
  }
  ___async_unwind = 0; //@line 16158
  HEAP32[$ReallocAsyncCtx13 >> 2] = 171; //@line 16159
  $33 = $ReallocAsyncCtx13 + 4 | 0; //@line 16160
  HEAP32[$33 >> 2] = $6; //@line 16161
  $34 = $ReallocAsyncCtx13 + 8 | 0; //@line 16162
  HEAP32[$34 >> 2] = $16; //@line 16163
  sp = STACKTOP; //@line 16164
  return;
 }
 $17 = HEAP32[$10 >> 2] | 0; //@line 16167
 if ($17 | 0) {
  __ZdlPv($17); //@line 16170
 }
 $19 = HEAP32[$2 >> 2] | 0; //@line 16172
 if ($19 | 0) {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 16176
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 16177
  FUNCTION_TABLE_vi[$22 & 511]($8); //@line 16178
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 169; //@line 16181
   $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 16182
   HEAP32[$23 >> 2] = $4; //@line 16183
   $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 16184
   HEAP32[$24 >> 2] = $14; //@line 16185
   $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 16186
   HEAP32[$25 >> 2] = $16; //@line 16187
   sp = STACKTOP; //@line 16188
   return;
  }
  ___async_unwind = 0; //@line 16191
  HEAP32[$ReallocAsyncCtx9 >> 2] = 169; //@line 16192
  $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 16193
  HEAP32[$23 >> 2] = $4; //@line 16194
  $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 16195
  HEAP32[$24 >> 2] = $14; //@line 16196
  $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 16197
  HEAP32[$25 >> 2] = $16; //@line 16198
  sp = STACKTOP; //@line 16199
  return;
 }
 $27 = HEAP32[$4 + 28 >> 2] | 0; //@line 16203
 if (!$27) {
  __ZdlPv($4); //@line 16206
  HEAP32[___async_retval >> 2] = -3007; //@line 16208
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 16212
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 16213
 FUNCTION_TABLE_vi[$30 & 511]($14); //@line 16214
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 16217
  $31 = $ReallocAsyncCtx10 + 4 | 0; //@line 16218
  HEAP32[$31 >> 2] = $4; //@line 16219
  $32 = $ReallocAsyncCtx10 + 8 | 0; //@line 16220
  HEAP32[$32 >> 2] = $16; //@line 16221
  sp = STACKTOP; //@line 16222
  return;
 }
 ___async_unwind = 0; //@line 16225
 HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 16226
 $31 = $ReallocAsyncCtx10 + 4 | 0; //@line 16227
 HEAP32[$31 >> 2] = $4; //@line 16228
 $32 = $ReallocAsyncCtx10 + 8 | 0; //@line 16229
 HEAP32[$32 >> 2] = $16; //@line 16230
 sp = STACKTOP; //@line 16231
 return;
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14517
 STACKTOP = STACKTOP + 64 | 0; //@line 14518
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14518
 $4 = sp; //@line 14519
 $5 = HEAP32[$0 >> 2] | 0; //@line 14520
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 14523
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 14525
 HEAP32[$4 >> 2] = $2; //@line 14526
 HEAP32[$4 + 4 >> 2] = $0; //@line 14528
 HEAP32[$4 + 8 >> 2] = $1; //@line 14530
 HEAP32[$4 + 12 >> 2] = $3; //@line 14532
 $14 = $4 + 16 | 0; //@line 14533
 $15 = $4 + 20 | 0; //@line 14534
 $16 = $4 + 24 | 0; //@line 14535
 $17 = $4 + 28 | 0; //@line 14536
 $18 = $4 + 32 | 0; //@line 14537
 $19 = $4 + 40 | 0; //@line 14538
 dest = $14; //@line 14539
 stop = dest + 36 | 0; //@line 14539
 do {
  HEAP32[dest >> 2] = 0; //@line 14539
  dest = dest + 4 | 0; //@line 14539
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 14539
 HEAP8[$14 + 38 >> 0] = 0; //@line 14539
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 14544
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 14547
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14548
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 14549
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 334; //@line 14552
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 14554
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 14556
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 14558
    sp = STACKTOP; //@line 14559
    STACKTOP = sp; //@line 14560
    return 0; //@line 14560
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14562
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 14566
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 14570
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 14573
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14574
   FUNCTION_TABLE_viiiii[$33 & 3]($10, $4, $8, 1, 0); //@line 14575
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 335; //@line 14578
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 14580
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 14582
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 14584
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 14586
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 14588
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 14590
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 14592
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 14594
    sp = STACKTOP; //@line 14595
    STACKTOP = sp; //@line 14596
    return 0; //@line 14596
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14598
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 14612
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 14620
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 14636
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 14641
  }
 } while (0);
 STACKTOP = sp; //@line 14644
 return $$0 | 0; //@line 14644
}
function __ZN9UDPSocket6sendtoEPKctPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5245
 STACKTOP = STACKTOP + 112 | 0; //@line 5246
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 5246
 $$byval_copy = sp + 88 | 0; //@line 5247
 $5 = sp + 24 | 0; //@line 5248
 $6 = sp; //@line 5249
 HEAP32[$6 >> 2] = 0; //@line 5250
 HEAP32[$6 + 4 >> 2] = 0; //@line 5250
 HEAP32[$6 + 8 >> 2] = 0; //@line 5250
 HEAP32[$6 + 12 >> 2] = 0; //@line 5250
 HEAP32[$6 + 16 >> 2] = 0; //@line 5250
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 5251
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 5251
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 5251
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 5251
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 5251
 __ZN13SocketAddressC2E10nsapi_addrt($5, $$byval_copy, 0); //@line 5252
 $7 = $0 + 4 | 0; //@line 5253
 $8 = HEAP32[$7 >> 2] | 0; //@line 5254
 $10 = HEAP32[HEAP32[$8 >> 2] >> 2] | 0; //@line 5256
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5257
 $11 = FUNCTION_TABLE_iiiii[$10 & 15]($8, $1, $5, 0) | 0; //@line 5258
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 138; //@line 5261
  HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 5263
  HEAP16[$AsyncCtx + 8 >> 1] = $2; //@line 5265
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5267
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 5269
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 5271
  HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 5273
  HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 5275
  sp = STACKTOP; //@line 5276
  STACKTOP = sp; //@line 5277
  return 0; //@line 5277
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5279
 if ($11 | 0) {
  $$0 = -3009; //@line 5282
  STACKTOP = sp; //@line 5283
  return $$0 | 0; //@line 5283
 }
 __ZN13SocketAddress8set_portEt($5, $2); //@line 5285
 $20 = $0 + 8 | 0; //@line 5286
 $21 = $0 + 52 | 0; //@line 5287
 $22 = $0 + 12 | 0; //@line 5288
 while (1) {
  $23 = HEAP32[$20 >> 2] | 0; //@line 5290
  if (!$23) {
   $$0 = -3005; //@line 5293
   label = 9; //@line 5294
   break;
  }
  HEAP32[$21 >> 2] = 0; //@line 5297
  $25 = HEAP32[$7 >> 2] | 0; //@line 5298
  $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 76 >> 2] | 0; //@line 5301
  $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5302
  $29 = FUNCTION_TABLE_iiiiii[$28 & 7]($25, $23, $5, $3, $4) | 0; //@line 5303
  if (___async) {
   label = 7; //@line 5306
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5309
  if (($29 | 0) != -3001 | (HEAP32[$22 >> 2] | 0) == 0) {
   $$0 = $29; //@line 5315
   label = 9; //@line 5316
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx3 >> 2] = 139; //@line 5321
  HEAP32[$AsyncCtx3 + 4 >> 2] = $22; //@line 5323
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 5325
  HEAP32[$AsyncCtx3 + 12 >> 2] = $20; //@line 5327
  HEAP32[$AsyncCtx3 + 16 >> 2] = $21; //@line 5329
  HEAP32[$AsyncCtx3 + 20 >> 2] = $7; //@line 5331
  HEAP32[$AsyncCtx3 + 24 >> 2] = $5; //@line 5333
  HEAP32[$AsyncCtx3 + 28 >> 2] = $3; //@line 5335
  HEAP32[$AsyncCtx3 + 32 >> 2] = $4; //@line 5337
  sp = STACKTOP; //@line 5338
  STACKTOP = sp; //@line 5339
  return 0; //@line 5339
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 5342
  return $$0 | 0; //@line 5342
 }
 return 0; //@line 5344
}
function _main__async_cb_177($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $48 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12800
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12802
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12804
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12806
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12808
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12810
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12812
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12814
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12816
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12818
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12820
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12822
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12824
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12826
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12828
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12830
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12832
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 12835
  _printf(3103, $20) | 0; //@line 12836
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(64) | 0; //@line 12837
  _wait_ms(1e4); //@line 12838
  if (!___async) {
   ___async_unwind = 0; //@line 12841
  }
  HEAP32[$ReallocAsyncCtx10 >> 2] = 298; //@line 12843
  HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 12845
  HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 12847
  HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $6; //@line 12849
  HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $8; //@line 12851
  HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $10; //@line 12853
  HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $12; //@line 12855
  HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $14; //@line 12857
  HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $16; //@line 12859
  HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $18; //@line 12861
  HEAP32[$ReallocAsyncCtx10 + 40 >> 2] = $20; //@line 12863
  HEAP32[$ReallocAsyncCtx10 + 44 >> 2] = $22; //@line 12865
  HEAP32[$ReallocAsyncCtx10 + 48 >> 2] = $24; //@line 12867
  HEAP32[$ReallocAsyncCtx10 + 52 >> 2] = $26; //@line 12869
  HEAP32[$ReallocAsyncCtx10 + 56 >> 2] = $28; //@line 12871
  HEAP32[$ReallocAsyncCtx10 + 60 >> 2] = $30; //@line 12873
  sp = STACKTOP; //@line 12874
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 12877
  $48 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($4, 0, $6, 4) | 0; //@line 12878
  if (!___async) {
   HEAP32[___async_retval >> 2] = $48; //@line 12882
   ___async_unwind = 0; //@line 12883
  }
  HEAP32[$ReallocAsyncCtx4 >> 2] = 299; //@line 12885
  HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 12887
  HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 12889
  HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 12891
  HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 12893
  HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 12895
  HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $12; //@line 12897
  HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $14; //@line 12899
  HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $16; //@line 12901
  HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $18; //@line 12903
  HEAP32[$ReallocAsyncCtx4 + 40 >> 2] = $20; //@line 12905
  HEAP32[$ReallocAsyncCtx4 + 44 >> 2] = $22; //@line 12907
  HEAP32[$ReallocAsyncCtx4 + 48 >> 2] = $24; //@line 12909
  HEAP32[$ReallocAsyncCtx4 + 52 >> 2] = $26; //@line 12911
  HEAP32[$ReallocAsyncCtx4 + 56 >> 2] = $28; //@line 12913
  HEAP32[$ReallocAsyncCtx4 + 60 >> 2] = $30; //@line 12915
  sp = STACKTOP; //@line 12916
  return;
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_152($0) {
 $0 = $0 | 0;
 var $$pre74 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 6984
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6986
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6988
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6990
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6992
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6994
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6996
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6998
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7000
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7002
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7004
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7008
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7010
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7012
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7014
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 7016
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 7018
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 7020
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 7022
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 7024
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 7026
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 7028
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 7030
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 7032
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 7034
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 7036
 $$pre74 = HEAP32[$24 >> 2] | 0; //@line 7038
 HEAP32[$6 >> 2] = HEAP32[HEAP32[$0 + 44 >> 2] >> 2]; //@line 7039
 $53 = HEAP32[$$pre74 >> 2] | 0; //@line 7040
 HEAP32[$8 >> 2] = 0; //@line 7041
 HEAP32[$10 >> 2] = 180; //@line 7042
 HEAP32[$12 >> 2] = $53; //@line 7043
 HEAP32[$14 >> 2] = 724; //@line 7044
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 7045
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 0, $18) | 0; //@line 7046
 if (!___async) {
  ___async_unwind = 0; //@line 7049
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 7051
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 7053
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $4; //@line 7055
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $6; //@line 7057
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $8; //@line 7059
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $10; //@line 7061
 HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $12; //@line 7063
 HEAP32[$ReallocAsyncCtx13 + 28 >> 2] = $14; //@line 7065
 HEAP32[$ReallocAsyncCtx13 + 32 >> 2] = $16; //@line 7067
 HEAP32[$ReallocAsyncCtx13 + 36 >> 2] = $18; //@line 7069
 HEAP32[$ReallocAsyncCtx13 + 40 >> 2] = $42; //@line 7071
 HEAP32[$ReallocAsyncCtx13 + 44 >> 2] = $20; //@line 7073
 HEAP32[$ReallocAsyncCtx13 + 48 >> 2] = $26; //@line 7075
 HEAP32[$ReallocAsyncCtx13 + 52 >> 2] = $28; //@line 7077
 HEAP32[$ReallocAsyncCtx13 + 56 >> 2] = $30; //@line 7079
 HEAP32[$ReallocAsyncCtx13 + 60 >> 2] = $32; //@line 7081
 HEAP32[$ReallocAsyncCtx13 + 64 >> 2] = $34; //@line 7083
 HEAP32[$ReallocAsyncCtx13 + 68 >> 2] = $36; //@line 7085
 HEAP32[$ReallocAsyncCtx13 + 72 >> 2] = $38; //@line 7087
 HEAP32[$ReallocAsyncCtx13 + 76 >> 2] = $40; //@line 7089
 HEAP32[$ReallocAsyncCtx13 + 80 >> 2] = $44; //@line 7091
 HEAP32[$ReallocAsyncCtx13 + 84 >> 2] = $46; //@line 7093
 HEAP32[$ReallocAsyncCtx13 + 88 >> 2] = $48; //@line 7095
 HEAP32[$ReallocAsyncCtx13 + 92 >> 2] = $50; //@line 7097
 HEAP32[$ReallocAsyncCtx13 + 96 >> 2] = $52; //@line 7099
 HEAP32[$ReallocAsyncCtx13 + 100 >> 2] = $24; //@line 7101
 sp = STACKTOP; //@line 7102
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 5101
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5103
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5105
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5107
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5109
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5111
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5113
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5115
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5117
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 5119
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 5121
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 5123
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 5125
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 5127
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 5129
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 5131
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 5133
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 5135
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 5137
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 5139
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 5141
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 5143
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 5145
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 5147
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 5149
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 5153
 $$pre = HEAP32[$22 >> 2] | 0; //@line 5155
 HEAP32[$24 >> 2] = HEAP32[HEAP32[$0 + 100 >> 2] >> 2]; //@line 5156
 $53 = HEAP32[$$pre >> 2] | 0; //@line 5157
 HEAP32[$26 >> 2] = 0; //@line 5158
 HEAP32[$28 >> 2] = 175; //@line 5159
 HEAP32[$30 >> 2] = $53; //@line 5160
 HEAP32[$32 >> 2] = 724; //@line 5161
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 5162
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($34, 0, $36) | 0; //@line 5163
 if (!___async) {
  ___async_unwind = 0; //@line 5166
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 176; //@line 5168
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 5170
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 5172
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $6; //@line 5174
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $8; //@line 5176
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $10; //@line 5178
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $12; //@line 5180
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $14; //@line 5182
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $16; //@line 5184
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $18; //@line 5186
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $40; //@line 5188
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $20; //@line 5190
 HEAP32[$ReallocAsyncCtx14 + 48 >> 2] = $24; //@line 5192
 HEAP32[$ReallocAsyncCtx14 + 52 >> 2] = $26; //@line 5194
 HEAP32[$ReallocAsyncCtx14 + 56 >> 2] = $28; //@line 5196
 HEAP32[$ReallocAsyncCtx14 + 60 >> 2] = $30; //@line 5198
 HEAP32[$ReallocAsyncCtx14 + 64 >> 2] = $32; //@line 5200
 HEAP32[$ReallocAsyncCtx14 + 68 >> 2] = $34; //@line 5202
 HEAP32[$ReallocAsyncCtx14 + 72 >> 2] = $36; //@line 5204
 HEAP32[$ReallocAsyncCtx14 + 76 >> 2] = $38; //@line 5206
 HEAP32[$ReallocAsyncCtx14 + 80 >> 2] = $42; //@line 5208
 HEAP32[$ReallocAsyncCtx14 + 84 >> 2] = $44; //@line 5210
 HEAP32[$ReallocAsyncCtx14 + 88 >> 2] = $46; //@line 5212
 HEAP32[$ReallocAsyncCtx14 + 92 >> 2] = $48; //@line 5214
 HEAP32[$ReallocAsyncCtx14 + 96 >> 2] = $52; //@line 5216
 HEAP32[$ReallocAsyncCtx14 + 100 >> 2] = $22; //@line 5218
 sp = STACKTOP; //@line 5219
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22891
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22893
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22895
 $6 = HEAP32[$2 + 60 >> 2] | 0; //@line 22897
 do {
  if ($6 | 0) {
   $9 = HEAP32[$6 + 12 >> 2] | 0; //@line 22902
   if (!$9) {
    __ZdlPv($6); //@line 22905
    break;
   }
   $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 22909
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 22910
   FUNCTION_TABLE_vi[$12 & 511]($6); //@line 22911
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 22914
    $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 22915
    HEAP32[$13 >> 2] = $6; //@line 22916
    $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 22917
    HEAP32[$14 >> 2] = $2; //@line 22918
    $15 = $ReallocAsyncCtx2 + 12 | 0; //@line 22919
    HEAP32[$15 >> 2] = $4; //@line 22920
    sp = STACKTOP; //@line 22921
    return;
   }
   ___async_unwind = 0; //@line 22924
   HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 22925
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 22926
   HEAP32[$13 >> 2] = $6; //@line 22927
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 22928
   HEAP32[$14 >> 2] = $2; //@line 22929
   $15 = $ReallocAsyncCtx2 + 12 | 0; //@line 22930
   HEAP32[$15 >> 2] = $4; //@line 22931
   sp = STACKTOP; //@line 22932
   return;
  }
 } while (0);
 $17 = HEAP32[$2 + 64 >> 2] | 0; //@line 22937
 if ($17 | 0) {
  __ZdaPv($17); //@line 22940
 }
 $20 = HEAP32[$2 + 12 >> 2] | 0; //@line 22943
 if ($20 | 0) {
  __ZdlPv($20); //@line 22946
 }
 $23 = HEAP32[$2 + 44 >> 2] | 0; //@line 22949
 if ($23 | 0) {
  $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 22954
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 22955
  FUNCTION_TABLE_vi[$27 & 511]($2 + 32 | 0); //@line 22956
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 22959
   $28 = $ReallocAsyncCtx3 + 4 | 0; //@line 22960
   HEAP32[$28 >> 2] = $2; //@line 22961
   $29 = $ReallocAsyncCtx3 + 8 | 0; //@line 22962
   HEAP32[$29 >> 2] = $4; //@line 22963
   sp = STACKTOP; //@line 22964
   return;
  }
  ___async_unwind = 0; //@line 22967
  HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 22968
  $28 = $ReallocAsyncCtx3 + 4 | 0; //@line 22969
  HEAP32[$28 >> 2] = $2; //@line 22970
  $29 = $ReallocAsyncCtx3 + 8 | 0; //@line 22971
  HEAP32[$29 >> 2] = $4; //@line 22972
  sp = STACKTOP; //@line 22973
  return;
 }
 $31 = HEAP32[$2 + 28 >> 2] | 0; //@line 22977
 if (!$31) {
  __ZdlPv($2); //@line 22980
  HEAP32[6700 + ($4 << 2) >> 2] = 0; //@line 22982
  return;
 }
 $35 = HEAP32[$31 + 8 >> 2] | 0; //@line 22987
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22988
 FUNCTION_TABLE_vi[$35 & 511]($2 + 16 | 0); //@line 22989
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 22992
  $36 = $ReallocAsyncCtx4 + 4 | 0; //@line 22993
  HEAP32[$36 >> 2] = $2; //@line 22994
  $37 = $ReallocAsyncCtx4 + 8 | 0; //@line 22995
  HEAP32[$37 >> 2] = $4; //@line 22996
  sp = STACKTOP; //@line 22997
  return;
 }
 ___async_unwind = 0; //@line 23000
 HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 23001
 $36 = $ReallocAsyncCtx4 + 4 | 0; //@line 23002
 HEAP32[$36 >> 2] = $2; //@line 23003
 $37 = $ReallocAsyncCtx4 + 8 | 0; //@line 23004
 HEAP32[$37 >> 2] = $4; //@line 23005
 sp = STACKTOP; //@line 23006
 return;
}
function _stoip6($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$0$lcssa6667 = 0, $$015$i = 0, $$016$i = 0, $$04857 = 0, $$049 = 0, $$050$lcssa = 0, $$05056 = 0, $$052$lcssa = 0, $$052$lcssa6568 = 0, $$05255 = 0, $$058 = 0, $$1 = 0, $$151 = 0, $$sink18$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $6 = 0, $9 = 0;
 if ($1 >>> 0 > 39) {
  return;
 }
 $4 = $0; //@line 2545
 do {
  if (!$1) {
   $$0$lcssa6667 = $2; //@line 2549
   $$052$lcssa6568 = 0; //@line 2549
  } else {
   $$04857 = $0; //@line 2551
   $$05056 = -1; //@line 2551
   $$05255 = 0; //@line 2551
   $$058 = $2; //@line 2551
   while (1) {
    $6 = HEAP8[$$04857 >> 0] | 0; //@line 2553
    if ($$05255 << 24 >> 24 < 8 & $6 << 24 >> 24 != 0) {
     $$049 = $$04857; //@line 2558
     $9 = $6; //@line 2558
    } else {
     $$0$lcssa = $$058; //@line 2560
     $$050$lcssa = $$05056; //@line 2560
     $$052$lcssa = $$05255; //@line 2560
     break;
    }
    L7 : while (1) {
     switch ($9 << 24 >> 24) {
     case 58:
     case 0:
      {
       $$015$i = $$04857; //@line 2566
       $$016$i = 0; //@line 2566
       $13 = $6; //@line 2566
       break L7;
       break;
      }
     default:
      {}
     }
     $10 = $$049 + 1 | 0; //@line 2573
     $$049 = $10; //@line 2575
     $9 = HEAP8[$10 >> 0] | 0; //@line 2575
    }
    while (1) {
     $11 = $$015$i + 1 | 0; //@line 2578
     $12 = $13 << 24 >> 24; //@line 2579
     if (($13 + -48 & 255) < 10) {
      $$sink18$i = -48; //@line 2583
     } else {
      if (($13 + -65 & 255) < 6) {
       $$sink18$i = -55; //@line 2588
      } else {
       if (($13 + -97 & 255) < 6) {
        $$sink18$i = 65449; //@line 2593
       } else {
        break;
       }
      }
     }
     $$015$i = $11; //@line 2605
     $$016$i = ($$sink18$i + $12 | ($$016$i & 65535) << 4) & 65535; //@line 2605
     $13 = HEAP8[$11 >> 0] | 0; //@line 2605
    }
    $21 = _common_write_16_bit($$016$i, $$058) | 0; //@line 2607
    $22 = $$05255 + 1 << 24 >> 24; //@line 2608
    if (($$049 - $4 | 0) >>> 0 < $1 >>> 0) {
     if ((HEAP8[$$049 >> 0] | 0) == 58) {
      $27 = $$049 + 1 | 0; //@line 2616
      $29 = (HEAP8[$27 >> 0] | 0) == 58; //@line 2618
      $$1 = $29 ? $27 : $$049; //@line 2621
      $$151 = $29 ? $22 : $$05056; //@line 2621
     } else {
      $$1 = $$049; //@line 2623
      $$151 = $$05056; //@line 2623
     }
    } else {
     $$1 = $$049; //@line 2626
     $$151 = $$05056; //@line 2626
    }
    $$04857 = $$1 + 1 | 0; //@line 2628
    if (($$04857 - $4 | 0) >>> 0 >= $1 >>> 0) {
     $$0$lcssa = $21; //@line 2635
     $$050$lcssa = $$151; //@line 2635
     $$052$lcssa = $22; //@line 2635
     break;
    } else {
     $$05056 = $$151; //@line 2633
     $$05255 = $22; //@line 2633
     $$058 = $21; //@line 2633
    }
   }
   if ($$050$lcssa << 24 >> 24 == -1) {
    if ($$052$lcssa << 24 >> 24 != 8) {
     $$0$lcssa6667 = $$0$lcssa; //@line 2643
     $$052$lcssa6568 = $$052$lcssa; //@line 2643
     break;
    }
    return;
   } else {
    $36 = $$050$lcssa << 24 >> 24 << 1; //@line 2649
    $39 = 8 - ($$052$lcssa << 24 >> 24) << 1; //@line 2652
    $42 = $39 & 254; //@line 2655
    $44 = $2 + ($36 & 254) | 0; //@line 2657
    _memmove($44 + $42 | 0, $44 | 0, 16 - $36 - $39 & 254 | 0) | 0; //@line 2660
    _memset($44 | 0, 0, $42 | 0) | 0; //@line 2661
    return;
   }
  }
 } while (0);
 _memset($$0$lcssa6667 | 0, 0, 16 - ($$052$lcssa6568 << 24 >> 24 << 1) | 0) | 0; //@line 2669
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_209($0) {
 $0 = $0 | 0;
 var $$049 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17524
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17526
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17528
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17530
 if (!(HEAP32[$4 + 48 >> 2] | 0)) {
  $$049 = 0; //@line 17537
 } else {
  $$049 = HEAPU8[HEAP32[$0 + 16 >> 2] >> 0] | 0; //@line 17541
 }
 $14 = $4 + 28 | 0; //@line 17543
 $15 = HEAP32[$14 >> 2] | 0; //@line 17544
 if (!$15) {
  $26 = $2 + 12 | 0; //@line 17547
  HEAP32[$26 >> 2] = 0; //@line 17548
  $27 = HEAP32[$4 >> 2] | 0; //@line 17549
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 17550
  __ZL28nsapi_dns_query_async_deletei($27); //@line 17551
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 253; //@line 17554
   $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 17555
   HEAP32[$28 >> 2] = $26; //@line 17556
   $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 17557
   HEAP32[$29 >> 2] = $2; //@line 17558
   $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 17559
   HEAP32[$30 >> 2] = $6; //@line 17560
   $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 17561
   HEAP32[$31 >> 2] = $$049; //@line 17562
   sp = STACKTOP; //@line 17563
   return;
  }
  ___async_unwind = 0; //@line 17566
  HEAP32[$ReallocAsyncCtx6 >> 2] = 253; //@line 17567
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 17568
  HEAP32[$28 >> 2] = $26; //@line 17569
  $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 17570
  HEAP32[$29 >> 2] = $2; //@line 17571
  $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 17572
  HEAP32[$30 >> 2] = $6; //@line 17573
  $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 17574
  HEAP32[$31 >> 2] = $$049; //@line 17575
  sp = STACKTOP; //@line 17576
  return;
 } else {
  $19 = HEAP32[$15 + 4 >> 2] | 0; //@line 17581
  $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 17582
  FUNCTION_TABLE_vii[$19 & 7]($2, $4 + 16 | 0); //@line 17583
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 252; //@line 17586
   $20 = $ReallocAsyncCtx + 4 | 0; //@line 17587
   HEAP32[$20 >> 2] = $14; //@line 17588
   $21 = $ReallocAsyncCtx + 8 | 0; //@line 17589
   HEAP32[$21 >> 2] = $2; //@line 17590
   $22 = $ReallocAsyncCtx + 12 | 0; //@line 17591
   HEAP32[$22 >> 2] = $4; //@line 17592
   $23 = $ReallocAsyncCtx + 16 | 0; //@line 17593
   HEAP32[$23 >> 2] = $2; //@line 17594
   $24 = $ReallocAsyncCtx + 20 | 0; //@line 17595
   HEAP32[$24 >> 2] = $6; //@line 17596
   $25 = $ReallocAsyncCtx + 24 | 0; //@line 17597
   HEAP32[$25 >> 2] = $$049; //@line 17598
   sp = STACKTOP; //@line 17599
   return;
  }
  ___async_unwind = 0; //@line 17602
  HEAP32[$ReallocAsyncCtx >> 2] = 252; //@line 17603
  $20 = $ReallocAsyncCtx + 4 | 0; //@line 17604
  HEAP32[$20 >> 2] = $14; //@line 17605
  $21 = $ReallocAsyncCtx + 8 | 0; //@line 17606
  HEAP32[$21 >> 2] = $2; //@line 17607
  $22 = $ReallocAsyncCtx + 12 | 0; //@line 17608
  HEAP32[$22 >> 2] = $4; //@line 17609
  $23 = $ReallocAsyncCtx + 16 | 0; //@line 17610
  HEAP32[$23 >> 2] = $2; //@line 17611
  $24 = $ReallocAsyncCtx + 20 | 0; //@line 17612
  HEAP32[$24 >> 2] = $6; //@line 17613
  $25 = $ReallocAsyncCtx + 24 | 0; //@line 17614
  HEAP32[$25 >> 2] = $$049; //@line 17615
  sp = STACKTOP; //@line 17616
  return;
 }
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 9829
 $7 = ($2 | 0) != 0; //@line 9833
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 9837
   $$03555 = $0; //@line 9838
   $$03654 = $2; //@line 9838
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 9843
     $$036$lcssa64 = $$03654; //@line 9843
     label = 6; //@line 9844
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 9847
    $12 = $$03654 + -1 | 0; //@line 9848
    $16 = ($12 | 0) != 0; //@line 9852
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 9855
     $$03654 = $12; //@line 9855
    } else {
     $$035$lcssa = $11; //@line 9857
     $$036$lcssa = $12; //@line 9857
     $$lcssa = $16; //@line 9857
     label = 5; //@line 9858
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 9863
   $$036$lcssa = $2; //@line 9863
   $$lcssa = $7; //@line 9863
   label = 5; //@line 9864
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 9869
   $$036$lcssa64 = $$036$lcssa; //@line 9869
   label = 6; //@line 9870
  } else {
   $$2 = $$035$lcssa; //@line 9872
   $$3 = 0; //@line 9872
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 9878
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 9881
    $$3 = $$036$lcssa64; //@line 9881
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 9883
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 9887
      $$13745 = $$036$lcssa64; //@line 9887
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 9890
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 9899
       $30 = $$13745 + -4 | 0; //@line 9900
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 9903
        $$13745 = $30; //@line 9903
       } else {
        $$0$lcssa = $29; //@line 9905
        $$137$lcssa = $30; //@line 9905
        label = 11; //@line 9906
        break L11;
       }
      }
      $$140 = $$046; //@line 9910
      $$23839 = $$13745; //@line 9910
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 9912
      $$137$lcssa = $$036$lcssa64; //@line 9912
      label = 11; //@line 9913
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 9919
      $$3 = 0; //@line 9919
      break;
     } else {
      $$140 = $$0$lcssa; //@line 9922
      $$23839 = $$137$lcssa; //@line 9922
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 9929
      $$3 = $$23839; //@line 9929
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 9932
     $$23839 = $$23839 + -1 | 0; //@line 9933
     if (!$$23839) {
      $$2 = $35; //@line 9936
      $$3 = 0; //@line 9936
      break;
     } else {
      $$140 = $35; //@line 9939
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 9947
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 5358
 do {
  if (!$0) {
   do {
    if (!(HEAP32[251] | 0)) {
     $34 = 0; //@line 5366
    } else {
     $12 = HEAP32[251] | 0; //@line 5368
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5369
     $13 = _fflush($12) | 0; //@line 5370
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 311; //@line 5373
      sp = STACKTOP; //@line 5374
      return 0; //@line 5375
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 5377
      $34 = $13; //@line 5378
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 5384
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 5388
    } else {
     $$02327 = $$02325; //@line 5390
     $$02426 = $34; //@line 5390
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 5397
      } else {
       $28 = 0; //@line 5399
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5407
       $25 = ___fflush_unlocked($$02327) | 0; //@line 5408
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 5413
       $$1 = $25 | $$02426; //@line 5415
      } else {
       $$1 = $$02426; //@line 5417
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 5421
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 5424
      if (!$$023) {
       $$024$lcssa = $$1; //@line 5427
       break L9;
      } else {
       $$02327 = $$023; //@line 5430
       $$02426 = $$1; //@line 5430
      }
     }
     HEAP32[$AsyncCtx >> 2] = 312; //@line 5433
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 5435
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 5437
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 5439
     sp = STACKTOP; //@line 5440
     return 0; //@line 5441
    }
   } while (0);
   ___ofl_unlock(); //@line 5444
   $$0 = $$024$lcssa; //@line 5445
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5451
    $5 = ___fflush_unlocked($0) | 0; //@line 5452
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 309; //@line 5455
     sp = STACKTOP; //@line 5456
     return 0; //@line 5457
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5459
     $$0 = $5; //@line 5460
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 5465
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5466
   $7 = ___fflush_unlocked($0) | 0; //@line 5467
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 310; //@line 5470
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 5473
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5475
    sp = STACKTOP; //@line 5476
    return 0; //@line 5477
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5479
   if ($phitmp) {
    $$0 = $7; //@line 5481
   } else {
    ___unlockfile($0); //@line 5483
    $$0 = $7; //@line 5484
   }
  }
 } while (0);
 return $$0 | 0; //@line 5488
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14699
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14705
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 14711
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 14714
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14715
    FUNCTION_TABLE_viiiii[$53 & 3]($50, $1, $2, $3, $4); //@line 14716
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 338; //@line 14719
     sp = STACKTOP; //@line 14720
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14723
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 14731
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 14736
     $19 = $1 + 44 | 0; //@line 14737
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 14743
     HEAP8[$22 >> 0] = 0; //@line 14744
     $23 = $1 + 53 | 0; //@line 14745
     HEAP8[$23 >> 0] = 0; //@line 14746
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 14748
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 14751
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14752
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 14753
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 337; //@line 14756
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 14758
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14760
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 14762
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 14764
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 14766
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 14768
      sp = STACKTOP; //@line 14769
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 14772
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 14776
      label = 13; //@line 14777
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 14782
       label = 13; //@line 14783
      } else {
       $$037$off039 = 3; //@line 14785
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 14789
      $39 = $1 + 40 | 0; //@line 14790
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 14793
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14803
        $$037$off039 = $$037$off038; //@line 14804
       } else {
        $$037$off039 = $$037$off038; //@line 14806
       }
      } else {
       $$037$off039 = $$037$off038; //@line 14809
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 14812
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 14819
   }
  }
 } while (0);
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1428
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 1439
 $14 = $1 + 20 | 0; //@line 1440
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1442
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 1447
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 1451
 $24 = $0 + 128 | 0; //@line 1452
 _equeue_mutex_lock($24); //@line 1453
 $25 = HEAP32[$0 >> 2] | 0; //@line 1454
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 1458
   label = 5; //@line 1459
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 1461
   $$053 = $0; //@line 1462
   $29 = $25; //@line 1462
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 1471
    $34 = HEAP32[$33 >> 2] | 0; //@line 1472
    if (!$34) {
     $$051$ph = $33; //@line 1475
     label = 5; //@line 1476
     break L1;
    } else {
     $$053 = $33; //@line 1479
     $29 = $34; //@line 1479
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 1487
    HEAP32[$49 >> 2] = $29; //@line 1488
    HEAP32[$29 + 16 >> 2] = $49; //@line 1490
    $$0515859 = $$053; //@line 1491
    label = 11; //@line 1492
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 1496
   $43 = $1 + 8 | 0; //@line 1497
   HEAP32[$43 >> 2] = $42; //@line 1498
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 1502
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 1504
   $47 = $1 + 12 | 0; //@line 1505
   HEAP32[$47 >> 2] = $46; //@line 1506
   HEAP32[$46 + 16 >> 2] = $47; //@line 1508
   $$05157 = $$053; //@line 1509
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 1514
  $$0515859 = $$051$ph; //@line 1515
  label = 11; //@line 1516
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 1520
  $$05157 = $$0515859; //@line 1521
 }
 HEAP32[$$05157 >> 2] = $1; //@line 1523
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 1525
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 1527
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 1530
  return $13 | 0; //@line 1531
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 1537
  return $13 | 0; //@line 1538
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 1543
  return $13 | 0; //@line 1544
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 1550
  return $13 | 0; //@line 1551
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 1554
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1556
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1560
 FUNCTION_TABLE_vii[$54 & 7]($65, $67 & ~($67 >> 31)); //@line 1561
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 58; //@line 1564
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 1566
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 1568
  sp = STACKTOP; //@line 1569
  return 0; //@line 1570
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1572
 _equeue_mutex_unlock($24); //@line 1573
 return $13 | 0; //@line 1574
}
function __ZL37nsapi_dns_query_async_socket_callbackPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $26 = 0, $29 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10385
 STACKTOP = STACKTOP + 32 | 0; //@line 10386
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10386
 $1 = sp + 16 | 0; //@line 10387
 $2 = sp; //@line 10388
 if (!$0) {
  STACKTOP = sp; //@line 10391
  return;
 }
 $4 = $0 + 12 | 0; //@line 10393
 $5 = HEAP32[$4 >> 2] | 0; //@line 10394
 do {
  if (!$5) {
   $14 = 0; //@line 10398
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 10401
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10402
   FUNCTION_TABLE_vii[$8 & 7]($1, $0); //@line 10403
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 225; //@line 10406
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10408
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10410
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 10412
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 10414
    sp = STACKTOP; //@line 10415
    STACKTOP = sp; //@line 10416
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10418
    $14 = HEAP32[$4 >> 2] | 0; //@line 10420
    break;
   }
  }
 } while (0);
 $13 = $1 + 12 | 0; //@line 10425
 HEAP32[$13 >> 2] = $14; //@line 10426
 $16 = HEAP32[$0 + 16 >> 2] | 0; //@line 10428
 HEAP32[$2 + 8 >> 2] = 0; //@line 10430
 HEAP32[$2 >> 2] = 226; //@line 10431
 HEAP32[$2 + 4 >> 2] = $16; //@line 10433
 $18 = $2 + 12 | 0; //@line 10434
 HEAP32[$18 >> 2] = 736; //@line 10435
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10436
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 10437
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 227; //@line 10440
  HEAP32[$AsyncCtx10 + 4 >> 2] = $18; //@line 10442
  HEAP32[$AsyncCtx10 + 8 >> 2] = $13; //@line 10444
  HEAP32[$AsyncCtx10 + 12 >> 2] = $2; //@line 10446
  HEAP32[$AsyncCtx10 + 16 >> 2] = $1; //@line 10448
  sp = STACKTOP; //@line 10449
  STACKTOP = sp; //@line 10450
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10452
 $23 = HEAP32[$18 >> 2] | 0; //@line 10453
 do {
  if ($23 | 0) {
   $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 10458
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10459
   FUNCTION_TABLE_vi[$26 & 511]($2); //@line 10460
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 228; //@line 10463
    HEAP32[$AsyncCtx3 + 4 >> 2] = $13; //@line 10465
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 10467
    sp = STACKTOP; //@line 10468
    STACKTOP = sp; //@line 10469
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10471
    break;
   }
  }
 } while (0);
 $29 = HEAP32[$13 >> 2] | 0; //@line 10476
 if (!$29) {
  STACKTOP = sp; //@line 10479
  return;
 }
 $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 10482
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10483
 FUNCTION_TABLE_vi[$32 & 511]($1); //@line 10484
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 229; //@line 10487
  sp = STACKTOP; //@line 10488
  STACKTOP = sp; //@line 10489
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10491
 STACKTOP = sp; //@line 10492
 return;
}
function _mbed_vtracef__async_cb_112($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1015
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 1018
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1020
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1022
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1024
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1026
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1028
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1030
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1032
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1034
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1036
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1038
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 1040
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 1042
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 1044
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 1046
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 1048
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 1050
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 1052
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 1054
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 1056
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 1058
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 1060
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 1062
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 1064
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 1066
 $55 = ($12 | 0 ? 4 : 0) + $12 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 1072
 $56 = HEAP32[127] | 0; //@line 1073
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 1074
 $57 = FUNCTION_TABLE_ii[$56 & 31]($55) | 0; //@line 1075
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 1079
  ___async_unwind = 0; //@line 1080
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 67; //@line 1082
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $14; //@line 1084
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $16; //@line 1086
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $18; //@line 1088
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $20; //@line 1090
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $22; //@line 1092
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $24; //@line 1094
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $26; //@line 1096
 HEAP8[$ReallocAsyncCtx5 + 32 >> 0] = $2 & 1; //@line 1099
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $4; //@line 1101
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $6; //@line 1103
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $28; //@line 1105
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $30; //@line 1107
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $32; //@line 1109
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $34; //@line 1111
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $36; //@line 1113
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $8; //@line 1115
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $10; //@line 1117
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $38; //@line 1119
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $40; //@line 1121
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $42; //@line 1123
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $44; //@line 1125
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $46; //@line 1127
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $48; //@line 1129
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $50; //@line 1131
 sp = STACKTOP; //@line 1132
 return;
}
function _mbed_vtracef__async_cb_111($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 906
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 909
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 911
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 913
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 915
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 917
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 919
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 923
 $$13 = ($AsyncRetVal | 0) >= ($12 | 0) ? 0 : $AsyncRetVal; //@line 925
 $18 = (HEAP32[$0 + 28 >> 2] | 0) + $$13 | 0; //@line 927
 $19 = $12 - $$13 | 0; //@line 928
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[128] | 0; //@line 932
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $2 ^ 1) {
     break;
    }
    _snprintf($18, $19, 2704, $4) | 0; //@line 944
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 947
   $23 = FUNCTION_TABLE_i[$21 & 0]() | 0; //@line 948
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 69; //@line 951
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 952
    HEAP32[$24 >> 2] = $8; //@line 953
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 954
    HEAP32[$25 >> 2] = $18; //@line 955
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 956
    HEAP32[$26 >> 2] = $19; //@line 957
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 958
    HEAP32[$27 >> 2] = $10; //@line 959
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 960
    $$expand_i1_val = $2 & 1; //@line 961
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 962
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 963
    HEAP32[$29 >> 2] = $4; //@line 964
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 965
    HEAP32[$30 >> 2] = $6; //@line 966
    sp = STACKTOP; //@line 967
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 971
   ___async_unwind = 0; //@line 972
   HEAP32[$ReallocAsyncCtx6 >> 2] = 69; //@line 973
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 974
   HEAP32[$24 >> 2] = $8; //@line 975
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 976
   HEAP32[$25 >> 2] = $18; //@line 977
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 978
   HEAP32[$26 >> 2] = $19; //@line 979
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 980
   HEAP32[$27 >> 2] = $10; //@line 981
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 982
   $$expand_i1_val = $2 & 1; //@line 983
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 984
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 985
   HEAP32[$29 >> 2] = $4; //@line 986
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 987
   HEAP32[$30 >> 2] = $6; //@line 988
   sp = STACKTOP; //@line 989
   return;
  }
 } while (0);
 $34 = HEAP32[129] | 0; //@line 993
 $35 = HEAP32[122] | 0; //@line 994
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 995
 FUNCTION_TABLE_vi[$34 & 511]($35); //@line 996
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 999
  sp = STACKTOP; //@line 1000
  return;
 }
 ___async_unwind = 0; //@line 1003
 HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 1004
 sp = STACKTOP; //@line 1005
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 14011
 STACKTOP = STACKTOP + 48 | 0; //@line 14012
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14012
 $vararg_buffer10 = sp + 32 | 0; //@line 14013
 $vararg_buffer7 = sp + 24 | 0; //@line 14014
 $vararg_buffer3 = sp + 16 | 0; //@line 14015
 $vararg_buffer = sp; //@line 14016
 $0 = sp + 36 | 0; //@line 14017
 $1 = ___cxa_get_globals_fast() | 0; //@line 14018
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 14021
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 14026
   $9 = HEAP32[$7 >> 2] | 0; //@line 14028
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 14031
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 6005; //@line 14037
    _abort_message(5955, $vararg_buffer7); //@line 14038
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 14047
   } else {
    $22 = $3 + 80 | 0; //@line 14049
   }
   HEAP32[$0 >> 2] = $22; //@line 14051
   $23 = HEAP32[$3 >> 2] | 0; //@line 14052
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 14054
   $28 = HEAP32[(HEAP32[26] | 0) + 16 >> 2] | 0; //@line 14057
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14058
   $29 = FUNCTION_TABLE_iiii[$28 & 31](104, $23, $0) | 0; //@line 14059
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 328; //@line 14062
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14064
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 14066
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 14068
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 14070
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 14072
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 14074
    sp = STACKTOP; //@line 14075
    STACKTOP = sp; //@line 14076
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14078
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 6005; //@line 14080
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 14082
    _abort_message(5914, $vararg_buffer3); //@line 14083
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 14086
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 14089
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14090
   $40 = FUNCTION_TABLE_ii[$39 & 31]($36) | 0; //@line 14091
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 329; //@line 14094
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 14096
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 14098
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 14100
    sp = STACKTOP; //@line 14101
    STACKTOP = sp; //@line 14102
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14104
    HEAP32[$vararg_buffer >> 2] = 6005; //@line 14105
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 14107
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 14109
    _abort_message(5869, $vararg_buffer); //@line 14110
   }
  }
 }
 _abort_message(5993, $vararg_buffer10); //@line 14115
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $32 = 0, $35 = 0, $4 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2786
 STACKTOP = STACKTOP + 16 | 0; //@line 2787
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2787
 $4 = sp; //@line 2788
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2791
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 2792
 $8 = FUNCTION_TABLE_ii[$7 & 31]($0) | 0; //@line 2793
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 78; //@line 2796
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 2798
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 2800
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 2802
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 2804
  sp = STACKTOP; //@line 2805
  STACKTOP = sp; //@line 2806
  return 0; //@line 2806
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2808
 $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0; //@line 2811
 $16 = $2 + 12 | 0; //@line 2812
 $17 = HEAP32[$16 >> 2] | 0; //@line 2813
 do {
  if (!$17) {
   $28 = 0; //@line 2817
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 2820
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 2821
   FUNCTION_TABLE_vii[$20 & 7]($4, $2); //@line 2822
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 79; //@line 2825
    HEAP32[$AsyncCtx3 + 4 >> 2] = $16; //@line 2827
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 2829
    HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 2831
    HEAP32[$AsyncCtx3 + 16 >> 2] = $1; //@line 2833
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 2835
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 2837
    sp = STACKTOP; //@line 2838
    STACKTOP = sp; //@line 2839
    return 0; //@line 2839
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2841
    $28 = HEAP32[$16 >> 2] | 0; //@line 2843
    break;
   }
  }
 } while (0);
 $27 = $4 + 12 | 0; //@line 2848
 HEAP32[$27 >> 2] = $28; //@line 2849
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2850
 $29 = FUNCTION_TABLE_iiiii[$15 & 15]($8, $1, $4, $3) | 0; //@line 2851
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 80; //@line 2854
  HEAP32[$AsyncCtx6 + 4 >> 2] = $27; //@line 2856
  HEAP32[$AsyncCtx6 + 8 >> 2] = $4; //@line 2858
  sp = STACKTOP; //@line 2859
  STACKTOP = sp; //@line 2860
  return 0; //@line 2860
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 2862
 $32 = HEAP32[$27 >> 2] | 0; //@line 2863
 if (!$32) {
  STACKTOP = sp; //@line 2866
  return $29 | 0; //@line 2866
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 2869
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2870
 FUNCTION_TABLE_vi[$35 & 511]($4); //@line 2871
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 81; //@line 2874
  HEAP32[$AsyncCtx10 + 4 >> 2] = $29; //@line 2876
  sp = STACKTOP; //@line 2877
  STACKTOP = sp; //@line 2878
  return 0; //@line 2878
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 2880
 STACKTOP = sp; //@line 2881
 return $29 | 0; //@line 2881
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1$i = 0, $14 = 0, $15 = 0, $23 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 820
 $5 = $0 + -4 | 0; //@line 821
 $6 = $1 + 8 | 0; //@line 822
 do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   label = 7; //@line 827
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$6 >> 0] | 0)) {
     label = 7; //@line 835
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 841
   _puts(1746) | 0; //@line 842
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 50; //@line 845
    sp = STACKTOP; //@line 846
    return 0; //@line 847
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 849
   $$1$i = -3012; //@line 850
   return $$1$i | 0; //@line 851
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $14 = HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0; //@line 858
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 859
   $15 = FUNCTION_TABLE_iiii[$14 & 31]($5, $1, $2) | 0; //@line 860
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 51; //@line 863
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 865
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 867
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 869
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 871
    HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 873
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 875
    sp = STACKTOP; //@line 876
    return 0; //@line 877
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 879
   if (($15 | 0) < 0) {
    $$1$i = $15; //@line 882
    return $$1$i | 0; //@line 883
   } else {
    $23 = $1 + 12 | 0; //@line 885
    dest = $23; //@line 886
    src = $2; //@line 886
    stop = dest + 60 | 0; //@line 886
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 886
     dest = dest + 4 | 0; //@line 886
     src = src + 4 | 0; //@line 886
    } while ((dest | 0) < (stop | 0));
    HEAP16[$23 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 886
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 891
 _wait_ms(1); //@line 892
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 52; //@line 895
  HEAP32[$AsyncCtx10 + 4 >> 2] = $5; //@line 897
  HEAP32[$AsyncCtx10 + 8 >> 2] = $5; //@line 899
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 901
  HEAP32[$AsyncCtx10 + 16 >> 2] = $3; //@line 903
  HEAP32[$AsyncCtx10 + 20 >> 2] = $4; //@line 905
  sp = STACKTOP; //@line 906
  return 0; //@line 907
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 909
 $31 = HEAP32[(HEAP32[$5 >> 2] | 0) + 116 >> 2] | 0; //@line 912
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 913
 $32 = FUNCTION_TABLE_iiiii[$31 & 15]($5, $1, $3, $4) | 0; //@line 914
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 53; //@line 917
  sp = STACKTOP; //@line 918
  return 0; //@line 919
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 921
 $$1$i = $32; //@line 922
 return $$1$i | 0; //@line 923
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16656
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16658
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16660
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16662
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16664
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16666
 $12 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 4 >> 2] | 0; //@line 16669
 $13 = $2 + 12 | 0; //@line 16670
 $14 = HEAP32[$13 >> 2] | 0; //@line 16671
 if (!$14) {
  $24 = $4 + 12 | 0; //@line 16674
  HEAP32[$24 >> 2] = 0; //@line 16675
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 16676
  $25 = FUNCTION_TABLE_iiiii[$12 & 15]($AsyncRetVal, $6, $4, $8) | 0; //@line 16677
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 80; //@line 16680
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 16681
   HEAP32[$26 >> 2] = $24; //@line 16682
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 16683
   HEAP32[$27 >> 2] = $4; //@line 16684
   sp = STACKTOP; //@line 16685
   return;
  }
  HEAP32[___async_retval >> 2] = $25; //@line 16689
  ___async_unwind = 0; //@line 16690
  HEAP32[$ReallocAsyncCtx3 >> 2] = 80; //@line 16691
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 16692
  HEAP32[$26 >> 2] = $24; //@line 16693
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 16694
  HEAP32[$27 >> 2] = $4; //@line 16695
  sp = STACKTOP; //@line 16696
  return;
 } else {
  $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 16700
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 16701
  FUNCTION_TABLE_vii[$17 & 7]($4, $2); //@line 16702
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 79; //@line 16705
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 16706
   HEAP32[$18 >> 2] = $13; //@line 16707
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 16708
   HEAP32[$19 >> 2] = $4; //@line 16709
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 16710
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 16711
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 16712
   HEAP32[$21 >> 2] = $6; //@line 16713
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 16714
   HEAP32[$22 >> 2] = $8; //@line 16715
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 16716
   HEAP32[$23 >> 2] = $12; //@line 16717
   sp = STACKTOP; //@line 16718
   return;
  }
  ___async_unwind = 0; //@line 16721
  HEAP32[$ReallocAsyncCtx2 >> 2] = 79; //@line 16722
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 16723
  HEAP32[$18 >> 2] = $13; //@line 16724
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 16725
  HEAP32[$19 >> 2] = $4; //@line 16726
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 16727
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 16728
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 16729
  HEAP32[$21 >> 2] = $6; //@line 16730
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 16731
  HEAP32[$22 >> 2] = $8; //@line 16732
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 16733
  HEAP32[$23 >> 2] = $12; //@line 16734
  sp = STACKTOP; //@line 16735
  return;
 }
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22668
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22670
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22672
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22674
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[1680] | 0)) {
  _serial_init(6724, 2, 3); //@line 22682
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 22684
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 22690
  _serial_putc(6724, $9 << 24 >> 24); //@line 22691
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 22694
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 22695
   HEAP32[$18 >> 2] = 0; //@line 22696
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 22697
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 22698
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 22699
   HEAP32[$20 >> 2] = $2; //@line 22700
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 22701
   HEAP8[$21 >> 0] = $9; //@line 22702
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 22703
   HEAP32[$22 >> 2] = $4; //@line 22704
   sp = STACKTOP; //@line 22705
   return;
  }
  ___async_unwind = 0; //@line 22708
  HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 22709
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 22710
  HEAP32[$18 >> 2] = 0; //@line 22711
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 22712
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 22713
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 22714
  HEAP32[$20 >> 2] = $2; //@line 22715
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 22716
  HEAP8[$21 >> 0] = $9; //@line 22717
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 22718
  HEAP32[$22 >> 2] = $4; //@line 22719
  sp = STACKTOP; //@line 22720
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 22723
  _serial_putc(6724, 13); //@line 22724
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 22727
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 22728
   HEAP8[$12 >> 0] = $9; //@line 22729
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 22730
   HEAP32[$13 >> 2] = 0; //@line 22731
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 22732
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 22733
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 22734
   HEAP32[$15 >> 2] = $2; //@line 22735
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 22736
   HEAP32[$16 >> 2] = $4; //@line 22737
   sp = STACKTOP; //@line 22738
   return;
  }
  ___async_unwind = 0; //@line 22741
  HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 22742
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 22743
  HEAP8[$12 >> 0] = $9; //@line 22744
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 22745
  HEAP32[$13 >> 2] = 0; //@line 22746
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 22747
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 22748
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 22749
  HEAP32[$15 >> 2] = $2; //@line 22750
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 22751
  HEAP32[$16 >> 2] = $4; //@line 22752
  sp = STACKTOP; //@line 22753
  return;
 }
}
function _mbed_error_vfprintf__async_cb_89($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22761
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22765
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22767
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22771
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 22772
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 22778
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 22784
  _serial_putc(6724, $13 << 24 >> 24); //@line 22785
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 22788
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 22789
   HEAP32[$22 >> 2] = $12; //@line 22790
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 22791
   HEAP32[$23 >> 2] = $4; //@line 22792
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 22793
   HEAP32[$24 >> 2] = $6; //@line 22794
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 22795
   HEAP8[$25 >> 0] = $13; //@line 22796
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 22797
   HEAP32[$26 >> 2] = $10; //@line 22798
   sp = STACKTOP; //@line 22799
   return;
  }
  ___async_unwind = 0; //@line 22802
  HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 22803
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 22804
  HEAP32[$22 >> 2] = $12; //@line 22805
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 22806
  HEAP32[$23 >> 2] = $4; //@line 22807
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 22808
  HEAP32[$24 >> 2] = $6; //@line 22809
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 22810
  HEAP8[$25 >> 0] = $13; //@line 22811
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 22812
  HEAP32[$26 >> 2] = $10; //@line 22813
  sp = STACKTOP; //@line 22814
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 22817
  _serial_putc(6724, 13); //@line 22818
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 22821
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 22822
   HEAP8[$16 >> 0] = $13; //@line 22823
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 22824
   HEAP32[$17 >> 2] = $12; //@line 22825
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 22826
   HEAP32[$18 >> 2] = $4; //@line 22827
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 22828
   HEAP32[$19 >> 2] = $6; //@line 22829
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 22830
   HEAP32[$20 >> 2] = $10; //@line 22831
   sp = STACKTOP; //@line 22832
   return;
  }
  ___async_unwind = 0; //@line 22835
  HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 22836
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 22837
  HEAP8[$16 >> 0] = $13; //@line 22838
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 22839
  HEAP32[$17 >> 2] = $12; //@line 22840
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 22841
  HEAP32[$18 >> 2] = $4; //@line 22842
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 22843
  HEAP32[$19 >> 2] = $6; //@line 22844
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 22845
  HEAP32[$20 >> 2] = $10; //@line 22846
  sp = STACKTOP; //@line 22847
  return;
 }
}
function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6766
 STACKTOP = STACKTOP + 16 | 0; //@line 6767
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6767
 $4 = sp; //@line 6768
 $$ = ($3 | 0) == 0 ? 7308 : $3; //@line 6770
 $6 = HEAP32[$$ >> 2] | 0; //@line 6771
 L1 : do {
  if (!$1) {
   if (!$6) {
    $$0 = 0; //@line 6777
   } else {
    label = 17; //@line 6779
   }
  } else {
   $$47 = ($0 | 0) == 0 ? $4 : $0; //@line 6783
   if (!$2) {
    $$0 = -2; //@line 6786
   } else {
    if (!$6) {
     $12 = HEAP8[$1 >> 0] | 0; //@line 6790
     if ($12 << 24 >> 24 > -1) {
      HEAP32[$$47 >> 2] = $12 & 255; //@line 6794
      $$0 = $12 << 24 >> 24 != 0 & 1; //@line 6797
      break;
     }
     $21 = (HEAP32[HEAP32[(___pthread_self_913() | 0) + 188 >> 2] >> 2] | 0) == 0; //@line 6804
     $22 = HEAP8[$1 >> 0] | 0; //@line 6805
     if ($21) {
      HEAP32[$$47 >> 2] = $22 << 24 >> 24 & 57343; //@line 6809
      $$0 = 1; //@line 6810
      break;
     }
     $26 = ($22 & 255) + -194 | 0; //@line 6814
     if ($26 >>> 0 > 50) {
      label = 17; //@line 6817
      break;
     }
     $30 = HEAP32[1008 + ($26 << 2) >> 2] | 0; //@line 6822
     $31 = $2 + -1 | 0; //@line 6823
     if (!$31) {
      $$2 = $30; //@line 6826
     } else {
      $$03952 = $1 + 1 | 0; //@line 6828
      $$04051 = $30; //@line 6828
      $$04350 = $31; //@line 6828
      label = 11; //@line 6829
     }
    } else {
     $$03952 = $1; //@line 6832
     $$04051 = $6; //@line 6832
     $$04350 = $2; //@line 6832
     label = 11; //@line 6833
    }
    L14 : do {
     if ((label | 0) == 11) {
      $33 = HEAP8[$$03952 >> 0] | 0; //@line 6837
      $35 = ($33 & 255) >>> 3; //@line 6839
      if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
       label = 17; //@line 6846
       break L1;
      } else {
       $$1 = $$03952; //@line 6849
       $$141 = $$04051; //@line 6849
       $$144 = $$04350; //@line 6849
       $44 = $33; //@line 6849
      }
      while (1) {
       $$1 = $$1 + 1 | 0; //@line 6853
       $$141 = ($44 & 255) + -128 | $$141 << 6; //@line 6856
       $$144 = $$144 + -1 | 0; //@line 6857
       if (($$141 | 0) >= 0) {
        break;
       }
       if (!$$144) {
        $$2 = $$141; //@line 6864
        break L14;
       }
       $44 = HEAP8[$$1 >> 0] | 0; //@line 6867
       if (($44 & -64) << 24 >> 24 != -128) {
        label = 17; //@line 6873
        break L1;
       }
      }
      HEAP32[$$ >> 2] = 0; //@line 6877
      HEAP32[$$47 >> 2] = $$141; //@line 6878
      $$0 = $2 - $$144 | 0; //@line 6880
      break L1;
     }
    } while (0);
    HEAP32[$$ >> 2] = $$2; //@line 6884
    $$0 = -2; //@line 6885
   }
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0; //@line 6890
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 6892
  $$0 = -1; //@line 6893
 }
 STACKTOP = sp; //@line 6895
 return $$0 | 0; //@line 6895
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_132($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $42 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2828
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2830
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2832
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2834
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2836
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2838
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2840
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2842
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2844
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2846
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2848
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2850
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2852
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2854
 $42 = HEAP32[$10 >> 2] | 0; //@line 2855
 if (!$42) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 2858
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 2859
  if (!___async) {
   HEAP32[___async_retval >> 2] = $27; //@line 2863
   ___async_unwind = 0; //@line 2864
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 2866
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 2868
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 2870
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 2872
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 2874
  HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 2876
  HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 2878
  HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 2880
  HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 2882
  HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 2884
  HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 2886
  HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 2888
  HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 2890
  HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 2892
  sp = STACKTOP; //@line 2893
  return;
 } else {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 2897
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 2898
  FUNCTION_TABLE_vi[$45 & 511]($6); //@line 2899
  if (!___async) {
   ___async_unwind = 0; //@line 2902
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 2904
  HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 2906
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 2908
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 2910
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 2912
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 2914
  HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 2916
  HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 2918
  HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 2920
  HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 2922
  HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 2924
  HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 2926
  HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 2928
  HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $26; //@line 2930
  sp = STACKTOP; //@line 2931
  return;
 }
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17481
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17483
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 17485
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17487
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17489
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17491
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17493
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17495
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -3009; //@line 17500
  $36 = ___async_retval; //@line 17501
  HEAP32[$36 >> 2] = $$0; //@line 17502
  return;
 }
 __ZN13SocketAddress8set_portEt($2, $4); //@line 17505
 $17 = $6 + 8 | 0; //@line 17506
 $18 = $6 + 52 | 0; //@line 17507
 $19 = $6 + 12 | 0; //@line 17508
 $20 = HEAP32[$17 >> 2] | 0; //@line 17509
 if (!$20) {
  $$0 = -3005; //@line 17512
  $36 = ___async_retval; //@line 17513
  HEAP32[$36 >> 2] = $$0; //@line 17514
  return;
 }
 HEAP32[$18 >> 2] = 0; //@line 17517
 $22 = HEAP32[$10 >> 2] | 0; //@line 17518
 $25 = HEAP32[(HEAP32[$22 >> 2] | 0) + 76 >> 2] | 0; //@line 17521
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 17522
 $26 = FUNCTION_TABLE_iiiiii[$25 & 7]($22, $20, $2, $12, $14) | 0; //@line 17523
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 17526
  $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 17527
  HEAP32[$27 >> 2] = $19; //@line 17528
  $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 17529
  HEAP32[$28 >> 2] = $8; //@line 17530
  $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 17531
  HEAP32[$29 >> 2] = $17; //@line 17532
  $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 17533
  HEAP32[$30 >> 2] = $18; //@line 17534
  $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 17535
  HEAP32[$31 >> 2] = $10; //@line 17536
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 17537
  HEAP32[$32 >> 2] = $2; //@line 17538
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 17539
  HEAP32[$33 >> 2] = $12; //@line 17540
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 17541
  HEAP32[$34 >> 2] = $14; //@line 17542
  sp = STACKTOP; //@line 17543
  return;
 }
 HEAP32[___async_retval >> 2] = $26; //@line 17547
 ___async_unwind = 0; //@line 17548
 HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 17549
 $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 17550
 HEAP32[$27 >> 2] = $19; //@line 17551
 $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 17552
 HEAP32[$28 >> 2] = $8; //@line 17553
 $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 17554
 HEAP32[$29 >> 2] = $17; //@line 17555
 $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 17556
 HEAP32[$30 >> 2] = $18; //@line 17557
 $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 17558
 HEAP32[$31 >> 2] = $10; //@line 17559
 $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 17560
 HEAP32[$32 >> 2] = $2; //@line 17561
 $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 17562
 HEAP32[$33 >> 2] = $12; //@line 17563
 $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 17564
 HEAP32[$34 >> 2] = $14; //@line 17565
 sp = STACKTOP; //@line 17566
 return;
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb_32($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17574
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17576
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17578
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17580
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17582
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17584
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17586
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17588
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17590
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17592
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$0 = $AsyncRetVal; //@line 17598
  $37 = ___async_retval; //@line 17599
  HEAP32[$37 >> 2] = $$0; //@line 17600
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 17603
 if (!$18) {
  $$0 = -3005; //@line 17606
  $37 = ___async_retval; //@line 17607
  HEAP32[$37 >> 2] = $$0; //@line 17608
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 17611
 $20 = HEAP32[$10 >> 2] | 0; //@line 17612
 $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 76 >> 2] | 0; //@line 17615
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 17616
 $24 = FUNCTION_TABLE_iiiiii[$23 & 7]($20, $18, $12, $14, $16) | 0; //@line 17617
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 17620
  $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 17621
  HEAP32[$25 >> 2] = $2; //@line 17622
  $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 17623
  HEAP32[$26 >> 2] = $4; //@line 17624
  $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 17625
  HEAP32[$27 >> 2] = $6; //@line 17626
  $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 17627
  HEAP32[$28 >> 2] = $8; //@line 17628
  $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 17629
  HEAP32[$29 >> 2] = $10; //@line 17630
  $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 17631
  HEAP32[$30 >> 2] = $12; //@line 17632
  $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 17633
  HEAP32[$31 >> 2] = $14; //@line 17634
  $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 17635
  HEAP32[$32 >> 2] = $16; //@line 17636
  sp = STACKTOP; //@line 17637
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 17641
 ___async_unwind = 0; //@line 17642
 HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 17643
 $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 17644
 HEAP32[$25 >> 2] = $2; //@line 17645
 $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 17646
 HEAP32[$26 >> 2] = $4; //@line 17647
 $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 17648
 HEAP32[$27 >> 2] = $6; //@line 17649
 $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 17650
 HEAP32[$28 >> 2] = $8; //@line 17651
 $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 17652
 HEAP32[$29 >> 2] = $10; //@line 17653
 $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 17654
 HEAP32[$30 >> 2] = $12; //@line 17655
 $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 17656
 HEAP32[$31 >> 2] = $14; //@line 17657
 $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 17658
 HEAP32[$32 >> 2] = $16; //@line 17659
 sp = STACKTOP; //@line 17660
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_158($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 8949
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8951
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8953
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8955
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8957
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8959
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8961
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8963
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8965
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8967
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8969
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8971
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8973
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8975
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8977
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8979
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8981
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 8983
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 8985
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 8987
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 8989
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 8991
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 8993
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 8995
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 8997
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(100) | 0; //@line 8998
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 8999
 if (!___async) {
  ___async_unwind = 0; //@line 9002
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 173; //@line 9004
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 9006
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 9008
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 9010
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 9012
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $10; //@line 9014
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $12; //@line 9016
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $14; //@line 9018
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $16; //@line 9020
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $18; //@line 9022
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $20; //@line 9024
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $22; //@line 9026
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $24; //@line 9028
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $26; //@line 9030
 HEAP32[$ReallocAsyncCtx11 + 56 >> 2] = $28; //@line 9032
 HEAP32[$ReallocAsyncCtx11 + 60 >> 2] = $30; //@line 9034
 HEAP32[$ReallocAsyncCtx11 + 64 >> 2] = $32; //@line 9036
 HEAP32[$ReallocAsyncCtx11 + 68 >> 2] = $34; //@line 9038
 HEAP32[$ReallocAsyncCtx11 + 72 >> 2] = $36; //@line 9040
 HEAP32[$ReallocAsyncCtx11 + 76 >> 2] = $38; //@line 9042
 HEAP32[$ReallocAsyncCtx11 + 80 >> 2] = $40; //@line 9044
 HEAP32[$ReallocAsyncCtx11 + 84 >> 2] = $42; //@line 9046
 HEAP32[$ReallocAsyncCtx11 + 88 >> 2] = $44; //@line 9048
 HEAP32[$ReallocAsyncCtx11 + 92 >> 2] = $46; //@line 9050
 HEAP32[$ReallocAsyncCtx11 + 96 >> 2] = $48; //@line 9052
 sp = STACKTOP; //@line 9053
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_141($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4579
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4581
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4583
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4585
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4587
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4589
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4591
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4593
 $$pre = HEAP32[$2 >> 2] | 0; //@line 4594
 if ($$pre | 0) {
  $17 = HEAP32[$$pre + 4 >> 2] | 0; //@line 4598
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 4599
  FUNCTION_TABLE_vii[$17 & 7]($6, $8); //@line 4600
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 121; //@line 4603
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 4604
   HEAP32[$18 >> 2] = $2; //@line 4605
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 4606
   HEAP32[$19 >> 2] = $4; //@line 4607
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 4608
   HEAP32[$20 >> 2] = $8; //@line 4609
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 4610
   HEAP32[$21 >> 2] = $10; //@line 4611
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 4612
   HEAP32[$22 >> 2] = $12; //@line 4613
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 4614
   HEAP32[$23 >> 2] = $6; //@line 4615
   $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 4616
   HEAP32[$24 >> 2] = $14; //@line 4617
   sp = STACKTOP; //@line 4618
   return;
  }
  ___async_unwind = 0; //@line 4621
  HEAP32[$ReallocAsyncCtx4 >> 2] = 121; //@line 4622
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 4623
  HEAP32[$18 >> 2] = $2; //@line 4624
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 4625
  HEAP32[$19 >> 2] = $4; //@line 4626
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 4627
  HEAP32[$20 >> 2] = $8; //@line 4628
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 4629
  HEAP32[$21 >> 2] = $10; //@line 4630
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 4631
  HEAP32[$22 >> 2] = $12; //@line 4632
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 4633
  HEAP32[$23 >> 2] = $6; //@line 4634
  $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 4635
  HEAP32[$24 >> 2] = $14; //@line 4636
  sp = STACKTOP; //@line 4637
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 4640
 $25 = HEAP32[$10 >> 2] | 0; //@line 4641
 $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 84 >> 2] | 0; //@line 4644
 $29 = HEAP32[$12 >> 2] | 0; //@line 4645
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 4646
 FUNCTION_TABLE_viiii[$28 & 7]($25, $29, 123, $6); //@line 4647
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 124; //@line 4650
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 4651
  HEAP32[$30 >> 2] = $14; //@line 4652
  sp = STACKTOP; //@line 4653
  return;
 }
 ___async_unwind = 0; //@line 4656
 HEAP32[$ReallocAsyncCtx6 >> 2] = 124; //@line 4657
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 4658
 HEAP32[$30 >> 2] = $14; //@line 4659
 sp = STACKTOP; //@line 4660
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1 = 0, $13 = 0, $14 = 0, $21 = 0, $28 = 0, $29 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 416
 $5 = $1 + 8 | 0; //@line 417
 do {
  if (!(HEAP8[$5 >> 0] | 0)) {
   label = 7; //@line 422
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$5 >> 0] | 0)) {
     label = 7; //@line 430
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 436
   _puts(1746) | 0; //@line 437
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 37; //@line 440
    sp = STACKTOP; //@line 441
    return 0; //@line 442
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 444
   $$1 = -3012; //@line 445
   return $$1 | 0; //@line 446
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 108 >> 2] | 0; //@line 453
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 454
   $14 = FUNCTION_TABLE_iiii[$13 & 31]($0, $1, $2) | 0; //@line 455
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 38; //@line 458
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 460
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 462
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 464
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 466
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 468
    sp = STACKTOP; //@line 469
    return 0; //@line 470
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 472
   if (($14 | 0) < 0) {
    $$1 = $14; //@line 475
    return $$1 | 0; //@line 476
   } else {
    $21 = $1 + 12 | 0; //@line 478
    dest = $21; //@line 479
    src = $2; //@line 479
    stop = dest + 60 | 0; //@line 479
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 479
     dest = dest + 4 | 0; //@line 479
     src = src + 4 | 0; //@line 479
    } while ((dest | 0) < (stop | 0));
    HEAP16[$21 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 479
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 484
 _wait_ms(1); //@line 485
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 39; //@line 488
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 490
  HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 492
  HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 494
  HEAP32[$AsyncCtx10 + 16 >> 2] = $4; //@line 496
  sp = STACKTOP; //@line 497
  return 0; //@line 498
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 500
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 116 >> 2] | 0; //@line 503
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 504
 $29 = FUNCTION_TABLE_iiiii[$28 & 15]($0, $1, $3, $4) | 0; //@line 505
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 40; //@line 508
  sp = STACKTOP; //@line 509
  return 0; //@line 510
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 512
 $$1 = $29; //@line 513
 return $$1 | 0; //@line 514
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$010 = 0, $$1 = 0, $$byval_copy = 0, $14 = 0, $15 = 0, $24 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2980
 STACKTOP = STACKTOP + 112 | 0; //@line 2981
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 2981
 $$byval_copy = sp + 88 | 0; //@line 2982
 $4 = sp + 24 | 0; //@line 2983
 $5 = sp; //@line 2984
 if (!(HEAP8[$1 >> 0] | 0)) {
  $$010 = -3003; //@line 2988
  STACKTOP = sp; //@line 2989
  return $$010 | 0; //@line 2989
 }
 $9 = ($3 | 0) == 0; //@line 2992
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, $1) | 0) {
  if (!$9) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($2) | 0) != ($3 | 0)) {
    $$010 = -3009; //@line 2998
    STACKTOP = sp; //@line 2999
    return $$010 | 0; //@line 2999
   }
  }
  $$010 = 0; //@line 3002
  STACKTOP = sp; //@line 3003
  return $$010 | 0; //@line 3003
 }
 if ($9) {
  HEAP32[$5 >> 2] = 0; //@line 3006
  HEAP32[$5 + 4 >> 2] = 0; //@line 3006
  HEAP32[$5 + 8 >> 2] = 0; //@line 3006
  HEAP32[$5 + 12 >> 2] = 0; //@line 3006
  HEAP32[$5 + 16 >> 2] = 0; //@line 3006
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 3007
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 3007
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 3007
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 3007
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 3007
  __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy, 0); //@line 3008
  $14 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3011
  $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 3012
  $15 = FUNCTION_TABLE_ii[$14 & 31]($0) | 0; //@line 3013
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 86; //@line 3016
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3018
   HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3020
   HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 3022
   HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 3024
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 3026
   HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 3028
   sp = STACKTOP; //@line 3029
   STACKTOP = sp; //@line 3030
   return 0; //@line 3030
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3032
  if (__ZN13SocketAddress14set_ip_addressEPKc($4, $15) | 0) {
   $$0 = __ZNK13SocketAddress14get_ip_versionEv($4) | 0; //@line 3036
  } else {
   $$0 = 0; //@line 3038
  }
  $$1 = $$0; //@line 3040
 } else {
  $$1 = $3; //@line 3042
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3044
 $24 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $$1) | 0; //@line 3045
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 87; //@line 3048
  sp = STACKTOP; //@line 3049
  STACKTOP = sp; //@line 3050
  return 0; //@line 3050
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3052
 $$010 = $24; //@line 3053
 STACKTOP = sp; //@line 3054
 return $$010 | 0; //@line 3054
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4388
 STACKTOP = STACKTOP + 48 | 0; //@line 4389
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 4389
 $vararg_buffer3 = sp + 16 | 0; //@line 4390
 $vararg_buffer = sp; //@line 4391
 $3 = sp + 32 | 0; //@line 4392
 $4 = $0 + 28 | 0; //@line 4393
 $5 = HEAP32[$4 >> 2] | 0; //@line 4394
 HEAP32[$3 >> 2] = $5; //@line 4395
 $7 = $0 + 20 | 0; //@line 4397
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 4399
 HEAP32[$3 + 4 >> 2] = $9; //@line 4400
 HEAP32[$3 + 8 >> 2] = $1; //@line 4402
 HEAP32[$3 + 12 >> 2] = $2; //@line 4404
 $12 = $9 + $2 | 0; //@line 4405
 $13 = $0 + 60 | 0; //@line 4406
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 4409
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 4411
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 4413
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 4415
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 4419
  } else {
   $$04756 = 2; //@line 4421
   $$04855 = $12; //@line 4421
   $$04954 = $3; //@line 4421
   $27 = $17; //@line 4421
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 4427
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 4429
    $38 = $27 >>> 0 > $37 >>> 0; //@line 4430
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 4432
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 4434
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 4436
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 4439
    $44 = $$150 + 4 | 0; //@line 4440
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 4443
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 4446
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 4448
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 4450
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 4452
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 4455
     break L1;
    } else {
     $$04756 = $$1; //@line 4458
     $$04954 = $$150; //@line 4458
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 4462
   HEAP32[$4 >> 2] = 0; //@line 4463
   HEAP32[$7 >> 2] = 0; //@line 4464
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 4467
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 4470
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 4475
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 4481
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4486
  $25 = $20; //@line 4487
  HEAP32[$4 >> 2] = $25; //@line 4488
  HEAP32[$7 >> 2] = $25; //@line 4489
  $$051 = $2; //@line 4490
 }
 STACKTOP = sp; //@line 4492
 return $$051 | 0; //@line 4492
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_44($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18286
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18288
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18290
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18292
 $7 = $2 + 28 | 0; //@line 18293
 $8 = HEAP32[$7 >> 2] | 0; //@line 18294
 if (!$8) {
  $18 = $4 + 12 | 0; //@line 18297
  HEAP32[$18 >> 2] = 0; //@line 18298
  $19 = HEAP32[$2 >> 2] | 0; //@line 18299
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 18300
  __ZL28nsapi_dns_query_async_deletei($19); //@line 18301
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 208; //@line 18304
   $20 = $ReallocAsyncCtx14 + 4 | 0; //@line 18305
   HEAP32[$20 >> 2] = $18; //@line 18306
   $21 = $ReallocAsyncCtx14 + 8 | 0; //@line 18307
   HEAP32[$21 >> 2] = $4; //@line 18308
   $22 = $ReallocAsyncCtx14 + 12 | 0; //@line 18309
   HEAP32[$22 >> 2] = $6; //@line 18310
   sp = STACKTOP; //@line 18311
   return;
  }
  ___async_unwind = 0; //@line 18314
  HEAP32[$ReallocAsyncCtx14 >> 2] = 208; //@line 18315
  $20 = $ReallocAsyncCtx14 + 4 | 0; //@line 18316
  HEAP32[$20 >> 2] = $18; //@line 18317
  $21 = $ReallocAsyncCtx14 + 8 | 0; //@line 18318
  HEAP32[$21 >> 2] = $4; //@line 18319
  $22 = $ReallocAsyncCtx14 + 12 | 0; //@line 18320
  HEAP32[$22 >> 2] = $6; //@line 18321
  sp = STACKTOP; //@line 18322
  return;
 } else {
  $12 = HEAP32[$8 + 4 >> 2] | 0; //@line 18327
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 18328
  FUNCTION_TABLE_vii[$12 & 7]($4, $2 + 16 | 0); //@line 18329
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 18332
   $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 18333
   HEAP32[$13 >> 2] = $7; //@line 18334
   $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 18335
   HEAP32[$14 >> 2] = $4; //@line 18336
   $15 = $ReallocAsyncCtx5 + 12 | 0; //@line 18337
   HEAP32[$15 >> 2] = $2; //@line 18338
   $16 = $ReallocAsyncCtx5 + 16 | 0; //@line 18339
   HEAP32[$16 >> 2] = $4; //@line 18340
   $17 = $ReallocAsyncCtx5 + 20 | 0; //@line 18341
   HEAP32[$17 >> 2] = $6; //@line 18342
   sp = STACKTOP; //@line 18343
   return;
  }
  ___async_unwind = 0; //@line 18346
  HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 18347
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 18348
  HEAP32[$13 >> 2] = $7; //@line 18349
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 18350
  HEAP32[$14 >> 2] = $4; //@line 18351
  $15 = $ReallocAsyncCtx5 + 12 | 0; //@line 18352
  HEAP32[$15 >> 2] = $2; //@line 18353
  $16 = $ReallocAsyncCtx5 + 16 | 0; //@line 18354
  HEAP32[$16 >> 2] = $4; //@line 18355
  $17 = $ReallocAsyncCtx5 + 20 | 0; //@line 18356
  HEAP32[$17 >> 2] = $6; //@line 18357
  sp = STACKTOP; //@line 18358
  return;
 }
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16529
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16531
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16533
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16535
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16537
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16539
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16541
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16543
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16545
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 16551
  $34 = ___async_retval; //@line 16552
  HEAP32[$34 >> 2] = $$2; //@line 16553
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 16556
 if (!$16) {
  $$2 = -3005; //@line 16559
  $34 = ___async_retval; //@line 16560
  HEAP32[$34 >> 2] = $$2; //@line 16561
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 16564
 $18 = HEAP32[$8 >> 2] | 0; //@line 16565
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 80 >> 2] | 0; //@line 16568
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 16569
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 16570
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 141; //@line 16573
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 16574
  HEAP32[$23 >> 2] = $2; //@line 16575
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 16576
  HEAP32[$24 >> 2] = $4; //@line 16577
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 16578
  HEAP32[$25 >> 2] = $6; //@line 16579
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 16580
  HEAP32[$26 >> 2] = $8; //@line 16581
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 16582
  HEAP32[$27 >> 2] = $10; //@line 16583
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 16584
  HEAP32[$28 >> 2] = $12; //@line 16585
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 16586
  HEAP32[$29 >> 2] = $14; //@line 16587
  sp = STACKTOP; //@line 16588
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 16592
 ___async_unwind = 0; //@line 16593
 HEAP32[$ReallocAsyncCtx >> 2] = 141; //@line 16594
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 16595
 HEAP32[$23 >> 2] = $2; //@line 16596
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 16597
 HEAP32[$24 >> 2] = $4; //@line 16598
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 16599
 HEAP32[$25 >> 2] = $6; //@line 16600
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 16601
 HEAP32[$26 >> 2] = $8; //@line 16602
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 16603
 HEAP32[$27 >> 2] = $10; //@line 16604
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 16605
 HEAP32[$28 >> 2] = $12; //@line 16606
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 16607
 HEAP32[$29 >> 2] = $14; //@line 16608
 sp = STACKTOP; //@line 16609
 return;
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15859
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15861
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15863
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15865
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15867
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15869
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15871
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15873
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15875
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 15881
  $34 = ___async_retval; //@line 15882
  HEAP32[$34 >> 2] = $$2; //@line 15883
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 15886
 if (!$16) {
  $$2 = -3005; //@line 15889
  $34 = ___async_retval; //@line 15890
  HEAP32[$34 >> 2] = $$2; //@line 15891
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 15894
 $18 = HEAP32[$8 >> 2] | 0; //@line 15895
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 76 >> 2] | 0; //@line 15898
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 15899
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 15900
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 140; //@line 15903
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 15904
  HEAP32[$23 >> 2] = $2; //@line 15905
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 15906
  HEAP32[$24 >> 2] = $4; //@line 15907
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 15908
  HEAP32[$25 >> 2] = $6; //@line 15909
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 15910
  HEAP32[$26 >> 2] = $8; //@line 15911
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 15912
  HEAP32[$27 >> 2] = $10; //@line 15913
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 15914
  HEAP32[$28 >> 2] = $12; //@line 15915
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 15916
  HEAP32[$29 >> 2] = $14; //@line 15917
  sp = STACKTOP; //@line 15918
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 15922
 ___async_unwind = 0; //@line 15923
 HEAP32[$ReallocAsyncCtx >> 2] = 140; //@line 15924
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 15925
 HEAP32[$23 >> 2] = $2; //@line 15926
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 15927
 HEAP32[$24 >> 2] = $4; //@line 15928
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 15929
 HEAP32[$25 >> 2] = $6; //@line 15930
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 15931
 HEAP32[$26 >> 2] = $8; //@line 15932
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 15933
 HEAP32[$27 >> 2] = $10; //@line 15934
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 15935
 HEAP32[$28 >> 2] = $12; //@line 15936
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 15937
 HEAP32[$29 >> 2] = $14; //@line 15938
 sp = STACKTOP; //@line 15939
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_78($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 21963
 STACKTOP = STACKTOP + 32 | 0; //@line 21964
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 21964
 $$byval_copy = sp; //@line 21965
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21967
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21969
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21971
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21973
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21975
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21977
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21979
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21981
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21983
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21985
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21987
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21989
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21991
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  HEAP8[$8 >> 0] = 5; //@line 21996
  $31 = 608 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 21999
  HEAP32[$$byval_copy >> 2] = HEAP32[$31 >> 2]; //@line 22000
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 22000
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$31 + 8 >> 2]; //@line 22000
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$31 + 12 >> 2]; //@line 22000
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$31 + 16 >> 2]; //@line 22000
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 22001
 }
 __ZN13SocketAddress8set_portEt($2, 53); //@line 22003
 $32 = HEAP32[$18 >> 2] | 0; //@line 22004
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 22005
 $33 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($32, $2, $10, $20) | 0; //@line 22006
 if (!___async) {
  HEAP32[___async_retval >> 2] = $33; //@line 22010
  ___async_unwind = 0; //@line 22011
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 241; //@line 22013
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 22015
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 22017
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 22019
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 22021
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 22023
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 22025
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 22027
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 22029
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $18; //@line 22031
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $20; //@line 22033
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $22; //@line 22035
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $24; //@line 22037
 HEAP32[$ReallocAsyncCtx12 + 52 >> 2] = $26; //@line 22039
 sp = STACKTOP; //@line 22040
 STACKTOP = sp; //@line 22041
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_127($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 2439
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2443
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2445
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2447
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2449
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2451
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2452
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 2456
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 2457
  FUNCTION_TABLE_vi[$16 & 511]($6); //@line 2458
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 96; //@line 2461
   $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 2462
   HEAP32[$17 >> 2] = $4; //@line 2463
   $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 2464
   HEAP32[$18 >> 2] = $8; //@line 2465
   $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 2466
   HEAP32[$19 >> 2] = $10; //@line 2467
   $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 2468
   HEAP32[$20 >> 2] = $12; //@line 2469
   sp = STACKTOP; //@line 2470
   return;
  }
  ___async_unwind = 0; //@line 2473
  HEAP32[$ReallocAsyncCtx7 >> 2] = 96; //@line 2474
  $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 2475
  HEAP32[$17 >> 2] = $4; //@line 2476
  $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 2477
  HEAP32[$18 >> 2] = $8; //@line 2478
  $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 2479
  HEAP32[$19 >> 2] = $10; //@line 2480
  $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 2481
  HEAP32[$20 >> 2] = $12; //@line 2482
  sp = STACKTOP; //@line 2483
  return;
 }
 $21 = HEAP32[$4 >> 2] | 0; //@line 2486
 if (!$21) {
  HEAP32[___async_retval >> 2] = $10; //@line 2490
  return;
 }
 $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 2494
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 2495
 FUNCTION_TABLE_vi[$24 & 511]($8); //@line 2496
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 2499
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 2500
  HEAP32[$25 >> 2] = $8; //@line 2501
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 2502
  HEAP32[$26 >> 2] = $10; //@line 2503
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 2504
  HEAP32[$27 >> 2] = $12; //@line 2505
  sp = STACKTOP; //@line 2506
  return;
 }
 ___async_unwind = 0; //@line 2509
 HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 2510
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 2511
 HEAP32[$25 >> 2] = $8; //@line 2512
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 2513
 HEAP32[$26 >> 2] = $10; //@line 2514
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 2515
 HEAP32[$27 >> 2] = $12; //@line 2516
 sp = STACKTOP; //@line 2517
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_190($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13809
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13813
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13815
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13817
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13819
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13821
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13823
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13825
 $$pre = HEAP32[$4 >> 2] | 0; //@line 13827
 $17 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 13828
 if ($$pre | 0) {
  $20 = HEAP32[$$pre + 4 >> 2] | 0; //@line 13832
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 13833
  FUNCTION_TABLE_vii[$20 & 7]($14, $12); //@line 13834
  if (!___async) {
   ___async_unwind = 0; //@line 13837
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 259; //@line 13839
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $16; //@line 13841
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 13843
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 13845
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $10; //@line 13847
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $17; //@line 13849
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $14; //@line 13851
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 13853
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $12; //@line 13855
  sp = STACKTOP; //@line 13856
  return;
 }
 $29 = $8 + 12 | 0; //@line 13859
 HEAP32[$29 >> 2] = 0; //@line 13860
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 13861
 $30 = FUNCTION_TABLE_iiii[$17 & 31]($6, $10, $8) | 0; //@line 13862
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 13865
  $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 13866
  HEAP32[$31 >> 2] = $29; //@line 13867
  $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 13868
  HEAP32[$32 >> 2] = $14; //@line 13869
  $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 13870
  HEAP32[$33 >> 2] = $4; //@line 13871
  $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 13872
  HEAP32[$34 >> 2] = $12; //@line 13873
  sp = STACKTOP; //@line 13874
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 13878
 ___async_unwind = 0; //@line 13879
 HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 13880
 $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 13881
 HEAP32[$31 >> 2] = $29; //@line 13882
 $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 13883
 HEAP32[$32 >> 2] = $14; //@line 13884
 $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 13885
 HEAP32[$33 >> 2] = $4; //@line 13886
 $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 13887
 HEAP32[$34 >> 2] = $12; //@line 13888
 sp = STACKTOP; //@line 13889
 return;
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 12678
 STACKTOP = STACKTOP + 128 | 0; //@line 12679
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 12679
 $2 = sp; //@line 12680
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12681
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 12682
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 285; //@line 12685
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 12687
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 12689
  sp = STACKTOP; //@line 12690
  STACKTOP = sp; //@line 12691
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12693
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 12696
  return;
 }
 if (!(HEAP32[1680] | 0)) {
  _serial_init(6724, 2, 3); //@line 12701
  $$01213 = 0; //@line 12702
  $$014 = 0; //@line 12702
 } else {
  $$01213 = 0; //@line 12704
  $$014 = 0; //@line 12704
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 12708
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12713
   _serial_putc(6724, 13); //@line 12714
   if (___async) {
    label = 8; //@line 12717
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12720
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12723
  _serial_putc(6724, $$01213 << 24 >> 24); //@line 12724
  if (___async) {
   label = 11; //@line 12727
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12730
  $24 = $$014 + 1 | 0; //@line 12731
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 12734
   break;
  } else {
   $$014 = $24; //@line 12737
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 286; //@line 12741
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 12743
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 12745
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 12747
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 12749
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 12751
  sp = STACKTOP; //@line 12752
  STACKTOP = sp; //@line 12753
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 287; //@line 12756
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 12758
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 12760
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 12762
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 12764
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 12766
  sp = STACKTOP; //@line 12767
  STACKTOP = sp; //@line 12768
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 12771
  return;
 }
}
function __ZN6Socket4openEP12NetworkStack__async_cb_142($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4667
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4673
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4675
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4677
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4679
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4681
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 4682
 $15 = $$pre$i$i; //@line 4683
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 4684
 if (!$$pre$i$i) {
  $24 = HEAP32[$8 >> 2] | 0; //@line 4687
  $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 84 >> 2] | 0; //@line 4690
  $28 = HEAP32[$10 >> 2] | 0; //@line 4691
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 4692
  FUNCTION_TABLE_viiii[$27 & 7]($24, $28, 123, $12); //@line 4693
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 124; //@line 4696
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 4697
   HEAP32[$29 >> 2] = $14; //@line 4698
   sp = STACKTOP; //@line 4699
   return;
  }
  ___async_unwind = 0; //@line 4702
  HEAP32[$ReallocAsyncCtx6 >> 2] = 124; //@line 4703
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 4704
  HEAP32[$29 >> 2] = $14; //@line 4705
  sp = STACKTOP; //@line 4706
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 4710
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 4711
  FUNCTION_TABLE_vi[$18 & 511]($6); //@line 4712
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 122; //@line 4715
   $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 4716
   HEAP32[$19 >> 2] = $6; //@line 4717
   $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 4718
   HEAP32[$20 >> 2] = $8; //@line 4719
   $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 4720
   HEAP32[$21 >> 2] = $10; //@line 4721
   $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 4722
   HEAP32[$22 >> 2] = $12; //@line 4723
   $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 4724
   HEAP32[$23 >> 2] = $14; //@line 4725
   sp = STACKTOP; //@line 4726
   return;
  }
  ___async_unwind = 0; //@line 4729
  HEAP32[$ReallocAsyncCtx5 >> 2] = 122; //@line 4730
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 4731
  HEAP32[$19 >> 2] = $6; //@line 4732
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 4733
  HEAP32[$20 >> 2] = $8; //@line 4734
  $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 4735
  HEAP32[$21 >> 2] = $10; //@line 4736
  $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 4737
  HEAP32[$22 >> 2] = $12; //@line 4738
  $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 4739
  HEAP32[$23 >> 2] = $14; //@line 4740
  sp = STACKTOP; //@line 4741
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_139($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4260
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4264
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4266
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 4268
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4270
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 4272
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4274
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4276
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4278
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4280
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 4283
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4285
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 4289
   $27 = $6 + 24 | 0; //@line 4290
   $28 = $4 + 8 | 0; //@line 4291
   $29 = $6 + 54 | 0; //@line 4292
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 4322
    HEAP8[$14 >> 0] = 0; //@line 4323
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 4324
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 4325
    if (!___async) {
     ___async_unwind = 0; //@line 4328
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 343; //@line 4330
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 4332
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 4334
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 4336
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 4338
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 4340
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 4342
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 4344
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 4346
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 4348
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 4350
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 4352
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 4354
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 4356
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 4359
    sp = STACKTOP; //@line 4360
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 4365
 HEAP8[$14 >> 0] = $12; //@line 4366
 return;
}
function ___stpcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $9 = 0, label = 0;
 $2 = $1; //@line 13468
 L1 : do {
  if (!(($2 ^ $0) & 3)) {
   if (!($2 & 3)) {
    $$026$lcssa = $1; //@line 13478
    $$027$lcssa = $0; //@line 13478
   } else {
    $$02642 = $1; //@line 13480
    $$02741 = $0; //@line 13480
    while (1) {
     $9 = HEAP8[$$02642 >> 0] | 0; //@line 13482
     HEAP8[$$02741 >> 0] = $9; //@line 13483
     if (!($9 << 24 >> 24)) {
      $$029 = $$02741; //@line 13486
      break L1;
     }
     $11 = $$02642 + 1 | 0; //@line 13489
     $12 = $$02741 + 1 | 0; //@line 13490
     if (!($11 & 3)) {
      $$026$lcssa = $11; //@line 13495
      $$027$lcssa = $12; //@line 13495
      break;
     } else {
      $$02642 = $11; //@line 13498
      $$02741 = $12; //@line 13498
     }
    }
   }
   $16 = HEAP32[$$026$lcssa >> 2] | 0; //@line 13502
   if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
    $$02536 = $$027$lcssa; //@line 13509
    $$037 = $$026$lcssa; //@line 13509
    $24 = $16; //@line 13509
    while (1) {
     $22 = $$037 + 4 | 0; //@line 13511
     $23 = $$02536 + 4 | 0; //@line 13512
     HEAP32[$$02536 >> 2] = $24; //@line 13513
     $24 = HEAP32[$22 >> 2] | 0; //@line 13514
     if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
      $$0$lcssa = $22; //@line 13523
      $$025$lcssa = $23; //@line 13523
      break;
     } else {
      $$02536 = $23; //@line 13521
      $$037 = $22; //@line 13521
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa; //@line 13528
    $$025$lcssa = $$027$lcssa; //@line 13528
   }
   $$1$ph = $$0$lcssa; //@line 13530
   $$128$ph = $$025$lcssa; //@line 13530
   label = 8; //@line 13531
  } else {
   $$1$ph = $1; //@line 13533
   $$128$ph = $0; //@line 13533
   label = 8; //@line 13534
  }
 } while (0);
 if ((label | 0) == 8) {
  $31 = HEAP8[$$1$ph >> 0] | 0; //@line 13538
  HEAP8[$$128$ph >> 0] = $31; //@line 13539
  if (!($31 << 24 >> 24)) {
   $$029 = $$128$ph; //@line 13542
  } else {
   $$12834 = $$128$ph; //@line 13544
   $$135 = $$1$ph; //@line 13544
   while (1) {
    $$135 = $$135 + 1 | 0; //@line 13546
    $34 = $$12834 + 1 | 0; //@line 13547
    $35 = HEAP8[$$135 >> 0] | 0; //@line 13548
    HEAP8[$34 >> 0] = $35; //@line 13549
    if (!($35 << 24 >> 24)) {
     $$029 = $34; //@line 13552
     break;
    } else {
     $$12834 = $34; //@line 13555
    }
   }
  }
 }
 return $$029 | 0; //@line 13560
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4144
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4148
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4150
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 4152
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4154
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 4156
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4158
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4160
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4162
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4164
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4166
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4168
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 4170
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 4173
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 4174
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 4207
    HEAP8[$14 >> 0] = 0; //@line 4208
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 4209
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 4210
    if (!___async) {
     ___async_unwind = 0; //@line 4213
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 343; //@line 4215
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 4217
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 4219
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 4221
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 4223
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 4225
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 4227
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 4229
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 4231
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 4233
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 4235
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 4237
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 4239
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 4241
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 4244
    sp = STACKTOP; //@line 4245
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 4250
 HEAP8[$14 >> 0] = $12; //@line 4251
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1280
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1286
   _wait_ms(10); //@line 1287
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 56; //@line 1290
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1292
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 1294
    sp = STACKTOP; //@line 1295
    return 0; //@line 1296
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1298
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 1304
 $9 = $0 + 156 | 0; //@line 1305
 _equeue_mutex_lock($9); //@line 1306
 $10 = $0 + 24 | 0; //@line 1307
 $11 = HEAP32[$10 >> 2] | 0; //@line 1308
 L7 : do {
  if (!$11) {
   label = 11; //@line 1312
  } else {
   $$03842$i = $10; //@line 1314
   $14 = $11; //@line 1314
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 1321
    $21 = HEAP32[$20 >> 2] | 0; //@line 1322
    if (!$21) {
     label = 11; //@line 1325
     break L7;
    } else {
     $$03842$i = $20; //@line 1328
     $14 = $21; //@line 1328
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 1332
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 1335
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 1337
    $$038$sink$i = $17 + 8 | 0; //@line 1339
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 1343
   _equeue_mutex_unlock($9); //@line 1344
   $$1$i9 = $14; //@line 1345
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 1350
   $24 = HEAP32[$23 >> 2] | 0; //@line 1351
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 1354
    $$0 = 0; //@line 1355
    return $$0 | 0; //@line 1356
   } else {
    $26 = $0 + 32 | 0; //@line 1358
    $27 = HEAP32[$26 >> 2] | 0; //@line 1359
    HEAP32[$26 >> 2] = $27 + $8; //@line 1361
    HEAP32[$23 >> 2] = $24 - $8; //@line 1363
    HEAP32[$27 >> 2] = $8; //@line 1364
    HEAP8[$27 + 4 >> 0] = 1; //@line 1366
    _equeue_mutex_unlock($9); //@line 1367
    if (!$27) {
     $$0 = 0; //@line 1370
    } else {
     $$1$i9 = $27; //@line 1372
     break;
    }
    return $$0 | 0; //@line 1375
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 1380
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 1382
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 1384
 $$0 = $$1$i9 + 36 | 0; //@line 1386
 return $$0 | 0; //@line 1387
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 314
 }
 ret = dest | 0; //@line 317
 dest_end = dest + num | 0; //@line 318
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 322
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 323
   dest = dest + 1 | 0; //@line 324
   src = src + 1 | 0; //@line 325
   num = num - 1 | 0; //@line 326
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 328
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 329
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 331
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 332
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 333
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 334
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 335
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 336
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 337
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 338
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 339
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 340
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 341
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 342
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 343
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 344
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 345
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 346
   dest = dest + 64 | 0; //@line 347
   src = src + 64 | 0; //@line 348
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 351
   dest = dest + 4 | 0; //@line 352
   src = src + 4 | 0; //@line 353
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 357
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 359
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 360
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 361
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 362
   dest = dest + 4 | 0; //@line 363
   src = src + 4 | 0; //@line 364
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 369
  dest = dest + 1 | 0; //@line 370
  src = src + 1 | 0; //@line 371
 }
 return ret | 0; //@line 373
}
function _main__async_cb_174($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 12498
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12500
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12502
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12504
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12506
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12508
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12510
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12512
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12514
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12516
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12518
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12520
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12522
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12524
 __ZN17EthernetInterfaceC2Ev($2); //@line 12525
 if (!(__ZN17EthernetInterface7connectEv($2) | 0)) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(56) | 0; //@line 12529
  $30 = __ZN17EthernetInterface14get_ip_addressEv($2) | 0; //@line 12530
  if (!___async) {
   HEAP32[___async_retval >> 2] = $30; //@line 12534
   ___async_unwind = 0; //@line 12535
  }
  HEAP32[$ReallocAsyncCtx11 >> 2] = 295; //@line 12537
  HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $4; //@line 12539
  HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $6; //@line 12541
  HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $8; //@line 12543
  HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $10; //@line 12545
  HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $12; //@line 12547
  HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $20; //@line 12549
  HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $22; //@line 12551
  HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $24; //@line 12553
  HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $26; //@line 12555
  HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $2; //@line 12557
  HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $14; //@line 12559
  HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $16; //@line 12561
  HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $18; //@line 12563
  sp = STACKTOP; //@line 12564
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 12567
 _puts(3042) | 0; //@line 12568
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 294; //@line 12571
  $29 = $ReallocAsyncCtx + 4 | 0; //@line 12572
  HEAP32[$29 >> 2] = $2; //@line 12573
  sp = STACKTOP; //@line 12574
  return;
 }
 ___async_unwind = 0; //@line 12577
 HEAP32[$ReallocAsyncCtx >> 2] = 294; //@line 12578
 $29 = $ReallocAsyncCtx + 4 | 0; //@line 12579
 HEAP32[$29 >> 2] = $2; //@line 12580
 sp = STACKTOP; //@line 12581
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_24($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17094
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17098
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17100
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17102
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17104
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17105
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 17109
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 17110
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 17111
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 114; //@line 17114
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 17115
   HEAP32[$14 >> 2] = $4; //@line 17116
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 17117
   HEAP32[$15 >> 2] = $6; //@line 17118
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 17119
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 17120
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 17121
   HEAP32[$17 >> 2] = $8; //@line 17122
   sp = STACKTOP; //@line 17123
   return;
  }
  ___async_unwind = 0; //@line 17126
  HEAP32[$ReallocAsyncCtx4 >> 2] = 114; //@line 17127
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 17128
  HEAP32[$14 >> 2] = $4; //@line 17129
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 17130
  HEAP32[$15 >> 2] = $6; //@line 17131
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 17132
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 17133
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 17134
  HEAP32[$17 >> 2] = $8; //@line 17135
  sp = STACKTOP; //@line 17136
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 17139
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 17143
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 17147
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17148
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 17149
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 115; //@line 17152
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 17153
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 17154
  sp = STACKTOP; //@line 17155
  return;
 }
 ___async_unwind = 0; //@line 17158
 HEAP32[$ReallocAsyncCtx5 >> 2] = 115; //@line 17159
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 17160
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 17161
 sp = STACKTOP; //@line 17162
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_200($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 16294
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16296
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16298
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16300
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16302
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16304
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16306
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16308
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16310
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16312
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16314
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16316
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16318
 if (!$AsyncRetVal) {
  HEAP32[___async_retval >> 2] = -3007; //@line 16322
  return;
 }
 $25 = $AsyncRetVal + 16 | 0; //@line 16325
 HEAP32[$25 >> 2] = 0; //@line 16326
 HEAP32[$25 + 4 >> 2] = 0; //@line 16326
 HEAP32[$25 + 8 >> 2] = 0; //@line 16326
 HEAP32[$25 + 12 >> 2] = 0; //@line 16326
 HEAP32[$25 + 16 >> 2] = 0; //@line 16326
 HEAP32[$25 + 20 >> 2] = 0; //@line 16326
 HEAP32[$25 + 24 >> 2] = 0; //@line 16326
 HEAP32[$25 + 28 >> 2] = 0; //@line 16326
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(52) | 0; //@line 16330
 $29 = __ZnajRKSt9nothrow_t(($20 | 0) < -1 ? -1 : $20 + 1 | 0, 8621) | 0; //@line 16331
 if (!___async) {
  HEAP32[___async_retval >> 2] = $29; //@line 16335
  ___async_unwind = 0; //@line 16336
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 160; //@line 16338
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 16340
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 16342
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 16344
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $AsyncRetVal; //@line 16346
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $25; //@line 16348
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $8; //@line 16350
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $10; //@line 16352
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $12; //@line 16354
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $14; //@line 16356
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $16; //@line 16358
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $18; //@line 16360
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $22; //@line 16362
 sp = STACKTOP; //@line 16363
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_187($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13685
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13689
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13691
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13693
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13695
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13696
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 13700
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 13701
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 13702
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 261; //@line 13705
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 13706
   HEAP32[$14 >> 2] = $4; //@line 13707
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 13708
   HEAP32[$15 >> 2] = $6; //@line 13709
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 13710
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 13711
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 13712
   HEAP32[$17 >> 2] = $8; //@line 13713
   sp = STACKTOP; //@line 13714
   return;
  }
  ___async_unwind = 0; //@line 13717
  HEAP32[$ReallocAsyncCtx4 >> 2] = 261; //@line 13718
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 13719
  HEAP32[$14 >> 2] = $4; //@line 13720
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 13721
  HEAP32[$15 >> 2] = $6; //@line 13722
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 13723
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 13724
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 13725
  HEAP32[$17 >> 2] = $8; //@line 13726
  sp = STACKTOP; //@line 13727
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 13730
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 13734
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 13738
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13739
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 13740
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 13743
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 13744
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 13745
  sp = STACKTOP; //@line 13746
  return;
 }
 ___async_unwind = 0; //@line 13749
 HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 13750
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 13751
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 13752
 sp = STACKTOP; //@line 13753
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14200
 STACKTOP = STACKTOP + 64 | 0; //@line 14201
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14201
 $3 = sp; //@line 14202
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 14205
 } else {
  if (!$1) {
   $$2 = 0; //@line 14209
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14211
   $6 = ___dynamic_cast($1, 128, 112, 0) | 0; //@line 14212
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 332; //@line 14215
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 14217
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14219
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 14221
    sp = STACKTOP; //@line 14222
    STACKTOP = sp; //@line 14223
    return 0; //@line 14223
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14225
   if (!$6) {
    $$2 = 0; //@line 14228
   } else {
    dest = $3 + 4 | 0; //@line 14231
    stop = dest + 52 | 0; //@line 14231
    do {
     HEAP32[dest >> 2] = 0; //@line 14231
     dest = dest + 4 | 0; //@line 14231
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 14232
    HEAP32[$3 + 8 >> 2] = $0; //@line 14234
    HEAP32[$3 + 12 >> 2] = -1; //@line 14236
    HEAP32[$3 + 48 >> 2] = 1; //@line 14238
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 14241
    $18 = HEAP32[$2 >> 2] | 0; //@line 14242
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14243
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 14244
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 333; //@line 14247
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14249
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14251
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 14253
     sp = STACKTOP; //@line 14254
     STACKTOP = sp; //@line 14255
     return 0; //@line 14255
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14257
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 14264
     $$0 = 1; //@line 14265
    } else {
     $$0 = 0; //@line 14267
    }
    $$2 = $$0; //@line 14269
   }
  }
 }
 STACKTOP = sp; //@line 14273
 return $$2 | 0; //@line 14273
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 13362
 STACKTOP = STACKTOP + 128 | 0; //@line 13363
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 13363
 $4 = sp + 124 | 0; //@line 13364
 $5 = sp; //@line 13365
 dest = $5; //@line 13366
 src = 1496; //@line 13366
 stop = dest + 124 | 0; //@line 13366
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 13366
  dest = dest + 4 | 0; //@line 13366
  src = src + 4 | 0; //@line 13366
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 13372
   $$015 = 1; //@line 13372
   label = 4; //@line 13373
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 13376
   $$0 = -1; //@line 13377
  }
 } else {
  $$014 = $0; //@line 13380
  $$015 = $1; //@line 13380
  label = 4; //@line 13381
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 13385
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 13387
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 13389
  $14 = $5 + 20 | 0; //@line 13390
  HEAP32[$14 >> 2] = $$014; //@line 13391
  HEAP32[$5 + 44 >> 2] = $$014; //@line 13393
  $16 = $$014 + $$$015 | 0; //@line 13394
  $17 = $5 + 16 | 0; //@line 13395
  HEAP32[$17 >> 2] = $16; //@line 13396
  HEAP32[$5 + 28 >> 2] = $16; //@line 13398
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 13399
  $19 = _vfprintf($5, $2, $3) | 0; //@line 13400
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 317; //@line 13403
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 13405
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 13407
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 13409
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 13411
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 13413
   sp = STACKTOP; //@line 13414
   STACKTOP = sp; //@line 13415
   return 0; //@line 13415
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13417
  if (!$$$015) {
   $$0 = $19; //@line 13420
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 13422
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 13427
   $$0 = $19; //@line 13428
  }
 }
 STACKTOP = sp; //@line 13431
 return $$0 | 0; //@line 13431
}
function _main__async_cb_175($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12589
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12591
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12593
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12595
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12597
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12599
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12601
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12603
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12605
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12607
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12609
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12611
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12613
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12615
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12617
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12619
 HEAP8[$2 >> 0] = HEAP8[3084] | 0; //@line 12620
 HEAP8[$2 + 1 >> 0] = HEAP8[3085] | 0; //@line 12620
 HEAP8[$2 + 2 >> 0] = HEAP8[3086] | 0; //@line 12620
 HEAP8[$2 + 3 >> 0] = HEAP8[3087] | 0; //@line 12620
 HEAP8[$2 + 4 >> 0] = HEAP8[3088] | 0; //@line 12620
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 12621
 $31 = __ZN9UDPSocket6sendtoEPKctPKvj($4, 3089, 37, $2, 5) | 0; //@line 12622
 if (!___async) {
  HEAP32[___async_retval >> 2] = $31; //@line 12626
  ___async_unwind = 0; //@line 12627
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 297; //@line 12629
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 12631
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 12633
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 12635
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 12637
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 12639
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 12641
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 12643
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 12645
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 12647
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 12649
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 12651
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $24; //@line 12653
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $26; //@line 12655
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $28; //@line 12657
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $30; //@line 12659
 sp = STACKTOP; //@line 12660
 return;
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23463
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 23465
 $7 = $4 + 156 | 0; //@line 23466
 _equeue_mutex_lock($7); //@line 23467
 $8 = $4 + 24 | 0; //@line 23468
 $9 = HEAP32[$8 >> 2] | 0; //@line 23469
 L3 : do {
  if (!$9) {
   label = 9; //@line 23473
  } else {
   $$03842$i = $8; //@line 23475
   $12 = $9; //@line 23475
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 23482
    $19 = HEAP32[$18 >> 2] | 0; //@line 23483
    if (!$19) {
     label = 9; //@line 23486
     break L3;
    } else {
     $$03842$i = $18; //@line 23489
     $12 = $19; //@line 23489
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 23493
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 23496
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 23498
    $$038$sink$i = $15 + 8 | 0; //@line 23500
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 23504
   _equeue_mutex_unlock($7); //@line 23505
   $$1$i9 = $12; //@line 23506
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 23511
   $22 = HEAP32[$21 >> 2] | 0; //@line 23512
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 23515
    $$0 = 0; //@line 23516
    $34 = ___async_retval; //@line 23517
    HEAP32[$34 >> 2] = $$0; //@line 23518
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 23521
    $25 = HEAP32[$24 >> 2] | 0; //@line 23522
    HEAP32[$24 >> 2] = $25 + $6; //@line 23524
    HEAP32[$21 >> 2] = $22 - $6; //@line 23526
    HEAP32[$25 >> 2] = $6; //@line 23527
    HEAP8[$25 + 4 >> 0] = 1; //@line 23529
    _equeue_mutex_unlock($7); //@line 23530
    if (!$25) {
     $$0 = 0; //@line 23533
    } else {
     $$1$i9 = $25; //@line 23535
     break;
    }
    $34 = ___async_retval; //@line 23538
    HEAP32[$34 >> 2] = $$0; //@line 23539
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 23545
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 23547
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 23549
 $$0 = $$1$i9 + 36 | 0; //@line 23551
 $34 = ___async_retval; //@line 23552
 HEAP32[$34 >> 2] = $$0; //@line 23553
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15532
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15538
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 15542
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 15543
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15544
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 15545
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 349; //@line 15548
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 15550
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15552
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15554
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 15556
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 15558
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 15560
    sp = STACKTOP; //@line 15561
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15564
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 15568
    $$0 = $0 + 24 | 0; //@line 15569
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15571
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 15572
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15577
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 15583
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 15586
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 350; //@line 15591
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15593
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 15595
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 15597
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15599
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15601
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 15603
    sp = STACKTOP; //@line 15604
    return;
   }
  }
 } while (0);
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 622
 STACKTOP = STACKTOP + 48 | 0; //@line 623
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 623
 $$byval_copy = sp + 20 | 0; //@line 624
 $3 = sp; //@line 625
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 626
 $4 = __Znwj(76) | 0; //@line 627
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 44; //@line 630
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 632
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 634
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 636
  sp = STACKTOP; //@line 637
  STACKTOP = sp; //@line 638
  return 0; //@line 638
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 640
 dest = $4; //@line 641
 stop = dest + 76 | 0; //@line 641
 do {
  HEAP32[dest >> 2] = 0; //@line 641
  dest = dest + 4 | 0; //@line 641
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 642
 HEAP32[$3 >> 2] = 0; //@line 643
 HEAP32[$3 + 4 >> 2] = 0; //@line 643
 HEAP32[$3 + 8 >> 2] = 0; //@line 643
 HEAP32[$3 + 12 >> 2] = 0; //@line 643
 HEAP32[$3 + 16 >> 2] = 0; //@line 643
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 644
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 644
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 644
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 644
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 644
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 645
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 646
 if (($9 | 0) == -1) {
  $$0$i = -3001; //@line 649
  STACKTOP = sp; //@line 650
  return $$0$i | 0; //@line 650
 }
 HEAP32[$4 >> 2] = $9; //@line 652
 HEAP8[$4 + 8 >> 0] = 0; //@line 654
 HEAP32[$4 + 4 >> 2] = $2; //@line 656
 HEAP32[$1 >> 2] = $4; //@line 657
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 658
 _wait_ms(1); //@line 659
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 45; //@line 662
  sp = STACKTOP; //@line 663
  STACKTOP = sp; //@line 664
  return 0; //@line 664
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 666
 $$0$i = 0; //@line 667
 STACKTOP = sp; //@line 668
 return $$0$i | 0; //@line 668
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 219
 STACKTOP = STACKTOP + 48 | 0; //@line 220
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 220
 $$byval_copy = sp + 20 | 0; //@line 221
 $3 = sp; //@line 222
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 223
 $4 = __Znwj(76) | 0; //@line 224
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 31; //@line 227
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 229
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 231
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 233
  sp = STACKTOP; //@line 234
  STACKTOP = sp; //@line 235
  return 0; //@line 235
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 237
 dest = $4; //@line 238
 stop = dest + 76 | 0; //@line 238
 do {
  HEAP32[dest >> 2] = 0; //@line 238
  dest = dest + 4 | 0; //@line 238
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 239
 HEAP32[$3 >> 2] = 0; //@line 240
 HEAP32[$3 + 4 >> 2] = 0; //@line 240
 HEAP32[$3 + 8 >> 2] = 0; //@line 240
 HEAP32[$3 + 12 >> 2] = 0; //@line 240
 HEAP32[$3 + 16 >> 2] = 0; //@line 240
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 241
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 241
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 241
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 241
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 241
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 242
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 243
 if (($9 | 0) == -1) {
  $$0 = -3001; //@line 246
  STACKTOP = sp; //@line 247
  return $$0 | 0; //@line 247
 }
 HEAP32[$4 >> 2] = $9; //@line 249
 HEAP8[$4 + 8 >> 0] = 0; //@line 251
 HEAP32[$4 + 4 >> 2] = $2; //@line 253
 HEAP32[$1 >> 2] = $4; //@line 254
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 255
 _wait_ms(1); //@line 256
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 32; //@line 259
  sp = STACKTOP; //@line 260
  STACKTOP = sp; //@line 261
  return 0; //@line 261
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 263
 $$0 = 0; //@line 264
 STACKTOP = sp; //@line 265
 return $$0 | 0; //@line 265
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_91($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23013
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23017
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23019
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 23020
 $8 = HEAP32[$4 + 64 >> 2] | 0; //@line 23022
 if ($8 | 0) {
  __ZdaPv($8); //@line 23025
 }
 $11 = HEAP32[$4 + 12 >> 2] | 0; //@line 23028
 if ($11 | 0) {
  __ZdlPv($11); //@line 23031
 }
 $14 = HEAP32[$4 + 44 >> 2] | 0; //@line 23034
 if ($14 | 0) {
  $18 = HEAP32[$14 + 8 >> 2] | 0; //@line 23039
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 23040
  FUNCTION_TABLE_vi[$18 & 511]($4 + 32 | 0); //@line 23041
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 23044
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 23045
   HEAP32[$19 >> 2] = $4; //@line 23046
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 23047
   HEAP32[$20 >> 2] = $6; //@line 23048
   sp = STACKTOP; //@line 23049
   return;
  }
  ___async_unwind = 0; //@line 23052
  HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 23053
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 23054
  HEAP32[$19 >> 2] = $4; //@line 23055
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 23056
  HEAP32[$20 >> 2] = $6; //@line 23057
  sp = STACKTOP; //@line 23058
  return;
 }
 $22 = HEAP32[$4 + 28 >> 2] | 0; //@line 23062
 if (!$22) {
  __ZdlPv($4); //@line 23065
  HEAP32[6700 + ($6 << 2) >> 2] = 0; //@line 23067
  return;
 }
 $26 = HEAP32[$22 + 8 >> 2] | 0; //@line 23072
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23073
 FUNCTION_TABLE_vi[$26 & 511]($4 + 16 | 0); //@line 23074
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 23077
  $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 23078
  HEAP32[$27 >> 2] = $4; //@line 23079
  $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 23080
  HEAP32[$28 >> 2] = $6; //@line 23081
  sp = STACKTOP; //@line 23082
  return;
 }
 ___async_unwind = 0; //@line 23085
 HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 23086
 $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 23087
 HEAP32[$27 >> 2] = $4; //@line 23088
 $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 23089
 HEAP32[$28 >> 2] = $6; //@line 23090
 sp = STACKTOP; //@line 23091
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_102($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23866
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23870
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23872
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23874
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23876
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23877
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 23881
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 23882
  FUNCTION_TABLE_vi[$13 & 511]($6); //@line 23883
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 23886
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 23887
   HEAP32[$14 >> 2] = $4; //@line 23888
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 23889
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 23890
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 23891
   HEAP32[$16 >> 2] = $8; //@line 23892
   sp = STACKTOP; //@line 23893
   return;
  }
  ___async_unwind = 0; //@line 23896
  HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 23897
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 23898
  HEAP32[$14 >> 2] = $4; //@line 23899
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 23900
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 23901
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 23902
  HEAP32[$16 >> 2] = $8; //@line 23903
  sp = STACKTOP; //@line 23904
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 23907
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 23911
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 23915
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 23916
 FUNCTION_TABLE_vi[$20 & 511]($8); //@line 23917
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 23920
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 23921
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 23922
  sp = STACKTOP; //@line 23923
  return;
 }
 ___async_unwind = 0; //@line 23926
 HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 23927
 $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 23928
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 23929
 sp = STACKTOP; //@line 23930
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13634
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 13639
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 13644
  } else {
   $20 = $0 & 255; //@line 13646
   $21 = $0 & 255; //@line 13647
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 13653
   } else {
    $26 = $1 + 20 | 0; //@line 13655
    $27 = HEAP32[$26 >> 2] | 0; //@line 13656
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 13662
     HEAP8[$27 >> 0] = $20; //@line 13663
     $34 = $21; //@line 13664
    } else {
     label = 12; //@line 13666
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13671
     $32 = ___overflow($1, $0) | 0; //@line 13672
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 322; //@line 13675
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 13677
      sp = STACKTOP; //@line 13678
      return 0; //@line 13679
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 13681
      $34 = $32; //@line 13682
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 13687
   $$0 = $34; //@line 13688
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 13693
   $8 = $0 & 255; //@line 13694
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 13700
    $14 = HEAP32[$13 >> 2] | 0; //@line 13701
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 13707
     HEAP8[$14 >> 0] = $7; //@line 13708
     $$0 = $8; //@line 13709
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13713
   $19 = ___overflow($1, $0) | 0; //@line 13714
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 321; //@line 13717
    sp = STACKTOP; //@line 13718
    return 0; //@line 13719
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13721
    $$0 = $19; //@line 13722
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 13727
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 5109
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 5112
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 5115
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 5118
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 5124
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 5133
     $24 = $13 >>> 2; //@line 5134
     $$090 = 0; //@line 5135
     $$094 = $7; //@line 5135
     while (1) {
      $25 = $$094 >>> 1; //@line 5137
      $26 = $$090 + $25 | 0; //@line 5138
      $27 = $26 << 1; //@line 5139
      $28 = $27 + $23 | 0; //@line 5140
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 5143
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5147
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 5153
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 5161
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 5165
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 5171
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 5176
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 5179
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 5179
      }
     }
     $46 = $27 + $24 | 0; //@line 5182
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 5185
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5189
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 5201
     } else {
      $$4 = 0; //@line 5203
     }
    } else {
     $$4 = 0; //@line 5206
    }
   } else {
    $$4 = 0; //@line 5209
   }
  } else {
   $$4 = 0; //@line 5212
  }
 } while (0);
 return $$4 | 0; //@line 5215
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_49($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 18567
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18573
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18575
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18577
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18579
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18581
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18583
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18585
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18587
 $$pre85 = HEAP32[$6 >> 2] | 0; //@line 18588
 HEAP32[$$pre85 + 16 >> 2] = HEAP32[$8 >> 2]; //@line 18592
 HEAP32[$10 + 8 >> 2] = 0; //@line 18594
 HEAP32[$10 >> 2] = 215; //@line 18595
 HEAP32[$10 + 4 >> 2] = $$pre85; //@line 18597
 $23 = $10 + 12 | 0; //@line 18598
 HEAP32[$23 >> 2] = 724; //@line 18599
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 18600
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $10); //@line 18601
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 18604
  $24 = $ReallocAsyncCtx18 + 4 | 0; //@line 18605
  HEAP32[$24 >> 2] = $23; //@line 18606
  $25 = $ReallocAsyncCtx18 + 8 | 0; //@line 18607
  HEAP32[$25 >> 2] = $14; //@line 18608
  $26 = $ReallocAsyncCtx18 + 12 | 0; //@line 18609
  HEAP32[$26 >> 2] = $16; //@line 18610
  $27 = $ReallocAsyncCtx18 + 16 | 0; //@line 18611
  HEAP32[$27 >> 2] = $10; //@line 18612
  $28 = $ReallocAsyncCtx18 + 20 | 0; //@line 18613
  HEAP32[$28 >> 2] = $18; //@line 18614
  sp = STACKTOP; //@line 18615
  return;
 }
 ___async_unwind = 0; //@line 18618
 HEAP32[$ReallocAsyncCtx18 >> 2] = 216; //@line 18619
 $24 = $ReallocAsyncCtx18 + 4 | 0; //@line 18620
 HEAP32[$24 >> 2] = $23; //@line 18621
 $25 = $ReallocAsyncCtx18 + 8 | 0; //@line 18622
 HEAP32[$25 >> 2] = $14; //@line 18623
 $26 = $ReallocAsyncCtx18 + 12 | 0; //@line 18624
 HEAP32[$26 >> 2] = $16; //@line 18625
 $27 = $ReallocAsyncCtx18 + 16 | 0; //@line 18626
 HEAP32[$27 >> 2] = $10; //@line 18627
 $28 = $ReallocAsyncCtx18 + 20 | 0; //@line 18628
 HEAP32[$28 >> 2] = $18; //@line 18629
 sp = STACKTOP; //@line 18630
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2748
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2750
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2754
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2756
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2758
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2760
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2762
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2764
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2766
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2768
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2770
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2772
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2774
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2776
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2778
 HEAP32[$14 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2]; //@line 2780
 $31 = HEAP32[$16 >> 2] | 0; //@line 2781
 HEAP32[$18 >> 2] = 0; //@line 2782
 HEAP32[$20 >> 2] = 175; //@line 2783
 HEAP32[$22 >> 2] = $31; //@line 2784
 HEAP32[$10 >> 2] = 724; //@line 2785
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 2786
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 2787
 if (!___async) {
  ___async_unwind = 0; //@line 2790
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 246; //@line 2792
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 2794
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 2796
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $8; //@line 2798
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 2800
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $12; //@line 2802
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 2804
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 2806
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $20; //@line 2808
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $22; //@line 2810
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $24; //@line 2812
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $26; //@line 2814
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $28; //@line 2816
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 2818
 sp = STACKTOP; //@line 2819
 return;
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4774
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 4779
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 4784
  } else {
   $20 = $0 & 255; //@line 4786
   $21 = $0 & 255; //@line 4787
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 4793
   } else {
    $26 = $1 + 20 | 0; //@line 4795
    $27 = HEAP32[$26 >> 2] | 0; //@line 4796
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 4802
     HEAP8[$27 >> 0] = $20; //@line 4803
     $34 = $21; //@line 4804
    } else {
     label = 12; //@line 4806
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4811
     $32 = ___overflow($1, $0) | 0; //@line 4812
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 307; //@line 4815
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4817
      sp = STACKTOP; //@line 4818
      return 0; //@line 4819
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 4821
      $34 = $32; //@line 4822
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 4827
   $$0 = $34; //@line 4828
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 4833
   $8 = $0 & 255; //@line 4834
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 4840
    $14 = HEAP32[$13 >> 2] | 0; //@line 4841
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 4847
     HEAP8[$14 >> 0] = $7; //@line 4848
     $$0 = $8; //@line 4849
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4853
   $19 = ___overflow($1, $0) | 0; //@line 4854
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 306; //@line 4857
    sp = STACKTOP; //@line 4858
    return 0; //@line 4859
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4861
    $$0 = $19; //@line 4862
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 4867
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5494
 $1 = $0 + 20 | 0; //@line 5495
 $3 = $0 + 28 | 0; //@line 5497
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 5503
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5504
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 5505
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 313; //@line 5508
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5510
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5512
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 5514
    sp = STACKTOP; //@line 5515
    return 0; //@line 5516
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5518
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 5522
     break;
    } else {
     label = 5; //@line 5525
     break;
    }
   }
  } else {
   label = 5; //@line 5530
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 5534
  $14 = HEAP32[$13 >> 2] | 0; //@line 5535
  $15 = $0 + 8 | 0; //@line 5536
  $16 = HEAP32[$15 >> 2] | 0; //@line 5537
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 5545
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5546
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 5547
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 314; //@line 5550
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5552
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 5554
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5556
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 5558
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 5560
     sp = STACKTOP; //@line 5561
     return 0; //@line 5562
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5564
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 5570
  HEAP32[$3 >> 2] = 0; //@line 5571
  HEAP32[$1 >> 2] = 0; //@line 5572
  HEAP32[$15 >> 2] = 0; //@line 5573
  HEAP32[$13 >> 2] = 0; //@line 5574
  $$0 = 0; //@line 5575
 }
 return $$0 | 0; //@line 5577
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 21777
 STACKTOP = STACKTOP + 32 | 0; //@line 21778
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 21778
 $$byval_copy = sp; //@line 21779
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21781
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21783
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21785
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21787
 dest = $AsyncRetVal; //@line 21788
 stop = dest + 76 | 0; //@line 21788
 do {
  HEAP32[dest >> 2] = 0; //@line 21788
  dest = dest + 4 | 0; //@line 21788
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 21789
 HEAP32[$2 >> 2] = 0; //@line 21790
 HEAP32[$2 + 4 >> 2] = 0; //@line 21790
 HEAP32[$2 + 8 >> 2] = 0; //@line 21790
 HEAP32[$2 + 12 >> 2] = 0; //@line 21790
 HEAP32[$2 + 16 >> 2] = 0; //@line 21790
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 21791
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 21791
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 21791
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 21791
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 21791
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 21792
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 21793
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 21797
  STACKTOP = sp; //@line 21798
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 21800
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 21802
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 21804
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 21805
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 21806
 _wait_ms(1); //@line 21807
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 21810
  sp = STACKTOP; //@line 21811
  STACKTOP = sp; //@line 21812
  return;
 }
 ___async_unwind = 0; //@line 21814
 HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 21815
 sp = STACKTOP; //@line 21816
 STACKTOP = sp; //@line 21817
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 21831
 STACKTOP = STACKTOP + 32 | 0; //@line 21832
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 21832
 $$byval_copy = sp; //@line 21833
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21835
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21837
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21839
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21841
 dest = $AsyncRetVal; //@line 21842
 stop = dest + 76 | 0; //@line 21842
 do {
  HEAP32[dest >> 2] = 0; //@line 21842
  dest = dest + 4 | 0; //@line 21842
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 21843
 HEAP32[$2 >> 2] = 0; //@line 21844
 HEAP32[$2 + 4 >> 2] = 0; //@line 21844
 HEAP32[$2 + 8 >> 2] = 0; //@line 21844
 HEAP32[$2 + 12 >> 2] = 0; //@line 21844
 HEAP32[$2 + 16 >> 2] = 0; //@line 21844
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 21845
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 21845
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 21845
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 21845
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 21845
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 21846
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 21847
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 21851
  STACKTOP = sp; //@line 21852
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 21854
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 21856
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 21858
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 21859
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 21860
 _wait_ms(1); //@line 21861
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 32; //@line 21864
  sp = STACKTOP; //@line 21865
  STACKTOP = sp; //@line 21866
  return;
 }
 ___async_unwind = 0; //@line 21868
 HEAP32[$ReallocAsyncCtx2 >> 2] = 32; //@line 21869
 sp = STACKTOP; //@line 21870
 STACKTOP = sp; //@line 21871
 return;
}
function __ZN6Socket5closeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4401
 $1 = $0 + 8 | 0; //@line 4402
 $2 = HEAP32[$1 >> 2] | 0; //@line 4403
 $$pre = $0 + 4 | 0; //@line 4405
 do {
  if (!$2) {
   $$0 = 0; //@line 4408
  } else {
   $4 = HEAP32[$$pre >> 2] | 0; //@line 4410
   $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 84 >> 2] | 0; //@line 4413
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4414
   FUNCTION_TABLE_viiii[$7 & 7]($4, $2, 0, 0); //@line 4415
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 128; //@line 4418
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4420
    HEAP32[$AsyncCtx + 8 >> 2] = $$pre; //@line 4422
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4424
    sp = STACKTOP; //@line 4425
    return 0; //@line 4426
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4428
   $11 = HEAP32[$1 >> 2] | 0; //@line 4429
   HEAP32[$1 >> 2] = 0; //@line 4430
   $12 = HEAP32[$$pre >> 2] | 0; //@line 4431
   $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 48 >> 2] | 0; //@line 4434
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4435
   $16 = FUNCTION_TABLE_iii[$15 & 15]($12, $11) | 0; //@line 4436
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 129; //@line 4439
    HEAP32[$AsyncCtx2 + 4 >> 2] = $$pre; //@line 4441
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4443
    sp = STACKTOP; //@line 4444
    return 0; //@line 4445
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4447
    $$0 = $16; //@line 4448
    break;
   }
  }
 } while (0);
 HEAP32[$$pre >> 2] = 0; //@line 4453
 $21 = HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0; //@line 4456
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4457
 FUNCTION_TABLE_vi[$21 & 511]($0); //@line 4458
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 130; //@line 4461
  HEAP32[$AsyncCtx5 + 4 >> 2] = $$0; //@line 4463
  sp = STACKTOP; //@line 4464
  return 0; //@line 4465
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 4467
  return $$0 | 0; //@line 4468
 }
 return 0; //@line 4470
}
function __ZNK13SocketAddresscvbEv($0) {
 $0 = $0 | 0;
 var $12 = 0;
 switch (HEAP32[$0 + 40 >> 2] | 0) {
 case 1:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 4916
    return $12 | 0; //@line 4917
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 4923
    return $12 | 0; //@line 4924
   }
   if (!(HEAP8[$0 + 46 >> 0] | 0)) {
    return (HEAP8[$0 + 47 >> 0] | 0) != 0 | 0; //@line 4933
   } else {
    $12 = 1; //@line 4935
    return $12 | 0; //@line 4936
   }
   break;
  }
 case 2:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 4945
    return $12 | 0; //@line 4946
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 4952
    return $12 | 0; //@line 4953
   }
   if (HEAP8[$0 + 46 >> 0] | 0) {
    $12 = 1; //@line 4959
    return $12 | 0; //@line 4960
   }
   if (HEAP8[$0 + 47 >> 0] | 0) {
    $12 = 1; //@line 4966
    return $12 | 0; //@line 4967
   }
   if (HEAP8[$0 + 48 >> 0] | 0) {
    $12 = 1; //@line 4973
    return $12 | 0; //@line 4974
   }
   if (HEAP8[$0 + 49 >> 0] | 0) {
    $12 = 1; //@line 4980
    return $12 | 0; //@line 4981
   }
   if (HEAP8[$0 + 50 >> 0] | 0) {
    $12 = 1; //@line 4987
    return $12 | 0; //@line 4988
   }
   if (HEAP8[$0 + 51 >> 0] | 0) {
    $12 = 1; //@line 4994
    return $12 | 0; //@line 4995
   }
   if (HEAP8[$0 + 52 >> 0] | 0) {
    $12 = 1; //@line 5001
    return $12 | 0; //@line 5002
   }
   if (HEAP8[$0 + 53 >> 0] | 0) {
    $12 = 1; //@line 5008
    return $12 | 0; //@line 5009
   }
   if (HEAP8[$0 + 54 >> 0] | 0) {
    $12 = 1; //@line 5015
    return $12 | 0; //@line 5016
   }
   if (HEAP8[$0 + 55 >> 0] | 0) {
    $12 = 1; //@line 5022
    return $12 | 0; //@line 5023
   }
   if (HEAP8[$0 + 56 >> 0] | 0) {
    $12 = 1; //@line 5029
    return $12 | 0; //@line 5030
   }
   if (HEAP8[$0 + 57 >> 0] | 0) {
    $12 = 1; //@line 5036
    return $12 | 0; //@line 5037
   }
   if (HEAP8[$0 + 58 >> 0] | 0) {
    $12 = 1; //@line 5043
    return $12 | 0; //@line 5044
   }
   $12 = (HEAP8[$0 + 59 >> 0] | 0) != 0; //@line 5049
   return $12 | 0; //@line 5050
  }
 default:
  {
   $12 = 0; //@line 5054
   return $12 | 0; //@line 5055
  }
 }
 return 0; //@line 5058
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $12 = 0, $15 = 0, $6 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 1031
 STACKTOP = STACKTOP + 48 | 0; //@line 1032
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1032
 $vararg_buffer12 = sp + 32 | 0; //@line 1033
 $vararg_buffer8 = sp + 24 | 0; //@line 1034
 $vararg_buffer4 = sp + 16 | 0; //@line 1035
 $vararg_buffer = sp; //@line 1036
 $6 = $4 & 255; //@line 1037
 $7 = $5 & 255; //@line 1038
 HEAP32[$vararg_buffer >> 2] = $2; //@line 1039
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 1041
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 1043
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 1045
 _mbed_tracef(16, 2405, 2410, $vararg_buffer); //@line 1046
 $9 = HEAP32[$0 + 752 >> 2] | 0; //@line 1048
 if (($9 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $9; //@line 1051
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 1053
  _mbed_tracef(16, 2405, 2451, $vararg_buffer4); //@line 1054
  STACKTOP = sp; //@line 1055
  return;
 }
 $12 = HEAP32[$0 + 756 >> 2] | 0; //@line 1058
 if (($12 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $12; //@line 1061
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 1063
  _mbed_tracef(16, 2405, 2498, $vararg_buffer8); //@line 1064
  STACKTOP = sp; //@line 1065
  return;
 }
 $15 = HEAP32[$0 + 692 >> 2] | 0; //@line 1068
 if (($15 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 1072
  HEAP8[$0 + 782 >> 0] = $2; //@line 1075
  HEAP8[$0 + 781 >> 0] = -35; //@line 1077
  HEAP8[$0 + 780 >> 0] = -5; //@line 1079
  HEAP8[$0 + 783 >> 0] = 1; //@line 1081
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(8) | 0; //@line 1084
  STACKTOP = sp; //@line 1085
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $15; //@line 1087
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 1089
  _mbed_tracef(16, 2405, 2545, $vararg_buffer12); //@line 1090
  STACKTOP = sp; //@line 1091
  return;
 }
}
function _main__async_cb_183($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13305
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13307
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13309
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13311
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13313
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13315
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13317
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13319
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13321
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13323
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13325
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13327
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13331
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13333
 HEAP32[$22 >> 2] = $AsyncRetVal | 0 ? $AsyncRetVal : 3059; //@line 13336
 _printf(3065, $22) | 0; //@line 13337
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 13338
 __ZN9UDPSocketC2I17EthernetInterfaceEEPT_($2, $20); //@line 13339
 if (!___async) {
  ___async_unwind = 0; //@line 13342
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 296; //@line 13344
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $26; //@line 13346
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 13348
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $4; //@line 13350
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 13352
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $4; //@line 13354
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $6; //@line 13356
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $8; //@line 13358
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $10; //@line 13360
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $2; //@line 13362
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $12; //@line 13364
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $14; //@line 13366
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $2; //@line 13368
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $16; //@line 13370
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $18; //@line 13372
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $20; //@line 13374
 sp = STACKTOP; //@line 13375
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_195($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 15883
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15885
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15887
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15889
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15891
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15893
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15895
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15897
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15899
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15901
 $21 = $2 + 12 | 0; //@line 15905
 HEAP32[$21 >> 2] = HEAP32[HEAP32[$0 + 40 >> 2] >> 2]; //@line 15906
 $23 = $4 + 4 | 0; //@line 15908
 HEAP32[$23 >> 2] = 0; //@line 15910
 HEAP32[$23 + 4 >> 2] = 0; //@line 15913
 HEAP32[$4 >> 2] = 3; //@line 15914
 $27 = $4 + 12 | 0; //@line 15915
 HEAP32[$27 >> 2] = 712; //@line 15916
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 15917
 $28 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $4) | 0; //@line 15918
 if (!___async) {
  HEAP32[___async_retval >> 2] = $28; //@line 15922
  ___async_unwind = 0; //@line 15923
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 166; //@line 15925
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $4; //@line 15927
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $8; //@line 15929
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $16; //@line 15931
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $18; //@line 15933
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $6; //@line 15935
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $10; //@line 15937
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $27; //@line 15939
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $12; //@line 15941
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $2; //@line 15943
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $21; //@line 15945
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $14; //@line 15947
 sp = STACKTOP; //@line 15948
 return;
}
function _main__async_cb_178($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12925
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12927
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12929
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12931
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12933
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12935
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12937
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12939
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12941
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12943
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12945
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12947
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12949
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12951
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12953
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12955
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 12956
 __ZN9UDPSocketC2I17EthernetInterfaceEEPT_($4, $30); //@line 12957
 if (!___async) {
  ___async_unwind = 0; //@line 12960
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 296; //@line 12962
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 12964
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 12966
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 12968
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 12970
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 12972
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 12974
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 12976
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 12978
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 12980
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 12982
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 12984
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 12986
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $26; //@line 12988
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $28; //@line 12990
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $30; //@line 12992
 sp = STACKTOP; //@line 12993
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 12160
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12162
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12164
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12166
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12168
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12170
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12172
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 12176
  return;
 }
 $13 = $2 + 12 | 0; //@line 12179
 dest = $13; //@line 12180
 src = $4; //@line 12180
 stop = dest + 60 | 0; //@line 12180
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 12180
  dest = dest + 4 | 0; //@line 12180
  src = src + 4 | 0; //@line 12180
 } while ((dest | 0) < (stop | 0));
 HEAP16[$13 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 12180
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 12181
 _wait_ms(1); //@line 12182
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 39; //@line 12185
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 12186
  HEAP32[$14 >> 2] = $6; //@line 12187
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 12188
  HEAP32[$15 >> 2] = $2; //@line 12189
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 12190
  HEAP32[$16 >> 2] = $8; //@line 12191
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 12192
  HEAP32[$17 >> 2] = $10; //@line 12193
  sp = STACKTOP; //@line 12194
  return;
 }
 ___async_unwind = 0; //@line 12197
 HEAP32[$ReallocAsyncCtx4 >> 2] = 39; //@line 12198
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 12199
 HEAP32[$14 >> 2] = $6; //@line 12200
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 12201
 HEAP32[$15 >> 2] = $2; //@line 12202
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 12203
 HEAP32[$16 >> 2] = $8; //@line 12204
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 12205
 HEAP32[$17 >> 2] = $10; //@line 12206
 sp = STACKTOP; //@line 12207
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4825
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4827
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4829
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4831
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4833
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4835
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 4836
 if (!$AsyncRetVal) {
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = HEAP32[$4 >> 2]; //@line 4841
 HEAP32[$AsyncRetVal + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 4841
 HEAP32[$AsyncRetVal + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 4841
 HEAP32[$AsyncRetVal + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 4841
 HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 4841
 $12 = (_strlen($6) | 0) + 1 | 0; //@line 4843
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 4844
 $13 = __ZnajRKSt9nothrow_t($12, 8621) | 0; //@line 4845
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 4848
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 4849
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 4850
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 4851
  HEAP32[$15 >> 2] = $6; //@line 4852
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 4853
  HEAP32[$16 >> 2] = $8; //@line 4854
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 4855
  HEAP32[$17 >> 2] = $2; //@line 4856
  sp = STACKTOP; //@line 4857
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 4861
 ___async_unwind = 0; //@line 4862
 HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 4863
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 4864
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 4865
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 4866
 HEAP32[$15 >> 2] = $6; //@line 4867
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 4868
 HEAP32[$16 >> 2] = $8; //@line 4869
 $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 4870
 HEAP32[$17 >> 2] = $2; //@line 4871
 sp = STACKTOP; //@line 4872
 return;
}
function _main__async_cb_182($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13229
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13231
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13233
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13235
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13237
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13239
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13241
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13243
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13245
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13247
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13249
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13251
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13253
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13255
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13257
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13259
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 13260
 __ZN9UDPSocketD2Ev($4); //@line 13261
 if (!___async) {
  ___async_unwind = 0; //@line 13264
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 303; //@line 13266
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 13268
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 13270
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 13272
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 13274
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 13276
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 13278
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 13280
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 13282
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 13284
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 13286
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 13288
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 13290
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 13292
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $28; //@line 13294
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $30; //@line 13296
 sp = STACKTOP; //@line 13297
 return;
}
function _main__async_cb_181($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13153
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13155
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13157
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13159
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13161
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13163
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13165
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13167
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13169
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13171
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13173
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13175
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13177
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13179
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13181
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13183
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 13184
 __ZN9UDPSocketD2Ev($4); //@line 13185
 if (!___async) {
  ___async_unwind = 0; //@line 13188
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 303; //@line 13190
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 13192
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 13194
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 13196
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 13198
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 13200
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 13202
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 13204
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 13206
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 13208
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 13210
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 13212
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 13214
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 13216
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $28; //@line 13218
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $30; //@line 13220
 sp = STACKTOP; //@line 13221
 return;
}
function _main__async_cb_180($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13077
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13079
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13081
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13083
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13085
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13087
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13089
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13091
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13093
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13095
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13097
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13099
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13101
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13103
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13105
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13107
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 13108
 __ZN9UDPSocketD2Ev($4); //@line 13109
 if (!___async) {
  ___async_unwind = 0; //@line 13112
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 303; //@line 13114
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 13116
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 13118
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 13120
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 13122
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 13124
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 13126
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 13128
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 13130
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 13132
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 13134
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 13136
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 13138
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 13140
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $28; //@line 13142
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $30; //@line 13144
 sp = STACKTOP; //@line 13145
 return;
}
function _main__async_cb_179($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 13001
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13003
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13005
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13007
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13009
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13011
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13013
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13015
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13017
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13019
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13021
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13023
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13025
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13027
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13029
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13031
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(64) | 0; //@line 13032
 _wait_ms(1e4); //@line 13033
 if (!___async) {
  ___async_unwind = 0; //@line 13036
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 302; //@line 13038
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 13040
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 13042
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 13044
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 13046
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 13048
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $12; //@line 13050
 HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $14; //@line 13052
 HEAP32[$ReallocAsyncCtx8 + 32 >> 2] = $16; //@line 13054
 HEAP32[$ReallocAsyncCtx8 + 36 >> 2] = $18; //@line 13056
 HEAP32[$ReallocAsyncCtx8 + 40 >> 2] = $20; //@line 13058
 HEAP32[$ReallocAsyncCtx8 + 44 >> 2] = $22; //@line 13060
 HEAP32[$ReallocAsyncCtx8 + 48 >> 2] = $24; //@line 13062
 HEAP32[$ReallocAsyncCtx8 + 52 >> 2] = $26; //@line 13064
 HEAP32[$ReallocAsyncCtx8 + 56 >> 2] = $28; //@line 13066
 HEAP32[$ReallocAsyncCtx8 + 60 >> 2] = $30; //@line 13068
 sp = STACKTOP; //@line 13069
 return;
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 5258
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 5264
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 5270
   } else {
    $7 = $1 & 255; //@line 5272
    $$03039 = $0; //@line 5273
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 5275
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 5280
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 5283
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 5288
      break;
     } else {
      $$03039 = $13; //@line 5291
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 5295
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 5296
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 5304
     $25 = $18; //@line 5304
     while (1) {
      $24 = $25 ^ $17; //@line 5306
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 5313
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 5316
      $25 = HEAP32[$31 >> 2] | 0; //@line 5317
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 5326
       break;
      } else {
       $$02936 = $31; //@line 5324
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 5331
    }
   } while (0);
   $38 = $1 & 255; //@line 5334
   $$1 = $$029$lcssa; //@line 5335
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 5337
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 5343
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 5346
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 5351
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_133($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2940
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2942
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2944
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2946
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2948
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2950
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2952
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2954
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2956
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2958
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2960
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2962
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2964
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2966
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 2967
 $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 2968
 if (!___async) {
  HEAP32[___async_retval >> 2] = $27; //@line 2972
  ___async_unwind = 0; //@line 2973
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 2975
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 2977
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 2979
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 2981
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 2983
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 2985
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 2987
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 2989
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 2991
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 2993
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 2995
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 2997
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 2999
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 3001
 sp = STACKTOP; //@line 3002
 return;
}
function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0; //@line 6584
 $2 = HEAP32[$1 >> 2] | 0; //@line 6585
 if (!$2) {
  label = 3; //@line 6588
 } else {
  if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3; //@line 6594
  } else {
   label = 4; //@line 6596
  }
 }
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0; //@line 6600
  if (($7 | 0) < 0) {
   label = 4; //@line 6603
  } else {
   $10 = HEAP32[$1 >> 2] | 0; //@line 6605
   $$phi$trans$insert = $0 + 8 | 0; //@line 6607
   if (!$10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6609
    $$sink = $$pre; //@line 6610
    $26 = $$pre; //@line 6610
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6612
    $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 6614
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0; //@line 6619
    $21 = $12; //@line 6621
    if (($12 - $14 | 0) < ($19 | 0)) {
     $$sink = $21; //@line 6623
     $26 = $21; //@line 6623
    } else {
     $$sink = $14 + ($19 + -1) | 0; //@line 6627
     $26 = $21; //@line 6627
    }
   }
   HEAP32[$0 + 100 >> 2] = $$sink; //@line 6631
   $$phi$trans$insert29 = $0 + 4 | 0; //@line 6633
   if (!$26) {
    $36 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6636
   } else {
    $27 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6638
    $29 = $0 + 108 | 0; //@line 6640
    HEAP32[$29 >> 2] = $26 + 1 - $27 + (HEAP32[$29 >> 2] | 0); //@line 6645
    $36 = $27; //@line 6647
   }
   $35 = $36 + -1 | 0; //@line 6649
   if (($7 | 0) == (HEAPU8[$35 >> 0] | 0 | 0)) {
    $$0 = $7; //@line 6654
   } else {
    HEAP8[$35 >> 0] = $7; //@line 6657
    $$0 = $7; //@line 6658
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0; //@line 6664
  $$0 = -1; //@line 6665
 }
 return $$0 | 0; //@line 6667
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_58($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 19122
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19126
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19128
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19130
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19132
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19133
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 19137
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 19138
  FUNCTION_TABLE_vi[$14 & 511]($8); //@line 19139
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 217; //@line 19142
   $15 = $ReallocAsyncCtx10 + 4 | 0; //@line 19143
   HEAP32[$15 >> 2] = $4; //@line 19144
   $16 = $ReallocAsyncCtx10 + 8 | 0; //@line 19145
   HEAP32[$16 >> 2] = $6; //@line 19146
   $17 = $ReallocAsyncCtx10 + 12 | 0; //@line 19147
   HEAP32[$17 >> 2] = $10; //@line 19148
   sp = STACKTOP; //@line 19149
   return;
  }
  ___async_unwind = 0; //@line 19152
  HEAP32[$ReallocAsyncCtx10 >> 2] = 217; //@line 19153
  $15 = $ReallocAsyncCtx10 + 4 | 0; //@line 19154
  HEAP32[$15 >> 2] = $4; //@line 19155
  $16 = $ReallocAsyncCtx10 + 8 | 0; //@line 19156
  HEAP32[$16 >> 2] = $6; //@line 19157
  $17 = $ReallocAsyncCtx10 + 12 | 0; //@line 19158
  HEAP32[$17 >> 2] = $10; //@line 19159
  sp = STACKTOP; //@line 19160
  return;
 }
 HEAP32[$4 >> 2] = $6; //@line 19163
 $18 = HEAP32[$10 >> 2] | 0; //@line 19164
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 19165
 __ZL26nsapi_dns_query_async_sendPv($18); //@line 19166
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 218; //@line 19169
  sp = STACKTOP; //@line 19170
  return;
 }
 ___async_unwind = 0; //@line 19173
 HEAP32[$ReallocAsyncCtx13 >> 2] = 218; //@line 19174
 sp = STACKTOP; //@line 19175
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 5000
 $4 = HEAP32[$3 >> 2] | 0; //@line 5001
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 5008
   label = 5; //@line 5009
  } else {
   $$1 = 0; //@line 5011
  }
 } else {
  $12 = $4; //@line 5015
  label = 5; //@line 5016
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 5020
   $10 = HEAP32[$9 >> 2] | 0; //@line 5021
   $14 = $10; //@line 5024
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 5029
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 5037
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 5041
       $$141 = $0; //@line 5041
       $$143 = $1; //@line 5041
       $31 = $14; //@line 5041
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 5044
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 5051
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 5056
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 5059
      break L5;
     }
     $$139 = $$038; //@line 5065
     $$141 = $0 + $$038 | 0; //@line 5065
     $$143 = $1 - $$038 | 0; //@line 5065
     $31 = HEAP32[$9 >> 2] | 0; //@line 5065
    } else {
     $$139 = 0; //@line 5067
     $$141 = $0; //@line 5067
     $$143 = $1; //@line 5067
     $31 = $14; //@line 5067
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 5070
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 5073
   $$1 = $$139 + $$143 | 0; //@line 5075
  }
 } while (0);
 return $$1 | 0; //@line 5078
}
function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $3 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13798
 STACKTOP = STACKTOP + 32 | 0; //@line 13799
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13799
 $2 = sp; //@line 13800
 $3 = HEAP8[$1 >> 0] | 0; //@line 13801
 L1 : do {
  if (!($3 << 24 >> 24)) {
   label = 3; //@line 13805
  } else {
   if (!(HEAP8[$1 + 1 >> 0] | 0)) {
    label = 3; //@line 13811
   } else {
    _memset($2 | 0, 0, 32) | 0; //@line 13813
    $10 = HEAP8[$1 >> 0] | 0; //@line 13814
    if ($10 << 24 >> 24) {
     $$01824 = $1; //@line 13817
     $15 = $10; //@line 13817
     do {
      $19 = $2 + ((($15 & 255) >>> 5 & 255) << 2) | 0; //@line 13824
      HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1 << ($15 & 31); //@line 13827
      $$01824 = $$01824 + 1 | 0; //@line 13828
      $15 = HEAP8[$$01824 >> 0] | 0; //@line 13829
     } while ($15 << 24 >> 24 != 0);
    }
    $12 = HEAP8[$0 >> 0] | 0; //@line 13838
    if (!($12 << 24 >> 24)) {
     $$019$sink = $0; //@line 13841
    } else {
     $$01922 = $0; //@line 13843
     $25 = $12; //@line 13843
     while (1) {
      if (HEAP32[$2 + ((($25 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($25 & 31) | 0) {
       $$019$sink = $$01922; //@line 13855
       break L1;
      }
      $34 = $$01922 + 1 | 0; //@line 13858
      $25 = HEAP8[$34 >> 0] | 0; //@line 13859
      if (!($25 << 24 >> 24)) {
       $$019$sink = $34; //@line 13862
       break;
      } else {
       $$01922 = $34; //@line 13865
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $$019$sink = ___strchrnul($0, $3 << 24 >> 24) | 0; //@line 13875
 }
 STACKTOP = sp; //@line 13880
 return $$019$sink - $0 | 0; //@line 13880
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19575
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19579
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19581
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19583
 $9 = $4 + 12 | 0; //@line 19585
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19586
 $11 = HEAP32[$6 + 16 >> 2] | 0; //@line 19588
 HEAP32[$8 + 8 >> 2] = 0; //@line 19590
 HEAP32[$8 >> 2] = 226; //@line 19591
 HEAP32[$8 + 4 >> 2] = $11; //@line 19593
 $13 = $8 + 12 | 0; //@line 19594
 HEAP32[$13 >> 2] = 736; //@line 19595
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 19596
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $8) | 0; //@line 19597
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 227; //@line 19600
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 19601
  HEAP32[$14 >> 2] = $13; //@line 19602
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 19603
  HEAP32[$15 >> 2] = $9; //@line 19604
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 19605
  HEAP32[$16 >> 2] = $8; //@line 19606
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 19607
  HEAP32[$17 >> 2] = $4; //@line 19608
  sp = STACKTOP; //@line 19609
  return;
 }
 ___async_unwind = 0; //@line 19612
 HEAP32[$ReallocAsyncCtx4 >> 2] = 227; //@line 19613
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 19614
 HEAP32[$14 >> 2] = $13; //@line 19615
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 19616
 HEAP32[$15 >> 2] = $9; //@line 19617
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 19618
 HEAP32[$16 >> 2] = $8; //@line 19619
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 19620
 HEAP32[$17 >> 2] = $4; //@line 19621
 sp = STACKTOP; //@line 19622
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17217
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17221
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17223
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17225
 $9 = $4 + 12 | 0; //@line 17227
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 17228
 $10 = HEAP32[$6 >> 2] | 0; //@line 17229
 HEAP32[$8 + 8 >> 2] = 0; //@line 17231
 HEAP32[$8 >> 2] = 195; //@line 17232
 HEAP32[$8 + 4 >> 2] = $10; //@line 17234
 $12 = $8 + 12 | 0; //@line 17235
 HEAP32[$12 >> 2] = 724; //@line 17236
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 17237
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $8) | 0; //@line 17238
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 17241
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 17242
  HEAP32[$13 >> 2] = $12; //@line 17243
  $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 17244
  HEAP32[$14 >> 2] = $9; //@line 17245
  $15 = $ReallocAsyncCtx4 + 12 | 0; //@line 17246
  HEAP32[$15 >> 2] = $8; //@line 17247
  $16 = $ReallocAsyncCtx4 + 16 | 0; //@line 17248
  HEAP32[$16 >> 2] = $4; //@line 17249
  sp = STACKTOP; //@line 17250
  return;
 }
 ___async_unwind = 0; //@line 17253
 HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 17254
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 17255
 HEAP32[$13 >> 2] = $12; //@line 17256
 $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 17257
 HEAP32[$14 >> 2] = $9; //@line 17258
 $15 = $ReallocAsyncCtx4 + 12 | 0; //@line 17259
 HEAP32[$15 >> 2] = $8; //@line 17260
 $16 = $ReallocAsyncCtx4 + 16 | 0; //@line 17261
 HEAP32[$16 >> 2] = $4; //@line 17262
 sp = STACKTOP; //@line 17263
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_117($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1440
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1444
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1446
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1448
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1450
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1452
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1454
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1456
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 1459
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 1460
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 1476
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 1477
    if (!___async) {
     ___async_unwind = 0; //@line 1480
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 347; //@line 1482
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 1484
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 1486
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 1488
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 1490
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 1492
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 1494
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 1496
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 1498
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 1501
    sp = STACKTOP; //@line 1502
    return;
   }
  }
 } while (0);
 return;
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_63($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19663
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19667
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19669
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19671
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19672
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 19676
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 19677
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 19678
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 228; //@line 19681
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 19682
   HEAP32[$13 >> 2] = $4; //@line 19683
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 19684
   HEAP32[$14 >> 2] = $8; //@line 19685
   sp = STACKTOP; //@line 19686
   return;
  }
  ___async_unwind = 0; //@line 19689
  HEAP32[$ReallocAsyncCtx2 >> 2] = 228; //@line 19690
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 19691
  HEAP32[$13 >> 2] = $4; //@line 19692
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 19693
  HEAP32[$14 >> 2] = $8; //@line 19694
  sp = STACKTOP; //@line 19695
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 19698
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 19704
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 19705
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 19706
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 229; //@line 19709
  sp = STACKTOP; //@line 19710
  return;
 }
 ___async_unwind = 0; //@line 19713
 HEAP32[$ReallocAsyncCtx3 >> 2] = 229; //@line 19714
 sp = STACKTOP; //@line 19715
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4886
 STACKTOP = STACKTOP + 16 | 0; //@line 4887
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4887
 $2 = sp; //@line 4888
 $3 = $1 & 255; //@line 4889
 HEAP8[$2 >> 0] = $3; //@line 4890
 $4 = $0 + 16 | 0; //@line 4891
 $5 = HEAP32[$4 >> 2] | 0; //@line 4892
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 4899
   label = 4; //@line 4900
  } else {
   $$0 = -1; //@line 4902
  }
 } else {
  $12 = $5; //@line 4905
  label = 4; //@line 4906
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 4910
   $10 = HEAP32[$9 >> 2] | 0; //@line 4911
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 4914
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 4921
     HEAP8[$10 >> 0] = $3; //@line 4922
     $$0 = $13; //@line 4923
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 4928
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4929
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 4930
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 308; //@line 4933
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 4935
    sp = STACKTOP; //@line 4936
    STACKTOP = sp; //@line 4937
    return 0; //@line 4937
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4939
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 4944
   } else {
    $$0 = -1; //@line 4946
   }
  }
 } while (0);
 STACKTOP = sp; //@line 4950
 return $$0 | 0; //@line 4950
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_29($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17304
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17308
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17310
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17312
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17313
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 17317
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 17318
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 17319
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 197; //@line 17322
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 17323
   HEAP32[$13 >> 2] = $4; //@line 17324
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 17325
   HEAP32[$14 >> 2] = $8; //@line 17326
   sp = STACKTOP; //@line 17327
   return;
  }
  ___async_unwind = 0; //@line 17330
  HEAP32[$ReallocAsyncCtx2 >> 2] = 197; //@line 17331
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 17332
  HEAP32[$13 >> 2] = $4; //@line 17333
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 17334
  HEAP32[$14 >> 2] = $8; //@line 17335
  sp = STACKTOP; //@line 17336
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 17339
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 17345
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 17346
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 17347
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 17350
  sp = STACKTOP; //@line 17351
  return;
 }
 ___async_unwind = 0; //@line 17354
 HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 17355
 sp = STACKTOP; //@line 17356
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_155($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 8860
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8864
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8866
 $7 = $4 + 12 | 0; //@line 8868
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 8869
 $9 = $6 + 4 | 0; //@line 8871
 HEAP32[$9 >> 2] = 0; //@line 8873
 HEAP32[$9 + 4 >> 2] = 0; //@line 8876
 HEAP32[$6 >> 2] = 3; //@line 8877
 $13 = $6 + 12 | 0; //@line 8878
 HEAP32[$13 >> 2] = 712; //@line 8879
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 8880
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $6) | 0; //@line 8881
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 8884
  $14 = $ReallocAsyncCtx12 + 4 | 0; //@line 8885
  HEAP32[$14 >> 2] = $13; //@line 8886
  $15 = $ReallocAsyncCtx12 + 8 | 0; //@line 8887
  HEAP32[$15 >> 2] = $7; //@line 8888
  $16 = $ReallocAsyncCtx12 + 12 | 0; //@line 8889
  HEAP32[$16 >> 2] = $6; //@line 8890
  $17 = $ReallocAsyncCtx12 + 16 | 0; //@line 8891
  HEAP32[$17 >> 2] = $4; //@line 8892
  sp = STACKTOP; //@line 8893
  return;
 }
 ___async_unwind = 0; //@line 8896
 HEAP32[$ReallocAsyncCtx12 >> 2] = 185; //@line 8897
 $14 = $ReallocAsyncCtx12 + 4 | 0; //@line 8898
 HEAP32[$14 >> 2] = $13; //@line 8899
 $15 = $ReallocAsyncCtx12 + 8 | 0; //@line 8900
 HEAP32[$15 >> 2] = $7; //@line 8901
 $16 = $ReallocAsyncCtx12 + 12 | 0; //@line 8902
 HEAP32[$16 >> 2] = $6; //@line 8903
 $17 = $ReallocAsyncCtx12 + 16 | 0; //@line 8904
 HEAP32[$17 >> 2] = $4; //@line 8905
 sp = STACKTOP; //@line 8906
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_123($0) {
 $0 = $0 | 0;
 var $$011 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2013
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2015
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2017
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2019
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2021
 $12 = HEAP32[$0 + 28 >> 2] | 0; //@line 2025
 $14 = HEAP32[$0 + 32 >> 2] | 0; //@line 2027
 $16 = HEAP32[$0 + 36 >> 2] | 0; //@line 2029
 $18 = HEAP32[$0 + 40 >> 2] | 0; //@line 2031
 if (__ZN13SocketAddress14set_ip_addressEPKc($8, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$011 = __ZNK13SocketAddress14get_ip_versionEv($8) | 0; //@line 2037
 } else {
  $$011 = 0; //@line 2039
 }
 $24 = HEAP32[(HEAP32[$14 >> 2] | 0) + 96 >> 2] | 0; //@line 2043
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 2044
 FUNCTION_TABLE_vii[$24 & 7]($12, $14); //@line 2045
 if (!___async) {
  ___async_unwind = 0; //@line 2048
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 91; //@line 2050
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $12; //@line 2052
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 2054
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $4; //@line 2056
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 2058
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $16; //@line 2060
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 2062
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $18; //@line 2064
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $$011; //@line 2066
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $12; //@line 2068
 sp = STACKTOP; //@line 2069
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_160($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9867
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9871
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9873
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9875
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9876
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 9880
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 9881
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 9882
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 186; //@line 9885
   $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 9886
   HEAP32[$13 >> 2] = $4; //@line 9887
   $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 9888
   HEAP32[$14 >> 2] = $8; //@line 9889
   sp = STACKTOP; //@line 9890
   return;
  }
  ___async_unwind = 0; //@line 9893
  HEAP32[$ReallocAsyncCtx8 >> 2] = 186; //@line 9894
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 9895
  HEAP32[$13 >> 2] = $4; //@line 9896
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 9897
  HEAP32[$14 >> 2] = $8; //@line 9898
  sp = STACKTOP; //@line 9899
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 9902
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 9908
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 9909
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 9910
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 187; //@line 9913
  sp = STACKTOP; //@line 9914
  return;
 }
 ___async_unwind = 0; //@line 9917
 HEAP32[$ReallocAsyncCtx9 >> 2] = 187; //@line 9918
 sp = STACKTOP; //@line 9919
 return;
}
function _fflush__async_cb_72($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21652
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21654
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 21656
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 21660
  } else {
   $$02327 = $$02325; //@line 21662
   $$02426 = $AsyncRetVal; //@line 21662
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 21669
    } else {
     $16 = 0; //@line 21671
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 21683
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 21686
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 21689
     break L3;
    } else {
     $$02327 = $$023; //@line 21692
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 21695
   $13 = ___fflush_unlocked($$02327) | 0; //@line 21696
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 21700
    ___async_unwind = 0; //@line 21701
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 312; //@line 21703
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 21705
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 21707
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 21709
   sp = STACKTOP; //@line 21710
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 21714
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 21716
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4488
 $2 = $0 + 32 | 0; //@line 4489
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 44 | 0; //@line 4494
 $5 = HEAP32[$4 >> 2] | 0; //@line 4495
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 4500
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4501
   FUNCTION_TABLE_vi[$8 & 511]($2); //@line 4502
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 131; //@line 4505
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4507
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4509
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 4511
    sp = STACKTOP; //@line 4512
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4515
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 4520
 $13 = HEAP32[$12 >> 2] | 0; //@line 4521
 do {
  if (!$13) {
   $19 = 0; //@line 4525
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 4528
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4529
   FUNCTION_TABLE_vii[$16 & 7]($2, $1); //@line 4530
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 132; //@line 4533
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 4535
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 4537
    sp = STACKTOP; //@line 4538
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4541
    $19 = HEAP32[$12 >> 2] | 0; //@line 4543
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 4548
 return;
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5420
 $4 = $0 + 8 | 0; //@line 5421
 $5 = $0 + 52 | 0; //@line 5422
 $6 = $0 + 4 | 0; //@line 5423
 $7 = $0 + 12 | 0; //@line 5424
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 5426
  if (!$8) {
   $$2 = -3005; //@line 5429
   label = 6; //@line 5430
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 5433
  $10 = HEAP32[$6 >> 2] | 0; //@line 5434
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 80 >> 2] | 0; //@line 5437
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5438
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 5439
  if (___async) {
   label = 4; //@line 5442
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5445
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 5451
   label = 6; //@line 5452
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 141; //@line 5457
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 5459
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5461
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 5463
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 5465
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 5467
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 5469
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 5471
  sp = STACKTOP; //@line 5472
  return 0; //@line 5473
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 5476
 }
 return 0; //@line 5478
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5353
 $4 = $0 + 8 | 0; //@line 5354
 $5 = $0 + 52 | 0; //@line 5355
 $6 = $0 + 4 | 0; //@line 5356
 $7 = $0 + 12 | 0; //@line 5357
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 5359
  if (!$8) {
   $$2 = -3005; //@line 5362
   label = 6; //@line 5363
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 5366
  $10 = HEAP32[$6 >> 2] | 0; //@line 5367
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 5370
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5371
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 5372
  if (___async) {
   label = 4; //@line 5375
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5378
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 5384
   label = 6; //@line 5385
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 140; //@line 5390
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 5392
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5394
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 5396
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 5398
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 5400
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 5402
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 5404
  sp = STACKTOP; //@line 5405
  return 0; //@line 5406
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 5409
 }
 return 0; //@line 5411
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_126($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2387
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2389
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2391
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2393
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2395
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2397
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2399
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2401
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2403
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2405
 $19 = $12 + 12 | 0; //@line 2407
 HEAP32[$19 >> 2] = HEAP32[$4 >> 2]; //@line 2408
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 2409
 $20 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $6, $12, $18) | 0; //@line 2410
 if (!___async) {
  HEAP32[___async_retval >> 2] = $20; //@line 2414
  ___async_unwind = 0; //@line 2415
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 94; //@line 2417
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $19; //@line 2419
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $8; //@line 2421
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $12; //@line 2423
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $4; //@line 2425
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $6; //@line 2427
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $2; //@line 2429
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $10; //@line 2431
 sp = STACKTOP; //@line 2432
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 12047
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12049
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12051
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12053
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12055
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12057
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12059
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12061
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 12065
  return;
 }
 $15 = $2 + 12 | 0; //@line 12068
 dest = $15; //@line 12069
 src = $4; //@line 12069
 stop = dest + 60 | 0; //@line 12069
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 12069
  dest = dest + 4 | 0; //@line 12069
  src = src + 4 | 0; //@line 12069
 } while ((dest | 0) < (stop | 0));
 HEAP16[$15 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 12069
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 12070
 _wait_ms(1); //@line 12071
 if (!___async) {
  ___async_unwind = 0; //@line 12074
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 12076
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $6; //@line 12078
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $8; //@line 12080
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $2; //@line 12082
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 12084
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $12; //@line 12086
 sp = STACKTOP; //@line 12087
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 398
 value = value & 255; //@line 400
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 403
   ptr = ptr + 1 | 0; //@line 404
  }
  aligned_end = end & -4 | 0; //@line 407
  block_aligned_end = aligned_end - 64 | 0; //@line 408
  value4 = value | value << 8 | value << 16 | value << 24; //@line 409
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 412
   HEAP32[ptr + 4 >> 2] = value4; //@line 413
   HEAP32[ptr + 8 >> 2] = value4; //@line 414
   HEAP32[ptr + 12 >> 2] = value4; //@line 415
   HEAP32[ptr + 16 >> 2] = value4; //@line 416
   HEAP32[ptr + 20 >> 2] = value4; //@line 417
   HEAP32[ptr + 24 >> 2] = value4; //@line 418
   HEAP32[ptr + 28 >> 2] = value4; //@line 419
   HEAP32[ptr + 32 >> 2] = value4; //@line 420
   HEAP32[ptr + 36 >> 2] = value4; //@line 421
   HEAP32[ptr + 40 >> 2] = value4; //@line 422
   HEAP32[ptr + 44 >> 2] = value4; //@line 423
   HEAP32[ptr + 48 >> 2] = value4; //@line 424
   HEAP32[ptr + 52 >> 2] = value4; //@line 425
   HEAP32[ptr + 56 >> 2] = value4; //@line 426
   HEAP32[ptr + 60 >> 2] = value4; //@line 427
   ptr = ptr + 64 | 0; //@line 428
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 432
   ptr = ptr + 4 | 0; //@line 433
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 438
  ptr = ptr + 1 | 0; //@line 439
 }
 return end - num | 0; //@line 441
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1377
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1381
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1383
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1385
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1387
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1389
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1391
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 1394
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 1395
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 1404
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 1405
    if (!___async) {
     ___async_unwind = 0; //@line 1408
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 348; //@line 1410
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 1412
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 1414
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 1416
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 1418
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 1420
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 1422
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 1424
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 1427
    sp = STACKTOP; //@line 1428
    return;
   }
  }
 }
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16832
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16836
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16838
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16840
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 16841
 $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 16842
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 16845
  HEAP32[___async_retval >> 2] = 0; //@line 16847
  return;
 }
 $11 = HEAP32[$$pre + 4 >> 2] | 0; //@line 16851
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 16852
 FUNCTION_TABLE_vii[$11 & 7]($6, $8); //@line 16853
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 265; //@line 16856
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 16857
  HEAP32[$12 >> 2] = $$phi$trans$insert; //@line 16858
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 16859
  HEAP32[$13 >> 2] = $4; //@line 16860
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 16861
  HEAP32[$14 >> 2] = $8; //@line 16862
  sp = STACKTOP; //@line 16863
  return;
 }
 ___async_unwind = 0; //@line 16866
 HEAP32[$ReallocAsyncCtx2 >> 2] = 265; //@line 16867
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 16868
 HEAP32[$12 >> 2] = $$phi$trans$insert; //@line 16869
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 16870
 HEAP32[$13 >> 2] = $4; //@line 16871
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 16872
 HEAP32[$14 >> 2] = $8; //@line 16873
 sp = STACKTOP; //@line 16874
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21553
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 21563
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 21563
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 21563
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 21567
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 21570
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 21573
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 21581
  } else {
   $20 = 0; //@line 21583
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 21593
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 21597
  HEAP32[___async_retval >> 2] = $$1; //@line 21599
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 21602
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 21603
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 21607
  ___async_unwind = 0; //@line 21608
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 312; //@line 21610
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 21612
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 21614
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 21616
 sp = STACKTOP; //@line 21617
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19458
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19460
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19462
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19464
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 19469
  } else {
   $9 = $4 + 4 | 0; //@line 19471
   $10 = HEAP32[$9 >> 2] | 0; //@line 19472
   $11 = $4 + 8 | 0; //@line 19473
   $12 = HEAP32[$11 >> 2] | 0; //@line 19474
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 19478
    HEAP32[$6 >> 2] = 0; //@line 19479
    HEAP32[$2 >> 2] = 0; //@line 19480
    HEAP32[$11 >> 2] = 0; //@line 19481
    HEAP32[$9 >> 2] = 0; //@line 19482
    $$0 = 0; //@line 19483
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 19490
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 19491
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 19492
   if (!___async) {
    ___async_unwind = 0; //@line 19495
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 314; //@line 19497
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 19499
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 19501
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 19503
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 19505
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 19507
   sp = STACKTOP; //@line 19508
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 19513
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $14 = 0, $5 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 933
 $5 = $0 + -4 | 0; //@line 934
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 120 >> 2] | 0; //@line 937
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 938
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($5, $1, $3, $4) | 0; //@line 939
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 54; //@line 942
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 944
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 946
  sp = STACKTOP; //@line 947
  return 0; //@line 948
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 950
 if (($2 | 0) != 0 & ($9 | 0) > -1) {
  $14 = $1 + 12 | 0; //@line 955
  dest = $2; //@line 956
  src = $14; //@line 956
  stop = dest + 60 | 0; //@line 956
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 956
   dest = dest + 4 | 0; //@line 956
   src = src + 4 | 0; //@line 956
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$14 + 60 >> 1] | 0; //@line 956
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 958
 _wait_ms(1); //@line 959
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 55; //@line 962
  HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 964
  sp = STACKTOP; //@line 965
  return 0; //@line 966
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 968
  return $9 | 0; //@line 969
 }
 return 0; //@line 971
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 1131
 if (!$2) {
  $$0 = -1; //@line 1134
  return $$0 | 0; //@line 1135
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 1138
 $5 = $0 + 20 | 0; //@line 1139
 HEAP32[$5 >> 2] = 0; //@line 1140
 $6 = $0 + 16 | 0; //@line 1141
 HEAP32[$6 >> 2] = 0; //@line 1142
 if ($1 | 0) {
  $$034$i = $1; //@line 1145
  $23 = 0; //@line 1145
  do {
   $23 = $23 + 1 | 0; //@line 1147
   $$034$i = $$034$i >>> 1; //@line 1148
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 1156
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1159
 HEAP32[$0 + 28 >> 2] = $1; //@line 1161
 HEAP32[$0 + 32 >> 2] = $2; //@line 1163
 HEAP32[$0 >> 2] = 0; //@line 1164
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1167
 HEAP8[$0 + 9 >> 0] = 0; //@line 1169
 HEAP8[$0 + 8 >> 0] = 0; //@line 1171
 HEAP8[$0 + 36 >> 0] = 0; //@line 1173
 HEAP32[$0 + 40 >> 2] = 0; //@line 1175
 HEAP32[$0 + 44 >> 2] = 0; //@line 1177
 HEAP8[$0 + 184 >> 0] = 0; //@line 1179
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1181
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 1184
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1187
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 1190
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1193
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 1196
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 1199
 $$0 = $$033$i; //@line 1200
 return $$0 | 0; //@line 1201
}
function __ZN9UDPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5110
 HEAP32[$0 >> 2] = 592; //@line 5111
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5112
 __ZN6Socket5closeEv($0) | 0; //@line 5113
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 133; //@line 5116
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5118
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 5120
  sp = STACKTOP; //@line 5121
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5124
 HEAP32[$0 >> 2] = 556; //@line 5125
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 5127
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 5133
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5134
   FUNCTION_TABLE_vi[$8 & 511]($0 + 32 | 0); //@line 5135
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 134; //@line 5138
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5140
    sp = STACKTOP; //@line 5141
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5144
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 5150
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 5157
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5158
 FUNCTION_TABLE_vi[$15 & 511]($0 + 16 | 0); //@line 5159
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 135; //@line 5162
  sp = STACKTOP; //@line 5163
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5166
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 523
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 120 >> 2] | 0; //@line 526
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 527
 $8 = FUNCTION_TABLE_iiiii[$7 & 15]($0, $1, $3, $4) | 0; //@line 528
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 41; //@line 531
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 533
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 535
  sp = STACKTOP; //@line 536
  return 0; //@line 537
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 539
 if (($2 | 0) != 0 & ($8 | 0) > -1) {
  $13 = $1 + 12 | 0; //@line 544
  dest = $2; //@line 545
  src = $13; //@line 545
  stop = dest + 60 | 0; //@line 545
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 545
   dest = dest + 4 | 0; //@line 545
   src = src + 4 | 0; //@line 545
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$13 + 60 >> 1] | 0; //@line 545
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 547
 _wait_ms(1); //@line 548
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 42; //@line 551
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 553
  sp = STACKTOP; //@line 554
  return 0; //@line 555
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 557
  return $8 | 0; //@line 558
 }
 return 0; //@line 560
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_212($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17749
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17751
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17753
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17755
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17757
 $9 = HEAP32[$2 >> 2] | 0; //@line 17758
 if (!$9) {
  if (!$6) {
   return;
  }
  __ZdaPv($6); //@line 17765
  return;
 } else {
  $11 = HEAP32[$9 >> 2] | 0; //@line 17768
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 17769
  FUNCTION_TABLE_viii[$11 & 0]($4, $8, $6); //@line 17770
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 255; //@line 17773
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 17774
   HEAP32[$12 >> 2] = $2; //@line 17775
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 17776
   HEAP32[$13 >> 2] = $4; //@line 17777
   $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 17778
   HEAP32[$14 >> 2] = $6; //@line 17779
   sp = STACKTOP; //@line 17780
   return;
  }
  ___async_unwind = 0; //@line 17783
  HEAP32[$ReallocAsyncCtx2 >> 2] = 255; //@line 17784
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 17785
  HEAP32[$12 >> 2] = $2; //@line 17786
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 17787
  HEAP32[$13 >> 2] = $4; //@line 17788
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 17789
  HEAP32[$14 >> 2] = $6; //@line 17790
  sp = STACKTOP; //@line 17791
  return;
 }
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6925
 STACKTOP = STACKTOP + 48 | 0; //@line 6926
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6926
 $$byval_copy = sp + 20 | 0; //@line 6927
 $4 = sp; //@line 6928
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6929
 $5 = __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $4, 1, $3) | 0; //@line 6930
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 151; //@line 6933
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6935
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 6937
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 6939
  sp = STACKTOP; //@line 6940
  STACKTOP = sp; //@line 6941
  return 0; //@line 6941
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6943
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 6944
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 6944
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 6944
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 6944
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 6944
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 6945
  STACKTOP = sp; //@line 6948
  return (($5 | 0) < 0 ? $5 : 0) | 0; //@line 6948
 }
 return 0; //@line 6950
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 12508
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 12513
    $$0 = 1; //@line 12514
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 12527
     $$0 = 1; //@line 12528
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12532
     $$0 = -1; //@line 12533
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 12543
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 12547
    $$0 = 2; //@line 12548
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 12560
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 12566
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 12570
    $$0 = 3; //@line 12571
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 12581
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 12587
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 12593
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 12597
    $$0 = 4; //@line 12598
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12602
    $$0 = -1; //@line 12603
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 12608
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_30($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 17389
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17391
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17393
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17395
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17397
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 17402
  return;
 }
 dest = $2 + 4 | 0; //@line 17406
 stop = dest + 52 | 0; //@line 17406
 do {
  HEAP32[dest >> 2] = 0; //@line 17406
  dest = dest + 4 | 0; //@line 17406
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 17407
 HEAP32[$2 + 8 >> 2] = $4; //@line 17409
 HEAP32[$2 + 12 >> 2] = -1; //@line 17411
 HEAP32[$2 + 48 >> 2] = 1; //@line 17413
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 17416
 $16 = HEAP32[$6 >> 2] | 0; //@line 17417
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 17418
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 17419
 if (!___async) {
  ___async_unwind = 0; //@line 17422
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 333; //@line 17424
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 17426
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 17428
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 17430
 sp = STACKTOP; //@line 17431
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_128($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 2523
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2527
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2529
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2531
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2532
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 2536
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 2540
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 2541
 FUNCTION_TABLE_vi[$12 & 511]($4); //@line 2542
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 2545
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 2546
  HEAP32[$13 >> 2] = $4; //@line 2547
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 2548
  HEAP32[$14 >> 2] = $6; //@line 2549
  $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 2550
  HEAP32[$15 >> 2] = $8; //@line 2551
  sp = STACKTOP; //@line 2552
  return;
 }
 ___async_unwind = 0; //@line 2555
 HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 2556
 $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 2557
 HEAP32[$13 >> 2] = $4; //@line 2558
 $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 2559
 HEAP32[$14 >> 2] = $6; //@line 2560
 $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 2561
 HEAP32[$15 >> 2] = $8; //@line 2562
 sp = STACKTOP; //@line 2563
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_116($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1313
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1317
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 556; //@line 1318
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 1320
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 1325
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 1326
  FUNCTION_TABLE_vi[$10 & 511]($4 + 32 | 0); //@line 1327
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 1330
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 1331
   HEAP32[$11 >> 2] = $4; //@line 1332
   sp = STACKTOP; //@line 1333
   return;
  }
  ___async_unwind = 0; //@line 1336
  HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 1337
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 1338
  HEAP32[$11 >> 2] = $4; //@line 1339
  sp = STACKTOP; //@line 1340
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 1344
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 1351
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 1352
 FUNCTION_TABLE_vi[$17 & 511]($4 + 16 | 0); //@line 1353
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 1356
  sp = STACKTOP; //@line 1357
  return;
 }
 ___async_unwind = 0; //@line 1360
 HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 1361
 sp = STACKTOP; //@line 1362
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_118($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1513
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1517
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1519
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1521
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1523
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1525
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 1528
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 1529
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 1535
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 1536
   if (!___async) {
    ___async_unwind = 0; //@line 1539
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 346; //@line 1541
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 1543
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 1545
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 1547
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 1549
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 1551
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 1553
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 1556
   sp = STACKTOP; //@line 1557
   return;
  }
 }
 return;
}
function __ZNK13SocketAddress14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4837
 STACKTOP = STACKTOP + 16 | 0; //@line 4838
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4838
 $vararg_buffer = sp; //@line 4839
 $2 = HEAP32[$0 + 40 >> 2] | 0; //@line 4841
 if (!$2) {
  $$0 = 0; //@line 4844
  STACKTOP = sp; //@line 4845
  return $$0 | 0; //@line 4845
 }
 if (HEAP8[$0 >> 0] | 0) {
  $$0 = $0; //@line 4850
  STACKTOP = sp; //@line 4851
  return $$0 | 0; //@line 4851
 }
 switch ($2 | 0) {
 case 1:
  {
   $11 = HEAPU8[$0 + 45 >> 0] | 0; //@line 4860
   $14 = HEAPU8[$0 + 46 >> 0] | 0; //@line 4863
   $17 = HEAPU8[$0 + 47 >> 0] | 0; //@line 4866
   HEAP32[$vararg_buffer >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 4867
   HEAP32[$vararg_buffer + 4 >> 2] = $11; //@line 4869
   HEAP32[$vararg_buffer + 8 >> 2] = $14; //@line 4871
   HEAP32[$vararg_buffer + 12 >> 2] = $17; //@line 4873
   _sprintf($0, 2762, $vararg_buffer) | 0; //@line 4874
   $$0 = $0; //@line 4875
   STACKTOP = sp; //@line 4876
   return $$0 | 0; //@line 4876
  }
 case 2:
  {
   _ip6tos($0 + 44 | 0, $0) | 0; //@line 4881
   $$0 = $0; //@line 4882
   STACKTOP = sp; //@line 4883
   return $$0 | 0; //@line 4883
  }
 default:
  {
   $$0 = $0; //@line 4887
   STACKTOP = sp; //@line 4888
   return $$0 | 0; //@line 4888
  }
 }
 return 0; //@line 4891
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_18($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16743
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16747
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16749
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16751
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16753
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16755
 $13 = $4 + 12 | 0; //@line 16757
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16758
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 16759
 $14 = FUNCTION_TABLE_iiiii[$12 & 15]($6, $8, $4, $10) | 0; //@line 16760
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 80; //@line 16763
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 16764
  HEAP32[$15 >> 2] = $13; //@line 16765
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 16766
  HEAP32[$16 >> 2] = $4; //@line 16767
  sp = STACKTOP; //@line 16768
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 16772
 ___async_unwind = 0; //@line 16773
 HEAP32[$ReallocAsyncCtx3 >> 2] = 80; //@line 16774
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 16775
 HEAP32[$15 >> 2] = $13; //@line 16776
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 16777
 HEAP32[$16 >> 2] = $4; //@line 16778
 sp = STACKTOP; //@line 16779
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_80($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22085
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22089
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22091
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22093
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22094
 if (!$$pr$i) {
  _free($6); //@line 22097
  return;
 }
 $11 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 22101
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 22102
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 22103
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 240; //@line 22106
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 22107
  HEAP32[$12 >> 2] = $4; //@line 22108
  $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 22109
  HEAP32[$13 >> 2] = $6; //@line 22110
  $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 22111
  HEAP32[$14 >> 2] = $8; //@line 22112
  sp = STACKTOP; //@line 22113
  return;
 }
 ___async_unwind = 0; //@line 22116
 HEAP32[$ReallocAsyncCtx7 >> 2] = 240; //@line 22117
 $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 22118
 HEAP32[$12 >> 2] = $4; //@line 22119
 $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 22120
 HEAP32[$13 >> 2] = $6; //@line 22121
 $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 22122
 HEAP32[$14 >> 2] = $8; //@line 22123
 sp = STACKTOP; //@line 22124
 return;
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 1211
 HEAP32[$0 + 20 >> 2] = 0; //@line 1213
 $5 = $0 + 16 | 0; //@line 1214
 HEAP32[$5 >> 2] = 0; //@line 1215
 if ($1 | 0) {
  $$034 = $1; //@line 1218
  $22 = 0; //@line 1218
  do {
   $22 = $22 + 1 | 0; //@line 1220
   $$034 = $$034 >>> 1; //@line 1221
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 1229
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1232
 HEAP32[$0 + 28 >> 2] = $1; //@line 1234
 HEAP32[$0 + 32 >> 2] = $2; //@line 1236
 HEAP32[$0 >> 2] = 0; //@line 1237
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1240
 HEAP8[$0 + 9 >> 0] = 0; //@line 1242
 HEAP8[$0 + 8 >> 0] = 0; //@line 1244
 HEAP8[$0 + 36 >> 0] = 0; //@line 1246
 HEAP32[$0 + 40 >> 2] = 0; //@line 1248
 HEAP32[$0 + 44 >> 2] = 0; //@line 1250
 HEAP8[$0 + 184 >> 0] = 0; //@line 1252
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1254
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 1257
  return $$033 | 0; //@line 1258
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1261
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 1264
  return $$033 | 0; //@line 1265
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1268
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 1271
 return $$033 | 0; //@line 1272
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_39($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17902
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17906
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 17909
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17910
 if (!$7) {
  if ($6) {
   $$06 = -3007; //@line 17914
   $12 = ___async_retval; //@line 17915
   HEAP32[$12 >> 2] = $$06; //@line 17916
   return;
  }
  $$06 = 0; //@line 17919
  $12 = ___async_retval; //@line 17920
  HEAP32[$12 >> 2] = $$06; //@line 17921
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 17925
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17926
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 17927
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 105; //@line 17930
   $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 17931
   $$expand_i1_val = $6 & 1; //@line 17932
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 17933
   sp = STACKTOP; //@line 17934
   return;
  }
  ___async_unwind = 0; //@line 17937
  HEAP32[$ReallocAsyncCtx3 >> 2] = 105; //@line 17938
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 17939
  $$expand_i1_val = $6 & 1; //@line 17940
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 17941
  sp = STACKTOP; //@line 17942
  return;
 }
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_38($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17855
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17859
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 17862
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17863
 if (!$7) {
  if ($6) {
   $$06 = -3007; //@line 17867
   $12 = ___async_retval; //@line 17868
   HEAP32[$12 >> 2] = $$06; //@line 17869
   return;
  }
  $$06 = 0; //@line 17872
  $12 = ___async_retval; //@line 17873
  HEAP32[$12 >> 2] = $$06; //@line 17874
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 17878
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 17879
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 17880
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 110; //@line 17883
   $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 17884
   $$expand_i1_val = $6 & 1; //@line 17885
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 17886
   sp = STACKTOP; //@line 17887
   return;
  }
  ___async_unwind = 0; //@line 17890
  HEAP32[$ReallocAsyncCtx6 >> 2] = 110; //@line 17891
  $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 17892
  $$expand_i1_val = $6 & 1; //@line 17893
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 17894
  sp = STACKTOP; //@line 17895
  return;
 }
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 11392
  $8 = $0; //@line 11392
  $9 = $1; //@line 11392
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11394
   $$0914 = $$0914 + -1 | 0; //@line 11398
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 11399
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11400
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 11408
   }
  }
  $$010$lcssa$off0 = $8; //@line 11413
  $$09$lcssa = $$0914; //@line 11413
 } else {
  $$010$lcssa$off0 = $0; //@line 11415
  $$09$lcssa = $2; //@line 11415
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 11419
 } else {
  $$012 = $$010$lcssa$off0; //@line 11421
  $$111 = $$09$lcssa; //@line 11421
  while (1) {
   $26 = $$111 + -1 | 0; //@line 11426
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 11427
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 11431
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 11434
    $$111 = $26; //@line 11434
   }
  }
 }
 return $$1$lcssa | 0; //@line 11438
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_33($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17705
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17709
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17711
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17713
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17715
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17717
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 17720
 _equeue_event_delay($4, $6); //@line 17721
 _equeue_event_dtor($4, 102); //@line 17722
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 17723
 $14 = _equeue_post($8, 103, $4) | 0; //@line 17724
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 104; //@line 17727
  $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 17728
  HEAP32[$15 >> 2] = $10; //@line 17729
  $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 17730
  HEAP32[$16 >> 2] = $12; //@line 17731
  sp = STACKTOP; //@line 17732
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 17736
 ___async_unwind = 0; //@line 17737
 HEAP32[$ReallocAsyncCtx8 >> 2] = 104; //@line 17738
 $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 17739
 HEAP32[$15 >> 2] = $10; //@line 17740
 $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 17741
 HEAP32[$16 >> 2] = $12; //@line 17742
 sp = STACKTOP; //@line 17743
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_99($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23778
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23782
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23784
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23786
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23788
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23790
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23792
 $15 = $4 + 12 | 0; //@line 23794
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23795
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 23796
 $16 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($6, $8, $10, 0, $4, $12) | 0; //@line 23797
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 23801
  ___async_unwind = 0; //@line 23802
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 154; //@line 23804
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $15; //@line 23806
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $14; //@line 23808
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $4; //@line 23810
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 23812
 sp = STACKTOP; //@line 23813
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_198($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 16237
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16239
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16241
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16243
 $8 = HEAP32[$2 + 28 >> 2] | 0; //@line 16245
 if (!$8) {
  __ZdlPv($2); //@line 16248
  HEAP32[___async_retval >> 2] = -3007; //@line 16250
  return;
 }
 $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 16254
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 16255
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 16256
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 16259
  $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 16260
  HEAP32[$12 >> 2] = $2; //@line 16261
  $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 16262
  HEAP32[$13 >> 2] = $6; //@line 16263
  sp = STACKTOP; //@line 16264
  return;
 }
 ___async_unwind = 0; //@line 16267
 HEAP32[$ReallocAsyncCtx10 >> 2] = 170; //@line 16268
 $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 16269
 HEAP32[$12 >> 2] = $2; //@line 16270
 $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 16271
 HEAP32[$13 >> 2] = $6; //@line 16272
 sp = STACKTOP; //@line 16273
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1180
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1182
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1186
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1188
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1190
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1192
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 1196
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 1199
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 1200
   if (!___async) {
    ___async_unwind = 0; //@line 1203
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 350; //@line 1205
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 1207
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 1209
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 1211
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 1213
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 1215
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 1217
   sp = STACKTOP; //@line 1218
   return;
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 4652
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 4657
   label = 4; //@line 4658
  } else {
   $$01519 = $0; //@line 4660
   $23 = $1; //@line 4660
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 4665
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 4668
    $23 = $6; //@line 4669
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 4673
     label = 4; //@line 4674
     break;
    } else {
     $$01519 = $6; //@line 4677
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 4683
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 4685
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 4693
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 4701
  } else {
   $$pn = $$0; //@line 4703
   while (1) {
    $19 = $$pn + 1 | 0; //@line 4705
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 4709
     break;
    } else {
     $$pn = $19; //@line 4712
    }
   }
  }
  $$sink = $$1$lcssa; //@line 4717
 }
 return $$sink - $1 | 0; //@line 4720
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 14447
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 14454
   $10 = $1 + 16 | 0; //@line 14455
   $11 = HEAP32[$10 >> 2] | 0; //@line 14456
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 14459
    HEAP32[$1 + 24 >> 2] = $4; //@line 14461
    HEAP32[$1 + 36 >> 2] = 1; //@line 14463
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 14473
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 14478
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 14481
    HEAP8[$1 + 54 >> 0] = 1; //@line 14483
    break;
   }
   $21 = $1 + 24 | 0; //@line 14486
   $22 = HEAP32[$21 >> 2] | 0; //@line 14487
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 14490
    $28 = $4; //@line 14491
   } else {
    $28 = $22; //@line 14493
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 14502
   }
  }
 } while (0);
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 5031
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5033
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5037
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 5042
  dest = $2; //@line 5043
  src = $8; //@line 5043
  stop = dest + 60 | 0; //@line 5043
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 5043
   dest = dest + 4 | 0; //@line 5043
   src = src + 4 | 0; //@line 5043
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 5043
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 5045
 _wait_ms(1); //@line 5046
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 55; //@line 5049
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 5050
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 5051
  sp = STACKTOP; //@line 5052
  return;
 }
 ___async_unwind = 0; //@line 5055
 HEAP32[$ReallocAsyncCtx2 >> 2] = 55; //@line 5056
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 5057
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 5058
 sp = STACKTOP; //@line 5059
 return;
}
function __ZN6Socket5closeEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13401
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13403
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13405
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13407
 $7 = HEAP32[$2 >> 2] | 0; //@line 13408
 HEAP32[$2 >> 2] = 0; //@line 13409
 $8 = HEAP32[$4 >> 2] | 0; //@line 13410
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0; //@line 13413
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 13414
 $12 = FUNCTION_TABLE_iii[$11 & 15]($8, $7) | 0; //@line 13415
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 129; //@line 13418
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 13419
  HEAP32[$13 >> 2] = $4; //@line 13420
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 13421
  HEAP32[$14 >> 2] = $6; //@line 13422
  sp = STACKTOP; //@line 13423
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 13427
 ___async_unwind = 0; //@line 13428
 HEAP32[$ReallocAsyncCtx2 >> 2] = 129; //@line 13429
 $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 13430
 HEAP32[$13 >> 2] = $4; //@line 13431
 $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 13432
 HEAP32[$14 >> 2] = $6; //@line 13433
 sp = STACKTOP; //@line 13434
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_23($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17050
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17054
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17056
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17058
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17060
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17062
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17064
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17066
 $17 = $4 + 12 | 0; //@line 17068
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 17069
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 17070
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 17071
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 17075
  ___async_unwind = 0; //@line 17076
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 113; //@line 17078
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 17080
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 17082
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 17084
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 17086
 sp = STACKTOP; //@line 17087
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1901
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1903
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1907
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 1912
  dest = $2; //@line 1913
  src = $8; //@line 1913
  stop = dest + 60 | 0; //@line 1913
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 1913
   dest = dest + 4 | 0; //@line 1913
   src = src + 4 | 0; //@line 1913
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 1913
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 1915
 _wait_ms(1); //@line 1916
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 42; //@line 1919
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 1920
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 1921
  sp = STACKTOP; //@line 1922
  return;
 }
 ___async_unwind = 0; //@line 1925
 HEAP32[$ReallocAsyncCtx2 >> 2] = 42; //@line 1926
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 1927
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 1928
 sp = STACKTOP; //@line 1929
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_36($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17798
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17802
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17804
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17806
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17808
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 17811
 _equeue_event_dtor($4, 102); //@line 17812
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 17813
 $12 = _equeue_post($6, 103, $4) | 0; //@line 17814
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 109; //@line 17817
  $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 17818
  HEAP32[$13 >> 2] = $8; //@line 17819
  $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 17820
  HEAP32[$14 >> 2] = $10; //@line 17821
  sp = STACKTOP; //@line 17822
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 17826
 ___async_unwind = 0; //@line 17827
 HEAP32[$ReallocAsyncCtx7 >> 2] = 109; //@line 17828
 $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 17829
 HEAP32[$13 >> 2] = $8; //@line 17830
 $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 17831
 HEAP32[$14 >> 2] = $10; //@line 17832
 sp = STACKTOP; //@line 17833
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13733
 $1 = HEAP32[219] | 0; //@line 13734
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 13740
 } else {
  $19 = 0; //@line 13742
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 13748
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 13754
    $12 = HEAP32[$11 >> 2] | 0; //@line 13755
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 13761
     HEAP8[$12 >> 0] = 10; //@line 13762
     $22 = 0; //@line 13763
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13767
   $17 = ___overflow($1, 10) | 0; //@line 13768
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 323; //@line 13771
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 13773
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 13775
    sp = STACKTOP; //@line 13776
    return 0; //@line 13777
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13779
    $22 = $17 >> 31; //@line 13781
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 13788
 }
 return $22 | 0; //@line 13790
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_170($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12376
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12378
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12380
 $9 = $4 + 12 | 0; //@line 12382
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12383
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 12384
 $10 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($6, $8, $4) | 0; //@line 12385
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 192; //@line 12388
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 12389
  HEAP32[$11 >> 2] = $9; //@line 12390
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 12391
  HEAP32[$12 >> 2] = $4; //@line 12392
  sp = STACKTOP; //@line 12393
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 12397
 ___async_unwind = 0; //@line 12398
 HEAP32[$ReallocAsyncCtx5 >> 2] = 192; //@line 12399
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 12400
 HEAP32[$11 >> 2] = $9; //@line 12401
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 12402
 HEAP32[$12 >> 2] = $4; //@line 12403
 sp = STACKTOP; //@line 12404
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16335
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16337
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16339
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16341
 $7 = $2 + 12 | 0; //@line 16342
 $8 = HEAP32[$7 >> 2] | 0; //@line 16343
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 16346
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 16350
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 16351
 FUNCTION_TABLE_vii[$11 & 7]($6, $2); //@line 16352
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 132; //@line 16355
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 16356
  HEAP32[$12 >> 2] = $7; //@line 16357
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 16358
  HEAP32[$13 >> 2] = $4; //@line 16359
  sp = STACKTOP; //@line 16360
  return;
 }
 ___async_unwind = 0; //@line 16363
 HEAP32[$ReallocAsyncCtx2 >> 2] = 132; //@line 16364
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 16365
 HEAP32[$12 >> 2] = $7; //@line 16366
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 16367
 HEAP32[$13 >> 2] = $4; //@line 16368
 sp = STACKTOP; //@line 16369
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_207($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17465
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17469
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17471
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17472
 if (!$$pr$i) {
  if (!$6) {
   return;
  }
  __ZdaPv($6); //@line 17479
  return;
 } else {
  $9 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 17483
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 17484
  FUNCTION_TABLE_vi[$9 & 511]($4); //@line 17485
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 256; //@line 17488
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 17489
   HEAP32[$10 >> 2] = $4; //@line 17490
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 17491
   HEAP32[$11 >> 2] = $6; //@line 17492
   sp = STACKTOP; //@line 17493
   return;
  }
  ___async_unwind = 0; //@line 17496
  HEAP32[$ReallocAsyncCtx3 >> 2] = 256; //@line 17497
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 17498
  HEAP32[$10 >> 2] = $4; //@line 17499
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 17500
  HEAP32[$11 >> 2] = $6; //@line 17501
  sp = STACKTOP; //@line 17502
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_186($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13641
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13645
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13647
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13649
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13651
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13653
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13655
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13657
 $17 = $4 + 12 | 0; //@line 13659
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 13660
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 13661
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 13662
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 13666
  ___async_unwind = 0; //@line 13667
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 13669
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 13671
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 13673
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 13675
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 13677
 sp = STACKTOP; //@line 13678
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4373
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4375
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4377
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4379
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4381
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4383
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4385
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4387
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4389
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 4390
 $16 = FUNCTION_TABLE_iiii[$14 & 31]($12, $6, $AsyncRetVal) | 0; //@line 4391
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 4395
  ___async_unwind = 0; //@line 4396
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 119; //@line 4398
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 4400
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 4402
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 4404
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 4406
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 4408
 sp = STACKTOP; //@line 4409
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_114($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1228
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1234
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1236
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1238
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1240
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 1245
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 1247
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 1248
 if (!___async) {
  ___async_unwind = 0; //@line 1251
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 350; //@line 1253
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 1255
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 1257
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 1259
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 1261
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 1263
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 1265
 sp = STACKTOP; //@line 1266
 return;
}
function _mbed_vtracef__async_cb_107($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 753
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 755
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 757
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 759
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 764
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 766
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 771
 $16 = _snprintf($4, $6, 2626, $2) | 0; //@line 772
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 774
 $19 = $4 + $$18 | 0; //@line 776
 $20 = $6 - $$18 | 0; //@line 777
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 2704, $12) | 0; //@line 785
  }
 }
 $23 = HEAP32[129] | 0; //@line 788
 $24 = HEAP32[122] | 0; //@line 789
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 790
 FUNCTION_TABLE_vi[$23 & 511]($24); //@line 791
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 794
  sp = STACKTOP; //@line 795
  return;
 }
 ___async_unwind = 0; //@line 798
 HEAP32[$ReallocAsyncCtx7 >> 2] = 70; //@line 799
 sp = STACKTOP; //@line 800
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2744
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2747
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2748
 $7 = FUNCTION_TABLE_ii[$6 & 31]($0) | 0; //@line 2749
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 76; //@line 2752
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2754
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2756
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 2758
  sp = STACKTOP; //@line 2759
  return 0; //@line 2760
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2762
 $12 = HEAP32[HEAP32[$7 >> 2] >> 2] | 0; //@line 2764
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2765
 $13 = FUNCTION_TABLE_iiiii[$12 & 15]($7, $1, $2, $3) | 0; //@line 2766
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 77; //@line 2769
  sp = STACKTOP; //@line 2770
  return 0; //@line 2771
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2773
  return $13 | 0; //@line 2774
 }
 return 0; //@line 2776
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23607
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23609
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23611
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23615
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 23619
  label = 4; //@line 23620
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 23625
   label = 4; //@line 23626
  } else {
   $$037$off039 = 3; //@line 23628
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 23632
  $17 = $8 + 40 | 0; //@line 23633
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 23636
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 23646
    $$037$off039 = $$037$off038; //@line 23647
   } else {
    $$037$off039 = $$037$off038; //@line 23649
   }
  } else {
   $$037$off039 = $$037$off038; //@line 23652
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 23655
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_92($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23097
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23099
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23101
 $6 = HEAP32[$2 + 28 >> 2] | 0; //@line 23103
 if (!$6) {
  __ZdlPv($2); //@line 23106
  HEAP32[6700 + ($4 << 2) >> 2] = 0; //@line 23108
  return;
 }
 $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 23113
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23114
 FUNCTION_TABLE_vi[$10 & 511]($2 + 16 | 0); //@line 23115
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 23118
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 23119
  HEAP32[$11 >> 2] = $2; //@line 23120
  $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 23121
  HEAP32[$12 >> 2] = $4; //@line 23122
  sp = STACKTOP; //@line 23123
  return;
 }
 ___async_unwind = 0; //@line 23126
 HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 23127
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 23128
 HEAP32[$11 >> 2] = $2; //@line 23129
 $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 23130
 HEAP32[$12 >> 2] = $4; //@line 23131
 sp = STACKTOP; //@line 23132
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14306
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 14315
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 14320
      HEAP32[$13 >> 2] = $2; //@line 14321
      $19 = $1 + 40 | 0; //@line 14322
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 14325
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14335
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 14339
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 14346
    }
   }
  }
 } while (0);
 return;
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4077
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4079
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4081
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4083
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 4085
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 4087
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 6005; //@line 4092
  HEAP32[$4 + 4 >> 2] = $6; //@line 4094
  _abort_message(5914, $4); //@line 4095
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 4098
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 4101
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 4102
 $16 = FUNCTION_TABLE_ii[$15 & 31]($12) | 0; //@line 4103
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 4107
  ___async_unwind = 0; //@line 4108
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 329; //@line 4110
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 4112
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 4114
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 4116
 sp = STACKTOP; //@line 4117
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 12628
 while (1) {
  if ((HEAPU8[3977 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 12635
   break;
  }
  $7 = $$016 + 1 | 0; //@line 12638
  if (($7 | 0) == 87) {
   $$01214 = 4065; //@line 12641
   $$115 = 87; //@line 12641
   label = 5; //@line 12642
   break;
  } else {
   $$016 = $7; //@line 12645
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 4065; //@line 12651
  } else {
   $$01214 = 4065; //@line 12653
   $$115 = $$016; //@line 12653
   label = 5; //@line 12654
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 12659
   $$113 = $$01214; //@line 12660
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 12664
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 12671
   if (!$$115) {
    $$012$lcssa = $$113; //@line 12674
    break;
   } else {
    $$01214 = $$113; //@line 12677
    label = 5; //@line 12678
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 12685
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_68($0) {
 $0 = $0 | 0;
 var $$4$ = 0, $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21083
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21087
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21089
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21091
 $$4$ = ($AsyncRetVal | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : $AsyncRetVal; //@line 21093
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 21094
 __ZN9UDPSocketD2Ev($4); //@line 21095
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 148; //@line 21098
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 21099
  HEAP32[$9 >> 2] = $6; //@line 21100
  $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 21101
  HEAP32[$10 >> 2] = $$4$; //@line 21102
  sp = STACKTOP; //@line 21103
  return;
 }
 ___async_unwind = 0; //@line 21106
 HEAP32[$ReallocAsyncCtx5 >> 2] = 148; //@line 21107
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 21108
 HEAP32[$9 >> 2] = $6; //@line 21109
 $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 21110
 HEAP32[$10 >> 2] = $$4$; //@line 21111
 sp = STACKTOP; //@line 21112
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 18208
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18214
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18216
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 18218
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18219
 $10 = HEAP32[$6 >> 2] | 0; //@line 18220
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 18221
 __ZL28nsapi_dns_query_async_deletei($10); //@line 18222
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 18225
  $11 = $ReallocAsyncCtx15 + 4 | 0; //@line 18226
  HEAP32[$11 >> 2] = $9; //@line 18227
  $12 = $ReallocAsyncCtx15 + 8 | 0; //@line 18228
  HEAP32[$12 >> 2] = $8; //@line 18229
  sp = STACKTOP; //@line 18230
  return;
 }
 ___async_unwind = 0; //@line 18233
 HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 18234
 $11 = $ReallocAsyncCtx15 + 4 | 0; //@line 18235
 HEAP32[$11 >> 2] = $9; //@line 18236
 $12 = $ReallocAsyncCtx15 + 8 | 0; //@line 18237
 HEAP32[$12 >> 2] = $8; //@line 18238
 sp = STACKTOP; //@line 18239
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 12701
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 12705
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 12708
   if (!$5) {
    $$0 = 0; //@line 12711
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 12717
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 12723
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 12730
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 12737
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 12744
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 12751
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 12758
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 12762
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 12772
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21884
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21890
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21892
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 21894
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21895
 $10 = HEAP32[$6 >> 2] | 0; //@line 21896
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 21897
 __ZL28nsapi_dns_query_async_deletei($10); //@line 21898
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 231; //@line 21901
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 21902
  HEAP32[$11 >> 2] = $9; //@line 21903
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 21904
  HEAP32[$12 >> 2] = $8; //@line 21905
  sp = STACKTOP; //@line 21906
  return;
 }
 ___async_unwind = 0; //@line 21909
 HEAP32[$ReallocAsyncCtx9 >> 2] = 231; //@line 21910
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 21911
 HEAP32[$11 >> 2] = $9; //@line 21912
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 21913
 HEAP32[$12 >> 2] = $8; //@line 21914
 sp = STACKTOP; //@line 21915
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_56($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19049
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19051
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19053
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19055
 $7 = HEAP32[$2 >> 2] | 0; //@line 19056
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 19061
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 19062
 FUNCTION_TABLE_viii[$9 & 0]($4, $6, 0); //@line 19063
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 210; //@line 19066
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 19067
  HEAP32[$10 >> 2] = $2; //@line 19068
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 19069
  HEAP32[$11 >> 2] = $4; //@line 19070
  sp = STACKTOP; //@line 19071
  return;
 }
 ___async_unwind = 0; //@line 19074
 HEAP32[$ReallocAsyncCtx6 >> 2] = 210; //@line 19075
 $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 19076
 HEAP32[$10 >> 2] = $2; //@line 19077
 $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 19078
 HEAP32[$11 >> 2] = $4; //@line 19079
 sp = STACKTOP; //@line 19080
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2698
 $1 = $0 + 12 | 0; //@line 2699
 $2 = HEAP32[$1 >> 2] | 0; //@line 2700
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2704
   _mbed_assert_internal(2931, 2936, 528); //@line 2705
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 74; //@line 2708
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 2710
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 2712
    sp = STACKTOP; //@line 2713
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2716
    $7 = HEAP32[$1 >> 2] | 0; //@line 2718
    break;
   }
  } else {
   $7 = $2; //@line 2722
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 2725
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2726
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 2727
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 75; //@line 2730
  sp = STACKTOP; //@line 2731
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2734
  return;
 }
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 12897
 $32 = $0 + 3 | 0; //@line 12911
 $33 = HEAP8[$32 >> 0] | 0; //@line 12912
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 12914
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 12919
  $$sink21$lcssa = $32; //@line 12919
 } else {
  $$sink2123 = $32; //@line 12921
  $39 = $35; //@line 12921
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 12924
   $41 = HEAP8[$40 >> 0] | 0; //@line 12925
   $39 = $39 << 8 | $41 & 255; //@line 12927
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 12932
    $$sink21$lcssa = $40; //@line 12932
    break;
   } else {
    $$sink2123 = $40; //@line 12935
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 12942
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4309
 $1 = $0 + 12 | 0; //@line 4310
 $2 = HEAP32[$1 >> 2] | 0; //@line 4311
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4315
   _mbed_assert_internal(2931, 2936, 528); //@line 4316
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 125; //@line 4319
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 4321
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4323
    sp = STACKTOP; //@line 4324
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4327
    $7 = HEAP32[$1 >> 2] | 0; //@line 4329
    break;
   }
  } else {
   $7 = $2; //@line 4333
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 4336
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4337
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 4338
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 126; //@line 4341
  sp = STACKTOP; //@line 4342
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4345
  return;
 }
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12852
 $2 = $0 + 12 | 0; //@line 12854
 $3 = HEAP32[$2 >> 2] | 0; //@line 12855
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12859
   _mbed_assert_internal(2931, 2936, 528); //@line 12860
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 290; //@line 12863
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 12865
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 12867
    sp = STACKTOP; //@line 12868
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12871
    $8 = HEAP32[$2 >> 2] | 0; //@line 12873
    break;
   }
  } else {
   $8 = $3; //@line 12877
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 12880
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12882
 FUNCTION_TABLE_vi[$7 & 511]($0); //@line 12883
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 291; //@line 12886
  sp = STACKTOP; //@line 12887
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12890
  return;
 }
}
function _mbed_vtracef__async_cb_113($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1138
 $3 = HEAP32[130] | 0; //@line 1142
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[122] | 0; //@line 1146
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 1147
  FUNCTION_TABLE_vi[$3 & 511]($5); //@line 1148
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 1151
   sp = STACKTOP; //@line 1152
   return;
  }
  ___async_unwind = 0; //@line 1155
  HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 1156
  sp = STACKTOP; //@line 1157
  return;
 } else {
  $6 = HEAP32[129] | 0; //@line 1160
  $7 = HEAP32[122] | 0; //@line 1161
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 1162
  FUNCTION_TABLE_vi[$6 & 511]($7); //@line 1163
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 65; //@line 1166
   sp = STACKTOP; //@line 1167
   return;
  }
  ___async_unwind = 0; //@line 1170
  HEAP32[$ReallocAsyncCtx4 >> 2] = 65; //@line 1171
  sp = STACKTOP; //@line 1172
  return;
 }
}
function __ZN6SocketD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4032
 HEAP32[$0 >> 2] = 556; //@line 4033
 $2 = HEAP32[$0 + 44 >> 2] | 0; //@line 4035
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4041
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4042
   FUNCTION_TABLE_vi[$6 & 511]($0 + 32 | 0); //@line 4043
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 116; //@line 4046
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4048
    sp = STACKTOP; //@line 4049
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4052
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 28 >> 2] | 0; //@line 4058
 if (!$9) {
  return;
 }
 $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 4065
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4066
 FUNCTION_TABLE_vi[$13 & 511]($0 + 16 | 0); //@line 4067
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 117; //@line 4070
  sp = STACKTOP; //@line 4071
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4074
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_19($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16785
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16789
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16791
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16792
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16796
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 16800
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 16801
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 16802
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 81; //@line 16805
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 16806
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 16807
  sp = STACKTOP; //@line 16808
  return;
 }
 ___async_unwind = 0; //@line 16811
 HEAP32[$ReallocAsyncCtx4 >> 2] = 81; //@line 16812
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 16813
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 16814
 sp = STACKTOP; //@line 16815
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_57($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19086
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19088
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19090
 $5 = HEAP32[$2 >> 2] | 0; //@line 19091
 if (!$5) {
  return;
 }
 $7 = HEAP32[$5 >> 2] | 0; //@line 19096
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 19097
 FUNCTION_TABLE_viii[$7 & 0]($4, -3007, 0); //@line 19098
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 204; //@line 19101
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 19102
  HEAP32[$8 >> 2] = $2; //@line 19103
  $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 19104
  HEAP32[$9 >> 2] = $4; //@line 19105
  sp = STACKTOP; //@line 19106
  return;
 }
 ___async_unwind = 0; //@line 19109
 HEAP32[$ReallocAsyncCtx2 >> 2] = 204; //@line 19110
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 19111
 HEAP32[$8 >> 2] = $2; //@line 19112
 $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 19113
 HEAP32[$9 >> 2] = $4; //@line 19114
 sp = STACKTOP; //@line 19115
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_85($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22232
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22234
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22236
 $5 = HEAP32[$2 >> 2] | 0; //@line 22237
 if (!$5) {
  return;
 }
 $7 = HEAP32[$5 >> 2] | 0; //@line 22242
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 22243
 FUNCTION_TABLE_viii[$7 & 0]($4, -3007, 0); //@line 22244
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 233; //@line 22247
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 22248
  HEAP32[$8 >> 2] = $2; //@line 22249
  $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 22250
  HEAP32[$9 >> 2] = $4; //@line 22251
  sp = STACKTOP; //@line 22252
  return;
 }
 ___async_unwind = 0; //@line 22255
 HEAP32[$ReallocAsyncCtx2 >> 2] = 233; //@line 22256
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 22257
 HEAP32[$8 >> 2] = $2; //@line 22258
 $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 22259
 HEAP32[$9 >> 2] = $4; //@line 22260
 sp = STACKTOP; //@line 22261
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14139
 STACKTOP = STACKTOP + 16 | 0; //@line 14140
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14140
 $1 = sp; //@line 14141
 HEAP32[$1 >> 2] = $varargs; //@line 14142
 $2 = HEAP32[187] | 0; //@line 14143
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14144
 _vfprintf($2, $0, $1) | 0; //@line 14145
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 330; //@line 14148
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14150
  sp = STACKTOP; //@line 14151
  STACKTOP = sp; //@line 14152
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14154
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14155
 _fputc(10, $2) | 0; //@line 14156
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 331; //@line 14159
  sp = STACKTOP; //@line 14160
  STACKTOP = sp; //@line 14161
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14163
  _abort(); //@line 14164
 }
}
function __ZN9UDPSocketC2I17EthernetInterfaceEEPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13405
 __ZN6SocketC2Ev($0); //@line 13406
 HEAP32[$0 >> 2] = 592; //@line 13407
 HEAP32[$0 + 52 >> 2] = 0; //@line 13409
 $5 = HEAP32[(HEAP32[$1 >> 2] | 0) + 88 >> 2] | 0; //@line 13412
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13413
 $6 = FUNCTION_TABLE_ii[$5 & 31]($1) | 0; //@line 13414
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 304; //@line 13417
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13419
  sp = STACKTOP; //@line 13420
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13423
 $8 = __Z18nsapi_create_stackP12NetworkStack($6) | 0; //@line 13424
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13425
 __ZN6Socket4openEP12NetworkStack($0, $8) | 0; //@line 13426
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 305; //@line 13429
  sp = STACKTOP; //@line 13430
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13433
  return;
 }
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23339
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23341
 $6 = HEAP32[$0 + 16 >> 2] | 0; //@line 23345
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 23347
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 23349
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$0 = __ZNK13SocketAddress14get_ip_versionEv($2) | 0; //@line 23355
 } else {
  $$0 = 0; //@line 23357
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23359
 $14 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($6, $8, $10, $$0) | 0; //@line 23360
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 23363
  sp = STACKTOP; //@line 23364
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 23368
 ___async_unwind = 0; //@line 23369
 HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 23370
 sp = STACKTOP; //@line 23371
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_100($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23819
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23823
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23825
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23826
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 23830
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 23834
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 23835
 FUNCTION_TABLE_vi[$10 & 511]($6); //@line 23836
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 23839
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 23840
  HEAP32[$11 >> 2] = $4; //@line 23841
  sp = STACKTOP; //@line 23842
  return;
 }
 ___async_unwind = 0; //@line 23845
 HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 23846
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 23847
 HEAP32[$11 >> 2] = $4; //@line 23848
 sp = STACKTOP; //@line 23849
 return;
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 12831
 $23 = $0 + 2 | 0; //@line 12840
 $24 = HEAP8[$23 >> 0] | 0; //@line 12841
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 12844
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 12849
  $$lcssa = $24; //@line 12849
 } else {
  $$01618 = $23; //@line 12851
  $$019 = $27; //@line 12851
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 12853
   $31 = HEAP8[$30 >> 0] | 0; //@line 12854
   $$019 = ($$019 | $31 & 255) << 8; //@line 12857
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 12862
    $$lcssa = $31; //@line 12862
    break;
   } else {
    $$01618 = $30; //@line 12865
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 12872
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_172($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12420
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12424
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12426
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12427
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 12431
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 12435
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 12436
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 12437
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 193; //@line 12440
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 12441
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 12442
  sp = STACKTOP; //@line 12443
  return;
 }
 ___async_unwind = 0; //@line 12446
 HEAP32[$ReallocAsyncCtx4 >> 2] = 193; //@line 12447
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 12448
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 12449
 sp = STACKTOP; //@line 12450
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_25($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17168
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17174
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17176
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 17177
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 17181
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 17185
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17186
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 17187
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 115; //@line 17190
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 17191
  HEAP32[$13 >> 2] = $6; //@line 17192
  sp = STACKTOP; //@line 17193
  return;
 }
 ___async_unwind = 0; //@line 17196
 HEAP32[$ReallocAsyncCtx5 >> 2] = 115; //@line 17197
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 17198
 HEAP32[$13 >> 2] = $6; //@line 17199
 sp = STACKTOP; //@line 17200
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2922
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2925
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2926
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 2927
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 84; //@line 2930
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2932
  sp = STACKTOP; //@line 2933
  return 0; //@line 2934
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2936
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0; //@line 2939
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2940
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 2941
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 85; //@line 2944
  sp = STACKTOP; //@line 2945
  return 0; //@line 2946
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2948
  return $10 | 0; //@line 2949
 }
 return 0; //@line 2951
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12459
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12459
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12460
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 12461
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 12470
    $$016 = $9; //@line 12473
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 12473
   } else {
    $$016 = $0; //@line 12475
    $storemerge = 0; //@line 12475
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 12477
   $$0 = $$016; //@line 12478
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 12482
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 12488
   HEAP32[tempDoublePtr >> 2] = $2; //@line 12491
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 12491
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 12492
  }
 }
 return +$$0;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2887
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2890
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2891
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 2892
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 82; //@line 2895
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2897
  sp = STACKTOP; //@line 2898
  return 0; //@line 2899
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2901
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0; //@line 2904
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2905
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 2906
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 83; //@line 2909
  sp = STACKTOP; //@line 2910
  return 0; //@line 2911
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2913
  return $10 | 0; //@line 2914
 }
 return 0; //@line 2916
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17427
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17433
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17435
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17437
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17439
 $13 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 17441
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 17442
 $14 = HEAP32[$6 >> 2] | 0; //@line 17443
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 17444
 __ZL28nsapi_dns_query_async_deletei($14); //@line 17445
 if (!___async) {
  ___async_unwind = 0; //@line 17448
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 253; //@line 17450
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $13; //@line 17452
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $8; //@line 17454
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $10; //@line 17456
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $12; //@line 17458
 sp = STACKTOP; //@line 17459
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_79($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22047
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22053
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22055
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22057
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22059
 $13 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 22061
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22062
 $14 = HEAP32[$6 >> 2] | 0; //@line 22063
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 22064
 __ZL28nsapi_dns_query_async_deletei($14); //@line 22065
 if (!___async) {
  ___async_unwind = 0; //@line 22068
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 237; //@line 22070
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $13; //@line 22072
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $8; //@line 22074
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $10; //@line 22076
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $12; //@line 22078
 sp = STACKTOP; //@line 22079
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15777
 STACKTOP = STACKTOP + 16 | 0; //@line 15778
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15778
 $3 = sp; //@line 15779
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 15781
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 15784
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15785
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 15786
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 354; //@line 15789
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15791
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15793
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 15795
  sp = STACKTOP; //@line 15796
  STACKTOP = sp; //@line 15797
  return 0; //@line 15797
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15799
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 15803
 }
 STACKTOP = sp; //@line 15805
 return $8 & 1 | 0; //@line 15805
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, sp = 0;
 sp = STACKTOP; //@line 23387
 STACKTOP = STACKTOP + 32 | 0; //@line 23388
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 23388
 $$byval_copy = sp; //@line 23389
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23391
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23393
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23397
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 23398
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 23398
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 23398
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 23398
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 23398
 __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 23399
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) < 0 ? $AsyncRetVal : 0; //@line 23403
 STACKTOP = sp; //@line 23404
 return;
}
function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8.98846567431158e+307; //@line 9376
  $5 = ($1 | 0) > 2046; //@line 9378
  $7 = $1 + -2046 | 0; //@line 9380
  $$0 = $5 ? $3 * 8.98846567431158e+307 : $3; //@line 9385
  $$020 = $5 ? ($7 | 0) < 1023 ? $7 : 1023 : $1 + -1023 | 0; //@line 9385
 } else {
  if (($1 | 0) < -1022) {
   $10 = $0 * 2.2250738585072014e-308; //@line 9389
   $12 = ($1 | 0) < -2044; //@line 9391
   $14 = $1 + 2044 | 0; //@line 9393
   $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10; //@line 9398
   $$020 = $12 ? ($14 | 0) > -1022 ? $14 : -1022 : $1 + 1022 | 0; //@line 9398
  } else {
   $$0 = $0; //@line 9400
   $$020 = $1; //@line 9400
  }
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0; //@line 9404
 $18 = tempRet0; //@line 9405
 HEAP32[tempDoublePtr >> 2] = $17; //@line 9406
 HEAP32[tempDoublePtr + 4 >> 2] = $18; //@line 9406
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 17667
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17669
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17671
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17673
 $9 = $2 + 12 | 0; //@line 17677
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 17678
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 17679
 $10 = _equeue_alloc($6, 16) | 0; //@line 17680
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 17684
  ___async_unwind = 0; //@line 17685
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 100; //@line 17687
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $9; //@line 17689
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 17691
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $6; //@line 17693
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $2; //@line 17695
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $9; //@line 17697
 sp = STACKTOP; //@line 17698
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12265
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12273
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12275
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12277
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12279
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12281
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12283
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12285
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 12296
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 12297
 HEAP32[$10 >> 2] = 0; //@line 12298
 HEAP32[$12 >> 2] = 0; //@line 12299
 HEAP32[$14 >> 2] = 0; //@line 12300
 HEAP32[$2 >> 2] = 0; //@line 12301
 $33 = HEAP32[$16 >> 2] | 0; //@line 12302
 HEAP32[$16 >> 2] = $33 | $18; //@line 12307
 if ($20 | 0) {
  ___unlockfile($22); //@line 12310
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 12313
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb_21($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16880
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16886
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16887
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 16888
 if (!$$pre$i$i) {
  HEAP32[___async_retval >> 2] = 0; //@line 16892
  return;
 }
 $10 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 16897
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 16898
 FUNCTION_TABLE_vi[$10 & 511]($6); //@line 16899
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 266; //@line 16902
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 16903
  HEAP32[$11 >> 2] = $6; //@line 16904
  sp = STACKTOP; //@line 16905
  return;
 }
 ___async_unwind = 0; //@line 16908
 HEAP32[$ReallocAsyncCtx3 >> 2] = 266; //@line 16909
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 16910
 HEAP32[$11 >> 2] = $6; //@line 16911
 sp = STACKTOP; //@line 16912
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14662
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14668
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 14671
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 14674
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14675
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 14676
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 336; //@line 14679
    sp = STACKTOP; //@line 14680
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14683
    break;
   }
  }
 } while (0);
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_146($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4883
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4885
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4887
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4889
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 20 >> 2] = $AsyncRetVal; //@line 4891
 _strcpy($AsyncRetVal, $4) | 0; //@line 4892
 $11 = _emscripten_asm_const_i(8) | 0; //@line 4893
 $13 = (($11 | 0) < 0) << 31 >> 31; //@line 4895
 $14 = ___muldi3($6 | 0, 0, 1e3, 0) | 0; //@line 4896
 $16 = _i64Add($14 | 0, tempRet0 | 0, $11 | 0, $13 | 0) | 0; //@line 4898
 $18 = HEAP32[$8 >> 2] | 0; //@line 4900
 $20 = $18 + 24 | 0; //@line 4902
 HEAP32[$20 >> 2] = $16; //@line 4904
 HEAP32[$20 + 4 >> 2] = tempRet0; //@line 4907
 $25 = $18 + 32 | 0; //@line 4909
 HEAP32[$25 >> 2] = $11; //@line 4911
 HEAP32[$25 + 4 >> 2] = $13; //@line 4914
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_84($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22195
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22197
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22199
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22201
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22203
 $9 = HEAP32[$2 >> 2] | 0; //@line 22204
 if (!$9) {
  _free($6); //@line 22207
  return;
 }
 $11 = HEAP32[$9 >> 2] | 0; //@line 22210
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22211
 FUNCTION_TABLE_viii[$11 & 0]($4, -3019, 0); //@line 22212
 if (!___async) {
  ___async_unwind = 0; //@line 22215
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 239; //@line 22217
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 22219
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 22221
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 22223
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 22225
 sp = STACKTOP; //@line 22226
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_143($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4748
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4756
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4758
 $11 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 4759
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 84 >> 2] | 0; //@line 4762
 $15 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 4763
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 4764
 FUNCTION_TABLE_viiii[$14 & 7]($11, $15, 123, $8); //@line 4765
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 124; //@line 4768
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 4769
  HEAP32[$16 >> 2] = $10; //@line 4770
  sp = STACKTOP; //@line 4771
  return;
 }
 ___async_unwind = 0; //@line 4774
 HEAP32[$ReallocAsyncCtx6 >> 2] = 124; //@line 4775
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 4776
 HEAP32[$16 >> 2] = $10; //@line 4777
 sp = STACKTOP; //@line 4778
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_188($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13759
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13765
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13767
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 13768
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 13772
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 13776
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13777
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 13778
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 13781
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 13782
  HEAP32[$13 >> 2] = $6; //@line 13783
  sp = STACKTOP; //@line 13784
  return;
 }
 ___async_unwind = 0; //@line 13787
 HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 13788
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 13789
 HEAP32[$13 >> 2] = $6; //@line 13790
 sp = STACKTOP; //@line 13791
 return;
}
function _mbed_vtracef__async_cb_110($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 869
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 873
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 878
 $$pre = HEAP32[132] | 0; //@line 879
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 880
 FUNCTION_TABLE_v[$$pre & 7](); //@line 881
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 72; //@line 884
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 885
  HEAP32[$6 >> 2] = $4; //@line 886
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 887
  HEAP32[$7 >> 2] = $5; //@line 888
  sp = STACKTOP; //@line 889
  return;
 }
 ___async_unwind = 0; //@line 892
 HEAP32[$ReallocAsyncCtx9 >> 2] = 72; //@line 893
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 894
 HEAP32[$6 >> 2] = $4; //@line 895
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 896
 HEAP32[$7 >> 2] = $5; //@line 897
 sp = STACKTOP; //@line 898
 return;
}
function _mbed_vtracef__async_cb_109($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 836
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 838
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 843
 $$pre = HEAP32[132] | 0; //@line 844
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 845
 FUNCTION_TABLE_v[$$pre & 7](); //@line 846
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 72; //@line 849
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 850
  HEAP32[$5 >> 2] = $2; //@line 851
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 852
  HEAP32[$6 >> 2] = $4; //@line 853
  sp = STACKTOP; //@line 854
  return;
 }
 ___async_unwind = 0; //@line 857
 HEAP32[$ReallocAsyncCtx9 >> 2] = 72; //@line 858
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 859
 HEAP32[$5 >> 2] = $2; //@line 860
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 861
 HEAP32[$6 >> 2] = $4; //@line 862
 sp = STACKTOP; //@line 863
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15661
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 15663
 $8 = $7 >> 8; //@line 15664
 if (!($7 & 1)) {
  $$0 = $8; //@line 15668
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 15673
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 15675
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 15678
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15683
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 15684
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 352; //@line 15687
  sp = STACKTOP; //@line 15688
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15691
  return;
 }
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_131($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2715
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2719
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2721
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2723
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 2725
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 2726
 FUNCTION_TABLE_viii[$9 & 0]($4, 0, $6); //@line 2727
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 89; //@line 2730
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 2731
  HEAP32[$10 >> 2] = $8; //@line 2732
  sp = STACKTOP; //@line 2733
  return;
 }
 ___async_unwind = 0; //@line 2736
 HEAP32[$ReallocAsyncCtx >> 2] = 89; //@line 2737
 $10 = $ReallocAsyncCtx + 4 | 0; //@line 2738
 HEAP32[$10 >> 2] = $8; //@line 2739
 sp = STACKTOP; //@line 2740
 return;
}
function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $2 = 0, $4 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13885
 $$ = ($0 | 0) == 0 ? 1 : $0; //@line 13887
 while (1) {
  $2 = _malloc($$) | 0; //@line 13889
  if ($2 | 0) {
   $$lcssa = $2; //@line 13892
   label = 7; //@line 13893
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0; //@line 13896
  if (!$4) {
   $$lcssa = 0; //@line 13899
   label = 7; //@line 13900
   break;
  }
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13903
  FUNCTION_TABLE_v[$4 & 7](); //@line 13904
  if (___async) {
   label = 5; //@line 13907
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13910
 }
 if ((label | 0) == 5) {
  HEAP32[$AsyncCtx >> 2] = 324; //@line 13913
  HEAP32[$AsyncCtx + 4 >> 2] = $$; //@line 13915
  sp = STACKTOP; //@line 13916
  return 0; //@line 13917
 } else if ((label | 0) == 7) {
  return $$lcssa | 0; //@line 13920
 }
 return 0; //@line 13922
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14831
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14837
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 14840
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 14843
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14844
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 14845
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 339; //@line 14848
    sp = STACKTOP; //@line 14849
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14852
    break;
   }
  }
 } while (0);
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_64($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19974
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19976
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19984
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19986
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19988
 _free(HEAP32[$0 + 16 >> 2] | 0); //@line 19989
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 19990
 $15 = __ZN6Socket5closeEv($10) | 0; //@line 19991
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 19995
  ___async_unwind = 0; //@line 19996
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 19998
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 20000
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $12; //@line 20002
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $14; //@line 20004
 sp = STACKTOP; //@line 20005
 return;
}
function _mbed_error_vfprintf__async_cb_90($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22854
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 22856
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22858
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22860
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22862
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22864
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 22866
 _serial_putc(6724, $2 << 24 >> 24); //@line 22867
 if (!___async) {
  ___async_unwind = 0; //@line 22870
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 22872
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 22874
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 22876
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 22878
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 22880
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 22882
 sp = STACKTOP; //@line 22883
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15703
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 15705
 $7 = $6 >> 8; //@line 15706
 if (!($6 & 1)) {
  $$0 = $7; //@line 15710
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 15715
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 15717
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 15720
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15725
 FUNCTION_TABLE_viiiii[$16 & 3]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 15726
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 353; //@line 15729
  sp = STACKTOP; //@line 15730
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15733
  return;
 }
}
function __ZN6Socket5closeEv__async_cb_184($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13440
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13444
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13446
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 13447
 $8 = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0; //@line 13450
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 13451
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 13452
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 130; //@line 13455
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 13456
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 13457
  sp = STACKTOP; //@line 13458
  return;
 }
 ___async_unwind = 0; //@line 13461
 HEAP32[$ReallocAsyncCtx3 >> 2] = 130; //@line 13462
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 13463
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 13464
 sp = STACKTOP; //@line 13465
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_45($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 18365
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18371
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18373
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18375
 $11 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 18377
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18378
 $12 = HEAP32[$6 >> 2] | 0; //@line 18379
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 18380
 __ZL28nsapi_dns_query_async_deletei($12); //@line 18381
 if (!___async) {
  ___async_unwind = 0; //@line 18384
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 208; //@line 18386
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $11; //@line 18388
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $8; //@line 18390
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $10; //@line 18392
 sp = STACKTOP; //@line 18393
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16470
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16472
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16474
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16476
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16478
 $9 = HEAP32[HEAP32[$AsyncRetVal >> 2] >> 2] | 0; //@line 16480
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16481
 $10 = FUNCTION_TABLE_iiiii[$9 & 15]($AsyncRetVal, $2, $4, $6) | 0; //@line 16482
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 77; //@line 16485
  sp = STACKTOP; //@line 16486
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 16490
 ___async_unwind = 0; //@line 16491
 HEAP32[$ReallocAsyncCtx2 >> 2] = 77; //@line 16492
 sp = STACKTOP; //@line 16493
 return;
}
function ___dynamic_cast__async_cb_148($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4970
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4972
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4974
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4980
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 4995
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 5011
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 5016
    break;
   }
  default:
   {
    $$0 = 0; //@line 5020
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 5025
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15618
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 15620
 $6 = $5 >> 8; //@line 15621
 if (!($5 & 1)) {
  $$0 = $6; //@line 15625
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 15630
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 15632
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 15635
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15640
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 15641
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 351; //@line 15644
  sp = STACKTOP; //@line 15645
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15648
  return;
 }
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_165($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12111
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12115
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12117
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12119
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12121
 $13 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 116 >> 2] | 0; //@line 12124
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 12125
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($4, $6, $8, $10) | 0; //@line 12126
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 12129
  sp = STACKTOP; //@line 12130
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 12134
 ___async_unwind = 0; //@line 12135
 HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 12136
 sp = STACKTOP; //@line 12137
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_35($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17765
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17769
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17771
 $7 = $4 + 12 | 0; //@line 17773
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 17774
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 17775
 $8 = _equeue_alloc($6, 16) | 0; //@line 17776
 if (!___async) {
  HEAP32[___async_retval >> 2] = $8; //@line 17780
  ___async_unwind = 0; //@line 17781
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 107; //@line 17783
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $7; //@line 17785
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $6; //@line 17787
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $4; //@line 17789
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $7; //@line 17791
 sp = STACKTOP; //@line 17792
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_204($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17310
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17314
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17316
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17318
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17320
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 17322
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 17323
 FUNCTION_TABLE_viii[$11 & 0]($4, 0, $6); //@line 17324
 if (!___async) {
  ___async_unwind = 0; //@line 17327
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 158; //@line 17329
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $8; //@line 17331
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $10; //@line 17333
 sp = STACKTOP; //@line 17334
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 11457
 STACKTOP = STACKTOP + 256 | 0; //@line 11458
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 11458
 $5 = sp; //@line 11459
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 11465
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 11469
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 11472
   $$011 = $9; //@line 11473
   do {
    _out_670($0, $5, 256); //@line 11475
    $$011 = $$011 + -256 | 0; //@line 11476
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 11485
  } else {
   $$0$lcssa = $9; //@line 11487
  }
  _out_670($0, $5, $$0$lcssa); //@line 11489
 }
 STACKTOP = sp; //@line 11491
 return;
}
function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0; //@line 9750
 $3 = HEAP8[$1 >> 0] | 0; //@line 9752
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 9756
 $7 = $0 + 20 | 0; //@line 9757
 $9 = $0 + 28 | 0; //@line 9759
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0; //@line 9765
 }
 HEAP32[$0 + 16 >> 2] = 0; //@line 9768
 HEAP32[$9 >> 2] = 0; //@line 9769
 HEAP32[$7 >> 2] = 0; //@line 9770
 $15 = HEAP32[$0 >> 2] | 0; //@line 9771
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0; //@line 9779
  HEAP32[$0 + 8 >> 2] = $23; //@line 9781
  HEAP32[$0 + 4 >> 2] = $23; //@line 9783
  $$0 = $15 << 27 >> 31; //@line 9786
 } else {
  HEAP32[$0 >> 2] = $15 | 32; //@line 9789
  $$0 = -1; //@line 9790
 }
 return $$0 | 0; //@line 9792
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_168($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12231
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12233
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12235
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12237
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12239
 $11 = HEAP32[(HEAP32[$2 >> 2] | 0) + 116 >> 2] | 0; //@line 12242
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 12243
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($2, $4, $6, $8) | 0; //@line 12244
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 40; //@line 12247
  sp = STACKTOP; //@line 12248
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 12252
 ___async_unwind = 0; //@line 12253
 HEAP32[$ReallocAsyncCtx2 >> 2] = 40; //@line 12254
 sp = STACKTOP; //@line 12255
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_46($0) {
 $0 = $0 | 0;
 var $$pr$i72 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18399
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18403
 $$pr$i72 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18404
 if (!$$pr$i72) {
  return;
 }
 $7 = HEAP32[$$pr$i72 + 8 >> 2] | 0; //@line 18410
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 18411
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 18412
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 211; //@line 18415
  $8 = $ReallocAsyncCtx7 + 4 | 0; //@line 18416
  HEAP32[$8 >> 2] = $4; //@line 18417
  sp = STACKTOP; //@line 18418
  return;
 }
 ___async_unwind = 0; //@line 18421
 HEAP32[$ReallocAsyncCtx7 >> 2] = 211; //@line 18422
 $8 = $ReallocAsyncCtx7 + 4 | 0; //@line 18423
 HEAP32[$8 >> 2] = $4; //@line 18424
 sp = STACKTOP; //@line 18425
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_76($0) {
 $0 = $0 | 0;
 var $$pr$i52 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21921
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21925
 $$pr$i52 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21926
 if (!$$pr$i52) {
  return;
 }
 $7 = HEAP32[$$pr$i52 + 8 >> 2] | 0; //@line 21932
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 21933
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 21934
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 234; //@line 21937
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 21938
  HEAP32[$8 >> 2] = $4; //@line 21939
  sp = STACKTOP; //@line 21940
  return;
 }
 ___async_unwind = 0; //@line 21943
 HEAP32[$ReallocAsyncCtx3 >> 2] = 234; //@line 21944
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 21945
 HEAP32[$8 >> 2] = $4; //@line 21946
 sp = STACKTOP; //@line 21947
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 720
 $3 = HEAP32[$1 >> 2] | 0; //@line 721
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 723
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0$i = -3012; //@line 729
  return $$0$i | 0; //@line 730
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 732
 _wait_ms(1); //@line 733
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 47; //@line 736
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 738
  sp = STACKTOP; //@line 739
  return 0; //@line 740
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 742
 HEAP8[$1 + 8 >> 0] = 1; //@line 744
 $$0$i = 0; //@line 745
 return $$0$i | 0; //@line 746
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_42($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18245
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18249
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18250
 if (!$$pr$i) {
  return;
 }
 $7 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 18256
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 18257
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 18258
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 205; //@line 18261
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 18262
  HEAP32[$8 >> 2] = $4; //@line 18263
  sp = STACKTOP; //@line 18264
  return;
 }
 ___async_unwind = 0; //@line 18267
 HEAP32[$ReallocAsyncCtx3 >> 2] = 205; //@line 18268
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 18269
 HEAP32[$8 >> 2] = $4; //@line 18270
 sp = STACKTOP; //@line 18271
 return;
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0; //@line 3155
  return $$1 | 0; //@line 3156
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 3161
  $$1 = 0; //@line 3162
  return $$1 | 0; //@line 3163
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0; //@line 3170
 if ($11 | 0) {
  $$1 = $11 + 8 | 0; //@line 3174
  return $$1 | 0; //@line 3175
 }
 $14 = _malloc($1) | 0; //@line 3177
 if (!$14) {
  $$1 = 0; //@line 3180
  return $$1 | 0; //@line 3181
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0; //@line 3184
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 3189
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0; //@line 3192
 _free($0); //@line 3193
 $$1 = $14; //@line 3194
 return $$1 | 0; //@line 3195
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 317
 $3 = HEAP32[$1 >> 2] | 0; //@line 318
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 320
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0 = -3012; //@line 326
  return $$0 | 0; //@line 327
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 329
 _wait_ms(1); //@line 330
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 34; //@line 333
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 335
  sp = STACKTOP; //@line 336
  return 0; //@line 337
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 339
 HEAP8[$1 + 8 >> 0] = 1; //@line 341
 $$0 = 0; //@line 342
 return $$0 | 0; //@line 343
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 12327
 STACKTOP = STACKTOP + 16 | 0; //@line 12328
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12328
 $vararg_buffer = sp; //@line 12329
 HEAP32[$vararg_buffer >> 2] = $0; //@line 12330
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 12332
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 12334
 _mbed_error_printf(2808, $vararg_buffer); //@line 12335
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12336
 _mbed_die(); //@line 12337
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 267; //@line 12340
  sp = STACKTOP; //@line 12341
  STACKTOP = sp; //@line 12342
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12344
  STACKTOP = sp; //@line 12345
  return;
 }
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_82($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 22143
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22145
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22147
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22149
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22151
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 22152
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 22153
 if (!___async) {
  ___async_unwind = 0; //@line 22156
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 238; //@line 22158
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 22160
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 22162
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $6; //@line 22164
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $8; //@line 22166
 sp = STACKTOP; //@line 22167
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_211($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17719
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17721
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17723
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17725
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17727
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 17728
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 17729
 if (!___async) {
  ___async_unwind = 0; //@line 17732
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 254; //@line 17734
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 17736
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 17738
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 17740
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 17742
 sp = STACKTOP; //@line 17743
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4499
 STACKTOP = STACKTOP + 32 | 0; //@line 4500
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4500
 $vararg_buffer = sp; //@line 4501
 $3 = sp + 20 | 0; //@line 4502
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4506
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 4508
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 4510
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 4512
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 4514
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 4519
  $10 = -1; //@line 4520
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 4523
 }
 STACKTOP = sp; //@line 4525
 return $10 | 0; //@line 4525
}
function __ZN12NetworkStack14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 3439
 STACKTOP = STACKTOP + 48 | 0; //@line 3440
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 3440
 $$byval_copy = sp + 20 | 0; //@line 3441
 $2 = sp; //@line 3442
 __ZNK13SocketAddress8get_addrEv($2, $1); //@line 3443
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 3444
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 3444
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 3444
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 3444
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 3444
 $3 = _nsapi_dns_add_server($$byval_copy) | 0; //@line 3445
 STACKTOP = sp; //@line 3446
 return $3 | 0; //@line 3446
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13609
 STACKTOP = STACKTOP + 16 | 0; //@line 13610
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13610
 $1 = sp; //@line 13611
 HEAP32[$1 >> 2] = $varargs; //@line 13612
 $2 = HEAP32[219] | 0; //@line 13613
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13614
 $3 = _vfprintf($2, $0, $1) | 0; //@line 13615
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 320; //@line 13618
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 13620
  sp = STACKTOP; //@line 13621
  STACKTOP = sp; //@line 13622
  return 0; //@line 13622
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13624
  STACKTOP = sp; //@line 13625
  return $3 | 0; //@line 13625
 }
 return 0; //@line 13627
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13336
 STACKTOP = STACKTOP + 16 | 0; //@line 13337
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13337
 $3 = sp; //@line 13338
 HEAP32[$3 >> 2] = $varargs; //@line 13339
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13340
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 13341
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 316; //@line 13344
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 13346
  sp = STACKTOP; //@line 13347
  STACKTOP = sp; //@line 13348
  return 0; //@line 13348
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13350
  STACKTOP = sp; //@line 13351
  return $4 | 0; //@line 13351
 }
 return 0; //@line 13353
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4352
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 4355
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 4357
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 4359
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 4364
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 4369
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4371
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 4372
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 127; //@line 4375
  sp = STACKTOP; //@line 4376
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4379
  return;
 }
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13567
 STACKTOP = STACKTOP + 16 | 0; //@line 13568
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13568
 $2 = sp; //@line 13569
 HEAP32[$2 >> 2] = $varargs; //@line 13570
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13571
 $3 = _vsprintf($0, $1, $2) | 0; //@line 13572
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 318; //@line 13575
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 13577
  sp = STACKTOP; //@line 13578
  STACKTOP = sp; //@line 13579
  return 0; //@line 13579
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13581
  STACKTOP = sp; //@line 13582
  return $3 | 0; //@line 13582
 }
 return 0; //@line 13584
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 14384
 $5 = HEAP32[$4 >> 2] | 0; //@line 14385
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 14389
   HEAP32[$1 + 24 >> 2] = $3; //@line 14391
   HEAP32[$1 + 36 >> 2] = 1; //@line 14393
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 14397
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 14400
    HEAP32[$1 + 24 >> 2] = 2; //@line 14402
    HEAP8[$1 + 54 >> 0] = 1; //@line 14404
    break;
   }
   $10 = $1 + 24 | 0; //@line 14407
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 14411
   }
  }
 } while (0);
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22597
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22599
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22601
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 12 >> 2] | 0; //@line 22604
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22605
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 22606
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 85; //@line 22609
  sp = STACKTOP; //@line 22610
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 22614
 ___async_unwind = 0; //@line 22615
 HEAP32[$ReallocAsyncCtx2 >> 2] = 85; //@line 22616
 sp = STACKTOP; //@line 22617
 return;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21722
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21724
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21726
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 8 >> 2] | 0; //@line 21729
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 21730
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 21731
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 83; //@line 21734
  sp = STACKTOP; //@line 21735
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 21739
 ___async_unwind = 0; //@line 21740
 HEAP32[$ReallocAsyncCtx2 >> 2] = 83; //@line 21741
 sp = STACKTOP; //@line 21742
 return;
}
function _mbed_vtracef__async_cb_108($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 806
 HEAP32[126] = HEAP32[124]; //@line 808
 $2 = HEAP32[132] | 0; //@line 809
 if (!$2) {
  return;
 }
 $4 = HEAP32[133] | 0; //@line 814
 HEAP32[133] = 0; //@line 815
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 816
 FUNCTION_TABLE_v[$2 & 7](); //@line 817
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 820
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 821
  HEAP32[$5 >> 2] = $4; //@line 822
  sp = STACKTOP; //@line 823
  return;
 }
 ___async_unwind = 0; //@line 826
 HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 827
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 828
 HEAP32[$5 >> 2] = $4; //@line 829
 sp = STACKTOP; //@line 830
 return;
}
function _mbed_vtracef__async_cb_105($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 542
 HEAP32[126] = HEAP32[124]; //@line 544
 $2 = HEAP32[132] | 0; //@line 545
 if (!$2) {
  return;
 }
 $4 = HEAP32[133] | 0; //@line 550
 HEAP32[133] = 0; //@line 551
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 552
 FUNCTION_TABLE_v[$2 & 7](); //@line 553
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 556
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 557
  HEAP32[$5 >> 2] = $4; //@line 558
  sp = STACKTOP; //@line 559
  return;
 }
 ___async_unwind = 0; //@line 562
 HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 563
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 564
 HEAP32[$5 >> 2] = $4; //@line 565
 sp = STACKTOP; //@line 566
 return;
}
function _mbed_vtracef__async_cb_104($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 512
 HEAP32[126] = HEAP32[124]; //@line 514
 $2 = HEAP32[132] | 0; //@line 515
 if (!$2) {
  return;
 }
 $4 = HEAP32[133] | 0; //@line 520
 HEAP32[133] = 0; //@line 521
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 522
 FUNCTION_TABLE_v[$2 & 7](); //@line 523
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 526
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 527
  HEAP32[$5 >> 2] = $4; //@line 528
  sp = STACKTOP; //@line 529
  return;
 }
 ___async_unwind = 0; //@line 532
 HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 533
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 534
 HEAP32[$5 >> 2] = $4; //@line 535
 sp = STACKTOP; //@line 536
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1394
 $4 = _equeue_tick() | 0; //@line 1396
 HEAP32[$2 + -4 >> 2] = $1; //@line 1398
 $6 = $2 + -16 | 0; //@line 1399
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 1402
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1403
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 1404
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 57; //@line 1407
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1409
  sp = STACKTOP; //@line 1410
  return 0; //@line 1411
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1413
  _equeue_sema_signal($0 + 48 | 0); //@line 1415
  return $9 | 0; //@line 1416
 }
 return 0; //@line 1418
}
function __ZneRK13SocketAddressS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $5 = 0, label = 0;
 if (__ZNK13SocketAddresscvbEv($0) | 0) {
  label = 3; //@line 5067
 } else {
  if (__ZNK13SocketAddresscvbEv($1) | 0) {
   label = 3; //@line 5071
  } else {
   $$0$i = 1; //@line 5073
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = HEAP32[$0 + 40 >> 2] | 0; //@line 5079
   if (($5 | 0) == (HEAP32[$1 + 40 >> 2] | 0)) {
    $10 = $0 + 44 | 0; //@line 5085
    $11 = $1 + 44 | 0; //@line 5086
    if (($5 | 0) == 1) {
     $$0$i = (_memcmp($10, $11, 4) | 0) == 0; //@line 5090
     break;
    } else {
     $$0$i = (_memcmp($10, $11, 16) | 0) == 0; //@line 5095
     break;
    }
   } else {
    $$0$i = 0; //@line 5099
   }
  }
 } while (0);
 return $$0$i ^ 1 | 0; //@line 5104
}
function __Znwj__async_cb($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $3 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16387
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16389
 $3 = _malloc($2) | 0; //@line 16390
 if (!$3) {
  $5 = __ZSt15get_new_handlerv() | 0; //@line 16393
  if (!$5) {
   $$lcssa = 0; //@line 16396
  } else {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 16398
   FUNCTION_TABLE_v[$5 & 7](); //@line 16399
   if (!___async) {
    ___async_unwind = 0; //@line 16402
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 324; //@line 16404
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 16406
   sp = STACKTOP; //@line 16407
   return;
  }
 } else {
  $$lcssa = $3; //@line 16411
 }
 HEAP32[___async_retval >> 2] = $$lcssa; //@line 16414
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12824
 $2 = HEAP32[219] | 0; //@line 12825
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12826
 _putc($1, $2) | 0; //@line 12827
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 288; //@line 12830
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 12832
  sp = STACKTOP; //@line 12833
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12836
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12837
 _fflush($2) | 0; //@line 12838
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 289; //@line 12841
  sp = STACKTOP; //@line 12842
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12845
  return;
 }
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12337
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12341
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12343
 $7 = $4 + 12 | 0; //@line 12345
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12346
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 12347
 __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(6672, $6, $4) | 0; //@line 12348
 if (!___async) {
  ___async_unwind = 0; //@line 12351
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 189; //@line 12353
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $7; //@line 12355
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 12357
 sp = STACKTOP; //@line 12358
 return;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14934
 STACKTOP = STACKTOP + 16 | 0; //@line 14935
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14935
 $vararg_buffer = sp; //@line 14936
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14937
 FUNCTION_TABLE_v[$0 & 7](); //@line 14938
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 341; //@line 14941
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 14943
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14945
  sp = STACKTOP; //@line 14946
  STACKTOP = sp; //@line 14947
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14949
  _abort_message(6296, $vararg_buffer); //@line 14950
 }
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 4606
 $3 = HEAP8[$1 >> 0] | 0; //@line 4607
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 4612
  $$lcssa8 = $2; //@line 4612
 } else {
  $$011 = $1; //@line 4614
  $$0710 = $0; //@line 4614
  do {
   $$0710 = $$0710 + 1 | 0; //@line 4616
   $$011 = $$011 + 1 | 0; //@line 4617
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 4618
   $9 = HEAP8[$$011 >> 0] | 0; //@line 4619
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 4624
  $$lcssa8 = $8; //@line 4624
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 4634
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 13301
  } else {
   $$01318 = $0; //@line 13303
   $$01417 = $2; //@line 13303
   $$019 = $1; //@line 13303
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 13305
    $5 = HEAP8[$$019 >> 0] | 0; //@line 13306
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 13311
    if (!$$01417) {
     $14 = 0; //@line 13316
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 13319
     $$019 = $$019 + 1 | 0; //@line 13319
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 13325
  }
 } while (0);
 return $14 | 0; //@line 13328
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_173($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12456
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12460
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12461
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 12465
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 12469
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 12470
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 12471
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 190; //@line 12474
  sp = STACKTOP; //@line 12475
  return;
 }
 ___async_unwind = 0; //@line 12478
 HEAP32[$ReallocAsyncCtx2 >> 2] = 190; //@line 12479
 sp = STACKTOP; //@line 12480
 return;
}
function _mbed_die__async_cb_14($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 16290
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16292
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 16294
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 16295
 _wait_ms(150); //@line 16296
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 270; //@line 16299
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 16300
  HEAP32[$4 >> 2] = $2; //@line 16301
  sp = STACKTOP; //@line 16302
  return;
 }
 ___async_unwind = 0; //@line 16305
 HEAP32[$ReallocAsyncCtx14 >> 2] = 270; //@line 16306
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 16307
 HEAP32[$4 >> 2] = $2; //@line 16308
 sp = STACKTOP; //@line 16309
 return;
}
function _mbed_die__async_cb_13($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 16265
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16267
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 16269
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 16270
 _wait_ms(150); //@line 16271
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 271; //@line 16274
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 16275
  HEAP32[$4 >> 2] = $2; //@line 16276
  sp = STACKTOP; //@line 16277
  return;
 }
 ___async_unwind = 0; //@line 16280
 HEAP32[$ReallocAsyncCtx13 >> 2] = 271; //@line 16281
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 16282
 HEAP32[$4 >> 2] = $2; //@line 16283
 sp = STACKTOP; //@line 16284
 return;
}
function _mbed_die__async_cb_12($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 16240
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16242
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 16244
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 16245
 _wait_ms(150); //@line 16246
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 272; //@line 16249
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 16250
  HEAP32[$4 >> 2] = $2; //@line 16251
  sp = STACKTOP; //@line 16252
  return;
 }
 ___async_unwind = 0; //@line 16255
 HEAP32[$ReallocAsyncCtx12 >> 2] = 272; //@line 16256
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 16257
 HEAP32[$4 >> 2] = $2; //@line 16258
 sp = STACKTOP; //@line 16259
 return;
}
function _mbed_die__async_cb_11($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 16215
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16217
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 16219
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 16220
 _wait_ms(150); //@line 16221
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 273; //@line 16224
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 16225
  HEAP32[$4 >> 2] = $2; //@line 16226
  sp = STACKTOP; //@line 16227
  return;
 }
 ___async_unwind = 0; //@line 16230
 HEAP32[$ReallocAsyncCtx11 >> 2] = 273; //@line 16231
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 16232
 HEAP32[$4 >> 2] = $2; //@line 16233
 sp = STACKTOP; //@line 16234
 return;
}
function _mbed_die__async_cb_10($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 16190
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16192
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 16194
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 16195
 _wait_ms(150); //@line 16196
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 274; //@line 16199
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 16200
  HEAP32[$4 >> 2] = $2; //@line 16201
  sp = STACKTOP; //@line 16202
  return;
 }
 ___async_unwind = 0; //@line 16205
 HEAP32[$ReallocAsyncCtx10 >> 2] = 274; //@line 16206
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 16207
 HEAP32[$4 >> 2] = $2; //@line 16208
 sp = STACKTOP; //@line 16209
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1685
 STACKTOP = STACKTOP + 16 | 0; //@line 1686
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1686
 $3 = sp; //@line 1687
 HEAP32[$3 >> 2] = $varargs; //@line 1688
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1689
 _mbed_vtracef($0, $1, $2, $3); //@line 1690
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 60; //@line 1693
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 1695
  sp = STACKTOP; //@line 1696
  STACKTOP = sp; //@line 1697
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1699
  STACKTOP = sp; //@line 1700
  return;
 }
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4558
 STACKTOP = STACKTOP + 32 | 0; //@line 4559
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4559
 $vararg_buffer = sp; //@line 4560
 HEAP32[$0 + 36 >> 2] = 12; //@line 4563
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4571
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 4573
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 4575
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 4580
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 4583
 STACKTOP = sp; //@line 4584
 return $14 | 0; //@line 4584
}
function _mbed_die__async_cb_9($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16165
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16167
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 16169
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 16170
 _wait_ms(150); //@line 16171
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 275; //@line 16174
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 16175
  HEAP32[$4 >> 2] = $2; //@line 16176
  sp = STACKTOP; //@line 16177
  return;
 }
 ___async_unwind = 0; //@line 16180
 HEAP32[$ReallocAsyncCtx9 >> 2] = 275; //@line 16181
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 16182
 HEAP32[$4 >> 2] = $2; //@line 16183
 sp = STACKTOP; //@line 16184
 return;
}
function _mbed_die__async_cb_8($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 16140
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16142
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 16144
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 16145
 _wait_ms(400); //@line 16146
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 276; //@line 16149
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 16150
  HEAP32[$4 >> 2] = $2; //@line 16151
  sp = STACKTOP; //@line 16152
  return;
 }
 ___async_unwind = 0; //@line 16155
 HEAP32[$ReallocAsyncCtx8 >> 2] = 276; //@line 16156
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 16157
 HEAP32[$4 >> 2] = $2; //@line 16158
 sp = STACKTOP; //@line 16159
 return;
}
function _mbed_die__async_cb_7($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16115
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16117
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 16119
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 16120
 _wait_ms(400); //@line 16121
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 277; //@line 16124
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 16125
  HEAP32[$4 >> 2] = $2; //@line 16126
  sp = STACKTOP; //@line 16127
  return;
 }
 ___async_unwind = 0; //@line 16130
 HEAP32[$ReallocAsyncCtx7 >> 2] = 277; //@line 16131
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 16132
 HEAP32[$4 >> 2] = $2; //@line 16133
 sp = STACKTOP; //@line 16134
 return;
}
function _mbed_die__async_cb_6($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16090
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16092
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 16094
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 16095
 _wait_ms(400); //@line 16096
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 278; //@line 16099
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 16100
  HEAP32[$4 >> 2] = $2; //@line 16101
  sp = STACKTOP; //@line 16102
  return;
 }
 ___async_unwind = 0; //@line 16105
 HEAP32[$ReallocAsyncCtx6 >> 2] = 278; //@line 16106
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 16107
 HEAP32[$4 >> 2] = $2; //@line 16108
 sp = STACKTOP; //@line 16109
 return;
}
function _mbed_die__async_cb_5($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16065
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16067
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 16069
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 16070
 _wait_ms(400); //@line 16071
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 279; //@line 16074
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 16075
  HEAP32[$4 >> 2] = $2; //@line 16076
  sp = STACKTOP; //@line 16077
  return;
 }
 ___async_unwind = 0; //@line 16080
 HEAP32[$ReallocAsyncCtx5 >> 2] = 279; //@line 16081
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 16082
 HEAP32[$4 >> 2] = $2; //@line 16083
 sp = STACKTOP; //@line 16084
 return;
}
function _mbed_die__async_cb_4($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16040
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16042
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 16044
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 16045
 _wait_ms(400); //@line 16046
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 280; //@line 16049
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 16050
  HEAP32[$4 >> 2] = $2; //@line 16051
  sp = STACKTOP; //@line 16052
  return;
 }
 ___async_unwind = 0; //@line 16055
 HEAP32[$ReallocAsyncCtx4 >> 2] = 280; //@line 16056
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 16057
 HEAP32[$4 >> 2] = $2; //@line 16058
 sp = STACKTOP; //@line 16059
 return;
}
function _mbed_die__async_cb_3($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16015
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16017
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 16019
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 16020
 _wait_ms(400); //@line 16021
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 16024
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 16025
  HEAP32[$4 >> 2] = $2; //@line 16026
  sp = STACKTOP; //@line 16027
  return;
 }
 ___async_unwind = 0; //@line 16030
 HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 16031
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 16032
 HEAP32[$4 >> 2] = $2; //@line 16033
 sp = STACKTOP; //@line 16034
 return;
}
function _mbed_die__async_cb_2($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15990
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15992
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15994
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 15995
 _wait_ms(400); //@line 15996
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 15999
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 16000
  HEAP32[$4 >> 2] = $2; //@line 16001
  sp = STACKTOP; //@line 16002
  return;
 }
 ___async_unwind = 0; //@line 16005
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 16006
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 16007
 HEAP32[$4 >> 2] = $2; //@line 16008
 sp = STACKTOP; //@line 16009
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_54($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 19001
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19003
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19005
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19007
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 19008
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 19009
 if (!___async) {
  ___async_unwind = 0; //@line 19012
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 209; //@line 19014
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 19016
 HEAP32[$ReallocAsyncCtx16 + 8 >> 2] = $4; //@line 19018
 HEAP32[$ReallocAsyncCtx16 + 12 >> 2] = $6; //@line 19020
 sp = STACKTOP; //@line 19021
 return;
}
function _mbed_die__async_cb_1($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15965
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15967
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15969
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 15970
 _wait_ms(400); //@line 15971
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 283; //@line 15974
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 15975
  HEAP32[$4 >> 2] = $2; //@line 15976
  sp = STACKTOP; //@line 15977
  return;
 }
 ___async_unwind = 0; //@line 15980
 HEAP32[$ReallocAsyncCtx >> 2] = 283; //@line 15981
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 15982
 HEAP32[$4 >> 2] = $2; //@line 15983
 sp = STACKTOP; //@line 15984
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12655
 STACKTOP = STACKTOP + 16 | 0; //@line 12656
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12656
 $1 = sp; //@line 12657
 HEAP32[$1 >> 2] = $varargs; //@line 12658
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12659
 _mbed_error_vfprintf($0, $1); //@line 12660
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 284; //@line 12663
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12665
  sp = STACKTOP; //@line 12666
  STACKTOP = sp; //@line 12667
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12669
  STACKTOP = sp; //@line 12670
  return;
 }
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 788
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 791
 if (($6 | 0) < 0) {
  $$0$i = -3001; //@line 794
  return $$0$i | 0; //@line 795
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 797
 _wait_ms(1); //@line 798
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 801
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 803
  sp = STACKTOP; //@line 804
  return 0; //@line 805
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 807
 $$0$i = $6; //@line 808
 return $$0$i | 0; //@line 809
}
function _store_int_728($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do {
  if ($0 | 0) {
   switch ($1 | 0) {
   case -2:
    {
     HEAP8[$0 >> 0] = $2; //@line 6719
     break L1;
     break;
    }
   case -1:
    {
     HEAP16[$0 >> 1] = $2; //@line 6725
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = $2; //@line 6730
     break L1;
     break;
    }
   case 1:
    {
     HEAP32[$0 >> 2] = $2; //@line 6735
     break L1;
     break;
    }
   case 3:
    {
     $7 = $0; //@line 6740
     HEAP32[$7 >> 2] = $2; //@line 6742
     HEAP32[$7 + 4 >> 2] = $3; //@line 6745
     break L1;
     break;
    }
   default:
    {
     break L1;
    }
   }
  }
 } while (0);
 return;
}
function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 5596
 STACKTOP = STACKTOP + 128 | 0; //@line 5597
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 5597
 $3 = sp; //@line 5598
 dest = $3; //@line 5599
 stop = dest + 124 | 0; //@line 5599
 do {
  HEAP32[dest >> 2] = 0; //@line 5599
  dest = dest + 4 | 0; //@line 5599
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 17; //@line 5601
 HEAP32[$3 + 44 >> 2] = $0; //@line 5603
 HEAP32[$3 + 76 >> 2] = -1; //@line 5605
 HEAP32[$3 + 84 >> 2] = $0; //@line 5607
 $8 = _vfscanf($3, $1, $2) | 0; //@line 5608
 STACKTOP = sp; //@line 5609
 return $8 | 0; //@line 5609
}
function __ZN17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 385
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 388
 if (($6 | 0) < 0) {
  $$0 = -3001; //@line 391
  return $$0 | 0; //@line 392
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 394
 _wait_ms(1); //@line 395
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 36; //@line 398
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 400
  sp = STACKTOP; //@line 401
  return 0; //@line 402
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 404
 $$0 = $6; //@line 405
 return $$0 | 0; //@line 406
}
function __ZThn4_N17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 674
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 676
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 677
 _wait_ms(1); //@line 678
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 46; //@line 681
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 683
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 685
  sp = STACKTOP; //@line 686
  return 0; //@line 687
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 689
 HEAP8[$1 + 8 >> 0] = 0; //@line 691
 if (!$1) {
  return $3 | 0; //@line 694
 }
 __ZdlPv($1); //@line 696
 return $3 | 0; //@line 697
}
function __ZN17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 271
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 273
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 274
 _wait_ms(1); //@line 275
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 33; //@line 278
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 280
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 282
  sp = STACKTOP; //@line 283
  return 0; //@line 284
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 286
 HEAP8[$1 + 8 >> 0] = 0; //@line 288
 if (!$1) {
  return $3 | 0; //@line 291
 }
 __ZdlPv($1); //@line 293
 return $3 | 0; //@line 294
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_61($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19628
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19632
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19633
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 19639
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 19640
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 19641
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 229; //@line 19644
  sp = STACKTOP; //@line 19645
  return;
 }
 ___async_unwind = 0; //@line 19648
 HEAP32[$ReallocAsyncCtx3 >> 2] = 229; //@line 19649
 sp = STACKTOP; //@line 19650
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_27($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17269
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17273
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17274
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 17280
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 17281
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 17282
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 17285
  sp = STACKTOP; //@line 17286
  return;
 }
 ___async_unwind = 0; //@line 17289
 HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 17290
 sp = STACKTOP; //@line 17291
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 11318
 } else {
  $$056 = $2; //@line 11320
  $15 = $1; //@line 11320
  $8 = $0; //@line 11320
  while (1) {
   $14 = $$056 + -1 | 0; //@line 11328
   HEAP8[$14 >> 0] = HEAPU8[3959 + ($8 & 15) >> 0] | 0 | $3; //@line 11329
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 11330
   $15 = tempRet0; //@line 11331
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 11336
    break;
   } else {
    $$056 = $14; //@line 11339
   }
  }
 }
 return $$05$lcssa | 0; //@line 11343
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 4740
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 4742
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 4748
  $11 = ___fwritex($0, $4, $3) | 0; //@line 4749
  if ($phitmp) {
   $13 = $11; //@line 4751
  } else {
   ___unlockfile($3); //@line 4753
   $13 = $11; //@line 4754
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 4758
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 4762
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 4765
 }
 return $15 | 0; //@line 4767
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 457
 newDynamicTop = oldDynamicTop + increment | 0; //@line 458
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 462
  ___setErrNo(12); //@line 463
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 467
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 471
   ___setErrNo(12); //@line 472
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 476
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_156($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 8912
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8916
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8917
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 8923
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 8924
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 8925
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 187; //@line 8928
  sp = STACKTOP; //@line 8929
  return;
 }
 ___async_unwind = 0; //@line 8932
 HEAP32[$ReallocAsyncCtx9 >> 2] = 187; //@line 8933
 sp = STACKTOP; //@line 8934
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 14899
 $0 = ___cxa_get_globals_fast() | 0; //@line 14900
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 14903
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 14907
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 14919
    _emscripten_alloc_async_context(4, sp) | 0; //@line 14920
    __ZSt11__terminatePFvvE($16); //@line 14921
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 14926
 _emscripten_alloc_async_context(4, sp) | 0; //@line 14927
 __ZSt11__terminatePFvvE($17); //@line 14928
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_50($0) {
 $0 = $0 | 0;
 var $6 = 0, $7 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 18636
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18642
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 18643
 $7 = HEAP32[$6 >> 2] | 0; //@line 18644
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 18645
 __ZL26nsapi_dns_query_async_sendPv($7); //@line 18646
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 218; //@line 18649
  sp = STACKTOP; //@line 18650
  return;
 }
 ___async_unwind = 0; //@line 18653
 HEAP32[$ReallocAsyncCtx13 >> 2] = 218; //@line 18654
 sp = STACKTOP; //@line 18655
 return;
}
function __ZN9UDPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5197
 $1 = $0 + 52 | 0; //@line 5198
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 5201
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 5204
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 5214
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5215
 FUNCTION_TABLE_vi[$$pre & 511]($0 + 32 | 0); //@line 5216
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 137; //@line 5219
  sp = STACKTOP; //@line 5220
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5223
 return;
}
function __ZN9UDPSocketC2I17EthernetInterfaceEEPT___async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17349
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17351
 $4 = __Z18nsapi_create_stackP12NetworkStack(HEAP32[___async_retval >> 2] | 0) | 0; //@line 17354
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17355
 __ZN6Socket4openEP12NetworkStack($2, $4) | 0; //@line 17356
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 17359
  sp = STACKTOP; //@line 17360
  return;
 }
 ___async_unwind = 0; //@line 17363
 HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 17364
 sp = STACKTOP; //@line 17365
 return;
}
function __ZN6SocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23423
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23425
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 23427
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 23434
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23435
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 23436
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 117; //@line 23439
  sp = STACKTOP; //@line 23440
  return;
 }
 ___async_unwind = 0; //@line 23443
 HEAP32[$ReallocAsyncCtx2 >> 2] = 117; //@line 23444
 sp = STACKTOP; //@line 23445
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 4957
 $3 = HEAP8[$1 >> 0] | 0; //@line 4959
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 4963
 $7 = HEAP32[$0 >> 2] | 0; //@line 4964
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 4969
  HEAP32[$0 + 4 >> 2] = 0; //@line 4971
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 4973
  HEAP32[$0 + 28 >> 2] = $14; //@line 4975
  HEAP32[$0 + 20 >> 2] = $14; //@line 4977
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4983
  $$0 = 0; //@line 4984
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 4987
  $$0 = -1; //@line 4988
 }
 return $$0 | 0; //@line 4990
}
function __ZN9UDPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1278
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1280
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 1282
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 1289
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 1290
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 1291
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 1294
  sp = STACKTOP; //@line 1295
  return;
 }
 ___async_unwind = 0; //@line 1298
 HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 1299
 sp = STACKTOP; //@line 1300
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_206($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17403
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17407
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 17409
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 17410
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 17411
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 75; //@line 17414
  sp = STACKTOP; //@line 17415
  return;
 }
 ___async_unwind = 0; //@line 17418
 HEAP32[$ReallocAsyncCtx >> 2] = 75; //@line 17419
 sp = STACKTOP; //@line 17420
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 766
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 767
 _wait_ms(1); //@line 768
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 48; //@line 771
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 773
  sp = STACKTOP; //@line 774
  return 0; //@line 775
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 777
  return $6 | 0; //@line 778
 }
 return 0; //@line 780
}
function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 84 | 0; //@line 9800
 $4 = HEAP32[$3 >> 2] | 0; //@line 9801
 $5 = $2 + 256 | 0; //@line 9802
 $6 = _memchr($4, 0, $5) | 0; //@line 9803
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0; //@line 9808
 $$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2; //@line 9810
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0; //@line 9811
 HEAP32[$0 + 4 >> 2] = $4 + $$027$; //@line 9814
 $14 = $4 + $$027 | 0; //@line 9815
 HEAP32[$0 + 8 >> 2] = $14; //@line 9817
 HEAP32[$3 >> 2] = $14; //@line 9818
 return $$027$ | 0; //@line 9819
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 12786
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 12789
 $$sink17$sink = $0; //@line 12789
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 12791
  $12 = HEAP8[$11 >> 0] | 0; //@line 12792
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 12800
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 12805
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 12810
}
function __ZN17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 360
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 363
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 364
 _wait_ms(1); //@line 365
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 35; //@line 368
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 370
  sp = STACKTOP; //@line 371
  return 0; //@line 372
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 374
  return $6 | 0; //@line 375
 }
 return 0; //@line 377
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 11355
 } else {
  $$06 = $2; //@line 11357
  $11 = $1; //@line 11357
  $7 = $0; //@line 11357
  while (1) {
   $10 = $$06 + -1 | 0; //@line 11362
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 11363
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 11364
   $11 = tempRet0; //@line 11365
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 11370
    break;
   } else {
    $$06 = $10; //@line 11373
   }
  }
 }
 return $$0$lcssa | 0; //@line 11377
}
function _arg_n_727($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 6674
 STACKTOP = STACKTOP + 16 | 0; //@line 6675
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6675
 $2 = sp; //@line 6676
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2]; //@line 6678
 $$0 = $1; //@line 6679
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 6693
  $10 = HEAP32[$9 >> 2] | 0; //@line 6694
  HEAP32[$2 >> 2] = $9 + 4; //@line 6696
  if ($$0 >>> 0 > 1) {
   $$0 = $$0 + -1 | 0; //@line 6699
  } else {
   break;
  }
 }
 STACKTOP = sp; //@line 6704
 return $10 | 0; //@line 6704
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_55($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 19027
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19029
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19031
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 19032
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 19033
 if (!___async) {
  ___async_unwind = 0; //@line 19036
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 203; //@line 19038
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $2; //@line 19040
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $4; //@line 19042
 sp = STACKTOP; //@line 19043
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_83($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 22173
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22175
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22177
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 22178
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 22179
 if (!___async) {
  ___async_unwind = 0; //@line 22182
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 232; //@line 22184
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 22186
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 22188
 sp = STACKTOP; //@line 22189
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_122($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1951
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1955
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 1957
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 1958
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 1959
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 126; //@line 1962
  sp = STACKTOP; //@line 1963
  return;
 }
 ___async_unwind = 0; //@line 1966
 HEAP32[$ReallocAsyncCtx >> 2] = 126; //@line 1967
 sp = STACKTOP; //@line 1968
 return;
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15810
 do {
  if (!$0) {
   $3 = 0; //@line 15814
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15816
   $2 = ___dynamic_cast($0, 128, 184, 0) | 0; //@line 15817
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 355; //@line 15820
    sp = STACKTOP; //@line 15821
    return 0; //@line 15822
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15824
    $3 = ($2 | 0) != 0 & 1; //@line 15827
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 15832
}
function _invoke_ticker__async_cb_145($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4800
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 4806
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 4807
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 4808
 FUNCTION_TABLE_vi[$5 & 511]($6); //@line 4809
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 291; //@line 4812
  sp = STACKTOP; //@line 4813
  return;
 }
 ___async_unwind = 0; //@line 4816
 HEAP32[$ReallocAsyncCtx >> 2] = 291; //@line 4817
 sp = STACKTOP; //@line 4818
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 10999
 } else {
  $$04 = 0; //@line 11001
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 11004
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 11008
   $12 = $7 + 1 | 0; //@line 11009
   HEAP32[$0 >> 2] = $12; //@line 11010
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 11016
    break;
   } else {
    $$04 = $11; //@line 11019
   }
  }
 }
 return $$0$lcssa | 0; //@line 11023
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 17844
 $y_sroa_0_0_extract_trunc = $b$0; //@line 17845
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 17846
 $1$1 = tempRet0; //@line 17847
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 17849
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11593
 $1 = HEAP32[$0 >> 2] | 0; //@line 11594
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 11596
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11597
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 11598
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 249; //@line 11601
  sp = STACKTOP; //@line 11602
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11605
  return;
 }
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 17829
 $2 = $b & 65535; //@line 17830
 $3 = Math_imul($2, $1) | 0; //@line 17831
 $6 = $a >>> 16; //@line 17832
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 17833
 $11 = $b >>> 16; //@line 17834
 $12 = Math_imul($11, $1) | 0; //@line 17835
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 17836
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10011
 $1 = HEAP32[$0 >> 2] | 0; //@line 10012
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 10014
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10015
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 10016
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 219; //@line 10019
  sp = STACKTOP; //@line 10020
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10023
  return;
 }
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 593
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 595
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 596
 _wait_ms(1); //@line 597
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 43; //@line 600
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 602
  sp = STACKTOP; //@line 603
  return 0; //@line 604
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 606
  return $2 | 0; //@line 607
 }
 return 0; //@line 609
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2675
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 2677
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 2683
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2684
 FUNCTION_TABLE_vi[$5 & 511]($0); //@line 2685
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 73; //@line 2688
  sp = STACKTOP; //@line 2689
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2692
 return;
}
function __ZN6SocketC2Ev($0) {
 $0 = $0 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 556; //@line 4018
 HEAP32[$0 + 4 >> 2] = 0; //@line 4020
 HEAP32[$0 + 8 >> 2] = 0; //@line 4022
 HEAP32[$0 + 12 >> 2] = -1; //@line 4024
 $4 = $0 + 16 | 0; //@line 4025
 HEAP32[$4 >> 2] = 0; //@line 4026
 HEAP32[$4 + 4 >> 2] = 0; //@line 4026
 HEAP32[$4 + 8 >> 2] = 0; //@line 4026
 HEAP32[$4 + 12 >> 2] = 0; //@line 4026
 HEAP32[$4 + 16 >> 2] = 0; //@line 4026
 HEAP32[$4 + 20 >> 2] = 0; //@line 4026
 HEAP32[$4 + 24 >> 2] = 0; //@line 4026
 HEAP32[$4 + 28 >> 2] = 0; //@line 4026
 return;
}
function __ZN17EthernetInterface11get_netmaskEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 103
 $2 = _emscripten_asm_const_ii(2, 0) | 0; //@line 105
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 106
 _wait_ms(1); //@line 107
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 28; //@line 110
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 112
  sp = STACKTOP; //@line 113
  return 0; //@line 114
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 116
  return $2 | 0; //@line 117
 }
 return 0; //@line 119
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 380
  src = src + num | 0; //@line 381
  dest = dest + num | 0; //@line 382
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 384
   src = src - 1 | 0; //@line 385
   num = num - 1 | 0; //@line 386
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 387
  }
  dest = ret; //@line 389
 } else {
  _memcpy(dest, src, num) | 0; //@line 391
 }
 return dest | 0; //@line 393
}
function _mbed_die__async_cb_15($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 16315
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16317
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 16319
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 16320
 _wait_ms(150); //@line 16321
 if (!___async) {
  ___async_unwind = 0; //@line 16324
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 269; //@line 16326
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 16328
 sp = STACKTOP; //@line 16329
 return;
}
function __ZN17EthernetInterface15get_mac_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 61
 $2 = _emscripten_asm_const_ii(0, 0) | 0; //@line 63
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 64
 _wait_ms(1); //@line 65
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 26; //@line 68
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 70
  sp = STACKTOP; //@line 71
  return 0; //@line 72
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 74
  return $2 | 0; //@line 75
 }
 return 0; //@line 77
}
function __ZN17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 82
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 84
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _wait_ms(1); //@line 86
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 27; //@line 89
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 91
  sp = STACKTOP; //@line 92
  return 0; //@line 93
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 95
  return $2 | 0; //@line 96
 }
 return 0; //@line 98
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 15945
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15947
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15949
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 15950
 _wait_ms(150); //@line 15951
 if (!___async) {
  ___async_unwind = 0; //@line 15954
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 268; //@line 15956
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 15958
 sp = STACKTOP; //@line 15959
 return;
}
function ___fflush_unlocked__async_cb_60($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19523
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19525
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19527
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19529
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 19531
 HEAP32[$4 >> 2] = 0; //@line 19532
 HEAP32[$6 >> 2] = 0; //@line 19533
 HEAP32[$8 >> 2] = 0; //@line 19534
 HEAP32[$10 >> 2] = 0; //@line 19535
 HEAP32[___async_retval >> 2] = 0; //@line 19537
 return;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3421
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3422
 $2 = __Z28nsapi_dns_query_async_canceli($1) | 0; //@line 3423
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 98; //@line 3426
  sp = STACKTOP; //@line 3427
  return 0; //@line 3428
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3430
  return $2 | 0; //@line 3431
 }
 return 0; //@line 3433
}
function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 9723
 STACKTOP = STACKTOP + 16 | 0; //@line 9724
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9724
 $1 = sp; //@line 9725
 if (!(___toread($0) | 0)) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 31]($0, $1, 1) | 0) == 1) {
   $$0 = HEAPU8[$1 >> 0] | 0; //@line 9736
  } else {
   $$0 = -1; //@line 9738
  }
 } else {
  $$0 = -1; //@line 9741
 }
 STACKTOP = sp; //@line 9743
 return $$0 | 0; //@line 9743
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13591
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13592
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 13593
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 319; //@line 13596
  sp = STACKTOP; //@line 13597
  return 0; //@line 13598
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13600
  return $3 | 0; //@line 13601
 }
 return 0; //@line 13603
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 133
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 134
 _puts(2231) | 0; //@line 135
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 29; //@line 138
  sp = STACKTOP; //@line 139
  return 0; //@line 140
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 142
  return 0; //@line 143
 }
 return 0; //@line 145
}
function _mbed_vtracef__async_cb_103($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 494
 $1 = HEAP32[130] | 0; //@line 495
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 496
 FUNCTION_TABLE_vi[$1 & 511](2594); //@line 497
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 64; //@line 500
  sp = STACKTOP; //@line 501
  return;
 }
 ___async_unwind = 0; //@line 504
 HEAP32[$ReallocAsyncCtx3 >> 2] = 64; //@line 505
 sp = STACKTOP; //@line 506
 return;
}
function _serial_putc__async_cb_147($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4926
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4928
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 4929
 _fflush($2) | 0; //@line 4930
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 4933
  sp = STACKTOP; //@line 4934
  return;
 }
 ___async_unwind = 0; //@line 4937
 HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 4938
 sp = STACKTOP; //@line 4939
 return;
}
function __ZN13SocketAddressC2E10nsapi_addrt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP8[$0 >> 0] = 0; //@line 4557
 $3 = $0 + 40 | 0; //@line 4558
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2]; //@line 4559
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4559
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4559
 HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 4559
 HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 4559
 HEAP16[$0 + 60 >> 1] = $2; //@line 4561
 return;
}
function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9704
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9704
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9705
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9706
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647; //@line 9710
 HEAP32[tempDoublePtr >> 2] = $2; //@line 9711
 HEAP32[tempDoublePtr + 4 >> 2] = $8; //@line 9711
 return +(+HEAPF64[tempDoublePtr >> 3]);
}
function __ZnwjRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13928
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13929
 $2 = __Znwj($0) | 0; //@line 13930
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 325; //@line 13933
  sp = STACKTOP; //@line 13934
  return 0; //@line 13935
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13937
  return $2 | 0; //@line 13938
 }
 return 0; //@line 13940
}
function __ZnajRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13963
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13964
 $2 = __Znaj($0) | 0; //@line 13965
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 327; //@line 13968
  sp = STACKTOP; //@line 13969
  return 0; //@line 13970
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13972
  return $2 | 0; //@line 13973
 }
 return 0; //@line 13975
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12137
 $1 = HEAP32[$0 >> 2] | 0; //@line 12138
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12139
 FUNCTION_TABLE_v[$1 & 7](); //@line 12140
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 263; //@line 12143
  sp = STACKTOP; //@line 12144
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12147
  return;
 }
}
function _emscripten_async_resume() {
 ___async = 0; //@line 280
 ___async_unwind = 1; //@line 281
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 287
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 291
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 295
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 297
 }
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4369
 STACKTOP = STACKTOP + 16 | 0; //@line 4370
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4370
 $vararg_buffer = sp; //@line 4371
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 4375
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 4377
 STACKTOP = sp; //@line 4378
 return $5 | 0; //@line 4378
}
function __ZN9UDPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5172
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5173
 __ZN9UDPSocketD2Ev($0); //@line 5174
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 136; //@line 5177
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5179
  sp = STACKTOP; //@line 5180
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5183
  __ZdlPv($0); //@line 5184
  return;
 }
}
function __ZN17EthernetInterface8set_dhcpEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 151
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 152
 _puts(2186) | 0; //@line 153
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 30; //@line 156
  sp = STACKTOP; //@line 157
  return 0; //@line 158
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 160
  return 0; //@line 161
 }
 return 0; //@line 163
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 17874
 if ((ret | 0) < 8) return ret | 0; //@line 17875
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 17876
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 17877
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 17878
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 17879
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 17880
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 222
 STACKTOP = STACKTOP + 16 | 0; //@line 223
 $rem = __stackBase__ | 0; //@line 224
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 225
 STACKTOP = __stackBase__; //@line 226
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 227
}
function __Znaj($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13945
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13946
 $1 = __Znwj($0) | 0; //@line 13947
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 326; //@line 13950
  sp = STACKTOP; //@line 13951
  return 0; //@line 13952
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13954
  return $1 | 0; //@line 13955
 }
 return 0; //@line 13957
}
function __ZN13SocketAddress8set_addrE10nsapi_addr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP8[$0 >> 0] = 0; //@line 4569
 $2 = $0 + 40 | 0; //@line 4570
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2]; //@line 4571
 HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4571
 HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4571
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 4571
 HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 4571
 return;
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 14120
 STACKTOP = STACKTOP + 16 | 0; //@line 14121
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14121
 if (!(_pthread_once(7312, 4) | 0)) {
  $3 = _pthread_getspecific(HEAP32[1829] | 0) | 0; //@line 14127
  STACKTOP = sp; //@line 14128
  return $3 | 0; //@line 14128
 } else {
  _abort_message(6144, sp); //@line 14130
 }
 return 0; //@line 14133
}
function __ZThn4_N17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19545
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19547
 HEAP8[$2 + 8 >> 0] = 0; //@line 19549
 if (!$2) {
  $7 = ___async_retval; //@line 19552
  HEAP32[$7 >> 2] = $4; //@line 19553
  return;
 }
 __ZdlPv($2); //@line 19556
 $7 = ___async_retval; //@line 19557
 HEAP32[$7 >> 2] = $4; //@line 19558
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14288
 }
 return;
}
function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 5584
 STACKTOP = STACKTOP + 16 | 0; //@line 5585
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5585
 $2 = sp; //@line 5586
 HEAP32[$2 >> 2] = $varargs; //@line 5587
 $3 = _vsscanf($0, $1, $2) | 0; //@line 5588
 STACKTOP = sp; //@line 5589
 return $3 | 0; //@line 5589
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 13441
 $6 = HEAP32[$5 >> 2] | 0; //@line 13442
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 13443
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 13445
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 13447
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 13450
 return $2 | 0; //@line 13451
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 1100
 HEAP32[$3 >> 2] = 0; //@line 1101
 HEAP32[$3 + 4 >> 2] = 0; //@line 1101
 HEAP32[$3 + 8 >> 2] = 0; //@line 1101
 HEAP32[$3 + 12 >> 2] = 0; //@line 1101
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 1104
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 1107
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22574
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22576
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22577
 _fputc(10, $2) | 0; //@line 22578
 if (!___async) {
  ___async_unwind = 0; //@line 22581
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 331; //@line 22583
 sp = STACKTOP; //@line 22584
 return;
}
function __ZL25default_terminate_handlerv__async_cb_138($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4125
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4127
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4129
 HEAP32[$2 >> 2] = 6005; //@line 4130
 HEAP32[$2 + 4 >> 2] = $4; //@line 4132
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 4134
 _abort_message(5869, $2); //@line 4135
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17364
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 17375
  $$0 = 1; //@line 17376
 } else {
  $$0 = 0; //@line 17378
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 17382
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23585
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 23588
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 23593
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 23596
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 14882
 STACKTOP = STACKTOP + 16 | 0; //@line 14883
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14883
 _free($0); //@line 14885
 if (!(_pthread_setspecific(HEAP32[1829] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 14890
  return;
 } else {
  _abort_message(6243, sp); //@line 14892
 }
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 12803
 HEAP32[$0 >> 2] = $1; //@line 12804
 HEAP32[1680] = 1; //@line 12805
 $4 = $0; //@line 12806
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 12811
 $10 = 6724; //@line 12812
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 12814
 HEAP32[$10 + 4 >> 2] = $9; //@line 12817
 return;
}
function __ZNK13SocketAddress8get_addrEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $1 + 40 | 0; //@line 4821
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 4822
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 4822
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 4822
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 4822
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 4822
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14364
 }
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12907
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12908
 _emscripten_sleep($0 | 0); //@line 12909
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 292; //@line 12912
  sp = STACKTOP; //@line 12913
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12916
  return;
 }
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1666
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1667
 _puts($0) | 0; //@line 1668
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 1671
  sp = STACKTOP; //@line 1672
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1675
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 1633
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 1637
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 1641
   $$0 = 0; //@line 1642
  } else {
   $$0 = $4; //@line 1644
  }
 } else {
  $$0 = $1; //@line 1647
 }
 return $$0 | 0; //@line 1649
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 1596
 STACKTOP = STACKTOP + 16 | 0; //@line 1597
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1597
 $0 = sp; //@line 1598
 _gettimeofday($0 | 0, 0) | 0; //@line 1599
 STACKTOP = sp; //@line 1606
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 1606
}
function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1; //@line 6559
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6561
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 6563
 $7 = $4 - $6 | 0; //@line 6564
 HEAP32[$0 + 108 >> 2] = $7; //@line 6566
 HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($7 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4; //@line 6575
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 14428
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 14432
  }
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 14867
 STACKTOP = STACKTOP + 16 | 0; //@line 14868
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14868
 if (!(_pthread_key_create(7316, 340) | 0)) {
  STACKTOP = sp; //@line 14873
  return;
 } else {
  _abort_message(6193, sp); //@line 14875
 }
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 11614
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 11619
 $8 = $0; //@line 11620
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 11622
 HEAP32[$8 + 4 >> 2] = $7; //@line 11625
 return;
}
function _nsapi_dns_add_server($0) {
 $0 = $0 | 0;
 _memmove(628, 608, 80) | 0; //@line 5484
 HEAP32[152] = HEAP32[$0 >> 2]; //@line 5485
 HEAP32[153] = HEAP32[$0 + 4 >> 2]; //@line 5485
 HEAP32[154] = HEAP32[$0 + 8 >> 2]; //@line 5485
 HEAP32[155] = HEAP32[$0 + 12 >> 2]; //@line 5485
 HEAP32[156] = HEAP32[$0 + 16 >> 2]; //@line 5485
 return 0; //@line 5486
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 256
 HEAP32[new_frame + 4 >> 2] = sp; //@line 258
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 260
 ___async_cur_frame = new_frame; //@line 261
 return ___async_cur_frame + 8 | 0; //@line 262
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 10032
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 10037
 $8 = $0; //@line 10038
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 10040
 HEAP32[$8 + 4 >> 2] = $7; //@line 10043
 return;
}
function __ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = $0 + -4 | 0; //@line 980
 $5 = HEAP32[$1 >> 2] | 0; //@line 981
 HEAP32[$4 + 60 + ($5 << 3) >> 2] = $2; //@line 983
 HEAP32[$4 + 60 + ($5 << 3) + 4 >> 2] = $3; //@line 985
 return;
}
function __ZN17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1986
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1988
 HEAP8[$2 + 8 >> 0] = 0; //@line 1990
 if ($2 | 0) {
  __ZdlPv($2); //@line 1993
 }
 HEAP32[___async_retval >> 2] = $4; //@line 1996
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 3999
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 3999
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 3999
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 16457
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16461
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 16464
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 245
  return low << bits; //@line 246
 }
 tempRet0 = low << bits - 32; //@line 248
 return 0; //@line 249
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 234
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 235
 }
 tempRet0 = 0; //@line 237
 return high >>> bits - 32 | 0; //@line 238
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 4388
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4388
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4388
 return;
}
function __ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = HEAP32[$1 >> 2] | 0; //@line 569
 HEAP32[$0 + 60 + ($4 << 3) >> 2] = $2; //@line 571
 HEAP32[$0 + 60 + ($4 << 3) + 4 >> 2] = $3; //@line 573
 return;
}
function _fflush__async_cb_70($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21630
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 21632
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 21635
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_199($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 16284
 HEAP32[___async_retval >> 2] = -3007; //@line 16286
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23413
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 23415
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 23417
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 17467
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 17470
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 17473
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 16644
 } else {
  $$0 = -1; //@line 16646
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 16649
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 525
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_37($0) {
 $0 = $0 | 0;
 var $$06 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$06 = -3007; //@line 17844
 } else {
  $$06 = 0; //@line 17846
 }
 HEAP32[___async_retval >> 2] = $$06; //@line 17849
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_34($0) {
 $0 = $0 | 0;
 var $$06 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$06 = -3007; //@line 17754
 } else {
  $$06 = 0; //@line 17756
 }
 HEAP32[___async_retval >> 2] = $$06; //@line 17759
 return;
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 5087
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 5093
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 5097
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_202($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 17071
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 574
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17441
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 17442
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 17444
 return;
}
function __ZN12NetworkStack20get_call_in_callbackEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 100; //@line 3504
 HEAP32[$0 + 4 >> 2] = 1; //@line 3506
 HEAP32[$0 + 8 >> 2] = $1; //@line 3508
 HEAP32[$0 + 12 >> 2] = 536; //@line 3509
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23319
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 23320
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 23322
 return;
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 268
 stackRestore(___async_cur_frame | 0); //@line 269
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 270
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 12779
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 12785
 _emscripten_asm_const_iii(10, $0 | 0, $1 | 0) | 0; //@line 12786
 return;
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12440
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12440
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12442
 return $1 | 0; //@line 12443
}
function ___DOUBLE_BITS_563($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9694
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9694
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9696
 return $1 | 0; //@line 9697
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1655
 HEAP8[$0 + 76 >> 0] = 1; //@line 1657
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 1659
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1660
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 17867
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 17868
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 17869
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 4535
  $$0 = -1; //@line 4536
 } else {
  $$0 = $0; //@line 4538
 }
 return $$0 | 0; //@line 4540
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_93($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23142
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 23143
 HEAP32[6700 + ($4 << 2) >> 2] = 0; //@line 23145
 return;
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 518
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_101($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 23859
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23563
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 23564
 HEAP32[___async_retval >> 2] = $4; //@line 23566
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1002
 ___cxa_begin_catch($0 | 0) | 0; //@line 1003
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1004
 __ZSt9terminatev(); //@line 1005
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 567
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 1019
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 15744
 } else {
  HEAP8[$0 >> 0] = 1; //@line 15746
  $$0 = 1; //@line 15747
 }
 return $$0 | 0; //@line 15749
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_26($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 17210
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 13901
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 16434
 HEAP32[___async_retval >> 2] = 0; //@line 16436
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 16519
 HEAP32[___async_retval >> 2] = 0; //@line 16521
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_20($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16825
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_129($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 2577
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 511
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 17859
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 17861
}
function __ZN4mbed16mbed_event_queueEv() {
 if (!(HEAP8[6448] | 0)) {
  if (___cxa_guard_acquire(6448) | 0) {
   __ZN6events10EventQueueC2EjPh(6464, 256, 7324); //@line 1120
  }
 }
 return 6464; //@line 1123
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 560
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_17($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16503
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 11500
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 11503
 }
 return $$0 | 0; //@line 11505
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 5232
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 5237
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_163($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12097
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_96($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 23381
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_208($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17513
 if ($4 | 0) {
  __ZdaPv($4); //@line 17516
 }
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_67($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 21077
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 2006
 return;
}
function _common_write_16_bit($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$1 >> 0] = ($0 & 65535) >>> 8; //@line 2386
 HEAP8[$1 + 1 >> 0] = $0; //@line 2389
 return $1 + 2 | 0; //@line 2390
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_166($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12217
 return;
}
function __ZN17EthernetInterfaceC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 224; //@line 993
 HEAP32[$0 + 4 >> 2] = 368; //@line 994
 _memset($0 + 60 | 0, 0, 800) | 0; //@line 996
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_149($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5069
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 504
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 4727
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 4731
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 214
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 4956
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_88($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22627
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_121($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 1939
 return;
}
function b54(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 719
 return 0; //@line 719
}
function b53(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 716
 return 0; //@line 716
}
function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) {
  $4 = 1; //@line 6903
 } else {
  $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1; //@line 6908
 }
 return $4 | 0; //@line 6910
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_73($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21752
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_171($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 12414
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 275
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 276
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_16($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16381
 return;
}
function __ZN12NetworkStack10getsockoptEPviiS0_Pj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 0](a1 | 0, a2 | 0, a3 | 0); //@line 553
}
function __ZN12NetworkStack10setsockoptEPviiPKvj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_164($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 12105
 return;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1978
 return;
}
function __ZN9UDPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 5230
 HEAP32[$0 >> 2] = 592; //@line 5231
 HEAP32[$0 + 52 >> 2] = 0; //@line 5233
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14967
 __ZdlPv($0); //@line 14968
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_167($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 12225
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14650
 __ZdlPv($0); //@line 14651
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 5223
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 5225
}
function __ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14178
 __ZdlPv($0); //@line 14179
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 17381
 return;
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 13385
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_189($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 13801
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 10985
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 15851
 return;
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 22649
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_74($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 21824
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function b51(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 713
 return 0; //@line 713
}
function b50(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 710
 return 0; //@line 710
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_169($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 12366
 return;
}
function __ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function b229(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 1226
}
function __ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 12157
 return;
}
function __ZN17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 17391
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0; //@line 497
}
function __ZN17EthernetInterface15get_mac_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 18202
 return;
}
function __ZN17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5079
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 14375
}
function __ZN17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16424
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_75($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 21878
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[1830] | 0; //@line 15766
 HEAP32[1830] = $0 + 0; //@line 15768
 return $0 | 0; //@line 15770
}
function __ZN12NetworkStack11setstackoptEiiPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN12NetworkStack11getstackoptEiiPvPj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN17EthernetInterface11get_netmaskEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16619
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[405] | 0; //@line 14957
 HEAP32[405] = $0 + 0; //@line 14959
 return $0 | 0; //@line 14961
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 7](a1 | 0, a2 | 0); //@line 546
}
function __ZnwjRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16629
 return;
}
function __ZnajRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17820
 return;
}
function __ZN6Socket11set_timeoutEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 12 >> 2] = ($1 | 0) > -1 ? $1 : -1; //@line 4480
 return;
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 15839
 return;
}
function b48(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(15); //@line 707
 return 0; //@line 707
}
function b47(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(14); //@line 704
 return 0; //@line 704
}
function b46(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(13); //@line 701
 return 0; //@line 701
}
function b45(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(12); //@line 698
 return 0; //@line 698
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function b44(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 695
 return 0; //@line 695
}
function __ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_98($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b227(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 1223
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 302
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6Socket5closeEv__async_cb_185($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 13475
 return;
}
function __ZN17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 11448
}
function _fflush__async_cb_71($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21645
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb_22($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 16922
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19568
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22639
 return;
}
function _fputc__async_cb_31($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17454
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21764
 return;
}
function _putc__async_cb_95($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 23332
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_144($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 4788
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12NetworkStack14get_dns_serverEiP13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_81($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 8 >> 2] | 0); //@line 22137
 return;
}
function __ZN17EthernetInterface8set_dhcpEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 12153
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5091
 return;
}
function __Znaj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13395
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 31](a1 | 0) | 0; //@line 490
}
function __ZThn4_N17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN13SocketAddress8set_portEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP16[$0 + 60 >> 1] = $1; //@line 4580
 return;
}
function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0; //@line 5618
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(6296, HEAP32[$0 + 4 >> 2] | 0); //@line 17343
}
function b42(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 692
 return 0; //@line 692
}
function b41(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 689
 return 0; //@line 689
}
function b40(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 686
 return 0; //@line 686
}
function b39(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 683
 return 0; //@line 683
}
function b38(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 680
 return 0; //@line 680
}
function b37(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 677
 return 0; //@line 677
}
function b36(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 674
 return 0; //@line 674
}
function b35(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 671
 return 0; //@line 671
}
function b34(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 668
 return 0; //@line 668
}
function b33(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 665
 return 0; //@line 665
}
function b32(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 662
 return 0; //@line 662
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 659
 return 0; //@line 659
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 656
 return 0; //@line 656
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(18); //@line 653
 return 0; //@line 653
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 650
 return 0; //@line 650
}
function _strcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 ___stpcpy($0, $1) | 0; //@line 13458
 return $0 | 0; //@line 13459
}
function __ZN17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function b225(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 1220
}
function b224(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 1217
}
function b223(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 1214
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 511](a1 | 0); //@line 539
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 1582
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 1591
 return;
}
function __ZN9UDPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 12040
 return;
}
function __ZNK13SocketAddress14get_ip_versionEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 40 >> 2] | 0; //@line 4899
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0; //@line 4645
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 12693
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1626
 return;
}
function __ZNK13SocketAddress8get_portEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 60 >> 1] | 0; //@line 4831
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 1613
}
function __ZdlPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdlPv($0); //@line 13989
 return;
}
function __ZdaPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdaPv($0); //@line 14004
 return;
}
function __ZThn4_N17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0 + -4 | 0); //@line 587
 return;
}
function b26(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(15); //@line 647
 return 0; //@line 647
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(14); //@line 644
 return 0; //@line 644
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(13); //@line 641
 return 0; //@line 641
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(12); //@line 638
 return 0; //@line 638
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(11); //@line 635
 return 0; //@line 635
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(10); //@line 632
 return 0; //@line 632
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(9); //@line 629
 return 0; //@line 629
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 626
 return 0; //@line 626
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 12490
 return;
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1619
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 0]() | 0; //@line 483
}
function b221(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 1211
}
function __ZN16NetworkInterface12set_blockingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterface9get_stackEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 212
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_62($0) {
 $0 = $0 | 0;
 return;
}
function __Z18nsapi_create_stackP12NetworkStack($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 4012
}
function __ZN9UDPSocketC2I17EthernetInterfaceEEPT___async_cb_205($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12NetworkStack19onboardNetworkStackEv($0) {
 $0 = $0 | 0;
 return 0; //@line 615
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_28($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK16NetworkInterface21get_connection_statusEv($0) {
 $0 = $0 | 0;
 return -3002;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7](); //@line 532
}
function __ZN16NetworkInterface13wifiInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 187
}
function __ZN16NetworkInterface13meshInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 193
}
function __ZN16NetworkInterface13emacInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 205
}
function __ZN17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 55
 return;
}
function __ZN17EthernetInterface11get_gatewayEv($0) {
 $0 = $0 | 0;
 return 0; //@line 125
}
function __ZN16NetworkInterface12ethInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 181
}
function __ZN16NetworkInterface12cellularBaseEv($0) {
 $0 = $0 | 0;
 return 0; //@line 199
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 4593
}
function __ZN17EthernetInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 175
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_157($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_53($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_47($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_43($0) {
 $0 = $0 | 0;
 return;
}
function b17(p0) {
 p0 = p0 | 0;
 nullFunc_ii(31); //@line 623
 return 0; //@line 623
}
function b16(p0) {
 p0 = p0 | 0;
 nullFunc_ii(30); //@line 620
 return 0; //@line 620
}
function b15(p0) {
 p0 = p0 | 0;
 nullFunc_ii(29); //@line 617
 return 0; //@line 617
}
function b14(p0) {
 p0 = p0 | 0;
 nullFunc_ii(28); //@line 614
 return 0; //@line 614
}
function b13(p0) {
 p0 = p0 | 0;
 nullFunc_ii(27); //@line 611
 return 0; //@line 611
}
function b12(p0) {
 p0 = p0 | 0;
 nullFunc_ii(26); //@line 608
 return 0; //@line 608
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(25); //@line 605
 return 0; //@line 605
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(24); //@line 602
 return 0; //@line 602
}
function __ZN17EthernetInterface7connectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 169
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_77($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(23); //@line 599
 return 0; //@line 599
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(22); //@line 596
 return 0; //@line 596
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(21); //@line 593
 return 0; //@line 593
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(20); //@line 590
 return 0; //@line 590
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(19); //@line 587
 return 0; //@line 587
}
function b4(p0) {
 p0 = p0 | 0;
 nullFunc_ii(18); //@line 584
 return 0; //@line 584
}
function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 581
 return 0; //@line 581
}
function b219(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 1208
}
function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}
function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}
function _abort_message__async_cb_87($0) {
 $0 = $0 | 0;
 _abort(); //@line 22591
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(7296); //@line 5242
 return 7304; //@line 5243
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __ZN9UDPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 1; //@line 5192
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 725
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 12614
}
function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}
function ___pthread_self_913() {
 return _pthread_self() | 0; //@line 9718
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 12620
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZdaPv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 13996
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function __ZN6SocketD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 4081
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 13981
 return;
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 449
}
function __ZThn4_N17EthernetInterfaceD1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_115($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 445
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function b1() {
 nullFunc_i(0); //@line 578
 return 0; //@line 578
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(7296); //@line 5248
 return;
}
function __ZN6SocketD2Ev__async_cb_97($0) {
 $0 = $0 | 0;
 return;
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(511); //@line 1205
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(510); //@line 1202
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(509); //@line 1199
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(508); //@line 1196
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(507); //@line 1193
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(506); //@line 1190
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(505); //@line 1187
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(504); //@line 1184
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(503); //@line 1181
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(502); //@line 1178
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(501); //@line 1175
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(500); //@line 1172
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(499); //@line 1169
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(498); //@line 1166
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(497); //@line 1163
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(496); //@line 1160
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(495); //@line 1157
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(494); //@line 1154
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(493); //@line 1151
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(492); //@line 1148
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(491); //@line 1145
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(490); //@line 1142
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(489); //@line 1139
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(488); //@line 1136
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(487); //@line 1133
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(486); //@line 1130
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(485); //@line 1127
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(484); //@line 1124
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(483); //@line 1121
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(482); //@line 1118
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(481); //@line 1115
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(480); //@line 1112
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(479); //@line 1109
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(478); //@line 1106
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(477); //@line 1103
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(476); //@line 1100
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(475); //@line 1097
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(474); //@line 1094
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(473); //@line 1091
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(472); //@line 1088
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(471); //@line 1085
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(470); //@line 1082
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(469); //@line 1079
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(468); //@line 1076
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(467); //@line 1073
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(466); //@line 1070
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(465); //@line 1067
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(464); //@line 1064
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(463); //@line 1061
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(462); //@line 1058
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(461); //@line 1055
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(460); //@line 1052
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(459); //@line 1049
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(458); //@line 1046
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(457); //@line 1043
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(456); //@line 1040
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(455); //@line 1037
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(454); //@line 1034
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(453); //@line 1031
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(452); //@line 1028
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(451); //@line 1025
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(450); //@line 1022
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(449); //@line 1019
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(448); //@line 1016
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(447); //@line 1013
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(446); //@line 1010
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(445); //@line 1007
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(444); //@line 1004
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(443); //@line 1001
}
function __ZN17EthernetInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(442); //@line 998
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(441); //@line 995
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(440); //@line 992
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(439); //@line 989
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(438); //@line 986
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(437); //@line 983
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(436); //@line 980
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(435); //@line 977
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(434); //@line 974
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(433); //@line 971
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(432); //@line 968
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(431); //@line 965
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(430); //@line 962
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(429); //@line 959
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(428); //@line 956
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(427); //@line 953
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(426); //@line 950
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(425); //@line 947
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(424); //@line 944
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(423); //@line 941
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(422); //@line 938
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(421); //@line 935
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(420); //@line 932
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(419); //@line 929
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(418); //@line 926
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(417); //@line 923
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(416); //@line 920
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(415); //@line 917
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(414); //@line 914
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(413); //@line 911
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(412); //@line 908
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(411); //@line 905
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(410); //@line 902
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(409); //@line 899
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(408); //@line 896
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(407); //@line 893
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(406); //@line 890
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(405); //@line 887
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(404); //@line 884
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(403); //@line 881
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(402); //@line 878
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(401); //@line 875
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(400); //@line 872
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(399); //@line 869
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(398); //@line 866
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(397); //@line 863
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(396); //@line 860
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(395); //@line 857
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(394); //@line 854
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 4551
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 4879
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(393); //@line 851
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(392); //@line 848
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(391); //@line 845
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(390); //@line 842
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(389); //@line 839
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(388); //@line 836
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(387); //@line 833
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(386); //@line 830
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(385); //@line 827
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(384); //@line 824
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(383); //@line 821
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(382); //@line 818
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(381); //@line 815
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(380); //@line 812
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(379); //@line 809
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(378); //@line 806
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(377); //@line 803
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(376); //@line 800
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(375); //@line 797
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(374); //@line 794
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(373); //@line 791
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(372); //@line 788
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(371); //@line 785
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(370); //@line 782
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(369); //@line 779
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(368); //@line 776
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(367); //@line 773
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(366); //@line 770
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(365); //@line 767
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(364); //@line 764
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(363); //@line 761
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(362); //@line 758
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(361); //@line 755
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(360); //@line 752
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(359); //@line 749
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(358); //@line 746
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(357); //@line 743
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(356); //@line 740
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 737
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt9terminatev__async_cb_213($0) {
 $0 = $0 | 0;
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function ___errno_location() {
 return 7292; //@line 4545
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _pthread_self() {
 return 1212; //@line 4598
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b59() {
 nullFunc_v(7); //@line 734
}
function b58() {
 nullFunc_v(6); //@line 731
}
function b57() {
 nullFunc_v(5); //@line 728
}
function b56() {
 nullFunc_v(0); //@line 722
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1];
var FUNCTION_TABLE_ii = [b3,__ZN17EthernetInterface15get_mac_addressEv,__ZN17EthernetInterface14get_ip_addressEv,__ZN17EthernetInterface11get_netmaskEv,__ZN17EthernetInterface11get_gatewayEv,__ZN17EthernetInterface7connectEv,__ZN17EthernetInterface10disconnectEv,__ZNK16NetworkInterface21get_connection_statusEv,__ZN16NetworkInterface12ethInterfaceEv,__ZN16NetworkInterface13wifiInterfaceEv,__ZN16NetworkInterface13meshInterfaceEv,__ZN16NetworkInterface12cellularBaseEv,__ZN16NetworkInterface13emacInterfaceEv,__ZN17EthernetInterface9get_stackEv,__ZThn4_N17EthernetInterface14get_ip_addressEv,__ZN12NetworkStack19onboardNetworkStackEv,__ZN9UDPSocket9get_protoEv,___stdio_close,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14
,b15,b16,b17];
var FUNCTION_TABLE_iii = [b19,__ZN16NetworkInterface26gethostbyname_async_cancelEi,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress,__ZN17EthernetInterface8set_dhcpEb,__ZN16NetworkInterface12set_blockingEb,__ZN17EthernetInterface12socket_closeEPv,__ZN12NetworkStack26gethostbyname_async_cancelEi,__ZN12NetworkStack14add_dns_serverERK13SocketAddress,__ZThn4_N17EthernetInterface12socket_closeEPv,b20,b21,b22,b23,b24,b25,b26];
var FUNCTION_TABLE_iiii = [b28,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZN17EthernetInterface13socket_listenEPvi,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack14get_dns_serverEiP13SocketAddress,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZThn4_N17EthernetInterface13socket_listenEPvi,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_do_read,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39
,b40,b41,b42];
var FUNCTION_TABLE_iiiii = [b44,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZN17EthernetInterface11set_networkEPKcS1_S1_,__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZN17EthernetInterface11socket_sendEPvPKvj,__ZN17EthernetInterface11socket_recvEPvS0_j,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j,b45,b46,b47,b48];
var FUNCTION_TABLE_iiiiii = [b50,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,__ZN12NetworkStack11setstackoptEiiPKvj,__ZN12NetworkStack11getstackoptEiiPvPj,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,b51];
var FUNCTION_TABLE_iiiiiii = [b53,__ZN12NetworkStack10setsockoptEPviiPKvj,__ZN12NetworkStack10getsockoptEPviiS0_Pj,b54];
var FUNCTION_TABLE_v = [b56,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZL29nsapi_dns_query_async_timeoutv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b57,b58,b59];
var FUNCTION_TABLE_vi = [b61,__ZN17EthernetInterfaceD2Ev,__ZN17EthernetInterfaceD0Ev,__ZThn4_N17EthernetInterfaceD1Ev,__ZThn4_N17EthernetInterfaceD0Ev,_mbed_trace_default_print,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv,__ZN6SocketD2Ev,__ZN6SocketD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv,__ZN9UDPSocketD2Ev,__ZN9UDPSocketD0Ev,__ZN9UDPSocket5eventEv,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN17EthernetInterface15get_mac_addressEv__async_cb,__ZN17EthernetInterface14get_ip_addressEv__async_cb,__ZN17EthernetInterface11get_netmaskEv__async_cb
,__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb,__ZN17EthernetInterface8set_dhcpEb__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_75,__ZN17EthernetInterface12socket_closeEPv__async_cb,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_167,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_168,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_166,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_121,__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_74,__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_164,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_165,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_163,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_149,_equeue_alloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb
,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_113,_mbed_vtracef__async_cb_103,_mbed_vtracef__async_cb_104,_mbed_vtracef__async_cb_105,_mbed_vtracef__async_cb_112,_mbed_vtracef__async_cb_106,_mbed_vtracef__async_cb_111,_mbed_vtracef__async_cb_107,_mbed_vtracef__async_cb_108,_mbed_vtracef__async_cb_109,_mbed_vtracef__async_cb_110,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_206,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_17,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_18,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_19,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_20,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_73,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_88,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_96,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_131
,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_123,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_124,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_125,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_126,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_130,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_127,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_128,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_129,__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_41,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_33,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_39,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_34,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_35,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_40,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_36,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_38,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_37,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_23,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_24,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_25,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_26,__ZN6SocketD2Ev__async_cb,__ZN6SocketD2Ev__async_cb_97,__ZN6Socket4openEP12NetworkStack__async_cb
,__ZN6Socket4openEP12NetworkStack__async_cb_140,__ZN6Socket4openEP12NetworkStack__async_cb_141,__ZN6Socket4openEP12NetworkStack__async_cb_142,__ZN6Socket4openEP12NetworkStack__async_cb_143,__ZN4mbed8CallbackIFvvEE5thunkEPv,__ZN6Socket4openEP12NetworkStack__async_cb_144,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_122,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb,__ZN6Socket5closeEv__async_cb,__ZN6Socket5closeEv__async_cb_184,__ZN6Socket5closeEv__async_cb_185,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_16,__ZN9UDPSocketD2Ev__async_cb_116,__ZN9UDPSocketD2Ev__async_cb,__ZN9UDPSocketD2Ev__async_cb_115,__ZN9UDPSocketD0Ev__async_cb,__ZN9UDPSocket5eventEv__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_32,__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb,__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_69,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_66,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_65,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_64,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_68,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_67
,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_146,__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_99,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_102,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_100,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_101,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_204,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_200,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_201,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_191,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_192,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_193,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_194,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_195,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_203,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_196,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_197,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_198,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_199,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_202,__ZL29nsapi_dns_query_async_timeoutv__async_cb_158,__ZL29nsapi_dns_query_async_timeoutv__async_cb_159,__ZL29nsapi_dns_query_async_timeoutv__async_cb,__ZL30nsapi_dns_query_async_responsePv,__ZL29nsapi_dns_query_async_timeoutv__async_cb_162,__ZL29nsapi_dns_query_async_timeoutv__async_cb_150,__ZL29nsapi_dns_query_async_timeoutv__async_cb_151
,__ZL29nsapi_dns_query_async_timeoutv__async_cb_152,__ZL26nsapi_dns_query_async_sendPv,__ZL29nsapi_dns_query_async_timeoutv__async_cb_161,__ZL29nsapi_dns_query_async_timeoutv__async_cb_153,__ZL29nsapi_dns_query_async_timeoutv__async_cb_154,__ZL29nsapi_dns_query_async_timeoutv__async_cb_155,__ZL29nsapi_dns_query_async_timeoutv__async_cb_160,__ZL29nsapi_dns_query_async_timeoutv__async_cb_156,__ZL29nsapi_dns_query_async_timeoutv__async_cb_157,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_173,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_169,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_170,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_172,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_171,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb,__ZL28nsapi_dns_query_async_createPv,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_29,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_27,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_28,__ZL28nsapi_dns_query_async_createPv__async_cb_52,__ZL28nsapi_dns_query_async_createPv__async_cb_59,__ZL28nsapi_dns_query_async_createPv__async_cb,__ZL28nsapi_dns_query_async_createPv__async_cb_55,__ZL28nsapi_dns_query_async_createPv__async_cb_57,__ZL28nsapi_dns_query_async_createPv__async_cb_42,__ZL28nsapi_dns_query_async_createPv__async_cb_43,__ZL28nsapi_dns_query_async_createPv__async_cb_44,__ZL28nsapi_dns_query_async_createPv__async_cb_45,__ZL28nsapi_dns_query_async_createPv__async_cb_54
,__ZL28nsapi_dns_query_async_createPv__async_cb_56,__ZL28nsapi_dns_query_async_createPv__async_cb_46,__ZL28nsapi_dns_query_async_createPv__async_cb_47,__ZL28nsapi_dns_query_async_createPv__async_cb_51,__ZL28nsapi_dns_query_async_createPv__async_cb_48,__ZL28nsapi_dns_query_async_createPv__async_cb_49,__ZL37nsapi_dns_query_async_socket_callbackPv,__ZL28nsapi_dns_query_async_createPv__async_cb_58,__ZL28nsapi_dns_query_async_createPv__async_cb_50,__ZL28nsapi_dns_query_async_createPv__async_cb_53,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb,__ZL28nsapi_dns_query_async_deletei__async_cb_94,__ZL28nsapi_dns_query_async_deletei__async_cb,__ZL28nsapi_dns_query_async_deletei__async_cb_91,__ZL28nsapi_dns_query_async_deletei__async_cb_92,__ZL28nsapi_dns_query_async_deletei__async_cb_93,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_63,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_61,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_62,__ZL26nsapi_dns_query_async_sendPv__async_cb,__ZL26nsapi_dns_query_async_sendPv__async_cb_83,__ZL26nsapi_dns_query_async_sendPv__async_cb_85,__ZL26nsapi_dns_query_async_sendPv__async_cb_76,__ZL26nsapi_dns_query_async_sendPv__async_cb_77,__ZL26nsapi_dns_query_async_sendPv__async_cb_78,__ZL26nsapi_dns_query_async_sendPv__async_cb_79,__ZL26nsapi_dns_query_async_sendPv__async_cb_82,__ZL26nsapi_dns_query_async_sendPv__async_cb_84
,__ZL26nsapi_dns_query_async_sendPv__async_cb_80,__ZL26nsapi_dns_query_async_sendPv__async_cb_81,__ZL26nsapi_dns_query_async_sendPv__async_cb_86,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_137,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_136,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_134,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_135,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_132,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_133,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_210,__ZL30nsapi_dns_query_async_responsePv__async_cb_209,__ZL30nsapi_dns_query_async_responsePv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_211,__ZL30nsapi_dns_query_async_responsePv__async_cb_212,__ZL30nsapi_dns_query_async_responsePv__async_cb_207,__ZL30nsapi_dns_query_async_responsePv__async_cb_208,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_190,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_186,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_187,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_188,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_189,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb,__Z28nsapi_dns_query_async_canceli__async_cb,__Z28nsapi_dns_query_async_canceli__async_cb_21,__Z28nsapi_dns_query_async_canceli__async_cb_22,_mbed_assert_internal__async_cb,_mbed_die__async_cb_15
,_mbed_die__async_cb_14,_mbed_die__async_cb_13,_mbed_die__async_cb_12,_mbed_die__async_cb_11,_mbed_die__async_cb_10,_mbed_die__async_cb_9,_mbed_die__async_cb_8,_mbed_die__async_cb_7,_mbed_die__async_cb_6,_mbed_die__async_cb_5,_mbed_die__async_cb_4,_mbed_die__async_cb_3,_mbed_die__async_cb_2,_mbed_die__async_cb_1,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_90,_mbed_error_vfprintf__async_cb_89,_serial_putc__async_cb_147,_serial_putc__async_cb,_invoke_ticker__async_cb_145,_invoke_ticker__async_cb,_wait_ms__async_cb,_main__async_cb_174,_main__async_cb,_main__async_cb_183,_main__async_cb_175,_main__async_cb_177,_main__async_cb_182
,_main__async_cb_176,_main__async_cb_181,_main__async_cb_179,_main__async_cb_180,_main__async_cb_178,__ZN9UDPSocketC2I17EthernetInterfaceEEPT___async_cb,__ZN9UDPSocketC2I17EthernetInterfaceEEPT___async_cb_205,_putc__async_cb_95,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_71,_fflush__async_cb_70,_fflush__async_cb_72,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_60,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_fputc__async_cb_31,_fputc__async_cb,_puts__async_cb,__Znwj__async_cb,__ZnwjRKSt9nothrow_t__async_cb,__Znaj__async_cb,__ZnajRKSt9nothrow_t__async_cb,__ZL25default_terminate_handlerv__async_cb
,__ZL25default_terminate_handlerv__async_cb_138,_abort_message__async_cb,_abort_message__async_cb_87,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_30,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_148,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_98,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_139,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_120,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_119,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_118,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_117,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_114,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b62,b63,b64
,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94
,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124
,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154
,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184
,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214
,b215,b216,b217];
var FUNCTION_TABLE_vii = [b219,__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE,__ZN12NetworkStack20get_call_in_callbackEv,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv];
var FUNCTION_TABLE_viii = [b221];
var FUNCTION_TABLE_viiii = [b223,__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b224,b225];
var FUNCTION_TABLE_viiiii = [b227,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b229,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];

  return { ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=ntp.js.map